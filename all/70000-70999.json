[{"original_method":"public void updateStep() {\n    super.updateStep();\n    myNamePathComponent.setPath(myWizardContext.getProjectFileDirectory());\n    String name = myWizardContext.getProjectName();\n    if (name == null) {\n      List<String> components = StringUtil.split(FileUtil.toSystemIndependentName(myWizardContext.getProjectFileDirectory()), \"/\");\n      if (!components.isEmpty()) {\n        name = components.get(components.size()-1);\n      }\n    }\n    myNamePathComponent.setNameValue(name);\n    if (name != null) {\n      myNamePathComponent.getNameComponent().setSelectionStart(0);\n      myNamePathComponent.getNameComponent().setSelectionEnd(name.length());\n    }\n  }","id":70000,"modified_method":"public void updateStep() {\n    super.updateStep();\n    myNamePathComponent.setPath(FileUtil.toSystemDependentName(myWizardContext.getProjectFileDirectory()));\n    String name = myWizardContext.getProjectName();\n    if (name == null) {\n      List<String> components = StringUtil.split(FileUtil.toSystemIndependentName(myWizardContext.getProjectFileDirectory()), \"/\");\n      if (!components.isEmpty()) {\n        name = components.get(components.size()-1);\n      }\n    }\n    myNamePathComponent.setNameValue(name);\n    if (name != null) {\n      myNamePathComponent.getNameComponent().setSelectionStart(0);\n      myNamePathComponent.getNameComponent().setSelectionEnd(name.length());\n    }\n  }","commit_id":"98da9890a7b5e7577da7dc2bcc45194cbdad5a04","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void updateStep() {\n    super.updateStep();\n    myNamePathComponent.setPath(myWizardContext.getProjectFileDirectory());\n    String name = myWizardContext.getProjectName();\n    if (name == null) {\n      List<String> components = StringUtil.split(FileUtil.toSystemIndependentName(myWizardContext.getProjectFileDirectory()), \"/\");\n      if (!components.isEmpty()) {\n        name = components.get(components.size()-1);\n      }\n    }\n    myNamePathComponent.setNameValue(name);\n    if (name != null) {\n      myNamePathComponent.getNameComponent().setSelectionStart(0);\n      myNamePathComponent.getNameComponent().setSelectionEnd(name.length());\n    }\n  }","id":70001,"modified_method":"public void updateStep() {\n    super.updateStep();\n    myNamePathComponent.setPath(FileUtil.toSystemDependentName(myWizardContext.getProjectFileDirectory()));\n    String name = myWizardContext.getProjectName();\n    if (name == null) {\n      List<String> components = StringUtil.split(FileUtil.toSystemIndependentName(myWizardContext.getProjectFileDirectory()), \"/\");\n      if (!components.isEmpty()) {\n        name = components.get(components.size()-1);\n      }\n    }\n    myNamePathComponent.setNameValue(name);\n    if (name != null) {\n      myNamePathComponent.getNameComponent().setSelectionStart(0);\n      myNamePathComponent.getNameComponent().setSelectionEnd(name.length());\n    }\n  }","commit_id":"b26af7fcdc4bdf6c95c365d75ca667ad9f246a06","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean validate() throws ConfigurationException {\n    String name = myNamePathComponent.getNameValue();\n    if (name.length() == 0) {\n      final ApplicationInfo info = ApplicationManager.getApplication().getComponent(ApplicationInfo.class);\n      throw new ConfigurationException(IdeBundle.message(\"prompt.new.project.file.name\", info.getVersionName(), myWizardContext.getPresentationName()));\n    }\n\n    final String projectFileDirectory = getProjectFileDirectory();\n    if (projectFileDirectory.length() == 0) {\n      throw new ConfigurationException(IdeBundle.message(\"prompt.enter.project.file.location\", myWizardContext.getPresentationName()));\n    }\n\n    final boolean shouldPromptCreation = myNamePathComponent.isPathChangedByUser();\n    if (!ProjectWizardUtil.createDirectoryIfNotExists(IdeBundle.message(\"directory.project.file.directory\",myWizardContext.getPresentationName()), projectFileDirectory, shouldPromptCreation)) {\n      return false;\n    }\n\n    boolean shouldContinue = true;\n    final File projectFile = new File(getProjectFilePath());\n    if (projectFile.exists()) {\n      int answer = Messages.showYesNoDialog(\n        IdeBundle.message(\"prompt.overwrite.project.file\", projectFile.getAbsolutePath(), myWizardContext.getPresentationName()),\n        IdeBundle.message(\"title.file.already.exists\"),\n        Messages.getQuestionIcon()\n      );\n      shouldContinue = answer == 0;\n    }\n\n    return shouldContinue;\n  }","id":70002,"modified_method":"public boolean validate() throws ConfigurationException {\n    String name = myNamePathComponent.getNameValue();\n    if (name.length() == 0) {\n      final ApplicationInfo info = ApplicationManager.getApplication().getComponent(ApplicationInfo.class);\n      throw new ConfigurationException(IdeBundle.message(\"prompt.new.project.file.name\", info.getVersionName(), myWizardContext.getPresentationName()));\n    }\n\n    final String projectFileDirectory = getProjectFileDirectory();\n    if (projectFileDirectory.length() == 0) {\n      throw new ConfigurationException(IdeBundle.message(\"prompt.enter.project.file.location\", myWizardContext.getPresentationName()));\n    }\n\n    final boolean shouldPromptCreation = myNamePathComponent.isPathChangedByUser();\n    if (!ProjectWizardUtil.createDirectoryIfNotExists(IdeBundle.message(\"directory.project.file.directory\",myWizardContext.getPresentationName()), projectFileDirectory, shouldPromptCreation)) {\n      return false;\n    }\n\n    boolean shouldContinue = true;\n\n    final String path = myWizardContext.isCreatingNewProject() && myWizardContext.getProjectStorageFormat() == DIRECTORY_BASED\n                        ? getProjectFileDirectory() + \"/\" + ProjectUtil.DIRECTORY_BASED_PROJECT_DIR\n                        : getProjectFilePath();\n    final File projectFile = new File(path);\n    if (projectFile.exists()) {\n      final String title = myWizardContext.isCreatingNewProject()\n                           ? IdeBundle.message(\"title.new.project\")\n                           : IdeBundle.message(\"title.add.module\");\n      final String message = myWizardContext.isCreatingNewProject() && myWizardContext.getProjectStorageFormat() == DIRECTORY_BASED\n                             ? IdeBundle.message(\"prompt.overwrite.project.folder\", ProjectUtil.DIRECTORY_BASED_PROJECT_DIR,\n                                                 projectFile.getParentFile().getAbsolutePath())\n                             : IdeBundle.message(\"prompt.overwrite.project.file\", projectFile.getAbsolutePath(),\n                                                 myWizardContext.getPresentationName());\n      int answer = Messages.showYesNoDialog(message, title, Messages.getQuestionIcon());\n      shouldContinue = answer == 0;\n    }\n\n    return shouldContinue;\n  }","commit_id":"b26af7fcdc4bdf6c95c365d75ca667ad9f246a06","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String getProjectFileDirectory() {\n    return myNamePathComponent.getPath();\n  }","id":70003,"modified_method":"public String getProjectFileDirectory() {\n    return FileUtil.toSystemIndependentName(myNamePathComponent.getPath());\n  }","commit_id":"b26af7fcdc4bdf6c95c365d75ca667ad9f246a06","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void highlightXtendField(XtendField field, IHighlightedPositionAcceptor acceptor) {\n\t\tif(field.getName() != null && field.getName().length() > 0){\n\t\t\tList<INode> nodes = NodeModelUtils.findNodesForFeature(field, Xtend2Package.Literals.XTEND_FIELD__NAME);\n\t\t\tif(nodes.size() > 0)\n\t\t\t\thighlightNode(nodes.get(0), XbaseHighlightingConfiguration.FIELD, acceptor);\n\t\t}\n\t}","id":70004,"modified_method":"protected void highlightXtendField(XtendField field, IHighlightedPositionAcceptor acceptor) {\n\t\tif(field.getName() != null && field.getName().length() > 0){\n\t\t\tList<INode> nodes = NodeModelUtils.findNodesForFeature(field, Xtend2Package.Literals.XTEND_FIELD__NAME);\n\t\t\tif(nodes.size() > 0){\n\t\t\t\tINode node = nodes.get(0);\n\t\t\t\thighlightNode(node, XbaseHighlightingConfiguration.FIELD, acceptor);\n\t\t\t\tif(field.isStatic())\n\t\t\t\t\thighlightNode(node, XbaseHighlightingConfiguration.STATIC_FIELD, acceptor);\n\t\t\t}\n\t\t}\n\t}","commit_id":"585c4a1c75c2a73543cf581f191f183e5c9ba9bc","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\r\n   * Returns pre value at given level and index.\r\n   * @param l level\r\n   * @param i index\r\n   * @return pre value\r\n   */\r\n  int getPrePerLevelAndIndex(final int l, final int i) {\r\n    return nodesPerLevel.get(l)[i];\r\n  }","id":70005,"modified_method":"/**\r\n   * Returns pre value at given level and index.\r\n   * @param l level\r\n   * @param i index\r\n   * @return pre value\r\n   */\r\n  int getPrePerLevelAndIndex(final int l, final int i) {\r\n    return nodes[l][i];\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Generates cached rectangles.\r\n   * @param g graphics reference\r\n   * @param c database context\r\n   * @param sW screen width\r\n   */\r\n  void generateRects(final Graphics g, final Context c, final int sW) {\r\n\r\n    final Data d = c.data;\r\n    final int[] roots = c.current.nodes;\r\n    final int rc = roots.length;\r\n    final double width = sW / (double) rc;\r\n\r\n    for(int r = 0; r < rc; r++) {\r\n\r\n      final int root = roots[r];\r\n\r\n      if(root > 0) {\r\n//        generateLevelBorders(d, root);\r\n      }\r\n\r\n      rectsPerLevel = new ArrayList<RectangleCache[]>();\r\n      bigRectangle = new boolean[maxLevel];\r\n\r\n      for(int i = 0; i < maxLevel; i++) {\r\n        final int[] currLine = nodesPerLevel.get(i);\r\n        final int lS = currLine.length;\r\n        final double w = width / lS;\r\n\r\n        if(w < 2) {\r\n          bigRectangle[i] = true;\r\n          rectsPerLevel.add(bigRectangle(width));\r\n        } else {\r\n          bigRectangle[i] = false;\r\n          rectsPerLevel.add(normalRectangle(g, d, i, w, lS));\r\n        }\r\n      }\r\n      rectsPerLevel.trimToSize();\r\n    }\r\n  }","id":70006,"modified_method":"/**\r\n   * Create new rectangles and set subtree borders.\r\n   * @param g graphics reference\r\n   * @param c context\r\n   * @param sw screen width\r\n   */\r\n  void generateBordersAndRects(final Graphics g, \r\n      final Context c, final int sw) {\r\n\r\n    final Data d = c.current.data;\r\n    int[] roots = c.current.nodes;\r\n    final int rl = roots.length;\r\n    TreeBorder[][] bo = new TreeBorder[rl][];\r\n    rects = new TreeRect[rl][][];\r\n\r\n    for(int i = 0; i < rl; i++) {\r\n      bo[i] = generateSubtreeBorders(d, roots[i]);\r\n      generateRects(g, i, d, bo[i], sw - rl);\r\n    }\r\n    border = bo;\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns TreeRects in given level.\r\n   * @param l level\r\n   * @return TreeRect array\r\n   */\r\n  TreeRect[] getTreeRectsPerLevel(final int l) {\r\n    final int s = isBigRectangle(l) ? 1 : getSizePerLevel(l);\r\n    final TreeRect[] tr = new TreeRect[s];\r\n\r\n    for(int i = 0; i < s; i++) {\r\n      tr[i] = getTreeRect(l, i);\r\n    }\r\n    return tr;\r\n  }","id":70007,"modified_method":"/**\r\n   * Returns TreeRects in given level.\r\n   * @param rn root number\r\n   * @param lv level\r\n   * @return TreeRect array\r\n   */\r\n  TreeRect[] getTreeRectsPerLevel(final int rn, final int lv) {\r\n    return rects[rn][lv];\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Extends CachedRect to TreeRect.\r\n   * @param l level\r\n   * @param i index\r\n   * @return TreeRect\r\n   */\r\n  private TreeRect getTreeRect(final int l, final int i) {\r\n    final TreeRect r = new TreeRect(rectsPerLevel.get(l)[i]);\r\n    r.pre = isBigRectangle(l) ? -1 : nodesPerLevel.get(l)[i];\r\n    return r;\r\n  }","id":70008,"modified_method":"/**\r\n   * Returns TreeBorder.\r\n   * @param rn root\r\n   * @param lv level\r\n   * @return TreeBorder\r\n   */\r\n  private TreeBorder getTreeBorder(final int rn, final int lv) {\r\n    return border[rn][lv];\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Uses binary search to find the rectangle with given pre value.\r\n   * @param lv level\r\n   * @param pre the pre value to be found\r\n   * @return the rectangle containing the given pre value, null else\r\n   */\r\n  TreeRect searchRect(final int lv, final int pre) {\r\n\r\n    final int[] pres = nodesPerLevel.get(lv);\r\n    TreeRect rect = null;\r\n    int l = 0;\r\n    int r = pres.length - 1;\r\n    int m = -1;\r\n\r\n    while(r >= l && rect == null) {\r\n      m = l + (r - l) / 2;\r\n\r\n      if(pres[m] < pre) {\r\n        l = m + 1;\r\n      } else if(pres[m] > pre) {\r\n        r = m - 1;\r\n      } else {\r\n        rect = getTreeRect(lv, m);\r\n      }\r\n    }\r\n    return rect;\r\n  }","id":70009,"modified_method":"/**\r\n   * Uses binary search to find the rectangle with given pre value.\r\n   * @param rn root number\r\n   * @param lv level\r\n   * @param pre the pre value to be found\r\n   * @return the rectangle containing the given pre value, null else\r\n   */\r\n  TreeRect searchRect(final int rn, final int lv, final int pre) {\r\n    final TreeBorder bo = getTreeBorder(rn, lv);\r\n\r\n    int i = searchPreArrayPos(bo.level, pre);\r\n\r\n    return i == -1 ? null : rects[rn][lv][i - bo.start];\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Determines nodes in each level and caches them.\r\n   * @param data data reference\r\n   */\r\n  private void cacheNodes(final Data data) {\r\n\r\n    nodesPerLevel = null;\r\n    final ArrayList<int[]> nL = new ArrayList<int[]>();\r\n\r\n    int[] parentList = { 0};\r\n    int level = 0;\r\n\r\n    while(maxLevel > level++) {\r\n      nL.add(parentList);\r\n      parentList = getNextNodeLine(parentList, data);\r\n    }\r\n    nL.trimToSize();\r\n    nodesPerLevel = nL;\r\n  }","id":70010,"modified_method":"/**\r\n   * Determines nodes in each level and caches them.\r\n   * @param data data reference\r\n   */\r\n  private void cacheNodes(final Data data) {\r\n\r\n    // long time = System.currentTimeMillis();\r\n    nodes = new int[maxLevel][];\r\n\r\n    if(USE_CHILDITERATOR) {\r\n\r\n      int[] parentList = { 0};\r\n      int l = 0;\r\n\r\n      while(maxLevel > l) {\r\n        nodes[l++] = parentList;\r\n        parentList = getNextNodeLine(parentList, data);\r\n      }\r\n    } else {\r\n\r\n      IntList[] li = new IntList[maxLevel];\r\n      for(int i = 0; i < maxLevel; i++)\r\n        li[i] = new IntList();\r\n\r\n      final int ts = data.meta.size;\r\n      int[] lvlPre = new int[maxLevel];\r\n      lvlPre[0] = 0;\r\n\r\n      for(int p = 1; p < ts; p++) {\r\n\r\n        final int k = data.kind(p);\r\n        if(k == Data.ATTR) continue;\r\n        int lv = 0;\r\n        final int par = data.parent(p, k);\r\n        while(par != lvlPre[lv])\r\n          lv++;\r\n\r\n        lvlPre[lv + 1] = p;\r\n        li[lv + 1].add(p);\r\n      }\r\n      nodes[0] = new int[] { 0};\r\n      for(int i = 1; i < maxLevel; i++)\r\n        nodes[i] = li[i].finish();\r\n    }\r\n    // System.out.println(System.currentTimeMillis() - time);\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Creates normal rectangles.\r\n   * @param g graphics reference\r\n   * @param d data reference\r\n   * @param l level\r\n   * @param w width\r\n   * @param s size\r\n   * @return rectangles\r\n   */\r\n  private RectangleCache[] normalRectangle(final Graphics g, final Data d,\r\n      final int l, final double w, final int s) {\r\n\r\n    double xx = 0;\r\n    double ww = w;\r\n\r\n    // new array, to be filled with the rectangles of the current level\r\n    final RectangleCache[] rects = new RectangleCache[s];\r\n\r\n    for(int i = 0; i < s; i++) {\r\n\r\n      final double boxMiddle = xx + ww / 2f;\r\n\r\n      if(SLIM_TO_TEXT) {\r\n        final String st = getText(d, getPrePerLevelAndIndex(l, i));\r\n        int o = calcOptimalRectWidth(g, st) + 10;\r\n        if(o < MIN_SPACE) o = MIN_SPACE;\r\n\r\n        if(w > o) {\r\n          xx = boxMiddle - o / 2d;\r\n          ww = o;\r\n        }\r\n      }\r\n\r\n      final RectangleCache rect = new RectangleCache((int) xx, (int) ww);\r\n\r\n      rects[i] = rect;\r\n\r\n      xx += w;\r\n    }\r\n\r\n    return rects;\r\n  }","id":70011,"modified_method":"/**\r\n   * Creates normal rectangles.\r\n   * @param g graphics reference\r\n   * @param rn root\r\n   * @param lv level\r\n   * @param d data reference\r\n   * @param w width\r\n   * @param bo TreeBorder\r\n   */\r\n  private void normalRectangle(final Graphics g, final int rn, final int lv,\r\n      final Data d, final double w, final TreeBorder bo) {\r\n\r\n    double xx = 0;\r\n    double ww = w;\r\n\r\n    // new array, to be filled with the rectangles of the current level\r\n    rects[rn][lv] = new TreeRect[bo.size];\r\n\r\n    for(int i = bo.start; i < bo.start + bo.size; i++) {\r\n\r\n      final double boxMiddle = xx + ww / 2f;\r\n\r\n      if(SLIM_TO_TEXT) {\r\n        final String st = getText(d, getPrePerLevelAndIndex(bo.level, i));\r\n        int o = calcOptimalRectWidth(g, st) + 10;\r\n        if(o < MIN_SPACE) o = MIN_SPACE;\r\n\r\n        if(w > o) {\r\n          xx = boxMiddle - o / 2d;\r\n          ww = o;\r\n        }\r\n      }\r\n      rects[rn][lv][i - bo.start] = new TreeRect((int) xx, (int) ww);\r\n\r\n      xx += w;\r\n    }\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns true if big rectangle, false else.\r\n   * @param l level\r\n   * @return boolean\r\n   */\r\n  boolean isBigRectangle(final int l) {\r\n    return bigRectangle[l];\r\n  }","id":70012,"modified_method":"/**\r\n   * Returns true if big rectangle, false else.\r\n   * @param rn root\r\n   * @param lv level\r\n   * @return boolean\r\n   */\r\n  boolean isBigRectangle(final int rn, final int lv) {\r\n    return getTreeBorder(rn, lv).size > rects[rn][lv].length;\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Invoked if not enough space for more than one big rectangle.\r\n   * @param w the width\r\n   * @return big rectangle\r\n   */\r\n  private RectangleCache[] bigRectangle(final double w) {\r\n    final RectangleCache bigRect = new RectangleCache(0, (int) w);\r\n    final RectangleCache[] rL = { bigRect};\r\n    return rL;\r\n  }","id":70013,"modified_method":"/**\r\n   * Invoked if not enough space for more than one big rectangle.\r\n   * @param rn root\r\n   * @param lv level\r\n   * @param w the width\r\n   */\r\n  private void bigRectangle(final int rn, final int lv, final double w) {\r\n    rects[rn][lv] = new TreeRect[1];\r\n    rects[rn][lv][0] = new TreeRect(0, (int) w);\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns size of given level.\r\n   * @param l level\r\n   * @return size\r\n   */\r\n  int getSizePerLevel(final int l) {\r\n    return nodesPerLevel.get(l).length;\r\n  }","id":70014,"modified_method":"/**\r\n   * Returns level size.\r\n   * @param rn root\r\n   * @param lv level\r\n   * @return size\r\n   */\r\n  int getLevelSize(final int rn, final int lv) {\r\n    return border[rn][lv].size;\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Determines the index position of given pre value.\r\n   * @param lv level to be searched\r\n   * @param pre the pre value\r\n   * @return the determined index position\r\n   */\r\n  int searchPreArrayPosition(final int lv, final int pre) {\r\n\r\n    final int[] a = nodesPerLevel.get(lv);\r\n    int index = -1;\r\n    int l = 0;\r\n    int r = a.length - 1;\r\n\r\n    while(r >= l && index == -1) {\r\n      final int m = l + (r - l) / 2;\r\n\r\n      if(a[m] < pre) {\r\n        l = m + 1;\r\n      } else if(a[m] > pre) {\r\n        r = m - 1;\r\n      } else {\r\n        index = m;\r\n      }\r\n    }\r\n    return index;\r\n  }","id":70015,"modified_method":"/**\r\n   * Determines the index position of given pre value.\r\n   * @param lv level to be searched\r\n   * @param pre the pre value\r\n   * @return the determined index position\r\n   */\r\n  private int searchPreArrayPos(final int lv, final int pre) {\r\n    return searchPreIndex(lv, pre, pre, 0, nodes[lv].length - 1);\r\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Draws the dragged selection and marks the nodes inside.\n   * @param g the graphics reference\n   */\n  private void markSelektedNodes(final Graphics g) {\n    final int x = selectRect.w < 0 ? selectRect.x + selectRect.w : selectRect.x;\n    final int y = selectRect.h < 0 ? selectRect.y + selectRect.h : selectRect.y;\n    final int w = Math.abs(selectRect.w);\n    final int h = Math.abs(selectRect.h);\n\n    // draw selection\n    g.setColor(Color.RED);\n    g.drawRect(x, y, w, h);\n\n    final int f = y;\n    final int t = y + h;\n    final int size = cache.maxLevel;\n    final IntList list = new IntList();\n\n    for(int i = 0; i < size; i++) {\n      final int yL = getYperLevel(i);\n\n      if((yL >= f || yL + nodeHeight >= f) &&\n          (yL <= t || yL + nodeHeight <= t)) {\n\n        final TreeRect[] rl = cache.getTreeRectsPerLevel(i);\n        final int s = cache.getSizePerLevel(i);\n\n        if(cache.isBigRectangle(i)) {\n          final TreeRect mRect = rl[0];\n          int sPrePos = (int) (s * (x / (double) mRect.w));\n          int ePrePos = (int) (s * ((x + w) / (double) mRect.w));\n\n          if(sPrePos < 0) sPrePos = 0;\n          if(ePrePos >= s) ePrePos = s - 1;\n\n          for(int j = sPrePos; j < ePrePos; j++) {\n            list.add(cache.getPrePerLevelAndIndex(s, j));\n          }\n\n          gui.notify.mark(new Nodes(list.finish(), gui.context.data), this);\n          markNodes();\n          repaint();\n\n        } else {\n\n          boolean b = false;\n\n          for(int j = 0; j < s; j++) {\n            final TreeRect tr = rl[j];\n\n            if(!b && tr.contains(x)) b = true;\n\n            if(b && tr.contains(x + w)) {\n              list.add(tr.pre);\n              break;\n            }\n\n            if(b) {\n              list.add(tr.pre);\n            }\n\n          }\n\n          gui.notify.mark(new Nodes(list.finish(), gui.context.data), this);\n          markNodes();\n          repaint();\n        }\n\n      }\n\n    }\n  }","id":70016,"modified_method":"/**\n   * Draws the dragged selection and marks the nodes inside.\n   * @param g the graphics reference\n   */\n  private void markSelektedNodes(final Graphics g) {\n\n    // TODO\n\n    final int x = selectRect.w < 0 ? selectRect.x + selectRect.w : selectRect.x;\n    final int y = selectRect.h < 0 ? selectRect.y + selectRect.h : selectRect.y;\n    final int w = Math.abs(selectRect.w);\n    final int h = Math.abs(selectRect.h);\n\n    // draw selection\n    g.setColor(Color.RED);\n    g.drawRect(x, y, w, h);\n\n    final int f = y;\n    final int t = y + h;\n    final int size = cache.maxLevel;\n    final IntList list = new IntList();\n    final int rn = 0;\n\n    for(int i = 0; i < size; i++) {\n      final int yL = getYperLevel(i);\n\n      if((yL >= f || yL + nodeHeight >= f) && \n          (yL <= t || yL + nodeHeight <= t)) {\n\n        final TreeRect[] rl = cache.getTreeRectsPerLevel(rn, i);\n        final int s = cache.getLevelSize(rn, i);\n\n        if(cache.isBigRectangle(rn, i)) {\n          final TreeRect mRect = rl[0];\n          int sPrePos = (int) (s * (x / (double) mRect.w));\n          int ePrePos = (int) (s * ((x + w) / (double) mRect.w));\n\n          if(sPrePos < 0) sPrePos = 0;\n          if(ePrePos >= s) ePrePos = s - 1;\n\n          for(int j = sPrePos; j < ePrePos; j++) {\n            list.add(cache.getPrePerLevelAndIndex(s, j));\n          }\n\n          gui.notify.mark(new Nodes(list.finish(), gui.context.data), this);\n          markNodes();\n          repaint();\n\n        } else {\n\n          boolean b = false;\n\n          for(int j = 0; j < s; j++) {\n            final TreeRect tr = rl[j];\n\n            if(!b && tr.contains(x)) b = true;\n\n            if(b && tr.contains(x + w)) {\n              list.add(cache.getPrePerIndex(rn, i, j));\n              break;\n            }\n\n            if(b) {\n              list.add(cache.getPrePerIndex(rn, i, j));\n            }\n          }\n          gui.notify.mark(new Nodes(list.finish(), gui.context.data), this);\n          markNodes();\n          repaint();\n        }\n      }\n    }\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Finds rectangle at cursor position.\n   * @return focused rectangle\n   */\n  public boolean focus() {\n    if(refreshedFocus) {\n      final int pre = gui.context.focused;\n\n      for(int i = 0; i < cache.maxLevel; i++) {\n\n        if(cache.isBigRectangle(i)) {\n          final int index = cache.searchPreArrayPosition(i, pre);\n\n          if(index > -1) {\n            focusedRect = cache.getTreeRectsPerLevel(i)[0];\n            focusedRectLevel = i;\n\n            refreshedFocus = false;\n            return true;\n          }\n\n        } else {\n\n          final TreeRect rect = cache.searchRect(i, pre);\n\n          if(rect != null) {\n            focusedRect = rect;\n            focusedRectLevel = i;\n\n            refreshedFocus = false;\n            return true;\n          }\n        }\n      }\n    } else {\n\n      final int level = getLevelPerY(mousePosY);\n\n      if(level == -1 || level >= cache.maxLevel) return false;\n\n      final TreeRect[] rL = cache.getTreeRectsPerLevel(level);\n\n      for(final TreeRect r : rL) {\n        if(r.contains(mousePosX)) {\n\n          focusedRect = r;\n          focusedRectLevel = level;\n          int pre = r.pre;\n\n          // if multiple pre values, then approximate pre value\n          if(cache.isBigRectangle(level)) {\n            final double ratio = mousePosX / (double) r.w;\n            final int index = (int)\n            ((cache.getSizePerLevel(level) - 1) * ratio);\n            pre = cache.getPrePerLevelAndIndex(level, index);\n            r.pre = pre;\n          }\n\n          gui.notify.focus(pre, this);\n\n          refreshedFocus = false;\n          return true;\n        }\n\n      }\n    }\n    refreshedFocus = false;\n    return false;\n  }","id":70017,"modified_method":"/**\n   * Finds rectangle at cursor position.\n   * @return focused rectangle\n   */\n  private boolean focus() {\n    if(refreshedFocus) {\n      final int pre = gui.context.focused;\n\n      int rn = 0;\n\n      for(int i = 0; i < cache.getHeight(rn); i++) {\n\n        if(cache.isBigRectangle(rn, i)) {\n          final int index = cache.getPreIndex(rn, i, pre);\n\n          if(index > -1) {\n            focusedRect = cache.getTreeRectsPerLevel(rn, i)[0];\n            focusedRectLevel = i;\n\n            refreshedFocus = false;\n            return true;\n          }\n\n        } else {\n\n          final TreeRect rect = cache.searchRect(0, i, pre);\n\n          if(rect != null) {\n            focusedRect = rect;\n            focusedRectLevel = i;\n\n            refreshedFocus = false;\n            return true;\n          }\n        }\n      }\n    } else {\n\n      final int rn = 0;\n      final int lv = getLevelPerY(mousePosY);\n\n      if(lv == -1 || lv >= cache.getHeight(rn)) return false;\n\n      final TreeRect[] rL = cache.getTreeRectsPerLevel(rn, lv);\n\n      for(int i = 0; i < rL.length; i++) {\n        final TreeRect r = rL[i];\n\n        if(r.contains(mousePosX)) {\n          focusedRect = r;\n          focusedRectLevel = lv;\n          int pre = cache.getPrePerIndex(rn, lv, i);\n\n          // if multiple pre values, then approximate pre value\n          if(cache.isBigRectangle(rn, lv)) {\n            final double ratio = mousePosX / (double) r.w;\n            final int index = (int) (cache.getLevelSize(0, lv) * ratio);\n            pre = cache.getPrePerLevelAndIndex(lv, index);\n          }\n\n          gui.notify.focus(pre, this);\n\n          refreshedFocus = false;\n          return true;\n        }\n\n      }\n    }\n    refreshedFocus = false;\n    return false;\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Creates new image and draws rectangles in it.\n   */\n  private void createNewMainImage() {\n    treeImage = createImage();\n    final Graphics tIg = treeImage.getGraphics();\n\n    cache.generateRects(tIg, gui.context, getWidth());\n\n    for(int i = 0; i < cache.maxLevel; i++) {\n      final TreeRect[] lr = cache.getTreeRectsPerLevel(i);\n      final int y = getYperLevel(i);\n\n      for(final TreeRect r : lr) {\n        drawRectangle(tIg, i, r.x, y, r.w, nodeHeight, BORDER_RECTANGLES,\n            FILL_RECTANGLES, DRAW_RECTANGLE);\n      }\n    }\n  }","id":70018,"modified_method":"/**\n   * Creates new image and draws rectangles in it.\n   */\n  private void createNewMainImage() {\n    treeImage = createImage();\n    final Graphics tIg = treeImage.getGraphics();\n\n    final int rn = 0;\n\n    for(int i = 0; i < cache.getHeight(rn); i++) {\n\n      TreeRect[] lr = cache.getTreeRectsPerLevel(rn, i);\n\n      for(int z = 0; z < lr.length; z++) {\n        TreeRect r = lr[z];\n        drawRectangle(tIg, i, r.x, r.w, nodeHeight, BORDER_RECTANGLES,\n            FILL_RECTANGLES, DRAW_RECTANGLE);\n\n        if(cache.isBigRectangle(rn, i)) tIg.drawString(\n            Integer.toString(cache.getLevelSize(rn, i)) + \" nodes\", 4,\n            getYperLevel(i) - 1);\n      }\n    }\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void mouseMoved(final MouseEvent e) {\n    if(gui.updating) return;\n    super.mouseMoved(e);\n    // refresh mouse focus\n    mousePosX = e.getX();\n    mousePosY = e.getY();\n    focus();\n    repaint();\n  }","id":70019,"modified_method":"@Override\n  public void mouseMoved(final MouseEvent e) {\n    if(gui.updating) return;\n    super.mouseMoved(e);\n    // refresh mouse focus\n    mousePosX = e.getX();\n    mousePosY = e.getY();\n    repaint();\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void paintComponent(final Graphics g) {\n    super.paintComponent(g);\n    g.setFont(GUIConstants.font);\n\n    // timer\n    // final Performance perf = new Performance();\n    // perf.initTimer();\n\n    // initializes sizes\n    nodeHeight = fontHeight = g.getFontMetrics().getHeight();\n\n    setLevelDistance();\n\n    if(windowSizeChanged()) {\n\n      if(markedImage != null) {\n        markedImage = null;\n        refreshedMark = true;\n      }\n\n      focusedRect = null;\n      createNewMainImage();\n\n    }\n\n    g.drawImage(treeImage, 0, 0, getWidth(), getHeight(), this);\n\n    // highlights marked nodes\n    // if(refreshedMark) markNodes();\n\n    if(markedImage != null) g.drawImage(markedImage, 0, 0, getWidth(),\n        getHeight(), this);\n\n    // highlights the focused node\n\n    if(focus()) {\n      highlightNode(g, focusedRect, focusedRectLevel, -1, false,\n          SHOW_ANCESTORS, SHOW_DESCENDANTS);\n    }\n\n    if(selection) markSelektedNodes(g);\n\n  }","id":70020,"modified_method":"@Override\n  public void paintComponent(final Graphics g) {\n    super.paintComponent(g);\n    g.setFont(GUIConstants.font);\n\n    // timer\n    // final Performance perf = new Performance();\n    // perf.initTimer();\n\n    // initializes sizes\n    nodeHeight = fontHeight = g.getFontMetrics().getHeight();\n\n    setLevelDistance();\n\n    if(windowSizeChanged()) {\n\n      if(markedImage != null) {\n        markedImage = null;\n        refreshedMark = true;\n      }\n\n      focusedRect = null;\n      cache.generateBordersAndRects(g, gui.context, getWidth());\n      createNewMainImage();\n    }\n\n    g.drawImage(treeImage, 0, 0, getWidth(), getHeight(), this);\n\n    // highlights marked nodes\n    if(refreshedMark) markNodes();\n\n    if(markedImage != null) g.drawImage(markedImage, 0, 0, getWidth(),\n        getHeight(), this);\n\n    // highlights the focused node\n    if(focus()) highlightNode(g, 0, gui.context.focused, focusedRect,\n        focusedRectLevel, -1, false, SHOW_ANCESTORS, SHOW_DESCENDANTS);\n\n    if(selection) markSelektedNodes(g);\n\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Highlights the marked nodes.\n   */\n  private void markNodes() {\n    refreshedMark = false;\n    markedImage = createImage();\n    final Graphics mIg = markedImage.getGraphics();\n\n    final int size = gui.context.marked.size();\n    final int[] marked = Arrays.copyOf(gui.context.marked.sorted, size);\n\n    for(int k = 0; k < cache.maxLevel; k++) {\n\n      final int y = getYperLevel(k);\n      final TreeRect[] rL = cache.getTreeRectsPerLevel(k);\n\n      if(cache.isBigRectangle(k)) {\n        final TreeRect currRect = rL[0];\n\n        for(int j = 0; j < size; j++) {\n          final int pre = marked[j];\n\n          if(pre == -1) continue;\n\n          final int index = cache.searchPreArrayPosition(j, pre);\n\n          if(index > -1) {\n\n            final int x = (int) (currRect.w * index /\n                (double) cache.getSizePerLevel(k));\n\n            mIg.setColor(Color.RED);\n            mIg.drawLine(x, y, x, y + nodeHeight);\n            marked[j] = -1;\n\n          }\n\n        }\n\n      } else {\n\n        for(int j = 0; j < size; j++) {\n          final int pre = marked[j];\n\n          final TreeRect rect = cache.searchRect(j, pre);\n\n          if(rect != null) {\n            mIg.setColor(Color.RED);\n            mIg.fillRect(rect.x + 1, y, rect.w - 1, nodeHeight);\n            drawTextIntoRectangle(mIg, pre, rect.x + (int) (rect.w / 2f),\n                rect.w, y);\n            marked[j] = -1;\n          }\n        }\n      }\n    }\n  }","id":70021,"modified_method":"/**\n   * Highlights the marked nodes.\n   */\n  private void markNodes() {\n\n    refreshedMark = false;\n    markedImage = createImage();\n    final Graphics mIg = markedImage.getGraphics();\n\n    final int size = gui.context.marked.size();\n    if(size < 1) return;\n\n    final int[] marked = Arrays.copyOf(gui.context.marked.sorted, size);\n\n    final int rn = 0;\n\n    for(int i = 0; i < cache.getHeight(rn); i++) {\n\n      final int y = getYperLevel(i);\n      // final TreeRect[] rL = cache.getTreeRectsPerLevel(rn, i);\n\n      if(cache.isBigRectangle(rn, i)) {\n        // final TreeRect currRect = rL[0];\n\n        for(int j = 0; j < size; j++) {\n          final int pre = marked[j];\n\n          if(pre == -1) continue;\n\n          final int index = cache.getPreIndex(rn, i, pre);\n\n          if(index > -1) {\n\n            // final int x = (int) (currRect.w * index / (double) bo[0][k][2]);\n            //\n            // mIg.setColor(Color.RED);\n            // mIg.drawLine(x, y, x, y + nodeHeight);\n            // marked[j] = -1;\n\n          }\n        }\n      } else {\n\n        for(int j = 0; j < size; j++) {\n          final int pre = marked[j];\n\n          final TreeRect rect = cache.searchRect(rn, j, pre);\n\n          if(rect != null) {\n            mIg.setColor(Color.RED);\n            mIg.fillRect(rect.x + 1, y, rect.w - 1, nodeHeight);\n            drawTextIntoRectangle(mIg, pre, rect.x + (int) (rect.w / 2f),\n                rect.w, y);\n            marked[j] = -1;\n          }\n        }\n      }\n    }\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Determines the optimal distance between the levels.\n   */\n  private void setLevelDistance() {\n    final int levels = gui.context.data.meta.height + 1;\n    final int height = getSize().height - 1;\n    final int heightLeft = height - levels * nodeHeight;\n    final int lD = (int) (heightLeft / (double) levels);\n    levelDistance = lD < MINIMUM_LEVEL_DISTANCE ? MINIMUM_LEVEL_DISTANCE : lD;\n  }","id":70022,"modified_method":"/**\n   * Determines the optimal distance between the borders.\n   */\n  private void setLevelDistance() {\n    final int border = gui.context.data.meta.height + 1;\n    final int height = getSize().height - 1;\n    final int heightLeft = height - border * nodeHeight;\n    final int lD = (int) (heightLeft / (double) border);\n    levelDistance = lD < MINIMUM_LEVEL_DISTANCE ? MINIMUM_LEVEL_DISTANCE : lD;\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Highlights nodes.\n   * @param g the graphics reference\n   * @param r the rectangle to highlight\n   * @param l the level\n   * @param childX the child's x value\n   * @param fillNodes fill nodes\n   * @param showParent show parent\n   * @param showChildren show children\n   */\n  private void highlightNode(final Graphics g, final TreeRect r, final int l,\n      final int childX, final boolean fillNodes, final boolean showParent,\n      final boolean showChildren) {\n\n    if(l == -1) return;\n\n    final int y = getYperLevel(l);\n    final int h = nodeHeight;\n\n    final Data data = gui.context.data;\n    final int pre = r.pre;\n    final int kind = data.kind(pre);\n    final int size = data.size(pre, kind);\n    int multiPreX = -1;\n\n    if(fillNodes) {\n      drawRectangle(g, l, r.x, y, r.w, h, false, true, DRAW_HIGHLIGHT);\n    } else {\n      drawRectangle(g, l, r.x, y, r.w, h, true, false, DRAW_HIGHLIGHT);\n    }\n\n    if(cache.isBigRectangle(l)) {\n      final int index = cache.searchPreArrayPosition(l, pre);\n      final double ratio = index / (double) (cache.getSizePerLevel(l) - 1);\n      multiPreX = (int) (r.w * ratio);\n      g.drawLine(multiPreX, y, multiPreX, y + nodeHeight);\n    }\n\n    if(childX > -1) {\n      g.drawLine(childX, getYperLevel(l + 1) - 1,\n          multiPreX == -1 ? (2 * r.x + r.w) / 2 :\n            multiPreX, y + nodeHeight + 1);\n    }\n\n    if(showParent && pre > 0) {\n      final int par = data.parent(pre, kind);\n      final int lv = l - 1;\n      TreeRect parRect = null;\n\n      if(lv >= 0) {\n        // TreeRect[] rList = cache.getTreeRectsPerLevel(lv);\n\n        if(cache.isBigRectangle(lv)) {\n          // final TreeRect mPreRect = rList[0];\n          // [WM] mPreRect.pre = par;\n\n          // highlightNode(g, mPreRect, lv, multiPreX == -1 ? (2 * r.x + r.w) /\n          // 2\n          // : multiPreX, false, true, false);\n\n        } else {\n\n          parRect = cache.searchRect(lv, par);\n\n          if(parRect != null) {\n            highlightNode(g, parRect, lv, multiPreX == -1 ? (2 * r.x + r.w) / 2\n                : multiPreX, true, true, false);\n          }\n        }\n      }\n    }\n\n    if(showChildren && size > 1 && l + 1 < cache.maxLevel) {\n\n      final int lv = l + 1;\n      @SuppressWarnings(\"unused\")\n      final TreeRect[] rL = cache.getTreeRectsPerLevel(lv);\n\n      final ChildIterator chIt = new ChildIterator(data, pre);\n\n      if(cache.isBigRectangle(lv)) {\n        // [WM]\n        // TreeRect cRect = rList.get(0);\n        //\n        // int firstChildPre = chIt.pre;\n        // int lastChildPre = -1;\n        //\n        // while(chIt.more())\n        // lastChildPre = chIt.next();\n        //\n        // final int drawFrom = searchPreArrayPosition(cRect.multiPres,\n        // firstChildPre);\n        //\n        // final int drawTo = firstChildPre == lastChildPre ? drawFrom\n        // : searchPreArrayPosition(cRect.multiPres, lastChildPre);\n        //\n        // final int mPreLength = cRect.multiPres.length - 1;\n        // int cx = (int) (cRect.w * drawFrom / (double) mPreLength);\n        // int cw = (int) (cRect.w * drawTo / (double) mPreLength);\n        //\n        // g.setColor(descendantHighlightColor);\n        // g.fillRect(cx, getYperLevel(l), Math.max(cw - cx, 2), nodeHeight);\n\n        // highlightNode(g, descendantHighlightColor, cRect, l, -1, true, false,\n        // true);\n\n      } else {\n\n        while(chIt.more()) {\n\n          final TreeRect sRect = cache.searchRect(lv, chIt.next());\n\n          g.setColor(new Color(0x38323D4F, true));\n          final int parX = multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX;\n          g.fillPolygon(new int[] { parX, sRect.x, sRect.x + sRect.w, sRect.x,\n              sRect.x + sRect.w}, new int[] { getYperLevel(l) + nodeHeight,\n              getYperLevel(lv) - 1, getYperLevel(lv) - 1,\n              getYperLevel(lv) + nodeHeight, getYperLevel(lv) + nodeHeight}, 5);\n\n          highlightNode(g, sRect, lv, -1, true, false, true);\n        }\n      }\n    }\n\n    if(!(showParent && showChildren)) return;\n\n    final String s = cache.getText(data, pre);\n\n    final int w = BaseXLayout.width(g, s);\n\n    if(r.pre == 0) {\n\n      g.fillRect(r.x, y + fontHeight + 1, w + 2, h);\n      g.setColor(Color.WHITE);\n      g.drawString(s, r.x + 1, y + fontHeight + h - 2);\n\n    } else {\n      g.fillRect(r.x, y - fontHeight, w + 2, h);\n      g.setColor(Color.WHITE);\n      g.drawString(s, r.x + 1, (int) (y - h / (float) fontHeight) - 2);\n\n    }\n  }","id":70023,"modified_method":"/**\n   * Highlights nodes.\n   * @param g the graphics reference\n   * @param rn root\n   * @param pre pre\n   * @param r the rectangle to highlight\n   * @param l the level\n   * @param childX the child's x value\n   * @param fillNodes fill nodes\n   * @param showParent show parent\n   * @param showChildren show children\n   */\n  private void highlightNode(final Graphics g, final int rn, final int pre,\n      final TreeRect r, final int l, final int childX, final boolean fillNodes,\n      final boolean showParent, final boolean showChildren) {\n\n    if(l == -1) return;\n\n    final int y = getYperLevel(l);\n    final int h = nodeHeight;\n\n    final Data d = gui.context.data;\n    final int kind = d.kind(pre);\n    final int size = d.size(pre, kind);\n    int multiPreX = -1;\n\n    if(fillNodes) {\n      drawRectangle(g, l, r.x, r.w, h, false, true, DRAW_HIGHLIGHT);\n    } else {\n      drawRectangle(g, l, r.x, r.w, h, true, false, DRAW_HIGHLIGHT);\n    }\n\n    if(cache.isBigRectangle(rn, l)) {\n      final int index = cache.getPreIndex(rn, l, pre);\n      final double ratio = index / (double) (cache.getLevelSize(rn, l) - 1);\n      multiPreX = (int) (r.w * ratio);\n      g.drawLine(multiPreX, y, multiPreX, y + nodeHeight);\n    }\n\n    if(childX > -1) {\n      g.drawLine(childX, getYperLevel(l + 1) - 1,\n          multiPreX == -1 ? (2 * r.x + r.w) / 2 : \n            multiPreX, y + nodeHeight + 1);\n    }\n\n    if(showParent && pre > 0) {\n      final int par = d.parent(pre, kind);\n      final int lv = l - 1;\n      TreeRect parRect = null;\n\n      if(lv >= 0) {\n        // TreeRect[] rList = cache.getTreeRectsPerLevel(lv);\n\n        if(cache.isBigRectangle(rn, lv)) {\n          // final TreeRect mPreRect = rList[0];\n          // TODO [W M] mPreRect.pre = par;\n\n          // highlightNode(g, mPreRect, lv, multiPreX == -1 ? (2 * r.x + r.w) /\n          // 2\n          // : multiPreX, false, true, false);\n\n        } else {\n\n          parRect = cache.searchRect(rn, lv, par);\n\n          if(parRect != null) {\n            highlightNode(g, rn, par, parRect, lv,\n                multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX, true, true,\n                false);\n          }\n        }\n      }\n    }\n\n    if(showChildren && size > 1 && l + 1 < cache.getHeight(rn)) {\n\n      // @SuppressWarnings(\"unused\")\n      // final TreeRect[] rL = cache.getTreeRectsPerLevel(rn, lv);\n\n      // System.out.println(pre);\n\n      // TreeBorder[] sBo = cache.generateSubtreeBorders(d, pre);\n\n      if(cache.isBigRectangle(rn, l + 1)) {\n        // TODO [WM]\n        // TreeRect cRect = rList.get(0);\n        //\n        // int firstChildPre = chIt.pre;\n        // int lastChildPre = -1;\n        //\n        // while(chIt.more())\n        // lastChildPre = chIt.next();\n        //\n        // final int drawFrom = searchPreArrayPosition(cRect.multiPres,\n        // firstChildPre);\n        //\n        // final int drawTo = firstChildPre == lastChildPre ? drawFrom\n        // : searchPreArrayPosition(cRect.multiPres, lastChildPre);\n        //\n        // final int mPreLength = cRect.multiPres.length - 1;\n        // int cx = (int) (cRect.w * drawFrom / (double) mPreLength);\n        // int cw = (int) (cRect.w * drawTo / (double) mPreLength);\n        //\n        // g.setColor(descendantHighlightColor);\n        // g.fillRect(cx, getYperLevel(l), Math.max(cw - cx, 2), nodeHeight);\n\n        // highlightNode(g, descendantHighlightColor, cRect, l, -1, true, false,\n        // true);\n\n      } else {\n\n        // int lv = l + 1;\n        //\n        // for(int i = 0; i < sBo.length; i++) {\n        // TreeBorder sub = sBo[i];\n        //\n        // for(int j = sub.start; j < sub.start + sub.size; j++) {\n        //\n        // int p = cache.getPrePerIndex(rn, lv, j);\n        //\n        // final TreeRect sRect = cache.searchRect(rn, lv, p);\n        //\n        // g.setColor(new Color(0x38323D4F, true));\n        // final int parX = multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX;\n        // g.fillPolygon(new int[] { parX, sRect.x, sRect.x + sRect.w,\n        // sRect.x, sRect.x + sRect.w}, new int[] {\n        // getYperLevel(l) + nodeHeight, getYperLevel(lv) - 1,\n        // getYperLevel(lv) - 1, getYperLevel(lv) + nodeHeight,\n        // getYperLevel(lv) + nodeHeight}, 5);\n        //\n        // highlightNode(g, rn, p, sRect, lv, -1, true, false, false);\n        // }\n        // lv++;\n        // }\n      }\n\n    }\n\n    if(!(showParent && showChildren)) return;\n\n    final String s = cache.getText(d, pre);\n\n    final int w = BaseXLayout.width(g, s);\n\n    if(pre == 0) {\n\n      g.fillRect(r.x, y + fontHeight + 1, w + 2, h);\n      g.setColor(Color.WHITE);\n      g.drawString(s, r.x + 1, y + fontHeight + h - 2);\n\n    } else {\n      g.fillRect(r.x, y - fontHeight, w + 2, h);\n      g.setColor(Color.WHITE);\n      g.drawString(s, r.x + 1, (int) (y - h / (float) fontHeight) - 2);\n\n    }\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void mouseClicked(final MouseEvent e) {\n\n    final boolean left = SwingUtilities.isLeftMouseButton(e);\n    final boolean right = !left;\n    if(!right && !left || focusedRect == null) return;\n\n    if(left) {\n      gui.notify.mark(0, null);\n      if(e.getClickCount() > 1 && focusedRect.pre > 0) {\n        gui.notify.context(gui.context.marked, false, this);\n        refreshContext(false, false);\n      }\n    }\n  }","id":70024,"modified_method":"@Override\n  public void mouseClicked(final MouseEvent e) {\n    final boolean left = SwingUtilities.isLeftMouseButton(e);\n    final boolean right = !left;\n    if(!right && !left || focusedRect == null) return;\n\n    if(left) {\n      gui.notify.mark(0, this);\n      if(e.getClickCount() > 1) {\n        gui.notify.context(gui.context.marked, false, this);\n        refreshContext(false, false);\n      }\n    }\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Draws Rectangles.\n   * @param g the graphics reference\n   * @param l level\n   * @param x x coordinate\n   * @param w width\n   * @param y y coordinate\n   * @param h the height\n   * @param border draw rectangle border\n   * @param fill fill rectangle\n   * @param type the use type\n   */\n  private void drawRectangle(final Graphics g, final int l, final int x,\n      final int y, final int w, final int h, final boolean border,\n      final boolean fill, final byte type) {\n\n    Color borderColor = null;\n    Color fillColor = null;\n\n    switch(type) {\n      case DRAW_RECTANGLE:\n        borderColor = getColorPerLevel(l, false);\n        fillColor = getColorPerLevel(l, true);\n        break;\n      case DRAW_HIGHLIGHT:\n        borderColor = GUIConstants.colormark1;\n        fillColor = GUIConstants.colormark2;\n    }\n    if(border) {\n      g.setColor(borderColor);\n      g.drawRect(x + BORDER_PADDING, y, w - BORDER_PADDING, h);\n    }\n\n    if(fill) {\n      g.setColor(fillColor);\n      g.fillRect(x + FILL_PADDING, y, w - FILL_PADDING, h);\n    }\n  }","id":70025,"modified_method":"/**\n   * Draws Rectangles.\n   * @param g the graphics reference\n   * @param l level\n   * @param x x coordinate\n   * @param w width\n   * @param h height\n   * @param border draw rectangle border\n   * @param fill fill rectangle\n   * @param type use type\n   */\n  private void drawRectangle(final Graphics g, final int l, final int x,\n      final int w, final int h, final boolean border, final boolean fill,\n      final byte type) {\n\n    int y = getYperLevel(l);\n\n    Color borderColor = null;\n    Color fillColor = null;\n\n    switch(type) {\n      case DRAW_RECTANGLE:\n        borderColor = getColorPerLevel(l, false);\n        fillColor = getColorPerLevel(l, true);\n        break;\n      case DRAW_HIGHLIGHT:\n        borderColor = GUIConstants.colormark1;\n        fillColor = GUIConstants.colormark2;\n    }\n    if(border) {\n      g.setColor(borderColor);\n      g.drawRect(x + BORDER_PADDING, y, w - BORDER_PADDING, h);\n    }\n\n    if(fill) {\n      g.setColor(fillColor);\n      g.fillRect(x + FILL_PADDING, y, w - FILL_PADDING, h);\n    }\n  }","commit_id":"d1be2cf5a6913dc6d765df9db52e8ef048273f74","url":"https://github.com/BaseXdb/basex"},{"original_method":"protected void highlightXtendField(XtendField field, IHighlightedPositionAcceptor acceptor) {\n\t\tif(field.getName() != null && field.getName().length() > 0){\n\t\t\tList<INode> nodes = NodeModelUtils.findNodesForFeature(field, Xtend2Package.Literals.XTEND_FIELD__NAME);\n\t\t\tif(nodes.size() > 0)\n\t\t\t\thighlightNode(nodes.get(0), XbaseHighlightingConfiguration.FIELD, acceptor);\n\t\t}\n\t}","id":70026,"modified_method":"protected void highlightXtendField(XtendField field, IHighlightedPositionAcceptor acceptor) {\n\t\tif(field.getName() != null && field.getName().length() > 0){\n\t\t\tList<INode> nodes = NodeModelUtils.findNodesForFeature(field, Xtend2Package.Literals.XTEND_FIELD__NAME);\n\t\t\tif(nodes.size() > 0){\n\t\t\t\tINode node = nodes.get(0);\n\t\t\t\thighlightNode(node, XbaseHighlightingConfiguration.FIELD, acceptor);\n\t\t\t\tif(field.isStatic())\n\t\t\t\t\thighlightNode(node, XbaseHighlightingConfiguration.STATIC_FIELD, acceptor);\n\t\t\t}\n\t\t}\n\t}","commit_id":"209b12b70be8510a9bb057a2d6248748778986b0","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\r\n   * Saves node line in parentList.\r\n   * @param parentList array with nodes of the line before\r\n   * @param data the data reference\r\n   * @return array filled with nodes of the current line\r\n   */\r\n  private int[] getNextNodeLine(final int[] parentList, final Data data) {\r\n    final int l = parentList.length;\r\n    final IntList temp = new IntList();\r\n\r\n    for(int i = 0; i < l; i++) {\r\n\r\n      final int p = parentList[i];\r\n      final ChildIterator iterator = new ChildIterator(data, p);\r\n\r\n      while(iterator.more()) {\r\n        final int pre = iterator.next();\r\n\r\n        if(data.kind(pre) == Data.ELEM || !ONLY_ELEMENT_NODES) {\r\n          temp.add(pre);\r\n        }\r\n      }\r\n    }\r\n    return temp.finish();\r\n  }","id":70027,"modified_method":"/**\r\n   * Saves node line in parentList.\r\n   * @param parentList array with nodes of the line before\r\n   * @param data the data reference\r\n   * @return array filled with nodes of the current line\r\n   */\r\n  private int[] getNextNodeLine(final int[] parentList, final Data data) {\r\n    final int l = parentList.length;\r\n    final IntList temp = new IntList();\r\n\r\n    for(int i = 0; i < l; i++) {\r\n\r\n      final int p = parentList[i];\r\n      final ChildIterator iterator = new ChildIterator(data, p);\r\n\r\n      while(iterator.more()) {\r\n        final int pre = iterator.next();\r\n\r\n        // if(data.kind(pre) == Data.ELEM || !ONLY_ELEMENT_NODES) {\r\n        temp.add(pre);\r\n        // }\r\n      }\r\n    }\r\n    return temp.finish();\r\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns index of pre.\r\n   * @param rn root\r\n   * @param lv level\r\n   * @param pre pre\r\n   * @return index\r\n   */\r\n  int getPreIndex(final int rn, final int lv, final int pre) {\r\n    final TreeBorder bo = getTreeBorder(rn, lv);\r\n    return searchPreIndex(bo.level, pre, pre, bo.start, bo.size) - bo.start;\r\n  }","id":70028,"modified_method":"/**\r\n   * Returns index of pre.\r\n   * @param rn root\r\n   * @param lv level\r\n   * @param pre pre\r\n   * @return index\r\n   */\r\n  int getPreIndex(final int rn, final int lv, final int pre) {\r\n    final TreeBorder bo = getTreeBorder(rn, lv);\r\n    return searchPreIndex(bo.level, pre, pre, bo.start, bo.size - 1) - bo.start;\r\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Creates new image and draws rectangles in it.\n   */\n  private void createNewMainImage() {\n    treeImage = createImage();\n    final Graphics tIg = treeImage.getGraphics();\n\n    final int rn = 0;\n\n    for(int i = 0; i < cache.getHeight(rn); i++) {\n\n      TreeRect[] lr = cache.getTreeRectsPerLevel(rn, i);\n\n      for(int z = 0; z < lr.length; z++) {\n        TreeRect r = lr[z];\n        drawRectangle(tIg, i, r.x, r.w, nodeHeight, BORDER_RECTANGLES,\n            FILL_RECTANGLES, DRAW_RECTANGLE);\n\n        if(cache.isBigRectangle(rn, i)) tIg.drawString(\n            Integer.toString(cache.getLevelSize(rn, i)) + \" nodes\", 4,\n            getYperLevel(i) - 1);\n      }\n    }\n  }","id":70029,"modified_method":"/**\n   * Creates new image and draws rectangles in it.\n   */\n  private void createNewMainImage() {\n    treeImage = createImage();\n    final Graphics tIg = treeImage.getGraphics();\n\n    final int rn = 0;\n\n    for(int i = 0; i < cache.getHeight(rn); i++) {\n\n      TreeRect[] lr = cache.getTreeRectsPerLevel(rn, i);\n\n      for(int z = 0; z < lr.length; z++) {\n        TreeRect r = lr[z];\n        drawRectangle(tIg, i, r.x, r.w, nodeHeight, BORDER_RECTANGLES,\n            FILL_RECTANGLES, DRAW_RECTANGLE);\n      }\n    }\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Determines the level of a y-axis value.\n   * @param y the y-axis value\n   * @return the level if inside a node rectangle, -1 else\n   */\n  private int getLevelPerY(final int y) {\n    final double f = y / ((float) levelDistance + nodeHeight);\n    final double b = nodeHeight / (float) (levelDistance + nodeHeight);\n    return f <= ((int) f + b) ? (int) f : -1;\n  }","id":70030,"modified_method":"/**\n   * Determines the level of a y-axis value.\n   * @param y the y-axis value\n   * @return the level if inside a node rectangle, -1 else\n   */\n  private int getLevelPerY(final int y) {\n    final double f = (y - topMargin) / ((float) levelDistance + nodeHeight);\n    final double b = nodeHeight / (float) (levelDistance + nodeHeight);\n    return f <= ((int) f + b) ? (int) f : -1;\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void paintComponent(final Graphics g) {\n    super.paintComponent(g);\n    g.setFont(GUIConstants.font);\n\n    // timer\n    // final Performance perf = new Performance();\n    // perf.initTimer();\n\n    // initializes sizes\n    nodeHeight = fontHeight = g.getFontMetrics().getHeight();\n\n    setLevelDistance();\n\n    if(windowSizeChanged()) {\n\n      if(markedImage != null) {\n        markedImage = null;\n        refreshedMark = true;\n      }\n\n      focusedRect = null;\n      cache.generateBordersAndRects(g, gui.context, getWidth());\n      createNewMainImage();\n    }\n\n    g.drawImage(treeImage, 0, 0, getWidth(), getHeight(), this);\n\n    // highlights marked nodes\n    if(refreshedMark) markNodes();\n\n    if(markedImage != null) g.drawImage(markedImage, 0, 0, getWidth(),\n        getHeight(), this);\n\n    // highlights the focused node\n    if(focus()) highlightNode(g, 0, gui.context.focused, focusedRect,\n        focusedRectLevel, -1, false, SHOW_ANCESTORS, SHOW_DESCENDANTS);\n\n    if(selection) markSelektedNodes(g);\n\n  }","id":70031,"modified_method":"@Override\n  public void paintComponent(final Graphics g) {\n    super.paintComponent(g);\n    g.setFont(GUIConstants.font);\n\n    // timer\n    // final Performance perf = new Performance();\n    // perf.initTimer();\n\n    // initializes sizes\n    nodeHeight = fontHeight = g.getFontMetrics().getHeight();\n\n    setLevelDistance();\n\n    if(windowSizeChanged()) {\n\n      if(markedImage != null) {\n        markedImage = null;\n        refreshedMark = true;\n      }\n\n      focusedRect = null;\n      cache.generateBordersAndRects(g, gui.context, getWidth());\n      createNewMainImage();\n    }\n\n    g.drawImage(treeImage, 0, 0, getWidth(), getHeight(), this);\n\n    // highlights marked nodes\n    if(refreshedMark) markNodes();\n\n    if(markedImage != null) g.drawImage(markedImage, 0, 0, getWidth(),\n        getHeight(), this);\n\n    // highlights the focused node\n    if(focus()) {\n      final int focused = gui.context.focused;\n\n      highlightNode(g, 0, focused, focusedRect, focusedRectLevel, -1, false,\n          SHOW_ANCESTORS, SHOW_DESCENDANTS);\n\n      if(SHOW_EXTRA_INFO) {\n        g.setColor(new Color(0xeeeeee));\n        g.fillRect(0, getHeight() - fontHeight - 6, getWidth(), fontHeight + 6);\n\n        final Data d = gui.context.data;\n        final int k = d.kind(focused);\n        final int s = d.size(focused, k);\n        final int as = d.attSize(focused, k);\n\n        g.setColor(Color.BLACK);\n        g.drawString(\"level: \" + focusedRectLevel + \"  level-size: \"\n            + cache.getLevelSize(0, focusedRectLevel) + \"  node-size: \"\n            + (s - as) + \"  node: \"\n            + Token.string(ViewData.tag(gui.prop, d, focused)) + \"  pre: \"\n            + focused, 2, getHeight() - 6);\n      }\n    }\n\n    if(selection) markSelektedNodes(g);\n\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Highlights nodes.\n   * @param g the graphics reference\n   * @param rn root\n   * @param pre pre\n   * @param r the rectangle to highlight\n   * @param l the level\n   * @param childX the child's x value\n   * @param fillNodes fill nodes\n   * @param showParent show parent\n   * @param showChildren show children\n   */\n  private void highlightNode(final Graphics g, final int rn, final int pre,\n      final TreeRect r, final int l, final int childX, final boolean fillNodes,\n      final boolean showParent, final boolean showChildren) {\n\n    if(l == -1) return;\n\n    final int y = getYperLevel(l);\n    final int h = nodeHeight;\n\n    final Data d = gui.context.data;\n    final int kind = d.kind(pre);\n    final int size = d.size(pre, kind);\n    int multiPreX = -1;\n\n    if(fillNodes) {\n      drawRectangle(g, l, r.x, r.w, h, false, true, DRAW_HIGHLIGHT);\n    } else {\n      drawRectangle(g, l, r.x, r.w, h, true, false, DRAW_HIGHLIGHT);\n    }\n\n    if(cache.isBigRectangle(rn, l)) {\n      final int index = cache.getPreIndex(rn, l, pre);\n      final double ratio = index / (double) (cache.getLevelSize(rn, l) - 1);\n      multiPreX = (int) (r.w * ratio);\n      g.drawLine(multiPreX, y, multiPreX, y + nodeHeight);\n    }\n\n    if(childX > -1) {\n      g.drawLine(childX, getYperLevel(l + 1) - 1,\n          multiPreX == -1 ? (2 * r.x + r.w) / 2 :\n            multiPreX, y + nodeHeight + 1);\n    }\n\n    if(showParent && pre > 0) {\n      final int par = d.parent(pre, kind);\n      final int lv = l - 1;\n      TreeRect parRect = null;\n\n      if(lv >= 0) {\n        // TreeRect[] rList = cache.getTreeRectsPerLevel(lv);\n\n        if(cache.isBigRectangle(rn, lv)) {\n          // final TreeRect mPreRect = rList[0];\n          // [WM] mPreRect.pre = par;\n\n          // highlightNode(g, mPreRect, lv, multiPreX == -1 ? (2 * r.x + r.w) /\n          // 2\n          // : multiPreX, false, true, false);\n\n        } else {\n\n          parRect = cache.searchRect(rn, lv, par);\n\n          if(parRect != null) {\n            highlightNode(g, rn, par, parRect, lv,\n                multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX, true, true,\n                false);\n          }\n        }\n      }\n    }\n\n    if(showChildren && size > 1 && l + 1 < cache.getHeight(rn)) {\n\n      // @SuppressWarnings(\"unused\")\n      // final TreeRect[] rL = cache.getTreeRectsPerLevel(rn, lv);\n\n      // TreeBorder[] sBo = cache.generateSubtreeBorders(d, pre);\n\n      if(cache.isBigRectangle(rn, l + 1)) {\n        // [WM]\n        // TreeRect cRect = rList.get(0);\n        //\n        // int firstChildPre = chIt.pre;\n        // int lastChildPre = -1;\n        //\n        // while(chIt.more())\n        // lastChildPre = chIt.next();\n        //\n        // final int drawFrom = searchPreArrayPosition(cRect.multiPres,\n        // firstChildPre);\n        //\n        // final int drawTo = firstChildPre == lastChildPre ? drawFrom\n        // : searchPreArrayPosition(cRect.multiPres, lastChildPre);\n        //\n        // final int mPreLength = cRect.multiPres.length - 1;\n        // int cx = (int) (cRect.w * drawFrom / (double) mPreLength);\n        // int cw = (int) (cRect.w * drawTo / (double) mPreLength);\n        //\n        // g.setColor(descendantHighlightColor);\n        // g.fillRect(cx, getYperLevel(l), Math.max(cw - cx, 2), nodeHeight);\n\n        // highlightNode(g, descendantHighlightColor, cRect, l, -1, true, false,\n        // true);\n\n      } else {\n\n        // int lv = l + 1;\n        //\n        // for(int i = 0; i < sBo.length; i++) {\n        // TreeBorder sub = sBo[i];\n        //\n        // for(int j = sub.start; j < sub.start + sub.size; j++) {\n        //\n        // int p = cache.getPrePerIndex(rn, lv, j);\n        //\n        // final TreeRect sRect = cache.searchRect(rn, lv, p);\n        //\n        // g.setColor(new Color(0x38323D4F, true));\n        // final int parX = multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX;\n        // g.fillPolygon(new int[] { parX, sRect.x, sRect.x + sRect.w,\n        // sRect.x, sRect.x + sRect.w}, new int[] {\n        // getYperLevel(l) + nodeHeight, getYperLevel(lv) - 1,\n        // getYperLevel(lv) - 1, getYperLevel(lv) + nodeHeight,\n        // getYperLevel(lv) + nodeHeight}, 5);\n        //\n        // highlightNode(g, rn, p, sRect, lv, -1, true, false, false);\n        // }\n        // lv++;\n        // }\n      }\n\n    }\n\n    if(!(showParent && showChildren)) return;\n\n    final String s = cache.getText(d, pre);\n\n    final int w = BaseXLayout.width(g, s);\n\n    if(pre == 0) {\n\n      g.fillRect(r.x, y + fontHeight + 1, w + 2, h);\n      g.setColor(Color.WHITE);\n      g.drawString(s, r.x + 1, y + fontHeight + h - 2);\n\n    } else {\n      g.fillRect(r.x, y - fontHeight, w + 2, h);\n      g.setColor(Color.WHITE);\n      g.drawString(s, r.x + 1, (int) (y - h / (float) fontHeight) - 2);\n\n    }\n  }","id":70032,"modified_method":"/**\n   * Highlights nodes.\n   * @param g the graphics reference\n   * @param rn root\n   * @param pre pre\n   * @param r the rectangle to highlight\n   * @param l the level\n   * @param childX the child's x value\n   * @param fillNodes fill nodes\n   * @param showParent show parent\n   * @param showChildren show children\n   */\n  private void highlightNode(final Graphics g, final int rn, final int pre,\n      final TreeRect r, final int l, final int childX, final boolean fillNodes,\n      final boolean showParent, final boolean showChildren) {\n\n    if(l == -1) return;\n\n    final int y = getYperLevel(l);\n    final int h = nodeHeight;\n\n    final Data d = gui.context.data;\n    final int kind = d.kind(pre);\n    final int size = d.size(pre, kind);\n    int multiPreX = -1;\n\n    if(fillNodes) {\n      drawRectangle(g, l, r.x, r.w, h, false, true, DRAW_HIGHLIGHT);\n    } else {\n      drawRectangle(g, l, r.x, r.w, h, true, false, DRAW_HIGHLIGHT);\n    }\n\n    if(cache.isBigRectangle(rn, l)) {\n      final int index = cache.getPreIndex(rn, l, pre);\n      final double ratio = index / (double) (cache.getLevelSize(rn, l) - 1);\n      multiPreX = (int) (r.w * ratio);\n      g.drawLine(multiPreX, y, multiPreX, y + nodeHeight);\n    }\n\n    if(childX > -1) {\n      g.drawLine(childX, getYperLevel(l + 1) - 1,\n          multiPreX == -1 ? (2 * r.x + r.w) / 2 : \n            multiPreX, y + nodeHeight + 1);\n    }\n\n    if(showParent && pre > 0) {\n      final int par = d.parent(pre, kind);\n      final int lv = l - 1;\n      TreeRect parRect = null;\n\n      if(lv >= 0) {\n        // TreeRect[] rList = cache.getTreeRectsPerLevel(lv);\n\n        if(cache.isBigRectangle(rn, lv)) {\n          // final TreeRect mPreRect = rList[0];\n          // [WM] mPreRect.pre = par;\n\n          // highlightNode(g, mPreRect, lv, multiPreX == -1 ? (2 * r.x + r.w) /\n          // 2\n          // : multiPreX, false, true, false);\n\n        } else {\n\n          parRect = cache.searchRect(rn, lv, par);\n\n          if(parRect != null) {\n            highlightNode(g, rn, par, parRect, lv,\n                multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX, true, true,\n                false);\n          }\n        }\n      }\n    }\n\n    if(showChildren && size > 1 && l + 1 < cache.getHeight(rn)) {\n\n      // @SuppressWarnings(\"unused\")\n      // final TreeRect[] rL = cache.getTreeRectsPerLevel(rn, lv);\n\n      // System.out.println(pre);\n\n      // TreeBorder[] sBo = cache.generateSubtreeBorders(d, pre);\n\n      if(cache.isBigRectangle(rn, l + 1)) {\n        // [WM]\n        // TreeRect cRect = rList.get(0);\n        //\n        // int firstChildPre = chIt.pre;\n        // int lastChildPre = -1;\n        //\n        // while(chIt.more())\n        // lastChildPre = chIt.next();\n        //\n        // final int drawFrom = searchPreArrayPosition(cRect.multiPres,\n        // firstChildPre);\n        //\n        // final int drawTo = firstChildPre == lastChildPre ? drawFrom\n        // : searchPreArrayPosition(cRect.multiPres, lastChildPre);\n        //\n        // final int mPreLength = cRect.multiPres.length - 1;\n        // int cx = (int) (cRect.w * drawFrom / (double) mPreLength);\n        // int cw = (int) (cRect.w * drawTo / (double) mPreLength);\n        //\n        // g.setColor(descendantHighlightColor);\n        // g.fillRect(cx, getYperLevel(l), Math.max(cw - cx, 2), nodeHeight);\n\n        // highlightNode(g, descendantHighlightColor, cRect, l, -1, true, false,\n        // true);\n\n      } else {\n\n        // int lv = l + 1;\n        //\n        // if(gui.context.current.nodes[0] > 0)\n        // System.out.println(gui.context.current.nodes[0]);\n        //        \n        // for(int i = 1; i < sBo.length; i++) {\n        // TreeBorder sub = sBo[i];\n        //          \n        // for(int j = sub.start; j < sub.start + sub.size; j++) {\n        //\n        // int pi = cache.getPrePerIndex(rn, lv, j);\n        //\n        // final TreeRect sRect = cache.searchRect(rn, lv, pi);\n        //\n        // g.setColor(new Color(0x38323D4F, true));\n        // final int parX = multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX;\n        // g.fillPolygon(new int[] { parX, sRect.x, sRect.x + sRect.w,\n        // sRect.x, sRect.x + sRect.w}, new int[] {\n        // getYperLevel(l) + nodeHeight, getYperLevel(lv) - 1,\n        // getYperLevel(lv) - 1, getYperLevel(lv) + nodeHeight,\n        // getYperLevel(lv) + nodeHeight}, 5);\n        //\n        // highlightNode(g, rn, pi, sRect, lv, -1, true, false, false);\n        // }\n        // lv++;\n        // }\n      }\n\n    }\n\n    if(!(showParent && showChildren)) return;\n\n    final String s = cache.getText(d, pre);\n\n    final int w = BaseXLayout.width(g, s);\n\n    if(pre == 0) {\n\n      g.fillRect(r.x, y + fontHeight + 1, w + 2, fontHeight);\n      g.setColor(Color.WHITE);\n      g.drawString(s, r.x + 1, y + fontHeight + h - 2);\n\n    } else {\n      g.fillRect(r.x, y - fontHeight, w + 2, fontHeight);\n      g.setColor(Color.WHITE);\n      g.drawString(s, r.x + 1, (int) (y - h / (float) fontHeight) - 2);\n\n    }\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Determines the optimal distance between the borders.\n   */\n  private void setLevelDistance() {\n    final int border = gui.context.data.meta.height + 1;\n    final int height = getSize().height - 1;\n    final int heightLeft = height - border * nodeHeight;\n    final int lD = (int) (heightLeft / (double) border);\n    levelDistance = lD < MINIMUM_LEVEL_DISTANCE ? MINIMUM_LEVEL_DISTANCE : lD;\n  }","id":70033,"modified_method":"/**\n   * Sets optimal distance between levels.\n   */\n  private void setLevelDistance() {\n    final int h = getHeight() - 5;\n    final int lvs = gui.context.current.data.meta.height + 1;\n    int lD = 0;\n    while((lD = (int) ((h - lvs * nodeHeight) / \n        (double) (lvs - 1))) < MINIMUM_LEVEL_DISTANCE\n        && nodeHeight > MINIMUM_NODE_HEIGHT)\n      nodeHeight--;    \n    levelDistance = lD < MINIMUM_LEVEL_DISTANCE ? MINIMUM_LEVEL_DISTANCE\n        : lD > MAXIMUM_LEVEL_DISTANCE ? MAXIMUM_LEVEL_DISTANCE : lD;\n    final int ih = (int) ((h - (levelDistance * \n        (lvs - 1) + lvs * nodeHeight)) / 2d);\n    topMargin = ih < TOP_MARGIN ? TOP_MARGIN : ih;\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void mouseClicked(final MouseEvent e) {\n    final boolean left = SwingUtilities.isLeftMouseButton(e);\n    final boolean right = !left;\n    if(!right && !left || focusedRect == null) return;\n\n    if(left) {\n      gui.notify.mark(0, this);\n      if(e.getClickCount() > 1) {\n        gui.notify.context(gui.context.marked, false, this);\n        refreshContext(false, false);\n      }\n    }\n  }","id":70034,"modified_method":"@Override\n  public void mouseClicked(final MouseEvent e) {\n    final boolean left = SwingUtilities.isLeftMouseButton(e);\n    final boolean right = !left;\n    if(!right && !left || focusedRect == null) return;\n\n    if(left) {\n      gui.notify.mark(0, null);\n      if(e.getClickCount() > 1) {\n        gui.notify.context(gui.context.marked, false, this);\n        refreshContext(false, false);\n      }\n    }\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Highlights the marked nodes.\n   */\n  private void markNodes() {\n\n    refreshedMark = false;\n    markedImage = createImage();\n    final Graphics mIg = markedImage.getGraphics();\n\n    if(gui.context.marked == null)\n      return;\n\n    final int size = gui.context.marked.size();\n\n    final int[] marked = Arrays.copyOf(gui.context.marked.nodes, size);\n\n    final int rn = 0;\n\n    for(int i = 0; i < cache.getHeight(rn); i++) {\n\n      final int y = getYperLevel(i);\n      // final TreeRect[] rL = cache.getTreeRectsPerLevel(rn, i);\n\n      if(cache.isBigRectangle(rn, i)) {\n        // final TreeRect currRect = rL[0];\n\n        for(int j = 0; j < size; j++) {\n          final int pre = marked[j];\n\n          if(pre == -1) continue;\n\n          final int index = cache.getPreIndex(rn, i, pre);\n\n          if(index > -1) {\n\n            // final int x = (int) (currRect.w * index / (double) bo[0][k][2]);\n            //\n            // mIg.setColor(Color.RED);\n            // mIg.drawLine(x, y, x, y + nodeHeight);\n            // marked[j] = -1;\n\n          }\n        }\n      } else {\n\n        for(int j = 0; j < size; j++) {\n          final int pre = marked[j];\n\n          final TreeRect rect = cache.searchRect(rn, j, pre);\n\n          if(rect != null) {\n            mIg.setColor(Color.RED);\n            mIg.fillRect(rect.x + 1, y, rect.w - 1, nodeHeight);\n            drawTextIntoRectangle(mIg, pre, rect.x + (int) (rect.w / 2f),\n                rect.w, y);\n            marked[j] = -1;\n          }\n        }\n      }\n    }\n  }","id":70035,"modified_method":"/**\n   * Highlights the marked nodes.\n   */\n  private void markNodes() {\n\n    refreshedMark = false;\n    markedImage = createImage();\n    final Graphics mIg = markedImage.getGraphics();\n\n    if(gui.context.marked == null) return;\n\n    final int size = gui.context.marked.size();\n\n    final int[] marked = Arrays.copyOf(gui.context.marked.nodes, size);\n\n    final int rn = 0;\n\n    for(int i = 0; i < cache.getHeight(rn); i++) {\n\n      final int y = getYperLevel(i);\n\n      if(cache.isBigRectangle(rn, i)) {\n\n        for(int j = 0; j < size; j++) {\n          final int pre = marked[j];\n\n          if(pre == -1) continue;\n\n          final int index = cache.getPreIndex(rn, i, pre);\n\n          if(index > -1) {\n\n            final int x = (int) (getWidth() * index / \n                (double) cache.getLevelSize(\n                rn, i));\n\n            mIg.setColor(Color.RED);\n            mIg.drawLine(x, y, x, y + nodeHeight);\n            marked[j] = -1;\n\n          }\n        }\n      } else {\n\n        for(int j = 0; j < size; j++) {\n          final int pre = marked[j];\n\n          final TreeRect rect = cache.searchRect(rn, i, pre);\n\n          if(rect != null) {\n            mIg.setColor(Color.RED);\n            mIg.fillRect(rect.x + 1, y, rect.w - 1, nodeHeight);\n            drawTextIntoRectangle(mIg, pre, rect.x + (int) (rect.w / 2f),\n                rect.w, y);\n            marked[j] = -1;\n          }\n        }\n      }\n    }\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Finds rectangle at cursor position.\n   * @return focused rectangle\n   */\n  private boolean focus() {\n    if(refreshedFocus) {\n      final int pre = gui.context.focused;\n\n      int rn = 0;\n\n      for(int i = 0; i < cache.getHeight(rn); i++) {\n\n        if(cache.isBigRectangle(rn, i)) {\n          final int index = cache.getPreIndex(rn, i, pre);\n\n          if(index > -1) {\n            focusedRect = cache.getTreeRectsPerLevel(rn, i)[0];\n            focusedRectLevel = i;\n\n            refreshedFocus = false;\n            return true;\n          }\n\n        } else {\n\n          final TreeRect rect = cache.searchRect(0, i, pre);\n\n          if(rect != null) {\n            focusedRect = rect;\n            focusedRectLevel = i;\n\n            refreshedFocus = false;\n            return true;\n          }\n        }\n      }\n    } else {\n\n      final int rn = 0;\n      final int lv = getLevelPerY(mousePosY);\n\n      if(lv == -1 || lv >= cache.getHeight(rn)) return false;\n\n      final TreeRect[] rL = cache.getTreeRectsPerLevel(rn, lv);\n\n      for(int i = 0; i < rL.length; i++) {\n        final TreeRect r = rL[i];\n\n        if(r.contains(mousePosX)) {\n          focusedRect = r;\n          focusedRectLevel = lv;\n          int pre = cache.getPrePerIndex(rn, lv, i);\n\n          // if multiple pre values, then approximate pre value\n          if(cache.isBigRectangle(rn, lv)) {\n            final double ratio = mousePosX / (double) r.w;\n            final int index = (int) (cache.getLevelSize(0, lv) * ratio);\n            pre = cache.getPrePerIndex(0, lv, index);\n          }\n\n          gui.notify.focus(pre, this);\n\n          refreshedFocus = false;\n          return true;\n        }\n\n      }\n    }\n    refreshedFocus = false;\n    return false;\n  }","id":70036,"modified_method":"/**\n   * Finds rectangle at cursor position.\n   * @return focused rectangle\n   */\n  private boolean focus() {\n    if(refreshedFocus) {\n      final int pre = gui.context.focused;\n\n      int rn = 0;\n\n      for(int i = 0; i < cache.getHeight(rn); i++) {\n\n        if(cache.isBigRectangle(rn, i)) {\n          final int index = cache.getPreIndex(rn, i, pre);\n\n          if(index > -1) {\n            focusedRect = cache.getTreeRectsPerLevel(rn, i)[0];\n            focusedRectLevel = i;\n\n            refreshedFocus = false;\n            return true;\n          }\n\n        } else {\n\n          final TreeRect rect = cache.searchRect(0, i, pre);\n\n          if(rect != null) {\n            focusedRect = rect;\n            focusedRectLevel = i;\n\n            refreshedFocus = false;\n            return true;\n          }\n        }\n      }\n    } else {\n\n      final int rn = 0;\n      final int lv = getLevelPerY(mousePosY);\n\n      if(lv < 0 || lv >= cache.getHeight(rn)) return false;\n\n      final TreeRect[] rL = cache.getTreeRectsPerLevel(rn, lv);\n\n      for(int i = 0; i < rL.length; i++) {\n        final TreeRect r = rL[i];\n\n        if(r.contains(mousePosX)) {\n          focusedRect = r;\n          focusedRectLevel = lv;\n          int pre = cache.getPrePerIndex(rn, lv, i);\n\n          // if multiple pre values, then approximate pre value\n          if(cache.isBigRectangle(rn, lv)) {\n            final double ratio = mousePosX / (double) r.w;\n            final int index = (int) (cache.getLevelSize(0, lv) * ratio);\n            pre = cache.getPrePerIndex(0, lv, index);\n          }\n\n          gui.notify.focus(pre, this);\n\n          refreshedFocus = false;\n          return true;\n        }\n\n      }\n    }\n    refreshedFocus = false;\n    return false;\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns the y-axis value for a given level.\n   * @param level the level\n   * @return the y-axis value\n   */\n  private int getYperLevel(final int level) {\n    return level * nodeHeight + level * levelDistance + TOP_MARGIN;\n  }","id":70037,"modified_method":"/**\n   * Returns the y-axis value for a given level.\n   * @param level the level\n   * @return the y-axis value\n   */\n  private int getYperLevel(final int level) {\n    return level * nodeHeight + level * levelDistance + topMargin;\n  }","commit_id":"ffdd6f782c72c5fda90ced238dff537eaa11e4dc","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n    public VolumeResponse createVolumeResponse(Volume volume) {\n        VolumeResponse volResponse = new VolumeResponse();\n        volResponse.setId(volume.getId());\n\n        if (volume.getName() != null) {\n            volResponse.setName(volume.getName());\n        } else {\n            volResponse.setName(\"\");\n        }\n\n        volResponse.setZoneId(volume.getDataCenterId());\n        volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());\n\n        volResponse.setVolumeType(volume.getVolumeType().toString());\n        volResponse.setDeviceId(volume.getDeviceId());\n\n        Long instanceId = volume.getInstanceId();\n        if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n            VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n            volResponse.setVirtualMachineId(vm.getId());\n            volResponse.setVirtualMachineName(vm.getName());\n            volResponse.setVirtualMachineDisplayName(vm.getName());\n            volResponse.setVirtualMachineState(vm.getState().toString());\n        }\n\n        // Show the virtual size of the volume\n        volResponse.setSize(volume.getSize());\n\n        volResponse.setCreated(volume.getCreated());\n        volResponse.setState(volume.getStatus().toString());\n\n        Account accountTemp = ApiDBUtils.findAccountById(volume.getAccountId());\n        if (accountTemp != null) {\n            volResponse.setAccountName(accountTemp.getAccountName());\n            volResponse.setDomainId(accountTemp.getDomainId());\n            volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());\n        }\n\n        String storageType;\n        try {\n            if (volume.getPoolId() == null) {\n                if (volume.getState() == Volume.State.Allocated) {\n                    /* set it as shared, so the UI can attach it to VM */\n                    storageType = \"shared\";\n                } else {\n                    storageType = \"unknown\";\n                }\n            } else {\n                storageType = ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? \"shared\" : \"local\";\n            }\n        } catch (InvalidParameterValueException e) {\n            s_logger.error(e.getMessage(), e);\n            throw new ServerApiException(BaseCmd.INTERNAL_ERROR, \"Volume \" + volume.getName() + \" does not have a valid ID\");\n        }\n\n        volResponse.setStorageType(storageType);\n        if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {\n            volResponse.setServiceOfferingId(volume.getDiskOfferingId());\n        } else {\n            volResponse.setDiskOfferingId(volume.getDiskOfferingId());\n        }\n\n        DiskOfferingVO diskOffering = ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());\n        if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {\n            volResponse.setServiceOfferingName(diskOffering.getName());\n            volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());\n        } else {\n            volResponse.setDiskOfferingName(diskOffering.getName());\n            volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());\n        }\n\n        Long poolId = volume.getPoolId();\n        String poolName = (poolId == null) ? \"none\" : ApiDBUtils.findStoragePoolById(poolId).getName();\n        volResponse.setStoragePoolName(poolName);\n        volResponse.setSourceId(volume.getSourceId());\n        if (volume.getSourceType() != null) {\n            volResponse.setSourceType(volume.getSourceType().toString());\n        }\n        volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());\n        volResponse.setAttached(volume.getAttached());\n        volResponse.setDestroyed(volume.getDestroyed());\n        VMTemplateVO template = ApiDBUtils.findTemplateById(volume.getTemplateId());      \n\t\tboolean isExtractable = template != null&&  template.isExtractable()&&  !(template.getTemplateType()== TemplateType.SYSTEM);\n        volResponse.setExtractable(isExtractable);\n        volResponse.setObjectName(\"volume\");\n        return volResponse;\n    }","id":70038,"modified_method":"@Override\n    public VolumeResponse createVolumeResponse(Volume volume) {\n        VolumeResponse volResponse = new VolumeResponse();\n        volResponse.setId(volume.getId());\n\n        if (volume.getName() != null) {\n            volResponse.setName(volume.getName());\n        } else {\n            volResponse.setName(\"\");\n        }\n\n        volResponse.setZoneId(volume.getDataCenterId());\n        volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());\n\n        volResponse.setVolumeType(volume.getVolumeType().toString());\n        volResponse.setDeviceId(volume.getDeviceId());\n\n        Long instanceId = volume.getInstanceId();\n        if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n            VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n            volResponse.setVirtualMachineId(vm.getId());\n            volResponse.setVirtualMachineName(vm.getName());\n            if(vm.getType().equals(VirtualMachine.Type.User)) {\n                UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n                volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n            }else {\n                volResponse.setVirtualMachineDisplayName(vm.getName());\n            }\n            volResponse.setVirtualMachineState(vm.getState().toString());\n        }\n\n        // Show the virtual size of the volume\n        volResponse.setSize(volume.getSize());\n\n        volResponse.setCreated(volume.getCreated());\n        volResponse.setState(volume.getStatus().toString());\n\n        Account accountTemp = ApiDBUtils.findAccountById(volume.getAccountId());\n        if (accountTemp != null) {\n            volResponse.setAccountName(accountTemp.getAccountName());\n            volResponse.setDomainId(accountTemp.getDomainId());\n            volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());\n        }\n\n        String storageType;\n        try {\n            if (volume.getPoolId() == null) {\n                if (volume.getState() == Volume.State.Allocated) {\n                    /* set it as shared, so the UI can attach it to VM */\n                    storageType = \"shared\";\n                } else {\n                    storageType = \"unknown\";\n                }\n            } else {\n                storageType = ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? \"shared\" : \"local\";\n            }\n        } catch (InvalidParameterValueException e) {\n            s_logger.error(e.getMessage(), e);\n            throw new ServerApiException(BaseCmd.INTERNAL_ERROR, \"Volume \" + volume.getName() + \" does not have a valid ID\");\n        }\n\n        volResponse.setStorageType(storageType);\n        if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {\n            volResponse.setServiceOfferingId(volume.getDiskOfferingId());\n        } else {\n            volResponse.setDiskOfferingId(volume.getDiskOfferingId());\n        }\n\n        DiskOfferingVO diskOffering = ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());\n        if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {\n            volResponse.setServiceOfferingName(diskOffering.getName());\n            volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());\n        } else {\n            volResponse.setDiskOfferingName(diskOffering.getName());\n            volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());\n        }\n\n        Long poolId = volume.getPoolId();\n        String poolName = (poolId == null) ? \"none\" : ApiDBUtils.findStoragePoolById(poolId).getName();\n        volResponse.setStoragePoolName(poolName);\n        volResponse.setSourceId(volume.getSourceId());\n        if (volume.getSourceType() != null) {\n            volResponse.setSourceType(volume.getSourceType().toString());\n        }\n        volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());\n        volResponse.setAttached(volume.getAttached());\n        volResponse.setDestroyed(volume.getDestroyed());\n        VMTemplateVO template = ApiDBUtils.findTemplateById(volume.getTemplateId());      \n\t\tboolean isExtractable = template != null&&  template.isExtractable()&&  !(template.getTemplateType()== TemplateType.SYSTEM);\n        volResponse.setExtractable(isExtractable);\n        volResponse.setObjectName(\"volume\");\n        return volResponse;\n    }","commit_id":"bec7ea4a96952547ab904713e05e54d468c0ef76","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public VolumeResponse newVolumeResponse(ResponseView view, VolumeJoinVO volume) {\n        VolumeResponse volResponse = new VolumeResponse();\n        volResponse.setId(volume.getUuid());\n\n        if (volume.getName() != null) {\n            volResponse.setName(volume.getName());\n        } else {\n            volResponse.setName(\"\");\n        }\n\n        volResponse.setZoneId(volume.getDataCenterUuid());\n        volResponse.setZoneName(volume.getDataCenterName());\n\n        volResponse.setVolumeType(volume.getVolumeType().toString());\n        volResponse.setDeviceId(volume.getDeviceId());\n\n        long instanceId = volume.getVmId();\n        if (instanceId > 0 && volume.getState() != Volume.State.Destroy) {\n            volResponse.setVirtualMachineId(volume.getVmUuid());\n            volResponse.setVirtualMachineName(volume.getVmName());\n            volResponse.setVirtualMachineState(volume.getVmState().toString());\n            volResponse.setVirtualMachineDisplayName(volume.getVmDisplayName());\n        }\n\n        volResponse.setProvisioningType(volume.getProvisioningType().toString());\n\n        // Show the virtual size of the volume\n        volResponse.setSize(volume.getSize());\n\n        volResponse.setMinIops(volume.getMinIops());\n        volResponse.setMaxIops(volume.getMaxIops());\n\n        volResponse.setCreated(volume.getCreated());\n        volResponse.setState(volume.getState().toString());\n        if (volume.getState() == Volume.State.UploadOp) {\n            // com.cloud.storage.VolumeHostVO volumeHostRef =\n            // ApiDBUtils.findVolumeHostRef(volume.getId(),\n            // volume.getDataCenterId());\n            volResponse.setSize(volume.getVolumeStoreSize());\n            volResponse.setCreated(volume.getCreatedOnStore());\n\n            if (view == ResponseView.Full)\n                volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(), volume.getFormat()).toString());\n            if (volume.getDownloadState() != Status.DOWNLOADED) {\n                String volumeStatus = \"Processing\";\n                if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOAD_IN_PROGRESS) {\n                    if (volume.getDownloadPercent() == 100) {\n                        volumeStatus = \"Checking Volume\";\n                    } else {\n                        volumeStatus = volume.getDownloadPercent() + \"% Uploaded\";\n                    }\n                    volResponse.setState(\"Uploading\");\n                } else {\n                    volumeStatus = volume.getErrorString();\n                    if (volume.getDownloadState() == VMTemplateHostVO.Status.NOT_DOWNLOADED) {\n                        volResponse.setState(\"UploadNotStarted\");\n                    } else {\n                        volResponse.setState(\"UploadError\");\n                    }\n                }\n                volResponse.setStatus(volumeStatus);\n            } else if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOADED) {\n                volResponse.setStatus(\"Upload Complete\");\n                volResponse.setState(\"Uploaded\");\n            } else {\n                volResponse.setStatus(\"Successfully Installed\");\n            }\n        }\n\n        if (view == ResponseView.Full) {\n            volResponse.setPath(volume.getPath());\n        }\n\n        // populate owner.\n        ApiResponseHelper.populateOwner(volResponse, volume);\n\n        // DiskOfferingVO diskOffering =\n        // ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());\n        if (volume.getDiskOfferingId() > 0) {\n            boolean isServiceOffering = false;\n            if (volume.getVolumeType().equals(Volume.Type.ROOT)) {\n                isServiceOffering = true;\n            } else {\n                // can't rely on the fact that the volume is the datadisk as it might have been created as a root, and\n                // then detached later\n                long offeringId = volume.getDiskOfferingId();\n                if (ApiDBUtils.findDiskOfferingById(offeringId) == null) {\n                    isServiceOffering = true;\n                }\n            }\n\n            if (isServiceOffering) {\n                volResponse.setServiceOfferingId(volume.getDiskOfferingUuid());\n                volResponse.setServiceOfferingName(volume.getDiskOfferingName());\n                volResponse.setServiceOfferingDisplayText(volume.getDiskOfferingDisplayText());\n            } else {\n                volResponse.setDiskOfferingId(volume.getDiskOfferingUuid());\n                volResponse.setDiskOfferingName(volume.getDiskOfferingName());\n                volResponse.setDiskOfferingDisplayText(volume.getDiskOfferingDisplayText());\n            }\n\n            volResponse.setStorageType(volume.isUseLocalStorage() ? ServiceOffering.StorageType.local.toString() : ServiceOffering.StorageType.shared.toString());\n            volResponse.setBytesReadRate(volume.getBytesReadRate());\n            volResponse.setBytesWriteRate(volume.getBytesReadRate());\n            volResponse.setIopsReadRate(volume.getIopsWriteRate());\n            volResponse.setIopsWriteRate(volume.getIopsWriteRate());\n\n        }\n\n        // return hypervisor and storage pool info for ROOT and Resource domain only\n        if (view == ResponseView.Full) {\n            if (volume.getState() != Volume.State.UploadOp) {\n                if (volume.getHypervisorType() != null) {\n                    volResponse.setHypervisor(volume.getHypervisorType().toString());\n                } else {\n                    volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(), volume.getFormat()).toString());\n                }\n            }\n            Long poolId = volume.getPoolId();\n            String poolName = (poolId == null) ? \"none\" : volume.getPoolName();\n            volResponse.setStoragePoolName(poolName);\n            volResponse.setStoragePoolId(volume.getPoolUuid());\n        }\n\n        volResponse.setAttached(volume.getAttached());\n        volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);\n        boolean isExtractable = true;\n        if (volume.getVolumeType() != Volume.Type.DATADISK) { // Datadisk dont\n            // have any\n            // template\n            // dependence.\n            if (volume.getTemplateId() > 0) { // For ISO based volumes template\n                // = null and we allow extraction\n                // of all ISO based volumes\n                isExtractable = volume.isExtractable() && volume.getTemplateType() != Storage.TemplateType.SYSTEM;\n            }\n        }\n\n        // update tag information\n        long tag_id = volume.getTagId();\n        if (tag_id > 0) {\n            ResourceTagJoinVO vtag = ApiDBUtils.findResourceTagViewById(tag_id);\n            if (vtag != null) {\n                volResponse.addTag(ApiDBUtils.newResourceTagResponse(vtag, false));\n            }\n        }\n\n        volResponse.setExtractable(isExtractable);\n        volResponse.setDisplayVolume(volume.isDisplayVolume());\n        volResponse.setChainInfo(volume.getChainInfo());\n\n        volResponse.setTemplateId(volume.getTemplateUuid());\n        volResponse.setTemplateName(volume.getTemplateName());\n        volResponse.setTemplateDisplayText(volume.getTemplateDisplayText());\n\n        volResponse.setIsoId(volume.getIsoUuid());\n        volResponse.setIsoName(volume.getIsoName());\n        volResponse.setIsoDisplayText(volume.getIsoDisplayText());\n\n        // set async job\n        if (volume.getJobId() != null) {\n            volResponse.setJobId(volume.getJobUuid());\n            volResponse.setJobStatus(volume.getJobStatus());\n        }\n\n        volResponse.setObjectName(\"volume\");\n        return volResponse;\n    }","id":70039,"modified_method":"@Override\n    public VolumeResponse newVolumeResponse(ResponseView view, VolumeJoinVO volume) {\n        VolumeResponse volResponse = new VolumeResponse();\n        volResponse.setId(volume.getUuid());\n\n        if (volume.getName() != null) {\n            volResponse.setName(volume.getName());\n        } else {\n            volResponse.setName(\"\");\n        }\n\n        volResponse.setZoneId(volume.getDataCenterUuid());\n        volResponse.setZoneName(volume.getDataCenterName());\n\n        volResponse.setVolumeType(volume.getVolumeType().toString());\n        volResponse.setDeviceId(volume.getDeviceId());\n\n        long instanceId = volume.getVmId();\n        if (instanceId > 0 && volume.getState() != Volume.State.Destroy) {\n            volResponse.setVirtualMachineId(volume.getVmUuid());\n            volResponse.setVirtualMachineName(volume.getVmName());\n            volResponse.setVirtualMachineState(volume.getVmState().toString());\n            if (volume.getVmDisplayName() != null) {\n                volResponse.setVirtualMachineDisplayName(volume.getVmDisplayName());\n            } else {\n                volResponse.setVirtualMachineDisplayName(volume.getVmName());\n            }\n        }\n\n        volResponse.setProvisioningType(volume.getProvisioningType().toString());\n\n        // Show the virtual size of the volume\n        volResponse.setSize(volume.getSize());\n\n        volResponse.setMinIops(volume.getMinIops());\n        volResponse.setMaxIops(volume.getMaxIops());\n\n        volResponse.setCreated(volume.getCreated());\n        volResponse.setState(volume.getState().toString());\n        if (volume.getState() == Volume.State.UploadOp) {\n            // com.cloud.storage.VolumeHostVO volumeHostRef =\n            // ApiDBUtils.findVolumeHostRef(volume.getId(),\n            // volume.getDataCenterId());\n            volResponse.setSize(volume.getVolumeStoreSize());\n            volResponse.setCreated(volume.getCreatedOnStore());\n\n            if (view == ResponseView.Full)\n                volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(), volume.getFormat()).toString());\n            if (volume.getDownloadState() != Status.DOWNLOADED) {\n                String volumeStatus = \"Processing\";\n                if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOAD_IN_PROGRESS) {\n                    if (volume.getDownloadPercent() == 100) {\n                        volumeStatus = \"Checking Volume\";\n                    } else {\n                        volumeStatus = volume.getDownloadPercent() + \"% Uploaded\";\n                    }\n                    volResponse.setState(\"Uploading\");\n                } else {\n                    volumeStatus = volume.getErrorString();\n                    if (volume.getDownloadState() == VMTemplateHostVO.Status.NOT_DOWNLOADED) {\n                        volResponse.setState(\"UploadNotStarted\");\n                    } else {\n                        volResponse.setState(\"UploadError\");\n                    }\n                }\n                volResponse.setStatus(volumeStatus);\n            } else if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOADED) {\n                volResponse.setStatus(\"Upload Complete\");\n                volResponse.setState(\"Uploaded\");\n            } else {\n                volResponse.setStatus(\"Successfully Installed\");\n            }\n        }\n\n        if (view == ResponseView.Full) {\n            volResponse.setPath(volume.getPath());\n        }\n\n        // populate owner.\n        ApiResponseHelper.populateOwner(volResponse, volume);\n\n        // DiskOfferingVO diskOffering =\n        // ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());\n        if (volume.getDiskOfferingId() > 0) {\n            boolean isServiceOffering = false;\n            if (volume.getVolumeType().equals(Volume.Type.ROOT)) {\n                isServiceOffering = true;\n            } else {\n                // can't rely on the fact that the volume is the datadisk as it might have been created as a root, and\n                // then detached later\n                long offeringId = volume.getDiskOfferingId();\n                if (ApiDBUtils.findDiskOfferingById(offeringId) == null) {\n                    isServiceOffering = true;\n                }\n            }\n\n            if (isServiceOffering) {\n                volResponse.setServiceOfferingId(volume.getDiskOfferingUuid());\n                volResponse.setServiceOfferingName(volume.getDiskOfferingName());\n                volResponse.setServiceOfferingDisplayText(volume.getDiskOfferingDisplayText());\n            } else {\n                volResponse.setDiskOfferingId(volume.getDiskOfferingUuid());\n                volResponse.setDiskOfferingName(volume.getDiskOfferingName());\n                volResponse.setDiskOfferingDisplayText(volume.getDiskOfferingDisplayText());\n            }\n\n            volResponse.setStorageType(volume.isUseLocalStorage() ? ServiceOffering.StorageType.local.toString() : ServiceOffering.StorageType.shared.toString());\n            volResponse.setBytesReadRate(volume.getBytesReadRate());\n            volResponse.setBytesWriteRate(volume.getBytesReadRate());\n            volResponse.setIopsReadRate(volume.getIopsWriteRate());\n            volResponse.setIopsWriteRate(volume.getIopsWriteRate());\n\n        }\n\n        // return hypervisor and storage pool info for ROOT and Resource domain only\n        if (view == ResponseView.Full) {\n            if (volume.getState() != Volume.State.UploadOp) {\n                if (volume.getHypervisorType() != null) {\n                    volResponse.setHypervisor(volume.getHypervisorType().toString());\n                } else {\n                    volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(), volume.getFormat()).toString());\n                }\n            }\n            Long poolId = volume.getPoolId();\n            String poolName = (poolId == null) ? \"none\" : volume.getPoolName();\n            volResponse.setStoragePoolName(poolName);\n            volResponse.setStoragePoolId(volume.getPoolUuid());\n        }\n\n        volResponse.setAttached(volume.getAttached());\n        volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);\n        boolean isExtractable = true;\n        if (volume.getVolumeType() != Volume.Type.DATADISK) { // Datadisk dont\n            // have any\n            // template\n            // dependence.\n            if (volume.getTemplateId() > 0) { // For ISO based volumes template\n                // = null and we allow extraction\n                // of all ISO based volumes\n                isExtractable = volume.isExtractable() && volume.getTemplateType() != Storage.TemplateType.SYSTEM;\n            }\n        }\n\n        // update tag information\n        long tag_id = volume.getTagId();\n        if (tag_id > 0) {\n            ResourceTagJoinVO vtag = ApiDBUtils.findResourceTagViewById(tag_id);\n            if (vtag != null) {\n                volResponse.addTag(ApiDBUtils.newResourceTagResponse(vtag, false));\n            }\n        }\n\n        volResponse.setExtractable(isExtractable);\n        volResponse.setDisplayVolume(volume.isDisplayVolume());\n        volResponse.setChainInfo(volume.getChainInfo());\n\n        volResponse.setTemplateId(volume.getTemplateUuid());\n        volResponse.setTemplateName(volume.getTemplateName());\n        volResponse.setTemplateDisplayText(volume.getTemplateDisplayText());\n\n        volResponse.setIsoId(volume.getIsoUuid());\n        volResponse.setIsoName(volume.getIsoName());\n        volResponse.setIsoDisplayText(volume.getIsoDisplayText());\n\n        // set async job\n        if (volume.getJobId() != null) {\n            volResponse.setJobId(volume.getJobUuid());\n            volResponse.setJobStatus(volume.getJobStatus());\n        }\n\n        volResponse.setObjectName(\"volume\");\n        return volResponse;\n    }","commit_id":"8f4aa23ae03e1fccb4357e95fbc71134616caeab","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public VolumeResponse newVolumeResponse(ResponseView view, VolumeJoinVO volume) {\n        VolumeResponse volResponse = new VolumeResponse();\n        volResponse.setId(volume.getUuid());\n\n        if (volume.getName() != null) {\n            volResponse.setName(volume.getName());\n        } else {\n            volResponse.setName(\"\");\n        }\n\n        volResponse.setZoneId(volume.getDataCenterUuid());\n        volResponse.setZoneName(volume.getDataCenterName());\n\n        volResponse.setVolumeType(volume.getVolumeType().toString());\n        volResponse.setDeviceId(volume.getDeviceId());\n\n        long instanceId = volume.getVmId();\n        if (instanceId > 0 && volume.getState() != Volume.State.Destroy) {\n            volResponse.setVirtualMachineId(volume.getVmUuid());\n            volResponse.setVirtualMachineName(volume.getVmName());\n            volResponse.setVirtualMachineState(volume.getVmState().toString());\n            volResponse.setVirtualMachineDisplayName(volume.getVmDisplayName());\n        }\n\n        volResponse.setProvisioningType(volume.getProvisioningType().toString());\n\n        // Show the virtual size of the volume\n        volResponse.setSize(volume.getSize());\n\n        volResponse.setMinIops(volume.getMinIops());\n        volResponse.setMaxIops(volume.getMaxIops());\n\n        volResponse.setCreated(volume.getCreated());\n        volResponse.setState(volume.getState().toString());\n        if (volume.getState() == Volume.State.UploadOp) {\n            // com.cloud.storage.VolumeHostVO volumeHostRef =\n            // ApiDBUtils.findVolumeHostRef(volume.getId(),\n            // volume.getDataCenterId());\n            volResponse.setSize(volume.getVolumeStoreSize());\n            volResponse.setCreated(volume.getCreatedOnStore());\n\n            if (view == ResponseView.Full)\n                volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(), volume.getFormat()).toString());\n            if (volume.getDownloadState() != Status.DOWNLOADED) {\n                String volumeStatus = \"Processing\";\n                if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOAD_IN_PROGRESS) {\n                    if (volume.getDownloadPercent() == 100) {\n                        volumeStatus = \"Checking Volume\";\n                    } else {\n                        volumeStatus = volume.getDownloadPercent() + \"% Uploaded\";\n                    }\n                    volResponse.setState(\"Uploading\");\n                } else {\n                    volumeStatus = volume.getErrorString();\n                    if (volume.getDownloadState() == VMTemplateHostVO.Status.NOT_DOWNLOADED) {\n                        volResponse.setState(\"UploadNotStarted\");\n                    } else {\n                        volResponse.setState(\"UploadError\");\n                    }\n                }\n                volResponse.setStatus(volumeStatus);\n            } else if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOADED) {\n                volResponse.setStatus(\"Upload Complete\");\n                volResponse.setState(\"Uploaded\");\n            } else {\n                volResponse.setStatus(\"Successfully Installed\");\n            }\n        }\n\n        if (view == ResponseView.Full) {\n            volResponse.setPath(volume.getPath());\n        }\n\n        // populate owner.\n        ApiResponseHelper.populateOwner(volResponse, volume);\n\n        // DiskOfferingVO diskOffering =\n        // ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());\n        if (volume.getDiskOfferingId() > 0) {\n            boolean isServiceOffering = false;\n            if (volume.getVolumeType().equals(Volume.Type.ROOT)) {\n                isServiceOffering = true;\n            } else {\n                // can't rely on the fact that the volume is the datadisk as it might have been created as a root, and\n                // then detached later\n                long offeringId = volume.getDiskOfferingId();\n                if (ApiDBUtils.findDiskOfferingById(offeringId) == null) {\n                    isServiceOffering = true;\n                }\n            }\n\n            if (isServiceOffering) {\n                volResponse.setServiceOfferingId(volume.getDiskOfferingUuid());\n                volResponse.setServiceOfferingName(volume.getDiskOfferingName());\n                volResponse.setServiceOfferingDisplayText(volume.getDiskOfferingDisplayText());\n            } else {\n                volResponse.setDiskOfferingId(volume.getDiskOfferingUuid());\n                volResponse.setDiskOfferingName(volume.getDiskOfferingName());\n                volResponse.setDiskOfferingDisplayText(volume.getDiskOfferingDisplayText());\n            }\n\n            volResponse.setStorageType(volume.isUseLocalStorage() ? ServiceOffering.StorageType.local.toString() : ServiceOffering.StorageType.shared.toString());\n            volResponse.setBytesReadRate(volume.getBytesReadRate());\n            volResponse.setBytesWriteRate(volume.getBytesReadRate());\n            volResponse.setIopsReadRate(volume.getIopsWriteRate());\n            volResponse.setIopsWriteRate(volume.getIopsWriteRate());\n\n        }\n\n        // return hypervisor and storage pool info for ROOT and Resource domain only\n        if (view == ResponseView.Full) {\n            if (volume.getState() != Volume.State.UploadOp) {\n                if (volume.getHypervisorType() != null) {\n                    volResponse.setHypervisor(volume.getHypervisorType().toString());\n                } else {\n                    volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(), volume.getFormat()).toString());\n                }\n            }\n            Long poolId = volume.getPoolId();\n            String poolName = (poolId == null) ? \"none\" : volume.getPoolName();\n            volResponse.setStoragePoolName(poolName);\n            volResponse.setStoragePoolId(volume.getPoolUuid());\n        }\n\n        volResponse.setAttached(volume.getAttached());\n        volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);\n        boolean isExtractable = true;\n        if (volume.getVolumeType() != Volume.Type.DATADISK) { // Datadisk dont\n            // have any\n            // template\n            // dependence.\n            if (volume.getTemplateId() > 0) { // For ISO based volumes template\n                // = null and we allow extraction\n                // of all ISO based volumes\n                isExtractable = volume.isExtractable() && volume.getTemplateType() != Storage.TemplateType.SYSTEM;\n            }\n        }\n\n        // update tag information\n        long tag_id = volume.getTagId();\n        if (tag_id > 0) {\n            ResourceTagJoinVO vtag = ApiDBUtils.findResourceTagViewById(tag_id);\n            if (vtag != null) {\n                volResponse.addTag(ApiDBUtils.newResourceTagResponse(vtag, false));\n            }\n        }\n\n        volResponse.setExtractable(isExtractable);\n        volResponse.setDisplayVolume(volume.isDisplayVolume());\n        volResponse.setChainInfo(volume.getChainInfo());\n\n        volResponse.setTemplateId(volume.getTemplateUuid());\n        volResponse.setTemplateName(volume.getTemplateName());\n        volResponse.setTemplateDisplayText(volume.getTemplateDisplayText());\n\n        volResponse.setIsoId(volume.getIsoUuid());\n        volResponse.setIsoName(volume.getIsoName());\n        volResponse.setIsoDisplayText(volume.getIsoDisplayText());\n\n        // set async job\n        if (volume.getJobId() != null) {\n            volResponse.setJobId(volume.getJobUuid());\n            volResponse.setJobStatus(volume.getJobStatus());\n        }\n\n        volResponse.setObjectName(\"volume\");\n        return volResponse;\n    }","id":70040,"modified_method":"@Override\n    public VolumeResponse newVolumeResponse(ResponseView view, VolumeJoinVO volume) {\n        VolumeResponse volResponse = new VolumeResponse();\n        volResponse.setId(volume.getUuid());\n\n        if (volume.getName() != null) {\n            volResponse.setName(volume.getName());\n        } else {\n            volResponse.setName(\"\");\n        }\n\n        volResponse.setZoneId(volume.getDataCenterUuid());\n        volResponse.setZoneName(volume.getDataCenterName());\n\n        volResponse.setVolumeType(volume.getVolumeType().toString());\n        volResponse.setDeviceId(volume.getDeviceId());\n\n        long instanceId = volume.getVmId();\n        if (instanceId > 0 && volume.getState() != Volume.State.Destroy) {\n            volResponse.setVirtualMachineId(volume.getVmUuid());\n            volResponse.setVirtualMachineName(volume.getVmName());\n            volResponse.setVirtualMachineState(volume.getVmState().toString());\n            if (volume.getVmDisplayName() != null) {\n                volResponse.setVirtualMachineDisplayName(volume.getVmDisplayName());\n            } else {\n                volResponse.setVirtualMachineDisplayName(volume.getVmName());\n            }\n        }\n\n        volResponse.setProvisioningType(volume.getProvisioningType().toString());\n\n        // Show the virtual size of the volume\n        volResponse.setSize(volume.getSize());\n\n        volResponse.setMinIops(volume.getMinIops());\n        volResponse.setMaxIops(volume.getMaxIops());\n\n        volResponse.setCreated(volume.getCreated());\n        volResponse.setState(volume.getState().toString());\n        if (volume.getState() == Volume.State.UploadOp) {\n            // com.cloud.storage.VolumeHostVO volumeHostRef =\n            // ApiDBUtils.findVolumeHostRef(volume.getId(),\n            // volume.getDataCenterId());\n            volResponse.setSize(volume.getVolumeStoreSize());\n            volResponse.setCreated(volume.getCreatedOnStore());\n\n            if (view == ResponseView.Full)\n                volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(), volume.getFormat()).toString());\n            if (volume.getDownloadState() != Status.DOWNLOADED) {\n                String volumeStatus = \"Processing\";\n                if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOAD_IN_PROGRESS) {\n                    if (volume.getDownloadPercent() == 100) {\n                        volumeStatus = \"Checking Volume\";\n                    } else {\n                        volumeStatus = volume.getDownloadPercent() + \"% Uploaded\";\n                    }\n                    volResponse.setState(\"Uploading\");\n                } else {\n                    volumeStatus = volume.getErrorString();\n                    if (volume.getDownloadState() == VMTemplateHostVO.Status.NOT_DOWNLOADED) {\n                        volResponse.setState(\"UploadNotStarted\");\n                    } else {\n                        volResponse.setState(\"UploadError\");\n                    }\n                }\n                volResponse.setStatus(volumeStatus);\n            } else if (volume.getDownloadState() == VMTemplateHostVO.Status.DOWNLOADED) {\n                volResponse.setStatus(\"Upload Complete\");\n                volResponse.setState(\"Uploaded\");\n            } else {\n                volResponse.setStatus(\"Successfully Installed\");\n            }\n        }\n\n        if (view == ResponseView.Full) {\n            volResponse.setPath(volume.getPath());\n        }\n\n        // populate owner.\n        ApiResponseHelper.populateOwner(volResponse, volume);\n\n        // DiskOfferingVO diskOffering =\n        // ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());\n        if (volume.getDiskOfferingId() > 0) {\n            boolean isServiceOffering = false;\n            if (volume.getVolumeType().equals(Volume.Type.ROOT)) {\n                isServiceOffering = true;\n            } else {\n                // can't rely on the fact that the volume is the datadisk as it might have been created as a root, and\n                // then detached later\n                long offeringId = volume.getDiskOfferingId();\n                if (ApiDBUtils.findDiskOfferingById(offeringId) == null) {\n                    isServiceOffering = true;\n                }\n            }\n\n            if (isServiceOffering) {\n                volResponse.setServiceOfferingId(volume.getDiskOfferingUuid());\n                volResponse.setServiceOfferingName(volume.getDiskOfferingName());\n                volResponse.setServiceOfferingDisplayText(volume.getDiskOfferingDisplayText());\n            } else {\n                volResponse.setDiskOfferingId(volume.getDiskOfferingUuid());\n                volResponse.setDiskOfferingName(volume.getDiskOfferingName());\n                volResponse.setDiskOfferingDisplayText(volume.getDiskOfferingDisplayText());\n            }\n\n            volResponse.setStorageType(volume.isUseLocalStorage() ? ServiceOffering.StorageType.local.toString() : ServiceOffering.StorageType.shared.toString());\n            volResponse.setBytesReadRate(volume.getBytesReadRate());\n            volResponse.setBytesWriteRate(volume.getBytesReadRate());\n            volResponse.setIopsReadRate(volume.getIopsWriteRate());\n            volResponse.setIopsWriteRate(volume.getIopsWriteRate());\n\n        }\n\n        // return hypervisor and storage pool info for ROOT and Resource domain only\n        if (view == ResponseView.Full) {\n            if (volume.getState() != Volume.State.UploadOp) {\n                if (volume.getHypervisorType() != null) {\n                    volResponse.setHypervisor(volume.getHypervisorType().toString());\n                } else {\n                    volResponse.setHypervisor(ApiDBUtils.getHypervisorTypeFromFormat(volume.getDataCenterId(), volume.getFormat()).toString());\n                }\n            }\n            Long poolId = volume.getPoolId();\n            String poolName = (poolId == null) ? \"none\" : volume.getPoolName();\n            volResponse.setStoragePoolName(poolName);\n            volResponse.setStoragePoolId(volume.getPoolUuid());\n        }\n\n        volResponse.setAttached(volume.getAttached());\n        volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);\n        boolean isExtractable = true;\n        if (volume.getVolumeType() != Volume.Type.DATADISK) { // Datadisk dont\n            // have any\n            // template\n            // dependence.\n            if (volume.getTemplateId() > 0) { // For ISO based volumes template\n                // = null and we allow extraction\n                // of all ISO based volumes\n                isExtractable = volume.isExtractable() && volume.getTemplateType() != Storage.TemplateType.SYSTEM;\n            }\n        }\n\n        // update tag information\n        long tag_id = volume.getTagId();\n        if (tag_id > 0) {\n            ResourceTagJoinVO vtag = ApiDBUtils.findResourceTagViewById(tag_id);\n            if (vtag != null) {\n                volResponse.addTag(ApiDBUtils.newResourceTagResponse(vtag, false));\n            }\n        }\n\n        volResponse.setExtractable(isExtractable);\n        volResponse.setDisplayVolume(volume.isDisplayVolume());\n        volResponse.setChainInfo(volume.getChainInfo());\n\n        volResponse.setTemplateId(volume.getTemplateUuid());\n        volResponse.setTemplateName(volume.getTemplateName());\n        volResponse.setTemplateDisplayText(volume.getTemplateDisplayText());\n\n        volResponse.setIsoId(volume.getIsoUuid());\n        volResponse.setIsoName(volume.getIsoName());\n        volResponse.setIsoDisplayText(volume.getIsoDisplayText());\n\n        // set async job\n        if (volume.getJobId() != null) {\n            volResponse.setJobId(volume.getJobUuid());\n            volResponse.setJobStatus(volume.getJobStatus());\n        }\n\n        volResponse.setObjectName(\"volume\");\n        return volResponse;\n    }","commit_id":"ff7997a2b139ed25f301ed1b8ad388864fcb9980","url":"https://github.com/apache/cloudstack"},{"original_method":"private Map<String,Object> getPropertyChain( int propertyId )\n    {\n        PropertyStore propStore = getPropertyStore();\n        PropertyRecord propertyRecord = propStore.getRecord( propertyId );\n        int nextProperty = propertyRecord.getNextProp();\n        Map<String,Object> properties = new HashMap<String,Object>();\n        do\n        {\n            propStore.makeHeavy( propertyRecord );\n            String key = indexHolder.getStringKey( \n                propertyRecord.getKeyIndexId() );\n            Object value = propStore.getValue( propertyRecord );\n            properties.put( key, value );\n            if ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() )\n            {\n                propertyRecord =\n                    propStore.getRecord( propertyRecord.getNextProp() );\n            }\n        } while ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() );\n        return properties;\n    }","id":70041,"modified_method":"private Map<String,Object> getPropertyChain( int propertyId )\n    {\n        PropertyStore propStore = getPropertyStore();\n        PropertyRecord propertyRecord = propStore.getRecord( propertyId );\n        int nextProperty = -1;\n        Map<String,Object> properties = new HashMap<String,Object>();\n        do\n        {\n            nextProperty = propertyRecord.getNextProp();\n            propStore.makeHeavy( propertyRecord );\n            String key = indexHolder.getStringKey( \n                propertyRecord.getKeyIndexId() );\n            Object value = propStore.getValue( propertyRecord );\n            properties.put( key, value );\n            if ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() )\n            {\n                propertyRecord =\n                    propStore.getRecord( propertyRecord.getNextProp() );\n            }\n        } while ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() );\n        return properties;\n    }","commit_id":"79586b777e7e462369c00d246e9e5810c113e056","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Map<String,Object> getPropertyChain( int propertyId )\n    {\n        PropertyStore propStore = getPropertyStore();\n        PropertyRecord propertyRecord = propStore.getRecord( propertyId );\n        int nextProperty = propertyRecord.getNextProp();\n        Map<String,Object> properties = new HashMap<String,Object>();\n        do\n        {\n            propStore.makeHeavy( propertyRecord );\n            String key = indexHolder.getStringKey( \n                propertyRecord.getKeyIndexId() );\n            Object value = propStore.getValue( propertyRecord );\n            properties.put( key, value );\n            if ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() )\n            {\n                propertyRecord =\n                    propStore.getRecord( propertyRecord.getNextProp() );\n            }\n        } while ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() );\n        return properties;\n    }","id":70042,"modified_method":"private Map<String,Object> getPropertyChain( int propertyId )\n    {\n        PropertyStore propStore = getPropertyStore();\n        PropertyRecord propertyRecord = propStore.getRecord( propertyId );\n        int nextProperty = -1;\n        Map<String,Object> properties = new HashMap<String,Object>();\n        do\n        {\n            nextProperty = propertyRecord.getNextProp();\n            propStore.makeHeavy( propertyRecord );\n            String key = indexHolder.getStringKey( \n                propertyRecord.getKeyIndexId() );\n            Object value = propStore.getValue( propertyRecord );\n            properties.put( key, value );\n            if ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() )\n            {\n                propertyRecord =\n                    propStore.getRecord( propertyRecord.getNextProp() );\n            }\n        } while ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() );\n        return properties;\n    }","commit_id":"6274aee35c192edc299e5e6f03d889e051435268","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Map<String,Object> getPropertyChain( int propertyId )\n    {\n        PropertyStore propStore = getPropertyStore();\n        PropertyRecord propertyRecord = propStore.getRecord( propertyId );\n        int nextProperty = propertyRecord.getNextProp();\n        Map<String,Object> properties = new HashMap<String,Object>();\n        do\n        {\n            propStore.makeHeavy( propertyRecord );\n            String key = indexHolder.getStringKey( \n                propertyRecord.getKeyIndexId() );\n            Object value = propStore.getValue( propertyRecord );\n            properties.put( key, value );\n            if ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() )\n            {\n                propertyRecord =\n                    propStore.getRecord( propertyRecord.getNextProp() );\n            }\n        } while ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() );\n        return properties;\n    }","id":70043,"modified_method":"private Map<String,Object> getPropertyChain( int propertyId )\n    {\n        PropertyStore propStore = getPropertyStore();\n        PropertyRecord propertyRecord = propStore.getRecord( propertyId );\n        int nextProperty = -1;\n        Map<String,Object> properties = new HashMap<String,Object>();\n        do\n        {\n            nextProperty = propertyRecord.getNextProp();\n            propStore.makeHeavy( propertyRecord );\n            String key = indexHolder.getStringKey( \n                propertyRecord.getKeyIndexId() );\n            Object value = propStore.getValue( propertyRecord );\n            properties.put( key, value );\n            if ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() )\n            {\n                propertyRecord =\n                    propStore.getRecord( propertyRecord.getNextProp() );\n            }\n        } while ( nextProperty != Record.NO_NEXT_PROPERTY.intValue() );\n        return properties;\n    }","commit_id":"f71926548197c11f5cc093dcd7a849535511e6df","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n\t * We have the name of a specific version of a node key. Now we just need to figure\n\t * out which of our keys can be used to decrypt it.\n\t * @param nodeKeyName\n\t * @param nodeKeyIdentifier\n\t * @return\n\t * @throws IOException \n\t * @throws XMLStreamException \n\t * @throws InvalidKeyException \n\t * @throws InvalidCipherTextException \n\t */\n\tNodeKey getNodeKeyByVersionedName(ContentName nodeKeyName, byte [] nodeKeyIdentifier) throws XMLStreamException, IOException, InvalidKeyException, InvalidCipherTextException {\n\n\t\tNodeKey nk = null;\n\t\tKeyDirectory keyDirectory = null;\n\t\tWrappedKeyObject wko = null;\n\t\t\n\t\ttry {\n\n\t\t\tkeyDirectory = new KeyDirectory(this, nodeKeyName);\n\t\t\tArrayList<byte []> availableKeyBlocks = keyDirectory.getWrappingKeyIDs();\n\n\t\t\tif (keyDirectory.hasSupersededBlock() && \n\t\t\t\t\t(availableKeyBlocks.size() == 0) && (keyDirectory.getPrincipals().size() == 0)) {\n\n\t\t\t\t// Handle case where this node key is gone and superseded,\n\t\t\t\t// vs case where it's just superseded by a newer version of this key.\n\t\t\t\t// A superseded node key just contains a superseded block pointing\n\t\t\t\t// up to the superseding node. (You only get this if someone\n\t\t\t\t// deletes an ACL causing it to inherit from its parent again.)\n\t\t\t\twko = new WrappedKeyObject(keyDirectory.getSupersededBlockName(), _library);\n\t\t\t\twko.update();\n\t\t\t\tif (null == wko.wrappedKey()) {\n\t\t\t\t\tLibrary.logger().warning(\"Could not retrieve superseded key for node: \" + keyDirectory.getSupersededBlockName());\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t// DKS TODO be sure what node is used to name this, \n\t\t\t\t// might need to use data key wrapping derivation to wrap\n\t\t\t\tNodeKey enk = getNodeKeyForObject(keyDirectory.getSupersededBlockName(), wko);\n\t\t\t\tif (null != enk) {\n\t\t\t\t\tnk = new NodeKey(keyDirectory.getSupersededBlockName(), \n\t\t\t\t\t\t\t\t\twko.wrappedKey().unwrapKey(enk.nodeKey()));\n\t\t\t\t\treturn nk;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\t\t\t\n\n\t\t\t// Do we have one of the wrapping keys in our cache?\n\t\t\tfor (byte [] keyid : availableKeyBlocks) {\n\t\t\t\tif (keyCache().containsKey(keyid)) {\n\t\t\t\t\t// We have it, pull the block, unwrap the node key.\n\t\t\t\t\twko = keyDirectory.getWrappedKeyForKeyID(keyid);\n\t\t\t\t\tif (null != wko.wrappedKey()) {\n\t\t\t\t\t\tnk = new NodeKey(nodeKeyName, \n\t\t\t\t\t\t\t\twko.wrappedKey().unwrapKey(keyCache().getPrivateKey(keyid)));\n\t\t\t\t\t\tif ((null != nodeKeyIdentifier) && (!Arrays.areEqual(keyid, nk.storedNodeKeyID()))) {\n\t\t\t\t\t\t\tLibrary.logger().warning(\"Retrieved and decrypted node key, but it was the wrong node key. We wanted \" + \n\t\t\t\t\t\t\t\t\tDataUtils.printBytes(keyid) + \", we got \" + DataUtils.printBytes(nk.storedNodeKeyID()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tkeyCache().addNodeKey(nk);\n\t\t\t\t\t\t\treturn nk;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// OK, not in cache. Our next step regardless is to check on the groups we think we're in.\n\t\t\tHashMap<String, Timestamp> groupNames = keyDirectory.getPrincipals();\n\t\t\tfor (Group myGroup : _myGroups) {\n\t\t\t\tif (groupNames.containsKey(myGroup.name())) {\n\t\t\t\t\t// TODO handle this group, add keys to the cache as we go\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Alright, we can't pull a group key for one of the groups we know we belong to\n\t\t\t// to help us. So now, two choices. If we're on the latest version (no superseded block)\n\t\t\t// start crawling the groups we don't know whether we're in. If we're not, chain back through\n\t\t\t// the superseded blocks, checking cache for each, till we get to the latest, then\n\t\t\t// crawl groups. There is a small chance we might have had access at an intervening\n\t\t\t// point and not at the latest node, but we're really supposed to pay attention to\n\t\t\t// the latest node policy (though attackers will not); so err on the side of limiting\n\t\t\t// access.\n\t\t\tif (keyDirectory.hasSupersededBlock()) {\n\t\t\t\t// We handled pure superseded (removed ACL) above. So we're looking for the latest\n\t\t\t\t// version of this node.\n\t\t\t\t// TODO DKS -- right name to query for\n\t\t\t\t// First we need to figure out what the latest version is of the node key.\n\t\t\t\tLibrary.logger().info(\"OK, not in cache, finding latest version of key \" + nodeKeyName);\n\t\t\t\tContentName latestNodeKeyName = EnumeratedNameList.getLatestVersionName(nodeKeyName);\n\n\t\t\t\tif (nodeKeyName.equals(latestNodeKeyName)) {\n\t\t\t\t\tLibrary.logger().info(\"Already looking at latest version of node key: \" + nodeKeyName);\n\t\t\t\t} else {\n\t\t\t\t\t// We weren't on the latest version\n\t\t\t\t\tLibrary.logger().info(\"Newer version \" + latestNodeKeyName + \" available for node key \" + nodeKeyName);\n\t\t\t\t\tNodeKey latestNodeKey = getNodeKeyByVersionedName(latestNodeKeyName, null);\n\t\t\t\t\tif (null == latestNodeKey) {\n\t\t\t\t\t\t// need to distinguish between don't have access and key gone.\n\t\t\t\t\t\t// throw access denied exception if no key available we can read\n\t\t\t\t\t\t// throw illegal state exception if no node key\n\t\t\t\t\t\t// superseded in old NKs works much better -- can easily tell if a NK is the\n\t\t\t\t\t\t// one in force, can find where to go for the latest even if uphill\n\t\t\t\t\t\t// need previous blocks if you interpose a lower acl, and need to chain backwards\n\t\t\t\t\t\t// at that level. so might have either. though if you're reading, you'll go straight\n\t\t\t\t\t\t// to the level of the old node key, and if you can't read that one, eventually\n\t\t\t\t\t\t// you'll look for an interposed key you can read. but if the data is too old\n\t\t\t\t\t\t// and you interpose an acl, you're in trouble.... you need to add in previous\n\t\t\t\t\t\t// blocks for all the node keys you're replacing with the effective node keys\n\t\t\t\t\t\t// for the interposed node.\n\t\t\t\t\t\t// Superseded blocks point sideways or up. Previous blocks handle relationships\n\t\t\t\t\t\t// pointing down (by pointing up with opposite semantics).\n\t\t\t\t\t\t// this would argue for a separation of getLatestNodeKey and get by specific version\n\t\t\t\t\t\tLibrary.logger().info(\"Were not able to retrieve a version of node key \" + latestNodeKeyName + \" we can read. Should we throw access denied?\");\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// chain backwards from the key we have to the key we want\n\t\t\t\t\t\tNodeKey ourNodeKey = retrievePreviousNodeKey(latestNodeKey, nodeKeyName);\n\t\t\t\t\t\tif (null == ourNodeKey) {\n\t\t\t\t\t\t\t// we're done, no access, but weird...\n\t\t\t\t\t\t\tLibrary.logger().warning(\"Unexpected: given current node key \" + latestNodeKeyName + \" we can't backwards-chain to node key for \" + nodeKeyName);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn ourNodeKey;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// OK, we're on the latest version. Attempt to walk the group/individual hierarchy.\n\t\t\tfor (String principalName : keyDirectory.getPrincipals().keySet()) {\n\t\t\t\t// TODO handle walking groups\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t} finally {\n\t\t\tif (null != keyDirectory) {\n\t\t\t\tkeyDirectory.stopEnumerating();\n\t\t\t}\n\t\t}\n\t}","id":70044,"modified_method":"/**\n\t * We have the name of a specific version of a node key. Now we just need to figure\n\t * out which of our keys can be used to decrypt it.\n\t * @param nodeKeyName\n\t * @param nodeKeyIdentifier\n\t * @return\n\t * @throws IOException \n\t * @throws XMLStreamException \n\t * @throws InvalidKeyException \n\t * @throws InvalidCipherTextException \n\t */\n\tNodeKey getNodeKeyByVersionedName(ContentName nodeKeyName, byte [] nodeKeyIdentifier) throws XMLStreamException, IOException, InvalidKeyException, InvalidCipherTextException {\n\n\t\tNodeKey nk = null;\n\t\tKeyDirectory keyDirectory = null;\n\t\tWrappedKeyObject wko = null;\n\t\t\n\t\ttry {\n\n\t\t\tkeyDirectory = new KeyDirectory(this, nodeKeyName, _library);\n\t\t\tArrayList<byte []> availableKeyBlocks = keyDirectory.getWrappingKeyIDs();\n\n\t\t\tif (keyDirectory.hasSupersededBlock() && \n\t\t\t\t\t(availableKeyBlocks.size() == 0) && (keyDirectory.getPrincipals().size() == 0)) {\n\n\t\t\t\t// Handle case where this node key is gone and superseded,\n\t\t\t\t// vs case where it's just superseded by a newer version of this key.\n\t\t\t\t// A superseded node key just contains a superseded block pointing\n\t\t\t\t// up to the superseding node. (You only get this if someone\n\t\t\t\t// deletes an ACL causing it to inherit from its parent again.)\n\t\t\t\twko = new WrappedKeyObject(keyDirectory.getSupersededBlockName(), _library);\n\t\t\t\twko.update();\n\t\t\t\tif (null == wko.wrappedKey()) {\n\t\t\t\t\tLibrary.logger().warning(\"Could not retrieve superseded key for node: \" + keyDirectory.getSupersededBlockName());\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t// DKS TODO be sure what node is used to name this, \n\t\t\t\t// might need to use data key wrapping derivation to wrap\n\t\t\t\tNodeKey enk = getNodeKeyForObject(keyDirectory.getSupersededBlockName(), wko);\n\t\t\t\tif (null != enk) {\n\t\t\t\t\tnk = new NodeKey(keyDirectory.getSupersededBlockName(), \n\t\t\t\t\t\t\t\t\twko.wrappedKey().unwrapKey(enk.nodeKey()));\n\t\t\t\t\treturn nk;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\t\t\t\n\n\t\t\t// Do we have one of the wrapping keys in our cache?\n\t\t\tfor (byte [] keyid : availableKeyBlocks) {\n\t\t\t\tif (keyCache().containsKey(keyid)) {\n\t\t\t\t\t// We have it, pull the block, unwrap the node key.\n\t\t\t\t\twko = keyDirectory.getWrappedKeyForKeyID(keyid);\n\t\t\t\t\tif (null != wko.wrappedKey()) {\n\t\t\t\t\t\tnk = new NodeKey(nodeKeyName, \n\t\t\t\t\t\t\t\twko.wrappedKey().unwrapKey(keyCache().getPrivateKey(keyid)));\n\t\t\t\t\t\tif ((null != nodeKeyIdentifier) && (!Arrays.areEqual(keyid, nk.storedNodeKeyID()))) {\n\t\t\t\t\t\t\tLibrary.logger().warning(\"Retrieved and decrypted node key, but it was the wrong node key. We wanted \" + \n\t\t\t\t\t\t\t\t\tDataUtils.printBytes(keyid) + \", we got \" + DataUtils.printBytes(nk.storedNodeKeyID()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tkeyCache().addNodeKey(nk);\n\t\t\t\t\t\t\treturn nk;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// OK, not in cache. Our next step regardless is to check on the groups we think we're in.\n\t\t\tHashMap<String, Timestamp> groupNames = keyDirectory.getPrincipals();\n\t\t\tfor (Group myGroup : _myGroups) {\n\t\t\t\tif (groupNames.containsKey(myGroup.name())) {\n\t\t\t\t\t// TODO handle this group, add keys to the cache as we go\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Alright, we can't pull a group key for one of the groups we know we belong to\n\t\t\t// to help us. So now, two choices. If we're on the latest version (no superseded block)\n\t\t\t// start crawling the groups we don't know whether we're in. If we're not, chain back through\n\t\t\t// the superseded blocks, checking cache for each, till we get to the latest, then\n\t\t\t// crawl groups. There is a small chance we might have had access at an intervening\n\t\t\t// point and not at the latest node, but we're really supposed to pay attention to\n\t\t\t// the latest node policy (though attackers will not); so err on the side of limiting\n\t\t\t// access.\n\t\t\tif (keyDirectory.hasSupersededBlock()) {\n\t\t\t\t// We handled pure superseded (removed ACL) above. So we're looking for the latest\n\t\t\t\t// version of this node.\n\t\t\t\t// TODO DKS -- right name to query for\n\t\t\t\t// First we need to figure out what the latest version is of the node key.\n\t\t\t\tLibrary.logger().info(\"OK, not in cache, finding latest version of key \" + nodeKeyName);\n\t\t\t\tContentName latestNodeKeyName = EnumeratedNameList.getLatestVersionName(nodeKeyName, _library);\n\n\t\t\t\tif (nodeKeyName.equals(latestNodeKeyName)) {\n\t\t\t\t\tLibrary.logger().info(\"Already looking at latest version of node key: \" + nodeKeyName);\n\t\t\t\t} else {\n\t\t\t\t\t// We weren't on the latest version\n\t\t\t\t\tLibrary.logger().info(\"Newer version \" + latestNodeKeyName + \" available for node key \" + nodeKeyName);\n\t\t\t\t\tNodeKey latestNodeKey = getNodeKeyByVersionedName(latestNodeKeyName, null);\n\t\t\t\t\tif (null == latestNodeKey) {\n\t\t\t\t\t\t// need to distinguish between don't have access and key gone.\n\t\t\t\t\t\t// throw access denied exception if no key available we can read\n\t\t\t\t\t\t// throw illegal state exception if no node key\n\t\t\t\t\t\t// superseded in old NKs works much better -- can easily tell if a NK is the\n\t\t\t\t\t\t// one in force, can find where to go for the latest even if uphill\n\t\t\t\t\t\t// need previous blocks if you interpose a lower acl, and need to chain backwards\n\t\t\t\t\t\t// at that level. so might have either. though if you're reading, you'll go straight\n\t\t\t\t\t\t// to the level of the old node key, and if you can't read that one, eventually\n\t\t\t\t\t\t// you'll look for an interposed key you can read. but if the data is too old\n\t\t\t\t\t\t// and you interpose an acl, you're in trouble.... you need to add in previous\n\t\t\t\t\t\t// blocks for all the node keys you're replacing with the effective node keys\n\t\t\t\t\t\t// for the interposed node.\n\t\t\t\t\t\t// Superseded blocks point sideways or up. Previous blocks handle relationships\n\t\t\t\t\t\t// pointing down (by pointing up with opposite semantics).\n\t\t\t\t\t\t// this would argue for a separation of getLatestNodeKey and get by specific version\n\t\t\t\t\t\tLibrary.logger().info(\"Were not able to retrieve a version of node key \" + latestNodeKeyName + \" we can read. Should we throw access denied?\");\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// chain backwards from the key we have to the key we want\n\t\t\t\t\t\tNodeKey ourNodeKey = retrievePreviousNodeKey(latestNodeKey, nodeKeyName);\n\t\t\t\t\t\tif (null == ourNodeKey) {\n\t\t\t\t\t\t\t// we're done, no access, but weird...\n\t\t\t\t\t\t\tLibrary.logger().warning(\"Unexpected: given current node key \" + latestNodeKeyName + \" we can't backwards-chain to node key for \" + nodeKeyName);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn ourNodeKey;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// OK, we're on the latest version. Attempt to walk the group/individual hierarchy.\n\t\t\tfor (String principalName : keyDirectory.getPrincipals().keySet()) {\n\t\t\t\t// TODO handle walking groups\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t} finally {\n\t\t\tif (null != keyDirectory) {\n\t\t\t\tkeyDirectory.stopEnumerating();\n\t\t\t}\n\t\t}\n\t}","commit_id":"b87d193537abcfbdf90517bfc860dfca23983e9a","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private ACLObject findAncestorWithACL(ContentName dataNodeName) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}","id":70045,"modified_method":"private ACLObject findAncestorWithACL(ContentName dataNodeName) throws XMLStreamException, IOException {\n\t\tACLObject ancestorACLObject = null;\n\t\tContentName parentName = dataNodeName;\n\t\tContentName nextParentName = null;\n\t\twhile (null == ancestorACLObject) {\n\t\t\tancestorACLObject = getACLObjectForNodeIfExists(parentName);\n\t\t\tnextParentName = parentName.parent();\n\t\t\tif (nextParentName.equals(parentName)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tparentName = nextParentName;\n\t\t}\n\t\tif (null == ancestorACLObject) {\n\t\t\tthrow new IllegalStateException(\"No ACL available in ancestor tree for node : \" + dataNodeName);\n\t\t}\n\t\tLibrary.logger().info(\"Found ACL for \" + dataNodeName + \" at ancestor :\" + ancestorACLObject.getName());\n\t\treturn ancestorACLObject;\n\t}","commit_id":"b87d193537abcfbdf90517bfc860dfca23983e9a","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public ACLObject getACLObjectForNodeIfExists(ContentName aclNodeName) throws XMLStreamException, IOException {\n\t\t\n\t\tEnumeratedNameList enlNode = new EnumeratedNameList(aclNodeName, _library);\n\t\t\n\t\tif (enlNode.exists(AccessControlProfile.aclName(aclNodeName))) {\n\t\t\tContentName aclName = enlNode.getLatestVersionChildName(AccessControlProfile.aclName(aclNodeName));\n\t\t\tLibrary.logger().info(\"Found latest version of acl for \" + aclNodeName + \" at \" + aclName);\n\t\t\tACLObject aclo = new ACLObject(aclName, _library);\n\t\t\taclo.update();\n\t\t\tif (aclo.isGone())\n\t\t\t\treturn null;\n\t\t\treturn aclo;\n\t\t}\n\t\tLibrary.logger().info(\"No ACL found on node: \" + aclNodeName);\n\t\treturn null;\n\t}","id":70046,"modified_method":"public ACLObject getACLObjectForNodeIfExists(ContentName aclNodeName) throws XMLStreamException, IOException {\n\t\t\n\t\tEnumeratedNameList aclNameList = EnumeratedNameList.exists(AccessControlProfile.aclName(aclNodeName), aclNodeName, _library);\n\t\t\n\t\tif (null != aclNameList) {\n\t\t\tContentName aclName = new ContentName(AccessControlProfile.aclName(aclNodeName),\n\t\t\t\t\t\t\t\t\t\t\t\t  aclNameList.getLatestVersionChildName().lastComponent());\n\t\t\tLibrary.logger().info(\"Found latest version of acl for \" + aclNodeName + \" at \" + aclName);\n\t\t\tACLObject aclo = new ACLObject(aclName, _library);\n\t\t\taclo.update();\n\t\t\tif (aclo.isGone())\n\t\t\t\treturn null;\n\t\t\treturn aclo;\n\t\t}\n\t\tLibrary.logger().info(\"No ACL found on node: \" + aclNodeName);\n\t\treturn null;\n\t}","commit_id":"b87d193537abcfbdf90517bfc860dfca23983e9a","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public NodeKey getLatestNodeKeyForNode(ContentName nodeName) {\n\t\t\n\t\t// First we need to figure out what the latest version is of the node key.\n\t\tContentName nodeKeyVersionedName = EnumeratedNameList.getLatestVersionName(AccessControlProfile.nodeKeyName(nodeName));\n\t\t// then, pull the node key we can decrypt\n\t\treturn getNodeKeyByVersionedName(nodeKeyVersionedName, null);\n\t}","id":70047,"modified_method":"public NodeKey getLatestNodeKeyForNode(ContentName nodeName) throws IOException, InvalidKeyException, InvalidCipherTextException, XMLStreamException {\n\t\t\n\t\t// First we need to figure out what the latest version is of the node key.\n\t\tContentName nodeKeyVersionedName = \n\t\t\tEnumeratedNameList.getLatestVersionName(AccessControlProfile.nodeKeyName(nodeName), _library);\n\t\t// then, pull the node key we can decrypt\n\t\treturn getNodeKeyByVersionedName(nodeKeyVersionedName, null);\n\t}","commit_id":"b87d193537abcfbdf90517bfc860dfca23983e9a","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Pulls the ACL for this node, if one exists, and modifies it to include\n\t * the following changes, then stores the result using setACL.\n\t */\n\tpublic ACL updateACL(ContentName nodeName, \n\t\t\t\t\t\tArrayList<LinkReference> addReaders, ArrayList<LinkReference> removeReaders,\n\t\t\t\t\t\tArrayList<LinkReference> addWriters, ArrayList<LinkReference> removeWriters,\n\t\t\t\t\t\tArrayList<LinkReference> addManagers, ArrayList<LinkReference> removeManagers) {\n\t\t\n\t\tACLObject currentACL = getACLObjectForNodeIfExists(nodeName);\n\t\tACL newACL = null;\n\t\tif (null != currentACL) {\n\t\t\tnewACL = currentACL.acl();\n\t\t}\n\t\t// TODO Now update ACL to add and remove values.\n\t\t\n\t\t\n\t\t// Set the ACL and update the node key.\n\t\treturn setACL(nodeName, newACL);\n\t}","id":70048,"modified_method":"/**\n\t * Pulls the ACL for this node, if one exists, and modifies it to include\n\t * the following changes, then stores the result using setACL.\n\t * @throws IOException \n\t * @throws XMLStreamException \n\t * @throws InvalidKeyException \n\t */\n\tpublic ACL updateACL(ContentName nodeName, \n\t\t\t\t\t\tArrayList<LinkReference> addReaders, ArrayList<LinkReference> removeReaders,\n\t\t\t\t\t\tArrayList<LinkReference> addWriters, ArrayList<LinkReference> removeWriters,\n\t\t\t\t\t\tArrayList<LinkReference> addManagers, ArrayList<LinkReference> removeManagers) throws XMLStreamException, IOException, InvalidKeyException {\n\t\t\n\t\tACLObject currentACL = getACLObjectForNodeIfExists(nodeName);\n\t\tACL newACL = null;\n\t\tif (null != currentACL) {\n\t\t\tnewACL = currentACL.acl();\n\t\t}\n\t\t// TODO Now update ACL to add and remove values.\n\t\t\n\t\t\n\t\t// Set the ACL and update the node key.\n\t\treturn setACL(nodeName, newACL);\n\t}","commit_id":"b87d193537abcfbdf90517bfc860dfca23983e9a","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Override\n  public SAbstractConcept getContainingConcept() {\n    return new SConceptAdapterById(myRoleId.getConceptId());\n  }","id":70049,"modified_method":"@Override\n  public org.jetbrains.mps.openapi.language.SAbstractConcept getContainingConcept() {\n    SConceptId id = myRoleId.getConceptId();\n    ConceptDescriptor concept = ConceptRegistryUtil.getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ? new SInterfaceConceptAdapterById(id, concept.getConceptFqName()) : new SConceptAdapterById(id, concept.getConceptFqName());\n  }","commit_id":"f44f826901b15c9772204dcd9801b5f8f08a06fc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SReferenceLinkAdapterById(String conceptName, String role) {\n    super(conceptName, role);\n  }","id":70050,"modified_method":"public SReferenceLinkAdapterById(@NotNull SReferenceLinkId roleId, @NotNull String conceptName, @NotNull String refName) {\n    super(conceptName, refName);\n    myRoleId = roleId;\n  }","commit_id":"f44f826901b15c9772204dcd9801b5f8f08a06fc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SAbstractLinkId getRoleId() {\n    fillBothIds();\n    return myRoleId;\n  }","id":70051,"modified_method":"public SReferenceLinkId getRoleId() {\n    return myRoleId;\n  }","commit_id":"f44f826901b15c9772204dcd9801b5f8f08a06fc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SReferenceLinkAdapterByName(String role) {\n  }","id":70052,"modified_method":"public SReferenceLinkAdapterByName(@NotNull String conceptName, @NotNull String role) {\n    super(conceptName, role);\n  }","commit_id":"f44f826901b15c9772204dcd9801b5f8f08a06fc","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SAbstractConcept getContainingConcept() {\n    return null;\n  }","id":70053,"modified_method":"@Override\n  public org.jetbrains.mps.openapi.language.SAbstractConcept getContainingConcept() {\n    ConceptDescriptor concept = ConceptRegistryUtil.getConceptDescriptor(myConceptName);\n    return concept.isInterfaceConcept() ? new SInterfaceConceptAdapterById(concept.getId(), myConceptName) :\n        new SConceptAdapterById(concept.getId(), myConceptName);\n  }","commit_id":"f44f826901b15c9772204dcd9801b5f8f08a06fc","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    /*package*/ int internalKey() {\n      long l = myLink.getReferenceLinkId();\n      return (int) (l ^ (l >>> 32));\n    }","id":70054,"modified_method":"@Override\n    /*package*/ int internalKey() {\n      return ltoi(myLink.getReferenceLinkId());\n    }","commit_id":"214e887bb8eb5557ca88ad288e353c42e16b7de3","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    /*package*/ int internalKey() {\n      long l = myProperty.getPropertyId();\n      return (int) (l ^ (l >>> 32));\n    }","id":70055,"modified_method":"@Override\n    /*package*/ int internalKey() {\n      return ltoi(myProperty.getPropertyId());\n    }","commit_id":"214e887bb8eb5557ca88ad288e353c42e16b7de3","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    /*package*/ int internalKey() {\n      long l = myConcept.getConceptId();\n      return (int) (l ^ (l >>> 32));\n    }","id":70056,"modified_method":"@Override\n    /*package*/ int internalKey() {\n      return ltoi(myConcept.getConceptId());\n    }","commit_id":"214e887bb8eb5557ca88ad288e353c42e16b7de3","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    /*package*/ int internalKey() {\n      long l = myLink.getContainmentLinkId();\n      return (int) (l ^ (l >>> 32));\n    }","id":70057,"modified_method":"@Override\n    /*package*/ int internalKey() {\n      return ltoi(myLink.getContainmentLinkId());\n    }","commit_id":"214e887bb8eb5557ca88ad288e353c42e16b7de3","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    /*package*/ int internalKey() {\n      return myLanguageId.hashCode();\n    }","id":70058,"modified_method":"@Override\n    /*package*/ int internalKey() {\n      return (myLanguageId.hashCode() & 0x7fffffff);\n    }","commit_id":"214e887bb8eb5557ca88ad288e353c42e16b7de3","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SAbstractConcept getConcept(SNode c) {\n    if (c.getConcept().equals(SNodeUtil.concept_ConceptDeclaration)) {\n      return MetaAdapterFactory.getConcept(MetaIdByDeclaration.getConceptId(c), SNodeAccessUtil.getProperty(c, SNodeUtil.property_INamedConcept_name));\n    }\n    if (c.getConcept().equals(SNodeUtil.concept_InterfaceConceptDeclaration)) {\n      return MetaAdapterFactory.getInterfaceConcept(MetaIdByDeclaration.getConceptId(c), SNodeAccessUtil.getProperty(c, SNodeUtil.property_INamedConcept_name));\n    }\n    return null;\n  }","id":70059,"modified_method":"public static SAbstractConcept getConcept(SNode node) {\n    SConcept concept = node.getConcept();\n    boolean cd = concept.equals(SNodeUtil.concept_ConceptDeclaration);\n    boolean icd = concept.equals(SNodeUtil.concept_InterfaceConceptDeclaration);\n    if (cd || icd) {\n      String name = getNormalizedName(node);\n      if (cd) {\n        return MetaAdapterFactory.getConcept(MetaIdByDeclaration.getConceptId(node), name);\n      } else {\n        return MetaAdapterFactory.getInterfaceConcept(MetaIdByDeclaration.getConceptId(node), name);\n      }\n    }\n    return null;\n  }","commit_id":"468b806d2aaf9a9e38a78ff013a53925606cce67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SProperty getProperty(SNode c) {\n    return MetaAdapterFactory.getProperty(MetaIdByDeclaration.getPropId(c), SNodeAccessUtil.getProperty(c, SNodeUtil.property_INamedConcept_name));\n  }","id":70060,"modified_method":"public static SProperty getProperty(SNode c) {\n    return MetaAdapterFactory.getProperty(MetaIdByDeclaration.getPropId(c), getNormalizedName(c));\n  }","commit_id":"468b806d2aaf9a9e38a78ff013a53925606cce67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SContainmentLink getContainmentLink(SNode c) {\n    return MetaAdapterFactory.getContainmentLink(MetaIdByDeclaration.getLinkId(c), SNodeAccessUtil.getProperty(c, SNodeUtil.property_LinkDeclaration_role));\n  }","id":70061,"modified_method":"public static SContainmentLink getContainmentLink(SNode c) {\n    return MetaAdapterFactory.getContainmentLink(MetaIdByDeclaration.getLinkId(c), getNormalizedRole(c));\n  }","commit_id":"468b806d2aaf9a9e38a78ff013a53925606cce67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SReferenceLink getReferenceLink(SNode c) {\n    return MetaAdapterFactory.getReferenceLink(MetaIdByDeclaration.getRefRoleId(c), SNodeAccessUtil.getProperty(c, SNodeUtil.property_LinkDeclaration_role));\n  }","id":70062,"modified_method":"public static SReferenceLink getReferenceLink(SNode c) {\n    return MetaAdapterFactory.getReferenceLink(MetaIdByDeclaration.getRefRoleId(c), getNormalizedRole(c));\n  }","commit_id":"468b806d2aaf9a9e38a78ff013a53925606cce67","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SConcept getContainingConcept() {\n    return new SConceptAdapterById(myPropertyId.getConceptId());\n  }","id":70063,"modified_method":"@Override\n  public SAbstractConcept getContainingConcept() {\n    SConceptId id = myPropertyId.getConceptId();\n    ConceptDescriptor concept = ConceptRegistryUtil.getConceptDescriptor(id);\n    return concept.isInterfaceConcept() ? new SInterfaceConceptAdapterById(id, concept.getConceptFqName()) :\n        new SConceptAdapterById(id, concept.getConceptFqName());\n  }","commit_id":"da9e9198b1cd30ae1c67527842e2bc3a490f124b","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SPropertyId getId() {\n    fillBothIds();\n    return myPropertyId;\n  }","id":70064,"modified_method":"public SPropertyId getId() {\n    return myPropertyId;\n  }","commit_id":"da9e9198b1cd30ae1c67527842e2bc3a490f124b","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SPropertyAdapterById(String conceptName, String name) {\n    this.conceptName = conceptName;\n    this.propertyName = name;\n  }","id":70065,"modified_method":"public SPropertyAdapterById(@NotNull SPropertyId propertyId, @NotNull String conceptName, @NotNull String propName) {\n    super(conceptName, propName);\n    this.myPropertyId = propertyId;\n  }","commit_id":"da9e9198b1cd30ae1c67527842e2bc3a490f124b","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SPropertyAdapterByName(String propertyName) {\n  }","id":70066,"modified_method":"public SPropertyAdapterByName( @NotNull String conceptName, @NotNull String propName) {\n    super(conceptName, propName);\n  }","commit_id":"da9e9198b1cd30ae1c67527842e2bc3a490f124b","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void indexEReferenceDescriptors(Resource resource, IEReferenceDescriptorIndexer feeder,\n\t\t\tIProgressMonitor monitor) {\n\t\tMap<EObject, Collection<Setting>> find = EcoreUtil.CrossReferencer.find(resource.getContents());\n\t\tfor (Map.Entry<EObject, Collection<Setting>> entry : find.entrySet()) {\n\t\t\tfor (Setting setting : entry.getValue()) {\n\t\t\t\tfeeder.index(setting.getEObject(), (EObject) setting.get(true), (EReference) setting\n\t\t\t\t\t\t.getEStructuralFeature());\n\t\t\t}\n\t\t}\n\t}","id":70067,"modified_method":"public void indexEReferenceDescriptors(Resource resource, IEReferenceDescriptorIndexer feeder,\n\t\t\tIProgressMonitor monitor) {\n\t\tMap<EObject, Collection<Setting>> find = EcoreUtil.CrossReferencer.find(resource.getContents());\n\t\tfor (Map.Entry<EObject, Collection<Setting>> entry : find.entrySet()) {\n\t\t\tfor (Setting setting : entry.getValue()) {\n\t\t\t\tObject target = setting.get(true);\n\t\t\t\tif (setting.getEStructuralFeature().isMany())\n\t\t\t\t\tfor (Object t : (Collection<?>) target)\n\t\t\t\t\t\tfeeder.index(setting.getEObject(), (EObject) t, (EReference) setting.getEStructuralFeature());\n\t\t\t\telse\n\t\t\t\t\tfeeder.index(setting.getEObject(), (EObject) target, (EReference) setting.getEStructuralFeature());\n\t\t\t}\n\t\t}\n\t}","commit_id":"634d0c7ea62104050bd5bc38d4ca5a31a484ed09","url":"https://github.com/eclipse/xtext"},{"original_method":"private void applyNewShards(final ClusterChangedEvent event) throws ElasticSearchException {\n        if (!indicesService.changesAllowed())\n            return;\n\n        RoutingTable routingTable = event.state().routingTable();\n        RoutingNode routingNodes = event.state().readOnlyRoutingNodes().nodesToShards().get(event.state().nodes().localNodeId());\n        if (routingNodes == null) {\n            return;\n        }\n        DiscoveryNodes nodes = event.state().nodes();\n\n\n        for (final ShardRouting shardRouting : routingNodes) {\n            final IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());\n\n            final int shardId = shardRouting.id();\n\n            if (!indexService.hasShard(shardId) && shardRouting.started()) {\n                // the master thinks we are started, but we don't have this shard at all, mark it as failed\n                logger.warn(\"[\" + shardRouting.index() + \"][\" + shardRouting.shardId().id() + \"] Master \" + nodes.masterNode() + \" marked shard as started, but shard have not been created, mark shard as failed\");\n                shardStateAction.shardFailed(shardRouting, \"Master \" + nodes.masterNode() + \" marked shard as started, but shard have not been created, mark shard as failed\");\n                continue;\n            }\n\n            if (indexService.hasShard(shardId)) {\n                InternalIndexShard indexShard = (InternalIndexShard) indexService.shard(shardId);\n                if (!shardRouting.equals(indexShard.routingEntry())) {\n                    indexShard.routingEntry(shardRouting);\n                    indexService.shardInjector(shardId).getInstance(IndexShardGatewayService.class).routingStateChanged();\n                }\n            }\n\n            if (shardRouting.initializing()) {\n                applyInitializingShard(routingTable, nodes, shardRouting);\n            }\n        }\n    }","id":70068,"modified_method":"private void applyNewOrUpdatedShards(final ClusterChangedEvent event) throws ElasticSearchException {\n        if (!indicesService.changesAllowed())\n            return;\n\n        RoutingTable routingTable = event.state().routingTable();\n        RoutingNode routingNodes = event.state().readOnlyRoutingNodes().nodesToShards().get(event.state().nodes().localNodeId());\n        if (routingNodes == null) {\n            return;\n        }\n        DiscoveryNodes nodes = event.state().nodes();\n\n\n        for (final ShardRouting shardRouting : routingNodes) {\n            final IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());\n\n            final int shardId = shardRouting.id();\n\n            if (!indexService.hasShard(shardId) && shardRouting.started()) {\n                // the master thinks we are started, but we don't have this shard at all, mark it as failed\n                logger.warn(\"[{}][{}] master [{}] marked shard as started, but shard have not been created, mark shard as failed\");\n                shardStateAction.shardFailed(shardRouting, \"master \" + nodes.masterNode() + \" marked shard as started, but shard have not been created, mark shard as failed\");\n                continue;\n            }\n\n            if (indexService.hasShard(shardId)) {\n                InternalIndexShard indexShard = (InternalIndexShard) indexService.shard(shardId);\n                if (!shardRouting.equals(indexShard.routingEntry())) {\n                    indexShard.routingEntry(shardRouting);\n                    indexService.shardInjector(shardId).getInstance(IndexShardGatewayService.class).routingStateChanged();\n                }\n            }\n\n            if (shardRouting.initializing()) {\n                applyInitializingShard(routingTable, nodes, shardRouting);\n            }\n        }\n    }","commit_id":"4ae45946a26b4cba1be514e1f3bdaf084ae412c3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void applyDeletedIndices(final ClusterChangedEvent event) {\n        for (final String index : indicesService.indices()) {\n            if (!event.state().metaData().hasIndex(index)) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Index [{}]: Deleting\", index);\n                }\n                indicesService.deleteIndex(index);\n                threadPool.execute(new Runnable() {\n                    @Override public void run() {\n                        nodeIndexDeletedAction.nodeIndexDeleted(index, event.state().nodes().localNodeId());\n                    }\n                });\n            }\n        }\n    }","id":70069,"modified_method":"private void applyDeletedIndices(final ClusterChangedEvent event) {\n        for (final String index : indicesService.indices()) {\n            if (!event.state().metaData().hasIndex(index)) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"[{}] deleting index\", index);\n                }\n                indicesService.deleteIndex(index);\n                threadPool.execute(new Runnable() {\n                    @Override public void run() {\n                        nodeIndexDeletedAction.nodeIndexDeleted(index, event.state().nodes().localNodeId());\n                    }\n                });\n            }\n        }\n    }","commit_id":"4ae45946a26b4cba1be514e1f3bdaf084ae412c3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void applyDeletedShards(final ClusterChangedEvent event) {\n        RoutingNode routingNodes = event.state().readOnlyRoutingNodes().nodesToShards().get(event.state().nodes().localNodeId());\n        if (routingNodes == null) {\n            return;\n        }\n        for (final String index : indicesService.indices()) {\n            if (event.state().metaData().hasIndex(index)) {\n                // now, go over and delete shards that needs to get deleted\n                Set<Integer> newShardIds = newHashSet();\n                for (final ShardRouting shardRouting : routingNodes) {\n                    if (shardRouting.index().equals(index)) {\n                        newShardIds.add(shardRouting.id());\n                    }\n                }\n                final IndexService indexService = indicesService.indexService(index);\n                if (indexService == null) {\n                    continue;\n                }\n                for (Integer existingShardId : indexService.shardIds()) {\n                    if (!newShardIds.contains(existingShardId)) {\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Index [{}]: Deleting shard [{}]\", index, existingShardId);\n                        }\n                        indexService.cleanShard(existingShardId);\n                    }\n                }\n            }\n        }\n    }","id":70070,"modified_method":"private void applyDeletedShards(final ClusterChangedEvent event) {\n        RoutingNode routingNodes = event.state().readOnlyRoutingNodes().nodesToShards().get(event.state().nodes().localNodeId());\n        if (routingNodes == null) {\n            return;\n        }\n        for (final String index : indicesService.indices()) {\n            if (event.state().metaData().hasIndex(index)) {\n                // now, go over and delete shards that needs to get deleted\n                Set<Integer> newShardIds = newHashSet();\n                for (final ShardRouting shardRouting : routingNodes) {\n                    if (shardRouting.index().equals(index)) {\n                        newShardIds.add(shardRouting.id());\n                    }\n                }\n                final IndexService indexService = indicesService.indexService(index);\n                if (indexService == null) {\n                    continue;\n                }\n                for (Integer existingShardId : indexService.shardIds()) {\n                    if (!newShardIds.contains(existingShardId)) {\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"[{}][{}] deleting shard\", index, existingShardId);\n                        }\n                        indexService.cleanShard(existingShardId);\n                    }\n                }\n            }\n        }\n    }","commit_id":"4ae45946a26b4cba1be514e1f3bdaf084ae412c3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void applyInitializingShard(final RoutingTable routingTable, final DiscoveryNodes nodes, final ShardRouting shardRouting) throws ElasticSearchException {\n        final IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());\n        final int shardId = shardRouting.id();\n\n        if (indexService.hasShard(shardId)) {\n            IndexShard indexShard = indexService.shardSafe(shardId);\n            if (indexShard.state() == IndexShardState.STARTED) {\n                // the master thinks we are initializing, but we are already started\n                // (either master failover, or a cluster event before we managed to tell the master we started), mark us as started\n                if (logger.isTraceEnabled()) {\n                    logger.trace(\"[\" + shardRouting.index() + \"][\" + shardRouting.shardId().id() + \"] Master \" + nodes.masterNode() + \" marked shard as initializing, but shard already started, mark shard as started\");\n                }\n                shardStateAction.shardStarted(shardRouting, \"Master \" + nodes.masterNode() + \" marked shard as initializing, but shard already started, mark shard as started\");\n                return;\n            } else {\n                if (indexShard.ignoreRecoveryAttempt()) {\n                    return;\n                }\n            }\n        }\n        // if there is no shard, create it\n        if (!indexService.hasShard(shardId)) {\n            try {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Index [{}]: Creating shard [{}]\", shardRouting.index(), shardId);\n                }\n                InternalIndexShard indexShard = (InternalIndexShard) indexService.createShard(shardId);\n                indexShard.routingEntry(shardRouting);\n            } catch (IndexShardAlreadyExistsException e) {\n                // ignore this, the method call can happen several times\n            } catch (Exception e) {\n                logger.warn(\"Failed to create shard for index [\" + indexService.index().name() + \"] and shard id [\" + shardRouting.id() + \"]\", e);\n                try {\n                    indexService.cleanShard(shardId);\n                } catch (IndexShardMissingException e1) {\n                    // ignore\n                } catch (Exception e1) {\n                    logger.warn(\"Failed to delete shard after failed creation for index [\" + indexService.index().name() + \"] and shard id [\" + shardRouting.id() + \"]\", e1);\n                }\n                shardStateAction.shardFailed(shardRouting, \"Failed to create shard, message [\" + detailedMessage(e) + \"]\");\n                return;\n            }\n        }\n        final InternalIndexShard indexShard = (InternalIndexShard) indexService.shardSafe(shardId);\n\n        if (indexShard.ignoreRecoveryAttempt()) {\n            // we are already recovering (we can get to this state since the cluster event can happen several\n            // times while we recover)\n            return;\n        }\n\n        threadPool.execute(new Runnable() {\n            @Override public void run() {\n                // recheck here, since the cluster event can be called\n                if (indexShard.ignoreRecoveryAttempt()) {\n                    return;\n                }\n                try {\n                    RecoveryAction recoveryAction = indexService.shardInjector(shardId).getInstance(RecoveryAction.class);\n                    if (!shardRouting.primary()) {\n                        // recovery from primary\n                        IndexShardRoutingTable shardRoutingTable = routingTable.index(shardRouting.index()).shard(shardRouting.id());\n                        for (ShardRouting entry : shardRoutingTable) {\n                            if (entry.primary() && entry.started()) {\n                                // only recover from started primary, if we can't find one, we will do it next round\n                                DiscoveryNode node = nodes.get(entry.currentNodeId());\n                                try {\n                                    // we are recovering a backup from a primary, so no need to mark it as relocated\n                                    recoveryAction.startRecovery(nodes.localNode(), node, false);\n                                    shardStateAction.shardStarted(shardRouting, \"after recovery (backup) from node [\" + node + \"]\");\n                                } catch (IgnoreRecoveryException e) {\n                                    // that's fine, since we might be called concurrently, just ignore this\n                                    break;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        if (shardRouting.relocatingNodeId() == null) {\n                            // we are the first primary, recover from the gateway\n                            IndexShardGatewayService shardGatewayService = indexService.shardInjector(shardId).getInstance(IndexShardGatewayService.class);\n                            try {\n                                shardGatewayService.recover();\n                                shardStateAction.shardStarted(shardRouting, \"after recovery from gateway\");\n                            } catch (IgnoreGatewayRecoveryException e) {\n                                // that's fine, we might be called concurrently, just ignore this, we already recovered\n                            }\n                        } else {\n                            // relocating primaries, recovery from the relocating shard\n                            DiscoveryNode node = nodes.get(shardRouting.relocatingNodeId());\n                            try {\n                                // we mark the primary we are going to recover from as relocated at the end of phase 3\n                                // so operations will start moving to the new primary\n                                recoveryAction.startRecovery(nodes.localNode(), node, true);\n                                shardStateAction.shardStarted(shardRouting, \"after recovery (primary) from node [\" + node + \"]\");\n                            } catch (IgnoreRecoveryException e) {\n                                // that's fine, since we might be called concurrently, just ignore this, we are already recovering\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.warn(\"Failed to start shard for index [\" + indexService.index().name() + \"] and shard id [\" + shardRouting.id() + \"]\", e);\n                    if (indexService.hasShard(shardId)) {\n                        try {\n                            indexService.cleanShard(shardId);\n                        } catch (Exception e1) {\n                            logger.warn(\"Failed to delete shard after failed startup for index [\" + indexService.index().name() + \"] and shard id [\" + shardRouting.id() + \"]\", e1);\n                        }\n                    }\n                    try {\n                        shardStateAction.shardFailed(shardRouting, \"Failed to start shard, message [\" + detailedMessage(e) + \"]\");\n                    } catch (Exception e1) {\n                        logger.warn(\"Failed to mark shard as failed after a failed start for index [\" + indexService.index().name() + \"] and shard id [\" + shardRouting.id() + \"]\", e);\n                    }\n                }\n            }\n        });\n    }","id":70071,"modified_method":"private void applyInitializingShard(final RoutingTable routingTable, final DiscoveryNodes nodes, final ShardRouting shardRouting) throws ElasticSearchException {\n        final IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());\n        final int shardId = shardRouting.id();\n\n        if (indexService.hasShard(shardId)) {\n            IndexShard indexShard = indexService.shardSafe(shardId);\n            if (indexShard.state() == IndexShardState.STARTED) {\n                // the master thinks we are initializing, but we are already started\n                // (either master failover, or a cluster event before we managed to tell the master we started), mark us as started\n                if (logger.isTraceEnabled()) {\n                    logger.trace(\"[{}][{}] master [{}] marked shard as initializing, but shard already created, mark shard as started\");\n                }\n                shardStateAction.shardStarted(shardRouting, \"master \" + nodes.masterNode() + \" marked shard as initializing, but shard already started, mark shard as started\");\n                return;\n            } else {\n                if (indexShard.ignoreRecoveryAttempt()) {\n                    return;\n                }\n            }\n        }\n        // if there is no shard, create it\n        if (!indexService.hasShard(shardId)) {\n            try {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"[{}][{}] creating shard\", shardRouting.index(), shardId);\n                }\n                InternalIndexShard indexShard = (InternalIndexShard) indexService.createShard(shardId);\n                indexShard.routingEntry(shardRouting);\n            } catch (IndexShardAlreadyExistsException e) {\n                // ignore this, the method call can happen several times\n            } catch (Exception e) {\n                logger.warn(\"[{}][{}] failed to create shard\", e, shardRouting.index(), shardRouting.id());\n                try {\n                    indexService.cleanShard(shardId);\n                } catch (IndexShardMissingException e1) {\n                    // ignore\n                } catch (Exception e1) {\n                    logger.warn(\"[{}][{}] failed to delete shard after failed creation\", e1, shardRouting.index(), shardRouting.id());\n                }\n                shardStateAction.shardFailed(shardRouting, \"Failed to create shard, message [\" + detailedMessage(e) + \"]\");\n                return;\n            }\n        }\n        final InternalIndexShard indexShard = (InternalIndexShard) indexService.shardSafe(shardId);\n\n        if (indexShard.ignoreRecoveryAttempt()) {\n            // we are already recovering (we can get to this state since the cluster event can happen several\n            // times while we recover)\n            return;\n        }\n\n        threadPool.execute(new Runnable() {\n            @Override public void run() {\n                // recheck here, since the cluster event can be called\n                if (indexShard.ignoreRecoveryAttempt()) {\n                    return;\n                }\n                try {\n                    RecoveryAction recoveryAction = indexService.shardInjector(shardId).getInstance(RecoveryAction.class);\n                    if (!shardRouting.primary()) {\n                        // recovery from primary\n                        IndexShardRoutingTable shardRoutingTable = routingTable.index(shardRouting.index()).shard(shardRouting.id());\n                        for (ShardRouting entry : shardRoutingTable) {\n                            if (entry.primary() && entry.started()) {\n                                // only recover from started primary, if we can't find one, we will do it next round\n                                DiscoveryNode node = nodes.get(entry.currentNodeId());\n                                try {\n                                    // we are recovering a backup from a primary, so no need to mark it as relocated\n                                    recoveryAction.startRecovery(nodes.localNode(), node, false);\n                                    shardStateAction.shardStarted(shardRouting, \"after recovery (backup) from node [\" + node + \"]\");\n                                } catch (IgnoreRecoveryException e) {\n                                    // that's fine, since we might be called concurrently, just ignore this\n                                    break;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        if (shardRouting.relocatingNodeId() == null) {\n                            // we are the first primary, recover from the gateway\n                            IndexShardGatewayService shardGatewayService = indexService.shardInjector(shardId).getInstance(IndexShardGatewayService.class);\n                            try {\n                                shardGatewayService.recover();\n                                shardStateAction.shardStarted(shardRouting, \"after recovery from gateway\");\n                            } catch (IgnoreGatewayRecoveryException e) {\n                                // that's fine, we might be called concurrently, just ignore this, we already recovered\n                            }\n                        } else {\n                            // relocating primaries, recovery from the relocating shard\n                            DiscoveryNode node = nodes.get(shardRouting.relocatingNodeId());\n                            try {\n                                // we mark the primary we are going to recover from as relocated at the end of phase 3\n                                // so operations will start moving to the new primary\n                                recoveryAction.startRecovery(nodes.localNode(), node, true);\n                                shardStateAction.shardStarted(shardRouting, \"after recovery (primary) from node [\" + node + \"]\");\n                            } catch (IgnoreRecoveryException e) {\n                                // that's fine, since we might be called concurrently, just ignore this, we are already recovering\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.warn(\"[{}][{}] failed to start shard\", e, indexService.index().name(), shardRouting.id());\n                    if (indexService.hasShard(shardId)) {\n                        try {\n                            indexService.cleanShard(shardId);\n                        } catch (Exception e1) {\n                            logger.warn(\"[{}][{}] failed to delete shard after failed startup\", e, indexService.index().name(), shardRouting.id());\n                        }\n                    }\n                    try {\n                        shardStateAction.shardFailed(shardRouting, \"Failed to start shard, message [\" + detailedMessage(e) + \"]\");\n                    } catch (Exception e1) {\n                        logger.warn(\"[{}][{}] failed to mark shard as failed after a failed start\", e1, indexService.index().name(), shardRouting.id());\n                    }\n                }\n            }\n        });\n    }","commit_id":"4ae45946a26b4cba1be514e1f3bdaf084ae412c3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void applyNewIndices(final ClusterChangedEvent event) {\n        // first, go over and create and indices that needs to be created\n        for (final IndexMetaData indexMetaData : event.state().metaData()) {\n            if (!indicesService.hasIndex(indexMetaData.index())) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Index [{}]: Creating\", indexMetaData.index());\n                }\n                indicesService.createIndex(indexMetaData.index(), indexMetaData.settings(), event.state().nodes().localNode().id());\n                threadPool.execute(new Runnable() {\n                    @Override public void run() {\n                        nodeIndexCreatedAction.nodeIndexCreated(indexMetaData.index(), event.state().nodes().localNodeId());\n                    }\n                });\n            }\n        }\n    }","id":70072,"modified_method":"private void applyNewIndices(final ClusterChangedEvent event) {\n        // first, go over and create and indices that needs to be created\n        for (final IndexMetaData indexMetaData : event.state().metaData()) {\n            if (!indicesService.hasIndex(indexMetaData.index())) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"[{}] creating index\", indexMetaData.index());\n                }\n                indicesService.createIndex(indexMetaData.index(), indexMetaData.settings(), event.state().nodes().localNode().id());\n                threadPool.execute(new Runnable() {\n                    @Override public void run() {\n                        nodeIndexCreatedAction.nodeIndexCreated(indexMetaData.index(), event.state().nodes().localNodeId());\n                    }\n                });\n            }\n        }\n    }","commit_id":"4ae45946a26b4cba1be514e1f3bdaf084ae412c3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void applyMappings(ClusterChangedEvent event) {\n        // go over and update mappings\n        for (IndexMetaData indexMetaData : event.state().metaData()) {\n            if (!indicesService.hasIndex(indexMetaData.index())) {\n                // we only create / update here\n                continue;\n            }\n            String index = indexMetaData.index();\n            IndexService indexService = indicesService.indexServiceSafe(index);\n            MapperService mapperService = indexService.mapperService();\n            ImmutableMap<String, String> mappings = indexMetaData.mappings();\n            // we don't support removing mappings for now ...\n            for (Map.Entry<String, String> entry : mappings.entrySet()) {\n                String mappingType = entry.getKey();\n                String mappingSource = entry.getValue();\n\n                try {\n                    if (!mapperService.hasMapping(mappingType)) {\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Index [\" + index + \"] Adding mapping [\" + mappingType + \"], source [\" + mappingSource + \"]\");\n                        }\n                        mapperService.add(mappingType, mappingSource);\n                        nodeMappingCreatedAction.nodeMappingCreated(new NodeMappingCreatedAction.NodeMappingCreatedResponse(index, mappingType, event.state().nodes().localNodeId()));\n                    } else {\n                        DocumentMapper existingMapper = mapperService.documentMapper(mappingType);\n                        if (!mappingSource.equals(existingMapper.mappingSource())) {\n                            // mapping changed, update it\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"Index [\" + index + \"] Updating mapping [\" + mappingType + \"], source [\" + mappingSource + \"]\");\n                            }\n                            mapperService.add(mappingType, mappingSource);\n                            nodeMappingCreatedAction.nodeMappingCreated(new NodeMappingCreatedAction.NodeMappingCreatedResponse(index, mappingType, event.state().nodes().localNodeId()));\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.warn(\"Failed to add mapping [\" + mappingType + \"], source [\" + mappingSource + \"]\", e);\n                }\n            }\n        }\n    }","id":70073,"modified_method":"private void applyMappings(ClusterChangedEvent event) {\n        // go over and update mappings\n        for (IndexMetaData indexMetaData : event.state().metaData()) {\n            if (!indicesService.hasIndex(indexMetaData.index())) {\n                // we only create / update here\n                continue;\n            }\n            String index = indexMetaData.index();\n            IndexService indexService = indicesService.indexServiceSafe(index);\n            MapperService mapperService = indexService.mapperService();\n            ImmutableMap<String, String> mappings = indexMetaData.mappings();\n            // we don't support removing mappings for now ...\n            for (Map.Entry<String, String> entry : mappings.entrySet()) {\n                String mappingType = entry.getKey();\n                String mappingSource = entry.getValue();\n\n                try {\n                    if (!mapperService.hasMapping(mappingType)) {\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"[{}] adding mapping [{}], source [{}]\", index, mappingType, mappingSource);\n                        }\n                        mapperService.add(mappingType, mappingSource);\n                        nodeMappingCreatedAction.nodeMappingCreated(new NodeMappingCreatedAction.NodeMappingCreatedResponse(index, mappingType, event.state().nodes().localNodeId()));\n                    } else {\n                        DocumentMapper existingMapper = mapperService.documentMapper(mappingType);\n                        if (!mappingSource.equals(existingMapper.mappingSource())) {\n                            // mapping changed, update it\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"[{}] updating mapping [{}], source [{}]\", index, mappingType, mappingSource);\n                            }\n                            mapperService.add(mappingType, mappingSource);\n                            nodeMappingCreatedAction.nodeMappingCreated(new NodeMappingCreatedAction.NodeMappingCreatedResponse(index, mappingType, event.state().nodes().localNodeId()));\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.warn(\"[{}] failed to add mapping [{}], source [{}]\", index, mappingType, mappingSource);\n                }\n            }\n        }\n    }","commit_id":"4ae45946a26b4cba1be514e1f3bdaf084ae412c3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override public void clusterChanged(final ClusterChangedEvent event) {\n        if (!indicesService.changesAllowed())\n            return;\n\n        applyNewIndices(event);\n        applyMappings(event);\n        applyNewShards(event);\n        applyDeletedIndices(event);\n        applyDeletedShards(event);\n    }","id":70074,"modified_method":"@Override public void clusterChanged(final ClusterChangedEvent event) {\n        if (!indicesService.changesAllowed())\n            return;\n\n        applyNewIndices(event);\n        applyMappings(event);\n        applyNewOrUpdatedShards(event);\n        applyDeletedIndices(event);\n        applyDeletedShards(event);\n    }","commit_id":"4ae45946a26b4cba1be514e1f3bdaf084ae412c3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * @return true if success, false if not\n     */\n      \n    public static boolean saveMap(LWMap map, boolean saveAs, boolean export)\n    {\n        System.out.println(\"SaveAction.saveMap: \" + map);\n        \n        if (map == null)\n            return false;\n        \n        File file = map.getFile();\n\n        if (map.getSaveFileModelVersion() == 0) {\n            VueUtil.alert(String.format(\"Saving %s in this version of VUE will prevent older versions of VUE\"\n                                        + \"\\nfrom displaying it properly.  You may wish to save this map under a new name.\",\n                                        map.getLabel()),\n                          \"Version Notice: \" + map.getLabel());\n            \n        }\n        \n        \n        if ((saveAs || file == null) && !export)\n            //file = ActionUtil.selectFile(\"Save Map\", \"vue\");\n            file = ActionUtil.selectFile(\"Save Map\", null);\n        else if (export)\n        \tfile = ActionUtil.selectFile(\"Export Map\", \"export\");\n        if (file == null)\n            return false;\n        \n        try {\n            VUE.activateWaitCursor();\n            String name = file.getName().toLowerCase();\n\n            System.out.println(\"Save name[\" + name + \"]\");\n            \n            if (name.endsWith(\".rli.xml\")) {\n                new IMSResourceList().convert(map,file);\n            }\n            else if (name.endsWith(\".xml\") || name.endsWith(\".vue\")) {\n                ActionUtil.marshallMap(file, map);\n            }\n            else if (name.endsWith(\".jpeg\") || name.endsWith(\".jpg\"))\n                ImageConversion.createActiveMapJpeg(file);\n            \n            else if (name.endsWith(\".svg\"))\n                new SVGConversion().createSVG(file);\n            \n            else if (name.endsWith(\".pdf\"))\n                new PDFTransform().convert(file);\n            else if (name.endsWith(\".zip\"))\n            {   Vector resourceVector = new Vector();\n            \tIterator i = map.getAllDescendents(LWComponent.ChildKind.PROPER).iterator();\n            \twhile(i.hasNext()) {\t\n            \t\tLWComponent component = (LWComponent) i.next();\n            \t\tSystem.out.println(\"Component:\"+component+\" has resource:\"+component.hasResource());\n            \t\tif(component.hasResource() && (component.getResource() instanceof URLResource)){\n                    \n            \t\t\tURLResource resource = (URLResource) component.getResource();                    \n                \n            \t\t\t//   \tif(resource.getType() == Resource.URL) {\n            \t\t\ttry {\n                        // File file = new File(new URL(resource.getSpec()).getFile());\n                        if(resource.isLocalFile()) {\n                        \tString spec = resource.getSpec();                        \t                        \n                        \tSystem.out.println(resource.getSpec());\n                            Vector row = new Vector();\n                            row.add(new Boolean(true));\n                            row.add(resource);\n                            row.add(new Long(file.length()));\n                            row.add(\"Ready\");\n                            resourceVector.add(row);\n                        }\n            \t\t\t}catch (Exception ex) {\n            \t\t\t\tSystem.out.println(\"Publisher.setLocalResourceVector: Resource \"+resource.getSpec()+ ex);\n            \t\t\t\tex.printStackTrace();\n            \t\t\t}                    \n            \t\t}                \n            \t}\n            \tFile savedCMap =PublishUtil.createZip(map, resourceVector);\n            \t InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap));\n                OutputStream ostream = new BufferedOutputStream(new FileOutputStream(file));\n                int fileLength = (int)savedCMap.length();\n                byte bytes[] = new  byte[fileLength];\n                try\n                {\n                \twhile (istream.read(bytes,0,fileLength) != -1)\n                \t\tostream.write(bytes,0,fileLength);\n                }\n                catch(Exception e)\n                {\n                \te.printStackTrace();\n                }\n                finally\n                {\n                \tistream.close();\n                \tostream.close();\n                }\n            }\n            //else if (name.endsWith(\".html\"))\n              //  new HTMLConversion().convert(file);\n            \n            //else if (name.endsWith(\".imap\"))\n            else if (name.endsWith(\".html\")) {\n                new ImageMap().createImageMap(file);\n            }\n//             else if (name.endsWith(\".htm\")) {\n//                 writeHTMLOutline(map, file);\n//             }\n            else if(name.endsWith(\".rdf\"))\n            {\n               edu.tufts.vue.rdf.RDFIndex index = new edu.tufts.vue.rdf.RDFIndex();\n               index.index(VUE.getActiveMap());\n               index.write(new FileWriter(file));\n            }\n            \n\n\t\t\t// don't know this as not all the above stuff is passing\n            // exceptions on to us!\n            System.out.println(\"Save code completed for \" + file);\n            VueFrame frame = (VueFrame)VUE.getMainWindow();\n            String title = VUE.getName() + \": \" + name;                      \n            frame.setTitle(title);\n            \n            if (name.endsWith(\".vue\"))\n            {\n             RecentlyOpenedFilesManager rofm = RecentlyOpenedFilesManager.getInstance();\n             rofm.updateRecentlyOpenedFiles(file.getAbsolutePath());\n            }\n            return true;\n\n        } catch (Throwable t) {\n            Log.error(\"Exception attempting to save file \" + file + \": \" + t);\n            Throwable e = t;\n            if (t.getCause() != null)\n                e = t.getCause();\n            if (e instanceof java.io.FileNotFoundException) {\n                Log.error(\"Save Failed\"+e.getMessage());\n            } else {\n                e.printStackTrace();\n                Log.error(\"Save failed for \\\"\" + file + \"\\\"\"+ e);\n            }\n            if (e != t)\n                Log.error(\"Exception attempting to save file \" + file + \": \" + e);\n        } finally {\n            VUE.clearWaitCursor();\n        }\n\n        return false;\n    }","id":70075,"modified_method":"/**\n     * @return true if success, false if not\n     */\n      \n    public static boolean saveMap(LWMap map, boolean saveAs, boolean export)\n    {\n        System.out.println(\"SaveAction.saveMap: \" + map);\n        \n        if (map == null)\n            return false;\n        \n        File file = map.getFile();\n\n        if (map.getSaveFileModelVersion() == 0) {\n            VueUtil.alert(String.format(\"Saving %s in this version of VUE will prevent older versions of VUE\"\n                                        + \"\\nfrom displaying it properly.  You may wish to save this map under a new name.\",\n                                        map.getLabel()),\n                          \"Version Notice: \" + map.getLabel());\n            \n        }\n        \n        \n        if ((saveAs || file == null) && !export)\n            //file = ActionUtil.selectFile(\"Save Map\", \"vue\");\n            file = ActionUtil.selectFile(\"Save Map\", null);\n        else if (export)\n        \tfile = ActionUtil.selectFile(\"Export Map\", \"export\");\n        if (file == null)\n            return false;\n        \n        try {\n            VUE.activateWaitCursor();\n            String name = file.getName().toLowerCase();\n\n            System.out.println(\"Save name[\" + name + \"]\");\n            \n            if (name.endsWith(\".rli.xml\")) {\n                new IMSResourceList().convert(map,file);\n            }\n            else if (name.endsWith(\".xml\") || name.endsWith(\".vue\")) {\n                ActionUtil.marshallMap(file, map);\n            }\n            else if (name.endsWith(\".jpeg\") || name.endsWith(\".jpg\"))\n                ImageConversion.createActiveMapJpeg(file);\n            \n            else if (name.endsWith(\".svg\"))\n                new SVGConversion().createSVG(file);\n            \n            else if (name.endsWith(\".pdf\"))\n                new PDFTransform().convert(file);\n            else if (name.endsWith(\".zip\"))\n            {   Vector resourceVector = new Vector();\n            \tIterator i = map.getAllDescendents(LWComponent.ChildKind.PROPER).iterator();\n            \twhile(i.hasNext()) {\t\n            \t\tLWComponent component = (LWComponent) i.next();\n            \t\tSystem.out.println(\"Component:\"+component+\" has resource:\"+component.hasResource());\n            \t\tif(component.hasResource() && (component.getResource() instanceof URLResource)){\n                    \n            \t\t\tURLResource resource = (URLResource) component.getResource();                    \n                \n            \t\t\t//   \tif(resource.getType() == Resource.URL) {\n            \t\t\ttry {\n                        // File file = new File(new URL(resource.getSpec()).getFile());\n                        if(resource.isLocalFile()) {\n                        \tString spec = resource.getSpec();                        \t                        \n                        \tSystem.out.println(resource.getSpec());\n                            Vector row = new Vector();\n                            row.add(new Boolean(true));\n                            row.add(resource);\n                            row.add(new Long(file.length()));\n                            row.add(\"Ready\");\n                            resourceVector.add(row);\n                        }\n            \t\t\t}catch (Exception ex) {\n            \t\t\t\tSystem.out.println(\"Publisher.setLocalResourceVector: Resource \"+resource.getSpec()+ ex);\n            \t\t\t\tex.printStackTrace();\n            \t\t\t}                    \n            \t\t}                \n            \t}\n            \tFile savedCMap =PublishUtil.createZip(map, resourceVector);\n            \t InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap));\n                OutputStream ostream = new BufferedOutputStream(new FileOutputStream(file));\n                int fileLength = (int)savedCMap.length();\n                byte bytes[] = new  byte[fileLength];\n                try\n                {\n                \twhile (istream.read(bytes,0,fileLength) != -1)\n                \t\tostream.write(bytes,0,fileLength);\n                }\n                catch(Exception e)\n                {\n                \te.printStackTrace();\n                }\n                finally\n                {\n                \tistream.close();\n                \tostream.close();\n                }\n            }\n            //else if (name.endsWith(\".html\"))\n              //  new HTMLConversion().convert(file);\n            \n            //else if (name.endsWith(\".imap\"))\n            else if (name.endsWith(\".html\")) {\n                new ImageMap().createImageMap(file);\n            }\n//             else if (name.endsWith(\".htm\")) {\n//                 writeHTMLOutline(map, file);\n//             }\n            else if(name.endsWith(\".rdf\"))\n            {\n               edu.tufts.vue.rdf.RDFIndex index = new edu.tufts.vue.rdf.RDFIndex();\n               \n               String selectionType = VueResources.getString(\"rdf.export.selection\");\n               \n               if(selectionType.equals(\"ALL\"))\n               {\n                 Iterator<LWMap> maps = VUE.getLeftTabbedPane().getAllMaps();\n                 while(maps.hasNext())\n                 {\n                     index.index(maps.next());\n                 }\n               }\n               else if(selectionType.equals(\"ACTIVE\"))\n               {\n                 index.index(VUE.getActiveMap());  \n               }    \n               else\n               {    \n                 index.index(VUE.getActiveMap());\n               }  \n               index.write(new FileWriter(file));\n            }\n            \n\n\t\t\t// don't know this as not all the above stuff is passing\n            // exceptions on to us!\n            System.out.println(\"Save code completed for \" + file);\n            VueFrame frame = (VueFrame)VUE.getMainWindow();\n            String title = VUE.getName() + \": \" + name;                      \n            frame.setTitle(title);\n            \n            if (name.endsWith(\".vue\"))\n            {\n             RecentlyOpenedFilesManager rofm = RecentlyOpenedFilesManager.getInstance();\n             rofm.updateRecentlyOpenedFiles(file.getAbsolutePath());\n            }\n            return true;\n\n        } catch (Throwable t) {\n            Log.error(\"Exception attempting to save file \" + file + \": \" + t);\n            Throwable e = t;\n            if (t.getCause() != null)\n                e = t.getCause();\n            if (e instanceof java.io.FileNotFoundException) {\n                Log.error(\"Save Failed\"+e.getMessage());\n            } else {\n                e.printStackTrace();\n                Log.error(\"Save failed for \\\"\" + file + \"\\\"\"+ e);\n            }\n            if (e != t)\n                Log.error(\"Exception attempting to save file \" + file + \": \" + e);\n        } finally {\n            VUE.clearWaitCursor();\n        }\n\n        return false;\n    }","commit_id":"aad93ce5aeadaac1f5cdbb2ad71ae59b6eceede8","url":"https://github.com/VUE/VUE"},{"original_method":"public void indexEReferenceDescriptors(Resource resource, IEReferenceDescriptorIndexer feeder,\n\t\t\tIProgressMonitor monitor) {\n\t\tMap<EObject, Collection<Setting>> find = EcoreUtil.CrossReferencer.find(resource.getContents());\n\t\tfor (Map.Entry<EObject, Collection<Setting>> entry : find.entrySet()) {\n\t\t\tfor (Setting setting : entry.getValue()) {\n\t\t\t\tfeeder.index(setting.getEObject(), (EObject) setting.get(true), (EReference) setting\n\t\t\t\t\t\t.getEStructuralFeature());\n\t\t\t}\n\t\t}\n\t}","id":70076,"modified_method":"public void indexEReferenceDescriptors(Resource resource, IEReferenceDescriptorIndexer feeder,\n\t\t\tIProgressMonitor monitor) {\n\t\tMap<EObject, Collection<Setting>> find = EcoreUtil.CrossReferencer.find(resource.getContents());\n\t\tfor (Map.Entry<EObject, Collection<Setting>> entry : find.entrySet()) {\n\t\t\tfor (Setting setting : entry.getValue()) {\n\t\t\t\tObject target = setting.get(true);\n\t\t\t\tif (setting.getEStructuralFeature().isMany())\n\t\t\t\t\tfor (Object t : (Collection<?>) target)\n\t\t\t\t\t\tfeeder.index(setting.getEObject(), (EObject) t, (EReference) setting.getEStructuralFeature());\n\t\t\t\telse\n\t\t\t\t\tfeeder.index(setting.getEObject(), (EObject) target, (EReference) setting.getEStructuralFeature());\n\t\t\t}\n\t\t}\n\t}","commit_id":"3f0a074d29903e7d34b3c4922f95f16e4313656d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n    public void testThatParentPerDocumentIsSupported() throws Exception {\n        createIndex(\"test\");\n        ensureYellow();\n        client().admin().indices().preparePutMapping(\"test\").setType(\"test\").setSource(jsonBuilder()\n                .startObject()\n                .startObject(\"test\")\n                .startObject(\"_parent\")\n                .field(\"type\", \"foo\")\n                .endObject()\n                .endObject()\n                .endObject()\n        ).get();\n\n        client().prepareIndex(\"test\", \"test\", \"1\").setParent(\"4\").setRefresh(true)\n                .setSource(jsonBuilder().startObject().field(\"foo\", \"bar\").endObject())\n                .execute().actionGet();\n\n        MultiGetResponse mgetResponse = client().prepareMultiGet()\n                .add(new MultiGetRequest.Item(\"test\", \"test\", \"1\").parent(\"4\"))\n                .add(new MultiGetRequest.Item(\"test\", \"test\", \"1\"))\n                .execute().actionGet();\n\n        assertThat(mgetResponse.getResponses().length, is(2));\n        assertThat(mgetResponse.getResponses()[0].isFailed(), is(false));\n        assertThat(mgetResponse.getResponses()[0].getResponse().isExists(), is(true));\n\n        assertThat(mgetResponse.getResponses()[1].isFailed(), is(true));\n        assertThat(mgetResponse.getResponses()[1].getResponse(), nullValue());\n        assertThat(mgetResponse.getResponses()[1].getFailure().getMessage(), equalTo(\"routing is required, but hasn't been specified\"));\n    }","id":70077,"modified_method":"@Test\n    public void testThatParentPerDocumentIsSupported() throws Exception {\n        createIndex(\"test\");\n        ensureYellow();\n        client().admin().indices().preparePutMapping(\"test\").setType(\"test\").setSource(jsonBuilder()\n                .startObject()\n                .startObject(\"test\")\n                .startObject(\"_parent\")\n                .field(\"type\", \"foo\")\n                .endObject()\n                .endObject()\n                .endObject()\n        ).get();\n\n        client().prepareIndex(\"test\", \"test\", \"1\").setParent(\"4\").setRefresh(true)\n                .setSource(jsonBuilder().startObject().field(\"foo\", \"bar\").endObject())\n                .execute().actionGet();\n\n        MultiGetResponse mgetResponse = client().prepareMultiGet()\n                .add(new MultiGetRequest.Item(\"test\", \"test\", \"1\").parent(\"4\"))\n                .add(new MultiGetRequest.Item(\"test\", \"test\", \"1\"))\n                .execute().actionGet();\n\n        assertThat(mgetResponse.getResponses().length, is(2));\n        assertThat(mgetResponse.getResponses()[0].isFailed(), is(false));\n        assertThat(mgetResponse.getResponses()[0].getResponse().isExists(), is(true));\n\n        assertThat(mgetResponse.getResponses()[1].isFailed(), is(true));\n        assertThat(mgetResponse.getResponses()[1].getResponse(), nullValue());\n        assertThat(mgetResponse.getResponses()[1].getFailure().getMessage(), equalTo(\"routing is required for [test]/[test]/[1]\"));\n    }","commit_id":"8989d062cd9c90956a3c8a3c03445491f2c57453","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testRequiredRoutingMapping() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"_routing\").field(\"required\", true).endObject().endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(\"test\", \"type1\", \"1\").setRouting(\"0\").setSource(\"field\", \"value1\").setRefresh(true).execute().actionGet();\n        logger.info(\"--> verifying get with no routing, should fail\");\n\n        logger.info(\"--> indexing with id [1], with no routing, should fail\");\n        try {\n            client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field\", \"value1\").setRefresh(true).execute().actionGet();\n            fail();\n        } catch (ElasticsearchException e) {\n            assertThat(e.unwrapCause(), instanceOf(RoutingMissingException.class));\n        }\n\n        logger.info(\"--> verifying get with routing, should find\");\n        for (int i = 0; i < 5; i++) {\n            assertThat(client().prepareGet(\"test\", \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n        }\n\n        logger.info(\"--> deleting with no routing, should broadcast the delete since _routing is required\");\n        client().prepareDelete(\"test\", \"type1\", \"1\").setRefresh(true).execute().actionGet();\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(\"test\", \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n            assertThat(client().prepareGet(\"test\", \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(false));\n        }\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(\"test\", \"type1\", \"1\").setRouting(\"0\").setSource(\"field\", \"value1\").setRefresh(true).execute().actionGet();\n        logger.info(\"--> verifying get with no routing, should not find anything\");\n\n        logger.info(\"--> bulk deleting with no routing, should broadcast the delete since _routing is required\");\n        client().prepareBulk().add(Requests.deleteRequest(\"test\").type(\"type1\").id(\"1\")).execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(\"test\", \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n            assertThat(client().prepareGet(\"test\", \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(false));\n        }\n    }","id":70078,"modified_method":"@Test\n    public void testRequiredRoutingMapping() throws Exception {\n        client().admin().indices().prepareCreate(\"test\").addAlias(new Alias(\"alias\"))\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"_routing\").field(\"required\", true).endObject().endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").setSource(\"field\", \"value1\").setRefresh(true).execute().actionGet();\n        logger.info(\"--> verifying get with no routing, should fail\");\n\n        logger.info(\"--> indexing with id [1], with no routing, should fail\");\n        try {\n            client().prepareIndex(indexOrAlias(), \"type1\", \"1\").setSource(\"field\", \"value1\").setRefresh(true).execute().actionGet();\n            fail();\n        } catch (ElasticsearchException e) {\n            assertThat(e.unwrapCause(), instanceOf(RoutingMissingException.class));\n        }\n\n        logger.info(\"--> verifying get with routing, should find\");\n        for (int i = 0; i < 5; i++) {\n            assertThat(client().prepareGet(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n        }\n\n        logger.info(\"--> deleting with no routing, should broadcast the delete since _routing is required\");\n        client().prepareDelete(indexOrAlias(), \"type1\", \"1\").setRefresh(true).execute().actionGet();\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(indexOrAlias(), \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n            assertThat(client().prepareGet(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(false));\n        }\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").setSource(\"field\", \"value1\").setRefresh(true).execute().actionGet();\n        logger.info(\"--> verifying get with no routing, should not find anything\");\n\n        logger.info(\"--> bulk deleting with no routing, should broadcast the delete since _routing is required\");\n        client().prepareBulk().add(Requests.deleteRequest(indexOrAlias()).type(\"type1\").id(\"1\")).execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(indexOrAlias(), \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n            assertThat(client().prepareGet(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(false));\n        }\n    }","commit_id":"8989d062cd9c90956a3c8a3c03445491f2c57453","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testRequiredRoutingWithPathMapping() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                        .startObject(\"_routing\").field(\"required\", true).field(\"path\", \"routing_field\").endObject().startObject(\"properties\")\n                        .startObject(\"routing_field\").field(\"type\", \"string\").field(\"index\", randomBoolean() ? \"no\" : \"not_analyzed\").field(\"doc_values\", randomBoolean() ? \"yes\" : \"no\").endObject().endObject()\n                        .endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field\", \"value1\", \"routing_field\", \"0\").setRefresh(true).execute().actionGet();\n\n        logger.info(\"--> check failure with different routing\");\n        try {\n            client().prepareIndex(\"test\", \"type1\", \"1\").setRouting(\"1\").setSource(\"field\", \"value1\", \"routing_field\", \"0\").setRefresh(true).execute().actionGet();\n            fail();\n        } catch (ElasticsearchException e) {\n            assertThat(e.unwrapCause(), instanceOf(MapperParsingException.class));\n        }\n\n\n        logger.info(\"--> verifying get with no routing, should fail\");\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(\"test\", \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n        }\n        logger.info(\"--> verifying get with routing, should find\");\n        for (int i = 0; i < 5; i++) {\n            assertThat(client().prepareGet(\"test\", \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n        }\n    }","id":70079,"modified_method":"@Test\n    public void testRequiredRoutingWithPathMapping() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addAlias(new Alias(\"alias\"))\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                        .startObject(\"_routing\").field(\"required\", true).field(\"path\", \"routing_field\").endObject().startObject(\"properties\")\n                        .startObject(\"routing_field\").field(\"type\", \"string\").field(\"index\", randomBoolean() ? \"no\" : \"not_analyzed\").field(\"doc_values\", randomBoolean() ? \"yes\" : \"no\").endObject().endObject()\n                        .endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(indexOrAlias(), \"type1\", \"1\").setSource(\"field\", \"value1\", \"routing_field\", \"0\").setRefresh(true).execute().actionGet();\n\n        logger.info(\"--> check failure with different routing\");\n        try {\n            client().prepareIndex(indexOrAlias(), \"type1\", \"1\").setRouting(\"1\").setSource(\"field\", \"value1\", \"routing_field\", \"0\").setRefresh(true).execute().actionGet();\n            fail();\n        } catch (ElasticsearchException e) {\n            assertThat(e.unwrapCause(), instanceOf(MapperParsingException.class));\n        }\n\n\n        logger.info(\"--> verifying get with no routing, should fail\");\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(indexOrAlias(), \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n        }\n        logger.info(\"--> verifying get with routing, should find\");\n        for (int i = 0; i < 5; i++) {\n            assertThat(client().prepareGet(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n        }\n    }","commit_id":"8989d062cd9c90956a3c8a3c03445491f2c57453","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testRequiredRoutingMapping_variousAPIs() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"_routing\").field(\"required\", true).endObject().endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(\"test\", \"type1\", \"1\").setRouting(\"0\").setSource(\"field\", \"value1\").get();\n        logger.info(\"--> indexing with id [2], and routing [0]\");\n        client().prepareIndex(\"test\", \"type1\", \"2\").setRouting(\"0\").setSource(\"field\", \"value2\").setRefresh(true).get();\n\n        logger.info(\"--> verifying get with id [1] with routing [0], should succeed\");\n        assertThat(client().prepareGet(\"test\", \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n\n        logger.info(\"--> verifying get with id [1], with no routing, should fail\");\n        try {\n            client().prepareGet(\"test\", \"type1\", \"1\").get();\n            fail();\n        } catch (RoutingMissingException e) {\n            assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n        }\n\n        logger.info(\"--> verifying explain with id [2], with routing [0], should succeed\");\n        ExplainResponse explainResponse = client().prepareExplain(\"test\", \"type1\", \"2\")\n                .setQuery(QueryBuilders.matchAllQuery())\n                .setRouting(\"0\").get();\n        assertThat(explainResponse.isExists(), equalTo(true));\n        assertThat(explainResponse.isMatch(), equalTo(true));\n\n        logger.info(\"--> verifying explain with id [2], with no routing, should fail\");\n        try {\n            client().prepareExplain(\"test\", \"type1\", \"2\")\n                    .setQuery(QueryBuilders.matchAllQuery()).get();\n            fail();\n        } catch (RoutingMissingException e) {\n            assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[2]\"));\n        }\n\n        logger.info(\"--> verifying term vector with id [1], with routing [0], should succeed\");\n        TermVectorResponse termVectorResponse = client().prepareTermVector(\"test\", \"type1\", \"1\").setRouting(\"0\").get();\n        assertThat(termVectorResponse.isExists(), equalTo(true));\n        assertThat(termVectorResponse.getId(), equalTo(\"1\"));\n\n        try {\n            client().prepareTermVector(\"test\", \"type1\", \"1\").get();\n            fail();\n        } catch (RoutingMissingException e) {\n            assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n        }\n\n        UpdateResponse updateResponse = client().prepareUpdate(\"test\", \"type1\", \"1\").setRouting(\"0\")\n                .setDoc(\"field1\", \"value1\").get();\n        assertThat(updateResponse.getId(), equalTo(\"1\"));\n        assertThat(updateResponse.getVersion(), equalTo(2l));\n\n        try {\n            client().prepareUpdate(\"test\", \"type1\", \"1\").setDoc(\"field1\", \"value1\").get();\n            fail();\n        } catch (RoutingMissingException e) {\n            assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n        }\n\n        logger.info(\"--> verifying mget with ids [1,2], with routing [0], should succeed\");\n        MultiGetResponse multiGetResponse = client().prepareMultiGet()\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"1\").routing(\"0\"))\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"2\").routing(\"0\")).get();\n        assertThat(multiGetResponse.getResponses().length, equalTo(2));\n        assertThat(multiGetResponse.getResponses()[0].isFailed(), equalTo(false));\n        assertThat(multiGetResponse.getResponses()[0].getResponse().getId(), equalTo(\"1\"));\n        assertThat(multiGetResponse.getResponses()[1].isFailed(), equalTo(false));\n        assertThat(multiGetResponse.getResponses()[1].getResponse().getId(), equalTo(\"2\"));\n\n        logger.info(\"--> verifying mget with ids [1,2], with no routing, should fail\");\n        multiGetResponse = client().prepareMultiGet()\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"1\"))\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"2\")).get();\n        assertThat(multiGetResponse.getResponses().length, equalTo(2));\n        assertThat(multiGetResponse.getResponses()[0].isFailed(), equalTo(true));\n        assertThat(multiGetResponse.getResponses()[0].getFailure().getId(), equalTo(\"1\"));\n        assertThat(multiGetResponse.getResponses()[0].getFailure().getMessage(), equalTo(\"routing is required, but hasn't been specified\"));\n        assertThat(multiGetResponse.getResponses()[1].isFailed(), equalTo(true));\n        assertThat(multiGetResponse.getResponses()[1].getFailure().getId(), equalTo(\"2\"));\n        assertThat(multiGetResponse.getResponses()[1].getFailure().getMessage(), equalTo(\"routing is required, but hasn't been specified\"));\n\n        MultiTermVectorsResponse multiTermVectorsResponse = client().prepareMultiTermVectors()\n                .add(new TermVectorRequest(\"test\", \"type1\", \"1\").routing(\"0\"))\n                .add(new TermVectorRequest(\"test\", \"type1\", \"2\").routing(\"0\")).get();\n        assertThat(multiTermVectorsResponse.getResponses().length, equalTo(2));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getId(), equalTo(\"1\"));\n        assertThat(multiTermVectorsResponse.getResponses()[0].isFailed(), equalTo(false));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getResponse().getId(), equalTo(\"1\"));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getResponse().isExists(), equalTo(true));\n        assertThat(multiTermVectorsResponse.getResponses()[1].getId(), equalTo(\"2\"));\n        assertThat(multiTermVectorsResponse.getResponses()[1].isFailed(), equalTo(false));\n        assertThat(multiTermVectorsResponse.getResponses()[1].getResponse().getId(), equalTo(\"2\"));\n        assertThat(multiTermVectorsResponse.getResponses()[1].getResponse().isExists(), equalTo(true));\n\n        multiTermVectorsResponse = client().prepareMultiTermVectors()\n                .add(new TermVectorRequest(\"test\", \"type1\", \"1\"))\n                .add(new TermVectorRequest(\"test\", \"type1\", \"2\")).get();\n        assertThat(multiTermVectorsResponse.getResponses().length, equalTo(2));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getId(), equalTo(\"1\"));\n        assertThat(multiTermVectorsResponse.getResponses()[0].isFailed(), equalTo(true));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getFailure().getMessage(), equalTo(\"routing is required, but hasn't been specified\"));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getResponse(), nullValue());\n        assertThat(multiTermVectorsResponse.getResponses()[1].getId(), equalTo(\"2\"));\n        assertThat(multiTermVectorsResponse.getResponses()[1].isFailed(), equalTo(true));\n        assertThat(multiTermVectorsResponse.getResponses()[1].getResponse(),nullValue());\n        assertThat(multiTermVectorsResponse.getResponses()[1].getFailure().getMessage(), equalTo(\"routing is required, but hasn't been specified\"));\n    }","id":70080,"modified_method":"@Test\n    public void testRequiredRoutingMapping_variousAPIs() throws Exception {\n        client().admin().indices().prepareCreate(\"test\").addAlias(new Alias(\"alias\"))\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\").startObject(\"_routing\").field(\"required\", true).endObject().endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").setSource(\"field\", \"value1\").get();\n        logger.info(\"--> indexing with id [2], and routing [0]\");\n        client().prepareIndex(indexOrAlias(), \"type1\", \"2\").setRouting(\"0\").setSource(\"field\", \"value2\").setRefresh(true).get();\n\n        logger.info(\"--> verifying get with id [1] with routing [0], should succeed\");\n        assertThat(client().prepareGet(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n\n        logger.info(\"--> verifying get with id [1], with no routing, should fail\");\n        try {\n            client().prepareGet(indexOrAlias(), \"type1\", \"1\").get();\n            fail();\n        } catch (RoutingMissingException e) {\n            assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n        }\n\n        logger.info(\"--> verifying explain with id [2], with routing [0], should succeed\");\n        ExplainResponse explainResponse = client().prepareExplain(indexOrAlias(), \"type1\", \"2\")\n                .setQuery(QueryBuilders.matchAllQuery())\n                .setRouting(\"0\").get();\n        assertThat(explainResponse.isExists(), equalTo(true));\n        assertThat(explainResponse.isMatch(), equalTo(true));\n\n        logger.info(\"--> verifying explain with id [2], with no routing, should fail\");\n        try {\n            client().prepareExplain(indexOrAlias(), \"type1\", \"2\")\n                    .setQuery(QueryBuilders.matchAllQuery()).get();\n            fail();\n        } catch (RoutingMissingException e) {\n            assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[2]\"));\n        }\n\n        logger.info(\"--> verifying term vector with id [1], with routing [0], should succeed\");\n        TermVectorResponse termVectorResponse = client().prepareTermVector(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").get();\n        assertThat(termVectorResponse.isExists(), equalTo(true));\n        assertThat(termVectorResponse.getId(), equalTo(\"1\"));\n\n        try {\n            client().prepareTermVector(indexOrAlias(), \"type1\", \"1\").get();\n            fail();\n        } catch (RoutingMissingException e) {\n            assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n        }\n\n        UpdateResponse updateResponse = client().prepareUpdate(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\")\n                .setDoc(\"field1\", \"value1\").get();\n        assertThat(updateResponse.getId(), equalTo(\"1\"));\n        assertThat(updateResponse.getVersion(), equalTo(2l));\n\n        try {\n            client().prepareUpdate(indexOrAlias(), \"type1\", \"1\").setDoc(\"field1\", \"value1\").get();\n            fail();\n        } catch (RoutingMissingException e) {\n            assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n        }\n\n        logger.info(\"--> verifying mget with ids [1,2], with routing [0], should succeed\");\n        MultiGetResponse multiGetResponse = client().prepareMultiGet()\n                .add(new MultiGetRequest.Item(indexOrAlias(), \"type1\", \"1\").routing(\"0\"))\n                .add(new MultiGetRequest.Item(indexOrAlias(), \"type1\", \"2\").routing(\"0\")).get();\n        assertThat(multiGetResponse.getResponses().length, equalTo(2));\n        assertThat(multiGetResponse.getResponses()[0].isFailed(), equalTo(false));\n        assertThat(multiGetResponse.getResponses()[0].getResponse().getId(), equalTo(\"1\"));\n        assertThat(multiGetResponse.getResponses()[1].isFailed(), equalTo(false));\n        assertThat(multiGetResponse.getResponses()[1].getResponse().getId(), equalTo(\"2\"));\n\n        logger.info(\"--> verifying mget with ids [1,2], with no routing, should fail\");\n        multiGetResponse = client().prepareMultiGet()\n                .add(new MultiGetRequest.Item(indexOrAlias(), \"type1\", \"1\"))\n                .add(new MultiGetRequest.Item(indexOrAlias(), \"type1\", \"2\")).get();\n        assertThat(multiGetResponse.getResponses().length, equalTo(2));\n        assertThat(multiGetResponse.getResponses()[0].isFailed(), equalTo(true));\n        assertThat(multiGetResponse.getResponses()[0].getFailure().getId(), equalTo(\"1\"));\n        assertThat(multiGetResponse.getResponses()[0].getFailure().getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n        assertThat(multiGetResponse.getResponses()[1].isFailed(), equalTo(true));\n        assertThat(multiGetResponse.getResponses()[1].getFailure().getId(), equalTo(\"2\"));\n        assertThat(multiGetResponse.getResponses()[1].getFailure().getMessage(), equalTo(\"routing is required for [test]/[type1]/[2]\"));\n\n        MultiTermVectorsResponse multiTermVectorsResponse = client().prepareMultiTermVectors()\n                .add(new TermVectorRequest(indexOrAlias(), \"type1\", \"1\").routing(\"0\"))\n                .add(new TermVectorRequest(indexOrAlias(), \"type1\", \"2\").routing(\"0\")).get();\n        assertThat(multiTermVectorsResponse.getResponses().length, equalTo(2));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getId(), equalTo(\"1\"));\n        assertThat(multiTermVectorsResponse.getResponses()[0].isFailed(), equalTo(false));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getResponse().getId(), equalTo(\"1\"));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getResponse().isExists(), equalTo(true));\n        assertThat(multiTermVectorsResponse.getResponses()[1].getId(), equalTo(\"2\"));\n        assertThat(multiTermVectorsResponse.getResponses()[1].isFailed(), equalTo(false));\n        assertThat(multiTermVectorsResponse.getResponses()[1].getResponse().getId(), equalTo(\"2\"));\n        assertThat(multiTermVectorsResponse.getResponses()[1].getResponse().isExists(), equalTo(true));\n\n        multiTermVectorsResponse = client().prepareMultiTermVectors()\n                .add(new TermVectorRequest(indexOrAlias(), \"type1\", \"1\"))\n                .add(new TermVectorRequest(indexOrAlias(), \"type1\", \"2\")).get();\n        assertThat(multiTermVectorsResponse.getResponses().length, equalTo(2));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getId(), equalTo(\"1\"));\n        assertThat(multiTermVectorsResponse.getResponses()[0].isFailed(), equalTo(true));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getFailure().getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n        assertThat(multiTermVectorsResponse.getResponses()[0].getResponse(), nullValue());\n        assertThat(multiTermVectorsResponse.getResponses()[1].getId(), equalTo(\"2\"));\n        assertThat(multiTermVectorsResponse.getResponses()[1].isFailed(), equalTo(true));\n        assertThat(multiTermVectorsResponse.getResponses()[1].getResponse(),nullValue());\n        assertThat(multiTermVectorsResponse.getResponses()[1].getFailure().getMessage(), equalTo(\"routing is required for [test]/[type1]/[2]\"));\n    }","commit_id":"8989d062cd9c90956a3c8a3c03445491f2c57453","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testRequiredRoutingWithPathNumericType() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                        .startObject(\"_routing\").field(\"required\", true).field(\"path\", \"routing_field\").endObject()\n                        .endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field\", \"value1\", \"routing_field\", 0).execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        logger.info(\"--> verifying get with no routing, should fail\");\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(\"test\", \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n        }\n        logger.info(\"--> verifying get with routing, should find\");\n        for (int i = 0; i < 5; i++) {\n            assertThat(client().prepareGet(\"test\", \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n        }\n    }","id":70081,"modified_method":"@Test\n    public void testRequiredRoutingWithPathNumericType() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .addAlias(new Alias(\"alias\"))\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                        .startObject(\"_routing\").field(\"required\", true).field(\"path\", \"routing_field\").endObject()\n                        .endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareIndex(indexOrAlias(), \"type1\", \"1\").setSource(\"field\", \"value1\", \"routing_field\", 0).execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        logger.info(\"--> verifying get with no routing, should fail\");\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(indexOrAlias(), \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n        }\n        logger.info(\"--> verifying get with routing, should find\");\n        for (int i = 0; i < 5; i++) {\n            assertThat(client().prepareGet(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n        }\n    }","commit_id":"8989d062cd9c90956a3c8a3c03445491f2c57453","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testRequiredRoutingWithPathMappingBulk() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                        .startObject(\"_routing\").field(\"required\", true).field(\"path\", \"routing_field\").endObject()\n                        .endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareBulk().add(\n                client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field\", \"value1\", \"routing_field\", \"0\")).execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        logger.info(\"--> verifying get with no routing, should fail\");\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(\"test\", \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n        }\n        logger.info(\"--> verifying get with routing, should find\");\n        for (int i = 0; i < 5; i++) {\n            assertThat(client().prepareGet(\"test\", \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n        }\n    }","id":70082,"modified_method":"@Test\n    public void testRequiredRoutingWithPathMappingBulk() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addAlias(new Alias(\"alias\"))\n                .addMapping(\"type1\", XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                        .startObject(\"_routing\").field(\"required\", true).field(\"path\", \"routing_field\").endObject()\n                        .endObject().endObject())\n                .execute().actionGet();\n        ensureGreen();\n\n        logger.info(\"--> indexing with id [1], and routing [0]\");\n        client().prepareBulk().add(\n                client().prepareIndex(indexOrAlias(), \"type1\", \"1\").setSource(\"field\", \"value1\", \"routing_field\", \"0\")).execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        logger.info(\"--> verifying get with no routing, should fail\");\n        for (int i = 0; i < 5; i++) {\n            try {\n                client().prepareGet(indexOrAlias(), \"type1\", \"1\").execute().actionGet().isExists();\n                fail();\n            } catch (RoutingMissingException e) {\n                assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n                assertThat(e.getMessage(), equalTo(\"routing is required for [test]/[type1]/[1]\"));\n            }\n        }\n        logger.info(\"--> verifying get with routing, should find\");\n        for (int i = 0; i < 5; i++) {\n            assertThat(client().prepareGet(indexOrAlias(), \"type1\", \"1\").setRouting(\"0\").execute().actionGet().isExists(), equalTo(true));\n        }\n    }","commit_id":"8989d062cd9c90956a3c8a3c03445491f2c57453","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected void doExecute(final MultiGetRequest request, final ActionListener<MultiGetResponse> listener) {\n        ClusterState clusterState = clusterService.state();\n\n        clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ);\n\n        final AtomicArray<MultiGetItemResponse> responses = new AtomicArray<>(request.items.size());\n\n        Map<ShardId, MultiGetShardRequest> shardRequests = new HashMap<>();\n        for (int i = 0; i < request.items.size(); i++) {\n            MultiGetRequest.Item item = request.items.get(i);\n            if (!clusterState.metaData().hasConcreteIndex(item.index())) {\n                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(), \"[\" + item.index() + \"] missing\")));\n                continue;\n            }\n            if (item.routing() == null && clusterState.getMetaData().routingRequired(item.index(), item.type())) {\n                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(), \"routing is required, but hasn't been specified\")));\n                continue;\n            }\n\n            item.routing(clusterState.metaData().resolveIndexRouting(item.routing(), item.index()));\n            item.index(clusterState.metaData().concreteSingleIndex(item.index(), item.indicesOptions()));\n            ShardId shardId = clusterService.operationRouting()\n                    .getShards(clusterState, item.index(), item.type(), item.id(), item.routing(), null).shardId();\n            MultiGetShardRequest shardRequest = shardRequests.get(shardId);\n            if (shardRequest == null) {\n                shardRequest = new MultiGetShardRequest(shardId.index().name(), shardId.id());\n                shardRequest.preference(request.preference);\n                shardRequest.realtime(request.realtime);\n                shardRequest.refresh(request.refresh);\n                shardRequest.ignoreErrorsOnGeneratedFields(request.ignoreErrorsOnGeneratedFields);\n\n                shardRequests.put(shardId, shardRequest);\n            }\n            shardRequest.add(i, item.type(), item.id(), item.fields(), item.version(), item.versionType(), item.fetchSourceContext());\n        }\n\n        if (shardRequests.size() == 0) {\n            // only failures..\n            listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));\n        }\n\n        final AtomicInteger counter = new AtomicInteger(shardRequests.size());\n\n        for (final MultiGetShardRequest shardRequest : shardRequests.values()) {\n            shardAction.execute(shardRequest, new ActionListener<MultiGetShardResponse>() {\n                @Override\n                public void onResponse(MultiGetShardResponse response) {\n                    for (int i = 0; i < response.locations.size(); i++) {\n                        responses.set(response.locations.get(i), new MultiGetItemResponse(response.responses.get(i), response.failures.get(i)));\n                    }\n                    if (counter.decrementAndGet() == 0) {\n                        finishHim();\n                    }\n                }\n\n                @Override\n                public void onFailure(Throwable e) {\n                    // create failures for all relevant requests\n                    String message = ExceptionsHelper.detailedMessage(e);\n                    for (int i = 0; i < shardRequest.locations.size(); i++) {\n                        responses.set(shardRequest.locations.get(i), new MultiGetItemResponse(null,\n                                new MultiGetResponse.Failure(shardRequest.index(), shardRequest.types.get(i), shardRequest.ids.get(i), message)));\n                    }\n                    if (counter.decrementAndGet() == 0) {\n                        finishHim();\n                    }\n                }\n\n                private void finishHim() {\n                    listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));\n                }\n            });\n        }\n    }","id":70083,"modified_method":"@Override\n    protected void doExecute(final MultiGetRequest request, final ActionListener<MultiGetResponse> listener) {\n        ClusterState clusterState = clusterService.state();\n\n        clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ);\n\n        final AtomicArray<MultiGetItemResponse> responses = new AtomicArray<>(request.items.size());\n\n        Map<ShardId, MultiGetShardRequest> shardRequests = new HashMap<>();\n        for (int i = 0; i < request.items.size(); i++) {\n            MultiGetRequest.Item item = request.items.get(i);\n            if (!clusterState.metaData().hasConcreteIndex(item.index())) {\n                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(), \"[\" + item.index() + \"] missing\")));\n                continue;\n            }\n\n            item.routing(clusterState.metaData().resolveIndexRouting(item.routing(), item.index()));\n            item.index(clusterState.metaData().concreteSingleIndex(item.index(), item.indicesOptions()));\n            if (item.routing() == null && clusterState.getMetaData().routingRequired(item.index(), item.type())) {\n                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(),\n                        \"routing is required for [\" + item.index() + \"]/[\" + item.type() + \"]/[\" + item.id() + \"]\")));\n                continue;\n            }\n            ShardId shardId = clusterService.operationRouting()\n                    .getShards(clusterState, item.index(), item.type(), item.id(), item.routing(), null).shardId();\n            MultiGetShardRequest shardRequest = shardRequests.get(shardId);\n            if (shardRequest == null) {\n                shardRequest = new MultiGetShardRequest(shardId.index().name(), shardId.id());\n                shardRequest.preference(request.preference);\n                shardRequest.realtime(request.realtime);\n                shardRequest.refresh(request.refresh);\n                shardRequest.ignoreErrorsOnGeneratedFields(request.ignoreErrorsOnGeneratedFields);\n\n                shardRequests.put(shardId, shardRequest);\n            }\n            shardRequest.add(i, item.type(), item.id(), item.fields(), item.version(), item.versionType(), item.fetchSourceContext());\n        }\n\n        if (shardRequests.size() == 0) {\n            // only failures..\n            listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));\n        }\n\n        final AtomicInteger counter = new AtomicInteger(shardRequests.size());\n\n        for (final MultiGetShardRequest shardRequest : shardRequests.values()) {\n            shardAction.execute(shardRequest, new ActionListener<MultiGetShardResponse>() {\n                @Override\n                public void onResponse(MultiGetShardResponse response) {\n                    for (int i = 0; i < response.locations.size(); i++) {\n                        responses.set(response.locations.get(i), new MultiGetItemResponse(response.responses.get(i), response.failures.get(i)));\n                    }\n                    if (counter.decrementAndGet() == 0) {\n                        finishHim();\n                    }\n                }\n\n                @Override\n                public void onFailure(Throwable e) {\n                    // create failures for all relevant requests\n                    String message = ExceptionsHelper.detailedMessage(e);\n                    for (int i = 0; i < shardRequest.locations.size(); i++) {\n                        responses.set(shardRequest.locations.get(i), new MultiGetItemResponse(null,\n                                new MultiGetResponse.Failure(shardRequest.index(), shardRequest.types.get(i), shardRequest.ids.get(i), message)));\n                    }\n                    if (counter.decrementAndGet() == 0) {\n                        finishHim();\n                    }\n                }\n\n                private void finishHim() {\n                    listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));\n                }\n            });\n        }\n    }","commit_id":"8989d062cd9c90956a3c8a3c03445491f2c57453","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected void doExecute(final MultiTermVectorsRequest request, final ActionListener<MultiTermVectorsResponse> listener) {\n        ClusterState clusterState = clusterService.state();\n\n        clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ);\n\n        final AtomicArray<MultiTermVectorsItemResponse> responses = new AtomicArray<>(request.requests.size());\n\n        Map<ShardId, MultiTermVectorsShardRequest> shardRequests = new HashMap<>();\n        for (int i = 0; i < request.requests.size(); i++) {\n            TermVectorRequest termVectorRequest = request.requests.get(i);\n            termVectorRequest.routing(clusterState.metaData().resolveIndexRouting(termVectorRequest.routing(), termVectorRequest.index()));\n            if (!clusterState.metaData().hasConcreteIndex(termVectorRequest.index())) {\n                responses.set(i, new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(termVectorRequest.index(),\n                        termVectorRequest.type(), termVectorRequest.id(), \"[\" + termVectorRequest.index() + \"] missing\")));\n                continue;\n            }\n            if (termVectorRequest.routing() == null && clusterState.getMetaData().routingRequired(termVectorRequest.index(), termVectorRequest.type())) {\n                responses.set(i, new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(termVectorRequest.index(),\n                        termVectorRequest.type(), termVectorRequest.id(), \"routing is required, but hasn't been specified\")));\n                continue;\n            }\n            termVectorRequest.index(clusterState.metaData().concreteSingleIndex(termVectorRequest.index(), termVectorRequest.indicesOptions()));\n            ShardId shardId = clusterService\n                    .operationRouting()\n                    .getShards(clusterState, termVectorRequest.index(), termVectorRequest.type(), termVectorRequest.id(),\n                            termVectorRequest.routing(), null).shardId();\n            MultiTermVectorsShardRequest shardRequest = shardRequests.get(shardId);\n            if (shardRequest == null) {\n                shardRequest = new MultiTermVectorsShardRequest(shardId.index().name(), shardId.id());\n                shardRequest.preference(request.preference);\n\n                shardRequests.put(shardId, shardRequest);\n            }\n            shardRequest.add(i, termVectorRequest);\n        }\n        \n        if (shardRequests.size() == 0) {\n            // only failures..\n            listener.onResponse(new MultiTermVectorsResponse(responses.toArray(new MultiTermVectorsItemResponse[responses.length()])));\n        }\n        \n        final AtomicInteger counter = new AtomicInteger(shardRequests.size());\n        for (final MultiTermVectorsShardRequest shardRequest : shardRequests.values()) {\n            shardAction.execute(shardRequest, new ActionListener<MultiTermVectorsShardResponse>() {\n                @Override\n                public void onResponse(MultiTermVectorsShardResponse response) {\n                    for (int i = 0; i < response.locations.size(); i++) {\n                        responses.set(response.locations.get(i), new MultiTermVectorsItemResponse(response.responses.get(i),\n                                response.failures.get(i)));\n                    }\n                    if (counter.decrementAndGet() == 0) {\n                        finishHim();\n                    }\n                }\n\n                @Override\n                public void onFailure(Throwable e) {\n                    // create failures for all relevant requests\n                    String message = ExceptionsHelper.detailedMessage(e);\n                    for (int i = 0; i < shardRequest.locations.size(); i++) {\n                        TermVectorRequest termVectorRequest = shardRequest.requests.get(i);\n                        responses.set(shardRequest.locations.get(i), new MultiTermVectorsItemResponse(null,\n                                new MultiTermVectorsResponse.Failure(shardRequest.index(), termVectorRequest.type(),\n                                        termVectorRequest.id(), message)));\n                    }\n                    if (counter.decrementAndGet() == 0) {\n                        finishHim();\n                    }\n                }\n\n                private void finishHim() {\n                    listener.onResponse(new MultiTermVectorsResponse(\n                            responses.toArray(new MultiTermVectorsItemResponse[responses.length()])));\n                }\n            });\n        }\n    }","id":70084,"modified_method":"@Override\n    protected void doExecute(final MultiTermVectorsRequest request, final ActionListener<MultiTermVectorsResponse> listener) {\n        ClusterState clusterState = clusterService.state();\n\n        clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ);\n\n        final AtomicArray<MultiTermVectorsItemResponse> responses = new AtomicArray<>(request.requests.size());\n\n        Map<ShardId, MultiTermVectorsShardRequest> shardRequests = new HashMap<>();\n        for (int i = 0; i < request.requests.size(); i++) {\n            TermVectorRequest termVectorRequest = request.requests.get(i);\n            termVectorRequest.routing(clusterState.metaData().resolveIndexRouting(termVectorRequest.routing(), termVectorRequest.index()));\n            if (!clusterState.metaData().hasConcreteIndex(termVectorRequest.index())) {\n                responses.set(i, new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(termVectorRequest.index(),\n                        termVectorRequest.type(), termVectorRequest.id(), \"[\" + termVectorRequest.index() + \"] missing\")));\n                continue;\n            }\n            termVectorRequest.index(clusterState.metaData().concreteSingleIndex(termVectorRequest.index(), termVectorRequest.indicesOptions()));\n            if (termVectorRequest.routing() == null && clusterState.getMetaData().routingRequired(termVectorRequest.index(), termVectorRequest.type())) {\n                responses.set(i, new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(termVectorRequest.index(), termVectorRequest.type(), termVectorRequest.id(),\n                        \"routing is required for [\" + termVectorRequest.index() + \"]/[\" + termVectorRequest.type() + \"]/[\" + termVectorRequest.id() + \"]\")));\n                continue;\n            }\n            ShardId shardId = clusterService\n                    .operationRouting()\n                    .getShards(clusterState, termVectorRequest.index(), termVectorRequest.type(), termVectorRequest.id(),\n                            termVectorRequest.routing(), null).shardId();\n            MultiTermVectorsShardRequest shardRequest = shardRequests.get(shardId);\n            if (shardRequest == null) {\n                shardRequest = new MultiTermVectorsShardRequest(shardId.index().name(), shardId.id());\n                shardRequest.preference(request.preference);\n\n                shardRequests.put(shardId, shardRequest);\n            }\n            shardRequest.add(i, termVectorRequest);\n        }\n        \n        if (shardRequests.size() == 0) {\n            // only failures..\n            listener.onResponse(new MultiTermVectorsResponse(responses.toArray(new MultiTermVectorsItemResponse[responses.length()])));\n        }\n        \n        final AtomicInteger counter = new AtomicInteger(shardRequests.size());\n        for (final MultiTermVectorsShardRequest shardRequest : shardRequests.values()) {\n            shardAction.execute(shardRequest, new ActionListener<MultiTermVectorsShardResponse>() {\n                @Override\n                public void onResponse(MultiTermVectorsShardResponse response) {\n                    for (int i = 0; i < response.locations.size(); i++) {\n                        responses.set(response.locations.get(i), new MultiTermVectorsItemResponse(response.responses.get(i),\n                                response.failures.get(i)));\n                    }\n                    if (counter.decrementAndGet() == 0) {\n                        finishHim();\n                    }\n                }\n\n                @Override\n                public void onFailure(Throwable e) {\n                    // create failures for all relevant requests\n                    String message = ExceptionsHelper.detailedMessage(e);\n                    for (int i = 0; i < shardRequest.locations.size(); i++) {\n                        TermVectorRequest termVectorRequest = shardRequest.requests.get(i);\n                        responses.set(shardRequest.locations.get(i), new MultiTermVectorsItemResponse(null,\n                                new MultiTermVectorsResponse.Failure(shardRequest.index(), termVectorRequest.type(),\n                                        termVectorRequest.id(), message)));\n                    }\n                    if (counter.decrementAndGet() == 0) {\n                        finishHim();\n                    }\n                }\n\n                private void finishHim() {\n                    listener.onResponse(new MultiTermVectorsResponse(\n                            responses.toArray(new MultiTermVectorsItemResponse[responses.length()])));\n                }\n            });\n        }\n    }","commit_id":"8989d062cd9c90956a3c8a3c03445491f2c57453","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphChooseParentResource\");\n\n        modelAndView.addObject(\"nodeResources\", getResourceService().findNodeResources());\n        modelAndView.addObject(\"domainResources\", getResourceService().findDomainResources());\n        \n        return modelAndView;\n    }","id":70085,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        /*\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphChooseParentResource\");\n\n        modelAndView.addObject(\"nodeResources\", getResourceService().findNodeResources());\n        modelAndView.addObject(\"domainResources\", getResourceService().findDomainResources());\n        \n        return modelAndView;\n        */\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphChooseResource\");\n\n        String selectedResourceId = request.getParameter(\"selectedResourceId\");\n        if (selectedResourceId != null) {\n            try {\n                OnmsResource selectedResource = m_resourceService.getResourceById(selectedResourceId);\n\n                Map<String, OnmsResource> selectedResourceAndParents = new HashMap<String, OnmsResource>();\n                OnmsResource r = selectedResource;\n                while (r != null) {\n                    selectedResourceAndParents.put(r.getId(), r);\n                    r = r.getParent();\n                }\n                \n                modelAndView.addObject(\"selectedResourceAndParents\", selectedResourceAndParents);\n            } catch (DataAccessException e) {\n                // Don't do anything\n            }\n        }\n\n        \n        /*\n        OnmsResource resource = getResourceService().getResourceById(resourceId);\n        modelAndView.addObject(\"parentResource\", resource);\n        \n        modelAndView.addObject(\"parentResourcePrefabGraphs\", m_resourceService.findPrefabGraphsForResource(resource));\n        */\n\n        //List<OnmsResource> childResources = getResourceService().findChildResources(resource);\n        List<OnmsResource> nodeResources = getResourceService().findNodeResources();\n        List<OnmsResource> domainResources = getResourceService().findDomainResources();\n        \n        List<OnmsResource> childResources = new ArrayList<OnmsResource>(nodeResources.size() + domainResources.size());\n        childResources.addAll(nodeResources);\n        childResources.addAll(domainResources);\n\n        modelAndView.addObject(\"resources\", childResources);\n        \n        return modelAndView;\n    }","commit_id":"14ddbb7710f2fb10447f458c738febb00e7e0baf","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        OnmsResource resource = getResourceService().getResourceById(resourceId);\n\n//        List<Resource> childResources = getResourceService().findChildResources(resource, \"nodeSnmp\", \"interfaceSnmp\");\n        List<OnmsResource> childResources = getResourceService().findChildResources(resource);\n        return new ModelAndView(\"KSC/customGraphChooseResource\", \"resources\", childResources);\n    }","id":70086,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphChooseResource\");\n\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        String selectedResourceId = request.getParameter(\"selectedResourceId\");\n        if (selectedResourceId != null) {\n            try {\n                OnmsResource selectedResource = m_resourceService.getResourceById(selectedResourceId);\n\n                Map<String, OnmsResource> selectedResourceAndParents = new HashMap<String, OnmsResource>();\n                OnmsResource r = selectedResource;\n                while (r != null) {\n                    selectedResourceAndParents.put(r.getId(), r);\n                    r = r.getParent();\n                }\n                \n                modelAndView.addObject(\"selectedResourceAndParents\", selectedResourceAndParents);\n            } catch (DataAccessException e) {\n                // Don't do anything\n            }\n        }\n        \n        OnmsResource resource = getResourceService().getResourceById(resourceId);\n        modelAndView.addObject(\"parentResource\", resource);\n        \n        modelAndView.addObject(\"parentResourcePrefabGraphs\", m_resourceService.findPrefabGraphsForResource(resource));\n\n        List<OnmsResource> childResources = getResourceService().findChildResources(resource);\n        modelAndView.addObject(\"resources\", childResources);\n        \n        return modelAndView;\n    }","commit_id":"14ddbb7710f2fb10447f458c738febb00e7e0baf","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = Integer.parseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            ReportsList reports_list = KSC_PerformanceReportFactory.getConfiguration();\n            report = reports_list.getReport(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        Graph graph = null;\n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            graph = report.getGraph(0); // get the first graph in the list\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n      \n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n      \n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n        }\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        modelAndView.addObject(\"domain\", domain);\n        modelAndView.addObject(\"report\", r_index);\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n        modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        \n        return modelAndView;\n    }","id":70087,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = Integer.parseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            ReportsList reports_list = KSC_PerformanceReportFactory.getConfiguration();\n            report = reports_list.getReport(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            Set<PrefabGraph> prefabGraphs = new HashSet<PrefabGraph>();\n            \n            for (int i = 0; i < report.getGraphCount(); i++) {\n                Graph graph = report.getGraph(i);\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));\n            }\n            \n            graph_options = prefabGraphs.toArray(new PrefabGraph[prefabGraphs.size()]);\n\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n\n            /*\n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n            */\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n\n            /*\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n            */\n        }\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        modelAndView.addObject(\"domain\", domain);\n        modelAndView.addObject(\"report\", r_index);\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n        modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        \n        return modelAndView;\n    }","commit_id":"14ddbb7710f2fb10447f458c738febb00e7e0baf","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable (Working) Graph \n        Graph graph = getKscReportFactory().getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (Integer.parseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            getKscReportFactory().unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, or Update\");\n        }\n    }","id":70088,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable (Working) Graph \n        Graph graph = getKscReportFactory().getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (Integer.parseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            getKscReportFactory().unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else if (action.equals(\"ChooseResource\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseResource.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, or ChooseResource\");\n        }\n    }","commit_id":"14ddbb7710f2fb10447f458c738febb00e7e0baf","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable Report \n        Report report = getKscReportFactory().getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = Integer.parseInt(g_index);\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            saveFactory();\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                getKscReportFactory().loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n            \n            if (!action.equals(\"AddGraph\")) {\n                Graph graph = getKscReportFactory().getWorkingGraph();\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            }\n            \n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, or Update\");\n        }\n    }","id":70089,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable Report \n        Report report = getKscReportFactory().getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = Integer.parseInt(g_index);\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            saveFactory();\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                getKscReportFactory().loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n        } else if (action.equals(\"ModGraph\")) {\n            Graph graph = getKscReportFactory().getWorkingGraph();\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n            return new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\", \"resourceId\", resource.getId());\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, AddGraph, or DelGraph\");\n        }\n    }","commit_id":"14ddbb7710f2fb10447f458c738febb00e7e0baf","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected OrientElement(final OrientBaseGraph rawGraph, final OIdentifiable iRawElement) {\n    if (classicDetachMode)\n      graph = rawGraph;\n    else\n      graph = null;\n\n    rawElement = iRawElement;\n\n    final OrientBaseGraph graph = getGraph();\n    if (graph != null)\n      settings = graph.settings;\n  }","id":70090,"modified_method":"protected OrientElement(final OrientBaseGraph rawGraph, final OIdentifiable iRawElement) {\n    if (classicDetachMode)\n      graph = rawGraph;\n    else\n      graph = null;\n\n    if (graph == null)\n      graph = getGraph();\n\n    if (graph != null)\n      settings = graph.settings;\n\n    rawElement = iRawElement;\n  }","commit_id":"6bf369d5790c516e1428cbe4acb73e052769223d","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphChooseParentResource\");\n\n        modelAndView.addObject(\"nodeResources\", getResourceService().findNodeResources());\n        modelAndView.addObject(\"domainResources\", getResourceService().findDomainResources());\n        \n        return modelAndView;\n    }","id":70091,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        /*\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphChooseParentResource\");\n\n        modelAndView.addObject(\"nodeResources\", getResourceService().findNodeResources());\n        modelAndView.addObject(\"domainResources\", getResourceService().findDomainResources());\n        \n        return modelAndView;\n        */\n        \n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphChooseResource\");\n\n        String selectedResourceId = request.getParameter(\"selectedResourceId\");\n        if (selectedResourceId != null) {\n            try {\n                OnmsResource selectedResource = m_resourceService.getResourceById(selectedResourceId);\n\n                Map<String, OnmsResource> selectedResourceAndParents = new HashMap<String, OnmsResource>();\n                OnmsResource r = selectedResource;\n                while (r != null) {\n                    selectedResourceAndParents.put(r.getId(), r);\n                    r = r.getParent();\n                }\n                \n                modelAndView.addObject(\"selectedResourceAndParents\", selectedResourceAndParents);\n            } catch (DataAccessException e) {\n                // Don't do anything\n            }\n        }\n\n        \n        /*\n        OnmsResource resource = getResourceService().getResourceById(resourceId);\n        modelAndView.addObject(\"parentResource\", resource);\n        \n        modelAndView.addObject(\"parentResourcePrefabGraphs\", m_resourceService.findPrefabGraphsForResource(resource));\n        */\n\n        //List<OnmsResource> childResources = getResourceService().findChildResources(resource);\n        List<OnmsResource> nodeResources = getResourceService().findNodeResources();\n        List<OnmsResource> domainResources = getResourceService().findDomainResources();\n        \n        List<OnmsResource> childResources = new ArrayList<OnmsResource>(nodeResources.size() + domainResources.size());\n        childResources.addAll(nodeResources);\n        childResources.addAll(domainResources);\n\n        modelAndView.addObject(\"resources\", childResources);\n        \n        return modelAndView;\n    }","commit_id":"307b0db7b867bc7f675a4a7ad8f02cc1b4267e9b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        OnmsResource resource = getResourceService().getResourceById(resourceId);\n\n//        List<Resource> childResources = getResourceService().findChildResources(resource, \"nodeSnmp\", \"interfaceSnmp\");\n        List<OnmsResource> childResources = getResourceService().findChildResources(resource);\n        return new ModelAndView(\"KSC/customGraphChooseResource\", \"resources\", childResources);\n    }","id":70092,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customGraphChooseResource\");\n\n        String resourceId = request.getParameter(\"resourceId\");\n        if (resourceId == null) {\n            throw new MissingParameterException(\"resourceId\");\n        }\n        \n        String selectedResourceId = request.getParameter(\"selectedResourceId\");\n        if (selectedResourceId != null) {\n            try {\n                OnmsResource selectedResource = m_resourceService.getResourceById(selectedResourceId);\n\n                Map<String, OnmsResource> selectedResourceAndParents = new HashMap<String, OnmsResource>();\n                OnmsResource r = selectedResource;\n                while (r != null) {\n                    selectedResourceAndParents.put(r.getId(), r);\n                    r = r.getParent();\n                }\n                \n                modelAndView.addObject(\"selectedResourceAndParents\", selectedResourceAndParents);\n            } catch (DataAccessException e) {\n                // Don't do anything\n            }\n        }\n        \n        OnmsResource resource = getResourceService().getResourceById(resourceId);\n        modelAndView.addObject(\"parentResource\", resource);\n        \n        modelAndView.addObject(\"parentResourcePrefabGraphs\", m_resourceService.findPrefabGraphsForResource(resource));\n\n        List<OnmsResource> childResources = getResourceService().findChildResources(resource);\n        modelAndView.addObject(\"resources\", childResources);\n        \n        return modelAndView;\n    }","commit_id":"307b0db7b867bc7f675a4a7ad8f02cc1b4267e9b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = Integer.parseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            ReportsList reports_list = KSC_PerformanceReportFactory.getConfiguration();\n            report = reports_list.getReport(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        Graph graph = null;\n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            graph = report.getGraph(0); // get the first graph in the list\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n      \n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n      \n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n        }\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        modelAndView.addObject(\"domain\", domain);\n        modelAndView.addObject(\"report\", r_index);\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n        modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        \n        return modelAndView;\n    }","id":70093,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String[] requiredParameters = new String[] { \"report or domain\", \"type\" };\n      \n        // Get Form Variable\n        String report_type = request.getParameter(\"type\");\n        if (report_type == null) {\n            throw new MissingParameterException(\"type\", requiredParameters);\n        }\n      \n        String r_index = request.getParameter(\"report\");\n        String domain = request.getParameter(\"domain\");\n        int report_index = 0;\n        if (r_index != null) {\n            report_index = Integer.parseInt(r_index);\n        } else if (domain == null) {\n            throw new MissingParameterException(\"report or domain\", requiredParameters);\n        }\n      \n        String override_timespan = request.getParameter(\"timespan\");\n        String override_graphtype = request.getParameter(\"graphtype\");\n        if ((override_timespan == null) || (override_timespan.equals(\"null\"))) {\n            override_timespan = \"none\";\n        }\n        if ((override_graphtype == null) || (override_graphtype.equals(\"null\"))) {\n            override_graphtype = \"none\";\n        }\n      \n        // Load report to view \n        Report report = null;\n        if (\"node\".equals(report_type)) {\n            report = getKscReportService().buildNodeReport(report_index);\n        } else if (\"domain\".equals(report_type)) {\n            report = getKscReportService().buildDomainReport(domain);\n        } else if (\"custom\".equals(report_type)) {\n            ReportsList reports_list = KSC_PerformanceReportFactory.getConfiguration();\n            report = reports_list.getReport(report_index);\n        } else {\n            throw new IllegalArgumentException(\"value to 'type' parameter of '\" + report_type + \"' is not supported.  Must be one of: node, domain, or custom\");\n        }\n      \n        if (report == null) {\n            throw new ServletException(\"Report does not exist\");\n        }\n      \n        // Define the possible graph options \n        PrefabGraph[] graph_options = new PrefabGraph[0];\n      \n        if (report.getGraphCount() > 0) {\n            Set<PrefabGraph> prefabGraphs = new HashSet<PrefabGraph>();\n            \n            for (int i = 0; i < report.getGraphCount(); i++) {\n                Graph graph = report.getGraph(i);\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));\n            }\n            \n            graph_options = prefabGraphs.toArray(new PrefabGraph[prefabGraphs.size()]);\n\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n\n            /*\n            if (\"custom\".equals(report_type) && \"node\".equals(resource.getResourceType().getName())) {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"nodeSnmp\", \"interfaceSnmp\");\n            } else {\n                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), \"interfaceSnmp\");\n            }\n            */\n      \n            // Get default graph type from first element of graph_options\n            if ((\"node\".equals(report_type) || \"domain\".equals(report_type))\n                    && \"none\".equals(override_graphtype)\n                    && graph_options.length > 0) {\n                override_graphtype = graph_options[0].getName();\n                if (log().isDebugEnabled()) {\n                    log().debug(\"custom_view: setting default graph type to \"\n                                + override_graphtype);\n                }\n            }\n\n            /*\n            if (graph_options.length > 1) {\n                Arrays.sort(graph_options);\n            }\n            */\n        }\n        \n        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());\n        for (int i = 0; i < report.getGraphCount(); i++) {\n            Graph current_graph = report.getGraph(i);\n            \n            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);\n\n            String display_graphtype = null;\n            if (\"none\".equals(override_graphtype)) {\n                display_graphtype = current_graph.getGraphtype();\n            } else {\n                display_graphtype = override_graphtype;\n            }\n            \n            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);\n            \n            // gather start/stop time information\n            String display_timespan = null;\n            if (\"none\".equals(override_timespan)) {\n                display_timespan = current_graph.getTimespan();\n            } else {\n                display_timespan = override_timespan;\n            }\n            Calendar begin_time = Calendar.getInstance();\n            Calendar end_time = Calendar.getInstance();\n            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);\n            \n            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);\n            resultSets.add(resultSet);\n        }\n\n        ModelAndView modelAndView = new ModelAndView(\"KSC/customView\");\n\n        modelAndView.addObject(\"reportType\", report_type);\n        modelAndView.addObject(\"domain\", domain);\n        modelAndView.addObject(\"report\", r_index);\n        \n        modelAndView.addObject(\"title\", report.getTitle());\n        modelAndView.addObject(\"resultSets\", resultSets);\n        \n        if (report.getShow_timespan_button()) {\n            if (\"none\".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {\n                modelAndView.addObject(\"timeSpan\", \"none\");\n            } else {\n                modelAndView.addObject(\"timeSpan\", override_timespan);\n            }\n            modelAndView.addObject(\"timeSpans\", getKscReportService().getTimeSpans(true));\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"timeSpan\", null);\n        }\n\n        if (report.getShow_graphtype_button()) {\n            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();\n            graphTypes.put(\"none\", \"none\");\n            for (PrefabGraph graph_option : graph_options) {\n                graphTypes.put(graph_option.getName(), graph_option.getName());\n            }\n            \n            if (\"none\".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {\n                modelAndView.addObject(\"graphType\", \"none\");\n            } else {\n                modelAndView.addObject(\"graphType\", override_graphtype);\n            }\n            modelAndView.addObject(\"graphTypes\", graphTypes);\n        } else {\n            // Make sure it's null so the pulldown list isn't shown\n            modelAndView.addObject(\"graphType\", null);\n        }\n        \n        modelAndView.addObject(\"showCustomizeButton\", !request.isUserInRole(Authentication.READONLY_ROLE));\n        modelAndView.addObject(\"graphsPerLine\", getDefaultGraphsPerLine());\n        \n        return modelAndView;\n    }","commit_id":"307b0db7b867bc7f675a4a7ad8f02cc1b4267e9b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable (Working) Graph \n        Graph graph = getKscReportFactory().getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (Integer.parseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            getKscReportFactory().unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, or Update\");\n        }\n    }","id":70094,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable (Working) Graph \n        Graph graph = getKscReportFactory().getWorkingGraph();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String timespan = request.getParameter(\"timespan\");\n        String graphtype = request.getParameter(\"graphtype\");\n        String title = request.getParameter(\"title\");\n        String g_index = request.getParameter(\"graphindex\");\n        int graph_index = (Integer.parseInt(g_index));\n        graph_index--; \n     \n        // Save the modified variables into the working graph \n        graph.setTitle(title);\n        graph.setTimespan(timespan);\n        graph.setGraphtype(graphtype);\n        \n        OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n\n        if (action.equals(\"Save\")) {\n            // The working graph is complete now... lets save working graph to working report \n            getKscReportFactory().unloadWorkingGraph(graph_index);\n        }\n        \n        if (action.equals(\"Save\") || action.equals(\"Cancel\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"Update\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"graphtype\", graph.getGraphtype());\n            return modelAndView;\n        } else if (action.equals(\"ChooseResource\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseResource.htm\");\n            modelAndView.addObject(\"resourceId\", resource.getId());\n            modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, or ChooseResource\");\n        }\n    }","commit_id":"307b0db7b867bc7f675a4a7ad8f02cc1b4267e9b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable Report \n        Report report = getKscReportFactory().getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = Integer.parseInt(g_index);\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            saveFactory();\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                getKscReportFactory().loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n            ModelAndView modelAndView = new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n            \n            if (!action.equals(\"AddGraph\")) {\n                Graph graph = getKscReportFactory().getWorkingGraph();\n                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n                modelAndView.addObject(\"selectedResourceId\", resource.getId());\n            }\n            \n            return modelAndView;\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, or Update\");\n        }\n    }","id":70095,"modified_method":"@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        // Get The Customizable Report \n        Report report = getKscReportFactory().getWorkingReport();\n\n        // Get Form Variables\n        String action = request.getParameter(\"action\");\n        String report_title = request.getParameter(\"report_title\");\n        String show_timespan = request.getParameter(\"show_timespan\");\n        String show_graphtype = request.getParameter(\"show_graphtype\");\n        String g_index = request.getParameter(\"graph_index\");\n        int graph_index = Integer.parseInt(g_index);\n     \n        // Save the global variables into the working report\n        report.setTitle(report_title);\n        if (show_graphtype == null) {\n            report.setShow_graphtype_button(false);\n        } else {\n            report.setShow_graphtype_button(true);\n        }\n        \n        if (show_timespan == null) {\n            report.setShow_timespan_button(false);\n        } else {\n            report.setShow_timespan_button(true);\n        } \n\n        if (action.equals(\"Save\")) {\n            // The working model is complete now... lets save working model to configuration file \n            saveFactory();\n        } else {\n            if (action.equals(\"AddGraph\") || action.equals(\"ModGraph\")) {\n                // Making a graph change... load it into the working area (the graph_index of -1 indicates a new graph)\n                getKscReportFactory().loadWorkingGraph(graph_index);\n            } else {\n                if (action.equals(\"DelGraph\")) { \n                    report.removeGraph(report.getGraph(graph_index));\n                } else {\n                    throw new ServletException(\"Invalid Argument for Customize Form Action.\");\n                }\n            }\n        }\n        \n        if (action.equals(\"Save\")) {\n            return new ModelAndView(\"redirect:/KSC/index.htm\");\n        } else if (action.equals(\"DelGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customReport.htm\");\n        } else if (action.equals(\"AddGraph\")) {\n            return new ModelAndView(\"redirect:/KSC/customGraphChooseParentResource.htm\");\n        } else if (action.equals(\"ModGraph\")) {\n            Graph graph = getKscReportFactory().getWorkingGraph();\n            OnmsResource resource = getKscReportService().getResourceFromGraph(graph);\n            return new ModelAndView(\"redirect:/KSC/customGraphEditDetails.htm\", \"resourceId\", resource.getId());\n        } else {\n            throw new IllegalArgumentException(\"parameter action of '\" + action + \"' is not supported.  Must be one of: Save, Cancel, Update, AddGraph, or DelGraph\");\n        }\n    }","commit_id":"307b0db7b867bc7f675a4a7ad8f02cc1b4267e9b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Set<VirtualFile> getIndexableRoots() {\n    final Set<VirtualFile> files = new HashSet<VirtualFile>();\n\n    myProject.getModelAccess().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        // We should iterate over all modules, visible inside this project including libraries & core modules.\n        // Not only those modules explicitly included into this project.\n        for (final SModule m : myProject.getRepository().getModules()) {\n          for (String path : getIndexablePaths(m)) {\n            VirtualFile file = VirtualFileUtils.getVirtualFile(path);\n            if (file == null) continue;\n            files.add(file);\n          }\n        }\n      }\n    });\n\n    return files;\n  }","id":70096,"modified_method":"/**\n   * We are iterating over all modules, visible inside this project including libraries & core modules.\n   * Thus we provide indices for libs.\n   * Must be gone when some kind of BootRepository is introduced\n   */\n  @Hack\n  @NotNull\n  public Set<VirtualFile> getIndexableRoots() {\n    Set<VirtualFile> indexableRoots = myRootsCache.get();\n    if (indexableRoots == null) {\n      indexableRoots = calcRoots();\n      myRootsCache.compareAndSet(null, indexableRoots);\n    }\n    return indexableRoots;\n  }","commit_id":"7a980dff2e3eb914ac771ad764c33b54ae77014f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public IndexableRootCalculator(@NotNull com.intellij.openapi.project.Project project) {\n    myProject = ProjectHelper.toMPSProject(project);\n  }","id":70097,"modified_method":"public IndexableRootCalculator(@NotNull com.intellij.openapi.project.Project project) {\n    myProject = ProjectHelper.fromIdeaProject(project);\n  }","commit_id":"7a980dff2e3eb914ac771ad764c33b54ae77014f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Collection<String> getIndexablePaths(@NotNull SModule module) {\n    // todo: maybe move getIndexablePaths method to FileBasedModelRoot, or even in ModelRoot classes?\n    Set<String> result = new TreeSet<String>();\n\n    for (ModelRoot modelRoot : module.getModelRoots()) {\n      if (modelRoot instanceof FileBasedModelRoot) {\n        FileBasedModelRoot fileBasedModelRoot = (FileBasedModelRoot) modelRoot;\n        String contentRoot = fileBasedModelRoot.getContentRoot();\n        if (contentRoot != null) {\n          result.add(exposePath(contentRoot));\n        }\n        // todo: use excluded & source folders like IDEA\n      }\n\n      if (modelRoot instanceof FolderModelRootBase) {\n        result.add(exposePath(((FolderModelRootBase) modelRoot).getPath()));\n      }\n    }\n\n    return result;\n  }","id":70098,"modified_method":"private static Collection<String> getIndexablePaths(@NotNull SModule module) {\n    // todo: maybe move getIndexablePaths method to FileBasedModelRoot, or even in ModelRoot classes?\n    Set<String> result = new HashSet<>();\n\n    for (ModelRoot modelRoot : module.getModelRoots()) {\n      if (modelRoot instanceof FileBasedModelRoot) {\n        FileBasedModelRoot fileBasedModelRoot = (FileBasedModelRoot) modelRoot;\n        String contentRoot = fileBasedModelRoot.getContentRoot();\n        if (contentRoot != null) {\n          result.add(exposePath(contentRoot));\n        }\n        // todo: use excluded & source folders like IDEA\n      }\n\n      if (modelRoot instanceof FolderModelRootBase) {\n        result.add(exposePath(((FolderModelRootBase) modelRoot).getPath()));\n      }\n    }\n\n    return result;\n  }","commit_id":"7a980dff2e3eb914ac771ad764c33b54ae77014f","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public boolean isInSet(VirtualFile file) {\n    if (IndexableRootCalculator.isIgnored(file, myRootManager)) return false;\n\n    for (VirtualFile vf : getRootFiles()) {\n      if (VfsUtil.isAncestor(vf, file, true)) return true;\n    }\n    return false;\n  }","id":70099,"modified_method":"@Override\n  public boolean isInSet(@NotNull VirtualFile file) {\n    if (!isIgnored(file, myRootManager)) {\n      for (VirtualFile vf : getIndexableRoots()) {\n        if (VfsUtil.isAncestor(vf, file, true)) { // fixme why 'true' is passed??\n          return true;\n        }\n      }\n    }\n    return false;\n  }","commit_id":"7a980dff2e3eb914ac771ad764c33b54ae77014f","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void iterateIndexableFilesIn_internal(VirtualFile file, ContentIterator iterator) {\n    if (IndexableRootCalculator.isIgnored(file, myRootManager)) return;\n\n    if (file.isDirectory()) {\n      for (VirtualFile child : file.getChildren()) {\n        iterateIndexableFilesIn_internal(child, iterator);\n      }\n    } else {\n      iterator.processFile(file);\n    }\n  }","id":70100,"modified_method":"private void iterateIndexableFilesIn_internal(VirtualFile file, ContentIterator iterator) {\n    if (!isIgnored(file, myRootManager)) {\n      if (file.isDirectory()) {\n        for (VirtualFile child : file.getChildren()) {\n          iterateIndexableFilesIn_internal(child, iterator);\n        }\n      } else {\n        iterator.processFile(file);\n      }\n    }\n  }","commit_id":"7a980dff2e3eb914ac771ad764c33b54ae77014f","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void disposeComponent() {\n    myProjectManager.addProjectManagerListener(myProject, myProjectListener);\n    ClassLoaderManager.getInstance().removeClassesHandler(myClassesListener);\n  }","id":70101,"modified_method":"@Override\n  public void disposeComponent() {\n    myIndexableRootCalculator.unregister();\n    myProjectManager.removeProjectManagerListener(myProject, myProjectListener);\n  }","commit_id":"7a980dff2e3eb914ac771ad764c33b54ae77014f","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void initComponent() {\n    ClassLoaderManager.getInstance().addClassesHandler(myClassesListener);\n    myProjectManager.addProjectManagerListener(myProject, myProjectListener);\n  }","id":70102,"modified_method":"@Override\n  public void initComponent() {\n    myProjectManager.addProjectManagerListener(myProject, myProjectListener);\n    myIndexableRootCalculator.register();\n  }","commit_id":"7a980dff2e3eb914ac771ad764c33b54ae77014f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public MPSIndexableFileSet(final Project project, final ProjectRootManagerEx rootManager, ProjectManager projectManager, FileBasedIndexImpl index,\n      StartupModuleMaker maker) {\n    super(project);\n    myRootManager = rootManager;\n    myProjectManager = projectManager;\n    myIndex = index;\n\n\n    final StartupManagerEx startupManager = (StartupManagerEx) StartupManager.getInstance(myProject);\n    if (startupManager == null) return;\n\n    startupManager.registerPreStartupActivity(new Runnable() {\n      @Override\n      public void run() {\n        myIndex.registerIndexableSet(MPSIndexableFileSet.this, myProject);\n        LOG.debug(\"Queueing cache update\");\n      }\n    });\n  }","id":70103,"modified_method":"public MPSIndexableFileSet(@NotNull final Project project,\n      final ProjectRootManagerEx rootManager,\n      ProjectManager projectManager,\n      FileBasedIndex index,\n      StartupModuleMaker maker) {\n    super(project);\n    myRootManager = rootManager;\n    myProjectManager = projectManager;\n    myIndex = index;\n    myIndexableRootCalculator = new IndexableRootCalculator(project);\n\n    final StartupManagerEx startupManager = (StartupManagerEx) StartupManager.getInstance(myProject);\n    if (startupManager != null) {\n      startupManager.registerPreStartupActivity(new Runnable() {\n        @Override\n        public void run() {\n          /**\n           * FIXME AP why to register like this if we could register just using MPSIndexableFileSetContributor???\n           */\n          myIndex.registerIndexableSet(MPSIndexableFileSet.this, myProject);\n          LOG.debug(\"Queueing cache update\");\n        }\n      });\n    }\n  }","commit_id":"7a980dff2e3eb914ac771ad764c33b54ae77014f","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  @Override\n  public Set<VirtualFile> getAdditionalProjectRootsToIndex(@Nullable Project project) {\n    return new IndexableRootCalculator(project).getIndexableRoots();\n  }","id":70104,"modified_method":"@NotNull\n  @Override\n  public Set<VirtualFile> getAdditionalProjectRootsToIndex(@NotNull Project project) {\n    MPSIndexableFileSet indexableFileSet = project.getComponent(MPSIndexableFileSet.class);\n    return indexableFileSet.getIndexableRoots();\n  }","commit_id":"7a980dff2e3eb914ac771ad764c33b54ae77014f","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public SegmentedRaftLog createRaftLog( FileSystemAbstraction fsa, File dir ) throws Throwable\n    {\n        SegmentedRaftLog raftLog = new SegmentedRaftLog( fsa, dir, 8 * 1024 * 1024, new DummyRaftableContentSerializer(), NullLogProvider.getInstance(), 8,\n                raft_log_pruning.getDefaultValue());\n        raftLog.start();\n        return raftLog;\n    }","id":70105,"modified_method":"@Override\n    public RaftLog createRaftLog( FileSystemAbstraction fsa, File dir ) throws Throwable\n    {\n        SegmentedRaftLog raftLog = new SegmentedRaftLog( fsa, dir, 8 * 1024 * 1024, new DummyRaftableContentSerializer(), NullLogProvider.getInstance(), 8,\n                raft_log_pruning.getDefaultValue());\n        raftLog.start();\n        return raftLog;\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected abstract T createRaftLog( FileSystemAbstraction fsa, File dir ) throws Throwable;","id":70106,"modified_method":"protected abstract RaftLog createRaftLog( FileSystemAbstraction fsa, File dir ) throws Throwable;","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void readAndWrite( int nReaders, int time, TimeUnit unit ) throws Throwable\n    {\n        DefaultFileSystemAbstraction fsa = new DefaultFileSystemAbstraction();\n        T raftLog = createRaftLog( fsa, dir.directory() );\n\n        try\n        {\n            ExecutorService es = Executors.newCachedThreadPool();\n\n            Collection<Future<Long>> futures = new ArrayList<>();\n\n            futures.add( es.submit( new TimedTask( () -> {\n                write( raftLog );\n            }, time, unit ) ) );\n\n            for ( int i = 0; i < nReaders; i++ )\n            {\n                futures.add( es.submit( new TimedTask( () -> {\n                    read( raftLog );\n                }, time, unit ) ) );\n            }\n\n            for ( Future<Long> f : futures )\n            {\n                long iterations = f.get();\n            }\n\n            es.shutdown();\n        }\n        finally\n        {\n            //noinspection ThrowFromFinallyBlock\n            raftLog.shutdown();\n        }\n    }","id":70107,"modified_method":"private void readAndWrite( int nReaders, int time, TimeUnit unit ) throws Throwable\n    {\n        DefaultFileSystemAbstraction fsa = new DefaultFileSystemAbstraction();\n        RaftLog raftLog = createRaftLog( fsa, dir.directory() );\n\n        ExecutorService es = Executors.newCachedThreadPool();\n\n        Collection<Future<Long>> futures = new ArrayList<>();\n\n        futures.add(\n                es.submit( new TimedTask( () -> {\n                    write( raftLog );\n                }, time, unit ) )\n        );\n\n        for ( int i = 0; i < nReaders; i++ )\n        {\n            futures.add(\n                    es.submit( new TimedTask( () -> {\n                        read( raftLog );\n                    }, time, unit ) )\n            );\n        }\n\n        for ( Future<Long> f : futures )\n        {\n            long iterations = f.get();\n        }\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private String stringForIndex( long index )\n    {\n        int len = ((int) index) % MAX_CONTENT_SIZE + 1;\n        StringBuilder str = new StringBuilder( len );\n\n        while ( len-- > 0 )\n        {\n            str.append( CHARS.charAt( len % CHARS.length() ) );\n        }\n\n        return str.toString();\n    }","id":70108,"modified_method":"private String stringForIndex( long index )\n    {\n        int len = ((int) index) % MAX_CONTENT_SIZE + 1;\n        StringBuilder str = new StringBuilder( len );\n\n        while ( len-- > 0 )\n        {\n            str.append( (char) len );\n        }\n\n        return str.toString();\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public LifecycledInMemoryRaftLog createRaftLog( FileSystemAbstraction fsa, File dir ) throws Throwable\n    {\n        return new LifecycledInMemoryRaftLog();\n    }","id":70109,"modified_method":"@Override\n    public RaftLog createRaftLog( FileSystemAbstraction fsa, File dir ) throws Throwable\n    {\n        return new InMemoryRaftLog();\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void init() throws IOException\n    {\n        // Make sure at least a bare bones log file is available before recovery\n        openLogChannelForVersion( logFiles.getHighestLogVersion() ).close();\n    }","id":70110,"modified_method":"@Override\n    public void init() throws IOException\n    {\n        // Make sure at least a bare bones log file is available before recovery\n        channel = openLogChannelForVersion( logFiles.getHighestLogVersion() );\n        channel.close();\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandler() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n\n            // when\n            segment.closeWriter();\n            segment.markForDisposal( onDisposeHandler );\n\n            // then\n            verify( onDisposeHandler ).run();\n        }\n    }","id":70111,"modified_method":"@Test\n    public void shouldCallDisposeHandler() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n\n        // when\n        segment.closeWriter();\n        segment.markForDisposal( onDisposeHandler );\n\n        // then\n        verify( onDisposeHandler ).run();\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandlerAfterLastReaderIsClosed() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n            IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n            IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n\n            // when\n            segment.closeWriter();\n            segment.markForDisposal( onDisposeHandler );\n            reader0.close();\n\n            // then\n            verify( onDisposeHandler, never() ).run();\n\n            // when\n            reader1.close();\n\n            // then\n            assertTrue( segment.isDisposed() );\n            verify( onDisposeHandler ).run();\n        }\n    }","id":70112,"modified_method":"@Test\n    public void shouldCallDisposeHandlerAfterLastReaderIsClosed() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n        IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n        IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n\n        // when\n        segment.closeWriter();\n        segment.markForDisposal( onDisposeHandler );\n        reader0.close();\n\n        // then\n        verify( onDisposeHandler, never() ).run();\n\n        // when\n        reader1.close();\n\n        // then\n        assertTrue( segment.isDisposed() );\n        verify( onDisposeHandler ).run();\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandlerAfterWriterIsClosed() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n            segment.write( 0, entry1 );\n\n            // when\n            segment.markForDisposal( onDisposeHandler );\n\n            // then\n            verify( onDisposeHandler, never() ).run();\n\n            // when\n            segment.closeWriter();\n\n            // then\n            assertTrue( segment.isDisposed() );\n            verify( onDisposeHandler ).run();\n        }\n    }","id":70113,"modified_method":"@Test\n    public void shouldCallDisposeHandlerAfterWriterIsClosed() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n        segment.write( 0, entry1 );\n\n        // when\n        segment.markForDisposal( onDisposeHandler );\n\n        // then\n        verify( onDisposeHandler, never() ).run();\n\n        // when\n        segment.closeWriter();\n\n        // then\n        assertTrue( segment.isDisposed() );\n        verify( onDisposeHandler ).run();\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandlerAfterBothReadersAndWriterAreClosed() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n            IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n            IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n            IOCursor<EntryRecord> reader2 = segment.getReader( 1 );\n\n            segment.write( 0, entry1 );\n\n            // when\n            segment.markForDisposal( onDisposeHandler );\n            reader0.close();\n            reader1.close();\n            segment.closeWriter();\n\n            // then\n            verify( onDisposeHandler, never() ).run();\n\n            // when\n            reader2.close();\n\n            // then\n            assertTrue( segment.isDisposed() );\n            verify( onDisposeHandler ).run();\n        }\n    }","id":70114,"modified_method":"@Test\n    public void shouldCallDisposeHandlerAfterBothReadersAndWriterAreClosed() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n        IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n        IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n        IOCursor<EntryRecord> reader2 = segment.getReader( 1 );\n\n        segment.write( 0, entry1 );\n\n        // when\n        segment.markForDisposal( onDisposeHandler );\n        reader0.close();\n        reader1.close();\n        segment.closeWriter();\n\n        // then\n        verify( onDisposeHandler, never() ).run();\n\n        // when\n        reader2.close();\n\n        // then\n        assertTrue( segment.isDisposed() );\n        verify( onDisposeHandler ).run();\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReportCorrectInitialValues() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            assertEquals( 0, segment.header().version() );\n            assertFalse( segment.isDisposed() );\n\n            IOCursor<EntryRecord> reader = segment.getReader( 0 );\n            assertFalse( reader.next() );\n        }\n    }","id":70115,"modified_method":"@Test\n    public void shouldReportCorrectInitialValues() throws Exception\n    {\n        assertEquals( 0, segment.header().version() );\n        assertFalse( segment.isDisposed() );\n\n        IOCursor<EntryRecord> reader = segment.getReader( 0 );\n        assertFalse( reader.next() );\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToRepeatedlyReadWrittenValues() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            segment.write( 0, entry1 );\n            segment.write( 1, entry2 );\n            segment.write( 2, entry3 );\n\n            for ( int i = 0; i < 3; i++ )\n            {\n                // when\n                IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n                // then\n                assertTrue( reader.next() );\n                assertEquals( entry1, reader.get().logEntry() );\n                assertTrue( reader.next() );\n                assertEquals( entry2, reader.get().logEntry() );\n                assertTrue( reader.next() );\n                assertEquals( entry3, reader.get().logEntry() );\n                assertFalse( reader.next() );\n\n                reader.close();\n            }\n        }\n    }","id":70116,"modified_method":"@Test\n    public void shouldBeAbleToRepeatedlyReadWrittenValues() throws Exception\n    {\n        // given\n        segment.write( 0, entry1 );\n        segment.write( 1, entry2 );\n        segment.write( 2, entry3 );\n\n        for ( int i = 0; i < 3; i++ )\n        {\n            // when\n            IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n            // then\n            assertTrue( reader.next() );\n            assertEquals( entry1, reader.get().logEntry() );\n            assertTrue( reader.next() );\n            assertEquals( entry2, reader.get().logEntry() );\n            assertTrue( reader.next() );\n            assertEquals( entry3, reader.get().logEntry() );\n            assertFalse( reader.next() );\n\n            reader.close();\n        }\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToWriteAndRead() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            segment.write( 0, entry1 );\n\n            // when\n            IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n            // then\n            assertTrue( reader.next() );\n            assertEquals( entry1, reader.get().logEntry() );\n        }\n    }","id":70117,"modified_method":"@Test\n    public void shouldBeAbleToWriteAndRead() throws Exception\n    {\n        // given\n        segment.write( 0, entry1 );\n\n        // when\n        IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n        // then\n        assertTrue( reader.next() );\n        assertEquals( entry1, reader.get().logEntry() );\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToReadFromOffset() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            segment.write( 0, entry1 );\n            segment.write( 1, entry2 );\n            segment.write( 2, entry3 );\n            segment.write( 3, entry4 );\n\n            // when\n            IOCursor<EntryRecord> reader = segment.getReader( 2 );\n\n            // then\n            assertTrue( reader.next() );\n            assertEquals( entry3, reader.get().logEntry() );\n        }\n    }","id":70118,"modified_method":"@Test\n    public void shouldBeAbleToReadFromOffset() throws Exception\n    {\n        // given\n        segment.write( 0, entry1 );\n        segment.write( 1, entry2 );\n        segment.write( 2, entry3 );\n        segment.write( 3, entry4 );\n\n        // when\n        IOCursor<EntryRecord> reader = segment.getReader( 2 );\n\n        // then\n        assertTrue( reader.next() );\n        assertEquals( entry3, reader.get().logEntry() );\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDeleteOnPrune() throws Exception\n    {\n        verifyZeroInteractions( fsa );\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            SegmentFile toPrune = segments.rotate( -1, -1, -1 ); // this is version 0 and will be deleted on prune later\n            segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n            segments.rotate( 10, 10, 2 );\n            segments.last().closeWriter(); // ditto\n            segments.rotate( 20, 20, 2 );\n\n            // When\n            segments.prune( 11 );\n\n            verify( fsa, times( segmentFiles.size() ) ).deleteFile( fileNames.getForVersion( toPrune.header().version() ) );\n        }\n    }","id":70119,"modified_method":"@Test\n    public void shouldDeleteOnPrune() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        SegmentFile toPrune = segments.rotate( -1, -1, -1 ); // this is version 0 and will be deleted on prune later\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 );\n        segments.last().closeWriter(); // ditto\n        segments.rotate( 20, 20, 2 );\n\n        // When\n        segments.prune( 11 );\n\n        verify( fsa, times( 1 ) ).deleteFile( fileNames.getForVersion( toPrune.header().version() ) );\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldNeverDeleteOnTruncate() throws Exception\n    {\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            segments.rotate( -1, -1, -1 );\n            segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n            segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n            segments.last().closeWriter();\n\n            // When\n            segments.truncate( 20, 9, 4 );\n\n            // Then\n            verify( fsa, times( 0 ) ).deleteFile( any() );\n        }\n    }","id":70120,"modified_method":"@Test\n    public void shouldNeverDeleteOnTruncate() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        // When\n        segments.truncate( 20, 9, 4 );\n\n        // Then\n        verify( fsa, times( 0 ) ).deleteFile( any() );\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateNext() throws Exception\n    {\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            // When\n            segments.rotate( 10, 10, 12 );\n            segments.last().closeWriter();\n            SegmentFile last = segments.last();\n\n            // Then\n            assertEquals( 10, last.header().prevFileLastIndex() );\n            assertEquals( 10, last.header().prevIndex() );\n            assertEquals( 12, last.header().prevTerm() );\n        }\n    }","id":70121,"modified_method":"@Test\n    public void shouldCreateNext() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        FileNames fileNames = mock( FileNames.class );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        // When\n        segments.rotate( 10, 10, 12 );\n        segments.last().closeWriter();\n        SegmentFile last = segments.last();\n\n        // Then\n        assertEquals( 10, last.header().prevFileLastIndex() );\n        assertEquals( 10, last.header().prevIndex() );\n        assertEquals( 12, last.header().prevTerm() );\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAllowOutOfBoundsPruneIndex() throws Exception\n    {\n        //Given a prune index of n, if the smallest value for a segment file is n+c, the pruning should not remove\n        // any files and not result in a failure.\n        Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 );\n\n        segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        segments.prune( 11 );\n\n        segments.rotate( 20, 20, 3 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        //when\n        SegmentFile oldestNotDisposed = segments.prune( -1 );\n\n        //then\n        SegmentHeader header = oldestNotDisposed.header();\n        assertEquals( 10, header.prevFileLastIndex() );\n        assertEquals( 10, header.prevIndex() );\n        assertEquals( 2, header.prevTerm() );\n    }","id":70122,"modified_method":"@Test\n    public void shouldAllowOutOfBoundsPruneIndex() throws Exception\n    {\n        //Given a prune index of n, if the smallest value for a segment file is n+c, the pruning should not remove\n        // any files and not result in a failure.\n\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        segments.prune( 11 );\n\n        segments.rotate( 20, 20, 3 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        //when\n        SegmentFile oldestNotDisposed = segments.prune( -1 );\n\n        //then\n        SegmentHeader header = oldestNotDisposed.header();\n        assertEquals( 10, header.prevFileLastIndex() );\n        assertEquals( 10, header.prevIndex() );\n        assertEquals( 2, header.prevTerm() );\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDeleteTruncatedFilesOnPrune() throws Exception\n    {\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            SegmentFile toBePruned = segments.rotate( -1, -1, -1 );\n            segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n            SegmentFile toBeTruncated = segments.rotate( 10, 10, 2 );// we will truncate this whole file away\n            segments.last().closeWriter();\n\n            // When\n            // We truncate a whole file\n            segments.truncate( 20, 9, 4 );\n            // And we prune all files before that file\n            segments.prune( 10 );\n\n            // Then\n            // the truncate file is part of the deletes that happen while prunning\n            verify( fsa, times( segmentFiles.size() ) ).deleteFile(\n                    fileNames.getForVersion( toBePruned.header().version() ) );\n            verify( fsa, times( segmentFiles.size() ) ).deleteFile(\n                    fileNames.getForVersion( toBeTruncated.header().version() ) );\n        }\n    }","id":70123,"modified_method":"@Test\n    public void shouldDeleteTruncatedFilesOnPrune() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        SegmentFile toBePruned = segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        SegmentFile toBeTruncated = segments.rotate( 10, 10, 2 );// we will truncate this whole file away\n        segments.last().closeWriter();\n\n        // When\n        // We truncate a whole file\n        segments.truncate( 20, 9, 4 );\n        // And we prune all files before that file\n        segments.prune( 10 );\n\n        // Then\n        // the truncate file is part of the deletes that happen while prunning\n        verify( fsa, times( 1 ) ).deleteFile( fileNames.getForVersion( toBePruned.header().version() ) );\n        verify( fsa, times( 1 ) ).deleteFile( fileNames.getForVersion( toBeTruncated.header().version() ) );\n    }","commit_id":"dd8bb6ea6226fafbec0c0a1fd07f07bb6cfb097f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void init() throws IOException\n    {\n        // Make sure at least a bare bones log file is available before recovery\n        channel = openLogChannelForVersion( logFiles.getHighestLogVersion() );\n        channel.close();\n    }","id":70124,"modified_method":"@Override\n    public void init() throws IOException\n    {\n        // Make sure at least a bare bones log file is available before recovery\n        openLogChannelForVersion( logFiles.getHighestLogVersion() ).close();\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToReadFromOffset() throws Exception\n    {\n        // given\n        segment.write( 0, entry1 );\n        segment.write( 1, entry2 );\n        segment.write( 2, entry3 );\n        segment.write( 3, entry4 );\n\n        // when\n        IOCursor<EntryRecord> reader = segment.getReader( 2 );\n\n        // then\n        assertTrue( reader.next() );\n        assertEquals( entry3, reader.get().logEntry() );\n    }","id":70125,"modified_method":"@Test\n    public void shouldBeAbleToReadFromOffset() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            segment.write( 0, entry1 );\n            segment.write( 1, entry2 );\n            segment.write( 2, entry3 );\n            segment.write( 3, entry4 );\n\n            // when\n            IOCursor<EntryRecord> reader = segment.getReader( 2 );\n\n            // then\n            assertTrue( reader.next() );\n            assertEquals( entry3, reader.get().logEntry() );\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReportCorrectInitialValues() throws Exception\n    {\n        assertEquals( 0, segment.header().version() );\n        assertFalse( segment.isDisposed() );\n\n        IOCursor<EntryRecord> reader = segment.getReader( 0 );\n        assertFalse( reader.next() );\n    }","id":70126,"modified_method":"@Test\n    public void shouldReportCorrectInitialValues() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            assertEquals( 0, segment.header().version() );\n            assertFalse( segment.isDisposed() );\n\n            IOCursor<EntryRecord> reader = segment.getReader( 0 );\n            assertFalse( reader.next() );\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandler() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n\n        // when\n        segment.closeWriter();\n        segment.markForDisposal( onDisposeHandler );\n\n        // then\n        verify( onDisposeHandler ).run();\n    }","id":70127,"modified_method":"@Test\n    public void shouldCallDisposeHandler() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n\n            // when\n            segment.closeWriter();\n            segment.markForDisposal( onDisposeHandler );\n\n            // then\n            verify( onDisposeHandler ).run();\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandlerAfterBothReadersAndWriterAreClosed() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n        IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n        IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n        IOCursor<EntryRecord> reader2 = segment.getReader( 1 );\n\n        segment.write( 0, entry1 );\n\n        // when\n        segment.markForDisposal( onDisposeHandler );\n        reader0.close();\n        reader1.close();\n        segment.closeWriter();\n\n        // then\n        verify( onDisposeHandler, never() ).run();\n\n        // when\n        reader2.close();\n\n        // then\n        assertTrue( segment.isDisposed() );\n        verify( onDisposeHandler ).run();\n    }","id":70128,"modified_method":"@Test\n    public void shouldCallDisposeHandlerAfterBothReadersAndWriterAreClosed() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n            IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n            IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n            IOCursor<EntryRecord> reader2 = segment.getReader( 1 );\n\n            segment.write( 0, entry1 );\n\n            // when\n            segment.markForDisposal( onDisposeHandler );\n            reader0.close();\n            reader1.close();\n            segment.closeWriter();\n\n            // then\n            verify( onDisposeHandler, never() ).run();\n\n            // when\n            reader2.close();\n\n            // then\n            assertTrue( segment.isDisposed() );\n            verify( onDisposeHandler ).run();\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToRepeatedlyReadWrittenValues() throws Exception\n    {\n        // given\n        segment.write( 0, entry1 );\n        segment.write( 1, entry2 );\n        segment.write( 2, entry3 );\n\n        for ( int i = 0; i < 3; i++ )\n        {\n            // when\n            IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n            // then\n            assertTrue( reader.next() );\n            assertEquals( entry1, reader.get().logEntry() );\n            assertTrue( reader.next() );\n            assertEquals( entry2, reader.get().logEntry() );\n            assertTrue( reader.next() );\n            assertEquals( entry3, reader.get().logEntry() );\n            assertFalse( reader.next() );\n\n            reader.close();\n        }\n    }","id":70129,"modified_method":"@Test\n    public void shouldBeAbleToRepeatedlyReadWrittenValues() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            segment.write( 0, entry1 );\n            segment.write( 1, entry2 );\n            segment.write( 2, entry3 );\n\n            for ( int i = 0; i < 3; i++ )\n            {\n                // when\n                IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n                // then\n                assertTrue( reader.next() );\n                assertEquals( entry1, reader.get().logEntry() );\n                assertTrue( reader.next() );\n                assertEquals( entry2, reader.get().logEntry() );\n                assertTrue( reader.next() );\n                assertEquals( entry3, reader.get().logEntry() );\n                assertFalse( reader.next() );\n\n                reader.close();\n            }\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToWriteAndRead() throws Exception\n    {\n        // given\n        segment.write( 0, entry1 );\n\n        // when\n        IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n        // then\n        assertTrue( reader.next() );\n        assertEquals( entry1, reader.get().logEntry() );\n    }","id":70130,"modified_method":"@Test\n    public void shouldBeAbleToWriteAndRead() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            segment.write( 0, entry1 );\n\n            // when\n            IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n            // then\n            assertTrue( reader.next() );\n            assertEquals( entry1, reader.get().logEntry() );\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandlerAfterLastReaderIsClosed() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n        IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n        IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n\n        // when\n        segment.closeWriter();\n        segment.markForDisposal( onDisposeHandler );\n        reader0.close();\n\n        // then\n        verify( onDisposeHandler, never() ).run();\n\n        // when\n        reader1.close();\n\n        // then\n        assertTrue( segment.isDisposed() );\n        verify( onDisposeHandler ).run();\n    }","id":70131,"modified_method":"@Test\n    public void shouldCallDisposeHandlerAfterLastReaderIsClosed() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n            IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n            IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n\n            // when\n            segment.closeWriter();\n            segment.markForDisposal( onDisposeHandler );\n            reader0.close();\n\n            // then\n            verify( onDisposeHandler, never() ).run();\n\n            // when\n            reader1.close();\n\n            // then\n            assertTrue( segment.isDisposed() );\n            verify( onDisposeHandler ).run();\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandlerAfterWriterIsClosed() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n        segment.write( 0, entry1 );\n\n        // when\n        segment.markForDisposal( onDisposeHandler );\n\n        // then\n        verify( onDisposeHandler, never() ).run();\n\n        // when\n        segment.closeWriter();\n\n        // then\n        assertTrue( segment.isDisposed() );\n        verify( onDisposeHandler ).run();\n    }","id":70132,"modified_method":"@Test\n    public void shouldCallDisposeHandlerAfterWriterIsClosed() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), rafLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n            segment.write( 0, entry1 );\n\n            // when\n            segment.markForDisposal( onDisposeHandler );\n\n            // then\n            verify( onDisposeHandler, never() ).run();\n\n            // when\n            segment.closeWriter();\n\n            // then\n            assertTrue( segment.isDisposed() );\n            verify( onDisposeHandler ).run();\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAllowOutOfBoundsPruneIndex() throws Exception\n    {\n        //Given a prune index of n, if the smallest value for a segment file is n+c, the pruning should not remove\n        // any files and not result in a failure.\n\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        segments.prune( 11 );\n\n        segments.rotate( 20, 20, 3 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        //when\n        SegmentFile oldestNotDisposed = segments.prune( -1 );\n\n        //then\n        SegmentHeader header = oldestNotDisposed.header();\n        assertEquals( 10, header.prevFileLastIndex() );\n        assertEquals( 10, header.prevIndex() );\n        assertEquals( 2, header.prevTerm() );\n    }","id":70133,"modified_method":"@Test\n    public void shouldAllowOutOfBoundsPruneIndex() throws Exception\n    {\n        //Given a prune index of n, if the smallest value for a segment file is n+c, the pruning should not remove\n        // any files and not result in a failure.\n        Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 );\n\n        segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        segments.prune( 11 );\n\n        segments.rotate( 20, 20, 3 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        //when\n        SegmentFile oldestNotDisposed = segments.prune( -1 );\n\n        //then\n        SegmentHeader header = oldestNotDisposed.header();\n        assertEquals( 10, header.prevFileLastIndex() );\n        assertEquals( 10, header.prevIndex() );\n        assertEquals( 2, header.prevTerm() );\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateNext() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        FileNames fileNames = mock( FileNames.class );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        // When\n        segments.rotate( 10, 10, 12 );\n        segments.last().closeWriter();\n        SegmentFile last = segments.last();\n\n        // Then\n        assertEquals( 10, last.header().prevFileLastIndex() );\n        assertEquals( 10, last.header().prevIndex() );\n        assertEquals( 12, last.header().prevTerm() );\n    }","id":70134,"modified_method":"@Test\n    public void shouldCreateNext() throws Exception\n    {\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            // When\n            segments.rotate( 10, 10, 12 );\n            segments.last().closeWriter();\n            SegmentFile last = segments.last();\n\n            // Then\n            assertEquals( 10, last.header().prevFileLastIndex() );\n            assertEquals( 10, last.header().prevIndex() );\n            assertEquals( 12, last.header().prevTerm() );\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDeleteOnPrune() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        SegmentFile toPrune = segments.rotate( -1, -1, -1 ); // this is version 0 and will be deleted on prune later\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 );\n        segments.last().closeWriter(); // ditto\n        segments.rotate( 20, 20, 2 );\n\n        // When\n        segments.prune( 11 );\n\n        verify( fsa, times( 1 ) ).deleteFile( fileNames.getForVersion( toPrune.header().version() ) );\n    }","id":70135,"modified_method":"@Test\n    public void shouldDeleteOnPrune() throws Exception\n    {\n        verifyZeroInteractions( fsa );\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            SegmentFile toPrune = segments.rotate( -1, -1, -1 ); // this is version 0 and will be deleted on prune later\n            segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n            segments.rotate( 10, 10, 2 );\n            segments.last().closeWriter(); // ditto\n            segments.rotate( 20, 20, 2 );\n\n            // When\n            segments.prune( 11 );\n\n            verify( fsa, times( segmentFiles.size() ) ).deleteFile( fileNames.getForVersion( toPrune.header().version() ) );\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldNeverDeleteOnTruncate() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        // When\n        segments.truncate( 20, 9, 4 );\n\n        // Then\n        verify( fsa, times( 0 ) ).deleteFile( any() );\n    }","id":70136,"modified_method":"@Test\n    public void shouldNeverDeleteOnTruncate() throws Exception\n    {\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            segments.rotate( -1, -1, -1 );\n            segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n            segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n            segments.last().closeWriter();\n\n            // When\n            segments.truncate( 20, 9, 4 );\n\n            // Then\n            verify( fsa, times( 0 ) ).deleteFile( any() );\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDeleteTruncatedFilesOnPrune() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        SegmentFile toBePruned = segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        SegmentFile toBeTruncated = segments.rotate( 10, 10, 2 );// we will truncate this whole file away\n        segments.last().closeWriter();\n\n        // When\n        // We truncate a whole file\n        segments.truncate( 20, 9, 4 );\n        // And we prune all files before that file\n        segments.prune( 10 );\n\n        // Then\n        // the truncate file is part of the deletes that happen while prunning\n        verify( fsa, times( 1 ) ).deleteFile( fileNames.getForVersion( toBePruned.header().version() ) );\n        verify( fsa, times( 1 ) ).deleteFile( fileNames.getForVersion( toBeTruncated.header().version() ) );\n    }","id":70137,"modified_method":"@Test\n    public void shouldDeleteTruncatedFilesOnPrune() throws Exception\n    {\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            SegmentFile toBePruned = segments.rotate( -1, -1, -1 );\n            segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n            SegmentFile toBeTruncated = segments.rotate( 10, 10, 2 );// we will truncate this whole file away\n            segments.last().closeWriter();\n\n            // When\n            // We truncate a whole file\n            segments.truncate( 20, 9, 4 );\n            // And we prune all files before that file\n            segments.prune( 10 );\n\n            // Then\n            // the truncate file is part of the deletes that happen while prunning\n            verify( fsa, times( segmentFiles.size() ) ).deleteFile(\n                    fileNames.getForVersion( toBePruned.header().version() ) );\n            verify( fsa, times( segmentFiles.size() ) ).deleteFile(\n                    fileNames.getForVersion( toBeTruncated.header().version() ) );\n        }\n    }","commit_id":"900fb39969ab37047fe67b4dddb10f8facbf4c03","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void init() throws IOException\n    {\n        // Make sure at least a bare bones log file is available before recovery\n        channel = openLogChannelForVersion( logFiles.getHighestLogVersion() );\n        channel.close();\n    }","id":70138,"modified_method":"@Override\n    public void init() throws IOException\n    {\n        // Make sure at least a bare bones log file is available before recovery\n        openLogChannelForVersion( logFiles.getHighestLogVersion() ).close();\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"private PhysicalFlushableChannel getOrCreateWriter() throws IOException\n    {\n        if ( bufferedWriter == null )\n        {\n            StoreChannel channel = fileSystem.open( file, \"rw\" );\n            channel.position( channel.size() );\n            bufferedWriter = new PhysicalFlushableChannel( channel );\n        }\n        return bufferedWriter;\n    }","id":70139,"modified_method":"private PhysicalFlushableChannel getOrCreateWriter() throws IOException\n    {\n        if ( closed )\n        {\n            throw new RuntimeException( format( CLOSED_ERROR_MESSAGE, file ) );\n        }\n\n        if ( bufferedWriter == null )\n        {\n            StoreChannel channel = fileSystem.open( file, \"rw\" );\n            channel.position( channel.size() );\n            bufferedWriter = new PhysicalFlushableChannel( channel );\n        }\n        return bufferedWriter;\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"private synchronized void checkFullDisposal()\n    {\n        if ( bufferedWriter == null && readerPool.isDisposed() )\n        {\n            isDisposed = true;\n            onDisposal.run();\n        }\n    }","id":70140,"modified_method":"private synchronized void checkFullDisposal()\n    {\n        if ( markedForDisposal && bufferedWriter == null && readerPool.isDisposed() )\n        {\n            isDisposed = true;\n            onDisposal.run();\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToWriteAndRead() throws Exception\n    {\n        // given\n        segment.write( 0, entry1 );\n\n        // when\n        IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n        // then\n        assertTrue( reader.next() );\n        assertEquals( entry1, reader.get().logEntry() );\n    }","id":70141,"modified_method":"@Test\n    public void shouldBeAbleToWriteAndRead() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), raftLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            segment.write( 0, entry1 );\n\n            // when\n            IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n            // then\n            assertTrue( reader.next() );\n            assertEquals( entry1, reader.get().logEntry() );\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReportCorrectInitialValues() throws Exception\n    {\n        assertEquals( 0, segment.header().version() );\n        assertFalse( segment.isDisposed() );\n\n        IOCursor<EntryRecord> reader = segment.getReader( 0 );\n        assertFalse( reader.next() );\n    }","id":70142,"modified_method":"@Test\n    public void shouldReportCorrectInitialValues() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), raftLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            assertEquals( 0, segment.header().version() );\n            assertFalse( segment.isDisposed() );\n\n            IOCursor<EntryRecord> reader = segment.getReader( 0 );\n            assertFalse( reader.next() );\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToRepeatedlyReadWrittenValues() throws Exception\n    {\n        // given\n        segment.write( 0, entry1 );\n        segment.write( 1, entry2 );\n        segment.write( 2, entry3 );\n\n        for ( int i = 0; i < 3; i++ )\n        {\n            // when\n            IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n            // then\n            assertTrue( reader.next() );\n            assertEquals( entry1, reader.get().logEntry() );\n            assertTrue( reader.next() );\n            assertEquals( entry2, reader.get().logEntry() );\n            assertTrue( reader.next() );\n            assertEquals( entry3, reader.get().logEntry() );\n            assertFalse( reader.next() );\n\n            reader.close();\n        }\n    }","id":70143,"modified_method":"@Test\n    public void shouldBeAbleToRepeatedlyReadWrittenValues() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), raftLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            segment.write( 0, entry1 );\n            segment.write( 1, entry2 );\n            segment.write( 2, entry3 );\n\n            for ( int i = 0; i < 3; i++ )\n            {\n                // when\n                IOCursor<EntryRecord> reader = segment.getReader( 0 );\n\n                // then\n                assertTrue( reader.next() );\n                assertEquals( entry1, reader.get().logEntry() );\n                assertTrue( reader.next() );\n                assertEquals( entry2, reader.get().logEntry() );\n                assertTrue( reader.next() );\n                assertEquals( entry3, reader.get().logEntry() );\n                assertFalse( reader.next() );\n\n                reader.close();\n            }\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandlerAfterWriterIsClosed() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n        segment.write( 0, entry1 );\n\n        // when\n        segment.markForDisposal( onDisposeHandler );\n\n        // then\n        verify( onDisposeHandler, never() ).run();\n\n        // when\n        segment.closeWriter();\n\n        // then\n        assertTrue( segment.isDisposed() );\n        verify( onDisposeHandler ).run();\n    }","id":70144,"modified_method":"@Test\n    public void shouldCallDisposeHandlerAfterWriterIsClosed() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), raftLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n            segment.write( 0, entry1 );\n\n            // when\n            segment.markForDisposal( onDisposeHandler );\n\n            // then\n            verify( onDisposeHandler, never() ).run();\n\n            // when\n            segment.closeWriter();\n\n            // then\n            assertTrue( segment.isDisposed() );\n            verify( onDisposeHandler ).run();\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandlerAfterBothReadersAndWriterAreClosed() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n        IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n        IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n        IOCursor<EntryRecord> reader2 = segment.getReader( 1 );\n\n        segment.write( 0, entry1 );\n\n        // when\n        segment.markForDisposal( onDisposeHandler );\n        reader0.close();\n        reader1.close();\n        segment.closeWriter();\n\n        // then\n        verify( onDisposeHandler, never() ).run();\n\n        // when\n        reader2.close();\n\n        // then\n        assertTrue( segment.isDisposed() );\n        verify( onDisposeHandler ).run();\n    }","id":70145,"modified_method":"@Test\n    public void shouldCallDisposeHandlerAfterBothReadersAndWriterAreClosed() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), raftLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n            IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n            IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n            IOCursor<EntryRecord> reader2 = segment.getReader( 1 );\n\n            segment.write( 0, entry1 );\n\n            // when\n            segment.markForDisposal( onDisposeHandler );\n            reader0.close();\n            reader1.close();\n            segment.closeWriter();\n\n            // then\n            verify( onDisposeHandler, never() ).run();\n\n            // when\n            reader2.close();\n\n            // then\n            assertTrue( segment.isDisposed() );\n            verify( onDisposeHandler ).run();\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandler() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n\n        // when\n        segment.closeWriter();\n        segment.markForDisposal( onDisposeHandler );\n\n        // then\n        verify( onDisposeHandler ).run();\n    }","id":70146,"modified_method":"@Test\n    public void shouldCallDisposeHandler() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), raftLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n\n            // when\n            segment.closeWriter();\n            segment.markForDisposal( onDisposeHandler );\n\n            // then\n            verify( onDisposeHandler ).run();\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCallDisposeHandlerAfterLastReaderIsClosed() throws Exception\n    {\n        // given\n        Runnable onDisposeHandler = mock( Runnable.class );\n        IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n        IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n\n        // when\n        segment.closeWriter();\n        segment.markForDisposal( onDisposeHandler );\n        reader0.close();\n\n        // then\n        verify( onDisposeHandler, never() ).run();\n\n        // when\n        reader1.close();\n\n        // then\n        assertTrue( segment.isDisposed() );\n        verify( onDisposeHandler ).run();\n    }","id":70147,"modified_method":"@Test\n    public void shouldCallDisposeHandlerAfterLastReaderIsClosed() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), raftLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            Runnable onDisposeHandler = mock( Runnable.class );\n            IOCursor<EntryRecord> reader0 = segment.getReader( 0 );\n            IOCursor<EntryRecord> reader1 = segment.getReader( 1 );\n\n            // when\n            segment.closeWriter();\n            segment.markForDisposal( onDisposeHandler );\n            reader0.close();\n\n            // then\n            verify( onDisposeHandler, never() ).run();\n\n            // when\n            reader1.close();\n\n            // then\n            assertTrue( segment.isDisposed() );\n            verify( onDisposeHandler ).run();\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToReadFromOffset() throws Exception\n    {\n        // given\n        segment.write( 0, entry1 );\n        segment.write( 1, entry2 );\n        segment.write( 2, entry3 );\n        segment.write( 3, entry4 );\n\n        // when\n        IOCursor<EntryRecord> reader = segment.getReader( 2 );\n\n        // then\n        assertTrue( reader.next() );\n        assertEquals( entry3, reader.get().logEntry() );\n    }","id":70148,"modified_method":"@Test\n    public void shouldBeAbleToReadFromOffset() throws Exception\n    {\n        try ( SegmentFile segment = create( fsRule.get(), raftLogFile, contentMarshal, logProvider, segmentHeader ) )\n        {\n            // given\n            segment.write( 0, entry1 );\n            segment.write( 1, entry2 );\n            segment.write( 2, entry3 );\n            segment.write( 3, entry4 );\n\n            // when\n            IOCursor<EntryRecord> reader = segment.getReader( 2 );\n\n            // then\n            assertTrue( reader.next() );\n            assertEquals( entry3, reader.get().logEntry() );\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAllowOutOfBoundsPruneIndex() throws Exception\n    {\n        //Given a prune index of n, if the smallest value for a segment file is n+c, the pruning should not remove\n        // any files and not result in a failure.\n\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        segments.prune( 11 );\n\n        segments.rotate( 20, 20, 3 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        //when\n        SegmentFile oldestNotDisposed = segments.prune( -1 );\n\n        //then\n        SegmentHeader header = oldestNotDisposed.header();\n        assertEquals( 10, header.prevFileLastIndex() );\n        assertEquals( 10, header.prevIndex() );\n        assertEquals( 2, header.prevTerm() );\n    }","id":70149,"modified_method":"@Test\n    public void shouldAllowOutOfBoundsPruneIndex() throws Exception\n    {\n        //Given a prune index of n, if the smallest value for a segment file is n+c, the pruning should not remove\n        // any files and not result in a failure.\n        Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 );\n\n        segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        segments.prune( 11 );\n\n        segments.rotate( 20, 20, 3 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        //when\n        SegmentFile oldestNotDisposed = segments.prune( -1 );\n\n        //then\n        SegmentHeader header = oldestNotDisposed.header();\n        assertEquals( 10, header.prevFileLastIndex() );\n        assertEquals( 10, header.prevIndex() );\n        assertEquals( 2, header.prevTerm() );\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDeleteOnPrune() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        SegmentFile toPrune = segments.rotate( -1, -1, -1 ); // this is version 0 and will be deleted on prune later\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 );\n        segments.last().closeWriter(); // ditto\n        segments.rotate( 20, 20, 2 );\n\n        // When\n        segments.prune( 11 );\n\n        verify( fsa, times( 1 ) ).deleteFile( fileNames.getForVersion( toPrune.header().version() ) );\n    }","id":70150,"modified_method":"@Test\n    public void shouldDeleteOnPrune() throws Exception\n    {\n        verifyZeroInteractions( fsa );\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            SegmentFile toPrune = segments.rotate( -1, -1, -1 ); // this is version 0 and will be deleted on prune later\n            segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n            segments.rotate( 10, 10, 2 );\n            segments.last().closeWriter(); // ditto\n            segments.rotate( 20, 20, 2 );\n\n            // When\n            segments.prune( 11 );\n\n            verify( fsa, times( segmentFiles.size() ) ).deleteFile( fileNames.getForVersion( toPrune.header().version() ) );\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldNeverDeleteOnTruncate() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n        segments.last().closeWriter();\n\n        // When\n        segments.truncate( 20, 9, 4 );\n\n        // Then\n        verify( fsa, times( 0 ) ).deleteFile( any() );\n    }","id":70151,"modified_method":"@Test\n    public void shouldNeverDeleteOnTruncate() throws Exception\n    {\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            segments.rotate( -1, -1, -1 );\n            segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n            segments.rotate( 10, 10, 2 ); // we will truncate this whole file away\n            segments.last().closeWriter();\n\n            // When\n            segments.truncate( 20, 9, 4 );\n\n            // Then\n            verify( fsa, times( 0 ) ).deleteFile( any() );\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDeleteTruncatedFilesOnPrune() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        File baseDirectory = new File( \".\" );\n        FileNames fileNames = new FileNames( baseDirectory );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        SegmentFile toBePruned = segments.rotate( -1, -1, -1 );\n        segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n        SegmentFile toBeTruncated = segments.rotate( 10, 10, 2 );// we will truncate this whole file away\n        segments.last().closeWriter();\n\n        // When\n        // We truncate a whole file\n        segments.truncate( 20, 9, 4 );\n        // And we prune all files before that file\n        segments.prune( 10 );\n\n        // Then\n        // the truncate file is part of the deletes that happen while prunning\n        verify( fsa, times( 1 ) ).deleteFile( fileNames.getForVersion( toBePruned.header().version() ) );\n        verify( fsa, times( 1 ) ).deleteFile( fileNames.getForVersion( toBeTruncated.header().version() ) );\n    }","id":70152,"modified_method":"@Test\n    public void shouldDeleteTruncatedFilesOnPrune() throws Exception\n    {\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            SegmentFile toBePruned = segments.rotate( -1, -1, -1 );\n            segments.last().closeWriter(); // need to close writer otherwise dispose will not be called\n            SegmentFile toBeTruncated = segments.rotate( 10, 10, 2 );// we will truncate this whole file away\n            segments.last().closeWriter();\n\n            // When\n            // We truncate a whole file\n            segments.truncate( 20, 9, 4 );\n            // And we prune all files before that file\n            segments.prune( 10 );\n\n            // Then\n            // the truncate file is part of the deletes that happen while prunning\n            verify( fsa, times( segmentFiles.size() ) ).deleteFile(\n                    fileNames.getForVersion( toBePruned.header().version() ) );\n            verify( fsa, times( segmentFiles.size() ) ).deleteFile(\n                    fileNames.getForVersion( toBeTruncated.header().version() ) );\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateNext() throws Exception\n    {\n        // Given\n        FileSystemAbstraction fsa = mock( FileSystemAbstraction.class, RETURNS_MOCKS );\n        FileNames fileNames = mock( FileNames.class );\n        ChannelMarshal<ReplicatedContent> contentMarshal = mock( ChannelMarshal.class );\n        LogProvider logProvider = mock( LogProvider.class );\n\n        Segments segments = new Segments( fsa, fileNames, Collections.emptyList(), contentMarshal, logProvider, -1 );\n\n        // When\n        segments.rotate( 10, 10, 12 );\n        segments.last().closeWriter();\n        SegmentFile last = segments.last();\n\n        // Then\n        assertEquals( 10, last.header().prevFileLastIndex() );\n        assertEquals( 10, last.header().prevIndex() );\n        assertEquals( 12, last.header().prevTerm() );\n    }","id":70153,"modified_method":"@Test\n    public void shouldCreateNext() throws Exception\n    {\n        // Given\n        try( Segments segments = new Segments( fsa, fileNames, segmentFiles, contentMarshal, logProvider, -1 ) )\n        {\n            // When\n            segments.rotate( 10, 10, 12 );\n            segments.last().closeWriter();\n            SegmentFile last = segments.last();\n\n            // Then\n            assertEquals( 10, last.header().prevFileLastIndex() );\n            assertEquals( 10, last.header().prevIndex() );\n            assertEquals( 12, last.header().prevTerm() );\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"synchronized StoreChannel acquire( long byteOffset ) throws IOException, DisposedException\n    {\n        if( markedForDisposal )\n        {\n            throw new DisposedException();\n        }\n\n        StoreChannel storeChannel = channels.pollFirst();\n        if ( storeChannel == null )\n        {\n            storeChannel = create();\n        }\n        storeChannel.position( byteOffset );\n        return storeChannel;\n    }","id":70154,"modified_method":"synchronized StoreChannel acquire( long byteOffset ) throws IOException, DisposedException\n    {\n        if ( closed )\n        {\n            throw new RuntimeException( CLOSED_ERROR_MESSAGE );\n        }\n        if ( markedForDisposal )\n        {\n            throw new DisposedException();\n        }\n\n        StoreChannel storeChannel = channels.pollFirst();\n        if ( storeChannel == null )\n        {\n            storeChannel = create();\n        }\n        storeChannel.position( byteOffset );\n        return storeChannel;\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"synchronized void release( StoreChannel channel )\n    {\n        channels.addFirst( channel );\n        checkForDisposal();\n    }","id":70155,"modified_method":"synchronized void release( StoreChannel channel )\n    {\n        if ( closed )\n        {\n            throw new RuntimeException( CLOSED_ERROR_MESSAGE );\n        }\n        channels.addFirst( channel );\n        checkForDisposal();\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldNotBeAbleToAcquireFromPoolMarkedForDisposal() throws Exception\n    {\n        // given\n        FileSystemAbstraction fsa = new EphemeralFileSystemAbstraction();\n        StoreChannelPool pool = new StoreChannelPool( fsa, new File( SEGMENTED_LOG_DIRECTORY_NAME ), \"rw\",\n                NullLogProvider.getInstance() );\n\n        pool.markForDisposal( () -> {\n        } );\n\n        // when\n        try\n        {\n            pool.acquire( 0 );\n            fail();\n\n        }\n        catch ( DisposedException pde )\n        {\n            // then\n        }\n    }","id":70156,"modified_method":"@Test\n    public void shouldNotBeAbleToAcquireFromPoolMarkedForDisposal() throws Exception\n    {\n        // given\n        try ( StoreChannelPool pool = new StoreChannelPool( fsRule.get(), file, \"rw\", logProvider ) )\n        {\n            pool.markForDisposal( () -> {} );\n\n            // when\n            try\n            {\n                pool.acquire( 0 );\n                fail();\n            }\n            catch ( DisposedException pde )\n            {\n                // then\n            }\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldSignalWhenPoolDepleted() throws Exception\n    {\n        // given\n        FileSystemAbstraction fsa = new EphemeralFileSystemAbstraction();\n        StoreChannelPool pool =\n                new StoreChannelPool( fsa, new File( SEGMENTED_LOG_DIRECTORY_NAME ), \"rw\", NullLogProvider.getInstance() );\n        StoreChannel channel = pool.acquire( 0 );\n\n        CountDownLatch latch = new CountDownLatch( 1 );\n        Runnable onDisposal = latch::countDown;\n\n        pool.markForDisposal( onDisposal );\n\n        // when\n        pool.release( channel );\n\n        // then\n        assertTrue( latch.await( 10, SECONDS ) );\n    }","id":70157,"modified_method":"@Test\n    public void shouldSignalWhenPoolDeleted() throws Exception\n    {\n        // given\n        try ( StoreChannelPool pool = new StoreChannelPool( fsRule.get(), file, \"rw\", logProvider ) )\n        {\n            StoreChannel channel = pool.acquire( 0 );\n\n            CountDownLatch latch = new CountDownLatch( 1 );\n            Runnable onDisposal = latch::countDown;\n\n            pool.markForDisposal( onDisposal );\n\n            // when\n            pool.release( channel );\n\n            // then\n            assertTrue( latch.await( 10, SECONDS ) );\n        }\n    }","commit_id":"15737fa56d5ff7cea9c2d3fcaa31aa48011f7fb2","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public boolean equals(Object obj)\n    {\n        // Same Java object, they sure are equal\n        if (this == obj) {\n            return true;\n        }\n\n        if (!super.equals(obj)) {\n            return false;\n        }\n\n        if ((getValue() == null) && (((NumberProperty) obj).getValue() == null)) {\n            return true;\n        }\n\n        return getValue().equals(((NumberProperty) obj).getValue());\n    }","id":70158,"modified_method":"@Override\n    public boolean equals(Object obj)\n    {\n        if (obj == null) {\n            return false;\n        }\n\n        return new EqualsBuilder().appendSuper(super.equals(obj))\n            .append(getValue(), ((NumberProperty) obj).getValue())\n            .isEquals();\n    }","commit_id":"9b28e3da14ad4f873f9234bfb920cde23130467c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + Arrays.hashCode(anTokReadings);\n    result = prime * result + (isLinebreak ? 1231 : 1237);\n    result = prime * result + (isParaEnd ? 1231 : 1237);\n    result = prime * result + (isSentEnd ? 1231 : 1237);\n    result = prime * result + (isSentStart ? 1231 : 1237);\n    result = prime * result + (isWhitespace ? 1231 : 1237);\n    result = prime * result + (isWhitespaceBefore ? 1231 : 1237);\n    result = prime * result + chunkTags.hashCode();\n    result = prime * result + startPos;\n    result = prime * result + (token == null ? 0 : token.hashCode());\n    return result;\n  }","id":70159,"modified_method":"@Override\n  public int hashCode() {\n    return Arrays.hashCode(anTokReadings) +\n           Objects.hash(isLinebreak, isParaEnd, isSentEnd, isSentStart, isWhitespace, isWhitespaceBefore, chunkTags, startPos, token);\n  }","commit_id":"9cac7832b5cd9e1e42ebae7c636e6352a7e575ef","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"@SuppressWarnings(\"ControlFlowStatementWithoutBraces\")\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    final AnalyzedTokenReadings other = (AnalyzedTokenReadings) obj;\n    if (!Arrays.equals(anTokReadings, other.anTokReadings))\n      return false;\n    if (isLinebreak != other.isLinebreak)\n      return false;\n    if (isParaEnd != other.isParaEnd)\n      return false;\n    if (isSentEnd != other.isSentEnd)\n      return false;\n    if (isSentStart != other.isSentStart)\n      return false;\n    if (isWhitespace != other.isWhitespace)\n      return false;\n    if (isWhitespaceBefore != other.isWhitespaceBefore)\n      return false;\n    if (isImmunized != other.isImmunized)\n      return false;\n    if (startPos != other.startPos)\n      return false;\n    if (!chunkTags.equals(other.chunkTags))\n      return false;\n    if (hasSameLemmas != other.hasSameLemmas)\n      return false;\n    if (isIgnoredBySpeller != other.isIgnoredBySpeller)\n      return false;\n    if (token == null) {\n      if (other.token != null)\n        return false;\n    } else if (!token.equals(other.token)) {\n      return false;\n    }\n    return true;\n  }","id":70160,"modified_method":"@Override\n  public boolean equals(Object obj) {\n    if (this == obj) { return true; }\n    if (obj == null) { return false; }\n    if (getClass() != obj.getClass()) {\n      return false;\n    }\n    final AnalyzedTokenReadings other = (AnalyzedTokenReadings) obj;\n    return new EqualsBuilder()\n      .append(anTokReadings, other.anTokReadings)\n      .append(isLinebreak, other.isLinebreak)\n      .append(isParaEnd, other.isParaEnd)\n      .append(isSentEnd, other.isSentEnd)\n      .append(isSentStart, other.isSentStart)\n      .append(isWhitespace, other.isWhitespace)\n      .append(isWhitespaceBefore, other.isWhitespaceBefore)\n      .append(isImmunized, other.isImmunized)\n      .append(startPos, other.startPos)\n      .append(chunkTags, other.chunkTags)\n      .append(hasSameLemmas, other.hasSameLemmas)\n      .append(isIgnoredBySpeller, other.isIgnoredBySpeller)\n      .append(token, other.token)\n      .isEquals();\n  }","commit_id":"9cac7832b5cd9e1e42ebae7c636e6352a7e575ef","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public ChunkTag(String chunkTag) {\n    if (chunkTag == null || chunkTag.trim().isEmpty()) {\n      throw new NullPointerException(\"chunkTag cannot be null or empty: \" + chunkTag);\n    }\n    this.chunkTag = chunkTag;\n  }","id":70161,"modified_method":"public ChunkTag(String chunkTag) {\n    if (chunkTag == null || chunkTag.trim().isEmpty()) {\n      throw new NullPointerException(\"chunkTag cannot be null or empty: '\" + chunkTag + \"'\");\n    }\n    this.chunkTag = chunkTag;\n  }","commit_id":"9cac7832b5cd9e1e42ebae7c636e6352a7e575ef","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"@Override\n  public boolean equals(final Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (getClass() != obj.getClass()) {\n      return false;\n    }\n    final EquivalenceTypeLocator other = (EquivalenceTypeLocator) obj;\n    if (feature == null) {\n      if (other.feature != null) {\n        return false;\n      }\n    } else if (!feature.equals(other.feature)) {\n      return false;\n    }\n    if (type == null) {\n      if (other.type != null) {\n        return false;\n      }\n    } else if (!type.equals(other.type)) {\n      return false;\n    }\n    return true;\n  }","id":70162,"modified_method":"@Override\n  public boolean equals(final Object obj) {\n    if (this == obj) { return true; }\n    if (obj == null) { return false; }\n    if (getClass() != obj.getClass()) {\n      return false;\n    }\n    final EquivalenceTypeLocator other = (EquivalenceTypeLocator) obj;\n    return Objects.equals(feature, other.feature) &&\n           Objects.equals(type, other.type);\n  }","commit_id":"9cac7832b5cd9e1e42ebae7c636e6352a7e575ef","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + (feature == null ? 0 : feature.hashCode());\n    result = prime * result + (type == null ? 0 : type.hashCode());\n    return result;\n  }","id":70163,"modified_method":"@Override\n  public int hashCode() {\n    return Objects.hash(feature, type);\n  }","commit_id":"9cac7832b5cd9e1e42ebae7c636e6352a7e575ef","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n\t * Construct a new instance of the ServletServerHttpResponse based on the given {@link HttpServletResponse}.\n\t * @param servletResponse the servlet response\n\t */\n\tpublic ServletServerHttpResponse(HttpServletResponse servletResponse) {\n\t\tAssert.notNull(servletResponse, \"'servletResponse' must not be null\");\n\t\tthis.servletResponse = servletResponse;\n\t\tthis.headers = (servlet3Present ? new ServletResponseHttpHeaders() : new HttpHeaders());\n\t}","id":70164,"modified_method":"/**\n\t * Construct a new instance of the ServletServerHttpResponse based on the given {@link HttpServletResponse}.\n\t * @param servletResponse the servlet response\n\t */\n\tpublic ServletServerHttpResponse(HttpServletResponse servletResponse) {\n\t\tAssert.notNull(servletResponse, \"HttpServletResponse must not be null\");\n\t\tthis.servletResponse = servletResponse;\n\t\tthis.headers = (servlet3Present ? new ServletResponseHttpHeaders() : new HttpHeaders());\n\t}","commit_id":"2fa1caca0cf5dad868870f856c0cadb983709f37","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private boolean isETagNotModified(String etag) {\n\t\tif (StringUtils.hasLength(etag)) {\n\t\t\tString ifNoneMatch = getRequest().getHeader(HEADER_IF_NONE_MATCH);\n\t\t\tif (StringUtils.hasLength(ifNoneMatch)) {\n\t\t\t\tString[] clientETags = StringUtils.delimitedListToStringArray(ifNoneMatch, \",\", \" \");\n\t\t\t\tfor (String clientETag : clientETags) {\n\t\t\t\t\t// compare weak/strong ETags as per https://tools.ietf.org/html/rfc7232#section-2.3\n\t\t\t\t\tif (StringUtils.hasLength(clientETag) &&\n\t\t\t\t\t\t\t(clientETag.replaceFirst(\"^W/\", \"\").equals(etag.replaceFirst(\"^W/\", \"\"))\n\t\t\t\t\t\t\t\t\t|| clientETag.equals(\"*\"))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}","id":70165,"modified_method":"private boolean isEtagNotModified(String etag) {\n\t\tif (StringUtils.hasLength(etag)) {\n\t\t\tString ifNoneMatch = getRequest().getHeader(HEADER_IF_NONE_MATCH);\n\t\t\tif (StringUtils.hasLength(ifNoneMatch)) {\n\t\t\t\tString[] clientEtags = StringUtils.delimitedListToStringArray(ifNoneMatch, \",\", \" \");\n\t\t\t\tfor (String clientEtag : clientEtags) {\n\t\t\t\t\t// compare weak/strong ETag as per https://tools.ietf.org/html/rfc7232#section-2.3\n\t\t\t\t\tif (StringUtils.hasLength(clientEtag) &&\n\t\t\t\t\t\t\t(clientEtag.replaceFirst(\"^W/\", \"\").equals(etag.replaceFirst(\"^W/\", \"\")) ||\n\t\t\t\t\t\t\t\t\tclientEtag.equals(\"*\"))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}","commit_id":"2fa1caca0cf5dad868870f856c0cadb983709f37","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private boolean isCompatibleWithConditionalRequests(HttpServletResponse response) {\n\t\tif (response == null || !responseGetStatusAvailable) {\n\t\t\t// Can't check response.getStatus() - let's assume we're good\n\t\t\treturn true;\n\t\t}\n\t\treturn HttpStatus.valueOf(response.getStatus()).is2xxSuccessful();\n\t}","id":70166,"modified_method":"private boolean isCompatibleWithConditionalRequests(HttpServletResponse response) {\n\t\tif (response == null || !servlet3Present) {\n\t\t\t// Can't check response.getStatus() - let's assume we're good\n\t\t\treturn true;\n\t\t}\n\t\treturn HttpStatus.valueOf(response.getStatus()).is2xxSuccessful();\n\t}","commit_id":"2fa1caca0cf5dad868870f856c0cadb983709f37","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tpublic boolean checkNotModified(long lastModifiedTimestamp) {\n\t\tHttpServletResponse response = getResponse();\n\t\tif (lastModifiedTimestamp >= 0 && !this.notModified) {\n\t\t\tif (isCompatibleWithConditionalRequests(response)) {\n\t\t\t\tthis.notModified = isTimestampNotModified(lastModifiedTimestamp);\n\t\t\t\tif (response != null) {\n\t\t\t\t\tif (this.notModified && supportsNotModifiedStatus()) {\n\t\t\t\t\t\tresponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\t\t\t}\n\t\t\t\t\tif (response.getHeader(HEADER_LAST_MODIFIED) == null) {\n\t\t\t\t\t\tresponse.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.notModified;\n\t}","id":70167,"modified_method":"@Override\n\tpublic boolean checkNotModified(long lastModifiedTimestamp) {\n\t\tHttpServletResponse response = getResponse();\n\t\tif (lastModifiedTimestamp >= 0 && !this.notModified) {\n\t\t\tif (isCompatibleWithConditionalRequests(response)) {\n\t\t\t\tthis.notModified = isTimestampNotModified(lastModifiedTimestamp);\n\t\t\t\tif (response != null) {\n\t\t\t\t\tif (this.notModified && supportsNotModifiedStatus()) {\n\t\t\t\t\t\tresponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\t\t\t}\n\t\t\t\t\tif (isHeaderAbsent(response, HEADER_LAST_MODIFIED)) {\n\t\t\t\t\t\tresponse.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.notModified;\n\t}","commit_id":"2fa1caca0cf5dad868870f856c0cadb983709f37","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tpublic boolean checkNotModified(String etag, long lastModifiedTimestamp) {\n\t\tHttpServletResponse response = getResponse();\n\t\tif (StringUtils.hasLength(etag) && !this.notModified) {\n\t\t\tif (isCompatibleWithConditionalRequests(response)) {\n\t\t\t\tetag = addEtagPadding(etag);\n\t\t\t\tthis.notModified = isETagNotModified(etag) && isTimestampNotModified(lastModifiedTimestamp);\n\t\t\t\tif (response != null) {\n\t\t\t\t\tif (this.notModified && supportsNotModifiedStatus()) {\n\t\t\t\t\t\tresponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\t\t\t}\n\t\t\t\t\tif (response.getHeader(HEADER_ETAG) == null) {\n\t\t\t\t\t\tresponse.setHeader(HEADER_ETAG, etag);\n\t\t\t\t\t}\n\t\t\t\t\tif (response.getHeader(HEADER_LAST_MODIFIED) == null) {\n\t\t\t\t\t\tresponse.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.notModified;\n\t}","id":70168,"modified_method":"@Override\n\tpublic boolean checkNotModified(String etag, long lastModifiedTimestamp) {\n\t\tHttpServletResponse response = getResponse();\n\t\tif (StringUtils.hasLength(etag) && !this.notModified) {\n\t\t\tif (isCompatibleWithConditionalRequests(response)) {\n\t\t\t\tetag = addEtagPadding(etag);\n\t\t\t\tthis.notModified = isEtagNotModified(etag) && isTimestampNotModified(lastModifiedTimestamp);\n\t\t\t\tif (response != null) {\n\t\t\t\t\tif (this.notModified && supportsNotModifiedStatus()) {\n\t\t\t\t\t\tresponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\t\t\t}\n\t\t\t\t\tif (isHeaderAbsent(response, HEADER_ETAG)) {\n\t\t\t\t\t\tresponse.setHeader(HEADER_ETAG, etag);\n\t\t\t\t\t}\n\t\t\t\t\tif (isHeaderAbsent(response, HEADER_LAST_MODIFIED)) {\n\t\t\t\t\t\tresponse.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.notModified;\n\t}","commit_id":"2fa1caca0cf5dad868870f856c0cadb983709f37","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tpublic boolean checkNotModified(String etag) {\n\t\tHttpServletResponse response = getResponse();\n\t\tif (StringUtils.hasLength(etag) && !this.notModified) {\n\t\t\tif (isCompatibleWithConditionalRequests(response)) {\n\t\t\t\tetag = addEtagPadding(etag);\n\t\t\t\tthis.notModified = isETagNotModified(etag);\n\t\t\t\tif (response != null) {\n\t\t\t\t\tif (this.notModified && supportsNotModifiedStatus()) {\n\t\t\t\t\t\tresponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\t\t\t}\n\t\t\t\t\tif (response.getHeader(HEADER_ETAG) == null) {\n\t\t\t\t\t\tresponse.setHeader(HEADER_ETAG, etag);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.notModified;\n\t}","id":70169,"modified_method":"@Override\n\tpublic boolean checkNotModified(String etag) {\n\t\tHttpServletResponse response = getResponse();\n\t\tif (StringUtils.hasLength(etag) && !this.notModified) {\n\t\t\tif (isCompatibleWithConditionalRequests(response)) {\n\t\t\t\tetag = addEtagPadding(etag);\n\t\t\t\tthis.notModified = isEtagNotModified(etag);\n\t\t\t\tif (response != null) {\n\t\t\t\t\tif (this.notModified && supportsNotModifiedStatus()) {\n\t\t\t\t\t\tresponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\t\t\t}\n\t\t\t\t\tif (isHeaderAbsent(response, HEADER_ETAG)) {\n\t\t\t\t\t\tresponse.setHeader(HEADER_ETAG, etag);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.notModified;\n\t}","commit_id":"2fa1caca0cf5dad868870f856c0cadb983709f37","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Indicates whether the given request and response are eligible for ETag generation.\n\t * <p>The default implementation returns {@code true} if all conditions match:\n\t * <ul>\n\t * <li>response status codes in the {@code 2xx} series<\/li>\n\t * <li>request method is a GET<\/li>\n\t * <li>response Cache-Control header is not set or does not contain a \"no-store\" directive<\/li>\n\t * <\/ul>\n\t * @param request the HTTP request\n\t * @param response the HTTP response\n\t * @param responseStatusCode the HTTP response status code\n\t * @param inputStream the response body\n\t * @return {@code true} if eligible for ETag generation; {@code false} otherwise\n\t */\n\tprotected boolean isEligibleForEtag(HttpServletRequest request, HttpServletResponse response,\n\t\t\tint responseStatusCode, InputStream inputStream) {\n\n\t\tif (responseStatusCode >= 200 && responseStatusCode < 300 && HttpMethod.GET.name().equals(request.getMethod())) {\n\t\t\tString cacheControl = (responseGetHeaderAvailable ? response.getHeader(HEADER_CACHE_CONTROL) : null);\n\t\t\tif (cacheControl == null || !cacheControl.contains(DIRECTIVE_NO_STORE)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}","id":70170,"modified_method":"/**\n\t * Indicates whether the given request and response are eligible for ETag generation.\n\t * <p>The default implementation returns {@code true} if all conditions match:\n\t * <ul>\n\t * <li>response status codes in the {@code 2xx} series<\/li>\n\t * <li>request method is a GET<\/li>\n\t * <li>response Cache-Control header is not set or does not contain a \"no-store\" directive<\/li>\n\t * <\/ul>\n\t * @param request the HTTP request\n\t * @param response the HTTP response\n\t * @param responseStatusCode the HTTP response status code\n\t * @param inputStream the response body\n\t * @return {@code true} if eligible for ETag generation; {@code false} otherwise\n\t */\n\tprotected boolean isEligibleForEtag(HttpServletRequest request, HttpServletResponse response,\n\t\t\tint responseStatusCode, InputStream inputStream) {\n\n\t\tif (responseStatusCode >= 200 && responseStatusCode < 300 && HttpMethod.GET.name().equals(request.getMethod())) {\n\t\t\tString cacheControl = null;\n\t\t\tif (servlet3Present) {\n\t\t\t\tcacheControl = response.getHeader(HEADER_CACHE_CONTROL);\n\t\t\t}\n\t\t\tif (cacheControl == null || !cacheControl.contains(DIRECTIVE_NO_STORE)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}","commit_id":"2fa1caca0cf5dad868870f856c0cadb983709f37","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private String appendPayload(Object payload) {\n\t\tAssert.isInstanceOf(byte[].class, payload);\n\t\tbyte[] bytes = (byte[]) payload;\n\t\tString contentType = (getContentType() != null ? \" \" + getContentType().toString() : \"\");\n\t\tif (bytes.length == 0 || getContentType() == null || !isReadableContentType()) {\n\t\t\treturn contentType;\n\t\t}\n\t\tCharset charset = getContentType().getCharset();\n\t\tcharset = (charset != null ? charset : StandardCharsets.UTF_8);\n\t\treturn (bytes.length < 80) ?\n\t\t\t\tcontentType + \" payload=\" + new String(bytes, charset) :\n\t\t\t\tcontentType + \" payload=\" + new String(Arrays.copyOf(bytes, 80), charset) + \"...(truncated)\";\n\t}","id":70171,"modified_method":"private String appendPayload(Object payload) {\n\t\tif (payload.getClass() != byte[].class) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Expected byte array payload but got: \" + ClassUtils.getQualifiedName(payload.getClass()));\n\t\t}\n\t\tbyte[] bytes = (byte[]) payload;\n\t\tString contentType = (getContentType() != null ? \" \" + getContentType().toString() : \"\");\n\t\tif (bytes.length == 0 || getContentType() == null || !isReadableContentType()) {\n\t\t\treturn contentType;\n\t\t}\n\t\tCharset charset = getContentType().getCharset();\n\t\tcharset = (charset != null ? charset : StandardCharsets.UTF_8);\n\t\treturn (bytes.length < 80) ?\n\t\t\t\tcontentType + \" payload=\" + new String(bytes, charset) :\n\t\t\t\tcontentType + \" payload=\" + new String(Arrays.copyOf(bytes, 80), charset) + \"...(truncated)\";\n\t}","commit_id":"f3f691cc373ce8a63fdb7043655ef66f28506481","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void updateStompCommandAsServerMessage() {\n\t\tAssert.state(SimpMessageType.MESSAGE.equals(getMessageType()), \"Unexpected message type \" + getMessage());\n\t\tStompCommand command = getCommand();\n\t\tif ((command == null) || StompCommand.SEND.equals(command)) {\n\t\t\tsetHeader(COMMAND_HEADER, StompCommand.MESSAGE);\n\t\t}\n\t\telse if (!StompCommand.MESSAGE.equals(command)) {\n\t\t\tthrow new IllegalStateException(\"Unexpected STOMP command \" + command);\n\t\t}\n\t\ttrySetStompHeaderForSubscriptionId();\n\t\tif (getMessageId() == null) {\n\t\t\tString messageId = getSessionId() + \"-\" + messageIdCounter.getAndIncrement();\n\t\t\tsetNativeHeader(STOMP_MESSAGE_ID_HEADER, messageId);\n\t\t}\n\t}","id":70172,"modified_method":"public void updateStompCommandAsServerMessage() {\n\t\tif (getMessageType() != SimpMessageType.MESSAGE) {\n\t\t\tthrow new IllegalStateException(\"Unexpected message type \" + getMessageType());\n\t\t}\n\t\tStompCommand command = getCommand();\n\t\tif ((command == null) || StompCommand.SEND.equals(command)) {\n\t\t\tsetHeader(COMMAND_HEADER, StompCommand.MESSAGE);\n\t\t}\n\t\telse if (!StompCommand.MESSAGE.equals(command)) {\n\t\t\tthrow new IllegalStateException(\"Unexpected STOMP command \" + command);\n\t\t}\n\t\ttrySetStompHeaderForSubscriptionId();\n\t\tif (getMessageId() == null) {\n\t\t\tString messageId = getSessionId() + \"-\" + messageIdCounter.getAndIncrement();\n\t\t\tsetNativeHeader(STOMP_MESSAGE_ID_HEADER, messageId);\n\t\t}\n\t}","commit_id":"f3f691cc373ce8a63fdb7043655ef66f28506481","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public StompCommand updateStompCommandAsClientMessage() {\n\t\tAssert.state(SimpMessageType.MESSAGE.equals(getMessageType()), \"Unexpected message type \" + getMessage());\n\t\tif (getCommand() == null) {\n\t\t\tsetHeader(COMMAND_HEADER, StompCommand.SEND);\n\t\t}\n\t\telse if (!getCommand().equals(StompCommand.SEND)) {\n\t\t\tthrow new IllegalStateException(\"Unexpected STOMP command \" + getCommand());\n\t\t}\n\t\treturn getCommand();\n\t}","id":70173,"modified_method":"public StompCommand updateStompCommandAsClientMessage() {\n\t\tif (getMessageType() != SimpMessageType.MESSAGE) {\n\t\t\tthrow new IllegalStateException(\"Unexpected message type \" + getMessageType());\n\t\t}\n\t\tif (getCommand() == null) {\n\t\t\tsetHeader(COMMAND_HEADER, StompCommand.SEND);\n\t\t}\n\t\telse if (!getCommand().equals(StompCommand.SEND)) {\n\t\t\tthrow new IllegalStateException(\"Unexpected STOMP command \" + getCommand());\n\t\t}\n\t\treturn getCommand();\n\t}","commit_id":"f3f691cc373ce8a63fdb7043655ef66f28506481","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void sendExchange(Exchange exchange, final Object replyObj) {\n        if (exchange.isOneWay()) {\n            //Don't need to send anything\n            return;\n        }\n\n        final Message outMessage = exchange.getOutMessage();\n\n        ResourceCloser closer = new ResourceCloser();\n        try {\n            Session session = closer\n                .register(connection.createSession(jmsConfig.isSessionTransacted(), Session.AUTO_ACKNOWLEDGE));\n\n            final JMSMessageHeadersType messageProperties = (JMSMessageHeadersType)outMessage\n                .get(JMSConstants.JMS_SERVER_RESPONSE_HEADERS);\n            JMSMessageHeadersType inMessageProperties = (JMSMessageHeadersType)inMessage\n                .get(JMSConstants.JMS_SERVER_REQUEST_HEADERS);\n            initResponseMessageProperties(messageProperties, inMessageProperties);\n\n            // setup the reply message\n            final javax.jms.Message request = (javax.jms.Message)inMessage\n                .get(JMSConstants.JMS_REQUEST_MESSAGE);\n            final String msgType = JMSMessageUtils.isMtomEnabled(outMessage)\n                ? JMSConstants.BINARY_MESSAGE_TYPE : JMSMessageUtils.getMessageType(request);\n            if (isTimedOut(request)) {\n                return;\n            }\n\n            Destination replyTo = getReplyToDestination(session, inMessage);\n            if (replyTo == null) {\n                throw new RuntimeException(\"No replyTo destination set\");\n            }\n\n            getLogger().log(Level.FINE, \"send out the message!\");\n\n            String correlationId = determineCorrelationID(request);\n            javax.jms.Message reply = JMSMessageUtils.asJMSMessage(jmsConfig, \n                                      outMessage, \n                                      replyObj, \n                                      msgType,\n                                      session,\n                                      correlationId, JMSConstants.JMS_SERVER_RESPONSE_HEADERS);\n            JMSSender sender = JMSFactory.createJmsSender(jmsConfig, messageProperties);\n            LOG.log(Level.FINE, \"server sending reply: \", reply);\n            sender.sendMessage(closer, session, replyTo, reply);\n        } catch (JMSException ex) {\n            throw JMSUtil.convertJmsException(ex);\n        } finally {\n            closer.close();\n        }\n    }","id":70174,"modified_method":"public void sendExchange(Exchange exchange, final Object replyObj) {\n        if (exchange.isOneWay()) {\n            //Don't need to send anything\n            return;\n        }\n\n        final Message outMessage = exchange.getOutMessage();\n\n        ResourceCloser closer = new ResourceCloser();\n        try {\n            Session session = closer\n                .register(connection.createSession(jmsConfig.isSessionTransacted(), Session.AUTO_ACKNOWLEDGE));\n\n            final JMSMessageHeadersType messageProperties = (JMSMessageHeadersType)outMessage\n                .get(JMSConstants.JMS_SERVER_RESPONSE_HEADERS);\n            JMSMessageHeadersType inMessageProperties = (JMSMessageHeadersType)inMessage\n                .get(JMSConstants.JMS_SERVER_REQUEST_HEADERS);\n            initResponseMessageProperties(messageProperties, inMessageProperties);\n\n            // setup the reply message\n            final javax.jms.Message request = (javax.jms.Message)inMessage\n                .get(JMSConstants.JMS_REQUEST_MESSAGE);\n            final String msgType;\n            if (JMSMessageUtils.isMtomEnabled(outMessage) \n                && !jmsConfig.getMessageType().equals(JMSConstants.TEXT_MESSAGE_TYPE)) {\n                //get chance to set messageType from JMSConfiguration with MTOM enabled\n                msgType = jmsConfig.getMessageType();\n            } else {\n                msgType = JMSMessageUtils.getMessageType(request);\n            }\n            if (JMSConstants.TEXT_MESSAGE_TYPE.equals(msgType) \n                && JMSMessageUtils.isMtomEnabled(outMessage)) {\n                org.apache.cxf.common.i18n.Message msg = \n                    new org.apache.cxf.common.i18n.Message(\"INVALID_MESSAGE_TYPE\", LOG);\n                throw new ConfigurationException(msg);\n            }\n            \n            if (isTimedOut(request)) {\n                return;\n            }\n\n            Destination replyTo = getReplyToDestination(session, inMessage);\n            if (replyTo == null) {\n                throw new RuntimeException(\"No replyTo destination set\");\n            }\n\n            getLogger().log(Level.FINE, \"send out the message!\");\n\n            String correlationId = determineCorrelationID(request);\n            javax.jms.Message reply = JMSMessageUtils.asJMSMessage(jmsConfig, \n                                      outMessage, \n                                      replyObj, \n                                      msgType,\n                                      session,\n                                      correlationId, JMSConstants.JMS_SERVER_RESPONSE_HEADERS);\n            JMSSender sender = JMSFactory.createJmsSender(jmsConfig, messageProperties);\n            LOG.log(Level.FINE, \"server sending reply: \", reply);\n            sender.sendMessage(closer, session, replyTo, reply);\n        } catch (JMSException ex) {\n            throw JMSUtil.convertJmsException(ex);\n        } finally {\n            closer.close();\n        }\n    }","commit_id":"d16e2ea9758eecf8f85830352877904e23bb35d9","url":"https://github.com/apache/cxf"},{"original_method":"/** Sets whether the content of this item is loaded; used if\n\t * the listbox owning this item is using a list model.\n\t */\n\t/*package*/ final void setLoaded(boolean loaded) {\n\t\tif (loaded != _loaded) {\n\t\t\t_loaded = loaded;\n\n\t\t\tfinal Listbox listbox = getListbox();\n\t\t\tif (listbox != null && listbox.getModel() != null && !listbox.inPagingMold())\n\t\t\t\tinvalidate();\n\t\t}\n\t}","id":70175,"modified_method":"/** Sets whether the content of this item is loaded; used if\n\t * the listbox owning this item is using a list model.\n\t */\n\t/*package*/ final void setLoaded(boolean loaded) {\n\t\tif (loaded != _loaded) {\n\t\t\t_loaded = loaded;\n\n\t\t\tfinal Listbox listbox = getListbox();\n\t\t\tif (listbox != null && listbox.getModel() != null)\n\t\t\t\tif (listbox.inPagingMold())\n\t\t\t\t\tsmartUpdate(\"z.loaded\", _loaded);\n\t\t\t\telse if (loaded)\n\t\t\t\t\tinvalidate();\n\t\t\t\t\t//reason: the client doesn't init (for better performance)\n\t\t\t\t\t//i.e., z.skipsib is specified for unloaded items\n\t\t}\n\t}","commit_id":"70f0043d9d18642e50aad3083b82b4f8bf7a73d0","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets whether the content of this row is loaded; used if\n\t * the grid owning this row is using a list model.\n\t */\n\t/*package*/ final void setLoaded(boolean loaded) {\n\t\tif (loaded != _loaded) {\n\t\t\t_loaded = loaded;\n\n\t\t\tfinal Grid grid = getGrid();\n\t\t\tif (grid != null && grid.getModel() != null)\n\t\t\t\tsmartUpdate(\"z.loaded\", _loaded);\n\t\t}\n\t}","id":70176,"modified_method":"/** Sets whether the content of this row is loaded; used if\n\t * the grid owning this row is using a list model.\n\t */\n\t/*package*/ final void setLoaded(boolean loaded) {\n\t\tif (loaded != _loaded) {\n\t\t\t_loaded = loaded;\n\n\t\t\tfinal Grid grid = getGrid();\n\t\t\tif (grid != null && grid.getModel() != null)\n\t\t\t\tif (grid.inPagingMold())\n\t\t\t\t\tsmartUpdate(\"z.loaded\", _loaded);\n\t\t\t\telse if (loaded)\n\t\t\t\t\tinvalidate();\n\t\t\t\t\t//reason: the client doesn't init (for better performance)\n\t\t\t\t\t//i.e., z.skipsib is specified for unloaded items\n\t\t}\n\t}","commit_id":"70f0043d9d18642e50aad3083b82b4f8bf7a73d0","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets whether the content of this item is loaded; used if\n\t * the listbox owning this item is using a list model.\n\t */\n\t/*package*/ final void setLoaded(boolean loaded) {\n\t\tif (loaded != _loaded) {\n\t\t\t_loaded = loaded;\n\n\t\t\tfinal Listbox listbox = getListbox();\n\t\t\tif (listbox != null && listbox.getModel() != null)\n\t\t\t\tif (listbox.inPagingMold() || !loaded)\n\t\t\t\t\tsmartUpdate(\"z.loaded\", _loaded);\n\t\t\t\telse if (loaded)\n\t\t\t\t\tinvalidate();\n\t\t\t\t\t//reason: the client doesn't init (for better performance)\n\t\t\t\t\t//i.e., z.skipsib is specified for unloaded items\n\t\t}\n\t}","id":70177,"modified_method":"/** Sets whether the content of this item is loaded; used if\n\t * the listbox owning this item is using a list model.\n\t */\n\t/*package*/ final void setLoaded(boolean loaded) {\n\t\tif (loaded != _loaded) {\n\t\t\t_loaded = loaded;\n\n\t\t\tfinal Listbox listbox = getListbox();\n\t\t\tif (listbox != null && listbox.getModel() != null)\n\t\t\t\tif (_loaded && !listbox.inPagingMold())\n\t\t\t\t\tinvalidate();\n\t\t\t\t\t//reason: the client doesn't init (for better performance)\n\t\t\t\t\t//i.e., z.skipsib is specified for unloaded items\n\t\t\t\telse\n\t\t\t\t\tsmartUpdate(\"z.loaded\", _loaded);\n\t\t}\n\t}","commit_id":"ec74c8b934059ff3332c0051456c980e37486a76","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets whether the content of this row is loaded; used if\n\t * the grid owning this row is using a list model.\n\t */\n\t/*package*/ final void setLoaded(boolean loaded) {\n\t\tif (loaded != _loaded) {\n\t\t\t_loaded = loaded;\n\n\t\t\tfinal Grid grid = getGrid();\n\t\t\tif (grid != null && grid.getModel() != null)\n\t\t\t\tif (grid.inPagingMold() || !loaded)\n\t\t\t\t\tsmartUpdate(\"z.loaded\", _loaded);\n\t\t\t\telse if (loaded)\n\t\t\t\t\tinvalidate();\n\t\t\t\t\t//reason: the client doesn't init (for better performance)\n\t\t\t\t\t//i.e., z.skipsib is specified for unloaded items\n\t\t}\n\t}","id":70178,"modified_method":"/** Sets whether the content of this row is loaded; used if\n\t * the grid owning this row is using a list model.\n\t */\n\t/*package*/ final void setLoaded(boolean loaded) {\n\t\tif (loaded != _loaded) {\n\t\t\t_loaded = loaded;\n\n\t\t\tfinal Grid grid = getGrid();\n\t\t\tif (grid != null && grid.getModel() != null)\n\t\t\t\tif (_loaded && !grid.inPagingMold())\n\t\t\t\t\tinvalidate();\n\t\t\t\t\t//reason: the client doesn't init (for better performance)\n\t\t\t\t\t//i.e., z.skipsib is specified for unloaded items\n\t\t\t\telse\n\t\t\t\t\tsmartUpdate(\"z.loaded\", _loaded);\n\t\t}\n\t}","commit_id":"ec74c8b934059ff3332c0051456c980e37486a76","url":"https://github.com/zkoss/zk"},{"original_method":"/**\n     * Returns a bean representing the given template resource.<p>\n     * \n     * @param cms the cms context to use for VFS operations\n     * @param resource the template resource\n     * \n     * @return bean representing the given template resource\n     * \n     * @throws CmsException if something goes wrong \n     */\n    private CmsClientTemplateBean getTemplateBean(CmsObject cms, CmsResource resource) throws CmsException {\n\n        CmsProperty titleProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_TITLE, false);\n        CmsProperty descProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_DESCRIPTION, false);\n        CmsProperty imageProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_TEMPLATE_IMAGE, false);\n        return new CmsClientTemplateBean(\n            titleProp.getValue(),\n            descProp.getValue(),\n            cms.getSitePath(resource),\n            imageProp.getValue());\n    }","id":70179,"modified_method":"/**\n     * Returns a bean representing the given template resource.<p>\n     * \n     * @param cms the cms context to use for VFS operations\n     * @param resource the template resource\n     * \n     * @return bean representing the given template resource\n     * \n     * @throws CmsException if something goes wrong \n     */\n    private CmsClientTemplateBean getTemplateBean(CmsObject cms, CmsResource resource) throws CmsException {\n\n        CmsProperty titleProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_TITLE, false);\n        CmsProperty descProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_DESCRIPTION, false);\n        CmsProperty imageProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_TEMPLATE_IMAGE, false);\n        CmsProperty selectValueProp = cms.readPropertyObject(\n            resource,\n            CmsPropertyDefinition.PROPERTY_TEMPLATE_SELECTVALUE,\n            false);\n        String sitePath = cms.getSitePath(resource);\n        String templateValue = sitePath;\n        if (!selectValueProp.isNullProperty() && !CmsStringUtil.isEmptyOrWhitespaceOnly(selectValueProp.getValue())) {\n            String selectValue = selectValueProp.getValue();\n            CmsMacroResolver resolver = new CmsMacroResolver();\n            resolver.addMacro(\"path\", sitePath);\n            templateValue = resolver.resolveMacros(selectValue);\n        }\n        return new CmsClientTemplateBean(titleProp.getValue(), descProp.getValue(), templateValue, imageProp.getValue());\n    }","commit_id":"eb4fb8ef4b7fb89dbc6d0f82979e407ac54082ce","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns a bean representing the given template resource.<p>\n     * \n     * @param cms the cms context to use for VFS operations\n     * @param resource the template resource\n     * \n     * @return bean representing the given template resource\n     * \n     * @throws CmsException if something goes wrong \n     */\n    private CmsClientTemplateBean getTemplateBean(CmsObject cms, CmsResource resource) throws CmsException {\n\n        CmsProperty titleProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_TITLE, false);\n        CmsProperty descProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_DESCRIPTION, false);\n        CmsProperty imageProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_TEMPLATE_IMAGE, false);\n        return new CmsClientTemplateBean(\n            titleProp.getValue(),\n            descProp.getValue(),\n            cms.getSitePath(resource),\n            imageProp.getValue());\n    }","id":70180,"modified_method":"/**\n     * Returns a bean representing the given template resource.<p>\n     * \n     * @param cms the cms context to use for VFS operations\n     * @param resource the template resource\n     * \n     * @return bean representing the given template resource\n     * \n     * @throws CmsException if something goes wrong \n     */\n    private CmsClientTemplateBean getTemplateBean(CmsObject cms, CmsResource resource) throws CmsException {\n\n        CmsProperty titleProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_TITLE, false);\n        CmsProperty descProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_DESCRIPTION, false);\n        CmsProperty imageProp = cms.readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_TEMPLATE_IMAGE, false);\n        CmsProperty selectValueProp = cms.readPropertyObject(\n            resource,\n            CmsPropertyDefinition.PROPERTY_TEMPLATE_SELECTVALUE,\n            false);\n        String sitePath = cms.getSitePath(resource);\n        String templateValue = sitePath;\n        if (!selectValueProp.isNullProperty() && !CmsStringUtil.isEmptyOrWhitespaceOnly(selectValueProp.getValue())) {\n            String selectValue = selectValueProp.getValue();\n            CmsMacroResolver resolver = new CmsMacroResolver();\n            resolver.addMacro(\"path\", sitePath);\n            templateValue = resolver.resolveMacros(selectValue);\n        }\n        return new CmsClientTemplateBean(titleProp.getValue(), descProp.getValue(), templateValue, imageProp.getValue());\n    }","commit_id":"15e5a14c082301bc0119aba5c9b9861be9507186","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Internal method for saving a group container\n     * \n     * @param cms the cms context \n     * @param pageStructureId the container page structure id \n     * @param groupContainer the group container to save \n     * @param locale the locale for which the group container should be saved \n     * \n     * @return the container element representing the group container\n     *  \n     * @throws CmsException if something goes wrong \n     * @throws CmsXmlException if the XML processing goes wrong \n     */\n    private CmsContainerElement internalSaveGroupContainer(\n        CmsObject cms,\n        CmsUUID pageStructureId,\n        CmsGroupContainer groupContainer,\n        String locale) throws CmsException, CmsXmlException {\n\n        ensureSession();\n        String resourceName = groupContainer.getSitePath();\n        CmsResource pageResource = getCmsObject().readResource(pageStructureId);\n        CmsResource groupContainerResource = null;\n        if (groupContainer.isNew()) {\n            CmsADEConfigData config = OpenCms.getADEManager().lookupConfiguration(\n                getCmsObject(),\n                pageResource.getRootPath());\n            CmsResourceTypeConfig typeConfig = config.getResourceType(CmsResourceTypeXmlContainerPage.GROUP_CONTAINER_TYPE_NAME);\n            groupContainerResource = typeConfig.createNewElement(getCmsObject());\n            resourceName = cms.getSitePath(groupContainerResource);\n            groupContainer.setSitePath(resourceName);\n            groupContainer.setClientId(groupContainerResource.getStructureId().toString());\n        }\n        CmsGroupContainerBean groupContainerBean = getGroupContainerBean(\n            groupContainer,\n            pageResource.getStructureId(),\n            locale);\n        cms.lockResourceTemporary(resourceName);\n        CmsFile groupContainerFile = cms.readFile(resourceName);\n        CmsXmlGroupContainer xmlGroupContainer = CmsXmlGroupContainerFactory.unmarshal(cms, groupContainerFile);\n        xmlGroupContainer.save(cms, groupContainerBean, new Locale(locale));\n        cms.unlockResource(resourceName);\n\n        CmsContainerElement element = new CmsContainerElement();\n        element.setClientId(groupContainerFile.getStructureId().toString());\n        element.setSitePath(cms.getSitePath(groupContainerFile));\n        element.setResourceType(CmsResourceTypeXmlContainerPage.GROUP_CONTAINER_TYPE_NAME);\n        return element;\n    }","id":70181,"modified_method":"/**\n     * Internal method for saving a group container\n     * \n     * @param cms the cms context \n     * @param pageStructureId the container page structure id \n     * @param groupContainer the group container to save \n     * @param locale the locale for which the group container should be saved \n     * \n     * @return the container element representing the group container\n     *  \n     * @throws CmsException if something goes wrong \n     * @throws CmsXmlException if the XML processing goes wrong \n     */\n    private CmsContainerElement internalSaveGroupContainer(\n        CmsObject cms,\n        CmsUUID pageStructureId,\n        CmsGroupContainer groupContainer,\n        String locale) throws CmsException, CmsXmlException {\n\n        ensureSession();\n        CmsResource pageResource = getCmsObject().readResource(pageStructureId);\n        CmsResource groupContainerResource = null;\n        if (groupContainer.isNew()) {\n            CmsADEConfigData config = OpenCms.getADEManager().lookupConfiguration(\n                getCmsObject(),\n                pageResource.getRootPath());\n            CmsResourceTypeConfig typeConfig = config.getResourceType(CmsResourceTypeXmlContainerPage.GROUP_CONTAINER_TYPE_NAME);\n            groupContainerResource = typeConfig.createNewElement(getCmsObject());\n            String resourceName = cms.getSitePath(groupContainerResource);\n            groupContainer.setSitePath(resourceName);\n            groupContainer.setClientId(groupContainerResource.getStructureId().toString());\n        }\n        if (groupContainerResource == null) {\n            CmsUUID id = convertToServerId(groupContainer.getClientId());\n            groupContainerResource = cms.readResource(id);\n        }\n        CmsGroupContainerBean groupContainerBean = getGroupContainerBean(\n            groupContainer,\n            pageResource.getStructureId(),\n            locale);\n        cms.lockResourceTemporary(groupContainerResource);\n        CmsFile groupContainerFile = cms.readFile(groupContainerResource);\n        CmsXmlGroupContainer xmlGroupContainer = CmsXmlGroupContainerFactory.unmarshal(cms, groupContainerFile);\n        xmlGroupContainer.save(cms, groupContainerBean, new Locale(locale));\n        cms.unlockResource(groupContainerResource);\n\n        CmsContainerElement element = new CmsContainerElement();\n        element.setClientId(groupContainerFile.getStructureId().toString());\n        element.setSitePath(cms.getSitePath(groupContainerFile));\n        element.setResourceType(CmsResourceTypeXmlContainerPage.GROUP_CONTAINER_TYPE_NAME);\n        return element;\n    }","commit_id":"2e4953c5212d2d450c7548fc7c365b747d95ea65","url":"https://github.com/alkacon/opencms-core"},{"original_method":"@Override\n    public Map<String, URL> getHomeDirectoryConfiguration()\n    {\n        // Build the result\n        Map<String, URL> result = new HashMap<String, URL>();\n\n        // Home directory.\n        for (String file : HOME_DIRECTORY_FILE_NAMES) {\n            result.put(file, this.getClass().getResource(String.format(CLASSPATH_LOCATION_PREFIX, file)));\n        }\n\n        // Core directory\n        Collection<URL> solrCoreResourcess = ClasspathHelper.forPackage(HOME_DIRECTORY_CORE_PACKAGE);\n        Reflections reflections =\n            new Reflections(new ConfigurationBuilder().setScanners(new ResourcesScanner()).setUrls(solrCoreResourcess)\n                .filterInputsBy(new FilterBuilder.Include(FilterBuilder.prefix(HOME_DIRECTORY_CORE_PACKAGE))));\n\n        for (String resource : reflections.getResources(Predicates.<String> alwaysTrue())) {\n            URL resourceURL = getClass().getResource(\"/\" + resource);\n            if (resourceURL != null) {\n                result.put(resource.substring(HOME_DIRECTORY_PREFIX.length()), resourceURL);\n            }\n        }\n\n        return result;\n    }","id":70182,"modified_method":"@Override\n    public InputStream getHomeDirectoryConfiguration()\n    {\n        return getClass().getResourceAsStream(\"/xwiki-platform-search-solr-server-data.zip\");\n    }","commit_id":"c790764a1c026a11105ec5b3f91afa651c05527e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Checks rights, creates paths and adds default config XML files if they don`t already exist.\n     * \n     * @param solrHome the directory to use as Solr home.\n     * @throws IllegalArgumentException if the provided directory is not usable (is a file, is not writable, etc.).\n     * @throws IOException if the XML files are not copied successfully.\n     */\n    private void validateAndInitializeHomeDirectory(String solrHome) throws IllegalArgumentException, IOException\n    {\n        // Validate and create the directory if it does not already exist.\n        File solrHomeDirectory = new File(solrHome);\n        if (solrHomeDirectory.exists()) {\n            // Exists but is unusable.\n            if (!solrHomeDirectory.isDirectory() || !solrHomeDirectory.canWrite() || !solrHomeDirectory.canRead()) {\n                throw new IllegalArgumentException(String.format(\n                    \"The given path [%s] must be a readable and writable directory\", solrHomeDirectory));\n            }\n        } else {\n            // Create the home directory\n            if (!solrHomeDirectory.mkdirs()) {\n                // Does not exist and can not be created.\n                throw new IllegalArgumentException(String.format(\n                    \"The given path [%s] could not be created due to and invalid value %s\", solrHomeDirectory,\n                    \"or to insufficient filesystem permissions\"));\n            }\n\n            // Initialize the Solr Home with the default configuration files if the folder does not already exist.\n            // Add the configuration files required by Solr.\n            Map<String, URL> homeDirectoryConfiguration = this.solrConfiguration.getHomeDirectoryConfiguration();\n            for (Map.Entry<String, URL> file : homeDirectoryConfiguration.entrySet()) {\n                File destinationFile = new File(solrHomeDirectory, file.getKey());\n                FileUtils.copyURLToFile(file.getValue(), destinationFile);\n            }\n        }\n    }","id":70183,"modified_method":"/**\n     * Checks rights, creates paths and adds default config XML files if they don`t already exist.\n     * \n     * @param solrHome the directory to use as Solr home.\n     * @throws IllegalArgumentException if the provided directory is not usable (is a file, is not writable, etc.).\n     * @throws IOException if the XML files are not copied successfully.\n     */\n    private void validateAndInitializeHomeDirectory(String solrHome) throws IllegalArgumentException, IOException\n    {\n        // Validate and create the directory if it does not already exist.\n        File solrHomeDirectory = new File(solrHome);\n        if (solrHomeDirectory.exists()) {\n            // Exists but is unusable.\n            if (!solrHomeDirectory.isDirectory() || !solrHomeDirectory.canWrite() || !solrHomeDirectory.canRead()) {\n                throw new IllegalArgumentException(String.format(\n                    \"The given path [%s] must be a readable and writable directory\", solrHomeDirectory));\n            }\n        } else {\n            // Create the home directory\n            if (!solrHomeDirectory.mkdirs()) {\n                // Does not exist and can not be created.\n                throw new IllegalArgumentException(String.format(\n                    \"The given path [%s] could not be created due to and invalid value %s\", solrHomeDirectory,\n                    \"or to insufficient filesystem permissions\"));\n            }\n\n            // Initialize the Solr Home with the default configuration files if the folder does not already exist.\n            // Add the configuration files required by Solr.\n\n            InputStream stream = this.solrConfiguration.getHomeDirectoryConfiguration();\n            try (ZipInputStream zstream = new ZipInputStream(stream)) {\n                for (ZipEntry entry = zstream.getNextEntry(); entry != null; entry = zstream.getNextEntry()) {\n                    if (entry.isDirectory()) {\n                        File destinationDirectory = new File(solrHomeDirectory, entry.getName());\n                        destinationDirectory.mkdirs();\n                    } else {\n                        File destinationFile = new File(solrHomeDirectory, entry.getName());\n                        FileUtils.copyInputStreamToFile(new CloseShieldInputStream(zstream), destinationFile);\n                    }\n                }\n            }\n        }\n    }","commit_id":"c790764a1c026a11105ec5b3f91afa651c05527e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Generates the configuration files required to properly configure and initialize the remote Solr server.\n     * <p/>\n     * The files are available as a zip archive (\"solr.zip\") attached to the main wiki's XWiki.SolrSearchAdmin document\n     * and exposed in the user interface of the main wiki.\n     * <p/>\n     * Note: If the attachment already exists, nothing will be done.\n     * \n     * @throws Exception if problems occur.\n     */\n    public void generateAndAttachConfigurationZipIfNotExist() throws Exception\n    {\n        XWikiContext context = getXWikiContext();\n        XWiki xwiki = context.getWiki();\n\n        // Get or Create the attachment and dump the content of the zip into the attachment.\n        DocumentReference configDocumentReference =\n            new DocumentReference(getXWikiContext().getMainXWiki(), \"XWiki\", \"SolrSearchAdmin\");\n        XWikiDocument configurationDocument = xwiki.getDocument(configDocumentReference, context);\n        XWikiAttachment configurationZipAttachment = configurationDocument.getAttachment(CONFIGURATION_ZIP_FILE_NAME);\n        if (configurationZipAttachment == null) {\n            // Create the zip file to attach.\n            Map<String, URL> homeDirectoryFiles = this.configuration.getHomeDirectoryConfiguration();\n            InputStream zipFileInputStream = createZip(homeDirectoryFiles);\n\n            // Attach the file.\n            try {\n                configurationDocument.addAttachment(CONFIGURATION_ZIP_FILE_NAME, zipFileInputStream, context);\n            } finally {\n                zipFileInputStream.close();\n            }\n        }\n    }","id":70184,"modified_method":"/**\n     * Generates the configuration files required to properly configure and initialize the remote Solr server.\n     * <p/>\n     * The files are available as a zip archive (\"solr.zip\") attached to the main wiki's XWiki.SolrSearchAdmin document\n     * and exposed in the user interface of the main wiki.\n     * <p/>\n     * Note: If the attachment already exists, nothing will be done.\n     * \n     * @throws Exception if problems occur.\n     */\n    public void generateAndAttachConfigurationZipIfNotExist() throws Exception\n    {\n        XWikiContext context = this.xcontextProvider.get();\n        XWiki xwiki = context.getWiki();\n\n        // Get or Create the attachment and dump the content of the zip into the attachment.\n        DocumentReference configDocumentReference =\n            new DocumentReference(context.getMainXWiki(), \"XWiki\", \"SolrSearchAdmin\");\n        XWikiDocument configurationDocument = xwiki.getDocument(configDocumentReference, context);\n        XWikiAttachment configurationZipAttachment = configurationDocument.getAttachment(CONFIGURATION_ZIP_FILE_NAME);\n        if (configurationZipAttachment == null) {\n            // Create the zip file to attach.\n            try (InputStream inputStream = this.configuration.getHomeDirectoryConfiguration()) {\n                // Attach the file.\n                configurationDocument.addAttachment(CONFIGURATION_ZIP_FILE_NAME, inputStream, context);\n                xwiki.saveDocument(configurationDocument, \"Attach default SOLR configuration\", context);\n            }\n        }\n    }","commit_id":"c790764a1c026a11105ec5b3f91afa651c05527e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        Permanent permanent = game.getPermanent(source.getSourceId());\r\n        if (player != null && permanent != null){\r\n            filter.add(new AuraCardCanAttachToPermanentId(permanent.getId()));\r\n            TargetCardInHand target = new TargetCardInHand(0, 1, filter);\r\n            if (player.choose(Outcome.PutCardInPlay, target, source.getSourceId(), game)) {\r\n                Card auraInHand = game.getCard(target.getFirstTarget());\r\n                if (auraInHand != null) {\r\n                    player.putOntoBattlefieldWithInfo(auraInHand, game, Zone.HAND, source.getSourceId());\r\n                    permanent.addAttachment(auraInHand.getId(), game);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":70185,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        Permanent permanent = game.getPermanent(source.getSourceId());\r\n        if (player != null && permanent != null){\r\n            FilterCard filter = new FilterCard();\r\n            filter.add(new SubtypePredicate(\"Aura\"));\r\n            filter.add(new AuraCardCanAttachToPermanentId(permanent.getId()));\r\n            TargetCardInHand target = new TargetCardInHand(0, 1, filter);\r\n            if (player.choose(Outcome.PutCardInPlay, target, source.getSourceId(), game)) {\r\n                Card auraInHand = game.getCard(target.getFirstTarget());\r\n                if (auraInHand != null) {\r\n                    game.getState().setValue(\"attachTo:\" + auraInHand.getId(), permanent);\r\n                    if (player.putOntoBattlefieldWithInfo(auraInHand, game, Zone.HAND, source.getSourceId())) {\r\n                        permanent.addAttachment(auraInHand.getId(), game);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"61dff9e3c21dc30adc57eaf5a2cef574ee9700f4","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Permanent aura = game.getPermanent(source.getFirstTarget());\r\n        Permanent creature = game.getPermanent(source.getTargets().get(1).getFirstTarget());\r\n        if (aura != null && creature != null) {\r\n            Permanent oldCreature = game.getPermanent(aura.getAttachedTo());\r\n            if (oldCreature == null || oldCreature.equals(creature)) {\r\n                return false;\r\n            }\r\n            if (oldCreature.removeAttachment(aura.getId(), game)) {\r\n                return creature.addAttachment(aura.getId(), game);\r\n            }\r\n        }\r\n        return false;\r\n    }","id":70186,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (controller != null) {\r\n            Permanent aura = game.getPermanent(source.getFirstTarget());\r\n            Permanent creature = game.getPermanent(source.getTargets().get(1).getFirstTarget());\r\n            if (aura != null && creature != null) {\r\n                Permanent oldCreature = game.getPermanent(aura.getAttachedTo());\r\n                if (oldCreature != null && !oldCreature.equals(creature)) {\r\n                    Target auraTarget = aura.getSpellAbility().getTargets().get(0);\r\n                    if (!auraTarget.canTarget(creature.getId(), game))  {\r\n                        game.informPlayers(aura.getLogName() + \" was not attched to \" +creature.getLogName() + \" because it's no legal target for the aura\" );\r\n                    } else if (oldCreature.removeAttachment(aura.getId(), game)) {\r\n                        game.informPlayers(aura.getLogName() + \" was unattached from \" + oldCreature.getLogName() + \" and attached to \" + creature.getLogName());\r\n                        creature.addAttachment(aura.getId(), game);\r\n                    }\r\n                }\r\n            }            \r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"387538154676f19138df85857065dd0be83222c9","url":"https://github.com/magefree/mage"},{"original_method":"/**\n     * @see org.jboss.webservices.integration.deployers.deployment.DeploymentModelBuilder#newDeploymentModel(DeploymentUnit)\n     *\n     * @param unit deployment unit\n     */\n    public final void newDeploymentModel(final DeploymentUnit unit) {\n        final ArchiveDeployment dep;\n        if (unit.hasAttachment(DEPLOYMENT_KEY)) {\n            dep = (ArchiveDeployment) unit.getAttachment(DEPLOYMENT_KEY);\n        } else {\n            try {\n                dep = this.newDeployment(unit);\n            } catch (DeploymentUnitProcessingException e) {\n                throw new RuntimeException(e);\n            }\n            dep.addAttachment(DeploymentUnit.class, unit);\n            unit.putAttachment(DEPLOYMENT_KEY, dep);\n        }\n\n        this.build(dep, unit);\n    }","id":70187,"modified_method":"/**\n     * @see org.jboss.webservices.integration.deployers.deployment.DeploymentModelBuilder#newDeploymentModel(DeploymentUnit)\n     *\n     * @param unit deployment unit\n     */\n    public final void newDeploymentModel(final DeploymentUnit unit) {\n        final ArchiveDeployment dep;\n        if (unit.hasAttachment(DEPLOYMENT_KEY)) {\n            dep = (ArchiveDeployment) unit.getAttachment(DEPLOYMENT_KEY);\n        } else {\n            try {\n                dep = this.newDeployment(unit);\n            } catch (DeploymentUnitProcessingException e) {\n                throw new RuntimeException(e);\n            }\n            dep.addAttachment(DeploymentUnit.class, unit);\n            unit.putAttachment(DEPLOYMENT_KEY, dep);\n            // propagate\n            final JBossWebMetaData webMD = getJBossWebMetaData(unit);\n            dep.addAttachment(JBossWebMetaData.class, webMD);\n            // propagate\n            final WebservicesMetaData webservicesMD = getOptionalAttachment(unit, WEBSERVICES_METADATA_KEY);\n            dep.addAttachment(WebservicesMetaData.class, webservicesMD);\n            // propagate\n            final JBossWebservicesMetaData jbossWebservicesMD = getOptionalAttachment(unit, JBOSS_WEBSERVICES_METADATA_KEY);\n            dep.addAttachment(JBossWebservicesMetaData.class, jbossWebservicesMD);\n            // propagate\n            final JAXWSDeployment jaxwsDeployment = getOptionalAttachment(unit, JAXWS_ENDPOINTS_KEY);\n            dep.addAttachment(JAXWSDeployment.class, jaxwsDeployment);\n        }\n\n        this.build(dep, unit);\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Builds webservices meta data. This methods sets:\n     * <ul>\n     * <li>context root<\/li>\n     * <li>wsdl location resolver<\/li>\n     * <li>config name<\/li>\n     * <li>config file<\/li>\n     * <\/ul>\n     *\n     * @param dep\n     *            webservice deployment\n     * @param ejbArchiveMD\n     *            universal EJB meta data model\n     */\n    private void buildWebservicesMetaData(final Deployment dep, final EJBArchiveMetaData ejbArchiveMD) {\n        return;\n        /* TODO: implement\n        final JBossMetaData jbossMD = WSHelper.getRequiredAttachment(dep, JBossMetaData.class);\n        final WebservicesMetaData webservicesMD = jbossMD.getWebservices();\n\n        if (webservicesMD == null) {\n            return;\n        }\n\n        // set context root\n        String contextRoot = webservicesMD.getContextRoot();\n        final WebserviceDescriptionsMetaData wsDescriptionsMD = webservicesMD.getWebserviceDescriptions();\n\n        if (wsDescriptionsMD != null) {\n            // set wsdl location resolver\n            final PublishLocationAdapter resolver = new PublishLocationAdapterImpl(wsDescriptionsMD);\n            ejbArchiveMD.setPublishLocationAdapter(resolver);\n\n            /*\n             * TODO: implement final WebserviceDescriptionMetaData\n             * wsDescriptionMD = ASHelper\n             * .getWebserviceDescriptionMetaData(wsDescriptionsMD); if\n             * (wsDescriptionMD != null) { if (!Constants.BC_CONTEXT_MODE &&\n             * contextRoot == null && !hasContextRoot(ejbArchiveMD)) {\n             * contextRoot = wsDescriptionMD.getWebserviceDescriptionName(); //\n             * TCK6 fallback }\n             *\n             * final String configName = wsDescriptionMD.getConfigName(); final\n             * String configFile = wsDescriptionMD.getConfigFile();\n             *\n             * // set config name this.log.debug(\"Setting config name: \" +\n             * configName);\n             * ejbArchiveMD.setConfigName(wsDescriptionMD.getConfigName());\n             *\n             * // set config file this.log.debug(\"Setting config file: \" +\n             * configFile);\n             * ejbArchiveMD.setConfigFile(wsDescriptionMD.getConfigFile()); }\n             */\n//        }\n//\n//        ejbArchiveMD.setWebServiceContextRoot(contextRoot);\n//        this.log.debug(\"Setting context root: \" + contextRoot);\n    }","id":70188,"modified_method":"/**\n     * Builds webservices meta data. This methods sets:\n     * <ul>\n     *   <li>context root<\/li>\n     *   <li>wsdl location resolver<\/li>\n     *   <li>config name<\/li>\n     *   <li>config file<\/li>\n     * <\/ul>\n     *\n     * @param dep webservice deployment\n     * @param ejbArchiveMD universal EJB meta data model\n     */\n    private void buildWebservicesMetaData(final Deployment dep, final EJBArchiveMetaData ejbArchiveMD)\n    {\n       final JBossWebservicesMetaData webservicesMD = WSHelper.getOptionalAttachment(dep, JBossWebservicesMetaData.class);\n\n       if (webservicesMD == null) return;\n\n       // set context root\n       final String contextRoot = webservicesMD.getContextRoot();\n       ejbArchiveMD.setWebServiceContextRoot(contextRoot);\n       this.log.debug(\"Setting context root: \" + contextRoot);\n\n       // set config name\n       final String configName = webservicesMD.getConfigName();\n       this.log.debug(\"Setting config name: \" + configName);\n       ejbArchiveMD.setConfigName(configName);\n\n       // set config file\n       final String configFile = webservicesMD.getConfigFile();\n       this.log.debug(\"Setting config file: \" + configFile);\n       ejbArchiveMD.setConfigFile(configFile);\n\n       // set wsdl location resolver\n       final WebserviceDescriptionMetaData[] wsDescriptionsMD = webservicesMD.getWebserviceDescriptions();\n       final PublishLocationAdapter resolver = new PublishLocationAdapterImpl(wsDescriptionsMD);\n       ejbArchiveMD.setPublishLocationAdapter(resolver);\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates new JAXRPC JSE deployment and registers it with deployment unit.\n     *\n     * @param dep webservice deployment\n     * @param unit deployment unit\n     */\n    @Override\n    protected void build(final Deployment dep, final DeploymentUnit unit) {\n        // propagate\n        final JBossWebMetaData webMetaData = getJBossWebMetaData(unit);\n        dep.addAttachment(JBossWebMetaData.class, webMetaData);\n        // propagate\n        final WebservicesMetaData wsMetaData = getOptionalAttachment(unit, WEBSERVICES_METADATA_KEY);\n        dep.addAttachment(WebservicesMetaData.class, wsMetaData);\n\n        log.debug(\"Creating JAXRPC POJO endpoints meta data model\");\n        for (final WebserviceDescriptionMetaData wsDescriptionMD : wsMetaData.getWebserviceDescriptions()) {\n            for (final PortComponentMetaData portCompomentMD : wsDescriptionMD.getPortComponents()) {\n                final String pojoEndpointName = portCompomentMD.getServletLink();\n                log.debug(\"POJO name: \" + pojoEndpointName);\n                final ServletMetaData servletMD = getServletForName(webMetaData, pojoEndpointName);\n                final String pojoEndpointClassName = getEndpointClassName(servletMD);\n                log.debug(\"POJO class: \" + pojoEndpointClassName);\n\n                newHttpEndpoint(pojoEndpointClassName, pojoEndpointName, dep);\n            }\n        }\n    }","id":70189,"modified_method":"/**\n     * Creates new JAXRPC JSE deployment and registers it with deployment unit.\n     *\n     * @param dep webservice deployment\n     * @param unit deployment unit\n     */\n    @Override\n    protected void build(final Deployment dep, final DeploymentUnit unit) {\n        // TODO: introduce deployment with jaxrpc POJOs\n        final JBossWebMetaData webMD = getRequiredAttachment(dep, JBossWebMetaData.class);\n        final WebservicesMetaData webservicesMD = getRequiredAttachment(dep, WebservicesMetaData.class);\n\n        log.debug(\"Creating JAXRPC POJO endpoints meta data model\");\n        for (final WebserviceDescriptionMetaData wsDescriptionMD : webservicesMD.getWebserviceDescriptions()) {\n            for (final PortComponentMetaData portCompomentMD : wsDescriptionMD.getPortComponents()) {\n                final String pojoEndpointName = portCompomentMD.getServletLink();\n                log.debug(\"POJO name: \" + pojoEndpointName);\n                final ServletMetaData servletMD = getServletForName(webMD, pojoEndpointName);\n                final String pojoEndpointClassName = getEndpointClassName(servletMD);\n                log.debug(\"POJO class: \" + pojoEndpointClassName);\n\n                newHttpEndpoint(pojoEndpointClassName, pojoEndpointName, dep);\n            }\n        }\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates new JAXWS EJB3 deployment and registers it with deployment unit.\n     *\n     * @param dep webservice deployment\n     * @param unit deployment unit\n     */\n    @Override\n    protected void build(final Deployment dep, final DeploymentUnit unit) {\n        // propagate\n        final JAXWSDeployment jaxwsDeployment = unit.getAttachment(JAXWS_ENDPOINTS_KEY);\n        dep.addAttachment(JAXWSDeployment.class, jaxwsDeployment);\n        // propagate\n        final JBossWebMetaData webMetaData = getJBossWebMetaData(unit);\n        dep.addAttachment(JBossWebMetaData.class, webMetaData);\n\n        log.debug(\"Creating JAXWS EJB3 endpoints meta data model\");\n        for (final EJBEndpoint ejbEndpoint : getJaxwsEjbs(unit)) {\n            final String ejbName = ejbEndpoint.getName();\n            log.debug(\"EJB3 name: \" + ejbName);\n            final String ejbClass = ejbEndpoint.getClassName();\n            log.debug(\"EJB3 class: \" + ejbClass);\n\n            final Endpoint ep = newHttpEndpoint(ejbClass, ejbName, dep);\n            ep.setProperty(EJB_COMPONENT_VIEW_NAME, ejbEndpoint.getComponentViewName());\n        }\n    }","id":70190,"modified_method":"/**\n     * Creates new JAXWS EJB3 deployment and registers it with deployment unit.\n     *\n     * @param dep webservice deployment\n     * @param unit deployment unit\n     */\n    @Override\n    protected void build(final Deployment dep, final DeploymentUnit unit) {\n        log.debug(\"Creating JAXWS EJB3 endpoints meta data model\");\n        for (final EJBEndpoint ejbEndpoint : getJaxwsEjbs(unit)) {\n            final String ejbName = ejbEndpoint.getName();\n            log.debug(\"EJB3 name: \" + ejbName);\n            final String ejbClass = ejbEndpoint.getClassName();\n            log.debug(\"EJB3 class: \" + ejbClass);\n            final Endpoint ep = newHttpEndpoint(ejbClass, ejbName, dep);\n            ep.setProperty(EJB_COMPONENT_VIEW_NAME, ejbEndpoint.getComponentViewName());\n        }\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates new JAXWS JSE deployment and registers it with deployment unit.\n     *\n     * @param dep webservice deployment\n     * @param unit deployment unit\n     */\n    @Override\n    protected void build(final Deployment dep, final DeploymentUnit unit) {\n        // propagate\n        final JBossWebMetaData webMetaData = getJBossWebMetaData(unit);\n        dep.addAttachment(JBossWebMetaData.class, webMetaData);\n        // propagate\n        final JMSEndpointsMetaData jmsEndpointsMD = getOptionalAttachment(unit, JMS_ENDPOINT_METADATA_KEY);\n        dep.addAttachment(JMSEndpointsMetaData.class, jmsEndpointsMD);\n\n        log.debug(\"Creating JAXWS JMS endpoints meta data model\");\n        for (final JMSEndpointMetaData jmsEndpoint : jmsEndpointsMD.getEndpointsMetaData()) {\n            final String jmsEndpointName = jmsEndpoint.getName();\n            log.debug(\"JMS name: \" + jmsEndpointName);\n            final String jmsEndpointClassName = jmsEndpoint.getImplementor();\n            log.debug(\"JMS class: \" + jmsEndpointClassName);\n            final String jmsEndpointAddress = jmsEndpoint.getSoapAddress();\n            log.debug(\"JMS address: \" + jmsEndpointAddress);\n\n            newJMSEndpoint(jmsEndpointClassName, jmsEndpointName, jmsEndpointAddress, dep);\n        }\n    }","id":70191,"modified_method":"/**\n     * Creates new JAXWS JSE deployment and registers it with deployment unit.\n     *\n     * @param dep webservice deployment\n     * @param unit deployment unit\n     */\n    @Override\n    protected void build(final Deployment dep, final DeploymentUnit unit) {\n        // propagate\n        final JMSEndpointsMetaData jmsEndpointsMD = getOptionalAttachment(unit, JMS_ENDPOINT_METADATA_KEY);\n        dep.addAttachment(JMSEndpointsMetaData.class, jmsEndpointsMD);\n\n        log.debug(\"Creating JAXWS JMS endpoints meta data model\");\n        for (final JMSEndpointMetaData jmsEndpoint : jmsEndpointsMD.getEndpointsMetaData()) {\n            final String jmsEndpointName = jmsEndpoint.getName();\n            log.debug(\"JMS name: \" + jmsEndpointName);\n            final String jmsEndpointClassName = jmsEndpoint.getImplementor();\n            log.debug(\"JMS class: \" + jmsEndpointClassName);\n            final String jmsEndpointAddress = jmsEndpoint.getSoapAddress();\n            log.debug(\"JMS address: \" + jmsEndpointAddress);\n            newJMSEndpoint(jmsEndpointClassName, jmsEndpointName, jmsEndpointAddress, dep);\n        }\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates new JAXWS JSE deployment and registers it with deployment unit.\n     *\n     * @param dep webservice deployment\n     * @param unit deployment unit\n     */\n    @Override\n    protected void build(final Deployment dep, final DeploymentUnit unit) {\n        // propagate\n        final JBossWebMetaData webMetaData = getJBossWebMetaData(unit);\n        dep.addAttachment(JBossWebMetaData.class, webMetaData);\n\n        log.debug(\"Creating JAXWS POJO endpoints meta data model\");\n        for (final POJOEndpoint pojoEndpoint : getJaxwsPojos(unit)) {\n            final String pojoEndpointName = pojoEndpoint.getName();\n            log.debug(\"POJO name: \" + pojoEndpointName);\n            final String pojoEndpointClassName = pojoEndpoint.getClassName();\n            log.debug(\"POJO\" + pojoEndpointClassName);\n\n            newHttpEndpoint(pojoEndpointClassName, pojoEndpointName, dep);\n        }\n    }","id":70192,"modified_method":"/**\n     * Creates new JAXWS JSE deployment and registers it with deployment unit.\n     *\n     * @param dep webservice deployment\n     * @param unit deployment unit\n     */\n    @Override\n    protected void build(final Deployment dep, final DeploymentUnit unit) {\n        log.debug(\"Creating JAXWS POJO endpoints meta data model\");\n        for (final POJOEndpoint pojoEndpoint : getJaxwsPojos(unit)) {\n            final String pojoEndpointName = pojoEndpoint.getName();\n            log.debug(\"POJO name: \" + pojoEndpointName);\n            final String pojoEndpointClassName = pojoEndpoint.getClassName();\n            log.debug(\"POJO\" + pojoEndpointClassName);\n            newHttpEndpoint(pojoEndpointClassName, pojoEndpointName, dep);\n        }\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * @see AbstractMetaDataBuilderEJB#buildEnterpriseBeansMetaData(Deployment,\n     *      EJBArchiveMetaData)\n     *\n     * @param dep\n     *            webservice deployment\n     * @param ejbArchiveMD\n     *            EJB archive meta data\n     */\n    @Override\n    protected void buildEnterpriseBeansMetaData(final Deployment dep, final EJBArchiveMetaData ejbArchiveMD) {\n        if (!WSHelper.isJaxwsJseDeployment(dep)) { // [AS7-1605] support\n            final JBossWebMetaData jbossWebMD = WSHelper.getOptionalAttachment(dep, JBossWebMetaData.class);\n            final String contextRoot = getContextRoot(dep, jbossWebMD);\n            if (contextRoot != null) {\n                final JSEArchiveMetaData jseArchiveMD = new JSEArchiveMetaData();\n                jseArchiveMD.setContextRoot(contextRoot);\n                dep.addAttachment(JSEArchiveMetaData.class, jseArchiveMD);\n            }\n        }\n\n        final JAXWSDeployment ejb3Deployment = WSHelper.getRequiredAttachment(dep, JAXWSDeployment.class);\n        final List<EJBMetaData> wsEjbsMD = new LinkedList<EJBMetaData>();\n\n        for (final EJBEndpoint jbossEjbMD : ejb3Deployment.getEjbEndpoints()) {\n            this.buildEnterpriseBeanMetaData(wsEjbsMD, jbossEjbMD);\n        }\n\n        ejbArchiveMD.setEnterpriseBeans(wsEjbsMD);\n    }","id":70193,"modified_method":"/**\n     * @see AbstractMetaDataBuilderEJB#buildEnterpriseBeansMetaData(Deployment,\n     *      EJBArchiveMetaData)\n     *\n     * @param dep\n     *            webservice deployment\n     * @param ejbArchiveMD\n     *            EJB archive meta data\n     */\n    @Override\n    protected void buildEnterpriseBeansMetaData(final Deployment dep, final EJBArchiveMetaData ejbArchiveMD) {\n        if (!WSHelper.isJaxwsJseDeployment(dep)) { // [AS7-1605] support\n            final JBossWebMetaData jbossWebMD = WSHelper.getOptionalAttachment(dep, JBossWebMetaData.class);\n            final String contextRoot = getContextRoot(dep, jbossWebMD);\n            if (contextRoot != null) {\n                final JSEArchiveMetaData jseArchiveMD = new JSEArchiveMetaData();\n                jseArchiveMD.setContextRoot(contextRoot);\n                dep.addAttachment(JSEArchiveMetaData.class, jseArchiveMD);\n            }\n        }\n\n        final JAXWSDeployment ejb3Deployment = WSHelper.getRequiredAttachment(dep, JAXWSDeployment.class);\n        final List<EJBMetaData> wsEjbsMD = new LinkedList<EJBMetaData>();\n        final JBossWebservicesMetaData jbossWebservicesMD = WSHelper.getOptionalAttachment(dep, JBossWebservicesMetaData.class);\n\n        for (final EJBEndpoint jbossEjbMD : ejb3Deployment.getEjbEndpoints()) {\n            this.buildEnterpriseBeanMetaData(wsEjbsMD, jbossEjbMD, jbossWebservicesMD);\n        }\n\n        ejbArchiveMD.setEnterpriseBeans(wsEjbsMD);\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Builds JBoss agnostic EJB meta data.\n     *\n     * @param wsEjbsMD\n     *            jboss agnostic EJBs meta data\n     * @param jbossEjbMD\n     *            jboss specific EJB meta data\n     */\n    private void buildEnterpriseBeanMetaData(final List<EJBMetaData> wsEjbsMD, final EJBEndpoint jbossEjbMD) {\n        final EJBMetaData wsEjbMD = this.newEjbMetaData(jbossEjbMD);\n\n        if (wsEjbMD != null) {\n            // set EJB name and class\n            wsEjbMD.setEjbName(jbossEjbMD.getName());\n            wsEjbMD.setEjbClass(jbossEjbMD.getClassName());\n\n            /*\n             * TODO: implement final PortComponentSpec portComponentAnnotation =\n             * jbossEjbMD.getAnnotation(PortComponentSpec.class); if\n             * (portComponentAnnotation != null) { // set port component meta\n             * data wsEjbMD.setPortComponentName(portComponentAnnotation.\n             * portComponentName());\n             * wsEjbMD.setPortComponentURI(portComponentAnnotation\n             * .portComponentURI());\n             *\n             * // set security meta data final EJBSecurityMetaData\n             * wsEjbSecurityMD = new EJBSecurityMetaData();\n             * wsEjbSecurityMD.setAuthMethod\n             * (portComponentAnnotation.authMethod());\n             * wsEjbSecurityMD.setTransportGuarantee\n             * (portComponentAnnotation.transportGuarantee());\n             * wsEjbSecurityMD.setSecureWSDLAccess\n             * (portComponentAnnotation.secureWSDLAccess());\n             * wsEjbMD.setSecurityMetaData(wsEjbSecurityMD); }\n             */\n\n            wsEjbsMD.add(wsEjbMD);\n        }\n\n    }","id":70194,"modified_method":"/**\n     * Builds JBoss agnostic EJB meta data.\n     *\n     * @param wsEjbsMD\n     *            jboss agnostic EJBs meta data\n     * @param jbossEjbMD\n     *            jboss specific EJB meta data\n     */\n    private void buildEnterpriseBeanMetaData(final List<EJBMetaData> wsEjbsMD, final EJBEndpoint jbossEjbMD, final JBossWebservicesMetaData jbossWebservicesMD) {\n        final EJBMetaData wsEjbMD = new SLSBMetaData();\n\n        if (wsEjbMD != null) {\n            // set EJB name and class\n            wsEjbMD.setEjbName(jbossEjbMD.getName());\n            wsEjbMD.setEjbClass(jbossEjbMD.getClassName());\n\n            final PortComponentMetaData portComponentMD = getPortComponent(jbossEjbMD.getName(), jbossWebservicesMD);\n            if (portComponentMD != null) {\n               // set port component meta data\n               wsEjbMD.setPortComponentName(portComponentMD.getPortComponentName());\n               wsEjbMD.setPortComponentURI(portComponentMD.getPortComponentURI());\n\n               // set security meta data\n               final EJBSecurityMetaData smd = new EJBSecurityMetaData();\n               smd.setAuthMethod(portComponentMD.getAuthMethod());\n               smd.setTransportGuarantee(portComponentMD.getTransportGuarantee());\n               smd.setSecureWSDLAccess(portComponentMD.getSecureWSDLAccess());\n               wsEjbMD.setSecurityMetaData(smd);\n            }\n\n            wsEjbsMD.add(wsEjbMD);\n        }\n\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Builds universal JSE meta data model that is AS agnostic.\n     *\n     * @param dep webservice deployment\n     * @return universal JSE meta data model\n     */\n    JSEArchiveMetaData create(final Deployment dep) {\n        final JBossWebMetaData jbossWebMD = WSHelper.getRequiredAttachment(dep, JBossWebMetaData.class);\n        final DeploymentUnit unit = WSHelper.getRequiredAttachment(dep, DeploymentUnit.class);\n        final List<POJOEndpoint> pojoEndpoints = ASHelper.getJaxwsPojos(unit);\n        final JSEArchiveMetaData jseArchiveMD = new JSEArchiveMetaData();\n\n        // set context root\n        final String contextRoot = getContextRoot(dep, jbossWebMD);\n        jseArchiveMD.setContextRoot(contextRoot);\n\n        // set servlet url patterns mappings\n        final Map<String, String> servletMappings = this.getServletUrlPatternsMappings(jbossWebMD, pojoEndpoints);\n        jseArchiveMD.setServletMappings(servletMappings);\n\n        // set servlet class names mappings\n        final Map<String, String> servletClassNamesMappings = this.getServletClassMappings(jbossWebMD, pojoEndpoints);\n        jseArchiveMD.setServletClassNames(servletClassNamesMappings);\n\n        // set security domain\n        final String securityDomain = jbossWebMD.getSecurityDomain();\n        jseArchiveMD.setSecurityDomain(securityDomain);\n\n        // set wsdl location resolver\n        final PublishLocationAdapter resolver = new PublishLocationAdapterImpl(jbossWebMD.getWebserviceDescriptions());\n        jseArchiveMD.setPublishLocationAdapter(resolver);\n\n        // set security meta data\n        final List<JSESecurityMetaData> jseSecurityMDs = this.getSecurityMetaData(jbossWebMD.getSecurityConstraints());\n        jseArchiveMD.setSecurityMetaData(jseSecurityMDs);\n\n        // set config name and file\n        this.setConfigNameAndFile(jseArchiveMD, jbossWebMD);\n\n        return jseArchiveMD;\n    }","id":70195,"modified_method":"/**\n     * Builds universal JSE meta data model that is AS agnostic.\n     *\n     * @param dep webservice deployment\n     * @return universal JSE meta data model\n     */\n    JSEArchiveMetaData create(final Deployment dep) {\n        final JBossWebMetaData jbossWebMD = WSHelper.getRequiredAttachment(dep, JBossWebMetaData.class);\n        final DeploymentUnit unit = WSHelper.getRequiredAttachment(dep, DeploymentUnit.class);\n        final List<POJOEndpoint> pojoEndpoints = ASHelper.getJaxwsPojos(unit);\n        final JSEArchiveMetaData jseArchiveMD = new JSEArchiveMetaData();\n\n        // set context root\n        final String contextRoot = getContextRoot(dep, jbossWebMD);\n        jseArchiveMD.setContextRoot(contextRoot);\n\n        // set servlet url patterns mappings\n        final Map<String, String> servletMappings = this.getServletUrlPatternsMappings(jbossWebMD, pojoEndpoints);\n        jseArchiveMD.setServletMappings(servletMappings);\n\n        // set servlet class names mappings\n        final Map<String, String> servletClassNamesMappings = this.getServletClassMappings(jbossWebMD, pojoEndpoints);\n        jseArchiveMD.setServletClassNames(servletClassNamesMappings);\n\n        // set security domain\n        final String securityDomain = jbossWebMD.getSecurityDomain();\n        jseArchiveMD.setSecurityDomain(securityDomain);\n\n        // set wsdl location resolver\n        final JBossWebservicesMetaData jbossWebservicesMD = WSHelper.getOptionalAttachment(dep, JBossWebservicesMetaData.class);\n        if (jbossWebservicesMD != null) {\n            final PublishLocationAdapter resolver = new PublishLocationAdapterImpl(jbossWebservicesMD.getWebserviceDescriptions());\n            jseArchiveMD.setPublishLocationAdapter(resolver);\n        }\n\n        // set security meta data\n        final List<JSESecurityMetaData> jseSecurityMDs = this.getSecurityMetaData(jbossWebMD.getSecurityConstraints());\n        jseArchiveMD.setSecurityMetaData(jseSecurityMDs);\n\n        // set config name and file\n        this.setConfigNameAndFile(jseArchiveMD, jbossWebMD, jbossWebservicesMD);\n\n        return jseArchiveMD;\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Sets config name and config file.\n     *\n     * @param jseArchiveMD universal JSE meta data model\n     * @param jbossWebMD jboss web meta data\n     */\n    private void setConfigNameAndFile(final JSEArchiveMetaData jseArchiveMD, final JBossWebMetaData jbossWebMD) {\n        final WebserviceDescriptionsMetaData wsDescriptionsMD = jbossWebMD.getWebserviceDescriptions();\n        final WebserviceDescriptionMetaData wsDescriptionMD = ASHelper.getWebserviceDescriptionMetaData(wsDescriptionsMD);\n        if (wsDescriptionMD != null) {\n            if (wsDescriptionMD.getConfigName() != null) {\n                jseArchiveMD.setConfigName(wsDescriptionMD.getConfigName());\n                jseArchiveMD.setConfigFile(wsDescriptionMD.getConfigFile());\n\n                // ensure higher priority against web.xml context parameters\n                return;\n            }\n        }\n\n        final List<ParamValueMetaData> contextParams = jbossWebMD.getContextParams();\n        if (contextParams != null) {\n            for (final ParamValueMetaData contextParam : contextParams) {\n                if (WSConstants.JBOSSWS_CONFIG_NAME.equals(contextParam.getParamName())) {\n                    jseArchiveMD.setConfigName(contextParam.getParamValue());\n                }\n                if (WSConstants.JBOSSWS_CONFIG_FILE.equals(contextParam.getParamName())) {\n                    jseArchiveMD.setConfigFile(contextParam.getParamValue());\n                }\n            }\n        }\n    }","id":70196,"modified_method":"/**\n     * Sets config name and config file.\n     *\n     * @param jseArchiveMD universal JSE meta data model\n     * @param jbossWebMD jboss web meta data\n     */\n    private void setConfigNameAndFile(final JSEArchiveMetaData jseArchiveMD, final JBossWebMetaData jbossWebMD, final JBossWebservicesMetaData jbossWebservicesMD) {\n        if (jbossWebservicesMD != null) {\n           if (jbossWebservicesMD.getConfigName() != null) {\n              jseArchiveMD.setConfigName(jbossWebservicesMD.getConfigName());\n              jseArchiveMD.setConfigFile(jbossWebservicesMD.getConfigFile());\n\n              // ensure higher priority against web.xml context parameters\n              return;\n           }\n        }\n\n\n        final List<ParamValueMetaData> contextParams = jbossWebMD.getContextParams();\n        if (contextParams != null) {\n            for (final ParamValueMetaData contextParam : contextParams) {\n                if (WSConstants.JBOSSWS_CONFIG_NAME.equals(contextParam.getParamName())) {\n                    jseArchiveMD.setConfigName(contextParam.getParamValue());\n                }\n                if (WSConstants.JBOSSWS_CONFIG_FILE.equals(contextParam.getParamName())) {\n                    jseArchiveMD.setConfigFile(contextParam.getParamValue());\n                }\n            }\n        }\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Constructor.\n     *\n     * @param wsDescriptionsMD webservice descriptions meta data\n     */\n    PublishLocationAdapterImpl(final WebserviceDescriptionsMetaData wsDescriptionsMD) {\n        super();\n\n        this.wsDescriptionsMD = wsDescriptionsMD;\n    }","id":70197,"modified_method":"/**\n     * Constructor.\n     *\n     * @param wsDescriptionsMD webservice descriptions meta data\n     */\n    PublishLocationAdapterImpl(final WebserviceDescriptionMetaData[] wsDescriptionsMD) {\n        this.wsDescriptionsMD = wsDescriptionsMD;\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * @see org.jboss.wsf.spi.metadata.j2ee.PublishLocationAdapter#getWsdlPublishLocationByName(String)\n     *\n     * @param endpointName endpoint name\n     * @return publish location\n     */\n    public String getWsdlPublishLocationByName(final String endpointName) {\n        if (this.wsDescriptionsMD != null) {\n            final WebserviceDescriptionMetaData endpointMD = this.wsDescriptionsMD.get(endpointName);\n\n            if (endpointMD != null) {\n                return endpointMD.getWsdlPublishLocation();\n            }\n        }\n\n        return null;\n    }","id":70198,"modified_method":"/**\n     * @see org.jboss.wsf.spi.metadata.j2ee.PublishLocationAdapter#getWsdlPublishLocationByName(String)\n     *\n     * @param endpointName endpoint name\n     * @return publish location\n     */\n    public String getWsdlPublishLocationByName(final String endpointName) {\n        if (wsDescriptionsMD != null) {\n            for (final WebserviceDescriptionMetaData wsDescriptionMD : wsDescriptionsMD) {\n                if (endpointName.equals(wsDescriptionMD.getWebserviceDescriptionName()))\n                    return wsDescriptionMD.getWsdlPublishLocation();\n            }\n        }\n\n        return null;\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void activate(final DeploymentProcessorTarget processorTarget, final boolean appclient) {\n        // Add a EEResourceReferenceProcessor which handles @Resource references of type WebServiceContext.\n        // Note that we do it here instead of a DUP because the @Resource reference processor for WebServiceContext *isn't*\n        // per DU\n        EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new WebServiceContextResourceProcessor());\n        processorTarget.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_WS_REF_DESCRIPTOR, new WSRefDDProcessor());\n        processorTarget.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_WS_REF_ANNOTATION, new WSRefAnnotationProcessor());\n        if (!appclient) {\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEBSERVICES_XML, new WSDescriptorDeploymentProcessor());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JAXWS_HANDLER_CHAIN_ANNOTATION, new WSHandlerChainAnnotationProcessor());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WS_JMS_INTEGRATION, new WSIntegrationProcessorJAXWS_JMS());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JAXWS_ENDPOINT_CREATE_COMPONENT_DESCRIPTIONS, new WSIntegrationProcessorJAXWS_POJO());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JAXWS_HANDLER_CREATE_COMPONENT_DESCRIPTIONS, new WSIntegrationProcessorJAXWS_HANDLER());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WS_EJB_INTEGRATION, new WSIntegrationProcessorJAXWS_EJB());\n            processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_WS, new WSDependenciesProcessor());\n            //processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_JAXRPC, new WSJAXRPCDependenciesDeploymentProcessor());\n            processorTarget.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WS_UNIVERSAL_META_DATA_MODEL, new WSModelDeploymentProcessor());\n            addDeploymentProcessors(processorTarget, Phase.INSTALL, Phase.INSTALL_WS_DEPLOYMENT_ASPECTS);\n        }\n    }","id":70199,"modified_method":"static void activate(final DeploymentProcessorTarget processorTarget, final boolean appclient) {\n        // Add a EEResourceReferenceProcessor which handles @Resource references of type WebServiceContext.\n        // Note that we do it here instead of a DUP because the @Resource reference processor for WebServiceContext *isn't*\n        // per DU\n        EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new WebServiceContextResourceProcessor());\n        processorTarget.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_WS_REF_DESCRIPTOR, new WSRefDDProcessor());\n        processorTarget.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_WS_REF_ANNOTATION, new WSRefAnnotationProcessor());\n        if (!appclient) {\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEBSERVICES_XML, new WebservicesDescriptorDeploymentProcessor());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JBOSS_WEBSERVICES_XML, new JBossWebservicesDescriptorDeploymentProcessor());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JAXWS_HANDLER_CHAIN_ANNOTATION, new WSHandlerChainAnnotationProcessor());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WS_JMS_INTEGRATION, new WSIntegrationProcessorJAXWS_JMS());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JAXWS_ENDPOINT_CREATE_COMPONENT_DESCRIPTIONS, new WSIntegrationProcessorJAXWS_POJO());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JAXWS_HANDLER_CREATE_COMPONENT_DESCRIPTIONS, new WSIntegrationProcessorJAXWS_HANDLER());\n            processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WS_EJB_INTEGRATION, new WSIntegrationProcessorJAXWS_EJB());\n            processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_WS, new WSDependenciesProcessor());\n            //processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_JAXRPC, new WSJAXRPCDependenciesDeploymentProcessor());\n            processorTarget.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WS_UNIVERSAL_META_DATA_MODEL, new WSModelDeploymentProcessor());\n            addDeploymentProcessors(processorTarget, Phase.INSTALL, Phase.INSTALL_WS_DEPLOYMENT_ASPECTS);\n        }\n    }","commit_id":"b065b7cc004cd63bac523573a9247a64d245f772","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected static String[] args(String command) {\n        if (!Strings.hasLength(command)) {\n            return Strings.EMPTY_ARRAY;\n        }\n        return command.split(\"\\\\s+\");\n    }","id":70200,"modified_method":"public static String[] args(String command) {\n        if (!Strings.hasLength(command)) {\n            return Strings.EMPTY_ARRAY;\n        }\n        return command.split(\"\\\\s+\");\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void downloadAndExtract(String name) throws IOException {\n        if (name == null) {\n            throw new IllegalArgumentException(\"plugin name must be supplied with --install [name].\");\n        }\n        HttpDownloadHelper downloadHelper = new HttpDownloadHelper();\n        boolean downloaded = false;\n        HttpDownloadHelper.DownloadProgress progress;\n        if (outputMode == OutputMode.SILENT) {\n            progress = new HttpDownloadHelper.NullProgress();\n        } else {\n            progress = new HttpDownloadHelper.VerboseProgress(SysOut.getOut());\n        }\n\n        if (!Files.isWritable(environment.pluginsFile())) {\n            throw new IOException(\"plugin directory \" + environment.pluginsFile() + \" is read only\");\n        }\n\n        PluginHandle pluginHandle = PluginHandle.parse(name);\n        checkForForbiddenName(pluginHandle.name);\n\n        Path pluginFile = pluginHandle.distroFile(environment);\n        // extract the plugin\n        final Path extractLocation = pluginHandle.extractedDir(environment);\n        if (Files.exists(extractLocation)) {\n            throw new IOException(\"plugin directory \" + extractLocation.toAbsolutePath() + \" already exists. To update the plugin, uninstall it first using --remove \" + name + \" command\");\n        }\n\n        // first, try directly from the URL provided\n        if (url != null) {\n            URL pluginUrl = new URL(url);\n            log(\"Trying \" + pluginUrl.toExternalForm() + \"...\");\n            try {\n                downloadHelper.download(pluginUrl, pluginFile, progress, this.timeout);\n                downloaded = true;\n            } catch (ElasticsearchTimeoutException e) {\n                throw e;\n            } catch (Exception e) {\n                // ignore\n                log(\"Failed: \" + ExceptionsHelper.detailedMessage(e));\n            }\n        } else {\n            if (PluginHandle.isOfficialPlugin(pluginHandle.repo, pluginHandle.user, pluginHandle.version)) {\n                checkForOfficialPlugins(pluginHandle.name);\n            }\n        }\n\n        if (!downloaded) {\n            // We try all possible locations\n            for (URL url : pluginHandle.urls()) {\n                log(\"Trying \" + url.toExternalForm() + \"...\");\n                try {\n                    downloadHelper.download(url, pluginFile, progress, this.timeout);\n                    downloaded = true;\n                    break;\n                } catch (ElasticsearchTimeoutException e) {\n                    throw e;\n                } catch (Exception e) {\n                    debug(\"Failed: \" + ExceptionsHelper.detailedMessage(e));\n                }\n            }\n        }\n\n        if (!downloaded) {\n            throw new IOException(\"failed to download out of all possible locations..., use --verbose to get detailed information\");\n        }\n\n        // unzip plugin to a temp dir\n        Path tmp = unzipToTemporary(pluginFile);\n\n        // create list of current jars in classpath\n        final List<URL> jars = new ArrayList<>();\n        ClassLoader loader = PluginManager.class.getClassLoader();\n        if (loader instanceof URLClassLoader) {\n            for (URL url : ((URLClassLoader) loader).getURLs()) {\n                jars.add(url);\n            }\n        }\n\n        // add any jars we find in the plugin to the list\n        Files.walkFileTree(tmp, new SimpleFileVisitor<Path>() {\n            @Override\n            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                if (file.toString().endsWith(\".jar\")) {\n                    jars.add(file.toUri().toURL());\n                }\n                return FileVisitResult.CONTINUE;\n            }\n        });\n\n        // check combined (current classpath + new jars to-be-added)\n        try {\n            JarHell.checkJarHell(jars.toArray(new URL[0]));\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n\n        // cleanup\n        IOUtils.rm(tmp);\n\n        // TODO: we have a tmpdir made above, so avoid zipfilesystem\n        try (FileSystem zipFile = FileSystems.newFileSystem(pluginFile, null)) {\n            for (final Path root : zipFile.getRootDirectories() ) {\n                final Path[] topLevelFiles = FileSystemUtils.files(root);\n                //we check whether we need to remove the top-level folder while extracting\n                //sometimes (e.g. github) the downloaded archive contains a top-level folder which needs to be removed\n                final boolean stripTopLevelDirectory;\n                if (topLevelFiles.length == 1 && Files.isDirectory(topLevelFiles[0])) {\n                    // valid names if the zip has only one top level directory\n                    switch (topLevelFiles[0].getFileName().toString()) {\n                        case  \"_site/\":\n                        case  \"bin/\":\n                        case  \"config/\":\n                        case  \"_dict/\":\n                          stripTopLevelDirectory = false;\n                          break;\n                        default:\n                          stripTopLevelDirectory = true;\n                    }\n                } else {\n                    stripTopLevelDirectory = false;\n                }\n                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n                    @Override\n                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                        Path target =  FileSystemUtils.append(extractLocation, file, stripTopLevelDirectory ? 1 : 0);\n                        Files.createDirectories(target);\n                        Files.copy(file, target, StandardCopyOption.REPLACE_EXISTING);\n                        return FileVisitResult.CONTINUE;\n                    }\n\n                });\n            }\n            log(\"Installed \" + name + \" into \" + extractLocation.toAbsolutePath());\n        } catch (Exception e) {\n            log(\"failed to extract plugin [\" + pluginFile + \"]: \" + ExceptionsHelper.detailedMessage(e));\n            return;\n        } finally {\n            try {\n                Files.delete(pluginFile);\n            } catch (Exception ex) {\n                log(\"Failed to delete plugin file\" + pluginFile + \" \" + ex);\n            }\n        }\n\n        if (FileSystemUtils.hasExtensions(extractLocation, \".java\")) {\n            debug(\"Plugin installation assumed to be site plugin, but contains source code, aborting installation...\");\n            try {\n                IOUtils.rm(extractLocation);\n            } catch(Exception ex) {\n                debug(\"Failed to remove site plugin from path \" + extractLocation + \" - \" + ex.getMessage());\n            }\n            throw new IllegalArgumentException(\"Plugin installation assumed to be site plugin, but contains source code, aborting installation.\");\n        }\n\n        // It could potentially be a non explicit _site plugin\n        boolean potentialSitePlugin = true;\n        Path binFile = extractLocation.resolve(\"bin\");\n        if (Files.isDirectory(binFile)) {\n            Path toLocation = pluginHandle.binDir(environment);\n            debug(\"Found bin, moving to \" + toLocation.toAbsolutePath());\n            if (Files.exists(toLocation)) {\n                IOUtils.rm(toLocation);\n            }\n            try {\n                FileSystemUtils.move(binFile, toLocation);\n            } catch (IOException e) {\n                throw new IOException(\"Could not move [\" + binFile + \"] to [\" + toLocation + \"]\", e);\n            }\n            if (Files.getFileStore(toLocation).supportsFileAttributeView(PosixFileAttributeView.class)) {\n                // add read and execute permissions to existing perms, so execution will work.\n                // read should generally be set already, but set it anyway: don't rely on umask...\n                final Set<PosixFilePermission> executePerms = new HashSet<>();\n                executePerms.add(PosixFilePermission.OWNER_READ);\n                executePerms.add(PosixFilePermission.GROUP_READ);\n                executePerms.add(PosixFilePermission.OTHERS_READ);\n                executePerms.add(PosixFilePermission.OWNER_EXECUTE);\n                executePerms.add(PosixFilePermission.GROUP_EXECUTE);\n                executePerms.add(PosixFilePermission.OTHERS_EXECUTE);\n                Files.walkFileTree(toLocation, new SimpleFileVisitor<Path>() {\n                    @Override\n                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                        if (attrs.isRegularFile()) {\n                            Set<PosixFilePermission> perms = Files.getPosixFilePermissions(file);\n                            perms.addAll(executePerms);\n                            Files.setPosixFilePermissions(file, perms);\n                        }\n                        return FileVisitResult.CONTINUE;\n                    }\n                });\n            } else {\n                debug(\"Skipping posix permissions - filestore doesn't support posix permission\");\n            }\n            debug(\"Installed \" + name + \" into \" + toLocation.toAbsolutePath());\n            potentialSitePlugin = false;\n        }\n\n        Path configFile = extractLocation.resolve(\"config\");\n        if (Files.isDirectory(configFile)) {\n            Path configDestLocation = pluginHandle.configDir(environment);\n            debug(\"Found config, moving to \" + configDestLocation.toAbsolutePath());\n            moveFilesWithoutOverwriting(configFile, configDestLocation, \".new\");\n            debug(\"Installed \" + name + \" into \" + configDestLocation.toAbsolutePath());\n            potentialSitePlugin = false;\n        }\n\n        // try and identify the plugin type, see if it has no .class or .jar files in it\n        // so its probably a _site, and it it does not have a _site in it, move everything to _site\n        if (!Files.exists(extractLocation.resolve(\"_site\"))) {\n            if (potentialSitePlugin && !FileSystemUtils.hasExtensions(extractLocation, \".class\", \".jar\")) {\n                log(\"Identified as a _site plugin, moving to _site structure ...\");\n                Path site = extractLocation.resolve(\"_site\");\n                Path tmpLocation = environment.pluginsFile().resolve(extractLocation.getFileName() + \".tmp\");\n                Files.move(extractLocation, tmpLocation);\n                Files.createDirectories(extractLocation);\n                Files.move(tmpLocation, site);\n                debug(\"Installed \" + name + \" into \" + site.toAbsolutePath());\n            }\n        }\n    }","id":70201,"modified_method":"public void downloadAndExtract(String name, Terminal terminal) throws IOException {\n        if (name == null) {\n            throw new IllegalArgumentException(\"plugin name must be supplied with install [name].\");\n        }\n        HttpDownloadHelper downloadHelper = new HttpDownloadHelper();\n        boolean downloaded = false;\n        HttpDownloadHelper.DownloadProgress progress;\n        if (outputMode == OutputMode.SILENT) {\n            progress = new HttpDownloadHelper.NullProgress();\n        } else {\n            progress = new HttpDownloadHelper.VerboseProgress(terminal.writer());\n        }\n\n        if (!Files.isWritable(environment.pluginsFile())) {\n            throw new IOException(\"plugin directory \" + environment.pluginsFile() + \" is read only\");\n        }\n\n        PluginHandle pluginHandle = PluginHandle.parse(name);\n        checkForForbiddenName(pluginHandle.name);\n\n        Path pluginFile = pluginHandle.distroFile(environment);\n        // extract the plugin\n        final Path extractLocation = pluginHandle.extractedDir(environment);\n        if (Files.exists(extractLocation)) {\n            throw new IOException(\"plugin directory \" + extractLocation.toAbsolutePath() + \" already exists. To update the plugin, uninstall it first using remove \" + name + \" command\");\n        }\n\n        // first, try directly from the URL provided\n        if (url != null) {\n            URL pluginUrl = new URL(url);\n            terminal.println(\"Trying %s ...\", pluginUrl.toExternalForm());\n            try {\n                downloadHelper.download(pluginUrl, pluginFile, progress, this.timeout);\n                downloaded = true;\n            } catch (ElasticsearchTimeoutException e) {\n                throw e;\n            } catch (Exception e) {\n                // ignore\n                terminal.println(\"Failed: %s\", ExceptionsHelper.detailedMessage(e));\n            }\n        } else {\n            if (PluginHandle.isOfficialPlugin(pluginHandle.repo, pluginHandle.user, pluginHandle.version)) {\n                checkForOfficialPlugins(pluginHandle.name);\n            }\n        }\n\n        if (!downloaded) {\n            // We try all possible locations\n            for (URL url : pluginHandle.urls()) {\n                terminal.println(\"Trying %s ...\", url.toExternalForm());\n                try {\n                    downloadHelper.download(url, pluginFile, progress, this.timeout);\n                    downloaded = true;\n                    break;\n                } catch (ElasticsearchTimeoutException e) {\n                    throw e;\n                } catch (Exception e) {\n                    terminal.println(VERBOSE, \"Failed: %s\", ExceptionsHelper.detailedMessage(e));\n                }\n            }\n        }\n\n        if (!downloaded) {\n            throw new IOException(\"failed to download out of all possible locations..., use --verbose to get detailed information\");\n        }\n\n        // unzip plugin to a temp dir\n        Path tmp = unzipToTemporary(pluginFile);\n\n        // create list of current jars in classpath\n        final List<URL> jars = new ArrayList<>();\n        ClassLoader loader = PluginManager.class.getClassLoader();\n        if (loader instanceof URLClassLoader) {\n            Collections.addAll(jars, ((URLClassLoader) loader).getURLs());\n        }\n\n        // add any jars we find in the plugin to the list\n        Files.walkFileTree(tmp, new SimpleFileVisitor<Path>() {\n            @Override\n            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                if (file.toString().endsWith(\".jar\")) {\n                    jars.add(file.toUri().toURL());\n                }\n                return FileVisitResult.CONTINUE;\n            }\n        });\n\n        // check combined (current classpath + new jars to-be-added)\n        try {\n            JarHell.checkJarHell(jars.toArray(new URL[jars.size()]));\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n\n        // cleanup\n        IOUtils.rm(tmp);\n\n        // TODO: we have a tmpdir made above, so avoid zipfilesystem\n        try (FileSystem zipFile = FileSystems.newFileSystem(pluginFile, null)) {\n            for (final Path root : zipFile.getRootDirectories() ) {\n                final Path[] topLevelFiles = FileSystemUtils.files(root);\n                //we check whether we need to remove the top-level folder while extracting\n                //sometimes (e.g. github) the downloaded archive contains a top-level folder which needs to be removed\n                final boolean stripTopLevelDirectory;\n                if (topLevelFiles.length == 1 && Files.isDirectory(topLevelFiles[0])) {\n                    // valid names if the zip has only one top level directory\n                    switch (topLevelFiles[0].getFileName().toString()) {\n                        case  \"_site/\":\n                        case  \"bin/\":\n                        case  \"config/\":\n                        case  \"_dict/\":\n                          stripTopLevelDirectory = false;\n                          break;\n                        default:\n                          stripTopLevelDirectory = true;\n                    }\n                } else {\n                    stripTopLevelDirectory = false;\n                }\n                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n                    @Override\n                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                        Path target =  FileSystemUtils.append(extractLocation, file, stripTopLevelDirectory ? 1 : 0);\n                        Files.createDirectories(target);\n                        Files.copy(file, target, StandardCopyOption.REPLACE_EXISTING);\n                        return FileVisitResult.CONTINUE;\n                    }\n\n                });\n            }\n            terminal.println(\"Installed %s into %s\", name, extractLocation.toAbsolutePath());\n        } catch (Exception e) {\n            terminal.printError(\"failed to extract plugin [%s]: %s\", pluginFile, ExceptionsHelper.detailedMessage(e));\n            return;\n        } finally {\n            try {\n                Files.delete(pluginFile);\n            } catch (Exception ex) {\n                terminal.printError(\"Failed to delete plugin file %s %s\", pluginFile, ex);\n            }\n        }\n\n        if (FileSystemUtils.hasExtensions(extractLocation, \".java\")) {\n            terminal.printError(\"Plugin installation assumed to be site plugin, but contains source code, aborting installation...\");\n            try {\n                IOUtils.rm(extractLocation);\n            } catch(Exception ex) {\n                terminal.printError(\"Failed to remove site plugin from path %s - %s\", extractLocation, ex.getMessage());\n            }\n            throw new IllegalArgumentException(\"Plugin installation assumed to be site plugin, but contains source code, aborting installation.\");\n        }\n\n        // It could potentially be a non explicit _site plugin\n        boolean potentialSitePlugin = true;\n        Path binFile = extractLocation.resolve(\"bin\");\n        if (Files.isDirectory(binFile)) {\n            Path toLocation = pluginHandle.binDir(environment);\n            terminal.println(VERBOSE, \"Found bin, moving to %s\", toLocation.toAbsolutePath());\n            if (Files.exists(toLocation)) {\n                IOUtils.rm(toLocation);\n            }\n            try {\n                FileSystemUtils.move(binFile, toLocation);\n            } catch (IOException e) {\n                throw new IOException(\"Could not move [\" + binFile + \"] to [\" + toLocation + \"]\", e);\n            }\n            if (Files.getFileStore(toLocation).supportsFileAttributeView(PosixFileAttributeView.class)) {\n                // add read and execute permissions to existing perms, so execution will work.\n                // read should generally be set already, but set it anyway: don't rely on umask...\n                final Set<PosixFilePermission> executePerms = new HashSet<>();\n                executePerms.add(PosixFilePermission.OWNER_READ);\n                executePerms.add(PosixFilePermission.GROUP_READ);\n                executePerms.add(PosixFilePermission.OTHERS_READ);\n                executePerms.add(PosixFilePermission.OWNER_EXECUTE);\n                executePerms.add(PosixFilePermission.GROUP_EXECUTE);\n                executePerms.add(PosixFilePermission.OTHERS_EXECUTE);\n                Files.walkFileTree(toLocation, new SimpleFileVisitor<Path>() {\n                    @Override\n                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                        if (attrs.isRegularFile()) {\n                            Set<PosixFilePermission> perms = Files.getPosixFilePermissions(file);\n                            perms.addAll(executePerms);\n                            Files.setPosixFilePermissions(file, perms);\n                        }\n                        return FileVisitResult.CONTINUE;\n                    }\n                });\n            } else {\n                terminal.println(VERBOSE, \"Skipping posix permissions - filestore doesn't support posix permission\");\n            }\n            terminal.println(VERBOSE, \"Installed %s into %s\", name, toLocation.toAbsolutePath());\n            potentialSitePlugin = false;\n        }\n\n        Path configFile = extractLocation.resolve(\"config\");\n        if (Files.isDirectory(configFile)) {\n            Path configDestLocation = pluginHandle.configDir(environment);\n            terminal.println(VERBOSE, \"Found config, moving to %s\", configDestLocation.toAbsolutePath());\n            moveFilesWithoutOverwriting(configFile, configDestLocation, \".new\");\n            terminal.println(VERBOSE, \"Installed %s into %s\", name, configDestLocation.toAbsolutePath());\n            potentialSitePlugin = false;\n        }\n\n        // try and identify the plugin type, see if it has no .class or .jar files in it\n        // so its probably a _site, and it it does not have a _site in it, move everything to _site\n        if (!Files.exists(extractLocation.resolve(\"_site\"))) {\n            if (potentialSitePlugin && !FileSystemUtils.hasExtensions(extractLocation, \".class\", \".jar\")) {\n                terminal.println(VERBOSE, \"Identified as a _site plugin, moving to _site structure ...\");\n                Path site = extractLocation.resolve(\"_site\");\n                Path tmpLocation = environment.pluginsFile().resolve(extractLocation.getFileName() + \".tmp\");\n                Files.move(extractLocation, tmpLocation);\n                Files.createDirectories(extractLocation);\n                Files.move(tmpLocation, site);\n                terminal.println(VERBOSE, \"Installed \" + name + \" into \" + site.toAbsolutePath());\n            }\n        }\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public Path[] getListInstalledPlugins() throws IOException {\n        try (DirectoryStream<Path> stream = Files.newDirectoryStream(environment.pluginsFile())) {\n            return Iterators.toArray(stream.iterator(), Path.class);\n        }\n    }","id":70202,"modified_method":"public void listInstalledPlugins(Terminal terminal) throws IOException {\n        Path[] plugins = getListInstalledPlugins();\n        terminal.println(\"Installed plugins in %s:\", environment.pluginsFile().toAbsolutePath());\n        if (plugins == null || plugins.length == 0) {\n            terminal.println(\"    - No plugin detected\");\n        } else {\n            for (Path plugin : plugins) {\n                terminal.println(\"    - \" + plugin.getFileName());\n            }\n        }\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void removePlugin(String name) throws IOException {\n        if (name == null) {\n            throw new IllegalArgumentException(\"plugin name must be supplied with --remove [name].\");\n        }\n        PluginHandle pluginHandle = PluginHandle.parse(name);\n        boolean removed = false;\n\n        checkForForbiddenName(pluginHandle.name);\n        Path pluginToDelete = pluginHandle.extractedDir(environment);\n        if (Files.exists(pluginToDelete)) {\n            debug(\"Removing: \" + pluginToDelete);\n            try {\n                IOUtils.rm(pluginToDelete);\n            } catch (IOException ex){\n                throw new IOException(\"Unable to remove \" + pluginHandle.name + \". Check file permissions on \" +\n                        pluginToDelete.toString(), ex);\n            }\n            removed = true;\n        }\n        pluginToDelete = pluginHandle.distroFile(environment);\n        if (Files.exists(pluginToDelete)) {\n            debug(\"Removing: \" + pluginToDelete);\n            try {\n                Files.delete(pluginToDelete);\n            } catch (Exception ex) {\n                throw new IOException(\"Unable to remove \" + pluginHandle.name + \". Check file permissions on \" +\n                        pluginToDelete.toString(), ex);\n            }\n            removed = true;\n        }\n        Path binLocation = pluginHandle.binDir(environment);\n        if (Files.exists(binLocation)) {\n            debug(\"Removing: \" + binLocation);\n            try {\n                IOUtils.rm(binLocation);\n            } catch (IOException ex){\n                throw new IOException(\"Unable to remove \" + pluginHandle.name + \". Check file permissions on \" +\n                        binLocation.toString(), ex);\n            }\n            removed = true;\n        }\n\n        if (removed) {\n            log(\"Removed \" + name);\n        } else {\n            log(\"Plugin \" + name + \" not found. Run plugin --list to get list of installed plugins.\");\n        }\n    }","id":70203,"modified_method":"public void removePlugin(String name, Terminal terminal) throws IOException {\n        if (name == null) {\n            throw new IllegalArgumentException(\"plugin name must be supplied with remove [name].\");\n        }\n        PluginHandle pluginHandle = PluginHandle.parse(name);\n        boolean removed = false;\n\n        checkForForbiddenName(pluginHandle.name);\n        Path pluginToDelete = pluginHandle.extractedDir(environment);\n        if (Files.exists(pluginToDelete)) {\n            terminal.println(VERBOSE, \"Removing: %s\", pluginToDelete);\n            try {\n                IOUtils.rm(pluginToDelete);\n            } catch (IOException ex){\n                throw new IOException(\"Unable to remove \" + pluginHandle.name + \". Check file permissions on \" +\n                        pluginToDelete.toString(), ex);\n            }\n            removed = true;\n        }\n        pluginToDelete = pluginHandle.distroFile(environment);\n        if (Files.exists(pluginToDelete)) {\n            terminal.println(VERBOSE, \"Removing: %s\", pluginToDelete);\n            try {\n                Files.delete(pluginToDelete);\n            } catch (Exception ex) {\n                throw new IOException(\"Unable to remove \" + pluginHandle.name + \". Check file permissions on \" +\n                        pluginToDelete.toString(), ex);\n            }\n            removed = true;\n        }\n        Path binLocation = pluginHandle.binDir(environment);\n        if (Files.exists(binLocation)) {\n            terminal.println(VERBOSE, \"Removing: %s\", binLocation);\n            try {\n                IOUtils.rm(binLocation);\n            } catch (IOException ex){\n                throw new IOException(\"Unable to remove \" + pluginHandle.name + \". Check file permissions on \" +\n                        binLocation.toString(), ex);\n            }\n            removed = true;\n        }\n\n        if (removed) {\n            terminal.println(\"Removed %s\", name);\n        } else {\n            terminal.println(\"Plugin %s not found. Run plugin --list to get list of installed plugins.\", name);\n        }\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testInstallPlugin() throws IOException {\n        PluginManager pluginManager = pluginManager(getPluginUrlForResource(\"plugin_with_classfile.zip\"));\n\n        pluginManager.downloadAndExtract(\"plugin-classfile\");\n        Path[] plugins = pluginManager.getListInstalledPlugins();\n        assertThat(plugins, notNullValue());\n        assertThat(plugins.length, is(1));\n    }","id":70204,"modified_method":"@Test\n    public void testInstallPlugin() throws IOException {\n        String pluginName = \"plugin-classfile\";\n        assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_with_classfile.zip\")));\n        assertThatPluginIsListed(\"plugin-classfile\");\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testLocalPluginFolderAndFile() throws Exception {\n        //When we have a single top-level folder but also files in the top-level, we don't modify anything\n        String pluginName = \"plugin-test\";\n        Tuple<Settings, Environment> initialSettings = buildInitialSettings();\n        downloadAndExtract(pluginName, initialSettings, getPluginUrlForResource(\"plugin_folder_file.zip\"));\n\n        internalCluster().startNode(initialSettings.v1());\n\n        assertPluginLoaded(pluginName);\n        assertPluginAvailable(pluginName);\n    }","id":70205,"modified_method":"@Test\n    public void testLocalPluginFolderAndFile() throws Exception {\n        //When we have a single top-level folder but also files in the top-level, we don't modify anything\n        String pluginName = \"plugin-test\";\n        assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_folder_file.zip\")));\n\n        internalCluster().startNode(initialSettings.v1());\n\n        assertPluginLoaded(pluginName);\n        assertPluginAvailable(pluginName);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testLocalPluginInstallWithBinOnly_7152() throws Exception {\n        String pluginName = \"plugin-test\";\n        Tuple<Settings, Environment> initialSettings = buildInitialSettings();\n        Environment env = initialSettings.v2();\n        Path binDir = env.homeFile().resolve(\"bin\");\n        if (!Files.exists(binDir)) {\n            Files.createDirectories(binDir);\n        }\n        Path pluginBinDir = binDir.resolve(pluginName);\n        try {\n            PluginManager pluginManager = pluginManager(getPluginUrlForResource(\"plugin_with_bin_only.zip\"), initialSettings);\n            pluginManager.downloadAndExtract(pluginName);\n            Path[] plugins = pluginManager.getListInstalledPlugins();\n            assertThat(plugins.length, is(1));\n            assertDirectoryExists(pluginBinDir);\n        } finally {\n            // we need to clean up the copied dirs\n            IOUtils.rm(pluginBinDir);\n        }\n    }","id":70206,"modified_method":"@Test\n    public void testLocalPluginInstallWithBinOnly_7152() throws Exception {\n        String pluginName = \"plugin-test\";\n        Environment env = initialSettings.v2();\n        Path binDir = env.homeFile().resolve(\"bin\");\n        Path pluginBinDir = binDir.resolve(pluginName);\n\n        assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_with_bin_only.zip\")));\n        assertThatPluginIsListed(pluginName);\n        assertDirectoryExists(pluginBinDir);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testLocalPluginInstallWithBinAndConfig() throws Exception {\n        String pluginName = \"plugin-test\";\n        Tuple<Settings, Environment> initialSettings = buildInitialSettings();\n        Environment env = initialSettings.v2();\n        Path binDir = env.homeFile().resolve(\"bin\");\n        if (!Files.exists(binDir)) {\n            Files.createDirectories(binDir);\n        }\n        Path pluginBinDir = binDir.resolve(pluginName);\n        Path configDir = env.configFile();\n        if (!Files.exists(configDir)) {\n            Files.createDirectories(configDir);\n        }\n        Path pluginConfigDir =configDir.resolve(pluginName);\n        try {\n\n            PluginManager pluginManager = pluginManager(getPluginUrlForResource(\"plugin_with_bin_and_config.zip\"), initialSettings);\n\n            pluginManager.downloadAndExtract(pluginName);\n\n            Path[] plugins = pluginManager.getListInstalledPlugins();\n\n            assertThat(plugins, arrayWithSize(1));\n            assertDirectoryExists(pluginBinDir);\n            assertDirectoryExists(pluginConfigDir);\n            Path toolFile = pluginBinDir.resolve(\"tool\");\n            assertFileExists(toolFile);\n\n            // check that the file is marked executable, without actually checking that we can execute it.\n            PosixFileAttributeView view = Files.getFileAttributeView(toolFile, PosixFileAttributeView.class);\n            // the view might be null, on e.g. windows, there is nothing to check there!\n            if (view != null) {\n                PosixFileAttributes attributes = view.readAttributes();\n                assertTrue(\"unexpected permissions: \" + attributes.permissions(),\n                           attributes.permissions().contains(PosixFilePermission.OWNER_EXECUTE));\n                assertTrue(\"unexpected permissions: \" + attributes.permissions(),\n                        attributes.permissions().contains(PosixFilePermission.OWNER_READ));\n            }\n        } finally {\n            // we need to clean up the copied dirs\n            IOUtils.rm(pluginBinDir, pluginConfigDir);\n        }\n    }","id":70207,"modified_method":"@Test\n    public void testLocalPluginInstallWithBinAndConfig() throws Exception {\n        String pluginName = \"plugin-test\";\n        Environment env = initialSettings.v2();\n        Path binDir = env.homeFile().resolve(\"bin\");\n        Path pluginBinDir = binDir.resolve(pluginName);\n\n        Path pluginConfigDir = env.configFile().resolve(pluginName);\n        String pluginUrl = getPluginUrlForResource(\"plugin_with_bin_and_config.zip\");\n        assertStatusOk(\"install \" + pluginName + \" --url \" + pluginUrl + \" --verbose\");\n\n        terminal.getTerminalOutput().clear();\n        assertStatusOk(\"list\");\n        assertThat(terminal.getTerminalOutput(), hasItem(containsString(pluginName)));\n\n        assertDirectoryExists(pluginBinDir);\n        assertDirectoryExists(pluginConfigDir);\n        Path toolFile = pluginBinDir.resolve(\"tool\");\n        assertFileExists(toolFile);\n\n        // check that the file is marked executable, without actually checking that we can execute it.\n        PosixFileAttributeView view = Files.getFileAttributeView(toolFile, PosixFileAttributeView.class);\n        // the view might be null, on e.g. windows, there is nothing to check there!\n        if (view != null) {\n            PosixFileAttributes attributes = view.readAttributes();\n            assertThat(attributes.permissions(), hasItem(PosixFilePermission.OWNER_EXECUTE));\n            assertThat(attributes.permissions(), hasItem(PosixFilePermission.OWNER_READ));\n        }\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private Tuple<Settings, Environment> buildInitialSettings() throws IOException {\n        Settings settings = Settings.settingsBuilder()\n            .put(\"discovery.zen.ping.multicast.enabled\", false)\n            .put(\"http.enabled\", true)\n            .put(\"path.home\", createTempDir()).build();\n        return InternalSettingsPreparer.prepareSettings(settings, false);\n    }","id":70208,"modified_method":"private Tuple<Settings, Environment> buildInitialSettings() throws IOException {\n        Settings settings = settingsBuilder()\n                .put(\"discovery.zen.ping.multicast.enabled\", false)\n                .put(\"http.enabled\", true)\n                .put(\"path.home\", createTempDir()).build();\n        return InternalSettingsPreparer.prepareSettings(settings, false);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testListInstalledEmpty() throws IOException {\n        Path[] plugins = pluginManager(null).getListInstalledPlugins();\n        assertThat(plugins, notNullValue());\n        assertThat(plugins.length, is(0));\n    }","id":70209,"modified_method":"@Test\n    public void testListInstalledEmpty() throws IOException {\n        assertStatusOk(\"list\");\n        assertThat(terminal.getTerminalOutput(), hasItem(containsString(\"No plugin detected\")));\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testLocalPluginInstallSiteFolder() throws Exception {\n        //When we have only a folder in top-level (no files either) but it's called _site, we make it work\n        //we can either remove the folder while extracting and then re-add it manually or just leave it as it is\n        String pluginName = \"plugin-test\";\n        Tuple<Settings, Environment> initialSettings = buildInitialSettings();\n        downloadAndExtract(pluginName, initialSettings, getPluginUrlForResource(\"plugin_folder_site.zip\"));\n\n        internalCluster().startNode(initialSettings.v1());\n\n        assertPluginLoaded(pluginName);\n        assertPluginAvailable(pluginName);\n    }","id":70210,"modified_method":"@Test\n    public void testLocalPluginInstallSiteFolder() throws Exception {\n        //When we have only a folder in top-level (no files either) but it's called _site, we make it work\n        //we can either remove the folder while extracting and then re-add it manually or just leave it as it is\n        String pluginName = \"plugin-test\";\n        assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_folder_site.zip\")));\n\n        internalCluster().startNode(initialSettings.v1());\n\n        assertPluginLoaded(pluginName);\n        assertPluginAvailable(pluginName);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testLocalPluginInstallSingleFolder() throws Exception {\n        //When we have only a folder in top-level (no files either) we remove that folder while extracting\n        String pluginName = \"plugin-test\";\n        Tuple<Settings, Environment> initialSettings = buildInitialSettings();\n        downloadAndExtract(pluginName, initialSettings, getPluginUrlForResource(\"plugin_single_folder.zip\"));\n\n        internalCluster().startNode(initialSettings.v1());\n\n        assertPluginLoaded(pluginName);\n        assertPluginAvailable(pluginName);\n    }","id":70211,"modified_method":"@Test\n    public void testLocalPluginInstallSingleFolder() throws Exception {\n        //When we have only a folder in top-level (no files either) we remove that folder while extracting\n        String pluginName = \"plugin-test\";\n        String pluginUrl = getPluginUrlForResource(\"plugin_single_folder.zip\");\n        String installCommand = String.format(Locale.ROOT, \"install %s --url %s\", pluginName, pluginUrl);\n        assertStatusOk(installCommand);\n\n        internalCluster().startNode(initialSettings.v1());\n        assertPluginLoaded(pluginName);\n        assertPluginAvailable(pluginName);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test(expected = IllegalArgumentException.class)\n    public void testRemovePluginWithURLForm() throws Exception {\n        PluginManager pluginManager = pluginManager(null);\n        pluginManager.removePlugin(\"file://whatever\");\n    }","id":70212,"modified_method":"@Test\n    public void testRemovePluginWithURLForm() throws Exception {\n        int status = new PluginManagerCliParser(terminal).execute(args(\"remove file://whatever\"));\n        assertThat(terminal.getTerminalOutput(), hasItem(containsString(\"Illegal plugin name\")));\n        assertThat(\"Terminal output was: \" + terminal.getTerminalOutput(), status, is(USAGE.status()));\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test regular form: username/reponame/version\n     * It should find it in download.elasticsearch.org service\n     */\n    @Test\n    @Network\n    @AwaitsFix(bugUrl = \"fails with jar hell failures - http://build-us-00.elastic.co/job/es_core_master_oracle_6/519/testReport/\")\n    public void testInstallPluginWithElasticsearchDownloadService() throws IOException {\n        assumeTrue(\"download.elastic.co is accessible\", isDownloadServiceWorking(\"download.elastic.co\", 80, \"/elasticsearch/ci-test.txt\"));\n        singlePluginInstallAndRemove(\"elasticsearch/elasticsearch-transport-thrift/2.4.0\", null);\n    }","id":70213,"modified_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test regular form: username/reponame/version\n     * It should find it in download.elasticsearch.org service\n     */\n    @Test\n    @Network\n    @AwaitsFix(bugUrl = \"fails with jar hell failures - http://build-us-00.elastic.co/job/es_core_master_oracle_6/519/testReport/\")\n    public void testInstallPluginWithElasticsearchDownloadService() throws IOException {\n        assumeTrue(\"download.elastic.co is accessible\", isDownloadServiceWorking(\"download.elastic.co\", 80, \"/elasticsearch/ci-test.txt\"));\n        singlePluginInstallAndRemove(\"elasticsearch/elasticsearch-transport-thrift/2.4.0\", \"elasticsearch-transport-thrift\", null);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test regular form: groupId/artifactId/version\n     * It should find it in maven central service\n     */\n    @Test\n    @Network\n    @AwaitsFix(bugUrl = \"fails with jar hell failures - http://build-us-00.elastic.co/job/es_core_master_oracle_6/519/testReport/\")\n    public void testInstallPluginWithMavenCentral() throws IOException {\n        assumeTrue(\"search.maven.org is accessible\", isDownloadServiceWorking(\"search.maven.org\", 80, \"/\"));\n        assumeTrue(\"repo1.maven.org is accessible\", isDownloadServiceWorking(\"repo1.maven.org\", 443, \"/maven2/org/elasticsearch/elasticsearch-transport-thrift/2.4.0/elasticsearch-transport-thrift-2.4.0.pom\"));\n        singlePluginInstallAndRemove(\"org.elasticsearch/elasticsearch-transport-thrift/2.4.0\", null);\n    }","id":70214,"modified_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test regular form: groupId/artifactId/version\n     * It should find it in maven central service\n     */\n    @Test\n    @Network\n    @AwaitsFix(bugUrl = \"fails with jar hell failures - http://build-us-00.elastic.co/job/es_core_master_oracle_6/519/testReport/\")\n    public void testInstallPluginWithMavenCentral() throws IOException {\n        assumeTrue(\"search.maven.org is accessible\", isDownloadServiceWorking(\"search.maven.org\", 80, \"/\"));\n        assumeTrue(\"repo1.maven.org is accessible\", isDownloadServiceWorking(\"repo1.maven.org\", 443, \"/maven2/org/elasticsearch/elasticsearch-transport-thrift/2.4.0/elasticsearch-transport-thrift-2.4.0.pom\"));\n        singlePluginInstallAndRemove(\"org.elasticsearch/elasticsearch-transport-thrift/2.4.0\", \"elasticsearch-transport-thrift\", null);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test(expected = IllegalArgumentException.class)\n    public void testRemovePlugin_NullName_ThrowsException() throws IOException {\n        pluginManager(getPluginUrlForResource(\"plugin_single_folder.zip\")).removePlugin(null);\n    }","id":70215,"modified_method":"@Test\n    public void testRemovePlugin_NullName_ThrowsException() throws IOException {\n        int status = new PluginManagerCliParser(terminal).execute(args(\"remove \"));\n        assertThat(\"Terminal output was: \" + terminal.getTerminalOutput(), status, is(USAGE.status()));\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test(expected = IllegalArgumentException.class)\n    public void testSitePluginWithSourceThrows() throws Exception {\n        String pluginName = \"plugin-with-source\";\n        downloadAndExtract(pluginName, buildInitialSettings(), getPluginUrlForResource(\"plugin_with_sourcefiles.zip\"));\n    }","id":70216,"modified_method":"@Test\n    public void testSitePluginWithSourceDoesNotInstall() throws Exception {\n        String pluginName = \"plugin-with-source\";\n        String cmd = String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_with_sourcefiles.zip\"));\n        int status = new PluginManagerCliParser(terminal).execute(args(cmd));\n        assertThat(status, is(USAGE.status()));\n        assertThat(terminal.getTerminalOutput(), hasItem(containsString(\"Plugin installation assumed to be site plugin, but contains source code, aborting installation\")));\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void singlePluginInstallAndRemove(String pluginShortName, String pluginCoordinates) throws IOException {\n        logger.info(\"--> trying to download and install [{}]\", pluginShortName);\n        PluginManager pluginManager = pluginManager(pluginCoordinates);\n        try {\n            pluginManager.downloadAndExtract(pluginShortName);\n            Path[] plugins = pluginManager.getListInstalledPlugins();\n            assertThat(plugins, notNullValue());\n            assertThat(plugins.length, is(1));\n\n            // We remove it\n            pluginManager.removePlugin(pluginShortName);\n            plugins = pluginManager.getListInstalledPlugins();\n            assertThat(plugins, notNullValue());\n            assertThat(plugins.length, is(0));\n        } catch (IOException e) {\n            logger.warn(\"--> IOException raised while downloading plugin [{}]. Skipping test.\", e, pluginShortName);\n        } catch (ElasticsearchTimeoutException e) {\n            logger.warn(\"--> timeout exception raised while downloading plugin [{}]. Skipping test.\", pluginShortName);\n        }\n    }","id":70217,"modified_method":"private void singlePluginInstallAndRemove(String pluginDescriptor, String pluginName, String pluginCoordinates) throws IOException {\n        logger.info(\"--> trying to download and install [{}]\", pluginDescriptor);\n        if (pluginCoordinates == null) {\n            assertStatusOk(String.format(Locale.ROOT, \"install %s --verbose\", pluginDescriptor));\n        } else {\n            assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginDescriptor, pluginCoordinates));\n        }\n        assertThatPluginIsListed(pluginName);\n\n        terminal.getTerminalOutput().clear();\n        assertStatusOk(\"remove \" + pluginDescriptor);\n        assertThat(terminal.getTerminalOutput(), hasItem(containsString(\"Removing \" + pluginDescriptor)));\n\n        // not listed anymore\n        terminal.getTerminalOutput().clear();\n        assertStatusOk(\"list\");\n        assertThat(terminal.getTerminalOutput(), not(hasItem(containsString(pluginName))));\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testInstallSitePlugin() throws IOException {\n        Tuple<Settings, Environment> initialSettings = buildInitialSettings();\n        PluginManager pluginManager = pluginManager(getPluginUrlForResource(\"plugin_without_folders.zip\"), initialSettings);\n\n        pluginManager.downloadAndExtract(\"plugin-site\");\n        Path[] plugins = pluginManager.getListInstalledPlugins();\n        assertThat(plugins, notNullValue());\n        assertThat(plugins.length, is(1));\n\n        // We want to check that Plugin Manager moves content to _site\n        assertFileExists(initialSettings.v2().pluginsFile().resolve(\"plugin-site/_site\"));\n    }","id":70218,"modified_method":"@Test\n    public void testInstallSitePlugin() throws IOException {\n        String pluginName = \"plugin-site\";\n        assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_without_folders.zip\")));\n        assertThatPluginIsListed(pluginName);\n        // We want to check that Plugin Manager moves content to _site\n        assertFileExists(initialSettings.v2().pluginsFile().resolve(\"plugin-site/_site\"));\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testRemovePlugin() throws Exception {\n        // We want to remove plugin with plugin short name\n        singlePluginInstallAndRemove(\"plugintest\", getPluginUrlForResource(\"plugin_without_folders.zip\"));\n\n        // We want to remove plugin with groupid/artifactid/version form\n        singlePluginInstallAndRemove(\"groupid/plugintest/1.0.0\", getPluginUrlForResource(\"plugin_without_folders.zip\"));\n\n        // We want to remove plugin with groupid/artifactid form\n        singlePluginInstallAndRemove(\"groupid/plugintest\", getPluginUrlForResource(\"plugin_without_folders.zip\"));\n    }","id":70219,"modified_method":"@Test\n    public void testRemovePlugin() throws Exception {\n        // We want to remove plugin with plugin short name\n        singlePluginInstallAndRemove(\"plugintest\", \"plugintest\", getPluginUrlForResource(\"plugin_without_folders.zip\"));\n\n        // We want to remove plugin with groupid/artifactid/version form\n        singlePluginInstallAndRemove(\"groupid/plugintest/1.0.0\", \"plugintest\", getPluginUrlForResource(\"plugin_without_folders.zip\"));\n\n        // We want to remove plugin with groupid/artifactid form\n        singlePluginInstallAndRemove(\"groupid/plugintest\", \"plugintest\", getPluginUrlForResource(\"plugin_without_folders.zip\"));\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testLocalPluginWithoutFolders() throws Exception {\n        //When we don't have folders at all in the top-level, but only files, we don't modify anything\n        String pluginName = \"plugin-test\";\n        Tuple<Settings, Environment> initialSettings = buildInitialSettings();\n        downloadAndExtract(pluginName, initialSettings, getPluginUrlForResource(\"plugin_without_folders.zip\"));\n\n        internalCluster().startNode(initialSettings.v1());\n\n        assertPluginLoaded(pluginName);\n        assertPluginAvailable(pluginName);\n    }","id":70220,"modified_method":"@Test\n    public void testLocalPluginWithoutFolders() throws Exception {\n        //When we don't have folders at all in the top-level, but only files, we don't modify anything\n        String pluginName = \"plugin-test\";\n        assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_without_folders.zip\")));\n\n        internalCluster().startNode(initialSettings.v1());\n\n        assertPluginLoaded(pluginName);\n        assertPluginAvailable(pluginName);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Test for #7890\n     */\n    @Test\n    public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception {\n        String pluginName = \"plugin-test\";\n        Tuple<Settings, Environment> initialSettings = buildInitialSettings();\n        Environment env = initialSettings.v2();\n\n        Path configDir = env.configFile();\n        if (!Files.exists(configDir)) {\n            Files.createDirectories(configDir);\n        }\n        Path pluginConfigDir = configDir.resolve(pluginName);\n\n        try {\n            PluginManager pluginManager = pluginManager(getPluginUrlForResource(\"plugin_with_config_v1.zip\"), initialSettings);\n            pluginManager.downloadAndExtract(pluginName);\n\n            Path[] plugins = pluginManager.getListInstalledPlugins();\n            assertThat(plugins, arrayWithSize(1));\n\n            /*\n            First time, our plugin contains:\n            - config/test.txt (version1)\n             */\n            assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n\n            // We now remove the plugin\n            pluginManager.removePlugin(pluginName);\n            // We should still have test.txt\n            assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n\n            // Installing a new plugin version\n            /*\n            Second time, our plugin contains:\n            - config/test.txt (version2)\n            - config/dir/testdir.txt (version1)\n            - config/dir/subdir/testsubdir.txt (version1)\n             */\n            pluginManager = pluginManager(getPluginUrlForResource(\"plugin_with_config_v2.zip\"), initialSettings);\n            pluginManager.downloadAndExtract(pluginName);\n\n            assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n            assertFileContent(pluginConfigDir, \"test.txt.new\", \"version2\\n\");\n            assertFileContent(pluginConfigDir, \"dir/testdir.txt\", \"version1\\n\");\n            assertFileContent(pluginConfigDir, \"dir/subdir/testsubdir.txt\", \"version1\\n\");\n\n            // Removing\n            pluginManager.removePlugin(pluginName);\n            assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n            assertFileContent(pluginConfigDir, \"test.txt.new\", \"version2\\n\");\n            assertFileContent(pluginConfigDir, \"dir/testdir.txt\", \"version1\\n\");\n            assertFileContent(pluginConfigDir, \"dir/subdir/testsubdir.txt\", \"version1\\n\");\n\n            // Installing a new plugin version\n            /*\n            Third time, our plugin contains:\n            - config/test.txt (version3)\n            - config/test2.txt (version1)\n            - config/dir/testdir.txt (version2)\n            - config/dir/testdir2.txt (version1)\n            - config/dir/subdir/testsubdir.txt (version2)\n             */\n            pluginManager = pluginManager(getPluginUrlForResource(\"plugin_with_config_v3.zip\"), initialSettings);\n            pluginManager.downloadAndExtract(pluginName);\n\n            assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n            assertFileContent(pluginConfigDir, \"test2.txt\", \"version1\\n\");\n            assertFileContent(pluginConfigDir, \"test.txt.new\", \"version3\\n\");\n            assertFileContent(pluginConfigDir, \"dir/testdir.txt\", \"version1\\n\");\n            assertFileContent(pluginConfigDir, \"dir/testdir.txt.new\", \"version2\\n\");\n            assertFileContent(pluginConfigDir, \"dir/testdir2.txt\", \"version1\\n\");\n            assertFileContent(pluginConfigDir, \"dir/subdir/testsubdir.txt\", \"version1\\n\");\n            assertFileContent(pluginConfigDir, \"dir/subdir/testsubdir.txt.new\", \"version2\\n\");\n        } finally {\n            // we need to clean up the copied dirs\n            IOUtils.rm(pluginConfigDir);\n        }\n    }","id":70221,"modified_method":"/**\n     * Test for #7890\n     */\n    @Test\n    public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception {\n        String pluginName = \"plugin-test\";\n        Environment env = initialSettings.v2();\n        Path pluginConfigDir = env.configFile().resolve(pluginName);\n\n        assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_with_config_v1.zip\")));\n\n        /*\n        First time, our plugin contains:\n        - config/test.txt (version1)\n         */\n        assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n\n        // We now remove the plugin\n        assertStatusOk(\"remove \" + pluginName);\n\n        // We should still have test.txt\n        assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n\n        // Installing a new plugin version\n        /*\n        Second time, our plugin contains:\n        - config/test.txt (version2)\n        - config/dir/testdir.txt (version1)\n        - config/dir/subdir/testsubdir.txt (version1)\n         */\n        assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_with_config_v2.zip\")));\n\n        assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n        assertFileContent(pluginConfigDir, \"test.txt.new\", \"version2\\n\");\n        assertFileContent(pluginConfigDir, \"dir/testdir.txt\", \"version1\\n\");\n        assertFileContent(pluginConfigDir, \"dir/subdir/testsubdir.txt\", \"version1\\n\");\n\n        // Removing\n        assertStatusOk(\"remove \" + pluginName);\n        assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n        assertFileContent(pluginConfigDir, \"test.txt.new\", \"version2\\n\");\n        assertFileContent(pluginConfigDir, \"dir/testdir.txt\", \"version1\\n\");\n        assertFileContent(pluginConfigDir, \"dir/subdir/testsubdir.txt\", \"version1\\n\");\n\n        // Installing a new plugin version\n        /*\n        Third time, our plugin contains:\n        - config/test.txt (version3)\n        - config/test2.txt (version1)\n        - config/dir/testdir.txt (version2)\n        - config/dir/testdir2.txt (version1)\n        - config/dir/subdir/testsubdir.txt (version2)\n         */\n        assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, getPluginUrlForResource(\"plugin_with_config_v3.zip\")));\n\n        assertFileContent(pluginConfigDir, \"test.txt\", \"version1\\n\");\n        assertFileContent(pluginConfigDir, \"test2.txt\", \"version1\\n\");\n        assertFileContent(pluginConfigDir, \"test.txt.new\", \"version3\\n\");\n        assertFileContent(pluginConfigDir, \"dir/testdir.txt\", \"version1\\n\");\n        assertFileContent(pluginConfigDir, \"dir/testdir.txt.new\", \"version2\\n\");\n        assertFileContent(pluginConfigDir, \"dir/testdir2.txt\", \"version1\\n\");\n        assertFileContent(pluginConfigDir, \"dir/subdir/testsubdir.txt\", \"version1\\n\");\n        assertFileContent(pluginConfigDir, \"dir/subdir/testsubdir.txt.new\", \"version2\\n\");\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test site plugins from github: userName/repoName\n     * It should find it on github\n     */\n    @Test\n    @Network\n    public void testInstallPluginWithGithub() throws IOException {\n        assumeTrue(\"github.com is accessible\", isDownloadServiceWorking(\"github.com\", 443, \"/\"));\n        singlePluginInstallAndRemove(\"elasticsearch/kibana\", null);\n    }","id":70222,"modified_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test site plugins from github: userName/repoName\n     * It should find it on github\n     */\n    @Test\n    @Network\n    public void testInstallPluginWithGithub() throws IOException {\n        assumeTrue(\"github.com is accessible\", isDownloadServiceWorking(\"github.com\", 443, \"/\"));\n        singlePluginInstallAndRemove(\"elasticsearch/kibana\", \"kibana\", null);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testForbiddenPluginName_ThrowsException() throws IOException {\n        runTestWithForbiddenName(null);\n        runTestWithForbiddenName(\"\");\n        runTestWithForbiddenName(\"elasticsearch\");\n        runTestWithForbiddenName(\"elasticsearch.bat\");\n        runTestWithForbiddenName(\"elasticsearch.in.sh\");\n        runTestWithForbiddenName(\"plugin\");\n        runTestWithForbiddenName(\"plugin.bat\");\n        runTestWithForbiddenName(\"service.bat\");\n        runTestWithForbiddenName(\"ELASTICSEARCH\");\n        runTestWithForbiddenName(\"ELASTICSEARCH.IN.SH\");\n    }","id":70223,"modified_method":"@Test\n    public void testForbiddenPluginNames() throws IOException {\n        assertStatus(\"remove elasticsearch\", USAGE);\n        assertStatus(\"remove elasticsearch.bat\", USAGE);\n        assertStatus(\"remove elasticsearch.in.sh\", USAGE);\n        assertStatus(\"remove plugin\", USAGE);\n        assertStatus(\"remove plugin.bat\", USAGE);\n        assertStatus(\"remove service.bat\", USAGE);\n        assertStatus(\"remove ELASTICSEARCH\", USAGE);\n        assertStatus(\"remove ELASTICSEARCH.IN.SH\", USAGE);\n    }","commit_id":"2f54b89a23ccd95df7df89d2b1da04efece4ae16","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Scan the provided ServletContext and class loader for JAR files. Each JAR\n     * file found will be passed to the callback handler to be processed.\n     *\n     * @param scanType      The type of JAR scan to perform. This is passed to\n     *                          the filter which uses it to determine how to\n     *                          filter the results\n     * @param context       The ServletContext - used to locate and access\n     *                      WEB-INF/lib\n     * @param callback      The handler to process any JARs found\n     */\n    @Override\n    public void scan(JarScanType scanType, ServletContext context,\n            JarScannerCallback callback) {\n\n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"jarScan.webinflibStart\"));\n        }\n\n        Set<URL> processedURLs = new HashSet<>();\n\n        // Scan WEB-INF/lib\n        Set<String> dirList = context.getResourcePaths(Constants.WEB_INF_LIB);\n        if (dirList != null) {\n            Iterator<String> it = dirList.iterator();\n            while (it.hasNext()) {\n                String path = it.next();\n                if (path.endsWith(Constants.JAR_EXT) &&\n                        getJarScanFilter().check(scanType,\n                                path.substring(path.lastIndexOf('/')+1))) {\n                    // Need to scan this JAR\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"jarScan.webinflibJarScan\", path));\n                    }\n                    URL url = null;\n                    try {\n                        url = context.getResource(path);\n                        processedURLs.add(url);\n                        process(scanType, callback, url, path, true);\n                    } catch (IOException e) {\n                        log.warn(sm.getString(\"jarScan.webinflibFail\", url), e);\n                    }\n                } else {\n                    if (log.isTraceEnabled()) {\n                        log.trace(sm.getString(\"jarScan.webinflibJarNoScan\", path));\n                    }\n                }\n            }\n        }\n\n        // Scan WEB-INF/classes\n        try {\n            URL webInfURL = context.getResource(Constants.WEB_INF_CLASSES);\n            if (webInfURL != null) {\n                // WEB-INF/classes will also be included in the URLs returned\n                // by the web application class loader so ensure the class path\n                // scanning below does not re-scan this location.\n                processedURLs.add(webInfURL);\n\n                if (isScanAllDirectories()) {\n                    URL url = context.getResource(Constants.WEB_INF_CLASSES + \"/META-INF\");\n                    if (url != null) {\n                        try {\n                            callback.scanWebInfClasses();\n                        } catch (IOException e) {\n                            log.warn(sm.getString(\"jarScan.webinfclassesFail\"), e);\n                        }\n                    }\n                }\n            }\n        } catch (MalformedURLException e) {\n            // Ignore. Won't happen. URLs are of the correct form.\n        }\n\n        // Scan the classpath\n        if (isScanClassPath()) {\n            if (log.isTraceEnabled()) {\n                log.trace(sm.getString(\"jarScan.classloaderStart\"));\n            }\n\n            ClassLoader stopLoader = null;\n            if (!isScanBootstrapClassPath()) {\n                // Stop when we reach the bootstrap class loader\n                stopLoader = ClassLoader.getSystemClassLoader().getParent();\n            }\n\n            ClassLoader classLoader = context.getClassLoader();\n\n            // JARs are treated as application provided until the common class\n            // loader is reached.\n            boolean isWebapp = true;\n\n            while (classLoader != null && classLoader != stopLoader) {\n                if (classLoader instanceof URLClassLoader) {\n                    if (isWebapp) {\n                        isWebapp = isWebappClassLoader(classLoader);\n                    }\n                    URL[] urls = ((URLClassLoader) classLoader).getURLs();\n                    for (int i=0; i<urls.length; i++) {\n                        if (processedURLs.contains(urls[i])) {\n                            // Skip this URL it has already been processed\n                            continue;\n                        }\n\n                        // TODO: Java 9 support. Details are TBD. It will depend\n                        //       on the extent to which Java 8 supports the\n                        //       Java 9 file formats since this code MUST run on\n                        //       Java 8.\n                        ClassPathEntry cpe = new ClassPathEntry(urls[i]);\n\n                        // JARs are scanned unless the filter says not to.\n                        // Directories are scanned for pluggability scans or\n                        // if scanAllDirectories is enabled unless the\n                        // filter says not to.\n                        if ((cpe.isJar() ||\n                                scanType == JarScanType.PLUGGABILITY ||\n                                isScanAllDirectories()) &&\n                                        getJarScanFilter().check(scanType,\n                                                cpe.getName())) {\n                            if (log.isDebugEnabled()) {\n                                log.debug(sm.getString(\"jarScan.classloaderJarScan\", urls[i]));\n                            }\n                            try {\n                                process(scanType, callback, urls[i], null, isWebapp);\n                            } catch (IOException ioe) {\n                                log.warn(sm.getString(\"jarScan.classloaderFail\", urls[i]), ioe);\n                            }\n                        } else {\n                            // JAR / directory has been skipped\n                            if (log.isTraceEnabled()) {\n                                log.trace(sm.getString(\"jarScan.classloaderJarNoScan\", urls[i]));\n                            }\n                        }\n                    }\n                }\n                classLoader = classLoader.getParent();\n            }\n        }\n    }","id":70224,"modified_method":"/**\n     * Scan the provided ServletContext and class loader for JAR files. Each JAR\n     * file found will be passed to the callback handler to be processed.\n     *\n     * @param scanType      The type of JAR scan to perform. This is passed to\n     *                          the filter which uses it to determine how to\n     *                          filter the results\n     * @param context       The ServletContext - used to locate and access\n     *                      WEB-INF/lib\n     * @param callback      The handler to process any JARs found\n     */\n    @Override\n    public void scan(JarScanType scanType, ServletContext context,\n            JarScannerCallback callback) {\n\n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"jarScan.webinflibStart\"));\n        }\n\n        Set<URL> processedURLs = new HashSet<>();\n\n        // Scan WEB-INF/lib\n        Set<String> dirList = context.getResourcePaths(Constants.WEB_INF_LIB);\n        if (dirList != null) {\n            Iterator<String> it = dirList.iterator();\n            while (it.hasNext()) {\n                String path = it.next();\n                if (path.endsWith(Constants.JAR_EXT) &&\n                        getJarScanFilter().check(scanType,\n                                path.substring(path.lastIndexOf('/')+1))) {\n                    // Need to scan this JAR\n                    if (log.isDebugEnabled()) {\n                        log.debug(sm.getString(\"jarScan.webinflibJarScan\", path));\n                    }\n                    URL url = null;\n                    try {\n                        url = context.getResource(path);\n                        processedURLs.add(url);\n                        process(scanType, callback, url, path, true, null);\n                    } catch (IOException e) {\n                        log.warn(sm.getString(\"jarScan.webinflibFail\", url), e);\n                    }\n                } else {\n                    if (log.isTraceEnabled()) {\n                        log.trace(sm.getString(\"jarScan.webinflibJarNoScan\", path));\n                    }\n                }\n            }\n        }\n\n        // Scan WEB-INF/classes\n        try {\n            URL webInfURL = context.getResource(Constants.WEB_INF_CLASSES);\n            if (webInfURL != null) {\n                // WEB-INF/classes will also be included in the URLs returned\n                // by the web application class loader so ensure the class path\n                // scanning below does not re-scan this location.\n                processedURLs.add(webInfURL);\n\n                if (isScanAllDirectories()) {\n                    URL url = context.getResource(Constants.WEB_INF_CLASSES + \"/META-INF\");\n                    if (url != null) {\n                        try {\n                            callback.scanWebInfClasses();\n                        } catch (IOException e) {\n                            log.warn(sm.getString(\"jarScan.webinfclassesFail\"), e);\n                        }\n                    }\n                }\n            }\n        } catch (MalformedURLException e) {\n            // Ignore. Won't happen. URLs are of the correct form.\n        }\n\n        // Scan the classpath\n        if (isScanClassPath()) {\n            if (log.isTraceEnabled()) {\n                log.trace(sm.getString(\"jarScan.classloaderStart\"));\n            }\n\n            ClassLoader stopLoader = null;\n            if (!isScanBootstrapClassPath()) {\n                // Stop when we reach the bootstrap class loader\n                stopLoader = ClassLoader.getSystemClassLoader().getParent();\n            }\n\n            ClassLoader classLoader = context.getClassLoader();\n\n            // JARs are treated as application provided until the common class\n            // loader is reached.\n            boolean isWebapp = true;\n\n            while (classLoader != null && classLoader != stopLoader) {\n                if (classLoader instanceof URLClassLoader) {\n                    if (isWebapp) {\n                        isWebapp = isWebappClassLoader(classLoader);\n                    }\n\n                    // Use a Deque so URLs can be removed as they are processed\n                    // and new URLs can be added as they are discovered during\n                    // processing.\n                    Deque<URL> classPathUrlsToProcess = new LinkedList<>();\n                    classPathUrlsToProcess.addAll(\n                            Arrays.asList(((URLClassLoader) classLoader).getURLs()));\n\n                    while (!classPathUrlsToProcess.isEmpty()) {\n                        URL url = classPathUrlsToProcess.pop();\n\n                        if (processedURLs.contains(url)) {\n                            // Skip this URL it has already been processed\n                            continue;\n                        }\n\n                        // TODO: Java 9 support. Details are TBD. It will depend\n                        //       on the extent to which Java 8 supports the\n                        //       Java 9 file formats since this code MUST run on\n                        //       Java 8.\n                        ClassPathEntry cpe = new ClassPathEntry(url);\n\n                        // JARs are scanned unless the filter says not to.\n                        // Directories are scanned for pluggability scans or\n                        // if scanAllDirectories is enabled unless the\n                        // filter says not to.\n                        if ((cpe.isJar() ||\n                                scanType == JarScanType.PLUGGABILITY ||\n                                isScanAllDirectories()) &&\n                                        getJarScanFilter().check(scanType,\n                                                cpe.getName())) {\n                            if (log.isDebugEnabled()) {\n                                log.debug(sm.getString(\"jarScan.classloaderJarScan\", url));\n                            }\n                            try {\n                                process(scanType, callback, url, null, isWebapp, classPathUrlsToProcess);\n                            } catch (IOException ioe) {\n                                log.warn(sm.getString(\"jarScan.classloaderFail\", url), ioe);\n                            }\n                        } else {\n                            // JAR / directory has been skipped\n                            if (log.isTraceEnabled()) {\n                                log.trace(sm.getString(\"jarScan.classloaderJarNoScan\", url));\n                            }\n                        }\n                    }\n                }\n                classLoader = classLoader.getParent();\n            }\n        }\n    }","commit_id":"5811e0a2082661a4d568d45eb1c8c707651b4fde","url":"https://github.com/apache/tomcat"},{"original_method":"private void process(JarScanType scanType, JarScannerCallback callback,\n            URL url, String webappPath, boolean isWebapp) throws IOException {\n\n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"jarScan.jarUrlStart\", url));\n        }\n\n        if (\"jar\".equals(url.getProtocol()) || url.getPath().endsWith(Constants.JAR_EXT)) {\n            try (Jar jar = JarFactory.newInstance(url)) {\n                callback.scan(jar, webappPath, isWebapp);\n            }\n        } else if (\"file\".equals(url.getProtocol())) {\n            File f;\n            try {\n                f = new File(url.toURI());\n                if (f.isFile() && isScanAllFiles()) {\n                    // Treat this file as a JAR\n                    URL jarURL = UriUtil.buildJarUrl(f);\n                    try (Jar jar = JarFactory.newInstance(jarURL)) {\n                        callback.scan(jar, webappPath, isWebapp);\n                    }\n                } else if (f.isDirectory()) {\n                    if (scanType == JarScanType.PLUGGABILITY) {\n                        callback.scan(f, webappPath, isWebapp);\n                    } else {\n                        File metainf = new File(f.getAbsoluteFile() + File.separator + \"META-INF\");\n                        if (metainf.isDirectory()) {\n                            callback.scan(f, webappPath, isWebapp);\n                        }\n                    }\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                // Wrap the exception and re-throw\n                IOException ioe = new IOException();\n                ioe.initCause(t);\n                throw ioe;\n            }\n        }\n    }","id":70225,"modified_method":"private void process(JarScanType scanType, JarScannerCallback callback,\n            URL url, String webappPath, boolean isWebapp, Deque<URL> classPathUrlsToProcess)\n            throws IOException {\n\n        if (log.isTraceEnabled()) {\n            log.trace(sm.getString(\"jarScan.jarUrlStart\", url));\n        }\n\n        if (\"jar\".equals(url.getProtocol()) || url.getPath().endsWith(Constants.JAR_EXT)) {\n            try (Jar jar = JarFactory.newInstance(url)) {\n                processManifest(jar, isWebapp, classPathUrlsToProcess);\n                callback.scan(jar, webappPath, isWebapp);\n            }\n        } else if (\"file\".equals(url.getProtocol())) {\n            File f;\n            try {\n                f = new File(url.toURI());\n                if (f.isFile() && isScanAllFiles()) {\n                    // Treat this file as a JAR\n                    URL jarURL = UriUtil.buildJarUrl(f);\n                    try (Jar jar = JarFactory.newInstance(jarURL)) {\n                        processManifest(jar, isWebapp, classPathUrlsToProcess);\n                        callback.scan(jar, webappPath, isWebapp);\n                    }\n                } else if (f.isDirectory()) {\n                    if (scanType == JarScanType.PLUGGABILITY) {\n                        callback.scan(f, webappPath, isWebapp);\n                    } else {\n                        File metainf = new File(f.getAbsoluteFile() + File.separator + \"META-INF\");\n                        if (metainf.isDirectory()) {\n                            callback.scan(f, webappPath, isWebapp);\n                        }\n                    }\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                // Wrap the exception and re-throw\n                IOException ioe = new IOException();\n                ioe.initCause(t);\n                throw ioe;\n            }\n        }\n    }","commit_id":"5811e0a2082661a4d568d45eb1c8c707651b4fde","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * Note that list of URLs returned by this method may not be complete. The\n     * web application class loader accesses class loader resources via the\n     * {@link WebResourceRoot} which supports the arbitrary mapping of\n     * additional files, directories and contents of JAR files under\n     * WEB-INF/classes. Any such resources will not be included in the URLs\n     * returned here.\n     */\n    @Override\n    public URL[] getURLs() {\n        return super.getURLs();\n    }","id":70226,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * Note that list of URLs returned by this method may not be complete. The\n     * web application class loader accesses class loader resources via the\n     * {@link WebResourceRoot} which supports the arbitrary mapping of\n     * additional files, directories and contents of JAR files under\n     * WEB-INF/classes. Any such resources will not be included in the URLs\n     * returned here.\n     */\n    @Override\n    public URL[] getURLs() {\n        ArrayList<URL> result = new ArrayList<>();\n        result.addAll(localRepositories);\n        result.addAll(Arrays.asList(super.getURLs()));\n        return result.toArray(new URL[result.size()]);\n    }","commit_id":"ee1e4e2a9b29417c230977f10c57357f0bbad01f","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Start the class loader.\n     *\n     * @exception LifecycleException if a lifecycle error occurs\n     */\n    @Override\n    public void start() throws LifecycleException {\n\n        state = LifecycleState.STARTING_PREP;\n\n        WebResource classes = resources.getResource(\"/WEB-INF/classes\");\n        if (classes.isDirectory() && classes.canRead()) {\n            addURL(classes.getURL());\n        }\n        WebResource[] jars = resources.listResources(\"/WEB-INF/lib\");\n        for (WebResource jar : jars) {\n            if (jar.getName().endsWith(\".jar\") && jar.isFile() && jar.canRead()) {\n                addURL(jar.getURL());\n                jarModificationTimes.put(\n                        jar.getName(), Long.valueOf(jar.getLastModified()));\n            }\n        }\n\n        state = LifecycleState.STARTING;\n\n        String encoding = null;\n        try {\n            encoding = System.getProperty(\"file.encoding\");\n        } catch (SecurityException e) {\n            return;\n        }\n        if (encoding.indexOf(\"EBCDIC\")!=-1) {\n            needConvert = true;\n        }\n\n        state = LifecycleState.STARTED;\n    }","id":70227,"modified_method":"/**\n     * Start the class loader.\n     *\n     * @exception LifecycleException if a lifecycle error occurs\n     */\n    @Override\n    public void start() throws LifecycleException {\n\n        state = LifecycleState.STARTING_PREP;\n\n        WebResource classes = resources.getResource(\"/WEB-INF/classes\");\n        if (classes.isDirectory() && classes.canRead()) {\n            localRepositories.add(classes.getURL());\n        }\n        WebResource[] jars = resources.listResources(\"/WEB-INF/lib\");\n        for (WebResource jar : jars) {\n            if (jar.getName().endsWith(\".jar\") && jar.isFile() && jar.canRead()) {\n                localRepositories.add(jar.getURL());\n                jarModificationTimes.put(\n                        jar.getName(), Long.valueOf(jar.getLastModified()));\n            }\n        }\n\n        state = LifecycleState.STARTING;\n\n        String encoding = null;\n        try {\n            encoding = System.getProperty(\"file.encoding\");\n        } catch (SecurityException e) {\n            return;\n        }\n        if (encoding.indexOf(\"EBCDIC\")!=-1) {\n            needConvert = true;\n        }\n\n        state = LifecycleState.STARTED;\n    }","commit_id":"ee1e4e2a9b29417c230977f10c57357f0bbad01f","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n   * This is actually the main method, but in order to make it testable, instead of exiting in case\n   * of error it returns null, whereas in case of success it returns the retrieved value as shown\n   * on the console.\n   *\n   * @param args   the command line arguments of the main method\n   * @param config The configuration of the gateway\n   * @return null in case of error, an string representing the retrieved value in case of success\n   */\n  public String execute0(String[] args, CConfiguration config) {\n    // parse and validate arguments\n    validateArguments(args);\n    if (help) return \"\";\n\n    // determine the base url for the GET request\n    if (baseUrl == null)\n      baseUrl = Util.findBaseUrl(config, RestAccessor.class, connector, hostname);\n    if (baseUrl == null) {\n      System.err.println(\"Can't figure out the URL to send to. Please use --base or --connector to specify.\");\n      return null;\n    } else {\n      if (verbose) System.out.println(\"Using base URL: \" + baseUrl);\n    }\n\n    String urlEncodedKey = null;\n    if (keyNeeded) {\n      urlEncodedKey = Util.urlEncode(readKeyOrValue(\"key\", key, keyFile));\n      if (urlEncodedKey == null) return null;\n    }\n    byte[] binaryValue = null;\n    if (valueNeeded) {\n      binaryValue = readKeyOrValue(\"value\", value, valueFile);\n      if (binaryValue == null) return null;\n    }\n\n    // construct the full URL and verify its well-formedness\n    String requestUrl = baseUrl + \"default/\";\n    if (keyNeeded) requestUrl += urlEncodedKey;\n    URI uri;\n    try {\n      uri = URI.create(requestUrl);\n    } catch (IllegalArgumentException e) {\n      // this can only happen if the --host, or --base are not valid for a URL\n      System.err.println(\"Invalid request URI '\" + requestUrl\n          + \"'. Check the validity of --host or --base arguments.\");\n      return null;\n    }\n\n    // prepare for HTTP\n    HttpClient client = new DefaultHttpClient();\n    HttpResponse response;\n\n    // the rest depends on the command\n    if (\"read\".equals(command)) {\n      try {\n        response = client.execute(new HttpGet(uri));\n        client.getConnectionManager().shutdown();\n      } catch (IOException e) {\n        System.err.println(\"Error sending HTTP request: \" + e.getMessage());\n        return null;\n      }\n      // show the HTTP status and verify it was successful\n      if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n        System.err.println(response.getStatusLine());\n        return null;\n      } else {\n        if (verbose) System.out.println(response.getStatusLine());\n      }\n      // read the binary value from the HTTP response\n      binaryValue = Util.readHttpResponse(response);\n      if (binaryValue == null) return null;\n      // now make returned value available to user\n      return writeValue(binaryValue);\n    }\n    else if (\"write\".equals(command)) {\n      try {\n        HttpPut put = new HttpPut(uri);\n        put.setEntity(new ByteArrayEntity(binaryValue));\n        response = client.execute(put);\n        client.getConnectionManager().shutdown();\n      } catch (IOException e) {\n        System.err.println(\"Error sending HTTP request: \" + e.getMessage());\n        return null;\n      }\n      // show the HTTP status and verify it was successful\n      if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n        System.err.println(response.getStatusLine());\n        return null;\n      } else {\n        if (verbose) System.out.println(response.getStatusLine());\n      }\n      return \"OK.\";\n    }\n    else if (\"delete\".equals(command)) {\n      try {\n        response = client.execute(new HttpDelete(uri));\n        client.getConnectionManager().shutdown();\n      } catch (IOException e) {\n        System.err.println(\"Error sending HTTP request: \" + e.getMessage());\n        return null;\n      }\n      // show the HTTP status and verify it was successful\n      if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n        System.err.println(response.getStatusLine());\n        return null;\n      } else {\n        if (verbose) System.out.println(response.getStatusLine());\n      }\n      return \"OK.\";\n    }\n    else if (\"list\".equals(command)) {\n      // we have to massage the URL a little more\n      //String enc = urlEncoded ? \"url\" : hexEncoded ? \"hex\" : encoding;\n      requestUrl += \"?q=list\";\n      try {\n        uri = URI.create(requestUrl);\n      } catch (IllegalArgumentException e) {\n        // this can only happen if the --host, or --base are not valid for a URL\n        System.err.println(\"Invalid request URI '\" + requestUrl\n            + \"'. Check the validity of --host or --base arguments.\");\n        return null;\n      }\n      // now execute this as a get\n      try {\n        response = client.execute(new HttpGet(uri));\n        client.getConnectionManager().shutdown();\n      } catch (IOException e) {\n        System.err.println(\"Error sending HTTP request: \" + e.getMessage());\n        return null;\n      }\n      if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n        System.err.println(response.getStatusLine());\n        return null;\n      } else {\n        if (verbose) System.out.println(response.getStatusLine());\n      }\n      // read the binary value from the HTTP response\n      binaryValue = Util.readHttpResponse(response);\n      if (binaryValue == null) return null;\n      // now make returned value available to user\n      return writeValue(binaryValue);\n    }\n    return null;\n  }","id":70228,"modified_method":"/**\n   * This is actually the main method, but in order to make it testable, instead of exiting in case\n   * of error it returns null, whereas in case of success it returns the retrieved value as shown\n   * on the console.\n   *\n   * @param args   the command line arguments of the main method\n   * @param config The configuration of the gateway\n   * @return null in case of error, an string representing the retrieved value in case of success\n   */\n  public String execute0(String[] args, CConfiguration config) {\n    // parse and validate arguments\n    validateArguments(args);\n    if (help) return \"\";\n\n    // determine the base url for the GET request\n    if (baseUrl == null)\n      baseUrl = Util.findBaseUrl(config, RestAccessor.class, connector, hostname);\n    if (baseUrl == null) {\n      System.err.println(\"Can't figure out the URL to send to. Please use --base or --connector to specify.\");\n      return null;\n    } else {\n      if (verbose) System.out.println(\"Using base URL: \" + baseUrl);\n    }\n\n    String urlEncodedKey = null;\n    if (keyNeeded) {\n      urlEncodedKey = Util.urlEncode(readKeyOrValue(\"key\", key, keyFile));\n      if (urlEncodedKey == null) return null;\n    }\n    byte[] binaryValue = null;\n    if (valueNeeded) {\n      binaryValue = readKeyOrValue(\"value\", value, valueFile);\n      if (binaryValue == null) return null;\n    }\n\n    // construct the full URL and verify its well-formedness\n    String requestUrl = baseUrl + \"default\";\n    if (keyNeeded) requestUrl += \"/\" + urlEncodedKey;\n    if (verbose && !\"list\".equals(command)) System.out.println(\"Request URI is: \" + requestUrl);\n    URI uri;\n    try {\n      uri = URI.create(requestUrl);\n    } catch (IllegalArgumentException e) {\n      // this can only happen if the --host, or --base are not valid for a URL\n      System.err.println(\"Invalid request URI '\" + requestUrl\n          + \"'. Check the validity of --host or --base arguments.\");\n      return null;\n    }\n\n    // prepare for HTTP\n    HttpClient client = new DefaultHttpClient();\n    HttpResponse response;\n\n    // the rest depends on the command\n    if (\"read\".equals(command)) {\n      try {\n        response = client.execute(new HttpGet(uri));\n        client.getConnectionManager().shutdown();\n      } catch (IOException e) {\n        System.err.println(\"Error sending HTTP request: \" + e.getMessage());\n        return null;\n      }\n      // show the HTTP status and verify it was successful\n      if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n        System.err.println(response.getStatusLine());\n        return null;\n      } else {\n        if (verbose) System.out.println(response.getStatusLine());\n      }\n      // read the binary value from the HTTP response\n      binaryValue = Util.readHttpResponse(response);\n      if (binaryValue == null) return null;\n      // now make returned value available to user\n      return writeValue(binaryValue);\n    }\n    else if (\"write\".equals(command)) {\n      try {\n        HttpPut put = new HttpPut(uri);\n        put.setEntity(new ByteArrayEntity(binaryValue));\n        response = client.execute(put);\n        client.getConnectionManager().shutdown();\n      } catch (IOException e) {\n        System.err.println(\"Error sending HTTP request: \" + e.getMessage());\n        return null;\n      }\n      // show the HTTP status and verify it was successful\n      if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n        System.err.println(response.getStatusLine());\n        return null;\n      } else {\n        if (verbose) System.out.println(response.getStatusLine());\n      }\n      return \"OK.\";\n    }\n    else if (\"delete\".equals(command)) {\n      try {\n        response = client.execute(new HttpDelete(uri));\n        client.getConnectionManager().shutdown();\n      } catch (IOException e) {\n        System.err.println(\"Error sending HTTP request: \" + e.getMessage());\n        return null;\n      }\n      // show the HTTP status and verify it was successful\n      if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n        System.err.println(response.getStatusLine());\n        return null;\n      } else {\n        if (verbose) System.out.println(response.getStatusLine());\n      }\n      return \"OK.\";\n    }\n    else if (\"list\".equals(command)) {\n      // we have to massage the URL a little more\n      //String enc = urlEncoded ? \"url\" : hexEncoded ? \"hex\" : encoding;\n      requestUrl += \"?q=list\";\n      if (urlEncoded) requestUrl += \"&enc=url\";\n      else if (hexEncoded) requestUrl += \"&enc=hex\";\n      else if (encoding != null) requestUrl += \"&enc=\" + encoding;\n      else requestUrl += \"&enc=\" + Charset.defaultCharset().displayName();\n      if (verbose) System.out.println(\"Request URI is: \" + requestUrl);\n      try {\n        uri = URI.create(requestUrl);\n      } catch (IllegalArgumentException e) {\n        // this can only happen if the --host, or --base are not valid for a URL\n        System.err.println(\"Invalid request URI '\" + requestUrl\n            + \"'. Check the validity of --host or --base arguments.\");\n        return null;\n      }\n      // now execute this as a get\n      try {\n        response = client.execute(new HttpGet(uri));\n        client.getConnectionManager().shutdown();\n      } catch (IOException e) {\n        System.err.println(\"Error sending HTTP request: \" + e.getMessage());\n        return null;\n      }\n      if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n        System.err.println(response.getStatusLine());\n        return null;\n      } else {\n        if (verbose) System.out.println(response.getStatusLine());\n      }\n      // read the binary value from the HTTP response\n      binaryValue = Util.readHttpResponse(response);\n      if (binaryValue == null) return null;\n      // now make returned value available to user\n      return writeList(binaryValue);\n    }\n    return null;\n  }","commit_id":"4fea5d7f0bb9a83aea3a30a053f80138fd785071","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * This tests the GetKeyByValue tool for various combinations of\n   * command line arguments. Note that this tool is a command line tool,\n   * and it prints stuff on the console. That is not testable with this\n   * unit test. Therefore we only test whether it succeeds or fails for\n   * certain command line argument.\n   *\n   * @throws Exception if anything goes wrong\n   */\n  @Test\n  public void testUsage() throws Exception {\n\n    // configure a gateway\n    final String name = \"access.rest\";\n    final String prefix = \"/continuuity\";\n    final String path = \"/table/\";\n    final int port = Util.findFreePort();\n\n    CConfiguration configuration = new CConfiguration();\n    configuration.set(Constants.CONFIG_CONNECTORS, name);\n    configuration.set(Constants.buildConnectorPropertyName(name,\n        Constants.CONFIG_CLASSNAME), RestAccessor.class.getCanonicalName());\n    configuration.setInt(Constants.buildConnectorPropertyName(name,\n        Constants.CONFIG_PORT), port);\n    configuration.set(Constants.buildConnectorPropertyName(name,\n        Constants.CONFIG_PATH_PREFIX), prefix);\n    configuration.set(Constants.buildConnectorPropertyName(name,\n        Constants.CONFIG_PATH_MIDDLE), path);\n\n    // Now create our Gateway with a dummy consumer (we don't run collectors)\n    // and make sure to pass the data fabric executor to the gateway.\n    Gateway gateway = new Gateway();\n    gateway.setExecutor(this.executor);\n    gateway.setConsumer(new Util.NoopConsumer());\n    gateway.start(null, configuration);\n\n    // argument combinations that should return success\n    String[][] goodArgsList = {\n        {\"--help\"}, // print help\n        {\"read\", \"--key\", \"cat\"}, // simple key\n        {\"read\", \"--key\", \"k\\u00eby\", \"--encoding\", \"Latin1\"}, // non-ascii key with latin1 encoding\n        {\"read\", \"--key\", \"636174\", \"--hex\"}, // \"cat\" in hex notation\n        {\"read\", \"--key\", \"6beb79\", \"--hex\"}, // non-Ascii \"këy\" in hex notation\n        {\"read\", \"--key\", \"cat\", \"--base\", \"http://localhost:\" + port + prefix + path}, // explicit base url\n        {\"read\", \"--key\", \"cat\", \"--host\", \"localhost\"}, // correct hostname\n        {\"read\", \"--key\", \"cat\", \"--connector\", name}, // valid connector name\n    };\n\n    // argument combinations that should lead to failure\n    String[][] badArgsList = {\n        {},\n        {\"read\", \"--key\"}, // no key\n        {\"read\", \"--garble\"}, // invalid argument\n        {\"read\", \"--encoding\"}, // missing argument\n        {\"read\", \"--key-file\"}, // missing argument\n        {\"read\", \"--value-file\"}, // missing argument\n        {\"read\", \"--base\"}, // missing argument\n        {\"read\", \"--host\"}, // missing argument\n        {\"read\", \"--connector\"}, // missing argument\n        {\"read\", \"--connector\", \"fantasy.name\"}, // invalid connector name\n        {\"read\", \"--key\", \"funk\", \"--hex\"}, // non-hexadecimal key with --hex\n        {\"read\", \"--key\", \"babed\", \"--hex\"}, // key of uneven length with --hex\n        {\"read\", \"--key\", \"pfunk\", \"--encoding\", \"fantasy string\"}, // invalid encoding\n        {\"read\", \"--key\", \"k\\u00eby\", \"--ascii\"}, // non-ascii key with --ascii. Note that this drops the msb of the ë and hance uses \"key\" as the key -> 404\n        {\"read\", \"--key\", \"key with blanks\", \"--url\"}, // url-encoded key may not contain blanks\n        {\"read\", \"--key\", \"cat\", \"--base\", \"http://localhost\" + prefix + path}, // explicit but port is missing -> connection refused\n        {\"read\", \"--key\", \"cat\", \"--base\", \"http://localhost:\" + port + \"/gataca\" + path}, // explicit but wrong base -> 404\n        {\"read\", \"--key\", \"cat\", \"--host\", \"my.fantasy.hostname\"}, // bad hostname -> 404\n        {\"read\", \"--host\", \"localhost\"}, // no key given\n    };\n\n    // test each good combination\n    for (String[] args : goodArgsList) {\n      LOG.info(\"Testing: \" + Arrays.toString(args));\n      Assert.assertNotNull(new DataClient().execute(args, configuration));\n    }\n    // test each bad combination\n    for (String[] args : badArgsList) {\n      LOG.info(\"Testing: \" + Arrays.toString(args));\n      Assert.assertNull(new DataClient().execute(args, configuration));\n    }\n\n    // and shut down\n    gateway.stop(false);\n  }","id":70229,"modified_method":"/**\n   * This tests the DataClient tool for various combinations of\n   * command line arguments. Note that this tool is a command line tool,\n   * and it prints stuff on the console. That is not testable with this\n   * unit test. Therefore we only test whether it succeeds or fails for\n   * certain command line argument.\n   *\n   * @throws Exception if anything goes wrong\n   */\n  @Test\n  public void testUsage() throws Exception {\n\n    // configure a gateway\n    final String name = \"access.rest\";\n    final String prefix = \"/continuuity\";\n    final String path = \"/table/\";\n    final int port = Util.findFreePort();\n\n    CConfiguration configuration = new CConfiguration();\n    configuration.set(Constants.CONFIG_CONNECTORS, name);\n    configuration.set(Constants.buildConnectorPropertyName(name,\n        Constants.CONFIG_CLASSNAME), RestAccessor.class.getCanonicalName());\n    configuration.setInt(Constants.buildConnectorPropertyName(name,\n        Constants.CONFIG_PORT), port);\n    configuration.set(Constants.buildConnectorPropertyName(name,\n        Constants.CONFIG_PATH_PREFIX), prefix);\n    configuration.set(Constants.buildConnectorPropertyName(name,\n        Constants.CONFIG_PATH_MIDDLE), path);\n\n    // Now create our Gateway with a dummy consumer (we don't run collectors)\n    // and make sure to pass the data fabric executor to the gateway.\n    Gateway gateway = new Gateway();\n    gateway.setExecutor(this.executor);\n    gateway.setConsumer(new Util.NoopConsumer());\n    gateway.start(null, configuration);\n\n    // argument combinations that should return success\n    String[][] goodArgsList = {\n        { \"--help\" }, // print help\n\n        { \"read\", \"--key\", \"cat\" }, // simple key\n        { \"read\", \"--key\", \"k\\u00eby\", \"--encoding\", \"Latin1\" }, // non-ascii key with latin1 encoding\n        { \"read\", \"--key\", \"636174\", \"--hex\" }, // \"cat\" in hex notation\n        { \"read\", \"--key\", \"6beb79\", \"--hex\" }, // non-Ascii \"këy\" in hex notation\n        { \"read\", \"--key\", \"cat\", \"--base\", \"http://localhost:\" + port + prefix + path }, // explicit base url\n        { \"read\", \"--key\", \"cat\", \"--host\", \"localhost\" }, // correct hostname\n        { \"read\", \"--key\", \"cat\", \"--connector\", name }, // valid connector name\n\n        { \"list\" },\n        { \"list\", \"--url\" },\n        { \"list\", \"--hex\" },\n        { \"list\", \"--encoding\", \"Latin1\" },\n\n        { \"write\", \"--key\", \"pfunk\", \"--value\", \"the cat\" },\n        { \"write\", \"--key\", \"c\\u00e4t\", \"--value\", \"pf\\u00fcnk\", \"--encoding\", \"Latin1\" }, // non-Ascii cät=pfünk\n        { \"write\", \"--key\", \"cafebabe\", \"--value\", \"deadbeef\", \"--hex\" }, // hex values\n\n        // delete the value just written\n        { \"delete\", \"--key\", \"pfunk\" },\n        { \"delete\", \"--key\", \"c\\u00e4t\", \"--encoding\", \"Latin1\" },\n        { \"delete\", \"--key\", \"cafebabe\", \"--hex\" },\n\n    };\n\n    // argument combinations that should lead to failure\n    String[][] badArgsList = {\n        { },\n        { \"read\", \"--key\" }, // no key\n        { \"read\", \"--garble\" }, // invalid argument\n        { \"read\", \"--encoding\" }, // missing argument\n        { \"read\", \"--key-file\" }, // missing argument\n        { \"read\", \"--value-file\" }, // missing argument\n        { \"read\", \"--base\" }, // missing argument\n        { \"read\", \"--host\" }, // missing argument\n        { \"read\", \"--connector\" }, // missing argument\n        { \"read\", \"--connector\", \"fantasy.name\" }, // invalid connector name\n        { \"read\", \"--key\", \"funk\", \"--hex\" }, // non-hexadecimal key with --hex\n        { \"read\", \"--key\", \"babed\", \"--hex\" }, // key of uneven length with --hex\n        { \"read\", \"--key\", \"pfunk\", \"--encoding\", \"fantasy string\" }, // invalid encoding\n        { \"read\", \"--key\", \"k\\u00eby\", \"--ascii\" }, // non-ascii key with --ascii. Note that this drops the msb of the ë and hance uses \"key\" as the key -> 404\n        { \"read\", \"--key\", \"key with blanks\", \"--url\" }, // url-encoded key may not contain blanks\n        { \"read\", \"--key\", \"cat\", \"--base\", \"http://localhost\" + prefix + path }, // explicit but port is missing -> connection refused\n        { \"read\", \"--key\", \"cat\", \"--base\", \"http://localhost:\" + port + \"/gataca\" + path }, // explicit but wrong base -> 404\n        { \"read\", \"--key\", \"cat\", \"--host\", \"my.fantasy.hostname\" }, // bad hostname -> 404\n        { \"read\", \"--host\", \"localhost\" }, // no key given\n\n        { \"list\", \"--encoding\" }, // missing encoding\n        { \"list\", \"--key\", \"pfunk\" }, // key not allowed\n        { \"list\", \"--value\", \"the cat\" }, // value not allowed for list\n\n        { \"delete\" }, // key missing\n        { \"delete\", \"--key\", \"pfunks\", \"--hex\" }, // not a hex string\n        { \"delete\", \"--key\", \"cafebab\", \"--hex\" }, // not a hex string\n        { \"delete\", \"--key\", \"cafe babe\", \"--url\" }, // url string can't have blank\n        { \"delete\", \"--value\", \"cafe babe\" }, // can't delete by value\n\n    };\n\n    // test each good combination\n    for (String[] args : goodArgsList) {\n      LOG.info(\"Testing: \" + Arrays.toString(args));\n      Assert.assertNotNull(new DataClient().execute(args, configuration));\n    }\n    // test each bad combination\n    for (String[] args : badArgsList) {\n      LOG.info(\"Testing: \" + Arrays.toString(args));\n      Assert.assertNull(new DataClient().execute(args, configuration));\n    }\n\n    // and shut down\n    gateway.stop(false);\n  }","commit_id":"4fea5d7f0bb9a83aea3a30a053f80138fd785071","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Set up our data fabric and insert some test key/value pairs.\n   */\n  @Before\n  public void setupDataFabric() throws Exception {\n    // Set up our Guice injections\n    Injector injector = Guice.createInjector(\n        new DataFabricModules().getInMemoryModules());\n    this.executor = injector.getInstance(OperationExecutor.class);\n\n    String[][] keyValues = {\n        {\"cat\", \"pfunk\"}, // a simple key and value\n        {\"the cat\", \"pfunk\"}, // a key with a blank\n        {\"k\\u00eby\", \"v\\u00e4l\\u00fce\"} // key and value with non-ascii characters\n    };\n    // create a batch of writes\n    List<WriteOperation> operations = new ArrayList<WriteOperation>(keyValues.length);\n    for (String[] kv : keyValues) {\n      operations.add(new Write(kv[0].getBytes(\"ISO8859_1\"), kv[1].getBytes(\"ISO8859_1\")));\n    }\n    // execute the batch and ensure it was successful\n    BatchOperationResult result = executor.execute(operations);\n    Assert.assertTrue(result.isSuccess());\n  }","id":70230,"modified_method":"/**\n   * Set up our data fabric and insert some test key/value pairs.\n   */\n  @Before\n  public void setupDataFabric() throws Exception {\n    DataClient.debug = true;\n\n    // Set up our Guice injections\n    Injector injector = Guice.createInjector(\n        new DataFabricModules().getInMemoryModules());\n    this.executor = injector.getInstance(OperationExecutor.class);\n\n    String[][] keyValues = {\n        { \"cat\", \"pfunk\" }, // a simple key and value\n        { \"the cat\", \"pfunk\" }, // a key with a blank\n        { \"k\\u00eby\", \"v\\u00e4l\\u00fce\" } // key and value with non-ascii characters\n    };\n    // create a batch of writes\n    List<WriteOperation> operations = new ArrayList<WriteOperation>(keyValues.length);\n    for (String[] kv : keyValues) {\n      operations.add(new Write(kv[0].getBytes(\"ISO8859_1\"), kv[1].getBytes(\"ISO8859_1\")));\n    }\n    // execute the batch and ensure it was successful\n    BatchOperationResult result = executor.execute(operations);\n    Assert.assertTrue(result.isSuccess());\n  }","commit_id":"4fea5d7f0bb9a83aea3a30a053f80138fd785071","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * This tests that the accessor returns the correct HTTP codes for invalid requests\n   *\n   * @throws Exception if anything goes wrong\n   */\n  @Test\n  public void testBadRequests() throws Exception {\n    // configure an accessor\n    String prefix = \"/continuuity\", middle = \"/table/\";\n    String baseUrl = setupAccessor(\"access.rest\", prefix, middle);\n    int port = this.accessor.getHttpConfig().getPort();\n\n    // test one valid key\n    Util.writeAndGet(this.executor, baseUrl, \"x\", \"y\");\n\n    // submit a request without prefix in the path -> 404 Not Found\n    Assert.assertEquals(404, Util.sendGetRequest(\"http://localhost:\" + port + \"/somewhere\"));\n    Assert.assertEquals(404, Util.sendGetRequest(\"http://localhost:\" + port + prefix + \"/data\"));\n    // submit a request with correct prefix but no table -> 404 Not Found\n    Assert.assertEquals(404, Util.sendGetRequest(\"http://localhost:\" + port + prefix + middle + \"x\"));\n    // submit a request with correct prefix but non-existent table -> 404 Not Found\n    Assert.assertEquals(404, Util.sendGetRequest(\"http://localhost:\" + port + prefix + middle + \"other/x\"));\n    // submit a POST to the accessor (which only supports GET) -> 405 Not Allowed\n    Assert.assertEquals(405, Util.sendPostRequest(baseUrl));\n    // submit a GET without key -> 404 Not Found\n    Assert.assertEquals(404, Util.sendGetRequest(baseUrl));\n    // submit a GET with existing key -> 200 OK\n    Assert.assertEquals(200, Util.sendGetRequest(baseUrl + \"x\"));\n    // submit a GET with non-existing key -> 404 Not Found\n    Assert.assertEquals(404, Util.sendGetRequest(baseUrl + \"does.not.exist\"));\n    // submit a GET with existing key but more after that in the path -> 404 Not Found\n    Assert.assertEquals(404, Util.sendGetRequest(baseUrl + \"x/y/z\"));\n    // submit a GET with existing key but with query part -> 501 Not Implemented\n    Assert.assertEquals(501, Util.sendGetRequest(baseUrl + \"x?query=none\"));\n\n    // test some bad delete requests\n    // submit a request without the correct prefix in the path -> 404 Not Found\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port));\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + \"/\"));\n    // no table\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + \"/table\"));\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle));\n    // table without key\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle + \"default\"));\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle + \"sometable\"));\n    // unknown table\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle + \"sometable/x\"));\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle + \"sometable/pfunk\"));\n    // no key\n    Assert.assertEquals(404, Util.sendDeleteRequest(baseUrl));\n    // non-existent key, for now expect Not Implemented\n    Assert.assertEquals(404, Util.sendDeleteRequest(baseUrl + \"no-exist\"));\n    // correct key but more in the path\n    Assert.assertEquals(404, Util.sendDeleteRequest(baseUrl + \"x/a\"));\n    // correct key but unsupported query -> 501 Not Implemented\n    Assert.assertEquals(501, Util.sendDeleteRequest(baseUrl + \"x?force=true\"));\n\n    // test some bad put requests\n    // submit a request without the correct prefix in the path -> 404 Not Found\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port));\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + \"/\"));\n    // no table\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + prefix + \"/table\"));\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle));\n    // table without key\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle + \"default\"));\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle + \"sometable\"));\n    // unknown table\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle + \"sometable/x\"));\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle + \"sometable/pfunk\"));\n    // no key\n    Assert.assertEquals(404, Util.sendPutRequest(baseUrl));\n    // correct key but more in the path\n    Assert.assertEquals(404, Util.sendPutRequest(baseUrl + \"x/\"));\n    Assert.assertEquals(404, Util.sendPutRequest(baseUrl + \"x/a\"));\n    // correct key but unsupported query -> 501 Not Implemented\n    Assert.assertEquals(501, Util.sendPutRequest(baseUrl + \"x?force=true\"));\n\n    // and shutdown\n    this.accessor.stop();\n  }","id":70231,"modified_method":"/**\n   * This tests that the accessor returns the correct HTTP codes for invalid requests\n   *\n   * @throws Exception if anything goes wrong\n   */\n  @Test\n  public void testBadRequests() throws Exception {\n    // configure an accessor\n    String prefix = \"/continuuity\", middle = \"/table/\";\n    String baseUrl = setupAccessor(\"access.rest\", prefix, middle);\n    int port = this.accessor.getHttpConfig().getPort();\n\n    // test one valid key\n    Util.writeAndGet(this.executor, baseUrl, \"x\", \"y\");\n\n    // submit a request without prefix in the path -> 404 Not Found\n    Assert.assertEquals(404, Util.sendGetRequest(\"http://localhost:\" + port + \"/somewhere\"));\n    Assert.assertEquals(404, Util.sendGetRequest(\"http://localhost:\" + port + prefix + \"/data\"));\n    // submit a request with correct prefix but no table -> 404 Not Found\n    Assert.assertEquals(400, Util.sendGetRequest(\"http://localhost:\" + port + prefix + middle + \"x\"));\n    // submit a request with correct prefix but non-existent table -> 404 Not Found\n    Assert.assertEquals(404, Util.sendGetRequest(\"http://localhost:\" + port + prefix + middle + \"other/x\"));\n    // submit a POST to the accessor (which only supports GET) -> 405 Not Allowed\n    Assert.assertEquals(405, Util.sendPostRequest(baseUrl));\n    // submit a GET without key -> 404 Not Found\n    Assert.assertEquals(400, Util.sendGetRequest(baseUrl));\n    // submit a GET with existing key -> 200 OK\n    Assert.assertEquals(200, Util.sendGetRequest(baseUrl + \"x\"));\n    // submit a GET with non-existing key -> 404 Not Found\n    Assert.assertEquals(404, Util.sendGetRequest(baseUrl + \"does.not.exist\"));\n    // submit a GET with existing key but more after that in the path -> 404 Not Found\n    Assert.assertEquals(400, Util.sendGetRequest(baseUrl + \"x/y/z\"));\n    // submit a GET with existing key but with query part -> 501 Not Implemented\n    Assert.assertEquals(501, Util.sendGetRequest(baseUrl + \"x?query=none\"));\n\n    // test some bad delete requests\n    // submit a request without the correct prefix in the path -> 404 Not Found\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port));\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + \"/\"));\n    // no table\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + \"/table\"));\n    Assert.assertEquals(400, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle));\n    // table without key\n    Assert.assertEquals(400, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle + \"default\"));\n    Assert.assertEquals(400, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle + \"sometable\"));\n    // unknown table\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle + \"sometable/x\"));\n    Assert.assertEquals(404, Util.sendDeleteRequest(\"http://localhost:\" + port + prefix + middle + \"sometable/pfunk\"));\n    // no key\n    Assert.assertEquals(400, Util.sendDeleteRequest(baseUrl));\n    // non-existent key\n    Assert.assertEquals(404, Util.sendDeleteRequest(baseUrl + \"no-exist\"));\n    // correct key but more in the path\n    Assert.assertEquals(400, Util.sendDeleteRequest(baseUrl + \"x/a\"));\n    // correct key but unsupported query -> 501 Not Implemented\n    Assert.assertEquals(501, Util.sendDeleteRequest(baseUrl + \"x?force=true\"));\n\n    // test some bad put requests\n    // submit a request without the correct prefix in the path -> 404 Not Found\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port));\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + \"/\"));\n    // no table\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + prefix + \"/table\"));\n    Assert.assertEquals(400, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle));\n    // table without key\n    Assert.assertEquals(400, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle + \"default\"));\n    Assert.assertEquals(400, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle + \"sometable\"));\n    // unknown table\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle + \"sometable/x\"));\n    Assert.assertEquals(404, Util.sendPutRequest(\"http://localhost:\" + port + prefix + middle + \"sometable/pfunk\"));\n    // no key\n    Assert.assertEquals(400, Util.sendPutRequest(baseUrl));\n    // correct key but more in the path\n    Assert.assertEquals(400, Util.sendPutRequest(baseUrl + \"x/\"));\n    Assert.assertEquals(400, Util.sendPutRequest(baseUrl + \"x/a\"));\n    // correct key but unsupported query -> 501 Not Implemented\n    Assert.assertEquals(501, Util.sendPutRequest(baseUrl + \"x?force=true\"));\n\n    // and shutdown\n    this.accessor.stop();\n  }","commit_id":"4fea5d7f0bb9a83aea3a30a053f80138fd785071","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void messageReceived(ChannelHandlerContext context, MessageEvent message) throws Exception {\n    HttpRequest request = (HttpRequest) message.getMessage();\n\n    LOG.debug(\"Request received\");\n\n    // we only support get requests for now\n    HttpMethod method = request.getMethod();\n    if (method != HttpMethod.GET && method != HttpMethod.DELETE && method != HttpMethod.PUT) {\n      LOG.debug(\"Received a \" + method + \" request, which is not supported\");\n      respondNotAllowed(message.getChannel(), allowedMethods);\n      return;\n    }\n\n    // we only support a query or parameters in the URL for LIST\n    QueryStringDecoder decoder = new QueryStringDecoder(request.getUri());\n    Map<String, List<String>> parameters = decoder.getParameters();\n\n    // based on the URL, determine what to do\n    int operation = UNKNOWN;\n    if (method == HttpMethod.PUT)\n      operation = WRITE;\n    else if (method == HttpMethod.DELETE)\n      operation = DELETE;\n    else if (method == HttpMethod.GET) {\n      if (parameters == null || parameters.size() == 0)\n        operation = READ;\n      else {\n        List<String> qParams = parameters.get(\"q\");\n        if (qParams != null && qParams.size() == 1 && \"list\".equals(qParams.get(0)))\n          operation = LIST;\n    } }\n\n    // respond with error for unknown requests\n    if (operation == UNKNOWN) {\n      LOG.debug(\"Received an unsupported \" + method + \" request '\" + request.getUri() + \"'.\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n      return;\n    }\n\n    // respond with error for parameters if the operation does not allow them\n    if (operation != LIST && parameters != null && !parameters.isEmpty()) {\n      LOG.debug(\"Received a \" + method + \" request with query parameters, which is not supported\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n      return;\n    }\n\n    // we only support requests of the form POST http://host:port/prefix/path/<tablename>/<key>\n    String destination, key = null;\n    String path = decoder.getPath();\n    if (path.startsWith(this.pathPrefix)) {\n      String remainder = path.substring(this.pathPrefix.length());\n      int pos = remainder.indexOf(\"/\");\n      if (pos > 0) {\n        destination = remainder.substring(0, pos);\n        if (\"default\".equals(destination))\n          // no further / in the path\n          if (remainder.indexOf('/', pos + 1) < 0)\n            key = remainder.substring(pos + 1);\n      }\n    }\n\n    // all operations except for LIST need a key\n    if (operation != LIST && (key == null || key.length() == 0)) {\n      LOG.debug(\"Received a request with invalid path \" + path + \"(no key given)\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n    // oeration LIST must not have a key\n    if (operation == LIST && (key != null && key.length() > 0)) {\n      LOG.debug(\"Received a request with invalid path \" + path + \"(no key may be given)\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    // key is URL-encoded, decode it\n    key = URLDecoder.decode(key, \"ISO8859_1\");\n    LOG.debug(\"Received \" + method + \" request for key '\" + key + \"'.\");\n    byte[] keyBinary = key.getBytes(\"ISO8859_1\");\n\n    switch(operation) {\n      case READ : {\n        // Get the value from the data fabric\n        byte[] value;\n        try {\n          Read read = new Read(keyBinary);\n          value = this.accessor.getExecutor().execute(read);\n        } catch (Exception e) {\n         LOG.error(\"Error reading value for key '\" + key + \"': \" + e.getMessage() + \".\", e);\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        if (value == null) {\n          respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        } else {\n          respondSuccess(message.getChannel(), request, value);\n        }\n        break;\n      }\n      case LIST : {\n        int start = 0, limit = 100;\n        List<String> startParams = parameters.get(\"start\");\n        if (startParams != null && !startParams.isEmpty()) {\n          try {\n            start = Integer.valueOf(startParams.get(0));\n          } catch (NumberFormatException e) {\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n        }\n        List<String> limitParams = parameters.get(\"limit\");\n        if (limitParams != null && !limitParams.isEmpty()) {\n          try {\n            limit = Integer.valueOf(limitParams.get(0));\n          } catch (NumberFormatException e) {\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n        }\n        List<byte[]> keys = null;\n        try {\n          ReadKeys read = new ReadKeys(start, limit);\n          keys = this.accessor.getExecutor().execute(read);\n        } catch (Exception e) {\n          LOG.error(\"Error listing keys: \" + e.getMessage() + \".\", e);\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        if (keys == null) {\n          // something went wrong, internal error\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        StringBuilder builder = new StringBuilder();\n        for (byte[] keyBytes : keys) {\n          builder.append(Util.urlEncode(keyBytes));\n          builder.append(\"\\n\");\n        }\n        byte[] responseBody = builder.toString().getBytes(\"ASCII\");\n        respondSuccess(message.getChannel(), request, responseBody);\n        break;\n      }\n      case DELETE : {\n        // first perform a Read to determine whether the key exists\n        Read read = new Read(keyBinary);\n        byte[] value = this.accessor.getExecutor().execute(read);\n        if (value == null) {\n          // key does not exist -> Not Found\n          respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n          return;\n        }\n        Delete delete = new Delete(keyBinary);\n        if (this.accessor.getExecutor().execute(delete)) {\n          // deleted successfully\n          respondSuccess(message.getChannel(), request, null);\n        } else {\n          // something went wrong, internal error\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n        break;\n      }\n      case WRITE : {\n        // read the body of the request and add it to the event\n        ChannelBuffer content = request.getContent();\n        if (content == null) {\n          // PUT without content -> 400 Bad Request\n          respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n          return;\n        }\n        int length = content.readableBytes();\n        byte[] bytes = new byte[length];\n        content.readBytes(bytes);\n        // create a write and attempt to execute it\n        Write write = new Write(keyBinary, bytes);\n        if (this.accessor.getExecutor().execute(write)) {\n          // written successfully\n          respondSuccess(message.getChannel(), request, null);\n        } else {\n          // something went wrong, internal error\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n        break;\n      }\n      default: {\n        // this should not happen because we already checked above -> internal error\n        respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        return;\n      }\n    }\n  }","id":70232,"modified_method":"@Override\n  public void messageReceived(ChannelHandlerContext context, MessageEvent message) throws Exception {\n    HttpRequest request = (HttpRequest) message.getMessage();\n    HttpMethod method = request.getMethod();\n    String requestUri = request.getUri();\n\n    LOG.debug(\"Request received: \" + method + \" \" + requestUri);\n\n    // we only support get requests for now\n    if (method != HttpMethod.GET && method != HttpMethod.DELETE && method != HttpMethod.PUT) {\n      LOG.debug(\"Received a \" + method + \" request, which is not supported\");\n      respondNotAllowed(message.getChannel(), allowedMethods);\n      return;\n    }\n\n    // based on the request URL, determine what to do\n    QueryStringDecoder decoder = new QueryStringDecoder(requestUri);\n    Map<String, List<String>> parameters = decoder.getParameters();\n    int operation = UNKNOWN;\n    if (method == HttpMethod.PUT)\n      operation = WRITE;\n    else if (method == HttpMethod.DELETE)\n      operation = DELETE;\n    else if (method == HttpMethod.GET) {\n      if (parameters == null || parameters.size() == 0)\n        operation = READ;\n      else {\n        List<String> qParams = parameters.get(\"q\");\n        if (qParams != null && qParams.size() == 1 && \"list\".equals(qParams.get(0)))\n          operation = LIST;\n    } }\n\n    // respond with error for unknown requests\n    if (operation == UNKNOWN) {\n      LOG.debug(\"Received an unsupported \" + method + \" request '\" + request.getUri() + \"'.\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n      return;\n    }\n\n    // respond with error for parameters if the operation does not allow them\n    if (operation != LIST && parameters != null && !parameters.isEmpty()) {\n      LOG.debug(\"Received a \" + method + \" request with query parameters, which is not supported\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n      return;\n    }\n\n    // we only support requests of the form POST http://host:port/prefix/path/<tablename>/<key>\n    String destination = null, key = null;\n    String path = decoder.getPath();\n    if (path.startsWith(this.pathPrefix)) {\n      String remainder = path.substring(this.pathPrefix.length());\n      int pos = remainder.indexOf(\"/\");\n      if (pos < 0) {\n        destination = remainder;\n        key = null;\n      } else {\n        destination = remainder.substring(0, pos);\n        // no further / is allowed in the path\n        if (remainder.length() == pos + 1) {\n          key = null;\n        } else if (remainder.indexOf('/', pos + 1) < 0)\n          key = remainder.substring(pos + 1);\n        else {\n          LOG.debug(\"Received a request with invalid path \" + path + \"(path does not end with key)\");\n          respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n          return;\n    } } }\n\n    // check that URL could be parsed up to destination\n    if (destination == null) {\n      LOG.debug(\"Received a request with unknown path '\" + path + \"'.\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    // all operations except for LIST need a key\n    if (operation != LIST && (key == null || key.length() == 0)) {\n      LOG.debug(\"Received a request with invalid path \" + path + \"(no key given)\");\n      respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n      return;\n    }\n    // operation LIST must not have a key\n    if (operation == LIST && (key != null && key.length() > 0)) {\n      LOG.debug(\"Received a request with invalid path \" + path + \"(no key may be given)\");\n      respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n      return;\n    }\n\n    // check that destination is valid - for now only \"default\" is allowed\n    if (!\"default\".equals(destination)) {\n      LOG.debug(\"Received a request with path \" + path + \" for destination other than 'default'\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    // key is URL-encoded, decode it\n    byte[] keyBinary = null;\n    if (key != null) {\n      key = URLDecoder.decode(key, \"ISO8859_1\");\n      LOG.debug(\"Received \" + method + \" request for key '\" + key + \"'.\");\n      keyBinary = key.getBytes(\"ISO8859_1\");\n    }\n\n    switch(operation) {\n      case READ : {\n        // Get the value from the data fabric\n        byte[] value;\n        try {\n          Read read = new Read(keyBinary);\n          value = this.accessor.getExecutor().execute(read);\n        } catch (Exception e) {\n         LOG.error(\"Error reading value for key '\" + key + \"': \" + e.getMessage() + \".\", e);\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        if (value == null) {\n          respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        } else {\n          respondSuccess(message.getChannel(), request, value);\n        }\n        break;\n      }\n      case LIST : {\n        int start = 0, limit = 100;\n        String encoding = \"url\";\n        List<String> startParams = parameters.get(\"start\");\n        if (startParams != null && !startParams.isEmpty()) {\n          try {\n            start = Integer.valueOf(startParams.get(0));\n          } catch (NumberFormatException e) {\n            LOG.debug(\"Received a request with invalid start '\" + startParams.get(0) + \"' (not an integer).\");\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n        }\n        List<String> limitParams = parameters.get(\"limit\");\n        if (limitParams != null && !limitParams.isEmpty()) {\n          try {\n            limit = Integer.valueOf(limitParams.get(0));\n          } catch (NumberFormatException e) {\n            LOG.debug(\"Received a request with invalid limit '\" + limitParams.get(0) + \"' (not an integer).\");\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n        }\n        List<String> encParams = parameters.get(\"enc\");\n        if (encParams != null && !encParams.isEmpty()) {\n          encoding = encParams.get(0);\n          if (!\"hex\".equals(encoding) && !\"url\".equals(encoding) && !Charset.isSupported(encoding)) {\n            LOG.debug(\"Received a request with invalid encoding '\" + encoding + \"'.\");\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n        }\n        List<byte[]> keys = null;\n        try {\n          ReadKeys read = new ReadKeys(start, limit);\n          keys = this.accessor.getExecutor().execute(read);\n        } catch (Exception e) {\n          LOG.error(\"Error listing keys: \" + e.getMessage() + \".\", e);\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        if (keys == null) {\n          // something went wrong, internal error\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        StringBuilder builder = new StringBuilder();\n        for (byte[] keyBytes : keys) {\n          builder.append(Util.encode(keyBytes, encoding));\n          builder.append('\\n');\n        }\n        // if encoding was hex or url, send it back as ASCII, otherwise use encoding\n        byte[] responseBody = builder.toString().getBytes(\n            \"url\".equals(encoding) || \"hex\".equals(encoding) ? \"ASCII\" : encoding);\n        respondSuccess(message.getChannel(), request, responseBody);\n        break;\n      }\n      case DELETE : {\n        // first perform a Read to determine whether the key exists\n        Read read = new Read(keyBinary);\n        byte[] value = this.accessor.getExecutor().execute(read);\n        if (value == null) {\n          // key does not exist -> Not Found\n          respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n          return;\n        }\n        Delete delete = new Delete(keyBinary);\n        if (this.accessor.getExecutor().execute(delete)) {\n          // deleted successfully\n          respondSuccess(message.getChannel(), request, null);\n        } else {\n          // something went wrong, internal error\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n        break;\n      }\n      case WRITE : {\n        // read the body of the request and add it to the event\n        ChannelBuffer content = request.getContent();\n        if (content == null) {\n          // PUT without content -> 400 Bad Request\n          respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n          return;\n        }\n        int length = content.readableBytes();\n        byte[] bytes = new byte[length];\n        content.readBytes(bytes);\n        // create a write and attempt to execute it\n        Write write = new Write(keyBinary, bytes);\n        if (this.accessor.getExecutor().execute(write)) {\n          // written successfully\n          respondSuccess(message.getChannel(), request, null);\n        } else {\n          // something went wrong, internal error\n          respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n        break;\n      }\n      default: {\n        // this should not happen because we already checked above -> internal error\n        respondError(message.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        return;\n      }\n    }\n  }","commit_id":"4fea5d7f0bb9a83aea3a30a053f80138fd785071","url":"https://github.com/caskdata/cdap"},{"original_method":"private Executor authenticate(DistributionTransportSecret secret, Executor executor) {\n        Map<String, String> credentialsMap = secret.asCredentialsMap();\n        if (credentialsMap != null) {\n            executor = executor.auth(new HttpHost(distributionEndpoint.getUri().getHost(), distributionEndpoint.getUri().getPort()),\n                    credentialsMap.get(USERNAME), credentialsMap.get(PASSWORD)).authPreemptive(\n                    new HttpHost(distributionEndpoint.getUri().getHost(), distributionEndpoint.getUri().getPort()));\n            log.debug(\"authenticate user={}, endpoint={}\", secret.asCredentialsMap().get(USERNAME), distributionEndpoint.getUri());\n        }\n        return executor;\n    }","id":70233,"modified_method":"private Executor authenticate(DistributionTransportSecret secret, Executor executor) {\n        Map<String, String> credentialsMap = secret.asCredentialsMap();\n        if (credentialsMap != null) {\n            URI uri = distributionEndpoint.getUri();\n            executor = executor.auth(new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme()),\n                    credentialsMap.get(USERNAME), credentialsMap.get(PASSWORD)).authPreemptive(\n                    new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme()));\n            log.debug(\"authenticate user={}, endpoint={}\", secret.asCredentialsMap().get(USERNAME), distributionEndpoint.getUri());\n        }\n        return executor;\n    }","commit_id":"26924ed3f768ab24be54d618370b6884ce2122b5","url":"https://github.com/apache/sling"},{"original_method":"@Override\n  public void messageReceived(ChannelHandlerContext context,\n                              MessageEvent message) throws Exception {\n    HttpRequest request = (HttpRequest) message.getMessage();\n    HttpMethod method = request.getMethod();\n    String requestUri = request.getUri();\n\n    LOG.trace(\"Request received: \" + method + \" \" + requestUri);\n    metrics.meter(this.getClass(), Constants.METRIC_REQUESTS, 1);\n\n    // we only support get requests for now\n    if (method != HttpMethod.GET && method != HttpMethod.DELETE &&\n        method != HttpMethod.PUT && method != HttpMethod.POST) {\n      LOG.trace(\"Received a \" + method + \" request, which is not supported\");\n      respondNotAllowed(message.getChannel(), allowedMethods);\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      return;\n    }\n\n    // based on the request URL, determine what to do\n    QueryStringDecoder decoder = new QueryStringDecoder(requestUri);\n    Map<String, List<String>> parameters = decoder.getParameters();\n    List<String> clearParams = null;\n    int operation = UNKNOWN;\n    if (method == HttpMethod.PUT)\n      operation = WRITE;\n    else if (method == HttpMethod.DELETE)\n      operation = DELETE;\n    else if (method == HttpMethod.POST) {\n      clearParams = parameters.get(\"clear\");\n      if (clearParams != null && clearParams.size() > 0)\n        operation = CLEAR;\n      else\n        operation = BAD;\n    } else if (method == HttpMethod.GET) {\n      if (parameters == null || parameters.size() == 0)\n        operation = READ;\n      else {\n        List<String> qParams = parameters.get(\"q\");\n        if (qParams != null && qParams.size() == 1\n            && \"list\".equals(qParams.get(0)))\n          operation = LIST;\n        else\n          operation = BAD;\n    } }\n\n    // respond with error for bad requests\n    if (operation == BAD) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received an incomplete request '\" + request.getUri() + \"'.\");\n      respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n      return;\n    }\n    // respond with error for unknown requests\n    if (operation == UNKNOWN) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received an unsupported \" + method + \" request '\"\n          + request.getUri() + \"'.\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n      return;\n    }\n\n    // respond with error for parameters if the operation does not allow them\n    if (operation != LIST && operation != CLEAR &&\n        parameters != null && !parameters.isEmpty()) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a \" + method +\n          \" request with query parameters, which is not supported\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n      return;\n    }\n\n    // we only support requests of the form\n    // POST http://host:port/prefix/path/<tablename>/<key>\n    String destination = null, key = null;\n    String path = decoder.getPath();\n    if (path.startsWith(this.pathPrefix)) {\n      String remainder = path.substring(this.pathPrefix.length());\n      int pos = remainder.indexOf(\"/\");\n      if (pos < 0) {\n        destination = remainder.length() == 0 ? null : remainder;\n        key = null;\n      } else {\n        destination = remainder.substring(0, pos);\n        // no further / is allowed in the path\n        if (remainder.length() == pos + 1) {\n          key = null;\n        } else if (remainder.indexOf('/', pos + 1) < 0)\n          key = remainder.substring(pos + 1);\n        else {\n          metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n          LOG.trace(\"Received a request with invalid path \" +\n              path + \"(path does not end with key)\");\n          respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n          return;\n    } } }\n\n    // check that URL could be parsed up to destination\n    // except for CLEAR, where no destination may be given\n    if ((destination == null && operation != CLEAR) ||\n        (destination != null && operation == CLEAR)) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request with unknown path '\" + path + \"'.\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    // all operations except for LIST and CLEAR need a key\n    if (operation != LIST && operation != CLEAR &&\n        (key == null || key.length() == 0)) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request with invalid path \" +\n          path + \"(no key given)\");\n      respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n      return;\n    }\n    // operation LIST and CLEAR must not have a key\n    if ((operation == LIST || operation == CLEAR) &&\n        (key != null && key.length() > 0)) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request with invalid path \" +\n          path + \"(no key may be given)\");\n      respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n      return;\n    }\n\n    // check that destination is valid - for now only \"default\" is allowed\n    if (destination != null && !\"default\".equals(destination)) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request with path \" + path +\n          \" for destination other than 'default'\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    // key is URL-encoded, decode it\n    byte[] keyBinary = null;\n    if (key != null) {\n      key = URLDecoder.decode(key, \"ISO8859_1\");\n      LOG.trace(\"Received \" + method + \" request for key '\" + key + \"'.\");\n      keyBinary = key.getBytes(\"ISO8859_1\");\n    }\n\n    switch(operation) {\n      case READ : {\n        metrics.counter(this.getClass(), Constants.METRIC_READ_REQUESTS, 1);\n        // Get the value from the data fabric\n        OperationResult<byte[]> result;\n        try {\n          ReadKey read = new ReadKey(keyBinary);\n          result = this.accessor.getExecutor().\n              execute(OperationContext.DEFAULT, read);\n        } catch (Exception e) {\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          LOG.error(\"Error during ReadKey: \" + e.getMessage(), e);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        if (result.isEmpty()) {\n          metrics.counter(this.getClass(), Constants.METRIC_NOT_FOUND, 1);\n          respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        } else {\n          metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n          respondSuccess(message.getChannel(), request, result.getValue());\n        }\n        break;\n      }\n      case LIST : {\n        metrics.counter(this.getClass(), Constants.METRIC_LIST_REQUESTS, 1);\n        int start = 0, limit = 100;\n        String enc = \"url\";\n        List<String> startParams = parameters.get(\"start\");\n        if (startParams != null && !startParams.isEmpty()) {\n          try {\n            start = Integer.valueOf(startParams.get(0));\n          } catch (NumberFormatException e) {\n            metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n            LOG.trace(\"Received a request with invalid start '\" +\n                startParams.get(0) + \"' (not an integer).\");\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n        }\n        List<String> limitParams = parameters.get(\"limit\");\n        if (limitParams != null && !limitParams.isEmpty()) {\n          try {\n            limit = Integer.valueOf(limitParams.get(0));\n          } catch (NumberFormatException e) {\n            metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n            LOG.trace(\"Received a request with invalid limit '\" +\n                limitParams.get(0) + \"' (not an integer).\");\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n        }\n        List<String> encParams = parameters.get(\"enc\");\n        if (encParams != null && !encParams.isEmpty()) {\n          enc = encParams.get(0);\n          if (!\"hex\".equals(enc) && !\"url\".equals(enc) &&\n              !Charset.isSupported(enc)) {\n            metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n            LOG.trace(\"Received a request with invalid encoding \" + enc + \".\");\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n        }\n        OperationResult<List<byte[]>> result;\n        try {\n          ReadAllKeys read = new ReadAllKeys(start, limit);\n          result = this.accessor.getExecutor().\n              execute(OperationContext.DEFAULT, read);\n        } catch (Exception e) {\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          LOG.error(\"Error listing keys: \" + e.getMessage() + \".\", e);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        StringBuilder builder = new StringBuilder();\n        if (!result.isEmpty()) {\n          for (byte[] keyBytes : result.getValue()) {\n            builder.append(Util.encode(keyBytes, enc));\n            builder.append('\\n');\n          }\n        }\n        // for hex or url, send it back as ASCII, otherwise use encoding\n        byte[] responseBody = builder.toString().getBytes(\n            \"url\".equals(enc) || \"hex\".equals(enc) ? \"ASCII\" : enc);\n        metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n        respondSuccess(message.getChannel(), request, responseBody);\n        break;\n      }\n\n      case DELETE : {\n        metrics.counter(this.getClass(), Constants.METRIC_DELETE_REQUESTS, 1);\n        // first perform a Read to determine whether the key exists\n        try {\n          ReadKey read = new ReadKey(keyBinary);\n          OperationResult<byte[]> result =\n              this.accessor.getExecutor().\n                  execute(OperationContext.DEFAULT, read);\n          if (result.isEmpty()) {\n            // key does not exist -> Not Found\n            metrics.counter(this.getClass(), Constants.METRIC_NOT_FOUND, 1);\n            respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n            return;\n          }\n        } catch (Exception e) {\n          // something went wrong, internal error\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          LOG.error(\"Error during ReadKey: \" + e.getMessage(), e);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          break;\n        }\n\n        // now that we know the key exists, delete it\n        try {\n          Delete delete = new Delete(keyBinary);\n          this.accessor.getExecutor().\n              execute(OperationContext.DEFAULT, delete);\n          // deleted successfully\n          metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n          respondSuccess(message.getChannel(), request);\n        } catch (Exception e) {\n          // something went wrong, internal error\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          LOG.error(\"Error during Delete: \" + e.getMessage(), e);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n        break;\n      }\n      case WRITE : {\n        metrics.meter(this.getClass(), Constants.METRIC_WRITE_REQUESTS, 1);\n        // read the body of the request and add it to the event\n        ChannelBuffer content = request.getContent();\n        if (content == null) {\n          // PUT without content -> 400 Bad Request\n          metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n          respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n          return;\n        }\n        int length = content.readableBytes();\n        byte[] bytes = new byte[length];\n        content.readBytes(bytes);\n        // create a write and attempt to execute it\n        Write write = new Write(keyBinary, bytes);\n        try {\n          this.accessor.getExecutor().\n              execute(OperationContext.DEFAULT, write);\n          // written successfully\n          metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n          respondSuccess(message.getChannel(), request);\n        } catch (Exception e) {\n          // something went wrong, internal error\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          LOG.error(\"Error during Write: \" + e.getMessage(), e);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n        break;\n      }\n      case CLEAR : {\n        metrics.meter(this.getClass(), Constants.METRIC_CLEAR_REQUESTS, 1);\n        // figure out what to clear\n        List<ClearFabric.ToClear> toClear = Lists.newArrayList();\n        for (String param : clearParams) {\n          for (String what : param.split(\",\")) {\n            if (\"all\".equals(what))\n              toClear.add(ClearFabric.ToClear.ALL);\n            else if (\"data\".equals(what))\n              toClear.add(ClearFabric.ToClear.DATA);\n            else if (\"meta\".equals(what))\n              toClear.add(ClearFabric.ToClear.META);\n            else if (\"tables\".equals(what))\n              toClear.add(ClearFabric.ToClear.TABLES);\n            else if (\"queues\".equals(what))\n              toClear.add(ClearFabric.ToClear.QUEUES);\n            else if (\"streams\".equals(what))\n              toClear.add(ClearFabric.ToClear.STREAMS);\n            else {\n              metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n              LOG.trace(\"Received invalid clear request with URI \" +\n                  requestUri);\n              respondError(message.getChannel(),\n                  HttpResponseStatus.BAD_REQUEST);\n              break;\n        } } }\n        ClearFabric clearFabric = new ClearFabric(toClear);\n        try {\n          this.accessor.getExecutor().\n              execute(OperationContext.DEFAULT, clearFabric);\n        } catch (Exception e) {\n          LOG.error(\"Exception clearing data fabric: \", e);\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          break;\n        }\n        metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n        respondSuccess(message.getChannel(), request);\n        break;\n      }\n\n      default: {\n        // this should not happen because we checked above -> internal error\n        metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n        respondError(message.getChannel(),\n            HttpResponseStatus.INTERNAL_SERVER_ERROR);\n      }\n    }\n  }","id":70234,"modified_method":"@Override\n  public void messageReceived(ChannelHandlerContext context,\n                              MessageEvent message) throws Exception {\n    HttpRequest request = (HttpRequest) message.getMessage();\n    HttpMethod method = request.getMethod();\n    String requestUri = request.getUri();\n\n    LOG.trace(\"Request received: \" + method + \" \" + requestUri);\n    MetricsHelper helper = new MetricsHelper(this.getClass(), this.metrics,\n        this.accessor.getName());\n\n    try {\n      // check whether the request's HTTP method is supported\n      if (method != HttpMethod.GET && method != HttpMethod.DELETE &&\n          method != HttpMethod.PUT && method != HttpMethod.POST) {\n        LOG.trace(\"Received a \" + method + \" request, which is not supported\");\n        respondNotAllowed(message.getChannel(), allowedMethods);\n        helper.finish(BadRequest);\n        return;\n      }\n\n      // based on the request URL, determine what to do\n      QueryStringDecoder decoder = new QueryStringDecoder(requestUri);\n      Map<String, List<String>> parameters = decoder.getParameters();\n      List<String> clearParams = null;\n      int operation = UNKNOWN;\n      if (method == HttpMethod.PUT) {\n        operation = WRITE;\n        helper.setMethod(\"write\");\n      }\n      else if (method == HttpMethod.DELETE) {\n        operation = DELETE;\n        helper.setMethod(\"delete\");\n      }\n      else if (method == HttpMethod.POST) {\n        clearParams = parameters.get(\"clear\");\n        if (clearParams != null && clearParams.size() > 0) {\n          operation = CLEAR;\n          helper.setMethod(\"clear\");\n        } else\n          operation = BAD;\n      } else if (method == HttpMethod.GET) {\n        if (parameters == null || parameters.size() == 0) {\n          operation = READ;\n          helper.setMethod(\"clear\");\n        } else {\n          List<String> qParams = parameters.get(\"q\");\n          if (qParams != null && qParams.size() == 1\n              && \"list\".equals(qParams.get(0))) {\n            operation = LIST;\n            helper.setMethod(\"clear\");\n          } else\n            operation = BAD;\n        } }\n\n      // respond with error for bad requests\n      if (operation == BAD) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received an incomplete request '\" + request.getUri() + \"'.\");\n        respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n        return;\n      }\n      // respond with error for unknown requests\n      if (operation == UNKNOWN) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received an unsupported \" + method + \" request '\"\n            + request.getUri() + \"'.\");\n        respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n        return;\n      }\n\n      // respond with error for parameters if the operation does not allow them\n      if (operation != LIST && operation != CLEAR &&\n          parameters != null && !parameters.isEmpty()) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received a \" + method +\n            \" request with query parameters, which is not supported\");\n        respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n        return;\n      }\n\n      String destination = null, key = null;\n      String path = decoder.getPath();\n\n      // we only support requests of the form\n      // http://host:port/prefix/path/<tablename>/<key>\n      if (path.startsWith(this.pathPrefix)) {\n        String remainder = path.substring(this.pathPrefix.length());\n        int pos = remainder.indexOf(\"/\");\n        if (pos < 0) {\n          destination = remainder.length() == 0 ? null : remainder;\n          key = null;\n        } else {\n          destination = remainder.substring(0, pos);\n          // no further / is allowed in the path\n          if (remainder.length() == pos + 1) {\n            key = null;\n          } else if (remainder.indexOf('/', pos + 1) < 0)\n            key = remainder.substring(pos + 1);\n          else {\n            helper.finish(BadRequest);\n            LOG.trace(\"Received a request with invalid path \" +\n                path + \"(path does not end with key)\");\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          } } }\n\n      // check that URL could be parsed up to destination\n      // except for CLEAR, where no destination may be given\n      if ((destination == null && operation != CLEAR) ||\n          (destination != null && operation == CLEAR)) {\n        helper.finish(NotFound);\n        LOG.trace(\"Received a request with unknown path '\" + path + \"'.\");\n        respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        return;\n      }\n\n      // all operations except for LIST and CLEAR need a key\n      if (operation != LIST && operation != CLEAR &&\n          (key == null || key.length() == 0)) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received a request with invalid path \" +\n            path + \"(no key given)\");\n        respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n        return;\n      }\n      // operation LIST and CLEAR must not have a key\n      if ((operation == LIST || operation == CLEAR) &&\n          (key != null && key.length() > 0)) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received a request with invalid path \" +\n            path + \"(no key may be given)\");\n        respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n        return;\n      }\n\n      // check that destination is valid - for now only \"default\" is allowed\n      if (destination != null && !\"default\".equals(destination)) {\n        LOG.trace(\"Received a request with path \" + path +\n            \" for destination other than 'default'\");\n        respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        helper.finish(NotFound);\n        return;\n      }\n\n      // key is URL-encoded, decode it\n      byte[] keyBinary = null;\n      if (key != null) {\n        key = URLDecoder.decode(key, \"ISO8859_1\");\n        LOG.trace(\"Received \" + method + \" request for key '\" + key + \"'.\");\n        keyBinary = key.getBytes(\"ISO8859_1\");\n      }\n\n      switch(operation) {\n        case READ : {\n          // Get the value from the data fabric\n          OperationResult<byte[]> result;\n          try {\n            ReadKey read = new ReadKey(keyBinary);\n            result = this.accessor.getExecutor().\n                execute(OperationContext.DEFAULT, read);\n          } catch (Exception e) {\n            helper.finish(Error);\n            LOG.error(\"Error during ReadKey: \" + e.getMessage(), e);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n            return;\n          }\n          if (result.isEmpty()) {\n            respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n            helper.finish(NoData);\n          } else {\n            respondSuccess(message.getChannel(), request, result.getValue());\n            helper.finish(Success);\n          }\n          break;\n        }\n        case LIST : {\n          int start = 0, limit = 100;\n          String enc = \"url\";\n          List<String> startParams = parameters.get(\"start\");\n          if (startParams != null && !startParams.isEmpty()) {\n            try {\n              start = Integer.parseInt(startParams.get(0));\n            } catch (NumberFormatException e) {\n              helper.finish(BadRequest);\n              LOG.trace(\"Received a request with invalid start '\" +\n                  startParams.get(0) + \"' (not an integer).\");\n              respondError(message.getChannel(),\n                  HttpResponseStatus.BAD_REQUEST);\n              return;\n            }\n          }\n          List<String> limitParams = parameters.get(\"limit\");\n          if (limitParams != null && !limitParams.isEmpty()) {\n            try {\n              limit = Integer.parseInt(limitParams.get(0));\n            } catch (NumberFormatException e) {\n              helper.finish(BadRequest);\n              LOG.trace(\"Received a request with invalid limit '\" +\n                  limitParams.get(0) + \"' (not an integer).\");\n              respondError(message.getChannel(),\n                  HttpResponseStatus.BAD_REQUEST);\n              return;\n            }\n          }\n          List<String> encParams = parameters.get(\"enc\");\n          if (encParams != null && !encParams.isEmpty()) {\n            enc = encParams.get(0);\n            if (!\"hex\".equals(enc) && !\"url\".equals(enc) &&\n                !Charset.isSupported(enc)) {\n              helper.finish(BadRequest);\n              LOG.trace(\"Received a request with invalid encoding \"\n                  + enc + \".\");\n              respondError(message.getChannel(),\n                  HttpResponseStatus.BAD_REQUEST);\n              return;\n            }\n          }\n          OperationResult<List<byte[]>> result;\n          try {\n            ReadAllKeys read = new ReadAllKeys(start, limit);\n            result = this.accessor.getExecutor().\n                execute(OperationContext.DEFAULT, read);\n          } catch (Exception e) {\n            helper.finish(Error);\n            LOG.error(\"Error listing keys: \" + e.getMessage() + \".\", e);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n            return;\n          }\n          StringBuilder builder = new StringBuilder();\n          if (!result.isEmpty()) {\n            for (byte[] keyBytes : result.getValue()) {\n              builder.append(Util.encode(keyBytes, enc));\n              builder.append('\\n');\n            }\n          }\n          // for hex or url, send it back as ASCII, otherwise use encoding\n          byte[] responseBody = builder.toString().getBytes(\n              \"url\".equals(enc) || \"hex\".equals(enc) ? \"ASCII\" : enc);\n          respondSuccess(message.getChannel(), request, responseBody);\n          helper.finish(Success);\n          break;\n        }\n\n        case DELETE : {\n          // first perform a Read to determine whether the key exists\n          try {\n            ReadKey read = new ReadKey(keyBinary);\n            OperationResult<byte[]> result =\n                this.accessor.getExecutor().\n                    execute(OperationContext.DEFAULT, read);\n            if (result.isEmpty()) {\n              // key does not exist -> Not Found\n              respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n              helper.finish(NotFound);\n              return;\n            }\n          } catch (Exception e) {\n            // something went wrong, internal error\n            helper.finish(Error);\n            LOG.error(\"Error during ReadKey: \" + e.getMessage(), e);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n            break;\n          }\n\n          // now that we know the key exists, delete it\n          try {\n            Delete delete = new Delete(keyBinary);\n            this.accessor.getExecutor().\n                execute(OperationContext.DEFAULT, delete);\n            // deleted successfully\n            respondSuccess(message.getChannel(), request);\n            helper.finish(Success);\n          } catch (Exception e) {\n            // something went wrong, internal error\n            LOG.error(\"Error during Delete: \" + e.getMessage(), e);\n            helper.finish(Error);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          }\n          break;\n        }\n        case WRITE : {\n          // read the body of the request and add it to the event\n          ChannelBuffer content = request.getContent();\n          if (content == null) {\n            // PUT without content -> 400 Bad Request\n            helper.finish(BadRequest);\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n          int length = content.readableBytes();\n          byte[] bytes = new byte[length];\n          content.readBytes(bytes);\n          // create a write and attempt to execute it\n          Write write = new Write(keyBinary, bytes);\n          try {\n            this.accessor.getExecutor().\n                execute(OperationContext.DEFAULT, write);\n            // written successfully\n            respondSuccess(message.getChannel(), request);\n            helper.finish(Success);\n          } catch (Exception e) {\n            // something went wrong, internal error\n            helper.finish(Error);\n            LOG.error(\"Error during Write: \" + e.getMessage(), e);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          }\n          break;\n        }\n        case CLEAR : {\n          // figure out what to clear\n          List<ClearFabric.ToClear> toClear = Lists.newArrayList();\n          for (String param : clearParams) {\n            for (String what : param.split(\",\")) {\n              if (\"all\".equals(what))\n                toClear.add(ClearFabric.ToClear.ALL);\n              else if (\"data\".equals(what))\n                toClear.add(ClearFabric.ToClear.DATA);\n              else if (\"meta\".equals(what))\n                toClear.add(ClearFabric.ToClear.META);\n              else if (\"tables\".equals(what))\n                toClear.add(ClearFabric.ToClear.TABLES);\n              else if (\"queues\".equals(what))\n                toClear.add(ClearFabric.ToClear.QUEUES);\n              else if (\"streams\".equals(what))\n                toClear.add(ClearFabric.ToClear.STREAMS);\n              else {\n                helper.finish(BadRequest);\n                LOG.trace(\"Received invalid clear request with URI \" +\n                    requestUri);\n                respondError(message.getChannel(),\n                    HttpResponseStatus.BAD_REQUEST);\n                break;\n              } } }\n          ClearFabric clearFabric = new ClearFabric(toClear);\n          try {\n            this.accessor.getExecutor().\n                execute(OperationContext.DEFAULT, clearFabric);\n          } catch (Exception e) {\n            LOG.error(\"Exception clearing data fabric: \", e);\n            helper.finish(Error);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n            break;\n          }\n          respondSuccess(message.getChannel(), request);\n          helper.finish(Success);\n          break;\n        }\n\n        default: {\n          // this should not happen because we checked above -> internal error\n          helper.finish(Error);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Exception caught for connector '\" +\n          this.accessor.getName() + \"'. \", e.getCause());\n      helper.finish(Error);\n      if (message.getChannel().isOpen()) {\n        respondError(message.getChannel(),\n            HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        message.getChannel().close();\n      }\n    }\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n      throws Exception {\n    metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n    LOG.error(\"Exception caught for connector '\" +\n        this.accessor.getName() + \"'. \", e.getCause());\n    respondError(ctx.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n    e.getChannel().close();\n  }","id":70235,"modified_method":"@Override\n  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n      throws Exception {\n    MetricsHelper.meterError(metrics, this.accessor.getName());\n    LOG.error(\"Exception caught for connector '\" +\n        this.accessor.getName() + \"'. \", e.getCause());\n    if (e.getChannel().isOpen()) {\n      respondError(ctx.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n      e.getChannel().close();\n    }\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  /** called by the Avro Responder for each single event */\n  public final Status append(AvroFlumeEvent event) {\n    metrics.meter(this.getClass(), Constants.METRIC_REQUESTS, 1);\n    metrics.counter(this.getClass(), Constants.METRIC_ENQUEUE_REQUESTS, 1);\n    LOG.trace(\"Received event: \" + event);\n    try {\n      this.collector.getConsumer().consumeEvent(convertFlume2Event(event));\n      metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n      return Status.OK;\n    } catch (Exception e) {\n      LOG.warn(\"Error consuming single event: \" + e.getMessage());\n      metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n      return Status.FAILED;\n    }\n  }","id":70236,"modified_method":"@Override\n  /** called by the Avro Responder for each single event */\n  public final Status append(AvroFlumeEvent event) {\n    MetricsHelper helper = new MetricsHelper(\n        this.getClass(), this.metrics, this.collector.getName(), \"append\");\n    LOG.trace(\"Received event: \" + event);\n    try {\n      this.collector.getConsumer().consumeEvent(\n          convertFlume2Event(event, helper));\n      helper.finish(Success);\n      return Status.OK;\n    } catch (Exception e) {\n      LOG.warn(\"Error consuming single event: \" + e.getMessage());\n      helper.finish(Error);\n      return Status.FAILED;\n    }\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  /** called by the Avro Responder for each batch of events */\n  public final Status appendBatch(List<AvroFlumeEvent> events) {\n    metrics.meter(this.getClass(), Constants.METRIC_REQUESTS, 1);\n    metrics.counter(this.getClass(), Constants.METRIC_BATCH_REQUESTS, 1);\n    LOG.trace(\"Received batch: \" + events);\n    try {\n      this.collector.getConsumer().consumeEvents(convertFlume2Event(events));\n      metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n      return Status.OK;\n    } catch (Exception e) {\n      LOG.warn(\"Error consuming batch of events: \" + e.getMessage());\n      metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n      return Status.FAILED;\n    }\n  }","id":70237,"modified_method":"@Override\n  /** called by the Avro Responder for each batch of events */\n  public final Status appendBatch(List<AvroFlumeEvent> events) {\n    MetricsHelper helper = new MetricsHelper(\n        this.getClass(), this.metrics, this.collector.getName(), \"batch\");\n    LOG.trace(\"Received batch: \" + events);\n    try {\n      this.collector.getConsumer().consumeEvents(\n          convertFlume2Event(events, helper));\n      helper.finish(Success);\n      return Status.OK;\n    } catch (Exception e) {\n      LOG.warn(\"Error consuming batch of events: \" + e.getMessage());\n      helper.finish(Error);\n      return Status.FAILED;\n    }\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Converts a Flume event to am Event. This is a pure copy of the headers\n   * and body. In addition, the collector name header is set.\n   *\n   * @param flumeEvent the flume event to be converted\n   * @return the resulting event\n   */\n  protected Event convertFlume2Event(AvroFlumeEvent flumeEvent)\n      throws Exception\n  {\n    EventBuilder builder = new EventBuilder();\n    builder.setBody(flumeEvent.getBody().array());\n    for (CharSequence header : flumeEvent.getHeaders().keySet()) {\n      builder.setHeader(header.toString(),\n          flumeEvent.getHeaders().get(header).toString());\n    }\n    builder.setHeader(Constants.HEADER_FROM_COLLECTOR,\n        this.getCollector().getName());\n    Event event = builder.create();\n    String destination = event.getHeader(Constants.HEADER_DESTINATION_STREAM);\n    if (destination == null) {\n      throw new Exception(\"Cannot enqueue event without destination stream\");\n    }\n    if (!this.collector.getStreamCache().validateStream(\n        OperationContext.DEFAULT_ACCOUNT_ID, destination)) {\n      throw new Exception(\"Cannot enqueue event to non-existent stream '\" +\n          destination + \"'.\");\n    }\n    return event;\n  }","id":70238,"modified_method":"/**\n   * Converts a Flume event to am Event. This is a pure copy of the headers\n   * and body. In addition, the collector name header is set.\n   *\n   * @param flumeEvent the flume event to be converted\n   * @param helper a metrics helper, if a destination is found,\n   *               the scope of this helper is updated to include it.\n   * @return the resulting event\n   */\n  protected Event convertFlume2Event(AvroFlumeEvent flumeEvent,\n                                     MetricsHelper helper)\n      throws Exception {\n    EventBuilder builder = new EventBuilder();\n    builder.setBody(flumeEvent.getBody().array());\n    for (CharSequence header : flumeEvent.getHeaders().keySet()) {\n      builder.setHeader(header.toString(),\n          flumeEvent.getHeaders().get(header).toString());\n    }\n    builder.setHeader(Constants.HEADER_FROM_COLLECTOR,\n        this.getCollector().getName());\n    Event event = builder.create();\n    String destination = event.getHeader(Constants.HEADER_DESTINATION_STREAM);\n    if (destination == null) {\n      throw new Exception(\"Cannot enqueue event without destination stream\");\n    }\n    helper.setScope(destination);\n    if (!this.collector.getStreamCache().validateStream(\n        OperationContext.DEFAULT_ACCOUNT_ID, destination)) {\n      helper.finish(NotFound);\n      throw new Exception(\"Cannot enqueue event to non-existent stream '\" +\n          destination + \"'.\");\n    }\n    return event;\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Converts a batch of Flume event to a lis of Events, using @ref\n   * convertFlume2Event\n   *\n   * @param flumeEvents the flume events to be converted\n   * @return the resulting events\n   */\n  protected List<Event> convertFlume2Event(List<AvroFlumeEvent> flumeEvents)\n  throws Exception {\n    List<Event> events = new ArrayList<Event>();\n    for (AvroFlumeEvent flumeEvent : flumeEvents) {\n      events.add(convertFlume2Event(flumeEvent));\n    }\n    return events;\n  }","id":70239,"modified_method":"/**\n   * Converts a batch of Flume event to a lis of Events, using @ref\n   * convertFlume2Event\n   *\n   * @param flumeEvents the flume events to be converted\n   * @param helper a metrics helper, if a destination is found,\n   *               the scope of this helper is updated to include it.\n   * @return the resulting events\n   */\n  protected List<Event> convertFlume2Event(List<AvroFlumeEvent> flumeEvents,\n                                           MetricsHelper helper)\n  throws Exception {\n    List<Event> events = new ArrayList<Event>();\n    for (AvroFlumeEvent flumeEvent : flumeEvents) {\n      events.add(convertFlume2Event(flumeEvent, helper));\n    }\n    return events;\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n      throws Exception {\n    metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n    LOG.error(\"Exception caught for connector '\" +\n        this.accessor.getName() + \"'. \", e.getCause());\n    if(e.getChannel().isOpen()) {\n      respondError(e.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n      e.getChannel().close();\n    }\n  }","id":70240,"modified_method":"@Override\n  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n      throws Exception {\n    MetricsHelper.meterError(metrics, this.accessor.getName());\n    LOG.error(\"Exception caught for connector '\" +\n        this.accessor.getName() + \"'. \", e.getCause());\n    if(e.getChannel().isOpen()) {\n      respondError(e.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n      e.getChannel().close();\n    }\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void messageReceived(ChannelHandlerContext context,\n                              MessageEvent message) throws Exception {\n\n    HttpRequest request = (HttpRequest) message.getMessage();\n    HttpMethod method = request.getMethod();\n    String uri = request.getUri();\n\n    LOG.trace(\"Request received: \" + method + \" \" + uri);\n    metrics.meter(this.getClass(), Constants.METRIC_REQUESTS, 1);\n\n    // only GET is supported for now\n    if (method != HttpMethod.GET) {\n      LOG.trace(\"Received a \" + method + \" request, which is not supported\");\n      respondNotAllowed(message.getChannel(), allowedMethods);\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      return;\n    }\n\n    QueryStringDecoder decoder = new QueryStringDecoder(uri);\n    Map<String, List<String>> parameters = decoder.getParameters();\n    String path = decoder.getPath();\n\n    // parse and verify the url path\n    String appid = null, flowid = null, query = null;\n    // valid paths are <prefix>/service/method?param=value&...\n    if (path.startsWith(this.pathPrefix)) {\n      int pos1 = path.indexOf(\"/\", this.pathPrefix.length());\n      if (pos1 > this.pathPrefix.length()) { // appid not empty\n        int pos2 = path.indexOf(\"/\", pos1 + 1);\n        if (pos2 > pos1 + 1) { // flowid not empty\n          int pos3 = path.indexOf(\"/\", pos2 + 1);\n          if (pos3 < 0 && path.length() > pos2) { // method not empty, no more /\n            appid = path.substring(this.pathPrefix.length(), pos1);\n            flowid = path.substring(pos1 + 1, pos2);\n            query = path.substring(pos2 + 1);\n          }\n        }\n      }\n    }\n    // is the path well-formed (prefix/app/flow/query?...)\n    if (appid == null) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request with unsupported path \" + uri);\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n    // is the query supported (only status or metrics right now)\n    if (!(\"status\".equals(query) || \"metrics\".equals(query))) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request with unsupported query \" + query);\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    if (\"status\".equals(query)) {\n      FlowService.Client flowClient = this.getFlowClient();\n      FlowStatus status = flowClient.status(new DelegationToken(),\n          new FlowIdentifier(Constants.defaultAccount, appid, flowid, -1));\n      String value = status.getStatus();\n      respondSuccess(message.getChannel(), request, value.getBytes());\n\n    } else if (\"metrics\".equals(query)) {\n      MetricsFrontendService.Client metricsClient = this.getMetricsClient();\n      CounterRequest counterRequest = new CounterRequest(\n          new FlowArgument(Constants.defaultAccount, appid, flowid));\n      List<String> counterNames = parameters.get(\"counter\");\n      if (counterNames != null) {\n        counterRequest.setName(counterNames);\n      }\n      List<Counter> counters = metricsClient.getCounters(counterRequest);\n      StringBuilder str = new StringBuilder();\n      boolean first = true;\n      for (Counter counter : counters) {\n        if (first) first = false; else str.append(',');\n        if (counter.isSetQualifier()) {\n          str.append(counter.getQualifier()).append(\".\");\n        }\n        str.append(counter.getName()).append('=').append(counter.getValue());\n      }\n      respondSuccess(message.getChannel(), request, str.toString().getBytes());\n\n    } else {\n      // this should not happen because we checked above -> internal error\n      metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n      respondError(message.getChannel(),\n          HttpResponseStatus.INTERNAL_SERVER_ERROR);\n    }\n  }","id":70241,"modified_method":"@Override\n  public void messageReceived(ChannelHandlerContext context,\n                              MessageEvent message) throws Exception {\n\n    HttpRequest request = (HttpRequest) message.getMessage();\n    HttpMethod method = request.getMethod();\n    String uri = request.getUri();\n\n    LOG.trace(\"Request received: \" + method + \" \" + uri);\n    MetricsHelper helper = new MetricsHelper(\n        this.getClass(), this.metrics, this.accessor.getName());\n\n    try {\n      // only GET is supported for now\n      if (method != HttpMethod.GET) {\n        LOG.trace(\"Received a \" + method + \" request, which is not supported\");\n        respondNotAllowed(message.getChannel(), allowedMethods);\n        helper.finish(BadRequest);\n        return;\n      }\n\n      QueryStringDecoder decoder = new QueryStringDecoder(uri);\n      Map<String, List<String>> parameters = decoder.getParameters();\n      String path = decoder.getPath();\n\n      // parse and verify the url path\n      String appid = null, flowid = null, query = null;\n      // valid paths are <prefix>/service/method?param=value&...\n      if (path.startsWith(this.pathPrefix)) {\n        int pos1 = path.indexOf(\"/\", this.pathPrefix.length());\n        if (pos1 > this.pathPrefix.length()) { // appid not empty\n          int pos2 = path.indexOf(\"/\", pos1 + 1);\n          if (pos2 > pos1 + 1) { // flowid not empty\n            int pos3 = path.indexOf(\"/\", pos2 + 1);\n            if (pos3 < 0 && path.length() > pos2) { // method not empty, no more /\n              appid = path.substring(this.pathPrefix.length(), pos1);\n              flowid = path.substring(pos1 + 1, pos2);\n              query = path.substring(pos2 + 1);\n            }\n          }\n        }\n      }\n      // is the path well-formed (prefix/app/flow/query?...)\n      if (appid == null) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received a request with unsupported path \" + uri);\n        respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        return;\n      }\n      // is the query supported (only status or metrics right now)\n      if (!(\"status\".equals(query) || \"metrics\".equals(query))) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received a request with unsupported query \" + query);\n        respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        return;\n      }\n      helper.setMethod(\"query\");\n\n      if (\"status\".equals(query)) {\n        FlowService.Client flowClient = this.getFlowClient();\n        FlowStatus status = flowClient.status(new DelegationToken(),\n            new FlowIdentifier(Constants.defaultAccount, appid, flowid, -1));\n        String value = status.getStatus();\n        respondSuccess(message.getChannel(), request, value.getBytes());\n        helper.finish(Success);\n      } else if (\"metrics\".equals(query)) {\n        MetricsFrontendService.Client metricsClient = this.getMetricsClient();\n        CounterRequest counterRequest = new CounterRequest(\n            new FlowArgument(Constants.defaultAccount, appid, flowid));\n        List<String> counterNames = parameters.get(\"counter\");\n        if (counterNames != null) {\n          counterRequest.setName(counterNames);\n        }\n        List<Counter> counters = metricsClient.getCounters(counterRequest);\n        StringBuilder str = new StringBuilder();\n        boolean first = true;\n        for (Counter counter : counters) {\n          if (first) first = false; else str.append(',');\n          if (counter.isSetQualifier()) {\n            str.append(counter.getQualifier()).append(\".\");\n          }\n          str.append(counter.getName()).append('=').append(counter.getValue());\n        }\n        respondSuccess(message.getChannel(), request, str.toString().getBytes());\n        helper.finish(Success);\n\n      } else {\n        // this should not happen because we checked above -> internal error\n        helper.finish(Error);\n        respondError(message.getChannel(),\n            HttpResponseStatus.INTERNAL_SERVER_ERROR);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Exception caught for connector '\" +\n          this.accessor.getName() + \"'. \", e.getCause());\n      helper.finish(Error);\n      if (message.getChannel().isOpen()) {\n        respondError(message.getChannel(),\n            HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        message.getChannel().close();\n      }\n    }\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void messageReceived(ChannelHandlerContext context,\n                              MessageEvent message) throws Exception {\n\n    HttpRequest request = (HttpRequest) message.getMessage();\n    HttpMethod method = request.getMethod();\n    String uri = request.getUri();\n\n    LOG.trace(\"Request received: \" + method + \" \" + uri);\n    metrics.meter(this.getClass(), Constants.METRIC_REQUESTS, 1);\n\n    // only GET is supported for now\n    if (method != HttpMethod.GET) {\n      LOG.trace(\"Received a \" + method + \" request, which is not supported\");\n      respondNotAllowed(message.getChannel(), allowedMethods);\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      return;\n    }\n\n    // parse and verify the url path\n    String provider = null, remainder = null;\n    // valid paths are <prefix>/service/method?param=value&...\n    if (uri.startsWith(this.pathPrefix)) {\n      int pos1 = uri.indexOf(\"/\", this.pathPrefix.length());\n      int pos2 = uri.indexOf(\"?\", this.pathPrefix.length());\n      int pos = (pos1 < 0 ||  pos2 < 0)\n          ? Math.max(pos1, pos2) : Math.min(pos1, pos2);\n      if (pos > this.pathPrefix.length()) { // at least one char in provider\n        provider = uri.substring(this.pathPrefix.length(), pos);\n        remainder = uri.substring(pos);\n      }\n    }\n    if (provider == null) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request with unsupported path \" + uri);\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    // determine the service provider for the given path\n    String serviceName = \"query.\" + provider;\n    ImmutablePair<String, Integer> pair = this.accessor.\n        getServiceDiscovery().getServiceAddress(serviceName);\n    if (pair == null) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request for query provider \" + provider + \" \" +\n          \"which is not registered. \");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    // make HTTP call to provider with method?param=...\n    String relayUri = \"http://\" + pair.getFirst() + \":\" + pair.getSecond()\n        + \"/v1/query/\" + provider + remainder;\n    LOG.trace(\"Relaying request to \" + relayUri);\n\n    // TODO use more efficient Http client\n    HttpGet get = new HttpGet(relayUri);\n    HttpClient client = new DefaultHttpClient();\n    HttpResponse response = client.execute(get);\n\n    // decompose the response\n    int status = response.getStatusLine().getStatusCode();\n    byte[] content = null;\n    String contentType = null;\n    HttpEntity entity = response.getEntity();\n    if (entity != null) {\n      if (entity.getContentType() != null)\n          contentType = entity.getContentType().getValue();\n      int contentLength = (int)entity.getContentLength();\n      if (contentLength > 0) {\n        InputStream contentStream = entity.getContent();\n        byte[] bytes = new byte[contentLength];\n        int bytesRead;\n        for (bytesRead = 0; bytesRead < contentLength; ) {\n          int numBytes = contentStream.read(bytes, bytesRead,\n              contentLength - bytesRead);\n          if (numBytes < 0) break;\n          bytesRead += numBytes;\n        }\n        contentStream.close();\n        if (bytesRead == contentLength)\n          content = bytes;\n        else\n          content = Arrays.copyOf(bytes, bytesRead);\n      }\n    }\n    client.getConnectionManager().shutdown();\n\n    // return result from provider\n    respond(message.getChannel(), request,\n        HttpResponseStatus.valueOf(status),\n        contentType == null ? null : Collections.\n            singletonMap(HttpHeaders.Names.CONTENT_TYPE, contentType),\n        content);\n  }","id":70242,"modified_method":"@Override\n  public void messageReceived(ChannelHandlerContext context,\n                              MessageEvent message) throws Exception {\n\n    HttpRequest request = (HttpRequest) message.getMessage();\n    HttpMethod method = request.getMethod();\n    String uri = request.getUri();\n\n    LOG.trace(\"Request received: \" + method + \" \" + uri);\n    MetricsHelper helper = new MetricsHelper(this.getClass(), this.metrics,\n        this.accessor.getName());\n\n    try {\n      // only GET is supported for now\n      if (method != HttpMethod.GET) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received a \" + method + \" request, which is not supported\");\n        respondNotAllowed(message.getChannel(), allowedMethods);\n        return;\n      }\n\n      // parse and verify the url path\n      String provider = null, remainder = null;\n      // valid paths are <prefix>/service/method?param=value&...\n      if (uri.startsWith(this.pathPrefix)) {\n        int pos1 = uri.indexOf(\"/\", this.pathPrefix.length());\n        int pos2 = uri.indexOf(\"?\", this.pathPrefix.length());\n        int pos = (pos1 < 0 ||  pos2 < 0)\n            ? Math.max(pos1, pos2) : Math.min(pos1, pos2);\n        if (pos > this.pathPrefix.length()) { // at least one char in provider\n          provider = uri.substring(this.pathPrefix.length(), pos);\n          remainder = uri.substring(pos);\n        }\n      }\n      if (provider == null) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received a request with unsupported path \" + uri);\n        respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        return;\n      }\n      helper.setMethod(provider);\n\n      // determine the service provider for the given path\n      String serviceName = \"query.\" + provider;\n      ImmutablePair<String, Integer> pair = this.accessor.\n          getServiceDiscovery().getServiceAddress(serviceName);\n      if (pair == null) {\n        helper.finish(NotFound);\n        LOG.trace(\"Received a request for query provider \" + provider + \" \" +\n            \"which is not registered. \");\n        respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        return;\n      }\n\n      // make HTTP call to provider with method?param=...\n      String relayUri = \"http://\" + pair.getFirst() + \":\" + pair.getSecond()\n          + \"/v1/query/\" + provider + remainder;\n      LOG.trace(\"Relaying request to \" + relayUri);\n\n      HttpClient client = new DefaultHttpClient();\n      int status;\n      byte[] content = null;\n      String contentType = null;\n      try {\n        // TODO use more efficient Http client\n        HttpGet get = new HttpGet(relayUri);\n        HttpResponse response = client.execute(get);\n\n        // decompose the response\n        status = response.getStatusLine().getStatusCode();\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n          if (entity.getContentType() != null)\n            contentType = entity.getContentType().getValue();\n          int contentLength = (int)entity.getContentLength();\n          if (contentLength > 0) {\n            InputStream contentStream = entity.getContent();\n            byte[] bytes = new byte[contentLength];\n            int bytesRead;\n            for (bytesRead = 0; bytesRead < contentLength; ) {\n              int numBytes = contentStream.read(bytes, bytesRead,\n                  contentLength - bytesRead);\n              if (numBytes < 0) break;\n              bytesRead += numBytes;\n            }\n            contentStream.close();\n            if (bytesRead == contentLength)\n              content = bytes;\n            else\n              content = Arrays.copyOf(bytes, bytesRead);\n          }\n        }\n      } catch (Exception e) {\n        LOG.error(\"Exception when forwarding query to URI \" + relayUri\n            + \": \" + e.getMessage() + \", at \" +\n            StackTraceUtil.toStringStackTrace(e));\n        helper.finish(Error);\n        respondError(message.getChannel(),\n            HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        return;\n      } finally {\n        client.getConnectionManager().shutdown();\n      }\n\n      // return result from provider\n      respond(message.getChannel(), request,\n          HttpResponseStatus.valueOf(status),\n          contentType == null ? null : Collections.\n              singletonMap(HttpHeaders.Names.CONTENT_TYPE, contentType),\n          content);\n\n      if (status == HttpStatus.SC_OK) {\n        helper.finish(Success);\n      } else if (status == HttpStatus.SC_NOT_FOUND) {\n        helper.finish(NotFound);\n      } else if (status == HttpStatus.SC_NO_CONTENT) {\n        helper.finish(NoData);\n      } else if (status == HttpStatus.SC_INTERNAL_SERVER_ERROR) {\n        helper.finish(Error);\n      } else if (status == HttpStatus.SC_BAD_REQUEST) {\n        helper.finish(BadRequest);\n      } else { // not sure what this is, we will meter as a bad request\n        helper.finish(BadRequest);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Exception caught for connector '\" +\n          this.accessor.getName() + \"'. \", e.getCause());\n      helper.finish(Error);\n      if (message.getChannel().isOpen()) {\n        respondError(message.getChannel(),\n            HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        message.getChannel().close();\n      }\n    }\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n      throws Exception {\n    metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n    LOG.error(\"Exception caught for connector '\" +\n        this.accessor.getName() + \"'. \", e.getCause());\n    if(e.getChannel().isOpen()) {\n      respondError(e.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n      e.getChannel().close();\n    }\n  }","id":70243,"modified_method":"@Override\n  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n      throws Exception {\n    MetricsHelper.meterError(metrics, this.accessor.getName());\n    LOG.error(\"Exception caught for connector '\" +\n        this.accessor.getName() + \"'. \", e.getCause());\n    if(e.getChannel().isOpen()) {\n      respondError(e.getChannel(), HttpResponseStatus.INTERNAL_SERVER_ERROR);\n      e.getChannel().close();\n    }\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void messageReceived(ChannelHandlerContext context,\n                              MessageEvent message) throws Exception {\n    HttpRequest request = (HttpRequest) message.getMessage();\n\n    LOG.trace(\"Request received\");\n    metrics.meter(this.getClass(), Constants.METRIC_REQUESTS, 1);\n\n    // we only support POST\n    HttpMethod method = request.getMethod();\n    if (method != HttpMethod.POST && method != HttpMethod.GET ) {\n      LOG.trace(\"Received a \" + method + \" request, which is not supported\");\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      respondNotAllowed(message.getChannel(), allowedMethods);\n      return;\n    }\n\n    // we do not support a query or parameters in the URL\n    QueryStringDecoder decoder = new QueryStringDecoder(request.getUri());\n    Map<String, List<String>> parameters = decoder.getParameters();\n\n    int operation = UNKNOWN;\n    if (method == HttpMethod.POST)\n      operation = ENQUEUE;\n    else if (method == HttpMethod.GET) {\n      if (parameters == null || parameters.size() == 0)\n        operation = META;\n      else {\n        List<String> qParams = parameters.get(\"q\");\n        if (qParams != null && qParams.size() == 1) {\n          if (\"newConsumer\".equals(qParams.get(0)))\n            operation = NEWID;\n          else if (\"dequeue\".equals(qParams.get(0)))\n            operation = DEQUEUE;\n    } } }\n\n    // respond with error for unknown requests\n    if (operation == UNKNOWN) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received an unsupported \" + method +\n          \" request '\" + request.getUri() + \"'.\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n      return;\n    }\n\n    if ((operation == ENQUEUE || operation == META) &&\n        parameters != null && !parameters.isEmpty()) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\n          \"Received a request with query parameters, which is not supported\");\n      respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n      return;\n    }\n\n    // does the path of the URL start with the correct prefix, and is it of\n    // the form <flowname> or <flowname<\/<streamname> after that? Otherwise\n    // we will not accept this request.\n    String destination = null;\n    String path = decoder.getPath();\n    if (path.startsWith(this.pathPrefix)) {\n      String resourceName = path.substring(this.pathPrefix.length());\n      if (resourceName.length() > 0) {\n        int pos = resourceName.indexOf('/');\n        if (pos < 0) { // streamname\n          destination = resourceName;\n        } else if (pos + 1 == resourceName.length()) { // streamname/\n          destination = resourceName.substring(0, pos);\n        }\n      }\n    }\n    if (destination == null) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request with invalid path \" + path);\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    // validate the existence of the stream\n    if (!this.collector.getStreamCache().validateStream(\n        OperationContext.DEFAULT_ACCOUNT_ID, destination)) {\n      metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n      LOG.trace(\"Received a request for non-existent stream \" + destination);\n      respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n      return;\n    }\n\n    switch(operation) {\n      case ENQUEUE: {\n        metrics.counter(this.getClass(), Constants.METRIC_ENQUEUE_REQUESTS, 1);\n        // build a new event from the request\n        EventBuilder builder = new EventBuilder();\n        // set some built-in headers\n        builder.setHeader(Constants.HEADER_FROM_COLLECTOR,\n            this.collector.getName());\n        builder.setHeader(Constants.HEADER_DESTINATION_STREAM, destination);\n        // and transfer all other headers that are to be preserved\n        String prefix = destination + \".\";\n        Set<String> headers = request.getHeaderNames();\n        for (String header : headers) {\n          String preservedHeader = isPreservedHeader(prefix, header);\n          if (preservedHeader != null) {\n            builder.setHeader(preservedHeader, request.getHeader(header));\n          }\n        }\n        // read the body of the request and add it to the event\n        ChannelBuffer content = request.getContent();\n        int length = content.readableBytes();\n        if (length > 0) {\n          byte[] bytes = new byte[length];\n          content.readBytes(bytes);\n          builder.setBody(bytes);\n        }\n        Event event = builder.create();\n\n        LOG.trace(\"Sending event to consumer: \" + event);\n        // let the consumer process the event.\n        // in case of exception, respond with internal error\n        try {\n          this.collector.getConsumer().consumeEvent(event);\n        } catch (Exception e) {\n          LOG.error(\"Error consuming single event: \" + e.getMessage());\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          this.collector.getStreamCache().refreshStream(\n              OperationContext.DEFAULT_ACCOUNT_ID, destination);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        // all good - respond success\n        metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n        respondSuccess(message.getChannel(), request);\n        break;\n      }\n      case META: {\n        LOG.trace(\"Received a request for stream meta data,\" +\n            \" which is not implemented yet.\");\n        metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n        respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n        return;\n      }\n      // GET means client wants to view the content of a queue.\n      // 1. obtain a consumerId with GET stream?q=newConsumer\n      // 2. dequeue an event with GET stream?q=dequeue with the consumerId as\n      //    an HTTP header\n      case NEWID: {\n        metrics.counter(this.getClass(),\n            Constants.METRIC_CONSUMER_ID_REQUESTS, 1);\n\n        String queueURI = FlowStream.buildStreamURI(\n            Constants.defaultAccount, destination).toString();\n        QueueAdmin.GetGroupID op =\n            new QueueAdmin.GetGroupID(queueURI.getBytes());\n        long id;\n        try {\n          id = this.collector.getExecutor().\n              execute(OperationContext.DEFAULT, op);\n        } catch (Exception e) {\n          LOG.error(\"Exception for GetGroupID: \" + e.getMessage(), e);\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          this.collector.getStreamCache().refreshStream(\n              OperationContext.DEFAULT_ACCOUNT_ID, destination);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          break;\n        }\n        byte[] responseBody = Long.toString(id).getBytes();\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(Constants.HEADER_STREAM_CONSUMER, Long.toString(id));\n\n        metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n        respond(message.getChannel(), request,\n            HttpResponseStatus.CREATED, headers, responseBody);\n        break;\n      }\n      case DEQUEUE: {\n        metrics.counter(this.getClass(), Constants.METRIC_DEQUEUE_REQUESTS, 1);\n        // there must be a header with the consumer id in the request\n        String idHeader = request.getHeader(Constants.HEADER_STREAM_CONSUMER);\n        Long id = null;\n        if (idHeader == null) {\n          LOG.trace(\"Received a dequeue request without header \" +\n              Constants.HEADER_STREAM_CONSUMER);\n        } else {\n          try {\n            id = Long.valueOf(idHeader);\n          } catch (NumberFormatException e) {\n            LOG.trace(\"Received a dequeue request with a invalid header \"\n                + Constants.HEADER_STREAM_CONSUMER + \": \" + e.getMessage());\n        } }\n        if (null == id) {\n          metrics.meter(this.getClass(), Constants.METRIC_BAD_REQUESTS, 1);\n          respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n          return;\n        }\n        // valid consumer id, dequeue and return it\n        String queueURI = FlowStream.buildStreamURI(\n            Constants.defaultAccount, destination).toString();\n        // 0th instance of group 'id' of size 1\n        QueueConsumer queueConsumer = new QueueConsumer(0, id, 1);\n        // singleEntry = true means we must ack before we can see the next entry\n        QueueConfig queueConfig =\n            new QueueConfig(QueuePartitioner.PartitionerType.RANDOM, true);\n        QueueDequeue dequeue = new QueueDequeue(\n            queueURI.getBytes(), queueConsumer, queueConfig);\n        DequeueResult result;\n        try {\n          result = this.collector.getExecutor().\n              execute(OperationContext.DEFAULT, dequeue);\n        } catch (OperationException e) {\n          LOG.error(\"Error dequeueing from stream \" + queueURI +\n              \" with consumer \" + queueConsumer + \": \" + e.getMessage(), e);\n          this.collector.getStreamCache().refreshStream(\n              OperationContext.DEFAULT_ACCOUNT_ID, destination);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        if (result.isEmpty()) {\n          metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n          respondSuccess(message.getChannel(), request,\n              HttpResponseStatus.NO_CONTENT);\n          return;\n        }\n        // try to deserialize into an event (tuple)\n        Map<String, String> headers;\n        byte[] body;\n        try {\n          TupleSerializer serializer = new TupleSerializer(false);\n          Tuple tuple = serializer.deserialize(result.getValue());\n          headers = tuple.get(\"headers\");\n          body = tuple.get(\"body\");\n        } catch (Exception e) {\n          LOG.error(\"Exception when deserializing data from stream \"\n              + queueURI + \" into an event: \" + e.getMessage());\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n        // ack the entry so that the next request can see the next entry\n        QueueAck ack = new QueueAck(\n            queueURI.getBytes(), result.getEntryPointer(), queueConsumer);\n        try {\n          this.collector.getExecutor().\n              execute(OperationContext.DEFAULT, ack);\n        } catch (Exception e) {\n          LOG.error(\"Ack failed to for queue \" + queueURI + \", consumer \"\n              + queueConsumer + \" and pointer \" + result.getEntryPointer() +\n              \": \" + e.getMessage(), e);\n          metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n          return;\n        }\n\n        // prefix each header with the destination to distinguish them from\n        // HTTP headers\n        Map<String, String> prefixedHeaders = Maps.newHashMap();\n        for (Map.Entry<String, String> header : headers.entrySet())\n            prefixedHeaders.put(destination + \".\" + header.getKey(),\n                header.getValue());\n        // now the headers and body are ready to be sent back\n        metrics.meter(this.getClass(), Constants.METRIC_SUCCESS, 1);\n        respond(message.getChannel(), request,\n            HttpResponseStatus.OK, prefixedHeaders, body);\n        break;\n      }\n      default: {\n        // this should not happen because we checked above -> internal error\n        metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n        respondError(message.getChannel(),\n            HttpResponseStatus.INTERNAL_SERVER_ERROR);\n      }\n    }\n  }","id":70244,"modified_method":"@Override\n  public void messageReceived(ChannelHandlerContext context,\n                              MessageEvent message) throws Exception {\n\n    HttpRequest request = (HttpRequest) message.getMessage();\n    HttpMethod method = request.getMethod();\n    String requestUri = request.getUri();\n\n    LOG.trace(\"Request received: \" + method + \" \" + requestUri);\n    MetricsHelper helper = new MetricsHelper(this.getClass(), this.metrics,\n        this.collector.getName());\n\n    try {\n\n      // we only support POST and GET\n      if (method != HttpMethod.POST && method != HttpMethod.GET ) {\n        LOG.trace(\"Received a \" + method + \" request, which is not supported\");\n        helper.finish(BadRequest);\n        respondNotAllowed(message.getChannel(), allowedMethods);\n        return;\n      }\n\n      // we do not support a query or parameters in the URL\n      QueryStringDecoder decoder = new QueryStringDecoder(requestUri);\n      Map<String, List<String>> parameters = decoder.getParameters();\n\n      int operation = UNKNOWN;\n      if (method == HttpMethod.POST) {\n        operation = ENQUEUE;\n        helper.setMethod(\"enqueue\");\n      } else if (method == HttpMethod.GET) {\n        if (parameters == null || parameters.size() == 0) {\n          operation = META;\n          helper.setMethod(\"getQueueMeta\");\n        } else {\n          List<String> qParams = parameters.get(\"q\");\n          if (qParams != null && qParams.size() == 1) {\n            if (\"newConsumer\".equals(qParams.get(0))) {\n              operation = NEWID;\n              helper.setMethod(\"getNewId\");\n            } else if (\"dequeue\".equals(qParams.get(0))) {\n              operation = DEQUEUE;\n              helper.setMethod(\"dequeue\");\n            }\n          }\n        }\n      }\n\n      // respond with error for unknown requests\n      if (operation == UNKNOWN) {\n        helper.finish(BadRequest);\n        LOG.trace(\"Received an unsupported \" + method +\n            \" request '\" + request.getUri() + \"'.\");\n        respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n        return;\n      }\n\n      if ((operation == ENQUEUE || operation == META) &&\n          parameters != null && !parameters.isEmpty()) {\n        helper.finish(BadRequest);\n        LOG.trace(\n            \"Received a request with query parameters, which is not supported\");\n        respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n        return;\n      }\n\n      // does the path of the URL start with the correct prefix, and is it of\n      // the form <flowname> or <flowname<\/<streamname> after that? Otherwise\n      // we will not accept this request.\n      String destination = null;\n      String path = decoder.getPath();\n      if (path.startsWith(this.pathPrefix)) {\n        String resourceName = path.substring(this.pathPrefix.length());\n        if (resourceName.length() > 0) {\n          int pos = resourceName.indexOf('/');\n          if (pos < 0) { // streamname\n            destination = resourceName;\n          } else if (pos + 1 == resourceName.length()) { // streamname/\n            destination = resourceName.substring(0, pos);\n          }\n        }\n      }\n      if (destination == null) {\n        LOG.trace(\"Received a request with invalid path \" + path);\n        respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        return;\n      } else {\n        helper.setScope(destination);\n      }\n\n      // validate the existence of the stream\n      if (!this.collector.getStreamCache().validateStream(\n          OperationContext.DEFAULT_ACCOUNT_ID, destination)) {\n        helper.finish(NotFound);\n        LOG.trace(\"Received a request for non-existent stream \" + destination);\n        respondError(message.getChannel(), HttpResponseStatus.NOT_FOUND);\n        return;\n      }\n\n      switch(operation) {\n        case ENQUEUE: {\n          // build a new event from the request\n          EventBuilder builder = new EventBuilder();\n          // set some built-in headers\n          builder.setHeader(Constants.HEADER_FROM_COLLECTOR,\n              this.collector.getName());\n          builder.setHeader(Constants.HEADER_DESTINATION_STREAM, destination);\n          // and transfer all other headers that are to be preserved\n          String prefix = destination + \".\";\n          Set<String> headers = request.getHeaderNames();\n          for (String header : headers) {\n            String preservedHeader = isPreservedHeader(prefix, header);\n            if (preservedHeader != null) {\n              builder.setHeader(preservedHeader, request.getHeader(header));\n            }\n          }\n          // read the body of the request and add it to the event\n          ChannelBuffer content = request.getContent();\n          int length = content.readableBytes();\n          if (length > 0) {\n            byte[] bytes = new byte[length];\n            content.readBytes(bytes);\n            builder.setBody(bytes);\n          }\n          Event event = builder.create();\n\n          LOG.trace(\"Sending event to consumer: \" + event);\n          // let the consumer process the event.\n          // in case of exception, respond with internal error\n          try {\n            this.collector.getConsumer().consumeEvent(event);\n          } catch (Exception e) {\n            LOG.error(\"Error consuming single event: \" + e.getMessage());\n            helper.finish(Error);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n            // refresh cache for this stream - apparently it has disappeared\n            this.collector.getStreamCache().refreshStream(\n                OperationContext.DEFAULT_ACCOUNT_ID, destination);\n            return;\n          }\n          // all good - respond success\n          respondSuccess(message.getChannel(), request);\n          helper.finish(Success);\n          break;\n        }\n\n        case META: {\n          LOG.trace(\"Received a request for stream meta data,\" +\n              \" which is not implemented yet.\");\n          helper.finish(BadRequest);\n          respondError(message.getChannel(), HttpResponseStatus.NOT_IMPLEMENTED);\n          return;\n        }\n\n        // GET means client wants to view the content of a queue.\n        // 1. obtain a consumerId with GET stream?q=newConsumer\n        // 2. dequeue an event with GET stream?q=dequeue with the consumerId as\n        //    an HTTP header\n        case NEWID: {\n          String queueURI = FlowStream.buildStreamURI(\n              Constants.defaultAccount, destination).toString();\n          QueueAdmin.GetGroupID op =\n              new QueueAdmin.GetGroupID(queueURI.getBytes());\n          long id;\n          try {\n            id = this.collector.getExecutor().\n                execute(OperationContext.DEFAULT, op);\n          } catch (Exception e) {\n            LOG.error(\"Exception for GetGroupID: \" + e.getMessage(), e);\n            helper.finish(Error);\n            this.collector.getStreamCache().refreshStream(\n                OperationContext.DEFAULT_ACCOUNT_ID, destination);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n            break;\n          }\n          byte[] responseBody = Long.toString(id).getBytes();\n          Map<String, String> headers = Maps.newHashMap();\n          headers.put(Constants.HEADER_STREAM_CONSUMER, Long.toString(id));\n\n          respond(message.getChannel(), request,\n              HttpResponseStatus.CREATED, headers, responseBody);\n          helper.finish(Success);\n          break;\n        }\n\n        case DEQUEUE: {\n          // there must be a header with the consumer id in the request\n          String idHeader = request.getHeader(Constants.HEADER_STREAM_CONSUMER);\n          Long id = null;\n          if (idHeader == null) {\n            LOG.trace(\"Received a dequeue request without header \" +\n                Constants.HEADER_STREAM_CONSUMER);\n          } else {\n            try {\n              id = Long.valueOf(idHeader);\n            } catch (NumberFormatException e) {\n              LOG.trace(\"Received a dequeue request with a invalid header \"\n                  + Constants.HEADER_STREAM_CONSUMER + \": \" + e.getMessage());\n            }\n          }\n          if (null == id) {\n            helper.finish(BadRequest);\n            respondError(message.getChannel(), HttpResponseStatus.BAD_REQUEST);\n            return;\n          }\n          // valid consumer id, dequeue and return it\n          String queueURI = FlowStream.buildStreamURI(\n              Constants.defaultAccount, destination).toString();\n          // 0th instance of group 'id' of size 1\n          QueueConsumer queueConsumer = new QueueConsumer(0, id, 1);\n          // singleEntry = true means we must ack before we can see the next entry\n          QueueConfig queueConfig =\n              new QueueConfig(QueuePartitioner.PartitionerType.RANDOM, true);\n          QueueDequeue dequeue = new QueueDequeue(\n              queueURI.getBytes(), queueConsumer, queueConfig);\n          DequeueResult result;\n          try {\n            result = this.collector.getExecutor().\n                execute(OperationContext.DEFAULT, dequeue);\n          } catch (OperationException e) {\n            helper.finish(Error);\n            LOG.error(\"Error dequeueing from stream \" + queueURI +\n                \" with consumer \" + queueConsumer + \": \" + e.getMessage(), e);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n            // refresh the cache for this stream, it may have been deleted\n            this.collector.getStreamCache().refreshStream(\n                OperationContext.DEFAULT_ACCOUNT_ID, destination);\n            return;\n          }\n          if (result.isEmpty()) {\n            respondSuccess(message.getChannel(), request,\n                HttpResponseStatus.NO_CONTENT);\n            helper.finish(NoData);\n            return;\n          }\n          // try to deserialize into an event (tuple)\n          Map<String, String> headers;\n          byte[] body;\n          try {\n            TupleSerializer serializer = new TupleSerializer(false);\n            Tuple tuple = serializer.deserialize(result.getValue());\n            headers = tuple.get(\"headers\");\n            body = tuple.get(\"body\");\n          } catch (Exception e) {\n            LOG.error(\"Exception when deserializing data from stream \"\n                + queueURI + \" into an event: \" + e.getMessage());\n            helper.finish(Error);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n            return;\n          }\n          // ack the entry so that the next request can see the next entry\n          QueueAck ack = new QueueAck(\n              queueURI.getBytes(), result.getEntryPointer(), queueConsumer);\n          try {\n            this.collector.getExecutor().\n                execute(OperationContext.DEFAULT, ack);\n          } catch (Exception e) {\n            LOG.error(\"Ack failed to for queue \" + queueURI + \", consumer \"\n                + queueConsumer + \" and pointer \" + result.getEntryPointer() +\n                \": \" + e.getMessage(), e);\n            helper.finish(Error);\n            respondError(message.getChannel(),\n                HttpResponseStatus.INTERNAL_SERVER_ERROR);\n            return;\n          }\n\n          // prefix each header with the destination to distinguish them from\n          // HTTP headers\n          Map<String, String> prefixedHeaders = Maps.newHashMap();\n          for (Map.Entry<String, String> header : headers.entrySet())\n            prefixedHeaders.put(destination + \".\" + header.getKey(),\n                header.getValue());\n          // now the headers and body are ready to be sent back\n          respond(message.getChannel(), request,\n              HttpResponseStatus.OK, prefixedHeaders, body);\n          helper.finish(Success);\n          break;\n        }\n        default: {\n          // this should not happen because we checked above -> internal error\n          helper.finish(Error);\n          respondError(message.getChannel(),\n              HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Exception caught for connector '\" +\n          this.collector.getName() + \"'. \", e.getCause());\n      helper.finish(Error);\n      if (message.getChannel().isOpen()) {\n        respondError(message.getChannel(),\n            HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        message.getChannel().close();\n      }\n    }\n\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n      throws Exception {\n    metrics.meter(this.getClass(), Constants.METRIC_INTERNAL_ERRORS, 1);\n    LOG.error(\"Exception caught for collector '\" +\n        this.collector.getName() + \"'. \", e.getCause());\n    e.getChannel().close();\n  }","id":70245,"modified_method":"@Override\n  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)\n      throws Exception {\n    MetricsHelper.meterError(metrics, this.collector.getName());\n    LOG.error(\"Exception caught for collector '\" +\n        this.collector.getName() + \"'. \", e.getCause());\n    e.getChannel().close();\n  }","commit_id":"0a0b6067fbef7b3353e0a82836b4bc38a2674db4","url":"https://github.com/caskdata/cdap"},{"original_method":"public MuleEvent process(MuleEvent event) throws MuleException\n    {\n        EndpointURI endpointURIForMessage = getEndpointURIForMessage(event);\n        OutboundEndpoint outboundEndpoint = createStaticEndpoint(endpointURIForMessage);\n\n        event = new DefaultMuleEvent(event.getMessage(), endpointURIForMessage.getUri(),\n            event.getExchangePattern(), event.getFlowConstruct(), event.getSession());\n\n        return outboundEndpoint.process(event);\n    }","id":70246,"modified_method":"public MuleEvent process(MuleEvent event) throws MuleException\n    {\n        EndpointURI endpointURIForMessage = getEndpointURIForMessage(event);\n        OutboundEndpoint outboundEndpoint = createStaticEndpoint(endpointURIForMessage);\n\n        event = new DefaultMuleEvent(event.getMessage(), endpointURIForMessage.getUri(), event.getMessageSourceName(),\n                                     event.getExchangePattern(), event.getFlowConstruct(), event.getSession(), event.getTimeout(),\n                                     event.getCredentials(), (ResponseOutputStream) event.getOutputStream(), event.getEncoding(),\n                                     event.isTransacted(), event.isSynchronous(), event.getReplyToDestination(), event.getReplyToHandler());\n\n        return outboundEndpoint.process(event);\n    }","commit_id":"0c5327b7f561a332388b8f9d3fa7115b4338ae13","url":"https://github.com/mulesoft/mule"},{"original_method":"public synchronized FileChannel getChannel(File ioFile) throws FileNotFoundException {\n    ChannelDescriptor descriptor = myCache.get(ioFile);\n    if (descriptor == null) {\n      dropOvercache();\n      descriptor = new ChannelDescriptor(ioFile, myAccessMode);\n      myCache.put(ioFile, descriptor);\n    }\n    descriptor.lock();\n    return descriptor.getChannel();\n  }","id":70247,"modified_method":"public synchronized RandomAccessFile getChannel(File ioFile) throws FileNotFoundException {\n    ChannelDescriptor descriptor = myCache.get(ioFile);\n    if (descriptor == null) {\n      dropOvercache();\n      descriptor = new ChannelDescriptor(ioFile, myAccessMode);\n      myCache.put(ioFile, descriptor);\n    }\n    descriptor.lock();\n    return descriptor.getChannel();\n  }","commit_id":"14f581f166b87afd7ce73fa77f2495d1262ce1bd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public FileChannel getChannel() {\n      return myChannel;\n    }","id":70248,"modified_method":"public RandomAccessFile getChannel() {\n      return myChannel;\n    }","commit_id":"14f581f166b87afd7ce73fa77f2495d1262ce1bd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@SuppressWarnings({\"IOResourceOpenedButNotSafelyClosed\"})\n    public ChannelDescriptor(File file, String accessMode) throws FileNotFoundException {\n      RandomAccessFile raf = new RandomAccessFile(file, accessMode);\n      myChannel = raf.getChannel();\n    }","id":70249,"modified_method":"@SuppressWarnings({\"IOResourceOpenedButNotSafelyClosed\"})\n    public ChannelDescriptor(File file, String accessMode) throws FileNotFoundException {\n      myChannel = new RandomAccessFile(file, accessMode);\n    }","commit_id":"14f581f166b87afd7ce73fa77f2495d1262ce1bd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void flush(final ByteBuffer buf, final long offset, final int length) throws IOException {\n    final ByteBuffer flush;\n    if (offset + length > mySize) {\n      flush = ByteBuffer.wrap(buf.array(), 0, (int)(mySize - offset));\n    }\n    else {\n      flush = buf;\n      flush.position(0);\n    }\n\n    final FileChannel channel = getChannel();\n    channel.write(flush, offset);\n    releaseChannel();\n  }","id":70250,"modified_method":"private void flush(final ByteBuffer buf, final long offset, int length) throws IOException {\n    if (offset + length > mySize) {\n      length = (int)(mySize - offset);\n    }\n\n    final RandomAccessFile file = getFile();\n    file.seek(offset);\n    file.write(buf.array(), 0, length);\n    releaseFile();\n  }","commit_id":"14f581f166b87afd7ce73fa77f2495d1262ce1bd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void loadPage(final Page page) {\n    try {\n      page.getBuf().position(0);\n      final FileChannel channel = getChannel();\n      channel.read(page.getBuf(), page.getOffset());\n      releaseChannel();\n    }\n    catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }","id":70251,"modified_method":"public void loadPage(final Page page) {\n    try {\n      final RandomAccessFile file = getFile();\n      file.seek(page.getOffset());\n      final ByteBuffer buf = page.getBuf();\n      file.read(buf.array(), 0, Page.PAGE_SIZE);\n      releaseFile();\n    }\n    catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }","commit_id":"14f581f166b87afd7ce73fa77f2495d1262ce1bd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void force() {\n    if (isDirty()) {\n      ourPool.flushPages(this);\n      try {\n        FileChannel channel = getChannel();\n        channel.force(false);\n        releaseChannel();\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      myIsDirty = false;\n    }\n  }","id":70252,"modified_method":"public void force() {\n    if (isDirty()) {\n      ourPool.flushPages(this);\n      myIsDirty = false;\n    }\n  }","commit_id":"14f581f166b87afd7ce73fa77f2495d1262ce1bd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void put(long addr, byte[] bytes, int off, int len) {\n    myIsDirty = true;\n    mySize = Math.max(mySize, addr + len);\n\n    if (len > Page.PAGE_SIZE) {\n      try {\n        ourPool.flushPagesInRange(this, addr, len);\n        final FileChannel channel = getChannel();\n        channel.write(ByteBuffer.wrap(bytes, off, len), addr);\n        releaseChannel();\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      while (len > 0) {\n        final Page page = ourPool.alloc(this, addr);\n        int written = page.put(addr, bytes, off, len);\n        len -= written;\n        addr += written;\n        off += written;\n        ourPool.reclaim(page);\n      }\n    }\n  }","id":70253,"modified_method":"public void put(long addr, byte[] bytes, int off, int len) {\n    myIsDirty = true;\n    mySize = Math.max(mySize, addr + len);\n\n    if (len > Page.PAGE_SIZE) {\n      try {\n        ourPool.flushPagesInRange(this, addr, len);\n        final RandomAccessFile file = getFile();\n        file.seek(addr);\n        file.write(bytes, off, len);\n        releaseFile();\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      while (len > 0) {\n        final Page page = ourPool.alloc(this, addr);\n        int written = page.put(addr, bytes, off, len);\n        len -= written;\n        addr += written;\n        off += written;\n        ourPool.reclaim(page);\n      }\n    }\n  }","commit_id":"14f581f166b87afd7ce73fa77f2495d1262ce1bd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void get(long addr, byte[] bytes, int off, int len) {\n    if (len > Page.PAGE_SIZE) {\n      try {\n        ourPool.flushPagesInRange(this, addr, len);\n\n        final FileChannel channel = getChannel();\n        channel.read(ByteBuffer.wrap(bytes, off, len), addr);\n        releaseChannel();\n\n        mySize = Math.max(mySize, addr + len);\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      while (len > 0) {\n        final Page page = ourPool.alloc(this, addr);\n        int read = page.get(addr, bytes, off, len);\n        len -= read;\n        addr += read;\n        off += read;\n        ourPool.reclaim(page);\n      }\n    }\n  }","id":70254,"modified_method":"public void get(long addr, byte[] bytes, int off, int len) {\n    if (len > Page.PAGE_SIZE) {\n      try {\n        ourPool.flushPagesInRange(this, addr, len);\n\n        final RandomAccessFile file = getFile();\n        file.seek(addr);\n        file.read(bytes, off, len);\n        releaseFile();\n\n        mySize = Math.max(mySize, addr + len);\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      while (len > 0) {\n        final Page page = ourPool.alloc(this, addr);\n        int read = page.get(addr, bytes, off, len);\n        len -= read;\n        addr += read;\n        off += read;\n        ourPool.reclaim(page);\n      }\n    }\n  }","commit_id":"14f581f166b87afd7ce73fa77f2495d1262ce1bd","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void write(byte[] data, int offset, int length) throws IOException\n    {\n        write(ByteBuffer.wrap(data, offset, length));\n    }","id":70255,"modified_method":"public void write(byte[] data, int offset, int length) throws IOException\n    {\n        if (buffer == null)\n            throw new ClosedChannelException();\n\n        int position = offset;\n        int remaining = length;\n        while (remaining > 0)\n        {\n            if (!buffer.hasRemaining())\n                reBuffer();\n\n            int toCopy = Math.min(remaining, buffer.remaining());\n            buffer.put(data, position, toCopy);\n\n            remaining -= toCopy;\n            position += toCopy;\n\n            isDirty = true;\n            syncNeeded = true;\n        }\n    }","commit_id":"f60e4ad4298725dac57c36da8427d992be19eb8a","url":"https://github.com/apache/cassandra"},{"original_method":"public void write(byte[] buffer) throws IOException\n    {\n        write(ByteBuffer.wrap(buffer, 0, buffer.length));\n    }","id":70256,"modified_method":"public void write(byte[] buffer) throws IOException\n    {\n        write(buffer, 0, buffer.length);\n    }","commit_id":"f60e4ad4298725dac57c36da8427d992be19eb8a","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Deletes a blackboard artifact tag.\n     *\n     * @param tag The tag to delete.\n     *\n     * @throws TskCoreException If there is an error deleting the tag from the\n     *                          case database.\n     */\n    public synchronized void deleteBlackboardArtifactTag(BlackboardArtifactTag tag) throws TskCoreException {\n        lazyLoadExistingTagNames();\n        caseDb.deleteBlackboardArtifactTag(tag);\n        try {\n            Case.getCurrentCase().notifyBlackBoardArtifactTagDeleted(tag);\n        } catch (IllegalStateException e) {\n            Logger.getLogger(TagsManager.class.getName()).log(Level.WARNING, NbBundle.getMessage(TagsManager.class, \"TagsManager.deleteBlackboardArtifactTag.noCaseWarning\"));\n        }\n    }","id":70257,"modified_method":"/**\n     * Deletes a blackboard artifact tag.\n     *\n     * @param tag The tag to delete.\n     *\n     * @throws TskCoreException If there is an error deleting the tag from the\n     *                          case database.\n     */\n    public void deleteBlackboardArtifactTag(BlackboardArtifactTag tag) throws TskCoreException {\n        synchronized (this) {\n            lazyLoadExistingTagNames();\n            caseDb.deleteBlackboardArtifactTag(tag);\n        }\n\n        try {\n            Case.getCurrentCase().notifyBlackBoardArtifactTagDeleted(tag);\n        } catch (IllegalStateException ex) {\n            logger.log(Level.WARNING, NbBundle.getMessage(TagsManager.class, \"TagsManager.deleteBlackboardArtifactTag.noCaseWarning\"), ex);\n        }\n    }","commit_id":"747ac76afe7f144f9918920608704fcc3efab8cf","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Deletes a content tag.\n     *\n     * @param tag The tag to delete.\n     *\n     * @throws TskCoreException If there is an error deleting the tag from the\n     *                          case database.\n     */\n    public synchronized void deleteContentTag(ContentTag tag) throws TskCoreException {\n        lazyLoadExistingTagNames();\n\n        caseDb.deleteContentTag(tag);\n        try {\n            Case.getCurrentCase().notifyContentTagDeleted(tag);\n        } catch (IllegalStateException e) {\n            Logger.getLogger(TagsManager.class.getName()).log(Level.WARNING, NbBundle.getMessage(TagsManager.class, \"TagsManager.deleteContentTag.noCaseWarning\"));\n        }\n    }","id":70258,"modified_method":"/**\n     * Deletes a content tag.\n     *\n     * @param tag The tag to delete.\n     *\n     * @throws TskCoreException If there is an error deleting the tag from the\n     *                          case database.\n     */\n    public void deleteContentTag(ContentTag tag) throws TskCoreException {\n        synchronized (this) {\n            lazyLoadExistingTagNames();\n            caseDb.deleteContentTag(tag);\n        }\n\n        try {\n            Case.getCurrentCase().notifyContentTagDeleted(tag);\n        } catch (IllegalStateException ex) {\n            logger.log(Level.SEVERE, NbBundle.getMessage(TagsManager.class, \"TagsManager.deleteContentTag.noCaseWarning\"), ex);\n        }\n    }","commit_id":"747ac76afe7f144f9918920608704fcc3efab8cf","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Tags a blackboard artifact object.\n     *\n     * @param artifact The blackboard artifact to tag.\n     * @param tagName  The name to use for the tag.\n     * @param comment  A comment to store with the tag.\n     *\n     * @return A BlackboardArtifactTag data transfer object (DTO) representing\n     *         the new tag.\n     *\n     * @throws TskCoreException If there is an error adding the tag to the case\n     *                          database.\n     */\n    public synchronized BlackboardArtifactTag addBlackboardArtifactTag(BlackboardArtifact artifact, TagName tagName, String comment) throws TskCoreException {\n        lazyLoadExistingTagNames();\n        BlackboardArtifactTag addBlackboardArtifactTag = caseDb.addBlackboardArtifactTag(artifact, tagName, comment);\n        try {\n            Case.getCurrentCase().notifyBlackBoardArtifactTagAdded(addBlackboardArtifactTag);\n        } catch (IllegalStateException e) {\n            Logger.getLogger(TagsManager.class.getName()).log(Level.WARNING, NbBundle.getMessage(TagsManager.class, \"TagsManager.addBlackboardArtifactTag.noCaseWarning\"));\n        }\n        return addBlackboardArtifactTag;\n    }","id":70259,"modified_method":"/**\n     * Tags a blackboard artifact object.\n     *\n     * @param artifact The blackboard artifact to tag.\n     * @param tagName  The name to use for the tag.\n     * @param comment  A comment to store with the tag.\n     *\n     * @return A BlackboardArtifactTag data transfer object (DTO) representing\n     *         the new tag.\n     *\n     * @throws TskCoreException If there is an error adding the tag to the case\n     *                          database.\n     */\n    public BlackboardArtifactTag addBlackboardArtifactTag(BlackboardArtifact artifact, TagName tagName, String comment) throws TskCoreException {\n        BlackboardArtifactTag tag;\n        synchronized (this) {\n            lazyLoadExistingTagNames();\n            tag = caseDb.addBlackboardArtifactTag(artifact, tagName, comment);\n        }\n\n        try {\n            Case.getCurrentCase().notifyBlackBoardArtifactTagAdded(tag);\n        } catch (IllegalStateException ex) {\n            logger.log(Level.SEVERE, NbBundle.getMessage(TagsManager.class, \"TagsManager.addBlackboardArtifactTag.noCaseWarning\"), ex);\n        }\n        return tag;\n    }","commit_id":"747ac76afe7f144f9918920608704fcc3efab8cf","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Tags a content object or a section of a content object.\n     *\n     * @param content         The content to tag.\n     * @param tagName         The name to use for the tag.\n     * @param comment         A comment to store with the tag.\n     * @param beginByteOffset Designates the beginning of a tagged section.\n     * @param endByteOffset   Designates the end of a tagged section.\n     *\n     * @return A ContentTag data transfer object (DTO) representing the new tag.\n     *\n     * @throws IllegalArgumentException If a requested byte offset is out of\n     *                                  range.\n     * @throws TskCoreException         If there is an error adding the tag to\n     *                                  the case database.\n     */\n    public synchronized ContentTag addContentTag(Content content, TagName tagName, String comment, long beginByteOffset, long endByteOffset) throws IllegalArgumentException, TskCoreException {\n        lazyLoadExistingTagNames();\n\n        if (beginByteOffset >= 0 && endByteOffset >= 1) {\n            if (beginByteOffset > content.getSize() - 1) {\n                throw new IllegalArgumentException(NbBundle.getMessage(this.getClass(),\n                        \"TagsManager.addContentTag.exception.beginByteOffsetOOR.msg\",\n                        beginByteOffset, content.getSize() - 1));\n            }\n\n            if (endByteOffset > content.getSize() - 1) {\n                throw new IllegalArgumentException(\n                        NbBundle.getMessage(this.getClass(), \"TagsManager.addContentTag.exception.endByteOffsetOOR.msg\",\n                                endByteOffset, content.getSize() - 1));\n            }\n\n            if (endByteOffset < beginByteOffset) {\n                throw new IllegalArgumentException(\n                        NbBundle.getMessage(this.getClass(), \"TagsManager.addContentTag.exception.endLTbegin.msg\"));\n            }\n        }\n\n        ContentTag newContentTag = caseDb.addContentTag(content, tagName, comment, beginByteOffset, endByteOffset);\n        try {\n            Case.getCurrentCase().notifyContentTagAdded(newContentTag);\n        } catch (IllegalStateException ex) {\n            Logger.getLogger(TagsManager.class.getName()).log(Level.WARNING, NbBundle.getMessage(TagsManager.class, \"TagsManager.addContentTag.noCaseWarning\"));\n        }\n        return newContentTag;\n    }","id":70260,"modified_method":"/**\n     * Tags a content object or a section of a content object.\n     *\n     * @param content         The content to tag.\n     * @param tagName         The name to use for the tag.\n     * @param comment         A comment to store with the tag.\n     * @param beginByteOffset Designates the beginning of a tagged section.\n     * @param endByteOffset   Designates the end of a tagged section.\n     *\n     * @return A ContentTag data transfer object (DTO) representing the new tag.\n     *\n     * @throws IllegalArgumentException If a requested byte offset is out of\n     *                                  range.\n     * @throws TskCoreException         If there is an error adding the tag to\n     *                                  the case database.\n     */\n    public ContentTag addContentTag(Content content, TagName tagName, String comment, long beginByteOffset, long endByteOffset) throws IllegalArgumentException, TskCoreException {\n        ContentTag tag;\n        synchronized (this) {\n            lazyLoadExistingTagNames();\n\n            if (beginByteOffset >= 0 && endByteOffset >= 1) {\n                if (beginByteOffset > content.getSize() - 1) {\n                    throw new IllegalArgumentException(NbBundle.getMessage(this.getClass(),\n                            \"TagsManager.addContentTag.exception.beginByteOffsetOOR.msg\",\n                            beginByteOffset, content.getSize() - 1));\n                }\n\n                if (endByteOffset > content.getSize() - 1) {\n                    throw new IllegalArgumentException(\n                            NbBundle.getMessage(this.getClass(), \"TagsManager.addContentTag.exception.endByteOffsetOOR.msg\",\n                                    endByteOffset, content.getSize() - 1));\n                }\n\n                if (endByteOffset < beginByteOffset) {\n                    throw new IllegalArgumentException(\n                            NbBundle.getMessage(this.getClass(), \"TagsManager.addContentTag.exception.endLTbegin.msg\"));\n                }\n            }\n\n            tag = caseDb.addContentTag(content, tagName, comment, beginByteOffset, endByteOffset);\n        }\n\n        try {\n            Case.getCurrentCase().notifyContentTagAdded(tag);\n        } catch (IllegalStateException ex) {\n            logger.log(Level.SEVERE, NbBundle.getMessage(TagsManager.class, \"TagsManager.addContentTag.noCaseWarning\"), ex);\n        }\n        return tag;\n    }","commit_id":"747ac76afe7f144f9918920608704fcc3efab8cf","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Populates the tag names collection and the tag names table in the case\n     * database with the existing tag names from all sources.\n     */\n    private void lazyLoadExistingTagNames() {\n        if (!tagNamesInitialized) {\n            addTagNamesFromCurrentCase();\n            addTagNamesFromTagsSettings();\n            addPredefinedTagNames();\n            saveTagNamesToTagsSettings();\n            tagNamesInitialized = true;\n        }\n    }","id":70261,"modified_method":"/**\n     * Populates the tag names collection and the tag names table in the case\n     * database with the existing tag names from all sources.\n     */\n    private void lazyLoadExistingTagNames() {\n        if (!tagNamesLoaded) {\n            addTagNamesFromCurrentCase();\n            addTagNamesFromTagsSettings();\n            addPredefinedTagNames();\n            saveTagNamesToTagsSettings();\n            tagNamesLoaded = true;\n        }\n    }","commit_id":"747ac76afe7f144f9918920608704fcc3efab8cf","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public PortletDataHandlerStatusMessage(\n\t\tString messageType, String[] portletIds,\n\t\tManifestSummary manifestSummary) {\n\n\t\tMessage message = createMessage(messageType, manifestSummary);\n\n\t\tmessage.put(\"portletIds\", portletIds);\n\n\t\t_message = message;\n\t}","id":70262,"modified_method":"public PortletDataHandlerStatusMessage(\n\t\tString messageType, String[] portletIds,\n\t\tManifestSummary manifestSummary) {\n\n\t\tinit(messageType, manifestSummary);\n\n\t\tput(\"portletIds\", portletIds);\n\t}","commit_id":"ce2dc5425170d55bf6eb2eab9d7d99fe2d29a25d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletDataHandlerStatusMessage(\n\t\tString messageType, String portletId, ManifestSummary manifestSummary) {\n\n\t\tMessage message = createMessage(messageType, manifestSummary);\n\n\t\tmessage.put(\"portletId\", portletId);\n\n\t\tPortlet portlet = PortletLocalServiceUtil.getPortletById(portletId);\n\n\t\tif (portlet != null) {\n\t\t\tPortletDataHandler portletDataHandler =\n\t\t\t\tportlet.getPortletDataHandlerInstance();\n\n\t\t\tlong portletModelAdditionCountersTotal =\n\t\t\t\tportletDataHandler.getExportModelCount(manifestSummary);\n\n\t\t\tif (portletModelAdditionCountersTotal < 0) {\n\t\t\t\tportletModelAdditionCountersTotal = 0;\n\t\t\t}\n\n\t\t\tmessage.put(\n\t\t\t\t\"portletModelAdditionCountersTotal\",\n\t\t\t\tportletModelAdditionCountersTotal);\n\t\t}\n\n\t\t_message = message;\n\t}","id":70263,"modified_method":"public PortletDataHandlerStatusMessage(\n\t\tString messageType, String portletId, ManifestSummary manifestSummary) {\n\n\t\tinit(messageType, manifestSummary);\n\n\t\tput(\"portletId\", portletId);\n\n\t\tPortlet portlet = PortletLocalServiceUtil.getPortletById(portletId);\n\n\t\tif (portlet != null) {\n\t\t\tPortletDataHandler portletDataHandler =\n\t\t\t\tportlet.getPortletDataHandlerInstance();\n\n\t\t\tlong portletModelAdditionCountersTotal =\n\t\t\t\tportletDataHandler.getExportModelCount(manifestSummary);\n\n\t\t\tif (portletModelAdditionCountersTotal < 0) {\n\t\t\t\tportletModelAdditionCountersTotal = 0;\n\t\t\t}\n\n\t\t\tput(\n\t\t\t\t\"portletModelAdditionCountersTotal\",\n\t\t\t\tportletModelAdditionCountersTotal);\n\t\t}\n\t}","commit_id":"ce2dc5425170d55bf6eb2eab9d7d99fe2d29a25d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public <T extends StagedModel> PortletDataHandlerStatusMessage(\n\t\tString messageType, T stagedModel, ManifestSummary manifestSummary) {\n\n\t\tMessage message = createMessage(messageType, manifestSummary);\n\n\t\tStagedModelDataHandler<T> stagedModelDataHandler =\n\t\t\t(StagedModelDataHandler<T>)\n\t\t\t\tStagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(\n\t\t\t\t\tstagedModel.getModelClassName());\n\n\t\tmessage.put(\n\t\t\t\"stagedModelName\",\n\t\t\tstagedModelDataHandler.getDisplayName(stagedModel));\n\n\t\tmessage.put(\n\t\t\t\"stagedModelType\",\n\t\t\tString.valueOf(stagedModel.getStagedModelType()));\n\t\tmessage.put(\"uuid\", stagedModel.getUuid());\n\n\t\t_message = message;\n\t}","id":70264,"modified_method":"public <T extends StagedModel> PortletDataHandlerStatusMessage(\n\t\tString messageType, T stagedModel, ManifestSummary manifestSummary) {\n\n\t\tinit(messageType, manifestSummary);\n\n\t\tStagedModelDataHandler<T> stagedModelDataHandler =\n\t\t\t(StagedModelDataHandler<T>)\n\t\t\t\tStagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(\n\t\t\t\t\tstagedModel.getModelClassName());\n\n\t\tput(\n\t\t\t\"stagedModelName\",\n\t\t\tstagedModelDataHandler.getDisplayName(stagedModel));\n\n\t\tput(\n\t\t\t\"stagedModelType\",\n\t\t\tString.valueOf(stagedModel.getStagedModelType()));\n\n\t\tput(\"uuid\", stagedModel.getUuid());\n\t}","commit_id":"ce2dc5425170d55bf6eb2eab9d7d99fe2d29a25d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private Message createMessage(\n\t\tString messageType, ManifestSummary manifestSummary) {\n\n\t\tMessage message = new Message();\n\n\t\tmessage.put(\"messageType\", messageType);\n\n\t\tMap<String, LongWrapper> modelAdditionCounters =\n\t\t\tmanifestSummary.getModelAdditionCounters();\n\n\t\tmessage.put(\n\t\t\t\"modelAdditionCounters\",\n\t\t\tnew HashMap<String, LongWrapper>(modelAdditionCounters));\n\n\t\tMap<String, LongWrapper> modelDeletionCounters =\n\t\t\tmanifestSummary.getModelDeletionCounters();\n\n\t\tmessage.put(\n\t\t\t\"modelDeletionCounters\",\n\t\t\tnew HashMap<String, LongWrapper>(modelDeletionCounters));\n\n\t\treturn message;\n\t}","id":70265,"modified_method":"protected void init(String messageType, ManifestSummary manifestSummary) {\n\t\tput(\"messageType\", messageType);\n\n\t\tMap<String, LongWrapper> modelAdditionCounters =\n\t\t\tmanifestSummary.getModelAdditionCounters();\n\n\t\tput(\n\t\t\t\"modelAdditionCounters\",\n\t\t\tnew HashMap<String, LongWrapper>(modelAdditionCounters));\n\n\t\tMap<String, LongWrapper> modelDeletionCounters =\n\t\t\tmanifestSummary.getModelDeletionCounters();\n\n\t\tput(\n\t\t\t\"modelDeletionCounters\",\n\t\t\tnew HashMap<String, LongWrapper>(modelDeletionCounters));\n\t}","commit_id":"ce2dc5425170d55bf6eb2eab9d7d99fe2d29a25d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void sendStatusMessage(\n\t\tString messageType, String portletId, ManifestSummary manifestSummary) {\n\n\t\tif (!BackgroundTaskThreadLocal.hasBackgroundTask()) {\n\t\t\treturn;\n\t\t}\n\n\t\tMessage message = createMessage(messageType, manifestSummary);\n\n\t\tmessage.put(\"portletId\", portletId);\n\n\t\tPortlet portlet = PortletLocalServiceUtil.getPortletById(portletId);\n\n\t\tif (portlet != null) {\n\t\t\tPortletDataHandler portletDataHandler =\n\t\t\t\tportlet.getPortletDataHandlerInstance();\n\n\t\t\tlong portletModelAdditionCountersTotal =\n\t\t\t\tportletDataHandler.getExportModelCount(manifestSummary);\n\n\t\t\tif (portletModelAdditionCountersTotal < 0) {\n\t\t\t\tportletModelAdditionCountersTotal = 0;\n\t\t\t}\n\n\t\t\tmessage.put(\n\t\t\t\t\"portletModelAdditionCountersTotal\",\n\t\t\t\tportletModelAdditionCountersTotal);\n\t\t}\n\n\t\t_singleDestinationMessageSender.send(message);\n\t}","id":70266,"modified_method":"@Override\n\tpublic void sendStatusMessage(\n\t\tString messageType, String portletId, ManifestSummary manifestSummary) {\n\n\t\tPortletDataHandlerStatusMessage portletDataHandlerStatusMessage =\n\t\t\tnew PortletDataHandlerStatusMessage(\n\t\t\t\tmessageType, portletId, manifestSummary);\n\n\t\tsendStatusMessage(portletDataHandlerStatusMessage);\n\t}","commit_id":"ce2dc5425170d55bf6eb2eab9d7d99fe2d29a25d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic <T extends StagedModel> void sendStatusMessage(\n\t\tString messageType, T stagedModel, ManifestSummary manifestSummary) {\n\n\t\tif (!BackgroundTaskThreadLocal.hasBackgroundTask()) {\n\t\t\treturn;\n\t\t}\n\n\t\tMessage message = createMessage(messageType, manifestSummary);\n\n\t\tStagedModelDataHandler<T> stagedModelDataHandler =\n\t\t\t(StagedModelDataHandler<T>)\n\t\t\t\tStagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(\n\t\t\t\t\tstagedModel.getModelClassName());\n\n\t\tmessage.put(\n\t\t\t\"stagedModelName\",\n\t\t\tstagedModelDataHandler.getDisplayName(stagedModel));\n\n\t\tmessage.put(\n\t\t\t\"stagedModelType\",\n\t\t\tString.valueOf(stagedModel.getStagedModelType()));\n\t\tmessage.put(\"uuid\", stagedModel.getUuid());\n\n\t\t_singleDestinationMessageSender.send(message);\n\t}","id":70267,"modified_method":"@Override\n\tpublic <T extends StagedModel> void sendStatusMessage(\n\t\tString messageType, T stagedModel, ManifestSummary manifestSummary) {\n\n\t\tPortletDataHandlerStatusMessage portletDataHandlerStatusMessage =\n\t\t\tnew PortletDataHandlerStatusMessage(\n\t\t\t\tmessageType, stagedModel, manifestSummary);\n\n\t\tsendStatusMessage(portletDataHandlerStatusMessage);\n\t}","commit_id":"ce2dc5425170d55bf6eb2eab9d7d99fe2d29a25d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void sendStatusMessage(\n\t\tString messageType, String[] portletIds,\n\t\tManifestSummary manifestSummary) {\n\n\t\tif (!BackgroundTaskThreadLocal.hasBackgroundTask()) {\n\t\t\treturn;\n\t\t}\n\n\t\tMessage message = createMessage(messageType, manifestSummary);\n\n\t\tmessage.put(\"portletIds\", portletIds);\n\n\t\t_singleDestinationMessageSender.send(message);\n\t}","id":70268,"modified_method":"@Override\n\tpublic void sendStatusMessage(\n\t\tString messageType, String[] portletIds,\n\t\tManifestSummary manifestSummary) {\n\n\t\tPortletDataHandlerStatusMessage portletDataHandlerStatusMessage =\n\t\t\tnew PortletDataHandlerStatusMessage(\n\t\t\t\tmessageType, portletIds, manifestSummary);\n\n\t\tsendStatusMessage(portletDataHandlerStatusMessage);\n\t}","commit_id":"ce2dc5425170d55bf6eb2eab9d7d99fe2d29a25d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortalCache getCache(String name, boolean blocking) {\n\t\tEhcache cache = _cacheManager.getEhcache(name);\n\n\t\tif (cache == null) {\n\t\t\tsynchronized (_cacheManager) {\n\t\t\t\tcache = _cacheManager.getEhcache(name);\n\n\t\t\t\tif (cache == null) {\n\t\t\t\t\t_cacheManager.addCache(name);\n\n\t\t\t\t\tcache = _cacheManager.getEhcache(name);\n\n\t\t\t\t\tcache.setStatisticsEnabled(\n\t\t\t\t\t\tPropsValues.EHCACHE_STATISTICS_ENABLED);\n\n\t\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\t\"Cache name \" + name + \" is using implementation \" +\n\t\t\t\t\t\t\t\tcache.getClass().getName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tPortalCache portalCache = new EhcachePortalCache(cache);\n\n\t\tportalCache.setDebug(_debug);\n\n\t\tif (PropsValues.TRANSACTIONAL_CACHE_ENABLED &&\n\t\t\t(name.startsWith(EntityCacheImpl.CACHE_NAME) ||\n\t\t\t name.startsWith(FinderCacheImpl.CACHE_NAME))) {\n\n\t\t\tportalCache = new TransactionalPortalCache(portalCache);\n\t\t}\n\n\t\tif (PropsValues.EHCACHE_BLOCKING_CACHE_ALLOWED && blocking) {\n\t\t\tportalCache = new BlockingPortalCache(portalCache);\n\t\t}\n\n\t\treturn portalCache;\n\t}","id":70269,"modified_method":"public PortalCache getCache(String name, boolean blocking) {\n\t\tPortalCache portalCache = _cacheRegistry.get(name);\n\n\t\tif (portalCache == null) {\n\t\t\tsynchronized (_cacheManager) {\n\t\t\t\tportalCache = _cacheRegistry.get(name);\n\n\t\t\t\tif (portalCache == null) {\n\t\t\t\t\tportalCache = addCache(name, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (PropsValues.TRANSACTIONAL_CACHE_ENABLED &&\n\t\t\t(name.startsWith(EntityCacheImpl.CACHE_NAME) ||\n\t\t\t name.startsWith(FinderCacheImpl.CACHE_NAME))) {\n\n\t\t\tportalCache = new TransactionalPortalCache(portalCache);\n\t\t}\n\n\t\tif (PropsValues.EHCACHE_BLOCKING_CACHE_ALLOWED && blocking) {\n\t\t\tportalCache = new BlockingPortalCache(portalCache);\n\t\t}\n\n\t\treturn portalCache;\n\t}","commit_id":"26a7257b8e2e08f43038aece901842842509a4f2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void reconfigureCaches(URL configurationURL) {\n\t\tConfiguration configuration = EhcacheConfigurationUtil.getConfiguration(\n\t\t\tconfigurationURL, _clusterAware);\n\n\t\tMap<String, CacheConfiguration> cacheConfigurations =\n\t\t\tconfiguration.getCacheConfigurations();\n\n\t\tfor (CacheConfiguration cacheConfiguration :\n\t\t\t\tcacheConfigurations.values()) {\n\n\t\t\tCache cache = new Cache(cacheConfiguration);\n\n\t\t\tPortalCache portalCache = addCache(cache);\n\n\t\t\tif (portalCache == null) {\n\t\t\t\t_log.error(\n\t\t\t\t\t\"Failed to override cache \" + cacheConfiguration.getName());\n\t\t\t}\n\t\t}\n\t}","id":70270,"modified_method":"public void reconfigureCaches(URL configurationURL) {\n\t\tConfiguration configuration = EhcacheConfigurationUtil.getConfiguration(\n\t\t\tconfigurationURL, _clusterAware);\n\n\t\tMap<String, CacheConfiguration> cacheConfigurations =\n\t\t\tconfiguration.getCacheConfigurations();\n\n\t\tfor (CacheConfiguration cacheConfiguration :\n\t\t\t\tcacheConfigurations.values()) {\n\n\t\t\tCache cache = new Cache(cacheConfiguration);\n\n\t\t\tPortalCache portalCache = addCache(cache.getName(), cache);\n\n\t\t\tif (portalCache == null) {\n\t\t\t\t_log.error(\n\t\t\t\t\t\"Failed to override cache \" + cacheConfiguration.getName());\n\t\t\t}\n\t\t}\n\t}","commit_id":"26a7257b8e2e08f43038aece901842842509a4f2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void removeCache(String name) {\n\t\t_cacheManager.removeCache(name);\n\t}","id":70271,"modified_method":"public void removeCache(String name) {\n\t\t_cacheRegistry.remove(name);\n\n\t\t_cacheManager.removeCache(name);\n\t}","commit_id":"26a7257b8e2e08f43038aece901842842509a4f2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortalCache addCache(Cache cache) {\n\t\tsynchronized (_cacheManager) {\n\t\t\tString cacheName = cache.getName();\n\n\t\t\tif (_cacheManager.cacheExists(cacheName)) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Overriding existing cache \" + cacheName);\n\t\t\t\t}\n\n\t\t\t\t_cacheManager.removeCache(cacheName);\n\t\t\t}\n\n\t\t\t_cacheManager.addCache(cache);\n\n\t\t\treturn getCache(cacheName);\n\t\t}\n\t}","id":70272,"modified_method":"protected PortalCache addCache(String cacheName, Cache cache) {\n\n\t\tEhcachePortalCache ehcachePortalCache = null;\n\n\t\tsynchronized (_cacheManager) {\n\t\t\tif (_cacheManager.cacheExists(cacheName) && cache != null) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Overriding existing cache \" + cacheName);\n\t\t\t\t}\n\n\t\t\t\t_cacheManager.removeCache(cacheName);\n\t\t\t}\n\n\t\t\tif (cache == null) {\n\t\t\t\tif (!_cacheManager.cacheExists(cacheName)) {\n\t\t\t\t\t_cacheManager.addCache(cacheName);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_cacheManager.addCache(cache);\n\t\t\t}\n\n\t\t\tEhcache ehcache = _cacheManager.getEhcache(cacheName);\n\n\t\t\tif (ehcache == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tehcache.setStatisticsEnabled(\n\t\t\t\tPropsValues.EHCACHE_STATISTICS_ENABLED);\n\n\t\t\tehcachePortalCache = _cacheRegistry.get(cacheName);\n\n\t\t\tif (ehcachePortalCache == null) {\n\t\t\t\tehcachePortalCache = new EhcachePortalCache(ehcache);\n\t\t\t\tehcachePortalCache.setDebug(_debug);\n\n\t\t\t\t_cacheRegistry.put(cacheName, ehcachePortalCache);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tehcachePortalCache.setEhcache(ehcache);\n\t\t\t}\n\n\t\t}\n\n\t\treturn ehcachePortalCache;\n\t}","commit_id":"26a7257b8e2e08f43038aece901842842509a4f2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Cache newCache(String cacheName, String pattern) {\n\t\treturn new MemCache(this, eventTrackingService(), pattern,\n\t\t\t\tinstantiateCache(cacheName, true));\n\t}","id":70273,"modified_method":"public Cache newCache(String cacheName, String pattern) {\n\t\treturn new MemCache(this, eventTrackingService(), pattern,\n\t\t\t\tinstantiateCache(cacheName));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public Cache newCache(String cacheName, CacheRefresher refresher) {\n\t\treturn new MemCache(this, eventTrackingService(), refresher,\n\t\t\t\tinstantiateCache(cacheName, true));\n\t}","id":70274,"modified_method":"public Cache newCache(String cacheName, CacheRefresher refresher) {\n\t\treturn new MemCache(this, eventTrackingService(), refresher,\n\t\t\t\tinstantiateCache(cacheName));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newCache()\n\t{\n\t\treturn new MemCache(this, eventTrackingService(),\n\t\t\t\tinstantiateCache(\"MemCache\", true));\n\t}","id":70275,"modified_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newCache()\n\t{\n\t\treturn new MemCache(this, eventTrackingService(),\n\t\t\t\tinstantiateCache(\"MemCache\"));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public Cache newCache(String cacheName) {\n\t\treturn new MemCache(this, eventTrackingService(),\n\t\t\t\tinstantiateCache(cacheName, true));\n\t}","id":70276,"modified_method":"public Cache newCache(String cacheName) {\n\t\treturn new MemCache(this, eventTrackingService(),\n\t\t\t\tinstantiateCache(cacheName));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newCache(CacheRefresher refresher, long sleep)\n\t{\n\t\treturn new MemCache(this, eventTrackingService(), refresher, sleep,\n\t\t\t\tinstantiateCache(\"MemCache\", true));\n\t}","id":70277,"modified_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newCache(CacheRefresher refresher, long sleep)\n\t{\n\t\treturn new MemCache(this, eventTrackingService(), refresher, sleep,\n\t\t\t\tinstantiateCache(\"MemCache\"));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newHardCache(CacheRefresher refresher, String pattern)\n\t{\n\t\treturn new HardCache(this, eventTrackingService(), refresher, pattern,\n\t\t\t\tinstantiateCache(\"HardCache\", true));\n\t}","id":70278,"modified_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newHardCache(CacheRefresher refresher, String pattern)\n\t{\n\t\treturn new HardCache(this, eventTrackingService(), refresher, pattern,\n\t\t\t\tinstantiateCache(\"HardCache\"));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * \n\t * @param cacheName\n\t * @param legacyMode\n\t *            If true always create a new Cache. If false, cache must be\n\t *            defined in bean factory.\n\t * @return\n\t */\n\tprivate Ehcache instantiateCache(String cacheName, boolean legacyMode)\n\t{\n\t\tif (M_log.isDebugEnabled())\n\t\t\tM_log.debug(\"createNewCache(String \" + cacheName + \")\");\n\n\t\tString name = cacheName;\n\t\tif (name == null || \"\".equals(name))\n\t\t{\n\t\t\tif (legacyMode)\n\t\t\t{\n\t\t\t\t// make up a name\n\t\t\t\tname = \"DefaultCache\" + UUID.randomUUID().toString();\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\"String cacheName must not be null or empty!\");\n\t\t\t}\n\t\t}\n\n\t\tif(legacyMode)\n\t\t{\n\t\t\tif (cacheManager.cacheExists(name)) {\n\t\t\t\tM_log.warn(\"Cache already exists and is bound to CacheManager; creating new cache from defaults: \"\n\t\t\t\t\t\t+ name);\n\t\t\t\t// favor creation of new caches for backwards compatibility\n\t\t\t\t// in the future, it seems like you would want to return the same\n\t\t\t\t// cache if it already exists\n\t\t\t\tname = name + UUID.randomUUID().toString();\n\t\t\t}\n\t\t}\n\n\t\tEhcache cache = null;\n\t\t\n\t\t// try to locate a named cache in the bean factory\n\t\ttry {\n\t\t\tcache = (Ehcache) ComponentManager.get(name);\n\t\t} catch (Throwable e) {\n\t\t\tcache = null;\n\t\t\tM_log.error(\"Error occurred when trying to load cache from bean factory!\", e);\n\t\t}\n\t\tif(cache != null) // found the cache\n\t\t{\n\t\t\tM_log.info(\"Loaded Named Cache \" + cache);\n\n\t\t\treturn cache;\n\t\t}\n\t\telse // did not find the cache\n\t\t{\n\t\t\tif(legacyMode)\n\t\t\t{\n\t\t\t\tcacheManager.addCache(name); // create a new cache\n\t\t\t\tcache = cacheManager.getEhcache(name);\n\t\t\t\tM_log.info(\"Loaded Default Cache \" + cache);\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tM_log.error(\"Could not find named cache in the bean factory!:\"\n\t\t\t\t\t\t\t\t+ name);\n\t\t\t}\n\n\t\t\treturn cache;\t\t\t\n\t\t}\n\t}","id":70279,"modified_method":"/**\n\t * \n\t * @param cacheName\n\t * @param legacyMode\n\t *            If true always create a new Cache. If false, cache must be\n\t *            defined in bean factory.\n\t * @return\n\t */\n\tprivate Ehcache instantiateCache(String cacheName)\n\t{\n\t\tif (M_log.isDebugEnabled())\n\t\t\tM_log.debug(\"createNewCache(String \" + cacheName + \")\");\n\n\t\tString name = cacheName;\n\t\tif (name == null || \"\".equals(name))\n\t\t{\n\t\t\tname = \"DefaultCache\" + UUID.randomUUID().toString();\t\t\t\n\t\t}\n\t\tcacheName = MemoryService.class.getName()+\".\"+cacheName;\n\t\t\n\t\t\n\t\t// Cache creation should all go to the cache manager and be\n\t\t// configured via the cache manager setup.\n\t\t\n\t\tif ( cacheManager.cacheExists(name) ) {\n\t\t\treturn cacheManager.getEhcache(name);\n\t\t} \n\t\tcacheManager.addCache(name);\n\t\treturn cacheManager.getEhcache(name);\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t/*\n\t\t\n\n\t\tif(legacyMode)\n\t\t{\n\t\t\tif (cacheManager.cacheExists(name)) {\n\t\t\t\tM_log.warn(\"Cache already exists and is bound to CacheManager; creating new cache from defaults: \"\n\t\t\t\t\t\t+ name);\n\t\t\t\t// favor creation of new caches for backwards compatibility\n\t\t\t\t// in the future, it seems like you would want to return the same\n\t\t\t\t// cache if it already exists\n\t\t\t\tname = name + UUID.randomUUID().toString();\n\t\t\t}\n\t\t}\n\n\t\tEhcache cache = null;\n\t\t\n\t\t// try to locate a named cache in the bean factory\n\t\ttry {\n\t\t\tcache = (Ehcache) ComponentManager.get(name);\n\t\t} catch (Throwable e) {\n\t\t\tcache = null;\n\t\t\tM_log.error(\"Error occurred when trying to load cache from bean factory!\", e);\n\t\t}\n\t\t\n\t\t\n\t\tif(cache != null) // found the cache\n\t\t{\n\t\t\tM_log.info(\"Loaded Named Cache \" + cache);\n\n\t\t\treturn cache;\n\t\t}\n\t\telse // did not find the cache\n\t\t{\n\t\t\tif(legacyMode)\n\t\t\t{\n\t\t\t\tcacheManager.addCache(name); // create a new cache\n\t\t\t\tcache = cacheManager.getEhcache(name);\n\t\t\t\tM_log.info(\"Loaded Default Cache \" + cache);\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tM_log.error(\"Could not find named cache in the bean factory!:\"\n\t\t\t\t\t\t\t\t+ name);\n\t\t\t}\n\n\t\t\treturn cache;\t\t\t\n\t\t}\n\t\t*/\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public Cache newCache(String cacheName, CacheRefresher refresher,\n\t\t\tString pattern) {\n\t\treturn new MemCache(this, eventTrackingService(), refresher, pattern,\n\t\t\t\tinstantiateCache(cacheName, true));\n\t}","id":70280,"modified_method":"public Cache newCache(String cacheName, CacheRefresher refresher,\n\t\t\tString pattern) {\n\t\treturn new MemCache(this, eventTrackingService(), refresher, pattern,\n\t\t\t\tinstantiateCache(cacheName));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newHardCache(CacheRefresher refresher, long sleep)\n\t{\n\t\treturn new MemCache(this, eventTrackingService(), refresher, sleep,\n\t\t\t\tinstantiateCache(\"HardCache\", true));\n\t}","id":70281,"modified_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newHardCache(CacheRefresher refresher, long sleep)\n\t{\n\t\treturn new MemCache(this, eventTrackingService(), refresher, sleep,\n\t\t\t\tinstantiateCache(\"HardCache\"));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newHardCache()\n\t{\n\t\treturn new HardCache(this, eventTrackingService(),\n\t\t\t\tinstantiateCache(\"HardCache\", true));\n\t}","id":70282,"modified_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newHardCache()\n\t{\n\t\treturn new HardCache(this, eventTrackingService(),\n\t\t\t\tinstantiateCache(\"HardCache\"));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Final initialization, once all dependencies are set.\n\t */\n\tpublic void init()\n\t{\n\t\ttry\n\t\t{\n\t\t\t// get notified of events to watch for a reset\n\t\t\teventTrackingService().addObserver(this);\n\n\t\t\tM_log.info(\"init()\");\n\t\t\t\n\t\t\tif (cacheManager == null)\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"CacheManager was not injected properly!\");\n\t\t}\n\t\tcatch (Throwable t)\n\t\t{\n\t\t\tM_log.warn(\"init(): \", t);\n\t\t}\n\n\t}","id":70283,"modified_method":"/**\n\t * Final initialization, once all dependencies are set.\n\t */\n\tpublic void init()\n\t{\n\t\ttry\n\t\t{\n\t\t\t// get notified of events to watch for a reset\n\t\t\teventTrackingService().addObserver(this);\n\n\t\t\tM_log.info(\"init()\");\n\t\t\t\n\t\t\tif (cacheManager == null)\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"CacheManager was not injected properly!\");\n\t\t\t\n\t\t\tcacheManager.getCacheManagerEventListenerRegistry().registerListener(new CacheManagerEventListener() {\n\n\t\t\t\tprivate Status status = Status.STATUS_UNINITIALISED;\n\t\t\t\tpublic void dispose() throws CacheException\n\t\t\t\t{\n\t\t\t\t\tstatus = Status.STATUS_SHUTDOWN;\n\t\t\t\t}\n\n\t\t\t\tpublic Status getStatus()\n\t\t\t\t{\n\t\t\t\t\treturn status;\n\t\t\t\t}\n\n\t\t\t\tpublic void init() throws CacheException\n\t\t\t\t{\n\t\t\t\t\tstatus = Status.STATUS_ALIVE;\n\t\t\t\t}\n\n\t\t\t\tpublic void notifyCacheAdded(String name)\n\t\t\t\t{\n\t\t\t\t\tEhcache cache = cacheManager.getEhcache(name);\n\t\t\t\t\tM_log.info(\"Added Cache name [\"+name+\"] as Cache [\" + cache.getName() +\"] \" +\n\t\t\t\t\t\t\t\"Max Elements in Memory [\"+cache.getMaxElementsInMemory()+\"] \"+\n\t\t\t\t\t\t\t\"Max Elements on Disk [\"+cache.getMaxElementsOnDisk()+\"] \"+\n\t\t\t\t\t\t\t\"Time to Idle (seconds) [\"+cache.getTimeToIdleSeconds()+\"] \"+\n\t\t\t\t\t\t\t\"Time to Live (seconds) [\"+cache.getTimeToLiveSeconds()+\"] \"+\n\t\t\t\t\t\t\t\"Memory Store Eviction Policy [\"+cache.getMemoryStoreEvictionPolicy()+\"] \");\n\n\t\t\t\t}\n\n\t\t\t\tpublic void notifyCacheRemoved(String name)\n\t\t\t\t{\n\t\t\t\t\tM_log.info(\"Cache Removed \"+name);\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t}\n\t\tcatch (Throwable t)\n\t\t{\n\t\t\tM_log.warn(\"init(): \", t);\n\t\t}\n\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public MultiRefCache newMultiRefCache(String cacheName) {\n\t\treturn new MultiRefCacheImpl(\n\t\t\t\tthis,\n\t\t\t\teventTrackingService(),\n\t\t\t\tinstantiateCache(cacheName, true),\n\t\t\t\tinstantiateCache(\n\t\t\t\t\t\tORG_SAKAIPROJECT_MEMORY_MEMORY_SERVICE_MREF_MAP, false));\n\t}","id":70284,"modified_method":"public MultiRefCache newMultiRefCache(String cacheName) {\n\t\treturn new MultiRefCacheImpl(\n\t\t\t\tthis,\n\t\t\t\teventTrackingService(),\n\t\t\t\tinstantiateCache(cacheName));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newCache(CacheRefresher refresher, String pattern)\n\t{\n\t\treturn new MemCache(this, eventTrackingService(), refresher, pattern,\n\t\t\t\tinstantiateCache(\"MemCache\", true));\n\t}","id":70285,"modified_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newCache(CacheRefresher refresher, String pattern)\n\t{\n\t\treturn new MemCache(this, eventTrackingService(), refresher, pattern,\n\t\t\t\tinstantiateCache(\"MemCache\"));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newHardCache(long sleep, String pattern)\n\t{\n\t\treturn new HardCache(this, eventTrackingService(), sleep, pattern,\n\t\t\t\tinstantiateCache(\"HardCache\", true));\n\t}","id":70286,"modified_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic Cache newHardCache(long sleep, String pattern)\n\t{\n\t\treturn new HardCache(this, eventTrackingService(), sleep, pattern,\n\t\t\t\tinstantiateCache(\"HardCache\"));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic MultiRefCache newMultiRefCache(long sleep)\n\t{\n\t\treturn new MultiRefCacheImpl(\n\t\t\t\tthis,\n\t\t\t\teventTrackingService(),\n\t\t\t\tinstantiateCache(\"MultiRefCache\", true),\n\t\t\t\tinstantiateCache(\n\t\t\t\t\t\tORG_SAKAIPROJECT_MEMORY_MEMORY_SERVICE_MREF_MAP, false));\n\t}","id":70287,"modified_method":"/**\n\t * {@inheritDoc}\n\t * @deprecated\n\t */\n\tpublic MultiRefCache newMultiRefCache(long sleep)\n\t{\n\t\treturn new MultiRefCacheImpl(\n\t\t\t\tthis,\n\t\t\t\teventTrackingService(),\n\t\t\t\tinstantiateCache(\"MultiRefCache\"));\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void dispose() \n\t{\n\t\tM_log.debug(\"dispose()\");\n\t\t// may not be necessary...\n\t\tmref_cache.removeAll();\n\t\tmref_cache.getStatistics().clearStatistics();\n\t}","id":70288,"modified_method":"public void dispose() \n\t{\n\t\tM_log.debug(\"dispose()\");\n\t\t// may not be necessary...\n\t\tm_refs.clear();\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private void cleanEntityReferences(Object key, Object value)\n\t{\n\t\tif (M_log.isDebugEnabled())\n\t\t\tM_log.debug(\"maintainEntityReferences(Object \" + key\n\t\t\t\t\t+ \", Object \" + value + \")\");\n\t\t\n\t\tif (value == null) return;\n\n\t\tfinal MultiRefCacheEntry cachedEntry = (MultiRefCacheEntry) value;\n\t\t\n\t\t// remove this key from any of the entity references in m_refs that are dependent on this entry\n\t\tfor (Iterator iRefs = cachedEntry.getRefs().iterator(); iRefs.hasNext();)\n\t\t{\n\t\t\tString ref = (String) iRefs.next();\n\t\t\tfinal Element element = mref_cache.get(ref);\n\t\t\tif(element != null)\n\t\t\t{\n\t\t\t\tCollection keys = (Collection) element.getObjectValue();\n\t\t\t\tif ((keys != null) && (keys.contains(key)))\n\t\t\t\t{\n\t\t\t\t\tkeys.remove(key);\n\n\t\t\t\t\t// remove the ref entry if it no longer has any cached keys in its collection\n\t\t\t\t\tif (keys.isEmpty())\n\t\t\t\t\t{\n\t\t\t\t\t\tmref_cache.remove(ref);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmref_cache.put(new Element(ref, keys)); // refresh cache\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t}","id":70289,"modified_method":"private void cleanEntityReferences(Object key, Object value)\n\t{\n\t\tif (M_log.isDebugEnabled())\n\t\t\tM_log.debug(\"maintainEntityReferences(Object \" + key\n\t\t\t\t\t+ \", Object \" + value + \")\");\n\t\t\n\t\tif (value == null) return;\n\n\t\tfinal MultiRefCacheEntry cachedEntry = (MultiRefCacheEntry) value;\n\t\t\n\t\t// remove this key from any of the entity references in m_refs that are dependent on this entry\n\t\tfor (Iterator iRefs = cachedEntry.getRefs().iterator(); iRefs.hasNext();)\n\t\t{\n\t\t\tString ref = (String) iRefs.next();\n\t\t\tCollection keys = m_refs.get(ref);\n\t\t\tif ((keys != null) && (keys.contains(key)))\n\t\t\t{\n\t\t\t\tkeys.remove(key);\n\n\t\t\t\t// remove the ref entry if it no longer has any cached keys in\n\t\t\t\t// its collection\n\t\t\t\tif (keys.isEmpty())\n\t\t\t\t{\n\t\t\t\t\tm_refs.remove(ref);\n\t\t\t\t}\n\t\t\t}\t\t\t\t\n\t\t}\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic void clear()\n\t{\n\t\tsuper.clear();\n\t\tmref_cache.removeAll();\n\t\tmref_cache.getStatistics().clearStatistics();\n\t}","id":70290,"modified_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic void clear()\n\t{\n\t\tsuper.clear();\n\t\tm_refs.clear();\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Construct the Cache - checks for expiration periodically.\n\t */\n\tpublic MultiRefCacheImpl(BasicMemoryService memoryService,\n\t\t\tEventTrackingService eventTrackingService, Ehcache cache,\n\t\t\tEhcache mrefCache)\n\t{\n\t\tsuper(memoryService, eventTrackingService, \"\", cache);\n\t\tcache.getCacheEventNotificationService().registerListener(this);\n\n\t\tif (mrefCache == null || !mrefCache.isEternal())\n\t\t\tthrow new IllegalStateException(\"mref_cache must be eternal!\");\n\t\tthis.mref_cache = mrefCache;\n\t}","id":70291,"modified_method":"/**\n\t * Construct the Cache - checks for expiration periodically.\n\t */\n\tpublic MultiRefCacheImpl(BasicMemoryService memoryService,\n\t\t\tEventTrackingService eventTrackingService, Ehcache cache)\n\t{\n\t\tsuper(memoryService, eventTrackingService, \"\", cache);\n\t\tcache.getCacheEventNotificationService().registerListener(this);\n\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Make sure there's an entry in refs for this ref that includes this key.\n\t * \n\t * @param ref\n\t *        The entity reference string.\n\t * @param key\n\t *        The cache entry key dependent on this entity ref.\n\t */\n\tprotected void addRefCachedKey(String ref, Object key)\n\t{\n\t\tCollection cachedKeys = null;\n\t\tfinal Element element = mref_cache.get(ref);\n\t\tif(element == null)\n\t\t{\t// nothing found in cache - create new Collection of refs\n\t\t\tcachedKeys = new ArrayList();\n\t\t\tcachedKeys.add(key);\n\t\t\tmref_cache.put(new Element(ref, cachedKeys));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcachedKeys = (Collection) element.getObjectValue();\n\t\t\tif (!cachedKeys.contains(key))\n\t\t\t{\n\t\t\t\tcachedKeys.add(key);\n\t\t\t\tmref_cache.put(new Element(ref, cachedKeys));\n\t\t\t}\n\t\t}\t\t\n\t}","id":70292,"modified_method":"/**\n\t * Make sure there's an entry in refs for this ref that includes this key.\n\t * \n\t * @param ref\n\t *        The entity reference string.\n\t * @param key\n\t *        The cache entry key dependent on this entity ref.\n\t */\n\tprotected void addRefCachedKey(String ref, Object key)\n\t{\n\t\tCollection cachedKeys = m_refs.get(ref);\n\t\tif ( cachedKeys == null ) {\n\t\t\tcachedKeys = new ArrayList();\n\t\t\tm_refs.put(ref, cachedKeys);\n\t\t}\n\t\tcachedKeys.add(key);\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Complete the update, given an event that we know we need to act upon.\n\t * \n\t * @param event\n\t *        The event to process.\n\t */\n\tprotected void continueUpdate(Event event)\n\t{\n\t\tString ref = event.getResource();\n\n\t\tif (M_log.isDebugEnabled())\n\t\t\tM_log.debug(\"update() [\" + m_resourcePattern + \"] resource: \" + ref\n\t\t\t\t\t+ \" event: \" + event.getEvent());\n\n\t\t// do we have this in our ref list\n\t\tif (mref_cache.isKeyInCache(ref))\n\t\t{\n\t\t\t// get the copy of the Collection of cache keys for this reference (the actual collection will be reduced as the removes occur)\n\t\t\tfinal Element element = mref_cache.get(ref);\n\t\t\tif(element != null)\n\t\t\t{\n\t\t\t\tCollection cachedKeys = new ArrayList((Collection) element\n\t\t\t\t\t\t.getObjectValue());\n\n\t\t\t\t// invalidate all these keys\n\t\t\t\tfor (Iterator iKeys = cachedKeys.iterator(); iKeys.hasNext();)\n\t\t\t\t{\n\t\t\t\t\tremove(iKeys.next()); // evict primary authz cache\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":70293,"modified_method":"/**\n\t * Complete the update, given an event that we know we need to act upon.\n\t * \n\t * @param event\n\t *        The event to process.\n\t */\n\tprotected void continueUpdate(Event event)\n\t{\n\t\tString ref = event.getResource();\n\n\t\tif (M_log.isDebugEnabled())\n\t\t\tM_log.debug(\"update() [\" + m_resourcePattern + \"] resource: \" + ref\n\t\t\t\t\t+ \" event: \" + event.getEvent());\n\n\t\t// do we have this in our ref list\n\t\tif (m_refs.containsKey(ref))\n\t\t{\n\t\t\t// get the copy of the Collection of cache keys for this reference (the actual collection will be reduced as the removes occur)\n\t\t\tCollection cachedKeys = m_refs.get(ref);\n\t\t\tfor (Iterator iKeys = cachedKeys.iterator(); iKeys.hasNext();)\n\t\t\t{\n\t\t\t\t\tremove(iKeys.next()); // evict primary authz cache\n\t\t\t}\n\t\t}\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void notifyRemoveAll(Ehcache cache) \n\t{\n\t\tif (M_log.isDebugEnabled())\n\t\t\tM_log.debug(\"notifyRemoveAll(Ehcache \" + cache + \")\");\n\t\t\n\t\tmref_cache.removeAll();\n\t\tmref_cache.getStatistics().clearStatistics();\n\t}","id":70294,"modified_method":"public void notifyRemoveAll(Ehcache cache) \n\t{\n\t\tif (M_log.isDebugEnabled())\n\t\t\tM_log.debug(\"notifyRemoveAll(Ehcache \" + cache + \")\");\n\t\t\n\t\tm_refs.clear();\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Construct the Cache - checks for expiration periodically.\n\t * @deprecated long sleep no longer used with ehcache\n\t */\n\tpublic MultiRefCacheImpl(BasicMemoryService memoryService,\n\t\t\tEventTrackingService eventTrackingService, long sleep, Ehcache cache,\n\t\t\tEhcache mrefCache)\n\t{\n\t\tsuper(memoryService, eventTrackingService, sleep, \"\", cache);\n\t\tcache.getCacheEventNotificationService().registerListener(this);\n\t\t\n\t\tif (mrefCache == null || !mrefCache.isEternal())\n\t\t\tthrow new IllegalStateException(\"mref_cache must be eternal!\");\n\t\tthis.mref_cache = mrefCache;\n\t}","id":70295,"modified_method":"/**\n\t * Construct the Cache - checks for expiration periodically.\n\t * @deprecated long sleep no longer used with ehcache\n\t */\n\tpublic MultiRefCacheImpl(BasicMemoryService memoryService,\n\t\t\tEventTrackingService eventTrackingService, long sleep, Ehcache cache)\n\t{\n\t\tsuper(memoryService, eventTrackingService, sleep, \"\", cache);\n\t\tcache.getCacheEventNotificationService().registerListener(this);\n\t\t\n\t}","commit_id":"a861835301e09b96c8a7f80566f6b9fb337327a0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Test\n    public void renewLease() throws InterruptedException {\n        MemoryDocumentStore mem = new MemoryDocumentStore();\n        Clock clock = new Clock.Virtual();\n        clock.waitUntil(System.currentTimeMillis());\n        ClusterNodeInfo.setClock(clock);\n\n        DocumentNodeStore ns = new DocumentMK.Builder().\n                setDocumentStore(mem).\n                setAsyncDelay(0).\n                getNodeStore();\n\n        ClusterNodeInfo info = ns.getClusterInfo();\n        assertNotNull(info);\n\n        // current lease end\n        long leaseEnd = getLeaseEndTime(ns);\n\n        // wait a bit, but not more than half of the lease time\n        clock.waitUntil(clock.getTime() + (ns.getClusterInfo().getLeaseTime() / 2) - 1000);\n\n        // must not renew lease right now\n        ns.renewClusterIdLease();\n        assertEquals(leaseEnd, getLeaseEndTime(ns));\n\n        // wait some more time\n        clock.waitUntil(clock.getTime() + 2000);\n\n        // now the lease must be renewed\n        ns.renewClusterIdLease();\n        assertTrue(getLeaseEndTime(ns) > leaseEnd);\n\n        ns.dispose();\n    }","id":70296,"modified_method":"@Test\n    public void renewLease() throws InterruptedException {\n        MemoryDocumentStore mem = new MemoryDocumentStore();\n        Clock clock = new Clock.Virtual();\n        clock.waitUntil(System.currentTimeMillis());\n        ClusterNodeInfo.setClock(clock);\n\n        DocumentNodeStore ns = new DocumentMK.Builder().\n                setDocumentStore(mem).\n                setAsyncDelay(0).\n                setLeaseCheck(false).\n                getNodeStore();\n\n        ClusterNodeInfo info = ns.getClusterInfo();\n        assertNotNull(info);\n\n        // current lease end\n        long leaseEnd = getLeaseEndTime(ns);\n\n        // wait a bit, but not more than half of the lease time\n        clock.waitUntil(clock.getTime() + (ns.getClusterInfo().getLeaseTime() / 2) - 1000);\n\n        // must not renew lease right now\n        ns.renewClusterIdLease();\n        assertEquals(leaseEnd, getLeaseEndTime(ns));\n\n        // wait some more time\n        clock.waitUntil(clock.getTime() + 2000);\n\n        // now the lease must be renewed\n        ns.renewClusterIdLease();\n        assertTrue(getLeaseEndTime(ns) > leaseEnd);\n\n        ns.dispose();\n    }","commit_id":"a7955a74562f13fb91be57f784e587658a04e773","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void readWriteMode() throws InterruptedException {\n\n        MemoryDocumentStore mem = new MemoryDocumentStore();\n        Clock clock = new Clock.Virtual();\n        clock.waitUntil(System.currentTimeMillis());\n        ClusterNodeInfo.setClock(clock);\n\n        DocumentNodeStore ns1 = new DocumentMK.Builder().\n                setDocumentStore(mem).\n                setAsyncDelay(0).\n                getNodeStore();\n        DocumentNodeStore ns2 = new DocumentMK.Builder().\n                setDocumentStore(mem).\n                setAsyncDelay(0).\n                getNodeStore();\n        // Bring the current time forward to after the leaseTime which would have been \n        // updated in the DocumentNodeStore initialization.\n        clock.waitUntil(clock.getTime() + ns1.getClusterInfo().getLeaseTime());\n\n        ns1.getClusterInfo().setLeaseTime(0);\n        ns2.getClusterInfo().setLeaseTime(0);\n\n        List<ClusterNodeInfoDocument> list = mem.query(\n                Collection.CLUSTER_NODES, \"0\", \"a\", Integer.MAX_VALUE);\n        assertEquals(2, list.size());\n\n        assertNull(mem.getReadPreference());\n        assertNull(mem.getWriteConcern());\n        mem.setReadWriteMode(\"read:primary, write:majority\");\n        assertEquals(ReadPreference.primary(), mem.getReadPreference());\n        assertEquals(WriteConcern.MAJORITY, mem.getWriteConcern());\n\n        UpdateOp op;\n\n        // unknown modes: ignore\n        op = new UpdateOp(list.get(0).getId(), false);\n        op.set(\"readWriteMode\", \"read:xyz, write:abc\");\n        mem.findAndUpdate(Collection.CLUSTER_NODES, op);\n        ns1.renewClusterIdLease();\n        assertEquals(ReadPreference.primary(), mem.getReadPreference());\n        assertEquals(WriteConcern.MAJORITY, mem.getWriteConcern());\n\n        op = new UpdateOp(list.get(0).getId(), false);\n        op.set(\"readWriteMode\", \"read:nearest, write:fsynced\");\n        mem.findAndUpdate(Collection.CLUSTER_NODES, op);\n        ns1.renewClusterIdLease();\n        assertEquals(ReadPreference.nearest(), mem.getReadPreference());\n        assertEquals(WriteConcern.FSYNCED, mem.getWriteConcern());\n\n        ns1.dispose();\n        ns2.dispose();\n    }","id":70297,"modified_method":"@Test\n    public void readWriteMode() throws InterruptedException {\n\n        MemoryDocumentStore mem = new MemoryDocumentStore();\n        Clock clock = new Clock.Virtual();\n        clock.waitUntil(System.currentTimeMillis());\n        ClusterNodeInfo.setClock(clock);\n\n        DocumentNodeStore ns1 = new DocumentMK.Builder().\n                setDocumentStore(mem).\n                setAsyncDelay(0).\n                setLeaseCheck(false).\n                getNodeStore();\n        DocumentNodeStore ns2 = new DocumentMK.Builder().\n                setDocumentStore(mem).\n                setAsyncDelay(0).\n                setLeaseCheck(false).\n                getNodeStore();\n        // Bring the current time forward to after the leaseTime which would have been \n        // updated in the DocumentNodeStore initialization.\n        clock.waitUntil(clock.getTime() + ns1.getClusterInfo().getLeaseTime());\n\n        ns1.getClusterInfo().setLeaseTime(0);\n        ns2.getClusterInfo().setLeaseTime(0);\n\n        List<ClusterNodeInfoDocument> list = mem.query(\n                Collection.CLUSTER_NODES, \"0\", \"a\", Integer.MAX_VALUE);\n        assertEquals(2, list.size());\n\n        assertNull(mem.getReadPreference());\n        assertNull(mem.getWriteConcern());\n        mem.setReadWriteMode(\"read:primary, write:majority\");\n        assertEquals(ReadPreference.primary(), mem.getReadPreference());\n        assertEquals(WriteConcern.MAJORITY, mem.getWriteConcern());\n\n        UpdateOp op;\n\n        // unknown modes: ignore\n        op = new UpdateOp(list.get(0).getId(), false);\n        op.set(\"readWriteMode\", \"read:xyz, write:abc\");\n        mem.findAndUpdate(Collection.CLUSTER_NODES, op);\n        ns1.renewClusterIdLease();\n        assertEquals(ReadPreference.primary(), mem.getReadPreference());\n        assertEquals(WriteConcern.MAJORITY, mem.getWriteConcern());\n\n        op = new UpdateOp(list.get(0).getId(), false);\n        op.set(\"readWriteMode\", \"read:nearest, write:fsynced\");\n        mem.findAndUpdate(Collection.CLUSTER_NODES, op);\n        ns1.renewClusterIdLease();\n        assertEquals(ReadPreference.nearest(), mem.getReadPreference());\n        assertEquals(WriteConcern.FSYNCED, mem.getWriteConcern());\n\n        ns1.dispose();\n        ns2.dispose();\n    }","commit_id":"a7955a74562f13fb91be57f784e587658a04e773","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private static DocumentNodeStore createNS(int clusterId) throws Exception {\n        MongoConnection mc = MongoUtils.getConnection();\n        return new DocumentMK.Builder()\n                          .setMongoDB(mc.getDB())\n                          .setClusterId(clusterId)\n                          //Set delay to 0 so that effect of changes are immediately reflected\n                          .setAsyncDelay(0) \n                          .getNodeStore();\n    }","id":70298,"modified_method":"private static DocumentNodeStore createNS(int clusterId) throws Exception {\n        MongoConnection mc = MongoUtils.getConnection();\n        return new DocumentMK.Builder()\n                          .setMongoDB(mc.getDB())\n                          .setClusterId(clusterId)\n                          //Set delay to 0 so that effect of changes are immediately reflected\n                          .setAsyncDelay(0) \n                          .setLeaseCheck(false)\n                          .getNodeStore();\n    }","commit_id":"9935d3886eabc3c432cd16873c0902645de8517a","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Before\n    public void prepareStores() throws Exception {\n        clock = new Clock.Virtual();\n        replicationLag = TimeUnit.SECONDS.toMillis(10);\n        MongoConnection mc = MongoUtils.getConnection();\n        documentNodeStore = new DocumentMK.Builder()\n                .setMaxReplicationLag(replicationLag, TimeUnit.MILLISECONDS)\n                .setMongoDB(mc.getDB())\n                .setClusterId(1)\n                .getNodeStore();\n        mongoDS = (MongoDocumentStore) documentNodeStore.getDocumentStore();\n        nodeStore = documentNodeStore;\n    }","id":70299,"modified_method":"@Before\n    public void prepareStores() throws Exception {\n        clock = new Clock.Virtual();\n        replicationLag = TimeUnit.SECONDS.toMillis(10);\n        MongoConnection mc = MongoUtils.getConnection();\n        documentNodeStore = new DocumentMK.Builder()\n                .setMaxReplicationLag(replicationLag, TimeUnit.MILLISECONDS)\n                .setMongoDB(mc.getDB())\n                .setClusterId(1)\n                .setLeaseCheck(false)\n                .getNodeStore();\n        mongoDS = (MongoDocumentStore) documentNodeStore.getDocumentStore();\n        nodeStore = documentNodeStore;\n    }","commit_id":"9935d3886eabc3c432cd16873c0902645de8517a","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Nullable BaseInspectionVisitor buildGroovyVisitor(@NotNull ProblemsHolder problemsHolder, boolean onTheFly) {\n    final BaseInspectionVisitor visitor = buildVisitor();\n    visitor.setProblemsHolder(problemsHolder);\n    visitor.setOnTheFly(onTheFly);\n    visitor.setInspection(this);\n    return visitor;\n  }","id":70300,"modified_method":"@NotNull\n  protected BaseInspectionVisitor buildGroovyVisitor(@NotNull ProblemsHolder problemsHolder, boolean onTheFly) {\n    final BaseInspectionVisitor visitor = buildVisitor();\n    visitor.setProblemsHolder(problemsHolder);\n    visitor.setOnTheFly(onTheFly);\n    visitor.setInspection(this);\n    return visitor;\n  }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public ProblemDescriptor[] checkFile(@NotNull PsiFile psiFile, @NotNull InspectionManager inspectionManager, boolean isOnTheFly) {\n    if (!(psiFile instanceof GroovyFileBase)) {\n      return super.checkFile(psiFile, inspectionManager, isOnTheFly);\n    }\n    final GroovyFileBase groovyFile = (GroovyFileBase) psiFile;\n\n    final ProblemsHolder problemsHolder = new ProblemsHolder(inspectionManager, psiFile, isOnTheFly);\n    final BaseInspectionVisitor visitor = buildGroovyVisitor(problemsHolder, isOnTheFly);\n    groovyFile.accept(visitor);\n    final List<ProblemDescriptor> problems = problemsHolder.getResults();\n    return problems.toArray(new ProblemDescriptor[problems.size()]);\n\n  }","id":70301,"modified_method":"@Nullable\n  public ProblemDescriptor[] checkFile(@NotNull PsiFile psiFile, @NotNull InspectionManager inspectionManager, boolean isOnTheFly) {\n    if (!(psiFile instanceof GroovyFileBase)) {\n      return super.checkFile(psiFile, inspectionManager, isOnTheFly);\n    }\n    final GroovyFileBase groovyFile = (GroovyFileBase) psiFile;\n\n    final ProblemsHolder problemsHolder = new ProblemsHolder(inspectionManager, psiFile, isOnTheFly);\n    final BaseInspectionVisitor visitor = buildGroovyVisitor(problemsHolder, isOnTheFly);\n    groovyFile.accept(visitor);\n    return problemsHolder.getResultsArray();\n\n  }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void registerMethodCallError(GrMethodCallExpression method, Object... args) {\n    if (method == null) {\n      return;\n    }\n    final LocalQuickFix[] fix = createFixes(method);\n    final String description = inspection.buildErrorString(args);\n    registerError(((GrReferenceExpression) method.getInvokedExpression()).getReferenceNameElement(), description, fix,\n                  ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n  }","id":70302,"modified_method":"protected void registerMethodCallError(GrMethodCallExpression method, Object... args) {\n    if (method == null) {\n      return;\n    }\n    final LocalQuickFix[] fixes = createFixes(method);\n    final String description = StringUtil.notNullize(inspection.buildErrorString(args));\n\n    final GrExpression invoked = method.getInvokedExpression();\n    assert invoked != null;\n    final PsiElement nameElement = ((GrReferenceExpression)invoked).getReferenceNameElement();\n    assert nameElement != null;\n    registerError(nameElement, description, fixes, ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n  }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void registerVariableError(GrVariable variable, Object... args) {\n    if (variable == null) {\n      return;\n    }\n    final LocalQuickFix[] fix = createFixes(variable);\n    final String description = inspection.buildErrorString(args);\n    registerError(variable.getNameIdentifierGroovy(), description, fix, ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n  }","id":70303,"modified_method":"protected void registerVariableError(GrVariable variable, Object... args) {\n    if (variable == null) {\n      return;\n    }\n    final LocalQuickFix[] fix = createFixes(variable);\n    final String description = StringUtil.notNullize(inspection.buildErrorString(args));\n    registerError(variable.getNameIdentifierGroovy(), description, fix, ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n  }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void registerMethodError(GrMethod method, Object... args) {\n    if (method == null) {\n      return;\n    }\n    final LocalQuickFix[] fix = createFixes(method);\n    final String description = inspection.buildErrorString(args);\n    registerError(method.getNameIdentifierGroovy(), description, fix, ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n  }","id":70304,"modified_method":"protected void registerMethodError(GrMethod method, Object... args) {\n    if (method == null) {\n      return;\n    }\n    final LocalQuickFix[] fixes = createFixes(method);\n    String description = StringUtil.notNullize(inspection.buildErrorString(args));\n\n    registerError(method.getNameIdentifierGroovy(), description, fixes, ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n  }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void registerError(PsiElement location) {\n    if (location == null) {\n      return;\n    }\n    final LocalQuickFix[] fix = createFixes(location);\n    final String description = inspection.buildErrorString(location);\n    registerError(location, description, fix, ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n  }","id":70305,"modified_method":"protected void registerError(PsiElement location) {\n    if (location == null) {\n      return;\n    }\n    final LocalQuickFix[] fix = createFixes(location);\n    String description = StringUtil.notNullize(inspection.buildErrorString(location));\n\n    registerError(location, description, fix, ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n  }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public ProblemDescriptor[] getErrors() {\n    if (errors == null) {\n      return null;\n    } else {\n      final int numErrors = errors.size();\n      return errors.toArray(new ProblemDescriptor[numErrors]);\n    }\n  }","id":70306,"modified_method":"public int getErrorCount() {\n    return problemsHolder.getResultCount();\n  }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void registerError(@NotNull PsiElement location,\n                               ProblemHighlightType highlightType,\n                               Object... args) {\n    final LocalQuickFix[] fix = createFixes(location);\n    final String description = inspection.buildErrorString(args);\n    registerError(location, description, fix, highlightType);\n  }","id":70307,"modified_method":"protected void registerError(@NotNull PsiElement location,\n                               ProblemHighlightType highlightType,\n                               Object... args) {\n    final LocalQuickFix[] fix = createFixes(location);\n    final String description = StringUtil.notNullize(inspection.buildErrorString(args));\n    registerError(location, description, fix, highlightType);\n  }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitExpression(GrExpression expression) {\n      super.visitExpression(expression);\n      if (PsiUtil.isExpressionStatement(expression)) {\n        final PsiType returnType = PsiImplUtil.inferReturnType(expression);\n        final GrControlFlowOwner flowOwner = ControlFlowUtils.findControlFlowOwner(expression);\n        if (flowOwner != null && returnType != null && returnType != PsiType.VOID) {\n          if (ControlFlowUtils.isReturnValue(expression, flowOwner) && !isNewInstanceInitialingByTuple(expression)) {\n            checkAssignability(returnType, expression);\n          }\n        }\n      }\n    }","id":70308,"modified_method":"protected boolean shouldProcess(GrMember member) {\n      return !GroovyPsiManager.getInstance(member.getProject()).isCompileStatic(member);\n    }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isListAssignment(GrExpression lValue) {\n    if (lValue instanceof GrReferenceExpression) {\n      GrReferenceExpression expression = (GrReferenceExpression)lValue;\n      final PsiElement dot = expression.getDotToken();\n      //noinspection ConstantConditions\n      if (dot != null && dot.getNode().getElementType() == GroovyTokenTypes.mSPREAD_DOT) {\n        return true;\n      }\n      else {\n        final GrExpression qualifier = expression.getQualifierExpression();\n        if (qualifier != null) return isListAssignment(qualifier);\n      }\n    }\n    return false;\n  }","id":70309,"modified_method":"@Override\n    protected boolean shouldProcess(GrMember member) {\n      return true;\n    }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitMethodCallExpression(GrMethodCallExpression methodCallExpression) {\n      super.visitMethodCallExpression(methodCallExpression);\n      checkMethodCall(methodCallExpression);\n    }","id":70310,"modified_method":"@Override\n    public void visitMethodCallExpression(GrMethodCallExpression methodCallExpression) {\n      super.visitMethodCallExpression(methodCallExpression);\n      checkMethodCall(methodCallExpression, methodCallExpression.getInvokedExpression());\n    }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitApplicationStatement(GrApplicationStatement applicationStatement) {\n      super.visitApplicationStatement(applicationStatement);\n      checkMethodCall(applicationStatement);\n    }","id":70311,"modified_method":"@Override\n    public void visitApplicationStatement(GrApplicationStatement applicationStatement) {\n      super.visitApplicationStatement(applicationStatement);\n      checkMethodCall(applicationStatement, applicationStatement.getInvokedExpression());\n    }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void checkMethodCall(GrMethodCall call) {\n      if (hasErrorElements(call.getArgumentList())) return;\n\n      final GrExpression expression = call.getInvokedExpression();\n      if (!(expression instanceof GrReferenceExpression)) { //it checks in visitRefExpr(...)\n        final PsiType type = expression.getType();\n        checkCallApplicability(type, expression, true);\n      }\n\n      checkNamedArgumentsType(call);\n    }","id":70312,"modified_method":"private void checkMethodCall(GrCall call, GrExpression invoked) {\n      if (hasErrorElements(call.getArgumentList())) return;\n\n      if (invoked instanceof GrReferenceExpression) {\n        final GrReferenceExpression referenceExpression = (GrReferenceExpression)invoked;\n        GroovyResolveResult resolveResult = call.advancedResolve();\n        GroovyResolveResult[] results = call.multiResolve(false); //cached\n\n        PsiElement resolved = resolveResult.getElement();\n        if (resolved == null) {\n          GrExpression qualifier = referenceExpression.getQualifierExpression();\n          if (qualifier == null && GrHighlightUtil.isDeclarationAssignment(referenceExpression)) return;\n        }\n\n        if (!checkCannotInferArgumentTypes(referenceExpression)) return;\n\n        final PsiType type = referenceExpression.getType();\n        if (resolved != null) {\n          if (resolved instanceof PsiMethod && !resolveResult.isInvokedOnProperty()) {\n            checkMethodApplicability(resolveResult, referenceExpression, true);\n          }\n          else {\n            checkCallApplicability(type, referenceExpression, true);\n          }\n        }\n        else if (results.length > 0) {\n          for (GroovyResolveResult result : results) {\n            resolved = result.getElement();\n            if (resolved instanceof PsiMethod && !resolveResult.isInvokedOnProperty()) {\n              if (!checkMethodApplicability(result, referenceExpression, false)) return;\n            }\n            else {\n              if (!checkCallApplicability(type, referenceExpression, false)) return;\n            }\n          }\n\n          registerError(getElementToHighlight(referenceExpression, PsiUtil.getArgumentsList(referenceExpression)),\n                        GroovyBundle.message(\"method.call.is.ambiguous\"));\n        }\n      }\n      else if (invoked != null) { //it checks in visitRefExpr(...)\n        final PsiType type = invoked.getType();\n        checkCallApplicability(type, invoked, true);\n      }\n\n      checkNamedArgumentsType(call);\n    }","commit_id":"da3dc03b35b5944e399e998537c3eefde56b0d1c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/** convert a column to a tuple */\n    protected Tuple columnToTuple(Column col, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        Tuple pair = TupleFactory.getInstance().newTuple(2);\n\n        // name\n        if(comparator instanceof AbstractCompositeType)\n            setTupleValue(pair, 0, composeComposite((AbstractCompositeType)comparator,col.name()));\n        else\n            setTupleValue(pair, 0, comparator.compose(col.name()));\n\n        // value\n        Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n        if (validators.get(col.name()) == null)\n        {\n            Map<MarshallerType, AbstractType> marshallers = getDefaultMarshallers(cfDef);\n            setTupleValue(pair, 1, marshallers.get(MarshallerType.DEFAULT_VALIDATOR).compose(col.value()));\n        }\n        else\n            setTupleValue(pair, 1, validators.get(col.name()).compose(col.value()));\n        return pair;\n    }","id":70313,"modified_method":"/** convert a column to a tuple */\n    protected Tuple columnToTuple(Column col, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        Tuple pair = TupleFactory.getInstance().newTuple(2);\n\n        // name\n        if(comparator instanceof AbstractCompositeType)\n            setTupleValue(pair, 0, composeComposite((AbstractCompositeType)comparator,col.name()));\n        else\n            setTupleValue(pair, 0, cassandraToObj(comparator, col.name()));\n\n        // value\n        if (validators.get(col.name()) == null)\n        {\n            Map<MarshallerType, AbstractType> marshallers = getDefaultMarshallers(cfDef);\n            setTupleValue(pair, 1, cassandraToObj(marshallers.get(MarshallerType.DEFAULT_VALIDATOR), col.value()));\n        }\n        else\n            setTupleValue(pair, 1, cassandraToObj(validators.get(col.name()), col.value()));\n        return pair;\n    }","commit_id":"538039a7001a4db0ff87dafbfe0be2877310b14f","url":"https://github.com/apache/cassandra"},{"original_method":"/** Deconstructs a composite type to a Tuple. */\n    protected Tuple composeComposite(AbstractCompositeType comparator, ByteBuffer name) throws IOException\n    {\n        List<CompositeComponent> result = comparator.deconstruct(name);\n        Tuple t = TupleFactory.getInstance().newTuple(result.size());\n        for (int i=0; i<result.size(); i++)\n            setTupleValue(t, i, result.get(i).comparator.compose(result.get(i).value));\n\n        return t;\n    }","id":70314,"modified_method":"/** Deconstructs a composite type to a Tuple. */\n    protected Tuple composeComposite(AbstractCompositeType comparator, ByteBuffer name) throws IOException\n    {\n        List<CompositeComponent> result = comparator.deconstruct(name);\n        Tuple t = TupleFactory.getInstance().newTuple(result.size());\n        for (int i=0; i<result.size(); i++)\n            setTupleValue(t, i, cassandraToObj(result.get(i).comparator, result.get(i).value));\n\n        return t;\n    }","commit_id":"538039a7001a4db0ff87dafbfe0be2877310b14f","url":"https://github.com/apache/cassandra"},{"original_method":"/** get pig type for the cassandra data type*/\n    protected byte getPigType(AbstractType type)\n    {\n        if (type instanceof LongType || type instanceof DateType || type instanceof TimestampType) // DateType is bad and it should feel bad\n            return DataType.LONG;\n        else if (type instanceof IntegerType || type instanceof Int32Type) // IntegerType will overflow at 2**31, but is kept for compatibility until pig has a BigInteger\n            return DataType.INTEGER;\n        else if (type instanceof AsciiType)\n            return DataType.CHARARRAY;\n        else if (type instanceof UTF8Type)\n            return DataType.CHARARRAY;\n        else if (type instanceof FloatType)\n            return DataType.FLOAT;\n        else if (type instanceof DoubleType)\n            return DataType.DOUBLE;\n        else if (type instanceof AbstractCompositeType || type instanceof CollectionType)\n            return DataType.TUPLE;\n\n        return DataType.BYTEARRAY;\n    }","id":70315,"modified_method":"/** get pig type for the cassandra data type*/\n    protected byte getPigType(AbstractType type)\n    {\n        if (type instanceof LongType || type instanceof DateType || type instanceof TimestampType) // DateType is bad and it should feel bad\n            return DataType.LONG;\n        else if (type instanceof IntegerType || type instanceof Int32Type) // IntegerType will overflow at 2**31, but is kept for compatibility until pig has a BigInteger\n            return DataType.INTEGER;\n        else if (type instanceof AsciiType || \n                type instanceof UTF8Type ||\n                type instanceof DecimalType ||\n                type instanceof InetAddressType ||\n                type instanceof LexicalUUIDType ||\n                type instanceof UUIDType )\n            return DataType.CHARARRAY;\n        else if (type instanceof FloatType)\n            return DataType.FLOAT;\n        else if (type instanceof DoubleType)\n            return DataType.DOUBLE;\n        else if (type instanceof AbstractCompositeType || type instanceof CollectionType)\n            return DataType.TUPLE;\n\n        return DataType.BYTEARRAY;\n    }","commit_id":"538039a7001a4db0ff87dafbfe0be2877310b14f","url":"https://github.com/apache/cassandra"},{"original_method":"/** add key to a tuple */\n    private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        if( comparator instanceof AbstractCompositeType )\n        {\n            setTupleValue(tuple, 0, composeComposite((AbstractCompositeType)comparator,key));\n        }\n        else\n        {\n            setTupleValue(tuple, 0, getDefaultMarshallers(cfDef).get(MarshallerType.KEY_VALIDATOR).compose(key));\n        }\n\n    }","id":70316,"modified_method":"/** add key to a tuple */\n    private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        if( comparator instanceof AbstractCompositeType )\n        {\n            setTupleValue(tuple, 0, composeComposite((AbstractCompositeType)comparator,key));\n        }\n        else\n        {\n            setTupleValue(tuple, 0, cassandraToObj(getDefaultMarshallers(cfDef).get(MarshallerType.KEY_VALIDATOR), key));\n        }\n\n    }","commit_id":"538039a7001a4db0ff87dafbfe0be2877310b14f","url":"https://github.com/apache/cassandra"},{"original_method":"/** convert a cql column to an object */\n    private Object cqlColumnToObj(Column col, CfDef cfDef) throws IOException\n    {\n        // standard\n        Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n        if (validators.get(col.name()) == null)\n        {\n            Map<MarshallerType, AbstractType> marshallers = getDefaultMarshallers(cfDef);\n            return marshallers.get(MarshallerType.DEFAULT_VALIDATOR).compose(col.value());\n        }\n        else\n            return validators.get(col.name()).compose(col.value());\n    }","id":70317,"modified_method":"/** convert a cql column to an object */\n    private Object cqlColumnToObj(Column col, CfDef cfDef) throws IOException\n    {\n        // standard\n        Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n        if (validators.get(col.name()) == null)\n            return cassandraToObj(getDefaultMarshallers(cfDef).get(MarshallerType.DEFAULT_VALIDATOR), col.value());\n        else\n            return cassandraToObj(validators.get(col.name()), col.value());\n    }","commit_id":"538039a7001a4db0ff87dafbfe0be2877310b14f","url":"https://github.com/apache/cassandra"},{"original_method":"/** get pig type for the cassandra data type*/\n    protected byte getPigType(AbstractType type)\n    {\n        if (type instanceof LongType || type instanceof DateType) // DateType is bad and it should feel bad\n            return DataType.LONG;\n        else if (type instanceof IntegerType || type instanceof Int32Type) // IntegerType will overflow at 2**31, but is kept for compatibility until pig has a BigInteger\n            return DataType.INTEGER;\n        else if (type instanceof AsciiType)\n            return DataType.CHARARRAY;\n        else if (type instanceof UTF8Type)\n            return DataType.CHARARRAY;\n        else if (type instanceof FloatType)\n            return DataType.FLOAT;\n        else if (type instanceof DoubleType)\n            return DataType.DOUBLE;\n        else if (type instanceof AbstractCompositeType || type instanceof CollectionType)\n            return DataType.TUPLE;\n\n        return DataType.BYTEARRAY;\n    }","id":70318,"modified_method":"/** get pig type for the cassandra data type*/\n    protected byte getPigType(AbstractType type)\n    {\n        if (type instanceof LongType || type instanceof DateType) // DateType is bad and it should feel bad\n            return DataType.LONG;\n        else if (type instanceof IntegerType || type instanceof Int32Type) // IntegerType will overflow at 2**31, but is kept for compatibility until pig has a BigInteger\n            return DataType.INTEGER;\n        else if (type instanceof AsciiType || \n                type instanceof UTF8Type ||\n                type instanceof DecimalType ||\n                type instanceof InetAddressType ||\n                type instanceof LexicalUUIDType ||\n                type instanceof UUIDType )\n            return DataType.CHARARRAY;\n        else if (type instanceof FloatType)\n            return DataType.FLOAT;\n        else if (type instanceof DoubleType)\n            return DataType.DOUBLE;\n        else if (type instanceof AbstractCompositeType || type instanceof CollectionType)\n            return DataType.TUPLE;\n\n        return DataType.BYTEARRAY;\n    }","commit_id":"3633aea42d7689fa0252c104f62b0646d0858624","url":"https://github.com/apache/cassandra"},{"original_method":"/** convert a column to a tuple */\n    protected Tuple columnToTuple(IColumn col, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        Tuple pair = TupleFactory.getInstance().newTuple(2);\n\n        // name\n        if(comparator instanceof AbstractCompositeType)\n            setTupleValue(pair, 0, composeComposite((AbstractCompositeType)comparator,col.name()));\n        else\n            setTupleValue(pair, 0, comparator.compose(col.name()));\n\n        // value\n        if (col instanceof Column)\n        {\n            // standard\n            Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n            if (validators.get(col.name()) == null)\n            {\n                Map<MarshallerType, AbstractType> marshallers = getDefaultMarshallers(cfDef);\n                setTupleValue(pair, 1, marshallers.get(MarshallerType.DEFAULT_VALIDATOR).compose(col.value()));\n            }\n            else\n                setTupleValue(pair, 1, validators.get(col.name()).compose(col.value()));\n            return pair;\n        }\n        else\n        {\n            // super\n            ArrayList<Tuple> subcols = new ArrayList<Tuple>();\n            for (IColumn subcol : col.getSubColumns())\n                subcols.add(columnToTuple(subcol, cfDef, parseType(cfDef.getSubcomparator_type())));\n\n            pair.set(1, new DefaultDataBag(subcols));\n        }\n        return pair;\n    }","id":70319,"modified_method":"/** convert a column to a tuple */\n    protected Tuple columnToTuple(IColumn col, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        Tuple pair = TupleFactory.getInstance().newTuple(2);\n\n        // name\n        if(comparator instanceof AbstractCompositeType)\n            setTupleValue(pair, 0, composeComposite((AbstractCompositeType)comparator,col.name()));\n        else\n            setTupleValue(pair, 0, cassandraToObj(comparator, col.name()));\n\n        // value\n        if (col instanceof Column)\n        {\n            // standard\n            Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n            if (validators.get(col.name()) == null)\n            {\n                Map<MarshallerType, AbstractType> marshallers = getDefaultMarshallers(cfDef);\n                setTupleValue(pair, 1, cassandraToObj(marshallers.get(MarshallerType.DEFAULT_VALIDATOR), col.value()));\n            }\n            else\n                setTupleValue(pair, 1, cassandraToObj(validators.get(col.name()), col.value()));\n            return pair;\n        }\n        else\n        {\n            // super\n            ArrayList<Tuple> subcols = new ArrayList<Tuple>();\n            for (IColumn subcol : col.getSubColumns())\n                subcols.add(columnToTuple(subcol, cfDef, parseType(cfDef.getSubcomparator_type())));\n\n            pair.set(1, new DefaultDataBag(subcols));\n        }\n        return pair;\n    }","commit_id":"3633aea42d7689fa0252c104f62b0646d0858624","url":"https://github.com/apache/cassandra"},{"original_method":"/** Deconstructs a composite type to a Tuple. */\n    protected Tuple composeComposite(AbstractCompositeType comparator, ByteBuffer name) throws IOException\n    {\n        List<CompositeComponent> result = comparator.deconstruct(name);\n        Tuple t = TupleFactory.getInstance().newTuple(result.size());\n        for (int i=0; i<result.size(); i++)\n            setTupleValue(t, i, result.get(i).comparator.compose(result.get(i).value));\n\n        return t;\n    }","id":70320,"modified_method":"/** Deconstructs a composite type to a Tuple. */\n    protected Tuple composeComposite(AbstractCompositeType comparator, ByteBuffer name) throws IOException\n    {\n        List<CompositeComponent> result = comparator.deconstruct(name);\n        Tuple t = TupleFactory.getInstance().newTuple(result.size());\n        for (int i=0; i<result.size(); i++)\n            setTupleValue(t, i, cassandraToObj(result.get(i).comparator, result.get(i).value));\n\n        return t;\n    }","commit_id":"3633aea42d7689fa0252c104f62b0646d0858624","url":"https://github.com/apache/cassandra"},{"original_method":"/** add key to a tuple */\n    private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        if( comparator instanceof AbstractCompositeType )\n        {\n            setTupleValue(tuple, 0, composeComposite((AbstractCompositeType)comparator,key));\n        }\n        else\n        {\n            setTupleValue(tuple, 0, getDefaultMarshallers(cfDef).get(MarshallerType.KEY_VALIDATOR).compose(key));\n        }\n\n    }","id":70321,"modified_method":"/** add key to a tuple */\n    private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        if( comparator instanceof AbstractCompositeType )\n        {\n            setTupleValue(tuple, 0, composeComposite((AbstractCompositeType)comparator,key));\n        }\n        else\n        {\n            setTupleValue(tuple, 0, cassandraToObj(getDefaultMarshallers(cfDef).get(MarshallerType.KEY_VALIDATOR), key));\n        }\n\n    }","commit_id":"3633aea42d7689fa0252c104f62b0646d0858624","url":"https://github.com/apache/cassandra"},{"original_method":"/** convert a cql column to an object */\n    private Object cqlColumnToObj(IColumn col, CfDef cfDef) throws IOException\n    {\n        // standard\n        Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n        if (validators.get(col.name()) == null)\n        {\n            Map<MarshallerType, AbstractType> marshallers = getDefaultMarshallers(cfDef);\n            return marshallers.get(MarshallerType.DEFAULT_VALIDATOR).compose(col.value());\n        }\n        else\n            return validators.get(col.name()).compose(col.value());\n    }","id":70322,"modified_method":"/** convert a cql column to an object */\n    private Object cqlColumnToObj(IColumn col, CfDef cfDef) throws IOException\n    {\n        // standard\n        Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n        if (validators.get(col.name()) == null)\n            return cassandraToObj(getDefaultMarshallers(cfDef).get(MarshallerType.DEFAULT_VALIDATOR), col.value());\n        else\n            return cassandraToObj(validators.get(col.name()), col.value());\n    }","commit_id":"3633aea42d7689fa0252c104f62b0646d0858624","url":"https://github.com/apache/cassandra"},{"original_method":"/** Deconstructs a composite type to a Tuple. */\n    protected Tuple composeComposite(AbstractCompositeType comparator, ByteBuffer name) throws IOException\n    {\n        List<CompositeComponent> result = comparator.deconstruct(name);\n        Tuple t = TupleFactory.getInstance().newTuple(result.size());\n        for (int i=0; i<result.size(); i++)\n            setTupleValue(t, i, result.get(i).comparator.compose(result.get(i).value));\n\n        return t;\n    }","id":70323,"modified_method":"/** Deconstructs a composite type to a Tuple. */\n    protected Tuple composeComposite(AbstractCompositeType comparator, ByteBuffer name) throws IOException\n    {\n        List<CompositeComponent> result = comparator.deconstruct(name);\n        Tuple t = TupleFactory.getInstance().newTuple(result.size());\n        for (int i=0; i<result.size(); i++)\n            setTupleValue(t, i, cassandraToObj(result.get(i).comparator, result.get(i).value));\n\n        return t;\n    }","commit_id":"bdb7bb16facda0fbe266390bd3213f092d02c0dc","url":"https://github.com/apache/cassandra"},{"original_method":"/** convert a column to a tuple */\n    protected Tuple columnToTuple(IColumn col, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        Tuple pair = TupleFactory.getInstance().newTuple(2);\n\n        // name\n        if(comparator instanceof AbstractCompositeType)\n            setTupleValue(pair, 0, composeComposite((AbstractCompositeType)comparator,col.name()));\n        else\n            setTupleValue(pair, 0, comparator.compose(col.name()));\n\n        // value\n        if (col instanceof Column)\n        {\n            // standard\n            Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n            if (validators.get(col.name()) == null)\n            {\n                Map<MarshallerType, AbstractType> marshallers = getDefaultMarshallers(cfDef);\n                setTupleValue(pair, 1, marshallers.get(MarshallerType.DEFAULT_VALIDATOR).compose(col.value()));\n            }\n            else\n                setTupleValue(pair, 1, validators.get(col.name()).compose(col.value()));\n            return pair;\n        }\n        else\n        {\n            // super\n            ArrayList<Tuple> subcols = new ArrayList<Tuple>();\n            for (IColumn subcol : col.getSubColumns())\n                subcols.add(columnToTuple(subcol, cfDef, parseType(cfDef.getSubcomparator_type())));\n\n            pair.set(1, new DefaultDataBag(subcols));\n        }\n        return pair;\n    }","id":70324,"modified_method":"/** convert a column to a tuple */\n    protected Tuple columnToTuple(IColumn col, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        Tuple pair = TupleFactory.getInstance().newTuple(2);\n\n        // name\n        if(comparator instanceof AbstractCompositeType)\n            setTupleValue(pair, 0, composeComposite((AbstractCompositeType)comparator,col.name()));\n        else\n            setTupleValue(pair, 0, cassandraToObj(comparator, col.name()));\n\n        // value\n        if (col instanceof Column)\n        {\n            // standard\n            Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n            if (validators.get(col.name()) == null)\n            {\n                Map<MarshallerType, AbstractType> marshallers = getDefaultMarshallers(cfDef);\n                setTupleValue(pair, 1, cassandraToObj(marshallers.get(MarshallerType.DEFAULT_VALIDATOR), col.value()));\n            }\n            else\n                setTupleValue(pair, 1, cassandraToObj(validators.get(col.name()), col.value()));\n            return pair;\n        }\n        else\n        {\n            // super\n            ArrayList<Tuple> subcols = new ArrayList<Tuple>();\n            for (IColumn subcol : col.getSubColumns())\n                subcols.add(columnToTuple(subcol, cfDef, parseType(cfDef.getSubcomparator_type())));\n\n            pair.set(1, new DefaultDataBag(subcols));\n        }\n        return pair;\n    }","commit_id":"bdb7bb16facda0fbe266390bd3213f092d02c0dc","url":"https://github.com/apache/cassandra"},{"original_method":"/** get pig type for the cassandra data type*/\n    protected byte getPigType(AbstractType type)\n    {\n        if (type instanceof LongType || type instanceof DateType) // DateType is bad and it should feel bad\n            return DataType.LONG;\n        else if (type instanceof IntegerType || type instanceof Int32Type) // IntegerType will overflow at 2**31, but is kept for compatibility until pig has a BigInteger\n            return DataType.INTEGER;\n        else if (type instanceof AsciiType)\n            return DataType.CHARARRAY;\n        else if (type instanceof UTF8Type)\n            return DataType.CHARARRAY;\n        else if (type instanceof FloatType)\n            return DataType.FLOAT;\n        else if (type instanceof DoubleType)\n            return DataType.DOUBLE;\n        else if (type instanceof AbstractCompositeType || type instanceof CollectionType)\n            return DataType.TUPLE;\n\n        return DataType.BYTEARRAY;\n    }","id":70325,"modified_method":"/** get pig type for the cassandra data type*/\n    protected byte getPigType(AbstractType type)\n    {\n        if (type instanceof LongType || type instanceof DateType) // DateType is bad and it should feel bad\n            return DataType.LONG;\n        else if (type instanceof IntegerType || type instanceof Int32Type) // IntegerType will overflow at 2**31, but is kept for compatibility until pig has a BigInteger\n            return DataType.INTEGER;\n        else if (type instanceof AsciiType || \n                type instanceof UTF8Type ||\n                type instanceof DecimalType ||\n                type instanceof InetAddressType ||\n                type instanceof LexicalUUIDType ||\n                type instanceof UUIDType )\n            return DataType.CHARARRAY;\n        else if (type instanceof FloatType)\n            return DataType.FLOAT;\n        else if (type instanceof DoubleType)\n            return DataType.DOUBLE;\n        else if (type instanceof AbstractCompositeType || type instanceof CollectionType)\n            return DataType.TUPLE;\n\n        return DataType.BYTEARRAY;\n    }","commit_id":"bdb7bb16facda0fbe266390bd3213f092d02c0dc","url":"https://github.com/apache/cassandra"},{"original_method":"/** add key to a tuple */\n    private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        if( comparator instanceof AbstractCompositeType )\n        {\n            setTupleValue(tuple, 0, composeComposite((AbstractCompositeType)comparator,key));\n        }\n        else\n        {\n            setTupleValue(tuple, 0, getDefaultMarshallers(cfDef).get(MarshallerType.KEY_VALIDATOR).compose(key));\n        }\n\n    }","id":70326,"modified_method":"/** add key to a tuple */\n    private void addKeyToTuple(Tuple tuple, ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException\n    {\n        if( comparator instanceof AbstractCompositeType )\n        {\n            setTupleValue(tuple, 0, composeComposite((AbstractCompositeType)comparator,key));\n        }\n        else\n        {\n            setTupleValue(tuple, 0, cassandraToObj(getDefaultMarshallers(cfDef).get(MarshallerType.KEY_VALIDATOR), key));\n        }\n\n    }","commit_id":"bdb7bb16facda0fbe266390bd3213f092d02c0dc","url":"https://github.com/apache/cassandra"},{"original_method":"/** convert a cql column to an object */\n    private Object cqlColumnToObj(IColumn col, CfDef cfDef) throws IOException\n    {\n        // standard\n        Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n        if (validators.get(col.name()) == null)\n        {\n            Map<MarshallerType, AbstractType> marshallers = getDefaultMarshallers(cfDef);\n            return marshallers.get(MarshallerType.DEFAULT_VALIDATOR).compose(col.value());\n        }\n        else\n            return validators.get(col.name()).compose(col.value());\n    }","id":70327,"modified_method":"/** convert a cql column to an object */\n    private Object cqlColumnToObj(IColumn col, CfDef cfDef) throws IOException\n    {\n        // standard\n        Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);\n        if (validators.get(col.name()) == null)\n            return cassandraToObj(getDefaultMarshallers(cfDef).get(MarshallerType.DEFAULT_VALIDATOR), col.value());\n        else\n            return cassandraToObj(validators.get(col.name()), col.value());\n    }","commit_id":"bdb7bb16facda0fbe266390bd3213f092d02c0dc","url":"https://github.com/apache/cassandra"},{"original_method":"public void createCluster(List<String> containers, CreateEnsembleOptions options) {\n        try {\n            if (options.getZookeeperPassword() != null) {\n                //do nothing\n            } else if (System.getProperties().containsKey(SystemProperties.ZOOKEEPER_PASSWORD)) {\n                options.setZookeeperPassword(System.getProperty(SystemProperties.ZOOKEEPER_PASSWORD));\n            } else {\n                options.setZookeeperPassword(ZooKeeperRetriableUtils.generatePassword());\n            }\n\n            if (containers == null || containers.size() == 2) {\n                throw new IllegalArgumentException(\"One or at least 3 containers must be used to create a zookeeper ensemble\");\n            }\n            Configuration config = configurationAdmin.getConfiguration(\"org.fusesource.fabric.zookeeper\", null);\n            String zooKeeperUrl = config != null && config.getProperties() != null ? (String) config.getProperties().get(\"zookeeper.url\") : null;\n            if (zooKeeperUrl == null) {\n                if (containers.size() != 1 || !containers.get(0).equals(System.getProperty(SystemProperties.KARAF_NAME))) {\n                    throw new FabricException(\"The first zookeeper cluster must be configured on this container only.\");\n                }\n                createLocalServer(2181, options);\n                return;\n            }\n\n            String version = ZooKeeperRetriableUtils.get(zooKeeper, ZkPath.CONFIG_DEFAULT_VERSION.getPath());\n\n            for (String container : containers) {\n                if (ZooKeeperRetriableUtils.exists(zooKeeper, ZkPath.CONTAINER_ALIVE.getPath(container)) == null) {\n                    throw new FabricException(\"The container \" + container + \" is not alive\");\n                }\n            }\n\n\t\t\t// Find used zookeeper ports\n\t\t\tMap<String, List<Integer>> usedPorts = new HashMap<String, List<Integer>>();\n\t\t\tString oldClusterId = ZooKeeperRetriableUtils.get(zooKeeper, ZkPath.CONFIG_ENSEMBLES.getPath());\n\t\t\tif (oldClusterId != null) {\n\t\t\t\tProperties p = toProperties(ZooKeeperRetriableUtils.get(zooKeeper, ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + oldClusterId) + \"/org.fusesource.fabric.zookeeper.server-\" + oldClusterId + \".properties\"));\n\t\t\t\tfor (Object n : p.keySet()) {\n\t\t\t\t\tString node = (String) n;\n\t\t\t\t\tif (node.startsWith(\"server.\")) {\n\t\t\t\t\t\tString data = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + oldClusterId) + \"/org.fusesource.fabric.zookeeper.server-\" + oldClusterId + \".properties#\" + node);\n\t\t\t\t\t\taddUsedPorts(usedPorts, data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString datas = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties#zookeeper.url\");\n\t\t\t\tfor (String data : datas.split(\",\")) {\n\t\t\t\t\taddUsedPorts(usedPorts, data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tString newClusterId;\n\t\t\tif (oldClusterId == null) {\n\t\t\t\tnewClusterId = \"0000\";\n\t\t\t} else {\n\t\t\t\tnewClusterId = new DecimalFormat(\"0000\").format(Integer.parseInt(oldClusterId) + 1);\n\t\t\t}\n\n\t\t\tZooKeeperRetriableUtils.set(zooKeeper, ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + newClusterId), \"abstract=true\\nhidden=true\");\n\t\t\tString profileNode = ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + newClusterId) + \"/org.fusesource.fabric.zookeeper.server-\" + newClusterId + \".properties\";\n\n\t\t\tProperties profileNodeProperties = new Properties();\n\t\t\tprofileNodeProperties.put(\"tickTime\", \"2000\");\n\t\t\tprofileNodeProperties.put(\"initLimit\", \"10\");\n\t\t\tprofileNodeProperties.put(\"syncLimit\", \"5\");\n\t\t\tprofileNodeProperties.put(\"dataDir\", \"data/zookeeper/\" + newClusterId);\n\n\t\t\tint index = 1;\n\t\t\tString connectionUrl = \"\";\n\t\t\tString realConnectionUrl = \"\";\n\t\t\tString containerList = \"\";\n\t\t\tfor (String container : containers) {\n                version =  ZooKeeperRetriableUtils.get(zooKeeper, ZkPath.CONFIG_CONTAINER.getPath(container));\n\t\t\t\tString ip = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, ZkPath.CONTAINER_IP.getPath(container));\n\n\t\t\t\tString minimumPort = String.valueOf(Ports.MIN_PORT_NUMBER);\n\t\t\t\tString maximumPort = String.valueOf(Ports.MAX_PORT_NUMBER);\n\n\t\t\t\tif (zooKeeper.exists(ZkPath.CONTAINER_PORT_MIN.getPath(container)) != null) {\n\t\t\t\t\tminimumPort = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, ZkPath.CONTAINER_PORT_MIN.getPath(container));\n\t\t\t\t}\n\n\t\t\t\tif (zooKeeper.exists(ZkPath.CONTAINER_PORT_MAX.getPath(container)) != null) {\n\t\t\t\t\tmaximumPort = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, ZkPath.CONTAINER_PORT_MAX.getPath(container));\n\t\t\t\t}\n\n\t\t\t\tString profNode = ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + newClusterId + \"-\" + Integer.toString(index));\n\t\t\t\tString pidNode = profNode + \"/org.fusesource.fabric.zookeeper.server-\" + newClusterId + \".properties\";\n\t\t\t\tProperties pidNodeProperties = new Properties();\n\n\t\t\t\tZooKeeperRetriableUtils.set(zooKeeper, profNode, \"parents=fabric-ensemble-\" + newClusterId + \"\\nhidden=true\");\n\t\t\t\tString port1 = Integer.toString(findPort(usedPorts, ip, mapPortToRange(Ports.DEFAULT_ZOOKEEPER_SERVER_PORT, minimumPort, maximumPort)));\n\t\t\t\tif (containers.size() > 1) {\n\t\t\t\t\tString port2 = Integer.toString(findPort(usedPorts, ip, mapPortToRange(Ports.DEFAULT_ZOOKEEPER_PEER_PORT, minimumPort, maximumPort)));\n\t\t\t\t\tString port3 = Integer.toString(findPort(usedPorts, ip, mapPortToRange(Ports.DEFAULT_ZOOKEEPER_ELECTION_PORT, minimumPort, maximumPort)));\n\t\t\t\t\tprofileNodeProperties.put(\"server.\" + Integer.toString(index), \"${zk:\" + container + \"/ip}:\" + port2 + \":\" + port3);\n\t\t\t\t\tpidNodeProperties.put(\"server.id\", Integer.toString(index));\n\t\t\t\t}\n\t\t\t\tpidNodeProperties.put(\"clientPort\", port1);\n\t\t\t\tZooKeeperRetriableUtils.set(zooKeeper, pidNode, toString(pidNodeProperties));\n\n\t\t\t\tZooKeeperRetriableUtils.add(zooKeeper, \"/fabric/configs/versions/\" + version + \"/containers/\" + container, \"fabric-ensemble-\" + newClusterId + \"-\" + Integer.toString(index));\n\t\t\t\tif (connectionUrl.length() > 0) {\n\t\t\t\t\tconnectionUrl += \",\";\n\t\t\t\t\trealConnectionUrl += \",\";\n\t\t\t\t}\n\t\t\t\tconnectionUrl += \"${zk:\" + container + \"/ip}:\" + port1;\n\t\t\t\trealConnectionUrl += ip + \":\" + port1;\n\t\t\t\tif (containerList.length() > 0) {\n\t\t\t\t\tcontainerList += \",\";\n\t\t\t\t}\n\t\t\t\tcontainerList += container;\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tZooKeeperRetriableUtils.set(zooKeeper, profileNode, toString(profileNodeProperties));\n\n\t\t\tif (oldClusterId != null) {\n\t\t\t\tProperties properties = ZooKeeperRetriableUtils.getProperties(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\");\n\t\t\t\tproperties.put(\"zookeeper.url\", ZooKeeperRetriableUtils.getSubstitutedData(zooKeeper, realConnectionUrl));\n\t\t\t\tproperties.put(\"zookeeper.password\", options.getZookeeperPassword());\n\t\t\t\tOsgiZkClient dst = new OsgiZkClient();\n\t\t\t\tdst.updated(properties);\n\t\t\t\ttry {\n\t\t\t\t\tdst.waitForConnected(new Timespan(30, Timespan.TimeUnit.SECOND));\n\n\t\t\t\t\tZooKeeperRetriableUtils.copy(zooKeeper, dst, \"/fabric/registry\");\n\t\t\t\t\tZooKeeperRetriableUtils.copy(zooKeeper, dst, \"/fabric/authentication\");\n\t\t\t\t\tZooKeeperRetriableUtils.copy(zooKeeper, dst, \"/fabric/configs\");\n\n\t\t\t\t\t//Make sure that the alive zndoe is deleted for each container.\n\t\t\t\t\tfor (String container : containers) {\n                        ZookeeperCommandBuilder.delete(\"/fabric/registry/containers/alive/\" + container).execute(dst);\n\t\t\t\t\t}\n\n\t\t\t\t\tZooKeeperRetriableUtils.set(dst, ZkPath.CONFIG_ENSEMBLES.getPath(), newClusterId);\n\t\t\t\t\tZooKeeperRetriableUtils.set(dst, ZkPath.CONFIG_ENSEMBLE.getPath(newClusterId), containerList);\n\t\t\t\t\tfor (String container : dst.getChildren(\"/fabric/configs/versions/\" + version + \"/containers\")) {\n\t\t\t\t\t\tZooKeeperRetriableUtils.remove(dst, \"/fabric/configs/versions/\" + version + \"/containers/\" + container, \"fabric-ensemble-\" + oldClusterId + \"-.*\");\n\t\t\t\t\t}\n\n\t\t\t\t\tZooKeeperRetriableUtils.set(dst, ZkPath.CONFIG_ENSEMBLE_URL.getPath(), connectionUrl);\n\t\t\t\t\tZooKeeperRetriableUtils.set(dst, ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(), options.getZookeeperPassword());\n\t\t\t\t\tZooKeeperRetriableUtils.set(zooKeeper, ZkPath.CONFIG_ENSEMBLE_URL.getPath(), connectionUrl);\n\t\t\t\t\tZooKeeperRetriableUtils.set(zooKeeper, ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(), options.getZookeeperPassword());\n\t\t\t\t\tsetConfigProperty(dst, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.password\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + \"}\");\n\t\t\t\t\tsetConfigProperty(dst, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.url\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + \"}\");\n\t\t\t\t\tsetConfigProperty(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.password\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + \"}\");\n\t\t\t\t\tsetConfigProperty(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.url\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + \"}\");\n\n\t\t\t\t} finally {\n\t\t\t\t\tdst.close();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetConfigProperty(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.password\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + \"}\");\n\t\t\t\tsetConfigProperty(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.url\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + \"}\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new FabricException(\"Unable to create zookeeper quorum: \" + e.getMessage(), e);\n\t\t}\n\t}","id":70328,"modified_method":"public void createCluster(List<String> containers, CreateEnsembleOptions options) {\n        try {\n            if (options.getZookeeperPassword() != null) {\n                //do nothing\n            } else if (System.getProperties().containsKey(SystemProperties.ZOOKEEPER_PASSWORD)) {\n                options.setZookeeperPassword(System.getProperty(SystemProperties.ZOOKEEPER_PASSWORD));\n            } else {\n                options.setZookeeperPassword(ZooKeeperRetriableUtils.generatePassword());\n            }\n\n            if (containers == null || containers.size() == 2) {\n                throw new IllegalArgumentException(\"One or at least 3 containers must be used to create a zookeeper ensemble\");\n            }\n            Configuration config = configurationAdmin.getConfiguration(\"org.fusesource.fabric.zookeeper\", null);\n            String zooKeeperUrl = config != null && config.getProperties() != null ? (String) config.getProperties().get(\"zookeeper.url\") : null;\n            if (zooKeeperUrl == null) {\n                if (containers.size() != 1 || !containers.get(0).equals(System.getProperty(SystemProperties.KARAF_NAME))) {\n                    throw new FabricException(\"The first zookeeper cluster must be configured on this container only.\");\n                }\n                createLocalServer(2181, options);\n                return;\n            }\n\n            String version = ZooKeeperRetriableUtils.get(zooKeeper, ZkPath.CONFIG_DEFAULT_VERSION.getPath());\n\n            for (String container : containers) {\n                if (ZooKeeperRetriableUtils.exists(zooKeeper, ZkPath.CONTAINER_ALIVE.getPath(container)) == null) {\n                    throw new FabricException(\"The container \" + container + \" is not alive\");\n                }\n            }\n\n\t\t\t// Find used zookeeper ports\n\t\t\tMap<String, List<Integer>> usedPorts = new HashMap<String, List<Integer>>();\n\t\t\tString oldClusterId = ZooKeeperRetriableUtils.get(zooKeeper, ZkPath.CONFIG_ENSEMBLES.getPath());\n\t\t\tif (oldClusterId != null) {\n\t\t\t\tProperties p = toProperties(ZooKeeperRetriableUtils.get(zooKeeper, ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + oldClusterId) + \"/org.fusesource.fabric.zookeeper.server-\" + oldClusterId + \".properties\"));\n\t\t\t\tfor (Object n : p.keySet()) {\n\t\t\t\t\tString node = (String) n;\n\t\t\t\t\tif (node.startsWith(\"server.\")) {\n\t\t\t\t\t\tString data = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + oldClusterId) + \"/org.fusesource.fabric.zookeeper.server-\" + oldClusterId + \".properties#\" + node);\n\t\t\t\t\t\taddUsedPorts(usedPorts, data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString datas = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties#zookeeper.url\");\n\t\t\t\tfor (String data : datas.split(\",\")) {\n\t\t\t\t\taddUsedPorts(usedPorts, data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tString newClusterId;\n\t\t\tif (oldClusterId == null) {\n\t\t\t\tnewClusterId = \"0000\";\n\t\t\t} else {\n\t\t\t\tnewClusterId = new DecimalFormat(\"0000\").format(Integer.parseInt(oldClusterId) + 1);\n\t\t\t}\n\n\t\t\tZooKeeperRetriableUtils.set(zooKeeper, ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + newClusterId), \"abstract=true\\nhidden=true\");\n\t\t\tString profileNode = ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + newClusterId) + \"/org.fusesource.fabric.zookeeper.server-\" + newClusterId + \".properties\";\n\n\t\t\tProperties profileNodeProperties = new Properties();\n\t\t\tprofileNodeProperties.put(\"tickTime\", \"2000\");\n\t\t\tprofileNodeProperties.put(\"initLimit\", \"10\");\n\t\t\tprofileNodeProperties.put(\"syncLimit\", \"5\");\n\t\t\tprofileNodeProperties.put(\"dataDir\", \"data/zookeeper/\" + newClusterId);\n\n\t\t\tint index = 1;\n\t\t\tString connectionUrl = \"\";\n\t\t\tString realConnectionUrl = \"\";\n\t\t\tString containerList = \"\";\n\t\t\tfor (String container : containers) {\n                version =  ZooKeeperRetriableUtils.get(zooKeeper, ZkPath.CONFIG_CONTAINER.getPath(container));\n\t\t\t\tString ip = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, ZkPath.CONTAINER_IP.getPath(container));\n\n\t\t\t\tString minimumPort = String.valueOf(Ports.MIN_PORT_NUMBER);\n\t\t\t\tString maximumPort = String.valueOf(Ports.MAX_PORT_NUMBER);\n\n\t\t\t\tif (zooKeeper.exists(ZkPath.CONTAINER_PORT_MIN.getPath(container)) != null) {\n\t\t\t\t\tminimumPort = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, ZkPath.CONTAINER_PORT_MIN.getPath(container));\n\t\t\t\t}\n\n\t\t\t\tif (zooKeeper.exists(ZkPath.CONTAINER_PORT_MAX.getPath(container)) != null) {\n\t\t\t\t\tmaximumPort = ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper, ZkPath.CONTAINER_PORT_MAX.getPath(container));\n\t\t\t\t}\n\n\t\t\t\tString profNode = ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath(\"fabric-ensemble-\" + newClusterId + \"-\" + Integer.toString(index));\n\t\t\t\tString pidNode = profNode + \"/org.fusesource.fabric.zookeeper.server-\" + newClusterId + \".properties\";\n\t\t\t\tProperties pidNodeProperties = new Properties();\n\n\t\t\t\tZooKeeperRetriableUtils.set(zooKeeper, profNode, \"parents=fabric-ensemble-\" + newClusterId + \"\\nhidden=true\");\n\t\t\t\tString port1 = Integer.toString(findPort(usedPorts, ip, mapPortToRange(Ports.DEFAULT_ZOOKEEPER_SERVER_PORT, minimumPort, maximumPort)));\n\t\t\t\tif (containers.size() > 1) {\n\t\t\t\t\tString port2 = Integer.toString(findPort(usedPorts, ip, mapPortToRange(Ports.DEFAULT_ZOOKEEPER_PEER_PORT, minimumPort, maximumPort)));\n\t\t\t\t\tString port3 = Integer.toString(findPort(usedPorts, ip, mapPortToRange(Ports.DEFAULT_ZOOKEEPER_ELECTION_PORT, minimumPort, maximumPort)));\n\t\t\t\t\tprofileNodeProperties.put(\"server.\" + Integer.toString(index), \"${zk:\" + container + \"/ip}:\" + port2 + \":\" + port3);\n\t\t\t\t\tpidNodeProperties.put(\"server.id\", Integer.toString(index));\n\t\t\t\t}\n\t\t\t\tpidNodeProperties.put(\"clientPort\", port1);\n\t\t\t\tZooKeeperRetriableUtils.set(zooKeeper, pidNode, toString(pidNodeProperties));\n\n\t\t\t\tZooKeeperRetriableUtils.add(zooKeeper, \"/fabric/configs/versions/\" + version + \"/containers/\" + container, \"fabric-ensemble-\" + newClusterId + \"-\" + Integer.toString(index));\n\t\t\t\tif (connectionUrl.length() > 0) {\n\t\t\t\t\tconnectionUrl += \",\";\n\t\t\t\t\trealConnectionUrl += \",\";\n\t\t\t\t}\n\t\t\t\tconnectionUrl += \"${zk:\" + container + \"/ip}:\" + port1;\n\t\t\t\trealConnectionUrl += ip + \":\" + port1;\n\t\t\t\tif (containerList.length() > 0) {\n\t\t\t\t\tcontainerList += \",\";\n\t\t\t\t}\n\t\t\t\tcontainerList += container;\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tZooKeeperRetriableUtils.set(zooKeeper, profileNode, toString(profileNodeProperties));\n\n\t\t\tif (oldClusterId != null) {\n\t\t\t\tProperties properties = ZooKeeperRetriableUtils.getProperties(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\");\n\t\t\t\tproperties.put(\"zookeeper.url\", ZooKeeperRetriableUtils.getSubstitutedData(zooKeeper, realConnectionUrl));\n\t\t\t\tproperties.put(\"zookeeper.password\", options.getZookeeperPassword());\n\t\t\t\tOsgiZkClient dst = new OsgiZkClient();\n\t\t\t\tdst.updated(properties);\n\t\t\t\ttry {\n\t\t\t\t\tdst.waitForConnected(new Timespan(30, Timespan.TimeUnit.SECOND));\n\n\t\t\t\t\tZooKeeperRetriableUtils.copy(zooKeeper, dst, \"/fabric/registry\");\n\t\t\t\t\tZooKeeperRetriableUtils.copy(zooKeeper, dst, \"/fabric/authentication\");\n\t\t\t\t\tZooKeeperRetriableUtils.copy(zooKeeper, dst, \"/fabric/configs\");\n\n\t\t\t\t\t//Make sure that the alive zndoe is deleted for each container.\n\t\t\t\t\tfor (String container : containers) {\n                        ZookeeperCommandBuilder.delete(\"/fabric/registry/containers/alive/\" + container).execute(dst);\n\t\t\t\t\t}\n\n\t\t\t\t\tZooKeeperRetriableUtils.set(dst, ZkPath.CONFIG_ENSEMBLES.getPath(), newClusterId);\n\t\t\t\t\tZooKeeperRetriableUtils.set(dst, ZkPath.CONFIG_ENSEMBLE.getPath(newClusterId), containerList);\n\n                    ZooKeeperRetriableUtils.set(dst, ZkPath.CONFIG_ENSEMBLE_URL.getPath(), connectionUrl);\n                    ZooKeeperRetriableUtils.set(dst, ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(), options.getZookeeperPassword());\n                    ZooKeeperRetriableUtils.set(zooKeeper, ZkPath.CONFIG_ENSEMBLE_URL.getPath(), connectionUrl);\n                    ZooKeeperRetriableUtils.set(zooKeeper, ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(), options.getZookeeperPassword());\n\n\n                    for (String v : zooKeeper.getChildren(\"/fabric/configs/versions/\")) {\n                        for (String container : dst.getChildren(\"/fabric/configs/versions/\" + v + \"/containers\")) {\n                            ZooKeeperRetriableUtils.remove(dst, \"/fabric/configs/versions/\" + v + \"/containers/\" + container, \"fabric-ensemble-\" + oldClusterId + \"-.*\");\n                        }\n                        setConfigProperty(dst, \"/fabric/configs/versions/\" + v + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.password\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + \"}\");\n                        setConfigProperty(dst, \"/fabric/configs/versions/\" + v + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.url\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + \"}\");\n                        setConfigProperty(zooKeeper, \"/fabric/configs/versions/\" + v + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.password\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + \"}\");\n                        setConfigProperty(zooKeeper, \"/fabric/configs/versions/\" + v + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.url\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + \"}\");\n                    }\n\n\n                } finally {\n\t\t\t\t\tdst.close();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetConfigProperty(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.password\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + \"}\");\n\t\t\t\tsetConfigProperty(zooKeeper, \"/fabric/configs/versions/\" + version + \"/profiles/default/org.fusesource.fabric.zookeeper.properties\", \"zookeeper.url\", \"${zk:\" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + \"}\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new FabricException(\"Unable to create zookeeper quorum: \" + e.getMessage(), e);\n\t\t}\n\t}","commit_id":"ae1e6067a4e8cc13517e0d82ced105cc0f6df35f","url":"https://github.com/fabric8io/fabric8"},{"original_method":"public ListRepresentation getIndexedRelationships( String indexName, String key,\n                                                       String value )\n    {\n        if ( !graphDb.index().existsForRelationships( indexName ) )\n            throw new NotFoundException();\n        List<IndexedEntityRepresentation> representations = new ArrayList<IndexedEntityRepresentation>();\n        Index<Relationship> index = graphDb.index().forRelationships( indexName );\n\n        Transaction tx = graphDb.beginTx();\n        try\n        {\n            IndexRepresentation indexRepresentation = new NodeIndexRepresentation( indexName );\n            for ( Relationship node : index.get( key, value ) )\n            {\n                representations.add( new IndexedEntityRepresentation( node, key, value, indexRepresentation ) );\n            }\n            tx.success();\n            return new ListRepresentation( \"relationships\", representations );\n        } finally\n        {\n            tx.finish();\n        }\n    }","id":70329,"modified_method":"public ListRepresentation getIndexedRelationships( String indexName, String key,\n                                                       String value )\n    {\n        if ( !graphDb.index().existsForRelationships( indexName ) )\n            throw new NotFoundException();\n        List<IndexedEntityRepresentation> representations = new ArrayList<IndexedEntityRepresentation>();\n        Index<Relationship> index = graphDb.index().forRelationships( indexName );\n\n        Transaction tx = graphDb.beginTx();\n        try\n        {\n            IndexRepresentation indexRepresentation = new RelationshipIndexRepresentation( indexName );\n            for ( Relationship node : index.get( key, value ) )\n            {\n                representations.add( new IndexedEntityRepresentation( node, key, value, indexRepresentation ) );\n            }\n            tx.success();\n            return new ListRepresentation( \"relationships\", representations );\n        } finally\n        {\n            tx.finish();\n        }\n    }","commit_id":"9ae0d41bf7875048cc4fbfcb9f1da9a859995c3a","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToIndexValuesContainingSpaces() throws Exception\n    {\n        long startNodeId = helper.createNode();\n        long endNodeId = helper.createNode();\n        String relationshiptype = \"tested-together\";\n        long relationshipId = helper.createRelationship( relationshiptype, startNodeId, endNodeId );\n\n        String key = \"key\";\n        String value = \"value with   spaces  in it\";\n        value = URIHelper.encode( value );\n        String indexName = \"spacey-values\";\n        helper.createRelationshipIndex( indexName );\n        String entity = functionalTestHelper.relationshipUri( relationshipId );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        URI location = response.getLocation();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.OK.getStatusCode(), response.getStatus() );\n        String responseEntity = response.getEntity( String.class );\n        Collection<?> hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 1, hits.size() );\n\n        Client.create().resource( location ).delete();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 200, response.getStatus() );\n        responseEntity = response.getEntity( String.class );\n        hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 0, hits.size() );\n    }","id":70330,"modified_method":"@Test\n    public void shouldBeAbleToIndexValuesContainingSpaces() throws Exception\n    {\n        long startNodeId = helper.createNode();\n        long endNodeId = helper.createNode();\n        String relationshiptype = \"tested-together\";\n        long relationshipId = helper.createRelationship( relationshiptype, startNodeId, endNodeId );\n\n        String key = \"key\";\n        String value = \"value with   spaces  in it\";\n        value = URIHelper.encode( value );\n        String indexName = \"spacey-values\";\n        helper.createRelationshipIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.relationshipUri( relationshipId ));\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.APPLICATION_JSON_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        URI location = response.getLocation();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.OK.getStatusCode(), response.getStatus() );\n        String responseEntity = response.getEntity( String.class );\n        Collection<?> hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 1, hits.size() );\n\n        Client.create().resource( location ).delete();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 200, response.getStatus() );\n        responseEntity = response.getEntity( String.class );\n        hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 0, hits.size() );\n    }","commit_id":"9ae0d41bf7875048cc4fbfcb9f1da9a859995c3a","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/relationship/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingRelationship() throws DatabaseBlockedException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createRelationshipIndex( indexName );\n        String relationshipType = \"related-to\";\n        long relationshipId = helper.createRelationship( relationshipType );\n        String entity = functionalTestHelper.relationshipUri( relationshipId );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity, MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( Arrays.asList( (Long) relationshipId ), helper.getIndexedRelationships( indexName, key, value ) );\n    }","id":70331,"modified_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/relationship/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingRelationship() throws DatabaseBlockedException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createRelationshipIndex( indexName );\n        String relationshipType = \"related-to\";\n        long relationshipId = helper.createRelationship( relationshipType );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.relationshipUri( relationshipId ) );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.APPLICATION_JSON_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( Arrays.asList( (Long) relationshipId ), helper.getIndexedRelationships( indexName, key, value ) );\n    }","commit_id":"9ae0d41bf7875048cc4fbfcb9f1da9a859995c3a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ListRepresentation getIndexedRelationships( String indexName, String key,\n                                                       String value )\n    {\n        if ( !graphDb.index().existsForRelationships( indexName ) )\n            throw new NotFoundException();\n        List<IndexedEntityRepresentation> representations = new ArrayList<IndexedEntityRepresentation>();\n        Index<Relationship> index = graphDb.index().forRelationships( indexName );\n\n        Transaction tx = graphDb.beginTx();\n        try\n        {\n            IndexRepresentation indexRepresentation = new NodeIndexRepresentation( indexName );\n            for ( Relationship node : index.get( key, value ) )\n            {\n                representations.add( new IndexedEntityRepresentation( node, key, value, indexRepresentation ) );\n            }\n            tx.success();\n            return new ListRepresentation( \"relationships\", representations );\n        } finally\n        {\n            tx.finish();\n        }\n    }","id":70332,"modified_method":"public ListRepresentation getIndexedRelationships( String indexName, String key,\n                                                       String value )\n    {\n        if ( !graphDb.index().existsForRelationships( indexName ) )\n            throw new NotFoundException();\n        List<IndexedEntityRepresentation> representations = new ArrayList<IndexedEntityRepresentation>();\n        Index<Relationship> index = graphDb.index().forRelationships( indexName );\n\n        Transaction tx = graphDb.beginTx();\n        try\n        {\n            IndexRepresentation indexRepresentation = new RelationshipIndexRepresentation( indexName );\n            for ( Relationship node : index.get( key, value ) )\n            {\n                representations.add( new IndexedEntityRepresentation( node, key, value, indexRepresentation ) );\n            }\n            tx.success();\n            return new ListRepresentation( \"relationships\", representations );\n        } finally\n        {\n            tx.finish();\n        }\n    }","commit_id":"6b465c0d13a2f7068e15bdd54692e3c7db8ef3d6","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToIndexValuesContainingSpaces() throws Exception\n    {\n        long startNodeId = helper.createNode();\n        long endNodeId = helper.createNode();\n        String relationshiptype = \"tested-together\";\n        long relationshipId = helper.createRelationship( relationshiptype, startNodeId, endNodeId );\n\n        String key = \"key\";\n        String value = \"value with   spaces  in it\";\n        value = URIHelper.encode( value );\n        String indexName = \"spacey-values\";\n        helper.createRelationshipIndex( indexName );\n        String entity = functionalTestHelper.relationshipUri( relationshipId );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        URI location = response.getLocation();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.OK.getStatusCode(), response.getStatus() );\n        String responseEntity = response.getEntity( String.class );\n        Collection<?> hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 1, hits.size() );\n\n        Client.create().resource( location ).delete();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 200, response.getStatus() );\n        responseEntity = response.getEntity( String.class );\n        hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 0, hits.size() );\n    }","id":70333,"modified_method":"@Test\n    public void shouldBeAbleToIndexValuesContainingSpaces() throws Exception\n    {\n        long startNodeId = helper.createNode();\n        long endNodeId = helper.createNode();\n        String relationshiptype = \"tested-together\";\n        long relationshipId = helper.createRelationship( relationshiptype, startNodeId, endNodeId );\n\n        String key = \"key\";\n        String value = \"value with   spaces  in it\";\n        value = URIHelper.encode( value );\n        String indexName = \"spacey-values\";\n        helper.createRelationshipIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.relationshipUri( relationshipId ));\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.APPLICATION_JSON_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        URI location = response.getLocation();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.OK.getStatusCode(), response.getStatus() );\n        String responseEntity = response.getEntity( String.class );\n        Collection<?> hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 1, hits.size() );\n\n        Client.create().resource( location ).delete();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 200, response.getStatus() );\n        responseEntity = response.getEntity( String.class );\n        hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 0, hits.size() );\n    }","commit_id":"6b465c0d13a2f7068e15bdd54692e3c7db8ef3d6","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/relationship/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingRelationship() throws DatabaseBlockedException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createRelationshipIndex( indexName );\n        String relationshipType = \"related-to\";\n        long relationshipId = helper.createRelationship( relationshipType );\n        String entity = functionalTestHelper.relationshipUri( relationshipId );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity, MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( Arrays.asList( (Long) relationshipId ), helper.getIndexedRelationships( indexName, key, value ) );\n    }","id":70334,"modified_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/relationship/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingRelationship() throws DatabaseBlockedException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createRelationshipIndex( indexName );\n        String relationshipType = \"related-to\";\n        long relationshipId = helper.createRelationship( relationshipType );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.relationshipUri( relationshipId ) );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.APPLICATION_JSON_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( Arrays.asList( (Long) relationshipId ), helper.getIndexedRelationships( indexName, key, value ) );\n    }","commit_id":"6b465c0d13a2f7068e15bdd54692e3c7db8ef3d6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ListRepresentation getIndexedRelationships( String indexName, String key,\n                                                       String value )\n    {\n        if ( !graphDb.index().existsForRelationships( indexName ) )\n            throw new NotFoundException();\n        List<IndexedEntityRepresentation> representations = new ArrayList<IndexedEntityRepresentation>();\n        Index<Relationship> index = graphDb.index().forRelationships( indexName );\n\n        Transaction tx = graphDb.beginTx();\n        try\n        {\n            IndexRepresentation indexRepresentation = new NodeIndexRepresentation( indexName );\n            for ( Relationship node : index.get( key, value ) )\n            {\n                representations.add( new IndexedEntityRepresentation( node, key, value, indexRepresentation ) );\n            }\n            tx.success();\n            return new ListRepresentation( \"relationships\", representations );\n        } finally\n        {\n            tx.finish();\n        }\n    }","id":70335,"modified_method":"public ListRepresentation getIndexedRelationships( String indexName, String key,\n                                                       String value )\n    {\n        if ( !graphDb.index().existsForRelationships( indexName ) )\n            throw new NotFoundException();\n        List<IndexedEntityRepresentation> representations = new ArrayList<IndexedEntityRepresentation>();\n        Index<Relationship> index = graphDb.index().forRelationships( indexName );\n\n        Transaction tx = graphDb.beginTx();\n        try\n        {\n            IndexRepresentation indexRepresentation = new RelationshipIndexRepresentation( indexName );\n            for ( Relationship node : index.get( key, value ) )\n            {\n                representations.add( new IndexedEntityRepresentation( node, key, value, indexRepresentation ) );\n            }\n            tx.success();\n            return new ListRepresentation( \"relationships\", representations );\n        } finally\n        {\n            tx.finish();\n        }\n    }","commit_id":"de648a7206e8344568cc78167a82737b0fbe74ba","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToIndexValuesContainingSpaces() throws Exception\n    {\n        long startNodeId = helper.createNode();\n        long endNodeId = helper.createNode();\n        String relationshiptype = \"tested-together\";\n        long relationshipId = helper.createRelationship( relationshiptype, startNodeId, endNodeId );\n\n        String key = \"key\";\n        String value = \"value with   spaces  in it\";\n        value = URIHelper.encode( value );\n        String indexName = \"spacey-values\";\n        helper.createRelationshipIndex( indexName );\n        String entity = functionalTestHelper.relationshipUri( relationshipId );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        URI location = response.getLocation();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.OK.getStatusCode(), response.getStatus() );\n        String responseEntity = response.getEntity( String.class );\n        Collection<?> hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 1, hits.size() );\n\n        Client.create().resource( location ).delete();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 200, response.getStatus() );\n        responseEntity = response.getEntity( String.class );\n        hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 0, hits.size() );\n    }","id":70336,"modified_method":"@Test\n    public void shouldBeAbleToIndexValuesContainingSpaces() throws Exception\n    {\n        long startNodeId = helper.createNode();\n        long endNodeId = helper.createNode();\n        String relationshiptype = \"tested-together\";\n        long relationshipId = helper.createRelationship( relationshiptype, startNodeId, endNodeId );\n\n        String key = \"key\";\n        String value = \"value with   spaces  in it\";\n        value = URIHelper.encode( value );\n        String indexName = \"spacey-values\";\n        helper.createRelationshipIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.relationshipUri( relationshipId ));\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.APPLICATION_JSON_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        URI location = response.getLocation();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.OK.getStatusCode(), response.getStatus() );\n        String responseEntity = response.getEntity( String.class );\n        Collection<?> hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 1, hits.size() );\n\n        Client.create().resource( location ).delete();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 200, response.getStatus() );\n        responseEntity = response.getEntity( String.class );\n        hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 0, hits.size() );\n    }","commit_id":"de648a7206e8344568cc78167a82737b0fbe74ba","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/relationship/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingRelationship() throws DatabaseBlockedException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createRelationshipIndex( indexName );\n        String relationshipType = \"related-to\";\n        long relationshipId = helper.createRelationship( relationshipType );\n        String entity = functionalTestHelper.relationshipUri( relationshipId );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity, MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( Arrays.asList( (Long) relationshipId ), helper.getIndexedRelationships( indexName, key, value ) );\n    }","id":70337,"modified_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/relationship/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingRelationship() throws DatabaseBlockedException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createRelationshipIndex( indexName );\n        String relationshipType = \"related-to\";\n        long relationshipId = helper.createRelationship( relationshipType );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.relationshipUri( relationshipId ) );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.APPLICATION_JSON_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( Arrays.asList( (Long) relationshipId ), helper.getIndexedRelationships( indexName, key, value ) );\n    }","commit_id":"de648a7206e8344568cc78167a82737b0fbe74ba","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ListRepresentation getIndexedRelationships( String indexName, String key,\n                                                       String value )\n    {\n        if ( !graphDb.index().existsForRelationships( indexName ) )\n            throw new NotFoundException();\n        List<IndexedEntityRepresentation> representations = new ArrayList<IndexedEntityRepresentation>();\n        Index<Relationship> index = graphDb.index().forRelationships( indexName );\n\n        Transaction tx = graphDb.beginTx();\n        try\n        {\n            IndexRepresentation indexRepresentation = new NodeIndexRepresentation( indexName );\n            for ( Relationship node : index.get( key, value ) )\n            {\n                representations.add( new IndexedEntityRepresentation( node, key, value, indexRepresentation ) );\n            }\n            tx.success();\n            return new ListRepresentation( \"relationships\", representations );\n        } finally\n        {\n            tx.finish();\n        }\n    }","id":70338,"modified_method":"public ListRepresentation getIndexedRelationships( String indexName, String key,\n                                                       String value )\n    {\n        if ( !graphDb.index().existsForRelationships( indexName ) )\n            throw new NotFoundException();\n        List<IndexedEntityRepresentation> representations = new ArrayList<IndexedEntityRepresentation>();\n        Index<Relationship> index = graphDb.index().forRelationships( indexName );\n\n        Transaction tx = graphDb.beginTx();\n        try\n        {\n            IndexRepresentation indexRepresentation = new RelationshipIndexRepresentation( indexName );\n            for ( Relationship node : index.get( key, value ) )\n            {\n                representations.add( new IndexedEntityRepresentation( node, key, value, indexRepresentation ) );\n            }\n            tx.success();\n            return new ListRepresentation( \"relationships\", representations );\n        } finally\n        {\n            tx.finish();\n        }\n    }","commit_id":"4766a62cb962910f52074429091fc7c2389dc668","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/relationship/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingRelationship() throws DatabaseBlockedException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createRelationshipIndex( indexName );\n        String relationshipType = \"related-to\";\n        long relationshipId = helper.createRelationship( relationshipType );\n        String entity = functionalTestHelper.relationshipUri( relationshipId );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity, MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( Arrays.asList( (Long) relationshipId ), helper.getIndexedRelationships( indexName, key, value ) );\n    }","id":70339,"modified_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/relationship/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingRelationship() throws DatabaseBlockedException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createRelationshipIndex( indexName );\n        String relationshipType = \"related-to\";\n        long relationshipId = helper.createRelationship( relationshipType );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.relationshipUri( relationshipId ) );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.APPLICATION_JSON_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n        assertEquals( Arrays.asList( (Long) relationshipId ), helper.getIndexedRelationships( indexName, key, value ) );\n    }","commit_id":"4766a62cb962910f52074429091fc7c2389dc668","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldBeAbleToIndexValuesContainingSpaces() throws Exception\n    {\n        long startNodeId = helper.createNode();\n        long endNodeId = helper.createNode();\n        String relationshiptype = \"tested-together\";\n        long relationshipId = helper.createRelationship( relationshiptype, startNodeId, endNodeId );\n\n        String key = \"key\";\n        String value = \"value with   spaces  in it\";\n        value = URIHelper.encode( value );\n        String indexName = \"spacey-values\";\n        helper.createRelationshipIndex( indexName );\n        String entity = functionalTestHelper.relationshipUri( relationshipId );\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.TEXT_PLAIN_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        URI location = response.getLocation();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.OK.getStatusCode(), response.getStatus() );\n        String responseEntity = response.getEntity( String.class );\n        Collection<?> hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 1, hits.size() );\n\n        Client.create().resource( location ).delete();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 200, response.getStatus() );\n        responseEntity = response.getEntity( String.class );\n        hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 0, hits.size() );\n    }","id":70340,"modified_method":"@Test\n    public void shouldBeAbleToIndexValuesContainingSpaces() throws Exception\n    {\n        long startNodeId = helper.createNode();\n        long endNodeId = helper.createNode();\n        String relationshiptype = \"tested-together\";\n        long relationshipId = helper.createRelationship( relationshiptype, startNodeId, endNodeId );\n\n        String key = \"key\";\n        String value = \"value with   spaces  in it\";\n        value = URIHelper.encode( value );\n        String indexName = \"spacey-values\";\n        helper.createRelationshipIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.relationshipUri( relationshipId ));\n        JaxRsResponse response = httpPostIndexRelationshipNameKeyValue( indexName, key, value, entity,\n                MediaType.APPLICATION_JSON_TYPE, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        URI location = response.getLocation();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( Status.OK.getStatusCode(), response.getStatus() );\n        String responseEntity = response.getEntity( String.class );\n        Collection<?> hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 1, hits.size() );\n\n        Client.create().resource( location ).delete();\n        response = httpGetIndexRelationshipNameKeyValue( indexName, key, value, MediaType.APPLICATION_JSON_TYPE );\n        assertEquals( 200, response.getStatus() );\n        responseEntity = response.getEntity( String.class );\n        hits = (Collection<?>) JsonHelper.jsonToSingleValue( responseEntity );\n        assertEquals( 0, hits.size() );\n    }","commit_id":"4766a62cb962910f52074429091fc7c2389dc668","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static void docCommentStart(SNode node, final SNodeTextGen textGen) {\n    textGen.indentBuffer();\n    textGen.append(\"/**\");\n\n    textGen.appendNewLine();\n    DocCommentTextGen.javadocIndent(textGen);\n    {\n      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f96eL, \"body\"));\n      for (SNode item : collection) {\n        textGen.appendNode(item);\n      }\n    }\n\n    if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, node, \"virtual_isTagSectionEmpty_8465538089690623795\", new Object[]{}))) {\n      textGen.appendNewLine();\n      DocCommentTextGen.javadocIndent(textGen);\n    }\n\n    {\n      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x4a3c146b7faeeb32L, \"author\"));\n      for (SNode item : collection) {\n        textGen.appendNode(item);\n      }\n    }\n    {\n      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f962L, \"since\"));\n      for (SNode item : collection) {\n        textGen.appendNode(item);\n      }\n    }\n    {\n      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f963L, \"version\"));\n      for (SNode item : collection) {\n        textGen.appendNode(item);\n      }\n    }\n    {\n      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x1ec532ec252df7ddL, \"see\"));\n      for (SNode item : collection) {\n        textGen.appendNode(item);\n      }\n    }\n    if ((SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f96bL, \"deprecated\")) != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\")) && SPropertyOperations.getBoolean(SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, 0x11d2ea948a4L, \"isDeprecated\"))) {\n      textGen.appendNewLine();\n      textGen.appendNode(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f96bL, \"deprecated\")));\n    }\n  }","id":70341,"modified_method":"public static void docCommentStart(SNode node, final SNodeTextGen textGen) {\n    textGen.indentBuffer();\n    textGen.append(\"/**\");\n\n    if (ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f96eL, \"body\"))).isNotEmpty()) {\n      textGen.appendNewLine();\n      DocCommentTextGen.javadocIndent(textGen);\n      {\n        Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f96eL, \"body\"));\n        for (SNode item : collection) {\n          textGen.appendNode(item);\n        }\n      }\n    }\n\n    // A separator between text and tags \n    if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, node, \"virtual_isTagSectionEmpty_8465538089690623795\", new Object[]{}))) {\n      textGen.appendNewLine();\n      DocCommentTextGen.javadocIndent(textGen);\n    }\n\n    {\n      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x4a3c146b7faeeb32L, \"author\"));\n      for (SNode item : collection) {\n        textGen.appendNode(item);\n      }\n    }\n    {\n      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f962L, \"since\"));\n      for (SNode item : collection) {\n        textGen.appendNode(item);\n      }\n    }\n    {\n      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f963L, \"version\"));\n      for (SNode item : collection) {\n        textGen.appendNode(item);\n      }\n    }\n    {\n      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x1ec532ec252df7ddL, \"see\"));\n      for (SNode item : collection) {\n        textGen.appendNode(item);\n      }\n    }\n    if ((SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f96bL, \"deprecated\")) != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\")) && SPropertyOperations.getBoolean(SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, 0x11d2ea948a4L, \"isDeprecated\"))) {\n      textGen.appendNode(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, 0x757ba20a4c87f96bL, \"deprecated\")));\n    }\n  }","commit_id":"2df59dac0c610b6502cb21d0da292724b66570fd","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * Returns the secure view of the base state from which the current branch was creates.\n     *\n     * @return secure base node state\n     */\n    NodeState getSecureBase() {\n        return new SecureNodeState(branch.getBase(), getPermissionProvider(), getTypeProvider());\n    }","id":70342,"modified_method":"/**\n     * Returns the secure view of the base state from which the current branch was creates.\n     *\n     * @return secure base node state\n     */\n    NodeState getSecureBase() {\n        NodeState root = branch.getBase();\n        return new SecureNodeState(root, getRootContext(root));\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * New instance bases on a given {@link NodeStore} and a workspace\n     *\n     * @param store            node store\n     * @param hook             the commit hook\n     * @param workspaceName    name of the workspace\n     * @param subject          the subject.\n     * @param securityProvider the security configuration.\n     * @param indexProvider    the query index provider.\n     */\n    public RootImpl(NodeStore store,\n                    CommitHook hook,\n                    String workspaceName,\n                    Subject subject,\n                    SecurityProvider securityProvider,\n                    QueryIndexProvider indexProvider) {\n        this.store = checkNotNull(store);\n        this.hook = checkNotNull(hook);\n        this.workspaceName = checkNotNull(workspaceName);\n        this.subject = checkNotNull(subject);\n        this.securityProvider = checkNotNull(securityProvider);\n        this.indexProvider = indexProvider;\n\n        branch = this.store.branch();\n        secureHead = new SecureNodeState(\n                branch.getHead(), getPermissionProvider(), getTypeProvider());\n        rootTree = new TreeImpl(this, secureHead.builder(), lastMove);\n    }","id":70343,"modified_method":"/**\n     * New instance bases on a given {@link NodeStore} and a workspace\n     *\n     * @param store            node store\n     * @param hook             the commit hook\n     * @param workspaceName    name of the workspace\n     * @param subject          the subject.\n     * @param securityProvider the security configuration.\n     * @param indexProvider    the query index provider.\n     */\n    public RootImpl(NodeStore store,\n                    CommitHook hook,\n                    String workspaceName,\n                    Subject subject,\n                    SecurityProvider securityProvider,\n                    QueryIndexProvider indexProvider) {\n        this.store = checkNotNull(store);\n        this.hook = checkNotNull(hook);\n        this.workspaceName = checkNotNull(workspaceName);\n        this.subject = checkNotNull(subject);\n        this.securityProvider = checkNotNull(securityProvider);\n        this.indexProvider = indexProvider;\n\n        branch = this.store.branch();\n        NodeState root = branch.getHead();\n        secureHead = new SecureNodeState(root, getRootContext(root));\n        rootTree = new TreeImpl(this, secureHead.builder(), lastMove);\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * Reset the root builder to the branch's current root state\n     */\n    private void reset() {\n        secureHead = new SecureNodeState(\n                branch.getHead(), getPermissionProvider(), getTypeProvider());\n        rootTree.reset(secureHead);\n    }","id":70344,"modified_method":"/**\n     * Reset the root builder to the branch's current root state\n     */\n    private void reset() {\n        NodeState root = branch.getHead();\n        secureHead = new SecureNodeState(root, getRootContext(root));\n        rootTree.reset(secureHead);\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private SecureNodeState(\n            @Nonnull SecureNodeState parent,\n            @Nonnull String name, @Nonnull NodeState nodeState) {\n        this.root = checkNotNull(parent).root;\n        this.state = checkNotNull(nodeState);\n        this.base = new ImmutableTree(parent.base, name, nodeState);\n        this.permissionProvider = parent.permissionProvider;\n\n        if (base.getType() == parent.base.getType()) {\n            readStatus = ReadStatus.getChildStatus(parent.readStatus);\n        }\n    }","id":70345,"modified_method":"SecureNodeState(\n            @Nonnull NodeState state, @Nonnull SecurityContext context) {\n        this.state = checkNotNull(state);\n        this.context = checkNotNull(context);\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public boolean exists() {\n        return getReadStatus().includes(ReadStatus.ALLOW_THIS);\n    }","id":70346,"modified_method":"@Override\n    public boolean exists() {\n        return context.canReadThisNode();\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public synchronized long getPropertyCount() {\n        ReadStatus rs = getReadStatus();\n        if (propertyCount == -1) {\n            if (rs.includes(ReadStatus.ALLOW_PROPERTIES)) {\n                // all properties are readable\n                propertyCount = state.getPropertyCount();\n            } else if (rs.appliesToThis()) {\n                // some properties may be readable\n                propertyCount = count(Iterables.filter(state.getProperties(), isPropertyReadable));\n            } else {\n                // property access is denied\n                return 0;\n            }\n        }\n        return propertyCount;\n    }","id":70347,"modified_method":"@Override\n    public synchronized long getPropertyCount() {\n        if (propertyCount == -1) {\n            if (context.canReadAllProperties()) {\n                propertyCount = state.getPropertyCount();\n            } else if (context.canReadThisNode()) {\n                propertyCount = count(\n                        filter(state.getProperties(), isPropertyReadable));\n            } else {\n                propertyCount = 0;\n            }\n        }\n        return propertyCount;\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Nonnull\n    @Override\n    public Iterable<? extends PropertyState> getProperties() {\n        ReadStatus rs = getReadStatus();\n        if (rs.includes(ReadStatus.ALLOW_PROPERTIES)) {\n            // all properties are readable\n            return state.getProperties();\n        } else if (rs.appliesToThis()) {\n            // some properties may be readable\n            return Iterables.filter(state.getProperties(), isPropertyReadable);\n        } else {\n            // property access is denied\n            return Collections.emptySet();\n        }\n    }","id":70348,"modified_method":"@Override @Nonnull\n    public Iterable<? extends PropertyState> getProperties() {\n        if (context.canReadAllProperties()) {\n            return state.getProperties();\n        } else if (context.canReadThisNode()) {\n            return filter(state.getProperties(), isPropertyReadable);\n        } else {\n            return Collections.emptySet();\n        }\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public boolean equals(Object object) {\n        if (object == this) {\n            return true;\n        } else if (object instanceof SecureNodeState) {\n            SecureNodeState that = (SecureNodeState) object;\n            // TODO: We should be able to do this optimization also across\n            // different revisions (root states) as long as the path,\n            // the subtree, and any security-related areas like the\n            // permission store are equal for both states.\n            if (root.equals(that.root)\n                    && base.getPath().equals(that.base.getPath())) {\n                return true;\n            }\n        }\n        return super.equals(object);\n    }","id":70349,"modified_method":"@Override\n    public boolean equals(Object object) {\n        if (object == this) {\n            return true;\n        } else if (object instanceof SecureNodeState) {\n            SecureNodeState that = (SecureNodeState) object;\n            // TODO: We should be able to do this optimization also across\n            // different revisions (root states) as long as the path,\n            // the subtree, and any security-related areas like the\n            // permission store are equal for both states.\n            if (state.equals(that.state) && context.equals(that.context)) {\n                return true;\n            }\n        }\n        return super.equals(object);\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override @CheckForNull\n    public PropertyState getProperty(String name) {\n        PropertyState property = state.getProperty(name);\n        if (property == null) {\n            return property;\n        }\n        ReadStatus rs = getReadStatus();\n        if (rs.includes(ReadStatus.ALLOW_PROPERTIES)) {\n            return property;\n        } else if (rs.appliesToThis()) {\n            // calculate for property individually\n            return (isPropertyReadable.apply(property)) ? property : null;\n        } else {\n            // property access is denied\n            return null;\n        }\n    }","id":70350,"modified_method":"@Override @CheckForNull\n    public PropertyState getProperty(String name) {\n        PropertyState property = state.getProperty(name);\n        if (property != null && context.canReadProperty(property)) {\n            return property;\n        } else {\n            return null;\n        }\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    @Nonnull\n    public Iterable<? extends ChildNodeEntry> getChildNodeEntries() {\n        if (getReadStatus().includes(ReadStatus.DENY_CHILDREN)) {\n            return Collections.emptySet();\n        } else {\n            // TODO: review if ALLOW_CHILDREN could be used as well although we\n            // don't know the type of all child-nodes where ac node would need special treatment\n            Iterable<ChildNodeEntry> readable = Iterables.transform(\n                    state.getChildNodeEntries(), wrapChildNodeEntry);\n            return Iterables.filter(readable, isIterableNode);\n        }\n    }","id":70351,"modified_method":"@Override @Nonnull\n    public Iterable<? extends ChildNodeEntry> getChildNodeEntries() {\n        if (context.canNotReadChildNodes()) {\n            return Collections.emptySet();\n        } else {\n            // TODO: review if ALLOW_CHILDREN could be used as well although we\n            // don't know the type of all child-nodes where ac node would need special treatment\n            Iterable<ChildNodeEntry> readable =\n                    transform(state.getChildNodeEntries(), wrapChildNodeEntry);\n            return filter(readable, isIterableNode);\n        }\n    }","commit_id":"324922fcb34962934bb56797783a1dd0398dac2e","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public void run() {\n        log.debug(\"Running background index task {}\", name);\n        String checkpoint = store.checkpoint(lifetime);\n        NodeStoreBranch branch = store.branch(checkpoint);\n        try {\n            NodeState after = branch.getHead();\n\n            NodeState before = null;\n            PropertyState async =\n                    after.getChildNode(\":async\").getProperty(name);\n            if (async != null && async.getType() == STRING) {\n                before = store.branch(async.getValue(STRING)).getHead();\n            }\n            if (before == null) {\n                before = MISSING_NODE;\n            }\n\n            NodeState processed = hook.processCommit(before, after);\n            NodeBuilder builder = processed.builder();\n            builder.child(\":async\").setProperty(name, checkpoint);\n            branch.setRoot(builder.getNodeState());\n            branch.merge(EmptyHook.INSTANCE); \n        } catch (CommitFailedException e) {\n            log.warn(\"Background index update \" + name + \" failed\", e);\n        }\n    }","id":70352,"modified_method":"@Override\n    public synchronized void run() {\n        log.debug(\"Running background index task {}\", name);\n        NodeStoreBranch branch = store.branch();\n        NodeBuilder builder = branch.getHead().builder();\n        NodeBuilder async = builder.child(ASYNC);\n\n        NodeState before = null;\n        PropertyState property = async.getProperty(name);\n        if (property != null && property.getType() == STRING) {\n            before = store.retrieve(property.getValue(STRING));\n        }\n        if (before == null) {\n            before = MISSING_NODE;\n        }\n\n        String checkpoint = store.checkpoint(lifetime);\n        NodeState after = store.retrieve(checkpoint);\n        if (after != null) {\n            CommitFailedException exception = EditorDiff.process(\n                    new IndexUpdate(provider, name, after, builder),\n                    before, after);\n            if (exception == null) {\n                try {\n                    async.setProperty(name, checkpoint);\n                    branch.setRoot(builder.getNodeState());\n                    branch.merge(EmptyHook.INSTANCE);\n                } catch (CommitFailedException e) {\n                    exception = e;\n                }\n            }\n\n            if (exception != null) {\n                if (!failing) {\n                    log.warn(\"Index update \" + name + \" failed\", exception);\n                }\n                failing = true;\n            } else {\n                if (failing) {\n                    log.info(\"Index update \" + name + \" no longer fails\");\n                }\n                failing = false;\n            }\n        }\n    }","commit_id":"bb8bbfbc5200f3a31403493edba7d53b9b515171","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public AsyncIndexUpdate(\n            @Nonnull String name,\n            @Nonnull NodeStore store,\n            @Nonnull IndexEditorProvider provider) {\n        this.name = checkNotNull(name);\n        this.store = checkNotNull(store);\n        this.hook = new EditorHook(\n                new IndexUpdateProvider(checkNotNull(provider), name));\n    }","id":70353,"modified_method":"public AsyncIndexUpdate(\n            @Nonnull String name,\n            @Nonnull NodeStore store,\n            @Nonnull IndexEditorProvider provider) {\n        this.name = checkNotNull(name);\n        this.store = checkNotNull(store);\n        this.provider = checkNotNull(provider);\n    }","commit_id":"bb8bbfbc5200f3a31403493edba7d53b9b515171","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testPollEnrichDefaultAggregationStrategyBody() throws Exception {\n\n        Thread.sleep(2000);\n        String enrichFilename = \"target/pollEnrich/enrich.txt\";\n        String msgText = \"Hello Camel\";\n        FileWriter enrichFile = new FileWriter(enrichFilename);\n        enrichFile.write(msgText);\n        enrichFile.close();\n\n        getMockEndpoint(\"mock:result\").expectedMinimumMessageCount(1);\n\n        assertMockEndpointsSatisfied();\n\n        List<Exchange> exchanges = getMockEndpoint(\"mock:result\").getExchanges();\n        assertEquals(1, exchanges.size());\n        Exchange ex = (Exchange) exchanges.get(0);\n        assertEquals(msgText, ex.getIn().getBody().toString());\n\n        //This file should be deleted but it's there when the test end, so we have to use AssertTrue for the moment\n        Thread.sleep(300);\n        File markerFile = new File(enrichFilename + \".camelLock\");\n        assertTrue(\"Camel markerFile \" + enrichFilename + \".camelLock did not get deleted after file consumption.\", markerFile.exists());\n    }","id":70354,"modified_method":"@Test\n    public void testPollEnrichDefaultAggregationStrategyBody() throws Exception {\n\n        getMockEndpoint(\"mock:start\").expectedBodiesReceived(\"Start\");\n\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"Big file\");\n        mock.expectedFileExists(\"target/enrich/.done/AAA.fin\");\n        mock.expectedFileExists(\"target/enrichdata/.done/AAA.dat\");\n\n        template.sendBodyAndHeader(\"file://target/enrich\", \"Start\", Exchange.FILE_NAME, \"AAA.fin\");\n\n        log.info(\"Sleeping for 1 sec before writing enrichdata file\");\n        Thread.sleep(1000);\n        template.sendBodyAndHeader(\"file://target/enrichdata\", \"Big file\", Exchange.FILE_NAME, \"AAA.dat\");\n        log.info(\"... write done\");\n\n        assertMockEndpointsSatisfied();\n        \n        // With Custom Aggregation Strategy The readLock continues to exist even if it should be deleted\n        // assertFileDoesNotExists(\"target/enrichdata/AAA.dat.camelLock\");\n    }","commit_id":"2d5000ea0bc16be3c7cddd6d7cec2c71772fae6b","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                from(\"timer:foo?period=1000&repeatCount=1\")\n                    .setBody().constant(\"Hello from Camel.\")\n                    .pollEnrich(\"file:target/pollEnrich?fileName=enrich.txt&readLock=markerFile\", new ReplaceAggregationStrategy())\n                    .convertBodyTo(String.class)\n                    .log(\"The body is ${body}\")\n                    .to(\"mock:result\");\n            }\n        };\n    }","id":70355,"modified_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                from(\"file://target/enrich?move=.done\")\n                    .to(\"mock:start\")\n                    .pollEnrich(\"file://target/enrichdata?readLock=markerFile&move=.done\", 10000, new ReplaceAggregationStrategy())\n                    .to(\"mock:result\");\n            }\n        };\n    }","commit_id":"2d5000ea0bc16be3c7cddd6d7cec2c71772fae6b","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testPollEnrichDefaultAggregationStrategyBody() throws Exception {\n\n        Thread.sleep(2000);\n        String enrichFilename = \"target/pollEnrich/enrich.txt\";\n        String msgText = \"Hello Camel\";\n        FileWriter enrichFile = new FileWriter(enrichFilename);\n        enrichFile.write(msgText);\n        enrichFile.close();\n\n        getMockEndpoint(\"mock:result\").expectedMinimumMessageCount(1);\n\n        assertMockEndpointsSatisfied();\n\n        List<Exchange> exchanges = getMockEndpoint(\"mock:result\").getExchanges();\n        assertEquals(1, exchanges.size());\n        Exchange ex = (Exchange) exchanges.get(0);\n        assertEquals(msgText, ex.getIn().getBody().toString());\n\n        // assert Camel markerFile got deleted\n        Thread.sleep(300);\n        File markerFile = new File(enrichFilename + \".camelLock\");\n        assertFalse(\"Camel markerFile \" + enrichFilename + \".camelLock did not get deleted after file consumption.\", markerFile.exists());\n    }","id":70356,"modified_method":"@Test\n    public void testPollEnrichDefaultAggregationStrategyBody() throws Exception {\n\n        getMockEndpoint(\"mock:start\").expectedBodiesReceived(\"Start\");\n\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"Big file\");\n        mock.expectedFileExists(\"target/enrich/.done/AAA.fin\");\n        mock.expectedFileExists(\"target/enrichdata/.done/AAA.dat\");\n\n        template.sendBodyAndHeader(\"file://target/enrich\", \"Start\", Exchange.FILE_NAME, \"AAA.fin\");\n\n        log.info(\"Sleeping for 1 sec before writing enrichdata file\");\n        Thread.sleep(1000);\n        template.sendBodyAndHeader(\"file://target/enrichdata\", \"Big file\", Exchange.FILE_NAME, \"AAA.dat\");\n        log.info(\"... write done\");\n\n        assertMockEndpointsSatisfied();\n        \n        assertFileDoesNotExists(\"target/enrichdata/AAA.dat.camelLock\");\n    }","commit_id":"2d5000ea0bc16be3c7cddd6d7cec2c71772fae6b","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                from(\"timer:foo?period=1000&repeatCount=1\")\n                    .setBody().constant(\"Hello from Camel.\")\n                    .pollEnrich(\"file:target/pollEnrich?fileName=enrich.txt&readLock=markerFile\")\n                    .convertBodyTo(String.class)\n                    .log(\"The body is ${body}\")\n                    .to(\"mock:result\");\n            }\n        };\n    }","id":70357,"modified_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                from(\"file://target/enrich?move=.done\")\n                    .to(\"mock:start\")\n                    .pollEnrich(\"file://target/enrichdata?readLock=markerFile&move=.done\", 10000)\n                    .to(\"mock:result\");\n            }\n        };\n    }","commit_id":"2d5000ea0bc16be3c7cddd6d7cec2c71772fae6b","url":"https://github.com/apache/camel"},{"original_method":"public void testConsumeAsync() throws Exception {\n        MockEndpoint before = getMockEndpoint(\"mock:before\");\n        before.expectedMessageCount(1);\n        before.assertIsSatisfied();\n\n        // file should still exist as its the async done that will complete it\n        assertTrue(\"File should not have been deleted\", new File(\"target/files/report.txt\").getAbsoluteFile().exists());\n\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(1);\n        mock.assertIsSatisfied();\n\n        oneExchangeDone.matchesMockWaitTime();\n\n        assertFalse(\"File should been deleted\", new File(\"target/files/report.txt\").getAbsoluteFile().exists());\n    }","id":70358,"modified_method":"public void testConsumeAsync() throws Exception {\n        getMockEndpoint(\"mock:before\").expectedBodiesReceived(\"Hello World\");\n        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"Hello World\");\n\n        // file should still exist as its the async done that will complete it\n        assertTrue(\"File should not have been deleted\", new File(\"target/files/report.txt\").exists());\n\n        oneExchangeDone.matchesMockWaitTime();\n        assertMockEndpointsSatisfied();\n\n        assertFalse(\"File should have been deleted\", new File(\"target/files/report.txt\").exists());\n    }","commit_id":"116fbc673e87251f675046356eefa2c6da9e8efa","url":"https://github.com/apache/camel"},{"original_method":"public void testExtractSomeQualifiedChildInjected() throws Exception {\n        nsmap.put(\"\", \"urn:c\");\n        invokeAndVerify(\"//child\", 'i', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), RESULTS_CHILD_NS_MIXED);\n    }","id":70359,"modified_method":"public void testExtractSomeQualifiedChildInjected() throws Exception {\n        nsmap.put(\"\", \"urn:c\");\n        String[] result = RESULTS_CHILD_NS_MIXED;\n        if (isJavaVersion(\"1.8\")) {\n            result = RESULTS_CHILD_NS_MIXED_JAVA8;\n        }\n        invokeAndVerify(\"//child\", 'i', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), result);\n    }","commit_id":"b0c572fe64464f93d03452698f852f7710535314","url":"https://github.com/apache/camel"},{"original_method":"public void testExtractWithNullNamespaceMap() throws Exception {\n        nsmap = null;\n        invokeAndVerify(\"//child\", 'i', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), RESULTS_CHILD_NO_NS_MIXED);\n    }","id":70360,"modified_method":"public void testExtractWithNullNamespaceMap() throws Exception {\n        nsmap = null;\n        String[] result = RESULTS_CHILD_NO_NS_MIXED;\n        if (isJavaVersion(\"1.8\")) {\n            result = RESULTS_CHILD_NO_NS_MIXED_JAVA8;\n        }\n        invokeAndVerify(\"//child\", 'i', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), result);\n    }","commit_id":"b0c572fe64464f93d03452698f852f7710535314","url":"https://github.com/apache/camel"},{"original_method":"public void testExtractChildInjected() throws Exception {\n        invokeAndVerify(\"//C:child\", 'i', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD);\n    }","id":70361,"modified_method":"public void testExtractChildInjected() throws Exception {\n        String[] result = RESULTS_CHILD;\n        if (isJavaVersion(\"1.8\")) {\n            result = RESULTS_CHILD_JAVA8;\n        }\n        invokeAndVerify(\"//C:child\", 'i', new ByteArrayInputStream(TEST_BODY), result);\n    }","commit_id":"b0c572fe64464f93d03452698f852f7710535314","url":"https://github.com/apache/camel"},{"original_method":"public void testExtractCxxxd() throws Exception {\n        invokeAndVerify(\"//C:c*d\", 'i', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD);\n    }","id":70362,"modified_method":"public void testExtractCxxxd() throws Exception {\n        String[] result =  RESULTS_CHILD;\n        if (isJavaVersion(\"1.8\")) {\n            result =  RESULTS_CHILD_JAVA8;\n        }\n        invokeAndVerify(\"//C:c*d\", 'i', new ByteArrayInputStream(TEST_BODY), result);\n    }","commit_id":"b0c572fe64464f93d03452698f852f7710535314","url":"https://github.com/apache/camel"},{"original_method":"public void testExtractSomeUnqualifiedChildInjected() throws Exception {\n        invokeAndVerify(\"//child\", 'i', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), RESULTS_CHILD_NO_NS_MIXED);\n    }","id":70363,"modified_method":"public void testExtractSomeUnqualifiedChildInjected() throws Exception {\n        String[] result = RESULTS_CHILD_NO_NS_MIXED;\n        if (isJavaVersion(\"1.8\"))  {\n            result = RESULTS_CHILD_NO_NS_MIXED_JAVA8;\n        }\n        invokeAndVerify(\"//child\", 'i', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), result);\n    }","commit_id":"b0c572fe64464f93d03452698f852f7710535314","url":"https://github.com/apache/camel"},{"original_method":"public void testExtractChildNSMixedInjected() throws Exception {\n        invokeAndVerify(\"//*:child\", 'i', new ByteArrayInputStream(TEST_BODY_NS_MIXED), RESULTS_CHILD_MIXED);\n    }","id":70364,"modified_method":"public void testExtractChildNSMixedInjected() throws Exception {\n        String[] result =  RESULTS_CHILD_MIXED;\n        if (isJavaVersion(\"1.8\")) {\n            result =  RESULTS_CHILD_MIXED_JAVA8;\n        }\n        invokeAndVerify(\"//*:child\", 'i', new ByteArrayInputStream(TEST_BODY_NS_MIXED), result);\n    }","commit_id":"b0c572fe64464f93d03452698f852f7710535314","url":"https://github.com/apache/camel"},{"original_method":"public void testSendMoreParentsMessageToTokenize() throws Exception {\n        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\n            \"<c:child some_attr='a' anotherAttr='a' xmlns:g=\\\"urn:g\\\" xmlns:d=\\\"urn:d\\\" xmlns:c=\\\"urn:c\\\"><\/c:child>\",\n            \"<c:child some_attr='b' anotherAttr='b' xmlns:g=\\\"urn:g\\\" xmlns:d=\\\"urn:d\\\" xmlns:c=\\\"urn:c\\\"/>\");\n\n        template.sendBody(\"direct:start\",\n            \"<?xml version='1.0' encoding='UTF-8'?><g:greatgrandparent xmlns:g='urn:g'><grandparent><uncle/><aunt>emma<\/aunt><c:parent xmlns:c='urn:c' xmlns:d=\\\"urn:d\\\">\"\n            + \"<c:child some_attr='a' anotherAttr='a'><\/c:child><c:child some_attr='b' anotherAttr='b'/><\/c:parent><\/grandparent><\/g:greatgrandparent>\");\n\n        assertMockEndpointsSatisfied();\n    }","id":70365,"modified_method":"public void testSendMoreParentsMessageToTokenize() throws Exception {\n        MockEndpoint result = getMockEndpoint(\"mock:result\");\n        if (isJavaVersion(\"1.8\"))  {\n            result.expectedBodiesReceived(\n                \"<c:child some_attr='a' anotherAttr='a' xmlns:c=\\\"urn:c\\\" xmlns:d=\\\"urn:d\\\" xmlns:g=\\\"urn:g\\\"><\/c:child>\",\n                \"<c:child some_attr='b' anotherAttr='b' xmlns:c=\\\"urn:c\\\" xmlns:d=\\\"urn:d\\\" xmlns:g=\\\"urn:g\\\"/>\");\n        } else {\n            result.expectedBodiesReceived(\n                \"<c:child some_attr='a' anotherAttr='a' xmlns:g=\\\"urn:g\\\" xmlns:d=\\\"urn:d\\\" xmlns:c=\\\"urn:c\\\"><\/c:child>\",\n                \"<c:child some_attr='b' anotherAttr='b' xmlns:g=\\\"urn:g\\\" xmlns:d=\\\"urn:d\\\" xmlns:c=\\\"urn:c\\\"/>\");\n        }\n\n        template.sendBody(\"direct:start\",\n            \"<?xml version='1.0' encoding='UTF-8'?><g:greatgrandparent xmlns:g='urn:g'><grandparent><uncle/><aunt>emma<\/aunt><c:parent xmlns:c='urn:c' xmlns:d=\\\"urn:d\\\">\"\n            + \"<c:child some_attr='a' anotherAttr='a'><\/c:child><c:child some_attr='b' anotherAttr='b'/><\/c:parent><\/grandparent><\/g:greatgrandparent>\");\n\n        assertMockEndpointsSatisfied();\n    }","commit_id":"b0c572fe64464f93d03452698f852f7710535314","url":"https://github.com/apache/camel"},{"original_method":"@Override\n\tpublic boolean handleSecurity(\n\t\tHttpServletRequest request, HttpServletResponse response) {\n\n\t\tString path = null;\n\n\t\tif (request.getDispatcherType() == DispatcherType.INCLUDE) {\n\t\t\tString pathInfo = (String)request.getAttribute(\n\t\t\t\tRequestDispatcher.INCLUDE_PATH_INFO);\n\n\t\t\tpath = pathInfo;\n\t\t}\n\t\telse {\n\t\t\tpath = request.getPathInfo();\n\t\t}\n\n\t\tif (path == null) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (path.indexOf('/') != 0) {\n\t\t\tpath = '/' + path;\n\t\t}\n\n\t\tif (path.startsWith(\"/META-INF/\") || path.startsWith(\"/OSGI-INF/\") ||\n\t\t\tpath.startsWith(\"/OSGI-OPT/\") || path.startsWith(\"/WEB-INF/\")) {\n\n\t\t\treturn forbiddenPath(request, response, path);\n\t\t}\n\n\t\tif (ListUtil.isNotEmpty(_webResourceCollectionDefinitions)) {\n\t\t\tfor (WebResourceCollectionDefinition\n\t\t\t\t\twebResourceCollectionDefinition :\n\t\t\t\t\t\t_webResourceCollectionDefinitions) {\n\n\t\t\t\tboolean forbidden = false;\n\n\t\t\t\t// URL pattern checks\n\n\t\t\t\tfor (String urlPattern :\n\t\t\t\t\t\twebResourceCollectionDefinition.getUrlPatterns()) {\n\n\t\t\t\t\tif (urlPattern.startsWith(\"*.\")) {\n\n\t\t\t\t\t\t// Servlet 3 spec section 12.2: extension mapping\n\n\t\t\t\t\t\t// Check for *.* pattern\n\n\t\t\t\t\t\tString patternExtension = urlPattern.substring(2);\n\n\t\t\t\t\t\tif (Validator.isNotNull(patternExtension) &&\n\t\t\t\t\t\t\tValidator.equals(\"*\", patternExtension)) {\n\n\t\t\t\t\t\t\tforbidden = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Check for extension\n\n\t\t\t\t\t\tint pathExtensionLastIndexOf = path.lastIndexOf(\".\");\n\n\t\t\t\t\t\tString pathExtension = path.substring(\n\t\t\t\t\t\t\tpathExtensionLastIndexOf + 1);\n\n\t\t\t\t\t\tif (Validator.equals(patternExtension, pathExtension)) {\n\t\t\t\t\t\t\tforbidden = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (urlPattern.endsWith(\"/*\")) {\n\n\t\t\t\t\t\t// Servlet 3 spec section 12.2: path mapping\n\n\t\t\t\t\t\tif (urlPattern.equals(\"/*\")) {\n\t\t\t\t\t\t\tforbidden = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tString pathCompare = path;\n\n\t\t\t\t\t\tString urlPatternPath = urlPattern.substring(\n\t\t\t\t\t\t\t0, urlPattern.indexOf(\"/*\") +1);\n\n\t\t\t\t\t\tint pathCompareSlashIndexOf = pathCompare.lastIndexOf(\n\t\t\t\t\t\t\t\"/\");\n\n\t\t\t\t\t\tif (pathCompareSlashIndexOf > 0) {\n\t\t\t\t\t\t\tpathCompare = pathCompare.substring(\n\t\t\t\t\t\t\t\t0, pathCompareSlashIndexOf +1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Validator.equals(urlPatternPath, pathCompare)) {\n\t\t\t\t\t\t\tforbidden = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (Validator.equals(urlPattern, path)) {\n\t\t\t\t\t\tforbidden = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (forbidden) {\n\t\t\t\t\tString requestMethod = request.getMethod();\n\n\t\t\t\t\t// Http method checks. Servlet 3 spec. 13.8.1\n\n\t\t\t\t\tList<String> httpMethods =\n\t\t\t\t\t\twebResourceCollectionDefinition.getHttpMethods();\n\n\t\t\t\t\tif (ListUtil.isNotEmpty(httpMethods) &&\n\t\t\t\t\t\t!httpMethods.contains(requestMethod)) {\n\n\t\t\t\t\t\tforbidden = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Http method exception checks. Servlet 3 spec. 13.8.1\n\n\t\t\t\t\tList<String> httpMethodExceptions =\n\t\t\t\t\t\twebResourceCollectionDefinition.\n\t\t\t\t\t\t\tgetHttpMethodExceptions();\n\n\t\t\t\t\tif (ListUtil.isNotEmpty(httpMethodExceptions) &&\n\t\t\t\t\t\thttpMethodExceptions.contains(requestMethod)) {\n\n\t\t\t\t\t\tforbidden = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (forbidden) {\n\t\t\t\t\treturn forbiddenPath(request, response, path);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}","id":70366,"modified_method":"@Override\n\tpublic boolean handleSecurity(\n\t\tHttpServletRequest request, HttpServletResponse response) {\n\n\t\tString path = null;\n\n\t\tif (request.getDispatcherType() == DispatcherType.INCLUDE) {\n\t\t\tString pathInfo = (String)request.getAttribute(\n\t\t\t\tRequestDispatcher.INCLUDE_PATH_INFO);\n\n\t\t\tpath = pathInfo;\n\t\t}\n\t\telse {\n\t\t\tpath = request.getPathInfo();\n\t\t}\n\n\t\tif (path == null) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (path.indexOf('/') != 0) {\n\t\t\tpath = '/' + path;\n\t\t}\n\n\t\tif (path.startsWith(\"/META-INF/\") || path.startsWith(\"/OSGI-INF/\") ||\n\t\t\tpath.startsWith(\"/OSGI-OPT/\") || path.startsWith(\"/WEB-INF/\")) {\n\n\t\t\treturn forbiddenPath(request, response, path);\n\t\t}\n\n\t\tif (ListUtil.isEmpty(_webResourceCollectionDefinitions)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (WebResourceCollectionDefinition\n\t\t\t\twebResourceCollectionDefinition :\n\t\t\t\t\t_webResourceCollectionDefinitions) {\n\n\t\t\tboolean forbidden = false;\n\n\t\t\t// URL pattern checks\n\n\t\t\tfor (String urlPattern :\n\t\t\t\t\twebResourceCollectionDefinition.getUrlPatterns()) {\n\n\t\t\t\tif (urlPattern.startsWith(\"*.\")) {\n\n\t\t\t\t\t// Servlet 3 spec section 12.2: extension mapping\n\n\t\t\t\t\t// Check for *.* pattern\n\n\t\t\t\t\tString patternExtension = urlPattern.substring(2);\n\n\t\t\t\t\tif (Validator.isNotNull(patternExtension) &&\n\t\t\t\t\t\tValidator.equals(\"*\", patternExtension)) {\n\n\t\t\t\t\t\tforbidden = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check for extension\n\n\t\t\t\t\tint pathExtensionLastIndexOf = path.lastIndexOf(\".\");\n\n\t\t\t\t\tString pathExtension = path.substring(\n\t\t\t\t\t\tpathExtensionLastIndexOf + 1);\n\n\t\t\t\t\tif (Validator.equals(patternExtension, pathExtension)) {\n\t\t\t\t\t\tforbidden = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (urlPattern.endsWith(\"/*\")) {\n\n\t\t\t\t\t// Servlet 3 spec section 12.2: path mapping\n\n\t\t\t\t\tif (urlPattern.equals(\"/*\")) {\n\t\t\t\t\t\tforbidden = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tString pathCompare = path;\n\n\t\t\t\t\tString urlPatternPath = urlPattern.substring(\n\t\t\t\t\t\t0, urlPattern.indexOf(\"/*\") +1);\n\n\t\t\t\t\tint pathCompareSlashIndexOf = pathCompare.lastIndexOf(\n\t\t\t\t\t\t\"/\");\n\n\t\t\t\t\tif (pathCompareSlashIndexOf > 0) {\n\t\t\t\t\t\tpathCompare = pathCompare.substring(\n\t\t\t\t\t\t\t0, pathCompareSlashIndexOf +1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Validator.equals(urlPatternPath, pathCompare)) {\n\t\t\t\t\t\tforbidden = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (Validator.equals(urlPattern, path)) {\n\t\t\t\t\tforbidden = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (forbidden) {\n\t\t\t\tString requestMethod = request.getMethod();\n\n\t\t\t\t// Http method checks. Servlet 3 spec. 13.8.1\n\n\t\t\t\tList<String> httpMethods =\n\t\t\t\t\twebResourceCollectionDefinition.getHttpMethods();\n\n\t\t\t\tif (ListUtil.isNotEmpty(httpMethods) &&\n\t\t\t\t\t!httpMethods.contains(requestMethod)) {\n\n\t\t\t\t\tforbidden = false;\n\t\t\t\t}\n\n\t\t\t\t// Http method exception checks. Servlet 3 spec. 13.8.1\n\n\t\t\t\tList<String> httpMethodExceptions =\n\t\t\t\t\twebResourceCollectionDefinition.\n\t\t\t\t\t\tgetHttpMethodExceptions();\n\n\t\t\t\tif (ListUtil.isNotEmpty(httpMethodExceptions) &&\n\t\t\t\t\thttpMethodExceptions.contains(requestMethod)) {\n\n\t\t\t\t\tforbidden = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (forbidden) {\n\t\t\t\treturn forbiddenPath(request, response, path);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}","commit_id":"2f8bdf68c5aa8deda1013d31d82ac4dbcd7f20ba","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n   * Process the incoming HttpServletRequest\n   * @param request\n   * @param response\n   * @exception ServletException\n   * @exception IOException\n   */\n  public void service (HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n  \tCommonUtils.setNoCache(response);\n\n    // Call to setCharacterEncoding method should be done before any call to req.getParameter() method.\n    try {\n        request.setCharacterEncoding(\"UTF-8\");\n    } catch (UnsupportedEncodingException uee) {\n        log.error(\"Unable to set UTF-8 character encoding!\", uee);\n    }\n\n    final IPersonManager personManager = PersonManagerFactory.getPersonManagerInstance();\n    \n    // Clear out the existing session for the user if they have one\n    String targetUid = null;\n    String originalUid = null;\n    boolean swap = false;\n    if (request.isRequestedSessionIdValid()) {\n    \ttry {\n            HttpSession s = request.getSession(false);\n    \t    //Check if this is a swapped user hitting the Login servlet\n    \t    originalUid = (String)s.getAttribute(SWAP_ORIGINAL_UID);\n\n    \t    //No original person in session so check for swap request\n    \t    if (originalUid == null) {\n        \t    targetUid = (String)s.getAttribute(SWAP_TARGET_UID);\n        \t    if (targetUid != null) {\n        \t        final IPerson person = personManager.getPerson(request);\n        \t        originalUid = person.getName();\n        \t        swap = true;\n        \t    }\n    \t    }\n    \t    else {\n    \t        final IPerson person = personManager.getPerson(request);\n    \t        targetUid = person.getName();\n    \t    }\n\n            s.invalidate();\n    \t} catch (IllegalStateException ise) {\n    \t\t// ISE indicates session was already invalidated.\n    \t\t// This is fine.  This servlet trying to guarantee that the session has been invalidated;\n    \t\t// it doesn't have to insist that it is the one that invalidated it.\n    \t\tif (log.isTraceEnabled()) {\n    \t\t\tlog.trace(\"LoginServlet attempted to invalidate an already invalid session.\", ise);\n    \t\t}\n    \t}\n    }\n\n  \t//  Create the user's session\n    HttpSession s = request.getSession(true);\n    \n  \tIPerson person = null;\n    try {\n        final HashMap principals;\n        final HashMap credentials;\n        \n        // Get the person object associated with the request\n        person = personManager.getPerson(request);\n        \n        //If doing an identity swap\n        if (targetUid != null && originalUid != null) {\n            if (swap) {\n                swapperLog.warn(\"Swapping identity for '\" + originalUid + \"' to '\" + targetUid + \"'\");\n\n                //Track the originating user\n                s.setAttribute(SWAP_ORIGINAL_UID, originalUid);\n                \n                //Setup the swapped person\n                person.setUserName(targetUid);\n            }\n            else {\n                swapperLog.warn(\"Reverting swapped identity from '\" + targetUid + \"' to '\" + originalUid + \"'\");\n                \n                person.setUserName(originalUid);\n            }\n            \n            //Setup the custom security context\n            final IdentitySwapperPrincipal identitySwapperPrincipal = new IdentitySwapperPrincipal(person);\n            final IdentitySwapperSecurityContext identitySwapperSecurityContext = new IdentitySwapperSecurityContext(identitySwapperPrincipal);\n            person.setSecurityContext(identitySwapperSecurityContext);\n            \n            principals = new HashMap();\n            credentials = new HashMap();\n        }\n        //Norm authN path\n        else {\n          // WE grab all of the principals and credentials from the request and load\n          // them into their respective HashMaps.\n          principals = getPropertyFromRequest (principalTokens, request);\n          credentials = getPropertyFromRequest (credentialTokens, request);\n        }\n\n      // Attempt to authenticate using the incoming request\n      m_authenticationService.authenticate(principals, credentials, person);\n    } catch (Exception e) {\n      // Log the exception\n      log.error(\"Exception authenticating the request\", e);\n      // Reset everything\n      request.getSession(false).invalidate();\n      // Add the authentication failure\n      request.getSession(true).setAttribute(\"up_authenticationError\", \"true\");\n      person = null;\n    }\n    \n    /* Grab the target functional name, if any, off the login request.\n     * Also any arguments for the target\n     * We will pass them  along after authentication.\n     */\n    String targetFname = request.getParameter(\"uP_fname\");\n    String targetArgs = request.getParameter(\"uP_args\");\n    \n    // create the redirect URL, adding fname and args parameters if necessary\n    String redirectTarget = null;\n\tif (targetFname == null){\n\t\tredirectTarget = request.getContextPath() + \"/\" + redirectString;\n\t} else {\n\t\tredirectTarget = request.getContextPath() + \"/\" +\n\t\t\"tag.idempotent.\" +  redirectString + \"?uP_fname=\" + URLEncoder.encode(targetFname, \"UTF-8\");\n\t\tif (targetArgs != null) {\n\t\t\tredirectTarget = redirectTarget + \"&uP_args=\" + URLEncoder.encode(targetArgs, \"UTF-8\");\n\t\t}\n\t}\n\n\tif (person == null || !person.getSecurityContext().isAuthenticated()) {\n     if ( request.getMethod().equals(\"POST\") )\n         request.getSession(false).setAttribute(\"up_authenticationAttempted\", \"true\");\n     // Preserve the attempted username so it can be redisplayed to the user by CLogin\n     String attemptedUserName = request.getParameter(\"userName\");\n     if (attemptedUserName != null)\n     \trequest.getSession(false).setAttribute(\"up_attemptedUserName\", request.getParameter(\"userName\"));\t\t\n\t}\n\n    response.sendRedirect(redirectTarget);\n\n  }","id":70367,"modified_method":"/**\n   * Process the incoming HttpServletRequest\n   * @param request\n   * @param response\n   * @exception ServletException\n   * @exception IOException\n   */\n  public void service (HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n  \tCommonUtils.setNoCache(response);\n\n    // Call to setCharacterEncoding method should be done before any call to req.getParameter() method.\n    try {\n        request.setCharacterEncoding(\"UTF-8\");\n    } catch (UnsupportedEncodingException uee) {\n        log.error(\"Unable to set UTF-8 character encoding!\", uee);\n    }\n\n    final IPersonManager personManager = PersonManagerFactory.getPersonManagerInstance();\n    \n    // Clear out the existing session for the user if they have one\n    String targetUid = null;\n    String originalUid = null;\n    boolean swap = false;\n    if (request.isRequestedSessionIdValid()) {\n    \ttry {\n            HttpSession s = request.getSession(false);\n    \t    //Check if this is a swapped user hitting the Login servlet\n    \t    originalUid = (String)s.getAttribute(SWAP_ORIGINAL_UID);\n\n    \t    //No original person in session so check for swap request\n    \t    if (originalUid == null) {\n        \t    targetUid = (String)s.getAttribute(SWAP_TARGET_UID);\n        \t    if (targetUid != null) {\n        \t        final IPerson person = personManager.getPerson(request);\n        \t        originalUid = person.getName();\n        \t        swap = true;\n        \t    }\n    \t    }\n    \t    else {\n    \t        final IPerson person = personManager.getPerson(request);\n    \t        targetUid = person.getName();\n    \t    }\n\n            s.invalidate();\n    \t} catch (IllegalStateException ise) {\n    \t\t// ISE indicates session was already invalidated.\n    \t\t// This is fine.  This servlet trying to guarantee that the session has been invalidated;\n    \t\t// it doesn't have to insist that it is the one that invalidated it.\n    \t\tif (log.isTraceEnabled()) {\n    \t\t\tlog.trace(\"LoginServlet attempted to invalidate an already invalid session.\", ise);\n    \t\t}\n    \t}\n    }\n\n  \t//  Create the user's session\n    HttpSession s = request.getSession(true);\n    \n  \tIPerson person = null;\n    try {\n        final HashMap principals;\n        final HashMap credentials;\n        \n        // Get the person object associated with the request\n        person = personManager.getPerson(request);\n        \n        //If doing an identity swap\n        if (targetUid != null && originalUid != null) {\n            if (swap) {\n                swapperLog.warn(\"Swapping identity for '\" + originalUid + \"' to '\" + targetUid + \"'\");\n\n                //Track the originating user\n                s.setAttribute(SWAP_ORIGINAL_UID, originalUid);\n                \n                //Setup the swapped person\n                person.setUserName(targetUid);\n            }\n            else {\n                swapperLog.warn(\"Reverting swapped identity from '\" + targetUid + \"' to '\" + originalUid + \"'\");\n                \n                person.setUserName(originalUid);\n            }\n            \n            //Setup the custom security context\n            final IdentitySwapperPrincipal identitySwapperPrincipal = new IdentitySwapperPrincipal(person);\n            final IdentitySwapperSecurityContext identitySwapperSecurityContext = new IdentitySwapperSecurityContext(identitySwapperPrincipal);\n            person.setSecurityContext(identitySwapperSecurityContext);\n            \n            principals = new HashMap();\n            credentials = new HashMap();\n        }\n        //Norm authN path\n        else {\n          // WE grab all of the principals and credentials from the request and load\n          // them into their respective HashMaps.\n          principals = getPropertyFromRequest (principalTokens, request);\n          credentials = getPropertyFromRequest (credentialTokens, request);\n        }\n\n      // Attempt to authenticate using the incoming request\n      m_authenticationService.authenticate(principals, credentials, person);\n    } catch (Exception e) {\n      // Log the exception\n      log.error(\"Exception authenticating the request\", e);\n      // Reset everything\n      request.getSession(false).invalidate();\n      // Add the authentication failure\n      request.getSession(true).setAttribute(\"up_authenticationError\", \"true\");\n      person = null;\n    }\n    \n    /* Grab the target functional name, if any, off the login request.\n     * Also any arguments for the target\n     * We will pass them  along after authentication.\n     */\n    String targetFname = request.getParameter(\"uP_fname\");\n    String targetArgs = request.getParameter(\"uP_args\");\n    \n    // create the redirect URL, adding fname and args parameters if necessary\n    String redirectTarget = null;\n\tif (targetFname == null){\n\t\tredirectTarget = request.getContextPath() + \"/\" + redirectString;\n\t} else {\n\t\tredirectTarget = request.getContextPath() + \"/\" +\n\t\t\"tag.idempotent.\" +  redirectString + \"?uP_fname=\" + URLEncoder.encode(targetFname, \"UTF-8\");\n\t\tif (targetArgs != null) {\n\t\t\tredirectTarget = redirectTarget + \"&uP_args=\" + URLEncoder.encode(targetArgs, \"UTF-8\");\n\t\t}\n\t}\n\n\tif (person == null || !person.getSecurityContext().isAuthenticated()) {\n     if ( request.getMethod().equals(\"POST\") )\n         request.getSession(false).setAttribute(\"up_authenticationAttempted\", \"true\");\n     // Preserve the attempted username so it can be redisplayed to the user by CLogin\n     String attemptedUserName = request.getParameter(\"userName\");\n     if (attemptedUserName != null)\n     \trequest.getSession(false).setAttribute(\"up_attemptedUserName\", request.getParameter(\"userName\"));\t\t\n\t}\n\n\tfinal String encodedRedirectURL = response.encodeRedirectURL(redirectTarget);\n    response.sendRedirect(encodedRedirectURL);\n\n  }","commit_id":"213e7e975f98edb2c01d4f9142623650061a8fc5","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n   * Process the incoming request and response.\n   * @param request HttpServletRequest object\n   * @param response HttpServletResponse object\n   * @throws ServletException\n   * @throws IOException\n   */\n  public void doGet (HttpServletRequest request, HttpServletResponse response)\n         throws ServletException, IOException {\n    init();\n    String redirect = getRedirectionUrl(request);\n    HttpSession session = request.getSession(false);\n\n    if (session != null) {\n        // Record that an authenticated user is requesting to log out\n        try {\n            IPerson person = PersonManagerFactory.getPersonManagerInstance().getPerson(request);\n            if (person != null && person.getSecurityContext().isAuthenticated()) {\n            \tEventPublisherLocator.getApplicationEventPublisher().publishEvent(new UserLoggedOutPortalEvent(this, person));\n            }\n        } catch (Exception e) {\n            log.error(\"Exception recording logout \" +\n                    \"associated with request \" + request, e);\n        }\n        \n        final String originalUid = (String)session.getAttribute(LoginServlet.SWAP_ORIGINAL_UID);\n        //Logging out from a swapped user, just redirect to the Login servlet\n        if (originalUid != null) {\n            redirect = request.getContextPath() + \"/Login\";\n        }\n        else {\n            // Clear out the existing session for the user\n            try {\n                session.invalidate();\n            } catch (IllegalStateException ise) {\n            \t// IllegalStateException indicates session was already invalidated.\n            \t// This is fine.  LogoutServlet is looking to guarantee the logged out session is invalid;\n            \t// it need not insist that it be the one to perform the invalidating.\n            \tif (log.isTraceEnabled()) {\n            \t\tlog.trace(\"LogoutServlet encountered IllegalStateException invalidating a presumably already-invalidated session.\", ise);\n            \t}\n            }\n        }\n    }\n\n    // Send the user back to the guest page\n    response.sendRedirect(redirect);\n  }","id":70368,"modified_method":"/**\n   * Process the incoming request and response.\n   * @param request HttpServletRequest object\n   * @param response HttpServletResponse object\n   * @throws ServletException\n   * @throws IOException\n   */\n  public void doGet (HttpServletRequest request, HttpServletResponse response)\n         throws ServletException, IOException {\n    init();\n    String redirect = getRedirectionUrl(request);\n    HttpSession session = request.getSession(false);\n\n    if (session != null) {\n        // Record that an authenticated user is requesting to log out\n        try {\n            IPerson person = PersonManagerFactory.getPersonManagerInstance().getPerson(request);\n            if (person != null && person.getSecurityContext().isAuthenticated()) {\n            \tEventPublisherLocator.getApplicationEventPublisher().publishEvent(new UserLoggedOutPortalEvent(this, person));\n            }\n        } catch (Exception e) {\n            log.error(\"Exception recording logout \" +\n                    \"associated with request \" + request, e);\n        }\n        \n        final String originalUid = (String)session.getAttribute(LoginServlet.SWAP_ORIGINAL_UID);\n        //Logging out from a swapped user, just redirect to the Login servlet\n        if (originalUid != null) {\n            redirect = request.getContextPath() + \"/Login\";\n        }\n        else {\n            // Clear out the existing session for the user\n            try {\n                session.invalidate();\n            } catch (IllegalStateException ise) {\n            \t// IllegalStateException indicates session was already invalidated.\n            \t// This is fine.  LogoutServlet is looking to guarantee the logged out session is invalid;\n            \t// it need not insist that it be the one to perform the invalidating.\n            \tif (log.isTraceEnabled()) {\n            \t\tlog.trace(\"LogoutServlet encountered IllegalStateException invalidating a presumably already-invalidated session.\", ise);\n            \t}\n            }\n        }\n    }\n\n    // Send the user back to the guest page\n    final String encodedRedirectURL = response.encodeRedirectURL(redirect);\n    response.sendRedirect(encodedRedirectURL);\n  }","commit_id":"213e7e975f98edb2c01d4f9142623650061a8fc5","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * Internal method just to clarify that the writableRequest should be used from here on out.\n     */\n    protected void doGetInternal(IWritableHttpServletRequest writableRequest, HttpServletResponse res) {\n        // Send the uPortal version in a header\n        final VersionsManager versionManager = VersionsManager.getInstance();\n        final Version version = versionManager.getVersion(IPermission.PORTAL_FRAMEWORK);\n        res.setHeader(\"uPortal-version\", \"uPortal_rel-\" + version.getMajor() + \"-\" + version.getMinor() + \"-\" + version.getMicro());\n\n        //Check if the servlet failed to initialize\n        if (fatalError) {\n            try {\n                res.sendRedirect(\"error/fatal.htm\");\n            } catch (IOException e) {\n                ExceptionHelper.genericTopHandler(Errors.bug,e);\n            }\n            return;\n        }\n\n        // Call to setCharacterEncoding method should be done before any call to req.getParameter() method.\n        try {\n            writableRequest.setCharacterEncoding(\"UTF-8\");\n        } catch (UnsupportedEncodingException uee) {\n            log.error(\"Unable to set UTF-8 character encoding!\", uee);\n        }\n\n        //Get the user's session\n        final HttpSession session = writableRequest.getSession(false);\n        if (session == null) {\n            try {\n                //Session is null, redirect to Login servlet\n                res.sendRedirect(writableRequest.getContextPath() + \"/Login\");\n            }\n            catch (Exception e) {\n                ExceptionHelper.genericTopHandler(Errors.bug, e);\n                ExceptionHelper.generateErrorPage(res, e);\n            }\n            \n            return;\n        }\n        \n        final ApplicationContext applicationContext = PortalApplicationContextLocator.getApplicationContext();\n        final IPersonManager personManager = (IPersonManager)applicationContext.getBean(\"personManager\", IPersonManager.class);\n\n        // Update the session timeout for an unauthenticated user.\n        final IPerson person = personManager.getPerson(writableRequest);\n        if (person != null && !person.getSecurityContext().isAuthenticated()) {\n\n            if (unauthenticatedUserSessionTimeout != 0) {\n                session.setMaxInactiveInterval(unauthenticatedUserSessionTimeout);\n                \n                if (log.isDebugEnabled()) {\n                    log.debug(\"Unauthenticated user session timeout set to: \" + unauthenticatedUserSessionTimeout);\n                }\n            }\n        }\n        \n        try {\n            final IRequestParameterProcessorController requestProcessorController = (IRequestParameterProcessorController)applicationContext.getBean(\"requestParameterProcessorController\", IRequestParameterProcessorController.class);\n            requestProcessorController.processParameters(writableRequest, res);\n\n            // Retrieve the user's UserInstance object\n            final IUserInstanceManager userInstanceManager = (IUserInstanceManager) applicationContext.getBean(\"userInstanceManager\", IUserInstanceManager.class);\n            final IUserInstance userInstance = userInstanceManager.getUserInstance(writableRequest);\n            \n            // fire away\n            final IPortalRenderingPipeline portalRenderingPipeline = (IPortalRenderingPipeline)applicationContext.getBean(\"portalRenderingPipeline\", IPortalRenderingPipeline.class);\n            portalRenderingPipeline.renderState(writableRequest, res, userInstance);\n        }\n        catch (Exception e) {\n            ExceptionHelper.genericTopHandler(Errors.bug, e);\n            ExceptionHelper.generateErrorPage(res, e);\n            return;\n        }\n    }","id":70369,"modified_method":"/**\n     * Internal method just to clarify that the writableRequest should be used from here on out.\n     */\n    protected void doGetInternal(IWritableHttpServletRequest writableRequest, HttpServletResponse res) {\n        // Send the uPortal version in a header\n        final VersionsManager versionManager = VersionsManager.getInstance();\n        final Version version = versionManager.getVersion(IPermission.PORTAL_FRAMEWORK);\n        res.setHeader(\"uPortal-version\", \"uPortal_rel-\" + version.getMajor() + \"-\" + version.getMinor() + \"-\" + version.getMicro());\n\n        //Check if the servlet failed to initialize\n        if (fatalError) {\n            try {\n                final String encodedRedirectURL = res.encodeRedirectURL(\"error/fatal.htm\");\n                res.sendRedirect(encodedRedirectURL);\n            } catch (IOException e) {\n                ExceptionHelper.genericTopHandler(Errors.bug,e);\n            }\n            return;\n        }\n\n        // Call to setCharacterEncoding method should be done before any call to req.getParameter() method.\n        try {\n            writableRequest.setCharacterEncoding(\"UTF-8\");\n        } catch (UnsupportedEncodingException uee) {\n            log.error(\"Unable to set UTF-8 character encoding!\", uee);\n        }\n\n        //Get the user's session\n        final HttpSession session = writableRequest.getSession(false);\n        if (session == null) {\n            try {\n                //Session is null, redirect to Login servlet\n                final String encodedRedirectURL = res.encodeRedirectURL(writableRequest.getContextPath() + \"/Login\");\n                res.sendRedirect(encodedRedirectURL);\n            }\n            catch (Exception e) {\n                ExceptionHelper.genericTopHandler(Errors.bug, e);\n                ExceptionHelper.generateErrorPage(res, e);\n            }\n            \n            return;\n        }\n        \n        final ApplicationContext applicationContext = PortalApplicationContextLocator.getApplicationContext();\n        final IPersonManager personManager = (IPersonManager)applicationContext.getBean(\"personManager\", IPersonManager.class);\n\n        // Update the session timeout for an unauthenticated user.\n        final IPerson person = personManager.getPerson(writableRequest);\n        if (person != null && !person.getSecurityContext().isAuthenticated()) {\n\n            if (unauthenticatedUserSessionTimeout != 0) {\n                session.setMaxInactiveInterval(unauthenticatedUserSessionTimeout);\n                \n                if (log.isDebugEnabled()) {\n                    log.debug(\"Unauthenticated user session timeout set to: \" + unauthenticatedUserSessionTimeout);\n                }\n            }\n        }\n        \n        try {\n            final IRequestParameterProcessorController requestProcessorController = (IRequestParameterProcessorController)applicationContext.getBean(\"requestParameterProcessorController\", IRequestParameterProcessorController.class);\n            requestProcessorController.processParameters(writableRequest, res);\n\n            // Retrieve the user's UserInstance object\n            final IUserInstanceManager userInstanceManager = (IUserInstanceManager) applicationContext.getBean(\"userInstanceManager\", IUserInstanceManager.class);\n            final IUserInstance userInstance = userInstanceManager.getUserInstance(writableRequest);\n            \n            // fire away\n            final IPortalRenderingPipeline portalRenderingPipeline = (IPortalRenderingPipeline)applicationContext.getBean(\"portalRenderingPipeline\", IPortalRenderingPipeline.class);\n            portalRenderingPipeline.renderState(writableRequest, res, userInstance);\n        }\n        catch (Exception e) {\n            ExceptionHelper.genericTopHandler(Errors.bug, e);\n            ExceptionHelper.generateErrorPage(res, e);\n            return;\n        }\n    }","commit_id":"213e7e975f98edb2c01d4f9142623650061a8fc5","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    protected void doGet(final HttpServletRequest req, final HttpServletResponse res)\n     throws ServletException, IOException {\n        final String msg = req.getParameter(\"message\");\n        final PrintWriter pw = res.getWriter();\n\n        pw.println(\"<form method='POST' name='eventingcmd'>\" +\n        \t\t     \"<input type='hidden' name='action' value=''/>\"+\n                     \"<input type='hidden' name='queue' value=''/>\" +\n                   \"<\/form>\");\n        pw.println(\"<script type='text/javascript'>\");\n        pw.println(\"function eventingsubmit(action, queue) {\" +\n                   \" document.forms['eventingcmd'].action.value = action;\" +\n                   \" document.forms['eventingcmd'].queue.value = queue;\" +\n                   \" document.forms['eventingcmd'].submit();\" +\n                   \"} <\/script>\");\n\n        pw.printf(\"<p class='statline ui-state-highlight'>Apache Sling Job Handling%s%n<\/p>\",\n                msg != null ? \" : \" + msg : \"\");\n        pw.println(\"<div class='ui-widget-header ui-corner-top buttonGroup'>\");\n        pw.println(\"<span style='float: left; margin-left: 1em'>Apache Sling Job Handling: Overall Statistics<\/span>\");\n        this.printForm(pw, null, \"Reset Stats\", \"reset\");\n        pw.println(\"<\/div>\");\n\n        pw.println(\"<table class='nicetable'><tbody>\");\n        String topics = this.jobConsumerManager.getTopics();\n        if ( topics == null ) {\n            topics = \"\";\n        } else {\n            final String[] allTopics = topics.split(\",\");\n            final StringBuilder sb = new StringBuilder();\n            boolean first = true;\n            for(final String t : allTopics) {\n                if ( first) {\n                    first = false;\n                } else {\n                    sb.append(\"<br/>\");\n                }\n                sb.append(t);\n            }\n            topics = sb.toString();\n        }\n        Statistics s = this.jobManager.getStatistics();\n        pw.printf(\"<tr><td>Start Time<\/td><td>%s<\/td><\/tr>\", formatDate(s.getStartTime()));\n        pw.printf(\"<tr><td>Local topic consumers: <\/td><td>%s<\/td><\/tr>\", topics);\n        pw.printf(\"<tr><td>Last Activated<\/td><td>%s<\/td><\/tr>\", formatDate(s.getLastActivatedJobTime()));\n        pw.printf(\"<tr><td>Last Finished<\/td><td>%s<\/td><\/tr>\", formatDate(s.getLastFinishedJobTime()));\n        pw.printf(\"<tr><td>Queued Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfQueuedJobs());\n        pw.printf(\"<tr><td>Active Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfActiveJobs());\n        pw.printf(\"<tr><td>Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfJobs());\n        pw.printf(\"<tr><td>Finished Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfFinishedJobs());\n        pw.printf(\"<tr><td>Failed Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfFailedJobs());\n        pw.printf(\"<tr><td>Cancelled Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfCancelledJobs());\n        pw.printf(\"<tr><td>Processed Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfProcessedJobs());\n        pw.printf(\"<tr><td>Average Processing Time<\/td><td>%s<\/td><\/tr>\", formatTime(s.getAverageProcessingTime()));\n        pw.printf(\"<tr><td>Average Waiting Time<\/td><td>%s<\/td><\/tr>\", formatTime(s.getAverageWaitingTime()));\n        pw.println(\"<\/tbody><\/table>\");\n        pw.println(\"<br/>\");\n\n        pw.println(\"<table class='nicetable'><tbody>\");\n        pw.println(\"<tr><th colspan='2'>Topology Capabilities<\/th><\/tr>\");\n        final TopologyCapabilities cap = this.configuration.getTopologyCapabilities();\n        if ( cap == null ) {\n            pw.print(\"<tr><td colspan='2'>No topology information available !<\/td><\/tr>\");\n        } else {\n            final Map<String, List<InstanceDescription>> instanceCaps = cap.getInstanceCapabilities();\n            for(final Map.Entry<String, List<InstanceDescription>> entry : instanceCaps.entrySet()) {\n                final StringBuilder sb = new StringBuilder();\n                for(final InstanceDescription id : entry.getValue()) {\n                    if ( sb.length() > 0 ) {\n                        sb.append(\"<br/>\");\n                    }\n                    if ( id.isLocal() ) {\n                        sb.append(\"<b>local<\/b>\");\n                    } else {\n                        sb.append(id.getSlingId());\n                    }\n                }\n                pw.printf(\"<tr><td>%s<\/td><td>%s<\/td><\/tr>\", entry.getKey(), sb.toString());\n            }\n        }\n        pw.println(\"<\/tbody><\/table>\");\n        pw.println(\"<br/>\");\n\n        pw.println(\"<p class='statline'>Scheduled Jobs<\/p>\");\n        pw.println(\"<table class='nicetable'><tbody>\");\n        final Collection<ScheduledJobInfo> infos = this.jobManager.getScheduledJobs();\n        if ( infos.size() == 0 ) {\n            pw.print(\"<tr><td colspan='5'>No jobs currently scheduled.<\/td><\/tr>\");\n        } else {\n            pw.println(\"<tr><th>Schedule<\/th><th>Job Topic<\/th><th>Schedules<\/th><\/tr>\");\n            int index = 1;\n            for(final ScheduledJobInfo info : infos) {\n                pw.printf(\"<tr><td><b>%s<\/b><\/td><td>%s<\/td><td>\",\n                        String.valueOf(index), info.getJobTopic());\n                boolean first = true;\n                for(final ScheduleInfo si : info.getSchedules() ) {\n                    if ( !first ) {\n                        pw.print(\"<br/>\");\n                    }\n                    first = false;\n                    switch ( si.getType() ) {\n                    case YEARLY : pw.printf(\"YEARLY %s %s : %s:%s\", si.getMonthOfYear(), si.getDayOfMonth(), si.getHourOfDay(), si.getMinuteOfHour());\n                                  break;\n                    case MONTHLY : pw.printf(\"MONTHLY %s : %s:%s\", si.getDayOfMonth(), si.getHourOfDay(), si.getMinuteOfHour());\n                                  break;\n                    case WEEKLY : pw.printf(\"WEEKLY %s : %s:%s\", si.getDayOfWeek(), si.getHourOfDay(), si.getMinuteOfHour());\n                                  break;\n                    case DAILY : pw.printf(\"DAILY %s:%s\", si.getHourOfDay(), si.getMinuteOfHour());\n                                 break;\n                    case HOURLY : pw.printf(\"HOURLY %s\", si.getMinuteOfHour());\n                                 break;\n                    case CRON : pw.printf(\"CRON %s\", si.getExpression());\n                                  break;\n                    default : pw.printf(\"AT %s\", si.getAt());\n                    }\n                }\n                pw.print(\"<\/td><\/tr>\");\n                index++;\n            }\n        }\n        pw.println(\"<\/tbody><\/table>\");\n        pw.println(\"<br/>\");\n\n        boolean isEmpty = true;\n        for(final Queue q : this.jobManager.getQueues()) {\n            isEmpty = false;\n            String queueName = q.getName();\n            pw.println(\"<div class='ui-widget-header ui-corner-top buttonGroup'>\");\n            pw.printf(\"<span style='float: left; margin-left: 1em'>Active JobQueue: %s %s<\/span>\", escape(q.getName()),\n                    q.isSuspended() ? \"(SUSPENDED)\" : \"\");\n            this.printForm(pw, queueName, \"Reset Stats\", \"reset\");\n            if ( q.isSuspended() ) {\n                this.printForm(pw, queueName, \"Resume\", \"resume\");\n            } else {\n                this.printForm(pw, queueName, \"Suspend\", \"suspend\");\n            }\n            this.printForm(pw, queueName, \"Test\", \"test\");\n            this.printForm(pw, queueName, \"Clear Queue\", \"clear\");\n            this.printForm(pw, queueName, \"Drop All\", \"dropall\");\n            pw.println(\"<\/div>\");\n            pw.println(\"<table class='nicetable'><tbody>\");\n\n            s = q.getStatistics();\n            final QueueConfiguration c = q.getConfiguration();\n            pw.println(\"<tr><th colspan='2'>Statistics<\/th><th colspan='2'>Configuration<\/th><\/tr>\");\n            pw.printf(\"<tr><td>Start Time<\/td><td>%s<\/td><td>Type<\/td><td>%s<\/td><\/tr>\", formatDate(s.getStartTime()), formatType(c.getType()));\n            pw.printf(\"<tr><td>Last Activated<\/td><td>%s<\/td><td>Topics<\/td><td>%s<\/td><\/tr>\", formatDate(s.getLastActivatedJobTime()), formatArray(c.getTopics()));\n            pw.printf(\"<tr><td>Last Finished<\/td><td>%s<\/td><td>Max Parallel<\/td><td>%s<\/td><\/tr>\", formatDate(s.getLastFinishedJobTime()), c.getMaxParallel());\n            pw.printf(\"<tr><td>Queued Jobs<\/td><td>%s<\/td><td>Max Retries<\/td><td>%s<\/td><\/tr>\", s.getNumberOfQueuedJobs(), c.getMaxRetries());\n            pw.printf(\"<tr><td>Active Jobs<\/td><td>%s<\/td><td>Retry Delay<\/td><td>%s ms<\/td><\/tr>\", s.getNumberOfActiveJobs(), c.getRetryDelayInMs());\n            pw.printf(\"<tr><td>Jobs<\/td><td>%s<\/td><td>Priority<\/td><td>%s<\/td><\/tr>\", s.getNumberOfJobs(), c.getThreadPriority());\n            pw.printf(\"<tr><td>Finished Jobs<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", s.getNumberOfFinishedJobs());\n            pw.printf(\"<tr><td>Failed Jobs<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", s.getNumberOfFailedJobs());\n            pw.printf(\"<tr><td>Cancelled Jobs<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", s.getNumberOfCancelledJobs());\n            pw.printf(\"<tr><td>Processed Jobs<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", s.getNumberOfProcessedJobs());\n            pw.printf(\"<tr><td>Average Processing Time<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", formatTime(s.getAverageProcessingTime()));\n            pw.printf(\"<tr><td>Average Waiting Time<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", formatTime(s.getAverageWaitingTime()));\n            pw.printf(\"<tr><td>Status Info<\/td><td colspan='3'>%s<\/td><\/tr>\", escape(q.getStateInfo()));\n            pw.println(\"<\/tbody><\/table>\");\n            pw.println(\"<br/>\");\n        }\n        if ( isEmpty ) {\n            pw.println(\"<p>No active queues.<\/p>\");\n            pw.println(\"<br/>\");\n        }\n\n        for(final TopicStatistics ts : this.jobManager.getTopicStatistics()) {\n            pw.println(\"<table class='nicetable'><tbody>\");\n            pw.printf(\"<tr><th colspan='2'>Topic Statistics: %s<\/th><\/tr>\", escape(ts.getTopic()));\n\n            pw.printf(\"<tr><td>Last Activated<\/td><td>%s<\/td><\/tr>\", formatDate(ts.getLastActivatedJobTime()));\n            pw.printf(\"<tr><td>Last Finished<\/td><td>%s<\/td><\/tr>\", formatDate(ts.getLastFinishedJobTime()));\n            pw.printf(\"<tr><td>Finished Jobs<\/td><td>%s<\/td><\/tr>\", ts.getNumberOfFinishedJobs());\n            pw.printf(\"<tr><td>Failed Jobs<\/td><td>%s<\/td><\/tr>\", ts.getNumberOfFailedJobs());\n            pw.printf(\"<tr><td>Cancelled Jobs<\/td><td>%s<\/td><\/tr>\", ts.getNumberOfCancelledJobs());\n            pw.printf(\"<tr><td>Processed Jobs<\/td><td>%s<\/td><\/tr>\", ts.getNumberOfProcessedJobs());\n            pw.printf(\"<tr><td>Average Processing Time<\/td><td>%s<\/td><\/tr>\", formatTime(ts.getAverageProcessingTime()));\n            pw.printf(\"<tr><td>Average Waiting Time<\/td><td>%s<\/td><\/tr>\", formatTime(ts.getAverageWaitingTime()));\n            pw.println(\"<\/tbody><\/table>\");\n            pw.println(\"<br/>\");\n        }\n\n        pw.println(\"<p class='statline'>Apache Sling Job Handling - Job Queue Configurations<\/p>\");\n        this.printQueueConfiguration(req, pw, this.configuration.getQueueConfigurationManager().getMainQueueConfiguration());\n        final InternalQueueConfiguration[] configs = this.configuration.getQueueConfigurationManager().getConfigurations();\n        for(final InternalQueueConfiguration c : configs ) {\n            this.printQueueConfiguration(req, pw, c);\n        }\n    }","id":70370,"modified_method":"@Override\n    protected void doGet(final HttpServletRequest req, final HttpServletResponse res)\n     throws ServletException, IOException {\n        final String msg = req.getParameter(\"message\");\n        final PrintWriter pw = res.getWriter();\n\n        pw.println(\"<form method='POST' name='eventingcmd'>\" +\n        \t\t     \"<input type='hidden' name='action' value=''/>\"+\n                     \"<input type='hidden' name='queue' value=''/>\" +\n                   \"<\/form>\");\n        pw.println(\"<script type='text/javascript'>\");\n        pw.println(\"function eventingsubmit(action, queue) {\" +\n                   \" document.forms['eventingcmd'].action.value = action;\" +\n                   \" document.forms['eventingcmd'].queue.value = queue;\" +\n                   \" document.forms['eventingcmd'].submit();\" +\n                   \"} <\/script>\");\n\n        pw.printf(\"<p class='statline ui-state-highlight'>Apache Sling Job Handling%s%n<\/p>\",\n                msg != null ? \" : \" + ResponseUtil.escapeXml(msg) : \"\");\n        pw.println(\"<div class='ui-widget-header ui-corner-top buttonGroup'>\");\n        pw.println(\"<span style='float: left; margin-left: 1em'>Apache Sling Job Handling: Overall Statistics<\/span>\");\n        this.printForm(pw, null, \"Reset Stats\", \"reset\");\n        pw.println(\"<\/div>\");\n\n        pw.println(\"<table class='nicetable'><tbody>\");\n        String topics = this.jobConsumerManager.getTopics();\n        if ( topics == null ) {\n            topics = \"\";\n        } else {\n            final String[] allTopics = topics.split(\",\");\n            final StringBuilder sb = new StringBuilder();\n            boolean first = true;\n            for(final String t : allTopics) {\n                if ( first) {\n                    first = false;\n                } else {\n                    sb.append(\"<br/>\");\n                }\n                sb.append(ResponseUtil.escapeXml(t));\n            }\n            topics = sb.toString();\n        }\n        Statistics s = this.jobManager.getStatistics();\n        pw.printf(\"<tr><td>Start Time<\/td><td>%s<\/td><\/tr>\", formatDate(s.getStartTime()));\n        pw.printf(\"<tr><td>Local topic consumers: <\/td><td>%s<\/td><\/tr>\", topics);\n        pw.printf(\"<tr><td>Last Activated<\/td><td>%s<\/td><\/tr>\", formatDate(s.getLastActivatedJobTime()));\n        pw.printf(\"<tr><td>Last Finished<\/td><td>%s<\/td><\/tr>\", formatDate(s.getLastFinishedJobTime()));\n        pw.printf(\"<tr><td>Queued Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfQueuedJobs());\n        pw.printf(\"<tr><td>Active Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfActiveJobs());\n        pw.printf(\"<tr><td>Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfJobs());\n        pw.printf(\"<tr><td>Finished Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfFinishedJobs());\n        pw.printf(\"<tr><td>Failed Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfFailedJobs());\n        pw.printf(\"<tr><td>Cancelled Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfCancelledJobs());\n        pw.printf(\"<tr><td>Processed Jobs<\/td><td>%s<\/td><\/tr>\", s.getNumberOfProcessedJobs());\n        pw.printf(\"<tr><td>Average Processing Time<\/td><td>%s<\/td><\/tr>\", formatTime(s.getAverageProcessingTime()));\n        pw.printf(\"<tr><td>Average Waiting Time<\/td><td>%s<\/td><\/tr>\", formatTime(s.getAverageWaitingTime()));\n        pw.println(\"<\/tbody><\/table>\");\n        pw.println(\"<br/>\");\n\n        pw.println(\"<table class='nicetable'><tbody>\");\n        pw.println(\"<tr><th colspan='2'>Topology Capabilities<\/th><\/tr>\");\n        final TopologyCapabilities cap = this.configuration.getTopologyCapabilities();\n        if ( cap == null ) {\n            pw.print(\"<tr><td colspan='2'>No topology information available !<\/td><\/tr>\");\n        } else {\n            final Map<String, List<InstanceDescription>> instanceCaps = cap.getInstanceCapabilities();\n            for(final Map.Entry<String, List<InstanceDescription>> entry : instanceCaps.entrySet()) {\n                final StringBuilder sb = new StringBuilder();\n                for(final InstanceDescription id : entry.getValue()) {\n                    if ( sb.length() > 0 ) {\n                        sb.append(\"<br/>\");\n                    }\n                    if ( id.isLocal() ) {\n                        sb.append(\"<b>local<\/b>\");\n                    } else {\n                        sb.append(ResponseUtil.escapeXml(id.getSlingId()));\n                    }\n                }\n                pw.printf(\"<tr><td>%s<\/td><td>%s<\/td><\/tr>\", ResponseUtil.escapeXml(entry.getKey()), sb.toString());\n            }\n        }\n        pw.println(\"<\/tbody><\/table>\");\n        pw.println(\"<br/>\");\n\n        pw.println(\"<p class='statline'>Scheduled Jobs<\/p>\");\n        pw.println(\"<table class='nicetable'><tbody>\");\n        final Collection<ScheduledJobInfo> infos = this.jobManager.getScheduledJobs();\n        if ( infos.size() == 0 ) {\n            pw.print(\"<tr><td colspan='5'>No jobs currently scheduled.<\/td><\/tr>\");\n        } else {\n            pw.println(\"<tr><th>Schedule<\/th><th>Job Topic<\/th><th>Schedules<\/th><\/tr>\");\n            int index = 1;\n            for(final ScheduledJobInfo info : infos) {\n                pw.printf(\"<tr><td><b>%s<\/b><\/td><td>%s<\/td><td>\",\n                        String.valueOf(index), ResponseUtil.escapeXml(info.getJobTopic()));\n                boolean first = true;\n                for(final ScheduleInfo si : info.getSchedules() ) {\n                    if ( !first ) {\n                        pw.print(\"<br/>\");\n                    }\n                    first = false;\n                    switch ( si.getType() ) {\n                    case YEARLY : pw.printf(\"YEARLY %s %s : %s:%s\", si.getMonthOfYear(), si.getDayOfMonth(), si.getHourOfDay(), si.getMinuteOfHour());\n                                  break;\n                    case MONTHLY : pw.printf(\"MONTHLY %s : %s:%s\", si.getDayOfMonth(), si.getHourOfDay(), si.getMinuteOfHour());\n                                  break;\n                    case WEEKLY : pw.printf(\"WEEKLY %s : %s:%s\", si.getDayOfWeek(), si.getHourOfDay(), si.getMinuteOfHour());\n                                  break;\n                    case DAILY : pw.printf(\"DAILY %s:%s\", si.getHourOfDay(), si.getMinuteOfHour());\n                                 break;\n                    case HOURLY : pw.printf(\"HOURLY %s\", si.getMinuteOfHour());\n                                 break;\n                    case CRON : pw.printf(\"CRON %s\", ResponseUtil.escapeXml(si.getExpression()));\n                                  break;\n                    default : pw.printf(\"AT %s\", si.getAt());\n                    }\n                }\n                pw.print(\"<\/td><\/tr>\");\n                index++;\n            }\n        }\n        pw.println(\"<\/tbody><\/table>\");\n        pw.println(\"<br/>\");\n\n        boolean isEmpty = true;\n        for(final Queue q : this.jobManager.getQueues()) {\n            isEmpty = false;\n            final String queueName = q.getName();\n            pw.println(\"<div class='ui-widget-header ui-corner-top buttonGroup'>\");\n            pw.printf(\"<span style='float: left; margin-left: 1em'>Active JobQueue: %s %s<\/span>\", ResponseUtil.escapeXml(queueName),\n                    q.isSuspended() ? \"(SUSPENDED)\" : \"\");\n            this.printForm(pw, queueName, \"Reset Stats\", \"reset\");\n            if ( q.isSuspended() ) {\n                this.printForm(pw, queueName, \"Resume\", \"resume\");\n            } else {\n                this.printForm(pw, queueName, \"Suspend\", \"suspend\");\n            }\n            this.printForm(pw, queueName, \"Test\", \"test\");\n            this.printForm(pw, queueName, \"Drop All\", \"dropall\");\n            pw.println(\"<\/div>\");\n            pw.println(\"<table class='nicetable'><tbody>\");\n\n            s = q.getStatistics();\n            final QueueConfiguration c = q.getConfiguration();\n            pw.println(\"<tr><th colspan='2'>Statistics<\/th><th colspan='2'>Configuration<\/th><\/tr>\");\n            pw.printf(\"<tr><td>Start Time<\/td><td>%s<\/td><td>Type<\/td><td>%s<\/td><\/tr>\", formatDate(s.getStartTime()), formatType(c.getType()));\n            pw.printf(\"<tr><td>Last Activated<\/td><td>%s<\/td><td>Topics<\/td><td>%s<\/td><\/tr>\", formatDate(s.getLastActivatedJobTime()), formatArray(c.getTopics()));\n            pw.printf(\"<tr><td>Last Finished<\/td><td>%s<\/td><td>Max Parallel<\/td><td>%s<\/td><\/tr>\", formatDate(s.getLastFinishedJobTime()), c.getMaxParallel());\n            pw.printf(\"<tr><td>Queued Jobs<\/td><td>%s<\/td><td>Max Retries<\/td><td>%s<\/td><\/tr>\", s.getNumberOfQueuedJobs(), c.getMaxRetries());\n            pw.printf(\"<tr><td>Active Jobs<\/td><td>%s<\/td><td>Retry Delay<\/td><td>%s ms<\/td><\/tr>\", s.getNumberOfActiveJobs(), c.getRetryDelayInMs());\n            pw.printf(\"<tr><td>Jobs<\/td><td>%s<\/td><td>Priority<\/td><td>%s<\/td><\/tr>\", s.getNumberOfJobs(), c.getThreadPriority());\n            pw.printf(\"<tr><td>Finished Jobs<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", s.getNumberOfFinishedJobs());\n            pw.printf(\"<tr><td>Failed Jobs<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", s.getNumberOfFailedJobs());\n            pw.printf(\"<tr><td>Cancelled Jobs<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", s.getNumberOfCancelledJobs());\n            pw.printf(\"<tr><td>Processed Jobs<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", s.getNumberOfProcessedJobs());\n            pw.printf(\"<tr><td>Average Processing Time<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", formatTime(s.getAverageProcessingTime()));\n            pw.printf(\"<tr><td>Average Waiting Time<\/td><td>%s<\/td><td colspan='2'>&nbsp<\/td><\/tr>\", formatTime(s.getAverageWaitingTime()));\n            pw.printf(\"<tr><td>Status Info<\/td><td colspan='3'>%s<\/td><\/tr>\", ResponseUtil.escapeXml(q.getStateInfo()));\n            pw.println(\"<\/tbody><\/table>\");\n            pw.println(\"<br/>\");\n        }\n        if ( isEmpty ) {\n            pw.println(\"<p>No active queues.<\/p>\");\n            pw.println(\"<br/>\");\n        }\n\n        for(final TopicStatistics ts : this.jobManager.getTopicStatistics()) {\n            pw.println(\"<table class='nicetable'><tbody>\");\n            pw.printf(\"<tr><th colspan='2'>Topic Statistics: %s<\/th><\/tr>\", ResponseUtil.escapeXml(ts.getTopic()));\n\n            pw.printf(\"<tr><td>Last Activated<\/td><td>%s<\/td><\/tr>\", formatDate(ts.getLastActivatedJobTime()));\n            pw.printf(\"<tr><td>Last Finished<\/td><td>%s<\/td><\/tr>\", formatDate(ts.getLastFinishedJobTime()));\n            pw.printf(\"<tr><td>Finished Jobs<\/td><td>%s<\/td><\/tr>\", ts.getNumberOfFinishedJobs());\n            pw.printf(\"<tr><td>Failed Jobs<\/td><td>%s<\/td><\/tr>\", ts.getNumberOfFailedJobs());\n            pw.printf(\"<tr><td>Cancelled Jobs<\/td><td>%s<\/td><\/tr>\", ts.getNumberOfCancelledJobs());\n            pw.printf(\"<tr><td>Processed Jobs<\/td><td>%s<\/td><\/tr>\", ts.getNumberOfProcessedJobs());\n            pw.printf(\"<tr><td>Average Processing Time<\/td><td>%s<\/td><\/tr>\", formatTime(ts.getAverageProcessingTime()));\n            pw.printf(\"<tr><td>Average Waiting Time<\/td><td>%s<\/td><\/tr>\", formatTime(ts.getAverageWaitingTime()));\n            pw.println(\"<\/tbody><\/table>\");\n            pw.println(\"<br/>\");\n        }\n\n        pw.println(\"<p class='statline'>Apache Sling Job Handling - Job Queue Configurations<\/p>\");\n        this.printQueueConfiguration(req, pw, this.configuration.getQueueConfigurationManager().getMainQueueConfiguration());\n        final InternalQueueConfiguration[] configs = this.configuration.getQueueConfigurationManager().getConfigurations();\n        for(final InternalQueueConfiguration c : configs ) {\n            this.printQueueConfiguration(req, pw, c);\n        }\n    }","commit_id":"c3774fd4765c9b9f18be1ed0844a8d9d5058f9e8","url":"https://github.com/apache/sling"},{"original_method":"/**\n     * Format an array for html rendering.\n     */\n    private String formatArray(final String[] array) {\n        if ( array == null || array.length == 0 ) {\n            return \"\";\n        }\n        final StringBuilder sb = new StringBuilder();\n        boolean first = true;\n        for(final String s : array ) {\n            if ( !first ) {\n                sb.append('\\n');\n            }\n            first = false;\n            sb.append(s);\n        }\n        return escape(sb.toString());\n    }","id":70371,"modified_method":"/**\n     * Format an array for html rendering.\n     */\n    private String formatArray(final String[] array) {\n        if ( array == null || array.length == 0 ) {\n            return \"\";\n        }\n        final StringBuilder sb = new StringBuilder();\n        boolean first = true;\n        for(final String s : array ) {\n            if ( !first ) {\n                sb.append('\\n');\n            }\n            first = false;\n            sb.append(s);\n        }\n        return ResponseUtil.escapeXml(sb.toString());\n    }","commit_id":"c3774fd4765c9b9f18be1ed0844a8d9d5058f9e8","url":"https://github.com/apache/sling"},{"original_method":"private void startTestJob() {\n        logger.info(\"Adding test job.\");\n        this.jobManager.addJob(SLING_WEBCONSOLE_TEST_JOB_TOPIC, null);\n    }","id":70372,"modified_method":"private void startTestJob() {\n        logger.info(\"Adding test job: {}\", SLING_WEBCONSOLE_TEST_JOB_TOPIC);\n        this.jobManager.addJob(SLING_WEBCONSOLE_TEST_JOB_TOPIC, null);\n    }","commit_id":"c3774fd4765c9b9f18be1ed0844a8d9d5058f9e8","url":"https://github.com/apache/sling"},{"original_method":"private void printForm(final PrintWriter pw,\n            final String qeueName,\n            final String buttonLabel,\n            final String cmd) {\n        pw.printf(\"<button class='ui-state-default ui-corner-all' onclick='javascript:eventingsubmit(\\\"%s\\\", \\\"%s\\\");'>\" +\n                \"%s<\/button>\", cmd, (qeueName != null ? qeueName : \"\"), buttonLabel);\n    }","id":70373,"modified_method":"private void printForm(final PrintWriter pw,\n            final String qeueName,\n            final String buttonLabel,\n            final String cmd) {\n        pw.printf(\"<button class='ui-state-default ui-corner-all' onclick='javascript:eventingsubmit(\\\"%s\\\", \\\"%s\\\");'>\" +\n                \"%s<\/button>\", ResponseUtil.escapeXml(cmd), (qeueName != null ? ResponseUtil.escapeXml(qeueName) : \"\"), ResponseUtil.escapeXml(buttonLabel));\n    }","commit_id":"c3774fd4765c9b9f18be1ed0844a8d9d5058f9e8","url":"https://github.com/apache/sling"},{"original_method":"private void printQueueConfiguration(final HttpServletRequest req, final PrintWriter pw, final InternalQueueConfiguration c) {\n        pw.println(\"<div class='ui-widget-header ui-corner-top buttonGroup'>\");\n        pw.printf(\"<span style='float: left; margin-left: 1em'>Job Queue Configuration: %s<\/span>%n\",\n                escape(c.getName()));\n        pw.printf(\"<button id='edit' class='ui-state-default ui-corner-all' onclick='javascript:window.location=\\\"%s%s/configMgr/%s\\\";'>Edit<\/button>\",\n                req.getContextPath(), req.getServletPath(), c.getPid());\n        this.printForm(pw, c.getName(), \"Test\", \"test\");\n\n        pw.println(\"<\/div>\");\n        pw.println(\"<table class='nicetable'><tbody>\");\n        pw.println(\"<tr><th colspan='2'>Configuration<\/th><\/tr>\");\n        pw.printf(\"<tr><td>Valid<\/td><td>%s<\/td><\/tr>\", c.isValid());\n        pw.printf(\"<tr><td>Type<\/td><td>%s<\/td><\/tr>\", formatType(c.getType()));\n        pw.printf(\"<tr><td>Topics<\/td><td>%s<\/td><\/tr>\", formatArray(c.getTopics()));\n        pw.printf(\"<tr><td>Max Parallel<\/td><td>%s<\/td><\/tr>\", c.getMaxParallel());\n        pw.printf(\"<tr><td>Max Retries<\/td><td>%s<\/td><\/tr>\", c.getMaxRetries());\n        pw.printf(\"<tr><td>Retry Delay<\/td><td>%s ms<\/td><\/tr>\", c.getRetryDelayInMs());\n        pw.printf(\"<tr><td>Priority<\/td><td>%s<\/td><\/tr>\", c.getPriority());\n        pw.printf(\"<tr><td>Ranking<\/td><td>%s<\/td><\/tr>\", c.getRanking());\n\n        pw.println(\"<\/tbody><\/table>\");\n        pw.println(\"<br/>\");\n    }","id":70374,"modified_method":"private void printQueueConfiguration(final HttpServletRequest req, final PrintWriter pw, final InternalQueueConfiguration c) {\n        pw.println(\"<div class='ui-widget-header ui-corner-top buttonGroup'>\");\n        pw.printf(\"<span style='float: left; margin-left: 1em'>Job Queue Configuration: %s<\/span>%n\",\n                ResponseUtil.escapeXml(c.getName()));\n        pw.printf(\"<button id='edit' class='ui-state-default ui-corner-all' onclick='javascript:window.location=\\\"%s%s/configMgr/%s\\\";'>Edit<\/button>\",\n                req.getContextPath(), req.getServletPath(), c.getPid());\n        this.printForm(pw, c.getName(), \"Test\", \"test\");\n\n        pw.println(\"<\/div>\");\n        pw.println(\"<table class='nicetable'><tbody>\");\n        pw.println(\"<tr><th colspan='2'>Configuration<\/th><\/tr>\");\n        pw.printf(\"<tr><td>Valid<\/td><td>%s<\/td><\/tr>\", c.isValid());\n        pw.printf(\"<tr><td>Type<\/td><td>%s<\/td><\/tr>\", formatType(c.getType()));\n        pw.printf(\"<tr><td>Topics<\/td><td>%s<\/td><\/tr>\", formatArray(c.getTopics()));\n        pw.printf(\"<tr><td>Max Parallel<\/td><td>%s<\/td><\/tr>\", c.getMaxParallel());\n        pw.printf(\"<tr><td>Max Retries<\/td><td>%s<\/td><\/tr>\", c.getMaxRetries());\n        pw.printf(\"<tr><td>Retry Delay<\/td><td>%s ms<\/td><\/tr>\", c.getRetryDelayInMs());\n        pw.printf(\"<tr><td>Priority<\/td><td>%s<\/td><\/tr>\", c.getPriority());\n        pw.printf(\"<tr><td>Ranking<\/td><td>%s<\/td><\/tr>\", c.getRanking());\n\n        pw.println(\"<\/tbody><\/table>\");\n        pw.println(\"<br/>\");\n    }","commit_id":"c3774fd4765c9b9f18be1ed0844a8d9d5058f9e8","url":"https://github.com/apache/sling"},{"original_method":"@Override\n    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n    throws ServletException, IOException {\n        String msg = null;\n        final String cmd = req.getParameter(\"action\");\n        if ( \"suspend\".equals(cmd) ) {\n            final Queue q = this.getQueue(req);\n            if ( q != null ) {\n                q.suspend();\n            } else {\n                msg = this.getQueueErrorMessage(req, \"suspend\");\n            }\n        } else if ( \"resume\".equals(cmd) ) {\n            final Queue q = this.getQueue(req);\n            if ( q != null ) {\n                q.resume();\n            } else {\n                msg = this.getQueueErrorMessage(req, \"resume\");\n            }\n        } else if ( \"clear\".equals(cmd) ) {\n            final Queue q = this.getQueue(req);\n            if ( q != null ) {\n                q.clear();\n            } else {\n                msg = this.getQueueErrorMessage(req, \"clear\");\n            }\n        } else if ( \"reset\".equals(cmd) ) {\n            if ( req.getParameter(PAR_QUEUE) == null || req.getParameter(PAR_QUEUE).length() == 0 ) {\n                this.jobManager.getStatistics().reset();\n            } else {\n                final Queue q = this.getQueue(req);\n                if ( q != null ) {\n                    q.getStatistics().reset();\n                } else {\n                    msg = this.getQueueErrorMessage(req, \"reset\");\n                }\n            }\n        } else if ( \"test\".equals(cmd) ) {\n            this.startTestJob();\n        } else if ( \"dropall\".equals(cmd) ) {\n            final Queue q = this.getQueue(req);\n            if ( q != null ) {\n                q.removeAll();\n            } else {\n                msg = this.getQueueErrorMessage(req, \"drop all\");\n            }\n        } else {\n            msg = \"Unknown command\";\n        }\n        final String path = req.getContextPath() + req.getServletPath() + req.getPathInfo();\n        final String redirectTo;\n        if ( msg == null ) {\n            redirectTo = path;\n        } else {\n            redirectTo = path + \"?message=\" + msg;\n        }\n        resp.sendRedirect(redirectTo);\n    }","id":70375,"modified_method":"@Override\n    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n    throws ServletException, IOException {\n        String msg = null;\n        final String cmd = req.getParameter(\"action\");\n        if ( \"suspend\".equals(cmd) ) {\n            final Queue q = this.getQueue(req);\n            if ( q != null ) {\n                q.suspend();\n            } else {\n                msg = this.getQueueErrorMessage(req, \"suspend\");\n            }\n        } else if ( \"resume\".equals(cmd) ) {\n            final Queue q = this.getQueue(req);\n            if ( q != null ) {\n                q.resume();\n            } else {\n                msg = this.getQueueErrorMessage(req, \"resume\");\n            }\n        } else if ( \"reset\".equals(cmd) ) {\n            if ( req.getParameter(PAR_QUEUE) == null || req.getParameter(PAR_QUEUE).length() == 0 ) {\n                this.jobManager.getStatistics().reset();\n            } else {\n                final Queue q = this.getQueue(req);\n                if ( q != null ) {\n                    q.getStatistics().reset();\n                } else {\n                    msg = this.getQueueErrorMessage(req, \"reset\");\n                }\n            }\n        } else if ( \"test\".equals(cmd) ) {\n            this.startTestJob();\n        } else if ( \"dropall\".equals(cmd) ) {\n            final Queue q = this.getQueue(req);\n            if ( q != null ) {\n                q.removeAll();\n            } else {\n                msg = this.getQueueErrorMessage(req, \"drop all\");\n            }\n        } else {\n            msg = \"Unknown command\";\n        }\n        final String path = req.getContextPath() + req.getServletPath() + req.getPathInfo();\n        final String redirectTo;\n        if ( msg == null ) {\n            redirectTo = path;\n        } else {\n            redirectTo = path + \"?message=\" + URLEncoder.encode(msg, \"UTF-8\");\n        }\n        resp.sendRedirect(resp.encodeRedirectURL(redirectTo));\n    }","commit_id":"c3774fd4765c9b9f18be1ed0844a8d9d5058f9e8","url":"https://github.com/apache/sling"},{"original_method":"@Override\n    public JobResult process(final Job job) {\n        logger.info(\"Received test event.\");\n        return JobResult.OK;\n    }","id":70376,"modified_method":"@Override\n    public JobResult process(final Job job) {\n        logger.info(\"Received test job {}\", job.getTopic());\n        return JobResult.OK;\n    }","commit_id":"c3774fd4765c9b9f18be1ed0844a8d9d5058f9e8","url":"https://github.com/apache/sling"},{"original_method":"/**\n\t * \n\t * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)\n\t */\n\tpublic void init(FilterConfig filterConfig) throws ServletException\n\t{\n\t\tthis.filterConfig = filterConfig;\n\t\tString filterMapping = filterConfig.getInitParameter(WicketFilter.FILTER_MAPPING_PARAM);\n\n\t\tif (SERVLET_PATH_HOLDER.equals(filterMapping))\n\t\t{\n\t\t\tservletMode = true;\n\t\t}\n\n\t\tfinal ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();\n\t\tfinal ClassLoader newClassLoader = getClassLoader();\n\t\ttry\n\t\t{\n\t\t\tif (previousClassLoader != newClassLoader)\n\t\t\t{\n\t\t\t\tThread.currentThread().setContextClassLoader(newClassLoader);\n\t\t\t}\n\n\t\t\t// Try to configure filterPath from web.xml if it's not specified as\n\t\t\t// an init-param.\n\t\t\tif (filterMapping == null)\n\t\t\t{\n\t\t\t\tInputStream is = filterConfig.getServletContext().getResourceAsStream(\n\t\t\t\t\t\t\"/WEB-INF/web.xml\");\n\t\t\t\tif (is != null)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tfilterPath = getFilterPath(filterConfig.getFilterName(), is);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ServletException e)\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.error(\"Error reading servlet/filter path from web.xml\", e);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (SecurityException e)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Swallow this at INFO.\n\t\t\t\t\t\tlog\n\t\t\t\t\t\t\t\t.info(\"Couldn't read web.xml to automatically pick up servlet/filter path: \"\n\t\t\t\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t\t\t}\n\t\t\t\t\tif (filterPath == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.info(\"Unable to parse filter mapping web.xml for \"\n\t\t\t\t\t\t\t\t+ filterConfig.getFilterName() + \". \"\n\t\t\t\t\t\t\t\t+ \"Configure with init-param \" + FILTER_MAPPING_PARAM\n\t\t\t\t\t\t\t\t+ \" if it is not \\\"/*\\\".\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tIWebApplicationFactory factory = getApplicationFactory();\n\n\t\t\t// Construct WebApplication subclass\n\t\t\tthis.webApplication = factory.createApplication(this);\n\n\t\t\t// Set this WicketFilter as the filter for the web application\n\t\t\tthis.webApplication.setWicketFilter(this);\n\n\t\t\t// Store instance of this application object in servlet context to\n\t\t\t// make integration with outside world easier\n\t\t\tString contextKey = \"wicket:\" + filterConfig.getFilterName();\n\t\t\tfilterConfig.getServletContext().setAttribute(contextKey, this.webApplication);\n\n\t\t\tApplication.set(webApplication);\n\n\t\t\t// Call internal init method of web application for default\n\t\t\t// initialisation\n\t\t\tthis.webApplication.internalInit();\n\n\t\t\t// Call init method of web application\n\t\t\tthis.webApplication.init();\n\n\t\t\t// We initialize components here rather than in the constructor or\n\t\t\t// in the internal init, because in the init method class aliases\n\t\t\t// can be added, that would be used in installing resources in the\n\t\t\t// component.\n\t\t\tthis.webApplication.initializeComponents();\n\n\t\t\t// Give the application the option to log that it is started\n\t\t\tthis.webApplication.logStarted();\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tApplication.unset();\n\t\t\tif (newClassLoader != previousClassLoader)\n\t\t\t{\n\t\t\t\tThread.currentThread().setContextClassLoader(previousClassLoader);\n\t\t\t}\n\t\t}\n\t}","id":70377,"modified_method":"/**\n\t * \n\t * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)\n\t */\n\tpublic void init(FilterConfig filterConfig) throws ServletException\n\t{\n\t\tthis.filterConfig = filterConfig;\n\t\tString filterMapping = filterConfig.getInitParameter(WicketFilter.FILTER_MAPPING_PARAM);\n\n\t\tif (SERVLET_PATH_HOLDER.equals(filterMapping))\n\t\t{\n\t\t\tservletMode = true;\n\t\t}\n\n\t\tfinal ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();\n\t\tfinal ClassLoader newClassLoader = getClassLoader();\n\t\ttry\n\t\t{\n\t\t\tif (previousClassLoader != newClassLoader)\n\t\t\t{\n\t\t\t\tThread.currentThread().setContextClassLoader(newClassLoader);\n\t\t\t}\n\n\t\t\t// Try to configure filterPath from web.xml if it's not specified as\n\t\t\t// an init-param.\n\t\t\tif (filterMapping == null)\n\t\t\t{\n\t\t\t\tInputStream is = filterConfig.getServletContext().getResourceAsStream(\n\t\t\t\t\t\t\"/WEB-INF/web.xml\");\n\t\t\t\tif (is != null)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tfilterPath = getFilterPath(filterConfig.getFilterName(), is);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ServletException e)\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.error(\"Error reading servlet/filter path from web.xml\", e);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (SecurityException e)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Swallow this at INFO.\n\t\t\t\t\t\tlog\n\t\t\t\t\t\t\t\t.info(\"Couldn't read web.xml to automatically pick up servlet/filter path: \" +\n\t\t\t\t\t\t\t\t\t\te.getMessage());\n\t\t\t\t\t}\n\t\t\t\t\tif (filterPath == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.info(\"Unable to parse filter mapping web.xml for \" +\n\t\t\t\t\t\t\t\tfilterConfig.getFilterName() + \". \" + \"Configure with init-param \" +\n\t\t\t\t\t\t\t\tFILTER_MAPPING_PARAM + \" if it is not \\\"/*\\\".\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tIWebApplicationFactory factory = getApplicationFactory();\n\n\t\t\t// Construct WebApplication subclass\n\t\t\twebApplication = factory.createApplication(this);\n\n\t\t\t// Set this WicketFilter as the filter for the web application\n\t\t\twebApplication.setWicketFilter(this);\n\n\t\t\t// Store instance of this application object in servlet context to\n\t\t\t// make integration with outside world easier\n\t\t\tString contextKey = \"wicket:\" + filterConfig.getFilterName();\n\t\t\tfilterConfig.getServletContext().setAttribute(contextKey, webApplication);\n\n\t\t\tApplication.set(webApplication);\n\n\t\t\t// Call internal init method of web application for default\n\t\t\t// initialisation\n\t\t\twebApplication.internalInit();\n\n\t\t\t// Call init method of web application\n\t\t\twebApplication.init();\n\n\t\t\t// We initialize components here rather than in the constructor or\n\t\t\t// in the internal init, because in the init method class aliases\n\t\t\t// can be added, that would be used in installing resources in the\n\t\t\t// component.\n\t\t\twebApplication.initializeComponents();\n\n\t\t\t// Give the application the option to log that it is started\n\t\t\twebApplication.logStarted();\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tApplication.unset();\n\t\t\tif (newClassLoader != previousClassLoader)\n\t\t\t{\n\t\t\t\tThread.currentThread().setContextClassLoader(previousClassLoader);\n\t\t\t}\n\t\t}\n\t}","commit_id":"51762447476408ddcc2b1881ddc6046c16631845","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Handles servlet page requests.\n\t * \n\t * @param servletRequest\n\t *            Servlet request object\n\t * @param servletResponse\n\t *            Servlet response object\n\t * @throws ServletException\n\t *             Thrown if something goes wrong during request handling\n\t * @throws IOException\n\t */\n\tpublic void doGet(final HttpServletRequest servletRequest,\n\t\t\tfinal HttpServletResponse servletResponse) throws ServletException, IOException\n\t{\n\t\tString relativePath = getRelativePath(servletRequest);\n\n\t\t// Special-case for home page - we redirect to add a trailing slash.\n\t\tif (relativePath.length() == 0\n\t\t\t\t&& !Strings.stripJSessionId(servletRequest.getRequestURI()).endsWith(\"/\"))\n\t\t{\n\t\t\tfinal String redirectUrl = servletRequest.getRequestURI() + \"/\";\n\t\t\tservletResponse.sendRedirect(redirectUrl);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();\n\t\tfinal ClassLoader newClassLoader = getClassLoader();\n\t\ttry\n\t\t{\n\t\t\tif (previousClassLoader != newClassLoader)\n\t\t\t{\n\t\t\t\tThread.currentThread().setContextClassLoader(newClassLoader);\n\t\t\t}\n\n\t\t\t// If the request does not provide information about the encoding of\n\t\t\t// its body (which includes POST parameters), than assume the\n\t\t\t// default encoding as defined by the wicket application. Bear in\n\t\t\t// mind that the encoding of the request usually is equal to the\n\t\t\t// previous response.\n\t\t\t// However it is a known bug of IE that it does not provide this\n\t\t\t// information. Please see the wiki for more details and why all\n\t\t\t// other browser deliberately copied that bug.\n\t\t\tif (servletRequest.getCharacterEncoding() == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// The encoding defined by the wicket settings is used to\n\t\t\t\t\t// encode the responses. Thus, it is reasonable to assume\n\t\t\t\t\t// the request has the same encoding. This is especially\n\t\t\t\t\t// important for forms and form parameters.\n\t\t\t\t\tservletRequest.setCharacterEncoding(webApplication.getRequestCycleSettings()\n\t\t\t\t\t\t\t.getResponseRequestEncoding());\n\t\t\t\t}\n\t\t\t\tcatch (UnsupportedEncodingException ex)\n\t\t\t\t{\n\t\t\t\t\tthrow new WicketRuntimeException(ex.getMessage());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create a new webrequest\n\t\t\tfinal WebRequest request = webApplication.newWebRequest(servletRequest);\n\n\t\t\t// Are we using REDIRECT_TO_BUFFER?\n\t\t\tif (webApplication.getRequestCycleSettings().getRenderStrategy() == IRequestCycleSettings.REDIRECT_TO_BUFFER)\n\t\t\t{\n\t\t\t\t// Try to see if there is a redirect stored\n\t\t\t\tISessionStore sessionStore = webApplication.getSessionStore();\n\t\t\t\tString sessionId = sessionStore.getSessionId(request, false);\n\t\t\t\tif (sessionId != null)\n\t\t\t\t{\n\t\t\t\t\tBufferedHttpServletResponse bufferedResponse = null;\n\t\t\t\t\tString queryString = servletRequest.getQueryString();\n\t\t\t\t\tif (!Strings.isEmpty(queryString))\n\t\t\t\t\t{\n\t\t\t\t\t\tbufferedResponse = webApplication.popBufferedResponse(sessionId, queryString);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbufferedResponse = webApplication.popBufferedResponse(sessionId, relativePath);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bufferedResponse != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbufferedResponse.writeTo(servletResponse);\n\t\t\t\t\t\t// redirect responses are ignored for the request\n\t\t\t\t\t\t// logger...\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// First, set the webapplication for this thread\n\t\t\tApplication.set(webApplication);\n\n\t\t\t// Create a response object and set the output encoding according to\n\t\t\t// wicket's application setttings.\n\t\t\tfinal WebResponse response = webApplication.newWebResponse(servletResponse);\n\t\t\tresponse.setAjax(request.isAjax());\n\t\t\tresponse.setCharacterEncoding(webApplication.getRequestCycleSettings()\n\t\t\t\t\t.getResponseRequestEncoding());\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Create request cycle\n\t\t\t\tRequestCycle cycle = webApplication.newRequestCycle(request, response);\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// Process request\n\t\t\t\t\tcycle.request();\n\t\t\t\t}\n\t\t\t\tcatch (AbortException e)\n\t\t\t\t{\n\t\t\t\t\t// noop\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\t// Close response\n\t\t\t\tresponse.close();\n\n\t\t\t\t// Clean up thread local session\n\t\t\t\tSession.unset();\n\n\t\t\t\t// Clean up thread local application\n\t\t\t\tApplication.unset();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (newClassLoader != previousClassLoader)\n\t\t\t{\n\t\t\t\tThread.currentThread().setContextClassLoader(previousClassLoader);\n\t\t\t}\n\t\t}\n\t}","id":70378,"modified_method":"/**\n\t * Handles servlet page requests.\n\t * \n\t * @param servletRequest\n\t *            Servlet request object\n\t * @param servletResponse\n\t *            Servlet response object\n\t * @throws ServletException\n\t *             Thrown if something goes wrong during request handling\n\t * @throws IOException\n\t */\n\tpublic void doGet(final HttpServletRequest servletRequest,\n\t\t\tfinal HttpServletResponse servletResponse) throws ServletException, IOException\n\t{\n\t\tString relativePath = getRelativePath(servletRequest);\n\n\t\t// Special-case for home page - we redirect to add a trailing slash.\n\t\tif (relativePath.length() == 0 &&\n\t\t\t\t!Strings.stripJSessionId(servletRequest.getRequestURI()).endsWith(\"/\"))\n\t\t{\n\t\t\tfinal String redirectUrl = servletRequest.getRequestURI() + \"/\";\n\t\t\tservletResponse.sendRedirect(servletResponse.encodeRedirectURL(redirectUrl));\n\t\t\treturn;\n\t\t}\n\n\t\tfinal ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();\n\t\tfinal ClassLoader newClassLoader = getClassLoader();\n\t\ttry\n\t\t{\n\t\t\tif (previousClassLoader != newClassLoader)\n\t\t\t{\n\t\t\t\tThread.currentThread().setContextClassLoader(newClassLoader);\n\t\t\t}\n\n\t\t\t// If the request does not provide information about the encoding of\n\t\t\t// its body (which includes POST parameters), than assume the\n\t\t\t// default encoding as defined by the wicket application. Bear in\n\t\t\t// mind that the encoding of the request usually is equal to the\n\t\t\t// previous response.\n\t\t\t// However it is a known bug of IE that it does not provide this\n\t\t\t// information. Please see the wiki for more details and why all\n\t\t\t// other browser deliberately copied that bug.\n\t\t\tif (servletRequest.getCharacterEncoding() == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// The encoding defined by the wicket settings is used to\n\t\t\t\t\t// encode the responses. Thus, it is reasonable to assume\n\t\t\t\t\t// the request has the same encoding. This is especially\n\t\t\t\t\t// important for forms and form parameters.\n\t\t\t\t\tservletRequest.setCharacterEncoding(webApplication.getRequestCycleSettings()\n\t\t\t\t\t\t\t.getResponseRequestEncoding());\n\t\t\t\t}\n\t\t\t\tcatch (UnsupportedEncodingException ex)\n\t\t\t\t{\n\t\t\t\t\tthrow new WicketRuntimeException(ex.getMessage());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create a new webrequest\n\t\t\tfinal WebRequest request = webApplication.newWebRequest(servletRequest);\n\n\t\t\t// Are we using REDIRECT_TO_BUFFER?\n\t\t\tif (webApplication.getRequestCycleSettings().getRenderStrategy() == IRequestCycleSettings.REDIRECT_TO_BUFFER)\n\t\t\t{\n\t\t\t\t// Try to see if there is a redirect stored\n\t\t\t\tISessionStore sessionStore = webApplication.getSessionStore();\n\t\t\t\tString sessionId = sessionStore.getSessionId(request, false);\n\t\t\t\tif (sessionId != null)\n\t\t\t\t{\n\t\t\t\t\tBufferedHttpServletResponse bufferedResponse = null;\n\t\t\t\t\tString queryString = servletRequest.getQueryString();\n\t\t\t\t\tif (!Strings.isEmpty(queryString))\n\t\t\t\t\t{\n\t\t\t\t\t\tbufferedResponse = webApplication.popBufferedResponse(sessionId,\n\t\t\t\t\t\t\t\tqueryString);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbufferedResponse = webApplication.popBufferedResponse(sessionId,\n\t\t\t\t\t\t\t\trelativePath);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bufferedResponse != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbufferedResponse.writeTo(servletResponse);\n\t\t\t\t\t\t// redirect responses are ignored for the request\n\t\t\t\t\t\t// logger...\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// First, set the webapplication for this thread\n\t\t\tApplication.set(webApplication);\n\n\t\t\t// Create a response object and set the output encoding according to\n\t\t\t// wicket's application setttings.\n\t\t\tfinal WebResponse response = webApplication.newWebResponse(servletResponse);\n\t\t\tresponse.setAjax(request.isAjax());\n\t\t\tresponse.setCharacterEncoding(webApplication.getRequestCycleSettings()\n\t\t\t\t\t.getResponseRequestEncoding());\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Create request cycle\n\t\t\t\tRequestCycle cycle = webApplication.newRequestCycle(request, response);\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// Process request\n\t\t\t\t\tcycle.request();\n\t\t\t\t}\n\t\t\t\tcatch (AbortException e)\n\t\t\t\t{\n\t\t\t\t\t// noop\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\t// Close response\n\t\t\t\tresponse.close();\n\n\t\t\t\t// Clean up thread local session\n\t\t\t\tSession.unset();\n\n\t\t\t\t// Clean up thread local application\n\t\t\t\tApplication.unset();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (newClassLoader != previousClassLoader)\n\t\t\t{\n\t\t\t\tThread.currentThread().setContextClassLoader(previousClassLoader);\n\t\t\t}\n\t\t}\n\t}","commit_id":"51762447476408ddcc2b1881ddc6046c16631845","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Servlet cleanup.\n\t */\n\tpublic void destroy()\n\t{\n\t\tif (this.webApplication != null)\n\t\t{\n\t\t\tthis.webApplication.internalDestroy();\n\t\t\tthis.webApplication = null;\n\t\t}\n\t}","id":70379,"modified_method":"/**\n\t * Servlet cleanup.\n\t */\n\tpublic void destroy()\n\t{\n\t\tif (webApplication != null)\n\t\t{\n\t\t\twebApplication.internalDestroy();\n\t\t\twebApplication = null;\n\t\t}\n\t}","commit_id":"51762447476408ddcc2b1881ddc6046c16631845","url":"https://github.com/apache/wicket"},{"original_method":"public List<SyncFile> findByS_U(\n\t\t\tlong syncAccountId, int uiEvent, String orderByColumn,\n\t\t\tboolean ascending)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncFile, Long> queryBuilder = queryBuilder();\n\n\t\tWhere<SyncFile, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\t\twhere.eq(\"uiEvent\", uiEvent);\n\n\t\twhere.and(2);\n\n\t\tqueryBuilder.orderBy(orderByColumn, ascending);\n\n\t\treturn query(queryBuilder.prepare());\n\t}","id":70380,"modified_method":"public List<SyncFile> findByS_U(\n\t\t\tlong syncAccountId, int uiEvent, String orderByColumn,\n\t\t\tboolean ascending)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncFile, Long> queryBuilder = queryBuilder();\n\n\t\tqueryBuilder.orderBy(orderByColumn, ascending);\n\n\t\tWhere<SyncFile, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\t\twhere.eq(\"uiEvent\", uiEvent);\n\n\t\twhere.and(2);\n\n\t\treturn where.query();\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SyncFile fetchByR_S_T(\n\t\t\tlong repositoryId, long syncAccountId, long typePK)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"repositoryId\", repositoryId);\n\t\tfieldValues.put(\"syncAccountId\", syncAccountId);\n\t\tfieldValues.put(\"typePK\", typePK);\n\n\t\tList<SyncFile> syncFiles = queryForFieldValues(fieldValues);\n\n\t\tif ((syncFiles == null) || syncFiles.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncFiles.get(0);\n\t}","id":70381,"modified_method":"public SyncFile fetchByR_S_T(\n\t\t\tlong repositoryId, long syncAccountId, long typePK)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"repositoryId\", repositoryId);\n\t\tfieldValues.put(\"syncAccountId\", syncAccountId);\n\t\tfieldValues.put(\"typePK\", typePK);\n\n\t\tList<SyncFile> syncFiles = queryForFieldValues(fieldValues);\n\n\t\tif (syncFiles.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncFiles.get(0);\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<SyncFile> findByPF_L(\n\t\t\tString parentFilePathName, long localSyncTime)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncFile, Long> queryBuilder = queryBuilder();\n\n\t\tWhere<SyncFile, Long> where = queryBuilder.where();\n\n\t\tFileSystem fileSystem = FileSystems.getDefault();\n\n\t\tparentFilePathName = StringUtils.replace(\n\t\t\tparentFilePathName + fileSystem.getSeparator(), \"\\\\\", \"\\\\\\\\\");\n\n\t\twhere.like(\"filePathName\", new SelectArg(parentFilePathName + \"%\"));\n\t\twhere.lt(\"localSyncTime\", localSyncTime);\n\t\twhere.or(\n\t\t\twhere.eq(\"state\", SyncFile.STATE_SYNCED),\n\t\t\twhere.eq(\"uiEvent\", SyncFile.UI_EVENT_DELETED_LOCAL),\n\t\t\twhere.eq(\"uiEvent\", SyncFile.UI_EVENT_UPLOADING));\n\t\twhere.ne(\"type\", SyncFile.TYPE_SYSTEM);\n\n\t\twhere.and(4);\n\n\t\treturn query(queryBuilder.prepare());\n\t}","id":70382,"modified_method":"public List<SyncFile> findByPF_L(\n\t\t\tString parentFilePathName, long localSyncTime)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncFile, Long> queryBuilder = queryBuilder();\n\n\t\tWhere<SyncFile, Long> where = queryBuilder.where();\n\n\t\tFileSystem fileSystem = FileSystems.getDefault();\n\n\t\tparentFilePathName = StringUtils.replace(\n\t\t\tparentFilePathName + fileSystem.getSeparator(), \"\\\\\", \"\\\\\\\\\");\n\n\t\twhere.like(\"filePathName\", new SelectArg(parentFilePathName + \"%\"));\n\t\twhere.lt(\"localSyncTime\", localSyncTime);\n\t\twhere.or(\n\t\t\twhere.eq(\"state\", SyncFile.STATE_SYNCED),\n\t\t\twhere.eq(\"uiEvent\", SyncFile.UI_EVENT_DELETED_LOCAL),\n\t\t\twhere.eq(\"uiEvent\", SyncFile.UI_EVENT_UPLOADING));\n\t\twhere.ne(\"type\", SyncFile.TYPE_SYSTEM);\n\n\t\twhere.and(4);\n\n\t\treturn where.query();\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateByFilePathName(\n\t\t\tString filePathName, int state, int uiEvent)\n\t\tthrows SQLException {\n\n\t\tUpdateBuilder<SyncFile, Long> updateBuilder = updateBuilder();\n\n\t\tWhere<SyncFile, Long> where = updateBuilder.where();\n\n\t\tfilePathName = StringUtils.replace(filePathName, \"\\\\\", \"\\\\\\\\\");\n\n\t\twhere.like(\"filePathName\", new SelectArg(filePathName + \"%\"));\n\n\t\tupdateBuilder.updateColumnValue(\"state\", state);\n\t\tupdateBuilder.updateColumnValue(\"uiEvent\", uiEvent);\n\n\t\tupdateBuilder.update();\n\t}","id":70383,"modified_method":"public void updateByFilePathName(\n\t\t\tString filePathName, int state, int uiEvent)\n\t\tthrows SQLException {\n\n\t\tUpdateBuilder<SyncFile, Long> updateBuilder = updateBuilder();\n\n\t\tupdateBuilder.updateColumnValue(\"state\", state);\n\t\tupdateBuilder.updateColumnValue(\"uiEvent\", uiEvent);\n\n\t\tWhere<SyncFile, Long> where = updateBuilder.where();\n\n\t\tfilePathName = StringUtils.replace(filePathName, \"\\\\\", \"\\\\\\\\\");\n\n\t\twhere.like(\"filePathName\", new SelectArg(filePathName + \"%\"));\n\n\t\tupdateBuilder.update();\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<SyncFile> findByParentFilePathName(String parentFilePathName)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncFile, Long> queryBuilder = queryBuilder();\n\n\t\tWhere<SyncFile, Long> where = queryBuilder.where();\n\n\t\tFileSystem fileSystem = FileSystems.getDefault();\n\n\t\tparentFilePathName = StringUtils.replace(\n\t\t\tparentFilePathName + fileSystem.getSeparator(), \"\\\\\", \"\\\\\\\\\");\n\n\t\twhere.like(\"filePathName\", new SelectArg(parentFilePathName + \"%\"));\n\n\t\treturn query(queryBuilder.prepare());\n\t}","id":70384,"modified_method":"public List<SyncFile> findByParentFilePathName(String parentFilePathName)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncFile, Long> queryBuilder = queryBuilder();\n\n\t\tWhere<SyncFile, Long> where = queryBuilder.where();\n\n\t\tFileSystem fileSystem = FileSystems.getDefault();\n\n\t\tparentFilePathName = StringUtils.replace(\n\t\t\tparentFilePathName + fileSystem.getSeparator(), \"\\\\\", \"\\\\\\\\\");\n\n\t\twhere.like(\"filePathName\", new SelectArg(parentFilePathName + \"%\"));\n\n\t\treturn where.query();\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SyncFile fetchByFilePathName(String filePathName)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"filePathName\", filePathName);\n\n\t\tList<SyncFile> syncFiles = queryForFieldValuesArgs(fieldValues);\n\n\t\tif ((syncFiles == null) || syncFiles.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncFiles.get(0);\n\t}","id":70385,"modified_method":"public SyncFile fetchByFilePathName(String filePathName)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"filePathName\", filePathName);\n\n\t\tList<SyncFile> syncFiles = queryForFieldValuesArgs(fieldValues);\n\n\t\tif (syncFiles.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncFiles.get(0);\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SyncSite fetchByG_S(long groupId, long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"groupId\", groupId);\n\t\tfieldValues.put(\"syncAccountId\", syncAccountId);\n\n\t\tList<SyncSite> syncSites = queryForFieldValues(fieldValues);\n\n\t\tif ((syncSites == null) || syncSites.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncSites.get(0);\n\t}","id":70386,"modified_method":"public SyncSite fetchByG_S(long groupId, long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"groupId\", groupId);\n\t\tfieldValues.put(\"syncAccountId\", syncAccountId);\n\n\t\tList<SyncSite> syncSites = queryForFieldValues(fieldValues);\n\n\t\tif (syncSites.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncSites.get(0);\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<Long> findByA_S(boolean active, long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncSite, Long> queryBuilder = queryBuilder();\n\n\t\tqueryBuilder = queryBuilder.selectColumns(\"syncSiteId\");\n\n\t\tWhere<SyncSite, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"active\", active);\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\n\t\twhere.and(2);\n\n\t\tGenericRawResults<Long> genericRawResults = queryRaw(\n\t\t\tqueryBuilder.prepareStatementString(),\n\t\t\tnew RawRowMapper<Long>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Long mapRow(\n\t\t\t\t\tString[] columnNames, String[] resultColumns) {\n\n\t\t\t\t\treturn Long.valueOf(resultColumns[0]);\n\t\t\t\t}\n\n\t\t\t});\n\n\t\treturn genericRawResults.getResults();\n\t}","id":70387,"modified_method":"public List<Long> findByA_S(boolean active, long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncSite, Long> queryBuilder = queryBuilder();\n\n\t\tqueryBuilder.selectColumns(\"syncSiteId\");\n\n\t\tWhere<SyncSite, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"active\", active);\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\n\t\twhere.and(2);\n\n\t\tGenericRawResults<Long> genericRawResults = queryRaw(\n\t\t\tqueryBuilder.prepareStatementString(),\n\t\t\tnew RawRowMapper<Long>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Long mapRow(\n\t\t\t\t\tString[] columnNames, String[] resultColumns) {\n\n\t\t\t\t\treturn Long.valueOf(resultColumns[0]);\n\t\t\t\t}\n\n\t\t\t});\n\n\t\treturn genericRawResults.getResults();\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SyncSite fetchByF_S(String filePathName, long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"filePathName\", filePathName);\n\t\tfieldValues.put(\"syncAccountId\", syncAccountId);\n\n\t\tList<SyncSite> syncSites = queryForFieldValuesArgs(fieldValues);\n\n\t\tif ((syncSites == null) || syncSites.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncSites.get(0);\n\t}","id":70388,"modified_method":"public SyncSite fetchByF_S(String filePathName, long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"filePathName\", filePathName);\n\t\tfieldValues.put(\"syncAccountId\", syncAccountId);\n\n\t\tList<SyncSite> syncSites = queryForFieldValuesArgs(fieldValues);\n\n\t\tif (syncSites.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncSites.get(0);\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SyncUser fetchBySyncAccountId(long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"syncAccountId\", syncAccountId);\n\n\t\tList<SyncUser> syncUsers = queryForFieldValues(fieldValues);\n\n\t\tif ((syncUsers == null) || syncUsers.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncUsers.get(0);\n\t}","id":70389,"modified_method":"public SyncUser fetchBySyncAccountId(long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tMap<String, Object> fieldValues = new HashMap<>();\n\n\t\tfieldValues.put(\"syncAccountId\", syncAccountId);\n\n\t\tList<SyncUser> syncUsers = queryForFieldValues(fieldValues);\n\n\t\tif (syncUsers.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncUsers.get(0);\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<SyncWatchEvent> findBySyncAccountId(\n\t\t\tlong syncAccountId, String orderByColumn, boolean ascending)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncWatchEvent, Long> queryBuilder = queryBuilder();\n\n\t\tWhere<SyncWatchEvent, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\n\t\tqueryBuilder.orderBy(\"fileType\", false);\n\t\tqueryBuilder.orderBy(orderByColumn, ascending);\n\n\t\treturn query(queryBuilder.prepare());\n\t}","id":70390,"modified_method":"public List<SyncWatchEvent> findBySyncAccountId(\n\t\t\tlong syncAccountId, String orderByColumn, boolean ascending)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncWatchEvent, Long> queryBuilder = queryBuilder();\n\n\t\tqueryBuilder.orderBy(\"fileType\", false);\n\t\tqueryBuilder.orderBy(orderByColumn, ascending);\n\n\t\tWhere<SyncWatchEvent, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\n\t\treturn where.query();\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteBySyncAccountId(long syncAccountId) throws SQLException {\n\t\tDeleteBuilder<SyncWatchEvent, Long> deleteBuilder = deleteBuilder();\n\n\t\tWhere<SyncWatchEvent, Long> where = deleteBuilder.where();\n\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\n\t\tdelete(deleteBuilder.prepare());\n\t}","id":70391,"modified_method":"public void deleteBySyncAccountId(long syncAccountId) throws SQLException {\n\t\tDeleteBuilder<SyncWatchEvent, Long> deleteBuilder = deleteBuilder();\n\n\t\tWhere<SyncWatchEvent, Long> where = deleteBuilder.where();\n\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\n\t\tdeleteBuilder.delete();\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<SyncWatchEvent> findBySyncAccountId(long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncWatchEvent, Long> queryBuilder = queryBuilder();\n\n\t\tWhere<SyncWatchEvent, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\n\t\tqueryBuilder.orderBy(\"fileType\", false);\n\n\t\treturn query(queryBuilder.prepare());\n\t}","id":70392,"modified_method":"public List<SyncWatchEvent> findBySyncAccountId(long syncAccountId)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncWatchEvent, Long> queryBuilder = queryBuilder();\n\n\t\tqueryBuilder.orderBy(\"fileType\", false);\n\n\t\tWhere<SyncWatchEvent, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"syncAccountId\", syncAccountId);\n\n\t\treturn where.query();\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SyncWatchEvent fetchByE_F_T(\n\t\t\tString eventType, String filePathName, long timestamp)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncWatchEvent, Long> queryBuilder = queryBuilder();\n\n\t\tWhere<SyncWatchEvent, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"eventType\", eventType);\n\t\twhere.eq(\"filePathName\", new SelectArg(filePathName));\n\t\twhere.between(\"timestamp\", timestamp - 1000, timestamp + 1000);\n\n\t\twhere.and(3);\n\n\t\tList<SyncWatchEvent> syncWatchEvents = query(queryBuilder.prepare());\n\n\t\tif ((syncWatchEvents == null) || syncWatchEvents.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncWatchEvents.get(0);\n\t}","id":70393,"modified_method":"public SyncWatchEvent fetchByE_F_T(\n\t\t\tString eventType, String filePathName, long timestamp)\n\t\tthrows SQLException {\n\n\t\tQueryBuilder<SyncWatchEvent, Long> queryBuilder = queryBuilder();\n\n\t\tWhere<SyncWatchEvent, Long> where = queryBuilder.where();\n\n\t\twhere.eq(\"eventType\", eventType);\n\t\twhere.eq(\"filePathName\", new SelectArg(filePathName));\n\t\twhere.between(\"timestamp\", timestamp - 1000, timestamp + 1000);\n\n\t\twhere.and(3);\n\n\t\tList<SyncWatchEvent> syncWatchEvents = where.query();\n\n\t\tif (syncWatchEvents.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn syncWatchEvents.get(0);\n\t}","commit_id":"9505302a970335806ec4776ed7de085ab3ebd923","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void validateForUpdate() {\n        if (_componentChanged && component()!=null && !_ownerChanged) {\n            addToBothSidesOfOwner(component().owner());\n        }\n        _componentChanged=false;\n        _ownerChanged=false;\n        super.validateForUpdate();\n        touch();\n\n    }","id":70394,"modified_method":"public void validateForUpdate() {\n        if (_componentChanged && component()!=null && !_ownerChanged) {\n            addToBothSidesOfOwner(component().owner());\n        }\n        _componentChanged=false;\n        _ownerChanged=false;\n        super.validateForUpdate();\n        if(changesFromCommittedSnapshot().count() > 1 && !changesFromCommittedSnapshot().allKeys().containsObject(\"isRead\")) {\n            touch();\n        }\n\n    }","commit_id":"25c94780775c0a30c2211191e18d6bbf03a99c44","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n     * Shrinks FIFO queue to maximum allowed size.\n     */\n    private void shrink() {\n        int max = this.max;\n\n        int batchSize = this.batchSize;\n\n        int startSize = queue.sizex();\n\n        // Shrink only if queue is full.\n        if (startSize >= max + batchSize) {\n            for (int i = max; i < startSize && queue.sizex() > max; i++) {\n                EvictableEntry<K, V> entry = queue.poll();\n\n                if (entry == null)\n                    break;\n\n                if (!entry.evict()) {\n                    entry.removeMeta();\n\n                    touch(entry);\n                }\n            }\n        }\n    }","id":70395,"modified_method":"/**\n     * Shrinks FIFO queue to maximum allowed size.\n     */\n    private void shrink() {\n        int max = this.max;\n\n        int batchSize = this.batchSize;\n\n        int startSize = queue.sizex();\n\n        // Shrink only if queue is full.\n        if (startSize >= max + batchSize) {\n            for (int i = max; i < startSize && queue.sizex() > max; i++) {\n                EvictableEntry<K, V> entry = queue.poll();\n\n                if (entry == null)\n                    break;\n\n                Node<EvictableEntry<K, V>> meta = entry.removeMeta();\n\n                if (meta != null && !entry.evict())\n                    touch(entry);\n            }\n        }\n    }","commit_id":"fef22b6eb646624008ef4d54e6e4d6a3e41b54c0","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * Shrinks queue to maximum allowed size.\n     */\n    private void shrink() {\n        int max = this.max;\n\n        int startSize = queue.sizex();\n\n        for (int i = 0; i < startSize && queue.sizex() > max; i++) {\n            EvictableEntry<K, V> entry = queue.poll();\n\n            if (entry == null)\n                break;\n\n            if (!entry.evict()) {\n                entry.removeMeta();\n\n                touch(entry);\n            }\n        }\n    }","id":70396,"modified_method":"/**\n     * Shrinks queue to maximum allowed size.\n     */\n    private void shrink() {\n        int max = this.max;\n\n        int startSize = queue.sizex();\n\n        for (int i = 0; i < startSize && queue.sizex() > max; i++) {\n            EvictableEntry<K, V> entry = queue.poll();\n\n            if (entry == null)\n                break;\n\n            Node<EvictableEntry<K, V>> meta = entry.removeMeta();\n\n            if (meta != null && !entry.evict())\n                touch(entry);\n        }\n    }","commit_id":"fef22b6eb646624008ef4d54e6e4d6a3e41b54c0","url":"https://github.com/apache/ignite"},{"original_method":"/** {@inheritDoc} */\n        @Nullable @Override public E pollFirst() {\n            E e = super.pollFirst();\n\n            if (e != null)\n                size.decrement();\n\n            return e;\n        }","id":70397,"modified_method":"/** {@inheritDoc} */\n        @Nullable @Override public Holder<K, V> pollFirst() {\n            Holder<K, V> e = super.pollFirst();\n\n            if (e != null)\n                size.decrement();\n\n            return e;\n        }","commit_id":"fef22b6eb646624008ef4d54e6e4d6a3e41b54c0","url":"https://github.com/apache/ignite"},{"original_method":"/**\n         * @param comp Comparator.\n         */\n        public GridConcurrentSkipListSetEx(Comparator<? super E> comp) {\n            super(comp);\n        }","id":70398,"modified_method":"/**\n         * @param comp Comparator.\n         */\n        public GridConcurrentSkipListSetEx(Comparator<? super Holder<K, V>> comp) {\n            super(comp);\n        }","commit_id":"fef22b6eb646624008ef4d54e6e4d6a3e41b54c0","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * Shrinks backed set to maximum allowed size.\n     */\n    private void shrink() {\n        int max = this.max;\n\n        int startSize = set.sizex();\n\n        if (startSize > max) {\n            for (int i = max; i < startSize && set.sizex() > max; i++) {\n                Holder<K, V> h = set.pollFirst();\n\n                if (h == null)\n                    break;\n\n                EvictableEntry<K, V> entry = h.entry;\n\n                if (h.order > 0 && !entry.evict()) {\n                    entry.removeMeta();\n\n                    touch(entry);\n                }\n            }\n        }\n    }","id":70399,"modified_method":"/**\n     * Shrinks backed set to maximum allowed size.\n     */\n    private void shrink() {\n        int max = this.max;\n\n        int startSize = set.sizex();\n\n        if (startSize > max) {\n            for (int i = max; i < startSize && set.sizex() > max; i++) {\n                Holder<K, V> h = set.pollFirst();\n\n                if (h == null)\n                    break;\n\n                EvictableEntry<K, V> entry = h.entry;\n\n                if (h.order > 0 && entry.removeMeta(h) && !entry.evict())\n                    touch(entry);\n            }\n        }\n    }","commit_id":"fef22b6eb646624008ef4d54e6e4d6a3e41b54c0","url":"https://github.com/apache/ignite"},{"original_method":"protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(\n\t\tlong companyId, String[] firstNames, String[] middleNames,\n\t\tString[] lastNames, String[] screenNames, String[] emailAddresses,\n\t\tint status, LinkedHashMap<String, Object> params, boolean andOperator,\n\t\tint start, int end, OrderByComparator<User> obc) {\n\n\t\tfirstNames = CustomSQLUtil.keywords(firstNames);\n\t\tmiddleNames = CustomSQLUtil.keywords(middleNames);\n\t\tlastNames = CustomSQLUtil.keywords(lastNames);\n\t\tscreenNames = CustomSQLUtil.keywords(screenNames);\n\t\temailAddresses = CustomSQLUtil.keywords(emailAddresses);\n\n\t\tif (params == null) {\n\t\t\tparams = _emptyLinkedHashMap;\n\t\t}\n\n\t\tLinkedHashMap<String, Object> params1 = params;\n\n\t\tLinkedHashMap<String, Object> params2 = null;\n\n\t\tLinkedHashMap<String, Object> params3 = null;\n\n\t\tLinkedHashMap<String, Object> params4 = null;\n\n\t\tLinkedHashMap<String, Object> params5 = null;\n\n\t\tLinkedHashMap<String, Object> params6 = null;\n\n\t\tLong[] groupIds = null;\n\n\t\tif (params.get(\"usersGroups\") instanceof Long) {\n\t\t\tLong groupId = (Long)params.get(\"usersGroups\");\n\n\t\t\tif (groupId > 0) {\n\t\t\t\tgroupIds = new Long[] {groupId};\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tgroupIds = (Long[])params.get(\"usersGroups\");\n\t\t}\n\n\t\tLong[] roleIds = null;\n\n\t\tif (params.get(\"usersRoles\") instanceof Long) {\n\t\t\tLong roleId = (Long)params.get(\"usersRoles\");\n\n\t\t\tif (roleId > 0) {\n\t\t\t\troleIds = new Long[] {roleId};\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\troleIds = (Long[])params.get(\"usersRoles\");\n\t\t}\n\n\t\tboolean inherit = GetterUtil.getBoolean(params.get(\"inherit\"));\n\t\tboolean socialRelationTypeUnionUserGroups = GetterUtil.getBoolean(\n\t\t\tparams.get(\"socialRelationTypeUnionUserGroups\"));\n\n\t\tif (ArrayUtil.isNotEmpty(groupIds) && inherit &&\n\t\t\t!socialRelationTypeUnionUserGroups) {\n\n\t\t\tList<Organization> organizations = new ArrayList<Organization>();\n\t\t\tList<Long> siteGroupIds = new ArrayList<Long>();\n\t\t\tList<Long> userGroupIds = new ArrayList<Long>();\n\n\t\t\tfor (long groupId : groupIds) {\n\t\t\t\tGroup group = GroupLocalServiceUtil.fetchGroup(groupId);\n\n\t\t\t\tif (group == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (group.isOrganization()) {\n\t\t\t\t\tOrganization organization =\n\t\t\t\t\t\tOrganizationLocalServiceUtil.fetchOrganization(\n\t\t\t\t\t\t\tgroup.getOrganizationId());\n\n\t\t\t\t\tif (organization != null) {\n\t\t\t\t\t\torganizations.add(organization);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (group.isUserGroup()) {\n\t\t\t\t\tuserGroupIds.add(group.getClassPK());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsiteGroupIds.add(groupId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!organizations.isEmpty()) {\n\t\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams2.remove(\"usersGroups\");\n\n\t\t\t\tif (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {\n\t\t\t\t\tLong[] organizationIds = new Long[organizations.size()];\n\n\t\t\t\t\tfor (int i = 0; i < organizationIds.length; i++) {\n\t\t\t\t\t\tOrganization organization = organizations.get(i);\n\n\t\t\t\t\t\torganizationIds[i] = organization.getOrganizationId();\n\t\t\t\t\t}\n\n\t\t\t\t\tparams2.put(\"usersOrgs\", organizationIds);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tparams2.put(\"usersOrgsTree\", organizations);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!siteGroupIds.isEmpty()) {\n\t\t\t\tLong[] siteGroupIdsArray = siteGroupIds.toArray(\n\t\t\t\t\tnew Long[siteGroupIds.size()]);\n\n\t\t\t\tparams3 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams3.remove(\"usersGroups\");\n\n\t\t\t\tparams3.put(\"groupsOrgs\", siteGroupIdsArray);\n\n\t\t\t\tparams4 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams4.remove(\"usersGroups\");\n\n\t\t\t\tparams4.put(\"groupsUserGroups\", siteGroupIdsArray);\n\t\t\t}\n\n\t\t\tif (!userGroupIds.isEmpty()) {\n\t\t\t\tparams5 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams5.remove(\"usersGroups\");\n\n\t\t\t\tparams5.put(\n\t\t\t\t\t\"usersUserGroups\",\n\t\t\t\t\tuserGroupIds.toArray(new Long[userGroupIds.size()]));\n\t\t\t}\n\t\t}\n\n\t\tif (ArrayUtil.isNotEmpty(roleIds) && inherit &&\n\t\t\t!socialRelationTypeUnionUserGroups) {\n\n\t\t\tList<Organization> organizations = new ArrayList<Organization>();\n\t\t\tList<Long> siteGroupIds = new ArrayList<Long>();\n\t\t\tList<Long> userGroupIds = new ArrayList<Long>();\n\n\t\t\tfor (long roleId : roleIds) {\n\t\t\t\tList<Group> groups = RoleUtil.getGroups(roleId);\n\n\t\t\t\tfor (Group group : groups) {\n\t\t\t\t\tif (group.isOrganization()) {\n\t\t\t\t\t\tOrganization organization =\n\t\t\t\t\t\t\tOrganizationLocalServiceUtil.fetchOrganization(\n\t\t\t\t\t\t\t\tgroup.getOrganizationId());\n\n\t\t\t\t\t\tif (organization != null) {\n\t\t\t\t\t\t\torganizations.add(organization);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (group.isUserGroup()) {\n\t\t\t\t\t\tuserGroupIds.add(group.getClassPK());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsiteGroupIds.add(group.getGroupId());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!organizations.isEmpty()) {\n\t\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams2.remove(\"usersRoles\");\n\n\t\t\t\tif (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {\n\t\t\t\t\tLong[] organizationIds = new Long[organizations.size()];\n\n\t\t\t\t\tfor (int i = 0; i < organizationIds.length; i++) {\n\t\t\t\t\t\tOrganization organization = organizations.get(i);\n\n\t\t\t\t\t\torganizationIds[i] = organization.getOrganizationId();\n\t\t\t\t\t}\n\n\t\t\t\t\tparams2.put(\"usersOrgs\", organizationIds);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tparams2.put(\"usersOrgsTree\", organizations);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!siteGroupIds.isEmpty()) {\n\t\t\t\tLong[] siteGroupIdsArray = siteGroupIds.toArray(\n\t\t\t\t\tnew Long[siteGroupIds.size()]);\n\n\t\t\t\tparams3 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams3.remove(\"usersRoles\");\n\n\t\t\t\tparams3.put(\"usersGroups\", siteGroupIdsArray);\n\n\t\t\t\tparams4 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams4.remove(\"usersRoles\");\n\n\t\t\t\tparams4.put(\"groupsOrgs\", siteGroupIdsArray);\n\n\t\t\t\tparams5 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams5.remove(\"usersRoles\");\n\n\t\t\t\tparams5.put(\"groupsUserGroups\", siteGroupIdsArray);\n\t\t\t}\n\n\t\t\tif (!userGroupIds.isEmpty()) {\n\t\t\t\tparams6 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams6.remove(\"usersRoles\");\n\n\t\t\t\tparams6.put(\n\t\t\t\t\t\"usersUserGroups\",\n\t\t\t\t\tuserGroupIds.toArray(new Long[userGroupIds.size()]));\n\t\t\t}\n\t\t}\n\n\t\tif (socialRelationTypeUnionUserGroups) {\n\t\t\tboolean hasSocialRelationTypes = Validator.isNotNull(\n\t\t\t\tparams.get(\"socialRelationType\"));\n\n\t\t\tif (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) {\n\t\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams1.remove(\"socialRelationType\");\n\n\t\t\t\tparams2.remove(\"usersGroups\");\n\t\t\t}\n\t\t}\n\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tsession = openSession();\n\n\t\t\tString sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S);\n\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.firstName)\", StringPool.LIKE, false,\n\t\t\t\tfirstNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.middleName)\", StringPool.LIKE, false,\n\t\t\t\tmiddleNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.lastName)\", StringPool.LIKE, false,\n\t\t\t\tlastNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.screenName)\", StringPool.LIKE, false,\n\t\t\t\tscreenNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.emailAddress)\", StringPool.LIKE, true,\n\t\t\t\temailAddresses);\n\n\t\t\tif (status == WorkflowConstants.STATUS_ANY) {\n\t\t\t\tsql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK);\n\t\t\t}\n\n\t\t\tStringBundler sb = new StringBundler(14);\n\n\t\t\tsb.append(StringPool.OPEN_PARENTHESIS);\n\t\t\tsb.append(replaceJoinAndWhere(sql, params1));\n\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\n\t\t\tif (params2 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params2));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (params3 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params3));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (params4 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params4));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (params5 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params5));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (params6 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params6));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (obc != null) {\n\t\t\t\tsb.append(\" ORDER BY \");\n\t\t\t\tsb.append(obc.toString());\n\t\t\t}\n\n\t\t\tsql = sb.toString();\n\n\t\t\tsql = CustomSQLUtil.replaceAndOperator(sql, andOperator);\n\n\t\t\tSQLQuery q = session.createSynchronizedSQLQuery(sql);\n\n\t\t\tq.addScalar(\"userId\", Type.LONG);\n\n\t\t\tQueryPos qPos = QueryPos.getInstance(q);\n\n\t\t\tsetJoin(qPos, params1);\n\n\t\t\tqPos.add(companyId);\n\t\t\tqPos.add(false);\n\t\t\tqPos.add(firstNames, 2);\n\t\t\tqPos.add(middleNames, 2);\n\t\t\tqPos.add(lastNames, 2);\n\t\t\tqPos.add(screenNames, 2);\n\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\tqPos.add(status);\n\t\t\t}\n\n\t\t\tif (params2 != null) {\n\t\t\t\tsetJoin(qPos, params2);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params3 != null) {\n\t\t\t\tsetJoin(qPos, params3);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params4 != null) {\n\t\t\t\tsetJoin(qPos, params4);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params5 != null) {\n\t\t\t\tsetJoin(qPos, params5);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params6 != null) {\n\t\t\t\tsetJoin(qPos, params6);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (List<Long>)QueryUtil.list(q, getDialect(), start, end);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(e);\n\t\t}\n\t\tfinally {\n\t\t\tcloseSession(session);\n\t\t}\n\t}","id":70400,"modified_method":"protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(\n\t\tlong companyId, String[] firstNames, String[] middleNames,\n\t\tString[] lastNames, String[] screenNames, String[] emailAddresses,\n\t\tint status, LinkedHashMap<String, Object> params, boolean andOperator,\n\t\tint start, int end, OrderByComparator<User> obc) {\n\n\t\tfirstNames = CustomSQLUtil.keywords(firstNames);\n\t\tmiddleNames = CustomSQLUtil.keywords(middleNames);\n\t\tlastNames = CustomSQLUtil.keywords(lastNames);\n\t\tscreenNames = CustomSQLUtil.keywords(screenNames);\n\t\temailAddresses = CustomSQLUtil.keywords(emailAddresses);\n\n\t\tif (params == null) {\n\t\t\tparams = _emptyLinkedHashMap;\n\t\t}\n\n\t\tLinkedHashMap<String, Object> params1 = params;\n\n\t\tLinkedHashMap<String, Object> params2 = null;\n\n\t\tLinkedHashMap<String, Object> params3 = null;\n\n\t\tLinkedHashMap<String, Object> params4 = null;\n\n\t\tLinkedHashMap<String, Object> params5 = null;\n\n\t\tLinkedHashMap<String, Object> params6 = null;\n\n\t\tLong[] groupIds = null;\n\n\t\tif (params.get(\"usersGroups\") instanceof Long) {\n\t\t\tLong groupId = (Long)params.get(\"usersGroups\");\n\n\t\t\tif (groupId > 0) {\n\t\t\t\tgroupIds = new Long[] {groupId};\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tgroupIds = (Long[])params.get(\"usersGroups\");\n\t\t}\n\n\t\tLong[] roleIds = null;\n\n\t\tif (params.get(\"usersRoles\") instanceof Long) {\n\t\t\tLong roleId = (Long)params.get(\"usersRoles\");\n\n\t\t\tif (roleId > 0) {\n\t\t\t\troleIds = new Long[] {roleId};\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\troleIds = (Long[])params.get(\"usersRoles\");\n\t\t}\n\n\t\tboolean inherit = GetterUtil.getBoolean(params.get(\"inherit\"));\n\t\tboolean socialRelationTypeUnionUserGroups = GetterUtil.getBoolean(\n\t\t\tparams.get(\"socialRelationTypeUnionUserGroups\"));\n\n\t\tif (ArrayUtil.isNotEmpty(groupIds) && inherit &&\n\t\t\t!socialRelationTypeUnionUserGroups) {\n\n\t\t\tList<Long> organizationIds = new ArrayList<Long>();\n\t\t\tList<Long> siteGroupIds = new ArrayList<Long>();\n\t\t\tList<Long> userGroupIds = new ArrayList<Long>();\n\n\t\t\tfor (long groupId : groupIds) {\n\t\t\t\tGroup group = GroupLocalServiceUtil.fetchGroup(groupId);\n\n\t\t\t\tif (group == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (group.isOrganization()) {\n\t\t\t\t\torganizationIds.add(group.getOrganizationId());\n\t\t\t\t}\n\t\t\t\telse if (group.isUserGroup()) {\n\t\t\t\t\tuserGroupIds.add(group.getClassPK());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsiteGroupIds.add(groupId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!organizationIds.isEmpty()) {\n\t\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams2.remove(\"usersGroups\");\n\n\t\t\t\tif (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {\n\t\t\t\t\tparams2.put(\"usersOrgs\", organizationIds);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tMap<Serializable, Organization> map =\n\t\t\t\t\t\tOrganizationUtil.fetchByPrimaryKeys(\n\t\t\t\t\t\t\tnew HashSet<Serializable>(organizationIds));\n\n\t\t\t\t\tparams2.put(\n\t\t\t\t\t\t\"usersOrgsTree\",\n\t\t\t\t\t\tnew ArrayList<Organization>(map.values()));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!siteGroupIds.isEmpty()) {\n\t\t\t\tLong[] siteGroupIdsArray = siteGroupIds.toArray(\n\t\t\t\t\tnew Long[siteGroupIds.size()]);\n\n\t\t\t\tparams3 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams3.remove(\"usersGroups\");\n\n\t\t\t\tparams3.put(\"groupsOrgs\", siteGroupIdsArray);\n\n\t\t\t\tparams4 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams4.remove(\"usersGroups\");\n\n\t\t\t\tparams4.put(\"groupsUserGroups\", siteGroupIdsArray);\n\t\t\t}\n\n\t\t\tif (!userGroupIds.isEmpty()) {\n\t\t\t\tparams5 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams5.remove(\"usersGroups\");\n\n\t\t\t\tparams5.put(\n\t\t\t\t\t\"usersUserGroups\",\n\t\t\t\t\tuserGroupIds.toArray(new Long[userGroupIds.size()]));\n\t\t\t}\n\t\t}\n\n\t\tif (ArrayUtil.isNotEmpty(roleIds) && inherit &&\n\t\t\t!socialRelationTypeUnionUserGroups) {\n\n\t\t\tList<Long> organizationIds = new ArrayList<Long>();\n\t\t\tList<Long> siteGroupIds = new ArrayList<Long>();\n\t\t\tList<Long> userGroupIds = new ArrayList<Long>();\n\n\t\t\tfor (long roleId : roleIds) {\n\t\t\t\tList<Group> groups = RoleUtil.getGroups(roleId);\n\n\t\t\t\tfor (Group group : groups) {\n\t\t\t\t\tif (group.isOrganization()) {\n\t\t\t\t\t\torganizationIds.add(group.getOrganizationId());\n\t\t\t\t\t}\n\t\t\t\t\telse if (group.isUserGroup()) {\n\t\t\t\t\t\tuserGroupIds.add(group.getClassPK());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsiteGroupIds.add(group.getGroupId());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!organizationIds.isEmpty()) {\n\t\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams2.remove(\"usersRoles\");\n\n\t\t\t\tif (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {\n\t\t\t\t\tparams2.put(\n\t\t\t\t\t\t\"usersOrgs\",\n\t\t\t\t\t\torganizationIds.toArray(\n\t\t\t\t\t\t\tnew Long[organizationIds.size()]));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tMap<Serializable, Organization> map =\n\t\t\t\t\t\tOrganizationUtil.fetchByPrimaryKeys(\n\t\t\t\t\t\t\tnew HashSet<Serializable>(organizationIds));\n\n\t\t\t\t\tparams2.put(\n\t\t\t\t\t\t\"usersOrgsTree\",\n\t\t\t\t\t\tnew ArrayList<Organization>(map.values()));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!siteGroupIds.isEmpty()) {\n\t\t\t\tLong[] siteGroupIdsArray = siteGroupIds.toArray(\n\t\t\t\t\tnew Long[siteGroupIds.size()]);\n\n\t\t\t\tparams3 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams3.remove(\"usersRoles\");\n\n\t\t\t\tparams3.put(\"usersGroups\", siteGroupIdsArray);\n\n\t\t\t\tparams4 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams4.remove(\"usersRoles\");\n\n\t\t\t\tparams4.put(\"groupsOrgs\", siteGroupIdsArray);\n\n\t\t\t\tparams5 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams5.remove(\"usersRoles\");\n\n\t\t\t\tparams5.put(\"groupsUserGroups\", siteGroupIdsArray);\n\t\t\t}\n\n\t\t\tif (!userGroupIds.isEmpty()) {\n\t\t\t\tparams6 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams6.remove(\"usersRoles\");\n\n\t\t\t\tparams6.put(\n\t\t\t\t\t\"usersUserGroups\",\n\t\t\t\t\tuserGroupIds.toArray(new Long[userGroupIds.size()]));\n\t\t\t}\n\t\t}\n\n\t\tif (socialRelationTypeUnionUserGroups) {\n\t\t\tboolean hasSocialRelationTypes = Validator.isNotNull(\n\t\t\t\tparams.get(\"socialRelationType\"));\n\n\t\t\tif (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) {\n\t\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\t\tparams1.remove(\"socialRelationType\");\n\n\t\t\t\tparams2.remove(\"usersGroups\");\n\t\t\t}\n\t\t}\n\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tsession = openSession();\n\n\t\t\tString sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S);\n\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.firstName)\", StringPool.LIKE, false,\n\t\t\t\tfirstNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.middleName)\", StringPool.LIKE, false,\n\t\t\t\tmiddleNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.lastName)\", StringPool.LIKE, false,\n\t\t\t\tlastNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.screenName)\", StringPool.LIKE, false,\n\t\t\t\tscreenNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.emailAddress)\", StringPool.LIKE, true,\n\t\t\t\temailAddresses);\n\n\t\t\tif (status == WorkflowConstants.STATUS_ANY) {\n\t\t\t\tsql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK);\n\t\t\t}\n\n\t\t\tStringBundler sb = new StringBundler(14);\n\n\t\t\tsb.append(StringPool.OPEN_PARENTHESIS);\n\t\t\tsb.append(replaceJoinAndWhere(sql, params1));\n\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\n\t\t\tif (params2 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params2));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (params3 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params3));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (params4 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params4));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (params5 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params5));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (params6 != null) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params6));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (obc != null) {\n\t\t\t\tsb.append(\" ORDER BY \");\n\t\t\t\tsb.append(obc.toString());\n\t\t\t}\n\n\t\t\tsql = sb.toString();\n\n\t\t\tsql = CustomSQLUtil.replaceAndOperator(sql, andOperator);\n\n\t\t\tSQLQuery q = session.createSynchronizedSQLQuery(sql);\n\n\t\t\tq.addScalar(\"userId\", Type.LONG);\n\n\t\t\tQueryPos qPos = QueryPos.getInstance(q);\n\n\t\t\tsetJoin(qPos, params1);\n\n\t\t\tqPos.add(companyId);\n\t\t\tqPos.add(false);\n\t\t\tqPos.add(firstNames, 2);\n\t\t\tqPos.add(middleNames, 2);\n\t\t\tqPos.add(lastNames, 2);\n\t\t\tqPos.add(screenNames, 2);\n\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\tqPos.add(status);\n\t\t\t}\n\n\t\t\tif (params2 != null) {\n\t\t\t\tsetJoin(qPos, params2);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params3 != null) {\n\t\t\t\tsetJoin(qPos, params3);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params4 != null) {\n\t\t\t\tsetJoin(qPos, params4);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params5 != null) {\n\t\t\t\tsetJoin(qPos, params5);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params6 != null) {\n\t\t\t\tsetJoin(qPos, params6);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (List<Long>)QueryUtil.list(q, getDialect(), start, end);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(e);\n\t\t}\n\t\tfinally {\n\t\t\tcloseSession(session);\n\t\t}\n\t}","commit_id":"e3e1a121099dfd31007b93652adbcf5a1388068b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public int countByC_FN_MN_LN_SN_EA_S(\n\t\t\tlong companyId, String[] firstNames, String[] middleNames,\n\t\t\tString[] lastNames, String[] screenNames, String[] emailAddresses,\n\t\t\tint status, LinkedHashMap<String, Object> params,\n\t\t\tboolean andOperator)\n\t\tthrows SystemException {\n\n\t\tfirstNames = CustomSQLUtil.keywords(firstNames);\n\t\tmiddleNames = CustomSQLUtil.keywords(middleNames);\n\t\tlastNames = CustomSQLUtil.keywords(lastNames);\n\t\tscreenNames = CustomSQLUtil.keywords(screenNames);\n\t\temailAddresses = CustomSQLUtil.keywords(emailAddresses);\n\n\t\tif (params == null) {\n\t\t\tparams = _emptyLinkedHashMap;\n\t\t}\n\n\t\tLong groupId = (Long)params.get(\"usersGroups\");\n\t\tboolean inherit = GetterUtil.getBoolean(params.get(\"inherit\"));\n\n\t\tboolean doUnion = Validator.isNotNull(groupId) && inherit;\n\n\t\tLinkedHashMap<String, Object> params1 = params;\n\n\t\tLinkedHashMap<String, Object> params2 = null;\n\n\t\tLinkedHashMap<String, Object> params3 = null;\n\n\t\tif (doUnion) {\n\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\tList<Organization> organizations = GroupUtil.getOrganizations(\n\t\t\t\tgroupId);\n\n\t\t\tLong[] organizationIds = new Long[organizations.size()];\n\n\t\t\tfor (int i = 0; i < organizations.size(); i++) {\n\t\t\t\tOrganization organization = organizations.get(i);\n\n\t\t\t\torganizationIds[i] = organization.getOrganizationId();\n\t\t\t}\n\n\t\t\tparams2.remove(\"usersGroups\");\n\t\t\tparams2.put(\"usersOrgs\", organizationIds);\n\n\t\t\tparams3 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\tList<UserGroup> userGroups = GroupUtil.getUserGroups(groupId);\n\n\t\t\tLong[] userGroupIds = new Long[userGroups.size()];\n\n\t\t\tfor (int i = 0; i < userGroups.size(); i++) {\n\t\t\t\tUserGroup userGroup = userGroups.get(i);\n\n\t\t\t\tuserGroupIds[i] = userGroup.getUserGroupId();\n\t\t\t}\n\n\t\t\tparams3.remove(\"usersGroups\");\n\t\t\tparams3.put(\"usersUserGroups\", userGroupIds);\n\t\t}\n\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tsession = openSession();\n\n\t\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\t\tuserIds.addAll(\n\t\t\t\tcountByC_FN_MN_LN_SN_EA_S(\n\t\t\t\t\tsession, companyId, firstNames, middleNames, lastNames,\n\t\t\t\t\tscreenNames, emailAddresses, status, params1, andOperator));\n\n\t\t\tif (doUnion) {\n\t\t\t\tuserIds.addAll(\n\t\t\t\t\tcountByC_FN_MN_LN_SN_EA_S(\n\t\t\t\t\t\tsession, companyId, firstNames, middleNames, lastNames,\n\t\t\t\t\t\tscreenNames, emailAddresses, status, params2,\n\t\t\t\t\t\tandOperator));\n\n\t\t\t\tuserIds.addAll(\n\t\t\t\t\tcountByC_FN_MN_LN_SN_EA_S(\n\t\t\t\t\t\tsession, companyId, firstNames, middleNames, lastNames,\n\t\t\t\t\t\tscreenNames, emailAddresses, status, params3,\n\t\t\t\t\t\tandOperator));\n\t\t\t}\n\n\t\t\treturn userIds.size();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(e);\n\t\t}\n\t\tfinally {\n\t\t\tcloseSession(session);\n\t\t}\n\t}","id":70401,"modified_method":"public int countByC_FN_MN_LN_SN_EA_S(\n\t\t\tlong companyId, String[] firstNames, String[] middleNames,\n\t\t\tString[] lastNames, String[] screenNames, String[] emailAddresses,\n\t\t\tint status, LinkedHashMap<String, Object> params,\n\t\t\tboolean andOperator)\n\t\tthrows SystemException {\n\n\t\tfirstNames = CustomSQLUtil.keywords(firstNames);\n\t\tmiddleNames = CustomSQLUtil.keywords(middleNames);\n\t\tlastNames = CustomSQLUtil.keywords(lastNames);\n\t\tscreenNames = CustomSQLUtil.keywords(screenNames);\n\t\temailAddresses = CustomSQLUtil.keywords(emailAddresses);\n\n\t\tif (params == null) {\n\t\t\tparams = _emptyLinkedHashMap;\n\t\t}\n\n\t\tLong groupId = (Long)params.get(\"usersGroups\");\n\t\tboolean inherit = GetterUtil.getBoolean(params.get(\"inherit\"));\n\n\t\tboolean doUnion = Validator.isNotNull(groupId) && inherit;\n\n\t\tLinkedHashMap<String, Object> params1 = params;\n\n\t\tLinkedHashMap<String, Object> params2 = null;\n\n\t\tLinkedHashMap<String, Object> params3 = null;\n\n\t\tif (doUnion) {\n\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\tArrayList<Long> organizationIds = new ArrayList<Long>();\n\n\t\t\tGroup group = GroupLocalServiceUtil.fetchGroup(groupId);\n\n\t\t\tif ((group != null) && group.isOrganization()) {\n\t\t\t\torganizationIds.add(groupId);\n\t\t\t}\n\n\t\t\tList<Organization> organizations = GroupUtil.getOrganizations(\n\t\t\t\tgroupId);\n\n\t\t\tfor (Organization organization : organizations) {\n\t\t\t\torganizationIds.add(organization.getOrganizationId());\n\t\t\t}\n\n\t\t\tparams2.remove(\"usersGroups\");\n\t\t\tparams2.put(\"usersOrgs\", organizationIds);\n\n\t\t\tparams3 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\tArrayList<Long> userGroupIds = new ArrayList<Long>();\n\n\t\t\tList<UserGroup> userGroups = GroupUtil.getUserGroups(groupId);\n\n\t\t\tfor (UserGroup userGroup : userGroups) {\n\t\t\t\tuserGroupIds.add(userGroup.getUserGroupId());\n\t\t\t}\n\n\t\t\tparams3.remove(\"usersGroups\");\n\t\t\tparams3.put(\"usersUserGroups\", userGroupIds);\n\t\t}\n\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tsession = openSession();\n\n\t\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\t\tuserIds.addAll(\n\t\t\t\tcountByC_FN_MN_LN_SN_EA_S(\n\t\t\t\t\tsession, companyId, firstNames, middleNames, lastNames,\n\t\t\t\t\tscreenNames, emailAddresses, status, params1, andOperator));\n\n\t\t\tif (doUnion) {\n\t\t\t\tuserIds.addAll(\n\t\t\t\t\tcountByC_FN_MN_LN_SN_EA_S(\n\t\t\t\t\t\tsession, companyId, firstNames, middleNames, lastNames,\n\t\t\t\t\t\tscreenNames, emailAddresses, status, params2,\n\t\t\t\t\t\tandOperator));\n\n\t\t\t\tuserIds.addAll(\n\t\t\t\t\tcountByC_FN_MN_LN_SN_EA_S(\n\t\t\t\t\t\tsession, companyId, firstNames, middleNames, lastNames,\n\t\t\t\t\t\tscreenNames, emailAddresses, status, params3,\n\t\t\t\t\t\tandOperator));\n\t\t\t}\n\n\t\t\treturn userIds.size();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(e);\n\t\t}\n\t\tfinally {\n\t\t\tcloseSession(session);\n\t\t}\n\t}","commit_id":"c5a317f369b4c6892957539b6eafb2f327c21879","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<User> findByC_FN_MN_LN_SN_EA_S(\n\t\t\tlong companyId, String[] firstNames, String[] middleNames,\n\t\t\tString[] lastNames, String[] screenNames, String[] emailAddresses,\n\t\t\tint status, LinkedHashMap<String, Object> params,\n\t\t\tboolean andOperator, int start, int end, OrderByComparator obc)\n\t\tthrows SystemException {\n\n\t\tfirstNames = CustomSQLUtil.keywords(firstNames);\n\t\tmiddleNames = CustomSQLUtil.keywords(middleNames);\n\t\tlastNames = CustomSQLUtil.keywords(lastNames);\n\t\tscreenNames = CustomSQLUtil.keywords(screenNames);\n\t\temailAddresses = CustomSQLUtil.keywords(emailAddresses);\n\n\t\tif (params == null) {\n\t\t\tparams = _emptyLinkedHashMap;\n\t\t}\n\n\t\tLong groupId = (Long)params.get(\"usersGroups\");\n\t\tboolean inherit = GetterUtil.getBoolean(params.get(\"inherit\"));\n\n\t\tboolean doUnion = Validator.isNotNull(groupId) && inherit;\n\n\t\tLinkedHashMap<String, Object> params1 = params;\n\n\t\tLinkedHashMap<String, Object> params2 = null;\n\n\t\tLinkedHashMap<String, Object> params3 = null;\n\n\t\tif (doUnion) {\n\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\tList<Organization> organizations = GroupUtil.getOrganizations(\n\t\t\t\tgroupId);\n\n\t\t\tLong[] organizationIds = new Long[organizations.size()];\n\n\t\t\tfor (int i = 0; i < organizations.size(); i++) {\n\t\t\t\tOrganization organization = organizations.get(i);\n\n\t\t\t\torganizationIds[i] = organization.getOrganizationId();\n\t\t\t}\n\n\t\t\tparams2.remove(\"usersGroups\");\n\t\t\tparams2.put(\"usersOrgs\", organizationIds);\n\n\t\t\tparams3 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\tList<UserGroup> userGroups = GroupUtil.getUserGroups(groupId);\n\n\t\t\tLong[] userGroupIds = new Long[userGroups.size()];\n\n\t\t\tfor (int i = 0; i < userGroups.size(); i++) {\n\t\t\t\tUserGroup userGroup = userGroups.get(i);\n\n\t\t\t\tuserGroupIds[i] = userGroup.getUserGroupId();\n\t\t\t}\n\n\t\t\tparams3.remove(\"usersGroups\");\n\t\t\tparams3.put(\"usersUserGroups\", userGroupIds);\n\t\t}\n\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tsession = openSession();\n\n\t\t\tString sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S);\n\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.firstName)\", StringPool.LIKE, false,\n\t\t\t\tfirstNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.middleName)\", StringPool.LIKE, false,\n\t\t\t\tmiddleNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.lastName)\", StringPool.LIKE, false,\n\t\t\t\tlastNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.screenName)\", StringPool.LIKE, false,\n\t\t\t\tscreenNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.emailAddress)\", StringPool.LIKE, true,\n\t\t\t\temailAddresses);\n\n\t\t\tif (status == WorkflowConstants.STATUS_ANY) {\n\t\t\t\tsql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK);\n\t\t\t}\n\n\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\tsb.append(StringPool.OPEN_PARENTHESIS);\n\t\t\tsb.append(replaceJoinAndWhere(sql, params1));\n\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\n\t\t\tif (doUnion) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params2));\n\t\t\t\tsb.append(\") UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params3));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (obc != null) {\n\t\t\t\tsb.append(\" ORDER BY \");\n\t\t\t\tsb.append(obc.toString());\n\t\t\t}\n\n\t\t\tsql = sb.toString();\n\n\t\t\tsql = CustomSQLUtil.replaceAndOperator(sql, andOperator);\n\n\t\t\tSQLQuery q = session.createSQLQuery(sql);\n\n\t\t\tq.addScalar(\"userId\", Type.LONG);\n\n\t\t\tQueryPos qPos = QueryPos.getInstance(q);\n\n\t\t\tsetJoin(qPos, params1);\n\n\t\t\tqPos.add(companyId);\n\t\t\tqPos.add(false);\n\t\t\tqPos.add(firstNames, 2);\n\t\t\tqPos.add(middleNames, 2);\n\t\t\tqPos.add(lastNames, 2);\n\t\t\tqPos.add(screenNames, 2);\n\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\tqPos.add(status);\n\t\t\t}\n\n\t\t\tif (doUnion) {\n\t\t\t\tsetJoin(qPos, params2);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\n\t\t\t\tsetJoin(qPos, params3);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tList<Long> userIds = (List<Long>)QueryUtil.list(\n\t\t\t\tq, getDialect(), start, end);\n\n\t\t\tList<User> users = new ArrayList<User>(userIds.size());\n\n\t\t\tfor (Long userId : userIds) {\n\t\t\t\tUser user = UserUtil.findByPrimaryKey(userId);\n\n\t\t\t\tusers.add(user);\n\t\t\t}\n\n\t\t\treturn users;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(e);\n\t\t}\n\t\tfinally {\n\t\t\tcloseSession(session);\n\t\t}\n\t}","id":70402,"modified_method":"public List<User> findByC_FN_MN_LN_SN_EA_S(\n\t\t\tlong companyId, String[] firstNames, String[] middleNames,\n\t\t\tString[] lastNames, String[] screenNames, String[] emailAddresses,\n\t\t\tint status, LinkedHashMap<String, Object> params,\n\t\t\tboolean andOperator, int start, int end, OrderByComparator obc)\n\t\tthrows SystemException {\n\n\t\tfirstNames = CustomSQLUtil.keywords(firstNames);\n\t\tmiddleNames = CustomSQLUtil.keywords(middleNames);\n\t\tlastNames = CustomSQLUtil.keywords(lastNames);\n\t\tscreenNames = CustomSQLUtil.keywords(screenNames);\n\t\temailAddresses = CustomSQLUtil.keywords(emailAddresses);\n\n\t\tif (params == null) {\n\t\t\tparams = _emptyLinkedHashMap;\n\t\t}\n\n\t\tLong groupId = (Long)params.get(\"usersGroups\");\n\t\tboolean inherit = GetterUtil.getBoolean(params.get(\"inherit\"));\n\n\t\tboolean doUnion = Validator.isNotNull(groupId) && inherit;\n\n\t\tLinkedHashMap<String, Object> params1 = params;\n\n\t\tLinkedHashMap<String, Object> params2 = null;\n\n\t\tLinkedHashMap<String, Object> params3 = null;\n\n\t\tif (doUnion) {\n\t\t\tparams2 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\tArrayList<Long> organizationIds = new ArrayList<Long>();\n\n\t\t\tGroup group = GroupLocalServiceUtil.fetchGroup(groupId);\n\n\t\t\tif ((group != null) && group.isOrganization()) {\n\t\t\t\torganizationIds.add(groupId);\n\t\t\t}\n\n\t\t\tList<Organization> organizations = GroupUtil.getOrganizations(\n\t\t\t\tgroupId);\n\n\t\t\tfor (Organization organization : organizations) {\n\t\t\t\torganizationIds.add(organization.getOrganizationId());\n\t\t\t}\n\n\t\t\tparams2.remove(\"usersGroups\");\n\t\t\tparams2.put(\"usersOrgs\", organizationIds);\n\n\t\t\tparams3 = new LinkedHashMap<String, Object>(params1);\n\n\t\t\tArrayList<Long> userGroupIds = new ArrayList<Long>();\n\n\t\t\tList<UserGroup> userGroups = GroupUtil.getUserGroups(groupId);\n\n\t\t\tfor (UserGroup userGroup : userGroups) {\n\t\t\t\tuserGroupIds.add(userGroup.getUserGroupId());\n\t\t\t}\n\n\t\t\tparams3.remove(\"usersGroups\");\n\t\t\tparams3.put(\"usersUserGroups\", userGroupIds);\n\t\t}\n\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tsession = openSession();\n\n\t\t\tString sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S);\n\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.firstName)\", StringPool.LIKE, false,\n\t\t\t\tfirstNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.middleName)\", StringPool.LIKE, false,\n\t\t\t\tmiddleNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.lastName)\", StringPool.LIKE, false,\n\t\t\t\tlastNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.screenName)\", StringPool.LIKE, false,\n\t\t\t\tscreenNames);\n\t\t\tsql = CustomSQLUtil.replaceKeywords(\n\t\t\t\tsql, \"lower(User_.emailAddress)\", StringPool.LIKE, true,\n\t\t\t\temailAddresses);\n\n\t\t\tif (status == WorkflowConstants.STATUS_ANY) {\n\t\t\t\tsql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK);\n\t\t\t}\n\n\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\tsb.append(StringPool.OPEN_PARENTHESIS);\n\t\t\tsb.append(replaceJoinAndWhere(sql, params1));\n\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\n\t\t\tif (doUnion) {\n\t\t\t\tsb.append(\" UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params2));\n\t\t\t\tsb.append(\") UNION (\");\n\t\t\t\tsb.append(replaceJoinAndWhere(sql, params3));\n\t\t\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\t\t\t}\n\n\t\t\tif (obc != null) {\n\t\t\t\tsb.append(\" ORDER BY \");\n\t\t\t\tsb.append(obc.toString());\n\t\t\t}\n\n\t\t\tsql = sb.toString();\n\n\t\t\tsql = CustomSQLUtil.replaceAndOperator(sql, andOperator);\n\n\t\t\tSQLQuery q = session.createSQLQuery(sql);\n\n\t\t\tq.addScalar(\"userId\", Type.LONG);\n\n\t\t\tQueryPos qPos = QueryPos.getInstance(q);\n\n\t\t\tsetJoin(qPos, params1);\n\n\t\t\tqPos.add(companyId);\n\t\t\tqPos.add(false);\n\t\t\tqPos.add(firstNames, 2);\n\t\t\tqPos.add(middleNames, 2);\n\t\t\tqPos.add(lastNames, 2);\n\t\t\tqPos.add(screenNames, 2);\n\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\tqPos.add(status);\n\t\t\t}\n\n\t\t\tif (doUnion) {\n\t\t\t\tsetJoin(qPos, params2);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\n\t\t\t\tsetJoin(qPos, params3);\n\n\t\t\t\tqPos.add(companyId);\n\t\t\t\tqPos.add(false);\n\t\t\t\tqPos.add(firstNames, 2);\n\t\t\t\tqPos.add(middleNames, 2);\n\t\t\t\tqPos.add(lastNames, 2);\n\t\t\t\tqPos.add(screenNames, 2);\n\t\t\t\tqPos.add(emailAddresses, 2);\n\n\t\t\t\tif (status != WorkflowConstants.STATUS_ANY) {\n\t\t\t\t\tqPos.add(status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tList<Long> userIds = (List<Long>)QueryUtil.list(\n\t\t\t\tq, getDialect(), start, end);\n\n\t\t\tList<User> users = new ArrayList<User>(userIds.size());\n\n\t\t\tfor (Long userId : userIds) {\n\t\t\t\tUser user = UserUtil.findByPrimaryKey(userId);\n\n\t\t\t\tusers.add(user);\n\t\t\t}\n\n\t\t\treturn users;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(e);\n\t\t}\n\t\tfinally {\n\t\t\tcloseSession(session);\n\t\t}\n\t}","commit_id":"c5a317f369b4c6892957539b6eafb2f327c21879","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void loadCompletedIdentifiers() throws DatabaseDisabledException {\n\t\tString dl = uploads ? \"uploads\" : \"downloads\";\n\t\tFile completedIdentifiersList = new File(core.node.getNodeDir(), \"completed.list.\"+dl);\n\t\tFile completedIdentifiersListNew = new File(core.node.getNodeDir(), \"completed.list.\"+dl+\".bak\");\n\t\tFile oldCompletedIdentifiersList = new File(core.node.getNodeDir(), \"completed.list\");\n\t\tboolean migrated = false;\n\t\tif(!readCompletedIdentifiers(completedIdentifiersList)) {\n\t\t\tif(!readCompletedIdentifiers(completedIdentifiersListNew)) {\n\t\t\t\treadCompletedIdentifiers(oldCompletedIdentifiersList);\n\t\t\t\tmigrated = true;\n\t\t\t}\n\t\t} else\n\t\t\toldCompletedIdentifiersList.delete();\n\t\tfinal boolean writeAnyway = migrated;\n\t\tcore.clientContext.jobRunner.queue(new DBJob() {\n\t\t\t\n\t\t\tpublic String toString() {\n\t\t\t\treturn \"QueueToadlet LoadCompletedIdentifiers\";\n\t\t\t}\n\n\t\t\tpublic boolean run(ObjectContainer container, ClientContext context) {\n\t\t\t\tString[] identifiers;\n\t\t\t\tboolean changed = writeAnyway;\n\t\t\t\tsynchronized(completedRequestIdentifiers) {\n\t\t\t\t\tidentifiers = completedRequestIdentifiers.toArray(new String[completedRequestIdentifiers.size()]);\n\t\t\t\t}\n\t\t\t\tfor(int i=0;i<identifiers.length;i++) {\n\t\t\t\t\tClientRequest req = fcp.getGlobalRequest(identifiers[i], container);\n\t\t\t\t\tif(req == null || req instanceof ClientGet == uploads) {\n\t\t\t\t\t\tsynchronized(completedRequestIdentifiers) {\n\t\t\t\t\t\t\tcompletedRequestIdentifiers.remove(identifiers[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tregisterAlert(req, container);\n\t\t\t\t}\n\t\t\t\tif(changed) saveCompletedIdentifiers();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t}, NativeThread.HIGH_PRIORITY, false);\n\t}","id":70403,"modified_method":"private void loadCompletedIdentifiers() throws DatabaseDisabledException {\n\t\tString dl = uploads ? \"uploads\" : \"downloads\";\n\t\tFile completedIdentifiersList = core.node.userDir().file(\"completed.list.\"+dl);\n\t\tFile completedIdentifiersListNew = core.node.userDir().file(\"completed.list.\"+dl+\".bak\");\n\t\tFile oldCompletedIdentifiersList = core.node.userDir().file(\"completed.list\");\n\t\tboolean migrated = false;\n\t\tif(!readCompletedIdentifiers(completedIdentifiersList)) {\n\t\t\tif(!readCompletedIdentifiers(completedIdentifiersListNew)) {\n\t\t\t\treadCompletedIdentifiers(oldCompletedIdentifiersList);\n\t\t\t\tmigrated = true;\n\t\t\t}\n\t\t} else\n\t\t\toldCompletedIdentifiersList.delete();\n\t\tfinal boolean writeAnyway = migrated;\n\t\tcore.clientContext.jobRunner.queue(new DBJob() {\n\n\t\t\tpublic String toString() {\n\t\t\t\treturn \"QueueToadlet LoadCompletedIdentifiers\";\n\t\t\t}\n\n\t\t\tpublic boolean run(ObjectContainer container, ClientContext context) {\n\t\t\t\tString[] identifiers;\n\t\t\t\tboolean changed = writeAnyway;\n\t\t\t\tsynchronized(completedRequestIdentifiers) {\n\t\t\t\t\tidentifiers = completedRequestIdentifiers.toArray(new String[completedRequestIdentifiers.size()]);\n\t\t\t\t}\n\t\t\t\tfor(int i=0;i<identifiers.length;i++) {\n\t\t\t\t\tClientRequest req = fcp.getGlobalRequest(identifiers[i], container);\n\t\t\t\t\tif(req == null || req instanceof ClientGet == uploads) {\n\t\t\t\t\t\tsynchronized(completedRequestIdentifiers) {\n\t\t\t\t\t\t\tcompletedRequestIdentifiers.remove(identifiers[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tregisterAlert(req, container);\n\t\t\t\t}\n\t\t\t\tif(changed) saveCompletedIdentifiers();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t}, NativeThread.HIGH_PRIORITY, false);\n\t}","commit_id":"784db4bae0529f2bcc168b6a09d73e003fd3001c","url":"https://github.com/freenet/fred"},{"original_method":"private void saveCompletedIdentifiers() {\n\t\tFileOutputStream fos = null;\n\t\tBufferedWriter bw = null;\n\t\tString dl = uploads ? \"uploads\" : \"downloads\";\n\t\tFile completedIdentifiersList = new File(core.node.getNodeDir(), \"completed.list.\"+dl);\n\t\tFile completedIdentifiersListNew = new File(core.node.getNodeDir(), \"completed.list.\"+dl+\".bak\");\n\t\tFile temp;\n\t\ttry {\n\t\t\ttemp = File.createTempFile(\"completed.list\", \".tmp\", core.node.getNodeDir());\n\t\t\ttemp.deleteOnExit();\n\t\t\tfos = new FileOutputStream(temp);\n\t\t\tOutputStreamWriter osw = new OutputStreamWriter(fos, \"UTF-8\");\n\t\t\tbw = new BufferedWriter(osw);\n\t\t\tString[] identifiers;\n\t\t\tsynchronized(completedRequestIdentifiers) {\n\t\t\t\tidentifiers = completedRequestIdentifiers.toArray(new String[completedRequestIdentifiers.size()]);\n\t\t\t}\n\t\t\tfor(int i=0;i<identifiers.length;i++)\n\t\t\t\tbw.write(identifiers[i]+'\\n');\n\t\t} catch (FileNotFoundException e) {\n\t\t\tLogger.error(this, \"Unable to save completed requests list (can't find node directory?!!?): \"+e, e);\n\t\t\treturn;\n\t\t} catch (IOException e) {\n\t\t\tLogger.error(this, \"Unable to save completed requests list: \"+e, e);\n\t\t\treturn;\n\t\t} finally {\n\t\t\tif(bw != null) {\n\t\t\t\ttry {\n\t\t\t\t\tbw.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfos.close();\n\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t// Ignore\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t// Ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcompletedIdentifiersListNew.delete();\n\t\ttemp.renameTo(completedIdentifiersListNew);\n\t\tif(!completedIdentifiersListNew.renameTo(completedIdentifiersList)) {\n\t\t\tcompletedIdentifiersList.delete();\n\t\t\tif(!completedIdentifiersListNew.renameTo(completedIdentifiersList)) {\n\t\t\t\tLogger.error(this, \"Unable to store completed identifiers list because unable to rename \"+completedIdentifiersListNew+\" to \"+completedIdentifiersList);\n\t\t\t}\n\t\t}\n\t}","id":70404,"modified_method":"private void saveCompletedIdentifiers() {\n\t\tFileOutputStream fos = null;\n\t\tBufferedWriter bw = null;\n\t\tString dl = uploads ? \"uploads\" : \"downloads\";\n\t\tFile completedIdentifiersList = core.node.userDir().file(\"completed.list.\"+dl);\n\t\tFile completedIdentifiersListNew = core.node.userDir().file(\"completed.list.\"+dl+\".bak\");\n\t\tFile temp;\n\t\ttry {\n\t\t\ttemp = File.createTempFile(\"completed.list\", \".tmp\", core.node.getUserDir());\n\t\t\ttemp.deleteOnExit();\n\t\t\tfos = new FileOutputStream(temp);\n\t\t\tOutputStreamWriter osw = new OutputStreamWriter(fos, \"UTF-8\");\n\t\t\tbw = new BufferedWriter(osw);\n\t\t\tString[] identifiers;\n\t\t\tsynchronized(completedRequestIdentifiers) {\n\t\t\t\tidentifiers = completedRequestIdentifiers.toArray(new String[completedRequestIdentifiers.size()]);\n\t\t\t}\n\t\t\tfor(int i=0;i<identifiers.length;i++)\n\t\t\t\tbw.write(identifiers[i]+'\\n');\n\t\t} catch (FileNotFoundException e) {\n\t\t\tLogger.error(this, \"Unable to save completed requests list (can't find node directory?!!?): \"+e, e);\n\t\t\treturn;\n\t\t} catch (IOException e) {\n\t\t\tLogger.error(this, \"Unable to save completed requests list: \"+e, e);\n\t\t\treturn;\n\t\t} finally {\n\t\t\tif(bw != null) {\n\t\t\t\ttry {\n\t\t\t\t\tbw.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfos.close();\n\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t// Ignore\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t// Ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcompletedIdentifiersListNew.delete();\n\t\ttemp.renameTo(completedIdentifiersListNew);\n\t\tif(!completedIdentifiersListNew.renameTo(completedIdentifiersList)) {\n\t\t\tcompletedIdentifiersList.delete();\n\t\t\tif(!completedIdentifiersListNew.renameTo(completedIdentifiersList)) {\n\t\t\t\tLogger.error(this, \"Unable to store completed identifiers list because unable to rename \"+completedIdentifiersListNew+\" to \"+completedIdentifiersList);\n\t\t\t}\n\t\t}\n\t}","commit_id":"784db4bae0529f2bcc168b6a09d73e003fd3001c","url":"https://github.com/freenet/fred"},{"original_method":"private void sendPersistenceDisabledError(ToadletContext ctx) throws ToadletContextClosedException, IOException {\n\t\tString title = l10n(\"awaitingPasswordTitle\"+(uploads ? \"Uploads\" : \"Downloads\"));\n\t\tif(core.node.awaitingPassword()) {\n\t\t\tPageNode page = ctx.getPageMaker().getPageNode(title, ctx);\n\t\t\tHTMLNode pageNode = page.outer;\n\t\t\tHTMLNode contentNode = page.content;\n\t\t\t\n\t\t\tHTMLNode infoboxContent = ctx.getPageMaker().getInfobox(\"infobox-error\", title, contentNode, null, true);\n\t\t\t\n\t\t\tSecurityLevelsToadlet.generatePasswordFormPage(false, container, infoboxContent, false, false, false, null, path());\n\t\t\t\n\t\t\taddHomepageLink(infoboxContent);\n\t\t\t\n\t\t\twriteHTMLReply(ctx, 500, \"Internal Server Error\", pageNode.generate());\n\t\t\treturn;\n\n\t\t}\n\t\tif(core.node.isStopping())\n\t\t\tsendErrorPage(ctx, 200,\n\t\t\t\t\tNodeL10n.getBase().getString(\"QueueToadlet.shuttingDownTitle\"),\n\t\t\t\t\tNodeL10n.getBase().getString(\"QueueToadlet.shuttingDown\"));\n\t\telse\n\t\t\tsendErrorPage(ctx, 200, \n\t\t\t\t\tNodeL10n.getBase().getString(\"QueueToadlet.persistenceBrokenTitle\"),\n\t\t\t\t\tNodeL10n.getBase().getString(\"QueueToadlet.persistenceBroken\",\n\t\t\t\t\t\t\tnew String[]{ \"TEMPDIR\", \"DBFILE\" },\n\t\t\t\t\t\t\tnew String[]{ FileUtil.getCanonicalFile(core.getPersistentTempDir()).toString()+File.separator, FileUtil.getCanonicalFile(core.node.getNodeDir())+File.separator+\"node.db4o\" }\n\t\t\t\t\t));\n\t}","id":70405,"modified_method":"private void sendPersistenceDisabledError(ToadletContext ctx) throws ToadletContextClosedException, IOException {\n\t\tString title = l10n(\"awaitingPasswordTitle\"+(uploads ? \"Uploads\" : \"Downloads\"));\n\t\tif(core.node.awaitingPassword()) {\n\t\t\tPageNode page = ctx.getPageMaker().getPageNode(title, ctx);\n\t\t\tHTMLNode pageNode = page.outer;\n\t\t\tHTMLNode contentNode = page.content;\n\n\t\t\tHTMLNode infoboxContent = ctx.getPageMaker().getInfobox(\"infobox-error\", title, contentNode, null, true);\n\n\t\t\tSecurityLevelsToadlet.generatePasswordFormPage(false, container, infoboxContent, false, false, false, null, path());\n\n\t\t\taddHomepageLink(infoboxContent);\n\n\t\t\twriteHTMLReply(ctx, 500, \"Internal Server Error\", pageNode.generate());\n\t\t\treturn;\n\n\t\t}\n\t\tif(core.node.isStopping())\n\t\t\tsendErrorPage(ctx, 200,\n\t\t\t\t\tNodeL10n.getBase().getString(\"QueueToadlet.shuttingDownTitle\"),\n\t\t\t\t\tNodeL10n.getBase().getString(\"QueueToadlet.shuttingDown\"));\n\t\telse\n\t\t\tsendErrorPage(ctx, 200,\n\t\t\t\t\tNodeL10n.getBase().getString(\"QueueToadlet.persistenceBrokenTitle\"),\n\t\t\t\t\tNodeL10n.getBase().getString(\"QueueToadlet.persistenceBroken\",\n\t\t\t\t\t\t\tnew String[]{ \"TEMPDIR\", \"DBFILE\" },\n\t\t\t\t\t\t\tnew String[]{ FileUtil.getCanonicalFile(core.getPersistentTempDir()).toString()+File.separator, core.node.userDir().file(\"node.db4o\").getCanonicalPath() }\n\t\t\t\t\t));\n\t}","commit_id":"784db4bae0529f2bcc168b6a09d73e003fd3001c","url":"https://github.com/freenet/fred"},{"original_method":"@Override\n  public IndentTransferableData extractTransferableData(Transferable content) {\n    IndentTransferableData indentData = null;\n    try {\n      final DataFlavor flavor = IndentTransferableData.getDataFlavorStatic();\n      if (flavor != null) {\n        indentData = (IndentTransferableData)content.getTransferData(flavor);\n      }\n    }\n    catch (UnsupportedFlavorException e) {\n      // do nothing\n    }\n    catch (IOException e) {\n      // do nothing\n    }\n    return indentData;\n  }","id":70406,"modified_method":"@Override\n  public IndentTransferableData extractTransferableData(Transferable content) {\n    IndentTransferableData indentData = null;\n    try {\n      final DataFlavor flavor = IndentTransferableData.getDataFlavorStatic();\n      if (flavor != null) {\n        final Object transferData = content.getTransferData(flavor);\n        if (transferData instanceof IndentTransferableData) {\n          indentData = (IndentTransferableData)transferData;\n        }\n      }\n    }\n    catch (UnsupportedFlavorException e) {\n      // do nothing\n    }\n    catch (IOException e) {\n      // do nothing\n    }\n    return indentData;\n  }","commit_id":"80ee8d62fb5dd32c304170f14c70fff72a74f65f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private TreeNode[] getSourceNodes(final Transferable transferable) {\n    try {\n      return ((AbstractProjectViewPSIPane.TransferableWrapper)transferable.getTransferData(dataFlavor)).getTreeNodes();\n    }\n    catch (UnsupportedFlavorException e) {\n      return null;\n    }\n    catch (IOException e) {\n      return null;\n    }\n  }","id":70407,"modified_method":"@Nullable\n  private TreeNode[] getSourceNodes(final Transferable transferable) {\n    try {\n      Object transferData = transferable.getTransferData(dataFlavor);\n      if (transferData instanceof AbstractProjectViewPSIPane.TransferableWrapper) {\n        return ((AbstractProjectViewPSIPane.TransferableWrapper)transferData).getTreeNodes();\n      }\n      return null;\n    }\n    catch (UnsupportedFlavorException e) {\n      return null;\n    }\n    catch (IOException e) {\n      return null;\n    }\n  }","commit_id":"3fd2218136ba5d00d9019fe62043e92431046c12","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void drop(DnDEvent aEvent) {\n    Object attached = aEvent.getAttachedObject();\n    final TreeNode[] sourceNodes = getSourceNodes(attached);\n    final TreeNode targetNode = getTargetNode(aEvent.getPoint());\n    assert targetNode != null;\n    final int dropAction = aEvent.getAction().getActionId();\n    if (sourceNodes == null) {\n      if (aEvent.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n        List<File> fileList;\n        try {\n          fileList = (List<File>)aEvent.getTransferData(DataFlavor.javaFileListFlavor);\n        }\n        catch (Exception e) {\n          return;\n        }\n        getDropHandler(dropAction).doDropFiles(fileList, targetNode);\n      }\n    }\n    else {\n      doDrop(sourceNodes, targetNode, dropAction);\n    }\n  }","id":70408,"modified_method":"@Override\n  public void drop(DnDEvent aEvent) {\n    Object attached = aEvent.getAttachedObject();\n    final TreeNode[] sourceNodes = getSourceNodes(attached);\n    final TreeNode targetNode = getTargetNode(aEvent.getPoint());\n    assert targetNode != null;\n    final int dropAction = aEvent.getAction().getActionId();\n    if (sourceNodes == null) {\n      if (aEvent.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n        Object fileList;\n        try {\n          fileList = ((EventInfo)attached).getTransferable().getTransferData(DataFlavor.javaFileListFlavor);\n        }\n        catch (Exception e) {\n          return;\n        }\n        if (fileList instanceof List) {\n          getDropHandler(dropAction).doDropFiles((List<File>)fileList, targetNode);\n        }\n      }\n    }\n    else {\n      doDrop(sourceNodes, targetNode, dropAction);\n    }\n  }","commit_id":"3cea8877b47a69c989ef2e1b90e705a10d9671a0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void drop(DropTargetDropEvent e) {\n        setIndicated(null);\n        Object over = locationToValue(e.getLocation());\n        if (DEBUG.DND) out(\"DROP over \" + over);\n        if (over instanceof FavoritesDataSource) {\n            if (DEBUG.DND) out(\"drag ACCEPTED\");\n            e.acceptDrop(e.getDropAction());\n        } else {\n            if (DEBUG.DND) out(\"drag rejected\");\n            e.rejectDrop();\n            return;\n        }\n        \n        int current = this.getSelectedIndex();\n        setSelectedIndex(locationToIndex(e.getLocation()));\n        DataSource ds = (DataSource)getSelectedValue();\n        \n        if (DEBUG.DND) System.out.println(\"DROP ON DATA SOURCE: \" + ds.getDisplayName());\n        try {\n            FavoritesWindow fw = (FavoritesWindow)ds.getResourceViewer();\n            VueDandDTree favoritesTree = fw.getFavoritesTree();\n            favoritesTree.setRootVisible(true);\n            DefaultTreeModel model = (DefaultTreeModel)favoritesTree.getModel();\n            FavoritesNode rootNode = (FavoritesNode)model.getRoot();\n            boolean success = true;\n            Transferable transfer = e.getTransferable();\n            DataFlavor[] dataFlavors = transfer.getTransferDataFlavors();\n            String resourceName = null;\n            java.util.List fileList = null;\n            java.util.List resourceList = null;\n            if (DEBUG.DND) System.out.println(\"RESOURCE TRANSFER FOUND: \" + transfer);\n            try {\n                if (transfer.isDataFlavorSupported(Resource.DataFlavor)) {\n                    resourceList = (java.util.List) transfer.getTransferData(Resource.DataFlavor);\n                    java.util.Iterator iter = resourceList.iterator();\n                    while(iter.hasNext()) {\n                        Resource resource = (Resource) iter.next();\n                        if (DEBUG.DND) System.out.println(\"RESOURCE FOUND: \" + resource+ \" type =\"+ resource.getType()+ \" resource class:\"+resource.getClass());  \n                        ResourceNode newNode;\n                        if(resource.getType() == Resource.FILE){\n                         //   newNode = CabinetNode.getCabinetNode(resource.getTitle(),new File(resource.getSpec()),rootNode,model);\n                            newNode = new CabinetNode(resource,CabinetNode.LOCAL);\n                            CabinetResource cr = (CabinetResource)newNode.getResource();\n                            if(DEBUG.DND) System.out.println(\"CABINET RESOURCE: \" + resource+ \"Entry: \"+cr.getEntry()+ \"entry type:\"+cr.getEntry().getClass()+\" type:\"+cr.getEntry());\n                        } else {\n                            newNode    =new  ResourceNode(resource);\n                        }\n                        model.insertNodeInto(newNode, rootNode, newNode.getChildCount());\n                        favoritesTree.expandPath(new TreePath(rootNode.getPath()));\n                        favoritesTree.setRootVisible(false);\n                    }\n                } else if (transfer.isDataFlavorSupported(DataFlavor.javaFileListFlavor)){\n                    fileList = (java.util.List)transfer.getTransferData(DataFlavor.javaFileListFlavor);\n                    java.util.Iterator iter = fileList.iterator();\n                    while(iter.hasNext()){\n                        File file = (File)iter.next();\n                        if (file.isDirectory()){\n                            try{\n                                LocalFilingManager manager = new LocalFilingManager();   // get a filing manager\n                                osid.shared.Agent agent = null;\n                                LocalCabinet cab = new LocalCabinet(file.getAbsolutePath(),agent,null);\n                                CabinetResource res = new CabinetResource(cab);\n                                CabinetEntry entry = res.getEntry();\n                                if (file.getPath().toLowerCase().endsWith(\".url\")) {\n                                    String url = convertWindowsURLShortCutToURL(file);\n                                    if (url != null) {\n                                        res.setSpec(\"file://\" + url);\n                                        String resName;\n                                        if (file.getName().length() > 4)\n                                            resName = file.getName().substring(0, file.getName().length() - 4);\n                                        else\n                                            resName = file.getName();\n                                        res.setTitle(resName);\n                                    }\n                                }\n                                CabinetNode cabNode = null;\n                                if (entry instanceof RemoteCabinetEntry)\n                                    cabNode = new CabinetNode(res, CabinetNode.REMOTE);\n                                else\n                                    cabNode = new CabinetNode(res, CabinetNode.LOCAL);\n                                model.insertNodeInto(cabNode, rootNode, 0);\n                                favoritesTree.expandPath(new TreePath(rootNode.getPath()));\n                                favoritesTree.setRootVisible(false);\n                                cabNode.explore();\n                            }catch (Exception ex) {System.out.println(\"DataSourceList.drop: \"+ex);}\n                        } else{\n                            try{\n                                LocalFilingManager manager = new LocalFilingManager();   // get a filing manager\n                                osid.shared.Agent agent = null;\n                                LocalCabinet cab = new LocalCabinet(file.getAbsolutePath(),agent,null);\n                                CabinetResource res = new CabinetResource(cab);\n                                //res.setTitle(file.getAbsolutePath());\n                                CabinetEntry oldentry = res.getEntry();\n                                res.setEntry(null);\n                                if (file.getPath().toLowerCase().endsWith(\".url\")) {\n                                    // Search a windows .url file (an internet shortcut)\n                                    // for the actual web reference.\n                                    String url = convertWindowsURLShortCutToURL(file);\n                                    if (url != null) {\n                                        //resourceSpec = url;\n                                        res.setSpec(\"file://\" + url);\n                                        String resName;\n                                        if (file.getName().length() > 4)\n                                            resName = file.getName().substring(0, file.getName().length() - 4);\n                                        else\n                                            resName = file.getName();\n                                        res.setTitle(resourceName);\n                                    }\n                                }\n                                CabinetNode cabNode = null;\n                                if (oldentry instanceof RemoteCabinetEntry)\n                                    cabNode = new CabinetNode(res, CabinetNode.REMOTE);\n                                else\n                                    cabNode = new CabinetNode(res, CabinetNode.LOCAL);\n                                model.insertNodeInto(cabNode, rootNode, 0);\n                                favoritesTree.expandPath(new TreePath(rootNode.getPath()));\n                                favoritesTree.setRootVisible(false);\n                            }catch (Exception ex) {System.out.println(\"DataSourceList.drop: \"+ex);}\n                        }\n                    }\n                }\n                \n                else if (transfer.isDataFlavorSupported(DataFlavor.stringFlavor)){\n                    String dataString = (String)transfer.getTransferData(DataFlavor.stringFlavor);\n                    Resource resource = new MapResource(dataString);\n                    ResourceNode newNode =new  ResourceNode(resource);\n                    model.insertNodeInto(newNode, rootNode, 0);\n                    favoritesTree.expandPath(new TreePath(rootNode.getPath()));\n                    favoritesTree.setRootVisible(false);\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n            e.dropComplete(success);\n            favoritesTree.setRootVisible(true);\n            favoritesTree.expandRow(0);\n            favoritesTree.setRootVisible(false);\n            this.setSelectedIndex(current);\n        } catch (Exception ex) {\n            if (DEBUG.DND) tufts.Util.printStackTrace(ex);\n            this.setSelectedIndex(current);\n            VueUtil.alert(null, \"You can only add resources to a Favorites Datasource\",\"Resource Not Added\");\n        }\n    }","id":70409,"modified_method":"public void drop(DropTargetDropEvent e) {\n        setIndicated(null);\n        Object over = locationToValue(e.getLocation());\n        if (DEBUG.DND) out(\"DROP over \" + over);\n        if (over instanceof FavoritesDataSource) {\n            if (DEBUG.DND) out(\"drag ACCEPTED\");\n            e.acceptDrop(e.getDropAction());\n        } else {\n            if (DEBUG.DND) out(\"drag rejected\");\n            e.rejectDrop();\n            return;\n        }\n        \n        int current = this.getSelectedIndex();\n        setSelectedIndex(locationToIndex(e.getLocation()));\n        DataSource ds = (DataSource)getSelectedValue();\n        \n        if (DEBUG.DND) System.out.println(\"DROP ON DATA SOURCE: \" + ds.getDisplayName());\n        try {\n            FavoritesWindow fw = (FavoritesWindow)ds.getResourceViewer();\n            VueDandDTree favoritesTree = fw.getFavoritesTree();\n            favoritesTree.setRootVisible(true);\n            DefaultTreeModel model = (DefaultTreeModel)favoritesTree.getModel();\n            FavoritesNode rootNode = (FavoritesNode)model.getRoot();\n            boolean success = true;\n            Transferable transfer = e.getTransferable();\n            DataFlavor[] dataFlavors = transfer.getTransferDataFlavors();\n            String resourceName = null;\n            java.util.List fileList = null;\n            java.util.List resourceList = null;\n            if (DEBUG.DND) System.out.println(\"RESOURCE TRANSFER FOUND: \" + transfer);\n            try {\n                if (transfer.isDataFlavorSupported(Resource.DataFlavor)) {\n                    final Object data = transfer.getTransferData(Resource.DataFlavor);\n                    Collection<Resource> droppedResources = null;\n                    if (data instanceof Resource) {\n                        droppedResources = (Collection) Collections.singletonList(data);\n                    } else if (data instanceof Collection) {\n                        droppedResources = (Collection) data;\n                    } else {\n                        Util.printStackTrace(\"Unhandled drop type: \" + Util.tag(data) + \"; \" + data);\n                        return;\n                    }\n                    \n                    for (Resource resource : droppedResources) {\n                        if (DEBUG.DND) System.out.println(\"RESOURCE FOUND: \" + resource+ \" type =\"+ resource.getType()+ \" resource class:\"+resource.getClass());  \n                        ResourceNode newNode;\n                        if(resource.getType() == Resource.FILE){\n                         //   newNode = CabinetNode.getCabinetNode(resource.getTitle(),new File(resource.getSpec()),rootNode,model);\n                            newNode = new CabinetNode(resource,CabinetNode.LOCAL);\n                            CabinetResource cr = (CabinetResource)newNode.getResource();\n                            if(DEBUG.DND) System.out.println(\"CABINET RESOURCE: \" + resource+ \"Entry: \"+cr.getEntry()+ \"entry type:\"+cr.getEntry().getClass()+\" type:\"+cr.getEntry());\n                        } else {\n                            newNode    =new  ResourceNode(resource);\n                        }\n                        model.insertNodeInto(newNode, rootNode, newNode.getChildCount());\n                        favoritesTree.expandPath(new TreePath(rootNode.getPath()));\n                        favoritesTree.setRootVisible(false);\n                    }\n                } else if (transfer.isDataFlavorSupported(DataFlavor.javaFileListFlavor)){\n                    fileList = (java.util.List)transfer.getTransferData(DataFlavor.javaFileListFlavor);\n                    java.util.Iterator iter = fileList.iterator();\n                    while(iter.hasNext()){\n                        File file = (File)iter.next();\n                        if (file.isDirectory()){\n                            try{\n                                LocalFilingManager manager = new LocalFilingManager();   // get a filing manager\n                                osid.shared.Agent agent = null;\n                                LocalCabinet cab = new LocalCabinet(file.getAbsolutePath(),agent,null);\n                                CabinetResource res = new CabinetResource(cab);\n                                CabinetEntry entry = res.getEntry();\n                                if (file.getPath().toLowerCase().endsWith(\".url\")) {\n                                    String url = convertWindowsURLShortCutToURL(file);\n                                    if (url != null) {\n                                        res.setSpec(\"file://\" + url);\n                                        String resName;\n                                        if (file.getName().length() > 4)\n                                            resName = file.getName().substring(0, file.getName().length() - 4);\n                                        else\n                                            resName = file.getName();\n                                        res.setTitle(resName);\n                                    }\n                                }\n                                CabinetNode cabNode = null;\n                                if (entry instanceof RemoteCabinetEntry)\n                                    cabNode = new CabinetNode(res, CabinetNode.REMOTE);\n                                else\n                                    cabNode = new CabinetNode(res, CabinetNode.LOCAL);\n                                model.insertNodeInto(cabNode, rootNode, 0);\n                                favoritesTree.expandPath(new TreePath(rootNode.getPath()));\n                                favoritesTree.setRootVisible(false);\n                                cabNode.explore();\n                            }catch (Exception ex) {System.out.println(\"DataSourceList.drop: \"+ex);}\n                        } else{\n                            try{\n                                LocalFilingManager manager = new LocalFilingManager();   // get a filing manager\n                                osid.shared.Agent agent = null;\n                                LocalCabinet cab = new LocalCabinet(file.getAbsolutePath(),agent,null);\n                                CabinetResource res = new CabinetResource(cab);\n                                //res.setTitle(file.getAbsolutePath());\n                                CabinetEntry oldentry = res.getEntry();\n                                res.setEntry(null);\n                                if (file.getPath().toLowerCase().endsWith(\".url\")) {\n                                    // Search a windows .url file (an internet shortcut)\n                                    // for the actual web reference.\n                                    String url = convertWindowsURLShortCutToURL(file);\n                                    if (url != null) {\n                                        //resourceSpec = url;\n                                        res.setSpec(\"file://\" + url);\n                                        String resName;\n                                        if (file.getName().length() > 4)\n                                            resName = file.getName().substring(0, file.getName().length() - 4);\n                                        else\n                                            resName = file.getName();\n                                        res.setTitle(resourceName);\n                                    }\n                                }\n                                CabinetNode cabNode = null;\n                                if (oldentry instanceof RemoteCabinetEntry)\n                                    cabNode = new CabinetNode(res, CabinetNode.REMOTE);\n                                else\n                                    cabNode = new CabinetNode(res, CabinetNode.LOCAL);\n                                model.insertNodeInto(cabNode, rootNode, 0);\n                                favoritesTree.expandPath(new TreePath(rootNode.getPath()));\n                                favoritesTree.setRootVisible(false);\n                            }catch (Exception ex) {System.out.println(\"DataSourceList.drop: \"+ex);}\n                        }\n                    }\n                }\n                \n                else if (transfer.isDataFlavorSupported(DataFlavor.stringFlavor)){\n                    String dataString = (String)transfer.getTransferData(DataFlavor.stringFlavor);\n                    Resource resource = new MapResource(dataString);\n                    ResourceNode newNode =new  ResourceNode(resource);\n                    model.insertNodeInto(newNode, rootNode, 0);\n                    favoritesTree.expandPath(new TreePath(rootNode.getPath()));\n                    favoritesTree.setRootVisible(false);\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n            e.dropComplete(success);\n            favoritesTree.setRootVisible(true);\n            favoritesTree.expandRow(0);\n            favoritesTree.setRootVisible(false);\n            this.setSelectedIndex(current);\n        } catch (Exception ex) {\n            if (DEBUG.DND) tufts.Util.printStackTrace(ex);\n            this.setSelectedIndex(current);\n            VueUtil.alert(null, \"You can only add resources to a Favorites Datasource\",\"Resource Not Added\");\n        }\n    }","commit_id":"e11f59209f1502b214d7369ba515a45d04dee36c","url":"https://github.com/VUE/VUE"},{"original_method":"@Override public void render(Block html) {\n    TBODY<TABLE<Hamlet>> tbody = html.\n      table(\"#apps\").\n        thead().\n          tr().\n            th(\".id\", \"ID\").\n            th(\".user\", \"User\").\n            th(\".name\", \"Name\").\n            th(\".queue\", \"Queue\").\n            th(\".starttime\", \"StartTime\").\n            th(\".finishtime\", \"FinishTime\").\n            th(\".state\", \"State\").\n            th(\".finalstatus\", \"FinalStatus\").\n            th(\".progress\", \"Progress\").\n            th(\".ui\", \"Tracking UI\")._()._().\n        tbody();\n    Collection<RMAppState> reqAppStates = null;\n    String reqStateString = $(APP_STATE);\n    if (reqStateString != null && !reqStateString.isEmpty()) {\n      String[] appStateStrings = reqStateString.split(\",\");\n      reqAppStates = new HashSet<RMAppState>(appStateStrings.length);\n      for(String stateString : appStateStrings) {\n        reqAppStates.add(RMAppState.valueOf(stateString));\n      }\n    }\n    StringBuilder appsTableData = new StringBuilder(\"[\\n\");\n    for (RMApp app : apps.values()) {\n      if (reqAppStates != null && !reqAppStates.contains(app.getState())) {\n        continue;\n      }\n      AppInfo appInfo = new AppInfo(app, true);\n      String percent = String.format(\"%.1f\", appInfo.getProgress());\n      //AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n      appsTableData.append(\"[\\\"<a href='\")\n      .append(url(\"app\", appInfo.getAppId())).append(\"'>\")\n      .append(appInfo.getAppId()).append(\"<\/a>\\\",\\\"\")\n      .append(StringEscapeUtils.escapeHtml(appInfo.getUser()))\n      .append(\"\\\",\\\"\")\n      .append(StringEscapeUtils.escapeHtml(appInfo.getName()))\n      .append(\"\\\",\\\"\")\n      .append(StringEscapeUtils.escapeHtml(appInfo.getQueue()))\n      .append(\"\\\",\\\"\")\n      .append(appInfo.getStartTime()).append(\"\\\",\\\"\")\n      .append(appInfo.getFinishTime()).append(\"\\\",\\\"\")\n      .append(appInfo.getState()).append(\"\\\",\\\"\")\n      .append(appInfo.getFinalStatus()).append(\"\\\",\\\"\")\n      // Progress bar\n      .append(\"<br title='\").append(percent)\n      .append(\"'> <div class='\").append(C_PROGRESSBAR).append(\"' title='\")\n      .append(join(percent, '%')).append(\"'> \").append(\"<div class='\")\n      .append(C_PROGRESSBAR_VALUE).append(\"' style='\")\n      .append(join(\"width:\", percent, '%')).append(\"'> <\/div> <\/div>\")\n      .append(\"\\\",\\\"<a href='\");\n\n      String trackingURL =\n        !appInfo.isTrackingUrlReady()? \"#\" : appInfo.getTrackingUrlPretty();\n      \n      appsTableData.append(trackingURL).append(\"'>\")\n      .append(appInfo.getTrackingUI()).append(\"<\/a>\\\"],\\n\");\n\n    }\n    if(appsTableData.charAt(appsTableData.length() - 2) == ',') {\n      appsTableData.delete(appsTableData.length()-2, appsTableData.length()-1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\").\n    _(\"var appsTableData=\" + appsTableData)._();\n\n    tbody._()._();\n  }","id":70410,"modified_method":"@Override public void render(Block html) {\n    TBODY<TABLE<Hamlet>> tbody = html.\n      table(\"#apps\").\n        thead().\n          tr().\n            th(\".id\", \"ID\").\n            th(\".user\", \"User\").\n            th(\".name\", \"Name\").\n            th(\".queue\", \"Queue\").\n            th(\".starttime\", \"StartTime\").\n            th(\".finishtime\", \"FinishTime\").\n            th(\".state\", \"State\").\n            th(\".finalstatus\", \"FinalStatus\").\n            th(\".progress\", \"Progress\").\n            th(\".ui\", \"Tracking UI\")._()._().\n        tbody();\n    Collection<RMAppState> reqAppStates = null;\n    String reqStateString = $(APP_STATE);\n    if (reqStateString != null && !reqStateString.isEmpty()) {\n      String[] appStateStrings = reqStateString.split(\",\");\n      reqAppStates = new HashSet<RMAppState>(appStateStrings.length);\n      for(String stateString : appStateStrings) {\n        reqAppStates.add(RMAppState.valueOf(stateString));\n      }\n    }\n    StringBuilder appsTableData = new StringBuilder(\"[\\n\");\n    for (RMApp app : apps.values()) {\n      if (reqAppStates != null && !reqAppStates.contains(app.getState())) {\n        continue;\n      }\n      AppInfo appInfo = new AppInfo(app, true);\n      String percent = String.format(\"%.1f\", appInfo.getProgress());\n      //AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n      appsTableData.append(\"[\\\"<a href='\")\n      .append(url(\"app\", appInfo.getAppId())).append(\"'>\")\n      .append(appInfo.getAppId()).append(\"<\/a>\\\",\\\"\")\n      .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n        appInfo.getUser()))).append(\"\\\",\\\"\")\n      .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n        appInfo.getName()))).append(\"\\\",\\\"\")\n      .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n        appInfo.getQueue()))).append(\"\\\",\\\"\")\n      .append(appInfo.getStartTime()).append(\"\\\",\\\"\")\n      .append(appInfo.getFinishTime()).append(\"\\\",\\\"\")\n      .append(appInfo.getState()).append(\"\\\",\\\"\")\n      .append(appInfo.getFinalStatus()).append(\"\\\",\\\"\")\n      // Progress bar\n      .append(\"<br title='\").append(percent)\n      .append(\"'> <div class='\").append(C_PROGRESSBAR).append(\"' title='\")\n      .append(join(percent, '%')).append(\"'> \").append(\"<div class='\")\n      .append(C_PROGRESSBAR_VALUE).append(\"' style='\")\n      .append(join(\"width:\", percent, '%')).append(\"'> <\/div> <\/div>\")\n      .append(\"\\\",\\\"<a href='\");\n\n      String trackingURL =\n        !appInfo.isTrackingUrlReady()? \"#\" : appInfo.getTrackingUrlPretty();\n      \n      appsTableData.append(trackingURL).append(\"'>\")\n      .append(appInfo.getTrackingUI()).append(\"<\/a>\\\"],\\n\");\n\n    }\n    if(appsTableData.charAt(appsTableData.length() - 2) == ',') {\n      appsTableData.delete(appsTableData.length()-2, appsTableData.length()-1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\").\n    _(\"var appsTableData=\" + appsTableData)._();\n\n    tbody._()._();\n  }","commit_id":"b72b36009a43214cec3f4d656face53c0b0291fd","url":"https://github.com/apache/hadoop"},{"original_method":"@Override protected void render(Block html) {\n    TBODY<TABLE<Hamlet>> tbody = html.\n      h2(\"Retired Jobs\").\n      table(\"#jobs\").\n        thead().\n          tr().\n            th(\"Start Time\").\n            th(\"Finish Time\").\n            th(\".id\", \"Job ID\").\n            th(\".name\", \"Name\").\n            th(\"User\").\n            th(\"Queue\").\n            th(\".state\", \"State\").\n            th(\"Maps Total\").\n            th(\"Maps Completed\").\n            th(\"Reduces Total\").\n            th(\"Reduces Completed\")._()._().\n        tbody();\n    LOG.info(\"Getting list of all Jobs.\");\n    // Write all the data into a JavaScript array of arrays for JQuery\n    // DataTables to display\n    StringBuilder jobsTableData = new StringBuilder(\"[\\n\");\n    for (Job j : appContext.getAllJobs().values()) {\n      JobInfo job = new JobInfo(j);\n      jobsTableData.append(\"[\\\"\")\n      .append(dateFormat.format(new Date(job.getStartTime()))).append(\"\\\",\\\"\")\n      .append(dateFormat.format(new Date(job.getFinishTime()))).append(\"\\\",\\\"\")\n      .append(\"<a href='\").append(url(\"job\", job.getId())).append(\"'>\")\n      .append(job.getId()).append(\"<\/a>\\\",\\\"\")\n      .append(StringEscapeUtils.escapeHtml(job.getName()))\n      .append(\"\\\",\\\"\")\n      .append(StringEscapeUtils.escapeHtml(job.getUserName()))\n      .append(\"\\\",\\\"\")\n      .append(StringEscapeUtils.escapeHtml(job.getQueueName()))\n      .append(\"\\\",\\\"\")\n      .append(job.getState()).append(\"\\\",\\\"\")\n      .append(String.valueOf(job.getMapsTotal())).append(\"\\\",\\\"\")\n      .append(String.valueOf(job.getMapsCompleted())).append(\"\\\",\\\"\")\n      .append(String.valueOf(job.getReducesTotal())).append(\"\\\",\\\"\")\n      .append(String.valueOf(job.getReducesCompleted())).append(\"\\\"],\\n\");\n    }\n\n    //Remove the last comma and close off the array of arrays\n    if(jobsTableData.charAt(jobsTableData.length() - 2) == ',') {\n      jobsTableData.delete(jobsTableData.length()-2, jobsTableData.length()-1);\n    }\n    jobsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\").\n    _(\"var jobsTableData=\" + jobsTableData)._();\n    tbody._().\n    tfoot().\n      tr().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\").$value(\"Finish Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Job ID\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Name\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"User\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Queue\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"State\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Maps Total\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Maps Completed\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Reduces Total\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Reduces Completed\")._()._().\n        _().\n      _().\n    _();\n  }","id":70411,"modified_method":"@Override protected void render(Block html) {\n    TBODY<TABLE<Hamlet>> tbody = html.\n      h2(\"Retired Jobs\").\n      table(\"#jobs\").\n        thead().\n          tr().\n            th(\"Start Time\").\n            th(\"Finish Time\").\n            th(\".id\", \"Job ID\").\n            th(\".name\", \"Name\").\n            th(\"User\").\n            th(\"Queue\").\n            th(\".state\", \"State\").\n            th(\"Maps Total\").\n            th(\"Maps Completed\").\n            th(\"Reduces Total\").\n            th(\"Reduces Completed\")._()._().\n        tbody();\n    LOG.info(\"Getting list of all Jobs.\");\n    // Write all the data into a JavaScript array of arrays for JQuery\n    // DataTables to display\n    StringBuilder jobsTableData = new StringBuilder(\"[\\n\");\n    for (Job j : appContext.getAllJobs().values()) {\n      JobInfo job = new JobInfo(j);\n      jobsTableData.append(\"[\\\"\")\n      .append(dateFormat.format(new Date(job.getStartTime()))).append(\"\\\",\\\"\")\n      .append(dateFormat.format(new Date(job.getFinishTime()))).append(\"\\\",\\\"\")\n      .append(\"<a href='\").append(url(\"job\", job.getId())).append(\"'>\")\n      .append(job.getId()).append(\"<\/a>\\\",\\\"\")\n      .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n        job.getName()))).append(\"\\\",\\\"\")\n      .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n        job.getUserName()))).append(\"\\\",\\\"\")\n      .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n        job.getQueueName()))).append(\"\\\",\\\"\")\n      .append(job.getState()).append(\"\\\",\\\"\")\n      .append(String.valueOf(job.getMapsTotal())).append(\"\\\",\\\"\")\n      .append(String.valueOf(job.getMapsCompleted())).append(\"\\\",\\\"\")\n      .append(String.valueOf(job.getReducesTotal())).append(\"\\\",\\\"\")\n      .append(String.valueOf(job.getReducesCompleted())).append(\"\\\"],\\n\");\n    }\n\n    //Remove the last comma and close off the array of arrays\n    if(jobsTableData.charAt(jobsTableData.length() - 2) == ',') {\n      jobsTableData.delete(jobsTableData.length()-2, jobsTableData.length()-1);\n    }\n    jobsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\").\n    _(\"var jobsTableData=\" + jobsTableData)._();\n    tbody._().\n    tfoot().\n      tr().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\").$value(\"Finish Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Job ID\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Name\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"User\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Queue\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"State\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Maps Total\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Maps Completed\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Reduces Total\")._()._().\n        th().input(\"search_init\").$type(InputType.text).$name(\"start_time\").$value(\"Reduces Completed\")._()._().\n        _().\n      _().\n    _();\n  }","commit_id":"b72b36009a43214cec3f4d656face53c0b0291fd","url":"https://github.com/apache/hadoop"},{"original_method":"protected void parseExtension(XMLExtendedStreamReader reader, String enclosingTag, final ModelNode operation,\n                                  final SimpleAttributeDefinition extensionclassname, final SimpleAttributeDefinition extensionProperties)\n            throws XMLStreamException, ParserException, ValidateException {\n\n        String className = null;\n        Map<String, String> properties = null;\n\n        for (Extension.Attribute attribute : Extension.Attribute.values()) {\n            switch (attribute) {\n                case CLASS_NAME: {\n                    requireSingleAttribute(reader, attribute.getLocalName());\n                    final String value = reader.getAttributeValue(0);\n                    extensionclassname.parseAndSetParameter(value, operation, reader);\n                    break;\n\n                }\n                default:\n                    break;\n            }\n        }\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (reader.getLocalName().equals(enclosingTag)) {\n                        //It's fine doing nothing\n                        return;\n                    } else {\n                        if (Extension.Tag.forName(reader.getLocalName()) == Extension.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (Extension.Tag.forName(reader.getLocalName())) {\n                        case CONFIG_PROPERTY: {\n                            requireSingleAttribute(reader, \"name\");\n                            final String name = reader.getAttributeValue(0);\n                            String value = rawElementText(reader);\n                            ModelNode node = extensionProperties.parse(value, reader);\n                            operation.get(extensionProperties.getName(), name).set(node);\n                            break;\n                        }\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }","id":70412,"modified_method":"protected void parseExtension(XMLExtendedStreamReader reader, String enclosingTag, final ModelNode operation,\n                                  final SimpleAttributeDefinition extensionclassname, final SimpleAttributeDefinition extensionProperties)\n            throws XMLStreamException, ParserException, ValidateException {\n\n        String className = null;\n        Map<String, String> properties = null;\n\n        for (Extension.Attribute attribute : Extension.Attribute.values()) {\n            switch (attribute) {\n                case CLASS_NAME: {\n                    requireSingleAttribute(reader, attribute.getLocalName());\n                    final String value = reader.getAttributeValue(0);\n                    extensionclassname.parseAndSetParameter(value, operation, reader);\n                    break;\n\n                }\n                default:\n                    break;\n            }\n        }\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (reader.getLocalName().equals(enclosingTag)) {\n                        //It's fine doing nothing\n                        return;\n                    } else {\n                        if (Extension.Tag.forName(reader.getLocalName()) == Extension.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (Extension.Tag.forName(reader.getLocalName())) {\n                        case CONFIG_PROPERTY: {\n                            requireSingleAttribute(reader, \"name\");\n                            final String name = reader.getAttributeValue(0);\n                            String value = rawElementText(reader);\n                            final String trimmed = value == null ? null : value.trim();\n                            ModelNode node = new ModelNode();\n                            if (trimmed != null ) {\n                                if (extensionProperties.isAllowExpression()) {\n                                    node = ParseUtils.parsePossibleExpression(trimmed);\n                                } else {\n                                    node = new ModelNode().set(trimmed);\n                                }\n                            }\n                            operation.get(extensionProperties.getName(), name).set(node);\n                            break;\n                        }\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * parse a {@link org.jboss.jca.common.api.metadata.common.CommonXaPool} object\n     *\n     * @param reader reader\n     * @return the parsed {@link org.jboss.jca.common.api.metadata.common.CommonXaPool} object\n     * @throws XMLStreamException XMLStreamException\n     * @throws org.jboss.jca.common.metadata.ParserException\n     *                            ParserException\n     * @throws ValidateException  ValidateException\n     */\n    protected void parseXaPool(XMLExtendedStreamReader reader, ModelNode node) throws XMLStreamException, ParserException,\n            ValidateException {\n\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (XaDataSource.Tag.forName(reader.getLocalName()) == XaDataSource.Tag.XA_POOL) {\n\n                        return;\n\n                    } else {\n                        if (CommonXaPool.Tag.forName(reader.getLocalName()) == CommonXaPool.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (CommonXaPool.Tag.forName(reader.getLocalName())) {\n                        case MAX_POOL_SIZE: {\n                            String value = rawElementText(reader);\n                            MAX_POOL_SIZE.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case MIN_POOL_SIZE: {\n                            String value = rawElementText(reader);\n                            MIN_POOL_SIZE.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n\n                        case PREFILL: {\n                            String value = rawElementText(reader);\n                            POOL_PREFILL.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case USE_STRICT_MIN: {\n                            String value = rawElementText(reader);\n                            POOL_USE_STRICT_MIN.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case FLUSH_STRATEGY: {\n                            String value = rawElementText(reader);\n                            POOL_FLUSH_STRATEGY.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case INTERLEAVING: {\n                            String value = rawElementText(reader);\n                            INTERLEAVING.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case IS_SAME_RM_OVERRIDE: {\n                            String value = rawElementText(reader);\n                            SAME_RM_OVERRIDE.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case NO_TX_SEPARATE_POOLS: {\n                            String value = rawElementText(reader);\n                            NOTXSEPARATEPOOL.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case PAD_XID: {\n                            String value = rawElementText(reader);\n                            PAD_XID.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case WRAP_XA_RESOURCE: {\n                            String value = rawElementText(reader);\n                            WRAP_XA_RESOURCE.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }","id":70413,"modified_method":"/**\n     * parse a {@link org.jboss.jca.common.api.metadata.common.CommonXaPool} object\n     *\n     * @param reader reader\n     * @return the parsed {@link org.jboss.jca.common.api.metadata.common.CommonXaPool} object\n     * @throws XMLStreamException XMLStreamException\n     * @throws org.jboss.jca.common.metadata.ParserException\n     *                            ParserException\n     * @throws ValidateException  ValidateException\n     */\n    protected void parseXaPool(XMLExtendedStreamReader reader, ModelNode node) throws XMLStreamException, ParserException,\n            ValidateException {\n\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (XaDataSource.Tag.forName(reader.getLocalName()) == XaDataSource.Tag.XA_POOL) {\n\n                        return;\n\n                    } else {\n                        if (CommonXaPool.Tag.forName(reader.getLocalName()) == CommonXaPool.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (CommonXaPool.Tag.forName(reader.getLocalName())) {\n                        case MAX_POOL_SIZE: {\n                            String value = rawElementText(reader);\n                            MAX_POOL_SIZE.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case MIN_POOL_SIZE: {\n                            String value = rawElementText(reader);\n                            MIN_POOL_SIZE.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n\n                        case PREFILL: {\n                            String value = rawElementText(reader);\n                            POOL_PREFILL.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case USE_STRICT_MIN: {\n                            String value = rawElementText(reader);\n                            POOL_USE_STRICT_MIN.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case FLUSH_STRATEGY: {\n                            String value = rawElementText(reader);\n                            POOL_FLUSH_STRATEGY.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case INTERLEAVING: {\n                            String value = rawElementText(reader);\n                            //just presence means true\n                            value = value == null ? \"true\" : value;\n                            INTERLEAVING.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case IS_SAME_RM_OVERRIDE: {\n                            String value = rawElementText(reader);\n                            SAME_RM_OVERRIDE.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case NO_TX_SEPARATE_POOLS: {\n                            String value = rawElementText(reader);\n                            //just presence means true\n                            value = value == null ? \"true\" : value;\n                            NOTXSEPARATEPOOL.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case PAD_XID: {\n                            String value = rawElementText(reader);\n                            PAD_XID.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case WRAP_XA_RESOURCE: {\n                            String value = rawElementText(reader);\n                            WRAP_XA_RESOURCE.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parseSecuritySettings(XMLExtendedStreamReader reader, ModelNode node) throws XMLStreamException, ParserException,\n            ValidateException {\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.SECURITY) {\n\n                        return;\n                    } else {\n                        if (CommonSecurity.Tag.forName(reader.getLocalName()) == CommonSecurity.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (CommonSecurity.Tag.forName(reader.getLocalName())) {\n\n                        case SECURITY_DOMAIN: {\n                            String value = rawElementText(reader);\n                            SECURITY_DOMAIN.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case SECURITY_DOMAIN_AND_APPLICATION: {\n                            String value = rawElementText(reader);\n                            SECURITY_DOMAIN_AND_APPLICATION.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case APPLICATION: {\n                            String value = rawElementText(reader);\n                            APPLICATION.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }","id":70414,"modified_method":"private void parseSecuritySettings(XMLExtendedStreamReader reader, ModelNode node) throws XMLStreamException, ParserException,\n            ValidateException {\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.SECURITY) {\n\n                        return;\n                    } else {\n                        if (CommonSecurity.Tag.forName(reader.getLocalName()) == CommonSecurity.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (CommonSecurity.Tag.forName(reader.getLocalName())) {\n\n                        case SECURITY_DOMAIN: {\n                            String value = rawElementText(reader);\n                            SECURITY_DOMAIN.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case SECURITY_DOMAIN_AND_APPLICATION: {\n                            String value = rawElementText(reader);\n                            SECURITY_DOMAIN_AND_APPLICATION.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        case APPLICATION: {\n                            String value = rawElementText(reader);\n                            //just presence means true\n                            value = value == null ? \"true\" : value;\n                            APPLICATION.parseAndSetParameter(value, node, reader);\n                            break;\n                        }\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    @Ignore(\"AS7-3008\")\n    public void testDatasource() throws Exception{\n        // Only contain the subsystem xml, e.g.\n        //  <subsystem xmlns=\"urn:jboss:domain:datasources:1.0\"> ... <\/subsystem>\n        String xml = readResource(\"datasource.xml\");\n\n        KernelServices services = super.installInController(new AdditionalInitialization() {\n\n            @Override\n            protected Type getType() {\n                //This override makes it only install in the model, not create the services\n                return Type.MANAGEMENT;\n            }\n\n        }, xml);\n\n        ModelNode model = services.readWholeModel();\n\n        //Check model..\n        final String complexDs = \"complexDs\";\n        final String complexDsJndi = \"java:jboss/datasources/\" + complexDs;\n        Properties params=nonXaDsProperties(complexDsJndi);\n        ModelNode modelDs=model.get(\"subsystem\", \"datasources\",\"data-source\",complexDs+\"_Pool\");\n        controlModelParams(modelDs,params);\n        Assert.assertEquals(modelDs.asString(),\"UTF-8\",modelDs.get(\"connection-properties\",\"char.encoding\",\"value\").asString());\n\n        final String complexXaDs = \"complexXaDs\";\n        final String complexXaDsJndi = \"java:jboss/xa-datasources/\" + complexXaDs;\n        params=nonXaDsProperties(complexXaDsJndi);\n        ModelNode modelXaDs=model.get(\"subsystem\", \"datasources\",\"xa-data-source\",complexXaDs+\"_Pool\");\n        controlModelParams(modelXaDs,params);\n        Assert.assertEquals(modelXaDs.asString(),\"jdbc:h2:mem:test\",modelXaDs.get(\"xa-datasource-properties\",\"URL\",\"value\").asString());\n\n        //Marshal the xml to see that it is the same as before\n        String marshalled = services.getPersistedSubsystemXml();\n       // Assert.assertEquals(normalizeXML(xml), normalizeXML(marshalled));\n\n        services = super.installInController(new AdditionalInitialization() {\n\n            @Override\n            protected Type getType() {\n                //This override makes it only install in the model, not create the services\n                return Type.MANAGEMENT;\n            }\n\n        }, marshalled);\n\n        //Check that the model looks the same\n        ModelNode modelReloaded = services.readWholeModel();\n        compare(model, modelReloaded);\n\n\n        assertRemoveSubsystemResources(services);\n    }","id":70415,"modified_method":"@Test\n    public void testDatasource() throws Exception{\n        // Only contain the subsystem xml, e.g.\n        //  <subsystem xmlns=\"urn:jboss:domain:datasources:1.0\"> ... <\/subsystem>\n        String xml = readResource(\"datasource.xml\");\n\n        KernelServices services = super.installInController(new AdditionalInitialization() {\n\n            @Override\n            protected Type getType() {\n                //This override makes it only install in the model, not create the services\n                return Type.MANAGEMENT;\n            }\n\n        }, xml);\n\n        ModelNode model = services.readWholeModel();\n\n        //Check model..\n        final String complexDs = \"complexDs\";\n        final String complexDsJndi = \"java:jboss/datasources/\" + complexDs;\n        Properties params=nonXaDsProperties(complexDsJndi);\n        ModelNode modelDs=model.get(\"subsystem\", \"datasources\",\"data-source\",complexDs+\"_Pool\");\n        controlModelParams(modelDs,params);\n        Assert.assertEquals(modelDs.asString(),\"UTF-8\",modelDs.get(\"connection-properties\",\"char.encoding\",\"value\").asString());\n\n        final String complexXaDs = \"complexXaDs\";\n        final String complexXaDsJndi = \"java:jboss/xa-datasources/\" + complexXaDs;\n        params=xaDsProperties(complexXaDsJndi);\n        ModelNode modelXaDs=model.get(\"subsystem\", \"datasources\",\"xa-data-source\",complexXaDs+\"_Pool\");\n        controlModelParams(modelXaDs,params);\n        Assert.assertEquals(modelXaDs.asString(),\"jdbc:h2:mem:test\",modelXaDs.get(\"xa-datasource-properties\",\"URL\",\"value\").asString());\n\n        //Marshal the xml to see that it is the same as before\n        String marshalled = services.getPersistedSubsystemXml();\n       // Assert.assertEquals(normalizeXML(xml), normalizeXML(marshalled));\n\n        services = super.installInController(new AdditionalInitialization() {\n\n            @Override\n            protected Type getType() {\n                //This override makes it only install in the model, not create the services\n                return Type.MANAGEMENT;\n            }\n\n        }, marshalled);\n\n        //Check that the model looks the same\n        ModelNode modelReloaded = services.readWholeModel();\n        compare(model, modelReloaded);\n\n\n        assertRemoveSubsystemResources(services);\n    }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    @Ignore(\"AS7-3007\")\n\n    public void testResourceAdapters() throws Exception{\n\n        String xml = readResource(\"ra.xml\");\n\n        KernelServices services = super.installInController(new AdditionalInitialization() {\n\n            @Override\n            protected Type getType() {\n                //This override makes it only install in the model, not create the services\n                return Type.MANAGEMENT;\n            }\n\n        }, xml);\n\n        ModelNode model = services.readWholeModel();\n\n        // Check model..\n        Properties params=raCommonProperties();\n        ModelNode raCommonModel=model.get(\"subsystem\", \"resource-adapters\",\"resource-adapter\",\"some.rar\");\n        controlModelParams(raCommonModel,params);\n        Assert.assertEquals(raCommonModel.asString(),\"A\",raCommonModel.get(\"config-properties\",\"Property\",\"value\").asString());\n\n        params=raAdminProperties();\n        ModelNode raAdminModel=raCommonModel.get(\"admin-objects\", \"Pool2\");\n        controlModelParams(raAdminModel,params);\n        Assert.assertEquals(raAdminModel.asString(),\"D\",raAdminModel.get(\"config-properties\",\"Property\",\"value\").asString());\n\n        params=raConnectionProperties();\n        ModelNode raConnModel=raCommonModel.get(\"connection-definitions\", \"Pool1\");\n        controlModelParams(raConnModel,params);\n        Assert.assertEquals(raConnModel.asString(),\"B\",raConnModel.get(\"config-properties\",\"Property\",\"value\").asString());\n        Assert.assertEquals(raConnModel.asString(),\"C\",raConnModel.get(\"recover-plugin-config-properties\",\"Property\",\"value\").asString());\n\n        //Marshal the xml to see that it is the same as before\n        String marshalled = services.getPersistedSubsystemXml();\n        Assert.assertEquals(normalizeXML(xml), normalizeXML(marshalled));\n\n        services = super.installInController(new AdditionalInitialization() {\n\n            @Override\n            protected Type getType() {\n                //This override makes it only install in the model, not create the services\n                return Type.MANAGEMENT;\n            }\n\n        }, marshalled);\n\n        //Check that the model looks the same\n        ModelNode modelReloaded = services.readWholeModel();\n        compare(model, modelReloaded);\n\n        assertRemoveSubsystemResources(services);\n    }","id":70416,"modified_method":"@Test\n\n    public void testResourceAdapters() throws Exception{\n\n        String xml = readResource(\"ra.xml\");\n\n        KernelServices services = super.installInController(new AdditionalInitialization() {\n\n            @Override\n            protected Type getType() {\n                //This override makes it only install in the model, not create the services\n                return Type.MANAGEMENT;\n            }\n\n        }, xml);\n\n        ModelNode model = services.readWholeModel();\n\n        // Check model..\n        Properties params=raCommonProperties();\n        ModelNode raCommonModel=model.get(\"subsystem\", \"resource-adapters\",\"resource-adapter\",\"some.rar\");\n        controlModelParams(raCommonModel,params);\n        Assert.assertEquals(raCommonModel.asString(),\"A\",raCommonModel.get(\"config-properties\",\"Property\",\"value\").asString());\n\n        params=raAdminProperties();\n        ModelNode raAdminModel=raCommonModel.get(\"admin-objects\", \"Pool2\");\n        controlModelParams(raAdminModel,params);\n        Assert.assertEquals(raAdminModel.asString(),\"D\",raAdminModel.get(\"config-properties\",\"Property\",\"value\").asString());\n\n        params=raConnectionProperties();\n        ModelNode raConnModel=raCommonModel.get(\"connection-definitions\", \"Pool1\");\n        controlModelParams(raConnModel,params);\n        Assert.assertEquals(raConnModel.asString(),\"B\",raConnModel.get(\"config-properties\",\"Property\",\"value\").asString());\n        Assert.assertEquals(raConnModel.asString(),\"C\",raConnModel.get(\"recovery-plugin-properties\",\"Property\").asString());\n\n        //Marshal the xml to see that it is the same as before\n        String marshalled = services.getPersistedSubsystemXml();\n        Assert.assertEquals(normalizeXML(xml), normalizeXML(marshalled));\n\n        services = super.installInController(new AdditionalInitialization() {\n\n            @Override\n            protected Type getType() {\n                //This override makes it only install in the model, not create the services\n                return Type.MANAGEMENT;\n            }\n\n        }, marshalled);\n\n        //Check that the model looks the same\n        ModelNode modelReloaded = services.readWholeModel();\n        compare(model, modelReloaded);\n\n        assertRemoveSubsystemResources(services);\n    }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Returns common properties for resource-adapter element\n    \n     */\n    public static  Properties raCommonProperties(){\n    \tProperties params=new Properties();\n    \t params.put(\"archive\",\"some.rar\");\n         params.put(\"transaction-support\",\"XATransaction\");\n         params.put(\"bootstrap-context\",\"someContext\");\n         \n    \treturn params;\n    }","id":70417,"modified_method":"/**\n     * Returns common properties for resource-adapter element\n\n     */\n    public static  Properties raCommonProperties(){\n    \tProperties params=new Properties();\n    \t params.put(\"archive\",\"some.rar\");\n         params.put(\"transaction-support\",\"XATransaction\");\n         params.put(\"bootstrapcontext\",\"someContext\");\n\n    \treturn params;\n    }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Returns properties for RA connection-definition element\n     \n     */\n    public static  Properties raConnectionProperties(){\n    \tProperties params=new Properties();\n    \t//attributes\n    \tparams.put(\"use-java-context\",\"false\");\n        params.put(\"class-name\",\"Class1\");\n        params.put(\"use-ccm\",\"true\");\n    \tparams.put(\"jndi-name\", \"java:jboss/name1\");\n    \tparams.put(\"enabled\",\"false\");\n        //pool\n        params.put(\"min-pool-size\",\"1\");\n        params.put(\"max-pool-size\",\"5\");\n        params.put(\"pool-prefill\",\"true\");\n        params.put(\"pool-use-strict-min\",\"true\");\n        params.put(\"flush-strategy\",\"IdleConnections\");\n        //xa-pool\n        params.put(\"same-rm-override\",\"true\");\n        params.put(\"interleaving\",\"true\");\n        params.put(\"no-tx-separate-pool\",\"true\");\n        params.put(\"pad-xid\",\"true\");\n        params.put(\"wrap-xa-resource\",\"true\");\n        //security\n        params.put(\"application\",\"true\");\n        params.put(\"security-domain-and-application\",\"HsqlDbRealm1\");\n        params.put(\"security-domain\",\"HsqlDbRealm\");\n        //validation\n        params.put(\"background-validation\",\"true\");\n        params.put(\"background-validation-millis\",\"5000\");\n        params.put(\"use-fast-fail\",\"true\");\n        //time-out\n        params.put(\"blocking-timeout-wait-millis\",\"5000\");\n        params.put(\"idle-timeout-minutes\",\"4\");\n        params.put(\"allocation-retry\",\"2\");\n        params.put(\"allocation-retry-wait-millis\",\"3000\");\n        params.put(\"xa-resource-timeout\",\"300\");\n        //recovery\n        params.put(\"no-recovery\",\"false\");\n        params.put(\"recovery-plugin-class-name\",\"someClass2\");\n        params.put(\"recovery-username\",\"sa\");\n        params.put(\"recovery-password\",\"sa-pass\");\n        params.put(\"recovery-security-domain\",\"HsqlDbRealm\");\n\n    \treturn params;\n    }","id":70418,"modified_method":"/**\n     * Returns properties for RA connection-definition element\n\n     */\n    public static  Properties raConnectionProperties(){\n    \tProperties params=new Properties();\n    \t//attributes\n    \tparams.put(\"use-java-context\",\"false\");\n        params.put(\"class-name\",\"Class1\");\n        params.put(\"use-ccm\",\"true\");\n    \tparams.put(\"jndi-name\", \"java:jboss/name1\");\n    \tparams.put(\"enabled\",\"false\");\n        //pool\n        params.put(\"min-pool-size\",\"1\");\n        params.put(\"max-pool-size\",\"5\");\n        params.put(\"pool-prefill\",\"true\");\n        params.put(\"pool-use-strict-min\",\"true\");\n        params.put(\"flush-strategy\",\"IdleConnections\");\n        //xa-pool\n        params.put(\"same-rm-override\",\"true\");\n        params.put(\"interleaving\",\"true\");\n        params.put(\"no-tx-separate-pool\",\"true\");\n        params.put(\"pad-xid\",\"true\");\n        params.put(\"wrap-xa-resource\",\"true\");\n        //security\n        params.put(\"security-application\",\"true\");\n        params.put(\"security-domain-and-application\",\"HsqlDbRealm1\");\n        params.put(\"security-domain\",\"HsqlDbRealm\");\n        //validation\n        params.put(\"background-validation\",\"true\");\n        params.put(\"background-validation-millis\",\"5000\");\n        params.put(\"use-fast-fail\",\"true\");\n        //time-out\n        params.put(\"blocking-timeout-wait-millis\",\"5000\");\n        params.put(\"idle-timeout-minutes\",\"4\");\n        params.put(\"allocation-retry\",\"2\");\n        params.put(\"allocation-retry-wait-millis\",\"3000\");\n        params.put(\"xa-resource-timeout\",\"300\");\n        //recovery\n        params.put(\"no-recovery\",\"false\");\n        params.put(\"recovery-plugin-class-name\",\"someClass2\");\n        params.put(\"recovery-username\",\"sa\");\n        params.put(\"recovery-password\",\"sa-pass\");\n        params.put(\"recovery-security-domain\",\"HsqlDbRealm\");\n\n    \treturn params;\n    }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void parseResourceAdapter(final XMLExtendedStreamReader reader, final List<ModelNode> list, ModelNode parentAddress) throws XMLStreamException, ParserException,\n            ValidateException {\n        final ModelNode raAddress = parentAddress.clone();\n        final ModelNode operation = new ModelNode();\n        operation.get(OP).set(ADD);\n\n        String archiveName = null;\n        HashMap<String, ModelNode> configPropertiesOperations = new HashMap<String, ModelNode>();\n        HashMap<String, ModelNode> connectionDefinitionsOperations = new HashMap<String, ModelNode>();\n        HashMap<String, HashMap<String, ModelNode>> cfConfigPropertiesOperations = new HashMap<String, HashMap<String, ModelNode>>();\n\n        HashMap<String, ModelNode> adminObjectsOperations = new HashMap<String, ModelNode>();\n        HashMap<String, HashMap<String, ModelNode>> aoConfigPropertiesOperations = new HashMap<String, HashMap<String, ModelNode>>();\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (ResourceAdapters.Tag.forName(reader.getLocalName()) == ResourceAdapters.Tag.RESOURCE_ADAPTER) {\n                        if (archiveName != null) {\n                            raAddress.add(RESOURCEADAPTER_NAME, archiveName);\n\n                            raAddress.protect();\n\n                            operation.get(OP_ADDR).set(raAddress);\n                            list.add(operation);\n\n                            for (Map.Entry<String, ModelNode> entry : configPropertiesOperations.entrySet()) {\n                                final ModelNode env = raAddress.clone();\n                                env.add(CONFIG_PROPERTIES.getName(), entry.getKey());\n                                env.protect();\n\n                                entry.getValue().get(OP_ADDR).set(env);\n                                list.add(entry.getValue());\n                            }\n\n                            for (Map.Entry<String, ModelNode> entry : connectionDefinitionsOperations.entrySet()) {\n                                final ModelNode env = raAddress.clone();\n                                env.add(CONNECTIONDEFINITIONS_NAME, entry.getKey());\n                                env.protect();\n\n                                entry.getValue().get(OP_ADDR).set(env);\n                                list.add(entry.getValue());\n\n                                final HashMap<String, ModelNode> properties = cfConfigPropertiesOperations.get(entry.getKey());\n                                if (properties != null) {\n                                    for (Map.Entry<String, ModelNode> configEntry : properties.entrySet()) {\n                                        final ModelNode configEnv = env.clone();\n                                        configEnv.add(CONFIG_PROPERTIES.getName(), configEntry.getKey());\n                                        configEnv.protect();\n\n                                        configEntry.getValue().get(OP_ADDR).set(configEnv);\n                                        list.add(configEntry.getValue());\n                                    }\n                                }\n                            }\n\n                            for (Map.Entry<String, ModelNode> entry : adminObjectsOperations.entrySet()) {\n                                final ModelNode env = raAddress.clone();\n                                env.add(ADMIN_OBJECTS_NAME, entry.getKey());\n                                env.protect();\n\n                                entry.getValue().get(OP_ADDR).set(env);\n                                list.add(entry.getValue());\n\n                                final HashMap<String, ModelNode> aoProperties = aoConfigPropertiesOperations.get(entry.getKey());\n                                if (aoProperties != null) {\n                                    for (Map.Entry<String, ModelNode> configEntry : aoProperties.entrySet()) {\n                                        final ModelNode configEnv = env.clone();\n                                        configEnv.add(CONFIG_PROPERTIES.getName(), configEntry.getKey());\n                                        configEnv.protect();\n\n                                        configEntry.getValue().get(OP_ADDR).set(configEnv);\n                                        list.add(configEntry.getValue());\n                                    }\n                                }\n                            }\n\n                            return;\n                        } else {\n                            throw new ParserException(bundle.requiredElementMissing(ARCHIVE.getName(), RESOURCEADAPTER_NAME));\n\n                        }\n                    } else {\n                        if (ResourceAdapter.Tag.forName(reader.getLocalName()) == ResourceAdapter.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (ResourceAdapter.Tag.forName(reader.getLocalName())) {\n                        case ADMIN_OBJECTS:\n                        case CONNECTION_DEFINITIONS:\n                        case BEAN_VALIDATION_GROUPS: {\n                            //ignore it,we will parse bean-validation-group,admin_object and connection_definition directly\n                            break;\n                        }\n                        case ADMIN_OBJECT: {\n                            parseAdminObjects(reader, adminObjectsOperations, aoConfigPropertiesOperations);\n                            break;\n                        }\n\n                        case CONNECTION_DEFINITION: {\n                            parseConnectionDefinitions(reader, connectionDefinitionsOperations, cfConfigPropertiesOperations);\n                            break;\n                        }\n                        case BEAN_VALIDATION_GROUP: {\n                            String value = rawElementText(reader);\n                            BEANVALIDATIONGROUPS.parseAndSetParameter(value, operation, reader);\n                            break;\n                        }\n                        case BOOTSTRAP_CONTEXT: {\n                            String value = rawElementText(reader);\n                            BOOTSTRAPCONTEXT.parseAndSetParameter(value, operation, reader);\n                            break;\n                        }\n                        case CONFIG_PROPERTY: {\n                            parseConfigProperties(reader, configPropertiesOperations);\n                            break;\n\n                        }\n                        case TRANSACTION_SUPPORT: {\n                            String value = rawElementText(reader);\n                            TRANSACTIONSUPPORT.parseAndSetParameter(value, operation, reader);\n                            break;\n                        }\n                        case ARCHIVE: {\n                            archiveName = rawElementText(reader);\n                            ARCHIVE.parseAndSetParameter(archiveName, operation, reader);\n                            break;\n                        }\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }","id":70419,"modified_method":"private void parseResourceAdapter(final XMLExtendedStreamReader reader, final List<ModelNode> list, ModelNode parentAddress) throws XMLStreamException, ParserException,\n            ValidateException {\n        final ModelNode raAddress = parentAddress.clone();\n        final ModelNode operation = new ModelNode();\n        operation.get(OP).set(ADD);\n\n        String archiveName = null;\n        HashMap<String, ModelNode> configPropertiesOperations = new HashMap<String, ModelNode>();\n        HashMap<String, ModelNode> connectionDefinitionsOperations = new HashMap<String, ModelNode>();\n        HashMap<String, HashMap<String, ModelNode>> cfConfigPropertiesOperations = new HashMap<String, HashMap<String, ModelNode>>();\n\n        HashMap<String, ModelNode> adminObjectsOperations = new HashMap<String, ModelNode>();\n        HashMap<String, HashMap<String, ModelNode>> aoConfigPropertiesOperations = new HashMap<String, HashMap<String, ModelNode>>();\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (ResourceAdapters.Tag.forName(reader.getLocalName()) == ResourceAdapters.Tag.RESOURCE_ADAPTER) {\n                        if (archiveName != null) {\n                            raAddress.add(RESOURCEADAPTER_NAME, archiveName);\n\n                            raAddress.protect();\n\n                            operation.get(OP_ADDR).set(raAddress);\n                            list.add(operation);\n\n                            for (Map.Entry<String, ModelNode> entry : configPropertiesOperations.entrySet()) {\n                                final ModelNode env = raAddress.clone();\n                                env.add(CONFIG_PROPERTIES.getName(), entry.getKey());\n                                env.protect();\n\n                                entry.getValue().get(OP_ADDR).set(env);\n                                list.add(entry.getValue());\n                            }\n\n                            for (Map.Entry<String, ModelNode> entry : connectionDefinitionsOperations.entrySet()) {\n                                final ModelNode env = raAddress.clone();\n                                env.add(CONNECTIONDEFINITIONS_NAME, entry.getKey());\n                                env.protect();\n\n                                entry.getValue().get(OP_ADDR).set(env);\n                                list.add(entry.getValue());\n\n                                final HashMap<String, ModelNode> properties = cfConfigPropertiesOperations.get(entry.getKey());\n                                if (properties != null) {\n                                    for (Map.Entry<String, ModelNode> configEntry : properties.entrySet()) {\n                                        final ModelNode configEnv = env.clone();\n                                        configEnv.add(CONFIG_PROPERTIES.getName(), configEntry.getKey());\n                                        configEnv.protect();\n\n                                        configEntry.getValue().get(OP_ADDR).set(configEnv);\n                                        list.add(configEntry.getValue());\n                                    }\n                                }\n                            }\n\n                            for (Map.Entry<String, ModelNode> entry : adminObjectsOperations.entrySet()) {\n                                final ModelNode env = raAddress.clone();\n                                env.add(ADMIN_OBJECTS_NAME, entry.getKey());\n                                env.protect();\n\n                                entry.getValue().get(OP_ADDR).set(env);\n                                list.add(entry.getValue());\n\n                                final HashMap<String, ModelNode> aoProperties = aoConfigPropertiesOperations.get(entry.getKey());\n                                if (aoProperties != null) {\n                                    for (Map.Entry<String, ModelNode> configEntry : aoProperties.entrySet()) {\n                                        final ModelNode configEnv = env.clone();\n                                        configEnv.add(CONFIG_PROPERTIES.getName(), configEntry.getKey());\n                                        configEnv.protect();\n\n                                        configEntry.getValue().get(OP_ADDR).set(configEnv);\n                                        list.add(configEntry.getValue());\n                                    }\n                                }\n                            }\n\n                            return;\n                        } else {\n                            throw new ParserException(bundle.requiredElementMissing(ARCHIVE.getName(), RESOURCEADAPTER_NAME));\n\n                        }\n                    } else {\n                        if (ResourceAdapter.Tag.forName(reader.getLocalName()) == ResourceAdapter.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (ResourceAdapter.Tag.forName(reader.getLocalName())) {\n                        case ADMIN_OBJECTS:\n                        case CONNECTION_DEFINITIONS:\n                        case BEAN_VALIDATION_GROUPS: {\n                            //ignore it,we will parse bean-validation-group,admin_object and connection_definition directly\n                            break;\n                        }\n                        case ADMIN_OBJECT: {\n                            parseAdminObjects(reader, adminObjectsOperations, aoConfigPropertiesOperations);\n                            break;\n                        }\n\n                        case CONNECTION_DEFINITION: {\n                            parseConnectionDefinitions(reader, connectionDefinitionsOperations, cfConfigPropertiesOperations);\n                            break;\n                        }\n                        case BEAN_VALIDATION_GROUP: {\n                            String value = rawElementText(reader);\n                            operation.get(BEANVALIDATIONGROUPS.getName()).add(BEANVALIDATIONGROUPS.parse(value, reader));\n                            break;\n                        }\n                        case BOOTSTRAP_CONTEXT: {\n                            String value = rawElementText(reader);\n                            BOOTSTRAPCONTEXT.parseAndSetParameter(value, operation, reader);\n                            break;\n                        }\n                        case CONFIG_PROPERTY: {\n                            parseConfigProperties(reader, configPropertiesOperations);\n                            break;\n\n                        }\n                        case TRANSACTION_SUPPORT: {\n                            String value = rawElementText(reader);\n                            TRANSACTIONSUPPORT.parseAndSetParameter(value, operation, reader);\n                            break;\n                        }\n                        case ARCHIVE: {\n                            archiveName = rawElementText(reader);\n                            ARCHIVE.parseAndSetParameter(archiveName, operation, reader);\n                            break;\n                        }\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void writeRaElement(XMLExtendedStreamWriter streamWriter, ModelNode ra) throws XMLStreamException {\n            streamWriter.writeStartElement(ResourceAdapters.Tag.RESOURCE_ADAPTER.getLocalName());\n\n            ARCHIVE.marshallAsElement(ra, streamWriter);\n\n            if (ra.hasDefined(BEANVALIDATIONGROUPS.getName())) {\n                for (ModelNode bvg : ra.get(BEANVALIDATIONGROUPS.getName()).asList()) {\n                    BEANVALIDATIONGROUPS.marshallAsElement(bvg, streamWriter);\n                }\n            }\n\n            BOOTSTRAPCONTEXT.marshallAsElement(ra, streamWriter);\n            TRANSACTIONSUPPORT.marshallAsElement(ra, streamWriter);\n            writeNewConfigProperties(streamWriter, ra);\n            TransactionSupportEnum transactionSupport = ra.hasDefined(TRANSACTIONSUPPORT.getName()) ? TransactionSupportEnum\n                .valueOf(ra.get(TRANSACTIONSUPPORT.getName()).asString()) : null;\n            boolean isXa = false;\n            if (transactionSupport == TransactionSupportEnum.XATransaction) {\n                isXa = true;\n            }\n            if (ra.hasDefined(CONNECTIONDEFINITIONS_NAME)) {\n                streamWriter.writeStartElement(ResourceAdapter.Tag.CONNECTION_DEFINITIONS.getLocalName());\n                for (Property conDef : ra.get(CONNECTIONDEFINITIONS_NAME).asPropertyList()) {\n                    writeConDef(streamWriter, conDef.getValue(), conDef.getName(), isXa);\n                }\n                streamWriter.writeEndElement();\n            }\n\n            if (ra.hasDefined(ADMIN_OBJECTS_NAME)) {\n                streamWriter.writeStartElement(ResourceAdapter.Tag.ADMIN_OBJECTS.getLocalName());\n                for (Property adminObject : ra.get(ADMIN_OBJECTS_NAME).asPropertyList()) {\n                    writeAdminObject(streamWriter, adminObject.getValue(), adminObject.getName());\n                }\n                streamWriter.writeEndElement();\n            }\n            streamWriter.writeEndElement();\n\n        }","id":70420,"modified_method":"private void writeRaElement(XMLExtendedStreamWriter streamWriter, ModelNode ra) throws XMLStreamException {\n            streamWriter.writeStartElement(ResourceAdapters.Tag.RESOURCE_ADAPTER.getLocalName());\n\n            ARCHIVE.marshallAsElement(ra, streamWriter);\n            BOOTSTRAPCONTEXT.marshallAsElement(ra, streamWriter);\n\n            if (ra.hasDefined(BEANVALIDATIONGROUPS.getName())) {\n                streamWriter.writeStartElement(ResourceAdapter.Tag.BEAN_VALIDATION_GROUPS.getLocalName());\n                for (ModelNode bvg : ra.get(BEANVALIDATIONGROUPS.getName()).asList()) {\n                    streamWriter.writeStartElement(BEANVALIDATIONGROUPS.getXmlName());\n                    streamWriter.writeCharacters(bvg.asString());\n                    streamWriter.writeEndElement();\n                }\n                streamWriter.writeEndElement();\n            }\n\n            TRANSACTIONSUPPORT.marshallAsElement(ra, streamWriter);\n            writeNewConfigProperties(streamWriter, ra);\n            TransactionSupportEnum transactionSupport = ra.hasDefined(TRANSACTIONSUPPORT.getName()) ? TransactionSupportEnum\n                .valueOf(ra.get(TRANSACTIONSUPPORT.getName()).asString()) : null;\n            boolean isXa = false;\n            if (transactionSupport == TransactionSupportEnum.XATransaction) {\n                isXa = true;\n            }\n            if (ra.hasDefined(CONNECTIONDEFINITIONS_NAME)) {\n                streamWriter.writeStartElement(ResourceAdapter.Tag.CONNECTION_DEFINITIONS.getLocalName());\n                for (Property conDef : ra.get(CONNECTIONDEFINITIONS_NAME).asPropertyList()) {\n                    writeConDef(streamWriter, conDef.getValue(), conDef.getName(), isXa);\n                }\n                streamWriter.writeEndElement();\n            }\n\n            if (ra.hasDefined(ADMIN_OBJECTS_NAME)) {\n                streamWriter.writeStartElement(ResourceAdapter.Tag.ADMIN_OBJECTS.getLocalName());\n                for (Property adminObject : ra.get(ADMIN_OBJECTS_NAME).asPropertyList()) {\n                    writeAdminObject(streamWriter, adminObject.getValue(), adminObject.getName());\n                }\n                streamWriter.writeEndElement();\n            }\n            streamWriter.writeEndElement();\n\n        }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void writeConDef(XMLExtendedStreamWriter streamWriter, ModelNode conDef, final String poolName, final boolean isXa) throws XMLStreamException {\n            streamWriter.writeStartElement(ResourceAdapter.Tag.CONNECTION_DEFINITION.getLocalName());\n            CLASS_NAME.marshallAsAttribute(conDef, streamWriter);\n            JNDINAME.marshallAsAttribute(conDef, streamWriter);\n            ENABLED.marshallAsAttribute(conDef, streamWriter);\n            USE_JAVA_CONTEXT.marshallAsAttribute(conDef, streamWriter);\n            streamWriter.writeAttribute(\"pool-name\", poolName);\n            USE_CCM.marshallAsAttribute(conDef, streamWriter);\n\n\n            writeNewConfigProperties(streamWriter, conDef);\n\n            if (conDef.hasDefined(MAX_POOL_SIZE.getName()) || conDef.hasDefined(MIN_POOL_SIZE.getName()) ||\n                conDef.hasDefined(POOL_USE_STRICT_MIN.getName()) || conDef.hasDefined(POOL_PREFILL.getName()) ||\n                conDef.hasDefined(POOL_FLUSH_STRATEGY.getName())) {\n                if (isXa) {\n\n                    streamWriter.writeStartElement(CommonConnDef.Tag.XA_POOL.getLocalName());\n                    MIN_POOL_SIZE.marshallAsElement(conDef, streamWriter);\n                    MAX_POOL_SIZE.marshallAsElement(conDef, streamWriter);\n                    POOL_PREFILL.marshallAsElement(conDef, streamWriter);\n                    POOL_USE_STRICT_MIN.marshallAsElement(conDef, streamWriter);\n                    POOL_FLUSH_STRATEGY.marshallAsElement(conDef, streamWriter);\n\n                    SAME_RM_OVERRIDE.marshallAsElement(conDef, streamWriter);\n                    INTERLEAVING.marshallAsElement(conDef, streamWriter);\n                    NOTXSEPARATEPOOL.marshallAsElement(conDef, streamWriter);\n                    PAD_XID.marshallAsElement(conDef, streamWriter);\n                    WRAP_XA_RESOURCE.marshallAsElement(conDef, streamWriter);\n\n                    streamWriter.writeEndElement();\n                } else {\n                    streamWriter.writeStartElement(CommonConnDef.Tag.POOL.getLocalName());\n                    MIN_POOL_SIZE.marshallAsElement(conDef, streamWriter);\n                    MAX_POOL_SIZE.marshallAsElement(conDef, streamWriter);\n                    POOL_PREFILL.marshallAsElement(conDef, streamWriter);\n                    POOL_USE_STRICT_MIN.marshallAsElement(conDef, streamWriter);\n                    POOL_FLUSH_STRATEGY.marshallAsElement(conDef, streamWriter);\n                    streamWriter.writeEndElement();\n                }\n            }\n\n            if (conDef.hasDefined(APPLICATION.getName()) || conDef.hasDefined(SECURITY_DOMAIN.getName())\n                    || conDef.hasDefined(SECURITY_DOMAIN_AND_APPLICATION.getName())) {\n                streamWriter.writeStartElement(CommonConnDef.Tag.SECURITY.getLocalName());\n                APPLICATION.marshallAsElement(conDef, streamWriter);\n                SECURITY_DOMAIN.marshallAsElement(conDef, streamWriter);\n                SECURITY_DOMAIN_AND_APPLICATION.marshallAsElement(conDef, streamWriter);\n\n                streamWriter.writeEndElement();\n            }\n\n            if (conDef.hasDefined(BLOCKING_TIMEOUT_WAIT_MILLIS.getName()) || conDef.hasDefined(IDLETIMEOUTMINUTES.getName()) || conDef.hasDefined(ALLOCATION_RETRY.getName())\n                    || conDef.hasDefined(ALLOCATION_RETRY_WAIT_MILLIS.getName()) || conDef.hasDefined(XA_RESOURCE_TIMEOUT.getName())) {\n                streamWriter.writeStartElement(CommonConnDef.Tag.TIMEOUT.getLocalName());\n                BLOCKING_TIMEOUT_WAIT_MILLIS.marshallAsElement(conDef, streamWriter);\n                IDLETIMEOUTMINUTES.marshallAsElement(conDef, streamWriter);\n                ALLOCATION_RETRY.marshallAsElement(conDef, streamWriter);\n                ALLOCATION_RETRY_WAIT_MILLIS.marshallAsElement(conDef, streamWriter);\n                XA_RESOURCE_TIMEOUT.marshallAsElement(conDef, streamWriter);\n                streamWriter.writeEndElement();\n            }\n\n            if (conDef.hasDefined(BACKGROUNDVALIDATION.getName()) || conDef.hasDefined(BACKGROUNDVALIDATIONMILLIS.getName()) || conDef.hasDefined(USE_FAST_FAIL.getName()) ) {\n                streamWriter.writeStartElement(CommonConnDef.Tag.VALIDATION.getLocalName());\n                BACKGROUNDVALIDATION.marshallAsElement(conDef, streamWriter);\n                BACKGROUNDVALIDATIONMILLIS.marshallAsElement(conDef, streamWriter);\n                USE_FAST_FAIL.marshallAsElement(conDef, streamWriter);\n                streamWriter.writeEndElement();\n            }\n\n            if (conDef.hasDefined(RECOVERY_USERNAME.getName()) || conDef.hasDefined(RECOVERY_PASSWORD.getName())\n                    || conDef.hasDefined(RECOVERY_SECURITY_DOMAIN.getName()) || conDef.hasDefined(RECOVERLUGIN_CLASSNAME.getName())\n                    || conDef.hasDefined(RECOVERLUGIN_PROPERTIES.getName()) || conDef.hasDefined(NO_RECOVERY.getName())) {\n\n                streamWriter.writeStartElement(CommonConnDef.Tag.RECOVERY.getLocalName());\n                if (conDef.hasDefined(RECOVERY_USERNAME.getName()) || conDef.hasDefined(RECOVERY_PASSWORD.getName())\n                        || conDef.hasDefined(RECOVERY_SECURITY_DOMAIN.getName())) {\n                    streamWriter.writeStartElement(Recovery.Tag.RECOVER_CREDENTIAL.getLocalName());\n                    RECOVERY_USERNAME.marshallAsElement(conDef, streamWriter);\n                    RECOVERY_PASSWORD.marshallAsElement(conDef, streamWriter);\n                    RECOVERY_SECURITY_DOMAIN.marshallAsElement(conDef, streamWriter);\n                    streamWriter.writeEndElement();\n                }\n                if (conDef.hasDefined(RECOVERLUGIN_CLASSNAME.getName()) || conDef.hasDefined(RECOVERLUGIN_PROPERTIES.getName())) {\n                    streamWriter.writeStartElement(Recovery.Tag.RECOVER_PLUGIN.getLocalName());\n                    RECOVERLUGIN_CLASSNAME.marshallAsAttribute(conDef, streamWriter);\n                    if (conDef.hasDefined(RECOVERLUGIN_PROPERTIES.getName())) {\n                        for (Property property : conDef.get(RECOVERLUGIN_PROPERTIES.getName()).asPropertyList()) {\n                            writeProperty(streamWriter, conDef, property.getName(), property\n                                        .getValue().asString(), org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());\n                        }\n                    }\n                    streamWriter.writeEndElement();\n                }\n                NO_RECOVERY.marshallAsAttribute(conDef, streamWriter);\n\n            }\n\n            streamWriter.writeEndElement();\n\n        }","id":70421,"modified_method":"private void writeConDef(XMLExtendedStreamWriter streamWriter, ModelNode conDef, final String poolName, final boolean isXa) throws XMLStreamException {\n            streamWriter.writeStartElement(ResourceAdapter.Tag.CONNECTION_DEFINITION.getLocalName());\n            CLASS_NAME.marshallAsAttribute(conDef, streamWriter);\n            JNDINAME.marshallAsAttribute(conDef, streamWriter);\n            ENABLED.marshallAsAttribute(conDef, streamWriter);\n            USE_JAVA_CONTEXT.marshallAsAttribute(conDef, streamWriter);\n            streamWriter.writeAttribute(\"pool-name\", poolName);\n            USE_CCM.marshallAsAttribute(conDef, streamWriter);\n\n\n            writeNewConfigProperties(streamWriter, conDef);\n\n            if (conDef.hasDefined(MAX_POOL_SIZE.getName()) || conDef.hasDefined(MIN_POOL_SIZE.getName()) ||\n                conDef.hasDefined(POOL_USE_STRICT_MIN.getName()) || conDef.hasDefined(POOL_PREFILL.getName()) ||\n                conDef.hasDefined(POOL_FLUSH_STRATEGY.getName())) {\n                if (isXa) {\n\n                    streamWriter.writeStartElement(CommonConnDef.Tag.XA_POOL.getLocalName());\n                    MIN_POOL_SIZE.marshallAsElement(conDef, streamWriter);\n                    MAX_POOL_SIZE.marshallAsElement(conDef, streamWriter);\n                    POOL_PREFILL.marshallAsElement(conDef, streamWriter);\n                    POOL_USE_STRICT_MIN.marshallAsElement(conDef, streamWriter);\n                    POOL_FLUSH_STRATEGY.marshallAsElement(conDef, streamWriter);\n\n                    SAME_RM_OVERRIDE.marshallAsElement(conDef, streamWriter);\n                    if (conDef.get(INTERLEAVING.getName()).asBoolean()) {\n                        streamWriter.writeEmptyElement(INTERLEAVING.getXmlName());\n                    } else {\n                        INTERLEAVING.marshallAsElement(conDef, streamWriter);\n                    }\n                    if (conDef.get(NOTXSEPARATEPOOL.getName()).asBoolean()) {\n                        streamWriter.writeEmptyElement(NOTXSEPARATEPOOL.getXmlName());\n                    } else {\n                        NOTXSEPARATEPOOL.marshallAsElement(conDef, streamWriter);\n                    }\n                    PAD_XID.marshallAsElement(conDef, streamWriter);\n                    WRAP_XA_RESOURCE.marshallAsElement(conDef, streamWriter);\n\n                    streamWriter.writeEndElement();\n                } else {\n                    streamWriter.writeStartElement(CommonConnDef.Tag.POOL.getLocalName());\n                    MIN_POOL_SIZE.marshallAsElement(conDef, streamWriter);\n                    MAX_POOL_SIZE.marshallAsElement(conDef, streamWriter);\n                    POOL_PREFILL.marshallAsElement(conDef, streamWriter);\n                    POOL_USE_STRICT_MIN.marshallAsElement(conDef, streamWriter);\n                    POOL_FLUSH_STRATEGY.marshallAsElement(conDef, streamWriter);\n                    streamWriter.writeEndElement();\n                }\n            }\n\n            if (conDef.hasDefined(APPLICATION.getName()) || conDef.hasDefined(SECURITY_DOMAIN.getName())\n                    || conDef.hasDefined(SECURITY_DOMAIN_AND_APPLICATION.getName())) {\n                streamWriter.writeStartElement(CommonConnDef.Tag.SECURITY.getLocalName());\n                if (conDef.get(APPLICATION.getName()).asBoolean()) {\n                    streamWriter.writeEmptyElement(APPLICATION.getXmlName());\n                } else {\n                    APPLICATION.marshallAsElement(conDef, streamWriter);\n                }\n                SECURITY_DOMAIN.marshallAsElement(conDef, streamWriter);\n                SECURITY_DOMAIN_AND_APPLICATION.marshallAsElement(conDef, streamWriter);\n\n                streamWriter.writeEndElement();\n            }\n\n            if (conDef.hasDefined(BLOCKING_TIMEOUT_WAIT_MILLIS.getName()) || conDef.hasDefined(IDLETIMEOUTMINUTES.getName()) || conDef.hasDefined(ALLOCATION_RETRY.getName())\n                    || conDef.hasDefined(ALLOCATION_RETRY_WAIT_MILLIS.getName()) || conDef.hasDefined(XA_RESOURCE_TIMEOUT.getName())) {\n                streamWriter.writeStartElement(CommonConnDef.Tag.TIMEOUT.getLocalName());\n                BLOCKING_TIMEOUT_WAIT_MILLIS.marshallAsElement(conDef, streamWriter);\n                IDLETIMEOUTMINUTES.marshallAsElement(conDef, streamWriter);\n                ALLOCATION_RETRY.marshallAsElement(conDef, streamWriter);\n                ALLOCATION_RETRY_WAIT_MILLIS.marshallAsElement(conDef, streamWriter);\n                XA_RESOURCE_TIMEOUT.marshallAsElement(conDef, streamWriter);\n                streamWriter.writeEndElement();\n            }\n\n            if (conDef.hasDefined(BACKGROUNDVALIDATION.getName()) || conDef.hasDefined(BACKGROUNDVALIDATIONMILLIS.getName()) || conDef.hasDefined(USE_FAST_FAIL.getName()) ) {\n                streamWriter.writeStartElement(CommonConnDef.Tag.VALIDATION.getLocalName());\n                BACKGROUNDVALIDATION.marshallAsElement(conDef, streamWriter);\n                BACKGROUNDVALIDATIONMILLIS.marshallAsElement(conDef, streamWriter);\n                USE_FAST_FAIL.marshallAsElement(conDef, streamWriter);\n                streamWriter.writeEndElement();\n            }\n\n            if (conDef.hasDefined(RECOVERY_USERNAME.getName()) || conDef.hasDefined(RECOVERY_PASSWORD.getName())\n                    || conDef.hasDefined(RECOVERY_SECURITY_DOMAIN.getName()) || conDef.hasDefined(RECOVERLUGIN_CLASSNAME.getName())\n                    || conDef.hasDefined(RECOVERLUGIN_PROPERTIES.getName()) || conDef.hasDefined(NO_RECOVERY.getName())) {\n\n                streamWriter.writeStartElement(CommonConnDef.Tag.RECOVERY.getLocalName());\n                NO_RECOVERY.marshallAsAttribute(conDef, streamWriter);\n\n                if (conDef.hasDefined(RECOVERY_USERNAME.getName()) || conDef.hasDefined(RECOVERY_PASSWORD.getName())\n                        || conDef.hasDefined(RECOVERY_SECURITY_DOMAIN.getName())) {\n                    streamWriter.writeStartElement(Recovery.Tag.RECOVER_CREDENTIAL.getLocalName());\n                    RECOVERY_USERNAME.marshallAsElement(conDef, streamWriter);\n                    RECOVERY_PASSWORD.marshallAsElement(conDef, streamWriter);\n                    RECOVERY_SECURITY_DOMAIN.marshallAsElement(conDef, streamWriter);\n                    streamWriter.writeEndElement();\n                }\n                if (conDef.hasDefined(RECOVERLUGIN_CLASSNAME.getName()) || conDef.hasDefined(RECOVERLUGIN_PROPERTIES.getName())) {\n                    streamWriter.writeStartElement(Recovery.Tag.RECOVER_PLUGIN.getLocalName());\n                    RECOVERLUGIN_CLASSNAME.marshallAsAttribute(conDef, streamWriter);\n                    if (conDef.hasDefined(RECOVERLUGIN_PROPERTIES.getName())) {\n                        for (Property property : conDef.get(RECOVERLUGIN_PROPERTIES.getName()).asPropertyList()) {\n                            writeProperty(streamWriter, conDef, property.getName(), property\n                                        .getValue().asString(), org.jboss.jca.common.api.metadata.common.Extension.Tag.CONFIG_PROPERTY.getLocalName());\n                        }\n                    }\n                    streamWriter.writeEndElement();\n                }\n                streamWriter.writeEndElement();\n\n            }\n\n            streamWriter.writeEndElement();\n\n        }","commit_id":"0f9198adaed74ce1691d79b9e20f6f541d91026b","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void initializeParsers(ExtensionParsingContext context) {\n        context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.CURRENT.getUriString(), parser);\n    }","id":70422,"modified_method":"public void initializeParsers(ExtensionParsingContext context) {\n        context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.XTS_1_0.getUriString(), parser);\n        context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.XTS_2_0.getUriString(), parser);\n    }","commit_id":"8e99043b231677e0c7121b19a40f9c4f6c9cead0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model, ServiceVerificationHandler verificationHandler, List<ServiceController<?>> newControllers) throws OperationFailedException {\n\n        final String coordinatorURL = model.get(CommonAttributes.XTS_ENVIRONMENT).hasDefined(ModelDescriptionConstants.URL) ? model.get(CommonAttributes.XTS_ENVIRONMENT, ModelDescriptionConstants.URL).asString() : null;\n        if (coordinatorURL != null && XtsAsLogger.ROOT_LOGGER.isDebugEnabled()) {\n            XtsAsLogger.ROOT_LOGGER.debugf(\"nodeIdentifier=%s\\n\", coordinatorURL);\n        }\n\n        final boolean isDefaultContextPropagation = model.hasDefined(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION)\n                ? model.get(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION).asBoolean() : false;\n\n        context.addStep(new AbstractDeploymentChainStep() {\n            protected void execute(DeploymentProcessorTarget processorTarget) {\n                processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.PARSE, Phase.PARSE_XTS_COMPONENT_INTERCEPTORS, new XTSInterceptorDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.PARSE, Phase.PARSE_XTS_SOAP_HANDLERS, new XTSHandlerDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.DEPENDENCIES, Phase.DEPENDENCIES_XTS, new XTSDependenciesDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.POST_MODULE, Phase.POST_MODULE_XTS_PORTABLE_EXTENSIONS, new CDIExtensionProcessor());\n            }\n        }, OperationContext.Stage.RUNTIME);\n\n        final ServiceTarget target = context.getServiceTarget();\n\n        // TODO eventually we should add a config service which manages the XTS configuration\n        // this will allow us to include a switch enabling or disabling deployment of\n        // endpoints specific to client, coordinator or participant and then deploy\n        // and redeploy the relevant endpoints as needed/ the same switches can be used\n        // byte the XTS service to decide whether to perfomr client, coordinator or\n        // participant initialisation. we shoudl also provide config switches which\n        // decide whether to initialise classes and deploy services for AT, BA or both.\n        // for now we will just deploy all the endpoints and always do client, coordinator\n        // and participant init for both AT and BA.\n\n        // add an endpoint publisher service for each of the required endpoint contexts\n        // specifying all the relevant URL patterns and SEI classes\n\n        final ClassLoader loader = XTSService.class.getClassLoader();\n        ServiceBuilder<Context> endpointBuilder;\n        ArrayList<ServiceController<Context>> controllers = new ArrayList<ServiceController<Context>>();\n        for (ContextInfo contextInfo : contextDefinitions) {\n            String contextName = contextInfo.contextPath;\n            Map<String, String> map = new HashMap<String, String>();\n            for (EndpointInfo endpointInfo : contextInfo.endpointInfo) {\n                map.put(endpointInfo.URLPattern, endpointInfo.SEIClassname);\n            }\n            endpointBuilder = EndpointPublishService.createServiceBuilder(target, contextName, loader,\n                    ENDPOINT_SERVICE_HOST_NAME, map);\n\n            controllers.add(endpointBuilder.setInitialMode(Mode.ACTIVE)\n                    .install());\n        }\n\n        // add an XTS service which depends on all the WS endpoints\n\n        final XTSManagerService xtsService = new XTSManagerService(coordinatorURL, isDefaultContextPropagation);\n\n        // this service needs to depend on the transaction recovery service\n        // because it can only initialise XTS recovery once the transaction recovery\n        // service has initialised the orb layer\n\n        ServiceBuilder<?> xtsServiceBuilder = target.addService(XTSServices.JBOSS_XTS_MAIN, xtsService);\n        xtsServiceBuilder\n                .addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER);\n\n        // this service needs to depend on JBossWS Config Service to be notified of the JBoss WS config (bind address, port etc)\n        xtsServiceBuilder.addDependency(WSServices.CLIENT_CONFIG_SERVICE.append(\"Standard-Client-Config\"));\n        xtsServiceBuilder.addDependency(WSServices.CONFIG_SERVICE, ServerConfig.class, xtsService.getWSServerConfig());\n\n        // the service also needs to depend on the endpoint services\n        for (ServiceController<Context> controller : controllers) {\n            xtsServiceBuilder.addDependency(controller.getName());\n        }\n\n        xtsServiceBuilder\n                .setInitialMode(Mode.ACTIVE)\n                .install();\n\n        // WS-AT / JTA Transaction bridge services:\n\n        final TxBridgeInboundRecoveryService txBridgeInboundRecoveryService = new TxBridgeInboundRecoveryService();\n        ServiceBuilder<?> txBridgeInboundRecoveryServiceBuilder =\n                target.addService(XTSServices.JBOSS_XTS_TXBRIDGE_INBOUND_RECOVERY, txBridgeInboundRecoveryService);\n        txBridgeInboundRecoveryServiceBuilder.addDependency(XTSServices.JBOSS_XTS_MAIN);\n\n        txBridgeInboundRecoveryServiceBuilder.setInitialMode(Mode.ACTIVE).install();\n\n        final TxBridgeOutboundRecoveryService txBridgeOutboundRecoveryService = new TxBridgeOutboundRecoveryService();\n        ServiceBuilder<?> txBridgeOutboundRecoveryServiceBuilder =\n                target.addService(XTSServices.JBOSS_XTS_TXBRIDGE_OUTBOUND_RECOVERY, txBridgeOutboundRecoveryService);\n        txBridgeOutboundRecoveryServiceBuilder.addDependency(XTSServices.JBOSS_XTS_MAIN);\n\n        txBridgeOutboundRecoveryServiceBuilder.setInitialMode(Mode.ACTIVE).install();\n\n    }","id":70423,"modified_method":"@Override\n    protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model, ServiceVerificationHandler verificationHandler, List<ServiceController<?>> newControllers) throws OperationFailedException {\n        final String hostName = HOST_NAME.resolveModelAttribute(context, model).asString();\n\n        final String coordinatorURL = model.get(CommonAttributes.XTS_ENVIRONMENT).hasDefined(ModelDescriptionConstants.URL) ? model.get(CommonAttributes.XTS_ENVIRONMENT, ModelDescriptionConstants.URL).asString() : null;\n        if (coordinatorURL != null && XtsAsLogger.ROOT_LOGGER.isDebugEnabled()) {\n            XtsAsLogger.ROOT_LOGGER.debugf(\"nodeIdentifier=%s\\n\", coordinatorURL);\n        }\n\n        final boolean isDefaultContextPropagation = model.hasDefined(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION)\n                ? model.get(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION).asBoolean() : false;\n\n        context.addStep(new AbstractDeploymentChainStep() {\n            protected void execute(DeploymentProcessorTarget processorTarget) {\n                processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.PARSE, Phase.PARSE_XTS_COMPONENT_INTERCEPTORS, new XTSInterceptorDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.PARSE, Phase.PARSE_XTS_SOAP_HANDLERS, new XTSHandlerDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.DEPENDENCIES, Phase.DEPENDENCIES_XTS, new XTSDependenciesDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.POST_MODULE, Phase.POST_MODULE_XTS_PORTABLE_EXTENSIONS, new CDIExtensionProcessor());\n            }\n        }, OperationContext.Stage.RUNTIME);\n\n        final ServiceTarget target = context.getServiceTarget();\n\n        // TODO eventually we should add a config service which manages the XTS configuration\n        // this will allow us to include a switch enabling or disabling deployment of\n        // endpoints specific to client, coordinator or participant and then deploy\n        // and redeploy the relevant endpoints as needed/ the same switches can be used\n        // byte the XTS service to decide whether to perfomr client, coordinator or\n        // participant initialisation. we shoudl also provide config switches which\n        // decide whether to initialise classes and deploy services for AT, BA or both.\n        // for now we will just deploy all the endpoints and always do client, coordinator\n        // and participant init for both AT and BA.\n\n        // add an endpoint publisher service for each of the required endpoint contexts\n        // specifying all the relevant URL patterns and SEI classes\n\n        final ClassLoader loader = XTSService.class.getClassLoader();\n        ServiceBuilder<Context> endpointBuilder;\n        ArrayList<ServiceController<Context>> controllers = new ArrayList<ServiceController<Context>>();\n        for (ContextInfo contextInfo : contextDefinitions) {\n            String contextName = contextInfo.contextPath;\n            Map<String, String> map = new HashMap<String, String>();\n            for (EndpointInfo endpointInfo : contextInfo.endpointInfo) {\n                map.put(endpointInfo.URLPattern, endpointInfo.SEIClassname);\n            }\n            endpointBuilder = EndpointPublishService.createServiceBuilder(target, contextName, loader, hostName, map);\n\n            controllers.add(endpointBuilder.setInitialMode(Mode.ACTIVE)\n                    .install());\n        }\n\n        // add an XTS service which depends on all the WS endpoints\n\n        final XTSManagerService xtsService = new XTSManagerService(coordinatorURL, isDefaultContextPropagation);\n\n        // this service needs to depend on the transaction recovery service\n        // because it can only initialise XTS recovery once the transaction recovery\n        // service has initialised the orb layer\n\n        ServiceBuilder<?> xtsServiceBuilder = target.addService(XTSServices.JBOSS_XTS_MAIN, xtsService);\n        xtsServiceBuilder\n                .addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER);\n\n        // this service needs to depend on JBossWS Config Service to be notified of the JBoss WS config (bind address, port etc)\n        xtsServiceBuilder.addDependency(WSServices.CLIENT_CONFIG_SERVICE.append(\"Standard-Client-Config\"));\n        xtsServiceBuilder.addDependency(WSServices.CONFIG_SERVICE, ServerConfig.class, xtsService.getWSServerConfig());\n\n        // the service also needs to depend on the endpoint services\n        for (ServiceController<Context> controller : controllers) {\n            xtsServiceBuilder.addDependency(controller.getName());\n        }\n\n        xtsServiceBuilder\n                .setInitialMode(Mode.ACTIVE)\n                .install();\n\n        // WS-AT / JTA Transaction bridge services:\n\n        final TxBridgeInboundRecoveryService txBridgeInboundRecoveryService = new TxBridgeInboundRecoveryService();\n        ServiceBuilder<?> txBridgeInboundRecoveryServiceBuilder =\n                target.addService(XTSServices.JBOSS_XTS_TXBRIDGE_INBOUND_RECOVERY, txBridgeInboundRecoveryService);\n        txBridgeInboundRecoveryServiceBuilder.addDependency(XTSServices.JBOSS_XTS_MAIN);\n\n        txBridgeInboundRecoveryServiceBuilder.setInitialMode(Mode.ACTIVE).install();\n\n        final TxBridgeOutboundRecoveryService txBridgeOutboundRecoveryService = new TxBridgeOutboundRecoveryService();\n        ServiceBuilder<?> txBridgeOutboundRecoveryServiceBuilder =\n                target.addService(XTSServices.JBOSS_XTS_TXBRIDGE_OUTBOUND_RECOVERY, txBridgeOutboundRecoveryService);\n        txBridgeOutboundRecoveryServiceBuilder.addDependency(XTSServices.JBOSS_XTS_MAIN);\n\n        txBridgeOutboundRecoveryServiceBuilder.setInitialMode(Mode.ACTIVE).install();\n\n    }","commit_id":"8e99043b231677e0c7121b19a40f9c4f6c9cead0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void populateModel(ModelNode operation, ModelNode model) throws OperationFailedException {\n        ENVIRONMENT_URL.validateAndSet(operation, model);\n        DEFAULT_CONTEXT_PROPAGATION.validateAndSet(operation, model);\n    }","id":70424,"modified_method":"@Override\n    protected void populateModel(ModelNode operation, ModelNode model) throws OperationFailedException {\n        HOST_NAME.validateAndSet(operation, model);\n        ENVIRONMENT_URL.validateAndSet(operation, model);\n        DEFAULT_CONTEXT_PROPAGATION.validateAndSet(operation, model);\n    }","commit_id":"8e99043b231677e0c7121b19a40f9c4f6c9cead0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration resourceRegistration) {\n        resourceRegistration.registerReadWriteAttribute(ENVIRONMENT_URL, null, new ReloadRequiredWriteAttributeHandler(ENVIRONMENT_URL));\n        resourceRegistration.registerReadWriteAttribute(DEFAULT_CONTEXT_PROPAGATION, null, new ReloadRequiredWriteAttributeHandler(DEFAULT_CONTEXT_PROPAGATION));\n        //this here just for legacy support!\n        resourceRegistration.registerReadOnlyAttribute(ENVIRONMENT, new OperationStepHandler() {\n            @Override\n            public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                ModelNode url = context.readResource(PathAddress.EMPTY_ADDRESS).getModel().get(ModelDescriptionConstants.URL);\n                context.getResult().get(ModelDescriptionConstants.URL).set(url);\n                context.stepCompleted();\n            }\n        });\n    }","id":70425,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration resourceRegistration) {\n        resourceRegistration.registerReadWriteAttribute(HOST_NAME, null, new ReloadRequiredWriteAttributeHandler(HOST_NAME));\n        resourceRegistration.registerReadWriteAttribute(ENVIRONMENT_URL, null, new ReloadRequiredWriteAttributeHandler(ENVIRONMENT_URL));\n        resourceRegistration.registerReadWriteAttribute(DEFAULT_CONTEXT_PROPAGATION, null, new ReloadRequiredWriteAttributeHandler(DEFAULT_CONTEXT_PROPAGATION));\n        //this here just for legacy support!\n        resourceRegistration.registerReadOnlyAttribute(ENVIRONMENT, new OperationStepHandler() {\n            @Override\n            public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                ModelNode url = context.readResource(PathAddress.EMPTY_ADDRESS).getModel().get(ModelDescriptionConstants.URL);\n                context.getResult().get(ModelDescriptionConstants.URL).set(url);\n                context.stepCompleted();\n            }\n        });\n    }","commit_id":"8e99043b231677e0c7121b19a40f9c4f6c9cead0","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public void readElement(XMLExtendedStreamReader reader, List<ModelNode> list) throws XMLStreamException {\n        // no attributes\n        if (reader.getAttributeCount() > 0) {\n            throw ParseUtils.unexpectedAttribute(reader, 0);\n        }\n\n        final ModelNode subsystem = Util.getEmptyOperation(ADD, PathAddress.pathAddress(XTSExtension.SUBSYSTEM_PATH).toModelNode());\n        list.add(subsystem);\n\n        // elements\n        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Namespace.forUri(reader.getNamespaceURI())) {\n                case XTS_1_0: {\n                    final Element element = Element.forName(reader.getLocalName());\n                    if (!encountered.add(element)) {\n                        throw ParseUtils.unexpectedElement(reader);\n                    }\n                    switch (element) {\n                        case XTS_ENVIRONMENT: {\n                            parseXTSEnvironmentElement(reader,subsystem);\n                            break;\n                        }\n                        case DEFAULT_CONTEXT_PROPAGATION: {\n                            parseDefaultContextPropagationElement(reader, subsystem);\n                            break;\n                        }\n                        default: {\n                            throw ParseUtils.unexpectedElement(reader);\n                        }\n                    }\n                    break;\n                }\n                default: {\n                    throw ParseUtils.unexpectedElement(reader);\n                }\n            }\n        }\n    }","id":70426,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public void readElement(XMLExtendedStreamReader reader, List<ModelNode> list) throws XMLStreamException {\n        // no attributes\n        if (reader.getAttributeCount() > 0) {\n            throw ParseUtils.unexpectedAttribute(reader, 0);\n        }\n\n        final ModelNode subsystem = Util.getEmptyOperation(ADD, PathAddress.pathAddress(XTSExtension.SUBSYSTEM_PATH)\n                .toModelNode());\n        list.add(subsystem);\n\n        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            final Element element = Element.forName(reader.getLocalName());\n\n            if (!encountered.add(element)) {\n                throw ParseUtils.unexpectedElement(reader);\n            }\n\n            switch (element) {\n                case HOST: {\n                    parseHostElement(reader, subsystem);\n                    break;\n                }\n                case XTS_ENVIRONMENT: {\n                    parseXTSEnvironmentElement(reader,subsystem);\n                    break;\n                }\n                case DEFAULT_CONTEXT_PROPAGATION: {\n                    parseDefaultContextPropagationElement(reader, subsystem);\n                    break;\n                }\n                default: {\n                    throw ParseUtils.unexpectedElement(reader);\n                }\n            }\n        }\n    }","commit_id":"8e99043b231677e0c7121b19a40f9c4f6c9cead0","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Handle the enable-client-handler element.\n     *\n     * @param reader\n     * @param subsystem\n     * @throws XMLStreamException\n     */\n    static void parseDefaultContextPropagationElement(XMLExtendedStreamReader reader, ModelNode subsystem) throws XMLStreamException {\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i++) {\n            ParseUtils.requireNoNamespaceAttribute(reader, i);\n            final String value = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            switch (attribute) {\n                case ENABLED:\n                    if (value == null || (!value.toLowerCase().equals(\"true\") && !value.toLowerCase().equals(\"false\"))) {\n                        throw ParseUtils.invalidAttributeValue(reader, i);\n                    }\n                    DEFAULT_CONTEXT_PROPAGATION.parseAndSetParameter(value, subsystem, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, i);\n            }\n        }\n\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","id":70427,"modified_method":"/**\n     * Handle the enable-client-handler element.\n     *\n     * @param reader\n     * @param subsystem\n     * @throws XMLStreamException\n     */\n    private void parseDefaultContextPropagationElement(XMLExtendedStreamReader reader, ModelNode subsystem) throws XMLStreamException {\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i++) {\n            ParseUtils.requireNoNamespaceAttribute(reader, i);\n            final String value = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            switch (attribute) {\n                case ENABLED:\n                    if (value == null || (!value.toLowerCase().equals(\"true\") && !value.toLowerCase().equals(\"false\"))) {\n                        throw ParseUtils.invalidAttributeValue(reader, i);\n                    }\n                    DEFAULT_CONTEXT_PROPAGATION.parseAndSetParameter(value, subsystem, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, i);\n            }\n        }\n\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","commit_id":"8e99043b231677e0c7121b19a40f9c4f6c9cead0","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public void writeContent(XMLExtendedStreamWriter writer, SubsystemMarshallingContext context) throws XMLStreamException {\n\n        context.startSubsystemElement(Namespace.CURRENT.getUriString(), false);\n\n        ModelNode node = context.getModelNode();\n\n\n        writer.writeStartElement(Element.XTS_ENVIRONMENT.getLocalName());\n        ENVIRONMENT_URL.marshallAsAttribute(node, writer);\n        writer.writeEndElement();\n\n        writer.writeStartElement(Element.DEFAULT_CONTEXT_PROPAGATION.getLocalName());\n        DEFAULT_CONTEXT_PROPAGATION.marshallAsAttribute(node, writer);\n        writer.writeEndElement();\n\n        writer.writeEndElement();\n    }","id":70428,"modified_method":"/**\n     * {@inheritDoc}          XMLExtendedStreamReader reader\n     */\n    @Override\n    public void writeContent(XMLExtendedStreamWriter writer, SubsystemMarshallingContext context) throws XMLStreamException {\n        context.startSubsystemElement(Namespace.CURRENT.getUriString(), false);\n        ModelNode node = context.getModelNode();\n\n        if (node.hasDefined(HOST_NAME.getName())) {\n            writer.writeStartElement(Element.HOST.getLocalName());\n            HOST_NAME.marshallAsAttribute(node, writer);\n            writer.writeEndElement();\n        }\n\n        if (node.hasDefined(ENVIRONMENT_URL.getName())) {\n            writer.writeStartElement(Element.XTS_ENVIRONMENT.getLocalName());\n            ENVIRONMENT_URL.marshallAsAttribute(node, writer);\n            writer.writeEndElement();\n        }\n\n        if (node.hasDefined(DEFAULT_CONTEXT_PROPAGATION.getName())) {\n            writer.writeStartElement(Element.DEFAULT_CONTEXT_PROPAGATION.getLocalName());\n            DEFAULT_CONTEXT_PROPAGATION.marshallAsAttribute(node, writer);\n            writer.writeEndElement();\n        }\n\n        writer.writeEndElement();\n    }","commit_id":"8e99043b231677e0c7121b19a40f9c4f6c9cead0","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void writeAttribute(final XMLExtendedStreamWriter writer, final Attribute attr, final ModelNode value) throws XMLStreamException {\n        writer.writeAttribute(attr.getLocalName(), value.asString());\n    }","id":70429,"modified_method":"private void parseHostElement(XMLExtendedStreamReader reader, ModelNode subsystem) throws XMLStreamException {\n        final EnumSet<Attribute> required = EnumSet.of(Attribute.NAME);\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i++) {\n            ParseUtils.requireNoNamespaceAttribute(reader, i);\n            final String value = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            required.remove(attribute);\n            switch (attribute) {\n                case NAME:\n                    HOST_NAME.parseAndSetParameter(value, subsystem, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, i);\n            }\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n\n        if (!required.isEmpty()) {\n            throw ParseUtils.missingRequired(reader, required);\n        }\n    }","commit_id":"8e99043b231677e0c7121b19a40f9c4f6c9cead0","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Handle the xts-environment element\n     *\n     *\n     * @param reader\n     * @param subsystem\n     * @return ModelNode for the core-environment\n     * @throws javax.xml.stream.XMLStreamException\n     *\n     */\n    static void parseXTSEnvironmentElement(XMLExtendedStreamReader reader, ModelNode subsystem) throws XMLStreamException {\n\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i++) {\n            ParseUtils.requireNoNamespaceAttribute(reader, i);\n            final String value = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            switch (attribute) {\n                case URL:\n                    ENVIRONMENT_URL.parseAndSetParameter(value, subsystem, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, i);\n            }\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","id":70430,"modified_method":"/**\n     * Handle the xts-environment element\n     *\n     *\n     * @param reader\n     * @param subsystem\n     * @return ModelNode for the core-environment\n     * @throws javax.xml.stream.XMLStreamException\n     *\n     */\n    private void parseXTSEnvironmentElement(XMLExtendedStreamReader reader, ModelNode subsystem) throws XMLStreamException {\n\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i++) {\n            ParseUtils.requireNoNamespaceAttribute(reader, i);\n            final String value = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            switch (attribute) {\n                case URL:\n                    ENVIRONMENT_URL.parseAndSetParameter(value, subsystem, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, i);\n            }\n        }\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }","commit_id":"8e99043b231677e0c7121b19a40f9c4f6c9cead0","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void testDuelTermsHistogram() throws Exception {\n        createIndex(\"idx\");\n\n        final int numDocs = scaledRandomIntBetween(500, 5000);\n        final int maxNumTerms = randomIntBetween(10, 2000);\n        final int interval = randomIntBetween(1, 100);\n\n        final Integer[] values = new Integer[maxNumTerms];\n        for (int i = 0; i < values.length; ++i) {\n            values[i] = randomInt(maxNumTerms * 3) - maxNumTerms;\n        }\n\n        for (int i = 0; i < numDocs; ++i) {\n            XContentBuilder source = jsonBuilder()\n                    .startObject()\n                    .field(\"num\", randomDouble())\n                    .startArray(\"values\");\n            final int numValues = randomInt(4);\n            for (int j = 0; j < numValues; ++j) {\n                source = source.value(randomFrom(values));\n            }\n            source = source.endArray().endObject();\n            client().prepareIndex(\"idx\", \"type\").setSource(source).execute().actionGet();\n        }\n        assertNoFailures(client().admin().indices().prepareRefresh(\"idx\").setIndicesOptions(IndicesOptions.lenientExpandOpen()).execute().get());\n\n        SearchResponse resp = client().prepareSearch(\"idx\")\n                .addAggregation(terms(\"terms\").field(\"values\").collectMode(randomFrom(SubAggCollectionMode.values())).script(\"floor(_value / interval)\").param(\"interval\", interval).size(maxNumTerms))\n                .addAggregation(histogram(\"histo\").field(\"values\").interval(interval))\n                .execute().actionGet();\n\n        assertSearchResponse(resp);\n\n        Terms terms = resp.getAggregations().get(\"terms\");\n        assertThat(terms, notNullValue());\n        Histogram histo = resp.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(terms.getBuckets().size(), equalTo(histo.getBuckets().size()));\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            final double key = ((Number) bucket.getKey()).doubleValue() / interval;\n            final Terms.Bucket termsBucket = terms.getBucketByKey(String.valueOf(key));\n            assertEquals(bucket.getDocCount(), termsBucket.getDocCount());\n        }\n    }","id":70431,"modified_method":"public void testDuelTermsHistogram() throws Exception {\n        createIndex(\"idx\");\n\n        final int numDocs = scaledRandomIntBetween(500, 5000);\n        final int maxNumTerms = randomIntBetween(10, 2000);\n        final int interval = randomIntBetween(1, 100);\n\n        final Integer[] values = new Integer[maxNumTerms];\n        for (int i = 0; i < values.length; ++i) {\n            values[i] = randomInt(maxNumTerms * 3) - maxNumTerms;\n        }\n\n        for (int i = 0; i < numDocs; ++i) {\n            XContentBuilder source = jsonBuilder()\n                    .startObject()\n                    .field(\"num\", randomDouble())\n                    .startArray(\"values\");\n            final int numValues = randomInt(4);\n            for (int j = 0; j < numValues; ++j) {\n                source = source.value(randomFrom(values));\n            }\n            source = source.endArray().endObject();\n            client().prepareIndex(\"idx\", \"type\").setSource(source).execute().actionGet();\n        }\n        assertNoFailures(client().admin().indices().prepareRefresh(\"idx\").setIndicesOptions(IndicesOptions.lenientExpandOpen()).execute().get());\n\n        SearchResponse resp = client().prepareSearch(\"idx\")\n                .addAggregation(terms(\"terms\").field(\"values\").collectMode(randomFrom(SubAggCollectionMode.values())).script(\"floor(_value / interval)\").param(\"interval\", interval).size(maxNumTerms))\n                .addAggregation(histogram(\"histo\").field(\"values\").interval(interval).minDocCount(1))\n                .execute().actionGet();\n\n        assertSearchResponse(resp);\n\n        Terms terms = resp.getAggregations().get(\"terms\");\n        assertThat(terms, notNullValue());\n        Histogram histo = resp.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(terms.getBuckets().size(), equalTo(histo.getBuckets().size()));\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            final double key = ((Number) bucket.getKey()).doubleValue() / interval;\n            final Terms.Bucket termsBucket = terms.getBucketByKey(String.valueOf(key));\n            assertEquals(bucket.getDocCount(), termsBucket.getDocCount());\n        }\n    }","commit_id":"12c19508fb55e6854b6499de45e4ef9a1fa89b04","url":"https://github.com/elastic/elasticsearch"},{"original_method":"void setParent(AggregatorFactory parent) {\n        for (AggregatorFactory factory : factories) {\n            factory.parent = parent;\n        }\n    }","id":70432,"modified_method":"void setParent(AggregatorFactory parent) {\n        this.parent = parent;\n        for (AggregatorFactory factory : factories) {\n            factory.parent = parent;\n        }\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void validate() {\n        for (AggregatorFactory factory : factories) {\n            factory.validate();\n        }\n        for (ReducerFactory factory : reducerFactories) {\n            factory.validate();\n        }\n    }","id":70433,"modified_method":"public void validate() {\n        for (AggregatorFactory factory : factories) {\n            factory.validate();\n        }\n        for (ReducerFactory factory : reducerFactories) {\n            factory.validate(parent, factories, reducerFactories);\n        }\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void unmapped() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx_unmapped\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"date\").interval(DateHistogramInterval.MONTH)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        assertThat(deriv.getBuckets().size(), equalTo(0));\n    }","id":70434,"modified_method":"@Test\n    public void unmapped() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx_unmapped\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"date\").interval(DateHistogramInterval.MONTH).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        assertThat(deriv.getBuckets().size(), equalTo(0));\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void singleValuedField_WithSubAggregation() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"date\").interval(DateHistogramInterval.MONTH)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"sum\")).subAggregation(sum(\"sum\").field(\"value\")))\n                .execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = histo.getBuckets();\n        assertThat(buckets.size(), equalTo(3));\n        Object[] propertiesKeys = (Object[]) histo.getProperty(\"_key\");\n        Object[] propertiesDocCounts = (Object[]) histo.getProperty(\"_count\");\n        Object[] propertiesCounts = (Object[]) histo.getProperty(\"sum.value\");\n\n        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC);\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        Sum sum = bucket.getAggregations().get(\"sum\");\n        assertThat(sum, notNullValue());\n        assertThat(sum.getValue(), equalTo(1.0));\n        SimpleValue deriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(deriv, nullValue());\n        assertThat((DateTime) propertiesKeys[0], equalTo(key));\n        assertThat((long) propertiesDocCounts[0], equalTo(1l));\n        assertThat((double) propertiesCounts[0], equalTo(1.0));\n\n        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        sum = bucket.getAggregations().get(\"sum\");\n        assertThat(sum, notNullValue());\n        assertThat(sum.getValue(), equalTo(5.0));\n        deriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.value(), equalTo(4.0));\n        assertThat((double) bucket.getProperty(\"histo\", AggregationPath.parse(\"deriv.value\").getPathElementsAsStringList()), equalTo(4.0));\n        assertThat((DateTime) propertiesKeys[1], equalTo(key));\n        assertThat((long) propertiesDocCounts[1], equalTo(2l));\n        assertThat((double) propertiesCounts[1], equalTo(5.0));\n\n        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        sum = bucket.getAggregations().get(\"sum\");\n        assertThat(sum, notNullValue());\n        assertThat(sum.getValue(), equalTo(15.0));\n        deriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.value(), equalTo(10.0));\n        assertThat((double) bucket.getProperty(\"histo\", AggregationPath.parse(\"deriv.value\").getPathElementsAsStringList()), equalTo(10.0));\n        assertThat((DateTime) propertiesKeys[2], equalTo(key));\n        assertThat((long) propertiesDocCounts[2], equalTo(3l));\n        assertThat((double) propertiesCounts[2], equalTo(15.0));\n    }","id":70435,"modified_method":"@Test\n    public void singleValuedField_WithSubAggregation() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"date\").interval(DateHistogramInterval.MONTH).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"sum\")).subAggregation(sum(\"sum\").field(\"value\")))\n                .execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = histo.getBuckets();\n        assertThat(buckets.size(), equalTo(3));\n        Object[] propertiesKeys = (Object[]) histo.getProperty(\"_key\");\n        Object[] propertiesDocCounts = (Object[]) histo.getProperty(\"_count\");\n        Object[] propertiesCounts = (Object[]) histo.getProperty(\"sum.value\");\n\n        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC);\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        Sum sum = bucket.getAggregations().get(\"sum\");\n        assertThat(sum, notNullValue());\n        assertThat(sum.getValue(), equalTo(1.0));\n        SimpleValue deriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(deriv, nullValue());\n        assertThat((DateTime) propertiesKeys[0], equalTo(key));\n        assertThat((long) propertiesDocCounts[0], equalTo(1l));\n        assertThat((double) propertiesCounts[0], equalTo(1.0));\n\n        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        sum = bucket.getAggregations().get(\"sum\");\n        assertThat(sum, notNullValue());\n        assertThat(sum.getValue(), equalTo(5.0));\n        deriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.value(), equalTo(4.0));\n        assertThat((double) bucket.getProperty(\"histo\", AggregationPath.parse(\"deriv.value\").getPathElementsAsStringList()), equalTo(4.0));\n        assertThat((DateTime) propertiesKeys[1], equalTo(key));\n        assertThat((long) propertiesDocCounts[1], equalTo(2l));\n        assertThat((double) propertiesCounts[1], equalTo(5.0));\n\n        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        sum = bucket.getAggregations().get(\"sum\");\n        assertThat(sum, notNullValue());\n        assertThat(sum.getValue(), equalTo(15.0));\n        deriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.value(), equalTo(10.0));\n        assertThat((double) bucket.getProperty(\"histo\", AggregationPath.parse(\"deriv.value\").getPathElementsAsStringList()), equalTo(10.0));\n        assertThat((DateTime) propertiesKeys[2], equalTo(key));\n        assertThat((long) propertiesDocCounts[2], equalTo(3l));\n        assertThat((double) propertiesCounts[2], equalTo(15.0));\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void singleValuedField() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"date\").interval(DateHistogramInterval.MONTH)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(3));\n\n        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC);\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, nullValue());\n\n        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1d));\n\n        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1d));\n    }","id":70436,"modified_method":"@Test\n    public void singleValuedField() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"date\").interval(DateHistogramInterval.MONTH).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(3));\n\n        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC);\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, nullValue());\n\n        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1d));\n\n        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1d));\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void partiallyUnmapped() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\", \"idx_unmapped\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"date\").interval(DateHistogramInterval.MONTH)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(3));\n\n        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC);\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(true));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, nullValue());\n\n        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1.0));\n\n        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1.0));\n    }","id":70437,"modified_method":"@Test\n    public void partiallyUnmapped() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\", \"idx_unmapped\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"date\").interval(DateHistogramInterval.MONTH).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(3));\n\n        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC);\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(true));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, nullValue());\n\n        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1.0));\n\n        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1.0));\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void multiValuedField() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"dates\").interval(DateHistogramInterval.MONTH)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(4));\n\n        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC);\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(true));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, nullValue());\n\n        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(2.0));\n\n        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(5l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(2.0));\n\n        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(3);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-2.0));\n    }","id":70438,"modified_method":"@Test\n    public void multiValuedField() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        dateHistogram(\"histo\").field(\"dates\").interval(DateHistogramInterval.MONTH).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(4));\n\n        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC);\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(true));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, nullValue());\n\n        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(2.0));\n\n        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(5l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(2.0));\n\n        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC);\n        bucket = buckets.get(3);\n        assertThat(bucket, notNullValue());\n        assertThat((DateTime) bucket.getKey(), equalTo(key));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        assertThat(bucket.getAggregations().asList().isEmpty(), is(false));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-2.0));\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void partiallyUnmapped() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\", \"idx_unmapped\")\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram<Bucket> deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(deriv.getBuckets().size(), equalTo(numValueBuckets));\n\n        for (int i = 0; i < numValueBuckets; ++i) {\n            Histogram.Bucket bucket = buckets.get(i);\n            checkBucketKeyAndDocCount(\"Bucket \" + i, bucket, i * interval, valueCounts[i]);\n            SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n            if (i > 0) {\n                assertThat(docCountDeriv, notNullValue());\n                assertThat(docCountDeriv.value(), equalTo((double) firstDerivValueCounts[i - 1]));\n            } else {\n                assertThat(docCountDeriv, nullValue());\n            }\n        }\n    }","id":70439,"modified_method":"@Test\n    public void partiallyUnmapped() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\", \"idx_unmapped\")\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram<Bucket> deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(deriv.getBuckets().size(), equalTo(numValueBuckets));\n\n        for (int i = 0; i < numValueBuckets; ++i) {\n            Histogram.Bucket bucket = buckets.get(i);\n            checkBucketKeyAndDocCount(\"Bucket \" + i, bucket, i * interval, valueCounts[i]);\n            SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n            if (i > 0) {\n                assertThat(docCountDeriv, notNullValue());\n                assertThat(docCountDeriv.value(), equalTo((double) firstDerivValueCounts[i - 1]));\n            } else {\n                assertThat(docCountDeriv, nullValue());\n            }\n        }\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * test first and second derivative on the sing\n     */\n    @Test\n    public void singleValuedField() {\n\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))\n                                .subAggregation(derivative(\"2nd_deriv\").setBucketsPaths(\"deriv\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram<Bucket> deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(numValueBuckets));\n\n        for (int i = 0; i < numValueBuckets; ++i) {\n            Histogram.Bucket bucket = buckets.get(i);\n            checkBucketKeyAndDocCount(\"Bucket \" + i, bucket, i * interval, valueCounts[i]);\n            SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n            if (i > 0) {\n                assertThat(docCountDeriv, notNullValue());\n                assertThat(docCountDeriv.value(), equalTo((double) firstDerivValueCounts[i - 1]));\n            } else {\n                assertThat(docCountDeriv, nullValue());\n            }\n            SimpleValue docCount2ndDeriv = bucket.getAggregations().get(\"2nd_deriv\");\n            if (i > 1) {\n                assertThat(docCount2ndDeriv, notNullValue());\n                assertThat(docCount2ndDeriv.value(), equalTo((double) secondDerivValueCounts[i - 2]));\n            } else {\n                assertThat(docCount2ndDeriv, nullValue());\n            }\n        }\n    }","id":70440,"modified_method":"/**\n     * test first and second derivative on the sing\n     */\n    @Test\n    public void singleValuedField() {\n\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))\n                                .subAggregation(derivative(\"2nd_deriv\").setBucketsPaths(\"deriv\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram<Bucket> deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<? extends Bucket> buckets = deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(numValueBuckets));\n\n        for (int i = 0; i < numValueBuckets; ++i) {\n            Histogram.Bucket bucket = buckets.get(i);\n            checkBucketKeyAndDocCount(\"Bucket \" + i, bucket, i * interval, valueCounts[i]);\n            SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n            if (i > 0) {\n                assertThat(docCountDeriv, notNullValue());\n                assertThat(docCountDeriv.value(), equalTo((double) firstDerivValueCounts[i - 1]));\n            } else {\n                assertThat(docCountDeriv, nullValue());\n            }\n            SimpleValue docCount2ndDeriv = bucket.getAggregations().get(\"2nd_deriv\");\n            if (i > 1) {\n                assertThat(docCount2ndDeriv, notNullValue());\n                assertThat(docCount2ndDeriv.value(), equalTo((double) secondDerivValueCounts[i - 2]));\n            } else {\n                assertThat(docCount2ndDeriv, nullValue());\n            }\n        }\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void singleValuedField_WithSubAggregation() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval)\n                                .subAggregation(sum(\"sum\").field(SINGLE_VALUED_FIELD_NAME))\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"sum\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram<Bucket> deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        assertThat(deriv.getBuckets().size(), equalTo(numValueBuckets));\n        Object[] propertiesKeys = (Object[]) deriv.getProperty(\"_key\");\n        Object[] propertiesDocCounts = (Object[]) deriv.getProperty(\"_count\");\n        Object[] propertiesSumCounts = (Object[]) deriv.getProperty(\"sum.value\");\n\n        List<Bucket> buckets = new ArrayList<Bucket>(deriv.getBuckets());\n        Long expectedSumPreviousBucket = Long.MIN_VALUE; // start value, gets\n                                                         // overwritten\n        for (int i = 0; i < numValueBuckets; ++i) {\n            Histogram.Bucket bucket = buckets.get(i);\n            checkBucketKeyAndDocCount(\"Bucket \" + i, bucket, i * interval, valueCounts[i]);\n            Sum sum = bucket.getAggregations().get(\"sum\");\n            assertThat(sum, notNullValue());\n            long expectedSum = valueCounts[i] * (i * interval);\n            assertThat(sum.getValue(), equalTo((double) expectedSum));\n            SimpleValue sumDeriv = bucket.getAggregations().get(\"deriv\");\n            if (i > 0) {\n                assertThat(sumDeriv, notNullValue());\n                long sumDerivValue = expectedSum - expectedSumPreviousBucket;\n                assertThat(sumDeriv.value(), equalTo((double) sumDerivValue));\n                assertThat((double) bucket.getProperty(\"histo\", AggregationPath.parse(\"deriv.value\").getPathElementsAsStringList()),\n                        equalTo((double) sumDerivValue));\n            } else {\n                assertThat(sumDeriv, nullValue());\n            }\n            expectedSumPreviousBucket = expectedSum;\n            assertThat((long) propertiesKeys[i], equalTo((long) i * interval));\n            assertThat((long) propertiesDocCounts[i], equalTo(valueCounts[i]));\n            assertThat((double) propertiesSumCounts[i], equalTo((double) expectedSum));\n        }\n    }","id":70441,"modified_method":"@Test\n    public void singleValuedField_WithSubAggregation() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx\")\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0)\n                                .subAggregation(sum(\"sum\").field(SINGLE_VALUED_FIELD_NAME))\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"sum\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram<Bucket> deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        assertThat(deriv.getBuckets().size(), equalTo(numValueBuckets));\n        Object[] propertiesKeys = (Object[]) deriv.getProperty(\"_key\");\n        Object[] propertiesDocCounts = (Object[]) deriv.getProperty(\"_count\");\n        Object[] propertiesSumCounts = (Object[]) deriv.getProperty(\"sum.value\");\n\n        List<Bucket> buckets = new ArrayList<Bucket>(deriv.getBuckets());\n        Long expectedSumPreviousBucket = Long.MIN_VALUE; // start value, gets\n                                                         // overwritten\n        for (int i = 0; i < numValueBuckets; ++i) {\n            Histogram.Bucket bucket = buckets.get(i);\n            checkBucketKeyAndDocCount(\"Bucket \" + i, bucket, i * interval, valueCounts[i]);\n            Sum sum = bucket.getAggregations().get(\"sum\");\n            assertThat(sum, notNullValue());\n            long expectedSum = valueCounts[i] * (i * interval);\n            assertThat(sum.getValue(), equalTo((double) expectedSum));\n            SimpleValue sumDeriv = bucket.getAggregations().get(\"deriv\");\n            if (i > 0) {\n                assertThat(sumDeriv, notNullValue());\n                long sumDerivValue = expectedSum - expectedSumPreviousBucket;\n                assertThat(sumDeriv.value(), equalTo((double) sumDerivValue));\n                assertThat((double) bucket.getProperty(\"histo\", AggregationPath.parse(\"deriv.value\").getPathElementsAsStringList()),\n                        equalTo((double) sumDerivValue));\n            } else {\n                assertThat(sumDeriv, nullValue());\n            }\n            expectedSumPreviousBucket = expectedSum;\n            assertThat((long) propertiesKeys[i], equalTo((long) i * interval));\n            assertThat((long) propertiesDocCounts[i], equalTo(valueCounts[i]));\n            assertThat((double) propertiesSumCounts[i], equalTo((double) expectedSum));\n        }\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void unmapped() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx_unmapped\")\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram<Bucket> deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        assertThat(deriv.getBuckets().size(), equalTo(0));\n    }","id":70442,"modified_method":"@Test\n    public void unmapped() throws Exception {\n        SearchResponse response = client()\n                .prepareSearch(\"idx_unmapped\")\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))).execute().actionGet();\n\n        assertSearchResponse(response);\n\n        InternalHistogram<Bucket> deriv = response.getAggregations().get(\"histo\");\n        assertThat(deriv, notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        assertThat(deriv.getBuckets().size(), equalTo(0));\n    }","commit_id":"b751f0e11bacedd4d684c5cf826bbc64dc314722","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private AggregationBuilder getCreatedAtFacet(IssueQuery query, Map<String, FilterBuilder> filters, QueryBuilder esQuery) {\n    return AggregationBuilders.dateHistogram(IssueFilterParameters.CREATED_AT)\n      .field(IssueIndexDefinition.FIELD_ISSUE_FUNC_CREATED_AT)\n      .interval(Interval.DAY)\n      .format(DateUtils.DATETIME_FORMAT)\n      .preZone(TimeZone.getDefault().getID());\n  }","id":70443,"modified_method":"private AggregationBuilder getCreatedAtFacet(IssueQuery query, Map<String, FilterBuilder> filters, QueryBuilder esQuery) {\n    return AggregationBuilders.dateHistogram(IssueFilterParameters.CREATED_AT)\n      .field(IssueIndexDefinition.FIELD_ISSUE_FUNC_CREATED_AT)\n      .interval(Interval.DAY)\n      .minDocCount(0L)\n      .format(DateUtils.DATETIME_FORMAT)\n      .preZone(TimeZone.getDefault().getID());\n  }","commit_id":"2bd65c717cbc7d50712db2ba19363c0f6e33d451","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void facet_on_created_at() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    ComponentDto file = ComponentTesting.newFileDto(project);\n\n    TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n\n    IssueDoc issue1 = IssueTesting.newDoc(\"ISSUE1\", file).setFuncCreationDate(DateUtils.parseDateTime(\"2014-09-20T12:34:56+0000\"));\n    IssueDoc issue2 = IssueTesting.newDoc(\"ISSUE2\", file).setFuncCreationDate(DateUtils.parseDateTime(\"2014-09-20T23:45:60+0000\"));\n    IssueDoc issue3 = IssueTesting.newDoc(\"ISSUE3\", file).setFuncCreationDate(DateUtils.parseDateTime(\"2014-09-21T12:34:56+0000\"));\n    IssueDoc issue4 = IssueTesting.newDoc(\"ISSUE4\", file).setFuncCreationDate(DateUtils.parseDateTime(\"2014-09-24T12:34:56+0000\"));\n    indexIssues(issue1, issue2, issue3, issue4);\n\n\n    Collection<FacetValue> createdAt = index.search(IssueQuery.builder().build(), new QueryContext().addFacets(Arrays.asList(\"createdAt\"))).getFacets().get(\"createdAt\");\n    assertThat(createdAt).hasSize(3)\n      .containsOnly(new FacetValue(\"2014-09-20T00:00:00+0000\", 2), new FacetValue(\"2014-09-21T00:00:00+0000\", 2), new FacetValue(\"2014-09-24T00:00:00+0000\", 1));\n  }","id":70444,"modified_method":"@Test\n  public void facet_on_created_at() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    ComponentDto file = ComponentTesting.newFileDto(project);\n\n    TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n\n    IssueDoc issue1 = IssueTesting.newDoc(\"ISSUE1\", file).setFuncCreationDate(DateUtils.parseDateTime(\"2014-09-20T12:34:56+0000\"));\n    IssueDoc issue2 = IssueTesting.newDoc(\"ISSUE2\", file).setFuncCreationDate(DateUtils.parseDateTime(\"2014-09-20T23:45:60+0000\"));\n    IssueDoc issue3 = IssueTesting.newDoc(\"ISSUE3\", file).setFuncCreationDate(DateUtils.parseDateTime(\"2014-09-21T12:34:56+0000\"));\n    IssueDoc issue4 = IssueTesting.newDoc(\"ISSUE4\", file).setFuncCreationDate(DateUtils.parseDateTime(\"2014-09-24T12:34:56+0000\"));\n    indexIssues(issue1, issue2, issue3, issue4);\n\n    Collection<FacetValue> createdAt = index.search(IssueQuery.builder().build(), new QueryContext().addFacets(Arrays.asList(\"createdAt\"))).getFacets().get(\"createdAt\");\n    assertThat(createdAt).hasSize(5)\n      .containsOnly(\n        new FacetValue(\"2014-09-20T00:00:00+0000\", 2),\n        new FacetValue(\"2014-09-21T00:00:00+0000\", 1),\n        new FacetValue(\"2014-09-22T00:00:00+0000\", 0),\n        new FacetValue(\"2014-09-23T00:00:00+0000\", 0),\n        new FacetValue(\"2014-09-24T00:00:00+0000\", 1));\n  }","commit_id":"2bd65c717cbc7d50712db2ba19363c0f6e33d451","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n    protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {\n        if (format != null) {\n            builder.field(DerivativeParser.FORMAT.getPreferredName(), format);\n        }\n        return builder;\n    }","id":70445,"modified_method":"@Override\n    protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {\n        if (format != null) {\n            builder.field(DerivativeParser.FORMAT.getPreferredName(), format);\n        }\n        if (gapPolicy != null) {\n            builder.field(DerivativeParser.GAP_POLICY.getPreferredName(), gapPolicy.getName());\n        }\n        return builder;\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public ReducerFactory parse(String reducerName, XContentParser parser, SearchContext context) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        String[] bucketsPaths = null;\n        String format = null;\n\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.VALUE_STRING) {\n                if (FORMAT.match(currentFieldName)) {\n                    format = parser.text();\n                } else if (BUCKETS_PATH.match(currentFieldName)) {\n                    bucketsPaths = new String[] { parser.text() };\n                } else {\n                    throw new SearchParseException(context, \"Unknown key for a \" + token + \" in [\" + reducerName + \"]: [\"\n                            + currentFieldName + \"].\");\n                }\n            } else if (token == XContentParser.Token.START_ARRAY) {\n                if (BUCKETS_PATH.match(currentFieldName)) {\n                    List<String> paths = new ArrayList<>();\n                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n                        String path = parser.text();\n                        paths.add(path);\n                    }\n                    bucketsPaths = paths.toArray(new String[paths.size()]);\n                } else {\n                    throw new SearchParseException(context, \"Unknown key for a \" + token + \" in [\" + reducerName + \"]: [\"\n                            + currentFieldName + \"].\");\n                }\n            } else {\n                throw new SearchParseException(context, \"Unexpected token \" + token + \" in [\" + reducerName + \"].\");\n            }\n        }\n\n        if (bucketsPaths == null) {\n            throw new SearchParseException(context, \"Missing required field [\" + BUCKETS_PATH.getPreferredName()\n                    + \"] for derivative aggregation [\" + reducerName + \"]\");\n        }\n\n        ValueFormatter formatter = null;\n        if (format != null) {\n            formatter = ValueFormat.Patternable.Number.format(format).formatter();\n        }\n\n        return new DerivativeReducer.Factory(reducerName, bucketsPaths, formatter);\n    }","id":70446,"modified_method":"@Override\n    public ReducerFactory parse(String reducerName, XContentParser parser, SearchContext context) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        String[] bucketsPaths = null;\n        String format = null;\n        GapPolicy gapPolicy = GapPolicy.IGNORE;\n\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.VALUE_STRING) {\n                if (FORMAT.match(currentFieldName)) {\n                    format = parser.text();\n                } else if (BUCKETS_PATH.match(currentFieldName)) {\n                    bucketsPaths = new String[] { parser.text() };\n                } else if (GAP_POLICY.match(currentFieldName)) {\n                    gapPolicy = GapPolicy.parse(context, parser.text());\n                } else {\n                    throw new SearchParseException(context, \"Unknown key for a \" + token + \" in [\" + reducerName + \"]: [\"\n                            + currentFieldName + \"].\");\n                }\n            } else if (token == XContentParser.Token.START_ARRAY) {\n                if (BUCKETS_PATH.match(currentFieldName)) {\n                    List<String> paths = new ArrayList<>();\n                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n                        String path = parser.text();\n                        paths.add(path);\n                    }\n                    bucketsPaths = paths.toArray(new String[paths.size()]);\n                } else {\n                    throw new SearchParseException(context, \"Unknown key for a \" + token + \" in [\" + reducerName + \"]: [\"\n                            + currentFieldName + \"].\");\n                }\n            } else {\n                throw new SearchParseException(context, \"Unexpected token \" + token + \" in [\" + reducerName + \"].\");\n            }\n        }\n\n        if (bucketsPaths == null) {\n            throw new SearchParseException(context, \"Missing required field [\" + BUCKETS_PATH.getPreferredName()\n                    + \"] for derivative aggregation [\" + reducerName + \"]\");\n        }\n\n        ValueFormatter formatter = null;\n        if (format != null) {\n            formatter = ValueFormat.Patternable.Number.format(format).formatter();\n        }\n\n        return new DerivativeReducer.Factory(reducerName, bucketsPaths, formatter, gapPolicy);\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public DerivativeReducer(String name, String[] bucketsPaths, @Nullable ValueFormatter formatter, Map<String, Object> metadata) {\n        super(name, bucketsPaths, metadata);\n        this.formatter = formatter;\n    }","id":70447,"modified_method":"public DerivativeReducer(String name, String[] bucketsPaths, @Nullable ValueFormatter formatter, GapPolicy gapPolicy,\n            Map<String, Object> metadata) {\n        super(name, bucketsPaths, metadata);\n        this.formatter = formatter;\n        this.gapPolicy = gapPolicy;\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public Factory(String name, String[] bucketsPaths, @Nullable ValueFormatter formatter) {\n            super(name, TYPE.name(), bucketsPaths);\n            this.formatter = formatter;\n        }","id":70448,"modified_method":"public Factory(String name, String[] bucketsPaths, @Nullable ValueFormatter formatter, GapPolicy gapPolicy) {\n            super(name, TYPE.name(), bucketsPaths);\n            this.formatter = formatter;\n            this.gapPolicy = gapPolicy;\n        }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public InternalAggregation reduce(InternalAggregation aggregation, ReduceContext reduceContext) {\n        InternalHistogram<? extends InternalHistogram.Bucket> histo = (InternalHistogram<? extends InternalHistogram.Bucket>) aggregation;\n        List<? extends InternalHistogram.Bucket> buckets = histo.getBuckets();\n        InternalHistogram.Factory<? extends InternalHistogram.Bucket> factory = histo.getFactory();\n\n        List newBuckets = new ArrayList<>();\n        Double lastBucketValue = null;\n        for (InternalHistogram.Bucket bucket : buckets) {\n            Double thisBucketValue = resolveBucketValue(histo, bucket);\n            if (lastBucketValue != null) {\n                if (thisBucketValue == null) {\n                    throw new ElasticsearchIllegalStateException(\"FOUND GAP IN DATA\"); // NOCOMMIT deal with gaps in data\n                }\n                double diff = thisBucketValue - lastBucketValue;\n\n                List<InternalAggregation> aggs = new ArrayList<>(Lists.transform(bucket.getAggregations().asList(), FUNCTION));\n                aggs.add(new InternalSimpleValue(name(), diff, formatter, new ArrayList<Reducer>(), metaData()));\n                InternalHistogram.Bucket newBucket = factory.createBucket(bucket.getKey(), bucket.getDocCount(), new InternalAggregations(\n                        aggs), bucket.getKeyed(), bucket.getFormatter());\n                newBuckets.add(newBucket);\n            } else {\n                newBuckets.add(bucket);\n            }\n            lastBucketValue = thisBucketValue;\n        }\n        return factory.create(histo.getName(), newBuckets, histo);\n    }","id":70449,"modified_method":"@Override\n    public InternalAggregation reduce(InternalAggregation aggregation, ReduceContext reduceContext) {\n        InternalHistogram<? extends InternalHistogram.Bucket> histo = (InternalHistogram<? extends InternalHistogram.Bucket>) aggregation;\n        List<? extends InternalHistogram.Bucket> buckets = histo.getBuckets();\n        InternalHistogram.Factory<? extends InternalHistogram.Bucket> factory = histo.getFactory();\n\n        List newBuckets = new ArrayList<>();\n        Double lastBucketValue = null;\n        for (InternalHistogram.Bucket bucket : buckets) {\n            Double thisBucketValue = resolveBucketValue(histo, bucket);\n            if (lastBucketValue != null) {\n                double diff = thisBucketValue - lastBucketValue;\n\n                List<InternalAggregation> aggs = new ArrayList<>(Lists.transform(bucket.getAggregations().asList(), FUNCTION));\n                aggs.add(new InternalSimpleValue(name(), diff, formatter, new ArrayList<Reducer>(), metaData()));\n                InternalHistogram.Bucket newBucket = factory.createBucket(bucket.getKey(), bucket.getDocCount(), new InternalAggregations(\n                        aggs), bucket.getKeyed(), bucket.getFormatter());\n                newBuckets.add(newBucket);\n            } else {\n                newBuckets.add(bucket);\n            }\n            lastBucketValue = thisBucketValue;\n        }\n        return factory.create(histo.getName(), newBuckets, histo);\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void doWriteTo(StreamOutput out) throws IOException {\n        ValueFormatterStreams.writeOptional(formatter, out);\n    }","id":70450,"modified_method":"@Override\n    public void doWriteTo(StreamOutput out) throws IOException {\n        ValueFormatterStreams.writeOptional(formatter, out);\n        gapPolicy.writeTo(out);\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        protected Reducer createInternal(AggregationContext context, Aggregator parent, boolean collectsFromSingleBucket,\n                Map<String, Object> metaData) throws IOException {\n            return new DerivativeReducer(name, bucketsPaths, formatter, metaData);\n        }","id":70451,"modified_method":"@Override\n        protected Reducer createInternal(AggregationContext context, Aggregator parent, boolean collectsFromSingleBucket,\n                Map<String, Object> metaData) throws IOException {\n            return new DerivativeReducer(name, bucketsPaths, formatter, gapPolicy, metaData);\n        }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private Double resolveBucketValue(InternalHistogram<? extends InternalHistogram.Bucket> histo, InternalHistogram.Bucket bucket) {\n        try {\n            Object propertyValue = bucket.getProperty(histo.getName(), AggregationPath.parse(bucketsPaths()[0])\n                    .getPathElementsAsStringList());\n            if (propertyValue instanceof Number) {\n                return ((Number) propertyValue).doubleValue();\n            } else if (propertyValue instanceof InternalNumericMetricsAggregation.SingleValue) {\n                return ((InternalNumericMetricsAggregation.SingleValue) propertyValue).value();\n            } else {\n                throw new AggregationExecutionException(DerivativeParser.BUCKETS_PATH.getPreferredName()\n                        + \" must reference either a number value or a single value numeric metric aggregation\");\n            }\n        } catch (InvalidAggregationPathException e) {\n            return null;\n        }\n    }","id":70452,"modified_method":"private Double resolveBucketValue(InternalHistogram<? extends InternalHistogram.Bucket> histo, InternalHistogram.Bucket bucket) {\n        try {\n            Object propertyValue = bucket.getProperty(histo.getName(), AggregationPath.parse(bucketsPaths()[0])\n                    .getPathElementsAsStringList());\n            if (propertyValue == null) {\n                throw new AggregationExecutionException(DerivativeParser.BUCKETS_PATH.getPreferredName()\n                        + \" must reference either a number value or a single value numeric metric aggregation\");\n            } else {\n                double value;\n                if (propertyValue instanceof Number) {\n                    value = ((Number) propertyValue).doubleValue();\n                } else if (propertyValue instanceof InternalNumericMetricsAggregation.SingleValue) {\n                    value = ((InternalNumericMetricsAggregation.SingleValue) propertyValue).value();\n                } else {\n                    throw new AggregationExecutionException(DerivativeParser.BUCKETS_PATH.getPreferredName()\n                            + \" must reference either a number value or a single value numeric metric aggregation\");\n                }\n                if (Double.isInfinite(value) || Double.isNaN(value)) {\n                    switch (gapPolicy) {\n                    case INSERT_ZEROS:\n                        return 0.0;\n                    case IGNORE:\n                    default:\n                        return Double.NaN;\n                    }\n                } else {\n                    return value;\n                }\n            }\n        } catch (InvalidAggregationPathException e) {\n            return null;\n        }\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void doReadFrom(StreamInput in) throws IOException {\n        formatter = ValueFormatterStreams.readOptional(in);\n    }","id":70453,"modified_method":"@Override\n    public void doReadFrom(StreamInput in) throws IOException {\n        formatter = ValueFormatterStreams.readOptional(in);\n        gapPolicy = GapPolicy.readFrom(in);\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@AwaitsFix(bugUrl = \"waiting for derivative to gaps\")\n    @Test\n    public void singleValuedFieldWithGaps() throws Exception {\n        SearchResponse searchResponse = client()\n                .prepareSearch(\"empty_bucket_idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))) // NOCOMMITadd ignore gapPolicy\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(14l));\n\n        InternalHistogram deriv = searchResponse.getAggregations().get(\"histo\");\n        assertThat(deriv, Matchers.notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<Histogram.Bucket> buckets = (List<Bucket>) deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(5));\n\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(0l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(1l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1d));\n\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(4l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(3);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(9l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-1d));\n\n        bucket = buckets.get(4);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(10l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-1d));\n    }","id":70454,"modified_method":"@Test\n    public void singleValuedFieldWithGaps() throws Exception {\n        SearchResponse searchResponse = client()\n                .prepareSearch(\"empty_bucket_idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(1).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\")))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(14l));\n\n        InternalHistogram deriv = searchResponse.getAggregations().get(\"histo\");\n        assertThat(deriv, Matchers.notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<Histogram.Bucket> buckets = (List<Bucket>) deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(12));\n\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(0l));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, nullValue());\n\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(1l));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(2l));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1d));\n\n        bucket = buckets.get(3);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(3l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-2d));\n\n        bucket = buckets.get(4);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(4l));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(2d));\n\n        bucket = buckets.get(5);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(5l));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(6);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(6l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-2d));\n\n        bucket = buckets.get(7);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(7l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(8);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(8l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(9);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(9l));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(3d));\n\n        bucket = buckets.get(10);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(10l));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-1d));\n\n        bucket = buckets.get(11);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(11l));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-1d));\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@AwaitsFix(bugUrl = \"waiting for derivative to support insert_zeros gap policy\")\n    @Test\n    public void singleValuedFieldWithGaps_insertZeros() throws Exception {\n        SearchResponse searchResponse = client()\n                .prepareSearch(\"empty_bucket_idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(interval)\n                        .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\"))) // NOCOMMIT add insert_zeros gapPolicy\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(14l));\n\n        InternalHistogram deriv = searchResponse.getAggregations().get(\"histo\");\n        assertThat(deriv, Matchers.notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<Histogram.Bucket> buckets = (List<Bucket>) deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(11));\n\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(0l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(1l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1d));\n\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(2l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-2d));\n\n        bucket = buckets.get(3);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(3l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(2d));\n\n        bucket = buckets.get(4);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(4l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(5);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(5l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-2d));\n\n        bucket = buckets.get(6);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(6l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(7);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(7l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(8);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(8l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(3d));\n\n        bucket = buckets.get(9);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(9l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-1d));\n\n        bucket = buckets.get(10);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(10l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-1d));\n    }","id":70455,"modified_method":"@Test\n    public void singleValuedFieldWithGaps_insertZeros() throws Exception {\n        SearchResponse searchResponse = client()\n                .prepareSearch(\"empty_bucket_idx\")\n                .setQuery(matchAllQuery())\n                .addAggregation(\n                        histogram(\"histo\").field(SINGLE_VALUED_FIELD_NAME).interval(1).minDocCount(0)\n                                .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\").gapPolicy(GapPolicy.INSERT_ZEROS)))\n                .execute().actionGet();\n\n        assertThat(searchResponse.getHits().getTotalHits(), equalTo(14l));\n\n        InternalHistogram deriv = searchResponse.getAggregations().get(\"histo\");\n        assertThat(deriv, Matchers.notNullValue());\n        assertThat(deriv.getName(), equalTo(\"histo\"));\n        List<Histogram.Bucket> buckets = (List<Bucket>) deriv.getBuckets();\n        assertThat(buckets.size(), equalTo(12));\n\n        Histogram.Bucket bucket = buckets.get(0);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(0l));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, nullValue());\n\n        bucket = buckets.get(1);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(1l));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(2);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(2l));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(1d));\n\n        bucket = buckets.get(3);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(3l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-2d));\n\n        bucket = buckets.get(4);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(4l));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(2d));\n\n        bucket = buckets.get(5);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(5l));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(6);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(6l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-2d));\n\n        bucket = buckets.get(7);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(7l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(8);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(8l));\n        assertThat(bucket.getDocCount(), equalTo(0l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(0d));\n\n        bucket = buckets.get(9);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(9l));\n        assertThat(bucket.getDocCount(), equalTo(3l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(3d));\n\n        bucket = buckets.get(10);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(10l));\n        assertThat(bucket.getDocCount(), equalTo(2l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-1d));\n\n        bucket = buckets.get(11);\n        assertThat(bucket, notNullValue());\n        assertThat(((Number) bucket.getKey()).longValue(), equalTo(11l));\n        assertThat(bucket.getDocCount(), equalTo(1l));\n        docCountDeriv = bucket.getAggregations().get(\"deriv\");\n        assertThat(docCountDeriv, notNullValue());\n        assertThat(docCountDeriv.value(), equalTo(-1d));\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {\n        boolean hasValue = !Double.isInfinite(value);\n        builder.field(CommonFields.VALUE, hasValue ? value : null);\n        if (hasValue && valueFormatter != null) {\n            builder.field(CommonFields.VALUE_AS_STRING, valueFormatter.format(value));\n        }\n        return builder;\n    }","id":70456,"modified_method":"@Override\n    public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {\n        boolean hasValue = !(Double.isInfinite(value) || Double.isNaN(value));\n        builder.field(CommonFields.VALUE, hasValue ? value : null);\n        if (hasValue && valueFormatter != null) {\n            builder.field(CommonFields.VALUE_AS_STRING, valueFormatter.format(value));\n        }\n        return builder;\n    }","commit_id":"7c046d28bf4f077f9bbe0b5e9069c74b2319d212","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n  public boolean fillCompletionVariants(final CompletionParameters parameters, final CompletionResultSet result) {\n    if (parameters.getCompletionType() != CompletionType.BASIC) return true;\n\n    final PsiFile file = parameters.getOriginalFile();\n    final int startOffset = parameters.getOffset();\n    final PsiElement element = ApplicationManager.getApplication().runReadAction(new Computable<PsiElement>() {\n      public PsiElement compute() {\n        return file.findElementAt(startOffset - 1);\n      }\n    });\n    final PsiElement insertedElement = parameters.getPosition();\n\n    Set<CompletionVariant> toAdd = new HashSet<CompletionVariant>();\n    final CompletionData data = CompletionUtil.getCompletionDataByElement(file);\n    data.addKeywordVariants(toAdd, insertedElement, file);\n    for (CompletionVariant completionVariant : toAdd) {\n      if (completionVariant.hasKeywordCompletions()) {\n        return true;\n      }\n    }\n\n    final PsiReference reference = ApplicationManager.getApplication().runReadAction(new Computable<PsiReference>() {\n      public PsiReference compute() {\n        return file.findReferenceAt(startOffset);\n      }\n    });\n    if (reference == null) {\n      ASTNode textContainer = element != null ? element.getNode() : null;\n      while (textContainer != null) {\n        final IElementType elementType = textContainer.getElementType();\n        if (LanguageWordCompletion.INSTANCE.isEnabledIn(elementType) || elementType == PlainTextTokenTypes.PLAIN_TEXT) {\n          final String prefix = CompletionUtil.findJavaIdentifierPrefix(insertedElement, startOffset);\n          final CompletionResultSet resultSet = result.withPrefixMatcher(prefix);\n          for (final String word : AllWordsGetter.getAllWords(insertedElement, startOffset)) {\n            resultSet.addElement(new LookupItem<String>(word, word).setTailType(TailType.SPACE));\n          }\n        }\n        textContainer = textContainer.getTreeParent();\n      }\n    }\n\n    return true;\n  }","id":70457,"modified_method":"@Override\n  public boolean fillCompletionVariants(final CompletionParameters parameters, final CompletionResultSet result) {\n    if (parameters.getCompletionType() != CompletionType.BASIC) return true;\n\n    final PsiFile file = parameters.getOriginalFile();\n    final int startOffset = parameters.getOffset();\n    final PsiElement element = ApplicationManager.getApplication().runReadAction(new Computable<PsiElement>() {\n      public PsiElement compute() {\n        return file.findElementAt(startOffset - 1);\n      }\n    });\n    final PsiElement insertedElement = parameters.getPosition();\n\n    final CompletionData data = CompletionUtil.getCompletionDataByElement(file);\n    if (!(data instanceof SyntaxTableCompletionData)) {\n      Set<CompletionVariant> toAdd = new HashSet<CompletionVariant>();\n      data.addKeywordVariants(toAdd, insertedElement, file);\n      for (CompletionVariant completionVariant : toAdd) {\n        if (completionVariant.hasKeywordCompletions()) {\n          return true;\n        }\n      }\n    }\n\n    final PsiReference reference = ApplicationManager.getApplication().runReadAction(new Computable<PsiReference>() {\n      public PsiReference compute() {\n        return file.findReferenceAt(startOffset);\n      }\n    });\n    if (reference == null) {\n      ASTNode textContainer = element != null ? element.getNode() : null;\n      while (textContainer != null) {\n        final IElementType elementType = textContainer.getElementType();\n        if (LanguageWordCompletion.INSTANCE.isEnabledIn(elementType) || elementType == PlainTextTokenTypes.PLAIN_TEXT) {\n          final String prefix = CompletionUtil.findJavaIdentifierPrefix(insertedElement, startOffset);\n          final CompletionResultSet resultSet = result.withPrefixMatcher(prefix);\n          for (final String word : AllWordsGetter.getAllWords(insertedElement, startOffset)) {\n            resultSet.addElement(new LookupItem<String>(word, word).setTailType(TailType.SPACE));\n          }\n        }\n        textContainer = textContainer.getTreeParent();\n      }\n    }\n\n    return true;\n  }","commit_id":"eb44c78cbb9a3976160d83f43f0962558912fdc8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected LookupData getLookupData(final CompletionContext _context) {\n    final PsiFile file = _context.file;\n    final PsiManager manager = file.getManager();\n    final PsiElement lastElement = file.findElementAt(_context.startOffset - 1);\n\n    final Pair<CompletionContext, PsiElement> insertedInfo =\n      ApplicationManager.getApplication().runWriteAction(new Computable<Pair<CompletionContext, PsiElement>>() {\n        public Pair<CompletionContext, PsiElement> compute() {\n          return insertDummyIdentifier(_context);\n        }\n      });\n\n    PsiElement insertedElement = insertedInfo.getSecond();\n    final CompletionContext context = insertedInfo.getFirst();\n\n    CompletionData completionData = getCompletionData(context, lastElement);\n\n    context.prefix = findPrefix(insertedElement, context.startOffset, CompletionUtil.DUMMY_IDENTIFIER, completionData);\n    if (completionData == null) {\n      // some completion data may depend on prefix\n      completionData = getCompletionData(context, lastElement);\n    }\n\n    if (completionData == null) return new LookupData(new LookupItem[0], context.prefix);\n\n    final Set<LookupItem> lookupSet = new LinkedHashSet<LookupItem>();\n    complete(context, insertedElement, completionData, lookupSet);\n    insertedElement.putUserData(CompletionUtil.COMPLETION_PREFIX, context.prefix);\n    final Set<CompletionVariant> keywordVariants = new HashSet<CompletionVariant>();\n    completionData.addKeywordVariants(keywordVariants, context, insertedElement);\n    CompletionData.completeKeywordsBySet(lookupSet, keywordVariants, context, insertedElement);\n    CompletionUtil.highlightMembersOfContainer(lookupSet);\n\n    final LookupItem[] items = lookupSet.toArray(new LookupItem[lookupSet.size()]);\n    final LookupData data = new LookupData(items, context.prefix);\n    if (myPreferencePolicy == null) {\n      myPreferencePolicy = new CompletionPreferencePolicy(manager, items, null, context.prefix);\n    }\n    data.itemPreferencePolicy = myPreferencePolicy;\n    myPreferencePolicy = null;\n    return data;\n  }","id":70458,"modified_method":"protected LookupData getLookupData(final CompletionContext _context) {\n    final PsiFile file = _context.file;\n    final PsiManager manager = file.getManager();\n    final PsiElement lastElement = file.findElementAt(_context.startOffset - 1);\n\n    final Pair<CompletionContext, PsiElement> insertedInfo =\n      ApplicationManager.getApplication().runWriteAction(new Computable<Pair<CompletionContext, PsiElement>>() {\n        public Pair<CompletionContext, PsiElement> compute() {\n          return insertDummyIdentifier(_context);\n        }\n      });\n\n    PsiElement insertedElement = insertedInfo.getSecond();\n    final CompletionContext context = insertedInfo.getFirst();\n\n    CompletionData completionData = getCompletionData(context, lastElement);\n\n    context.prefix = findPrefix(insertedElement, context.startOffset, CompletionUtil.DUMMY_IDENTIFIER, completionData);\n    if (completionData == null) {\n      // some completion data may depend on prefix\n      completionData = getCompletionData(context, lastElement);\n    }\n\n    if (completionData == null) return new LookupData(new LookupItem[0], context.prefix);\n\n    final Set<LookupItem> lookupSet = new LinkedHashSet<LookupItem>();\n    complete(context, insertedElement, completionData, lookupSet);\n    insertedElement.putUserData(CompletionUtil.COMPLETION_PREFIX, context.prefix);\n    if (!isAntFile(file)) {\n      final Set<CompletionVariant> keywordVariants = new HashSet<CompletionVariant>();\n      completionData.addKeywordVariants(keywordVariants, context, insertedElement);\n      CompletionData.completeKeywordsBySet(lookupSet, keywordVariants, context, insertedElement);\n    }\n    CompletionUtil.highlightMembersOfContainer(lookupSet);\n\n    final LookupItem[] items = lookupSet.toArray(new LookupItem[lookupSet.size()]);\n    final LookupData data = new LookupData(items, context.prefix);\n    if (myPreferencePolicy == null) {\n      myPreferencePolicy = new CompletionPreferencePolicy(manager, items, null, context.prefix);\n    }\n    data.itemPreferencePolicy = myPreferencePolicy;\n    myPreferencePolicy = null;\n    return data;\n  }","commit_id":"634add0571fe8984396bd896e7fc8ee18dd998e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void complete(final CompletionContext context,\n                        final PsiElement lastElement,\n                        final CompletionData completionData,\n                        final Set<LookupItem> lookupSet) {\n    if (lastElement == null) return;\n    if (context.file instanceof XmlFileImpl) {\n      final XmlFileImpl xmlFile = (XmlFileImpl)context.file;\n      final XmlDocument document = xmlFile.getDocument();\n      if (document != null) {\n        final XmlTag tag = document.getRootTag();\n        if (tag != null && \"project\".equals(tag.getName()) && tag.getContext()instanceof XmlDocument &&\n            tag.getAttributeValue(\"default\") != null) {\n          final PsiReference ref = xmlFile.findReferenceAt(context.offset);\n          if (ref != null) {\n            completionData.completeReference(ref, lookupSet, context, lastElement);\n            return;\n          }\n        }\n      }\n    }\n    final PsiReference ref = lastElement.getContainingFile().findReferenceAt(context.offset);\n    if (ref != null) {\n      completionData.completeReference(ref, lookupSet, context, lastElement);\n      return;\n    }\n\n    if (lastElement instanceof PsiIdentifier) {\n      final PsiElement parent = lastElement.getParent();\n      if (parent instanceof PsiClass) {\n        final PsiClass psiClass = (PsiClass)parent;\n        if (lastElement.equals(psiClass.getNameIdentifier())) {\n          myPreferencePolicy = completionData.completeClassName(lookupSet, context, psiClass);\n          return;\n        }\n      }\n\n      if (parent instanceof PsiLocalVariable || parent instanceof PsiParameter) {\n        final PsiVariable variable = (PsiVariable)parent;\n        if (lastElement.equals(variable.getNameIdentifier())) {\n          myPreferencePolicy = completionData.completeLocalVariableName(lookupSet, context, variable);\n          return;\n        }\n      }\n\n      if (parent instanceof PsiField) {\n        final PsiVariable variable = (PsiVariable)parent;\n        if (lastElement.equals(variable.getNameIdentifier())) {\n          myPreferencePolicy = completionData.completeFieldName(lookupSet, context, variable);\n          if (parent.getLastChild()instanceof PsiErrorElement) return;\n          myPreferencePolicy = completionData.completeMethodName(lookupSet, context, variable);\n        }\n      }\n\n      if (parent instanceof PsiMethod) {\n        final PsiMethod psiMethod = (PsiMethod)parent;\n        if (lastElement.equals(psiMethod.getNameIdentifier())) {\n          myPreferencePolicy = completionData.completeMethodName(lookupSet, context, psiMethod);\n        }\n      }\n    }\n  }","id":70459,"modified_method":"private void complete(final CompletionContext context,\n                        final PsiElement lastElement,\n                        final CompletionData completionData,\n                        final Set<LookupItem> lookupSet) {\n    if (lastElement == null) return;\n    if (isAntFile(context.file)) {\n      final PsiReference ref = context.file.findReferenceAt(context.offset);\n      if (ref != null) {\n        completionData.completeReference(ref, lookupSet, context, lastElement);\n        return;\n      }\n    }\n    final PsiReference ref = lastElement.getContainingFile().findReferenceAt(context.offset);\n    if (ref != null) {\n      completionData.completeReference(ref, lookupSet, context, lastElement);\n      return;\n    }\n\n    if (lastElement instanceof PsiIdentifier) {\n      final PsiElement parent = lastElement.getParent();\n      if (parent instanceof PsiClass) {\n        final PsiClass psiClass = (PsiClass)parent;\n        if (lastElement.equals(psiClass.getNameIdentifier())) {\n          myPreferencePolicy = completionData.completeClassName(lookupSet, context, psiClass);\n          return;\n        }\n      }\n\n      if (parent instanceof PsiLocalVariable || parent instanceof PsiParameter) {\n        final PsiVariable variable = (PsiVariable)parent;\n        if (lastElement.equals(variable.getNameIdentifier())) {\n          myPreferencePolicy = completionData.completeLocalVariableName(lookupSet, context, variable);\n          return;\n        }\n      }\n\n      if (parent instanceof PsiField) {\n        final PsiVariable variable = (PsiVariable)parent;\n        if (lastElement.equals(variable.getNameIdentifier())) {\n          myPreferencePolicy = completionData.completeFieldName(lookupSet, context, variable);\n          if (parent.getLastChild()instanceof PsiErrorElement) return;\n          myPreferencePolicy = completionData.completeMethodName(lookupSet, context, variable);\n        }\n      }\n\n      if (parent instanceof PsiMethod) {\n        final PsiMethod psiMethod = (PsiMethod)parent;\n        if (lastElement.equals(psiMethod.getNameIdentifier())) {\n          myPreferencePolicy = completionData.completeMethodName(lookupSet, context, psiMethod);\n        }\n      }\n    }\n  }","commit_id":"634add0571fe8984396bd896e7fc8ee18dd998e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected LookupData getLookupData(final CompletionContext _context) {\n    final PsiFile file = _context.file;\n    final PsiManager manager = file.getManager();\n    final PsiElement lastElement = file.findElementAt(_context.startOffset - 1);\n\n    final Pair<CompletionContext, PsiElement> insertedInfo =\n      ApplicationManager.getApplication().runWriteAction(new Computable<Pair<CompletionContext, PsiElement>>() {\n        public Pair<CompletionContext, PsiElement> compute() {\n          return insertDummyIdentifier(_context);\n        }\n      });\n\n    PsiElement insertedElement = insertedInfo.getSecond();\n    final CompletionContext context = insertedInfo.getFirst();\n\n    CompletionData completionData = getCompletionData(context, lastElement);\n\n    context.setPrefix(findPrefix(insertedElement, context.startOffset, CompletionUtil.DUMMY_IDENTIFIER, completionData));\n    if (completionData == null) {\n      // some completion data may depend on prefix\n      completionData = getCompletionData(context, lastElement);\n    }\n\n    if (completionData == null) return new LookupData(new LookupItem[0], context.getPrefix());\n\n    final Set<LookupItem> lookupSet = new LinkedHashSet<LookupItem>();\n    complete(context, insertedElement, completionData, lookupSet);\n    final Set<CompletionVariant> keywordVariants = new HashSet<CompletionVariant>();\n    completionData.addKeywordVariants(keywordVariants, context, insertedElement);\n    CompletionData.completeKeywordsBySet(lookupSet, keywordVariants, context, insertedElement);\n    CompletionUtil.highlightMembersOfContainer(lookupSet);\n\n    final LookupItem[] items = lookupSet.toArray(new LookupItem[lookupSet.size()]);\n    final LookupData data = new LookupData(items, context.getPrefix());\n    if (myPreferencePolicy == null) {\n      myPreferencePolicy = new CompletionPreferencePolicy(manager, items, null, context.getPrefix());\n    }\n    data.itemPreferencePolicy = myPreferencePolicy;\n    myPreferencePolicy = null;\n    return data;\n  }","id":70460,"modified_method":"protected LookupData getLookupData(final CompletionContext _context) {\n    final PsiFile file = _context.file;\n    final PsiManager manager = file.getManager();\n    final PsiElement lastElement = file.findElementAt(_context.startOffset - 1);\n\n    final Pair<CompletionContext, PsiElement> insertedInfo =\n      ApplicationManager.getApplication().runWriteAction(new Computable<Pair<CompletionContext, PsiElement>>() {\n        public Pair<CompletionContext, PsiElement> compute() {\n          return insertDummyIdentifier(_context);\n        }\n      });\n\n    PsiElement insertedElement = insertedInfo.getSecond();\n    final CompletionContext context = insertedInfo.getFirst();\n\n    CompletionData completionData = getCompletionData(context, lastElement);\n\n    context.setPrefix(findPrefix(insertedElement, context.startOffset, CompletionUtil.DUMMY_IDENTIFIER, completionData));\n    if (completionData == null) {\n      // some completion data may depend on prefix\n      completionData = getCompletionData(context, lastElement);\n    }\n\n    if (completionData == null) return new LookupData(new LookupItem[0], context.getPrefix());\n\n    final Set<LookupItem> lookupSet = new LinkedHashSet<LookupItem>();\n    complete(context, insertedElement, completionData, lookupSet);\n    if (lookupSet.size() == 0 || !CodeInsightUtil.isAntFile(file)) {\n      final Set<CompletionVariant> keywordVariants = new HashSet<CompletionVariant>();\n      completionData.addKeywordVariants(keywordVariants, context, insertedElement);\n      CompletionData.completeKeywordsBySet(lookupSet, keywordVariants, context, insertedElement);\n      CompletionUtil.highlightMembersOfContainer(lookupSet);\n    }\n\n    final LookupItem[] items = lookupSet.toArray(new LookupItem[lookupSet.size()]);\n    final LookupData data = new LookupData(items, context.getPrefix());\n    if (myPreferencePolicy == null) {\n      myPreferencePolicy = new CompletionPreferencePolicy(manager, items, null, context.getPrefix());\n    }\n    data.itemPreferencePolicy = myPreferencePolicy;\n    myPreferencePolicy = null;\n    return data;\n  }","commit_id":"ad8ba68b8451bc3cbee9763861a983b0b2fa6a7d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Clicks on the menu item with the given label.\n     * \n     * @param label the label of the menu item to click\n     */\n    private void clickMenuWithLabel(String label)\n    {\n        WebElement menu =\n            container.findElement(By.xpath(\"//td[contains(@class, 'gwt-MenuItem') and . = '\" + label + \"']\"));\n        menu.click();\n    }","id":70461,"modified_method":"/**\n     * Clicks on the menu item with the given label.\n     * \n     * @param label the label of the menu item to click\n     */\n    private void clickMenuWithLabel(String label)\n    {\n        container.findElement(By.xpath(String.format(MENU_ITEM_XPATH, label))).click();\n    }","commit_id":"7ea7b8591b3317a36a8f82e63e8f44077ce824da","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Clicks on the \"Attached Image...\" menu.\n     * \n     * @return the pane used to select an attached image to insert\n     */\n    public AttachedImageSelectPane clickInsertAttachedImageMenu()\n    {\n        WebElement insertAttachedImageMenu =\n            container.findElement(By.xpath(\"//td[contains(@class, 'gwt-MenuItem') and . = 'Attached Image...']\"));\n        if (!isMenuEnabled(insertAttachedImageMenu)) {\n            return null;\n        }\n        insertAttachedImageMenu.click();\n        return new AttachedImageSelectPane().waitToLoad();\n    }","id":70462,"modified_method":"/**\n     * Clicks on the \"Attached Image...\" menu.\n     * \n     * @return the pane used to select an attached image to insert\n     */\n    public AttachedImageSelectPane clickInsertAttachedImageMenu()\n    {\n        String xpath = String.format(MENU_ITEM_XPATH, \"Attached Image...\");\n        WebElement insertAttachedImageMenu = container.findElement(By.xpath(xpath));\n        if (!isMenuEnabled(insertAttachedImageMenu)) {\n            return null;\n        }\n        insertAttachedImageMenu.click();\n        return new AttachedImageSelectPane().waitToLoad();\n    }","commit_id":"7ea7b8591b3317a36a8f82e63e8f44077ce824da","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"void paint(Graphics g) {\n    if (myIsHidden) return;\n    Color borderColor = getBorderColor();\n    if (!myIsFolded) {\n      int xs[] = {-HALF_WIDTH, -HALF_WIDTH, 0, HALF_WIDTH, HALF_WIDTH};\n      int ys[] = {myY1, myY1 + CANT_HEIGHT, myY1 + HEIGHT, myY1 + CANT_HEIGHT, myY1};\n\n      g.setColor(myBackgroundColor);\n      g.fillPolygon(xs, ys, xs.length);\n      g.setColor(borderColor);\n      g.drawPolygon(xs, ys, xs.length);\n\n      for (int i = 0; i < xs.length; i++) {\n        ys[i] = myY2 - (ys[i] - myY1);\n      }\n\n      g.setColor(myBackgroundColor);\n      g.fillPolygon(xs, ys, xs.length);\n      g.setColor(borderColor);\n      g.drawPolygon(xs, ys, xs.length);\n\n      g.setColor(borderColor);\n      g.drawLine(-HALF_WIDTH / 2, myY1 + HALF_WIDTH, HALF_WIDTH / 2, myY1 + HALF_WIDTH);\n      g.drawLine(-HALF_WIDTH / 2, myY2 - HALF_WIDTH, HALF_WIDTH / 2, myY2 - HALF_WIDTH);\n\n    } else {\n      g.setColor(myBackgroundColor);\n      g.fillRect(-HALF_WIDTH, (myY1 + myY2) / 2 - HALF_WIDTH, HALF_WIDTH * 2, HALF_WIDTH * 2);\n      g.setColor(borderColor);\n      g.drawRect(-HALF_WIDTH, (myY1 + myY2) / 2 - HALF_WIDTH, HALF_WIDTH * 2, HALF_WIDTH * 2);\n\n      g.setColor(Color.black);\n      g.drawLine(-HALF_WIDTH / 2, (myY1 + myY2) / 2, HALF_WIDTH / 2, (myY1 + myY2) / 2);\n      g.drawLine(0, (myY1 + myY2) / 2 + HALF_WIDTH / 2, 0, (myY1 + myY2) / 2 - HALF_WIDTH / 2);\n    }\n  }","id":70463,"modified_method":"void paint(Graphics g) {\n    if (myIsHidden) return;\n    Color borderColor = getBorderColor();\n    if (!myIsFolded) {\n      int xs[] = {-HALF_WIDTH, -HALF_WIDTH, 0, HALF_WIDTH, HALF_WIDTH};\n      int ys[] = {myY1, myY1 + CANT_HEIGHT, myY1 + HEIGHT, myY1 + CANT_HEIGHT, myY1};\n\n      if (myMouseOver) {\n        g.setColor(myBackgroundColor);\n        g.fillPolygon(xs, ys, xs.length);\n      }\n      g.setColor(borderColor);\n      g.drawPolygon(xs, ys, xs.length);\n\n      for (int i = 0; i < xs.length; i++) {\n        ys[i] = myY2 - (ys[i] - myY1);\n      }\n\n      if (myMouseOver) {\n        g.setColor(myBackgroundColor);\n        g.fillPolygon(xs, ys, xs.length);\n      }\n      g.setColor(borderColor);\n      g.drawPolygon(xs, ys, xs.length);\n\n      g.setColor(borderColor);\n      g.drawLine(-HALF_WIDTH / 2, myY1 + HALF_WIDTH, HALF_WIDTH / 2, myY1 + HALF_WIDTH);\n      g.drawLine(-HALF_WIDTH / 2, myY2 - HALF_WIDTH, HALF_WIDTH / 2, myY2 - HALF_WIDTH);\n\n    } else {\n      if (myMouseOver) {\n        g.setColor(myBackgroundColor);\n        g.fillRect(-HALF_WIDTH, (myY1 + myY2) / 2 - HALF_WIDTH, HALF_WIDTH * 2, HALF_WIDTH * 2);\n      }\n      \n      g.setColor(borderColor);\n      g.drawRect(-HALF_WIDTH, (myY1 + myY2) / 2 - HALF_WIDTH, HALF_WIDTH * 2, HALF_WIDTH * 2);\n\n      g.setColor(Color.black);\n      g.drawLine(-HALF_WIDTH / 2, (myY1 + myY2) / 2, HALF_WIDTH / 2, (myY1 + myY2) / 2);\n      g.drawLine(0, (myY1 + myY2) / 2 + HALF_WIDTH / 2, 0, (myY1 + myY2) / 2 - HALF_WIDTH / 2);\n    }\n  }","commit_id":"f761420c183683d5c7464698925df292a85eeae7","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean ok() {\n        Main.pref.put(\"marker.makeautomarkers\", makeAutoMarkers.isSelected());\n        Main.pref.put(\"draw.rawgps.lines\", drawRawGpsLinesAll.isSelected());\n        Main.pref.put(\"draw.rawgps.lines.localfiles\", drawRawGpsLinesLocal.isSelected());\n        Main.pref.put(\"draw.rawgps.max-line-length\", drawRawGpsMaxLineLength.getText());\n        Main.pref.put(\"draw.rawgps.max-line-length.local\", drawRawGpsMaxLineLengthLocal.getText());\n        Main.pref.put(\"draw.rawgps.lines.force\", forceRawGpsLines.isSelected());\n        Main.pref.put(\"draw.rawgps.direction\", drawGpsArrows.isSelected());\n        Main.pref.put(\"draw.rawgps.alternatedirection\", drawGpsArrowsFast.isSelected());\n        Main.pref.put(\"draw.rawgps.min-arrow-distance\", drawGpsArrowsMinDist.getText());\n        if(colorTypeVelocity.isSelected()) {\n            Main.pref.putInteger(\"draw.rawgps.colors\", 1);\n        } else if(colorTypeDilution.isSelected()) {\n            Main.pref.putInteger(\"draw.rawgps.colors\", 2);\n        } else {\n            Main.pref.putInteger(\"draw.rawgps.colors\", 0);\n        }\n        int ccti=colorTypeVelocityTune.getSelectedIndex();\n        Main.pref.putInteger(\"draw.rawgps.colorTracksTune\", ccti==2 ? 10 : (ccti==1 ? 20 : 45));\n        Main.pref.put(\"draw.rawgps.hdopcircle\", hdopCircleGpsPoints.isSelected());\n        Main.pref.put(\"draw.rawgps.large\", largeGpsPoints.isSelected());\n        Main.pref.put(\"draw.segment.direction\", directionHint.isSelected());\n        Main.pref.put(\"draw.segment.relevant_directions_only\", interestingDirections.isSelected());\n        Main.pref.put(\"draw.segment.head_only\", headArrow.isSelected());\n        Main.pref.put(\"draw.segment.order_number\", segmentOrderNumber.isSelected());\n        Main.pref.put(\"draw.data.downloaded_area\", sourceBounds.isSelected());\n        Main.pref.put(\"draw.data.inactive_color\", inactive.isSelected());\n        Main.pref.put(\"mappaint.use-antialiasing\", useAntialiasing.isSelected());\n        int vn = Main.pref.getInteger(\"mappaint.node.virtual-size\", 8);\n        if (virtualNodes.isSelected()) {\n            if (vn < 1) {\n                vn = 8;\n            }\n        }\n        else {\n            vn = 0;\n        }\n        Main.pref.putInteger(\"mappaint.node.virtual-size\", vn);\n        Main.pref.putInteger(\"draw.rawgps.layer.wpt\", waypointLabel.getSelectedIndex());\n        return false;\n    }","id":70464,"modified_method":"public boolean ok() {\n        Main.pref.put(\"marker.makeautomarkers\", makeAutoMarkers.isSelected());\n        Main.pref.put(\"draw.data.area_outline_only\", outlineOnly.isSelected());\n        Main.pref.put(\"draw.rawgps.lines\", drawRawGpsLinesAll.isSelected());\n        Main.pref.put(\"draw.rawgps.lines.localfiles\", drawRawGpsLinesLocal.isSelected());\n        Main.pref.put(\"draw.rawgps.max-line-length\", drawRawGpsMaxLineLength.getText());\n        Main.pref.put(\"draw.rawgps.max-line-length.local\", drawRawGpsMaxLineLengthLocal.getText());\n        Main.pref.put(\"draw.rawgps.lines.force\", forceRawGpsLines.isSelected());\n        Main.pref.put(\"draw.rawgps.direction\", drawGpsArrows.isSelected());\n        Main.pref.put(\"draw.rawgps.alternatedirection\", drawGpsArrowsFast.isSelected());\n        Main.pref.put(\"draw.rawgps.min-arrow-distance\", drawGpsArrowsMinDist.getText());\n        if(colorTypeVelocity.isSelected()) {\n            Main.pref.putInteger(\"draw.rawgps.colors\", 1);\n        } else if(colorTypeDilution.isSelected()) {\n            Main.pref.putInteger(\"draw.rawgps.colors\", 2);\n        } else {\n            Main.pref.putInteger(\"draw.rawgps.colors\", 0);\n        }\n        int ccti=colorTypeVelocityTune.getSelectedIndex();\n        Main.pref.putInteger(\"draw.rawgps.colorTracksTune\", ccti==2 ? 10 : (ccti==1 ? 20 : 45));\n        Main.pref.put(\"draw.rawgps.hdopcircle\", hdopCircleGpsPoints.isSelected());\n        Main.pref.put(\"draw.rawgps.large\", largeGpsPoints.isSelected());\n        Main.pref.put(\"draw.segment.direction\", directionHint.isSelected());\n        Main.pref.put(\"draw.segment.relevant_directions_only\", interestingDirections.isSelected());\n        Main.pref.put(\"draw.segment.head_only\", headArrow.isSelected());\n        Main.pref.put(\"draw.segment.order_number\", segmentOrderNumber.isSelected());\n        Main.pref.put(\"draw.data.downloaded_area\", sourceBounds.isSelected());\n        Main.pref.put(\"draw.data.inactive_color\", inactive.isSelected());\n        Main.pref.put(\"mappaint.use-antialiasing\", useAntialiasing.isSelected());\n        int vn = Main.pref.getInteger(\"mappaint.node.virtual-size\", 8);\n        if (virtualNodes.isSelected()) {\n            if (vn < 1) {\n                vn = 8;\n            }\n        }\n        else {\n            vn = 0;\n        }\n        Main.pref.putInteger(\"mappaint.node.virtual-size\", vn);\n        Main.pref.putInteger(\"draw.rawgps.layer.wpt\", waypointLabel.getSelectedIndex());\n        return false;\n    }","commit_id":"e589cb3ecd4be7c718ce7198720047cd112dfe57","url":"https://github.com/openstreetmap/josm"},{"original_method":"public void addGui(PreferenceTabbedPane gui) {\n        gui.display.setPreferredSize(new Dimension(400,600));\n        JPanel panel = new JPanel(new GridBagLayout());\n        panel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));\n\n        // makeAutoMarkers\n        makeAutoMarkers.setSelected(Main.pref.getBoolean(\"marker.makeautomarkers\", true));\n        makeAutoMarkers.setToolTipText(tr(\"Automatically make a marker layer from any waypoints when opening a GPX layer.\"));\n        panel.add(makeAutoMarkers, GBC.eol().insets(20,0,0,5));\n\n        // drawRawGpsLines\n        ButtonGroup gpsLinesGroup = new ButtonGroup();\n        gpsLinesGroup.add(drawRawGpsLinesNone);\n        gpsLinesGroup.add(drawRawGpsLinesLocal);\n        gpsLinesGroup.add(drawRawGpsLinesAll);\n\n\n        /* ensure that default is in data base */\n        Boolean lf = Main.pref.getBoolean(\"draw.rawgps.lines.localfiles\", false);\n        if(Main.pref.getBoolean(\"draw.rawgps.lines\", true)) {\n            drawRawGpsLinesAll.setSelected(true);\n        } else if (lf) {\n            drawRawGpsLinesLocal.setSelected(true);\n        } else {\n            drawRawGpsLinesNone.setSelected(true);\n        }\n\n        panel.add(new JLabel(tr(\"Draw lines between raw GPS points\")), GBC.eol().insets(20,0,0,0));\n        panel.add(drawRawGpsLinesNone, GBC.eol().insets(40,0,0,0));\n        panel.add(drawRawGpsLinesLocal, GBC.eol().insets(40,0,0,0));\n        panel.add(drawRawGpsLinesAll, GBC.eol().insets(40,0,0,0));\n\n        drawRawGpsLinesActionListener = new ActionListener(){\n            public void actionPerformed(ActionEvent e) {\n                forceRawGpsLines.setEnabled(!drawRawGpsLinesNone.isSelected());\n                drawRawGpsMaxLineLength.setEnabled(!(drawRawGpsLinesNone.isSelected() || drawRawGpsLinesLocal.isSelected()));\n                drawRawGpsMaxLineLengthLocal.setEnabled(!drawRawGpsLinesNone.isSelected());\n                drawGpsArrows.setEnabled(!drawRawGpsLinesNone.isSelected() );\n                drawGpsArrowsFast.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n                drawGpsArrowsMinDist.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n            }\n        };\n\n        drawRawGpsLinesNone.addActionListener(drawRawGpsLinesActionListener);\n        drawRawGpsLinesLocal.addActionListener(drawRawGpsLinesActionListener);\n        drawRawGpsLinesAll.addActionListener(drawRawGpsLinesActionListener);\n\n        // drawRawGpsMaxLineLengthLocal\n        drawRawGpsMaxLineLengthLocal.setText(Integer.toString(Main.pref.getInteger(\"draw.rawgps.max-line-length.local\", -1)));\n        drawRawGpsMaxLineLengthLocal.setToolTipText(tr(\"Maximum length (in meters) to draw lines for local files. Set to ''-1'' to draw all lines.\"));\n        drawRawGpsMaxLineLengthLocal.setEnabled(!drawRawGpsLinesNone.isSelected());\n        panel.add(new JLabel(tr(\"Maximum length for local files (meters)\")), GBC.std().insets(40,0,0,0));\n        panel.add(drawRawGpsMaxLineLengthLocal, GBC.eol().fill(GBC.HORIZONTAL).insets(5,0,0,5));\n\n        // drawRawGpsMaxLineLength\n        drawRawGpsMaxLineLength.setText(Integer.toString(Main.pref.getInteger(\"draw.rawgps.max-line-length\", 200)));\n        drawRawGpsMaxLineLength.setToolTipText(tr(\"Maximum length (in meters) to draw lines. Set to ''-1'' to draw all lines.\"));\n        drawRawGpsMaxLineLength.setEnabled(!drawRawGpsLinesNone.isSelected());\n        panel.add(new JLabel(tr(\"Maximum length (meters)\")), GBC.std().insets(40,0,0,0));\n        panel.add(drawRawGpsMaxLineLength, GBC.eol().fill(GBC.HORIZONTAL).insets(5,0,0,5));\n\n        // forceRawGpsLines\n        forceRawGpsLines.setToolTipText(tr(\"Force drawing of lines if the imported data contain no line information.\"));\n        forceRawGpsLines.setSelected(Main.pref.getBoolean(\"draw.rawgps.lines.force\", false));\n        forceRawGpsLines.setEnabled(!drawRawGpsLinesNone.isSelected());\n        panel.add(forceRawGpsLines, GBC.eop().insets(40,0,0,0));\n\n        // drawGpsArrows\n        drawGpsArrows.addActionListener(new ActionListener(){\n            public void actionPerformed(ActionEvent e) {\n                drawGpsArrowsFast.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n                drawGpsArrowsMinDist.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n            }\n        });\n        drawGpsArrows.setToolTipText(tr(\"Draw direction arrows for lines, connecting GPS points.\"));\n        drawGpsArrows.setSelected(Main.pref.getBoolean(\"draw.rawgps.direction\", false));\n        drawGpsArrows.setEnabled(!drawRawGpsLinesNone.isSelected());\n        panel.add(drawGpsArrows, GBC.eop().insets(40,0,0,0));\n\n        // drawGpsArrowsFast\n        drawGpsArrowsFast.setToolTipText(tr(\"Draw the direction arrows using table lookups instead of complex math.\"));\n        drawGpsArrowsFast.setSelected(Main.pref.getBoolean(\"draw.rawgps.alternatedirection\", false));\n        drawGpsArrowsFast.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n        panel.add(drawGpsArrowsFast, GBC.eop().insets(60,0,0,0));\n\n        // drawGpsArrowsMinDist\n        drawGpsArrowsMinDist.setToolTipText(tr(\"Do not draw arrows if they are not at least this distance away from the last one.\"));\n        drawGpsArrowsMinDist.setText(Integer.toString(Main.pref.getInteger(\"draw.rawgps.min-arrow-distance\", 0)));\n        drawGpsArrowsMinDist.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n        panel.add(new JLabel(tr(\"Minimum distance (pixels)\")), GBC.std().insets(60,0,0,0));\n        panel.add(drawGpsArrowsMinDist, GBC.eol().fill(GBC.HORIZONTAL).insets(5,0,0,5));\n\n        // hdopCircleGpsPoints\n        hdopCircleGpsPoints.setSelected(Main.pref.getBoolean(\"draw.rawgps.hdopcircle\", true));\n        hdopCircleGpsPoints.setToolTipText(tr(\"Draw a circle form HDOP value.\"));\n        panel.add(hdopCircleGpsPoints, GBC.eop().insets(20,0,0,0));\n\n        // largeGpsPoints\n        largeGpsPoints.setSelected(Main.pref.getBoolean(\"draw.rawgps.large\", false));\n        largeGpsPoints.setToolTipText(tr(\"Draw larger dots for the GPS points.\"));\n        panel.add(largeGpsPoints, GBC.eop().insets(20,0,0,0));\n\n        // colorTracks\n        colorGroup = new ButtonGroup();\n        colorGroup.add(colorTypeNone);\n        colorGroup.add(colorTypeVelocity);\n        colorGroup.add(colorTypeDilution);\n\n        colorTypeVelocity.addChangeListener(new ChangeListener(){\n            public void stateChanged(ChangeEvent e) {\n                colorTypeVelocityTune.setEnabled(colorTypeVelocity.isSelected());\n            }\n        });\n\n        switch(Main.pref.getInteger(\"draw.rawgps.colors\", 0)) {\n        case 0:\n            colorTypeNone.setSelected(true);\n            break;\n        case 1:\n            colorTypeVelocity.setSelected(true);\n            break;\n        case 2:\n            colorTypeDilution.setSelected(true);\n            break;\n        }\n\n        colorTypeNone.setToolTipText(tr(\"All points and track segments will have the same color. Can be customized in Layer Manager.\"));\n        colorTypeVelocity.setToolTipText(tr(\"Colors points and track segments by velocity.\"));\n        colorTypeDilution.setToolTipText(tr(\"Colors points and track segments by dilution of position (HDOP). Your capture device needs to log that information.\"));\n\n        // color Tracks by Velocity Tune\n        int ccts = Main.pref.getInteger(\"draw.rawgps.colorTracksTune\", 45);\n        colorTypeVelocityTune.setSelectedIndex(ccts==10 ? 2 : (ccts==20 ? 1 : 0));\n        colorTypeVelocityTune.setToolTipText(tr(\"Allows to tune the track coloring for different average speeds.\"));\n        colorTypeVelocityTune.setEnabled(colorTypeVelocity.isSelected() && colorTypeVelocity.isEnabled());\n\n        panel.add(Box.createVerticalGlue(), GBC.eol().insets(0, 20, 0, 0));\n\n        panel.add(new JLabel(tr(\"Track and Point Coloring\")), GBC.eol().insets(20,0,0,0));\n        panel.add(colorTypeNone, GBC.eol().insets(40,0,0,0));\n        panel.add(colorTypeVelocity, GBC.std().insets(40,0,0,0));\n        panel.add(colorTypeVelocityTune, GBC.eop().insets(5,0,0,5));\n        panel.add(colorTypeDilution, GBC.eol().insets(40,0,0,0));\n\n        // waypointLabel\n        panel.add(Box.createVerticalGlue(), GBC.eol().insets(0, 20, 0, 0));\n\n        waypointLabel.setSelectedIndex(Main.pref.getInteger(\"draw.rawgps.layer.wpt\", 0 ));\n        colorTypeDilution.setToolTipText(tr(\"Allows to change the labelling of track waypoints.\"));\n        panel.add(new JLabel(tr(\"Waypoint labelling\")), GBC.std().insets(20,0,0,0));\n        panel.add(waypointLabel, GBC.eol().fill(GBC.HORIZONTAL).insets(5,0,0,5));\n\n        panel.add(Box.createVerticalGlue(), GBC.eol().fill(GBC.BOTH));\n        JScrollPane scrollpane = new JScrollPane(panel);\n        scrollpane.setBorder(BorderFactory.createEmptyBorder( 0, 0, 0, 0 ));\n        gui.displaycontent.addTab(tr(\"GPS Points\"), scrollpane);\n        panel = new JPanel(new GridBagLayout());\n        panel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));\n\n        // directionHint\n        directionHint.addActionListener(new ActionListener(){\n            public void actionPerformed(ActionEvent e) {\n                if (directionHint.isSelected()){\n                    interestingDirections.setSelected(Main.pref.getBoolean(\"draw.segment.relevant_directions_only\", true));\n                    headArrow.setSelected(Main.pref.getBoolean(\"draw.segment.head_only\", false));\n                }else{\n                    interestingDirections.setSelected(false);\n                    headArrow.setSelected(false);\n                }\n                interestingDirections.setEnabled(directionHint.isSelected());\n                headArrow.setEnabled(directionHint.isSelected());\n            }\n        });\n        directionHint.setToolTipText(tr(\"Draw direction hints for way segments.\"));\n        directionHint.setSelected(Main.pref.getBoolean(\"draw.segment.direction\", true));\n        panel.add(directionHint, GBC.eop().insets(20,0,0,0));\n\n        // only interesting directions\n        interestingDirections.setToolTipText(tr(\"Only interesting direction hints (e.g. with oneway tag).\"));\n        interestingDirections.setSelected(Main.pref.getBoolean(\"draw.segment.relevant_directions_only\", true));\n        interestingDirections.setEnabled(directionHint.isSelected());\n        panel.add(interestingDirections, GBC.eop().insets(40,0,0,0));\n\n        // only on the head of a way\n        headArrow.setToolTipText(tr(\"Only on the head of a way.\"));\n        headArrow.setSelected(Main.pref.getBoolean(\"draw.segment.head_only\", false));\n        headArrow.setEnabled(directionHint.isSelected());\n        panel.add(headArrow, GBC.eop().insets(40, 0, 0, 0));\n\n        // segment order number\n        segmentOrderNumber.setToolTipText(tr(\"Draw the order numbers of all segments within their way.\"));\n        segmentOrderNumber.setSelected(Main.pref.getBoolean(\"draw.segment.order_number\", false));\n        panel.add(segmentOrderNumber, GBC.eop().insets(20,0,0,0));\n\n        // antialiasing\n        useAntialiasing.setToolTipText(tr(\"Apply antialiasing to the map view resulting in a smoother appearance.\"));\n        useAntialiasing.setSelected(Main.pref.getBoolean(\"mappaint.use-antialiasing\", false));\n        panel.add(useAntialiasing, GBC.eop().insets(20,0,0,0));\n\n        // downloaded area\n        sourceBounds.setToolTipText(tr(\"Draw the boundaries of data loaded from the server.\"));\n        sourceBounds.setSelected(Main.pref.getBoolean(\"draw.data.downloaded_area\", true));\n        panel.add(sourceBounds, GBC.eop().insets(20,0,0,0));\n\n        // virtual nodes\n        virtualNodes.setToolTipText(tr(\"Draw virtual nodes in select mode for easy way modification.\"));\n        virtualNodes.setSelected(Main.pref.getInteger(\"mappaint.node.virtual-size\", 8) != 0);\n        panel.add(virtualNodes, GBC.eop().insets(20,0,0,0));\n\n        // background layers in inactive color\n        inactive.setToolTipText(tr(\"Draw the inactive data layers in a different color.\"));\n        inactive.setSelected(Main.pref.getBoolean(\"draw.data.inactive_color\", true));\n        panel.add(inactive, GBC.eop().insets(20,0,0,0));\n\n        panel.add(Box.createVerticalGlue(), GBC.eol().fill(GBC.BOTH));\n        scrollpane = new JScrollPane(panel);\n        scrollpane.setBorder(BorderFactory.createEmptyBorder( 0, 0, 0, 0 ));\n        gui.displaycontent.addTab(tr(\"OSM Data\"), scrollpane);\n    }","id":70465,"modified_method":"public void addGui(PreferenceTabbedPane gui) {\n        gui.display.setPreferredSize(new Dimension(400,600));\n        JPanel panel = new JPanel(new GridBagLayout());\n        panel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));\n\n        // makeAutoMarkers\n        makeAutoMarkers.setSelected(Main.pref.getBoolean(\"marker.makeautomarkers\", true));\n        makeAutoMarkers.setToolTipText(tr(\"Automatically make a marker layer from any waypoints when opening a GPX layer.\"));\n        panel.add(makeAutoMarkers, GBC.eol().insets(20,0,0,5));\n\n        // drawRawGpsLines\n        ButtonGroup gpsLinesGroup = new ButtonGroup();\n        gpsLinesGroup.add(drawRawGpsLinesNone);\n        gpsLinesGroup.add(drawRawGpsLinesLocal);\n        gpsLinesGroup.add(drawRawGpsLinesAll);\n\n\n        /* ensure that default is in data base */\n        Boolean lf = Main.pref.getBoolean(\"draw.rawgps.lines.localfiles\", false);\n        if(Main.pref.getBoolean(\"draw.rawgps.lines\", true)) {\n            drawRawGpsLinesAll.setSelected(true);\n        } else if (lf) {\n            drawRawGpsLinesLocal.setSelected(true);\n        } else {\n            drawRawGpsLinesNone.setSelected(true);\n        }\n\n        panel.add(new JLabel(tr(\"Draw lines between raw GPS points\")), GBC.eol().insets(20,0,0,0));\n        panel.add(drawRawGpsLinesNone, GBC.eol().insets(40,0,0,0));\n        panel.add(drawRawGpsLinesLocal, GBC.eol().insets(40,0,0,0));\n        panel.add(drawRawGpsLinesAll, GBC.eol().insets(40,0,0,0));\n\n        drawRawGpsLinesActionListener = new ActionListener(){\n            public void actionPerformed(ActionEvent e) {\n                forceRawGpsLines.setEnabled(!drawRawGpsLinesNone.isSelected());\n                drawRawGpsMaxLineLength.setEnabled(!(drawRawGpsLinesNone.isSelected() || drawRawGpsLinesLocal.isSelected()));\n                drawRawGpsMaxLineLengthLocal.setEnabled(!drawRawGpsLinesNone.isSelected());\n                drawGpsArrows.setEnabled(!drawRawGpsLinesNone.isSelected() );\n                drawGpsArrowsFast.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n                drawGpsArrowsMinDist.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n            }\n        };\n\n        drawRawGpsLinesNone.addActionListener(drawRawGpsLinesActionListener);\n        drawRawGpsLinesLocal.addActionListener(drawRawGpsLinesActionListener);\n        drawRawGpsLinesAll.addActionListener(drawRawGpsLinesActionListener);\n\n        // drawRawGpsMaxLineLengthLocal\n        drawRawGpsMaxLineLengthLocal.setText(Integer.toString(Main.pref.getInteger(\"draw.rawgps.max-line-length.local\", -1)));\n        drawRawGpsMaxLineLengthLocal.setToolTipText(tr(\"Maximum length (in meters) to draw lines for local files. Set to ''-1'' to draw all lines.\"));\n        drawRawGpsMaxLineLengthLocal.setEnabled(!drawRawGpsLinesNone.isSelected());\n        panel.add(new JLabel(tr(\"Maximum length for local files (meters)\")), GBC.std().insets(40,0,0,0));\n        panel.add(drawRawGpsMaxLineLengthLocal, GBC.eol().fill(GBC.HORIZONTAL).insets(5,0,0,5));\n\n        // drawRawGpsMaxLineLength\n        drawRawGpsMaxLineLength.setText(Integer.toString(Main.pref.getInteger(\"draw.rawgps.max-line-length\", 200)));\n        drawRawGpsMaxLineLength.setToolTipText(tr(\"Maximum length (in meters) to draw lines. Set to ''-1'' to draw all lines.\"));\n        drawRawGpsMaxLineLength.setEnabled(!drawRawGpsLinesNone.isSelected());\n        panel.add(new JLabel(tr(\"Maximum length (meters)\")), GBC.std().insets(40,0,0,0));\n        panel.add(drawRawGpsMaxLineLength, GBC.eol().fill(GBC.HORIZONTAL).insets(5,0,0,5));\n\n        // forceRawGpsLines\n        forceRawGpsLines.setToolTipText(tr(\"Force drawing of lines if the imported data contain no line information.\"));\n        forceRawGpsLines.setSelected(Main.pref.getBoolean(\"draw.rawgps.lines.force\", false));\n        forceRawGpsLines.setEnabled(!drawRawGpsLinesNone.isSelected());\n        panel.add(forceRawGpsLines, GBC.eop().insets(40,0,0,0));\n\n        // drawGpsArrows\n        drawGpsArrows.addActionListener(new ActionListener(){\n            public void actionPerformed(ActionEvent e) {\n                drawGpsArrowsFast.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n                drawGpsArrowsMinDist.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n            }\n        });\n        drawGpsArrows.setToolTipText(tr(\"Draw direction arrows for lines, connecting GPS points.\"));\n        drawGpsArrows.setSelected(Main.pref.getBoolean(\"draw.rawgps.direction\", false));\n        drawGpsArrows.setEnabled(!drawRawGpsLinesNone.isSelected());\n        panel.add(drawGpsArrows, GBC.eop().insets(40,0,0,0));\n\n        // drawGpsArrowsFast\n        drawGpsArrowsFast.setToolTipText(tr(\"Draw the direction arrows using table lookups instead of complex math.\"));\n        drawGpsArrowsFast.setSelected(Main.pref.getBoolean(\"draw.rawgps.alternatedirection\", false));\n        drawGpsArrowsFast.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n        panel.add(drawGpsArrowsFast, GBC.eop().insets(60,0,0,0));\n\n        // drawGpsArrowsMinDist\n        drawGpsArrowsMinDist.setToolTipText(tr(\"Do not draw arrows if they are not at least this distance away from the last one.\"));\n        drawGpsArrowsMinDist.setText(Integer.toString(Main.pref.getInteger(\"draw.rawgps.min-arrow-distance\", 0)));\n        drawGpsArrowsMinDist.setEnabled(drawGpsArrows.isSelected() && drawGpsArrows.isEnabled());\n        panel.add(new JLabel(tr(\"Minimum distance (pixels)\")), GBC.std().insets(60,0,0,0));\n        panel.add(drawGpsArrowsMinDist, GBC.eol().fill(GBC.HORIZONTAL).insets(5,0,0,5));\n\n        // hdopCircleGpsPoints\n        hdopCircleGpsPoints.setSelected(Main.pref.getBoolean(\"draw.rawgps.hdopcircle\", true));\n        hdopCircleGpsPoints.setToolTipText(tr(\"Draw a circle form HDOP value.\"));\n        panel.add(hdopCircleGpsPoints, GBC.eop().insets(20,0,0,0));\n\n        // largeGpsPoints\n        largeGpsPoints.setSelected(Main.pref.getBoolean(\"draw.rawgps.large\", false));\n        largeGpsPoints.setToolTipText(tr(\"Draw larger dots for the GPS points.\"));\n        panel.add(largeGpsPoints, GBC.eop().insets(20,0,0,0));\n\n        // colorTracks\n        colorGroup = new ButtonGroup();\n        colorGroup.add(colorTypeNone);\n        colorGroup.add(colorTypeVelocity);\n        colorGroup.add(colorTypeDilution);\n\n        colorTypeVelocity.addChangeListener(new ChangeListener(){\n            public void stateChanged(ChangeEvent e) {\n                colorTypeVelocityTune.setEnabled(colorTypeVelocity.isSelected());\n            }\n        });\n\n        switch(Main.pref.getInteger(\"draw.rawgps.colors\", 0)) {\n        case 0:\n            colorTypeNone.setSelected(true);\n            break;\n        case 1:\n            colorTypeVelocity.setSelected(true);\n            break;\n        case 2:\n            colorTypeDilution.setSelected(true);\n            break;\n        }\n\n        colorTypeNone.setToolTipText(tr(\"All points and track segments will have the same color. Can be customized in Layer Manager.\"));\n        colorTypeVelocity.setToolTipText(tr(\"Colors points and track segments by velocity.\"));\n        colorTypeDilution.setToolTipText(tr(\"Colors points and track segments by dilution of position (HDOP). Your capture device needs to log that information.\"));\n\n        // color Tracks by Velocity Tune\n        int ccts = Main.pref.getInteger(\"draw.rawgps.colorTracksTune\", 45);\n        colorTypeVelocityTune.setSelectedIndex(ccts==10 ? 2 : (ccts==20 ? 1 : 0));\n        colorTypeVelocityTune.setToolTipText(tr(\"Allows to tune the track coloring for different average speeds.\"));\n        colorTypeVelocityTune.setEnabled(colorTypeVelocity.isSelected() && colorTypeVelocity.isEnabled());\n\n        panel.add(Box.createVerticalGlue(), GBC.eol().insets(0, 20, 0, 0));\n\n        panel.add(new JLabel(tr(\"Track and Point Coloring\")), GBC.eol().insets(20,0,0,0));\n        panel.add(colorTypeNone, GBC.eol().insets(40,0,0,0));\n        panel.add(colorTypeVelocity, GBC.std().insets(40,0,0,0));\n        panel.add(colorTypeVelocityTune, GBC.eop().insets(5,0,0,5));\n        panel.add(colorTypeDilution, GBC.eol().insets(40,0,0,0));\n\n        // waypointLabel\n        panel.add(Box.createVerticalGlue(), GBC.eol().insets(0, 20, 0, 0));\n\n        waypointLabel.setSelectedIndex(Main.pref.getInteger(\"draw.rawgps.layer.wpt\", 0 ));\n        colorTypeDilution.setToolTipText(tr(\"Allows to change the labelling of track waypoints.\"));\n        panel.add(new JLabel(tr(\"Waypoint labelling\")), GBC.std().insets(20,0,0,0));\n        panel.add(waypointLabel, GBC.eol().fill(GBC.HORIZONTAL).insets(5,0,0,5));\n\n        panel.add(Box.createVerticalGlue(), GBC.eol().fill(GBC.BOTH));\n        JScrollPane scrollpane = new JScrollPane(panel);\n        scrollpane.setBorder(BorderFactory.createEmptyBorder( 0, 0, 0, 0 ));\n        gui.displaycontent.addTab(tr(\"GPS Points\"), scrollpane);\n        panel = new JPanel(new GridBagLayout());\n        panel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));\n\n        // directionHint\n        directionHint.addActionListener(new ActionListener(){\n            public void actionPerformed(ActionEvent e) {\n                if (directionHint.isSelected()){\n                    interestingDirections.setSelected(Main.pref.getBoolean(\"draw.segment.relevant_directions_only\", true));\n                    headArrow.setSelected(Main.pref.getBoolean(\"draw.segment.head_only\", false));\n                }else{\n                    interestingDirections.setSelected(false);\n                    headArrow.setSelected(false);\n                }\n                interestingDirections.setEnabled(directionHint.isSelected());\n                headArrow.setEnabled(directionHint.isSelected());\n            }\n        });\n        directionHint.setToolTipText(tr(\"Draw direction hints for way segments.\"));\n        directionHint.setSelected(Main.pref.getBoolean(\"draw.segment.direction\", true));\n        panel.add(directionHint, GBC.eop().insets(20,0,0,0));\n\n        // only interesting directions\n        interestingDirections.setToolTipText(tr(\"Only interesting direction hints (e.g. with oneway tag).\"));\n        interestingDirections.setSelected(Main.pref.getBoolean(\"draw.segment.relevant_directions_only\", true));\n        interestingDirections.setEnabled(directionHint.isSelected());\n        panel.add(interestingDirections, GBC.eop().insets(40,0,0,0));\n\n        // only on the head of a way\n        headArrow.setToolTipText(tr(\"Only on the head of a way.\"));\n        headArrow.setSelected(Main.pref.getBoolean(\"draw.segment.head_only\", false));\n        headArrow.setEnabled(directionHint.isSelected());\n        panel.add(headArrow, GBC.eop().insets(40, 0, 0, 0));\n\n        // segment order number\n        segmentOrderNumber.setToolTipText(tr(\"Draw the order numbers of all segments within their way.\"));\n        segmentOrderNumber.setSelected(Main.pref.getBoolean(\"draw.segment.order_number\", false));\n        panel.add(segmentOrderNumber, GBC.eop().insets(20,0,0,0));\n\n        // antialiasing\n        useAntialiasing.setToolTipText(tr(\"Apply antialiasing to the map view resulting in a smoother appearance.\"));\n        useAntialiasing.setSelected(Main.pref.getBoolean(\"mappaint.use-antialiasing\", false));\n        panel.add(useAntialiasing, GBC.eop().insets(20,0,0,0));\n\n        // downloaded area\n        sourceBounds.setToolTipText(tr(\"Draw the boundaries of data loaded from the server.\"));\n        sourceBounds.setSelected(Main.pref.getBoolean(\"draw.data.downloaded_area\", true));\n        panel.add(sourceBounds, GBC.eop().insets(20,0,0,0));\n\n        // virtual nodes\n        virtualNodes.setToolTipText(tr(\"Draw virtual nodes in select mode for easy way modification.\"));\n        virtualNodes.setSelected(Main.pref.getInteger(\"mappaint.node.virtual-size\", 8) != 0);\n        panel.add(virtualNodes, GBC.eop().insets(20,0,0,0));\n\n        // background layers in inactive color\n        inactive.setToolTipText(tr(\"Draw the inactive data layers in a different color.\"));\n        inactive.setSelected(Main.pref.getBoolean(\"draw.data.inactive_color\", true));\n        panel.add(inactive, GBC.eop().insets(20,0,0,0));\n\n        // outlineOnly\n        outlineOnly.setSelected(Main.pref.getBoolean(\"draw.data.area_outline_only\", false));\n        outlineOnly.setToolTipText(tr(\"This option suppresses the filling of areas, overriding anything specified in the selected style.\"));\n        panel.add(outlineOnly, GBC.eol().insets(20,0,0,5));\n\n        panel.add(Box.createVerticalGlue(), GBC.eol().fill(GBC.BOTH));\n        scrollpane = new JScrollPane(panel);\n        scrollpane.setBorder(BorderFactory.createEmptyBorder( 0, 0, 0, 0 ));\n        gui.displaycontent.addTab(tr(\"OSM Data\"), scrollpane);\n    }","commit_id":"e589cb3ecd4be7c718ce7198720047cd112dfe57","url":"https://github.com/openstreetmap/josm"},{"original_method":"private void load() {\n        showDirectionArrow = Main.pref.getBoolean(\"draw.segment.direction\", true);\n        showRelevantDirectionsOnly = Main.pref.getBoolean(\"draw.segment.relevant_directions_only\", true);\n        useRealWidth = Main.pref.getBoolean(\"mappaint.useRealWidth\", false);\n        defaultSegmentWidth = Main.pref.getInteger(\"mappaint.segment.default-width\", 2);\n\n        selectedColor = PaintColors.SELECTED.get();\n        relationSelectedColor = PaintColors.RELATIONSELECTED.get();\n        highlightColor = PaintColors.HIGHLIGHT.get();\n        inactiveColor = PaintColors.INACTIVE.get();\n        nodeColor = PaintColors.NODE.get();\n        taggedColor = PaintColors.TAGGED.get();\n        connectionColor = PaintColors.CONNECTION.get();\n        if (taggedColor != nodeColor) {\n            taggedConnectionColor = taggedColor;\n        } else {\n            taggedConnectionColor = connectionColor;\n        }\n\n\n        showOrderNumber = Main.pref.getBoolean(\"draw.segment.order_number\", false);\n        showHeadArrowOnly = Main.pref.getBoolean(\"draw.segment.head_only\", false);\n\n        showNamesDistance = Main.pref.getInteger(\"mappaint.shownames\", 10000000);\n        useStrokesDistance = Main.pref.getInteger(\"mappaint.strokes\", 10000000);\n        showIconsDistance = Main.pref.getInteger(\"mappaint.showicons\", 10000000);\n\n        selectedNodeSize = Main.pref.getInteger(\"mappaint.node.selected-size\", 5);\n        unselectedNodeSize = Main.pref.getInteger(\"mappaint.node.unselected-size\", 3);\n        connectionNodeSize = Main.pref.getInteger(\"mappaint.node.connection-size\", 5);\n        taggedNodeSize = Main.pref.getInteger(\"mappaint.node.tagged-size\", 3);\n        fillSelectedNode = Main.pref.getBoolean(\"mappaint.node.fill-selected\", true);\n        fillUnselectedNode = Main.pref.getBoolean(\"mappaint.node.fill-unselected\", false);\n        fillTaggedNode = Main.pref.getBoolean(\"mappaint.node.fill-tagged\", true);\n        fillConnectionNode = Main.pref.getBoolean(\"mappaint.node.fill-connection\", false);\n    }","id":70466,"modified_method":"private void load() {\n        showDirectionArrow = Main.pref.getBoolean(\"draw.segment.direction\", true);\n        showRelevantDirectionsOnly = Main.pref.getBoolean(\"draw.segment.relevant_directions_only\", true);\n        useRealWidth = Main.pref.getBoolean(\"mappaint.useRealWidth\", false);\n        defaultSegmentWidth = Main.pref.getInteger(\"mappaint.segment.default-width\", 2);\n\n        selectedColor = PaintColors.SELECTED.get();\n        relationSelectedColor = PaintColors.RELATIONSELECTED.get();\n        highlightColor = PaintColors.HIGHLIGHT.get();\n        inactiveColor = PaintColors.INACTIVE.get();\n        nodeColor = PaintColors.NODE.get();\n        taggedColor = PaintColors.TAGGED.get();\n        connectionColor = PaintColors.CONNECTION.get();\n        if (taggedColor != nodeColor) {\n            taggedConnectionColor = taggedColor;\n        } else {\n            taggedConnectionColor = connectionColor;\n        }\n\n\n        showOrderNumber = Main.pref.getBoolean(\"draw.segment.order_number\", false);\n        showHeadArrowOnly = Main.pref.getBoolean(\"draw.segment.head_only\", false);\n\n        showNamesDistance = Main.pref.getInteger(\"mappaint.shownames\", 10000000);\n        useStrokesDistance = Main.pref.getInteger(\"mappaint.strokes\", 10000000);\n        showIconsDistance = Main.pref.getInteger(\"mappaint.showicons\", 10000000);\n\n        selectedNodeSize = Main.pref.getInteger(\"mappaint.node.selected-size\", 5);\n        unselectedNodeSize = Main.pref.getInteger(\"mappaint.node.unselected-size\", 3);\n        connectionNodeSize = Main.pref.getInteger(\"mappaint.node.connection-size\", 5);\n        taggedNodeSize = Main.pref.getInteger(\"mappaint.node.tagged-size\", 3);\n        fillSelectedNode = Main.pref.getBoolean(\"mappaint.node.fill-selected\", true);\n        fillUnselectedNode = Main.pref.getBoolean(\"mappaint.node.fill-unselected\", false);\n        fillTaggedNode = Main.pref.getBoolean(\"mappaint.node.fill-tagged\", true);\n        fillConnectionNode = Main.pref.getBoolean(\"mappaint.node.fill-connection\", false);\n\n        outlineOnly = Main.pref.getBoolean(\"draw.data.area_outline_only\", false);\n\n    }","commit_id":"e589cb3ecd4be7c718ce7198720047cd112dfe57","url":"https://github.com/openstreetmap/josm"},{"original_method":"public MapPainter(MapPaintSettings settings, Graphics2D g, boolean inactive, NavigatableComponent nc, boolean virtual, double dist, double circum) {\n        this.g = g;\n        this.inactive = inactive;\n        this.nc = nc;\n        this.useStrokes = settings.getUseStrokesDistance() > dist;\n        this.showNames = settings.getShowNamesDistance() > dist;\n        this.showIcons = settings.getShowIconsDistance() > dist;\n\n        this.inactiveColor = PaintColors.INACTIVE.get();\n        this.textColor = PaintColors.TEXT.get();\n        this.selectedColor = PaintColors.SELECTED.get();\n        this.relationSelectedColor = PaintColors.RELATIONSELECTED.get();\n        this.areaTextColor = PaintColors.AREA_TEXT.get();\n        this.nodeColor = PaintColors.NODE.get();\n        this.backgroundColor = PaintColors.BACKGROUND.get();\n\n        this.orderFont = new Font(Main.pref.get(\"mappaint.font\", \"Helvetica\"), Font.PLAIN, Main.pref.getInteger(\"mappaint.fontsize\", 8));\n        this.fillAlpha = Math.min(255, Math.max(0, Integer.valueOf(Main.pref.getInteger(\"mappaint.fillalpha\", 50))));\n        this.virtualNodeSize = virtual ? Main.pref.getInteger(\"mappaint.node.virtual-size\", 8) / 2 : 0;\n        this.virtualNodeSpace = Main.pref.getInteger(\"mappaint.node.virtual-space\", 70);\n        this.segmentNumberSpace = Main.pref.getInteger(\"mappaint.segmentnumber.space\", 40);\n\n        String[] names = {\"name:\" + LanguageInfo.getJOSMLocaleCode(), \"name\", \"int_name\", \"ref\", \"operator\", \"brand\", \"addr:housenumber\"};\n        this.regionalNameOrder = Main.pref.getCollection(\"mappaint.nameOrder\", Arrays.asList(names));\n        this.circum = circum;\n    }","id":70467,"modified_method":"public MapPainter(MapPaintSettings settings, Graphics2D g, \n        boolean inactive, NavigatableComponent nc, boolean virtual, \n        double dist, double circum) {\n\n        this.g = g;\n        this.inactive = inactive;\n        this.nc = nc;\n        this.useStrokes = settings.getUseStrokesDistance() > dist;\n        this.showNames = settings.getShowNamesDistance() > dist;\n        this.showIcons = settings.getShowIconsDistance() > dist;\n        this.outlineOnly = settings.isOutlineOnly();\n\n        this.inactiveColor = PaintColors.INACTIVE.get();\n        this.textColor = PaintColors.TEXT.get();\n        this.selectedColor = PaintColors.SELECTED.get();\n        this.relationSelectedColor = PaintColors.RELATIONSELECTED.get();\n        this.areaTextColor = PaintColors.AREA_TEXT.get();\n        this.nodeColor = PaintColors.NODE.get();\n        this.backgroundColor = PaintColors.BACKGROUND.get();\n\n        this.orderFont = new Font(Main.pref.get(\"mappaint.font\", \"Helvetica\"), Font.PLAIN, Main.pref.getInteger(\"mappaint.fontsize\", 8));\n        this.fillAlpha = Math.min(255, Math.max(0, Integer.valueOf(Main.pref.getInteger(\"mappaint.fillalpha\", 50))));\n        this.virtualNodeSize = virtual ? Main.pref.getInteger(\"mappaint.node.virtual-size\", 8) / 2 : 0;\n        this.virtualNodeSpace = Main.pref.getInteger(\"mappaint.node.virtual-space\", 70);\n        this.segmentNumberSpace = Main.pref.getInteger(\"mappaint.segmentnumber.space\", 40);\n\n        String[] names = {\"name:\" + LanguageInfo.getJOSMLocaleCode(), \"name\", \"int_name\", \"ref\", \"operator\", \"brand\", \"addr:housenumber\"};\n        this.regionalNameOrder = Main.pref.getCollection(\"mappaint.nameOrder\", Arrays.asList(names));\n        this.circum = circum;\n    }","commit_id":"e589cb3ecd4be7c718ce7198720047cd112dfe57","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected void drawArea(Polygon polygon, Color color, String name) {\n\n        /* set the opacity (alpha) level of the filled polygon */\n        g.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), fillAlpha));\n        g.fillPolygon(polygon);\n\n        if (name != null) {\n            Rectangle pb = polygon.getBounds();\n            FontMetrics fontMetrics = g.getFontMetrics(orderFont); // if slow, use cache\n            Rectangle2D nb = fontMetrics.getStringBounds(name, g); // if slow, approximate by strlen()*maxcharbounds(font)\n\n            // Point2D c = getCentroid(polygon);\n            // Using the Centroid is Nicer for buildings like: +--------+\n            // but this needs to be fast.  As most houses are  |   42   |\n            // boxes anyway, the center of the bounding box    +---++---+\n            // will have to do.                                    ++\n            // Centroids are not optimal either, just imagine a U-shaped house.\n            // Point2D c = new Point2D.Double(pb.x + pb.width / 2.0, pb.y + pb.height / 2.0);\n            // Rectangle2D.Double centeredNBounds =\n            //     new Rectangle2D.Double(c.getX() - nb.getWidth()/2,\n            //                            c.getY() - nb.getHeight()/2,\n            //                            nb.getWidth(),\n            //                            nb.getHeight());\n\n            Rectangle centeredNBounds = new Rectangle(pb.x + (int)((pb.width - nb.getWidth())/2.0),\n                    pb.y + (int)((pb.height - nb.getHeight())/2.0),\n                    (int)nb.getWidth(),\n                    (int)nb.getHeight());\n\n            if ((pb.width >= nb.getWidth() && pb.height >= nb.getHeight()) && // quick check\n                    polygon.contains(centeredNBounds) // slow but nice\n            ) {\n                g.setColor(areaTextColor);\n                Font defaultFont = g.getFont();\n                g.setFont (orderFont);\n                g.drawString (name,\n                        (int)(centeredNBounds.getMinX() - nb.getMinX()),\n                        (int)(centeredNBounds.getMinY() - nb.getMinY()));\n                g.setFont(defaultFont);\n            }\n        }\n    }","id":70468,"modified_method":"protected void drawArea(Polygon polygon, Color color, String name) {\n\n        /* set the opacity (alpha) level of the filled polygon */\n        g.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), fillAlpha));\n\n        if (outlineOnly) {\n            g.drawPolygon(polygon);\n        } else {\n            g.fillPolygon(polygon);\n        }\n            \n\n        if (name != null) {\n            Rectangle pb = polygon.getBounds();\n            FontMetrics fontMetrics = g.getFontMetrics(orderFont); // if slow, use cache\n            Rectangle2D nb = fontMetrics.getStringBounds(name, g); // if slow, approximate by strlen()*maxcharbounds(font)\n\n            // Point2D c = getCentroid(polygon);\n            // Using the Centroid is Nicer for buildings like: +--------+\n            // but this needs to be fast.  As most houses are  |   42   |\n            // boxes anyway, the center of the bounding box    +---++---+\n            // will have to do.                                    ++\n            // Centroids are not optimal either, just imagine a U-shaped house.\n            // Point2D c = new Point2D.Double(pb.x + pb.width / 2.0, pb.y + pb.height / 2.0);\n            // Rectangle2D.Double centeredNBounds =\n            //     new Rectangle2D.Double(c.getX() - nb.getWidth()/2,\n            //                            c.getY() - nb.getHeight()/2,\n            //                            nb.getWidth(),\n            //                            nb.getHeight());\n\n            Rectangle centeredNBounds = new Rectangle(pb.x + (int)((pb.width - nb.getWidth())/2.0),\n                    pb.y + (int)((pb.height - nb.getHeight())/2.0),\n                    (int)nb.getWidth(),\n                    (int)nb.getHeight());\n\n            if ((pb.width >= nb.getWidth() && pb.height >= nb.getHeight()) && // quick check\n                    polygon.contains(centeredNBounds) // slow but nice\n            ) {\n                g.setColor(areaTextColor);\n                Font defaultFont = g.getFont();\n                g.setFont (orderFont);\n                g.drawString (name,\n                        (int)(centeredNBounds.getMinX() - nb.getMinX()),\n                        (int)(centeredNBounds.getMinY() - nb.getMinY()));\n                g.setFont(defaultFont);\n            }\n        }\n    }","commit_id":"e589cb3ecd4be7c718ce7198720047cd112dfe57","url":"https://github.com/openstreetmap/josm"},{"original_method":"public void init_worldmap() {\n        // construct the board.\n        //Toolkit tk = Toolkit.getDefaultToolkit();\n\n        //Read in the world map\n        try { worldmap =  ImageIO.read(new File(\"worldmap.jpg\"));   }\n        catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        //Read in the satellite pics\n        try {\n            satpics.put(\"usa\", ImageIO.read(new File(\"us.gif\")));\n            satpics.put(\"france\", ImageIO.read(new File(\"fr.gif\")));\n            satpics.put(\"brazil\", ImageIO.read(new File(\"br.gif\")));\n            satpics.put(\"china\", ImageIO.read(new File(\"cn.gif\")));\n            satpics.put(\"india\", ImageIO.read(new File(\"in.gif\")));\n\n            }\n        catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        colormap.put(\"usa\", Color.blue);\n        colormap.put(\"france\", Color.yellow);\n        colormap.put(\"brazil\", Color.green);\n        colormap.put(\"china\", Color.red);\n        colormap.put(\"india\", Color.black);\n\n        //Set appropriate arguments\n        width = worldmap.getWidth();\n        height = worldmap.getHeight();\n        xorigin = width/2;\n        yorigin = height/2;\n        xscale = width/Math.toRadians(360.0);\n        yscale = height/Math.toRadians(170.0);\n    }","id":70469,"modified_method":"public void init_worldmap() {\n        // construct the board.\n        //Toolkit tk = Toolkit.getDefaultToolkit();\n\n        //Read in the world map\n        try { worldmap =  ImageIO.read(new File(\"worldmap.jpg\"));   }\n        catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        //Read in the satellite pics\n        try {\n            satpics.put(\"usa\", ImageIO.read(new File(\"us.gif\")));\n            satpics.put(\"france\", ImageIO.read(new File(\"fr.gif\")));\n            satpics.put(\"brazil\", ImageIO.read(new File(\"br.gif\")));\n            satpics.put(\"china\", ImageIO.read(new File(\"cn.gif\")));\n            satpics.put(\"india\", ImageIO.read(new File(\"in.gif\")));\n\n            }\n        catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        colormap.put(\"usa\", Color.blue);\n        colormap.put(\"france\", Color.yellow);\n        colormap.put(\"brazil\", Color.green);\n        colormap.put(\"china\", Color.red);\n        colormap.put(\"india\", Color.black);\n\n        //Set appropriate arguments\n        width = worldmap.getWidth();\n        height = worldmap.getHeight();\n        xorigin = width/2;\n        yorigin = height/2;\n        xscale = width/Math.toRadians(360.0);\n        yscale = height/Math.toRadians(170.0);\n    }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Attempt to make a single bid on an auction.\n     *\n     * @param auctionId The id of the auction to bid on.\n     * @param userId The id of the user making the bid.\n     * @return A status code which can be found at the top of this class.\n     */\n    static long doBid(org.voltdb.client.Client client, long auctionId, long userId) {\n        ///////////////////////////////////////\n        // get the current bid price of an item\n        ///////////////////////////////////////\n        VoltTable infoResult = null;\n        try {\n            VoltTable[] infoResultSet = client.callProcedure(\"GetAuctionInfo\", auctionId).getResults();\n            if (infoResultSet.length != 1) throw new Exception(\"GetAuctionInfo returned no results\");\n            infoResult = infoResultSet[0];\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        double oldBidAmount = infoResult.fetchRow(0).getDouble(\"BIDPRICE\");\n\n        ////////////////////////////////////////\n        // make a new bid on the exact same item\n        ////////////////////////////////////////\n        double newBidAmount = getRandomNewBidAmount(oldBidAmount);\n\n        VoltTable bidResult = null;\n        try {\n            VoltTable[] bidResultSet = client.callProcedure(\"BidOnAuction\", auctionId, userId, newBidAmount, nextBidId++).getResults();\n            if (bidResultSet.length != 1) throw new Exception(\"BidOnAuction returned no results\");\n            bidResult = bidResultSet[0];\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // return the result of the bid procedure\n        // we're primarily interested in POST_CLOSE_BID\n        return bidResult.asScalarLong();\n    }","id":70470,"modified_method":"/**\n     * Attempt to make a single bid on an auction.\n     *\n     * @param auctionId The id of the auction to bid on.\n     * @param userId The id of the user making the bid.\n     * @return A status code which can be found at the top of this class.\n     */\n    static long doBid(org.voltdb.client.Client client, long auctionId, long userId) {\n        ///////////////////////////////////////\n        // get the current bid price of an item\n        ///////////////////////////////////////\n        VoltTable infoResult = null;\n        try {\n            VoltTable[] infoResultSet = client.callProcedure(\"GetAuctionInfo\", auctionId).getResults();\n            if (infoResultSet.length != 1) throw new Exception(\"GetAuctionInfo returned no results\");\n            infoResult = infoResultSet[0];\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n        double oldBidAmount = infoResult.fetchRow(0).getDouble(\"BIDPRICE\");\n\n        ////////////////////////////////////////\n        // make a new bid on the exact same item\n        ////////////////////////////////////////\n        double newBidAmount = getRandomNewBidAmount(oldBidAmount);\n\n        VoltTable bidResult = null;\n        try {\n            VoltTable[] bidResultSet = client.callProcedure(\"BidOnAuction\", auctionId, userId, newBidAmount, nextBidId++).getResults();\n            if (bidResultSet.length != 1) throw new Exception(\"BidOnAuction returned no results\");\n            bidResult = bidResultSet[0];\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n\n        // return the result of the bid procedure\n        // we're primarily interested in POST_CLOSE_BID\n        return bidResult.asScalarLong();\n    }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public static void main(String[] args) {\n\n              /*\n               * Instantiate a client and connect to the database.\n               */\n    org.voltdb.client.Client myApp = null;\n    try {\n            myApp = ClientFactory.createClient();\n            myApp.createConnection(\"localhost\", \"program\", \"password\");\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        };\n               /*\n               * Load the database.\n               */\n    VoltTable[] results = null;\n    try {\n       results = myApp.callProcedure(\"Insert\",\"Hello\",  \"World\", \"English\").getResults();\n       results = myApp.callProcedure(\"Insert\",\"Bonjour\",\"Monde\", \"French\").getResults();\n       results = myApp.callProcedure(\"Insert\",\"Hola\",   \"Mundo\", \"Spanish\").getResults();\n       results = myApp.callProcedure(\"Insert\",\"Hej\",    \"Verden\",\"Danish\").getResults();\n       results = myApp.callProcedure(\"Insert\",\"Ciao\",   \"Mondo\", \"Italian\").getResults();\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(-1);\n        };\n \n              /*\n             * Retrieve the message.\n             */\n    try {\n       results = myApp.callProcedure(\"Select\", \"Spanish\").getResults();\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(-1);\n        };\n\n  if (results.length != 1) {\n      System.out.printf(\"I can't say Hello in that language.\");\n      System.exit(-1);\n       }\n \n  VoltTable resultTable = results[0];\n  VoltTableRow row = resultTable.fetchRow(0);\n  System.out.printf(\"%s, %s!\\n\", \n                    row.getString(\"hello\"),  \n                    row.getString(\"world\"));\n  }","id":70471,"modified_method":"public static void main(String[] args) throws Exception {\n\n        /*\n         * Instantiate a client and connect to the database.\n         */\n        final org.voltdb.client.Client myApp = ClientFactory.createClient();\n        myApp.createConnection(\"localhost\", \"program\", \"password\");\n\n        /*\n         * Load the database.\n         */\n        myApp.callProcedure(\"Insert\", \"Hello\", \"World\", \"English\");\n        myApp.callProcedure(\"Insert\", \"Bonjour\", \"Monde\", \"French\");\n        myApp.callProcedure(\"Insert\", \"Hola\", \"Mundo\", \"Spanish\");\n        myApp.callProcedure(\"Insert\", \"Hej\", \"Verden\", \"Danish\");\n        myApp.callProcedure(\"Insert\", \"Ciao\", \"Mondo\", \"Italian\");\n\n        /*\n         * Retrieve the message.\n         */\n        final ClientResponse response = myApp.callProcedure(\"Select\", \"Spanish\");\n        if (response.getStatus() != ClientResponse.SUCCESS){\n            System.err.println(response.getStatusString());\n            System.exit(-1);\n        }\n\n        final VoltTable results[] = response.getResults();\n        if (results.length != 1) {\n            System.out.printf(\"I can't say Hello in that language.\");\n            System.exit(-1);\n        }\n\n        VoltTable resultTable = results[0];\n        VoltTableRow row = resultTable.fetchRow(0);\n        System.out.printf(\"%s, %s!\\n\", row.getString(\"hello\"), row\n                .getString(\"world\"));\n    }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public static void main(String args[]) {\n        if (args.length != 7) {\n            System.err.println(\"ClientVoter [number of contestants] [votes per phone number] [transactions per second] [client feedback interval (seconds)] [test duration (seconds)] [server list (comma separated)] [lag record delay (seconds)] \");\n            System.exit(1);\n        }\n\n        int maxContestant = (int) Integer.valueOf(args[0]);\n        if ((maxContestant < 1) || (maxContestant > 12)) {\n            System.err.println(\"Number of contestants must be between 1 and 12\");\n            System.exit(1);\n        }\n\n        long maxVotesPerPhoneNumber = (long) Long.valueOf(args[1]);\n        long transactions_per_second = (long) Long.valueOf(args[2]);\n        long transactions_per_milli = transactions_per_second / 1000l;\n        long client_feedback_interval_secs = (long) Long.valueOf(args[3]);\n        long test_duration_secs = (long) Long.valueOf(args[4]);\n        long lag_latency_seconds = (long) Long.valueOf(args[5]);\n        String serverList = args[6];\n        long lag_latency_millis = lag_latency_seconds * 1000l;\n        long thisOutstanding = 0;\n        long lastOutstanding = 0;\n\n        String[] contestantNames = {\"Edwina Burnam\",\n                                    \"Tabatha Gehling\",\n                                    \"Kelly Clauss\",\n                                    \"Jessie Alloway\",\n                                    \"Alana Bregman\",\n                                    \"Jessie Eichman\",\n                                    \"Allie Rogalski\",\n                                    \"Nita Coster\",\n                                    \"Kurt Walser\",\n                                    \"Ericka Dieter\",\n                                    \"Loraine Nygren\",\n                                    \"Tania Mattioli\"};\n\n        System.out.printf(\"Allowing %d votes per phone number\\n\",maxVotesPerPhoneNumber);\n        System.out.printf(\"Submitting %,d SP Calls/sec\\n\",transactions_per_second);\n        System.out.printf(\"Feedback interval = %,d second(s)\\n\",client_feedback_interval_secs);\n        System.out.printf(\"Running for %,d second(s)\\n\",test_duration_secs);\n        System.out.printf(\"Latency not recorded for %d second(s)\\n\",lag_latency_seconds);\n\n        long phoneNumber;\n        byte contestantNumber;\n\n        long transactions_this_second = 0;\n        long last_millisecond = System.currentTimeMillis();\n        long this_millisecond = System.currentTimeMillis();\n  \n        final org.voltdb.client.Client voltclient = ClientFactory.createClient();\n\n        String[] voltServers = serverList.split(\",\");\n  \n        for (String thisServer : voltServers) {\n            try {\n                thisServer = thisServer.trim();\n                System.out.printf(\"Connecting to server: '%s'\\n\",thisServer);\n\n                voltclient.createConnection(thisServer, \"program\", \"none\");\n            } catch (IOException e) {\n                e.printStackTrace();\n                System.exit(-1);\n            }\n        }\n\n        try {\n            // initialize the database if this is the first connecting client, otherwise get existing configuration information\n            VoltTable[] vtInitialize = voltclient.callProcedure(\"Initialize\", maxContestant, contestantNames).getResults();\n            maxContestant = (int) vtInitialize[0].fetchRow(0).getLong(0);\n            System.out.printf(\"Running for %d contestant(s)\\n\",maxContestant);\n        } catch (ProcCallException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n\n        // make random object totally random (set my milliseconds) so we can have multiple clients running simultaneously\n        java.util.Random rand = new java.util.Random();\n\n        long startTime = System.currentTimeMillis();\n        long endTime = startTime + (1000l * test_duration_secs);\n        long currentTime = startTime;\n        long lastFeedbackTime = startTime;\n        long num_sp_calls = 0;\n        long startRecordingLatency = startTime + lag_latency_millis;\n\n        AsyncCallback callBack = new AsyncCallback();        \n\n        while (endTime > currentTime) {\n            num_sp_calls++;\n\n            phoneNumber = rand.nextLong() % 9999999999l;\n            contestantNumber = (byte) (((rand.nextInt(maxContestant) * rand.nextInt(maxContestant)) % maxContestant) + 1);\n            if ((num_sp_calls % 100) == 0) {\n                // introduce a potentially bad contestant number every 100 votes\n                contestantNumber = (byte) ((rand.nextInt(maxContestant) + 1) * 2);\n            }\n\n            try {\n                boolean queued = false;\n                while (!queued) {\n                    queued = voltclient.callProcedure(callBack, \"Vote\", phoneNumber, contestantNumber, maxVotesPerPhoneNumber);\n\n                    if (!queued) {\n                        try {\n                            voltclient.backpressureBarrier();\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                            System.exit(-1);\n                        }\n                    }\n                }\n            } catch (java.io.IOException e) {\n                e.printStackTrace();\n            }\n          \n            transactions_this_second++;\n            if (transactions_this_second >= transactions_per_milli) {\n                this_millisecond = System.currentTimeMillis();\n                while (this_millisecond <= last_millisecond) {\n                    this_millisecond = System.currentTimeMillis();\n                }\n                last_millisecond = this_millisecond;\n                transactions_this_second = 0;\n            }\n\n            currentTime = System.currentTimeMillis();\n\n            if ((!checkLatency) && (currentTime >= startRecordingLatency)) {\n                // time to start recording latency information\n                checkLatency = true;\n            }\n\n            if (currentTime >= (lastFeedbackTime + (client_feedback_interval_secs * 1000))) {\n                synchronized(callBack) {\n                    lastFeedbackTime = currentTime;\n\n                    long elapsedTimeMillis2 = System.currentTimeMillis()-startTime;\n                    float elapsedTimeSec2 = elapsedTimeMillis2/1000F;\n\n                    if (tot_executions_latency == 0) {\n                        tot_executions_latency = 1;\n                    }\n                    thisOutstanding = num_sp_calls - tot_executions;\n\n                    long runTimeMillis = endTime - startTime;\n\n                    double percentComplete = ((double) elapsedTimeMillis2 / (double) runTimeMillis) * 100;\n                    if (percentComplete > 100.0) {\n                        percentComplete = 100.0;\n                    }\n\n                    double avgLatency = (double) tot_execution_milliseconds / (double) tot_executions_latency;\n                    \n                    System.out.printf(\"%.3f%% Complete | SP Calls: %,d at %,.2f SP/sec | outstanding = %d (%d) | min = %d | max = %d | avg = %.2f\\n\",percentComplete, num_sp_calls, (num_sp_calls / elapsedTimeSec2), thisOutstanding,(thisOutstanding - lastOutstanding), min_execution_milliseconds, max_execution_milliseconds, avgLatency);\n\n                    lastOutstanding = thisOutstanding;\n                }\n            }\n        }\n\n        try {\n            voltclient.drain();\n        } catch (NoConnectionsException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n\n        long elapsedTimeMillis = System.currentTimeMillis()-startTime;\n        float elapsedTimeSec = elapsedTimeMillis/1000F;\n\n        System.out.println(\"\\n\");\n        System.out.println(\"*************************************************************************\");\n        System.out.println(\"Voting Results\");\n        System.out.println(\"*************************************************************************\");\n\n        System.out.printf(\" - Accepted votes = %,d\\n\",vote_result_counter[0]);\n        System.out.printf(\" - Rejected votes (invalid contestant) = %,d\\n\",vote_result_counter[1]);\n        System.out.printf(\" - Rejected votes (voter over limit) = %,d\\n\\n\",vote_result_counter[2]);\n\n        String winnerName = \"<<UNKNOWN>>\";\n        long winnerVotes = -1;\n\n        try {\n            // initialize the database if this is the first connecting client, otherwise get existing configuration information\n            VoltTable[] vtResults = voltclient.callProcedure(\"Results\").getResults();\n\n            int rowCount = vtResults[0].getRowCount();\n            if (rowCount == 0) {\n                System.out.println(\" - No results to report.\");\n            } else {\n                for (int ii = 0; ii < rowCount; ii++) {  \n                    VoltTableRow row = vtResults[0].fetchRow(ii);\n                    String resultName = row.getString(0);\n                    long resultVotes = row.getLong(1);\n                    System.out.printf(\" - Contestant %s received %,d vote(s)\\n\",resultName,resultVotes);\n\n                    if (resultVotes > winnerVotes) {\n                        winnerVotes = resultVotes;\n                        winnerName = resultName;\n                    }\n                }\n            }\n        } catch (ProcCallException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n\n        System.out.printf(\"\\n - Contestant %s was the winner with %,d vote(s)\\n\",winnerName,winnerVotes);\n\n\n        System.out.println(\"\\n\");\n        System.out.println(\"*************************************************************************\");\n        System.out.println(\"System Statistics\");\n        System.out.println(\"*************************************************************************\");\n\n        System.out.printf(\" - Ran for %,.2f seconds\\n\",elapsedTimeSec);\n        System.out.printf(\" - Performed %,d Stored Procedure calls\\n\",num_sp_calls);\n        System.out.printf(\" - At %,.2f calls per second\\n\",num_sp_calls / elapsedTimeSec);\n        System.out.printf(\" - Average Latency = %.2f ms\\n\",(double) ((double) tot_execution_milliseconds / (double) tot_executions_latency));\n        System.out.printf(\" -   Latency   0ms -  25ms = %,d\\n\",latency_counter[0]);\n        System.out.printf(\" -   Latency  25ms -  50ms = %,d\\n\",latency_counter[1]);\n        System.out.printf(\" -   Latency  50ms -  75ms = %,d\\n\",latency_counter[2]);\n        System.out.printf(\" -   Latency  75ms - 100ms = %,d\\n\",latency_counter[3]);\n        System.out.printf(\" -   Latency 100ms - 125ms = %,d\\n\",latency_counter[4]);\n        System.out.printf(\" -   Latency 125ms - 150ms = %,d\\n\",latency_counter[5]);\n        System.out.printf(\" -   Latency 150ms - 175ms = %,d\\n\",latency_counter[6]);\n        System.out.printf(\" -   Latency 175ms - 200ms = %,d\\n\",latency_counter[7]);\n        System.out.printf(\" -   Latency 200ms+        = %,d\\n\",latency_counter[8]);\n\n        try {\n            voltclient.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n    }","id":70472,"modified_method":"public static void main(String args[]) {\n        if (args.length != 7) {\n            System.err.println(\"ClientVoter [number of contestants] [votes per phone number] \" +\n                    \"[transactions per second] [client feedback interval (seconds)] \" +\n                    \"[test duration (seconds)] [server list (comma separated)] [lag record delay (seconds)] \");\n            System.exit(1);\n        }\n\n        int maxContestant = Integer.valueOf(args[0]);\n        if ((maxContestant < 1) || (maxContestant > 12)) {\n            System.err.println(\"Number of contestants must be between 1 and 12\");\n            System.exit(1);\n        }\n\n        long maxVotesPerPhoneNumber = Long.valueOf(args[1]);\n        long transactions_per_second = Long.valueOf(args[2]);\n        long transactions_per_milli = transactions_per_second / 1000l;\n        long client_feedback_interval_secs = Long.valueOf(args[3]);\n        long test_duration_secs = Long.valueOf(args[4]);\n        long lag_latency_seconds = Long.valueOf(args[5]);\n        String serverList = args[6];\n        long lag_latency_millis = lag_latency_seconds * 1000l;\n        long thisOutstanding = 0;\n        long lastOutstanding = 0;\n\n        String[] contestantNames = {\"Edwina Burnam\",\n                                    \"Tabatha Gehling\",\n                                    \"Kelly Clauss\",\n                                    \"Jessie Alloway\",\n                                    \"Alana Bregman\",\n                                    \"Jessie Eichman\",\n                                    \"Allie Rogalski\",\n                                    \"Nita Coster\",\n                                    \"Kurt Walser\",\n                                    \"Ericka Dieter\",\n                                    \"Loraine Nygren\",\n                                    \"Tania Mattioli\"};\n\n        System.out.printf(\"Allowing %d votes per phone number\\n\",maxVotesPerPhoneNumber);\n        System.out.printf(\"Submitting %,d SP Calls/sec\\n\",transactions_per_second);\n        System.out.printf(\"Feedback interval = %,d second(s)\\n\",client_feedback_interval_secs);\n        System.out.printf(\"Running for %,d second(s)\\n\",test_duration_secs);\n        System.out.printf(\"Latency not recorded for %d second(s)\\n\",lag_latency_seconds);\n\n        long phoneNumber;\n        byte contestantNumber;\n\n        long transactions_this_second = 0;\n        long last_millisecond = System.currentTimeMillis();\n        long this_millisecond = System.currentTimeMillis();\n\n        final org.voltdb.client.Client voltclient = ClientFactory.createClient();\n\n        String[] voltServers = serverList.split(\",\");\n\n        for (String thisServer : voltServers) {\n            try {\n                thisServer = thisServer.trim();\n                System.out.printf(\"Connecting to server: '%s'\\n\",thisServer);\n\n                voltclient.createConnection(thisServer, \"program\", \"none\");\n            } catch (IOException e) {\n                e.printStackTrace();\n                System.exit(-1);\n            }\n        }\n\n        try {\n            /*\n             * Initialize the database if this is the first connecting client,\n             *  otherwise get existing configuration information\n             */\n            VoltTable[] vtInitialize =\n                voltclient.callProcedure(\"Initialize\", maxContestant, contestantNames).getResults();\n            maxContestant = (int) vtInitialize[0].fetchRow(0).getLong(0);\n            System.out.printf(\"Running for %d contestant(s)\\n\",maxContestant);\n        } catch (ProcCallException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n\n        java.util.Random rand = new java.util.Random();\n\n        long startTime = System.currentTimeMillis();\n        long endTime = startTime + (1000l * test_duration_secs);\n        long currentTime = startTime;\n        long lastFeedbackTime = startTime;\n        long num_sp_calls = 0;\n        long startRecordingLatency = startTime + lag_latency_millis;\n\n        AsyncCallback callBack = new AsyncCallback();\n\n        while (endTime > currentTime) {\n            num_sp_calls++;\n\n            phoneNumber = rand.nextLong() % 9999999999l;\n            contestantNumber = (byte) (((rand.nextInt(maxContestant) * rand.nextInt(maxContestant)) % maxContestant) + 1);\n            if ((num_sp_calls % 100) == 0) {\n                // introduce a potentially bad contestant number every 100 votes\n                contestantNumber = (byte) ((rand.nextInt(maxContestant) + 1) * 2);\n            }\n\n            try {\n                voltclient.callProcedure(callBack, \"Vote\", phoneNumber, contestantNumber, maxVotesPerPhoneNumber);\n            } catch (java.io.IOException e) {\n                e.printStackTrace();\n                if (e instanceof NoConnectionsException) {\n                    System.exit(-1);\n                }\n            }\n\n            transactions_this_second++;\n            if (transactions_this_second >= transactions_per_milli) {\n                this_millisecond = System.currentTimeMillis();\n                while (this_millisecond <= last_millisecond) {\n                    this_millisecond = System.currentTimeMillis();\n                }\n                last_millisecond = this_millisecond;\n                transactions_this_second = 0;\n            }\n\n            currentTime = System.currentTimeMillis();\n\n            if ((!checkLatency) && (currentTime >= startRecordingLatency)) {\n                // time to start recording latency information\n                checkLatency = true;\n            }\n\n            if (currentTime >= (lastFeedbackTime + (client_feedback_interval_secs * 1000))) {\n                final long elapsedTimeMillis2 = System.currentTimeMillis()-startTime;\n                lastFeedbackTime = currentTime;\n\n                final long runTimeMillis = endTime - startTime;\n\n                float elapsedTimeSec2 = elapsedTimeMillis2/1000F;\n                if (tot_executions_latency == 0) {\n                    tot_executions_latency = 1;\n                }\n\n                double percentComplete = ((double) elapsedTimeMillis2 / (double) runTimeMillis) * 100;\n                if (percentComplete > 100.0) {\n                    percentComplete = 100.0;\n                }\n\n                counterLock.lock();\n                try {\n                    thisOutstanding = num_sp_calls - tot_executions;\n\n                    double avgLatency = (double) tot_execution_milliseconds / (double) tot_executions_latency;\n\n                    System.out.printf(\"%.3f%% Complete | SP Calls: %,d at %,.2f SP/sec | outstanding = %d (%d) | min = %d | max = %d | avg = %.2f\\n\",percentComplete, num_sp_calls, (num_sp_calls / elapsedTimeSec2), thisOutstanding,(thisOutstanding - lastOutstanding), min_execution_milliseconds, max_execution_milliseconds, avgLatency);\n\n                    lastOutstanding = thisOutstanding;\n                } finally {\n                    counterLock.unlock();\n                }\n            }\n        }\n\n        try {\n            voltclient.drain();\n        } catch (NoConnectionsException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n\n        long elapsedTimeMillis = System.currentTimeMillis()-startTime;\n        float elapsedTimeSec = elapsedTimeMillis/1000F;\n\n        System.out.println(\"\\n\");\n        System.out.println(\"*************************************************************************\");\n        System.out.println(\"Voting Results\");\n        System.out.println(\"*************************************************************************\");\n\n        System.out.printf(\" - Accepted votes = %,d\\n\",vote_result_counter[0]);\n        System.out.printf(\" - Rejected votes (invalid contestant) = %,d\\n\",vote_result_counter[1]);\n        System.out.printf(\" - Rejected votes (voter over limit) = %,d\\n\\n\",vote_result_counter[2]);\n\n        String winnerName = \"<<UNKNOWN>>\";\n        long winnerVotes = -1;\n\n        try {\n            VoltTable[] vtResults = voltclient.callProcedure(\"Results\").getResults();\n\n            int rowCount = vtResults[0].getRowCount();\n            if (rowCount == 0) {\n                System.out.println(\" - No results to report.\");\n            } else {\n                for (int ii = 0; ii < rowCount; ii++) {\n                    VoltTableRow row = vtResults[0].fetchRow(ii);\n                    String resultName = row.getString(0);\n                    long resultVotes = row.getLong(1);\n                    System.out.printf(\" - Contestant %s received %,d vote(s)\\n\",resultName,resultVotes);\n\n                    if (resultVotes > winnerVotes) {\n                        winnerVotes = resultVotes;\n                        winnerName = resultName;\n                    }\n                }\n            }\n        } catch (ProcCallException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n\n        System.out.printf(\"\\n - Contestant %s was the winner with %,d vote(s)\\n\",winnerName,winnerVotes);\n\n\n        System.out.println(\"\\n\");\n        System.out.println(\"*************************************************************************\");\n        System.out.println(\"System Statistics\");\n        System.out.println(\"*************************************************************************\");\n\n        System.out.printf(\" - Ran for %,.2f seconds\\n\",elapsedTimeSec);\n        System.out.printf(\" - Performed %,d Stored Procedure calls\\n\",num_sp_calls);\n        System.out.printf(\" - At %,.2f calls per second\\n\",num_sp_calls / elapsedTimeSec);\n        System.out.printf(\" - Average Latency = %.2f ms\\n\",((double) tot_execution_milliseconds / (double) tot_executions_latency));\n        System.out.printf(\" -   Latency   0ms -  25ms = %,d\\n\",latency_counter[0]);\n        System.out.printf(\" -   Latency  25ms -  50ms = %,d\\n\",latency_counter[1]);\n        System.out.printf(\" -   Latency  50ms -  75ms = %,d\\n\",latency_counter[2]);\n        System.out.printf(\" -   Latency  75ms - 100ms = %,d\\n\",latency_counter[3]);\n        System.out.printf(\" -   Latency 100ms - 125ms = %,d\\n\",latency_counter[4]);\n        System.out.printf(\" -   Latency 125ms - 150ms = %,d\\n\",latency_counter[5]);\n        System.out.printf(\" -   Latency 150ms - 175ms = %,d\\n\",latency_counter[6]);\n        System.out.printf(\" -   Latency 175ms - 200ms = %,d\\n\",latency_counter[7]);\n        System.out.printf(\" -   Latency 200ms+        = %,d\\n\",latency_counter[8]);\n\n        try {\n            voltclient.close();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n    }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n        public synchronized void clientCallback(ClientResponse clientResponse) {\n            final byte status = clientResponse.getStatus();\n\n            if (status != ClientResponse.SUCCESS) {\n                System.err.println(\"Failed to execute!!!\");\n                System.err.println(clientResponse.getStatusString());\n                System.err.println(clientResponse.getException());\n                System.exit(-1);\n            } else {\n                tot_executions++;\n                pClientCallback(clientResponse.getResults(), clientResponse.getClientRoundtrip());\n            }\n        }","id":70473,"modified_method":"@Override\n        public void clientCallback(ClientResponse clientResponse) {\n            final byte status = clientResponse.getStatus();\n            if (status != ClientResponse.SUCCESS) {\n                System.err.println(\"Failed to execute!!!\");\n                System.err.println(clientResponse.getStatusString());\n                System.err.println(clientResponse.getException());\n                System.exit(-1);\n            } else {\n                counterLock.lock();\n                try {\n                    tot_executions++;\n                    VoltTable vtResults[] = clientResponse.getResults();\n                    int vote_result = (int) vtResults[0].fetchRow(0).getLong(0);\n\n                    vote_result_counter[vote_result]++;\n\n                    if (checkLatency) {\n                        long execution_time =  clientResponse.getClientRoundtrip();\n\n                        tot_executions_latency++;\n                        tot_execution_milliseconds += execution_time;\n\n                        if (execution_time < min_execution_milliseconds) {\n                            min_execution_milliseconds = execution_time;\n                        }\n\n                        if (execution_time > max_execution_milliseconds) {\n                            max_execution_milliseconds = execution_time;\n                        }\n\n                        // change latency to bucket\n                        int latency_bucket = (int) (execution_time / 25l);\n                        if (latency_bucket > 8) {\n                            latency_bucket = 8;\n                        }\n                        latency_counter[latency_bucket]++;\n                    }\n                } finally {\n                    counterLock.unlock();\n                }\n            }\n        }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public VoltTable[] run(\n        int maxContestant,\n        String[] contestantArray\n    ) {\n        int numContestants = 1;\n \n        voltQueueSQL(checkContestant);\n        VoltTable results1[] = voltExecuteSQL();\n\n        if (results1[0].fetchRow(0).getLong(0) == 0) {\n            // insert contestants\n            for (int i=0; i < maxContestant; i++) {\n                voltQueueSQL(insertContestant, contestantArray[i], i+1);\n            }\n\n            VoltTable results2[] = voltExecuteSQL();\n\n            numContestants = maxContestant;\n        } else {\n            // get number of contestants\n            numContestants = (int) results1[0].fetchRow(0).getLong(0);\n        }\n\n        VoltTable vtContestants = new VoltTable(new VoltTable.ColumnInfo(\"numContestants\",VoltType.INTEGER));\n        Object row[] = new Object[1];\n        row[0] = numContestants;\n        vtContestants.addRow(row);\n\n        final VoltTable[] vtReturn = {vtContestants};\n\n        return vtReturn;\n    }","id":70474,"modified_method":"public VoltTable[] run(\n        int maxContestant,\n        String[] contestantArray\n    ) {\n        int numContestants = 1;\n\n        voltQueueSQL(checkContestant);\n        VoltTable results1[] = voltExecuteSQL();\n\n        if (results1[0].fetchRow(0).getLong(0) == 0) {\n            // insert contestants\n            for (int i=0; i < maxContestant; i++) {\n                voltQueueSQL(insertContestant, contestantArray[i], i+1);\n            }\n\n            voltExecuteSQL();\n\n            numContestants = maxContestant;\n        } else {\n            // get number of contestants\n            numContestants = (int) results1[0].fetchRow(0).getLong(0);\n        }\n\n        VoltTable vtContestants = new VoltTable(new VoltTable.ColumnInfo(\"numContestants\",VoltType.INTEGER));\n        Object row[] = new Object[1];\n        row[0] = numContestants;\n        vtContestants.addRow(row);\n\n        final VoltTable[] vtReturn = {vtContestants};\n\n        return vtReturn;\n    }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public VoltTable[] run( String hello, \n                          String world, \n                          String language) \n      throws VoltAbortException {\n          voltQueueSQL( sql, hello, world, language );\n          VoltTable[] retval = voltExecuteSQL();\n          return null;\n      }","id":70475,"modified_method":"public VoltTable[] run( String hello,\n                          String world,\n                          String language)\n      throws VoltAbortException {\n          voltQueueSQL( sql, hello, world, language );\n          voltExecuteSQL();\n          return null;\n      }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private static boolean fetchData() {\n        // We don't need anything special for this.}\n        // Let's do some pretend actions...\n        int id;\n        String model, country;\n        double x, y;\n        int rowCount = 0;\n        VoltTable[] locationresult = null;\n\n        //First fetch all the location data\n        try {\n            locationresult = db.callProcedure(GetLocationData.class.getSimpleName() );\n            //assert locationresult.length == 1;\n            rowCount = locationresult[0].getRowCount();\n\n        }\n        catch (java.io.IOException e) {\n            e.printStackTrace();\n        }\n        catch (org.voltdb.client.ProcCallException e) {\n            System.out.println(\"Get Location data failed: \" + e.getMessage());\n            return(false);\n        }\n\n        // Now read through it row by row and update our local copy and map.\n        if (rowCount == 0) { return(false); }\n\n        for (int ii = 0; ii < rowCount; ii++) {\n            VoltTableRow row = locationresult[0].fetchRow(ii);\n            id = (int) row.getLong(0);\n            y = row.getDouble(1);\n            x = row.getDouble(2);\n\n            //  Add the data to our local map. If the update fails, it is a new satellite\n            // and we have to add it to the list first.\n            if (!Board.updateSat(id,x,y)) {\n                System.out.printf(\"Need to create Satellite %d\\n\",id);\n                int satrowCount = 0;\n                VoltTable[] satelliteresult = null;\n                try {\n                    satelliteresult = db.callProcedure(GetSatelliteData.class.getSimpleName(),id );\n                    assert satelliteresult.length == 1;\n                    satrowCount = satelliteresult[0].getRowCount();\n                }\n                catch (java.io.IOException e) {\n                    e.printStackTrace();\n                }\n                catch (org.voltdb.client.ProcCallException e) {\n                    System.out.println(\"Get Satellite data failed: \" + e.getMessage());\n                }\n                if (satrowCount == 0) {\n                    System.out.println(\"What? No satellite data to match location data...\");\n                    model=\"unknown\";\n                    country=\"unknown\";\n                }\n                else {\n                    final VoltTableRow satdata= satelliteresult[0].fetchRow(0);\n                    model = satdata.getString(0);\n                    country = satdata.getString(1);\n                }\n\n                Board.addSat(id,model, country, x, y);\n            }\n        }\n\n        //Now update the display\n        frame.update(frame.getGraphics());\n\n        return true;\n    }","id":70476,"modified_method":"private static boolean fetchData() {\n        // We don't need anything special for this.}\n        // Let's do some pretend actions...\n        int id;\n        String model, country;\n        double x, y;\n        int rowCount = 0;\n        VoltTable[] locationresult = null;\n\n        //First fetch all the location data\n        try {\n            locationresult = db.callProcedure(GetLocationData.class.getSimpleName() ).getResults();\n            //assert locationresult.length == 1;\n            rowCount = locationresult[0].getRowCount();\n\n        }\n        catch (java.io.IOException e) {\n            e.printStackTrace();\n            if (e instanceof NoConnectionsException) {\n                System.exit(-1);\n            }\n        }\n        catch (org.voltdb.client.ProcCallException e) {\n            System.out.println(\"Get Location data failed: \" + e.getMessage());\n            return(false);\n        }\n\n        // Now read through it row by row and update our local copy and map.\n        if (rowCount == 0) { return(false); }\n\n        for (int ii = 0; ii < rowCount; ii++) {\n            VoltTableRow row = locationresult[0].fetchRow(ii);\n            id = (int) row.getLong(0);\n            y = row.getDouble(1);\n            x = row.getDouble(2);\n\n            //  Add the data to our local map. If the update fails, it is a new satellite\n            // and we have to add it to the list first.\n            if (!Board.updateSat(id,x,y)) {\n                System.out.printf(\"Need to create Satellite %d\\n\",id);\n                int satrowCount = 0;\n                VoltTable[] satelliteresult = null;\n                try {\n                    satelliteresult = db.callProcedure(GetSatelliteData.class.getSimpleName(),id ).getResults();\n                    assert satelliteresult.length == 1;\n                    satrowCount = satelliteresult[0].getRowCount();\n                }\n                catch (java.io.IOException e) {\n                    e.printStackTrace();\n                    if (e instanceof NoConnectionsException) {\n                        System.exit(-1);\n                    }\n                }\n                catch (org.voltdb.client.ProcCallException e) {\n                    System.out.println(\"Get Satellite data failed: \" + e.getMessage());\n                }\n                if (satrowCount == 0) {\n                    System.out.println(\"What? No satellite data to match location data...\");\n                    model=\"unknown\";\n                    country=\"unknown\";\n                }\n                else {\n                    final VoltTableRow satdata= satelliteresult[0].fetchRow(0);\n                    model = satdata.getString(0);\n                    country = satdata.getString(1);\n                }\n\n                Board.addSat(id,model, country, x, y);\n            }\n        }\n\n        //Now update the display\n        frame.update(frame.getGraphics());\n\n        return true;\n    }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private static void pause(double secs) {\n        try {\n            Thread.sleep((long) (secs*1000) );\n        }\n        catch (Exception e) {\n            System.out.print(e.getMessage());\n            System.exit(1);\n        }\n\n    }","id":70477,"modified_method":"private static void pause(double secs) {\n        try {\n            Thread.sleep((long) (secs*1000) );\n        }\n        catch (InterruptedException e) {\n            System.out.print(e.getMessage());\n            System.exit(1);\n        }\n\n    }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public VoltTable[] run(\n            long phoneNumber,\n            byte contestantNumber,\n            long maxVotesPerPhoneNumber\n    ) {\n        boolean validVoter = false;\n        boolean validContestant = false;\n        int returnValue = 0;\n\n        voltQueueSQL(checkContestant, contestantNumber);\n        voltQueueSQL(checkVoter, phoneNumber);\n        VoltTable resultsCheck[] = voltExecuteSQL();\n\n        if (resultsCheck[0].getRowCount() > 0) {\n            // valid contestant\n            validContestant = true;\n\n            if (resultsCheck[1].getRowCount() == 0) {\n                // phone number has not yet voted\n                validVoter = true;\n            } else if (resultsCheck[1].fetchRow(0).getLong(0) < maxVotesPerPhoneNumber) {\n                // phone number still has votes\n                validVoter = true;\n            }\n        }\n\n        if (validContestant && validVoter) {\n            voltQueueSQL(insertVote, phoneNumber, contestantNumber);\n            VoltTable results2[] = voltExecuteSQL();\n            returnValue = 0;\n        } else if (!validContestant) {\n            returnValue = 1;\n        } else {\n            returnValue = 2;\n        }\n\n        // return a 1 row 2 column VoltTable\n        //   column return_value : 0 = successful vote\n        //                         1 = invalid contestant number\n        //                         2 = voter over vote limit\n        VoltTable vtLoad = new VoltTable(new VoltTable.ColumnInfo(\"return_value\",VoltType.INTEGER));\n        Object row[] = new Object[1];\n        row[0] = returnValue;\n        vtLoad.addRow(row);\n\n        final VoltTable[] vtReturn = {vtLoad};\n\n        return vtReturn;\n    }","id":70478,"modified_method":"public VoltTable[] run(\n            long phoneNumber,\n            byte contestantNumber,\n            long maxVotesPerPhoneNumber\n    ) {\n        boolean validVoter = false;\n        boolean validContestant = false;\n        int returnValue = 0;\n\n        voltQueueSQL(checkContestant, contestantNumber);\n        voltQueueSQL(checkVoter, phoneNumber);\n        VoltTable resultsCheck[] = voltExecuteSQL();\n\n        if (resultsCheck[0].getRowCount() > 0) {\n            // valid contestant\n            validContestant = true;\n\n            if (resultsCheck[1].getRowCount() == 0) {\n                // phone number has not yet voted\n                validVoter = true;\n            } else if (resultsCheck[1].fetchRow(0).getLong(0) < maxVotesPerPhoneNumber) {\n                // phone number still has votes\n                validVoter = true;\n            }\n        }\n\n        if (validContestant && validVoter) {\n            voltQueueSQL(insertVote, phoneNumber, contestantNumber);\n            voltExecuteSQL();\n            returnValue = 0;\n        } else if (!validContestant) {\n            returnValue = 1;\n        } else {\n            returnValue = 2;\n        }\n\n        // return a 1 row 2 column VoltTable\n        //   column return_value : 0 = successful vote\n        //                         1 = invalid contestant number\n        //                         2 = voter over vote limit\n        VoltTable vtLoad = new VoltTable(new VoltTable.ColumnInfo(\"return_value\",VoltType.INTEGER));\n        Object row[] = new Object[1];\n        row[0] = returnValue;\n        vtLoad.addRow(row);\n\n        final VoltTable[] vtReturn = {vtLoad};\n\n        return vtReturn;\n    }","commit_id":"d4b9a9f09f013f5ef7705fa650188ef3826f6421","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testBigFatBlobs() throws Exception {\n        String simpleSchema =\n            \"create table blah (\" +\n            \"ival bigint default 0 not null, \" +\n            \"b varbinary(256) default null, \" +\n            \"s varchar(256) default null, \" +\n            \"PRIMARY KEY(ival));\";\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(simpleSchema);\n        builder.addProcedures(BigFatBlobAndStringMD5.class);\n        boolean success = builder.compile(Configuration.getPathToCatalogForTest(\"bigfatblobs.jar\"), 1, 1, 0);\n        assertTrue(\"Failed to compile catalog\", success);\n        MiscUtils.copyFile(builder.getPathToDeployment(), Configuration.getPathToCatalogForTest(\"bigfatblobs.xml\"));\n\n        VoltDB.Configuration config = new VoltDB.Configuration();\n        config.m_pathToCatalog = Configuration.getPathToCatalogForTest(\"bigfatblobs.jar\");\n        config.m_pathToDeployment = Configuration.getPathToCatalogForTest(\"bigfatblobs.xml\");\n        config.m_backend = BackendTarget.NATIVE_EE_JNI;\n        ServerThread localServer = new ServerThread(config);\n        localServer.start();\n        localServer.waitForInitialization();\n\n        try {\n            Client client = ClientFactory.createClient();\n            client.createConnection(\"localhost\");\n            try {\n                byte[] b = new byte[5000000];\n                char[] c = new char[5000000];\n                for (int i = 0; i < b.length; i++) {\n                    b[i] = (byte) (i % 256);\n                    c[i] = (char) (i % 128);\n                }\n                String s = new String(c);\n                ClientResponse cr = client.callProcedure(\"BigFatBlobAndStringMD5\", b, s);\n                assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n                VoltTable t = cr.getResults()[0];\n                assertEquals(1, t.getRowCount());\n                assertTrue(t.advanceRow());\n                // Validate MD5 sums instead of the actual data. The returned VoltTable\n                // can't hold it anyway due to a 1 MB limit.\n                MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n                assertTrue(Arrays.equals(md5.digest(b), t.getVarbinary(\"b_md5\")));\n                assertTrue(Arrays.equals(md5.digest(s.getBytes()), t.getVarbinary(\"s_md5\")));\n            }\n            finally {\n                client.close();\n            }\n        }\n        finally {\n            // stop execution\n            VoltDB.instance().shutdown(localServer);\n        }\n    }","id":70479,"modified_method":"public void testBigFatBlobs() throws Exception {\n        String simpleSchema =\n            \"create table blah (\" +\n            \"ival bigint default 0 not null, \" +\n            \"b varbinary(256) default null, \" +\n            \"s varchar(256) default null, \" +\n            \"PRIMARY KEY(ival));\";\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(simpleSchema);\n        builder.addProcedures(BigFatBlobAndStringMD5.class);\n        boolean success = builder.compile(Configuration.getPathToCatalogForTest(\"bigfatblobs.jar\"), 1, 1, 0);\n        assertTrue(\"Failed to compile catalog\", success);\n        MiscUtils.copyFile(builder.getPathToDeployment(), Configuration.getPathToCatalogForTest(\"bigfatblobs.xml\"));\n\n        VoltDB.Configuration config = new VoltDB.Configuration();\n        config.m_pathToCatalog = Configuration.getPathToCatalogForTest(\"bigfatblobs.jar\");\n        config.m_pathToDeployment = Configuration.getPathToCatalogForTest(\"bigfatblobs.xml\");\n        config.m_backend = BackendTarget.NATIVE_EE_JNI;\n\n        ServerThread localServer = null;\n        Client client = null;\n\n        try {\n            localServer = new ServerThread(config);\n            localServer.start();\n            localServer.waitForInitialization();\n\n            client = ClientFactory.createClient();\n            client.createConnection(\"localhost\");\n\n            byte[] b = new byte[5000000];\n            char[] c = new char[5000000];\n            for (int i = 0; i < b.length; i++) {\n                b[i] = (byte) (i % 256);\n                c[i] = (char) (i % 128);\n            }\n            String s = new String(c);\n            ClientResponse cr = client.callProcedure(\"BigFatBlobAndStringMD5\", b, s);\n            assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n            VoltTable t = cr.getResults()[0];\n            assertEquals(1, t.getRowCount());\n            assertTrue(t.advanceRow());\n            // Validate MD5 sums instead of the actual data. The returned VoltTable\n            // can't hold it anyway due to a 1 MB limit.\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            assertTrue(Arrays.equals(md5.digest(b), t.getVarbinary(\"b_md5\")));\n            assertTrue(Arrays.equals(md5.digest(s.getBytes()), t.getVarbinary(\"s_md5\")));\n        }\n        finally {\n            // stop execution\n            if (client != null) {\n                client.close();\n            }\n            if (localServer != null) {\n                localServer.shutdown();\n                localServer.join();\n            }\n        }\n    }","commit_id":"7fa4036efe5985d694bc4382ec4d67a207e4cc57","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testTPCCCustomerLookup() throws Exception {\n\n        // constants used int the benchmark\n        final short W_ID = 3;\n        final byte D_ID = 7;\n        final int C_ID = 42;\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addSchema(TPCCProjectBuilder.ddlURL);\n        for (String pair[] : TPCCProjectBuilder.partitioning) {\n            builder.addPartitionInfo(pair[0], pair[1]);\n        }\n        builder.addStmtProcedure(\"InsertCustomer\", \"INSERT INTO CUSTOMER VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\", \"CUSTOMER.C_W_ID: 2\");\n        builder.addStmtProcedure(\"Fake1\", \"SELECT C_ID, C_FIRST, C_MIDDLE, C_LAST, C_STREET_1, C_STREET_2, C_CITY, C_STATE, C_ZIP, C_PHONE, C_SINCE, C_CREDIT, C_CREDIT_LIM, C_DISCOUNT, C_BALANCE, C_YTD_PAYMENT, C_PAYMENT_CNT, C_DATA FROM CUSTOMER WHERE C_LAST = ? AND C_D_ID = ? AND C_W_ID = ? ORDER BY C_FIRST;\");\n\n        builder.addProcedures(FakeCustomerLookup.class);\n        boolean success = builder.compile(Configuration.getPathToCatalogForTest(\"binarytest2.jar\"), 1, 1, 0);\n        assert(success);\n        MiscUtils.copyFile(builder.getPathToDeployment(), Configuration.getPathToCatalogForTest(\"binarytest2.xml\"));\n\n        VoltDB.Configuration config = new VoltDB.Configuration();\n        config.m_pathToCatalog = Configuration.getPathToCatalogForTest(\"binarytest2.jar\");\n        config.m_pathToDeployment = Configuration.getPathToCatalogForTest(\"binarytest2.xml\");\n        config.m_backend = BackendTarget.NATIVE_EE_JNI;\n        ServerThread localServer = new ServerThread(config);\n        localServer.start();\n        localServer.waitForInitialization();\n\n        Client client = ClientFactory.createClient();\n        client.createConnection(\"localhost\");\n\n        // insert data\n        // long c_id, long c_d_id, long c_w_id, String c_first, String c_middle,\n        // String c_last, String c_street_1, String c_street_2, String d_city,\n        // String d_state, String d_zip, String c_phone, Date c_since, String\n        // c_credit, double c_credit_lim, double c_discount, double c_balance,\n        // double c_ytd_payment, double c_payment_cnt, double c_delivery_cnt,\n        // String c_data\n        final double initialBalance = 15.75;\n        final double initialYTD = 15241.45;\n        VoltTable customer1 = client.callProcedure(\"InsertCustomer\", C_ID, D_ID,\n                W_ID, \"I\", \"Be\", \"lastname\", \"Place\", \"Place2\", \"BiggerPlace\",\n                \"AL\", \"91083\", \"(193) 099 - 9082\", new TimestampType(), \"BC\",\n                19298943.12, .13, initialBalance, initialYTD, 0L, 15L,\n                \"Some History\").getResults()[0];\n        // check for successful insertion.\n        assertEquals(1L, customer1.asScalarLong());\n\n        VoltTable customer2 = client.callProcedure(\"InsertCustomer\", C_ID + 1,\n                D_ID, W_ID, \"We\", \"R\", \"Customer\", \"Random Department\",\n                \"Place2\", \"BiggerPlace\", \"AL\", \"13908\", \"(913) 909 - 0928\",\n                new TimestampType(), \"GC\", 19298943.12, .13, initialBalance, initialYTD,\n                1L, 15L, \"Some History\").getResults()[0];\n        // check for successful insertion.\n        assertEquals(1L, customer2.asScalarLong());\n\n        VoltTable customer3 = client.callProcedure(\"InsertCustomer\", C_ID + 2,\n                D_ID, W_ID, \"Who\", \"Is\", \"Customer\", \"Receiving\",\n                \"450 Mass F.X.\", \"BiggerPlace\", \"CI\", \"91083\",\n                \"(541) 931 - 0928\", new TimestampType(), \"GC\", 19899324.21, .13,\n                initialBalance, initialYTD, 2L, 15L, \"Some History\").getResults()[0];\n        // check for successful insertion.\n        assertEquals(1L, customer3.asScalarLong());\n\n        VoltTable customer4 = client.callProcedure(\"InsertCustomer\", C_ID + 3,\n                D_ID, W_ID, \"ICanBe\", \"\", \"Customer\", \"street\", \"place\",\n                \"BiggerPlace\", \"MA\", \"91083\", \"(913) 909 - 0928\", new TimestampType(),\n                \"GC\", 19298943.12, .13, initialBalance, initialYTD, 3L, 15L,\n                \"Some History\").getResults()[0];\n        // check for successful insertion.\n        assertEquals(1L, customer4.asScalarLong());\n\n        // make sure strings as bytes works\n        ClientResponse cr = client.callProcedure(\"Fake1\", \"Customer\".getBytes(\"UTF-8\"), D_ID, W_ID);\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        assertEquals(3, cr.getResults()[0].getRowCount());\n\n        cr = client.callProcedure(\"Fake1\", \"Customer\", D_ID, W_ID);\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        assertEquals(3, cr.getResults()[0].getRowCount());\n\n        cr = client.callProcedure(\"FakeCustomerLookup\", W_ID, W_ID, D_ID, \"Customer\".getBytes(\"UTF-8\"));\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n\n        // stop execution\n        VoltDB.instance().shutdown(localServer);\n    }","id":70480,"modified_method":"public void testTPCCCustomerLookup() throws Exception {\n\n        // constants used int the benchmark\n        final short W_ID = 3;\n        final byte D_ID = 7;\n        final int C_ID = 42;\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addSchema(TPCCProjectBuilder.ddlURL);\n        for (String pair[] : TPCCProjectBuilder.partitioning) {\n            builder.addPartitionInfo(pair[0], pair[1]);\n        }\n        builder.addStmtProcedure(\"InsertCustomer\", \"INSERT INTO CUSTOMER VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\", \"CUSTOMER.C_W_ID: 2\");\n        builder.addStmtProcedure(\"Fake1\", \"SELECT C_ID, C_FIRST, C_MIDDLE, C_LAST, C_STREET_1, C_STREET_2, C_CITY, C_STATE, C_ZIP, C_PHONE, C_SINCE, C_CREDIT, C_CREDIT_LIM, C_DISCOUNT, C_BALANCE, C_YTD_PAYMENT, C_PAYMENT_CNT, C_DATA FROM CUSTOMER WHERE C_LAST = ? AND C_D_ID = ? AND C_W_ID = ? ORDER BY C_FIRST;\");\n\n        builder.addProcedures(FakeCustomerLookup.class);\n        boolean success = builder.compile(Configuration.getPathToCatalogForTest(\"binarytest2.jar\"), 1, 1, 0);\n        assert(success);\n        MiscUtils.copyFile(builder.getPathToDeployment(), Configuration.getPathToCatalogForTest(\"binarytest2.xml\"));\n\n        ServerThread localServer = null;\n        Client client = null;\n\n        try {\n            VoltDB.Configuration config = new VoltDB.Configuration();\n            config.m_pathToCatalog = Configuration.getPathToCatalogForTest(\"binarytest2.jar\");\n            config.m_pathToDeployment = Configuration.getPathToCatalogForTest(\"binarytest2.xml\");\n            config.m_backend = BackendTarget.NATIVE_EE_JNI;\n            localServer = new ServerThread(config);\n            localServer.start();\n            localServer.waitForInitialization();\n\n            client = ClientFactory.createClient();\n            client.createConnection(\"localhost\");\n\n            // insert data\n            // long c_id, long c_d_id, long c_w_id, String c_first, String c_middle,\n            // String c_last, String c_street_1, String c_street_2, String d_city,\n            // String d_state, String d_zip, String c_phone, Date c_since, String\n            // c_credit, double c_credit_lim, double c_discount, double c_balance,\n            // double c_ytd_payment, double c_payment_cnt, double c_delivery_cnt,\n            // String c_data\n            final double initialBalance = 15.75;\n            final double initialYTD = 15241.45;\n            VoltTable customer1 = client.callProcedure(\"InsertCustomer\", C_ID, D_ID,\n                    W_ID, \"I\", \"Be\", \"lastname\", \"Place\", \"Place2\", \"BiggerPlace\",\n                    \"AL\", \"91083\", \"(193) 099 - 9082\", new TimestampType(), \"BC\",\n                    19298943.12, .13, initialBalance, initialYTD, 0L, 15L,\n                    \"Some History\").getResults()[0];\n            // check for successful insertion.\n            assertEquals(1L, customer1.asScalarLong());\n\n            VoltTable customer2 = client.callProcedure(\"InsertCustomer\", C_ID + 1,\n                    D_ID, W_ID, \"We\", \"R\", \"Customer\", \"Random Department\",\n                    \"Place2\", \"BiggerPlace\", \"AL\", \"13908\", \"(913) 909 - 0928\",\n                    new TimestampType(), \"GC\", 19298943.12, .13, initialBalance, initialYTD,\n                    1L, 15L, \"Some History\").getResults()[0];\n            // check for successful insertion.\n            assertEquals(1L, customer2.asScalarLong());\n\n            VoltTable customer3 = client.callProcedure(\"InsertCustomer\", C_ID + 2,\n                    D_ID, W_ID, \"Who\", \"Is\", \"Customer\", \"Receiving\",\n                    \"450 Mass F.X.\", \"BiggerPlace\", \"CI\", \"91083\",\n                    \"(541) 931 - 0928\", new TimestampType(), \"GC\", 19899324.21, .13,\n                    initialBalance, initialYTD, 2L, 15L, \"Some History\").getResults()[0];\n            // check for successful insertion.\n            assertEquals(1L, customer3.asScalarLong());\n\n            VoltTable customer4 = client.callProcedure(\"InsertCustomer\", C_ID + 3,\n                    D_ID, W_ID, \"ICanBe\", \"\", \"Customer\", \"street\", \"place\",\n                    \"BiggerPlace\", \"MA\", \"91083\", \"(913) 909 - 0928\", new TimestampType(),\n                    \"GC\", 19298943.12, .13, initialBalance, initialYTD, 3L, 15L,\n                    \"Some History\").getResults()[0];\n            // check for successful insertion.\n            assertEquals(1L, customer4.asScalarLong());\n\n            // make sure strings as bytes works\n            ClientResponse cr = client.callProcedure(\"Fake1\", \"Customer\".getBytes(\"UTF-8\"), D_ID, W_ID);\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n            assertEquals(3, cr.getResults()[0].getRowCount());\n\n            cr = client.callProcedure(\"Fake1\", \"Customer\", D_ID, W_ID);\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n            assertEquals(3, cr.getResults()[0].getRowCount());\n\n            cr = client.callProcedure(\"FakeCustomerLookup\", W_ID, W_ID, D_ID, \"Customer\".getBytes(\"UTF-8\"));\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        }\n        finally {\n            // stop execution\n            if (client != null) {\n                client.close();\n            }\n            if (localServer != null) {\n                localServer.shutdown();\n                localServer.join();\n            }\n        }\n    }","commit_id":"7fa4036efe5985d694bc4382ec4d67a207e4cc57","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testVarbinary() throws Exception {\n        String simpleSchema =\n            \"create table blah (\" +\n            \"ival bigint default 0 not null, \" +\n            \"b varbinary(256) default null, \" +\n            \"s varchar(256) default null,\" +\n            \"bs varbinary(2) default null,\" +\n            \"PRIMARY KEY(ival));\\n\" +\n            \"create index idx on blah (ival,s);\";\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(simpleSchema);\n        builder.addPartitionInfo(\"blah\", \"ival\");\n        builder.addStmtProcedure(\"Insert\", \"insert into blah values (?, ?, ?, ?);\", null);\n        builder.addStmtProcedure(\"Select\", \"select * from blah;\", null);\n        builder.addStmtProcedure(\"Update\", \"update blah set b = ? where ival = ?\", null);\n        builder.addStmtProcedure(\"FindString\", \"select * from blah where ival = ? and s = ?\", null);\n        builder.addStmtProcedure(\"LiteralUpdate\", \"update blah set b = '0a1A' where ival = 5\", null);\n        builder.addStmtProcedure(\"LiteralInsert\", \"insert into blah values (13, 'aabbcc', 'hi', 'aabb');\", null);\n        builder.addProcedures(VarbinaryStringLookup.class);\n        boolean success = builder.compile(Configuration.getPathToCatalogForTest(\"binarytest.jar\"), 1, 1, 0);\n        assertTrue(success);\n        MiscUtils.copyFile(builder.getPathToDeployment(), Configuration.getPathToCatalogForTest(\"binarytest.xml\"));\n\n        VoltDB.Configuration config = new VoltDB.Configuration();\n        config.m_pathToCatalog = Configuration.getPathToCatalogForTest(\"binarytest.jar\");\n        config.m_pathToDeployment = Configuration.getPathToCatalogForTest(\"binarytest.xml\");\n        config.m_backend = BackendTarget.NATIVE_EE_JNI;\n        ServerThread localServer = new ServerThread(config);\n        localServer.start();\n        localServer.waitForInitialization();\n\n        Client client = ClientFactory.createClient();\n        client.createConnection(\"localhost\");\n\n        // insert data\n        ClientResponse cr = client.callProcedure(\"Insert\", 5, new byte[] { 'a', 'b', 'c', 'd' }, \"hi\", new byte[] { 'a' });\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n\n        // make sure strings as bytes works\n        cr = client.callProcedure(\"FindString\", 5, \"hi\".getBytes(\"UTF-8\"));\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        assertEquals(1, cr.getResults()[0].getRowCount());\n        cr = client.callProcedure(\"VarbinaryStringLookup\", 5, \"hi\".getBytes(\"UTF-8\"), \"hi\");\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        assertEquals(1, cr.getResults()[0].getRowCount());\n        assertEquals(1, cr.getResults()[1].getRowCount());\n\n        // literal update\n        cr = client.callProcedure(\"LiteralUpdate\");\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        assertEquals(1, cr.getResults()[0].getRowCount());\n        assertEquals(1, cr.getResults()[0].asScalarLong());\n\n        // see if we can get the binary value from the '0a1A' update above\n        cr = client.callProcedure(\"Select\");\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        VoltTable t = cr.getResults()[0];\n        assertEquals(1, t.getRowCount());\n        t.resetRowPosition();\n        t.advanceRow();\n        byte[] vb = t.getVarbinary(\"b\");\n        assertEquals(2, vb.length);\n        assertEquals((byte) 10, vb[0]);\n        assertEquals((byte) 26, vb[1]);\n\n        // try again with generic call\n        vb = (byte[]) t.get(\"b\", VoltType.VARBINARY);\n        assertEquals(2, vb.length);\n        assertEquals((byte) 10, vb[0]);\n        assertEquals((byte) 26, vb[1]);\n\n        // insert hex data\n        cr = client.callProcedure(\"Insert\", 9, \"aabbccdd\", \"hi\", \"aabb\");\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n\n        // literal inserts\n        cr = client.callProcedure(\"LiteralInsert\");\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        assertEquals(1, cr.getResults()[0].getRowCount());\n        assertEquals(1, cr.getResults()[0].asScalarLong());\n\n        // adhoc queries\n        cr = client.callProcedure(\"@AdHoc\", \"update blah set b = 'Bb01' where ival = 5\");\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        assertEquals(1, cr.getResults()[0].getRowCount());\n        assertEquals(1, cr.getResults()[0].asScalarLong());\n        cr = client.callProcedure(\"@AdHoc\", \"insert into blah values (12, 'aabbcc', 'hi', 'aabb');\");\n        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n        assertEquals(1, cr.getResults()[0].getRowCount());\n        assertEquals(1, cr.getResults()[0].asScalarLong());\n\n        // try bad value insert for normal query\n        try {\n            cr = client.callProcedure(\"Insert\", 6, new byte[] { 'a' }, \"hi\", new byte[] { 'a', 'b', 'c' });\n            fail();\n        }\n        catch (ProcCallException e) {}\n\n        // try invalid hex literal strings in adhoc query\n        try {\n            cr = client.callProcedure(\"@AdHoc\", \"update blah set b = 'Bb01nt' where ival = 5\");\n            fail();\n        }\n        catch (ProcCallException e) {}\n        try {\n            cr = client.callProcedure(\"@AdHoc\", \"update blah set b = 'Bb0' where ival = 5\");\n            fail();\n        }\n        catch (ProcCallException e) {}\n\n        // test invalid comparison\n        try {\n            cr = client.callProcedure(\"@AdHoc\", \"update blah set ival = 5 where b = 'Bb01'\");\n            fail();\n        }\n        catch (ProcCallException e) {}\n\n        // test too long varbinary\n        byte[] overlong = new byte[VoltType.MAX_VALUE_LENGTH + 1];\n        try {\n            cr = client.callProcedure(\"Insert\", 6, new byte[] { 'a' }, \"hi\", overlong);\n            fail();\n        }\n        catch (ProcCallException e) {}\n\n        // stop execution\n        VoltDB.instance().shutdown(localServer);\n    }","id":70481,"modified_method":"public void testVarbinary() throws Exception {\n        String simpleSchema =\n            \"create table blah (\" +\n            \"ival bigint default 0 not null, \" +\n            \"b varbinary(256) default null, \" +\n            \"s varchar(256) default null,\" +\n            \"bs varbinary(2) default null,\" +\n            \"PRIMARY KEY(ival));\\n\" +\n            \"create index idx on blah (ival,s);\";\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(simpleSchema);\n        builder.addPartitionInfo(\"blah\", \"ival\");\n        builder.addStmtProcedure(\"Insert\", \"insert into blah values (?, ?, ?, ?);\", null);\n        builder.addStmtProcedure(\"Select\", \"select * from blah;\", null);\n        builder.addStmtProcedure(\"Update\", \"update blah set b = ? where ival = ?\", null);\n        builder.addStmtProcedure(\"FindString\", \"select * from blah where ival = ? and s = ?\", null);\n        builder.addStmtProcedure(\"LiteralUpdate\", \"update blah set b = '0a1A' where ival = 5\", null);\n        builder.addStmtProcedure(\"LiteralInsert\", \"insert into blah values (13, 'aabbcc', 'hi', 'aabb');\", null);\n        builder.addProcedures(VarbinaryStringLookup.class);\n        boolean success = builder.compile(Configuration.getPathToCatalogForTest(\"binarytest.jar\"), 1, 1, 0);\n        assertTrue(success);\n        MiscUtils.copyFile(builder.getPathToDeployment(), Configuration.getPathToCatalogForTest(\"binarytest.xml\"));\n\n        ServerThread localServer = null;\n        Client client = null;\n\n        try {\n            VoltDB.Configuration config = new VoltDB.Configuration();\n            config.m_pathToCatalog = Configuration.getPathToCatalogForTest(\"binarytest.jar\");\n            config.m_pathToDeployment = Configuration.getPathToCatalogForTest(\"binarytest.xml\");\n            config.m_backend = BackendTarget.NATIVE_EE_JNI;\n            localServer = new ServerThread(config);\n            localServer.start();\n            localServer.waitForInitialization();\n\n            client = ClientFactory.createClient();\n            client.createConnection(\"localhost\");\n\n            // insert data\n            ClientResponse cr = client.callProcedure(\"Insert\", 5, new byte[] { 'a', 'b', 'c', 'd' }, \"hi\", new byte[] { 'a' });\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n\n            // make sure strings as bytes works\n            cr = client.callProcedure(\"FindString\", 5, \"hi\".getBytes(\"UTF-8\"));\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n            assertEquals(1, cr.getResults()[0].getRowCount());\n            cr = client.callProcedure(\"VarbinaryStringLookup\", 5, \"hi\".getBytes(\"UTF-8\"), \"hi\");\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n            assertEquals(1, cr.getResults()[0].getRowCount());\n            assertEquals(1, cr.getResults()[1].getRowCount());\n\n            // literal update\n            cr = client.callProcedure(\"LiteralUpdate\");\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n            assertEquals(1, cr.getResults()[0].getRowCount());\n            assertEquals(1, cr.getResults()[0].asScalarLong());\n\n            // see if we can get the binary value from the '0a1A' update above\n            cr = client.callProcedure(\"Select\");\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n            VoltTable t = cr.getResults()[0];\n            assertEquals(1, t.getRowCount());\n            t.resetRowPosition();\n            t.advanceRow();\n            byte[] vb = t.getVarbinary(\"b\");\n            assertEquals(2, vb.length);\n            assertEquals((byte) 10, vb[0]);\n            assertEquals((byte) 26, vb[1]);\n\n            // try again with generic call\n            vb = (byte[]) t.get(\"b\", VoltType.VARBINARY);\n            assertEquals(2, vb.length);\n            assertEquals((byte) 10, vb[0]);\n            assertEquals((byte) 26, vb[1]);\n\n            // insert hex data\n            cr = client.callProcedure(\"Insert\", 9, \"aabbccdd\", \"hi\", \"aabb\");\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n\n            // literal inserts\n            cr = client.callProcedure(\"LiteralInsert\");\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n            assertEquals(1, cr.getResults()[0].getRowCount());\n            assertEquals(1, cr.getResults()[0].asScalarLong());\n\n            // adhoc queries\n            cr = client.callProcedure(\"@AdHoc\", \"update blah set b = 'Bb01' where ival = 5\");\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n            assertEquals(1, cr.getResults()[0].getRowCount());\n            assertEquals(1, cr.getResults()[0].asScalarLong());\n            cr = client.callProcedure(\"@AdHoc\", \"insert into blah values (12, 'aabbcc', 'hi', 'aabb');\");\n            assertTrue(cr.getStatus() == ClientResponse.SUCCESS);\n            assertEquals(1, cr.getResults()[0].getRowCount());\n            assertEquals(1, cr.getResults()[0].asScalarLong());\n\n            // try bad value insert for normal query\n            try {\n                cr = client.callProcedure(\"Insert\", 6, new byte[] { 'a' }, \"hi\", new byte[] { 'a', 'b', 'c' });\n                fail();\n            }\n            catch (ProcCallException e) {}\n\n            // try invalid hex literal strings in adhoc query\n            try {\n                cr = client.callProcedure(\"@AdHoc\", \"update blah set b = 'Bb01nt' where ival = 5\");\n                fail();\n            }\n            catch (ProcCallException e) {}\n            try {\n                cr = client.callProcedure(\"@AdHoc\", \"update blah set b = 'Bb0' where ival = 5\");\n                fail();\n            }\n            catch (ProcCallException e) {}\n\n            // test invalid comparison\n            try {\n                cr = client.callProcedure(\"@AdHoc\", \"update blah set ival = 5 where b = 'Bb01'\");\n                fail();\n            }\n            catch (ProcCallException e) {}\n\n            // test too long varbinary\n            byte[] overlong = new byte[VoltType.MAX_VALUE_LENGTH + 1];\n            try {\n                cr = client.callProcedure(\"Insert\", 6, new byte[] { 'a' }, \"hi\", overlong);\n                fail();\n            }\n            catch (ProcCallException e) {}\n        }\n        finally {\n            // stop execution\n            if (client != null) {\n                client.close();\n            }\n            if (localServer != null) {\n                localServer.shutdown();\n                localServer.join();\n            }\n        }\n    }","commit_id":"7fa4036efe5985d694bc4382ec4d67a207e4cc57","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private void startOne(int hostId, boolean clearLocalDataDirectories, ReplicationRole replicaMode)\n    {\n        CommandLine cmdln = (templateCmdLine.makeCopy());\n        try {\n            // set the dragent port. it uses the start value and\n            // the next two sequential port numbers - so burn those two.\n            cmdln.drAgentStartPort(portGenerator.next());\n            portGenerator.next();\n            portGenerator.next();\n\n            cmdln.port(portGenerator.nextClient());\n            cmdln.adminPort(portGenerator.nextAdmin());\n            cmdln.replicaMode(replicaMode);\n            cmdln.timestampSalt(getRandomTimestampSalt());\n\n            if (m_debug) {\n                cmdln.debugPort(portGenerator.next());\n            }\n\n            if (cmdln.target().isIPC) {\n                for (EEProcess proc : m_eeProcs.get(hostId)) {\n                    assert(proc != null);\n                    cmdln.ipcPort(portGenerator.next());\n                }\n            }\n\n            cmdln.zkport(portGenerator.next());\n\n            // If local directories are being cleared\n            // generate a new subroot, otherwise reuse the existing directory\n            File subroot = null;\n            if (clearLocalDataDirectories) {\n                subroot = VoltFile.getNewSubroot();\n                m_subRoots.add(subroot);\n            } else {\n                subroot = m_subRoots.get(hostId);\n            }\n            cmdln.voltFilePrefix(subroot.getPath());\n\n            m_cmdLines.add(cmdln);\n            m_procBuilder.command().clear();\n            m_procBuilder.command().addAll(cmdln.createCommandLine());\n\n            // for debug, dump the command line to a file.\n            //cmdln.dumpToFile(\"/tmp/izzy/cmd_\" + Integer.toString(portGenerator.next()));\n\n            Process proc = m_procBuilder.start();\n            m_cluster.add(proc);\n\n            // write output to obj/release/testoutput/<test name>-n.txt\n            // this may need to be more unique? Also very useful to just\n            // set this to a hardcoded path and use \"tail -f\" to debug.\n            String testoutputdir = cmdln.buildDir() + File.separator + \"testoutput\";\n\n            // make sure the directory exists\n            File dir = new File(testoutputdir);\n            if (dir.exists()) {\n                assert(dir.isDirectory());\n            }\n            else {\n                boolean status = dir.mkdirs();\n                assert(status);\n            }\n\n            File dirFile = new VoltFile(testoutputdir);\n            if (dirFile.listFiles() != null) {\n                for (File f : dirFile.listFiles()) {\n                    if (f.getName().startsWith(getName() + \"-\" + hostId)) {\n                        f.delete();\n                    }\n                }\n            }\n\n            String timestampStr = MiscUtils.getCompactStringTimestamp(System.currentTimeMillis());\n\n            PipeToFile ptf = new PipeToFile(\n                    testoutputdir +\n                    File.separator +\n                    \"LC-\" +\n                    timestampStr + \"-\" +\n                    getFileName() + \"-\" +\n                    hostId +\n                    \".txt\",\n                    proc.getInputStream(),\n                    PipeToFile.m_initToken, false, proc);\n            m_pipes.add(ptf);\n            ptf.setName(\"ClusterPipe:\" + String.valueOf(hostId));\n            ptf.start();\n        }\n        catch (IOException ex) {\n            System.out.println(\"Failed to start cluster process:\" + ex.getMessage());\n            Logger.getLogger(LocalCluster.class.getName()).log(Level.SEVERE, null, ex);\n            assert (false);\n        }\n    }","id":70482,"modified_method":"private void startOne(int hostId, boolean clearLocalDataDirectories, ReplicationRole replicaMode)\n    {\n        CommandLine cmdln = (templateCmdLine.makeCopy());\n        try {\n            // set the dragent port. it uses the start value and\n            // the next two sequential port numbers - so burn those two.\n            cmdln.drAgentStartPort(portGenerator.next());\n            portGenerator.next();\n            portGenerator.next();\n\n            cmdln.port(portGenerator.nextClient());\n            cmdln.adminPort(portGenerator.nextAdmin());\n            cmdln.replicaMode(replicaMode);\n            cmdln.timestampSalt(getRandomTimestampSalt());\n\n            if (m_debug) {\n                cmdln.debugPort(portGenerator.next());\n            }\n\n            if (cmdln.target().isIPC) {\n                for (EEProcess proc : m_eeProcs.get(hostId)) {\n                    assert(proc != null);\n                    cmdln.ipcPort(portGenerator.next());\n                }\n            }\n\n            cmdln.zkport(portGenerator.next());\n\n            // If local directories are being cleared\n            // generate a new subroot, otherwise reuse the existing directory\n            File subroot = null;\n            if (clearLocalDataDirectories) {\n                subroot = VoltFile.getNewSubroot();\n                m_subRoots.add(subroot);\n            } else {\n                subroot = m_subRoots.get(hostId);\n            }\n            cmdln.voltFilePrefix(subroot.getPath());\n\n            m_cmdLines.add(cmdln);\n            m_procBuilder.command().clear();\n            m_procBuilder.command().addAll(cmdln.createCommandLine());\n\n            // for debug, dump the command line to a file.\n            //cmdln.dumpToFile(\"/tmp/izzy/cmd_\" + Integer.toString(portGenerator.next()));\n\n            Process proc = m_procBuilder.start();\n            m_cluster.add(proc);\n\n            // write output to obj/release/testoutput/<test name>-n.txt\n            // this may need to be more unique? Also very useful to just\n            // set this to a hardcoded path and use \"tail -f\" to debug.\n            String testoutputdir = cmdln.buildDir() + File.separator + \"testoutput\";\n\n            // make sure the directory exists\n            File dir = new File(testoutputdir);\n            if (dir.exists()) {\n                assert(dir.isDirectory());\n            }\n            else {\n                boolean status = dir.mkdirs();\n                assert(status);\n            }\n\n            File dirFile = new VoltFile(testoutputdir);\n            if (dirFile.listFiles() != null) {\n                for (File f : dirFile.listFiles()) {\n                    if (f.getName().startsWith(getName() + \"-\" + hostId)) {\n                        f.delete();\n                    }\n                }\n            }\n\n            String timestampStr = MiscUtils.getCompactStringTimestamp(System.currentTimeMillis());\n\n            PipeToFile ptf = new PipeToFile(\n                    testoutputdir +\n                    File.separator +\n                    \"LC-\" +\n                    timestampStr + \"-\" +\n                    getFileName() + \"-\" +\n                    hostId +\n                    \".txt\",\n                    proc.getInputStream(),\n                    PipeToFile.m_initToken, false, proc);\n            m_pipes.add(ptf);\n            ptf.setName(\"ClusterPipe:\" + String.valueOf(hostId));\n            ptf.start();\n        }\n        catch (IOException ex) {\n            log.error(\"Failed to start cluster process:\" + ex.getMessage(), ex);\n            assert (false);\n        }\n    }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public LocalCluster(String jarFileName, int siteCount,\n                        int hostCount, int kfactor, BackendTarget target,\n                        FailureState failureState,\n                        boolean debug, boolean isRejoinTest)\n    {\n        assert (jarFileName != null);\n        assert (siteCount > 0);\n        assert (hostCount > 0);\n\n        // get the name of the calling class\n        StackTraceElement[] traces = Thread.currentThread().getStackTrace();\n        m_callingClassName = \"UnknownClass\";\n        m_callingMethodName = \"unknownMethod\";\n        //ArrayUtils.reverse(traces);\n        int i;\n        // skip all stack frames below this method\n        for (i = 0; traces[i].getClassName().equals(getClass().getName()) == false; i++);\n        // skip all stack frames from localcluster itself\n        for (;      traces[i].getClassName().equals(getClass().getName()); i++);\n        // skip the package name\n        int dot = traces[i].getClassName().lastIndexOf('.');\n        m_callingClassName = traces[i].getClassName().substring(dot + 1);\n        m_callingMethodName = traces[i].getMethodName();\n\n        System.out.println(\"Instantiating LocalCluster for \" + jarFileName + \" with class.method: \" +\n                m_callingClassName + \".\" + m_callingMethodName);\n        System.out.println(\"Sites: \" + siteCount + \" hosts: \" + hostCount + \" replication factor: \" + kfactor);\n\n        m_cluster.ensureCapacity(hostCount);\n\n        m_siteCount = siteCount;\n        m_hostCount = hostCount;\n        m_kfactor = kfactor;\n        m_debug = debug;\n        m_failureState = kfactor < 1 ? FailureState.ALL_RUNNING : failureState;\n        m_pipes = new ArrayList<PipeToFile>();\n        m_cmdLines = new ArrayList<CommandLine>();\n\n        String buildDir = System.getenv(\"VOLTDB_BUILD_DIR\");  // via build.xml\n        if (buildDir == null) {\n            buildDir = System.getProperty(\"user.dir\") + \"/obj/release\";\n        }\n\n        String jzmq_dir = System.getenv(\"VOLTDB_JZMQ_DIR\"); // via build.xml\n        if (jzmq_dir == null) {\n            jzmq_dir = System.getProperty(\"user.dir\") + \"/third_party/cpp/jnilib\";\n        }\n\n        String java_library_path = buildDir + \"/nativelibs\" + \":\" + jzmq_dir;\n\n        String classPath = System.getProperty(\"java.class.path\") + \":\" + buildDir\n            + File.separator + jarFileName + \":\" + buildDir + File.separator + \"prod\";\n\n        // First try 'ant' syntax and then 'eclipse' syntax...\n        String log4j = System.getProperty(\"log4j.configuration\");\n        if (log4j == null) {\n            log4j = \"file://\" + System.getProperty(\"user.dir\") + \"/voltdb/log4j.xml\";\n        }\n\n        m_procBuilder = new ProcessBuilder();\n\n        // set the working directory to obj/release/prod\n        //m_procBuilder.directory(new File(m_buildDir + File.separator + \"prod\"));\n        m_procBuilder.redirectErrorStream(true);\n\n        Thread shutdownThread = new Thread(new ShutDownHookThread());\n        java.lang.Runtime.getRuntime().addShutdownHook(shutdownThread);\n\n        // Create the base command line that each process can makeCopy and modify\n        this.templateCmdLine.\n            addTestOptions(true).\n            leader(\"localhost\").\n            target(target).\n            startCommand(\"create\").\n            jarFileName(VoltDB.Configuration.getPathToCatalogForTest(jarFileName)).\n            buildDir(buildDir).\n            javaLibraryPath(java_library_path).\n            classPath(classPath).\n            pathToLicense(ServerThread.getTestLicensePath()).\n            log4j(log4j);\n    }","id":70483,"modified_method":"public LocalCluster(String jarFileName, int siteCount,\n                        int hostCount, int kfactor, BackendTarget target,\n                        FailureState failureState,\n                        boolean debug, boolean isRejoinTest)\n    {\n        assert (jarFileName != null);\n        assert (siteCount > 0);\n        assert (hostCount > 0);\n\n        // get the name of the calling class\n        StackTraceElement[] traces = Thread.currentThread().getStackTrace();\n        m_callingClassName = \"UnknownClass\";\n        m_callingMethodName = \"unknownMethod\";\n        //ArrayUtils.reverse(traces);\n        int i;\n        // skip all stack frames below this method\n        for (i = 0; traces[i].getClassName().equals(getClass().getName()) == false; i++);\n        // skip all stack frames from localcluster itself\n        for (;      traces[i].getClassName().equals(getClass().getName()); i++);\n        // skip the package name\n        int dot = traces[i].getClassName().lastIndexOf('.');\n        m_callingClassName = traces[i].getClassName().substring(dot + 1);\n        m_callingMethodName = traces[i].getMethodName();\n\n        System.out.println(\"Instantiating LocalCluster for \" + jarFileName + \" with class.method: \" +\n                m_callingClassName + \".\" + m_callingMethodName);\n        System.out.println(\"Sites: \" + siteCount + \" hosts: \" + hostCount + \" replication factor: \" + kfactor);\n\n        m_cluster.ensureCapacity(hostCount);\n\n        m_siteCount = siteCount;\n        m_hostCount = hostCount;\n        m_kfactor = kfactor;\n        m_debug = debug;\n        m_failureState = kfactor < 1 ? FailureState.ALL_RUNNING : failureState;\n        m_pipes = new ArrayList<PipeToFile>();\n        m_cmdLines = new ArrayList<CommandLine>();\n\n        String buildDir = System.getenv(\"VOLTDB_BUILD_DIR\");  // via build.xml\n        if (buildDir == null) {\n            buildDir = System.getProperty(\"user.dir\") + \"/obj/release\";\n        }\n\n        String jzmq_dir = System.getenv(\"VOLTDB_JZMQ_DIR\"); // via build.xml\n        if (jzmq_dir == null) {\n            jzmq_dir = System.getProperty(\"user.dir\") + \"/third_party/cpp/jnilib\";\n        }\n\n        String java_library_path = buildDir + \"/nativelibs\" + \":\" + jzmq_dir;\n\n        String classPath = System.getProperty(\"java.class.path\") + \":\" + buildDir\n            + File.separator + jarFileName + \":\" + buildDir + File.separator + \"prod\";\n\n        // First try 'ant' syntax and then 'eclipse' syntax...\n        String log4j = System.getProperty(\"log4j.configuration\");\n        if (log4j == null) {\n            log4j = \"file://\" + System.getProperty(\"user.dir\") + \"/tests/log4j-allconsole.xml\";\n        }\n\n        m_procBuilder = new ProcessBuilder();\n\n        // set the working directory to obj/release/prod\n        //m_procBuilder.directory(new File(m_buildDir + File.separator + \"prod\"));\n        m_procBuilder.redirectErrorStream(true);\n\n        Thread shutdownThread = new Thread(new ShutDownHookThread());\n        java.lang.Runtime.getRuntime().addShutdownHook(shutdownThread);\n\n        // Create the base command line that each process can makeCopy and modify\n        this.templateCmdLine.\n            addTestOptions(true).\n            leader(\"localhost\").\n            target(target).\n            startCommand(\"create\").\n            jarFileName(VoltDB.Configuration.getPathToCatalogForTest(jarFileName)).\n            buildDir(buildDir).\n            javaLibraryPath(java_library_path).\n            classPath(classPath).\n            pathToLicense(ServerThread.getTestLicensePath()).\n            log4j(log4j);\n    }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"boolean waitForAllReady() {\n        long startOfPipeWait = System.currentTimeMillis();\n        boolean allReady = false;\n        do {\n            if ((System.currentTimeMillis() - startOfPipeWait) > PIPE_WAIT_MAX_TIMEOUT) {\n                break;\n            }\n\n            allReady = true;\n            for (PipeToFile pipeToFile : m_pipes) {\n                if (pipeToFile == null) {\n                    continue;\n                }\n                synchronized(pipeToFile) {\n                    // if eof, then no point in waiting around\n                    if (pipeToFile.m_eof.get())\n                        continue;\n\n                    // if process is dead, no point in waiting around\n                    if (isProcessDead(pipeToFile.getProcess()))\n                        continue;\n\n                    // if not eof, then wait for statement of readiness\n                    if (pipeToFile.m_witnessedReady.get() != true) {\n                        try {\n                            // use a timeout to prevent a forever hang\n                            pipeToFile.wait(1000);\n                        }\n                        catch (InterruptedException ex) {\n                            Logger.getLogger(LocalCluster.class.getName()).log(Level.SEVERE, null, ex);\n                        }\n                        allReady = false;\n                        break;\n                    }\n                }\n            }\n        } while (allReady == false);\n        return allReady;\n    }","id":70484,"modified_method":"boolean waitForAllReady() {\n        long startOfPipeWait = System.currentTimeMillis();\n        boolean allReady = false;\n        do {\n            if ((System.currentTimeMillis() - startOfPipeWait) > PIPE_WAIT_MAX_TIMEOUT) {\n                break;\n            }\n\n            allReady = true;\n            for (PipeToFile pipeToFile : m_pipes) {\n                if (pipeToFile == null) {\n                    continue;\n                }\n                synchronized(pipeToFile) {\n                    // if eof, then no point in waiting around\n                    if (pipeToFile.m_eof.get())\n                        continue;\n\n                    // if process is dead, no point in waiting around\n                    if (isProcessDead(pipeToFile.getProcess()))\n                        continue;\n\n                    // if not eof, then wait for statement of readiness\n                    if (pipeToFile.m_witnessedReady.get() != true) {\n                        try {\n                            // use a timeout to prevent a forever hang\n                            pipeToFile.wait(1000);\n                        }\n                        catch (InterruptedException ex) {\n                            log.error(ex.toString(), ex);\n                        }\n                        allReady = false;\n                        break;\n                    }\n                }\n            }\n        } while (allReady == false);\n        return allReady;\n    }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private boolean recoverOne(boolean logtime, long startTime, int hostId, Integer rejoinHostId, String rejoinHost) {\n\n        // Lookup the client interface port of the rejoin host\n        // I have no idea why this code ignores the user's input\n        // based on other state in this class except to say that whoever wrote\n        // it this way originally probably eats kittens and hates cake.\n        if (rejoinHostId == null || m_hasLocalServer) {\n            rejoinHostId = 0;\n        }\n        int portNoToRejoin = m_cmdLines.get(rejoinHostId).port();\n        System.out.println(\"Rejoining \" + hostId + \" to hostID: \" + rejoinHostId);\n\n        // rebuild the EE proc set.\n        ArrayList<EEProcess> eeProcs = m_eeProcs.get(hostId);\n        for (EEProcess proc : eeProcs) {\n            try {\n                proc.waitForShutdown();\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        eeProcs.clear();\n        for (int ii = 0; ii < m_siteCount; ii++) {\n            String logfile = \"LocalCluster_host_\" + hostId + \"_site\" + ii + \".log\";\n            eeProcs.add(new EEProcess(templateCmdLine.target(), logfile));\n        }\n\n        PipeToFile ptf = null;\n        long start = 0;\n        try {\n            CommandLine rejoinCmdLn = m_cmdLines.get(hostId);\n            // This shouldn't collide but apparently it sucks.\n            // Bump it to avoid collisions on rejoin.\n            if (m_debug) {\n                rejoinCmdLn.debugPort(portGenerator.next());\n            }\n            rejoinCmdLn.rejoinHostAndPort(rejoinHost + \":\" + String.valueOf(portNoToRejoin));\n\n            m_procBuilder.command().clear();\n            m_procBuilder.command().addAll(rejoinCmdLn.createCommandLine());\n            Process proc = m_procBuilder.start();\n            start = System.currentTimeMillis();\n\n            // write output to obj/release/testoutput/<test name>-n.txt\n            // this may need to be more unique? Also very useful to just\n            // set this to a hardcoded path and use \"tail -f\" to debug.\n            String testoutputdir = rejoinCmdLn.buildDir() + File.separator + \"testoutput\";\n            // make sure the directory exists\n            File dir = new File(testoutputdir);\n            if (dir.exists()) {\n                assert(dir.isDirectory());\n            }\n            else {\n                boolean status = dir.mkdirs();\n                assert(status);\n            }\n\n            ptf = new PipeToFile(testoutputdir + File.separator +\n                    getName() + \"-\" + hostId + \".txt\", proc.getInputStream(),\n                    PipeToFile.m_rejoinToken, true, proc);\n            synchronized (this) {\n                m_pipes.set(hostId, ptf);\n                // replace the existing dead proc\n                m_cluster.set(hostId, proc);\n            }\n            Thread t = new Thread(ptf);\n            t.setName(\"ClusterPipe:\" + String.valueOf(hostId));\n            t.start();\n        }\n        catch (IOException ex) {\n            System.out.println(\"Failed to start cluster process:\" + ex.getMessage());\n            Logger.getLogger(LocalCluster.class.getName()).log(Level.SEVERE, null, ex);\n            assert (false);\n        }\n\n        // wait for the joining site to be ready\n        synchronized (ptf) {\n            if (logtime) System.out.println(\"********** pre witness: \" + (System.currentTimeMillis() - startTime) + \" ms\");\n            while (ptf.m_witnessedReady.get() != true) {\n                // if eof, then no point in waiting around\n                if (ptf.m_eof.get())\n                    break;\n\n                // if process is dead, no point in waiting around\n                if (isProcessDead(ptf.getProcess()))\n                    break;\n\n                try {\n                    // wait for explicit notification\n                    ptf.wait();\n                }\n                catch (InterruptedException ex) {\n                    Logger.getLogger(LocalCluster.class.getName()).log(Level.SEVERE, null, ex);\n                }\n            }\n        }\n        if (ptf.m_witnessedReady.get()) {\n            long finish = System.currentTimeMillis();\n            System.out.println(\n                    \"Took \" + (finish - start) +\n                    \" milliseconds, time from init was \" + (finish - ptf.m_initTime));\n            return true;\n        } else {\n            System.out.println(\"Recovering process exited before recovery completed\");\n            try {\n                silentShutdownSingleHost(hostId, true);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return false;\n        }\n    }","id":70485,"modified_method":"private boolean recoverOne(boolean logtime, long startTime, int hostId, Integer rejoinHostId, String rejoinHost) {\n\n        // Lookup the client interface port of the rejoin host\n        // I have no idea why this code ignores the user's input\n        // based on other state in this class except to say that whoever wrote\n        // it this way originally probably eats kittens and hates cake.\n        if (rejoinHostId == null || m_hasLocalServer) {\n            rejoinHostId = 0;\n        }\n        int portNoToRejoin = m_cmdLines.get(rejoinHostId).port();\n        System.out.println(\"Rejoining \" + hostId + \" to hostID: \" + rejoinHostId);\n\n        // rebuild the EE proc set.\n        ArrayList<EEProcess> eeProcs = m_eeProcs.get(hostId);\n        for (EEProcess proc : eeProcs) {\n            try {\n                proc.waitForShutdown();\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        eeProcs.clear();\n        for (int ii = 0; ii < m_siteCount; ii++) {\n            String logfile = \"LocalCluster_host_\" + hostId + \"_site\" + ii + \".log\";\n            eeProcs.add(new EEProcess(templateCmdLine.target(), logfile));\n        }\n\n        PipeToFile ptf = null;\n        long start = 0;\n        try {\n            CommandLine rejoinCmdLn = m_cmdLines.get(hostId);\n            // This shouldn't collide but apparently it sucks.\n            // Bump it to avoid collisions on rejoin.\n            if (m_debug) {\n                rejoinCmdLn.debugPort(portGenerator.next());\n            }\n            rejoinCmdLn.rejoinHostAndPort(rejoinHost + \":\" + String.valueOf(portNoToRejoin));\n\n            m_procBuilder.command().clear();\n            m_procBuilder.command().addAll(rejoinCmdLn.createCommandLine());\n            Process proc = m_procBuilder.start();\n            start = System.currentTimeMillis();\n\n            // write output to obj/release/testoutput/<test name>-n.txt\n            // this may need to be more unique? Also very useful to just\n            // set this to a hardcoded path and use \"tail -f\" to debug.\n            String testoutputdir = rejoinCmdLn.buildDir() + File.separator + \"testoutput\";\n            // make sure the directory exists\n            File dir = new File(testoutputdir);\n            if (dir.exists()) {\n                assert(dir.isDirectory());\n            }\n            else {\n                boolean status = dir.mkdirs();\n                assert(status);\n            }\n\n            ptf = new PipeToFile(testoutputdir + File.separator +\n                    getName() + \"-\" + hostId + \".txt\", proc.getInputStream(),\n                    PipeToFile.m_rejoinToken, true, proc);\n            synchronized (this) {\n                m_pipes.set(hostId, ptf);\n                // replace the existing dead proc\n                m_cluster.set(hostId, proc);\n            }\n            Thread t = new Thread(ptf);\n            t.setName(\"ClusterPipe:\" + String.valueOf(hostId));\n            t.start();\n        }\n        catch (IOException ex) {\n            log.error(\"Failed to start recovering cluster process:\" + ex.getMessage(), ex);\n            assert (false);\n        }\n\n        // wait for the joining site to be ready\n        synchronized (ptf) {\n            if (logtime) System.out.println(\"********** pre witness: \" + (System.currentTimeMillis() - startTime) + \" ms\");\n            while (ptf.m_witnessedReady.get() != true) {\n                // if eof, then no point in waiting around\n                if (ptf.m_eof.get())\n                    break;\n\n                // if process is dead, no point in waiting around\n                if (isProcessDead(ptf.getProcess()))\n                    break;\n\n                try {\n                    // wait for explicit notification\n                    ptf.wait();\n                }\n                catch (InterruptedException ex) {\n                    log.error(ex.toString(), ex);\n                }\n            }\n        }\n        if (ptf.m_witnessedReady.get()) {\n            long finish = System.currentTimeMillis();\n            System.out.println(\n                    \"Took \" + (finish - start) +\n                    \" milliseconds, time from init was \" + (finish - ptf.m_initTime));\n            return true;\n        } else {\n            System.out.println(\"Recovering process exited before recovery completed\");\n            try {\n                silentShutdownSingleHost(hostId, true);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return false;\n        }\n    }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public synchronized void shutDownExternal(boolean forceKillEEProcs) throws InterruptedException\n    {\n        if (m_cluster != null) {\n            for (Process proc : m_cluster) {\n                if (proc == null)\n                    continue;\n                proc.destroy();\n                int retval = proc.waitFor();\n                // exit code 143 is the forcible shutdown code from .destroy()\n                if (retval != 0 && retval != 143)\n                {\n                    System.out.println(\"External VoltDB process terminated abnormally with return: \" + retval);\n                }\n            }\n        }\n\n        if (m_cluster != null) m_cluster.clear();\n\n        for (ArrayList<EEProcess> procs : m_eeProcs) {\n            for (EEProcess proc : procs) {\n                proc.waitForShutdown();\n            }\n        }\n\n        if (templateCmdLine.target() == BackendTarget.NATIVE_EE_VALGRIND_IPC) {\n            if (!EEProcess.m_valgrindErrors.isEmpty()) {\n                String failString = \"\";\n                for (final String error : EEProcess.m_valgrindErrors) {\n                    failString = failString + \"\\n\" + error;\n                }\n                org.junit.Assert.fail(failString);\n            }\n        }\n    }","id":70486,"modified_method":"public synchronized void shutDownExternal(boolean forceKillEEProcs)\n    {\n        if (m_cluster != null) {\n            // kill all procs\n            for (Process proc : m_cluster) {\n                if (proc == null)\n                    continue;\n                proc.destroy();\n            }\n\n            // join on all procs\n            for (Process proc : m_cluster) {\n                if (proc == null)\n                    continue;\n                int retval = 0;\n                try {\n                    retval = proc.waitFor();\n                }\n                catch (InterruptedException e) {\n                    System.out.println(\"Unable to wait for Localcluster process to die: \" + proc.toString());\n                    log.error(\"Unable to wait for Localcluster process to die: \" + proc.toString(), e);\n                }\n                // exit code 143 is the forcible shutdown code from .destroy()\n                if (retval != 0 && retval != 143)\n                {\n                    System.out.println(\"External VoltDB process terminated abnormally with return: \" + retval);\n                    log.error(\"External VoltDB process terminated abnormally with return: \" + retval);\n                }\n            }\n        }\n\n        if (m_cluster != null) m_cluster.clear();\n\n        for (ArrayList<EEProcess> procs : m_eeProcs) {\n            for (EEProcess proc : procs) {\n                try {\n                    proc.waitForShutdown();\n                } catch (InterruptedException e) {\n                    log.error(\"Unable to wait for EEProcess to die: \" + proc.toString(), e);\n                }\n            }\n        }\n\n        if (templateCmdLine.target() == BackendTarget.NATIVE_EE_VALGRIND_IPC) {\n            if (!EEProcess.m_valgrindErrors.isEmpty()) {\n                String failString = \"\";\n                for (final String error : EEProcess.m_valgrindErrors) {\n                    failString = failString + \"\\n\" + error;\n                }\n                org.junit.Assert.fail(failString);\n            }\n        }\n\n        m_eeProcs.clear();\n    }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Return the next bindable port */\n        public synchronized int next() {\n            while(nextPort <= MAX_STATIC_PORT) {\n                int port = nextPort++;\n                if (bindable(port)) {\n                    return port;\n                }\n            }\n            return -1;\n        }","id":70487,"modified_method":"/** Return the next bindable port */\n        public synchronized int next() {\n            while(nextPort <= MAX_STATIC_PORT) {\n                int port = nextPort++;\n                if (MiscUtils.isBindable(port)) {\n                    return port;\n                }\n            }\n            return -1;\n        }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n    synchronized public void shutDown() throws InterruptedException {\n        // there are couple of ways to shutdown. sysproc @kill could be\n        // issued to listener. this would require that the test didn't\n        // break the cluster somehow.  Or ... just old fashioned kill?\n\n        try {\n            if (m_localServer != null) {\n                m_localServer.shutdown();\n            }\n        } finally {\n            m_running = false;\n        }\n        shutDownExternal();\n    }","id":70488,"modified_method":"@Override\n    synchronized public void shutDown() throws InterruptedException {\n        // there are couple of ways to shutdown. sysproc @kill could be\n        // issued to listener. this would require that the test didn't\n        // break the cluster somehow.  Or ... just old fashioned kill?\n\n        try {\n            if (m_localServer != null) {\n                m_localServer.shutdown();\n            }\n        }\n        catch (Exception e) {\n            log.error(\"Failure to shutdown LocalCluster's in-process VoltDB server.\", e);\n        }\n        finally {\n            m_running = false;\n        }\n        shutDownExternal();\n    }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n        public void run() {\n            try {\n                shutDownExternal(true);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }","id":70489,"modified_method":"@Override\n        public void run() {\n            shutDownExternal(true);\n        }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void startUp(boolean clearLocalDataDirectories, ReplicationRole role) {\n        assert (!m_running);\n        if (m_running) {\n            return;\n        }\n\n        // set 'replica' option -- known here for the first time.\n        templateCmdLine.replicaMode(role);\n\n        // set to true to spew startup timing data\n        boolean logtime = false;\n        long startTime = 0;\n        printTiming(logtime, \"Starting cluster at: \" + System.currentTimeMillis());\n\n        // clear any logs, export or snapshot data for this run\n        if (clearLocalDataDirectories) {\n            try {\n                m_subRoots.clear();\n                VoltFile.deleteAllSubRoots();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        // reset the port generator. RegressionSuite always expects\n        // to find ClientInterface and Admin mode on known ports.\n        portGenerator.reset();\n\n        m_eeProcs.clear();\n        for (int ii = 0; ii < m_hostCount; ii++) {\n            ArrayList<EEProcess> procs = new ArrayList<EEProcess>();\n            m_eeProcs.add(procs);\n            for (int zz = 0; zz < m_siteCount; zz++) {\n                String logfile = \"LocalCluster_host_\" + ii + \"_site\" + zz + \".log\";\n                procs.add(new EEProcess(templateCmdLine.target(), logfile));\n            }\n        }\n\n        m_pipes.clear();\n        m_cluster.clear();\n        m_cmdLines.clear();\n        int oopStartIndex = 0;\n\n        // create the in-process server instance.\n        if (m_hasLocalServer) {\n            startLocalServer(clearLocalDataDirectories);\n            ++oopStartIndex;\n        }\n\n        // create all the out-of-process servers\n        for (int i = oopStartIndex; i < m_hostCount; i++) {\n            startOne(i, clearLocalDataDirectories, role);\n        }\n\n        printTiming(logtime, \"Pre-witness: \" + (System.currentTimeMillis() - startTime) + \"ms\");\n        boolean allReady = waitForAllReady();\n        printTiming(logtime, \"Post-witness: \" + (System.currentTimeMillis() - startTime) + \"ms\");\n\n        // verify all processes started up and count failures\n        int downProcesses = 0;\n        for (Process proc : m_cluster) {\n            if ((proc != null) && (isProcessDead(proc))) {\n                downProcesses++;\n            }\n        }\n\n        // throw an exception if there were failures starting up\n        if ((downProcesses > 0) || (allReady == false)) {\n            // poke all the external processes to die (no guarantees)\n            for (Process proc : m_cluster) {\n                if (proc != null) {\n                    try { proc.destroy(); } catch (Exception e) {}\n                }\n            }\n\n            if (downProcesses > 0) {\n                int expectedProcesses = m_hostCount - (m_hasLocalServer ? 1 : 0);\n                throw new RuntimeException(\n                        String.format(\"%d/%d external processes failed to start\",\n                                downProcesses, expectedProcesses));\n            }\n            // this error case should only be from a timeout\n            if (!allReady) {\n                throw new RuntimeException(\n                        \"One or more external processes failed to complete initialization.\");\n            }\n        }\n\n        // Finally, make sure the local server thread is running and wait if it is not.\n        if (m_hasLocalServer) {\n            m_localServer.waitForInitialization();\n        }\n\n        printTiming(logtime, \"DONE: \" + (System.currentTimeMillis() - startTime) + \" ms\");\n        m_running = true;\n\n        // if supposed to kill a server, it's go time\n        if (m_failureState != FailureState.ALL_RUNNING) {\n            killOne();\n        }\n\n        // after killing a server, bring it back in recovery mode\n        if (m_failureState == FailureState.ONE_RECOVERING) {\n            int hostId = m_hasLocalServer ? 1 : 0;\n            recoverOne(logtime, startTime, hostId);\n        }\n    }","id":70490,"modified_method":"public void startUp(boolean clearLocalDataDirectories, ReplicationRole role) {\n        assert (!m_running);\n        if (m_running) {\n            return;\n        }\n\n        // needs to be called before any call to pick a filename\n        VoltDB.setDefaultTimezone();\n\n        // set 'replica' option -- known here for the first time.\n        templateCmdLine.replicaMode(role);\n\n        // set to true to spew startup timing data\n        boolean logtime = false;\n        long startTime = 0;\n        printTiming(logtime, \"Starting cluster at: \" + System.currentTimeMillis());\n\n        // clear any logs, export or snapshot data for this run\n        if (clearLocalDataDirectories) {\n            try {\n                m_subRoots.clear();\n                VoltFile.deleteAllSubRoots();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        // reset the port generator. RegressionSuite always expects\n        // to find ClientInterface and Admin mode on known ports.\n        portGenerator.reset();\n\n        m_eeProcs.clear();\n        for (int ii = 0; ii < m_hostCount; ii++) {\n            ArrayList<EEProcess> procs = new ArrayList<EEProcess>();\n            m_eeProcs.add(procs);\n            for (int zz = 0; zz < m_siteCount; zz++) {\n                String logfile = \"LocalCluster_host_\" + ii + \"_site\" + zz + \".log\";\n                procs.add(new EEProcess(templateCmdLine.target(), logfile));\n            }\n        }\n\n        m_pipes.clear();\n        m_cluster.clear();\n        m_cmdLines.clear();\n        int oopStartIndex = 0;\n\n        // create the in-process server instance.\n        if (m_hasLocalServer) {\n            startLocalServer(clearLocalDataDirectories);\n            ++oopStartIndex;\n        }\n\n        // create all the out-of-process servers\n        for (int i = oopStartIndex; i < m_hostCount; i++) {\n            startOne(i, clearLocalDataDirectories, role);\n        }\n\n        printTiming(logtime, \"Pre-witness: \" + (System.currentTimeMillis() - startTime) + \"ms\");\n        boolean allReady = waitForAllReady();\n        printTiming(logtime, \"Post-witness: \" + (System.currentTimeMillis() - startTime) + \"ms\");\n\n        // verify all processes started up and count failures\n        int downProcesses = 0;\n        for (Process proc : m_cluster) {\n            if ((proc != null) && (isProcessDead(proc))) {\n                downProcesses++;\n            }\n        }\n\n        // throw an exception if there were failures starting up\n        if ((downProcesses > 0) || (allReady == false)) {\n            // poke all the external processes to die (no guarantees)\n            for (Process proc : m_cluster) {\n                if (proc != null) {\n                    try { proc.destroy(); } catch (Exception e) {}\n                }\n            }\n\n            if (downProcesses > 0) {\n                int expectedProcesses = m_hostCount - (m_hasLocalServer ? 1 : 0);\n                throw new RuntimeException(\n                        String.format(\"%d/%d external processes failed to start\",\n                                downProcesses, expectedProcesses));\n            }\n            // this error case should only be from a timeout\n            if (!allReady) {\n                throw new RuntimeException(\n                        \"One or more external processes failed to complete initialization.\");\n            }\n        }\n\n        // Finally, make sure the local server thread is running and wait if it is not.\n        if (m_hasLocalServer) {\n            m_localServer.waitForInitialization();\n        }\n\n        printTiming(logtime, \"DONE: \" + (System.currentTimeMillis() - startTime) + \" ms\");\n        m_running = true;\n\n        // if supposed to kill a server, it's go time\n        if (m_failureState != FailureState.ALL_RUNNING) {\n            killOne();\n        }\n\n        // after killing a server, bring it back in recovery mode\n        if (m_failureState == FailureState.ONE_RECOVERING) {\n            int hostId = m_hasLocalServer ? 1 : 0;\n            recoverOne(logtime, startTime, hostId);\n        }\n    }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testSimple() throws Exception {\n        String simpleSchema =\n            \"create table BLAH (\" +\n            \"IVAL bigint default 0 not null, \" +\n            \"TVAL timestamp default null,\" +\n            \"DVAL decimal default null,\" +\n            \"PRIMARY KEY(IVAL));\";\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(simpleSchema);\n        builder.addPartitionInfo(\"BLAH\", \"IVAL\");\n        builder.addStmtProcedure(\"Insert\", \"insert into blah values (?, ?, ?);\", null);\n        builder.addStmtProcedure(\"InsertWithDate\", \"INSERT INTO BLAH VALUES (974599638818488300, '2011-06-24 10:30:26.002', 5);\");\n        boolean success = builder.compile(Configuration.getPathToCatalogForTest(\"adhoc.jar\"), 2, 1, 0);\n        assertTrue(success);\n        MiscUtils.copyFile(builder.getPathToDeployment(), Configuration.getPathToCatalogForTest(\"adhoc.xml\"));\n\n        VoltDB.Configuration config = new VoltDB.Configuration();\n        config.m_pathToCatalog = Configuration.getPathToCatalogForTest(\"adhoc.jar\");\n        config.m_pathToDeployment = Configuration.getPathToCatalogForTest(\"adhoc.xml\");\n        ServerThread localServer = new ServerThread(config);\n        localServer.start();\n        localServer.waitForInitialization();\n\n        // do the test\n        Client client = ClientFactory.createClient();\n        client.createConnection(\"localhost\");\n\n        VoltTable modCount = client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (1, 1, 1);\").getResults()[0];\n        assertTrue(modCount.getRowCount() == 1);\n        assertTrue(modCount.asScalarLong() == 1);\n\n        VoltTable result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH;\").getResults()[0];\n        assertTrue(result.getRowCount() == 1);\n        System.out.println(result.toString());\n\n        // test single-partition stuff\n        result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH;\", 0).getResults()[0];\n        assertTrue(result.getRowCount() == 0);\n        System.out.println(result.toString());\n        result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH;\", 1).getResults()[0];\n        assertTrue(result.getRowCount() == 1);\n        System.out.println(result.toString());\n\n        try {\n            client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (0, 0, 0);\", 1);\n            fail(\"Badly partitioned insert failed to throw expected exception\");\n        }\n        catch (Exception e) {}\n\n        try {\n            client.callProcedure(\"@AdHoc\", \"SLEECT * FROOM NEEEW_OOORDERERER;\");\n            fail(\"Bad SQL failed to throw expected exception\");\n        }\n        catch (Exception e) {}\n\n        // try a huge bigint literal\n        modCount = client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (974599638818488300, '2011-06-24 10:30:26.123012', 5);\").getResults()[0];\n        modCount = client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (974599638818488301, '2011-06-24 10:30:28', 5);\").getResults()[0];\n        assertTrue(modCount.getRowCount() == 1);\n        assertTrue(modCount.asScalarLong() == 1);\n        result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE IVAL = 974599638818488300;\").getResults()[0];\n        assertTrue(result.getRowCount() == 1);\n        System.out.println(result.toString());\n        result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE TVAL = '2011-06-24 10:30:26.123012';\").getResults()[0];\n        assertTrue(result.getRowCount() == 1);\n        System.out.println(result.toString());\n        result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE TVAL > '2011-06-24 10:30:25';\").getResults()[0];\n        assertEquals(2, result.getRowCount());\n        System.out.println(result.toString());\n        result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE TVAL < '2011-06-24 10:30:27';\").getResults()[0];\n        System.out.println(result.toString());\n        // We inserted a 1,1,1 row way earlier\n        assertEquals(2, result.getRowCount());\n\n        // try something like the queries in ENG-1242\n        try {\n            client.callProcedure(\"@AdHoc\", \"select * from blah; dfvsdfgvdf select * from blah WHERE IVAL = 1;\");\n            fail(\"Bad SQL failed to throw expected exception\");\n        }\n        catch (Exception e) {}\n        client.callProcedure(\"@AdHoc\", \"select\\n* from blah;\");\n\n        // try a decimal calculation (ENG-1093)\n        modCount = client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (2, '2011-06-24 10:30:26', 1.12345*1);\").getResults()[0];\n        assertTrue(modCount.getRowCount() == 1);\n        assertTrue(modCount.asScalarLong() == 1);\n        result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE IVAL = 2;\").getResults()[0];\n        assertTrue(result.getRowCount() == 1);\n        System.out.println(result.toString());\n\n        localServer.shutdown();\n        localServer.join();\n    }","id":70491,"modified_method":"public void testSimple() throws Exception {\n        String simpleSchema =\n            \"create table BLAH (\" +\n            \"IVAL bigint default 0 not null, \" +\n            \"TVAL timestamp default null,\" +\n            \"DVAL decimal default null,\" +\n            \"PRIMARY KEY(IVAL));\";\n\n        String pathToCatalog = Configuration.getPathToCatalogForTest(\"adhoc.jar\");\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(simpleSchema);\n        builder.addPartitionInfo(\"BLAH\", \"IVAL\");\n        builder.addStmtProcedure(\"Insert\", \"insert into blah values (?, ?, ?);\", null);\n        builder.addStmtProcedure(\"InsertWithDate\", \"INSERT INTO BLAH VALUES (974599638818488300, '2011-06-24 10:30:26.002', 5);\");\n        boolean success = builder.compileWithDefaultDeployment(pathToCatalog);\n        assertTrue(success);\n\n        VoltDB.Configuration config = new VoltDB.Configuration();\n        config.m_pathToCatalog = pathToCatalog;\n        ServerThread localServer = new ServerThread(config);\n\n        Client client = null;\n\n        try {\n            localServer.start();\n            localServer.waitForInitialization();\n\n            // do the test\n            client = ClientFactory.createClient();\n            client.createConnection(\"localhost\");\n\n            VoltTable modCount = client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (1, 1, 1);\").getResults()[0];\n            assertTrue(modCount.getRowCount() == 1);\n            assertTrue(modCount.asScalarLong() == 1);\n\n            VoltTable result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH;\").getResults()[0];\n            assertTrue(result.getRowCount() == 1);\n            System.out.println(result.toString());\n\n            // test single-partition stuff\n            result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH;\", 0).getResults()[0];\n            assertTrue(result.getRowCount() == 0);\n            System.out.println(result.toString());\n            result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH;\", 1).getResults()[0];\n            assertTrue(result.getRowCount() == 1);\n            System.out.println(result.toString());\n\n            try {\n                client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (0, 0, 0);\", 1);\n                fail(\"Badly partitioned insert failed to throw expected exception\");\n            }\n            catch (Exception e) {}\n\n            try {\n                client.callProcedure(\"@AdHoc\", \"SLEECT * FROOM NEEEW_OOORDERERER;\");\n                fail(\"Bad SQL failed to throw expected exception\");\n            }\n            catch (Exception e) {}\n\n            // try a huge bigint literal\n            modCount = client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (974599638818488300, '2011-06-24 10:30:26.123012', 5);\").getResults()[0];\n            modCount = client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (974599638818488301, '2011-06-24 10:30:28', 5);\").getResults()[0];\n            assertTrue(modCount.getRowCount() == 1);\n            assertTrue(modCount.asScalarLong() == 1);\n            result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE IVAL = 974599638818488300;\").getResults()[0];\n            assertTrue(result.getRowCount() == 1);\n            System.out.println(result.toString());\n            result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE TVAL = '2011-06-24 10:30:26.123012';\").getResults()[0];\n            assertTrue(result.getRowCount() == 1);\n            System.out.println(result.toString());\n            result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE TVAL > '2011-06-24 10:30:25';\").getResults()[0];\n            assertEquals(2, result.getRowCount());\n            System.out.println(result.toString());\n            result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE TVAL < '2011-06-24 10:30:27';\").getResults()[0];\n            System.out.println(result.toString());\n            // We inserted a 1,1,1 row way earlier\n            assertEquals(2, result.getRowCount());\n\n            // try something like the queries in ENG-1242\n            try {\n                client.callProcedure(\"@AdHoc\", \"select * from blah; dfvsdfgvdf select * from blah WHERE IVAL = 1;\");\n                fail(\"Bad SQL failed to throw expected exception\");\n            }\n            catch (Exception e) {}\n            client.callProcedure(\"@AdHoc\", \"select\\n* from blah;\");\n\n            // try a decimal calculation (ENG-1093)\n            modCount = client.callProcedure(\"@AdHoc\", \"INSERT INTO BLAH VALUES (2, '2011-06-24 10:30:26', 1.12345*1);\").getResults()[0];\n            assertTrue(modCount.getRowCount() == 1);\n            assertTrue(modCount.asScalarLong() == 1);\n            result = client.callProcedure(\"@AdHoc\", \"SELECT * FROM BLAH WHERE IVAL = 2;\").getResults()[0];\n            assertTrue(result.getRowCount() == 1);\n            System.out.println(result.toString());\n        }\n        finally {\n            if (client != null) client.close();\n            client = null;\n\n            if (localServer != null) {\n                localServer.shutdown();\n                localServer.join();\n            }\n            localServer = null;\n\n            // no clue how helpful this is\n            System.gc();\n        }\n    }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testLikeClause() throws Exception {\n\n        final String schema =\n            \"create table STRINGS (\" +\n            \"ID int default 0 not null, \" +\n            \"VAL varchar(32) default null,\" +\n            \"PAT varchar(32) default null,\" +\n            \"PRIMARY KEY(ID));\";\n\n        final LikeTestData[] rowData = {\n            new LikeTestData(\"aaaaaaa\", \"aaa%\"),\n            new LikeTestData(\"abcccc%\", \"abc%\"),\n            new LikeTestData(\"abcdefg\", \"abcdefg\"),\n            new LikeTestData(\"âxxxéyy\", \"âxxx%\"),\n        };\n\n        final LikeTest[] tests = {\n            // Patterns that pass (currently supported)\n            new LikeTest(\"aaa%\", 1),\n            new LikeTest(\"abc%\", 2),\n            new LikeTest(\"AbC%\", 0),\n            new LikeTest(\"zzz%\", 0),\n            new LikeTest(\"%\", rowData.length),\n            new LikeTest(\"a%\", 3),\n            new LikeTest(\"âxxx%\", 1),\n            new NotLikeTest(\"aaa%\", rowData.length - 1),\n            new EscapeLikeTest(\"abcccc|%\", 1, \"|\"),\n            new EscapeLikeTest(\"abc%\", 2, \"|\"),\n            new EscapeLikeTest(\"aaa\", 0, \"|\"),\n            // Patterns that fail (unsupported until we fix the parser)\n            new UnsupportedLikeTest(\"aaaaaaa\", 0),\n            new UnsupportedLikeTest(\"aaa\", 0),\n            new UnsupportedLikeTest(\"abcdef_\", 1),\n            new UnsupportedLikeTest(\"ab_d_fg\", 1),\n            new UnsupportedLikeTest(\"%defg\", 1),\n            new UnsupportedLikeTest(\"%de%\", 1),\n            new UnsupportedLikeTest(\"%de% \", 0),\n            new UnsupportedEscapeLikeTest(\"abcd!%%\", 0, \"!\"),\n        };\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(schema);\n\n        String pathToCatalog = Configuration.getPathToCatalogForTest(\"adhoc.jar\");\n        builder.addPartitionInfo(\"STRINGS\", \"ID\");\n        builder.addStmtProcedure(\"Insert\", \"insert into strings values (?, ?, ?);\", null);\n        boolean success = builder.compileWithDefaultDeployment(pathToCatalog);\n        assertTrue(\"Insert compilation failed\", success);\n\n        VoltDB.Configuration config = new VoltDB.Configuration();\n        config.m_pathToCatalog = pathToCatalog;\n        ServerThread localServer = new ServerThread(config);\n        localServer.start();\n        localServer.waitForInitialization();\n\n        // do the test\n        Client client = ClientFactory.createClient();\n        client.createConnection(\"localhost\");\n\n        int id = 0;\n        for (LikeTestData data : rowData) {\n            id++;\n            String query = String.format(\"insert into strings values (%d,'%s','%s');\", id, data.val, data.pat);\n            VoltTable modCount = client.callProcedure(\"@AdHoc\", query).getResults()[0];\n            assertEquals(\"Bad insert row count:\", 1, modCount.getRowCount());\n            assertEquals(\"Bad insert modification count:\", 1, modCount.asScalarLong());\n        }\n\n        // Tests based on LikeTest list\n        for (LikeTest test : tests) {\n            String clause = test.getClause();\n            String query = String.format(\"select * from strings where val %s\", clause);\n            System.out.printf(\"LIKE clause \\\"%s\\\"\\n\", clause);\n            try {\n                VoltTable result = client.callProcedure(\"@AdHoc\", query).getResults()[0];\n                assertEquals(String.format(\"\\\"%s\\\": bad row count:\", clause),\n                             test.matches, result.getRowCount());\n                System.out.println(result.toString());\n                assertFalse(String.format(\"Expected to crash on \\\"%s\\\", but didn't\", clause), test.crashes);\n            } catch (ProcCallException e) {\n                System.out.printf(\"LIKE clause \\\"%s\\\" failed\\n\", clause);\n                System.out.println(e.toString());\n                assertTrue(\"This failure was unexpected\", test.crashes);\n                System.out.println(\"(This failure was expected)\");\n            }\n        }\n\n        // Tests using PAT column for pattern data\n        {\n            // Expact all PAT column patterns to produce a match with the VAL column string.\n            // We don't support non-literal likes yet. Remove the catch when we do.\n            String query = \"select * from strings where val like pat\";\n            try {\n                VoltTable result = client.callProcedure(\"@AdHoc\", query).getResults()[0];\n                assertEquals(String.format(\"LIKE column test: bad row count:\"),\n                             tests.length, result.getRowCount());\n            } catch (ProcCallException e) {\n                System.out.println(\"LIKE column test failed (expected for now)\");\n            }\n        }\n\n        localServer.shutdown();\n        localServer.join();\n    }","id":70492,"modified_method":"public void testLikeClause() throws Exception {\n\n        final String schema =\n            \"create table STRINGS (\" +\n            \"ID int default 0 not null, \" +\n            \"VAL varchar(32) default null,\" +\n            \"PAT varchar(32) default null,\" +\n            \"PRIMARY KEY(ID));\";\n\n        final LikeTestData[] rowData = {\n            new LikeTestData(\"aaaaaaa\", \"aaa%\"),\n            new LikeTestData(\"abcccc%\", \"abc%\"),\n            new LikeTestData(\"abcdefg\", \"abcdefg\"),\n            new LikeTestData(\"âxxxéyy\", \"âxxx%\"),\n        };\n\n        final LikeTest[] tests = {\n            // Patterns that pass (currently supported)\n            new LikeTest(\"aaa%\", 1),\n            new LikeTest(\"abc%\", 2),\n            new LikeTest(\"AbC%\", 0),\n            new LikeTest(\"zzz%\", 0),\n            new LikeTest(\"%\", rowData.length),\n            new LikeTest(\"a%\", 3),\n            new LikeTest(\"âxxx%\", 1),\n            new NotLikeTest(\"aaa%\", rowData.length - 1),\n            new EscapeLikeTest(\"abcccc|%\", 1, \"|\"),\n            new EscapeLikeTest(\"abc%\", 2, \"|\"),\n            new EscapeLikeTest(\"aaa\", 0, \"|\"),\n            // Patterns that fail (unsupported until we fix the parser)\n            new UnsupportedLikeTest(\"aaaaaaa\", 0),\n            new UnsupportedLikeTest(\"aaa\", 0),\n            new UnsupportedLikeTest(\"abcdef_\", 1),\n            new UnsupportedLikeTest(\"ab_d_fg\", 1),\n            new UnsupportedLikeTest(\"%defg\", 1),\n            new UnsupportedLikeTest(\"%de%\", 1),\n            new UnsupportedLikeTest(\"%de% \", 0),\n            new UnsupportedEscapeLikeTest(\"abcd!%%\", 0, \"!\"),\n        };\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(schema);\n\n        String pathToCatalog = Configuration.getPathToCatalogForTest(\"adhoc_like.jar\");\n        builder.addPartitionInfo(\"STRINGS\", \"ID\");\n        builder.addStmtProcedure(\"Insert\", \"insert into strings values (?, ?, ?);\", null);\n        boolean success = builder.compileWithDefaultDeployment(pathToCatalog);\n        assertTrue(\"Insert compilation failed\", success);\n\n        VoltDB.Configuration config = new VoltDB.Configuration();\n        config.m_pathToCatalog = pathToCatalog;\n        ServerThread localServer = new ServerThread(config);\n\n        Client client = null;\n\n        try {\n            localServer.start();\n            localServer.waitForInitialization();\n\n            // do the test\n            client = ClientFactory.createClient();\n            client.createConnection(\"localhost\");\n\n            int id = 0;\n            for (LikeTestData data : rowData) {\n                id++;\n                String query = String.format(\"insert into strings values (%d,'%s','%s');\", id, data.val, data.pat);\n                VoltTable modCount = client.callProcedure(\"@AdHoc\", query).getResults()[0];\n                assertEquals(\"Bad insert row count:\", 1, modCount.getRowCount());\n                assertEquals(\"Bad insert modification count:\", 1, modCount.asScalarLong());\n            }\n\n            // Tests based on LikeTest list\n            for (LikeTest test : tests) {\n                String clause = test.getClause();\n                String query = String.format(\"select * from strings where val %s\", clause);\n                System.out.printf(\"LIKE clause \\\"%s\\\"\\n\", clause);\n                try {\n                    VoltTable result = client.callProcedure(\"@AdHoc\", query).getResults()[0];\n                    assertEquals(String.format(\"\\\"%s\\\": bad row count:\", clause),\n                                 test.matches, result.getRowCount());\n                    System.out.println(result.toString());\n                    assertFalse(String.format(\"Expected to crash on \\\"%s\\\", but didn't\", clause), test.crashes);\n                } catch (ProcCallException e) {\n                    System.out.printf(\"LIKE clause \\\"%s\\\" failed\\n\", clause);\n                    System.out.println(e.toString());\n                    assertTrue(\"This failure was unexpected\", test.crashes);\n                    System.out.println(\"(This failure was expected)\");\n                }\n            }\n\n            // Tests using PAT column for pattern data\n            {\n                // Expact all PAT column patterns to produce a match with the VAL column string.\n                // We don't support non-literal likes yet. Remove the catch when we do.\n                String query = \"select * from strings where val like pat\";\n                try {\n                    VoltTable result = client.callProcedure(\"@AdHoc\", query).getResults()[0];\n                    assertEquals(String.format(\"LIKE column test: bad row count:\"),\n                                 tests.length, result.getRowCount());\n                } catch (ProcCallException e) {\n                    System.out.println(\"LIKE column test failed (expected for now)\");\n                }\n            }\n        }\n        finally {\n            if (client != null) client.close();\n            client = null;\n\n            if (localServer != null) {\n                localServer.shutdown();\n                localServer.join();\n            }\n            localServer = null;\n\n            // no clue how helpful this is\n            System.gc();\n        }\n    }","commit_id":"beba7ea62c7caea5ebef7346403a4ba3825e7900","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n\t * @param point\n\t * @param parkingPosition is in this case not necessarily has to be a list, \n\t * but it's also used in method <link>collectObjectsFromPoint(PointF point, List<Object> o)<\/link>\n\t */\n\tprivate void getParkingFromPoint(PointF point, List<? super LatLon> parkingPosition) {\n\t\tif (parkingPoint != null && view != null) {\n\t\t\tint ex = (int) point.x;\n\t\t\tint ey = (int) point.y;\n\t\t\tint x = view.getRotatedMapXForPoint(settings.getParkingPosition().getLatitude(), settings.getParkingPosition().getLongitude());\n\t\t\tint y = view.getRotatedMapYForPoint(settings.getParkingPosition().getLatitude(), settings.getParkingPosition().getLongitude());\n\t\t\tif (Math.abs(x - ex) <= radius && Math.abs(y - ey) <= radius) {\n\t\t\t\tparkingPosition.add(parkingPoint);\n\t\t\t}\n\t\t}\n\t}","id":70493,"modified_method":"/**\n\t * @param point\n\t * @param parkingPosition is in this case not necessarily has to be a list, \n\t * but it's also used in method <link>collectObjectsFromPoint(PointF point, List<Object> o)<\/link>\n\t */\n\tprivate void getParkingFromPoint(PointF point, List<? super LatLon> parkingPosition) {\n\t\tif (parkingPoint != null && view != null) {\n\t\t\tint ex = (int) point.x;\n\t\t\tint ey = (int) point.y;\n\t\t\tLatLon position = settings.getParkingPosition();\n\t\t\tint x = view.getRotatedMapXForPoint(position.getLatitude(), position.getLongitude());\n\t\t\tint y = view.getRotatedMapYForPoint(position.getLatitude(), position.getLongitude());\n\t\t\t//the width of an image is 40 px, the height is 60 px -> radius = 20, \n\t\t\t//the position of a parking point relatively to the icon is at the center of the bottom line of the image \n\t\t\tif (Math.abs(x - ex) <= radius && ((y - ey) <= radius*3) && ((y - ey) >= 0)) {\n\t\t\t\tparkingPosition.add(parkingPoint);\n\t\t\t}\n\t\t}\n\t}","commit_id":"33cf5054b8e2c10be0d599f9456342bb751aa936","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic void onDraw(Canvas canvas, RectF latLonBounds, RectF tilesRect, DrawSettings nightMode) {\n//\t\tsettings.clearParkingPosition();\n\t\tparkingPoint = settings.getParkingPosition();\n\t\tif (parkingPoint == null)\n\t\t\treturn;\n\t\ttimeLimit = settings.getParkingType();\n\t\tBitmap parkingIcon;\n\t\tif (!timeLimit) {\n\t\t\tparkingIcon = parkingNoLimitIcon;\n\t\t} else {\n\t\t\tparkingIcon = parkingLimitIcon;\n\t\t}\n\t\tdouble latitude = parkingPoint.getLatitude();\n\t\tdouble longitude = parkingPoint.getLongitude();\n\t\tif (isLocationVisible(latitude, longitude)) {\n\t\t\tint marginX = parkingNoLimitIcon.getWidth() / 2;\n//\t\t\tTODO tune y\n\t\t\tint marginY = 5 * parkingNoLimitIcon.getHeight() / 6;\n\t\t\tint locationX = view.getMapXForPoint(longitude);\n\t\t\tint locationY = view.getMapYForPoint(latitude);\n\t\t\tcanvas.rotate(-view.getRotate(), locationX, locationY);\n\t\t\tcanvas.drawBitmap(parkingIcon, locationX - marginX, locationY - marginY, bitmapPaint);\n\t\t}\n\t}","id":70494,"modified_method":"@Override\n\tpublic void onDraw(Canvas canvas, RectF latLonBounds, RectF tilesRect, DrawSettings nightMode) {\n//\t\tsettings.clearParkingPosition();\n\t\tparkingPoint = settings.getParkingPosition();\n\t\tif (parkingPoint == null)\n\t\t\treturn;\n\t\ttimeLimit = settings.getParkingType();\n\t\tBitmap parkingIcon;\n\t\tif (!timeLimit) {\n\t\t\tparkingIcon = parkingNoLimitIcon;\n\t\t} else {\n\t\t\tparkingIcon = parkingLimitIcon;\n\t\t}\n\t\tdouble latitude = parkingPoint.getLatitude();\n\t\tdouble longitude = parkingPoint.getLongitude();\n\t\tif (isLocationVisible(latitude, longitude)) {\n\t\t\tint marginX = parkingNoLimitIcon.getWidth() / 2;\n//\t\t\tTODO tune y\n\t\t\tint marginY = 72;//magic number!\n\t\t\tint locationX = view.getMapXForPoint(longitude);\n\t\t\tint locationY = view.getMapYForPoint(latitude);\n\t\t\tcanvas.rotate(-view.getRotate(), locationX, locationY);\n\t\t\tcanvas.drawBitmap(parkingIcon, locationX - marginX, locationY - marginY, bitmapPaint);\n\t\t}\n\t}","commit_id":"33cf5054b8e2c10be0d599f9456342bb751aa936","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic void registerMapContextMenuActions(final MapActivity mapActivity,\n\t\t\tfinal double latitude, final double longitude,\n\t\t\tContextMenuAdapter adapter, Object selectedObj) {\n\t\tOnContextMenuClick addListener = new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic void onContextMenuClick(int resId, int pos,\n\t\t\t\t\tboolean isChecked, DialogInterface dialog) {\n\t\t\t\tif (resId == R.string.context_menu_item_add_parking_point) {\n\t\t\t\t\tshowAddParkingDialog(mapActivity, latitude, longitude);\n\t\t\t\t} else if ((resId == R.string.context_menu_item_delete_parking_point)) {\n\t\t\t\t\tshowDeleteDialog(mapActivity);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tadapter.registerItem(R.string.context_menu_item_add_parking_point, 0,\n\t\t\t\taddListener, -1);\n\t\tif (settings.getParkingPosition() != null)\n\t\t\tadapter.registerItem(\n\t\t\t\t\tR.string.context_menu_item_delete_parking_point, 0,\n\t\t\t\t\taddListener, -1);\n\t}","id":70495,"modified_method":"@Override\n\tpublic void registerMapContextMenuActions(final MapActivity mapActivity,\n\t\t\tfinal double latitude, final double longitude,\n\t\t\tContextMenuAdapter adapter, Object selectedObj) {\n\t\tboolean isParkingSelected = false;\n\t\tLatLon parkingPosition = settings.getParkingPosition();\n\t\tif (selectedObj instanceof LatLon && parkingLayer != null) {\n\t\t\tLatLon point = (LatLon)selectedObj;\t\n\t\t\tif ((point.getLatitude() == parkingPosition.getLatitude()) && (point.getLongitude() == parkingPosition.getLongitude()))\n\t\t\t\tisParkingSelected = true;\n\t\t}\n\t\tif (isParkingSelected) {\n\t\t\tOnContextMenuClick removeListener = new OnContextMenuClick() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int resId, int pos,\n\t\t\t\t\t\tboolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tif ((resId == R.string.context_menu_item_delete_parking_point)) {\n\t\t\t\t\t\tshowDeleteDialog(mapActivity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (parkingPosition != null)\n\t\t\t\tadapter.registerItem(R.string.context_menu_item_delete_parking_point, 0, removeListener, 0);\n\t\t}\n\t\t\n\t\tOnContextMenuClick addListener = new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic void onContextMenuClick(int resId, int pos,\n\t\t\t\t\tboolean isChecked, DialogInterface dialog) {\n\t\t\t\tif (resId == R.string.context_menu_item_add_parking_point) {\n\t\t\t\t\tshowAddParkingDialog(mapActivity, latitude, longitude);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tadapter.registerItem(R.string.context_menu_item_add_parking_point, 0, addListener, -1);\n\t\t\n\t}","commit_id":"33cf5054b8e2c10be0d599f9456342bb751aa936","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic void registerMapContextMenuActions(MapActivity mapActivity, final double latitude, final double longitude, ContextMenuAdapter adapter,\n\t\t\tObject selectedObj) {\n\t\tif(selectedObj instanceof Amenity) {\n\t\t\tfinal Amenity a = (Amenity) selectedObj;\n\t\t\tOnContextMenuClick alist = new OnContextMenuClick() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int resId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tif (resId == R.string.poi_context_menu_delete) {\n\t\t\t\t\t\tgetPoiActions().showDeleteDialog(a);\n\t\t\t\t\t} else if (resId == R.string.poi_context_menu_modify) {\n\t\t\t\t\t\tgetPoiActions().showEditDialog(a);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tadapter.registerItem(R.string.poi_context_menu_modify, 0, alist, 1);\n\t\t\tadapter.registerItem(R.string.poi_context_menu_delete, 0, alist, 2);\n\t\t}\n\t\tOnContextMenuClick listener = new OnContextMenuClick() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onContextMenuClick(int resId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\tif (resId == R.string.context_menu_item_create_poi) {\n\t\t\t\t\tpoiActions.showCreateDialog(latitude, longitude);\n\t\t\t\t} else if (resId == R.string.context_menu_item_open_bug) {\n\t\t\t\t\tosmBugsLayer.openBug(latitude, longitude);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tadapter.registerItem(R.string.context_menu_item_create_poi, R.drawable.list_view_create_poi, listener, -1);\n\t\tadapter.registerItem(R.string.context_menu_item_open_bug, R.drawable.list_activities_osm_bugs, listener, -1);\n\t}","id":70496,"modified_method":"@Override\n\tpublic void registerMapContextMenuActions(MapActivity mapActivity, final double latitude, final double longitude, ContextMenuAdapter adapter,\n\t\t\tfinal Object selectedObj) {\n\t\tOnContextMenuClick listener = new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic void onContextMenuClick(int resId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\tif (resId == R.string.context_menu_item_create_poi) {\n\t\t\t\t\tpoiActions.showCreateDialog(latitude, longitude);\n\t\t\t\t} else if (resId == R.string.context_menu_item_open_bug) {\n\t\t\t\t\tosmBugsLayer.openBug(latitude, longitude);\n\t\t\t\t} else if (resId == R.string.poi_context_menu_delete) {\n\t\t\t\t\tgetPoiActions().showDeleteDialog((Amenity) selectedObj);\n\t\t\t\t} else if (resId == R.string.poi_context_menu_modify) {\n\t\t\t\t\tgetPoiActions().showEditDialog((Amenity) selectedObj);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif(selectedObj instanceof Amenity) {\n\t\t\tadapter.registerItem(R.string.poi_context_menu_modify, R.drawable.list_activities_poi_modify, listener, 1);\n\t\t\tadapter.registerItem(R.string.poi_context_menu_delete, R.drawable.list_activities_poi_remove, listener, 2);\n\t\t} else {\n\t\t\tadapter.registerItem(R.string.context_menu_item_create_poi, R.drawable.list_view_create_poi, listener, -1);\n\t\t}\n\t\tadapter.registerItem(R.string.context_menu_item_open_bug, R.drawable.list_activities_osm_bugs, listener, -1);\n\t}","commit_id":"c01cdbd06f2e54cd8c6aff2beefe820438bff260","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void setSelectionModel(MultipleSelectionModel<TreeItem<NavTreeNode>> selectionModel) {\n        this.treeSelectionModel = selectionModel;\n\n        treeSelectionModel.getSelectedItems().addListener((Observable observable) -> {\n            highlightedNodes.clear();\n            for (TreeItem<NavTreeNode> tn : treeSelectionModel.getSelectedItems()) {\n                for (EventClusterNode n : chart.getNodes((EventClusterNode t)\n                        -> t.getEvent().getDescription().equals(tn.getValue().getDescription()))) {\n                    highlightedNodes.add(n);\n                }\n            }\n        });\n    }","id":70497,"modified_method":"public void setSelectionModel(MultipleSelectionModel<TreeItem<NavTreeNode>> selectionModel) {\n        this.treeSelectionModel = selectionModel;\n\n        treeSelectionModel.getSelectedItems().addListener((Observable observable) -> {\n            highlightedNodes.clear();\n            for (TreeItem<NavTreeNode> tn : treeSelectionModel.getSelectedItems()) {\n                for (DetailViewNode<?> n : chart.getNodes((DetailViewNode<?> t)\n                        -> t.getDescription().equals(tn.getValue().getDescription()))) {\n                    highlightedNodes.add(n);\n                }\n            }\n        });\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public DetailViewPane(Pane partPane, Pane contextPane, Region spacer) {\n        super(partPane, contextPane, spacer);\n        chart = new EventDetailChart(dateAxis, verticalAxis, selectedNodes);\n        setChartClickHandler();\n        chart.setData(dataSets);\n        setCenter(chart);\n\n        chart.setPrefHeight(USE_COMPUTED_SIZE);\n\n        settingsNodes = new ArrayList<>(new DetailViewSettingsPane().getChildrenUnmodifiable());\n\n        vertScrollBar.setOrientation(Orientation.VERTICAL);\n        VBox vBox = new VBox();\n        VBox.setVgrow(vertScrollBar, Priority.ALWAYS);\n        vBox.getChildren().add(vertScrollBar);\n        vBox.getChildren().add(region);\n        setRight(vBox);\n\n        dateAxis.setAutoRanging(false);\n        region.minHeightProperty().bind(dateAxis.heightProperty());\n        vertScrollBar.visibleAmountProperty().bind(chart.heightProperty().multiply(100).divide(chart.getMaxVScroll()));\n        requestLayout();\n\n        highlightedNodes.addListener((ListChangeListener.Change<? extends EventClusterNode> change) -> {\n            while (change.next()) {\n                change.getAddedSubList().forEach(aeNode -> {\n                    aeNode.applyHighlightEffect(true);\n                });\n                change.getRemoved().forEach(aeNode -> {\n                    aeNode.applyHighlightEffect(false);\n                });\n            }\n        });\n        //request focus for keyboard scrolling\n        setOnMouseClicked((MouseEvent t) -> {\n            requestFocus();\n        });\n\n        //These scroll related handlers don't affect any other view or the model, so they are handled internally\n        //mouse wheel scroll handler\n        this.onScrollProperty().set((EventHandler<ScrollEvent>) (ScrollEvent t) -> {\n            vertScrollBar.valueProperty().set(Math.max(0, Math.min(100, vertScrollBar.getValue() - t.getDeltaY() / 200.0)));\n        });\n\n        this.setOnKeyPressed((KeyEvent t) -> {\n            switch (t.getCode()) {\n                case PAGE_UP:\n                    incrementScrollValue(-70);\n                    break;\n                case PAGE_DOWN:\n                    incrementScrollValue(70);\n                    break;\n                case KP_UP:\n                case UP:\n                    incrementScrollValue(-10);\n                    break;\n                case KP_DOWN:\n                case DOWN:\n                    incrementScrollValue(10);\n                    break;\n            }\n            t.consume();\n        });\n\n        //scrollbar handler\n        this.vertScrollBar.valueProperty().addListener((o, oldValue, newValue) -> {\n            chart.setVScroll(newValue.doubleValue() / 100.0);\n        });\n        spacer.minWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n        spacer.prefWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n        spacer.maxWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n\n        dateAxis.setTickLabelsVisible(false);\n\n        dateAxis.getTickMarks().addListener((Observable observable) -> {\n            layoutDateLabels();\n        });\n        dateAxis.getTickSpacing().addListener((Observable observable) -> {\n            layoutDateLabels();\n        });\n\n        dateAxis.setTickLabelGap(0);\n\n        selectedNodes.addListener((Observable observable) -> {\n            highlightedNodes.clear();\n            selectedNodes.stream().forEach((tn) -> {\n                for (EventClusterNode n : chart.getNodes((EventClusterNode t)\n                        -> t.getEvent().getDescription().equals(tn.getDescription()))) {\n                    highlightedNodes.add(n);\n                }\n            });\n        });\n\n    }","id":70498,"modified_method":"public DetailViewPane(Pane partPane, Pane contextPane, Region spacer) {\n        super(partPane, contextPane, spacer);\n        chart = new EventDetailChart(dateAxis, verticalAxis, selectedNodes);\n        setChartClickHandler();\n        chart.setData(dataSets);\n        setCenter(chart);\n\n        chart.setPrefHeight(USE_COMPUTED_SIZE);\n\n        settingsNodes = new ArrayList<>(new DetailViewSettingsPane().getChildrenUnmodifiable());\n\n        vertScrollBar.setOrientation(Orientation.VERTICAL);\n        VBox vBox = new VBox();\n        VBox.setVgrow(vertScrollBar, Priority.ALWAYS);\n        vBox.getChildren().add(vertScrollBar);\n        vBox.getChildren().add(region);\n        setRight(vBox);\n\n        dateAxis.setAutoRanging(false);\n        region.minHeightProperty().bind(dateAxis.heightProperty());\n        vertScrollBar.visibleAmountProperty().bind(chart.heightProperty().multiply(100).divide(chart.getMaxVScroll()));\n        requestLayout();\n\n        highlightedNodes.addListener((ListChangeListener.Change<? extends DetailViewNode<?>> change) -> {\n            while (change.next()) {\n                change.getAddedSubList().forEach(aeNode -> {\n                    aeNode.applyHighlightEffect(true);\n                });\n                change.getRemoved().forEach(aeNode -> {\n                    aeNode.applyHighlightEffect(false);\n                });\n            }\n        });\n        //request focus for keyboard scrolling\n        setOnMouseClicked((MouseEvent t) -> {\n            requestFocus();\n        });\n\n        //These scroll related handlers don't affect any other view or the model, so they are handled internally\n        //mouse wheel scroll handler\n        this.onScrollProperty().set((ScrollEvent t) -> {\n            vertScrollBar.valueProperty().set(Math.max(0, Math.min(100, vertScrollBar.getValue() - t.getDeltaY() / 200.0)));\n        });\n\n        this.setOnKeyPressed((KeyEvent t) -> {\n            switch (t.getCode()) {\n                case PAGE_UP:\n                    incrementScrollValue(-70);\n                    break;\n                case PAGE_DOWN:\n                    incrementScrollValue(70);\n                    break;\n                case KP_UP:\n                case UP:\n                    incrementScrollValue(-10);\n                    break;\n                case KP_DOWN:\n                case DOWN:\n                    incrementScrollValue(10);\n                    break;\n            }\n            t.consume();\n        });\n\n        //scrollbar handler\n        this.vertScrollBar.valueProperty().addListener((o, oldValue, newValue) -> {\n            chart.setVScroll(newValue.doubleValue() / 100.0);\n        });\n        spacer.minWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n        spacer.prefWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n        spacer.maxWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n\n        dateAxis.setTickLabelsVisible(false);\n\n        dateAxis.getTickMarks().addListener((Observable observable) -> {\n            layoutDateLabels();\n        });\n        dateAxis.getTickSpacing().addListener((Observable observable) -> {\n            layoutDateLabels();\n        });\n\n        dateAxis.setTickLabelGap(0);\n\n        selectedNodes.addListener((Observable observable) -> {\n            highlightedNodes.clear();\n            selectedNodes.stream().forEach((tn) -> {\n                for (DetailViewNode<?> n : chart.getNodes((DetailViewNode<?> t)\n                        -> t.getDescription().equals(tn.getDescription()))) {\n                    highlightedNodes.add(n);\n                }\n            });\n        });\n\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    protected void applySelectionEffect(DetailViewNode c1, Boolean applied) {\n        c1.applySelectionEffect(applied);\n    }","id":70499,"modified_method":"@Override\n    protected void applySelectionEffect(DetailViewNode<?> c1, Boolean applied) {\n        c1.applySelectionEffect(applied);\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public EventClusterNode(final EventCluster aggEvent, EventClusterNode parentEventNode, EventDetailChart chart) {\n        this.aggEvent = aggEvent;\n        descLOD.set(aggEvent.getDescriptionLOD());\n        this.parentEventNode = parentEventNode;\n        this.chart = chart;\n        sleuthkitCase = chart.getController().getAutopsyCase().getSleuthkitCase();\n        eventsModel = chart.getController().getEventsModel();\n\n        final Region region = new Region();\n        HBox.setHgrow(region, Priority.ALWAYS);\n\n        final HBox hBox = new HBox(descrLabel, countLabel, region, hashIV, tagIV, minusButton, plusButton);\n        if (aggEvent.getEventIDsWithHashHits().isEmpty()) {\n            hashIV.setManaged(false);\n            hashIV.setVisible(false);\n        }\n        if (aggEvent.getEventIDsWithTags().isEmpty()) {\n            tagIV.setManaged(false);\n            tagIV.setVisible(false);\n        }\n        hBox.setPrefWidth(USE_COMPUTED_SIZE);\n        hBox.setMinWidth(USE_PREF_SIZE);\n        hBox.setPadding(new Insets(2, 5, 2, 5));\n        hBox.setAlignment(Pos.CENTER_LEFT);\n\n        minusButton.setVisible(false);\n        plusButton.setVisible(false);\n        minusButton.setManaged(false);\n        plusButton.setManaged(false);\n        final BorderPane borderPane = new BorderPane(subNodePane, hBox, null, null, null);\n        BorderPane.setAlignment(subNodePane, Pos.TOP_LEFT);\n        borderPane.setPrefWidth(USE_COMPUTED_SIZE);\n\n        getChildren().addAll(spanRegion, borderPane);\n\n        setAlignment(Pos.TOP_LEFT);\n        setMinHeight(24);\n        minWidthProperty().bind(spanRegion.widthProperty());\n        setPrefHeight(USE_COMPUTED_SIZE);\n        setMaxHeight(USE_PREF_SIZE);\n\n        //set up subnode pane sizing contraints\n        subNodePane.setPrefHeight(USE_COMPUTED_SIZE);\n        subNodePane.setMinHeight(USE_PREF_SIZE);\n        subNodePane.setMinWidth(USE_PREF_SIZE);\n        subNodePane.setMaxHeight(USE_PREF_SIZE);\n        subNodePane.setMaxWidth(USE_PREF_SIZE);\n        subNodePane.setPickOnBounds(false);\n\n        //setup description label\n        eventTypeImageView.setImage(aggEvent.getType().getFXImage());\n        descrLabel.setGraphic(eventTypeImageView);\n        descrLabel.setPrefWidth(USE_COMPUTED_SIZE);\n        descrLabel.setTextOverrun(OverrunStyle.CENTER_ELLIPSIS);\n\n        descrLabel.setMouseTransparent(true);\n        setDescriptionVisibility(chart.getDescrVisibility().get());\n\n        //setup backgrounds\n        final Color evtColor = aggEvent.getType().getColor();\n        spanFill = new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY));\n        setBackground(spanFill);\n        setCursor(Cursor.HAND);\n        spanRegion.setStyle(\"-fx-border-width:2 0 2 2; -fx-border-radius: 2; -fx-border-color: \" + ColorUtilities.getRGBCode(evtColor) + \";\"); // NON-NLS\n        spanRegion.setBackground(spanFill);\n\n        //set up mouse hover effect and tooltip\n        setOnMouseEntered((MouseEvent e) -> {\n            //defer tooltip creation till needed, this had a surprisingly large impact on speed of loading the chart\n            installTooltip();\n            spanRegion.setEffect(new DropShadow(10, evtColor));\n            minusButton.setVisible(true);\n            plusButton.setVisible(true);\n            minusButton.setManaged(true);\n            plusButton.setManaged(true);\n            toFront();\n        });\n\n        setOnMouseExited((MouseEvent e) -> {\n            spanRegion.setEffect(null);\n            minusButton.setVisible(false);\n            plusButton.setVisible(false);\n            minusButton.setManaged(false);\n            plusButton.setManaged(false);\n        });\n\n        setOnMouseClicked(new EventMouseHandler());\n\n        plusButton.disableProperty().bind(descLOD.isEqualTo(DescriptionLOD.FULL));\n        minusButton.disableProperty().bind(descLOD.isEqualTo(aggEvent.getDescriptionLOD()));\n\n        plusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD next = descLOD.get().next();\n            if (next != null) {\n                loadSubClusters(next);\n                descLOD.set(next);\n            }\n        });\n        minusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD previous = descLOD.get().previous();\n            if (previous != null) {\n                loadSubClusters(previous);\n                descLOD.set(previous);\n            }\n        });\n    }","id":70500,"modified_method":"public EventClusterNode(final EventCluster aggEvent, EventClusterNode parentEventNode, EventDetailChart chart) {\n        this.aggEvent = aggEvent;\n        descLOD.set(aggEvent.getDescriptionLOD());\n        this.parentEventNode = parentEventNode;\n        this.chart = chart;\n        sleuthkitCase = chart.getController().getAutopsyCase().getSleuthkitCase();\n        eventsModel = chart.getController().getEventsModel();\n\n        final Region region = new Region();\n        HBox.setHgrow(region, Priority.ALWAYS);\n\n        final HBox hBox = new HBox(descrLabel, countLabel, region, hashIV, tagIV, minusButton, plusButton);\n        if (aggEvent.getEventIDsWithHashHits().isEmpty()) {\n            hashIV.setManaged(false);\n            hashIV.setVisible(false);\n        }\n        if (aggEvent.getEventIDsWithTags().isEmpty()) {\n            tagIV.setManaged(false);\n            tagIV.setVisible(false);\n        }\n        hBox.setPrefWidth(USE_COMPUTED_SIZE);\n        hBox.setMinWidth(USE_PREF_SIZE);\n        hBox.setPadding(new Insets(2, 5, 2, 5));\n        hBox.setAlignment(Pos.CENTER_LEFT);\n\n        final BorderPane borderPane = new BorderPane(subNodePane, hBox, null, null, null);\n        BorderPane.setAlignment(subNodePane, Pos.TOP_LEFT);\n        borderPane.setPrefWidth(USE_COMPUTED_SIZE);\n\n        getChildren().addAll(spanRegion, borderPane);\n\n        setAlignment(Pos.TOP_LEFT);\n        setMinHeight(24);\n        minWidthProperty().bind(spanRegion.widthProperty());\n        setPrefHeight(USE_COMPUTED_SIZE);\n        setMaxHeight(USE_PREF_SIZE);\n\n        //set up subnode pane sizing contraints\n        subNodePane.setPrefHeight(USE_COMPUTED_SIZE);\n        subNodePane.setMinHeight(USE_PREF_SIZE);\n        subNodePane.setMinWidth(USE_PREF_SIZE);\n        subNodePane.setMaxHeight(USE_PREF_SIZE);\n        subNodePane.setMaxWidth(USE_PREF_SIZE);\n        subNodePane.setPickOnBounds(false);\n\n        //setup description label\n        eventTypeImageView.setImage(aggEvent.getType().getFXImage());\n        descrLabel.setGraphic(eventTypeImageView);\n        descrLabel.setPrefWidth(USE_COMPUTED_SIZE);\n        descrLabel.setTextOverrun(OverrunStyle.CENTER_ELLIPSIS);\n\n        descrLabel.setMouseTransparent(true);\n        setDescriptionVisibility(chart.getDescrVisibility().get());\n\n        //setup backgrounds\n        final Color evtColor = aggEvent.getType().getColor();\n        spanFill = new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY));\n        setBackground(spanFill);\n        setCursor(Cursor.HAND);\n        spanRegion.setStyle(\"-fx-border-width:2 0 2 2; -fx-border-radius: 2; -fx-border-color: \" + ColorUtilities.getRGBCode(evtColor) + \";\"); // NON-NLS\n        spanRegion.setBackground(spanFill);\n\n        //set up mouse hover effect and tooltip\n        setOnMouseEntered((MouseEvent e) -> {\n            //defer tooltip creation till needed, this had a surprisingly large impact on speed of loading the chart\n            installTooltip();\n            spanRegion.setEffect(new DropShadow(10, evtColor));\n            minusButton.setVisible(true);\n            plusButton.setVisible(true);\n            minusButton.setManaged(true);\n            plusButton.setManaged(true);\n            toFront();\n        });\n\n        setOnMouseExited((MouseEvent e) -> {\n            spanRegion.setEffect(null);\n            minusButton.setVisible(false);\n            plusButton.setVisible(false);\n            minusButton.setManaged(false);\n            plusButton.setManaged(false);\n        });\n\n        setOnMouseClicked(new EventMouseHandler());\n\n        plusButton.disableProperty().bind(descLOD.isEqualTo(DescriptionLOD.FULL));\n        minusButton.disableProperty().bind(descLOD.isEqualTo(aggEvent.getDescriptionLOD()));\n\n        plusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD next = descLOD.get().next();\n            if (next != null) {\n                loadSubClusters(next);\n                descLOD.set(next);\n            }\n        });\n        minusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD previous = descLOD.get().previous();\n            if (previous != null) {\n                loadSubClusters(previous);\n                descLOD.set(previous);\n            }\n        });\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public Pane getSubNodePane() {\n        return subNodePane;\n    }","id":70501,"modified_method":"@Override\n    public List<EventClusterNode> getSubNodes() {\n        return subNodePane.getChildrenUnmodifiable().stream()\n                .map(EventClusterNode.class::cast)\n                .collect(Collectors.toList());\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * loads sub-clusters at the given Description LOD\n     *\n     * @param newDescriptionLOD\n     */\n    synchronized private void loadSubClusters(DescriptionLOD newDescriptionLOD) {\n        getSubNodePane().getChildren().clear();\n        if (newDescriptionLOD == aggEvent.getDescriptionLOD()) {\n            chart.setRequiresLayout(true);\n            chart.requestChartLayout();\n        } else {\n            RootFilter combinedFilter = eventsModel.filterProperty().get().copyOf();\n            //make a new filter intersecting the global filter with text(description) and type filters to restrict sub-clusters\n            combinedFilter.getSubFilters().addAll(new TextFilter(aggEvent.getDescription()),\n                    new TypeFilter(aggEvent.getType()));\n\n            //make a new end inclusive span (to 'filter' with)\n            final Interval span = aggEvent.getSpan().withEndMillis(aggEvent.getSpan().getEndMillis() + 1000);\n\n            //make a task to load the subnodes\n            LoggedTask<List<EventClusterNode>> loggedTask = new LoggedTask<List<EventClusterNode>>(\n                    NbBundle.getMessage(this.getClass(), \"AggregateEventNode.loggedTask.name\"), true) {\n\n                        @Override\n                        protected List<EventClusterNode> call() throws Exception {\n                            //query for the sub-clusters\n                            List<EventCluster> aggregatedEvents = eventsModel.getAggregatedEvents(new ZoomParams(span,\n                                            eventsModel.eventTypeZoomProperty().get(),\n                                            combinedFilter,\n                                            newDescriptionLOD));\n                            //for each sub cluster make an AggregateEventNode to visually represent it, and set x-position\n                            return aggregatedEvents.stream().map(aggEvent -> {\n                                EventClusterNode subNode = new EventClusterNode(aggEvent, EventClusterNode.this, chart);\n                                subNode.setLayoutX(chart.getXAxis().getDisplayPosition(new DateTime(aggEvent.getSpan().getStartMillis())) - getLayoutXCompensation());\n                                return subNode;\n                            }).collect(Collectors.toList()); // return list of AggregateEventNodes representing subclusters\n                        }\n\n                        @Override\n                        protected void succeeded() {\n                            try {\n                                chart.setCursor(Cursor.WAIT);\n                                //assign subNodes and request chart layout\n                                getSubNodePane().getChildren().setAll(get());\n                                setDescriptionVisibility(descrVis);\n                                chart.setRequiresLayout(true);\n                                chart.requestChartLayout();\n                                chart.setCursor(null);\n                            } catch (InterruptedException | ExecutionException ex) {\n                                LOGGER.log(Level.SEVERE, \"Error loading subnodes\", ex);\n                            }\n                        }\n                    };\n\n            //start task\n            chart.getController().monitorTask(loggedTask);\n        }\n    }","id":70502,"modified_method":"/**\n     * loads sub-clusters at the given Description LOD\n     *\n     * @param newDescriptionLOD\n     */\n    synchronized private void loadSubClusters(DescriptionLOD newDescriptionLOD) {\n        subNodePane.getChildren().clear();\n        if (newDescriptionLOD == aggEvent.getDescriptionLOD()) {\n            chart.setRequiresLayout(true);\n            chart.requestChartLayout();\n        } else {\n            RootFilter combinedFilter = eventsModel.filterProperty().get().copyOf();\n            //make a new filter intersecting the global filter with text(description) and type filters to restrict sub-clusters\n            combinedFilter.getSubFilters().addAll(new TextFilter(aggEvent.getDescription()),\n                    new TypeFilter(aggEvent.getType()));\n\n            //make a new end inclusive span (to 'filter' with)\n            final Interval span = aggEvent.getSpan().withEndMillis(aggEvent.getSpan().getEndMillis() + 1000);\n\n            //make a task to load the subnodes\n            LoggedTask<List<EventClusterNode>> loggedTask = new LoggedTask<List<EventClusterNode>>(\n                    NbBundle.getMessage(this.getClass(), \"AggregateEventNode.loggedTask.name\"), true) {\n\n                        @Override\n                        protected List<EventClusterNode> call() throws Exception {\n                            //query for the sub-clusters\n                            List<EventCluster> aggregatedEvents = eventsModel.getAggregatedEvents(new ZoomParams(span,\n                                            eventsModel.eventTypeZoomProperty().get(),\n                                            combinedFilter,\n                                            newDescriptionLOD));\n                            //for each sub cluster make an AggregateEventNode to visually represent it, and set x-position\n                            return aggregatedEvents.stream().map(aggEvent -> {\n                                EventClusterNode subNode = new EventClusterNode(aggEvent, EventClusterNode.this, chart);\n                                subNode.setLayoutX(chart.getXAxis().getDisplayPosition(new DateTime(aggEvent.getSpan().getStartMillis())) - getLayoutXCompensation());\n                                return subNode;\n                            }).collect(Collectors.toList()); // return list of AggregateEventNodes representing subclusters\n                        }\n\n                        @Override\n                        protected void succeeded() {\n                            try {\n                                chart.setCursor(Cursor.WAIT);\n                                //assign subNodes and request chart layout\n                                subNodePane.getChildren().setAll(get());\n                                setDescriptionVisibility(descrVis);\n                                chart.setRequiresLayout(true);\n                                chart.requestChartLayout();\n                                chart.setCursor(null);\n                            } catch (InterruptedException | ExecutionException ex) {\n                                LOGGER.log(Level.SEVERE, \"Error loading subnodes\", ex);\n                            }\n                        }\n                    };\n\n            //start task\n            chart.getController().monitorTask(loggedTask);\n        }\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * apply the 'effect' to visually indicate highlighted nodes\n     *\n     * @param applied true to apply the highlight 'effect', false to remove it\n     */\n    synchronized void applyHighlightEffect(boolean applied) {\n\n        if (applied) {\n            descrLabel.setStyle(\"-fx-font-weight: bold;\"); // NON-NLS\n            spanFill = new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .3), CORNER_RADII, Insets.EMPTY));\n            spanRegion.setBackground(spanFill);\n            setBackground(new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .2), CORNER_RADII, Insets.EMPTY)));\n        } else {\n            descrLabel.setStyle(\"-fx-font-weight: normal;\"); // NON-NLS\n            spanFill = new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY));\n            spanRegion.setBackground(spanFill);\n            setBackground(new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY)));\n        }\n    }","id":70503,"modified_method":"/**\n     * apply the 'effect' to visually indicate highlighted nodes\n     *\n     * @param applied true to apply the highlight 'effect', false to remove it\n     */\n    public synchronized void applyHighlightEffect(boolean applied) {\n\n        if (applied) {\n            descrLabel.setStyle(\"-fx-font-weight: bold;\"); // NON-NLS\n            spanFill = new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .3), CORNER_RADII, Insets.EMPTY));\n            spanRegion.setBackground(spanFill);\n            setBackground(new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .2), CORNER_RADII, Insets.EMPTY)));\n        } else {\n            descrLabel.setStyle(\"-fx-font-weight: normal;\"); // NON-NLS\n            spanFill = new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY));\n            spanRegion.setBackground(spanFill);\n            setBackground(new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY)));\n        }\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Layout the nodes representing events via the following algorithm.\n     *\n     * we start with a list of nodes (each representing an event) - sort the\n     * list of nodes by span start time of the underlying event - initialize\n     * empty map (maxXatY) from y-position to max used x-value - for each node:\n     * -- autosize the node (based on text label) -- get the event's start and\n     * end positions from the dateaxis -- size the capsule representing event\n     * duration -- starting from the top of the chart: --- (1)check if maxXatY\n     * is to the left of the start position: -------if maxXatY less than start\n     * position , good, put the current node here, mark end position as maxXatY,\n     * go to next node -------if maxXatY greater than start position, increment\n     * y position, do -------------check(1) again until maxXatY less than start\n     * position\n     */\n    @Override\n    protected synchronized void layoutPlotChildren() {\n\n        if (requiresLayout) {\n            setCursor(Cursor.WAIT);\n            double minY = 0;\n\n            maxY.set(0.0);\n\n            if (bandByType.get() == false) {\n                if (alternateLayout.get() == true) {\n                    List<EventStripeNode> nodes = new ArrayList<>(stripeNodeMap.values());\n                    Collections.sort(nodes, Comparator.comparing(DetailViewNode::getStartMillis));\n                    layoutNodes(nodes, minY, 0);\n                } else {\n                    List<EventClusterNode> nodes = new ArrayList<>(nodeMap.values());\n                    Collections.sort(nodes, Comparator.comparing(DetailViewNode::getStartMillis));\n                    layoutNodes(nodes, minY, 0);\n                }\n\n            } else {\n                for (Series<DateTime, EventCluster> s : sortedSeriesList) {\n                    if (alternateLayout.get() == true) {\n                        List<EventStripeNode> nodes = s.getData().stream()\n                                .map(Data::getYValue)\n                                .map(cluster -> stripeDescMap.get(ImmutablePair.of(cluster.getType(), cluster.getDescription())))\n                                .distinct()\n                                .sorted(Comparator.comparing(EventStripe::getStartMillis))\n                                .map(stripeNodeMap::get)\n                                .collect(Collectors.toList());\n                        layoutNodes(nodes, minY, 0);\n                    } else {\n                        List<EventClusterNode> nodes = s.getData().stream()\n                                .map(Data::getYValue)\n                                .map(nodeMap::get)\n                                .filter(Objects::nonNull)\n                                .sorted(Comparator.comparing(EventClusterNode::getStartMillis))\n                                .collect(Collectors.toList());\n                        layoutNodes(nodes, minY, 0);\n                    }\n                    minY = maxY.get();\n                }\n            }\n            setCursor(null);\n            requiresLayout = false;\n        }\n        layoutProjectionMap();\n    }","id":70504,"modified_method":"/**\n     * Layout the nodes representing events via the following algorithm.\n     *\n     * we start with a list of nodes (each representing an event) - sort the\n     * list of nodes by span start time of the underlying event - initialize\n     * empty map (maxXatY) from y-position to max used x-value - for each node:\n     * -- autosize the node (based on text label) -- get the event's start and\n     * end positions from the dateaxis -- size the capsule representing event\n     * duration -- starting from the top of the chart: --- (1)check if maxXatY\n     * is to the left of the start position: -------if maxXatY less than start\n     * position , good, put the current node here, mark end position as maxXatY,\n     * go to next node -------if maxXatY greater than start position, increment\n     * y position, do -------------check(1) again until maxXatY less than start\n     * position\n     */\n    @Override\n    protected synchronized void layoutPlotChildren() {\n\n        if (requiresLayout) {\n            setCursor(Cursor.WAIT);\n            double minY = 0;\n\n            maxY.set(0.0);\n\n            if (bandByType.get() == false) {\n                if (alternateLayout.get() == true) {\n                    List<EventStripeNode> nodes = new ArrayList<>(stripeNodeMap.values());\n                    nodes.sort(Comparator.comparing(DetailViewNode<?>::getStartMillis));\n                    layoutNodes(nodes, minY, 0);\n                } else {\n                    List<EventClusterNode> nodes = new ArrayList<>(nodeMap.values());\n                    nodes.sort(Comparator.comparing(DetailViewNode<?>::getStartMillis));\n                    layoutNodes(nodes, minY, 0);\n                }\n\n            } else {\n                for (Series<DateTime, EventCluster> s : sortedSeriesList) {\n                    if (alternateLayout.get() == true) {\n                        List<EventStripeNode> nodes = s.getData().stream()\n                                .map(Data::getYValue)\n                                .map(cluster -> stripeDescMap.get(ImmutablePair.of(cluster.getType(), cluster.getDescription())))\n                                .distinct()\n                                .sorted(Comparator.comparing(EventStripe::getStartMillis))\n                                .map(stripeNodeMap::get)\n                                .collect(Collectors.toList());\n                        layoutNodes(nodes, minY, 0);\n                    } else {\n                        List<EventClusterNode> nodes = s.getData().stream()\n                                .map(Data::getYValue)\n                                .map(nodeMap::get)\n                                .filter(Objects::nonNull)\n                                .sorted(Comparator.comparing(EventClusterNode::getStartMillis))\n                                .collect(Collectors.toList());\n                        layoutNodes(nodes, minY, 0);\n                    }\n                    minY = maxY.get();\n                }\n            }\n            setCursor(null);\n            requiresLayout = false;\n        }\n        layoutProjectionMap();\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"private void layoutProjectionMap() {\n        for (final Map.Entry<DetailViewNode, Line> entry : projectionMap.entrySet()) {\n            final DetailViewNode aggNode = entry.getKey();\n            final Line line = entry.getValue();\n\n            line.setStartX(getParentXForValue(new DateTime(aggNode.getStartMillis(), TimeLineController.getJodaTimeZone())));\n            line.setEndX(getParentXForValue(new DateTime(aggNode.getEndMillis(), TimeLineController.getJodaTimeZone())));\n            line.setStartY(getXAxis().getLayoutY() + PROJECTED_LINE_Y_OFFSET);\n            line.setEndY(getXAxis().getLayoutY() + PROJECTED_LINE_Y_OFFSET);\n        }\n    }","id":70505,"modified_method":"private void layoutProjectionMap() {\n        for (final Map.Entry<DetailViewNode<?>, Line> entry : projectionMap.entrySet()) {\n            final DetailViewNode<?> aggNode = entry.getKey();\n            final Line line = entry.getValue();\n\n            line.setStartX(getParentXForValue(new DateTime(aggNode.getStartMillis(), TimeLineController.getJodaTimeZone())));\n            line.setEndX(getParentXForValue(new DateTime(aggNode.getEndMillis(), TimeLineController.getJodaTimeZone())));\n            line.setStartY(getXAxis().getLayoutY() + PROJECTED_LINE_Y_OFFSET);\n            line.setEndY(getXAxis().getLayoutY() + PROJECTED_LINE_Y_OFFSET);\n        }\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * layout the nodes in the given list, starting form the given minimum y\n     * coordinate.\n     *\n     * @param nodes\n     * @param minY\n     */\n    private synchronized <D extends Region & DetailViewNode> double layoutNodes(final Collection<D> nodes, final double minY, final double xOffset) {\n        //hash map from y value to right most occupied x value.  This tells you for a given 'row' what is the first avaialable slot\n        Map<Integer, Double> maxXatY = new HashMap<>();\n        double localMax = minY;\n        //for each node lay size it and position it in first available slot\n        for (D n : nodes) {\n            n.setDescriptionVisibility(descrVisibility.get());\n            double rawDisplayPosition = getXAxis().getDisplayPosition(new DateTime(n.getStartMillis()));\n\n            //position of start and end according to range of axis\n            double startX = rawDisplayPosition - xOffset;\n            double layoutNodesResultHeight = 0;\n\n            double span = 0;\n            if (n instanceof EventClusterNode) {\n                if (n.getSubNodePane().getChildren().isEmpty() == false) {\n                    List<EventClusterNode> children = n.getSubNodePane().getChildren().stream()\n                            .map(EventClusterNode.class::cast)\n                            .sorted(Comparator.comparing(DetailViewNode::getStartMillis))\n                            .collect(Collectors.toList());\n                    layoutNodesResultHeight = layoutNodes(children, 0, rawDisplayPosition);\n                }\n                double endX = getXAxis().getDisplayPosition(new DateTime(n.getEndMillis())) - xOffset;\n                span = endX - startX;\n\n                //size timespan border\n                n.setSpanWidths(Arrays.asList(span));\n            } else {\n                if (n.getSubNodePane().getChildren().isEmpty() == false) {\n                    List<EventStripeNode> children = n.getSubNodePane().getChildren().stream()\n                            .map(EventStripeNode.class::cast)\n                            .sorted(Comparator.comparing(DetailViewNode::getStartMillis))\n                            .collect(Collectors.toList());\n                    layoutNodesResultHeight = layoutNodes(children, 0, rawDisplayPosition);\n                }\n                EventStripeNode cn = (EventStripeNode) n;\n                List<Double> spanWidths = new ArrayList<>();\n                double x = getXAxis().getDisplayPosition(new DateTime(cn.getStartMillis()));;\n                double x2;\n                Iterator<Range<Long>> ranges = cn.getCluster().getRanges().iterator();\n                Range<Long> range = ranges.next();\n                do {\n                    x2 = getXAxis().getDisplayPosition(new DateTime(range.upperEndpoint()));\n                    double clusterSpan = x2 - x;\n                    span += clusterSpan;\n                    spanWidths.add(clusterSpan);\n                    if (ranges.hasNext()) {\n                        range = ranges.next();\n                        x = getXAxis().getDisplayPosition(new DateTime(range.lowerEndpoint()));\n                        double gapSpan = x - x2;\n                        span += gapSpan;\n                        spanWidths.add(gapSpan);\n                    }\n\n                } while (ranges.hasNext());\n\n                cn.setSpanWidths(spanWidths);\n            }\n            if (truncateAll.get()) { //if truncate option is selected limit width of description label\n                n.setDescriptionWidth(Math.max(span, truncateWidth.get()));\n            } else { //else set it unbounded\n                n.setDescriptionWidth(USE_PREF_SIZE);//20 + new Text(tlNode.getDisplayedDescription()).getLayoutBounds().getWidth());\n            }\n\n            n.autosize(); //compute size of tlNode based on constraints and event data\n\n            //get position of right edge of node ( influenced by description label)\n            double xRight = startX + n.getWidth();\n\n            //get the height of the node\n            final double h = layoutNodesResultHeight == 0 ? n.getHeight() : layoutNodesResultHeight + DEFAULT_ROW_HEIGHT;\n            //initial test position\n            double yPos = minY;\n\n            double yPos2 = yPos + h;\n\n            if (oneEventPerRow.get()) {\n                // if onePerRow, just put it at end\n                yPos = (localMax + 2);\n                yPos2 = yPos + h;\n\n            } else {//else\n\n                boolean overlapping = true;\n                while (overlapping) {\n                    //loop through y values looking for available slot.\n\n                    overlapping = false;\n                    //check each pixel from bottom to top.\n                    for (double y = yPos2; y >= yPos; y--) {\n                        final Double maxX = maxXatY.get((int) y);\n                        if (maxX != null && maxX >= startX - 4) {\n                            //if that pixel is already used\n                            //jump top to this y value and repeat until free slot is found.\n                            overlapping = true;\n                            yPos = y + 4;\n                            yPos2 = yPos + h;\n                            break;\n                        }\n                    }\n                }\n                //mark used y values\n                for (double y = yPos; y <= yPos2; y++) {\n                    maxXatY.put((int) y, xRight);\n                }\n            }\n            localMax = Math.max(yPos2, localMax);\n\n            Timeline tm = new Timeline(new KeyFrame(Duration.seconds(1.0),\n                    new KeyValue(n.layoutXProperty(), startX),\n                    new KeyValue(n.layoutYProperty(), yPos)));\n\n            tm.play();\n        }\n        maxY.set(Math.max(maxY.get(), localMax));\n        return localMax - minY;\n    }","id":70506,"modified_method":"/**\n     * layout the nodes in the given list, starting form the given minimum y\n     * coordinate.\n     *\n     * @param nodes\n     * @param minY\n     */\n    private synchronized <DVRegion extends Region & DetailViewNode<DVRegion>> double layoutNodes(final Collection<DVRegion> nodes, final double minY, final double xOffset) {\n        //hash map from y value to right most occupied x value.  This tells you for a given 'row' what is the first avaialable slot\n        Map<Integer, Double> maxXatY = new HashMap<>();\n        double localMax = minY;\n        //for each node lay size it and position it in first available slot\n        for (DVRegion n : nodes) {\n            n.setDescriptionVisibility(descrVisibility.get());\n            double rawDisplayPosition = getXAxis().getDisplayPosition(new DateTime(n.getStartMillis()));\n\n            //position of start and end according to range of axis\n            double startX = rawDisplayPosition - xOffset;\n            double layoutNodesResultHeight = 0;\n\n            double span = 0;\n            List<DVRegion> subNodes = n.getSubNodes();\n            if (subNodes.isEmpty() == false) {\n                subNodes.sort(Comparator.comparing((DVRegion t) -> t.getStartMillis()));\n                layoutNodesResultHeight = layoutNodes(subNodes, 0, rawDisplayPosition);\n            }\n\n            if (n instanceof EventClusterNode) {\n                double endX = getXAxis().getDisplayPosition(new DateTime(n.getEndMillis())) - xOffset;\n                span = endX - startX;\n                //size timespan border\n                n.setSpanWidths(Arrays.asList(span));\n            } else {\n\n                EventStripeNode cn = (EventStripeNode) n;\n                List<Double> spanWidths = new ArrayList<>();\n                double x = getXAxis().getDisplayPosition(new DateTime(cn.getStartMillis()));;\n                double x2;\n                Iterator<Range<Long>> ranges = cn.getCluster().getRanges().iterator();\n                Range<Long> range = ranges.next();\n                do {\n                    x2 = getXAxis().getDisplayPosition(new DateTime(range.upperEndpoint()));\n                    double clusterSpan = x2 - x;\n                    span += clusterSpan;\n                    spanWidths.add(clusterSpan);\n                    if (ranges.hasNext()) {\n                        range = ranges.next();\n                        x = getXAxis().getDisplayPosition(new DateTime(range.lowerEndpoint()));\n                        double gapSpan = x - x2;\n                        span += gapSpan;\n                        spanWidths.add(gapSpan);\n                    }\n\n                } while (ranges.hasNext());\n\n                cn.setSpanWidths(spanWidths);\n            }\n            if (truncateAll.get()) { //if truncate option is selected limit width of description label\n                n.setDescriptionWidth(Math.max(span, truncateWidth.get()));\n            } else { //else set it unbounded\n                n.setDescriptionWidth(USE_PREF_SIZE);//20 + new Text(tlNode.getDisplayedDescription()).getLayoutBounds().getWidth());\n            }\n\n            n.autosize(); //compute size of tlNode based on constraints and event data\n\n            //get position of right edge of node ( influenced by description label)\n            double xRight = startX + n.getWidth();\n\n            //get the height of the node\n            final double h = layoutNodesResultHeight == 0 ? n.getHeight() : layoutNodesResultHeight + DEFAULT_ROW_HEIGHT;\n            //initial test position\n            double yPos = minY;\n\n            double yPos2 = yPos + h;\n\n            if (oneEventPerRow.get()) {\n                // if onePerRow, just put it at end\n                yPos = (localMax + 2);\n                yPos2 = yPos + h;\n\n            } else {//else\n\n                boolean overlapping = true;\n                while (overlapping) {\n                    //loop through y values looking for available slot.\n\n                    overlapping = false;\n                    //check each pixel from bottom to top.\n                    for (double y = yPos2; y >= yPos; y--) {\n                        final Double maxX = maxXatY.get((int) y);\n                        if (maxX != null && maxX >= startX - 4) {\n                            //if that pixel is already used\n                            //jump top to this y value and repeat until free slot is found.\n                            overlapping = true;\n                            yPos = y + 4;\n                            yPos2 = yPos + h;\n                            break;\n                        }\n                    }\n                }\n                //mark used y values\n                for (double y = yPos; y <= yPos2; y++) {\n                    maxXatY.put((int) y, xRight);\n                }\n            }\n            localMax = Math.max(yPos2, localMax);\n\n            Timeline tm = new Timeline(new KeyFrame(Duration.seconds(1.0),\n                    new KeyValue(n.layoutXProperty(), startX),\n                    new KeyValue(n.layoutYProperty(), yPos)));\n\n            tm.play();\n        }\n        maxY.set(Math.max(maxY.get(), localMax));\n        return localMax - minY;\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"Iterable<EventClusterNode> getAllNodes() {\n        return getNodes(x -> true);\n    }","id":70507,"modified_method":"Iterable<DetailViewNode<?>> getAllNodes() {\n        return getNodes(x -> true);\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"EventDetailChart(DateAxis dateAxis, final Axis<EventCluster> verticalAxis, ObservableList<DetailViewNode> selectedNodes) {\n        super(dateAxis, verticalAxis);\n        dateAxis.setAutoRanging(false);\n\n        //yAxis.setVisible(false);//TODO: why doesn't this hide the vertical axis, instead we have to turn off all parts individually? -jm\n        verticalAxis.setTickLabelsVisible(false);\n        verticalAxis.setTickMarkVisible(false);\n\n        setLegendVisible(false);\n        setPadding(Insets.EMPTY);\n        setAlternativeColumnFillVisible(true);\n\n        //all nodes are added to nodeGroup to facilitate scrolling rather than to getPlotChildren() directly\n        getPlotChildren().add(nodeGroup);\n\n        //bind listener to events that should trigger layout\n        widthProperty().addListener(layoutInvalidationListener);\n        heightProperty().addListener(layoutInvalidationListener);\n//        boundsInLocalProperty().addListener(layoutInvalidationListener);\n\n        bandByType.addListener(layoutInvalidationListener);\n        oneEventPerRow.addListener(layoutInvalidationListener);\n        truncateAll.addListener(layoutInvalidationListener);\n        truncateWidth.addListener(layoutInvalidationListener);\n        descrVisibility.addListener(layoutInvalidationListener);\n\n        //this is needed to allow non circular binding of the guideline and timerangRect heights to the height of the chart\n        boundsInLocalProperty().addListener((Observable observable) -> {\n            setPrefHeight(boundsInLocalProperty().get().getHeight());\n        });\n\n        //set up mouse listeners\n        final EventHandler<MouseEvent> clickHandler = (MouseEvent clickEvent) -> {\n            if (chartContextMenu != null) {\n                chartContextMenu.hide();\n            }\n            if (clickEvent.getButton() == MouseButton.SECONDARY && clickEvent.isStillSincePress()) {\n\n                chartContextMenu = ActionUtils.createContextMenu(Arrays.asList(new Action(\n                        NbBundle.getMessage(this.getClass(), \"EventDetailChart.chartContextMenu.placeMarker.name\")) {\n                            {\n                                setGraphic(new ImageView(new Image(\"/org/sleuthkit/autopsy/timeline/images/marker.png\", 16, 16, true, true, true))); // NON-NLS\n                                setEventHandler((ActionEvent t) -> {\n                                    if (guideLine == null) {\n                                        guideLine = new GuideLine(0, 0, 0, getHeight(), dateAxis);\n                                        guideLine.relocate(clickEvent.getX(), 0);\n                                        guideLine.endYProperty().bind(heightProperty().subtract(dateAxis.heightProperty().subtract(dateAxis.tickLengthProperty())));\n\n                                        getChartChildren().add(guideLine);\n\n                                        guideLine.setOnMouseClicked((MouseEvent event) -> {\n                                            if (event.getButton() == MouseButton.SECONDARY) {\n                                                clearGuideLine();\n                                                event.consume();\n                                            }\n                                        });\n                                    } else {\n                                        guideLine.relocate(clickEvent.getX(), 0);\n                                    }\n                                });\n                            }\n\n                        }, new ActionGroup(\n                                NbBundle.getMessage(this.getClass(), \"EventDetailChart.contextMenu.zoomHistory.name\"),\n                                new Back(controller),\n                                new Forward(controller))));\n                chartContextMenu.setAutoHide(true);\n                chartContextMenu.show(EventDetailChart.this, clickEvent.getScreenX(), clickEvent.getScreenY());\n                clickEvent.consume();\n            }\n        };\n\n        setOnMouseClicked(clickHandler);\n\n        //use one handler with an if chain because it maintains state\n        final ChartDragHandler<DateTime, EventDetailChart> dragHandler = new ChartDragHandler<>(this, getXAxis());\n        setOnMousePressed(dragHandler);\n        setOnMouseReleased(dragHandler);\n        setOnMouseDragged(dragHandler);\n\n        projectionMap.addListener((MapChangeListener.Change<? extends DetailViewNode, ? extends Line> change) -> {\n            final Line valueRemoved = change.getValueRemoved();\n            if (valueRemoved != null) {\n                getChartChildren().removeAll(valueRemoved);\n            }\n            final Line valueAdded = change.getValueAdded();\n            if (valueAdded != null) {\n                getChartChildren().add(valueAdded);\n            }\n        });\n\n        this.selectedNodes = selectedNodes;\n        this.selectedNodes.addListener((\n                ListChangeListener.Change<? extends DetailViewNode> c) -> {\n                    while (c.next()) {\n                        c.getRemoved().forEach((DetailViewNode t) -> {\n                            projectionMap.remove(t);\n                        });\n                        c.getAddedSubList().forEach((DetailViewNode t) -> {\n                            Line line = new Line(dateAxis.localToParent(dateAxis.getDisplayPosition(new DateTime(t.getStartMillis(), TimeLineController.getJodaTimeZone())), 0).getX(), dateAxis.getLayoutY() + PROJECTED_LINE_Y_OFFSET,\n                                    dateAxis.localToParent(dateAxis.getDisplayPosition(new DateTime(t.getEndMillis(), TimeLineController.getJodaTimeZone())), 0).getX(), dateAxis.getLayoutY() + PROJECTED_LINE_Y_OFFSET\n                            );\n                            line.setStroke(t.getType().getColor().deriveColor(0, 1, 1, .5));\n                            line.setStrokeWidth(PROJECTED_LINE_STROKE_WIDTH);\n                            line.setStrokeLineCap(StrokeLineCap.ROUND);\n                            projectionMap.put(t, line);\n                        });\n\n                    }\n\n                    this.controller.selectEventIDs(selectedNodes.stream()\n                            .flatMap((DetailViewNode aggNode) -> aggNode.getEventIDs().stream())\n                            .collect(Collectors.toList()));\n                });\n\n        requestChartLayout();\n    }","id":70508,"modified_method":"EventDetailChart(DateAxis dateAxis, final Axis<EventCluster> verticalAxis, ObservableList<DetailViewNode<?>> selectedNodes) {\n        super(dateAxis, verticalAxis);\n        dateAxis.setAutoRanging(false);\n\n        //yAxis.setVisible(false);//TODO: why doesn't this hide the vertical axis, instead we have to turn off all parts individually? -jm\n        verticalAxis.setTickLabelsVisible(false);\n        verticalAxis.setTickMarkVisible(false);\n\n        setLegendVisible(false);\n        setPadding(Insets.EMPTY);\n        setAlternativeColumnFillVisible(true);\n\n        //all nodes are added to nodeGroup to facilitate scrolling rather than to getPlotChildren() directly\n        getPlotChildren().add(nodeGroup);\n\n        //bind listener to events that should trigger layout\n        widthProperty().addListener(layoutInvalidationListener);\n        heightProperty().addListener(layoutInvalidationListener);\n//        boundsInLocalProperty().addListener(layoutInvalidationListener);\n\n        bandByType.addListener(layoutInvalidationListener);\n        oneEventPerRow.addListener(layoutInvalidationListener);\n        truncateAll.addListener(layoutInvalidationListener);\n        truncateWidth.addListener(layoutInvalidationListener);\n        descrVisibility.addListener(layoutInvalidationListener);\n\n        //this is needed to allow non circular binding of the guideline and timerangRect heights to the height of the chart\n        boundsInLocalProperty().addListener((Observable observable) -> {\n            setPrefHeight(boundsInLocalProperty().get().getHeight());\n        });\n\n        //set up mouse listeners\n        final EventHandler<MouseEvent> clickHandler = (MouseEvent clickEvent) -> {\n            if (chartContextMenu != null) {\n                chartContextMenu.hide();\n            }\n            if (clickEvent.getButton() == MouseButton.SECONDARY && clickEvent.isStillSincePress()) {\n\n                chartContextMenu = ActionUtils.createContextMenu(Arrays.asList(new Action(\n                        NbBundle.getMessage(this.getClass(), \"EventDetailChart.chartContextMenu.placeMarker.name\")) {\n                            {\n                                setGraphic(new ImageView(new Image(\"/org/sleuthkit/autopsy/timeline/images/marker.png\", 16, 16, true, true, true))); // NON-NLS\n                                setEventHandler((ActionEvent t) -> {\n                                    if (guideLine == null) {\n                                        guideLine = new GuideLine(0, 0, 0, getHeight(), dateAxis);\n                                        guideLine.relocate(clickEvent.getX(), 0);\n                                        guideLine.endYProperty().bind(heightProperty().subtract(dateAxis.heightProperty().subtract(dateAxis.tickLengthProperty())));\n\n                                        getChartChildren().add(guideLine);\n\n                                        guideLine.setOnMouseClicked((MouseEvent event) -> {\n                                            if (event.getButton() == MouseButton.SECONDARY) {\n                                                clearGuideLine();\n                                                event.consume();\n                                            }\n                                        });\n                                    } else {\n                                        guideLine.relocate(clickEvent.getX(), 0);\n                                    }\n                                });\n                            }\n\n                        }, new ActionGroup(\n                                NbBundle.getMessage(this.getClass(), \"EventDetailChart.contextMenu.zoomHistory.name\"),\n                                new Back(controller),\n                                new Forward(controller))));\n                chartContextMenu.setAutoHide(true);\n                chartContextMenu.show(EventDetailChart.this, clickEvent.getScreenX(), clickEvent.getScreenY());\n                clickEvent.consume();\n            }\n        };\n\n        setOnMouseClicked(clickHandler);\n\n        //use one handler with an if chain because it maintains state\n        final ChartDragHandler<DateTime, EventDetailChart> dragHandler = new ChartDragHandler<>(this, getXAxis());\n        setOnMousePressed(dragHandler);\n        setOnMouseReleased(dragHandler);\n        setOnMouseDragged(dragHandler);\n\n        projectionMap.addListener((MapChangeListener.Change<? extends DetailViewNode<?>, ? extends Line> change) -> {\n            final Line valueRemoved = change.getValueRemoved();\n            if (valueRemoved != null) {\n                getChartChildren().removeAll(valueRemoved);\n            }\n            final Line valueAdded = change.getValueAdded();\n            if (valueAdded != null) {\n                getChartChildren().add(valueAdded);\n            }\n        });\n\n        this.selectedNodes = selectedNodes;\n        this.selectedNodes.addListener((\n                ListChangeListener.Change<? extends DetailViewNode<?>> c) -> {\n                    while (c.next()) {\n                        c.getRemoved().forEach((DetailViewNode<?> t) -> {\n                            projectionMap.remove(t);\n                        });\n                        c.getAddedSubList().forEach((DetailViewNode<?> t) -> {\n                            Line line = new Line(dateAxis.localToParent(dateAxis.getDisplayPosition(new DateTime(t.getStartMillis(), TimeLineController.getJodaTimeZone())), 0).getX(), dateAxis.getLayoutY() + PROJECTED_LINE_Y_OFFSET,\n                                    dateAxis.localToParent(dateAxis.getDisplayPosition(new DateTime(t.getEndMillis(), TimeLineController.getJodaTimeZone())), 0).getX(), dateAxis.getLayoutY() + PROJECTED_LINE_Y_OFFSET\n                            );\n                            line.setStroke(t.getType().getColor().deriveColor(0, 1, 1, .5));\n                            line.setStrokeWidth(PROJECTED_LINE_STROKE_WIDTH);\n                            line.setStrokeLineCap(StrokeLineCap.ROUND);\n                            projectionMap.put(t, line);\n                        });\n\n                    }\n\n                    this.controller.selectEventIDs(selectedNodes.stream()\n                            .flatMap(detailNode -> detailNode.getEventIDs().stream())\n                            .collect(Collectors.toList()));\n                });\n\n        requestChartLayout();\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * loads sub-clusters at the given Description LOD\n     *\n     * @param newDescriptionLOD\n     */\n    synchronized private void loadSubClusters(DescriptionLOD newDescriptionLOD) {\n        getSubNodePane().getChildren().clear();\n        if (newDescriptionLOD == cluster.getDescriptionLOD()) {\n            chart.setRequiresLayout(true);\n            chart.requestChartLayout();\n        } else {\n            RootFilter combinedFilter = eventsModel.filterProperty().get().copyOf();\n            //make a new filter intersecting the global filter with text(description) and type filters to restrict sub-clusters\n            combinedFilter.getSubFilters().addAll(new TextFilter(cluster.getDescription()),\n                    new TypeFilter(cluster.getType()));\n\n            //make a new end inclusive span (to 'filter' with)\n            final Interval span = new Interval(cluster.getStartMillis(), cluster.getEndMillis() + 1000);\n\n            //make a task to load the subnodes\n            LoggedTask<List<EventStripeNode>> loggedTask = new LoggedTask<List<EventStripeNode>>(\n                    NbBundle.getMessage(this.getClass(), \"AggregateEventNode.loggedTask.name\"), true) {\n\n                        @Override\n                        protected List<EventStripeNode> call() throws Exception {\n                            //query for the sub-clusters\n                            List<EventCluster> aggregatedEvents = eventsModel.getAggregatedEvents(new ZoomParams(span,\n                                            eventsModel.eventTypeZoomProperty().get(),\n                                            combinedFilter,\n                                            newDescriptionLOD));\n                            //for each sub cluster make an AggregateEventNode to visually represent it, and set x-position\n                            HashMap<String, EventStripe> stripeDescMap = new HashMap<>();\n                            for (EventCluster subCluster : aggregatedEvents) {\n                                stripeDescMap.merge(subCluster.getDescription(),\n                                        new EventStripe(subCluster),\n                                        (EventStripe u, EventStripe v) -> {\n                                            return EventStripe.merge(u, v);\n                                        }\n                                );\n                            }\n\n                            return stripeDescMap.values().stream().map(subStripe -> {\n                                EventStripeNode subNode = new EventStripeNode(subStripe, EventStripeNode.this, chart);\n                                subNode.setLayoutX(chart.getXAxis().getDisplayPosition(new DateTime(subStripe.getStartMillis())) - getLayoutXCompensation());\n                                return subNode;\n                            }).collect(Collectors.toList()); // return list of AggregateEventNodes representing subclusters\n                        }\n\n                        @Override\n                        protected void succeeded() {\n                            try {\n                                chart.setCursor(Cursor.WAIT);\n                                //assign subNodes and request chart layout\n                                getSubNodePane().getChildren().setAll(get());\n                                setDescriptionVisibility(descrVis);\n                                chart.setRequiresLayout(true);\n                                chart.requestChartLayout();\n                                chart.setCursor(null);\n                            } catch (InterruptedException | ExecutionException ex) {\n                                LOGGER.log(Level.SEVERE, \"Error loading subnodes\", ex);\n                            }\n                        }\n                    };\n\n            //start task\n            chart.getController().monitorTask(loggedTask);\n        }\n    }","id":70509,"modified_method":"/**\n     * loads sub-clusters at the given Description LOD\n     *\n     * @param newDescriptionLOD\n     */\n    synchronized private void loadSubClusters(DescriptionLOD newDescriptionLOD) {\n        subNodePane.getChildren().clear();\n        \n        if (newDescriptionLOD == cluster.getDescriptionLOD()) {\n            spansHBox.setVisible(true);\n            chart.setRequiresLayout(true);\n            chart.requestChartLayout();\n        } else {\n            spansHBox.setVisible(false);\n            RootFilter combinedFilter = eventsModel.filterProperty().get().copyOf();\n            //make a new filter intersecting the global filter with text(description) and type filters to restrict sub-clusters\n            combinedFilter.getSubFilters().addAll(new TextFilter(cluster.getDescription()),\n                    new TypeFilter(cluster.getType()));\n\n            //make a new end inclusive span (to 'filter' with)\n            final Interval span = new Interval(cluster.getStartMillis(), cluster.getEndMillis() + 1000);\n\n            //make a task to load the subnodes\n            LoggedTask<List<EventStripeNode>> loggedTask = new LoggedTask<List<EventStripeNode>>(\n                    NbBundle.getMessage(this.getClass(), \"AggregateEventNode.loggedTask.name\"), true) {\n\n                        @Override\n                        protected List<EventStripeNode> call() throws Exception {\n                            //query for the sub-clusters\n                            List<EventCluster> aggregatedEvents = eventsModel.getAggregatedEvents(new ZoomParams(span,\n                                            eventsModel.eventTypeZoomProperty().get(),\n                                            combinedFilter,\n                                            newDescriptionLOD));\n                            //for each sub cluster make an AggregateEventNode to visually represent it, and set x-position\n                            HashMap<String, EventStripe> stripeDescMap = new HashMap<>();\n                            for (EventCluster subCluster : aggregatedEvents) {\n                                stripeDescMap.merge(subCluster.getDescription(),\n                                        new EventStripe(subCluster),\n                                        (EventStripe u, EventStripe v) -> {\n                                            return EventStripe.merge(u, v);\n                                        }\n                                );\n                            }\n\n                            return stripeDescMap.values().stream().map(subStripe -> {\n                                EventStripeNode subNode = new EventStripeNode(subStripe, EventStripeNode.this, chart);\n                                subNode.setLayoutX(chart.getXAxis().getDisplayPosition(new DateTime(subStripe.getStartMillis())) - getLayoutXCompensation());\n                                return subNode;\n                            }).collect(Collectors.toList()); // return list of AggregateEventNodes representing subclusters\n                        }\n\n                        @Override\n                        protected void succeeded() {\n                            try {\n                                chart.setCursor(Cursor.WAIT);\n                                //assign subNodes and request chart layout\n                                subNodePane.getChildren().setAll(get());\n                                setDescriptionVisibility(descrVis);\n                                chart.setRequiresLayout(true);\n                                chart.requestChartLayout();\n                                chart.setCursor(null);\n                            } catch (InterruptedException | ExecutionException ex) {\n                                LOGGER.log(Level.SEVERE, \"Error loading subnodes\", ex);\n                            }\n                        }\n                    };\n\n            //start task\n            chart.getController().monitorTask(loggedTask);\n        }\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public void setSpanWidths(List<Double> spanWidths) {\n        for (int i = 0; i < spanWidths.size(); i++) {\n            Region get = (Region) spanRegion.getChildren().get(i);\n            Double w = spanWidths.get(i);\n            get.setPrefWidth(w);\n            get.setMaxWidth(w);\n            get.setMinWidth(Math.max(2, w));\n        }\n    }","id":70510,"modified_method":"@Override\n    public void setSpanWidths(List<Double> spanWidths) {\n        for (int i = 0; i < spanWidths.size(); i++) {\n            Region spanRegion = (Region) spansHBox.getChildren().get(i);\n            Double w = spanWidths.get(i);\n            spanRegion.setPrefWidth(w);\n            spanRegion.setMaxWidth(w);\n            spanRegion.setMinWidth(Math.max(2, w));\n        }\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"EventStripeNode(EventStripe cluster, EventStripeNode parentNode, EventDetailChart chart) {\n        this.chart = chart;\n        sleuthkitCase = chart.getController().getAutopsyCase().getSleuthkitCase();\n        eventsModel = chart.getController().getEventsModel();\n\n        this.parentNode = parentNode;\n        this.cluster = cluster;\n        descLOD.set(cluster.getDescriptionLOD());\n\n        final Region spacer = new Region();\n        HBox.setHgrow(spacer, Priority.ALWAYS);\n\n        final HBox hBox = new HBox(descrLabel, countLabel, spacer, hashIV, tagIV, minusButton, plusButton);\n        if (cluster.getEventIDsWithHashHits().isEmpty()) {\n            hashIV.setManaged(false);\n            hashIV.setVisible(false);\n        }\n        if (cluster.getEventIDsWithTags().isEmpty()) {\n            tagIV.setManaged(false);\n            tagIV.setVisible(false);\n        }\n        hBox.setPrefWidth(USE_COMPUTED_SIZE);\n        hBox.setMinWidth(USE_PREF_SIZE);\n        hBox.setPadding(new Insets(2, 5, 2, 5));\n        hBox.setAlignment(Pos.CENTER_LEFT);\n\n        minusButton.setVisible(false);\n        plusButton.setVisible(false);\n        minusButton.setManaged(false);\n        plusButton.setManaged(false);\n        final BorderPane borderPane = new BorderPane(subNodePane, hBox, null, null, null);\n        BorderPane.setAlignment(subNodePane, Pos.TOP_LEFT);\n        borderPane.setPrefWidth(USE_COMPUTED_SIZE);\n        final Color evtColor = cluster.getType().getColor();\n\n        spanFill = new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .2), CORNER_RADII, Insets.EMPTY));\n        for (Range<Long> r : cluster.getRanges()) {\n            Region region = new Region();\n            region.setStyle(\"-fx-border-width:2 1 2 1; -fx-border-radius: 1; -fx-border-color: \" + ColorUtilities.getRGBCode(evtColor.deriveColor(0, 1, 1, .3)) + \";\"); // NON-NLS\n            region.setBackground(spanFill);\n            spanRegion.getChildren().addAll(region, new Region());\n        }\n        spanRegion.getChildren().remove(spanRegion.getChildren().size() - 1);\n\n        getChildren().addAll(spanRegion, borderPane);\n        setBackground(new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY)));\n        setAlignment(Pos.TOP_LEFT);\n        setMinHeight(24);\n        minWidthProperty().bind(spanRegion.widthProperty());\n        setPrefHeight(USE_COMPUTED_SIZE);\n        setMaxHeight(USE_PREF_SIZE);\n\n        //set up subnode pane sizing contraints\n        subNodePane.setPrefHeight(USE_COMPUTED_SIZE);\n        subNodePane.setMinHeight(USE_PREF_SIZE);\n        subNodePane.setMinWidth(USE_PREF_SIZE);\n        subNodePane.setMaxHeight(USE_PREF_SIZE);\n        subNodePane.setMaxWidth(USE_PREF_SIZE);\n        subNodePane.setPickOnBounds(false);\n\n        //setup description label\n        eventTypeImageView.setImage(cluster.getType().getFXImage());\n        descrLabel.setGraphic(eventTypeImageView);\n        descrLabel.setPrefWidth(USE_COMPUTED_SIZE);\n        descrLabel.setTextOverrun(OverrunStyle.CENTER_ELLIPSIS);\n\n        descrLabel.setMouseTransparent(true);\n        setDescriptionVisibility(chart.getDescrVisibility().get());\n        setOnMouseClicked(new EventMouseHandler());\n\n        //set up mouse hover effect and tooltip\n        setOnMouseEntered((MouseEvent e) -> {\n            //defer tooltip creation till needed, this had a surprisingly large impact on speed of loading the chart\n//            installTooltip();\n            spanRegion.setEffect(new DropShadow(10, evtColor));\n            minusButton.setVisible(true);\n            plusButton.setVisible(true);\n            minusButton.setManaged(true);\n            plusButton.setManaged(true);\n            toFront();\n        });\n\n        setOnMouseExited((MouseEvent e) -> {\n            spanRegion.setEffect(null);\n            minusButton.setVisible(false);\n            plusButton.setVisible(false);\n            minusButton.setManaged(false);\n            plusButton.setManaged(false);\n        });\n\n        plusButton.disableProperty().bind(descLOD.isEqualTo(DescriptionLOD.FULL));\n        minusButton.disableProperty().bind(descLOD.isEqualTo(cluster.getDescriptionLOD()));\n\n        plusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD next = descLOD.get().next();\n            if (next != null) {\n                loadSubClusters(next);\n                descLOD.set(next);\n            }\n        });\n        minusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD previous = descLOD.get().previous();\n            if (previous != null) {\n                loadSubClusters(previous);\n                descLOD.set(previous);\n            }\n        });\n    }","id":70511,"modified_method":"EventStripeNode(EventStripe cluster, EventStripeNode parentNode, EventDetailChart chart) {\n        this.chart = chart;\n        sleuthkitCase = chart.getController().getAutopsyCase().getSleuthkitCase();\n        eventsModel = chart.getController().getEventsModel();\n\n        this.parentNode = parentNode;\n        this.cluster = cluster;\n        descLOD.set(cluster.getDescriptionLOD());\n\n        final Region spacer = new Region();\n        HBox.setHgrow(spacer, Priority.ALWAYS);\n\n        final HBox header = new HBox(descrLabel, countLabel, hashIV, tagIV, spacer, minusButton, plusButton);\n        if (cluster.getEventIDsWithHashHits().isEmpty()) {\n            show(hashIV, false);\n        }\n        if (cluster.getEventIDsWithTags().isEmpty()) {\n            show(tagIV, false);\n        }\n        header.setMinWidth(USE_PREF_SIZE);\n        header.setPadding(new Insets(2, 5, 2, 5));\n        header.setAlignment(Pos.CENTER_LEFT);\n\n        final VBox internalVBox = new VBox(header, subNodePane);\n        internalVBox.setAlignment(Pos.CENTER_LEFT);\n        final Color evtColor = cluster.getType().getColor();\n\n        spanFill = new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .2), CORNER_RADII, Insets.EMPTY));\n        for (Range<Long> r : cluster.getRanges()) {\n            Region spanRegion = new Region();\n            spanRegion.setStyle(\"-fx-border-width:2 1 2 1; -fx-border-radius: 1; -fx-border-color: \" + ColorUtilities.getRGBCode(evtColor.deriveColor(0, 1, 1, .3)) + \";\"); // NON-NLS\n            spanRegion.setBackground(spanFill);\n            spansHBox.getChildren().addAll(spanRegion, new Region());\n        }\n        spansHBox.getChildren().remove(spansHBox.getChildren().size() - 1);\n        spansHBox.setMaxWidth(USE_PREF_SIZE);\n        setMaxWidth(USE_PREF_SIZE);\n        getChildren().addAll(spansHBox, internalVBox);\n        setBackground(new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .05), CORNER_RADII, Insets.EMPTY)));\n        setAlignment(Pos.TOP_LEFT);\n        setMinHeight(24);\n        minWidthProperty().bind(spansHBox.widthProperty());\n        setPrefHeight(USE_COMPUTED_SIZE);\n        setMaxHeight(USE_PREF_SIZE);\n\n        //set up subnode pane sizing contraints\n        subNodePane.setPrefHeight(USE_COMPUTED_SIZE);\n        subNodePane.setMinHeight(USE_PREF_SIZE);\n        subNodePane.setMinWidth(USE_PREF_SIZE);\n        subNodePane.setMaxHeight(USE_PREF_SIZE);\n        subNodePane.setMaxWidth(USE_PREF_SIZE);\n        subNodePane.setPickOnBounds(false);\n\n        //setup description label\n        eventTypeImageView.setImage(cluster.getType().getFXImage());\n        descrLabel.setGraphic(eventTypeImageView);\n        descrLabel.setPrefWidth(USE_COMPUTED_SIZE);\n        descrLabel.setTextOverrun(OverrunStyle.CENTER_ELLIPSIS);\n\n        descrLabel.setMouseTransparent(true);\n        setDescriptionVisibility(chart.getDescrVisibility().get());\n        setOnMouseClicked(new EventMouseHandler());\n\n        //set up mouse hover effect and tooltip\n        setOnMouseEntered((MouseEvent e) -> {\n            //defer tooltip creation till needed, this had a surprisingly large impact on speed of loading the chart\n//            installTooltip();\n            spansHBox.setEffect(new DropShadow(10, evtColor));\n            show(spacer, true);\n            show(minusButton, true);\n            show(plusButton, true);\n\n            toFront();\n        });\n\n        setOnMouseExited((MouseEvent e) -> {\n            spansHBox.setEffect(null);\n            show(spacer, false);\n            show(minusButton, false);\n            show(plusButton, false);\n\n        });\n\n        plusButton.disableProperty().bind(descLOD.isEqualTo(DescriptionLOD.FULL));\n        minusButton.disableProperty().bind(descLOD.isEqualTo(cluster.getDescriptionLOD()));\n\n        plusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD next = descLOD.get().next();\n            if (next != null) {\n                loadSubClusters(next);\n                descLOD.set(next);\n            }\n        });\n        minusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD previous = descLOD.get().previous();\n            if (previous != null) {\n                loadSubClusters(previous);\n                descLOD.set(previous);\n            }\n        });\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public Pane getSubNodePane() {\n        return subNodePane;\n    }","id":70512,"modified_method":"@Override\n    public List<EventStripeNode> getSubNodes() {\n        return subNodePane.getChildrenUnmodifiable().stream()\n                .map(EventStripeNode.class::cast)\n                .collect(Collectors.toList());\n    }","commit_id":"2250b01a56bf8dc9ad6dd1fce13f9637820bc3e7","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public void setSelectionModel(MultipleSelectionModel<TreeItem<NavTreeNode>> selectionModel) {\n        this.treeSelectionModel = selectionModel;\n\n        treeSelectionModel.getSelectedItems().addListener((Observable observable) -> {\n            highlightedNodes.clear();\n            for (TreeItem<NavTreeNode> tn : treeSelectionModel.getSelectedItems()) {\n                for (EventClusterNode n : chart.getNodes((EventClusterNode t)\n                        -> t.getEvent().getDescription().equals(tn.getValue().getDescription()))) {\n                    highlightedNodes.add(n);\n                }\n            }\n        });\n    }","id":70513,"modified_method":"public void setSelectionModel(MultipleSelectionModel<TreeItem<NavTreeNode>> selectionModel) {\n        this.treeSelectionModel = selectionModel;\n\n        treeSelectionModel.getSelectedItems().addListener((Observable observable) -> {\n            highlightedNodes.clear();\n            for (TreeItem<NavTreeNode> tn : treeSelectionModel.getSelectedItems()) {\n                for (DetailViewNode<?> n : chart.getNodes((DetailViewNode<?> t)\n                        -> t.getDescription().equals(tn.getValue().getDescription()))) {\n                    highlightedNodes.add(n);\n                }\n            }\n        });\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    protected void applySelectionEffect(DetailViewNode c1, Boolean applied) {\n        c1.applySelectionEffect(applied);\n    }","id":70514,"modified_method":"@Override\n    protected void applySelectionEffect(DetailViewNode<?> c1, Boolean applied) {\n        c1.applySelectionEffect(applied);\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public DetailViewPane(Pane partPane, Pane contextPane, Region spacer) {\n        super(partPane, contextPane, spacer);\n        chart = new EventDetailChart(dateAxis, verticalAxis, selectedNodes);\n        setChartClickHandler();\n        chart.setData(dataSets);\n        setCenter(chart);\n\n        chart.setPrefHeight(USE_COMPUTED_SIZE);\n\n        settingsNodes = new ArrayList<>(new DetailViewSettingsPane().getChildrenUnmodifiable());\n\n        vertScrollBar.setOrientation(Orientation.VERTICAL);\n        VBox vBox = new VBox();\n        VBox.setVgrow(vertScrollBar, Priority.ALWAYS);\n        vBox.getChildren().add(vertScrollBar);\n        vBox.getChildren().add(region);\n        setRight(vBox);\n\n        dateAxis.setAutoRanging(false);\n        region.minHeightProperty().bind(dateAxis.heightProperty());\n        vertScrollBar.visibleAmountProperty().bind(chart.heightProperty().multiply(100).divide(chart.getMaxVScroll()));\n        requestLayout();\n\n        highlightedNodes.addListener((ListChangeListener.Change<? extends EventClusterNode> change) -> {\n            while (change.next()) {\n                change.getAddedSubList().forEach(aeNode -> {\n                    aeNode.applyHighlightEffect(true);\n                });\n                change.getRemoved().forEach(aeNode -> {\n                    aeNode.applyHighlightEffect(false);\n                });\n            }\n        });\n        //request focus for keyboard scrolling\n        setOnMouseClicked((MouseEvent t) -> {\n            requestFocus();\n        });\n\n        //These scroll related handlers don't affect any other view or the model, so they are handled internally\n        //mouse wheel scroll handler\n        this.onScrollProperty().set((EventHandler<ScrollEvent>) (ScrollEvent t) -> {\n            vertScrollBar.valueProperty().set(Math.max(0, Math.min(100, vertScrollBar.getValue() - t.getDeltaY() / 200.0)));\n        });\n\n        this.setOnKeyPressed((KeyEvent t) -> {\n            switch (t.getCode()) {\n                case PAGE_UP:\n                    incrementScrollValue(-70);\n                    break;\n                case PAGE_DOWN:\n                    incrementScrollValue(70);\n                    break;\n                case KP_UP:\n                case UP:\n                    incrementScrollValue(-10);\n                    break;\n                case KP_DOWN:\n                case DOWN:\n                    incrementScrollValue(10);\n                    break;\n            }\n            t.consume();\n        });\n\n        //scrollbar handler\n        this.vertScrollBar.valueProperty().addListener((o, oldValue, newValue) -> {\n            chart.setVScroll(newValue.doubleValue() / 100.0);\n        });\n        spacer.minWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n        spacer.prefWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n        spacer.maxWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n\n        dateAxis.setTickLabelsVisible(false);\n\n        dateAxis.getTickMarks().addListener((Observable observable) -> {\n            layoutDateLabels();\n        });\n        dateAxis.getTickSpacing().addListener((Observable observable) -> {\n            layoutDateLabels();\n        });\n\n        dateAxis.setTickLabelGap(0);\n\n        selectedNodes.addListener((Observable observable) -> {\n            highlightedNodes.clear();\n            selectedNodes.stream().forEach((tn) -> {\n                for (EventClusterNode n : chart.getNodes((EventClusterNode t)\n                        -> t.getEvent().getDescription().equals(tn.getDescription()))) {\n                    highlightedNodes.add(n);\n                }\n            });\n        });\n\n    }","id":70515,"modified_method":"public DetailViewPane(Pane partPane, Pane contextPane, Region spacer) {\n        super(partPane, contextPane, spacer);\n        chart = new EventDetailChart(dateAxis, verticalAxis, selectedNodes);\n        setChartClickHandler();\n        chart.setData(dataSets);\n        setCenter(chart);\n\n        chart.setPrefHeight(USE_COMPUTED_SIZE);\n\n        settingsNodes = new ArrayList<>(new DetailViewSettingsPane().getChildrenUnmodifiable());\n\n        vertScrollBar.setOrientation(Orientation.VERTICAL);\n        VBox vBox = new VBox();\n        VBox.setVgrow(vertScrollBar, Priority.ALWAYS);\n        vBox.getChildren().add(vertScrollBar);\n        vBox.getChildren().add(region);\n        setRight(vBox);\n\n        dateAxis.setAutoRanging(false);\n        region.minHeightProperty().bind(dateAxis.heightProperty());\n        vertScrollBar.visibleAmountProperty().bind(chart.heightProperty().multiply(100).divide(chart.getMaxVScroll()));\n        requestLayout();\n\n        highlightedNodes.addListener((ListChangeListener.Change<? extends DetailViewNode<?>> change) -> {\n            while (change.next()) {\n                change.getAddedSubList().forEach(aeNode -> {\n                    aeNode.applyHighlightEffect(true);\n                });\n                change.getRemoved().forEach(aeNode -> {\n                    aeNode.applyHighlightEffect(false);\n                });\n            }\n        });\n        //request focus for keyboard scrolling\n        setOnMouseClicked((MouseEvent t) -> {\n            requestFocus();\n        });\n\n        //These scroll related handlers don't affect any other view or the model, so they are handled internally\n        //mouse wheel scroll handler\n        this.onScrollProperty().set((ScrollEvent t) -> {\n            vertScrollBar.valueProperty().set(Math.max(0, Math.min(100, vertScrollBar.getValue() - t.getDeltaY() / 200.0)));\n        });\n\n        this.setOnKeyPressed((KeyEvent t) -> {\n            switch (t.getCode()) {\n                case PAGE_UP:\n                    incrementScrollValue(-70);\n                    break;\n                case PAGE_DOWN:\n                    incrementScrollValue(70);\n                    break;\n                case KP_UP:\n                case UP:\n                    incrementScrollValue(-10);\n                    break;\n                case KP_DOWN:\n                case DOWN:\n                    incrementScrollValue(10);\n                    break;\n            }\n            t.consume();\n        });\n\n        //scrollbar handler\n        this.vertScrollBar.valueProperty().addListener((o, oldValue, newValue) -> {\n            chart.setVScroll(newValue.doubleValue() / 100.0);\n        });\n        spacer.minWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n        spacer.prefWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n        spacer.maxWidthProperty().bind(verticalAxis.widthProperty().add(verticalAxis.tickLengthProperty()));\n\n        dateAxis.setTickLabelsVisible(false);\n\n        dateAxis.getTickMarks().addListener((Observable observable) -> {\n            layoutDateLabels();\n        });\n        dateAxis.getTickSpacing().addListener((Observable observable) -> {\n            layoutDateLabels();\n        });\n\n        dateAxis.setTickLabelGap(0);\n\n        selectedNodes.addListener((Observable observable) -> {\n            highlightedNodes.clear();\n            selectedNodes.stream().forEach((tn) -> {\n                for (DetailViewNode<?> n : chart.getNodes((DetailViewNode<?> t)\n                        -> t.getDescription().equals(tn.getDescription()))) {\n                    highlightedNodes.add(n);\n                }\n            });\n        });\n\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public EventClusterNode(final EventCluster aggEvent, EventClusterNode parentEventNode, EventDetailChart chart) {\n        this.aggEvent = aggEvent;\n        descLOD.set(aggEvent.getDescriptionLOD());\n        this.parentEventNode = parentEventNode;\n        this.chart = chart;\n        sleuthkitCase = chart.getController().getAutopsyCase().getSleuthkitCase();\n        eventsModel = chart.getController().getEventsModel();\n\n        final Region region = new Region();\n        HBox.setHgrow(region, Priority.ALWAYS);\n\n        final HBox hBox = new HBox(descrLabel, countLabel, region, hashIV, tagIV, minusButton, plusButton);\n        if (aggEvent.getEventIDsWithHashHits().isEmpty()) {\n            hashIV.setManaged(false);\n            hashIV.setVisible(false);\n        }\n        if (aggEvent.getEventIDsWithTags().isEmpty()) {\n            tagIV.setManaged(false);\n            tagIV.setVisible(false);\n        }\n        hBox.setPrefWidth(USE_COMPUTED_SIZE);\n        hBox.setMinWidth(USE_PREF_SIZE);\n        hBox.setPadding(new Insets(2, 5, 2, 5));\n        hBox.setAlignment(Pos.CENTER_LEFT);\n\n        minusButton.setVisible(false);\n        plusButton.setVisible(false);\n        minusButton.setManaged(false);\n        plusButton.setManaged(false);\n        final BorderPane borderPane = new BorderPane(subNodePane, hBox, null, null, null);\n        BorderPane.setAlignment(subNodePane, Pos.TOP_LEFT);\n        borderPane.setPrefWidth(USE_COMPUTED_SIZE);\n\n        getChildren().addAll(spanRegion, borderPane);\n\n        setAlignment(Pos.TOP_LEFT);\n        setMinHeight(24);\n        minWidthProperty().bind(spanRegion.widthProperty());\n        setPrefHeight(USE_COMPUTED_SIZE);\n        setMaxHeight(USE_PREF_SIZE);\n\n        //set up subnode pane sizing contraints\n        subNodePane.setPrefHeight(USE_COMPUTED_SIZE);\n        subNodePane.setMinHeight(USE_PREF_SIZE);\n        subNodePane.setMinWidth(USE_PREF_SIZE);\n        subNodePane.setMaxHeight(USE_PREF_SIZE);\n        subNodePane.setMaxWidth(USE_PREF_SIZE);\n        subNodePane.setPickOnBounds(false);\n\n        //setup description label\n        eventTypeImageView.setImage(aggEvent.getType().getFXImage());\n        descrLabel.setGraphic(eventTypeImageView);\n        descrLabel.setPrefWidth(USE_COMPUTED_SIZE);\n        descrLabel.setTextOverrun(OverrunStyle.CENTER_ELLIPSIS);\n\n        descrLabel.setMouseTransparent(true);\n        setDescriptionVisibility(chart.getDescrVisibility().get());\n\n        //setup backgrounds\n        final Color evtColor = aggEvent.getType().getColor();\n        spanFill = new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY));\n        setBackground(spanFill);\n        setCursor(Cursor.HAND);\n        spanRegion.setStyle(\"-fx-border-width:2 0 2 2; -fx-border-radius: 2; -fx-border-color: \" + ColorUtilities.getRGBCode(evtColor) + \";\"); // NON-NLS\n        spanRegion.setBackground(spanFill);\n\n        //set up mouse hover effect and tooltip\n        setOnMouseEntered((MouseEvent e) -> {\n            //defer tooltip creation till needed, this had a surprisingly large impact on speed of loading the chart\n            installTooltip();\n            spanRegion.setEffect(new DropShadow(10, evtColor));\n            minusButton.setVisible(true);\n            plusButton.setVisible(true);\n            minusButton.setManaged(true);\n            plusButton.setManaged(true);\n            toFront();\n        });\n\n        setOnMouseExited((MouseEvent e) -> {\n            spanRegion.setEffect(null);\n            minusButton.setVisible(false);\n            plusButton.setVisible(false);\n            minusButton.setManaged(false);\n            plusButton.setManaged(false);\n        });\n\n        setOnMouseClicked(new EventMouseHandler());\n\n        plusButton.disableProperty().bind(descLOD.isEqualTo(DescriptionLOD.FULL));\n        minusButton.disableProperty().bind(descLOD.isEqualTo(aggEvent.getDescriptionLOD()));\n\n        plusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD next = descLOD.get().next();\n            if (next != null) {\n                loadSubClusters(next);\n                descLOD.set(next);\n            }\n        });\n        minusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD previous = descLOD.get().previous();\n            if (previous != null) {\n                loadSubClusters(previous);\n                descLOD.set(previous);\n            }\n        });\n    }","id":70516,"modified_method":"public EventClusterNode(final EventCluster aggEvent, EventClusterNode parentEventNode, EventDetailChart chart) {\n        this.aggEvent = aggEvent;\n        descLOD.set(aggEvent.getDescriptionLOD());\n        this.parentEventNode = parentEventNode;\n        this.chart = chart;\n        sleuthkitCase = chart.getController().getAutopsyCase().getSleuthkitCase();\n        eventsModel = chart.getController().getEventsModel();\n\n        final Region region = new Region();\n        HBox.setHgrow(region, Priority.ALWAYS);\n\n        final HBox hBox = new HBox(descrLabel, countLabel, region, hashIV, tagIV, minusButton, plusButton);\n        if (aggEvent.getEventIDsWithHashHits().isEmpty()) {\n            hashIV.setManaged(false);\n            hashIV.setVisible(false);\n        }\n        if (aggEvent.getEventIDsWithTags().isEmpty()) {\n            tagIV.setManaged(false);\n            tagIV.setVisible(false);\n        }\n        hBox.setPrefWidth(USE_COMPUTED_SIZE);\n        hBox.setMinWidth(USE_PREF_SIZE);\n        hBox.setPadding(new Insets(2, 5, 2, 5));\n        hBox.setAlignment(Pos.CENTER_LEFT);\n\n        final BorderPane borderPane = new BorderPane(subNodePane, hBox, null, null, null);\n        BorderPane.setAlignment(subNodePane, Pos.TOP_LEFT);\n        borderPane.setPrefWidth(USE_COMPUTED_SIZE);\n\n        getChildren().addAll(spanRegion, borderPane);\n\n        setAlignment(Pos.TOP_LEFT);\n        setMinHeight(24);\n        minWidthProperty().bind(spanRegion.widthProperty());\n        setPrefHeight(USE_COMPUTED_SIZE);\n        setMaxHeight(USE_PREF_SIZE);\n\n        //set up subnode pane sizing contraints\n        subNodePane.setPrefHeight(USE_COMPUTED_SIZE);\n        subNodePane.setMinHeight(USE_PREF_SIZE);\n        subNodePane.setMinWidth(USE_PREF_SIZE);\n        subNodePane.setMaxHeight(USE_PREF_SIZE);\n        subNodePane.setMaxWidth(USE_PREF_SIZE);\n        subNodePane.setPickOnBounds(false);\n\n        //setup description label\n        eventTypeImageView.setImage(aggEvent.getType().getFXImage());\n        descrLabel.setGraphic(eventTypeImageView);\n        descrLabel.setPrefWidth(USE_COMPUTED_SIZE);\n        descrLabel.setTextOverrun(OverrunStyle.CENTER_ELLIPSIS);\n\n        descrLabel.setMouseTransparent(true);\n        setDescriptionVisibility(chart.getDescrVisibility().get());\n\n        //setup backgrounds\n        final Color evtColor = aggEvent.getType().getColor();\n        spanFill = new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY));\n        setBackground(spanFill);\n        setCursor(Cursor.HAND);\n        spanRegion.setStyle(\"-fx-border-width:2 0 2 2; -fx-border-radius: 2; -fx-border-color: \" + ColorUtilities.getRGBCode(evtColor) + \";\"); // NON-NLS\n        spanRegion.setBackground(spanFill);\n\n        //set up mouse hover effect and tooltip\n        setOnMouseEntered((MouseEvent e) -> {\n            //defer tooltip creation till needed, this had a surprisingly large impact on speed of loading the chart\n            installTooltip();\n            spanRegion.setEffect(new DropShadow(10, evtColor));\n            minusButton.setVisible(true);\n            plusButton.setVisible(true);\n            minusButton.setManaged(true);\n            plusButton.setManaged(true);\n            toFront();\n        });\n\n        setOnMouseExited((MouseEvent e) -> {\n            spanRegion.setEffect(null);\n            minusButton.setVisible(false);\n            plusButton.setVisible(false);\n            minusButton.setManaged(false);\n            plusButton.setManaged(false);\n        });\n\n        setOnMouseClicked(new EventMouseHandler());\n\n        plusButton.disableProperty().bind(descLOD.isEqualTo(DescriptionLOD.FULL));\n        minusButton.disableProperty().bind(descLOD.isEqualTo(aggEvent.getDescriptionLOD()));\n\n        plusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD next = descLOD.get().next();\n            if (next != null) {\n                loadSubClusters(next);\n                descLOD.set(next);\n            }\n        });\n        minusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD previous = descLOD.get().previous();\n            if (previous != null) {\n                loadSubClusters(previous);\n                descLOD.set(previous);\n            }\n        });\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * loads sub-clusters at the given Description LOD\n     *\n     * @param newDescriptionLOD\n     */\n    synchronized private void loadSubClusters(DescriptionLOD newDescriptionLOD) {\n        getSubNodePane().getChildren().clear();\n        if (newDescriptionLOD == aggEvent.getDescriptionLOD()) {\n            chart.setRequiresLayout(true);\n            chart.requestChartLayout();\n        } else {\n            RootFilter combinedFilter = eventsModel.filterProperty().get().copyOf();\n            //make a new filter intersecting the global filter with text(description) and type filters to restrict sub-clusters\n            combinedFilter.getSubFilters().addAll(new TextFilter(aggEvent.getDescription()),\n                    new TypeFilter(aggEvent.getType()));\n\n            //make a new end inclusive span (to 'filter' with)\n            final Interval span = aggEvent.getSpan().withEndMillis(aggEvent.getSpan().getEndMillis() + 1000);\n\n            //make a task to load the subnodes\n            LoggedTask<List<EventClusterNode>> loggedTask = new LoggedTask<List<EventClusterNode>>(\n                    NbBundle.getMessage(this.getClass(), \"AggregateEventNode.loggedTask.name\"), true) {\n\n                        @Override\n                        protected List<EventClusterNode> call() throws Exception {\n                            //query for the sub-clusters\n                            List<EventCluster> aggregatedEvents = eventsModel.getAggregatedEvents(new ZoomParams(span,\n                                            eventsModel.eventTypeZoomProperty().get(),\n                                            combinedFilter,\n                                            newDescriptionLOD));\n                            //for each sub cluster make an AggregateEventNode to visually represent it, and set x-position\n                            return aggregatedEvents.stream().map(aggEvent -> {\n                                EventClusterNode subNode = new EventClusterNode(aggEvent, EventClusterNode.this, chart);\n                                subNode.setLayoutX(chart.getXAxis().getDisplayPosition(new DateTime(aggEvent.getSpan().getStartMillis())) - getLayoutXCompensation());\n                                return subNode;\n                            }).collect(Collectors.toList()); // return list of AggregateEventNodes representing subclusters\n                        }\n\n                        @Override\n                        protected void succeeded() {\n                            try {\n                                chart.setCursor(Cursor.WAIT);\n                                //assign subNodes and request chart layout\n                                getSubNodePane().getChildren().setAll(get());\n                                setDescriptionVisibility(descrVis);\n                                chart.setRequiresLayout(true);\n                                chart.requestChartLayout();\n                                chart.setCursor(null);\n                            } catch (InterruptedException | ExecutionException ex) {\n                                LOGGER.log(Level.SEVERE, \"Error loading subnodes\", ex);\n                            }\n                        }\n                    };\n\n            //start task\n            chart.getController().monitorTask(loggedTask);\n        }\n    }","id":70517,"modified_method":"/**\n     * loads sub-clusters at the given Description LOD\n     *\n     * @param newDescriptionLOD\n     */\n    synchronized private void loadSubClusters(DescriptionLOD newDescriptionLOD) {\n        subNodePane.getChildren().clear();\n        if (newDescriptionLOD == aggEvent.getDescriptionLOD()) {\n            chart.setRequiresLayout(true);\n            chart.requestChartLayout();\n        } else {\n            RootFilter combinedFilter = eventsModel.filterProperty().get().copyOf();\n            //make a new filter intersecting the global filter with text(description) and type filters to restrict sub-clusters\n            combinedFilter.getSubFilters().addAll(new TextFilter(aggEvent.getDescription()),\n                    new TypeFilter(aggEvent.getType()));\n\n            //make a new end inclusive span (to 'filter' with)\n            final Interval span = aggEvent.getSpan().withEndMillis(aggEvent.getSpan().getEndMillis() + 1000);\n\n            //make a task to load the subnodes\n            LoggedTask<List<EventClusterNode>> loggedTask = new LoggedTask<List<EventClusterNode>>(\n                    NbBundle.getMessage(this.getClass(), \"AggregateEventNode.loggedTask.name\"), true) {\n\n                        @Override\n                        protected List<EventClusterNode> call() throws Exception {\n                            //query for the sub-clusters\n                            List<EventCluster> aggregatedEvents = eventsModel.getAggregatedEvents(new ZoomParams(span,\n                                            eventsModel.eventTypeZoomProperty().get(),\n                                            combinedFilter,\n                                            newDescriptionLOD));\n                            //for each sub cluster make an AggregateEventNode to visually represent it, and set x-position\n                            return aggregatedEvents.stream().map(aggEvent -> {\n                                EventClusterNode subNode = new EventClusterNode(aggEvent, EventClusterNode.this, chart);\n                                subNode.setLayoutX(chart.getXAxis().getDisplayPosition(new DateTime(aggEvent.getSpan().getStartMillis())) - getLayoutXCompensation());\n                                return subNode;\n                            }).collect(Collectors.toList()); // return list of AggregateEventNodes representing subclusters\n                        }\n\n                        @Override\n                        protected void succeeded() {\n                            try {\n                                chart.setCursor(Cursor.WAIT);\n                                //assign subNodes and request chart layout\n                                subNodePane.getChildren().setAll(get());\n                                setDescriptionVisibility(descrVis);\n                                chart.setRequiresLayout(true);\n                                chart.requestChartLayout();\n                                chart.setCursor(null);\n                            } catch (InterruptedException | ExecutionException ex) {\n                                LOGGER.log(Level.SEVERE, \"Error loading subnodes\", ex);\n                            }\n                        }\n                    };\n\n            //start task\n            chart.getController().monitorTask(loggedTask);\n        }\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public Pane getSubNodePane() {\n        return subNodePane;\n    }","id":70518,"modified_method":"@Override\n    public List<EventClusterNode> getSubNodes() {\n        return subNodePane.getChildrenUnmodifiable().stream()\n                .map(EventClusterNode.class::cast)\n                .collect(Collectors.toList());\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * apply the 'effect' to visually indicate highlighted nodes\n     *\n     * @param applied true to apply the highlight 'effect', false to remove it\n     */\n    synchronized void applyHighlightEffect(boolean applied) {\n\n        if (applied) {\n            descrLabel.setStyle(\"-fx-font-weight: bold;\"); // NON-NLS\n            spanFill = new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .3), CORNER_RADII, Insets.EMPTY));\n            spanRegion.setBackground(spanFill);\n            setBackground(new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .2), CORNER_RADII, Insets.EMPTY)));\n        } else {\n            descrLabel.setStyle(\"-fx-font-weight: normal;\"); // NON-NLS\n            spanFill = new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY));\n            spanRegion.setBackground(spanFill);\n            setBackground(new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY)));\n        }\n    }","id":70519,"modified_method":"/**\n     * apply the 'effect' to visually indicate highlighted nodes\n     *\n     * @param applied true to apply the highlight 'effect', false to remove it\n     */\n    public synchronized void applyHighlightEffect(boolean applied) {\n\n        if (applied) {\n            descrLabel.setStyle(\"-fx-font-weight: bold;\"); // NON-NLS\n            spanFill = new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .3), CORNER_RADII, Insets.EMPTY));\n            spanRegion.setBackground(spanFill);\n            setBackground(new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .2), CORNER_RADII, Insets.EMPTY)));\n        } else {\n            descrLabel.setStyle(\"-fx-font-weight: normal;\"); // NON-NLS\n            spanFill = new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY));\n            spanRegion.setBackground(spanFill);\n            setBackground(new Background(new BackgroundFill(aggEvent.getType().getColor().deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY)));\n        }\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * layout the nodes in the given list, starting form the given minimum y\n     * coordinate.\n     *\n     * @param nodes\n     * @param minY\n     */\n    private synchronized <D extends Region & DetailViewNode> double layoutNodes(final Collection<D> nodes, final double minY, final double xOffset) {\n        //hash map from y value to right most occupied x value.  This tells you for a given 'row' what is the first avaialable slot\n        Map<Integer, Double> maxXatY = new HashMap<>();\n        double localMax = minY;\n        //for each node lay size it and position it in first available slot\n        for (D n : nodes) {\n            n.setDescriptionVisibility(descrVisibility.get());\n            double rawDisplayPosition = getXAxis().getDisplayPosition(new DateTime(n.getStartMillis()));\n\n            //position of start and end according to range of axis\n            double startX = rawDisplayPosition - xOffset;\n            double layoutNodesResultHeight = 0;\n\n            double span = 0;\n            if (n instanceof EventClusterNode) {\n                if (n.getSubNodePane().getChildren().isEmpty() == false) {\n                    List<EventClusterNode> children = n.getSubNodePane().getChildren().stream()\n                            .map(EventClusterNode.class::cast)\n                            .sorted(Comparator.comparing(DetailViewNode::getStartMillis))\n                            .collect(Collectors.toList());\n                    layoutNodesResultHeight = layoutNodes(children, 0, rawDisplayPosition);\n                }\n                double endX = getXAxis().getDisplayPosition(new DateTime(n.getEndMillis())) - xOffset;\n                span = endX - startX;\n\n                //size timespan border\n                n.setSpanWidths(Arrays.asList(span));\n            } else {\n                if (n.getSubNodePane().getChildren().isEmpty() == false) {\n                    List<EventStripeNode> children = n.getSubNodePane().getChildren().stream()\n                            .map(EventStripeNode.class::cast)\n                            .sorted(Comparator.comparing(DetailViewNode::getStartMillis))\n                            .collect(Collectors.toList());\n                    layoutNodesResultHeight = layoutNodes(children, 0, rawDisplayPosition);\n                }\n                EventStripeNode cn = (EventStripeNode) n;\n                List<Double> spanWidths = new ArrayList<>();\n                double x = getXAxis().getDisplayPosition(new DateTime(cn.getStartMillis()));;\n                double x2;\n                Iterator<Range<Long>> ranges = cn.getCluster().getRanges().iterator();\n                Range<Long> range = ranges.next();\n                do {\n                    x2 = getXAxis().getDisplayPosition(new DateTime(range.upperEndpoint()));\n                    double clusterSpan = x2 - x;\n                    span += clusterSpan;\n                    spanWidths.add(clusterSpan);\n                    if (ranges.hasNext()) {\n                        range = ranges.next();\n                        x = getXAxis().getDisplayPosition(new DateTime(range.lowerEndpoint()));\n                        double gapSpan = x - x2;\n                        span += gapSpan;\n                        spanWidths.add(gapSpan);\n                    }\n\n                } while (ranges.hasNext());\n\n                cn.setSpanWidths(spanWidths);\n            }\n            if (truncateAll.get()) { //if truncate option is selected limit width of description label\n                n.setDescriptionWidth(Math.max(span, truncateWidth.get()));\n            } else { //else set it unbounded\n                n.setDescriptionWidth(USE_PREF_SIZE);//20 + new Text(tlNode.getDisplayedDescription()).getLayoutBounds().getWidth());\n            }\n\n            n.autosize(); //compute size of tlNode based on constraints and event data\n\n            //get position of right edge of node ( influenced by description label)\n            double xRight = startX + n.getWidth();\n\n            //get the height of the node\n            final double h = layoutNodesResultHeight == 0 ? n.getHeight() : layoutNodesResultHeight + DEFAULT_ROW_HEIGHT;\n            //initial test position\n            double yPos = minY;\n\n            double yPos2 = yPos + h;\n\n            if (oneEventPerRow.get()) {\n                // if onePerRow, just put it at end\n                yPos = (localMax + 2);\n                yPos2 = yPos + h;\n\n            } else {//else\n\n                boolean overlapping = true;\n                while (overlapping) {\n                    //loop through y values looking for available slot.\n\n                    overlapping = false;\n                    //check each pixel from bottom to top.\n                    for (double y = yPos2; y >= yPos; y--) {\n                        final Double maxX = maxXatY.get((int) y);\n                        if (maxX != null && maxX >= startX - 4) {\n                            //if that pixel is already used\n                            //jump top to this y value and repeat until free slot is found.\n                            overlapping = true;\n                            yPos = y + 4;\n                            yPos2 = yPos + h;\n                            break;\n                        }\n                    }\n                }\n                //mark used y values\n                for (double y = yPos; y <= yPos2; y++) {\n                    maxXatY.put((int) y, xRight);\n                }\n            }\n            localMax = Math.max(yPos2, localMax);\n\n            Timeline tm = new Timeline(new KeyFrame(Duration.seconds(1.0),\n                    new KeyValue(n.layoutXProperty(), startX),\n                    new KeyValue(n.layoutYProperty(), yPos)));\n\n            tm.play();\n        }\n        maxY.set(Math.max(maxY.get(), localMax));\n        return localMax - minY;\n    }","id":70520,"modified_method":"/**\n     * layout the nodes in the given list, starting form the given minimum y\n     * coordinate.\n     *\n     * @param nodes\n     * @param minY\n     */\n    private synchronized <DVRegion extends Region & DetailViewNode<DVRegion>> double layoutNodes(final Collection<DVRegion> nodes, final double minY, final double xOffset) {\n        //hash map from y value to right most occupied x value.  This tells you for a given 'row' what is the first avaialable slot\n        Map<Integer, Double> maxXatY = new HashMap<>();\n        double localMax = minY;\n        //for each node lay size it and position it in first available slot\n        for (DVRegion n : nodes) {\n            n.setDescriptionVisibility(descrVisibility.get());\n            double rawDisplayPosition = getXAxis().getDisplayPosition(new DateTime(n.getStartMillis()));\n\n            //position of start and end according to range of axis\n            double startX = rawDisplayPosition - xOffset;\n            double layoutNodesResultHeight = 0;\n\n            double span = 0;\n            List<DVRegion> subNodes = n.getSubNodes();\n            if (subNodes.isEmpty() == false) {\n                subNodes.sort(Comparator.comparing((DVRegion t) -> t.getStartMillis()));\n                layoutNodesResultHeight = layoutNodes(subNodes, 0, rawDisplayPosition);\n            }\n\n            if (n instanceof EventClusterNode) {\n                double endX = getXAxis().getDisplayPosition(new DateTime(n.getEndMillis())) - xOffset;\n                span = endX - startX;\n                //size timespan border\n                n.setSpanWidths(Arrays.asList(span));\n            } else {\n\n                EventStripeNode cn = (EventStripeNode) n;\n                List<Double> spanWidths = new ArrayList<>();\n                double x = getXAxis().getDisplayPosition(new DateTime(cn.getStartMillis()));;\n                double x2;\n                Iterator<Range<Long>> ranges = cn.getCluster().getRanges().iterator();\n                Range<Long> range = ranges.next();\n                do {\n                    x2 = getXAxis().getDisplayPosition(new DateTime(range.upperEndpoint()));\n                    double clusterSpan = x2 - x;\n                    span += clusterSpan;\n                    spanWidths.add(clusterSpan);\n                    if (ranges.hasNext()) {\n                        range = ranges.next();\n                        x = getXAxis().getDisplayPosition(new DateTime(range.lowerEndpoint()));\n                        double gapSpan = x - x2;\n                        span += gapSpan;\n                        spanWidths.add(gapSpan);\n                    }\n\n                } while (ranges.hasNext());\n\n                cn.setSpanWidths(spanWidths);\n            }\n            if (truncateAll.get()) { //if truncate option is selected limit width of description label\n                n.setDescriptionWidth(Math.max(span, truncateWidth.get()));\n            } else { //else set it unbounded\n                n.setDescriptionWidth(USE_PREF_SIZE);//20 + new Text(tlNode.getDisplayedDescription()).getLayoutBounds().getWidth());\n            }\n\n            n.autosize(); //compute size of tlNode based on constraints and event data\n\n            //get position of right edge of node ( influenced by description label)\n            double xRight = startX + n.getWidth();\n\n            //get the height of the node\n            final double h = layoutNodesResultHeight == 0 ? n.getHeight() : layoutNodesResultHeight + DEFAULT_ROW_HEIGHT;\n            //initial test position\n            double yPos = minY;\n\n            double yPos2 = yPos + h;\n\n            if (oneEventPerRow.get()) {\n                // if onePerRow, just put it at end\n                yPos = (localMax + 2);\n                yPos2 = yPos + h;\n\n            } else {//else\n\n                boolean overlapping = true;\n                while (overlapping) {\n                    //loop through y values looking for available slot.\n\n                    overlapping = false;\n                    //check each pixel from bottom to top.\n                    for (double y = yPos2; y >= yPos; y--) {\n                        final Double maxX = maxXatY.get((int) y);\n                        if (maxX != null && maxX >= startX - 4) {\n                            //if that pixel is already used\n                            //jump top to this y value and repeat until free slot is found.\n                            overlapping = true;\n                            yPos = y + 4;\n                            yPos2 = yPos + h;\n                            break;\n                        }\n                    }\n                }\n                //mark used y values\n                for (double y = yPos; y <= yPos2; y++) {\n                    maxXatY.put((int) y, xRight);\n                }\n            }\n            localMax = Math.max(yPos2, localMax);\n\n            Timeline tm = new Timeline(new KeyFrame(Duration.seconds(1.0),\n                    new KeyValue(n.layoutXProperty(), startX),\n                    new KeyValue(n.layoutYProperty(), yPos)));\n\n            tm.play();\n        }\n        maxY.set(Math.max(maxY.get(), localMax));\n        return localMax - minY;\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"private void layoutProjectionMap() {\n        for (final Map.Entry<DetailViewNode, Line> entry : projectionMap.entrySet()) {\n            final DetailViewNode aggNode = entry.getKey();\n            final Line line = entry.getValue();\n\n            line.setStartX(getParentXForValue(new DateTime(aggNode.getStartMillis(), TimeLineController.getJodaTimeZone())));\n            line.setEndX(getParentXForValue(new DateTime(aggNode.getEndMillis(), TimeLineController.getJodaTimeZone())));\n            line.setStartY(getXAxis().getLayoutY() + PROJECTED_LINE_Y_OFFSET);\n            line.setEndY(getXAxis().getLayoutY() + PROJECTED_LINE_Y_OFFSET);\n        }\n    }","id":70521,"modified_method":"private void layoutProjectionMap() {\n        for (final Map.Entry<DetailViewNode<?>, Line> entry : projectionMap.entrySet()) {\n            final DetailViewNode<?> aggNode = entry.getKey();\n            final Line line = entry.getValue();\n\n            line.setStartX(getParentXForValue(new DateTime(aggNode.getStartMillis(), TimeLineController.getJodaTimeZone())));\n            line.setEndX(getParentXForValue(new DateTime(aggNode.getEndMillis(), TimeLineController.getJodaTimeZone())));\n            line.setStartY(getXAxis().getLayoutY() + PROJECTED_LINE_Y_OFFSET);\n            line.setEndY(getXAxis().getLayoutY() + PROJECTED_LINE_Y_OFFSET);\n        }\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Layout the nodes representing events via the following algorithm.\n     *\n     * we start with a list of nodes (each representing an event) - sort the\n     * list of nodes by span start time of the underlying event - initialize\n     * empty map (maxXatY) from y-position to max used x-value - for each node:\n     * -- autosize the node (based on text label) -- get the event's start and\n     * end positions from the dateaxis -- size the capsule representing event\n     * duration -- starting from the top of the chart: --- (1)check if maxXatY\n     * is to the left of the start position: -------if maxXatY less than start\n     * position , good, put the current node here, mark end position as maxXatY,\n     * go to next node -------if maxXatY greater than start position, increment\n     * y position, do -------------check(1) again until maxXatY less than start\n     * position\n     */\n    @Override\n    protected synchronized void layoutPlotChildren() {\n\n        if (requiresLayout) {\n            setCursor(Cursor.WAIT);\n            double minY = 0;\n\n            maxY.set(0.0);\n\n            if (bandByType.get() == false) {\n                if (alternateLayout.get() == true) {\n                    List<EventStripeNode> nodes = new ArrayList<>(stripeNodeMap.values());\n                    Collections.sort(nodes, Comparator.comparing(DetailViewNode::getStartMillis));\n                    layoutNodes(nodes, minY, 0);\n                } else {\n                    List<EventClusterNode> nodes = new ArrayList<>(nodeMap.values());\n                    Collections.sort(nodes, Comparator.comparing(DetailViewNode::getStartMillis));\n                    layoutNodes(nodes, minY, 0);\n                }\n\n            } else {\n                for (Series<DateTime, EventCluster> s : sortedSeriesList) {\n                    if (alternateLayout.get() == true) {\n                        List<EventStripeNode> nodes = s.getData().stream()\n                                .map(Data::getYValue)\n                                .map(cluster -> stripeDescMap.get(ImmutablePair.of(cluster.getType(), cluster.getDescription())))\n                                .distinct()\n                                .sorted(Comparator.comparing(EventStripe::getStartMillis))\n                                .map(stripeNodeMap::get)\n                                .collect(Collectors.toList());\n                        layoutNodes(nodes, minY, 0);\n                    } else {\n                        List<EventClusterNode> nodes = s.getData().stream()\n                                .map(Data::getYValue)\n                                .map(nodeMap::get)\n                                .filter(Objects::nonNull)\n                                .sorted(Comparator.comparing(EventClusterNode::getStartMillis))\n                                .collect(Collectors.toList());\n                        layoutNodes(nodes, minY, 0);\n                    }\n                    minY = maxY.get();\n                }\n            }\n            setCursor(null);\n            requiresLayout = false;\n        }\n        layoutProjectionMap();\n    }","id":70522,"modified_method":"/**\n     * Layout the nodes representing events via the following algorithm.\n     *\n     * we start with a list of nodes (each representing an event) - sort the\n     * list of nodes by span start time of the underlying event - initialize\n     * empty map (maxXatY) from y-position to max used x-value - for each node:\n     * -- autosize the node (based on text label) -- get the event's start and\n     * end positions from the dateaxis -- size the capsule representing event\n     * duration -- starting from the top of the chart: --- (1)check if maxXatY\n     * is to the left of the start position: -------if maxXatY less than start\n     * position , good, put the current node here, mark end position as maxXatY,\n     * go to next node -------if maxXatY greater than start position, increment\n     * y position, do -------------check(1) again until maxXatY less than start\n     * position\n     */\n    @Override\n    protected synchronized void layoutPlotChildren() {\n\n        if (requiresLayout) {\n            setCursor(Cursor.WAIT);\n            double minY = 0;\n\n            maxY.set(0.0);\n\n            if (bandByType.get() == false) {\n                if (alternateLayout.get() == true) {\n                    List<EventStripeNode> nodes = new ArrayList<>(stripeNodeMap.values());\n                    nodes.sort(Comparator.comparing(DetailViewNode<?>::getStartMillis));\n                    layoutNodes(nodes, minY, 0);\n                } else {\n                    List<EventClusterNode> nodes = new ArrayList<>(nodeMap.values());\n                    nodes.sort(Comparator.comparing(DetailViewNode<?>::getStartMillis));\n                    layoutNodes(nodes, minY, 0);\n                }\n\n            } else {\n                for (Series<DateTime, EventCluster> s : sortedSeriesList) {\n                    if (alternateLayout.get() == true) {\n                        List<EventStripeNode> nodes = s.getData().stream()\n                                .map(Data::getYValue)\n                                .map(cluster -> stripeDescMap.get(ImmutablePair.of(cluster.getType(), cluster.getDescription())))\n                                .distinct()\n                                .sorted(Comparator.comparing(EventStripe::getStartMillis))\n                                .map(stripeNodeMap::get)\n                                .collect(Collectors.toList());\n                        layoutNodes(nodes, minY, 0);\n                    } else {\n                        List<EventClusterNode> nodes = s.getData().stream()\n                                .map(Data::getYValue)\n                                .map(nodeMap::get)\n                                .filter(Objects::nonNull)\n                                .sorted(Comparator.comparing(EventClusterNode::getStartMillis))\n                                .collect(Collectors.toList());\n                        layoutNodes(nodes, minY, 0);\n                    }\n                    minY = maxY.get();\n                }\n            }\n            setCursor(null);\n            requiresLayout = false;\n        }\n        layoutProjectionMap();\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"Iterable<EventClusterNode> getAllNodes() {\n        return getNodes(x -> true);\n    }","id":70523,"modified_method":"Iterable<DetailViewNode<?>> getAllNodes() {\n        return getNodes(x -> true);\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"EventDetailChart(DateAxis dateAxis, final Axis<EventCluster> verticalAxis, ObservableList<DetailViewNode> selectedNodes) {\n        super(dateAxis, verticalAxis);\n        dateAxis.setAutoRanging(false);\n\n        //yAxis.setVisible(false);//TODO: why doesn't this hide the vertical axis, instead we have to turn off all parts individually? -jm\n        verticalAxis.setTickLabelsVisible(false);\n        verticalAxis.setTickMarkVisible(false);\n\n        setLegendVisible(false);\n        setPadding(Insets.EMPTY);\n        setAlternativeColumnFillVisible(true);\n\n        //all nodes are added to nodeGroup to facilitate scrolling rather than to getPlotChildren() directly\n        getPlotChildren().add(nodeGroup);\n\n        //bind listener to events that should trigger layout\n        widthProperty().addListener(layoutInvalidationListener);\n        heightProperty().addListener(layoutInvalidationListener);\n//        boundsInLocalProperty().addListener(layoutInvalidationListener);\n\n        bandByType.addListener(layoutInvalidationListener);\n        oneEventPerRow.addListener(layoutInvalidationListener);\n        truncateAll.addListener(layoutInvalidationListener);\n        truncateWidth.addListener(layoutInvalidationListener);\n        descrVisibility.addListener(layoutInvalidationListener);\n\n        //this is needed to allow non circular binding of the guideline and timerangRect heights to the height of the chart\n        boundsInLocalProperty().addListener((Observable observable) -> {\n            setPrefHeight(boundsInLocalProperty().get().getHeight());\n        });\n\n        //set up mouse listeners\n        final EventHandler<MouseEvent> clickHandler = (MouseEvent clickEvent) -> {\n            if (chartContextMenu != null) {\n                chartContextMenu.hide();\n            }\n            if (clickEvent.getButton() == MouseButton.SECONDARY && clickEvent.isStillSincePress()) {\n\n                chartContextMenu = ActionUtils.createContextMenu(Arrays.asList(new Action(\n                        NbBundle.getMessage(this.getClass(), \"EventDetailChart.chartContextMenu.placeMarker.name\")) {\n                            {\n                                setGraphic(new ImageView(new Image(\"/org/sleuthkit/autopsy/timeline/images/marker.png\", 16, 16, true, true, true))); // NON-NLS\n                                setEventHandler((ActionEvent t) -> {\n                                    if (guideLine == null) {\n                                        guideLine = new GuideLine(0, 0, 0, getHeight(), dateAxis);\n                                        guideLine.relocate(clickEvent.getX(), 0);\n                                        guideLine.endYProperty().bind(heightProperty().subtract(dateAxis.heightProperty().subtract(dateAxis.tickLengthProperty())));\n\n                                        getChartChildren().add(guideLine);\n\n                                        guideLine.setOnMouseClicked((MouseEvent event) -> {\n                                            if (event.getButton() == MouseButton.SECONDARY) {\n                                                clearGuideLine();\n                                                event.consume();\n                                            }\n                                        });\n                                    } else {\n                                        guideLine.relocate(clickEvent.getX(), 0);\n                                    }\n                                });\n                            }\n\n                        }, new ActionGroup(\n                                NbBundle.getMessage(this.getClass(), \"EventDetailChart.contextMenu.zoomHistory.name\"),\n                                new Back(controller),\n                                new Forward(controller))));\n                chartContextMenu.setAutoHide(true);\n                chartContextMenu.show(EventDetailChart.this, clickEvent.getScreenX(), clickEvent.getScreenY());\n                clickEvent.consume();\n            }\n        };\n\n        setOnMouseClicked(clickHandler);\n\n        //use one handler with an if chain because it maintains state\n        final ChartDragHandler<DateTime, EventDetailChart> dragHandler = new ChartDragHandler<>(this, getXAxis());\n        setOnMousePressed(dragHandler);\n        setOnMouseReleased(dragHandler);\n        setOnMouseDragged(dragHandler);\n\n        projectionMap.addListener((MapChangeListener.Change<? extends DetailViewNode, ? extends Line> change) -> {\n            final Line valueRemoved = change.getValueRemoved();\n            if (valueRemoved != null) {\n                getChartChildren().removeAll(valueRemoved);\n            }\n            final Line valueAdded = change.getValueAdded();\n            if (valueAdded != null) {\n                getChartChildren().add(valueAdded);\n            }\n        });\n\n        this.selectedNodes = selectedNodes;\n        this.selectedNodes.addListener((\n                ListChangeListener.Change<? extends DetailViewNode> c) -> {\n                    while (c.next()) {\n                        c.getRemoved().forEach((DetailViewNode t) -> {\n                            projectionMap.remove(t);\n                        });\n                        c.getAddedSubList().forEach((DetailViewNode t) -> {\n                            Line line = new Line(dateAxis.localToParent(dateAxis.getDisplayPosition(new DateTime(t.getStartMillis(), TimeLineController.getJodaTimeZone())), 0).getX(), dateAxis.getLayoutY() + PROJECTED_LINE_Y_OFFSET,\n                                    dateAxis.localToParent(dateAxis.getDisplayPosition(new DateTime(t.getEndMillis(), TimeLineController.getJodaTimeZone())), 0).getX(), dateAxis.getLayoutY() + PROJECTED_LINE_Y_OFFSET\n                            );\n                            line.setStroke(t.getType().getColor().deriveColor(0, 1, 1, .5));\n                            line.setStrokeWidth(PROJECTED_LINE_STROKE_WIDTH);\n                            line.setStrokeLineCap(StrokeLineCap.ROUND);\n                            projectionMap.put(t, line);\n                        });\n\n                    }\n\n                    this.controller.selectEventIDs(selectedNodes.stream()\n                            .flatMap((DetailViewNode aggNode) -> aggNode.getEventIDs().stream())\n                            .collect(Collectors.toList()));\n                });\n\n        requestChartLayout();\n    }","id":70524,"modified_method":"EventDetailChart(DateAxis dateAxis, final Axis<EventCluster> verticalAxis, ObservableList<DetailViewNode<?>> selectedNodes) {\n        super(dateAxis, verticalAxis);\n        dateAxis.setAutoRanging(false);\n\n        //yAxis.setVisible(false);//TODO: why doesn't this hide the vertical axis, instead we have to turn off all parts individually? -jm\n        verticalAxis.setTickLabelsVisible(false);\n        verticalAxis.setTickMarkVisible(false);\n\n        setLegendVisible(false);\n        setPadding(Insets.EMPTY);\n        setAlternativeColumnFillVisible(true);\n\n        //all nodes are added to nodeGroup to facilitate scrolling rather than to getPlotChildren() directly\n        getPlotChildren().add(nodeGroup);\n\n        //bind listener to events that should trigger layout\n        widthProperty().addListener(layoutInvalidationListener);\n        heightProperty().addListener(layoutInvalidationListener);\n//        boundsInLocalProperty().addListener(layoutInvalidationListener);\n\n        bandByType.addListener(layoutInvalidationListener);\n        oneEventPerRow.addListener(layoutInvalidationListener);\n        truncateAll.addListener(layoutInvalidationListener);\n        truncateWidth.addListener(layoutInvalidationListener);\n        descrVisibility.addListener(layoutInvalidationListener);\n\n        //this is needed to allow non circular binding of the guideline and timerangRect heights to the height of the chart\n        boundsInLocalProperty().addListener((Observable observable) -> {\n            setPrefHeight(boundsInLocalProperty().get().getHeight());\n        });\n\n        //set up mouse listeners\n        final EventHandler<MouseEvent> clickHandler = (MouseEvent clickEvent) -> {\n            if (chartContextMenu != null) {\n                chartContextMenu.hide();\n            }\n            if (clickEvent.getButton() == MouseButton.SECONDARY && clickEvent.isStillSincePress()) {\n\n                chartContextMenu = ActionUtils.createContextMenu(Arrays.asList(new Action(\n                        NbBundle.getMessage(this.getClass(), \"EventDetailChart.chartContextMenu.placeMarker.name\")) {\n                            {\n                                setGraphic(new ImageView(new Image(\"/org/sleuthkit/autopsy/timeline/images/marker.png\", 16, 16, true, true, true))); // NON-NLS\n                                setEventHandler((ActionEvent t) -> {\n                                    if (guideLine == null) {\n                                        guideLine = new GuideLine(0, 0, 0, getHeight(), dateAxis);\n                                        guideLine.relocate(clickEvent.getX(), 0);\n                                        guideLine.endYProperty().bind(heightProperty().subtract(dateAxis.heightProperty().subtract(dateAxis.tickLengthProperty())));\n\n                                        getChartChildren().add(guideLine);\n\n                                        guideLine.setOnMouseClicked((MouseEvent event) -> {\n                                            if (event.getButton() == MouseButton.SECONDARY) {\n                                                clearGuideLine();\n                                                event.consume();\n                                            }\n                                        });\n                                    } else {\n                                        guideLine.relocate(clickEvent.getX(), 0);\n                                    }\n                                });\n                            }\n\n                        }, new ActionGroup(\n                                NbBundle.getMessage(this.getClass(), \"EventDetailChart.contextMenu.zoomHistory.name\"),\n                                new Back(controller),\n                                new Forward(controller))));\n                chartContextMenu.setAutoHide(true);\n                chartContextMenu.show(EventDetailChart.this, clickEvent.getScreenX(), clickEvent.getScreenY());\n                clickEvent.consume();\n            }\n        };\n\n        setOnMouseClicked(clickHandler);\n\n        //use one handler with an if chain because it maintains state\n        final ChartDragHandler<DateTime, EventDetailChart> dragHandler = new ChartDragHandler<>(this, getXAxis());\n        setOnMousePressed(dragHandler);\n        setOnMouseReleased(dragHandler);\n        setOnMouseDragged(dragHandler);\n\n        projectionMap.addListener((MapChangeListener.Change<? extends DetailViewNode<?>, ? extends Line> change) -> {\n            final Line valueRemoved = change.getValueRemoved();\n            if (valueRemoved != null) {\n                getChartChildren().removeAll(valueRemoved);\n            }\n            final Line valueAdded = change.getValueAdded();\n            if (valueAdded != null) {\n                getChartChildren().add(valueAdded);\n            }\n        });\n\n        this.selectedNodes = selectedNodes;\n        this.selectedNodes.addListener((\n                ListChangeListener.Change<? extends DetailViewNode<?>> c) -> {\n                    while (c.next()) {\n                        c.getRemoved().forEach((DetailViewNode<?> t) -> {\n                            projectionMap.remove(t);\n                        });\n                        c.getAddedSubList().forEach((DetailViewNode<?> t) -> {\n                            Line line = new Line(dateAxis.localToParent(dateAxis.getDisplayPosition(new DateTime(t.getStartMillis(), TimeLineController.getJodaTimeZone())), 0).getX(), dateAxis.getLayoutY() + PROJECTED_LINE_Y_OFFSET,\n                                    dateAxis.localToParent(dateAxis.getDisplayPosition(new DateTime(t.getEndMillis(), TimeLineController.getJodaTimeZone())), 0).getX(), dateAxis.getLayoutY() + PROJECTED_LINE_Y_OFFSET\n                            );\n                            line.setStroke(t.getType().getColor().deriveColor(0, 1, 1, .5));\n                            line.setStrokeWidth(PROJECTED_LINE_STROKE_WIDTH);\n                            line.setStrokeLineCap(StrokeLineCap.ROUND);\n                            projectionMap.put(t, line);\n                        });\n\n                    }\n\n                    this.controller.selectEventIDs(selectedNodes.stream()\n                            .flatMap(detailNode -> detailNode.getEventIDs().stream())\n                            .collect(Collectors.toList()));\n                });\n\n        requestChartLayout();\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"EventStripeNode(EventStripe cluster, EventStripeNode parentNode, EventDetailChart chart) {\n        this.chart = chart;\n        sleuthkitCase = chart.getController().getAutopsyCase().getSleuthkitCase();\n        eventsModel = chart.getController().getEventsModel();\n\n        this.parentNode = parentNode;\n        this.cluster = cluster;\n        descLOD.set(cluster.getDescriptionLOD());\n\n        final Region spacer = new Region();\n        HBox.setHgrow(spacer, Priority.ALWAYS);\n\n        final HBox hBox = new HBox(descrLabel, countLabel, spacer, hashIV, tagIV, minusButton, plusButton);\n        if (cluster.getEventIDsWithHashHits().isEmpty()) {\n            hashIV.setManaged(false);\n            hashIV.setVisible(false);\n        }\n        if (cluster.getEventIDsWithTags().isEmpty()) {\n            tagIV.setManaged(false);\n            tagIV.setVisible(false);\n        }\n        hBox.setPrefWidth(USE_COMPUTED_SIZE);\n        hBox.setMinWidth(USE_PREF_SIZE);\n        hBox.setPadding(new Insets(2, 5, 2, 5));\n        hBox.setAlignment(Pos.CENTER_LEFT);\n\n        minusButton.setVisible(false);\n        plusButton.setVisible(false);\n        minusButton.setManaged(false);\n        plusButton.setManaged(false);\n        final BorderPane borderPane = new BorderPane(subNodePane, hBox, null, null, null);\n        BorderPane.setAlignment(subNodePane, Pos.TOP_LEFT);\n        borderPane.setPrefWidth(USE_COMPUTED_SIZE);\n        final Color evtColor = cluster.getType().getColor();\n\n        spanFill = new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .2), CORNER_RADII, Insets.EMPTY));\n        for (Range<Long> r : cluster.getRanges()) {\n            Region region = new Region();\n            region.setStyle(\"-fx-border-width:2 1 2 1; -fx-border-radius: 1; -fx-border-color: \" + ColorUtilities.getRGBCode(evtColor.deriveColor(0, 1, 1, .3)) + \";\"); // NON-NLS\n            region.setBackground(spanFill);\n            spanRegion.getChildren().addAll(region, new Region());\n        }\n        spanRegion.getChildren().remove(spanRegion.getChildren().size() - 1);\n\n        getChildren().addAll(spanRegion, borderPane);\n        setBackground(new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .1), CORNER_RADII, Insets.EMPTY)));\n        setAlignment(Pos.TOP_LEFT);\n        setMinHeight(24);\n        minWidthProperty().bind(spanRegion.widthProperty());\n        setPrefHeight(USE_COMPUTED_SIZE);\n        setMaxHeight(USE_PREF_SIZE);\n\n        //set up subnode pane sizing contraints\n        subNodePane.setPrefHeight(USE_COMPUTED_SIZE);\n        subNodePane.setMinHeight(USE_PREF_SIZE);\n        subNodePane.setMinWidth(USE_PREF_SIZE);\n        subNodePane.setMaxHeight(USE_PREF_SIZE);\n        subNodePane.setMaxWidth(USE_PREF_SIZE);\n        subNodePane.setPickOnBounds(false);\n\n        //setup description label\n        eventTypeImageView.setImage(cluster.getType().getFXImage());\n        descrLabel.setGraphic(eventTypeImageView);\n        descrLabel.setPrefWidth(USE_COMPUTED_SIZE);\n        descrLabel.setTextOverrun(OverrunStyle.CENTER_ELLIPSIS);\n\n        descrLabel.setMouseTransparent(true);\n        setDescriptionVisibility(chart.getDescrVisibility().get());\n        setOnMouseClicked(new EventMouseHandler());\n\n        //set up mouse hover effect and tooltip\n        setOnMouseEntered((MouseEvent e) -> {\n            //defer tooltip creation till needed, this had a surprisingly large impact on speed of loading the chart\n//            installTooltip();\n            spanRegion.setEffect(new DropShadow(10, evtColor));\n            minusButton.setVisible(true);\n            plusButton.setVisible(true);\n            minusButton.setManaged(true);\n            plusButton.setManaged(true);\n            toFront();\n        });\n\n        setOnMouseExited((MouseEvent e) -> {\n            spanRegion.setEffect(null);\n            minusButton.setVisible(false);\n            plusButton.setVisible(false);\n            minusButton.setManaged(false);\n            plusButton.setManaged(false);\n        });\n\n        plusButton.disableProperty().bind(descLOD.isEqualTo(DescriptionLOD.FULL));\n        minusButton.disableProperty().bind(descLOD.isEqualTo(cluster.getDescriptionLOD()));\n\n        plusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD next = descLOD.get().next();\n            if (next != null) {\n                loadSubClusters(next);\n                descLOD.set(next);\n            }\n        });\n        minusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD previous = descLOD.get().previous();\n            if (previous != null) {\n                loadSubClusters(previous);\n                descLOD.set(previous);\n            }\n        });\n    }","id":70525,"modified_method":"EventStripeNode(EventStripe cluster, EventStripeNode parentNode, EventDetailChart chart) {\n        this.chart = chart;\n        sleuthkitCase = chart.getController().getAutopsyCase().getSleuthkitCase();\n        eventsModel = chart.getController().getEventsModel();\n\n        this.parentNode = parentNode;\n        this.cluster = cluster;\n        descLOD.set(cluster.getDescriptionLOD());\n\n        final Region spacer = new Region();\n        HBox.setHgrow(spacer, Priority.ALWAYS);\n\n        final HBox header = new HBox(descrLabel, countLabel, hashIV, tagIV, spacer, minusButton, plusButton);\n        if (cluster.getEventIDsWithHashHits().isEmpty()) {\n            show(hashIV, false);\n        }\n        if (cluster.getEventIDsWithTags().isEmpty()) {\n            show(tagIV, false);\n        }\n        header.setMinWidth(USE_PREF_SIZE);\n        header.setPadding(new Insets(2, 5, 2, 5));\n        header.setAlignment(Pos.CENTER_LEFT);\n\n        final VBox internalVBox = new VBox(header, subNodePane);\n        internalVBox.setAlignment(Pos.CENTER_LEFT);\n        final Color evtColor = cluster.getType().getColor();\n\n        spanFill = new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .2), CORNER_RADII, Insets.EMPTY));\n        for (Range<Long> r : cluster.getRanges()) {\n            Region spanRegion = new Region();\n            spanRegion.setStyle(\"-fx-border-width:2 1 2 1; -fx-border-radius: 1; -fx-border-color: \" + ColorUtilities.getRGBCode(evtColor.deriveColor(0, 1, 1, .3)) + \";\"); // NON-NLS\n            spanRegion.setBackground(spanFill);\n            spansHBox.getChildren().addAll(spanRegion, new Region());\n        }\n        spansHBox.getChildren().remove(spansHBox.getChildren().size() - 1);\n        spansHBox.setMaxWidth(USE_PREF_SIZE);\n        setMaxWidth(USE_PREF_SIZE);\n        getChildren().addAll(spansHBox, internalVBox);\n        setBackground(new Background(new BackgroundFill(evtColor.deriveColor(0, 1, 1, .05), CORNER_RADII, Insets.EMPTY)));\n        setAlignment(Pos.TOP_LEFT);\n        setMinHeight(24);\n        minWidthProperty().bind(spansHBox.widthProperty());\n        setPrefHeight(USE_COMPUTED_SIZE);\n        setMaxHeight(USE_PREF_SIZE);\n\n        //set up subnode pane sizing contraints\n        subNodePane.setPrefHeight(USE_COMPUTED_SIZE);\n        subNodePane.setMinHeight(USE_PREF_SIZE);\n        subNodePane.setMinWidth(USE_PREF_SIZE);\n        subNodePane.setMaxHeight(USE_PREF_SIZE);\n        subNodePane.setMaxWidth(USE_PREF_SIZE);\n        subNodePane.setPickOnBounds(false);\n\n        //setup description label\n        eventTypeImageView.setImage(cluster.getType().getFXImage());\n        descrLabel.setGraphic(eventTypeImageView);\n        descrLabel.setPrefWidth(USE_COMPUTED_SIZE);\n        descrLabel.setTextOverrun(OverrunStyle.CENTER_ELLIPSIS);\n\n        descrLabel.setMouseTransparent(true);\n        setDescriptionVisibility(chart.getDescrVisibility().get());\n        setOnMouseClicked(new EventMouseHandler());\n\n        //set up mouse hover effect and tooltip\n        setOnMouseEntered((MouseEvent e) -> {\n            //defer tooltip creation till needed, this had a surprisingly large impact on speed of loading the chart\n//            installTooltip();\n            spansHBox.setEffect(new DropShadow(10, evtColor));\n            show(spacer, true);\n            show(minusButton, true);\n            show(plusButton, true);\n\n            toFront();\n        });\n\n        setOnMouseExited((MouseEvent e) -> {\n            spansHBox.setEffect(null);\n            show(spacer, false);\n            show(minusButton, false);\n            show(plusButton, false);\n\n        });\n\n        plusButton.disableProperty().bind(descLOD.isEqualTo(DescriptionLOD.FULL));\n        minusButton.disableProperty().bind(descLOD.isEqualTo(cluster.getDescriptionLOD()));\n\n        plusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD next = descLOD.get().next();\n            if (next != null) {\n                loadSubClusters(next);\n                descLOD.set(next);\n            }\n        });\n        minusButton.setOnMouseClicked(e -> {\n            final DescriptionLOD previous = descLOD.get().previous();\n            if (previous != null) {\n                loadSubClusters(previous);\n                descLOD.set(previous);\n            }\n        });\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * loads sub-clusters at the given Description LOD\n     *\n     * @param newDescriptionLOD\n     */\n    synchronized private void loadSubClusters(DescriptionLOD newDescriptionLOD) {\n        getSubNodePane().getChildren().clear();\n        if (newDescriptionLOD == cluster.getDescriptionLOD()) {\n            chart.setRequiresLayout(true);\n            chart.requestChartLayout();\n        } else {\n            RootFilter combinedFilter = eventsModel.filterProperty().get().copyOf();\n            //make a new filter intersecting the global filter with text(description) and type filters to restrict sub-clusters\n            combinedFilter.getSubFilters().addAll(new TextFilter(cluster.getDescription()),\n                    new TypeFilter(cluster.getType()));\n\n            //make a new end inclusive span (to 'filter' with)\n            final Interval span = new Interval(cluster.getStartMillis(), cluster.getEndMillis() + 1000);\n\n            //make a task to load the subnodes\n            LoggedTask<List<EventStripeNode>> loggedTask = new LoggedTask<List<EventStripeNode>>(\n                    NbBundle.getMessage(this.getClass(), \"AggregateEventNode.loggedTask.name\"), true) {\n\n                        @Override\n                        protected List<EventStripeNode> call() throws Exception {\n                            //query for the sub-clusters\n                            List<EventCluster> aggregatedEvents = eventsModel.getAggregatedEvents(new ZoomParams(span,\n                                            eventsModel.eventTypeZoomProperty().get(),\n                                            combinedFilter,\n                                            newDescriptionLOD));\n                            //for each sub cluster make an AggregateEventNode to visually represent it, and set x-position\n                            HashMap<String, EventStripe> stripeDescMap = new HashMap<>();\n                            for (EventCluster subCluster : aggregatedEvents) {\n                                stripeDescMap.merge(subCluster.getDescription(),\n                                        new EventStripe(subCluster),\n                                        (EventStripe u, EventStripe v) -> {\n                                            return EventStripe.merge(u, v);\n                                        }\n                                );\n                            }\n\n                            return stripeDescMap.values().stream().map(subStripe -> {\n                                EventStripeNode subNode = new EventStripeNode(subStripe, EventStripeNode.this, chart);\n                                subNode.setLayoutX(chart.getXAxis().getDisplayPosition(new DateTime(subStripe.getStartMillis())) - getLayoutXCompensation());\n                                return subNode;\n                            }).collect(Collectors.toList()); // return list of AggregateEventNodes representing subclusters\n                        }\n\n                        @Override\n                        protected void succeeded() {\n                            try {\n                                chart.setCursor(Cursor.WAIT);\n                                //assign subNodes and request chart layout\n                                getSubNodePane().getChildren().setAll(get());\n                                setDescriptionVisibility(descrVis);\n                                chart.setRequiresLayout(true);\n                                chart.requestChartLayout();\n                                chart.setCursor(null);\n                            } catch (InterruptedException | ExecutionException ex) {\n                                LOGGER.log(Level.SEVERE, \"Error loading subnodes\", ex);\n                            }\n                        }\n                    };\n\n            //start task\n            chart.getController().monitorTask(loggedTask);\n        }\n    }","id":70526,"modified_method":"/**\n     * loads sub-clusters at the given Description LOD\n     *\n     * @param newDescriptionLOD\n     */\n    synchronized private void loadSubClusters(DescriptionLOD newDescriptionLOD) {\n        subNodePane.getChildren().clear();\n        \n        if (newDescriptionLOD == cluster.getDescriptionLOD()) {\n            spansHBox.setVisible(true);\n            chart.setRequiresLayout(true);\n            chart.requestChartLayout();\n        } else {\n            spansHBox.setVisible(false);\n            RootFilter combinedFilter = eventsModel.filterProperty().get().copyOf();\n            //make a new filter intersecting the global filter with text(description) and type filters to restrict sub-clusters\n            combinedFilter.getSubFilters().addAll(new TextFilter(cluster.getDescription()),\n                    new TypeFilter(cluster.getType()));\n\n            //make a new end inclusive span (to 'filter' with)\n            final Interval span = new Interval(cluster.getStartMillis(), cluster.getEndMillis() + 1000);\n\n            //make a task to load the subnodes\n            LoggedTask<List<EventStripeNode>> loggedTask = new LoggedTask<List<EventStripeNode>>(\n                    NbBundle.getMessage(this.getClass(), \"AggregateEventNode.loggedTask.name\"), true) {\n\n                        @Override\n                        protected List<EventStripeNode> call() throws Exception {\n                            //query for the sub-clusters\n                            List<EventCluster> aggregatedEvents = eventsModel.getAggregatedEvents(new ZoomParams(span,\n                                            eventsModel.eventTypeZoomProperty().get(),\n                                            combinedFilter,\n                                            newDescriptionLOD));\n                            //for each sub cluster make an AggregateEventNode to visually represent it, and set x-position\n                            HashMap<String, EventStripe> stripeDescMap = new HashMap<>();\n                            for (EventCluster subCluster : aggregatedEvents) {\n                                stripeDescMap.merge(subCluster.getDescription(),\n                                        new EventStripe(subCluster),\n                                        (EventStripe u, EventStripe v) -> {\n                                            return EventStripe.merge(u, v);\n                                        }\n                                );\n                            }\n\n                            return stripeDescMap.values().stream().map(subStripe -> {\n                                EventStripeNode subNode = new EventStripeNode(subStripe, EventStripeNode.this, chart);\n                                subNode.setLayoutX(chart.getXAxis().getDisplayPosition(new DateTime(subStripe.getStartMillis())) - getLayoutXCompensation());\n                                return subNode;\n                            }).collect(Collectors.toList()); // return list of AggregateEventNodes representing subclusters\n                        }\n\n                        @Override\n                        protected void succeeded() {\n                            try {\n                                chart.setCursor(Cursor.WAIT);\n                                //assign subNodes and request chart layout\n                                subNodePane.getChildren().setAll(get());\n                                setDescriptionVisibility(descrVis);\n                                chart.setRequiresLayout(true);\n                                chart.requestChartLayout();\n                                chart.setCursor(null);\n                            } catch (InterruptedException | ExecutionException ex) {\n                                LOGGER.log(Level.SEVERE, \"Error loading subnodes\", ex);\n                            }\n                        }\n                    };\n\n            //start task\n            chart.getController().monitorTask(loggedTask);\n        }\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public void setSpanWidths(List<Double> spanWidths) {\n        for (int i = 0; i < spanWidths.size(); i++) {\n            Region get = (Region) spanRegion.getChildren().get(i);\n            Double w = spanWidths.get(i);\n            get.setPrefWidth(w);\n            get.setMaxWidth(w);\n            get.setMinWidth(Math.max(2, w));\n        }\n    }","id":70527,"modified_method":"@Override\n    public void setSpanWidths(List<Double> spanWidths) {\n        for (int i = 0; i < spanWidths.size(); i++) {\n            Region spanRegion = (Region) spansHBox.getChildren().get(i);\n            Double w = spanWidths.get(i);\n            spanRegion.setPrefWidth(w);\n            spanRegion.setMaxWidth(w);\n            spanRegion.setMinWidth(Math.max(2, w));\n        }\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public Pane getSubNodePane() {\n        return subNodePane;\n    }","id":70528,"modified_method":"@Override\n    public List<EventStripeNode> getSubNodes() {\n        return subNodePane.getChildrenUnmodifiable().stream()\n                .map(EventStripeNode.class::cast)\n                .collect(Collectors.toList());\n    }","commit_id":"dbdf8bffc90f44405726ad4d3477fd76a0611ddd","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public void saveOrUpdate(Ticket newTicket) {\n\t\t\n\t\tTicketIDAndNumber idAndNumber = null;\n\t\t\n\t\tTicketServicePort_PortType port = getTicketServicePort();\n\t\t\n\t\tTicket currentTicket = null;\n\t\t\n\t\tCredentials creds = new Credentials();\n\n\t\tcreds.setUser(m_configDao.getUserName());\n\t\tcreds.setPass(m_configDao.getPassword());\n\t\t\n\t\tif (newTicket.getId() != null) {\n\n\t\t\tcurrentTicket = get(newTicket.getId()); \n\t\t\n\t\t} \n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tif (currentTicket == null) {\n\t\t\t\t\n\t\t\t\tidAndNumber =  newOTRSTicket(newTicket, port, creds);\n\n\t\t\t\tlog().debug(\"creating new ticket : \" + idAndNumber.getTicketNumber());\n\t\t\t\t\n\t\t\t\tnewTicket.setId(String.valueOf(idAndNumber.getTicketNumber()));\n\n\t\t\t\tlog().debug(\"Ticket ID is \" + newTicket.getId());\n\t\t\t\t\n\t\t\t\tnewOTRSArticle(idAndNumber.getTicketNumber(), newTicket, port, creds);\n\t\t\t\t\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tlog().debug(\"updating existing ticket : \" + currentTicket.getId());\n\t\t\t\t\n\t\t\t\tif (currentTicket.getState() != newTicket.getState()) {\n\t\t\t\t\t\n\t\t\t\t\tupdateOTRSState(newTicket, port, creds);\n\t\t\t\t\tupdateOTRSArticle(Long.parseLong(currentTicket.getId()), newTicket, port, creds);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\n\t\t\t\t\t// There is no else at the moment\n\t\t\t\t\t// Tickets are _only_ updated with new state\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (RemoteException e) {\n\t\t\tlog().error(\"Failed to create or update OTRS ticket\" + e);\n\t\t\tcreateEvent(\"Failed to create or update OTRS ticket\");\n\t\t}\n\t\t\n\t\t\n\t}","id":70529,"modified_method":"public void saveOrUpdate(Ticket newTicket) {\n\t\t\n\t\tTicketIDAndNumber idAndNumber = null;\n\t\t\n\t\tTicketServicePort_PortType port = getTicketServicePort(m_endpoint);\n\t\t\n\t\tTicket currentTicket = null;\n\t\t\n\t\tCredentials creds = new Credentials();\n\n\t\tcreds.setUser(m_configDao.getUserName());\n\t\tcreds.setPass(m_configDao.getPassword());\n\t\t\n\t\t// we have a ticketID and it's not \"unavailable\"\n\t\t\n\t\tif ((newTicket.getId() != null) && (! newTicket.getId().equals(UNAVAILABLE_TICKET_ID) ) ) {\n\n\t\t\tcurrentTicket = get(newTicket.getId()); \n\t\t\n\t\t}\n\t\t\n\t\ttry {\n\t\t    \n\t\t    // If there is no ticket in the external ticketing system, then\n\t\t    // ticketid will marked as \"unavailable\" so it's new (i.e. Try to recreate).\n\t\t    \n\t\t    // If there's no external ID in the OpenNMS ticket, we need to create one\n\t\t\t\n\t\t\tif ((newTicket.getId() == null) ) {\n\t\t\t\t\n\t\t\t\tidAndNumber =  newOTRSTicket(newTicket, port, creds);\n\n\t\t\t\tnewTicket.setId(String.valueOf(idAndNumber.getTicketNumber()));\n\n\t\t\t\tlog().debug(\"created new ticket: \" + newTicket.getId());\n\t\t\t\t\n\t\t\t\tnewOTRSArticle(idAndNumber.getTicketNumber(), newTicket, port, creds);\n\t\t\t\t\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tlog().debug(\"updating existing ticket : \" + currentTicket.getId());\n\t\t\t\t\n\t\t\t\tif (currentTicket.getState() != newTicket.getState()) {\n\t\t\t\t\t\n\t\t\t\t\tupdateOTRSState(newTicket, port, creds);\n\t\t\t\t\tupdateOTRSArticle(Long.parseLong(currentTicket.getId()), newTicket, port, creds);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\n\t\t\t\t\t// There is no else at the moment\n\t\t\t\t\t// Tickets are _only_ updated with new state\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (RemoteException e) {\n\t\t\tlog().error(\"Failed to create or update OTRS ticket\" + e);\n\t\t\tm_eventIpcManager.sendNow(createEvent(\"Failed to create or update OTRS ticket\"));\n\t\t\tnewTicket.setId(UNAVAILABLE_TICKET_ID);\n\t\t}\n\t\t\n\t\t\n\t}","commit_id":"ccaf1482b3e2ba6bedc85d1c17cb29379e5dc49c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Convenience method for initialising the ticketServicePort and correctly setting the endpoint.\n     *\n     * @return TicketServicePort to connect to the remote service.\n     */\n    \n    private TicketServicePort_PortType getTicketServicePort() {\n        \n        TicketServiceLocator service = new TicketServiceLocator();\n        \n        service.setTicketServicePortEndpointAddress(m_configDao.getEndpoint());\n\n        TicketServicePort_PortType port = null;\n\n        try {\n            port = service.getTicketServicePort();\n        } catch (ServiceException e) {\n            log().error(\"Failed initialzing OTRS TicketServicePort\" + e);\n            m_eventIpcManager.sendNow(createEvent(\"Failed initialzing OTRS TicketServicePort\"));\n        }\n        \n        return port;\n    }","id":70530,"modified_method":"/**\n     * Convenience method for initialising the ticketServicePort and correctly setting the endpoint.\n     *\n     * @return TicketServicePort to connect to the remote service.\n     */\n    \n    private TicketServicePort_PortType getTicketServicePort(String endpoint) {\n        \n        TicketServiceLocator service = new TicketServiceLocator();\n        \n        service.setTicketServicePortEndpointAddress(endpoint);\n\n        TicketServicePort_PortType port = null;\n\n        try {\n            port = service.getTicketServicePort();\n        } catch (ServiceException e) {\n            log().error(\"Failed initialzing OTRS TicketServicePort\" + e);\n            m_eventIpcManager.sendNow(createEvent(\"Failed initialzing OTRS TicketServicePort\"));\n        }\n        \n        return port;\n    }","commit_id":"ccaf1482b3e2ba6bedc85d1c17cb29379e5dc49c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OtrsTicketerPlugin() {\n\t\t\n\t\tm_configDao = new DefaultOtrsConfigDao();\n\t\tm_eventIpcManager = EventIpcManagerFactory.getIpcManager();\n\t}","id":70531,"modified_method":"public OtrsTicketerPlugin() {\n\t\t\n\t\tm_configDao = new DefaultOtrsConfigDao();\n\t\tm_eventIpcManager = EventIpcManagerFactory.getIpcManager();\n\t\tm_endpoint = m_configDao.getEndpoint();\n\t\t\n\t}","commit_id":"ccaf1482b3e2ba6bedc85d1c17cb29379e5dc49c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Ticket get(String ticketId) {\n\n\t\tTicketWithArticles ticketWithArticles = null;\n\n\t\tlong otrsTicketNumber = Long.parseLong(ticketId.trim());\n\n\t\tTicketServicePort_PortType port = getTicketServicePort();\n\n\t\tTicket opennmsTicket = new Ticket();\n\n\t\tif (port != null) {\n\n\t\t\tCredentials creds = new Credentials();\n\n\t\t\tcreds.setUser(m_configDao.getUserName());\n\t\t\tcreds.setPass(m_configDao.getPassword());\n\n\t\t\t// get the ticket from OTRS system\n\t\t\t\n\t\t\ttry {\n\t\t\t\tticketWithArticles = port.getByNumber(otrsTicketNumber, creds);\n\t\t\t} catch (RemoteException e) {\n\t\t\t\tlog().error(\"Failed to retrieve OTRS ticket\" + e);\n\t\t\t\tm_eventIpcManager.sendNow(createEvent(\"Failed to retrieve OTRS ticket\"));\n\t\t\t}\n\n\t\t\t\n\t\t}\n\t\t\n\t\t// construct an opennms ticket from the returned OTRS ticket and articles\n\n\t\tif (ticketWithArticles != null) {\n\n\t\t\t// add ticket basics from the OTRS ticket\n\t\t\t\n\t\t\tlog().debug(\n\t\t\t\t\t\"Adding Ticket details from OTRS ticket # \"\n\t\t\t\t\t\t\t+ ticketWithArticles.getTicket().getTicketNumber());\n\t\t\topennmsTicket.setId(ticketWithArticles.getTicket().getTicketNumber().toString());\n\t\t\topennmsTicket.setSummary(ticketWithArticles.getTicket().getTitle());\n\t\t\t\n\t\t\t// Note that we user \"Owner\" from the OTRS ticket here. There is nothing to ensure\n\t\t\t// That this is a valid OpenNMS user\n\t\t\t\n\t\t\topennmsTicket.setUser(ticketWithArticles.getTicket().getOwner());\n\t\t\topennmsTicket.setState(otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\tlog().debug(\"Retrieved ticket state : \" + otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\t// add all the article details from the OTRS ticket\n\t\t\t// this is not strictly essential as we have no way of viewing this atm.\n\t\t\t\n\t\t\tString opennmsTicketDetails = \"\";\n\n\t\t\tfor (Article article : ticketWithArticles.getArticles()) {\n\t\t\t\tlog().debug(\n\t\t\t\t\t\t\"Adding Article details from OTRS article ID \"\n\t\t\t\t\t\t\t\t+ article.getArticleID());\n\t\t\t\topennmsTicketDetails = opennmsTicketDetails + \"\\n\"\n\t\t\t\t\t\t+ \"From:    \" + article.getFrom() + \"\\n\" + \"Subject: \"\n\t\t\t\t\t\t+ article.getSubject() + \"\\n\" + \"Body:\\n\"\n\t\t\t\t\t\t+ article.getBody() + \"\\n\";\n\t\t\t}\n\t\t\t\n\t\t\topennmsTicket.setDetails(opennmsTicketDetails);\n\n\t\t}\n\n\t\treturn opennmsTicket;\n\n\t}","id":70532,"modified_method":"public Ticket get(String ticketId) {\n\n\t\tTicketWithArticles ticketWithArticles = null;\n\n\t\t// don't try to get ticket if it's marked as not available\n\t\t\n\t\tTicket opennmsTicket = new Ticket();\n\n\t\tif (ticketId.equals(UNAVAILABLE_TICKET_ID))  {\n\t\t    \n\t\t    log().error(\"No OTRS ticketID available in OpenNMS Ticket\");\n\t\t    \n\t\t} else {\n\t\t    \n\t\t    TicketServicePort_PortType port = getTicketServicePort(m_endpoint);\n\t   \n\t\t    if (port != null) {\n\t\t    \n    \t\t    long otrsTicketNumber = Long.parseLong(ticketId.trim());\n    \n    \t\t\tCredentials creds = new Credentials();\n    \n    \t\t\tcreds.setUser(m_configDao.getUserName());\n    \t\t\tcreds.setPass(m_configDao.getPassword());\n    \n    \t\t\t// get the ticket from OTRS system\n    \t\t\t\n    \t\t\ttry {\n    \t\t\t\tticketWithArticles = port.getByNumber(otrsTicketNumber, creds);\n    \t\t\t} catch (RemoteException e) {\n    \t\t\t\tlog().error(\"Failed to retrieve OTRS ticket\" + e);\n    \t\t\t\tm_eventIpcManager.sendNow(createEvent(\"Failed to retrieve OTRS ticket\"));\n    \t\t\t}\n    \t\t\t\n\t\t    }\n\t\t\t\n\t\t}\n\t\t\n\t\t// construct an opennms ticket from the returned OTRS ticket and articles\n\t\t// That's if there were any.....\n\n\t\tif (ticketWithArticles != null) {\n\n\t\t\t// add ticket basics from the OTRS ticket\n\t\t\t\n\t\t\tlog().debug(\n\t\t\t\t\t\"Adding Ticket details from OTRS ticket # \"\n\t\t\t\t\t\t\t+ ticketWithArticles.getTicket().getTicketNumber());\n\t\t\topennmsTicket.setId(ticketWithArticles.getTicket().getTicketNumber().toString());\n\t\t\topennmsTicket.setSummary(ticketWithArticles.getTicket().getTitle());\n\t\t\t\n\t\t\t// Note that we user \"Owner\" from the OTRS ticket here. There is nothing to ensure\n\t\t\t// That this is a valid OpenNMS user\n\t\t\t\n\t\t\topennmsTicket.setUser(ticketWithArticles.getTicket().getOwner());\n\t\t\topennmsTicket.setState(otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\tlog().debug(\"Retrieved ticket state : \" + otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\t// add all the article details from the OTRS ticket\n\t\t\t// this is not strictly essential as we have no way of viewing this atm.\n\t\t\t\n\t\t\tString opennmsTicketDetails = \"\";\n\n\t\t\tfor (Article article : ticketWithArticles.getArticles()) {\n\t\t\t\tlog().debug(\n\t\t\t\t\t\t\"Adding Article details from OTRS article ID \"\n\t\t\t\t\t\t\t\t+ article.getArticleID());\n\t\t\t\topennmsTicketDetails = opennmsTicketDetails + \"\\n\"\n\t\t\t\t\t\t+ \"From:    \" + article.getFrom() + \"\\n\" + \"Subject: \"\n\t\t\t\t\t\t+ article.getSubject() + \"\\n\" + \"Body:\\n\"\n\t\t\t\t\t\t+ article.getBody() + \"\\n\";\n\t\t\t}\n\t\t\t\n\t\t\topennmsTicket.setDetails(opennmsTicketDetails);\n\n\t\t} else {\n\t\t    \n\t\t    // Create a skeleton ticket at state CANCELLED\n\t\t    // will do this if:\n\t\t    // 1. There was no ticketID attached to the OpenNMS ticket\n\t\t    // 2. Ticket retrieval failed.\n\t\t    \n\t\t    log().error(\"No valid Ticket data available - returning 'unavailable' ticket\");\n\t\t    \n\t\t    opennmsTicket.setId(UNAVAILABLE_TICKET_ID);\n\t\t    opennmsTicket.setState(Ticket.State.CANCELLED);\n\t\t    opennmsTicket.setSummary(UNAVAILABLE_TICKET_SUMMARY);\n\t\t    opennmsTicket.setUser(UNAVAILABLE_TICKET_USER);\n\t\t    opennmsTicket.setDetails(UNAVAILABLE_TICKET_DETAILS);\n\t\t    \n\t\t}\n\n\t\treturn opennmsTicket;\n\n\t}","commit_id":"ccaf1482b3e2ba6bedc85d1c17cb29379e5dc49c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OtrsTicketerPlugin() {\n\t\t\n\t\tm_configDao = new DefaultOtrsConfigDao();\n\t\tm_eventIpcManager = EventIpcManagerFactory.getIpcManager();\n\t}","id":70533,"modified_method":"public OtrsTicketerPlugin() {\n\t\t\n\t\tm_configDao = new DefaultOtrsConfigDao();\n\t\tm_eventIpcManager = EventIpcManagerFactory.getIpcManager();\n\t\tm_endpoint = m_configDao.getEndpoint();\n\t\t\n\t}","commit_id":"2576e698d2f6f57e651e4ab38675f26d182866e2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Convenience method for initialising the ticketServicePort and correctly setting the endpoint.\n     *\n     * @return TicketServicePort to connect to the remote service.\n     */\n    \n    private TicketServicePort_PortType getTicketServicePort() {\n        \n        TicketServiceLocator service = new TicketServiceLocator();\n        \n        service.setTicketServicePortEndpointAddress(m_configDao.getEndpoint());\n\n        TicketServicePort_PortType port = null;\n\n        try {\n            port = service.getTicketServicePort();\n        } catch (ServiceException e) {\n            log().error(\"Failed initialzing OTRS TicketServicePort\" + e);\n            m_eventIpcManager.sendNow(createEvent(\"Failed initialzing OTRS TicketServicePort\"));\n        }\n        \n        return port;\n    }","id":70534,"modified_method":"/**\n     * Convenience method for initialising the ticketServicePort and correctly setting the endpoint.\n     *\n     * @return TicketServicePort to connect to the remote service.\n     */\n    \n    private TicketServicePort_PortType getTicketServicePort(String endpoint) {\n        \n        TicketServiceLocator service = new TicketServiceLocator();\n        \n        service.setTicketServicePortEndpointAddress(endpoint);\n\n        TicketServicePort_PortType port = null;\n\n        try {\n            port = service.getTicketServicePort();\n        } catch (ServiceException e) {\n            log().error(\"Failed initialzing OTRS TicketServicePort\" + e);\n            m_eventIpcManager.sendNow(createEvent(\"Failed initialzing OTRS TicketServicePort\"));\n        }\n        \n        return port;\n    }","commit_id":"2576e698d2f6f57e651e4ab38675f26d182866e2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Ticket get(String ticketId) {\n\n\t\tTicketWithArticles ticketWithArticles = null;\n\n\t\tlong otrsTicketNumber = Long.parseLong(ticketId.trim());\n\n\t\tTicketServicePort_PortType port = getTicketServicePort();\n\n\t\tTicket opennmsTicket = new Ticket();\n\n\t\tif (port != null) {\n\n\t\t\tCredentials creds = new Credentials();\n\n\t\t\tcreds.setUser(m_configDao.getUserName());\n\t\t\tcreds.setPass(m_configDao.getPassword());\n\n\t\t\t// get the ticket from OTRS system\n\t\t\t\n\t\t\ttry {\n\t\t\t\tticketWithArticles = port.getByNumber(otrsTicketNumber, creds);\n\t\t\t} catch (RemoteException e) {\n\t\t\t\tlog().error(\"Failed to retrieve OTRS ticket\" + e);\n\t\t\t\tm_eventIpcManager.sendNow(createEvent(\"Failed to retrieve OTRS ticket\"));\n\t\t\t}\n\n\t\t\t\n\t\t}\n\t\t\n\t\t// construct an opennms ticket from the returned OTRS ticket and articles\n\n\t\tif (ticketWithArticles != null) {\n\n\t\t\t// add ticket basics from the OTRS ticket\n\t\t\t\n\t\t\tlog().debug(\n\t\t\t\t\t\"Adding Ticket details from OTRS ticket # \"\n\t\t\t\t\t\t\t+ ticketWithArticles.getTicket().getTicketNumber());\n\t\t\topennmsTicket.setId(ticketWithArticles.getTicket().getTicketNumber().toString());\n\t\t\topennmsTicket.setSummary(ticketWithArticles.getTicket().getTitle());\n\t\t\t\n\t\t\t// Note that we user \"Owner\" from the OTRS ticket here. There is nothing to ensure\n\t\t\t// That this is a valid OpenNMS user\n\t\t\t\n\t\t\topennmsTicket.setUser(ticketWithArticles.getTicket().getOwner());\n\t\t\topennmsTicket.setState(otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\tlog().debug(\"Retrieved ticket state : \" + otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\t// add all the article details from the OTRS ticket\n\t\t\t// this is not strictly essential as we have no way of viewing this atm.\n\t\t\t\n\t\t\tString opennmsTicketDetails = \"\";\n\n\t\t\tfor (Article article : ticketWithArticles.getArticles()) {\n\t\t\t\tlog().debug(\n\t\t\t\t\t\t\"Adding Article details from OTRS article ID \"\n\t\t\t\t\t\t\t\t+ article.getArticleID());\n\t\t\t\topennmsTicketDetails = opennmsTicketDetails + \"\\n\"\n\t\t\t\t\t\t+ \"From:    \" + article.getFrom() + \"\\n\" + \"Subject: \"\n\t\t\t\t\t\t+ article.getSubject() + \"\\n\" + \"Body:\\n\"\n\t\t\t\t\t\t+ article.getBody() + \"\\n\";\n\t\t\t}\n\t\t\t\n\t\t\topennmsTicket.setDetails(opennmsTicketDetails);\n\n\t\t}\n\n\t\treturn opennmsTicket;\n\n\t}","id":70535,"modified_method":"public Ticket get(String ticketId) {\n\n\t\tTicketWithArticles ticketWithArticles = null;\n\n\t\t// don't try to get ticket if it's marked as not available\n\t\t\n\t\tTicket opennmsTicket = new Ticket();\n\n\t\tif (ticketId.equals(UNAVAILABLE_TICKET_ID))  {\n\t\t    \n\t\t    log().error(\"No OTRS ticketID available in OpenNMS Ticket\");\n\t\t    \n\t\t} else {\n\t\t    \n\t\t    TicketServicePort_PortType port = getTicketServicePort(m_endpoint);\n\t   \n\t\t    if (port != null) {\n\t\t    \n    \t\t    long otrsTicketNumber = Long.parseLong(ticketId.trim());\n    \n    \t\t\tCredentials creds = new Credentials();\n    \n    \t\t\tcreds.setUser(m_configDao.getUserName());\n    \t\t\tcreds.setPass(m_configDao.getPassword());\n    \n    \t\t\t// get the ticket from OTRS system\n    \t\t\t\n    \t\t\ttry {\n    \t\t\t\tticketWithArticles = port.getByNumber(otrsTicketNumber, creds);\n    \t\t\t} catch (RemoteException e) {\n    \t\t\t\tlog().error(\"Failed to retrieve OTRS ticket\" + e);\n    \t\t\t\tm_eventIpcManager.sendNow(createEvent(\"Failed to retrieve OTRS ticket\"));\n    \t\t\t}\n    \t\t\t\n\t\t    }\n\t\t\t\n\t\t}\n\t\t\n\t\t// construct an opennms ticket from the returned OTRS ticket and articles\n\t\t// That's if there were any.....\n\n\t\tif (ticketWithArticles != null) {\n\n\t\t\t// add ticket basics from the OTRS ticket\n\t\t\t\n\t\t\tlog().debug(\n\t\t\t\t\t\"Adding Ticket details from OTRS ticket # \"\n\t\t\t\t\t\t\t+ ticketWithArticles.getTicket().getTicketNumber());\n\t\t\topennmsTicket.setId(ticketWithArticles.getTicket().getTicketNumber().toString());\n\t\t\topennmsTicket.setSummary(ticketWithArticles.getTicket().getTitle());\n\t\t\t\n\t\t\t// Note that we user \"Owner\" from the OTRS ticket here. There is nothing to ensure\n\t\t\t// That this is a valid OpenNMS user\n\t\t\t\n\t\t\topennmsTicket.setUser(ticketWithArticles.getTicket().getOwner());\n\t\t\topennmsTicket.setState(otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\tlog().debug(\"Retrieved ticket state : \" + otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\t// add all the article details from the OTRS ticket\n\t\t\t// this is not strictly essential as we have no way of viewing this atm.\n\t\t\t\n\t\t\tString opennmsTicketDetails = \"\";\n\n\t\t\tfor (Article article : ticketWithArticles.getArticles()) {\n\t\t\t\tlog().debug(\n\t\t\t\t\t\t\"Adding Article details from OTRS article ID \"\n\t\t\t\t\t\t\t\t+ article.getArticleID());\n\t\t\t\topennmsTicketDetails = opennmsTicketDetails + \"\\n\"\n\t\t\t\t\t\t+ \"From:    \" + article.getFrom() + \"\\n\" + \"Subject: \"\n\t\t\t\t\t\t+ article.getSubject() + \"\\n\" + \"Body:\\n\"\n\t\t\t\t\t\t+ article.getBody() + \"\\n\";\n\t\t\t}\n\t\t\t\n\t\t\topennmsTicket.setDetails(opennmsTicketDetails);\n\n\t\t} else {\n\t\t    \n\t\t    // Create a skeleton ticket at state CANCELLED\n\t\t    // will do this if:\n\t\t    // 1. There was no ticketID attached to the OpenNMS ticket\n\t\t    // 2. Ticket retrieval failed.\n\t\t    \n\t\t    log().error(\"No valid Ticket data available - returning 'unavailable' ticket\");\n\t\t    \n\t\t    opennmsTicket.setId(UNAVAILABLE_TICKET_ID);\n\t\t    opennmsTicket.setState(Ticket.State.CANCELLED);\n\t\t    opennmsTicket.setSummary(UNAVAILABLE_TICKET_SUMMARY);\n\t\t    opennmsTicket.setUser(UNAVAILABLE_TICKET_USER);\n\t\t    opennmsTicket.setDetails(UNAVAILABLE_TICKET_DETAILS);\n\t\t    \n\t\t}\n\n\t\treturn opennmsTicket;\n\n\t}","commit_id":"2576e698d2f6f57e651e4ab38675f26d182866e2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void saveOrUpdate(Ticket newTicket) {\n\t\t\n\t\tTicketIDAndNumber idAndNumber = null;\n\t\t\n\t\tTicketServicePort_PortType port = getTicketServicePort();\n\t\t\n\t\tTicket currentTicket = null;\n\t\t\n\t\tCredentials creds = new Credentials();\n\n\t\tcreds.setUser(m_configDao.getUserName());\n\t\tcreds.setPass(m_configDao.getPassword());\n\t\t\n\t\tif (newTicket.getId() != null) {\n\n\t\t\tcurrentTicket = get(newTicket.getId()); \n\t\t\n\t\t} \n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tif (currentTicket == null) {\n\t\t\t\t\n\t\t\t\tidAndNumber =  newOTRSTicket(newTicket, port, creds);\n\n\t\t\t\tlog().debug(\"creating new ticket : \" + idAndNumber.getTicketNumber());\n\t\t\t\t\n\t\t\t\tnewTicket.setId(String.valueOf(idAndNumber.getTicketNumber()));\n\n\t\t\t\tlog().debug(\"Ticket ID is \" + newTicket.getId());\n\t\t\t\t\n\t\t\t\tnewOTRSArticle(idAndNumber.getTicketNumber(), newTicket, port, creds);\n\t\t\t\t\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tlog().debug(\"updating existing ticket : \" + currentTicket.getId());\n\t\t\t\t\n\t\t\t\tif (currentTicket.getState() != newTicket.getState()) {\n\t\t\t\t\t\n\t\t\t\t\tupdateOTRSState(newTicket, port, creds);\n\t\t\t\t\tupdateOTRSArticle(Long.parseLong(currentTicket.getId()), newTicket, port, creds);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\n\t\t\t\t\t// There is no else at the moment\n\t\t\t\t\t// Tickets are _only_ updated with new state\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (RemoteException e) {\n\t\t\tlog().error(\"Failed to create or update OTRS ticket\" + e);\n\t\t\tcreateEvent(\"Failed to create or update OTRS ticket\");\n\t\t}\n\t\t\n\t\t\n\t}","id":70536,"modified_method":"public void saveOrUpdate(Ticket newTicket) {\n\t\t\n\t\tTicketIDAndNumber idAndNumber = null;\n\t\t\n\t\tTicketServicePort_PortType port = getTicketServicePort(m_endpoint);\n\t\t\n\t\tTicket currentTicket = null;\n\t\t\n\t\tCredentials creds = new Credentials();\n\n\t\tcreds.setUser(m_configDao.getUserName());\n\t\tcreds.setPass(m_configDao.getPassword());\n\t\t\n\t\t// we have a ticketID and it's not \"unavailable\"\n\t\t\n\t\tif ((newTicket.getId() != null) && (! newTicket.getId().equals(UNAVAILABLE_TICKET_ID) ) ) {\n\n\t\t\tcurrentTicket = get(newTicket.getId()); \n\t\t\n\t\t}\n\t\t\n\t\ttry {\n\t\t    \n\t\t    // If there is no ticket in the external ticketing system, then\n\t\t    // ticketid will marked as \"unavailable\" so it's new (i.e. Try to recreate).\n\t\t    \n\t\t    // If there's no external ID in the OpenNMS ticket, we need to create one\n\t\t\t\n\t\t\tif ((newTicket.getId() == null) ) {\n\t\t\t\t\n\t\t\t\tidAndNumber =  newOTRSTicket(newTicket, port, creds);\n\n\t\t\t\tnewTicket.setId(String.valueOf(idAndNumber.getTicketNumber()));\n\n\t\t\t\tlog().debug(\"created new ticket: \" + newTicket.getId());\n\t\t\t\t\n\t\t\t\tnewOTRSArticle(idAndNumber.getTicketNumber(), newTicket, port, creds);\n\t\t\t\t\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tlog().debug(\"updating existing ticket : \" + currentTicket.getId());\n\t\t\t\t\n\t\t\t\tif (currentTicket.getState() != newTicket.getState()) {\n\t\t\t\t\t\n\t\t\t\t\tupdateOTRSState(newTicket, port, creds);\n\t\t\t\t\tupdateOTRSArticle(Long.parseLong(currentTicket.getId()), newTicket, port, creds);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\n\t\t\t\t\t// There is no else at the moment\n\t\t\t\t\t// Tickets are _only_ updated with new state\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (RemoteException e) {\n\t\t\tlog().error(\"Failed to create or update OTRS ticket\" + e);\n\t\t\tm_eventIpcManager.sendNow(createEvent(\"Failed to create or update OTRS ticket\"));\n\t\t\tnewTicket.setId(UNAVAILABLE_TICKET_ID);\n\t\t}\n\t\t\n\t\t\n\t}","commit_id":"2576e698d2f6f57e651e4ab38675f26d182866e2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Convenience method for initialising the ticketServicePort and correctly setting the endpoint.\n     *\n     * @return TicketServicePort to connect to the remote service.\n     */\n    \n    private TicketServicePort_PortType getTicketServicePort() {\n        \n        TicketServiceLocator service = new TicketServiceLocator();\n        \n        service.setTicketServicePortEndpointAddress(m_configDao.getEndpoint());\n\n        TicketServicePort_PortType port = null;\n\n        try {\n            port = service.getTicketServicePort();\n        } catch (ServiceException e) {\n            log().error(\"Failed initialzing OTRS TicketServicePort\" + e);\n            m_eventIpcManager.sendNow(createEvent(\"Failed initialzing OTRS TicketServicePort\"));\n        }\n        \n        return port;\n    }","id":70537,"modified_method":"/**\n     * Convenience method for initialising the ticketServicePort and correctly setting the endpoint.\n     *\n     * @return TicketServicePort to connect to the remote service.\n     */\n    \n    private TicketServicePort_PortType getTicketServicePort(String endpoint) {\n        \n        TicketServiceLocator service = new TicketServiceLocator();\n        \n        service.setTicketServicePortEndpointAddress(endpoint);\n\n        TicketServicePort_PortType port = null;\n\n        try {\n            port = service.getTicketServicePort();\n        } catch (ServiceException e) {\n            log().error(\"Failed initialzing OTRS TicketServicePort\" + e);\n            m_eventIpcManager.sendNow(createEvent(\"Failed initialzing OTRS TicketServicePort\"));\n        }\n        \n        return port;\n    }","commit_id":"bc839507c2692950c961e0f4892dab37cfe8eb43","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void saveOrUpdate(Ticket newTicket) {\n\t\t\n\t\tTicketIDAndNumber idAndNumber = null;\n\t\t\n\t\tTicketServicePort_PortType port = getTicketServicePort();\n\t\t\n\t\tTicket currentTicket = null;\n\t\t\n\t\tCredentials creds = new Credentials();\n\n\t\tcreds.setUser(m_configDao.getUserName());\n\t\tcreds.setPass(m_configDao.getPassword());\n\t\t\n\t\tif (newTicket.getId() != null) {\n\n\t\t\tcurrentTicket = get(newTicket.getId()); \n\t\t\n\t\t} \n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tif (currentTicket == null) {\n\t\t\t\t\n\t\t\t\tidAndNumber =  newOTRSTicket(newTicket, port, creds);\n\n\t\t\t\tlog().debug(\"creating new ticket : \" + idAndNumber.getTicketNumber());\n\t\t\t\t\n\t\t\t\tnewTicket.setId(String.valueOf(idAndNumber.getTicketNumber()));\n\n\t\t\t\tlog().debug(\"Ticket ID is \" + newTicket.getId());\n\t\t\t\t\n\t\t\t\tnewOTRSArticle(idAndNumber.getTicketNumber(), newTicket, port, creds);\n\t\t\t\t\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tlog().debug(\"updating existing ticket : \" + currentTicket.getId());\n\t\t\t\t\n\t\t\t\tif (currentTicket.getState() != newTicket.getState()) {\n\t\t\t\t\t\n\t\t\t\t\tupdateOTRSState(newTicket, port, creds);\n\t\t\t\t\tupdateOTRSArticle(Long.parseLong(currentTicket.getId()), newTicket, port, creds);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\n\t\t\t\t\t// There is no else at the moment\n\t\t\t\t\t// Tickets are _only_ updated with new state\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (RemoteException e) {\n\t\t\tlog().error(\"Failed to create or update OTRS ticket\" + e);\n\t\t\tcreateEvent(\"Failed to create or update OTRS ticket\");\n\t\t}\n\t\t\n\t\t\n\t}","id":70538,"modified_method":"public void saveOrUpdate(Ticket newTicket) {\n\t\t\n\t\tTicketIDAndNumber idAndNumber = null;\n\t\t\n\t\tTicketServicePort_PortType port = getTicketServicePort(m_endpoint);\n\t\t\n\t\tTicket currentTicket = null;\n\t\t\n\t\tCredentials creds = new Credentials();\n\n\t\tcreds.setUser(m_configDao.getUserName());\n\t\tcreds.setPass(m_configDao.getPassword());\n\t\t\n\t\t// we have a ticketID and it's not \"unavailable\"\n\t\t\n\t\tif ((newTicket.getId() != null) && (! newTicket.getId().equals(UNAVAILABLE_TICKET_ID) ) ) {\n\n\t\t\tcurrentTicket = get(newTicket.getId()); \n\t\t\n\t\t}\n\t\t\n\t\ttry {\n\t\t    \n\t\t    // If there is no ticket in the external ticketing system, then\n\t\t    // ticketid will marked as \"unavailable\" so it's new (i.e. Try to recreate).\n\t\t    \n\t\t    // If there's no external ID in the OpenNMS ticket, we need to create one\n\t\t\t\n\t\t\tif ((newTicket.getId() == null) ) {\n\t\t\t\t\n\t\t\t\tidAndNumber =  newOTRSTicket(newTicket, port, creds);\n\n\t\t\t\tnewTicket.setId(String.valueOf(idAndNumber.getTicketNumber()));\n\n\t\t\t\tlog().debug(\"created new ticket: \" + newTicket.getId());\n\t\t\t\t\n\t\t\t\tnewOTRSArticle(idAndNumber.getTicketNumber(), newTicket, port, creds);\n\t\t\t\t\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tlog().debug(\"updating existing ticket : \" + currentTicket.getId());\n\t\t\t\t\n\t\t\t\tif (currentTicket.getState() != newTicket.getState()) {\n\t\t\t\t\t\n\t\t\t\t\tupdateOTRSState(newTicket, port, creds);\n\t\t\t\t\tupdateOTRSArticle(Long.parseLong(currentTicket.getId()), newTicket, port, creds);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\n\t\t\t\t\t// There is no else at the moment\n\t\t\t\t\t// Tickets are _only_ updated with new state\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (RemoteException e) {\n\t\t\tlog().error(\"Failed to create or update OTRS ticket\" + e);\n\t\t\tm_eventIpcManager.sendNow(createEvent(\"Failed to create or update OTRS ticket\"));\n\t\t\tnewTicket.setId(UNAVAILABLE_TICKET_ID);\n\t\t}\n\t\t\n\t\t\n\t}","commit_id":"bc839507c2692950c961e0f4892dab37cfe8eb43","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OtrsTicketerPlugin() {\n\t\t\n\t\tm_configDao = new DefaultOtrsConfigDao();\n\t\tm_eventIpcManager = EventIpcManagerFactory.getIpcManager();\n\t}","id":70539,"modified_method":"public OtrsTicketerPlugin() {\n\t\t\n\t\tm_configDao = new DefaultOtrsConfigDao();\n\t\tm_eventIpcManager = EventIpcManagerFactory.getIpcManager();\n\t\tm_endpoint = m_configDao.getEndpoint();\n\t\t\n\t}","commit_id":"bc839507c2692950c961e0f4892dab37cfe8eb43","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Ticket get(String ticketId) {\n\n\t\tTicketWithArticles ticketWithArticles = null;\n\n\t\tlong otrsTicketNumber = Long.parseLong(ticketId.trim());\n\n\t\tTicketServicePort_PortType port = getTicketServicePort();\n\n\t\tTicket opennmsTicket = new Ticket();\n\n\t\tif (port != null) {\n\n\t\t\tCredentials creds = new Credentials();\n\n\t\t\tcreds.setUser(m_configDao.getUserName());\n\t\t\tcreds.setPass(m_configDao.getPassword());\n\n\t\t\t// get the ticket from OTRS system\n\t\t\t\n\t\t\ttry {\n\t\t\t\tticketWithArticles = port.getByNumber(otrsTicketNumber, creds);\n\t\t\t} catch (RemoteException e) {\n\t\t\t\tlog().error(\"Failed to retrieve OTRS ticket\" + e);\n\t\t\t\tm_eventIpcManager.sendNow(createEvent(\"Failed to retrieve OTRS ticket\"));\n\t\t\t}\n\n\t\t\t\n\t\t}\n\t\t\n\t\t// construct an opennms ticket from the returned OTRS ticket and articles\n\n\t\tif (ticketWithArticles != null) {\n\n\t\t\t// add ticket basics from the OTRS ticket\n\t\t\t\n\t\t\tlog().debug(\n\t\t\t\t\t\"Adding Ticket details from OTRS ticket # \"\n\t\t\t\t\t\t\t+ ticketWithArticles.getTicket().getTicketNumber());\n\t\t\topennmsTicket.setId(ticketWithArticles.getTicket().getTicketNumber().toString());\n\t\t\topennmsTicket.setSummary(ticketWithArticles.getTicket().getTitle());\n\t\t\t\n\t\t\t// Note that we user \"Owner\" from the OTRS ticket here. There is nothing to ensure\n\t\t\t// That this is a valid OpenNMS user\n\t\t\t\n\t\t\topennmsTicket.setUser(ticketWithArticles.getTicket().getOwner());\n\t\t\topennmsTicket.setState(otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\tlog().debug(\"Retrieved ticket state : \" + otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\t// add all the article details from the OTRS ticket\n\t\t\t// this is not strictly essential as we have no way of viewing this atm.\n\t\t\t\n\t\t\tString opennmsTicketDetails = \"\";\n\n\t\t\tfor (Article article : ticketWithArticles.getArticles()) {\n\t\t\t\tlog().debug(\n\t\t\t\t\t\t\"Adding Article details from OTRS article ID \"\n\t\t\t\t\t\t\t\t+ article.getArticleID());\n\t\t\t\topennmsTicketDetails = opennmsTicketDetails + \"\\n\"\n\t\t\t\t\t\t+ \"From:    \" + article.getFrom() + \"\\n\" + \"Subject: \"\n\t\t\t\t\t\t+ article.getSubject() + \"\\n\" + \"Body:\\n\"\n\t\t\t\t\t\t+ article.getBody() + \"\\n\";\n\t\t\t}\n\t\t\t\n\t\t\topennmsTicket.setDetails(opennmsTicketDetails);\n\n\t\t}\n\n\t\treturn opennmsTicket;\n\n\t}","id":70540,"modified_method":"public Ticket get(String ticketId) {\n\n\t\tTicketWithArticles ticketWithArticles = null;\n\n\t\t// don't try to get ticket if it's marked as not available\n\t\t\n\t\tTicket opennmsTicket = new Ticket();\n\n\t\tif (ticketId.equals(UNAVAILABLE_TICKET_ID))  {\n\t\t    \n\t\t    log().error(\"No OTRS ticketID available in OpenNMS Ticket\");\n\t\t    \n\t\t} else {\n\t\t    \n\t\t    TicketServicePort_PortType port = getTicketServicePort(m_endpoint);\n\t   \n\t\t    if (port != null) {\n\t\t    \n    \t\t    long otrsTicketNumber = Long.parseLong(ticketId.trim());\n    \n    \t\t\tCredentials creds = new Credentials();\n    \n    \t\t\tcreds.setUser(m_configDao.getUserName());\n    \t\t\tcreds.setPass(m_configDao.getPassword());\n    \n    \t\t\t// get the ticket from OTRS system\n    \t\t\t\n    \t\t\ttry {\n    \t\t\t\tticketWithArticles = port.getByNumber(otrsTicketNumber, creds);\n    \t\t\t} catch (RemoteException e) {\n    \t\t\t\tlog().error(\"Failed to retrieve OTRS ticket\" + e);\n    \t\t\t\tm_eventIpcManager.sendNow(createEvent(\"Failed to retrieve OTRS ticket\"));\n    \t\t\t}\n    \t\t\t\n\t\t    }\n\t\t\t\n\t\t}\n\t\t\n\t\t// construct an opennms ticket from the returned OTRS ticket and articles\n\t\t// That's if there were any.....\n\n\t\tif (ticketWithArticles != null) {\n\n\t\t\t// add ticket basics from the OTRS ticket\n\t\t\t\n\t\t\tlog().debug(\n\t\t\t\t\t\"Adding Ticket details from OTRS ticket # \"\n\t\t\t\t\t\t\t+ ticketWithArticles.getTicket().getTicketNumber());\n\t\t\topennmsTicket.setId(ticketWithArticles.getTicket().getTicketNumber().toString());\n\t\t\topennmsTicket.setSummary(ticketWithArticles.getTicket().getTitle());\n\t\t\t\n\t\t\t// Note that we user \"Owner\" from the OTRS ticket here. There is nothing to ensure\n\t\t\t// That this is a valid OpenNMS user\n\t\t\t\n\t\t\topennmsTicket.setUser(ticketWithArticles.getTicket().getOwner());\n\t\t\topennmsTicket.setState(otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\tlog().debug(\"Retrieved ticket state : \" + otrsToOpenNMSState(ticketWithArticles.getTicket().getStateID()));\n\t\t\t\n\t\t\t// add all the article details from the OTRS ticket\n\t\t\t// this is not strictly essential as we have no way of viewing this atm.\n\t\t\t\n\t\t\tString opennmsTicketDetails = \"\";\n\n\t\t\tfor (Article article : ticketWithArticles.getArticles()) {\n\t\t\t\tlog().debug(\n\t\t\t\t\t\t\"Adding Article details from OTRS article ID \"\n\t\t\t\t\t\t\t\t+ article.getArticleID());\n\t\t\t\topennmsTicketDetails = opennmsTicketDetails + \"\\n\"\n\t\t\t\t\t\t+ \"From:    \" + article.getFrom() + \"\\n\" + \"Subject: \"\n\t\t\t\t\t\t+ article.getSubject() + \"\\n\" + \"Body:\\n\"\n\t\t\t\t\t\t+ article.getBody() + \"\\n\";\n\t\t\t}\n\t\t\t\n\t\t\topennmsTicket.setDetails(opennmsTicketDetails);\n\n\t\t} else {\n\t\t    \n\t\t    // Create a skeleton ticket at state CANCELLED\n\t\t    // will do this if:\n\t\t    // 1. There was no ticketID attached to the OpenNMS ticket\n\t\t    // 2. Ticket retrieval failed.\n\t\t    \n\t\t    log().error(\"No valid Ticket data available - returning 'unavailable' ticket\");\n\t\t    \n\t\t    opennmsTicket.setId(UNAVAILABLE_TICKET_ID);\n\t\t    opennmsTicket.setState(Ticket.State.CANCELLED);\n\t\t    opennmsTicket.setSummary(UNAVAILABLE_TICKET_SUMMARY);\n\t\t    opennmsTicket.setUser(UNAVAILABLE_TICKET_USER);\n\t\t    opennmsTicket.setDetails(UNAVAILABLE_TICKET_DETAILS);\n\t\t    \n\t\t}\n\n\t\treturn opennmsTicket;\n\n\t}","commit_id":"bc839507c2692950c961e0f4892dab37cfe8eb43","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testAddDataDefinition() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_167_manageDDMStructuresLink']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Manage Data Definitions\"),\n\t\t\tselenium.getText(\"//a[@id='_167_manageDDMStructuresLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_167_manageDDMStructuresLink']\",\n\t\t\tRuntimeVariables.replace(\"Manage Data Definitions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Add\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Add\", RuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_166_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[1]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[2]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[3]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[4]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[5]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[6]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[7]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[8]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[9]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[10]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[11]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","id":70541,"modified_method":"public void testAddDataDefinition() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_167_manageDDMStructuresLink']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Manage Data Definitions\"),\n\t\t\tselenium.getText(\"//a[@id='_167_manageDDMStructuresLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_167_manageDDMStructuresLink']\",\n\t\t\tRuntimeVariables.replace(\"Manage Data Definitions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/search_container.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//span[@class='lfr-toolbar-button add-button ']/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//span[@class='lfr-toolbar-button add-button ']/a\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/translation_manager.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_166_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[1]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[2]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[3]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[4]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[5]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[6]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[7]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[8]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[9]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[10]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[11]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddDataDefinition() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_167_manageDDMStructuresLink']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Manage Data Definitions\"),\n\t\t\tselenium.getText(\"//a[@id='_167_manageDDMStructuresLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_167_manageDDMStructuresLink']\",\n\t\t\tRuntimeVariables.replace(\"Manage Data Definitions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Add\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Add\", RuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_166_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[1]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[2]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[3]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[4]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[5]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[6]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[7]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[8]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[9]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[10]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[11]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","id":70542,"modified_method":"public void testAddDataDefinition() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_167_manageDDMStructuresLink']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Manage Data Definitions\"),\n\t\t\tselenium.getText(\"//a[@id='_167_manageDDMStructuresLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_167_manageDDMStructuresLink']\",\n\t\t\tRuntimeVariables.replace(\"Manage Data Definitions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/search_container.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//span[@class='lfr-toolbar-button add-button ']/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//span[@class='lfr-toolbar-button add-button ']/a\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/translation_manager.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_166_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[1]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[2]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[3]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[4]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[5]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[6]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[7]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[8]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[9]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[10]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[11]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddDataDefinition() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_167_manageDDMStructuresLink']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Manage Data Definitions\"),\n\t\t\tselenium.getText(\"//a[@id='_167_manageDDMStructuresLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_167_manageDDMStructuresLink']\",\n\t\t\tRuntimeVariables.replace(\"Manage Data Definitions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Add\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Add\", RuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_166_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[1]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[2]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[3]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[4]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[5]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[6]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[7]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[8]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[9]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[10]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[11]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","id":70543,"modified_method":"public void testAddDataDefinition() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_167_manageDDMStructuresLink']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Manage Data Definitions\"),\n\t\t\tselenium.getText(\"//a[@id='_167_manageDDMStructuresLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_167_manageDDMStructuresLink']\",\n\t\t\tRuntimeVariables.replace(\"Manage Data Definitions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/search_container.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//span[@class='lfr-toolbar-button add-button ']/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//span[@class='lfr-toolbar-button add-button ']/a\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/translation_manager.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_166_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[1]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[2]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[3]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[4]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[5]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[6]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[7]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[8]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[9]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[10]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.dragAndDropToObject(\"//div[@class='aui-tabview-content aui-widget-bd']/div/ul/li[11]/div\",\n\t\t\t\"//div[@class='aui-tabview-content aui-widget-bd']\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddListDDLD() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"link=Dynamic Data List Display Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"//img[@title='Add List']\",\n\t\t\tRuntimeVariables.replace(\"Add List\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_167_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.type(\"//textarea[@id='_167_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Description\"));\n\t\tselenium.clickAt(\"link=Select\", RuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_166_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_166_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isPartialText(\"//tr[3]/td[2]/a\", \"Data Definition\"));\n\t\tselenium.clickAt(\"//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"List Name\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']\"));\n\t}","id":70544,"modified_method":"public void testAddListDDLD() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"//img[@title='Add List']\",\n\t\t\tRuntimeVariables.replace(\"Add List\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_167_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.type(\"//textarea[@id='_167_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Description\"));\n\t\tselenium.clickAt(\"link=Select\", RuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/navigation_interaction.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_166_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_166_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//tr[contains(.,'Data Definition')]/td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Data Definition\"),\n\t\t\tselenium.getText(\"//tr[contains(.,'Data Definition')]/td[3]/a\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//tr[contains(.,'Data Definition')]/td[4]/a\"));\n\t\tselenium.clickAt(\"//tr[contains(.,'Data Definition')]/td[3]/a\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tassertEquals(RuntimeVariables.replace(\"Data Definition\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//span[contains(@id,'ddmStructureNameDisplay')]/a\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"List Name\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']\"));\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddList() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Add\", RuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_167_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.type(\"//textarea[@id='_167_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Description\"));\n\t\tselenium.clickAt(\"link=Select\", RuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_166_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_166_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Data Definition\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]/a\"));\n\t\tselenium.clickAt(\"//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","id":70545,"modified_method":"public void testAddList() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Add\", RuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_167_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.type(\"//textarea[@id='_167_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Description\"));\n\t\tselenium.clickAt(\"link=Select\", RuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/search_container.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_166_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_166_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//tr[contains(.,'Data Definition')]/td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Data Definition\"),\n\t\t\tselenium.getText(\"//tr[contains(.,'Data Definition')]/td[3]/a\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//tr[contains(.,'Data Definition')]/td[4]/a\"));\n\t\tselenium.clickAt(\"//tr[contains(.,'Data Definition')]/td[3]/a\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tassertEquals(RuntimeVariables.replace(\"Data Definition\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//span[contains(@id,'ddmStructureNameDisplay')]/a\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddList() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Add\", RuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_167_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.type(\"//textarea[@id='_167_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Description\"));\n\t\tselenium.clickAt(\"link=Select\", RuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_166_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_166_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Data Definition\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]/a\"));\n\t\tselenium.clickAt(\"//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","id":70546,"modified_method":"public void testAddList() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=Add\", RuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_167_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.type(\"//textarea[@id='_167_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Description\"));\n\t\tselenium.clickAt(\"link=Select\", RuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/search_container.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_166_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_166_keywords']\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//tr[contains(.,'Data Definition')]/td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Data Definition\"),\n\t\t\tselenium.getText(\"//tr[contains(.,'Data Definition')]/td[3]/a\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//tr[contains(.,'Data Definition')]/td[4]/a\"));\n\t\tselenium.clickAt(\"//tr[contains(.,'Data Definition')]/td[3]/a\",\n\t\t\tRuntimeVariables.replace(\"Data Definition\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tassertEquals(RuntimeVariables.replace(\"Data Definition\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//span[contains(@id,'ddmStructureNameDisplay')]/a\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEditListDDLD() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"link=Dynamic Data List Display Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"//img[@title='Select List']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_86_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_86_keywords']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"List Name\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"List Description\"),\n\t\t\tselenium.getText(\"//tr[3]/td[3]\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Edit\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_167_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Name Edited\"));\n\t\tselenium.type(\"//textarea[@id='_167_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Description Edited\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Displaying List: List Name Edited\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']/span[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"List Name Edited\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"List Description Edited\"),\n\t\t\tselenium.getText(\"//tr[3]/td[3]\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","id":70547,"modified_method":"public void testEditListDDLD() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"//img[@title='Select List']\",\n\t\t\tRuntimeVariables.replace(\"Select List\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/navigation_interaction.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_86_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_86_keywords']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"List Name\"),\n\t\t\tselenium.getText(\"//tr[contains(.,'List Name')]/td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"List Description\"),\n\t\t\tselenium.getText(\"//tr[contains(.,'List Name')]/td[3]/a\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit')]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Edit\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit')]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Edit')]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.type(\"//input[@id='_167_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Name Edited\"));\n\t\tselenium.type(\"//textarea[@id='_167_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"List Description Edited\"));\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Displaying List: List Name Edited\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']/span[2]\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//tr[contains(.,'List Name Edited')]/td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"List Name Edited\"),\n\t\t\tselenium.getText(\"//tr[contains(.,'List Name Edited')]/td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"List Description Edited\"),\n\t\t\tselenium.getText(\"//tr[contains(.,'List Name Edited')]/td[3]/a\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//tr[contains(.,'List Name Edited')]/td[4]/a\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSelectListDDLD() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"link=Dynamic Data List Display Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"//img[@title='Select List']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_86_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_86_keywords']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=List Name\", RuntimeVariables.replace(\"List Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"Displaying List: List Name (Modified)\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//span[@class='displaying-record-set-id-holder']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","id":70548,"modified_method":"public void testSelectListDDLD() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"//img[@title='Select List']\",\n\t\t\tRuntimeVariables.replace(\"Select List\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/navigation_interaction.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_86_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_86_keywords']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=List Name\", RuntimeVariables.replace(\"List Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"Displaying List: List Name (Modified)\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//span[@class='displaying-record-set-id-holder']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSelectListDDLD() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"link=Dynamic Data List Display Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"//img[@title='Select List']\",\n\t\t\tRuntimeVariables.replace(\"\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_86_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_86_keywords']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=List Name\", RuntimeVariables.replace(\"List Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"Displaying List: List Name (Modified)\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//span[@class='displaying-record-set-id-holder']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","id":70549,"modified_method":"public void testSelectListDDLD() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"//img[@title='Select List']\",\n\t\t\tRuntimeVariables.replace(\"Select List\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/navigation_interaction.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='_86_keywords']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@name='_86_keywords']\",\n\t\t\tRuntimeVariables.replace(\"List Name\"));\n\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.clickAt(\"link=List Name\", RuntimeVariables.replace(\"List Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"Displaying List: List Name (Modified)\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//span[@class='displaying-record-set-id-holder']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDataDefinition() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//a[@id='_167_manageDDMStructuresLink']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Manage Data Definitions\"),\n\t\t\t\t\tselenium.getText(\"//a[@id='_167_manageDDMStructuresLink']\"));\n\t\t\t\tselenium.clickAt(\"//a[@id='_167_manageDDMStructuresLink']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Manage Data Definitions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.selectFrame(\"//iframe\");\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible1 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible1) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible2 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible2) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible3 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible3) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible4 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible4) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible5 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible5) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":70550,"modified_method":"public void testTearDownDataDefinition() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\t\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//a[@id='_167_manageDDMStructuresLink']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Manage Data Definitions\"),\n\t\t\t\t\tselenium.getText(\"//a[@id='_167_manageDDMStructuresLink']\"));\n\t\t\t\tselenium.clickAt(\"//a[@id='_167_manageDDMStructuresLink']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Manage Data Definitions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.selectFrame(\"//iframe\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/search_container.js')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"//input[@name='_166_keywords']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.type(\"//input[@name='_166_keywords']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Data\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Search']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Search\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible1 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible1) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible2 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible2) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible3 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible3) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible4 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible4) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\t\t\t\tThread.sleep(5000);\n\n\t\t\t\tboolean actionsVisible5 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible5) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownList() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean actionsVisible1 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible1) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean actionsVisible2 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible2) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean actionsVisible3 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible3) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean actionsVisible4 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible4) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean actionsVisible5 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible5) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[6]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":70551,"modified_method":"public void testTearDownList() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\t\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"link=Dynamic Data Lists\",\n\t\t\t\t\tRuntimeVariables.replace(\"Dynamic Data Lists\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean actionsVisible1 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible1) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\t\tboolean actionsVisible2 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible2) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\t\tboolean actionsVisible3 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible3) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\t\tboolean actionsVisible4 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible4) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\n\t\t\t\tboolean actionsVisible5 = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!actionsVisible5) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S] It will be deleted immediately.$\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"No entries were found.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testViewEditListDDLD() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"link=Dynamic Data List Display Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"List Name Edited\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']\"));\n\t}","id":70552,"modified_method":"public void testViewEditListDDLD() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"List Name Edited\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"No records were found.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testViewSelectListDDLD() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"link=Dynamic Data List Display Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"List Name\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']\"));\n\t}","id":70553,"modified_method":"public void testViewSelectListDDLD() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tselenium.clickAt(\"link=Dynamic Data List Display Test Page\",\n\t\t\tRuntimeVariables.replace(\"Dynamic Data List Display Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"List Name\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"No records were found.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t}","commit_id":"13ba15bfc3e4b4080c70f58fff55038eccb1f0a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPageKaleoForms() throws Exception {\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//nav[@id='navigation']\",\n\t\t\tRuntimeVariables.replace(\"Navigation\"));\n\t\tselenium.clickAt(\"link=Add\", RuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//a[@id='addPage']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//a[@id='addPage']\",\n\t\t\tRuntimeVariables.replace(\"Add Page\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@type='text']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@type='text']\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.clickAt(\"//button[@id='save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t}","id":70554,"modified_method":"public void testAddPageKaleoForms() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//li[@id='_145_addContent']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_addContent']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@id='addPage']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Page\"),\n\t\t\tselenium.getText(\"//a[@id='addPage']\"));\n\t\tselenium.clickAt(\"//a[@id='addPage']\", RuntimeVariables.replace(\"Page\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@type='text']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@type='text']\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.clickAt(\"//button[@id='save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPortletKaleoForms() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_145_addApplication']\",\n\t\t\t\t\"More\"));\n\t\tselenium.clickAt(\"//a[@id='_145_addApplication']\",\n\t\t\tRuntimeVariables.replace(\"More\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"//div[@title='Kaleo Forms']/p/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//div[@title='Kaleo Forms']/p/a\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//section\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertTrue(selenium.isVisible(\"//section\"));\n\t}","id":70555,"modified_method":"public void testAddPortletKaleoForms() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//div[@id='dockbar']\",\n\t\t\tRuntimeVariables.replace(\"Dockbar\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-editable/aui-editable-min.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//li[@id='_145_addContent']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_addContent']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@id='_145_addApplication']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertTrue(selenium.isPartialText(\"//a[@id='_145_addApplication']\",\n\t\t\t\t\"More\"));\n\t\tselenium.clickAt(\"//a[@id='_145_addApplication']\",\n\t\t\tRuntimeVariables.replace(\"More\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//script[contains(@src,'/aui/aui-live-search/aui-live-search-min.js')]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//input[@id='layout_configuration_content']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='layout_configuration_content']\",\n\t\t\tRuntimeVariables.replace(\"k\"));\n\t\tselenium.keyDown(\"//input[@id='layout_configuration_content']\",\n\t\t\tRuntimeVariables.replace(\"\\\\13\"));\n\t\tselenium.keyUp(\"//input[@id='layout_configuration_content']\",\n\t\t\tRuntimeVariables.replace(\"\\\\13\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@title='Kaleo Forms']/p/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//div[@title='Kaleo Forms']/p/a\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//section\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertTrue(selenium.isVisible(\"//section\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddProcessKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Processes\", RuntimeVariables.replace(\"Processes\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-portlet-toolbar']/span[2]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-portlet-toolbar']/span[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.type(\"//textarea[@id='_1_WAR_kaleoformsportlet_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Select\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMStructure']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMStructure']\",\n\t\t\tRuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//tr[3]/td[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Definition\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]/a\"));\n\t\tselenium.clickAt(\"//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Definition\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMStructureDisplay']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Definition\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMStructureDisplay']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Select\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMTemplate']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMTemplate']\",\n\t\t\tRuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//tr[3]/td[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Creation\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]/a\"));\n\t\tselenium.clickAt(\"//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Creation\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMTemplateDisplay']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Creation\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMTemplateDisplay']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Select\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectWorkflowDefinition']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_selectWorkflowDefinition']\",\n\t\t\tRuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Ticket Process\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Ticket Process\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectWorkflowDefinitionDisplay']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process (Version 1)\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectWorkflowDefinitionDisplay']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Assign\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_assignWorkflowTaskForms']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_assignWorkflowTaskForms']\",\n\t\t\tRuntimeVariables.replace(\"Assign\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@id='diagramNode_field_Developer']/div/div/div\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_Developer']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"Developer\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"Developer View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//li[@data-text='Developer View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Developer View\"),\n\t\t\tselenium.getText(\"//li[@data-text='Developer View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='Developer View']\",\n\t\t\tRuntimeVariables.replace(\"Developer View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Developer View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Developer View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Developer View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_Code_Review']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"Code Review\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"Code Review View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//li[@data-text='Code Review View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Code Review View\"),\n\t\t\tselenium.getText(\"//li[@data-text='Code Review View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='Code Review View']\",\n\t\t\tRuntimeVariables.replace(\"Code Review View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Code Review View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Code Review View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]/div\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Code Review View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]/div\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_QA']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"QA\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"QA View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//li[@data-text='QA View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"QA View\"),\n\t\t\tselenium.getText(\"//li[@data-text='QA View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='QA View']\",\n\t\t\tRuntimeVariables.replace(\"QA View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"QA View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"QA View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"QA View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_QA_Management']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"QA Management\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"QA View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//li[@data-text='QA View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"QA View\"),\n\t\t\tselenium.getText(\"//li[@data-text='QA View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='QA View']\",\n\t\t\tRuntimeVariables.replace(\"QA View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"QA View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"QA View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"QA View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_Project_Manager_Review']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"Project Manager Review\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"Project Manager View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//li[@data-text='Project Manager View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Project Manager View\"),\n\t\t\tselenium.getText(\"//li[@data-text='Project Manager View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='Project Manager View']\",\n\t\t\tRuntimeVariables.replace(\"Project Manager View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Project Manager View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Project Manager View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Project Manager View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//input[@value='Close']\",\n\t\t\tRuntimeVariables.replace(\"Close\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t}","id":70556,"modified_method":"public void testAddProcessKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Processes\", RuntimeVariables.replace(\"Processes\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-portlet-toolbar']/span[2]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-portlet-toolbar']/span[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_name_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.type(\"//textarea[@id='_1_WAR_kaleoformsportlet_description_en_US']\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Select\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMStructure']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMStructure']\",\n\t\t\tRuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//tr[3]/td[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Definition\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]/a\"));\n\t\tselenium.clickAt(\"//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Definition\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMStructureDisplay']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Definition\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMStructureDisplay']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Select\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMTemplate']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMTemplate']\",\n\t\t\tRuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//tr[3]/td[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Creation\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]/a\"));\n\t\tselenium.clickAt(\"//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Creation\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMTemplateDisplay']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Creation\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectDDMTemplateDisplay']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Select\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectWorkflowDefinition']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_selectWorkflowDefinition']\",\n\t\t\tRuntimeVariables.replace(\"Select\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Ticket Process\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Ticket Process\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectWorkflowDefinitionDisplay']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process (Version 1)\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_selectWorkflowDefinitionDisplay']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Assign\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_assignWorkflowTaskForms']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_assignWorkflowTaskForms']\",\n\t\t\tRuntimeVariables.replace(\"Assign\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@id='diagramNode_field_Developer']/div/div/div\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_Developer']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"Developer\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"Developer View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//li[@data-text='Developer View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Developer View\"),\n\t\t\tselenium.getText(\"//li[@data-text='Developer View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='Developer View']\",\n\t\t\tRuntimeVariables.replace(\"Developer View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Developer View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Developer View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Developer View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_Code_Review']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"Code Review\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"Code Review View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//li[@data-text='Code Review View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Code Review View\"),\n\t\t\tselenium.getText(\"//li[@data-text='Code Review View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='Code Review View']\",\n\t\t\tRuntimeVariables.replace(\"Code Review View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Code Review View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Code Review View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]/div\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Code Review View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]/div\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_QA']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"QA\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"QA View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//li[@data-text='QA View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"QA View\"),\n\t\t\tselenium.getText(\"//li[@data-text='QA View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='QA View']\",\n\t\t\tRuntimeVariables.replace(\"QA View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"QA View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"QA View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"QA View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_QA_Management']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"QA Management\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"QA View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//li[@data-text='QA View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"QA View\"),\n\t\t\tselenium.getText(\"//li[@data-text='QA View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='QA View']\",\n\t\t\tRuntimeVariables.replace(\"QA View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"QA View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"QA View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"QA View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//div[@id='diagramNode_field_Project_Manager_Review']/div/div/div\",\n\t\t\tRuntimeVariables.replace(\"Project Manager Review\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.doubleClickAt(\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\",\n\t\t\tRuntimeVariables.replace(\"Forms\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@name='templateName']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@name='templateName']\",\n\t\t\tRuntimeVariables.replace(\"Project Manager View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//li[@data-text='Project Manager View']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Project Manager View\"),\n\t\t\tselenium.getText(\"//li[@data-text='Project Manager View']\"));\n\t\tselenium.clickAt(\"//li[@data-text='Project Manager View']\",\n\t\t\tRuntimeVariables.replace(\"Project Manager View\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Project Manager View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getValue(\n\t\t\t\t\t\t\t\t\"//input[@name='templateName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[@type='submit']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Project Manager View\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Project Manager View\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//tbody[@class='yui3-datatable-data']/tr[1]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//input[@value='Close']\",\n\t\t\tRuntimeVariables.replace(\"Close\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testCR_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70557,"modified_method":"public void testCR_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testCR_CompleteFormResolveTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=Resolved\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Pass\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70558,"modified_method":"public void testCR_CompleteFormResolveTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=Resolved\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Pass\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testCR_RollbackTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[3]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Rollback\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[3]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[3]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70559,"modified_method":"public void testCR_RollbackTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[3]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Rollback\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[3]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[3]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testJD_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\",\n\t\t\tRuntimeVariables.replace(\"Assign to Me\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70560,"modified_method":"public void testJD_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\",\n\t\t\tRuntimeVariables.replace(\"Assign to Me\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testJD_CompleteFormInReviewTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_PullRequestURL']\",\n\t\t\tRuntimeVariables.replace(\"https://github.com\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=In Review\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70561,"modified_method":"public void testJD_CompleteFormInReviewTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_PullRequestURL']\",\n\t\t\tRuntimeVariables.replace(\"https://github.com\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=In Review\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testJD_SubmitTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Submit\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70562,"modified_method":"public void testJD_SubmitTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Submit\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testKD_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70563,"modified_method":"public void testKD_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testKD_CompleteFormInProgressTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_PullRequestURL']\",\n\t\t\tRuntimeVariables.replace(\"https://github.com\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=In Progress\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70564,"modified_method":"public void testKD_CompleteFormInProgressTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_PullRequestURL']\",\n\t\t\tRuntimeVariables.replace(\"https://github.com\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=In Progress\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\t\ttestSuite.addTestSuite(AddPageKaleoFormsTest.class);\n\t\ttestSuite.addTestSuite(AddPortletKaleoFormsTest.class);\n\t\ttestSuite.addTestSuite(AddUserJavascriptDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AddUserKaleoDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AddUserQAEngineerTest.class);\n\t\ttestSuite.addTestSuite(AddUserQAManagerTest.class);\n\t\ttestSuite.addTestSuite(AddUserProjectManagerTest.class);\n\t\ttestSuite.addTestSuite(AddUserCodeReviewerTest.class);\n\t\ttestSuite.addTestSuite(AddRoleJavascriptDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AddRoleKaleoDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AddRoleQAEngineerTest.class);\n\t\ttestSuite.addTestSuite(AddRoleQAManagerTest.class);\n\t\ttestSuite.addTestSuite(AddRoleProjectManagerTest.class);\n\t\ttestSuite.addTestSuite(AddRoleCodeReviewerTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleJavascriptDeveloperTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleKaleoDeveloperTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleQAEngineerTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleQAManagerTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleProjectManagerTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleCodeReviewerTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleJavascriptDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleKaleoDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleQAEngineerTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleQAManagerTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleProjectManagerTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleCodeReviewerTest.class);\n\t\ttestSuite.addTestSuite(SignInUsersTest.class);\n\t\ttestSuite.addTestSuite(SA_SignInTest.class);\n\t\ttestSuite.addTestSuite(AddDataDefinitionTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldPriorityTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldComponentTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldSummaryTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldAffectsVersionsTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldDescriptionTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldAttachmentsTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldTestedRevisionTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldTestedStatusTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldPullRequestURLTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldStatusTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateTicketCreationTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateDeveloperViewTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateQAViewTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateProjectManagerViewTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateCodeReviewViewTest.class);\n\t\ttestSuite.addTestSuite(AddWorkflowDefinitionTest.class);\n\t\ttestSuite.addTestSuite(AddProcessKFTest.class);\n\t\ttestSuite.addTestSuite(AddTaskKaleoTicketKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(KD_SignInTest.class);\n\t\ttestSuite.addTestSuite(KD_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(KD_CompleteFormInProgressTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(CR_SignInTest.class);\n\t\ttestSuite.addTestSuite(CR_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(CR_CompleteFormResolveTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAE_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAE_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAE_CompleteFormCloseTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAM_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAM_ViewTaskKaleoTicketClosedKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(PM_SignInTest.class);\n\t\ttestSuite.addTestSuite(PM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(PM_CompletedTaskKaleoTicketKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(SA_SignInTest.class);\n\t\ttestSuite.addTestSuite(ViewCompletedTaskKaleoTicketKFTest.class);\n\t\ttestSuite.addTestSuite(AddTaskJavascriptTicketKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(JD_SignInTest.class);\n\t\ttestSuite.addTestSuite(JD_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(JD_CompleteFormInReviewTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(CR_SignInTest.class);\n\t\ttestSuite.addTestSuite(CR_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(CR_RollbackTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(JD_SignInTest.class);\n\t\ttestSuite.addTestSuite(JD_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(JD_SubmitTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(CR_SignInTest.class);\n\t\ttestSuite.addTestSuite(CR_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(CR_CompleteFormResolveTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAE_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAE_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAE_CompleteFormFailedTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAM_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAM_ViewTaskJavascriptTicketFailedKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(JD_SignInTest.class);\n\t\ttestSuite.addTestSuite(JD_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(JD_CompleteFormInReviewTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(CR_SignInTest.class);\n\t\ttestSuite.addTestSuite(CR_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(CR_CompleteFormResolveTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAE_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAE_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAE_CompleteFormCloseTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAM_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAM_ViewTaskJavascriptTicketClosedKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(PM_SignInTest.class);\n\t\ttestSuite.addTestSuite(PM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(PM_CompletedTaskJavascriptTicketKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(SA_SignInTest.class);\n\t\ttestSuite.addTestSuite(ViewCompletedTaskJavascriptTicketKFTest.class);\n\n\t\treturn testSuite;\n\t}","id":70565,"modified_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\t\ttestSuite.addTestSuite(AddPageKaleoFormsTest.class);\n\t\ttestSuite.addTestSuite(AddPortletKaleoFormsTest.class);\n\t\ttestSuite.addTestSuite(AddUserJavascriptDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AddUserKaleoDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AddUserQAEngineerTest.class);\n\t\ttestSuite.addTestSuite(AddUserQAManagerTest.class);\n\t\ttestSuite.addTestSuite(AddUserProjectManagerTest.class);\n\t\ttestSuite.addTestSuite(AddUserCodeReviewerTest.class);\n\t\ttestSuite.addTestSuite(AddRoleJavascriptDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AddRoleKaleoDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AddRoleQAEngineerTest.class);\n\t\ttestSuite.addTestSuite(AddRoleQAManagerTest.class);\n\t\ttestSuite.addTestSuite(AddRoleProjectManagerTest.class);\n\t\ttestSuite.addTestSuite(AddRoleCodeReviewerTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleJavascriptDeveloperTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleKaleoDeveloperTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleQAEngineerTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleQAManagerTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleProjectManagerTest.class);\n\t\ttestSuite.addTestSuite(DefineRoleCodeReviewerTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleJavascriptDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleKaleoDeveloperTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleQAEngineerTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleQAManagerTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleProjectManagerTest.class);\n\t\ttestSuite.addTestSuite(AssignRoleCodeReviewerTest.class);\n\t\ttestSuite.addTestSuite(SignInUsersTest.class);\n\t\ttestSuite.addTestSuite(SignInTest.class);\n\t\ttestSuite.addTestSuite(AddDataDefinitionTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldPriorityTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldComponentTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldSummaryTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldAffectsVersionsTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldDescriptionTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldAttachmentsTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldTestedRevisionTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldTestedStatusTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldPullRequestURLTest.class);\n\t\ttestSuite.addTestSuite(EditDataDefinitionFieldStatusTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateTicketCreationTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateDeveloperViewTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateQAViewTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateProjectManagerViewTest.class);\n\t\ttestSuite.addTestSuite(AddTemplateCodeReviewViewTest.class);\n\t\ttestSuite.addTestSuite(AddWorkflowDefinitionTest.class);\n\t\ttestSuite.addTestSuite(AddProcessKFTest.class);\n\t\ttestSuite.addTestSuite(AddTaskKaleoTicketKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(KD_SignInTest.class);\n\t\ttestSuite.addTestSuite(KD_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(KD_CompleteFormInProgressTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(CR_SignInTest.class);\n\t\ttestSuite.addTestSuite(CR_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(CR_CompleteFormResolveTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAE_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAE_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAE_CompleteFormCloseTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAM_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAM_ViewTaskKaleoTicketClosedKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(PM_SignInTest.class);\n\t\ttestSuite.addTestSuite(PM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(PM_CompletedTaskKaleoTicketKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(SignInTest.class);\n\t\ttestSuite.addTestSuite(ViewCompletedTaskKaleoTicketKFTest.class);\n\t\ttestSuite.addTestSuite(AddTaskJavascriptTicketKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(JD_SignInTest.class);\n\t\ttestSuite.addTestSuite(JD_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(JD_CompleteFormInReviewTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(CR_SignInTest.class);\n\t\ttestSuite.addTestSuite(CR_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(CR_RollbackTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(JD_SignInTest.class);\n\t\ttestSuite.addTestSuite(JD_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(JD_SubmitTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(CR_SignInTest.class);\n\t\ttestSuite.addTestSuite(CR_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(CR_CompleteFormResolveTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAE_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAE_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAE_CompleteFormFailedTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAM_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAM_ViewTaskJavascriptTicketFailedKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(JD_SignInTest.class);\n\t\ttestSuite.addTestSuite(JD_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(JD_CompleteFormInReviewTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(CR_SignInTest.class);\n\t\ttestSuite.addTestSuite(CR_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(CR_CompleteFormResolveTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAE_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAE_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAE_CompleteFormCloseTaskKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(QAM_SignInTest.class);\n\t\ttestSuite.addTestSuite(QAM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(QAM_ViewTaskJavascriptTicketClosedKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(PM_SignInTest.class);\n\t\ttestSuite.addTestSuite(PM_AssignToMeTaskKFTest.class);\n\t\ttestSuite.addTestSuite(PM_CompletedTaskJavascriptTicketKFTest.class);\n\t\ttestSuite.addTestSuite(SignOutTest.class);\n\t\ttestSuite.addTestSuite(SignInTest.class);\n\t\ttestSuite.addTestSuite(ViewCompletedTaskJavascriptTicketKFTest.class);\n\n\t\treturn testSuite;\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testPM_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70566,"modified_method":"public void testPM_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testPM_CompletedTaskJavascriptTicketKF()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Critical\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Javascript\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Options field is throwing JavaScript errors\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description Editing the options field throws a JavaScript error in the console\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Passed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status Closed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Completed\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_CompletedtaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_CompletedtaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"Completed\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":70567,"modified_method":"public void testPM_CompletedTaskJavascriptTicketKF()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Critical\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Javascript\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Options field is throwing JavaScript errors\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description Editing the options field throws a JavaScript error in the console\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Passed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status Closed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Completed\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_CompletedtaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_CompletedtaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"Completed\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testPM_CompletedTaskKaleoTicketKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Major\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Kaleo\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Kaleo Designer does not deploy\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description A user is unable to deploy the Kaleo Designer portlet\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Attachments test.txt\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[6]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Passed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status Closed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Completed\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_CompletedtaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_CompletedtaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"Completed\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":70568,"modified_method":"public void testPM_CompletedTaskKaleoTicketKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Major\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Kaleo\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Kaleo Designer does not deploy\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description A user is unable to deploy the Kaleo Designer portlet\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Attachments test.txt\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[6]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Passed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status Closed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Completed\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_CompletedtaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_CompletedtaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"Completed\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testQAE_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70569,"modified_method":"public void testQAE_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testQAE_CompleteFormCloseTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_tested_revision']\",\n\t\t\tRuntimeVariables.replace(\"95200\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_tested_status']\",\n\t\t\tRuntimeVariables.replace(\"label=Passed\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=Closed\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70570,"modified_method":"public void testQAE_CompleteFormCloseTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_tested_revision']\",\n\t\t\tRuntimeVariables.replace(\"95200\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_tested_status']\",\n\t\t\tRuntimeVariables.replace(\"label=Passed\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=Closed\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testQAE_CompleteFormFailedTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_tested_revision']\",\n\t\t\tRuntimeVariables.replace(\"95200\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_tested_status']\",\n\t\t\tRuntimeVariables.replace(\"label=Failed\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=In Progress\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70571,"modified_method":"public void testQAE_CompleteFormFailedTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Complete Form\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//input[@id='_1_WAR_kaleoformsportlet_tested_revision']\",\n\t\t\tRuntimeVariables.replace(\"95200\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_tested_status']\",\n\t\t\tRuntimeVariables.replace(\"label=Failed\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_kaleoformsportlet_status']\",\n\t\t\tRuntimeVariables.replace(\"label=In Progress\"));\n\t\tselenium.clickAt(\"//input[@id='_1_WAR_kaleoformsportlet_saveButton']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']/div[2]/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testQAM_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","id":70572,"modified_method":"public void testQAM_AssignToMeTaskKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Assign to Me\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no tasks.\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyRolesTasksPanel']/div[2]/div[1]\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testQAM_ViewTaskJavascriptTicketClosedKF()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Critical\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Javascript\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Options field is throwing JavaScript errors\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description Editing the options field throws a JavaScript error in the console\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Passed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status Closed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"OK\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":70573,"modified_method":"public void testQAM_ViewTaskJavascriptTicketClosedKF()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Critical\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Javascript\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Options field is throwing JavaScript errors\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description Editing the options field throws a JavaScript error in the console\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Passed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status Closed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"OK\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testQAM_ViewTaskJavascriptTicketFailedKF()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Critical\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Javascript\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Options field is throwing JavaScript errors\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description Editing the options field throws a JavaScript error in the console\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Failed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status In Progress\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"OK\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":70574,"modified_method":"public void testQAM_ViewTaskJavascriptTicketFailedKF()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Critical\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Javascript\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Options field is throwing JavaScript errors\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description Editing the options field throws a JavaScript error in the console\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Failed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status In Progress\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"OK\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testQAM_ViewTaskKaleoTicketClosedKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']/div[2]/div/div/div/table/tbody/tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Major\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Kaleo\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Kaleo Designer does not deploy\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description A user is unable to deploy the Kaleo Designer portlet\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Attachments test.txt\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[6]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Passed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status Closed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"OK\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","id":70575,"modified_method":"public void testQAM_ViewTaskKaleoTicketClosedKF() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Kaleo Forms Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Kaleo Forms Test Page\",\n\t\t\tRuntimeVariables.replace(\"Kaleo Forms Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Ticket Process\"),\n\t\t\tselenium.getText(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]\"));\n\t\tselenium.clickAt(\"//div[@id='workflowMyTasksPanel']//tr[3]/td[2]/a\",\n\t\t\tRuntimeVariables.replace(\"Ticket Process\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Priority Major\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Component Kaleo\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Summary Kaleo Designer does not deploy\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[3]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Affects Version/s 6.1.x\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[4]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Description A user is unable to deploy the Kaleo Designer portlet\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[5]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Attachments test.txt\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[6]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Revision 95200\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[7]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Tested Status Passed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[8]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Pull Request URL https://github.com\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[9]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status Closed\"),\n\t\t\tselenium.getText(\"//div[@class='lfr-panel-content']/div[10]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\"));\n\t\tselenium.clickAt(\"//a[@id='_1_WAR_kaleoformsportlet_oktaskChangeStatusLink']\",\n\t\t\tRuntimeVariables.replace(\"OK\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"OK\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='aui-panel-content aui-dialog-content yui3-widget-stdmod']/div[3]/span/span/button[1]\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t}","commit_id":"76c9870413a00bb03851480b948c6f0065b6314f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n        protected Object doInBackground() throws Exception {\n            //make sure other searchers are not spawned \n            //slight chance if interals are tight or data sets are large\n            //(would still work, but for performance reasons)\n            searcherDone = false;\n            //logger.log(Level.INFO, \"Starting search\");\n\n            progress = ProgressHandleFactory.createHandle(\"Keyword Search\", new Cancellable() {\n\n                @Override\n                public boolean cancel() {\n                    finalRunComplete = true;\n                    return Searcher.this.cancel(true);\n                }\n            });\n\n            progress.start(keywords.size());\n            int numSearched = 0;\n\n            for (Keyword keywordQuery : keywords) {\n                if (this.isCancelled()) {\n                    return null;\n                }\n                final String queryStr = keywordQuery.getQuery();\n                final String listName = keywordToList.get(queryStr);\n\n                //logger.log(Level.INFO, \"Searching: \" + queryStr);\n\n                progress.progress(queryStr, numSearched);\n\n                KeywordSearchQuery del = null;\n\n                boolean isRegex = !keywordQuery.isLiteral();\n                if (!isRegex) {\n                    del = new LuceneQuery(keywordQuery);\n                    del.escape();\n                } else {\n                    del = new TermComponentQuery(keywordQuery);\n                }\n\n                Map<String, List<FsContent>> queryResult = null;\n\n                try {\n                    queryResult = del.performQueryPerTerm();\n                } catch (Exception e) {\n                    logger.log(Level.INFO, \"Error performing query: \" + keywordQuery.getQuery(), e);\n                    continue;\n                }\n\n                //calculate new results but substracting results already obtained in this run\n                Map<Keyword, List<FsContent>> newResults = new HashMap<Keyword, List<FsContent>>();\n\n                for (String termResult : queryResult.keySet()) {\n                    List<FsContent> queryTermResults = queryResult.get(termResult);\n                    Keyword termResultK = new Keyword(termResult, !isRegex);\n                    List<FsContent> curTermResults = currentResults.get(termResultK);\n                    if (curTermResults == null) {\n                        currentResults.put(termResultK, queryTermResults);\n                        newResults.put(termResultK, queryTermResults);\n                    } else {\n                        //some fscontent hits already exist for this keyword\n                        for (FsContent res : queryTermResults) {\n                            if (!curTermResults.contains(res)) {\n                                //add to new results\n                                List<FsContent> newResultsFs = newResults.get(termResultK);\n                                if (newResultsFs == null) {\n                                    newResultsFs = new ArrayList<FsContent>();\n                                    newResults.put(termResultK, newResultsFs);\n                                }\n                                newResultsFs.add(res);\n                                curTermResults.add(res);\n                            }\n                        }\n                    }\n\n                }\n\n\n                if (!newResults.isEmpty()) {\n\n                    //write results to BB\n                    Collection<BlackboardArtifact> newArtifacts = new ArrayList<BlackboardArtifact>(); //new artifacts to report\n                    for (final Keyword hitTerm : newResults.keySet()) {\n                        List<FsContent> fsContentHits = newResults.get(hitTerm);\n                        for (final FsContent hitFile : fsContentHits) {\n                            if (this.isCancelled()) {\n                                return null;\n                            }\n                            KeywordWriteResult written = del.writeToBlackBoard(hitTerm.getQuery(), hitFile, listName);\n                            if (written == null) {\n                                //logger.log(Level.INFO, \"BB artifact for keyword not written: \" + hitTerm.toString());\n                                continue;\n                            }\n\n                            newArtifacts.add(written.getArtifact());\n\n                            //generate a data message for each artifact\n                            StringBuilder subjectSb = new StringBuilder();\n                            StringBuilder detailsSb = new StringBuilder();\n                            //final int hitFiles = newResults.size();\n\n                            if (!keywordQuery.isLiteral()) {\n                                subjectSb.append(\"RegExp hit: \");\n                            } else {\n                                subjectSb.append(\"Keyword hit: \");\n                            }\n                            //subjectSb.append(\"<\");\n                            String uniqueKey = null;\n                            BlackboardAttribute attr = written.getAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD.getTypeID());\n                            if (attr != null) {\n                                final String keyword = attr.getValueString();\n                                subjectSb.append(keyword);\n                                uniqueKey = keyword.toLowerCase();\n                            }\n\n                            //subjectSb.append(\">\");\n                            //String uniqueKey = queryStr;\n\n                            //details\n                            detailsSb.append(\"<table border='0' cellpadding='4' width='280'>\");\n                            //hit\n                            detailsSb.append(\"<tr>\");\n                            detailsSb.append(\"<th>Keyword hit<\/th>\");\n                            detailsSb.append(\"<td>\").append(StringEscapeUtils.escapeHtml(attr.getValueString())).append(\"<\/td>\");\n                            detailsSb.append(\"<\/tr>\");\n\n                            //preview\n                            attr = written.getAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD_PREVIEW.getTypeID());\n                            if (attr != null) {\n                                detailsSb.append(\"<tr>\");\n                                detailsSb.append(\"<th>Preview<\/th>\");\n                                detailsSb.append(\"<td>\").append(StringEscapeUtils.escapeHtml(attr.getValueString())).append(\"<\/td>\");\n                                detailsSb.append(\"<\/tr>\");\n\n                            }\n\n                            //file\n                            detailsSb.append(\"<tr>\");\n                            detailsSb.append(\"<th>File<\/th>\");\n                            detailsSb.append(\"<td>\").append(hitFile.getParentPath()).append(hitFile.getName()).append(\"<\/td>\");\n                            detailsSb.append(\"<\/tr>\");\n\n\n                            //list\n                            attr = written.getAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD_SET.getTypeID());\n                            detailsSb.append(\"<tr>\");\n                            detailsSb.append(\"<th>List<\/th>\");\n                            detailsSb.append(\"<td>\").append(attr.getValueString()).append(\"<\/td>\");\n                            detailsSb.append(\"<\/tr>\");\n\n                            //regex\n                            if (!keywordQuery.isLiteral()) {\n                                attr = written.getAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD_REGEXP.getTypeID());\n                                if (attr != null) {\n                                    detailsSb.append(\"<tr>\");\n                                    detailsSb.append(\"<th>RegEx<\/th>\");\n                                    detailsSb.append(\"<td>\").append(attr.getValueString()).append(\"<\/td>\");\n                                    detailsSb.append(\"<\/tr>\");\n\n                                }\n                            }\n                            detailsSb.append(\"<\/table>\");\n\n                            managerProxy.postMessage(IngestMessage.createDataMessage(++messageID, instance, subjectSb.toString(), detailsSb.toString(), uniqueKey, written.getArtifact()));\n\n                        } //for each term hit\n                    }//for each file hit\n\n                    //update artifact browser\n                    IngestManager.fireServiceDataEvent(new ServiceDataEvent(MODULE_NAME, ARTIFACT_TYPE.TSK_KEYWORD_HIT, newArtifacts));\n                }\n                progress.progress(queryStr, ++numSearched);\n            }\n\n            return null;\n        }","id":70576,"modified_method":"@Override\n        protected Object doInBackground() throws Exception {\n            //make sure other searchers are not spawned \n            //slight chance if interals are tight or data sets are large\n            //(would still work, but for performance reasons)\n            searcherDone = false;\n            //logger.log(Level.INFO, \"Starting search\");\n\n            progress = ProgressHandleFactory.createHandle(\"Keyword Search\", new Cancellable() {\n\n                @Override\n                public boolean cancel() {\n                    finalRunComplete = true;\n                    return Searcher.this.cancel(true);\n                }\n            });\n\n            progress.start(keywords.size());\n            int numSearched = 0;\n\n            for (Keyword keywordQuery : keywords) {\n                if (this.isCancelled()) {\n                    return null;\n                }\n                final String queryStr = keywordQuery.getQuery();\n                final String listName = keywordToList.get(queryStr);\n\n                //logger.log(Level.INFO, \"Searching: \" + queryStr);\n\n                progress.progress(queryStr, numSearched);\n\n                KeywordSearchQuery del = null;\n\n                boolean isRegex = !keywordQuery.isLiteral();\n                if (!isRegex) {\n                    del = new LuceneQuery(keywordQuery);\n                    del.escape();\n                } else {\n                    del = new TermComponentQuery(keywordQuery);\n                }\n\n                Map<String, List<FsContent>> queryResult = null;\n\n                try {\n                    queryResult = del.performQueryPerTerm();\n                } catch (Exception e) {\n                    logger.log(Level.INFO, \"Error performing query: \" + keywordQuery.getQuery(), e);\n                    continue;\n                }\n\n                //calculate new results but substracting results already obtained in this run\n                Map<Keyword, List<FsContent>> newResults = new HashMap<Keyword, List<FsContent>>();\n\n                for (String termResult : queryResult.keySet()) {\n                    List<FsContent> queryTermResults = queryResult.get(termResult);\n                    Keyword termResultK = new Keyword(termResult, !isRegex);\n                    List<FsContent> curTermResults = currentResults.get(termResultK);\n                    if (curTermResults == null) {\n                        currentResults.put(termResultK, queryTermResults);\n                        newResults.put(termResultK, queryTermResults);\n                    } else {\n                        //some fscontent hits already exist for this keyword\n                        for (FsContent res : queryTermResults) {\n                            if (!curTermResults.contains(res)) {\n                                //add to new results\n                                List<FsContent> newResultsFs = newResults.get(termResultK);\n                                if (newResultsFs == null) {\n                                    newResultsFs = new ArrayList<FsContent>();\n                                    newResults.put(termResultK, newResultsFs);\n                                }\n                                newResultsFs.add(res);\n                                curTermResults.add(res);\n                            }\n                        }\n                    }\n\n                }\n\n\n                if (!newResults.isEmpty()) {\n\n                    //write results to BB\n                    Collection<BlackboardArtifact> newArtifacts = new ArrayList<BlackboardArtifact>(); //new artifacts to report\n                    for (final Keyword hitTerm : newResults.keySet()) {\n                        List<FsContent> fsContentHits = newResults.get(hitTerm);\n                        for (final FsContent hitFile : fsContentHits) {\n                            if (this.isCancelled()) {\n                                return null;\n                            }\n                            KeywordWriteResult written = del.writeToBlackBoard(hitTerm.getQuery(), hitFile, listName);\n                            if (written == null) {\n                                //logger.log(Level.INFO, \"BB artifact for keyword not written: \" + hitTerm.toString());\n                                continue;\n                            }\n\n                            newArtifacts.add(written.getArtifact());\n\n                            //generate a data message for each artifact\n                            StringBuilder subjectSb = new StringBuilder();\n                            StringBuilder detailsSb = new StringBuilder();\n                            //final int hitFiles = newResults.size();\n\n                            if (!keywordQuery.isLiteral()) {\n                                subjectSb.append(\"RegExp hit: \");\n                            } else {\n                                subjectSb.append(\"Keyword hit: \");\n                            }\n                            //subjectSb.append(\"<\");\n                            String uniqueKey = null;\n                            BlackboardAttribute attr = written.getAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD.getTypeID());\n                            if (attr != null) {\n                                final String keyword = attr.getValueString();\n                                subjectSb.append(keyword);\n                                uniqueKey = keyword.toLowerCase();\n                            }\n\n                            //subjectSb.append(\">\");\n                            //String uniqueKey = queryStr;\n\n                            //details\n                            detailsSb.append(\"<table border='0' cellpadding='4' width='280'>\");\n                            //hit\n                            detailsSb.append(\"<tr>\");\n                            detailsSb.append(\"<th>Keyword hit<\/th>\");\n                            detailsSb.append(\"<td>\").append(StringEscapeUtils.escapeHtml(attr.getValueString())).append(\"<\/td>\");\n                            detailsSb.append(\"<\/tr>\");\n\n                            //preview\n                            attr = written.getAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD_PREVIEW.getTypeID());\n                            if (attr != null) {\n                                detailsSb.append(\"<tr>\");\n                                detailsSb.append(\"<th>Preview<\/th>\");\n                                detailsSb.append(\"<td>\").append(StringEscapeUtils.escapeHtml(attr.getValueString())).append(\"<\/td>\");\n                                detailsSb.append(\"<\/tr>\");\n\n                            }\n\n                            //file\n                            detailsSb.append(\"<tr>\");\n                            detailsSb.append(\"<th>File<\/th>\");\n                            detailsSb.append(\"<td>\").append(hitFile.getParentPath()).append(hitFile.getName()).append(\"<\/td>\");\n                            detailsSb.append(\"<\/tr>\");\n\n\n                            //list\n                            attr = written.getAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD_SET.getTypeID());\n                            detailsSb.append(\"<tr>\");\n                            detailsSb.append(\"<th>List<\/th>\");\n                            detailsSb.append(\"<td>\").append(attr.getValueString()).append(\"<\/td>\");\n                            detailsSb.append(\"<\/tr>\");\n\n                            //regex\n                            if (!keywordQuery.isLiteral()) {\n                                attr = written.getAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_KEYWORD_REGEXP.getTypeID());\n                                if (attr != null) {\n                                    detailsSb.append(\"<tr>\");\n                                    detailsSb.append(\"<th>RegEx<\/th>\");\n                                    detailsSb.append(\"<td>\").append(attr.getValueString()).append(\"<\/td>\");\n                                    detailsSb.append(\"<\/tr>\");\n\n                                }\n                            }\n                            detailsSb.append(\"<\/table>\");\n\n                            managerProxy.postMessage(IngestMessage.createDataMessage(++messageID, instance, subjectSb.toString(), detailsSb.toString(), uniqueKey, written.getArtifact()));\n\n                        } //for each term hit\n                    }//for each file hit\n\n                    //update artifact browser\n                    if (! newArtifacts.isEmpty())\n                        IngestManager.fireServiceDataEvent(new ServiceDataEvent(MODULE_NAME, ARTIFACT_TYPE.TSK_KEYWORD_HIT, newArtifacts));\n                }\n                progress.progress(queryStr, ++numSearched);\n            }\n\n            return null;\n        }","commit_id":"891047220737e685afe3b696f023d8548c9a01c4","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        protected boolean createKeys(List<KeyValueQuery> toPopulate) {\n            //final String origQuery = queryThing.getName();\n            final KeyValueQuery queryThingQuery = queryThing;\n            final KeywordSearchQuery tcq = queryThingQuery.getQuery();\n\n            if (!tcq.validate()) {\n                //TODO mark the particular query node RED\n                return false;\n            }\n\n            //execute the query and get fscontents matching\n            List<FsContent> fsContents = tcq.performQuery();\n\n\n            String highlightQueryEscaped = null;\n            final boolean literal_query = tcq.isEscaped();\n\n            if (literal_query) {\n                //literal, treat as non-regex, non-term component query\n                highlightQueryEscaped = tcq.getQueryString();\n            } else {\n                //construct a Solr query using aggregated terms to get highlighting\n                //the query is executed later on demand\n                StringBuilder highlightQuery = new StringBuilder();\n                Collection<Term> terms = tcq.getTerms();\n\n                if (terms.size() == 1) {\n                    //simple case, no need to process subqueries and do special escaping\n                    Term term = terms.iterator().next();\n                    highlightQuery.append(term.getTerm());\n                } else {\n                    final int lastTerm = terms.size() - 1;\n                    int curTerm = 0;\n                    for (Term term : terms) {\n                        //escape subqueries, they shouldn't be escaped again later\n                        final String termS = KeywordSearchUtil.escapeLuceneQuery(term.getTerm(), true, false);\n                        if (!termS.contains(\"*\")) {\n                            highlightQuery.append(termS);\n                            if (lastTerm != curTerm) {\n                                highlightQuery.append(\" \"); //acts as OR ||\n                                //force white-space separated index and stored content\n                                //in each term after first. First term taken case by HighlightedMatchesSource\n                                highlightQuery.append(LuceneQuery.HIGHLIGHT_FIELD_REGEX).append(\":\");\n                            }\n                        }\n                        ++curTerm;\n                    }\n                }\n                //String highlightQueryEscaped = KeywordSearchUtil.escapeLuceneQuery(highlightQuery.toString());\n                highlightQueryEscaped = highlightQuery.toString();\n            }\n\n\n            //get listname\n            String listName = \"\";\n            KeywordSearchList list = KeywordSearchListsXML.getCurrent().getListWithKeyword(tcq.getQueryString());\n            if (list != null) {\n                listName = list.getName();\n            }\n            final String theListName = listName;\n\n            int resID = 0;\n            final Collection<BlackboardArtifact> na = new ArrayList<BlackboardArtifact>();\n            final int numFsContents = fsContents.size();\n            int cur = 0;\n            for (final FsContent f : fsContents) {\n                //get unique match result files\n                Map<String, Object> resMap = new LinkedHashMap<String, Object>();\n                AbstractFsContentNode.fillPropertyMap(resMap, f);\n                setCommonProperty(resMap, CommonPropertyTypes.MATCH, f.getName());\n                if (literal_query) {\n                    final String snippet = LuceneQuery.querySnippet(tcq.getEscapedQueryString(), f.getId(), !literal_query);\n                    setCommonProperty(resMap, CommonPropertyTypes.CONTEXT, snippet);\n                }\n                toPopulate.add(new KeyValueQueryContent(f.getName(), resMap, ++resID, f, highlightQueryEscaped, tcq));\n\n                //write to bb\n                final boolean sendDataEvent = (cur == numFsContents - 1 ? true : false); //send a single bulk notification after the last write\n                new Thread() {\n\n                    @Override\n                    public void run() {\n                        Collection<KeywordWriteResult> written = tcq.writeToBlackBoard(f, theListName);\n                        for (KeywordWriteResult w : written) {\n                            na.add(w.getArtifact());\n                        }\n                        if (sendDataEvent == true) {\n                            IngestManager.fireServiceDataEvent(new ServiceDataEvent(KeywordSearchIngestService.MODULE_NAME, ARTIFACT_TYPE.TSK_KEYWORD_HIT, na));\n                        }\n                    }\n                }.start();\n                cur++;\n            }\n\n            return true;\n        }","id":70577,"modified_method":"@Override\n        protected boolean createKeys(List<KeyValueQuery> toPopulate) {\n            //final String origQuery = queryThing.getName();\n            final KeyValueQuery queryThingQuery = queryThing;\n            final KeywordSearchQuery tcq = queryThingQuery.getQuery();\n\n            if (!tcq.validate()) {\n                //TODO mark the particular query node RED\n                return false;\n            }\n\n            //execute the query and get fscontents matching\n            List<FsContent> fsContents = tcq.performQuery();\n\n\n            String highlightQueryEscaped = null;\n            final boolean literal_query = tcq.isEscaped();\n\n            if (literal_query) {\n                //literal, treat as non-regex, non-term component query\n                highlightQueryEscaped = tcq.getQueryString();\n            } else {\n                //construct a Solr query using aggregated terms to get highlighting\n                //the query is executed later on demand\n                StringBuilder highlightQuery = new StringBuilder();\n                Collection<Term> terms = tcq.getTerms();\n\n                if (terms.size() == 1) {\n                    //simple case, no need to process subqueries and do special escaping\n                    Term term = terms.iterator().next();\n                    highlightQuery.append(term.getTerm());\n                } else {\n                    final int lastTerm = terms.size() - 1;\n                    int curTerm = 0;\n                    for (Term term : terms) {\n                        //escape subqueries, they shouldn't be escaped again later\n                        final String termS = KeywordSearchUtil.escapeLuceneQuery(term.getTerm(), true, false);\n                        if (!termS.contains(\"*\")) {\n                            highlightQuery.append(termS);\n                            if (lastTerm != curTerm) {\n                                highlightQuery.append(\" \"); //acts as OR ||\n                                //force white-space separated index and stored content\n                                //in each term after first. First term taken case by HighlightedMatchesSource\n                                highlightQuery.append(LuceneQuery.HIGHLIGHT_FIELD_REGEX).append(\":\");\n                            }\n                        }\n                        ++curTerm;\n                    }\n                }\n                //String highlightQueryEscaped = KeywordSearchUtil.escapeLuceneQuery(highlightQuery.toString());\n                highlightQueryEscaped = highlightQuery.toString();\n            }\n\n\n            //get listname\n            String listName = \"\";\n            KeywordSearchList list = KeywordSearchListsXML.getCurrent().getListWithKeyword(tcq.getQueryString());\n            if (list != null) {\n                listName = list.getName();\n            }\n            final String theListName = listName;\n\n            int resID = 0;\n            final Collection<BlackboardArtifact> na = new ArrayList<BlackboardArtifact>();\n            final int numFsContents = fsContents.size();\n            int cur = 0;\n            for (final FsContent f : fsContents) {\n                //get unique match result files\n                Map<String, Object> resMap = new LinkedHashMap<String, Object>();\n                AbstractFsContentNode.fillPropertyMap(resMap, f);\n                setCommonProperty(resMap, CommonPropertyTypes.MATCH, f.getName());\n                if (literal_query) {\n                    final String snippet = LuceneQuery.querySnippet(tcq.getEscapedQueryString(), f.getId(), !literal_query);\n                    setCommonProperty(resMap, CommonPropertyTypes.CONTEXT, snippet);\n                }\n                toPopulate.add(new KeyValueQueryContent(f.getName(), resMap, ++resID, f, highlightQueryEscaped, tcq));\n\n                //write to bb\n                final boolean sendDataEvent = (cur == numFsContents - 1 ? true : false); //send a single bulk notification after the last write\n                new Thread() {\n\n                    @Override\n                    public void run() {\n                        Collection<KeywordWriteResult> written = tcq.writeToBlackBoard(f, theListName);\n                        for (KeywordWriteResult w : written) {\n                            na.add(w.getArtifact());\n                        }\n                        if (sendDataEvent == true && ! na.isEmpty()) {\n                            IngestManager.fireServiceDataEvent(new ServiceDataEvent(KeywordSearchIngestService.MODULE_NAME, ARTIFACT_TYPE.TSK_KEYWORD_HIT, na));\n                        }\n                    }\n                }.start();\n                cur++;\n            }\n\n            return true;\n        }","commit_id":"891047220737e685afe3b696f023d8548c9a01c4","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n            protected boolean createKeys(List<KeyValueQuery> toPopulate) {\n                //use Lucene query to get files with regular expression match result\n                final String keywordQuery = thing.getName();\n                LuceneQuery filesQuery = new LuceneQuery(keywordQuery);\n                filesQuery.escape();\n                List<FsContent> matches = filesQuery.performQuery();\n\n                //get unique match result files\n                Set<FsContent> uniqueMatches = new LinkedHashSet<FsContent>();\n                uniqueMatches.addAll(matches);\n\n                int resID = 0;\n                int cur = 0;\n                final KeywordSearchQuery origQuery = thing.getQuery();\n                final int numFsContents = uniqueMatches.size();\n                final Collection<BlackboardArtifact> na = new ArrayList<BlackboardArtifact>();\n                for (final FsContent f : uniqueMatches) {\n                    Map<String, Object> resMap = new LinkedHashMap<String, Object>();\n                    AbstractFsContentNode.fillPropertyMap(resMap, (File) f);\n                    toPopulate.add(new KeyValueQueryContent(f.getName(), resMap, ++resID, f, keywordQuery, thing.getQuery()));\n\n                    //write to bb\n                    final boolean sendDataEvent = (cur == numFsContents - 1 ? true : false); //send a single bulk notification after the last write\n                    new Thread() {\n\n                        @Override\n                        public void run() {\n                            Collection<KeywordWriteResult> written = origQuery.writeToBlackBoard(f, \"\");\n                            for (KeywordWriteResult w : written) {\n                                na.add(w.getArtifact());\n                            }\n                            if (sendDataEvent == true) {\n                                IngestManager.fireServiceDataEvent(new ServiceDataEvent(KeywordSearchIngestService.MODULE_NAME, ARTIFACT_TYPE.TSK_KEYWORD_HIT, na));\n                            }\n                        }\n                    }.start();\n                    cur++;\n                }\n\n                return true;\n            }","id":70578,"modified_method":"@Override\n            protected boolean createKeys(List<KeyValueQuery> toPopulate) {\n                //use Lucene query to get files with regular expression match result\n                final String keywordQuery = thing.getName();\n                LuceneQuery filesQuery = new LuceneQuery(keywordQuery);\n                filesQuery.escape();\n                List<FsContent> matches = filesQuery.performQuery();\n\n                //get unique match result files\n                Set<FsContent> uniqueMatches = new LinkedHashSet<FsContent>();\n                uniqueMatches.addAll(matches);\n\n                int resID = 0;\n                int cur = 0;\n                final KeywordSearchQuery origQuery = thing.getQuery();\n                final int numFsContents = uniqueMatches.size();\n                final Collection<BlackboardArtifact> na = new ArrayList<BlackboardArtifact>();\n                for (final FsContent f : uniqueMatches) {\n                    Map<String, Object> resMap = new LinkedHashMap<String, Object>();\n                    AbstractFsContentNode.fillPropertyMap(resMap, (File) f);\n                    toPopulate.add(new KeyValueQueryContent(f.getName(), resMap, ++resID, f, keywordQuery, thing.getQuery()));\n\n                    //write to bb\n                    final boolean sendDataEvent = (cur == numFsContents - 1 ? true : false); //send a single bulk notification after the last write\n                    new Thread() {\n\n                        @Override\n                        public void run() {\n                            Collection<KeywordWriteResult> written = origQuery.writeToBlackBoard(f, \"\");\n                            for (KeywordWriteResult w : written) {\n                                na.add(w.getArtifact());\n                            }\n                            if (sendDataEvent == true && ! na.isEmpty() ) {\n                                IngestManager.fireServiceDataEvent(new ServiceDataEvent(KeywordSearchIngestService.MODULE_NAME, ARTIFACT_TYPE.TSK_KEYWORD_HIT, na));\n                            }\n                        }\n                    }.start();\n                    cur++;\n                }\n\n                return true;\n            }","commit_id":"891047220737e685afe3b696f023d8548c9a01c4","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public void execute() {\n        escape();\n        final List<FsContent> matches = performQuery();\n\n        String pathText = \"Keyword query: \" + query;\n\n        if (matches.isEmpty()) {\n            KeywordSearchUtil.displayDialog(\"Keyword Search\", \"No results for keyword: \" + query, KeywordSearchUtil.DIALOG_MESSAGE_TYPE.INFO);\n            return;\n        }\n\n        //get listname\n        String listName = \"\";\n        //KeywordSearchList list = KeywordSearchListsXML.getCurrent().getListWithKeyword(query);\n        //if (list != null) {\n        //    listName = list.getName();\n        //}\n        final String theListName = listName;\n\n        Node rootNode = new KeywordSearchNode(matches, queryEscaped);\n        Node filteredRootNode = new TableFilterNode(rootNode, true);\n\n        TopComponent searchResultWin = DataResultTopComponent.createInstance(\"Keyword search\", pathText, filteredRootNode, matches.size());\n        searchResultWin.requestActive(); // make it the active top component\n\n        //write to bb\n        new Thread() {\n\n            @Override\n            public void run() {\n                Collection<BlackboardArtifact> na = new ArrayList<BlackboardArtifact>();\n                for (FsContent newHit : matches) {\n                    Collection<KeywordWriteResult> written = writeToBlackBoard(newHit, theListName);\n                    for (KeywordWriteResult w : written) {\n                        na.add(w.getArtifact());\n                    }\n                }\n                //notify bb viewers\n                IngestManager.fireServiceDataEvent(new ServiceDataEvent(KeywordSearchIngestService.MODULE_NAME, ARTIFACT_TYPE.TSK_KEYWORD_HIT, na));\n            }\n        }.start();\n    }","id":70579,"modified_method":"@Override\n    public void execute() {\n        escape();\n        final List<FsContent> matches = performQuery();\n\n        String pathText = \"Keyword query: \" + query;\n\n        if (matches.isEmpty()) {\n            KeywordSearchUtil.displayDialog(\"Keyword Search\", \"No results for keyword: \" + query, KeywordSearchUtil.DIALOG_MESSAGE_TYPE.INFO);\n            return;\n        }\n\n        //get listname\n        String listName = \"\";\n        //KeywordSearchList list = KeywordSearchListsXML.getCurrent().getListWithKeyword(query);\n        //if (list != null) {\n        //    listName = list.getName();\n        //}\n        final String theListName = listName;\n\n        Node rootNode = new KeywordSearchNode(matches, queryEscaped);\n        Node filteredRootNode = new TableFilterNode(rootNode, true);\n\n        TopComponent searchResultWin = DataResultTopComponent.createInstance(\"Keyword search\", pathText, filteredRootNode, matches.size());\n        searchResultWin.requestActive(); // make it the active top component\n\n        //write to bb\n        new Thread() {\n\n            @Override\n            public void run() {\n                Collection<BlackboardArtifact> na = new ArrayList<BlackboardArtifact>();\n                for (FsContent newHit : matches) {\n                    Collection<KeywordWriteResult> written = writeToBlackBoard(newHit, theListName);\n                    for (KeywordWriteResult w : written) {\n                        na.add(w.getArtifact());\n                    }\n                }\n                //notify bb viewers\n                if (! na.isEmpty())\n                    IngestManager.fireServiceDataEvent(new ServiceDataEvent(KeywordSearchIngestService.MODULE_NAME, ARTIFACT_TYPE.TSK_KEYWORD_HIT, na));\n            }\n        }.start();\n    }","commit_id":"891047220737e685afe3b696f023d8548c9a01c4","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public KeywordWriteResult writeToBlackBoard(String termHit, FsContent newFsHit, String listName) {\n        final String MODULE_NAME = KeywordSearchIngestService.MODULE_NAME;\n\n        KeywordWriteResult writeResult = null;\n        Collection<BlackboardAttribute> attributes = new ArrayList<BlackboardAttribute>();\n        BlackboardArtifact bba = null;\n        try {\n            bba = newFsHit.newArtifact(ARTIFACT_TYPE.TSK_KEYWORD_HIT);\n            writeResult = new KeywordWriteResult(bba);\n        } catch (Exception e) {\n            logger.log(Level.INFO, \"Error adding bb artifact for keyword hit\", e);\n            return null;\n        }\n\n        String snippet = null;\n        try {\n            snippet = LuceneQuery.querySnippet(queryEscaped, newFsHit.getId(), false);\n        } catch (Exception e) {\n            logger.log(Level.INFO, \"Error querying snippet: \" + query, e);\n        }\n        if (snippet != null) {\n            attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_KEYWORD_PREVIEW.getTypeID(), MODULE_NAME, \"\", KeywordSearchUtil.escapeForBlackBoard(snippet)));\n        }\n        //keyword\n        attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_KEYWORD.getTypeID(), MODULE_NAME, \"\", termHit));\n        //list\n        if (listName == null) {\n            listName = \"\";\n        }\n        attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_KEYWORD_SET.getTypeID(), MODULE_NAME, \"\", listName));\n        //bogus - workaround the dir tree table issue\n        //attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_KEYWORD_REGEXP.getTypeID(), MODULE_NAME, \"\", \"\"));\n\n        //selector\n        if (keywordQuery != null) {\n            BlackboardAttribute.ATTRIBUTE_TYPE selType = keywordQuery.getType();\n            if (selType != null) {\n                attributes.add(new BlackboardAttribute(selType.getTypeID(), MODULE_NAME, \"\", termHit));\n            }\n        }\n\n        try {\n            bba.addAttributes(attributes); //write out to bb\n            writeResult.add(attributes);\n            return writeResult;\n        } catch (TskException e) {\n            logger.log(Level.INFO, \"Error adding bb attributes to artifact\", e);\n        }\n        return null;\n    }","id":70580,"modified_method":"@Override\n    public KeywordWriteResult writeToBlackBoard(String termHit, FsContent newFsHit, String listName) {\n        final String MODULE_NAME = KeywordSearchIngestService.MODULE_NAME;\n\n        KeywordWriteResult writeResult = null;\n        Collection<BlackboardAttribute> attributes = new ArrayList<BlackboardAttribute>();\n        BlackboardArtifact bba = null;\n        try {\n            bba = newFsHit.newArtifact(ARTIFACT_TYPE.TSK_KEYWORD_HIT);\n            writeResult = new KeywordWriteResult(bba);\n        } catch (Exception e) {\n            logger.log(Level.INFO, \"Error adding bb artifact for keyword hit\", e);\n            return null;\n        }\n\n        String snippet = null;\n        try {\n            snippet = LuceneQuery.querySnippet(queryEscaped, newFsHit.getId(), false);\n        } catch (Exception e) {\n            logger.log(Level.INFO, \"Error querying snippet: \" + query, e);\n            return null;\n        }\n        if (snippet != null) {\n            attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_KEYWORD_PREVIEW.getTypeID(), MODULE_NAME, \"\", KeywordSearchUtil.escapeForBlackBoard(snippet)));\n        }\n        //keyword\n        attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_KEYWORD.getTypeID(), MODULE_NAME, \"\", termHit));\n        //list\n        if (listName == null) {\n            listName = \"\";\n        }\n        attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_KEYWORD_SET.getTypeID(), MODULE_NAME, \"\", listName));\n        //bogus - workaround the dir tree table issue\n        //attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_KEYWORD_REGEXP.getTypeID(), MODULE_NAME, \"\", \"\"));\n\n        //selector\n        if (keywordQuery != null) {\n            BlackboardAttribute.ATTRIBUTE_TYPE selType = keywordQuery.getType();\n            if (selType != null) {\n                attributes.add(new BlackboardAttribute(selType.getTypeID(), MODULE_NAME, \"\", termHit));\n            }\n        }\n\n        try {\n            bba.addAttributes(attributes); //write out to bb\n            writeResult.add(attributes);\n            return writeResult;\n        } catch (TskException e) {\n            logger.log(Level.INFO, \"Error adding bb attributes to artifact\", e);\n        }\n        return null;\n    }","commit_id":"891047220737e685afe3b696f023d8548c9a01c4","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public void getchdb(List<String> image, IngestImageWorkerController controller) {\n\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            List<FsContent> FFSqlitedb = null;\n            Map<String, Object> kvs = new LinkedHashMap<String, Object>();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'History' and name NOT LIKE '%journal%' AND parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                ChromeCount = FFSqlitedb.size();\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to write to disk.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(chquery);\n\n                    while (temprs.next()) {\n                        try {\n                            String domain = Util.extractDomain(temprs.getString(\"url\"));\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_HISTORY);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"url\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Accessed\", (temprs.getLong(\"last_visit_time\") / 10000)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_REFERRER.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"from_visit\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"title\") != null) ? temprs.getString(\"title\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to insert BB artifact.{0}\", ex);\n                        }\n\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n\n                j++;\n                dbFile.delete();\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n\n        //COOKIES section\n        // This gets the cookie info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE '%Cookies%' and name NOT LIKE '%journal%' and parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to write IO.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(chcookiequery);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_COOKIE);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            String domain = temprs.getString(\"host_key\");\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"host_key\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Last Visited\", (temprs.getLong(\"last_access_utc\") / 10000)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_VALUE.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"value\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"Title\", ((temprs.getString(\"name\") != null) ? temprs.getString(\"name\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n\n        //BOokmarks section\n        // This gets the bm info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'Bookmarks' and name NOT LIKE '%journal%' and parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to write IO {0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n\n                    final JsonParser parser = new JsonParser();\n                    JsonElement jsonElement = parser.parse(new FileReader(temps));\n                    JsonObject test = jsonElement.getAsJsonObject();\n                    JsonObject whatever = test.get(\"roots\").getAsJsonObject();\n                    JsonObject whatever2 = whatever.get(\"bookmark_bar\").getAsJsonObject();\n                    JsonArray whatever3 = whatever2.getAsJsonArray(\"children\");\n                    for (JsonElement result : whatever3) {\n                        try {\n                            JsonObject address = result.getAsJsonObject();\n                            String url = address.get(\"url\").getAsString();\n                            String name = address.get(\"name\").getAsString();\n                            Long date = address.get(\"date_added\").getAsLong();\n                            String domain = Util.extractDomain(url);\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_BOOKMARK);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", (date / 10000)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", url));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", name));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to insert BB artifact{0}\", ex);\n                        }\n                    }\n\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into the Bookmarks for Chrome.\" + ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n\n        //Downloads section\n        // This gets the downloads info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            List<FsContent> FFSqlitedb = null;\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'History' and name NOT LIKE '%journal%' and  parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(chdownloadquery);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            String domain = Util.extractDomain(temprs.getString(\"url\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", (temprs.getLong(\"start_time\") / 10000)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"url\") != null) ? temprs.getString(\"url\") : \"\")));\n                            //bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\",\"\", ((temprs.getString(\"title\") != null) ? temprs.getString(\"title\").replaceAll(\"'\", \"''\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH.getTypeID(), \"Recent Activity\", \"\", temprs.getString(\"full_path\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH_ID.getTypeID(), \"RecentActivity\", \"\", Util.findID(temprs.getString(\"full_path\"))));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n                    IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD));\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n\n        //Login/Password section\n        // This gets the user info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'signons.sqlite' and name NOT LIKE '%journal%' and parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(chloginquery);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_HISTORY);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"origin_url\") != null) ? temprs.getString(\"origin_url\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USERNAME.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"username_value\") != null) ? temprs.getString(\"username_value\").replaceAll(\"'\", \"''\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"Recent Activity\", \"\", temprs.getString(\"signon_realm\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", Util.extractDomain(((temprs.getString(\"origin_url\") != null) ? temprs.getString(\"origin_url\") : \"\"))));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n    }","id":70581,"modified_method":"public void getchdb(List<String> image, IngestImageWorkerController controller) {\n\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            List<FsContent> FFSqlitedb = null;\n            Map<String, Object> kvs = new LinkedHashMap<String, Object>();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'History' and name NOT LIKE '%journal%' AND parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                ChromeCount = FFSqlitedb.size();\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n            if(FFSqlitedb != null && !FFSqlitedb.isEmpty())\n            {\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to write to disk.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(chquery);\n\n                    while (temprs.next()) {\n                        try {\n                            String domain = Util.extractDomain(temprs.getString(\"url\"));\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_HISTORY);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"url\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Accessed\", (temprs.getLong(\"last_visit_time\") / 10000)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_REFERRER.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"from_visit\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"title\") != null) ? temprs.getString(\"title\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to insert BB artifact.{0}\", ex);\n                        }\n\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n\n                j++;\n                dbFile.delete();\n            }\n           }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n\n        //COOKIES section\n        // This gets the cookie info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE '%Cookies%' and name NOT LIKE '%journal%' and parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n            if(FFSqlitedb != null && !FFSqlitedb.isEmpty())\n            {\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to write IO.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(chcookiequery);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_COOKIE);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            String domain = temprs.getString(\"host_key\");\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"host_key\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Last Visited\", (temprs.getLong(\"last_access_utc\") / 10000)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_VALUE.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"value\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"Title\", ((temprs.getString(\"name\") != null) ? temprs.getString(\"name\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n           }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n\n        //BOokmarks section\n        // This gets the bm info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'Bookmarks' and name NOT LIKE '%journal%' and parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n            if(FFSqlitedb != null && !FFSqlitedb.isEmpty())\n            {\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to write IO {0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n\n                    final JsonParser parser = new JsonParser();\n                    JsonElement jsonElement = parser.parse(new FileReader(temps));\n                    JsonObject test = jsonElement.getAsJsonObject();\n                    JsonObject whatever = test.get(\"roots\").getAsJsonObject();\n                    JsonObject whatever2 = whatever.get(\"bookmark_bar\").getAsJsonObject();\n                    JsonArray whatever3 = whatever2.getAsJsonArray(\"children\");\n                    for (JsonElement result : whatever3) {\n                        try {\n                            JsonObject address = result.getAsJsonObject();\n                            String url = address.get(\"url\").getAsString();\n                            String name = address.get(\"name\").getAsString();\n                            Long date = address.get(\"date_added\").getAsLong();\n                            String domain = Util.extractDomain(url);\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_BOOKMARK);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", (date / 10000)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", url));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", name));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to insert BB artifact{0}\", ex);\n                        }\n                    }\n\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into the Bookmarks for Chrome.\" + ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n\n        //Downloads section\n        // This gets the downloads info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            List<FsContent> FFSqlitedb = null;\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'History' and name NOT LIKE '%journal%' and  parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n            if(FFSqlitedb != null && !FFSqlitedb.isEmpty())\n            {\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(chdownloadquery);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            String domain = Util.extractDomain(temprs.getString(\"url\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", (temprs.getLong(\"start_time\") / 10000)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"url\") != null) ? temprs.getString(\"url\") : \"\")));\n                            //bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\",\"\", ((temprs.getString(\"title\") != null) ? temprs.getString(\"title\").replaceAll(\"'\", \"''\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH.getTypeID(), \"Recent Activity\", \"\", temprs.getString(\"full_path\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH_ID.getTypeID(), \"RecentActivity\", \"\", Util.findID(temprs.getString(\"full_path\"))));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n                    IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD));\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n           }\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n\n        //Login/Password section\n        // This gets the user info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'signons.sqlite' and name NOT LIKE '%journal%' and parent_path LIKE '%Chrome%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n            if(FFSqlitedb != null && !FFSqlitedb.isEmpty())\n            {\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(chloginquery);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_HISTORY);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"origin_url\") != null) ? temprs.getString(\"origin_url\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USERNAME.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"username_value\") != null) ? temprs.getString(\"username_value\").replaceAll(\"'\", \"''\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"Recent Activity\", \"\", temprs.getString(\"signon_realm\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", Util.extractDomain(((temprs.getString(\"origin_url\") != null) ? temprs.getString(\"origin_url\") : \"\"))));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Chrome\"));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n           }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Chrome SQLite db.\", ex);\n        }\n\n    }","commit_id":"c5e71bb14ed0c0dff6c33f1ea8e6d4fd00d5e0d5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public ExtractIE(List<String> image, IngestImageWorkerController controller) {\n        init(image, controller);\n\n        //Favorites section\n        // This gets the favorite info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FavoriteList = null;\n            try {\n                ResultSet rs = tempDb.runQuery(favoriteQuery + allFS);\n                FavoriteList = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            for (FsContent Favorite : FavoriteList) {\n                if (controller.isCancelled()) {\n                    break;\n                }\n                Content fav = Favorite;\n                byte[] t = new byte[(int) fav.getSize()];\n                final int bytesRead = fav.read(t, 0, fav.getSize());\n                String bookmarkString = new String(t);\n                String re1 = \".*?\";\t// Non-greedy match on filler\n                String re2 = \"((?:http|https)(?::\\\\/{2}[\\\\w]+)(?:[\\\\/|\\\\.]?)(?:[^\\\\s\\\"]*))\";\t// HTTP URL 1\n                String url = \"\";\n                Pattern p = Pattern.compile(re1 + re2, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);\n                Matcher m = p.matcher(bookmarkString);\n                if (m.find()) {\n                    url = m.group(1);\n                }\n                String name = Favorite.getName();\n                Long datetime = Favorite.getCrtime();\n                String domain = Util.extractDomain(url);\n                try {\n                    BlackboardArtifact bbart = Favorite.newArtifact(ARTIFACT_TYPE.TSK_WEB_BOOKMARK);\n                    Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", datetime));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", url));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", name));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Internet Explorer\"));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                    bbart.addAttributes(bbattributes);\n                    IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n\n            }\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to retrieve content from the TSK .\", ex);\n        }\n\n\n        //Cookies section\n        // This gets the cookies info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> CookiesList = null;\n            try {\n                ResultSet rs = tempDb.runQuery(cookiesQuery + allFS);\n                CookiesList = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            for (FsContent Cookie : CookiesList) {\n                if (controller.isCancelled()) {\n                    break;\n                }\n                Content fav = Cookie;\n                byte[] t = new byte[(int) fav.getSize()];\n                final int bytesRead = fav.read(t, 0, fav.getSize());\n                String cookieString = new String(t);\n\n                String[] values = cookieString.split(\"\\n\");\n                String url = values.length > 2 ? values[2] : \"\";\n                String value = values.length > 1 ? values[1] : \"\";\n                String name = values.length > 0 ? values[0] : \"\";\n                Long datetime = Cookie.getCrtime();\n                String domain = Util.extractDomain(url);\n                try {\n                    BlackboardArtifact bbart = Cookie.newArtifact(ARTIFACT_TYPE.TSK_WEB_COOKIE);\n                    Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", url));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Last Visited\", datetime));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_VALUE.getTypeID(), \"RecentActivity\", \"\", value));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"Title\", (name != null) ? name : \"\"));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Internet Explorer\"));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                    bbart.addAttributes(bbattributes);\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n\n            }\n\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to retrieve content from the TSK .\", ex);\n        }\n\n\n\n        //Recent Documents section\n        // This gets the recent object info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> RecentList = null;\n\n            try {\n                ResultSet rs = tempDb.runQuery(recentQuery + allFS);\n                RecentList = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            for (FsContent Recent : RecentList) {\n                if (controller.isCancelled()) {\n                    break;\n                }\n                Content fav = Recent;\n\n                byte[] t = new byte[(int) fav.getSize()];\n\n                int bytesRead = 0;\n                if (fav.getSize() > 0) {\n                    bytesRead = fav.read(t, 0, fav.getSize()); // read the data\n                }\n\n\n                // set the data on the bottom and show it\n\n                String recentString = new String();\n\n\n                if (bytesRead > 0) {\n                    recentString = DataConversion.getString(t, bytesRead, 4);\n                }\n\n\n                String path = Util.getPath(recentString);\n                String name = Util.getFileName(path);\n                Long datetime = Recent.getCrtime();\n                try {\n                    BlackboardArtifact bbart = Recent.newArtifact(ARTIFACT_TYPE.TSK_RECENT_OBJECT);\n                    Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH.getTypeID(), \"RecentActivity\", \"Last Visited\", path));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", name));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH_ID.getTypeID(), \"RecentActivity\", \"\", Util.findID(path)));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Date Created\", datetime));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Windows Explorer\"));\n                    bbart.addAttributes(bbattributes);\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_RECENT_OBJECT));\n\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to retrieve content from the TSK .\", ex);\n        }\n\n\n\n    }","id":70582,"modified_method":"public ExtractIE(List<String> image, IngestImageWorkerController controller) {\n        init(image, controller);\n\n        //Favorites section\n        // This gets the favorite info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FavoriteList = new ArrayList<FsContent>();\n            try {\n                ResultSet rs = tempDb.runQuery(favoriteQuery + allFS);\n                FavoriteList = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            for (FsContent Favorite : FavoriteList) {\n                if (controller.isCancelled()) {\n                    break;\n                }\n                Content fav = Favorite;\n                byte[] t = new byte[(int) fav.getSize()];\n                final int bytesRead = fav.read(t, 0, fav.getSize());\n                String bookmarkString = new String(t);\n                String re1 = \".*?\";\t// Non-greedy match on filler\n                String re2 = \"((?:http|https)(?::\\\\/{2}[\\\\w]+)(?:[\\\\/|\\\\.]?)(?:[^\\\\s\\\"]*))\";\t// HTTP URL 1\n                String url = \"\";\n                Pattern p = Pattern.compile(re1 + re2, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);\n                Matcher m = p.matcher(bookmarkString);\n                if (m.find()) {\n                    url = m.group(1);\n                }\n                String name = Favorite.getName();\n                Long datetime = Favorite.getCrtime();\n                String domain = Util.extractDomain(url);\n                try {\n                    BlackboardArtifact bbart = Favorite.newArtifact(ARTIFACT_TYPE.TSK_WEB_BOOKMARK);\n                    Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", datetime));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", url));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", name));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Internet Explorer\"));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                    bbart.addAttributes(bbattributes);\n                    IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n\n            }\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to retrieve content from the TSK .\", ex);\n        }\n\n\n        //Cookies section\n        // This gets the cookies info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> CookiesList = new ArrayList<FsContent>();\n            try {\n                ResultSet rs = tempDb.runQuery(cookiesQuery + allFS);\n                CookiesList = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            for (FsContent Cookie : CookiesList) {\n                if (controller.isCancelled()) {\n                    break;\n                }\n                Content fav = Cookie;\n                byte[] t = new byte[(int) fav.getSize()];\n                final int bytesRead = fav.read(t, 0, fav.getSize());\n                String cookieString = new String(t);\n\n                String[] values = cookieString.split(\"\\n\");\n                String url = values.length > 2 ? values[2] : \"\";\n                String value = values.length > 1 ? values[1] : \"\";\n                String name = values.length > 0 ? values[0] : \"\";\n                Long datetime = Cookie.getCrtime();\n                String domain = Util.extractDomain(url);\n                try {\n                    BlackboardArtifact bbart = Cookie.newArtifact(ARTIFACT_TYPE.TSK_WEB_COOKIE);\n                    Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", url));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Last Visited\", datetime));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_VALUE.getTypeID(), \"RecentActivity\", \"\", value));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"Title\", (name != null) ? name : \"\"));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Internet Explorer\"));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", domain));\n                    bbart.addAttributes(bbattributes);\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n\n            }\n\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to retrieve content from the TSK .\", ex);\n        }\n\n\n\n        //Recent Documents section\n        // This gets the recent object info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> RecentList = new ArrayList<FsContent>();\n\n            try {\n                ResultSet rs = tempDb.runQuery(recentQuery + allFS);\n                RecentList = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            for (FsContent Recent : RecentList) {\n                if (controller.isCancelled()) {\n                    break;\n                }\n                Content fav = Recent;\n\n                byte[] t = new byte[(int) fav.getSize()];\n\n                int bytesRead = 0;\n                if (fav.getSize() > 0) {\n                    bytesRead = fav.read(t, 0, fav.getSize()); // read the data\n                }\n\n\n                // set the data on the bottom and show it\n\n                String recentString = new String();\n\n\n                if (bytesRead > 0) {\n                    recentString = DataConversion.getString(t, bytesRead, 4);\n                }\n\n\n                String path = Util.getPath(recentString);\n                String name = Util.getFileName(path);\n                Long datetime = Recent.getCrtime();\n                try {\n                    BlackboardArtifact bbart = Recent.newArtifact(ARTIFACT_TYPE.TSK_RECENT_OBJECT);\n                    Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH.getTypeID(), \"RecentActivity\", \"Last Visited\", path));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", name));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH_ID.getTypeID(), \"RecentActivity\", \"\", Util.findID(path)));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Date Created\", datetime));\n                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"Windows Explorer\"));\n                    bbart.addAttributes(bbattributes);\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_RECENT_OBJECT));\n\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to retrieve content from the TSK .\", ex);\n        }\n\n\n\n    }","commit_id":"c5e71bb14ed0c0dff6c33f1ea8e6d4fd00d5e0d5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public void getregistryfiles(List<String> image, IngestImageWorkerController controller) {\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> Regfiles = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where lower(name) = 'ntuser.dat' OR lower(parent_path) LIKE '%/system32/config%' and (name LIKE 'system' OR name LIKE 'software' OR name = 'SECURITY' OR name = 'SAM' OR name = 'default')\" + allFS);\n                Regfiles = tempDb.resultSetToFsContents(rs);\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            int j = 0;\n\n            while (j < Regfiles.size()) {\n                boolean Success;\n                Content orgFS = Regfiles.get(j);\n                long orgId = orgFS.getId();\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + Regfiles.get(j).getName().toString();\n                try {\n                    ContentUtils.writeToFile(Regfiles.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + Regfiles.get(j).getName()));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File regFile = new File(temps);\n\n                String txtPath = executeRegRip(temps, j);\n                if (txtPath.length() > 0) {\n                    Success = parseReg(txtPath, orgId);\n                } else {\n                    Success = false;\n                }\n                //At this point pasco2 proccessed the index files.\n                //Now fetch the results, parse them and the delete the files.\n                if (Success) {\n                    //Delete dat file since it was succcessful\n                    regFile.delete();\n                }\n                j++;\n\n            }\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Registry files\", ex);\n        }\n\n    }","id":70583,"modified_method":"public void getregistryfiles(List<String> image, IngestImageWorkerController controller) {\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> Regfiles = new ArrayList<FsContent>();\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where lower(name) = 'ntuser.dat' OR lower(parent_path) LIKE '%/system32/config%' and (name LIKE 'system' OR name LIKE 'software' OR name = 'SECURITY' OR name = 'SAM' OR name = 'default')\" + allFS);\n                Regfiles = tempDb.resultSetToFsContents(rs);\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            int j = 0;\n\n            while (j < Regfiles.size()) {\n                boolean Success;\n                Content orgFS = Regfiles.get(j);\n                long orgId = orgFS.getId();\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + Regfiles.get(j).getName().toString();\n                try {\n                    ContentUtils.writeToFile(Regfiles.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + Regfiles.get(j).getName()));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File regFile = new File(temps);\n\n                String txtPath = executeRegRip(temps, j);\n                if (txtPath.length() > 0) {\n                    Success = parseReg(txtPath, orgId);\n                } else {\n                    Success = false;\n                }\n                //At this point pasco2 proccessed the index files.\n                //Now fetch the results, parse them and the delete the files.\n                if (Success) {\n                    //Delete dat file since it was succcessful\n                    regFile.delete();\n                }\n                j++;\n\n            }\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Registry files\", ex);\n        }\n\n    }","commit_id":"c5e71bb14ed0c0dff6c33f1ea8e6d4fd00d5e0d5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public void getffdb(List<String> image, IngestImageWorkerController controller) throws SQLException {\n        //Make these seperate, this is for history\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE '%places.sqlite%' and name NOT LIKE '%journal%' and parent_path LIKE '%Firefox%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                Statement s = rs.getStatement();\n                rs.close();\n                if (s != null) {\n                    s.close();\n                    FireFoxCount = FFSqlitedb.size();\n                }\n                rs.close();\n                rs.getStatement().close();\n            } catch (SQLException ex) {\n                logger.log(Level.WARNING, \"Error while trying to get Firefox SQLite db.\", ex);\n            }\n\n            int j = 0;\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + File.separator + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + File.separator + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n\n                ResultSet temprs = Util.runQuery(ffquery, connectionString);\n                while (temprs.next()) {\n                    try {\n                        BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_HISTORY);\n                        Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"url\") != null) ? temprs.getString(\"url\") : \"\")));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", temprs.getLong(\"visit_date\")));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_REFERRER.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"ref\") != null) ? temprs.getString(\"ref\") : \"\")));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"title\") != null) ? temprs.getString(\"title\") : \"\")));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"FireFox\"));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", (Util.extractDomain((temprs.getString(\"url\") != null) ? temprs.getString(\"url\") : \"\"))));\n                        bbart.addAttributes(bbattributes);\n                    } catch (Exception ex) {\n                        logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                    }\n                }\n                temprs.close();\n\n\n\n                try {\n                    dbconnect tempdbconnect2 = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet tempbm = tempdbconnect2.executeQry(ffbookmarkquery);\n                    while (tempbm.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_BOOKMARK);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((tempbm.getString(\"url\") != null) ? tempbm.getString(\"url\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", ((tempbm.getString(\"title\") != null) ? tempbm.getString(\"title\").replaceAll(\"'\", \"''\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"FireFox\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", Util.extractDomain(tempbm.getString(\"url\"))));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempbm.close();\n                    tempdbconnect2.closeConnection();\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n\n\n                j++;\n                dbFile.delete();\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY));\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n        }\n\n        //COOKIES section\n        // This gets the cookie info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE '%cookies.sqlite%' and name NOT LIKE '%journal%' and parent_path LIKE '%Firefox%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + File.separator + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + File.separator + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                boolean checkColumn = Util.checkColumn(\"creationTime\", \"moz_cookies\", connectionString);\n                String query;\n                if (checkColumn) {\n                    query = ffcookiequery;\n                } else {\n                    query = ff3cookiequery;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(query);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_COOKIE);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"host\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Last Visited\", temprs.getLong(\"lastAccessed\")));\n                            if (checkColumn == true) {\n                                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Created\", temprs.getLong(\"creationTime\")));\n                            }\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_VALUE.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"value\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"Title\", ((temprs.getString(\"name\") != null) ? temprs.getString(\"name\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"FireFox\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"host\")));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Firefox SQLite db.\", ex);\n        }\n\n\n\n        //Downloads section\n        // This gets the downloads info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'downloads.sqlite' and name NOT LIKE '%journal%' and parent_path LIKE '%Firefox%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            int j = 0;\n\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(ffdownloadquery);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", temprs.getLong(\"startTime\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"source\") != null) ? temprs.getString(\"source\") : \"\")));\n                            String urldecodedtarget = URLDecoder.decode(temprs.getString(\"target\").replaceAll(\"file:///\", \"\"), \"UTF-8\");\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH_ID.getTypeID(), \"RecentActivity\", \"\", Util.findID(urldecodedtarget)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH.getTypeID(), \"Recent Activity\", \"\", urldecodedtarget));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", Util.extractDomain(temprs.getString(\"source\"))));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"FireFox\"));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get FireFox SQLite db.\", ex);\n        }\n    }","id":70584,"modified_method":"public void getffdb(List<String> image, IngestImageWorkerController controller) throws SQLException {\n        //Make these seperate, this is for history\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE '%places.sqlite%' and name NOT LIKE '%journal%' and parent_path LIKE '%Firefox%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                Statement s = rs.getStatement();\n                rs.close();\n                if (s != null) {\n                    s.close();\n                    FireFoxCount = FFSqlitedb.size();\n                }\n                rs.close();\n                rs.getStatement().close();\n            } catch (SQLException ex) {\n                logger.log(Level.WARNING, \"Error while trying to get Firefox SQLite db.\", ex);\n            }\n\n            int j = 0;\n              if(FFSqlitedb != null && !FFSqlitedb.isEmpty())\n            {\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + File.separator + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + File.separator + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n\n                ResultSet temprs = Util.runQuery(ffquery, connectionString);\n                while (temprs.next()) {\n                    try {\n                        BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_HISTORY);\n                        Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"url\") != null) ? temprs.getString(\"url\") : \"\")));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", temprs.getLong(\"visit_date\")));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_REFERRER.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"ref\") != null) ? temprs.getString(\"ref\") : \"\")));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"title\") != null) ? temprs.getString(\"title\") : \"\")));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"FireFox\"));\n                        bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", (Util.extractDomain((temprs.getString(\"url\") != null) ? temprs.getString(\"url\") : \"\"))));\n                        bbart.addAttributes(bbattributes);\n                    } catch (Exception ex) {\n                        logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                    }\n                }\n                temprs.close();\n\n\n\n                try {\n                    dbconnect tempdbconnect2 = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet tempbm = tempdbconnect2.executeQry(ffbookmarkquery);\n                    while (tempbm.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_BOOKMARK);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((tempbm.getString(\"url\") != null) ? tempbm.getString(\"url\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"\", ((tempbm.getString(\"title\") != null) ? tempbm.getString(\"title\").replaceAll(\"'\", \"''\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"FireFox\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", Util.extractDomain(tempbm.getString(\"url\"))));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempbm.close();\n                    tempdbconnect2.closeConnection();\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n\n\n                j++;\n                dbFile.delete();\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY));\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK));\n          }\n        }\n        catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n        }\n\n        //COOKIES section\n        // This gets the cookie info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE '%cookies.sqlite%' and name NOT LIKE '%journal%' and parent_path LIKE '%Firefox%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n            int j = 0;\n            if(FFSqlitedb != null && !FFSqlitedb.isEmpty())\n            {\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + File.separator + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + File.separator + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                boolean checkColumn = Util.checkColumn(\"creationTime\", \"moz_cookies\", connectionString);\n                String query;\n                if (checkColumn) {\n                    query = ffcookiequery;\n                } else {\n                    query = ff3cookiequery;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(query);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_COOKIE);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"host\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Last Visited\", temprs.getLong(\"lastAccessed\")));\n                            if (checkColumn == true) {\n                                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME.getTypeID(), \"RecentActivity\", \"Created\", temprs.getLong(\"creationTime\")));\n                            }\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_VALUE.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"value\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME.getTypeID(), \"RecentActivity\", \"Title\", ((temprs.getString(\"name\") != null) ? temprs.getString(\"name\") : \"\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"FireFox\"));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", temprs.getString(\"host\")));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get Firefox SQLite db.\", ex);\n        }\n\n\n\n        //Downloads section\n        // This gets the downloads info\n        try {\n            Case currentCase = Case.getCurrentCase(); // get the most updated case\n            SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n            String allFS = new String();\n            for (int i = 0; i < image.size(); i++) {\n                if (i == 0) {\n                    allFS += \" AND (0\";\n                }\n                allFS += \" OR fs_obj_id = '\" + image.get(i) + \"'\";\n                if (i == image.size() - 1) {\n                    allFS += \")\";\n                }\n            }\n            List<FsContent> FFSqlitedb = null;\n            try {\n                ResultSet rs = tempDb.runQuery(\"select * from tsk_files where name LIKE 'downloads.sqlite' and name NOT LIKE '%journal%' and parent_path LIKE '%Firefox%'\" + allFS);\n                FFSqlitedb = tempDb.resultSetToFsContents(rs);\n                rs.close();\n                rs.getStatement().close();\n            } catch (Exception ex) {\n                logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n            }\n\n            int j = 0;\n              if(FFSqlitedb != null && !FFSqlitedb.isEmpty())\n            {\n            while (j < FFSqlitedb.size()) {\n                String temps = currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\";\n                String connectionString = \"jdbc:sqlite:\" + temps;\n                try {\n                    ContentUtils.writeToFile(FFSqlitedb.get(j), new File(currentCase.getTempDirectory() + \"\\\\\" + FFSqlitedb.get(j).getName().toString() + j + \".db\"));\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                }\n                File dbFile = new File(temps);\n                if (controller.isCancelled()) {\n                    dbFile.delete();\n                    break;\n                }\n                try {\n                    dbconnect tempdbconnect = new dbconnect(\"org.sqlite.JDBC\", connectionString);\n                    ResultSet temprs = tempdbconnect.executeQry(ffdownloadquery);\n                    while (temprs.next()) {\n                        try {\n                            BlackboardArtifact bbart = FFSqlitedb.get(j).newArtifact(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD);\n                            Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_LAST_ACCESSED.getTypeID(), \"RecentActivity\", \"Last Visited\", temprs.getLong(\"startTime\")));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(), \"RecentActivity\", \"\", ((temprs.getString(\"source\") != null) ? temprs.getString(\"source\") : \"\")));\n                            String urldecodedtarget = URLDecoder.decode(temprs.getString(\"target\").replaceAll(\"file:///\", \"\"), \"UTF-8\");\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH_ID.getTypeID(), \"RecentActivity\", \"\", Util.findID(urldecodedtarget)));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH.getTypeID(), \"Recent Activity\", \"\", urldecodedtarget));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN.getTypeID(), \"RecentActivity\", \"\", Util.extractDomain(temprs.getString(\"source\"))));\n                            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME.getTypeID(), \"RecentActivity\", \"\", \"FireFox\"));\n                            bbart.addAttributes(bbattributes);\n                        } catch (Exception ex) {\n                            logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.{0}\", ex);\n                        }\n                    }\n                    tempdbconnect.closeConnection();\n                    temprs.close();\n\n                } catch (Exception ex) {\n                    logger.log(Level.WARNING, \"Error while trying to read into a sqlite db.\" + connectionString, ex);\n                }\n                j++;\n                dbFile.delete();\n            }\n            }\n            IngestManager.fireServiceDataEvent(new ServiceDataEvent(\"Recent Activity\", BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD));\n        } catch (Exception ex) {\n            logger.log(Level.WARNING, \"Error while trying to get FireFox SQLite db.\", ex);\n        }\n    }","commit_id":"c5e71bb14ed0c0dff6c33f1ea8e6d4fd00d5e0d5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Constructor\n     *\n     *  Creates a new ColorMenuButton with the passed array of items\n     * as it's palette menu.\n     * \n     *  It will preselect the first item in the array as\n     *  its default selection and use its images for its own view.\n     *\n     * @param pItems  an array of ColorMenuButtonItems for the menu.\n     **/\n    public ColorMenuButton(Color [] pColors, String [] pMenuNames, boolean pHasCustom) {\n        setButtonIcon(sIcon);\n        buildMenu(pColors, pMenuNames, pHasCustom);\n    }","id":70585,"modified_method":"/**\n     * Constructor\n     *\n     *  Creates a new ColorMenuButton with the passed array of items\n     * as it's palette menu.\n     * \n     *  It will preselect the first item in the array as\n     *  its default selection and use its images for its own view.\n     *\n     * @param pItems  an array of ColorMenuButtonItems for the menu.\n     **/\n    public ColorMenuButton(Color[] pColors, String[] pMenuNames, boolean pHasCustom) {\n        setButtonIcon(new BlobIcon(20,16, true));\n        buildMenu(pColors, pMenuNames, pHasCustom);\n    }","commit_id":"edb80dc92c4f4fbf4ca5357174f09b5c16667ed3","url":"https://github.com/VUE/VUE"},{"original_method":"/**\n     * Sets a the current color.\n     */\n    public void setColor(Color pColor) {\n        mCurColor = pColor;\n        if (pColor == null)\n            mPopup.setSelected(super.mEmptySelection);\n    }","id":70586,"modified_method":"/**\n     * Sets a the current color.\n     */\n    public void setColor(Color c) {\n        mCurColor = c;\n        if (mButtonIcon instanceof BlobIcon)\n            ((BlobIcon)mButtonIcon).setColor(c);\n        if (c == null)\n            mPopup.setSelected(super.mEmptySelection);\n    }","commit_id":"edb80dc92c4f4fbf4ca5357174f09b5c16667ed3","url":"https://github.com/VUE/VUE"},{"original_method":"/**\n \t * setValue\n \t * Generic property editor access\n \t **/\n    public void setValue( Object pValue) {\n        //new Throwable(\"FEP SETVALUE\").printStackTrace();\n        //System.out.println(\"FEP: setValue \" + pValue);\n \t\t\n        if( pValue instanceof Font) {\n            Font font = (Font) pValue;\n \t\t\t\n            String familyName = font.getFamily();\n            mFontCombo.setSelectedItem( familyName );\n            mItalicButton.setSelected( (Font.ITALIC & font.getStyle()) == Font.ITALIC );\n            mBoldButton.setSelected( font.isBold() );\n            //mSizeField.setValue( font.getSize() );\n            mSizeField.setSelectedItem( \"\"+font.getSize() );\n \t\t\t\n        }\n \t\n    }","id":70587,"modified_method":"/**\n     * setValue\n     * Generic property editor access\n     **/\n    public void setValue( Object pValue) {\n        if (DEBUG.SELECTION) System.out.println(this + \" setValue \" + pValue);\n        //new Throwable().printStackTrace();\n \t\t\n        if( pValue instanceof Font) {\n            Font font = (Font) pValue;\n \t\t\t\n            String familyName = font.getFamily();\n            mFontCombo.setSelectedItem( familyName );\n            mItalicButton.setSelected( (Font.ITALIC & font.getStyle()) == Font.ITALIC );\n            mBoldButton.setSelected( font.isBold() );\n            //mSizeField.setValue( font.getSize() );\n            mSizeField.setSelectedItem( \"\"+font.getSize() );\n \t\t\t\n        }\n \t\n    }","commit_id":"edb80dc92c4f4fbf4ca5357174f09b5c16667ed3","url":"https://github.com/VUE/VUE"},{"original_method":"public void initColors( Color pColor) {\n        //mFontCombo.setBackground( pColor);\n        mBoldButton.setBackground( pColor);\n        mItalicButton.setBackground( pColor);\n    }","id":70588,"modified_method":"private void initColors( Color pColor) {\n        //mFontCombo.setBackground( pColor);\n        mBoldButton.setBackground( pColor);\n        mItalicButton.setBackground( pColor);\n    }","commit_id":"edb80dc92c4f4fbf4ca5357174f09b5c16667ed3","url":"https://github.com/VUE/VUE"},{"original_method":"/** load values from either a LWComponent, or a VueBeanState */\n    void loadValues(Object pValue) {\n        //System.out.println(this + \" loadValues (LWCToolPanel) \" + pValue);\n        VueBeanState state = null;\n \t\t\n        if (pValue instanceof LWComponent) {\n            if (!isPreferredType(pValue))\n                return;\n            state = VueBeans.getState(pValue);\n            if (DEBUG.SELECTION) System.out.println(this + \" loadValues (LWCToolPanel) \" + state + \" from \" + pValue);\n        } else if (pValue instanceof VueBeanState) {\n            state = (VueBeanState) pValue;\n            if (DEBUG.SELECTION) System.out.println(this + \" loadValues (LWCToolPanel) \" + state);\n        }\n        if (state == null)\n            state = mDefaultState;\n \t\t\n        mState = state;\n        \n        //new Throwable().printStackTrace();\n        \n        setIgnorePropertyChangeEvents(true);\n        \n                mFontPanel.setValue(state.getPropertyValue(LWKey.Font));\n          mFillColorButton.loadPropertyValue(state);\n        mStrokeColorButton.loadPropertyValue(state);\n          mTextColorButton.loadPropertyValue(state);\n             mStrokeButton.loadPropertyValue(state);\n\n        setIgnorePropertyChangeEvents(false);\n    }","id":70589,"modified_method":"/** load values from either a LWComponent, or a VueBeanState */\n    void loadValues(Object pValue) {\n        //System.out.println(this + \" loadValues (LWCToolPanel) \" + pValue);\n        VueBeanState state = null;\n \t\t\n        if (pValue instanceof LWComponent) {\n            if (!isPreferredType(pValue))\n                return;\n            state = VueBeans.getState(pValue);\n            if (DEBUG.SELECTION) System.out.println(this + \" loadValues (LWCToolPanel) \" + state + \" from \" + pValue);\n        } else if (pValue instanceof VueBeanState) {\n            state = (VueBeanState) pValue;\n            if (DEBUG.SELECTION) System.out.println(this + \" loadValues (LWCToolPanel) \" + state);\n        }\n        if (state == null)\n            state = mDefaultState;\n \t\t\n        mState = state;\n        \n        //new Throwable().printStackTrace();\n        \n        setIgnorePropertyChangeEvents(true);\n        \n        mFontPanel.setValue(state.getPropertyValue(LWKey.Font));\n        mTextColorButton.loadPropertyValue(state); // until is a MenuButton, might as will pick up property\n\n        if (false) {\n          mFillColorButton.loadPropertyValue(state);\n        mStrokeColorButton.loadPropertyValue(state);\n             mStrokeButton.loadPropertyValue(state);\n        }\n\n        setIgnorePropertyChangeEvents(false);\n    }","commit_id":"edb80dc92c4f4fbf4ca5357174f09b5c16667ed3","url":"https://github.com/VUE/VUE"},{"original_method":"public ToolWindow(String title, Frame owner)\n    {\n        //setUndecorated(true);\n        super(owner);\n        addMouseListener(this);\n        addMouseMotionListener(this);\n        setBackground(SystemColor.control);\n        this.mTitle = title;\n        System.out.println(this + \" cp=\" + getContentPane());\n        toolPanel = new ToolPanel(mTitle);\n        getContentPane().add(toolPanel);\n        //setContentPane(toolPanel);\n        Component gp = new GlassPane();\n        setGlassPane(gp);\n        // FYI: I don't know if a glass pane is going to\n        // work if we override the content-pane -- see\n        // JRootPane custom layout mgr that handles glass\n        // pane layout for the *default* content-pane.\n        gp.setVisible(true);\n        pack();\n        //setLocationRelativeTo(owner);\n        //setFocusableWindowState(false); // nothing can get input\n\n        /*\n          // Window open & close only come to us the first time the window happens\n        addWindowListener(new WindowAdapter() {\n                public void windowClosing(WindowEvent e) {System.out.println(e); setButtonState(false); }\n                public void windowOpened(WindowEvent e) {System.out.println(e); setButtonState(true); }\n            });\n        addWindowStateListener(new WindowStateListener() {\n                public void windowStateChanged(WindowEvent e) {\n                    System.out.println(\"ToolWindow: \" + e);\n                }\n            });\n        */\n        \n    }","id":70590,"modified_method":"public ToolWindow(String title, Frame owner)\n    {\n        //setUndecorated(true);\n        super(owner);\n        addMouseListener(this);\n        addMouseMotionListener(this);\n        setBackground(SystemColor.control);\n        this.mTitle = title;\n        if (false) System.out.println(this + \" cp=\" + getContentPane());\n        toolPanel = new ToolPanel(mTitle);\n        getContentPane().add(toolPanel);\n        //setContentPane(toolPanel);\n        Component gp = new GlassPane();\n        setGlassPane(gp);\n        // FYI: I don't know if a glass pane is going to\n        // work if we override the content-pane -- see\n        // JRootPane custom layout mgr that handles glass\n        // pane layout for the *default* content-pane.\n        gp.setVisible(true);\n        pack();\n        //setLocationRelativeTo(owner);\n        //setFocusableWindowState(false); // nothing can get input\n\n        /*\n          // Window open & close only come to us the first time the window happens\n        addWindowListener(new WindowAdapter() {\n                public void windowClosing(WindowEvent e) {System.out.println(e); setButtonState(false); }\n                public void windowOpened(WindowEvent e) {System.out.println(e); setButtonState(true); }\n            });\n        addWindowStateListener(new WindowStateListener() {\n                public void windowStateChanged(WindowEvent e) {\n                    System.out.println(\"ToolWindow: \" + e);\n                }\n            });\n        */\n\n        System.out.println(this + \" created.\");\n    }","commit_id":"edb80dc92c4f4fbf4ca5357174f09b5c16667ed3","url":"https://github.com/VUE/VUE"},{"original_method":"/**\n     * updateContexxtualTools\n     * This method checks to see if the current tool has\n     * a contextual tool.  If so, it uses that panel.  If\n     * not it uses the selection to get a panel.\n     **/\n    private void updateContextualToolPanel() {\n        VueTool tool = getSelectedTool();\n        if (tool.getParentTool() != null)\n            tool = tool.getParentTool();\n\n        JPanel panel = tool.getContextualPanel();\n\t\t\n        if (panel == null)\n            panel = getContextualPanelForSelection();\n\n        if (false&&panel != null)\n            initContextualPanelFromSelection(panel);\n        \n        getToolbar().setContextualToolPanel(panel);\n    }","id":70591,"modified_method":"/**\n     * updateContexxtualTools\n     * This method checks to see if the current tool has\n     * a contextual tool.  If so, it uses that panel.  If\n     * not it uses the selection to get a panel.\n     **/\n    private void updateContextualToolPanel() {\n        VueTool tool = getSelectedTool();\n        if (tool.getParentTool() != null)\n            tool = tool.getParentTool();\n\n        JPanel panel = tool.getContextualPanel();\n\t\t\n        if (panel == null)\n            panel = getContextualPanelForSelection();\n\n        if (panel != null)\n            initContextualPanelFromSelection(panel);\n        \n        getToolbar().setContextualToolPanel(panel);\n    }","commit_id":"edb80dc92c4f4fbf4ca5357174f09b5c16667ed3","url":"https://github.com/VUE/VUE"},{"original_method":"public static void main(String args[]) \n    throws Exception {\n        SimpleObjectManager om = new SimpleObjectManager();\n        \n        // Will process CLI. \n        // 'config' will load a config file.\n        om.bind(\"Main.args\", args);\n\n        Runnable main = (Runnable) om.get(\"Main\");\n        if (main == null) {\n            // TODO: look for a pre-defined name in local dir, resource,\n            // manifest\n            System.err.println(\"Using default tomcat-lite configuration\");\n\n            if (args.length == 0) {\n                System.err.println(\"Example command line:\");\n                System.err.println(\"-context /:webapps/ROOT -Connector.port 9999\");\n            }\n            \n            String cfgFile = \"org/apache/tomcat/lite/config.properties\";\n            om.loadResource(cfgFile);\n            main = (Runnable) om.get(\"Main\");\n        }\n        \n        // add JMX support\n        ObjectManager jmx = (ObjectManager) om.get(\"JMX\");\n        if (jmx != null) {\n            jmx.register(om);\n        }\n\n        main.run();\n\n    }","id":70592,"modified_method":"public static void main(String args[]) \n            throws Exception {\n        // '--config' will load a config file.\n        SimpleObjectManager om = new SimpleObjectManager(args);\n\n        String run = (String) om.getProperty(\"RUN\");\n        if (run == null) {\n            // TODO: look for a pre-defined name in local dir, resource,\n            // manifest\n            System.err.println(\"Using default tomcat-lite configuration\");\n\n            if (args.length == 0) {\n                System.err.println(\"Example command line:\");\n                System.err.println(\"-context /:webapps/ROOT -Connector.port 9999\");\n            }\n            \n            String cfgFile = \"org/apache/tomcat/lite/config.properties\";\n            om.loadResource(cfgFile);\n            run = (String) om.getProperty(\"RUN\");\n        }\n        \n        String[] runNames = run.split(\",\");\n        for (String name: runNames) {\n            Object main = om.get(name);\n            if (main instanceof Runnable) {\n                ((Runnable) main).run();\n            }\n        }\n        \n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"public void register(ObjectManager om) {\n        om.children.add(this);\n    }","id":70593,"modified_method":"public void register(ObjectManager om) {\n        children.add(om);\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n    public void bind(String name, Object o) {\n        //log.info(\"Bound: \" + name + \" \" + o);\n\n        if (\"Main.args\".equals(name)) {\n            try {\n                processArgs((String[]) o, props);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        // TODO: can I make 'inject' public - Guice seems to\n        // support this.\n        inject(name, o);\n    }","id":70594,"modified_method":"@Override\n    public void bind(String name, Object o) {\n        //log.info(\"Bound: \" + name + \" \" + o);\n\n        if (ARGS.equals(name)) {\n            try {\n                processArgs((String[]) o, props);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        \n        // TODO: can I make 'inject' public - Guice seems to \n        // support this.\n        inject(name, o);\n        \n        // Children\n        super.bind(name, o);\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"public void register(ObjectManager om) {\n        this.om = om;\n        super.register(om);\n    }","id":70595,"modified_method":"public void register(ObjectManager om) {\n        super.register(om);\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Populate properties based on CLI:\n     *  -key value\n     *  --key=value\n     *\n     *  --config=FILE - load a properties file\n     *\n     * @param args\n     * @param p\n     * @param meta\n     * @return everything after the first non arg not starting with '-'\n     * @throws IOException\n     */\n    public String[] processArgs(String[] args, Properties props)\n            throws IOException {\n\n        for (int i = 0; i < args.length; i++) {\n            String arg = args[i];\n            if (arg.startsWith(\"--\")) {\n                arg = arg.substring(2);\n            } else if (arg.startsWith(\"-\")) {\n                arg = arg.substring(1);\n            } else {\n                String [] res = new String[args.length - i];\n                System.arraycopy(args, i, res, 0, res.length);\n                return res;\n            }\n\n            String name = arg;\n            int eq = arg.indexOf(\"=\");\n            String value = null;\n            if (eq > 0) {\n                name = arg.substring(0, eq);\n                value = arg.substring(eq + 1);\n            } else {\n                i++;\n                if (i >= args.length) {\n                    throw new RuntimeException(\"Missing param \" + arg);\n                }\n                value = args[i];\n            }\n\n            if (\"config\".equals(arg)) {\n                if (new File(value).exists()) {\n                    load(new FileInputStream(value));\n                } else {\n                    loadResource(value);\n                }\n            } else {\n                props.put(name, value);\n            }\n        }\n        return new String[] {};\n    }","id":70596,"modified_method":"/**\n     * Populate properties based on CLI:\n     *  -key value\n     *  --key=value\n     *  \n     *  --config=FILE - load a properties file\n     *  \n     * @param args\n     * @param p\n     * @param meta\n     * @return everything after the first non arg not starting with '-'\n     * @throws IOException \n     */\n    public String[] processArgs(String[] args, Properties props) \n            throws IOException {\n\n        for (int i = 0; i < args.length; i++) {\n            String arg = args[i];\n            if (arg.startsWith(\"--\")) {\n                arg = arg.substring(2);\n            } else if (arg.startsWith(\"-\")) {\n                arg = arg.substring(1);\n            } else {\n                String [] res = new String[args.length - i];\n                System.arraycopy(args, i, res, 0, res.length);\n                processIncludes();\n                return res;\n            }\n            \n            String name = arg; \n            int eq = arg.indexOf(\"=\");\n            String value = null;\n            if (eq > 0) {\n                name = arg.substring(0, eq);\n                value = arg.substring(eq + 1);\n            } else {\n                i++;\n                if (i >= args.length) {\n                    throw new RuntimeException(\"Missing param \" + arg);\n                }\n                value = args[i];\n            }\n\n            props.put(name, value);\n            \n        }\n        \n        processIncludes();\n        return new String[] {};\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"public ObjectManager getObjectManager() {\n        return om;\n    }","id":70597,"modified_method":"public ObjectManager getObjectManager() {\n        return this;\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"private Object loadClass(String className) {\n        try {\n            Class c = Class.forName(className);\n            Object ext = c.newInstance();\n            return ext;\n        } catch (Throwable e) {\n            e.printStackTrace();\n            return null;\n        }\n    }","id":70598,"modified_method":"private Object loadClass(String className) {\n        try {\n            Class c = Class.forName(className);\n            if (c.isInterface()) {\n                return null;\n            }\n            Object ext = c.newInstance();\n            return ext;\n        } catch (Throwable e) {\n            return null;\n        }        \n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"public SimpleObjectManager(String[] args) {\n        this();\n        bind(\"Main.args\", args);\n    }","id":70599,"modified_method":"public SimpleObjectManager(String[] args) {\n        this();\n        bind(ARGS, args);\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"public void load(InputStream is) {\n        try {\n            props.load(is);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error loading default config\");\n        }\n    }","id":70600,"modified_method":"public void load(InputStream is) {\n        try {\n            props.load(is);\n            processIncludes();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error loading default config\");\n        }\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"private void inject(String name, Object o) {\n        // Simple injection of primitive types\n        String pref = name + \".\";\n        int prefLen = pref.length();\n\n        for (String k: props.stringPropertyNames()) {\n            if (k.startsWith(pref)) {\n                if (k.endsWith(\")\")) {\n                    continue; // special\n                }\n                String value = props.getProperty(k);\n                value = IntrospectionUtils.replaceProperties(value,\n                        props, null);\n                String p = k.substring(prefLen);\n                int idx = p.indexOf(\".\");\n                if (idx > 0) {\n                    // ignore suffix - indexed properties\n                    p = p.substring(0, idx);\n                }\n                IntrospectionUtils.setProperty(o, p, value);\n                log.info(\"Setting: \" + name + \" \" + k + \" \" + value);\n            }\n        }\n        // We could do cooler things - inject objects, etc.\n    }","id":70601,"modified_method":"private void inject(String name, Object o) {\n        // Simple injection of primitive types\n        String pref = name + \".\";\n        int prefLen = pref.length();\n\n        DynamicObject dyno = new DynamicObject(o.getClass());\n        dyno.setAttribute(o, \"ObjectManager\", this);\n\n        for (Object kObj: props.keySet()) {\n            if (!(kObj instanceof String)) {continue;}\n            String k = (String) kObj;\n            if (k.startsWith(pref)) {\n                if (k.endsWith(\")\")) {\n                    continue; // special \n                }\n                String value = props.getProperty(k);\n                value = AntProperties.replaceProperties(value, \n                        props, null);\n                String p = k.substring(prefLen);\n                int idx = p.indexOf(\".\");\n                if (idx > 0) {\n                    // ignore suffix - indexed properties\n                    p = p.substring(0, idx);\n                }\n                dyno.setProperty(o, p, value);\n                if (log.isLoggable(Level.FINE)) {\n                    log.info(\"Setting: \" + name + \" \" + k + \" \" + value);\n                }\n            }\n        }\n        \n\n        // We could do cooler things - inject objects, etc.\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n    public Object get(String key) {\n        // Use same syntax as Spring props.\n        String prop = props.getProperty(key + \".(class)\");\n        if (prop != null) {\n            Object res = loadClass(prop);\n            inject(key, res);\n            return res;\n        }\n\n        return null;\n    }","id":70602,"modified_method":"@Override\n    public Object get(String key) {\n        // Use same syntax as Spring props.\n        Object res = null;\n        String prop = props.getProperty(key + \".(class)\");\n        if (prop != null) {\n            res = loadClass(prop);\n        }\n\n        if (res == null) {\n            res = super.get(key);\n        }\n        \n        if (res == null) {\n            // Maybe it's just a class name\n            res = loadClass(key);\n        }\n        \n        if (res != null) {\n            inject(key, res);\n        }\n        return res;\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"public void loadResource(String res) {\n        InputStream in = this.getClass().getClassLoader()\n            .getResourceAsStream(res);\n        load(in);\n    }","id":70603,"modified_method":"public void loadResource(String res) {\n        InputStream in = this.getClass().getClassLoader()\n            .getResourceAsStream(res);\n        if (in != null) {\n            load(in);\n        }\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n    public void unbind(String name) {\n    }","id":70604,"modified_method":"@Override\n    public void unbind(String name) {\n        // Children\n        // TODO: call @destroy\n        super.unbind(name);\n    }","commit_id":"766a6eaa85004f4e9083757c2087a95d2bb8bda1","url":"https://github.com/apache/tomcat"},{"original_method":"/** {@inheritDoc} */\n    @Override public void inject(GridResourceMethod mtd, Object target, Class<?> depCls, GridDeployment dep)\n        throws GridException {\n        GridServiceResource ann = (GridServiceResource)mtd.getAnnotation();\n\n        Collection<GridService> srvcs = grid.services().services(ann.serviceName());\n\n        Class<?>[] types = mtd.getMethod().getParameterTypes();\n\n        if (types.length != 1)\n            throw new GridException(\"Setter does not have single parameter of required type [type=\" +\n                srvcs.getClass().getName() + \", setter=\" + mtd + ']');\n\n        if (Collection.class.equals(types[0]))\n            GridResourceUtils.inject(mtd.getMethod(), target, srvcs);\n        else {\n            if (Collection.class.isAssignableFrom(types[0]))\n                throw new GridException(\"Failed to inject resource because target parameter should have \" +\n                    \"'Collection' type (no descendant classes are allowed).\");\n\n            GridResourceUtils.inject(mtd.getMethod(), target, F.isEmpty(srvcs) ? null : srvcs.iterator().next());\n        }\n    }","id":70605,"modified_method":"/** {@inheritDoc} */\n    @Override public void inject(GridResourceMethod mtd, Object target, Class<?> depCls, GridDeployment dep)\n        throws GridException {\n        GridServiceResource ann = (GridServiceResource)mtd.getAnnotation();\n\n        Class svcItf = ann.proxyInterface();\n\n        Object svc;\n\n        if (svcItf == Void.class)\n            svc = grid.services().service(ann.serviceName());\n        else\n            svc = grid.services().serviceProxy(ann.serviceName(), svcItf, ann.proxySticky());\n\n        Class<?>[] types = mtd.getMethod().getParameterTypes();\n\n        if (types.length != 1)\n            throw new GridException(\"Setter does not have single parameter of required type [type=\" +\n                svc.getClass().getName() + \", setter=\" + mtd + ']');\n\n        if (svc != null)\n            GridResourceUtils.inject(mtd.getMethod(), target, svc);\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/** {@inheritDoc} */\n    @Override public void inject(GridResourceField field, Object target, Class<?> depCls, GridDeployment dep)\n        throws GridException {\n        GridServiceResource ann = (GridServiceResource)field.getAnnotation();\n\n        Collection<GridService> srvcs = grid.services().services(ann.serviceName());\n\n        Field f = field.getField();\n\n        if (Collection.class.equals(f.getType()))\n            GridResourceUtils.inject(f, target, srvcs);\n        else {\n            if (Collection.class.isAssignableFrom(f.getType()))\n                throw new GridException(\"Failed to inject resource because target field should have \" +\n                    \"'Collection' type (no descendant classes are allowed).\");\n\n            GridResourceUtils.inject(f, target, F.isEmpty(srvcs) ? null : srvcs.iterator().next());\n        }\n    }","id":70606,"modified_method":"/** {@inheritDoc} */\n    @Override public void inject(GridResourceField field, Object target, Class<?> depCls, GridDeployment dep)\n        throws GridException {\n        GridServiceResource ann = (GridServiceResource)field.getAnnotation();\n\n        Class svcItf = ann.proxyInterface();\n\n        Object svc;\n\n        if (svcItf == Void.class)\n            svc = grid.services().service(ann.serviceName());\n        else\n            svc = grid.services().serviceProxy(ann.serviceName(), svcItf, ann.proxySticky());\n\n        if (svc != null)\n            GridResourceUtils.inject(field.getField(), target, svc);\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureMethodWithIncorrectType() throws Exception {\n        try {\n            grid(0).compute().call(new GridCallable<Object>() {\n                @GridServiceResource(serviceName = \"testService\")\n                private void service(String srvcs) {\n                    fail();\n                }\n\n                @Override public Object call() throws Exception {\n                    return null;\n                }\n            }).get();\n\n            fail();\n        }\n        catch (GridException e) {\n            assertTrue(e.getMessage().startsWith(\"Remote job threw user exception\"));\n        }\n    }","id":70607,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureMethodWithIncorrectType() throws Exception {\n        try {\n            grid(0).compute().call(new GridCallable<Object>() {\n                @GridServiceResource(serviceName = SERVICE_NAME1)\n                private void service(String svcs) {\n                    fail();\n                }\n\n                @Override public Object call() throws Exception {\n                    return null;\n                }\n            }).get();\n\n            fail();\n        }\n        catch (GridException e) {\n            assertTrue(e.getMessage().startsWith(\"Remote job threw user exception\"));\n        }\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureFieldWithNonExistentService() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"nonExistentService\")\n            private DummyService srvc;\n\n            @Override public Object call() throws Exception {\n                assertNull(srvc);\n\n                return null;\n            }\n        }).get();\n    }","id":70608,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureFieldWithNonExistentService() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"nonExistentService\")\n            private DummyService svc;\n\n            @Override public Object call() throws Exception {\n                assertNull(svc);\n\n                return null;\n            }\n        }).get();\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureFieldWithIncorrectType() throws Exception {\n        try {\n            grid(0).compute().call(new GridCallable<Object>() {\n                @GridServiceResource(serviceName = \"testService\")\n                private String srvcName;\n\n                @Override public Object call() throws Exception {\n                    fail();\n\n                    return null;\n                }\n            }).get();\n\n            fail();\n        }\n        catch (GridException e) {\n            assertTrue(e.getMessage().startsWith(\"Remote job threw user exception\"));\n        }\n    }","id":70609,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureFieldWithIncorrectType() throws Exception {\n        try {\n            grid(0).compute().call(new GridCallable<Object>() {\n                @GridServiceResource(serviceName = SERVICE_NAME1)\n                private String svcName;\n\n                @Override public Object call() throws Exception {\n                    fail();\n\n                    return null;\n                }\n            }).get();\n\n            fail();\n        }\n        catch (GridException e) {\n            assertTrue(e.getMessage().startsWith(\"Remote job threw user exception\"));\n        }\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureField() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"testService\")\n            private DummyService srvc;\n\n            @Override public Object call() throws Exception {\n                assertNotNull(srvc);\n\n                return null;\n            }\n        }).get();\n    }","id":70610,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureField() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = SERVICE_NAME1)\n            private DummyService svc;\n\n            @Override public Object call() throws Exception {\n                assertNotNull(svc);\n                assertTrue(svc instanceof GridService);\n\n                svc.noop();\n\n                return null;\n            }\n        }).get();\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/** {@inheritDoc} */\n    @Override protected void beforeTestsStarted() throws Exception {\n        super.beforeTestsStarted();\n\n        startGrid(0);\n\n        startGrid(1).services().deployNodeSingleton(SERVICE_NAME, new DummyService()).get();\n\n        assertEquals(2, grid(0).nodes().size());\n        assertEquals(2, grid(1).nodes().size());\n    }","id":70611,"modified_method":"/** {@inheritDoc} */\n    @Override protected void beforeTestsStarted() throws Exception {\n        super.beforeTestsStarted();\n\n        startGrid(0);\n        startGrid(1);\n\n        grid(0).services().deployNodeSingleton(SERVICE_NAME1, new DummyServiceImpl()).get();\n        grid(0).forLocal().services().deployClusterSingleton(SERVICE_NAME2, new DummyServiceImpl()).get();\n\n        assertEquals(2, grid(0).nodes().size());\n        assertEquals(2, grid(1).nodes().size());\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureMethodWithNonExistentService() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"nonExistentService\")\n            private void service(DummyService srvc) {\n                assertNull(srvc);\n            }\n\n            @Override public Object call() throws Exception {\n                return null;\n            }\n        }).get();\n    }","id":70612,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureMethodWithNonExistentService() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"nonExistentService\")\n            private void service(DummyService svc) {\n                assertNull(svc);\n            }\n\n            @Override public Object call() throws Exception {\n                return null;\n            }\n        }).get();\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureMethod() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"testService\")\n            private void service(DummyService srvc) {\n                assertNotNull(srvc);\n            }\n\n            @Override public Object call() throws Exception {\n                return null;\n            }\n        }).get();\n    }","id":70613,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureMethod() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            private DummyService svc;\n\n            @GridServiceResource(serviceName = SERVICE_NAME1)\n            private void service(DummyService svc) {\n                assertNotNull(svc);\n\n                assertTrue(svc instanceof GridService);\n\n                this.svc = svc;\n            }\n\n            @Override public Object call() throws Exception {\n                svc.noop();\n\n                return null;\n            }\n        }).get();\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/** {@inheritDoc} */\n        @Override public void put(K key, V val) {\n            cache.put(key, val);\n        }","id":70614,"modified_method":"/** {@inheritDoc} */\n        @Override public void put(K key, V val) {\n            map.put(key, val);\n        }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/** {@inheritDoc} */\n        @Override public void clear() {\n            cache.clear();\n        }","id":70615,"modified_method":"/** {@inheritDoc} */\n        @Override public void clear() {\n            map.clear();\n        }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/** {@inheritDoc} */\n        @Override public V get(K key) {\n            return cache.get(key);\n        }","id":70616,"modified_method":"/** {@inheritDoc} */\n        @Override public V get(K key) {\n            return map.get(key);\n        }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"@Override public int size() {\n            return cache.size();\n        }","id":70617,"modified_method":"@Override public int size() {\n            return map.size();\n        }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"public static void main(String[] args) throws Exception {\n        try (Grid grid = GridGain.start(\"examples/config/example-compute.xml\")) {\n            GridProjection rmts = grid.forRemotes();\n\n            if (rmts.nodes().isEmpty()) {\n                System.err.println(\">>>\");\n                System.err.println(\">>> Must start at least one remote node using \" +\n                    ComputeNodeStartup.class.getSimpleName() + '.');\n                System.err.println(\">>>\");\n\n                return;\n            }\n\n            GridServices svcs = rmts.services();\n\n            // Deploy cluster singleton.\n            svcs.deployClusterSingleton(\"myClusterSingletonService\", new SimpleService()).get();\n\n            // Deploy node singleton.\n            svcs.deployNodeSingleton(\"myNodeSingletonService\", new SimpleService()).get();\n\n            // Deploy 2 instances, regardless of number nodes.\n            svcs.deployMultiple(\"myMultiService\", new SimpleService(), 2 /*total number*/, 0 /*0 for unlimited*/).get();\n        }\n    }","id":70618,"modified_method":"public static void main(String[] args) throws Exception {\n        try (Grid grid = GridGain.start(\"examples/config/example-compute.xml\")) {\n            GridProjection rmts = grid.forRemotes();\n\n            if (rmts.nodes().isEmpty()) {\n                System.err.println(\">>>\");\n                System.err.println(\">>> Must start at least one remote node using \" +\n                    ComputeNodeStartup.class.getSimpleName() + '.');\n                System.err.println(\">>>\");\n\n                return;\n            }\n\n            GridServices svcs = rmts.services();\n\n            // Deploy cluster singleton.\n            svcs.deployClusterSingleton(\"myClusterSingletonService\", new SimpleMapServiceImpl()).get();\n\n            // Deploy node singleton.\n            svcs.deployNodeSingleton(\"myNodeSingletonService\", new SimpleMapServiceImpl()).get();\n\n            // Deploy 2 instances, regardless of number nodes.\n            svcs.deployMultiple(\"myMultiService\", new SimpleMapServiceImpl(), 2 /*total number*/, 0 /*0 for unlimited*/).get();\n\n            // Example for using a service proxy\n            // to access a remotely deployed service.\n            serviceProxyExample(grid);\n\n            // Example for auto-injecting service proxy\n            // into remote closure execution.\n            serviceInjectionExample(grid);\n        }\n    }","commit_id":"6629eed5cc5e7459138268bbb3bb108e384fe882","url":"https://github.com/apache/ignite"},{"original_method":"/** {@inheritDoc} */\n    @Override public void undeploy(GridDeployment dep) {\n        lock.writeLock().lock();\n\n        try {\n            GridInClosure<Map<Class<?>, Map<String, CachedResource>>> x = new CI1<Map<Class<?>, Map<String, CachedResource>>>() {\n                @Override public void apply(Map<Class<?>, Map<String, CachedResource>> map) {\n                    if (map != null) {\n                        for (Map<String, CachedResource> m : map.values()) {\n                            if (m != null) {\n                                undeploy(m.values());\n                            }\n                        }\n                    }\n                }\n            };\n\n            Map<Class<?>, Map<String, CachedResource>> map = dep.removeMeta(CLS_LDR_RSRC_CACHE);\n\n            x.apply(map);\n\n            Map<Class<?>, Map<Class<?>, Map<String, CachedResource>>> clsRsrcs = dep.removeMeta(CLS_RSRC_CACHE);\n\n            if (clsRsrcs != null) {\n                F.forEach(clsRsrcs.values(), x);\n            }\n        }\n        finally {\n            lock.writeLock().unlock();\n        }\n    }","id":70619,"modified_method":"/** {@inheritDoc} */\n    @Override public void undeploy(GridDeployment dep) {\n        lock.writeLock().lock();\n\n        try {\n            GridInClosure<Map<Class<?>, Map<String, CachedResource>>> x = new CI1<Map<Class<?>, Map<String, CachedResource>>>() {\n                @Override public void apply(Map<Class<?>, Map<String, CachedResource>> map) {\n                    if (map != null) {\n                        for (Map<String, CachedResource> m : map.values()) {\n                            if (m != null)\n                                undeploy(m.values());\n                        }\n                    }\n                }\n            };\n\n            Map<Class<?>, Map<String, CachedResource>> map = dep.removeMeta(CLS_LDR_RSRC_CACHE);\n\n            x.apply(map);\n\n            Map<Class<?>, Map<Class<?>, Map<String, CachedResource>>> clsRsrcs = dep.removeMeta(CLS_RSRC_CACHE);\n\n            if (clsRsrcs != null)\n                F.forEach(clsRsrcs.values(), x);\n        }\n        finally {\n            lock.writeLock().unlock();\n        }\n    }","commit_id":"262f61d831c03dd086f30b48599e0c506c73ec6b","url":"https://github.com/apache/ignite"},{"original_method":"/** {@inheritDoc} */\n    @Override public void inject(GridResourceMethod mtd, Object target, Class<?> depCls, GridDeployment dep)\n        throws GridException {\n        GridServiceResource ann = (GridServiceResource)mtd.getAnnotation();\n\n        Collection<GridService> srvcs = grid.services().services(ann.serviceName());\n\n        GridResourceUtils.inject(mtd.getMethod(), target, srvcs);\n    }","id":70620,"modified_method":"/** {@inheritDoc} */\n    @Override public void inject(GridResourceMethod mtd, Object target, Class<?> depCls, GridDeployment dep)\n        throws GridException {\n        GridServiceResource ann = (GridServiceResource)mtd.getAnnotation();\n\n        Collection<GridService> srvcs = grid.services().services(ann.serviceName());\n\n        Class<?>[] types = mtd.getMethod().getParameterTypes();\n\n        if (types.length != 1)\n            throw new GridException(\"Setter does not have single parameter of required type [type=\" +\n                srvcs.getClass().getName() + \", setter=\" + mtd + ']');\n\n        if (Collection.class.equals(types[0]))\n            GridResourceUtils.inject(mtd.getMethod(), target, srvcs);\n        else {\n            if (Collection.class.isAssignableFrom(types[0]))\n                throw new GridException(\"Failed to inject resource because target parameter should have \" +\n                    \"'Collection' type (no descendant classes are allowed).\");\n\n            GridResourceUtils.inject(mtd.getMethod(), target, F.isEmpty(srvcs) ? null : srvcs.iterator().next());\n        }\n    }","commit_id":"262f61d831c03dd086f30b48599e0c506c73ec6b","url":"https://github.com/apache/ignite"},{"original_method":"/** {@inheritDoc} */\n    @Override public void inject(GridResourceField field, Object target, Class<?> depCls, GridDeployment dep)\n        throws GridException {\n        GridServiceResource ann = (GridServiceResource)field.getAnnotation();\n\n        Collection<GridService> srvcs = grid.services().services(ann.serviceName());\n\n        GridResourceUtils.inject(field.getField(), target, srvcs);\n    }","id":70621,"modified_method":"/** {@inheritDoc} */\n    @Override public void inject(GridResourceField field, Object target, Class<?> depCls, GridDeployment dep)\n        throws GridException {\n        GridServiceResource ann = (GridServiceResource)field.getAnnotation();\n\n        Collection<GridService> srvcs = grid.services().services(ann.serviceName());\n\n        Field f = field.getField();\n\n        if (Collection.class.equals(f.getType()))\n            GridResourceUtils.inject(f, target, srvcs);\n        else {\n            if (Collection.class.isAssignableFrom(f.getType()))\n                throw new GridException(\"Failed to inject resource because target field should have \" +\n                    \"'Collection' type (no descendant classes are allowed).\");\n\n            GridResourceUtils.inject(f, target, F.isEmpty(srvcs) ? null : srvcs.iterator().next());\n        }\n    }","commit_id":"262f61d831c03dd086f30b48599e0c506c73ec6b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureField() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"testService\")\n            private Collection<DummyService> srvcs;\n\n            @Override public Object call() throws Exception {\n                assertNotNull(srvcs);\n\n                assertEquals(1, srvcs.size());\n\n                assertNotNull(srvcs.iterator().next());\n\n                return null;\n            }\n        }).get();\n    }","id":70622,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureField() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"testService\")\n            private DummyService srvc;\n\n            @Override public Object call() throws Exception {\n                assertNotNull(srvc);\n\n                return null;\n            }\n        }).get();\n    }","commit_id":"262f61d831c03dd086f30b48599e0c506c73ec6b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureMethod() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"testService\")\n            private void service(Collection<DummyService> srvcs) {\n                assertNotNull(srvcs);\n\n                assertEquals(1, srvcs.size());\n\n                assertNotNull(srvcs.iterator().next());\n            }\n\n            @Override public Object call() throws Exception {\n                return null;\n            }\n        }).get();\n    }","id":70623,"modified_method":"/**\n     * @throws Exception If failed.\n     */\n    public void testClosureMethod() throws Exception {\n        grid(0).compute().call(new GridCallable<Object>() {\n            @GridServiceResource(serviceName = \"testService\")\n            private void service(DummyService srvc) {\n                assertNotNull(srvc);\n            }\n\n            @Override public Object call() throws Exception {\n                return null;\n            }\n        }).get();\n    }","commit_id":"262f61d831c03dd086f30b48599e0c506c73ec6b","url":"https://github.com/apache/ignite"},{"original_method":"/**\n   * @param inputRowMeta\n   *          the input row metadata\n   * @param r\n   *          the input row (data)\n   * @throws KettleValidatorException\n   *           in case there is a validation error, details are stored in the exception.\n   */\n  private List<KettleValidatorException> validateFields( RowMetaInterface inputRowMeta, Object[] r )\n    throws KettleValidatorException, KettleValueException {\n    List<KettleValidatorException> exceptions = new ArrayList<KettleValidatorException>();\n\n    for ( int i = 0; i < meta.getValidations().size(); i++ ) {\n      Validation field = meta.getValidations().get( i );\n\n      int valueIndex = data.fieldIndexes[i];\n      ValueMetaInterface validatorMeta = data.constantsMeta[i];\n\n      ValueMetaInterface valueMeta = inputRowMeta.getValueMeta( valueIndex );\n      Object valueData = r[valueIndex];\n\n      // Check for null\n      //\n      boolean isNull = valueMeta.isNull( valueData );\n      if ( !field.isNullAllowed() && isNull ) {\n        KettleValidatorException exception =\n            new KettleValidatorException( this, field, KettleValidatorException.ERROR_NULL_VALUE_NOT_ALLOWED,\n                BaseMessages.getString( PKG, \"Validator.Exception.NullNotAllowed\", field.getFieldName(), inputRowMeta\n                    .getString( r ) ), field.getFieldName() );\n        if ( meta.isValidatingAll() ) {\n          exceptions.add( exception );\n        } else {\n          throw exception;\n        }\n      }\n\n      if ( field.isOnlyNullAllowed() && !isNull ) {\n        KettleValidatorException exception =\n            new KettleValidatorException( this, field, KettleValidatorException.ERROR_ONLY_NULL_VALUE_ALLOWED,\n                BaseMessages.getString( PKG, \"Validator.Exception.OnlyNullAllowed\", field.getFieldName(), inputRowMeta\n                    .getString( r ) ), field.getFieldName() );\n        if ( meta.isValidatingAll() ) {\n          exceptions.add( exception );\n        } else {\n          throw exception;\n        }\n      }\n\n      // Check the data type!\n      //\n      if ( field.isDataTypeVerified() && field.getDataType() != ValueMetaInterface.TYPE_NONE ) {\n\n        // Same data type?\n        //\n        if ( field.getDataType() != valueMeta.getType() ) {\n          KettleValidatorException exception =\n              new KettleValidatorException( this, field, KettleValidatorException.ERROR_UNEXPECTED_DATA_TYPE,\n                  BaseMessages.getString( PKG, \"Validator.Exception.UnexpectedDataType\", field.getFieldName(),\n                      valueMeta.toStringMeta(), validatorMeta.toStringMeta() ), field.getFieldName() );\n          if ( meta.isValidatingAll() ) {\n            exceptions.add( exception );\n          } else {\n            throw exception;\n          }\n        }\n      }\n\n      // Check various things if the value is not null..\n      //\n      if ( !isNull ) {\n\n        if ( data.fieldsMinimumLengthAsInt[i] >= 0 || data.fieldsMaximumLengthAsInt[i] >= 0\n            || data.minimumValue[i] != null || data.maximumValue[i] != null || data.listValues[i].length > 0\n            || field.isSourcingValues() || !Const.isEmpty( data.startString[i] ) || !Const.isEmpty( data.endString[i] )\n            || !Const.isEmpty( data.startStringNotAllowed[i] ) || !Const.isEmpty( data.endStringNotAllowed[i] )\n            || field.isOnlyNumericAllowed() || data.patternExpected[i] != null || data.patternDisallowed[i] != null ) {\n\n          String stringValue = valueMeta.getString( valueData );\n          int stringLength = stringValue.length();\n\n          // Minimum length\n          //\n          // if (field.getMinimumLength()>=0 && stringValue.length()<field.getMinimumLength() ) {\n          if ( data.fieldsMinimumLengthAsInt[i] >= 0 && stringLength < data.fieldsMinimumLengthAsInt[i] ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_SHORTER_THAN_MINIMUM_LENGTH,\n                    BaseMessages.getString( PKG, \"Validator.Exception.ShorterThanMininumLength\", field.getFieldName(),\n                        valueMeta.getString( valueData ), Integer.toString( stringValue.length() ), field\n                            .getMinimumLength() ), field.getFieldName() );\n            if ( meta.isValidatingAll() ) {\n              exceptions.add( exception );\n            } else {\n              throw exception;\n            }\n          }\n\n          // Maximum length\n          //\n          // if (field.getMaximumLength()>=0 && stringValue.length()>field.getMaximumLength() ) {\n          if ( data.fieldsMaximumLengthAsInt[i] >= 0 && stringLength > data.fieldsMaximumLengthAsInt[i] ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_LONGER_THAN_MAXIMUM_LENGTH,\n                    BaseMessages.getString( PKG, \"Validator.Exception.LongerThanMaximumLength\", field.getFieldName(),\n                        valueMeta.getString( valueData ), Integer.toString( stringValue.length() ), field\n                            .getMaximumLength() ), field.getFieldName() );\n            if ( meta.isValidatingAll() ) {\n              exceptions.add( exception );\n            } else {\n              throw exception;\n            }\n          }\n\n          // Minimal value\n          //\n          if ( data.minimumValue[i] != null && valueMeta.compare( valueData, validatorMeta, data.minimumValue[i] ) < 0 ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_LOWER_THAN_ALLOWED_MINIMUM,\n                    BaseMessages.getString( PKG, \"Validator.Exception.LowerThanMinimumValue\", field.getFieldName(),\n                        valueMeta.getString( valueData ), data.constantsMeta[i].getString( data.minimumValue[i] ) ),\n                    field.getFieldName() );\n            if ( meta.isValidatingAll() ) {\n              exceptions.add( exception );\n            } else {\n              throw exception;\n            }\n          }\n\n          // Maximum value\n          //\n          if ( data.maximumValue[i] != null && valueMeta.compare( valueData, validatorMeta, data.maximumValue[i] ) > 0 ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_HIGHER_THAN_ALLOWED_MAXIMUM,\n                    BaseMessages.getString( PKG, \"Validator.Exception.HigherThanMaximumValue\", field.getFieldName(),\n                        valueMeta.getString( valueData ), data.constantsMeta[i].getString( data.maximumValue[i] ) ),\n                    field.getFieldName() );\n            if ( meta.isValidatingAll() ) {\n              exceptions.add( exception );\n            } else {\n              throw exception;\n            }\n          }\n\n          // In list?\n          //\n          if ( field.isSourcingValues() || data.listValues[i].length > 0 ) {\n            boolean found = false;\n            for ( Object object : data.listValues[i] ) {\n              if ( object != null && data.listValues[i] != null\n                  && valueMeta.compare( valueData, validatorMeta, object ) == 0 ) {\n                found = true;\n              }\n            }\n            if ( !found ) {\n              KettleValidatorException exception =\n                  new KettleValidatorException( this, field, KettleValidatorException.ERROR_VALUE_NOT_IN_LIST,\n                      BaseMessages.getString( PKG, \"Validator.Exception.NotInList\", field.getFieldName(), valueMeta\n                          .getString( valueData ) ), field.getFieldName() );\n              if ( meta.isValidatingAll() ) {\n                exceptions.add( exception );\n              } else {\n                throw exception;\n              }\n            }\n          }\n\n          // Numeric data or strings with only\n          if ( field.isOnlyNumericAllowed() ) {\n            if ( valueMeta.isNumeric() || !containsOnlyDigits( valueMeta.getString( valueData ) ) ) {\n              KettleValidatorException exception =\n                  new KettleValidatorException( this, field, KettleValidatorException.ERROR_NON_NUMERIC_DATA,\n                      BaseMessages.getString( PKG, \"Validator.Exception.NonNumericDataNotAllowed\",\n                          field.getFieldName(), valueMeta.toStringMeta() ), field.getFieldName() );\n              if ( meta.isValidatingAll() ) {\n                exceptions.add( exception );\n              } else {\n                throw exception;\n              }\n            }\n          }\n\n          // Does not start with string value\n          //\n          if ( !Const.isEmpty( data.startString[i] ) && !stringValue.startsWith( data.startString[i] ) ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_DOES_NOT_START_WITH_STRING,\n                    BaseMessages.getString( PKG, \"Validator.Exception.DoesNotStartWithString\", field.getFieldName(),\n                        valueMeta.getString( valueData ), field.getStartString() ), field.getFieldName() );\n            if ( meta.isValidatingAll() ) {\n              exceptions.add( exception );\n            } else {\n              throw exception;\n            }\n          }\n\n          // Ends with string value\n          //\n          if ( !Const.isEmpty( data.endString[i] ) && !stringValue.endsWith( data.endString[i] ) ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_DOES_NOT_END_WITH_STRING,\n                    BaseMessages.getString( PKG, \"Validator.Exception.DoesNotStartWithString\", field.getFieldName(),\n                        valueMeta.getString( valueData ), field.getEndString() ), field.getFieldName() );\n            if ( meta.isValidatingAll() ) {\n              exceptions.add( exception );\n            } else {\n              throw exception;\n            }\n          }\n\n          // Starts with string value\n          //\n          if ( !Const.isEmpty( data.startStringNotAllowed[i] )\n              && stringValue.startsWith( data.startStringNotAllowed[i] ) ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_STARTS_WITH_STRING,\n                    BaseMessages.getString( PKG, \"Validator.Exception.StartsWithString\", field.getFieldName(),\n                        valueMeta.getString( valueData ), field.getStartStringNotAllowed() ), field.getFieldName() );\n            if ( meta.isValidatingAll() ) {\n              exceptions.add( exception );\n            } else {\n              throw exception;\n            }\n          }\n\n          // Ends with string value\n          //\n          if ( !Const.isEmpty( data.endStringNotAllowed[i] ) && stringValue.endsWith( data.endStringNotAllowed[i] ) ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_ENDS_WITH_STRING,\n                    BaseMessages.getString( PKG, \"Validator.Exception.EndsWithString\", field.getFieldName(), valueMeta\n                        .getString( valueData ), field.getEndStringNotAllowed() ), field.getFieldName() );\n            if ( meta.isValidatingAll() ) {\n              exceptions.add( exception );\n            } else {\n              throw exception;\n            }\n          }\n\n          // Matching regular expression allowed?\n          //\n          if ( data.patternExpected[i] != null ) {\n            Matcher matcher = data.patternExpected[i].matcher( stringValue );\n            if ( !matcher.matches() ) {\n              KettleValidatorException exception =\n                  new KettleValidatorException( this, field,\n                      KettleValidatorException.ERROR_MATCHING_REGULAR_EXPRESSION_EXPECTED, BaseMessages.getString( PKG,\n                          \"Validator.Exception.MatchingRegExpExpected\", field.getFieldName(), valueMeta\n                              .getString( valueData ), field.getRegularExpression() ), field.getFieldName() );\n              if ( meta.isValidatingAll() ) {\n                exceptions.add( exception );\n              } else {\n                throw exception;\n              }\n            }\n          }\n\n          // Matching regular expression NOT allowed?\n          //\n          if ( data.patternDisallowed[i] != null ) {\n            Matcher matcher = data.patternDisallowed[i].matcher( stringValue );\n            if ( matcher.matches() ) {\n              KettleValidatorException exception =\n                  new KettleValidatorException( this, field,\n                      KettleValidatorException.ERROR_MATCHING_REGULAR_EXPRESSION_NOT_ALLOWED, BaseMessages.getString(\n                          PKG, \"Validator.Exception.MatchingRegExpNotAllowed\", field.getFieldName(), valueMeta\n                              .getString( valueData ), field.getRegularExpressionNotAllowed() ), field.getFieldName() );\n              if ( meta.isValidatingAll() ) {\n                exceptions.add( exception );\n              } else {\n                throw exception;\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    return exceptions;\n  }","id":70624,"modified_method":"/**\n   * @param inputRowMeta\n   *          the input row metadata\n   * @param r\n   *          the input row (data)\n   * @throws KettleValidatorException\n   *           in case there is a validation error, details are stored in the exception.\n   */\n  private List<KettleValidatorException> validateFields( RowMetaInterface inputRowMeta, Object[] r )\n    throws KettleValidatorException, KettleValueException {\n    List<KettleValidatorException> exceptions = new ArrayList<KettleValidatorException>();\n\n    for ( int i = 0; i < meta.getValidations().size(); i++ ) {\n      Validation field = meta.getValidations().get( i );\n\n      int valueIndex = data.fieldIndexes[i];\n      ValueMetaInterface validatorMeta = data.constantsMeta[i];\n\n      ValueMetaInterface valueMeta = inputRowMeta.getValueMeta( valueIndex );\n      Object valueData = r[valueIndex];\n\n      // Check for null\n      //\n      boolean isNull = valueMeta.isNull( valueData );\n      if ( !field.isNullAllowed() && isNull ) {\n        KettleValidatorException exception =\n            new KettleValidatorException( this, field, KettleValidatorException.ERROR_NULL_VALUE_NOT_ALLOWED,\n                BaseMessages.getString( PKG, \"Validator.Exception.NullNotAllowed\", field.getFieldName(), inputRowMeta\n                    .getString( r ) ), field.getFieldName() );\n        exceptions.add( exception );\n        if ( !meta.isValidatingAll() ) {\n          return exceptions;\n        }\n      }\n\n      if ( field.isOnlyNullAllowed() && !isNull ) {\n        KettleValidatorException exception =\n            new KettleValidatorException( this, field, KettleValidatorException.ERROR_ONLY_NULL_VALUE_ALLOWED,\n                BaseMessages.getString( PKG, \"Validator.Exception.OnlyNullAllowed\", field.getFieldName(), inputRowMeta\n                    .getString( r ) ), field.getFieldName() );\n        exceptions.add( exception );\n        if ( !meta.isValidatingAll() ) {\n          return exceptions;\n        }\n      }\n\n      // Check the data type!\n      //\n      if ( field.isDataTypeVerified() && field.getDataType() != ValueMetaInterface.TYPE_NONE ) {\n\n        // Same data type?\n        //\n        if ( field.getDataType() != valueMeta.getType() ) {\n          KettleValidatorException exception =\n              new KettleValidatorException( this, field, KettleValidatorException.ERROR_UNEXPECTED_DATA_TYPE,\n                  BaseMessages.getString( PKG, \"Validator.Exception.UnexpectedDataType\", field.getFieldName(),\n                      valueMeta.toStringMeta(), validatorMeta.toStringMeta() ), field.getFieldName() );\n          exceptions.add( exception );\n          if ( !meta.isValidatingAll() ) {\n            return exceptions;\n          }\n        }\n      }\n\n      // Check various things if the value is not null..\n      //\n      if ( !isNull ) {\n\n        if ( data.fieldsMinimumLengthAsInt[i] >= 0 || data.fieldsMaximumLengthAsInt[i] >= 0\n            || data.minimumValue[i] != null || data.maximumValue[i] != null || data.listValues[i].length > 0\n            || field.isSourcingValues() || !Const.isEmpty( data.startString[i] ) || !Const.isEmpty( data.endString[i] )\n            || !Const.isEmpty( data.startStringNotAllowed[i] ) || !Const.isEmpty( data.endStringNotAllowed[i] )\n            || field.isOnlyNumericAllowed() || data.patternExpected[i] != null || data.patternDisallowed[i] != null ) {\n\n          String stringValue = valueMeta.getString( valueData );\n          int stringLength = stringValue.length();\n\n          // Minimum length\n          //\n          // if (field.getMinimumLength()>=0 && stringValue.length()<field.getMinimumLength() ) {\n          if ( data.fieldsMinimumLengthAsInt[i] >= 0 && stringLength < data.fieldsMinimumLengthAsInt[i] ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_SHORTER_THAN_MINIMUM_LENGTH,\n                    BaseMessages.getString( PKG, \"Validator.Exception.ShorterThanMininumLength\", field.getFieldName(),\n                        valueMeta.getString( valueData ), Integer.toString( stringValue.length() ), field\n                            .getMinimumLength() ), field.getFieldName() );\n            exceptions.add( exception );\n            if ( !meta.isValidatingAll() ) {\n              return exceptions;\n            }\n          }\n\n          // Maximum length\n          //\n          // if (field.getMaximumLength()>=0 && stringValue.length()>field.getMaximumLength() ) {\n          if ( data.fieldsMaximumLengthAsInt[i] >= 0 && stringLength > data.fieldsMaximumLengthAsInt[i] ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_LONGER_THAN_MAXIMUM_LENGTH,\n                    BaseMessages.getString( PKG, \"Validator.Exception.LongerThanMaximumLength\", field.getFieldName(),\n                        valueMeta.getString( valueData ), Integer.toString( stringValue.length() ), field\n                            .getMaximumLength() ), field.getFieldName() );\n            exceptions.add( exception );\n            if ( !meta.isValidatingAll() ) {\n              return exceptions;\n            }\n          }\n\n          // Minimal value\n          //\n          if ( data.minimumValue[i] != null && valueMeta.compare( valueData, validatorMeta, data.minimumValue[i] ) < 0 ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_LOWER_THAN_ALLOWED_MINIMUM,\n                    BaseMessages.getString( PKG, \"Validator.Exception.LowerThanMinimumValue\", field.getFieldName(),\n                        valueMeta.getString( valueData ), data.constantsMeta[i].getString( data.minimumValue[i] ) ),\n                    field.getFieldName() );\n            exceptions.add( exception );\n            if ( !meta.isValidatingAll() ) {\n              return exceptions;\n            }\n          }\n\n          // Maximum value\n          //\n          if ( data.maximumValue[i] != null && valueMeta.compare( valueData, validatorMeta, data.maximumValue[i] ) > 0 ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_HIGHER_THAN_ALLOWED_MAXIMUM,\n                    BaseMessages.getString( PKG, \"Validator.Exception.HigherThanMaximumValue\", field.getFieldName(),\n                        valueMeta.getString( valueData ), data.constantsMeta[i].getString( data.maximumValue[i] ) ),\n                    field.getFieldName() );\n            exceptions.add( exception );\n            if ( !meta.isValidatingAll() ) {\n              return exceptions;\n            }\n          }\n\n          // In list?\n          //\n          if ( field.isSourcingValues() || data.listValues[i].length > 0 ) {\n            boolean found = false;\n            for ( Object object : data.listValues[i] ) {\n              if ( object != null && data.listValues[i] != null\n                  && valueMeta.compare( valueData, validatorMeta, object ) == 0 ) {\n                found = true;\n              }\n            }\n            if ( !found ) {\n              KettleValidatorException exception =\n                  new KettleValidatorException( this, field, KettleValidatorException.ERROR_VALUE_NOT_IN_LIST,\n                      BaseMessages.getString( PKG, \"Validator.Exception.NotInList\", field.getFieldName(), valueMeta\n                          .getString( valueData ) ), field.getFieldName() );\n              exceptions.add( exception );\n              if ( !meta.isValidatingAll() ) {\n                return exceptions;\n              }\n            }\n          }\n\n          // Numeric data or strings with only\n          if ( field.isOnlyNumericAllowed() ) {\n            if ( valueMeta.isNumeric() || !containsOnlyDigits( valueMeta.getString( valueData ) ) ) {\n              KettleValidatorException exception =\n                  new KettleValidatorException( this, field, KettleValidatorException.ERROR_NON_NUMERIC_DATA,\n                      BaseMessages.getString( PKG, \"Validator.Exception.NonNumericDataNotAllowed\",\n                          field.getFieldName(), valueMeta.toStringMeta() ), field.getFieldName() );\n              exceptions.add( exception );\n              if ( !meta.isValidatingAll() ) {\n                return exceptions;\n              }\n            }\n          }\n\n          // Does not start with string value\n          //\n          if ( !Const.isEmpty( data.startString[i] ) && !stringValue.startsWith( data.startString[i] ) ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_DOES_NOT_START_WITH_STRING,\n                    BaseMessages.getString( PKG, \"Validator.Exception.DoesNotStartWithString\", field.getFieldName(),\n                        valueMeta.getString( valueData ), field.getStartString() ), field.getFieldName() );\n            exceptions.add( exception );\n            if ( !meta.isValidatingAll() ) {\n              return exceptions;\n            }\n          }\n\n          // Ends with string value\n          //\n          if ( !Const.isEmpty( data.endString[i] ) && !stringValue.endsWith( data.endString[i] ) ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_DOES_NOT_END_WITH_STRING,\n                    BaseMessages.getString( PKG, \"Validator.Exception.DoesNotStartWithString\", field.getFieldName(),\n                        valueMeta.getString( valueData ), field.getEndString() ), field.getFieldName() );\n            exceptions.add( exception );\n            if ( !meta.isValidatingAll() ) {\n              return exceptions;\n            }\n          }\n\n          // Starts with string value\n          //\n          if ( !Const.isEmpty( data.startStringNotAllowed[i] )\n              && stringValue.startsWith( data.startStringNotAllowed[i] ) ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_STARTS_WITH_STRING,\n                    BaseMessages.getString( PKG, \"Validator.Exception.StartsWithString\", field.getFieldName(),\n                        valueMeta.getString( valueData ), field.getStartStringNotAllowed() ), field.getFieldName() );\n            exceptions.add( exception );\n            if ( !meta.isValidatingAll() ) {\n              return exceptions;\n            }\n          }\n\n          // Ends with string value\n          //\n          if ( !Const.isEmpty( data.endStringNotAllowed[i] ) && stringValue.endsWith( data.endStringNotAllowed[i] ) ) {\n            KettleValidatorException exception =\n                new KettleValidatorException( this, field, KettleValidatorException.ERROR_ENDS_WITH_STRING,\n                    BaseMessages.getString( PKG, \"Validator.Exception.EndsWithString\", field.getFieldName(), valueMeta\n                        .getString( valueData ), field.getEndStringNotAllowed() ), field.getFieldName() );\n            exceptions.add( exception );\n            if ( !meta.isValidatingAll() ) {\n              return exceptions;\n            }\n          }\n\n          // Matching regular expression allowed?\n          //\n          if ( data.patternExpected[i] != null ) {\n            Matcher matcher = data.patternExpected[i].matcher( stringValue );\n            if ( !matcher.matches() ) {\n              KettleValidatorException exception =\n                  new KettleValidatorException( this, field,\n                      KettleValidatorException.ERROR_MATCHING_REGULAR_EXPRESSION_EXPECTED, BaseMessages.getString( PKG,\n                          \"Validator.Exception.MatchingRegExpExpected\", field.getFieldName(), valueMeta\n                              .getString( valueData ), field.getRegularExpression() ), field.getFieldName() );\n              exceptions.add( exception );\n              if ( !meta.isValidatingAll() ) {\n                return exceptions;\n              }\n            }\n          }\n\n          // Matching regular expression NOT allowed?\n          //\n          if ( data.patternDisallowed[i] != null ) {\n            Matcher matcher = data.patternDisallowed[i].matcher( stringValue );\n            if ( matcher.matches() ) {\n              KettleValidatorException exception =\n                  new KettleValidatorException( this, field,\n                      KettleValidatorException.ERROR_MATCHING_REGULAR_EXPRESSION_NOT_ALLOWED, BaseMessages.getString(\n                          PKG, \"Validator.Exception.MatchingRegExpNotAllowed\", field.getFieldName(), valueMeta\n                              .getString( valueData ), field.getRegularExpressionNotAllowed() ), field.getFieldName() );\n              exceptions.add( exception );\n              if ( !meta.isValidatingAll() ) {\n                return exceptions;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return exceptions;\n  }","commit_id":"ce5707c36997d3762d2cc6c009c6ead74fbfb2a9","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/node/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingJsonNodeUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createNodeIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( entity ).post( ClientResponse.class );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().getFirst( \"Location\" ) );\n        assertEquals( Arrays.asList( (Long) nodeId ), helper.getIndexedNodes( indexName, key, value ) );\n    }","id":70625,"modified_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/node/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingJsonNodeUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createNodeIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( entity ).post( ClientResponse.class );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().getFirst( \"Location\" ) );\n        assertEquals( Arrays.asList( (Long) nodeId ), helper.getIndexedNodes( indexName, key, value ) );\n    }","commit_id":"4712652c89467f308d1fee865e42e97d203f5a60","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200AndArrayOfNodeRepsWhenGettingFromIndex() throws PropertyValueException\n    {\n        String key = \"key_get\";\n        String value = \"value\";\n\n        String name1 = \"Thomas Anderson\";\n        String name2 = \"Agent Smith\";\n\n        String indexName = \"matrix\";\n        ClientResponse responseToPost = Client.create().resource( functionalTestHelper.nodeUri() )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( \"{\\\"name\\\":\\\"\" + name1 + \"\\\"}\", MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeUri() ).accept( MediaType.APPLICATION_JSON ).entity( \"{\\\"name\\\":\\\"\" + name2 + \"\\\"}\",\n                MediaType.APPLICATION_JSON ).post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .entity( JsonHelper.createJsonFrom( location1 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .entity( JsonHelper.createJsonFrom( location2 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        Map<String, String> uriToName = new HashMap<String, String>();\n        uriToName.put( indexLocation1.toString(), name1 );\n        uriToName.put( indexLocation2.toString(), name2 );\n\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value ).accept( MediaType.APPLICATION_JSON )\n                .get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n        Collection<?> items = (Collection<?>) JsonHelper.jsonToSingleValue( response.getEntity( String.class ) );\n        int counter = 0;\n        for ( Object item : items )\n        {\n            Map<?, ?> map = (Map<?, ?>) item;\n            Map<?, ?> properties = (Map<?, ?>) map.get( \"data\" );\n            assertNotNull( map.get( \"self\" ) );\n            String indexedUri = (String) map.get( \"indexed\" );\n            assertEquals( uriToName.get( indexedUri ), properties.get( \"name\" ) );\n            counter++;\n        }\n        assertEquals( 2, counter );\n    }","id":70626,"modified_method":"@Test\n    public void shouldGet200AndArrayOfNodeRepsWhenGettingFromIndex() throws PropertyValueException\n    {\n        String key = \"key_get\";\n        String value = \"value\";\n\n        String name1 = \"Thomas Anderson\";\n        String name2 = \"Agent Smith\";\n\n        String indexName = \"matrix\";\n        ClientResponse responseToPost = Client.create().resource( functionalTestHelper.nodeUri() )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( \"{\\\"name\\\":\\\"\" + name1 + \"\\\"}\", MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeUri() ).accept( MediaType.APPLICATION_JSON ).entity( \"{\\\"name\\\":\\\"\" + name2 + \"\\\"}\",\n                MediaType.APPLICATION_JSON ).post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .entity( JsonHelper.createJsonFrom( location1 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .entity( JsonHelper.createJsonFrom( location2 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        Map<String, String> uriToName = new HashMap<String, String>();\n        uriToName.put( indexLocation1.toString(), name1 );\n        uriToName.put( indexLocation2.toString(), name2 );\n\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) ).accept( MediaType.APPLICATION_JSON )\n                .get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n        Collection<?> items = (Collection<?>) JsonHelper.jsonToSingleValue( response.getEntity( String.class ) );\n        int counter = 0;\n        for ( Object item : items )\n        {\n            Map<?, ?> map = (Map<?, ?>) item;\n            Map<?, ?> properties = (Map<?, ?>) map.get( \"data\" );\n            assertNotNull( map.get( \"self\" ) );\n            String indexedUri = (String) map.get( \"indexed\" );\n            assertEquals( uriToName.get( indexedUri ), properties.get( \"name\" ) );\n            counter++;\n        }\n        assertEquals( 2, counter );\n    }","commit_id":"4712652c89467f308d1fee865e42e97d203f5a60","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200WhenGettingNodesFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/non-existent-key/non-existent-value\" ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","id":70627,"modified_method":"@Test\n    public void shouldGet200WhenGettingNodesFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, \"non-existent-key\", \"non-existent-value\" ) ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","commit_id":"4712652c89467f308d1fee865e42e97d203f5a60","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldRespondWith400WhenSendingCorruptJson() throws Exception\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"botherable-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( functionalTestHelper.nodeUri( nodeId ) ).post( ClientResponse.class );\n        assertEquals( 400, response.getStatus() );\n    }","id":70628,"modified_method":"@Test\n    public void shouldRespondWith400WhenSendingCorruptJson() throws Exception\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"botherable-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( functionalTestHelper.nodeUri( nodeId ) ).post( ClientResponse.class );\n        assertEquals( 400, response.getStatus() );\n    }","commit_id":"4712652c89467f308d1fee865e42e97d203f5a60","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGetNodeRepresentationFromIndexUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key2\";\n        String value = \"value\";\n\n        String indexName = \"mindex\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON ).entity( JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) ) ).post( ClientResponse.class );\n\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        String indexUri = response.getHeaders().getFirst( \"Location\" );\n\n        response = Client.create().resource( indexUri ).accept( MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n\n        String entity = response.getEntity( String.class );\n\n        Map<String, Object> map = JsonHelper.jsonToMap( entity );\n        assertNotNull( map.get( \"self\" ) );\n    }","id":70629,"modified_method":"@Test\n    public void shouldGetNodeRepresentationFromIndexUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key2\";\n        String value = \"value\";\n\n        String indexName = \"mindex\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON ).entity( JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) ) ).post( ClientResponse.class );\n\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        String indexUri = response.getHeaders().getFirst( \"Location\" );\n        \n        System.out.println(indexUri);\n\n        response = Client.create().resource( indexUri ).accept( MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n\n        String entity = response.getEntity( String.class );\n\n        Map<String, Object> map = JsonHelper.jsonToMap( entity );\n        assertNotNull( map.get( \"self\" ) );\n    }","commit_id":"4712652c89467f308d1fee865e42e97d203f5a60","url":"https://github.com/neo4j/neo4j"},{"original_method":"private JaxRsResponse httpGetIndexRelationshipNameKeyValue( String indexName, String key, String value, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .accept( acceptType )\n                .get( ClientResponse.class ) );\n    }","id":70630,"modified_method":"private JaxRsResponse httpGetIndexRelationshipNameKeyValue( String indexName, String key, String value, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.indexRelationshipUri( indexName, key, value ) )\n                .accept( acceptType )\n                .get( ClientResponse.class ) );\n    }","commit_id":"4712652c89467f308d1fee865e42e97d203f5a60","url":"https://github.com/neo4j/neo4j"},{"original_method":"private JaxRsResponse httpPostIndexRelationshipNameKeyValue( String indexName, String key, String value, String entity, MediaType postType, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( postType )\n                .accept( acceptType )\n                .entity( entity ).post( ClientResponse.class ) );\n    }","id":70631,"modified_method":"private JaxRsResponse httpPostIndexRelationshipNameKeyValue( String indexName, String key, String value, String entity, MediaType postType, MediaType acceptType )\n    {\n        return new JaxRsResponse(\n                Client.create().resource(\n                        functionalTestHelper.indexRelationshipUri( indexName, key, value ) )\n                .type( postType )\n                .accept( acceptType )\n                .entity( entity ).post( ClientResponse.class ) );\n    }","commit_id":"4712652c89467f308d1fee865e42e97d203f5a60","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200WhenGettingRelationshipFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createRelationshipIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/non-existent-key/non-existent-value\" ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","id":70632,"modified_method":"@Test\n    public void shouldGet200WhenGettingRelationshipFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createRelationshipIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexRelationshipUri( indexName, \"non-existent-key\", \"non-existent-value\" ) ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","commit_id":"4712652c89467f308d1fee865e42e97d203f5a60","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200AndArrayOfNodeRepsWhenGettingFromIndex() throws PropertyValueException\n    {\n        String key = \"key_get\";\n        String value = \"value\";\n\n        String name1 = \"Thomas Anderson\";\n        String name2 = \"Agent Smith\";\n\n        String indexName = \"matrix\";\n        ClientResponse responseToPost = Client.create().resource( functionalTestHelper.nodeUri() )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( \"{\\\"name\\\":\\\"\" + name1 + \"\\\"}\", MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeUri() ).accept( MediaType.APPLICATION_JSON ).entity( \"{\\\"name\\\":\\\"\" + name2 + \"\\\"}\",\n                MediaType.APPLICATION_JSON ).post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .entity( JsonHelper.createJsonFrom( location1 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .entity( JsonHelper.createJsonFrom( location2 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        Map<String, String> uriToName = new HashMap<String, String>();\n        uriToName.put( indexLocation1.toString(), name1 );\n        uriToName.put( indexLocation2.toString(), name2 );\n\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value ).accept( MediaType.APPLICATION_JSON )\n                .get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n        Collection<?> items = (Collection<?>) JsonHelper.jsonToSingleValue( response.getEntity( String.class ) );\n        int counter = 0;\n        for ( Object item : items )\n        {\n            Map<?, ?> map = (Map<?, ?>) item;\n            Map<?, ?> properties = (Map<?, ?>) map.get( \"data\" );\n            assertNotNull( map.get( \"self\" ) );\n            String indexedUri = (String) map.get( \"indexed\" );\n            assertEquals( uriToName.get( indexedUri ), properties.get( \"name\" ) );\n            counter++;\n        }\n        assertEquals( 2, counter );\n    }","id":70633,"modified_method":"@Test\n    public void shouldGet200AndArrayOfNodeRepsWhenGettingFromIndex() throws PropertyValueException\n    {\n        String key = \"key_get\";\n        String value = \"value\";\n\n        String name1 = \"Thomas Anderson\";\n        String name2 = \"Agent Smith\";\n\n        String indexName = \"matrix\";\n        ClientResponse responseToPost = Client.create().resource( functionalTestHelper.nodeUri() )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( \"{\\\"name\\\":\\\"\" + name1 + \"\\\"}\", MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeUri() ).accept( MediaType.APPLICATION_JSON ).entity( \"{\\\"name\\\":\\\"\" + name2 + \"\\\"}\",\n                MediaType.APPLICATION_JSON ).post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .entity( JsonHelper.createJsonFrom( location1 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .entity( JsonHelper.createJsonFrom( location2 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        Map<String, String> uriToName = new HashMap<String, String>();\n        uriToName.put( indexLocation1.toString(), name1 );\n        uriToName.put( indexLocation2.toString(), name2 );\n\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) ).accept( MediaType.APPLICATION_JSON )\n                .get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n        Collection<?> items = (Collection<?>) JsonHelper.jsonToSingleValue( response.getEntity( String.class ) );\n        int counter = 0;\n        for ( Object item : items )\n        {\n            Map<?, ?> map = (Map<?, ?>) item;\n            Map<?, ?> properties = (Map<?, ?>) map.get( \"data\" );\n            assertNotNull( map.get( \"self\" ) );\n            String indexedUri = (String) map.get( \"indexed\" );\n            assertEquals( uriToName.get( indexedUri ), properties.get( \"name\" ) );\n            counter++;\n        }\n        assertEquals( 2, counter );\n    }","commit_id":"3c283e15847a8dd61bfd6be4b2f672e32513fcd4","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/node/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingJsonNodeUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createNodeIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( entity ).post( ClientResponse.class );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().getFirst( \"Location\" ) );\n        assertEquals( Arrays.asList( (Long) nodeId ), helper.getIndexedNodes( indexName, key, value ) );\n    }","id":70634,"modified_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/node/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingJsonNodeUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createNodeIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( entity ).post( ClientResponse.class );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().getFirst( \"Location\" ) );\n        assertEquals( Arrays.asList( (Long) nodeId ), helper.getIndexedNodes( indexName, key, value ) );\n    }","commit_id":"3c283e15847a8dd61bfd6be4b2f672e32513fcd4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldRespondWith400WhenSendingCorruptJson() throws Exception\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"botherable-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( functionalTestHelper.nodeUri( nodeId ) ).post( ClientResponse.class );\n        assertEquals( 400, response.getStatus() );\n    }","id":70635,"modified_method":"@Test\n    public void shouldRespondWith400WhenSendingCorruptJson() throws Exception\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"botherable-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( functionalTestHelper.nodeUri( nodeId ) ).post( ClientResponse.class );\n        assertEquals( 400, response.getStatus() );\n    }","commit_id":"3c283e15847a8dd61bfd6be4b2f672e32513fcd4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGetNodeRepresentationFromIndexUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key2\";\n        String value = \"value\";\n\n        String indexName = \"mindex\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON ).entity( JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) ) ).post( ClientResponse.class );\n\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        String indexUri = response.getHeaders().getFirst( \"Location\" );\n\n        response = Client.create().resource( indexUri ).accept( MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n\n        String entity = response.getEntity( String.class );\n\n        Map<String, Object> map = JsonHelper.jsonToMap( entity );\n        assertNotNull( map.get( \"self\" ) );\n    }","id":70636,"modified_method":"@Test\n    public void shouldGetNodeRepresentationFromIndexUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key2\";\n        String value = \"value\";\n\n        String indexName = \"mindex\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON ).entity( JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) ) ).post( ClientResponse.class );\n\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        String indexUri = response.getHeaders().getFirst( \"Location\" );\n        \n        System.out.println(indexUri);\n\n        response = Client.create().resource( indexUri ).accept( MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n\n        String entity = response.getEntity( String.class );\n\n        Map<String, Object> map = JsonHelper.jsonToMap( entity );\n        assertNotNull( map.get( \"self\" ) );\n    }","commit_id":"3c283e15847a8dd61bfd6be4b2f672e32513fcd4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200WhenGettingNodesFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/non-existent-key/non-existent-value\" ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","id":70637,"modified_method":"@Test\n    public void shouldGet200WhenGettingNodesFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, \"non-existent-key\", \"non-existent-value\" ) ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","commit_id":"3c283e15847a8dd61bfd6be4b2f672e32513fcd4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200WhenGettingRelationshipFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createRelationshipIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/non-existent-key/non-existent-value\" ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","id":70638,"modified_method":"@Test\n    public void shouldGet200WhenGettingRelationshipFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createRelationshipIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexRelationshipUri( indexName, \"non-existent-key\", \"non-existent-value\" ) ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","commit_id":"3c283e15847a8dd61bfd6be4b2f672e32513fcd4","url":"https://github.com/neo4j/neo4j"},{"original_method":"private JaxRsResponse httpPostIndexRelationshipNameKeyValue( String indexName, String key, String value, String entity, MediaType postType, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( postType )\n                .accept( acceptType )\n                .entity( entity ).post( ClientResponse.class ) );\n    }","id":70639,"modified_method":"private JaxRsResponse httpPostIndexRelationshipNameKeyValue( String indexName, String key, String value, String entity, MediaType postType, MediaType acceptType )\n    {\n        return new JaxRsResponse(\n                Client.create().resource(\n                        functionalTestHelper.indexRelationshipUri( indexName, key, value ) )\n                .type( postType )\n                .accept( acceptType )\n                .entity( entity ).post( ClientResponse.class ) );\n    }","commit_id":"3c283e15847a8dd61bfd6be4b2f672e32513fcd4","url":"https://github.com/neo4j/neo4j"},{"original_method":"private JaxRsResponse httpGetIndexRelationshipNameKeyValue( String indexName, String key, String value, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .accept( acceptType )\n                .get( ClientResponse.class ) );\n    }","id":70640,"modified_method":"private JaxRsResponse httpGetIndexRelationshipNameKeyValue( String indexName, String key, String value, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.indexRelationshipUri( indexName, key, value ) )\n                .accept( acceptType )\n                .get( ClientResponse.class ) );\n    }","commit_id":"3c283e15847a8dd61bfd6be4b2f672e32513fcd4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200WhenGettingNodesFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/non-existent-key/non-existent-value\" ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","id":70641,"modified_method":"@Test\n    public void shouldGet200WhenGettingNodesFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, \"non-existent-key\", \"non-existent-value\" ) ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","commit_id":"7b0c1a4820884fe057c252454b8a88302ed2a3ce","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldRespondWith400WhenSendingCorruptJson() throws Exception\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"botherable-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( functionalTestHelper.nodeUri( nodeId ) ).post( ClientResponse.class );\n        assertEquals( 400, response.getStatus() );\n    }","id":70642,"modified_method":"@Test\n    public void shouldRespondWith400WhenSendingCorruptJson() throws Exception\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"botherable-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( functionalTestHelper.nodeUri( nodeId ) ).post( ClientResponse.class );\n        assertEquals( 400, response.getStatus() );\n    }","commit_id":"7b0c1a4820884fe057c252454b8a88302ed2a3ce","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/node/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingJsonNodeUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createNodeIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( entity ).post( ClientResponse.class );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().getFirst( \"Location\" ) );\n        assertEquals( Arrays.asList( (Long) nodeId ), helper.getIndexedNodes( indexName, key, value ) );\n    }","id":70643,"modified_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/node/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingJsonNodeUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createNodeIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( entity ).post( ClientResponse.class );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().getFirst( \"Location\" ) );\n        assertEquals( Arrays.asList( (Long) nodeId ), helper.getIndexedNodes( indexName, key, value ) );\n    }","commit_id":"7b0c1a4820884fe057c252454b8a88302ed2a3ce","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGetNodeRepresentationFromIndexUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key2\";\n        String value = \"value\";\n\n        String indexName = \"mindex\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON ).entity( JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) ) ).post( ClientResponse.class );\n\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        String indexUri = response.getHeaders().getFirst( \"Location\" );\n\n        response = Client.create().resource( indexUri ).accept( MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n\n        String entity = response.getEntity( String.class );\n\n        Map<String, Object> map = JsonHelper.jsonToMap( entity );\n        assertNotNull( map.get( \"self\" ) );\n    }","id":70644,"modified_method":"@Test\n    public void shouldGetNodeRepresentationFromIndexUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key2\";\n        String value = \"value\";\n\n        String indexName = \"mindex\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON ).entity( JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) ) ).post( ClientResponse.class );\n\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        String indexUri = response.getHeaders().getFirst( \"Location\" );\n        \n        System.out.println(indexUri);\n\n        response = Client.create().resource( indexUri ).accept( MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n\n        String entity = response.getEntity( String.class );\n\n        Map<String, Object> map = JsonHelper.jsonToMap( entity );\n        assertNotNull( map.get( \"self\" ) );\n    }","commit_id":"7b0c1a4820884fe057c252454b8a88302ed2a3ce","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200AndArrayOfNodeRepsWhenGettingFromIndex() throws PropertyValueException\n    {\n        String key = \"key_get\";\n        String value = \"value\";\n\n        String name1 = \"Thomas Anderson\";\n        String name2 = \"Agent Smith\";\n\n        String indexName = \"matrix\";\n        ClientResponse responseToPost = Client.create().resource( functionalTestHelper.nodeUri() )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( \"{\\\"name\\\":\\\"\" + name1 + \"\\\"}\", MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeUri() ).accept( MediaType.APPLICATION_JSON ).entity( \"{\\\"name\\\":\\\"\" + name2 + \"\\\"}\",\n                MediaType.APPLICATION_JSON ).post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .entity( JsonHelper.createJsonFrom( location1 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .entity( JsonHelper.createJsonFrom( location2 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        Map<String, String> uriToName = new HashMap<String, String>();\n        uriToName.put( indexLocation1.toString(), name1 );\n        uriToName.put( indexLocation2.toString(), name2 );\n\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value ).accept( MediaType.APPLICATION_JSON )\n                .get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n        Collection<?> items = (Collection<?>) JsonHelper.jsonToSingleValue( response.getEntity( String.class ) );\n        int counter = 0;\n        for ( Object item : items )\n        {\n            Map<?, ?> map = (Map<?, ?>) item;\n            Map<?, ?> properties = (Map<?, ?>) map.get( \"data\" );\n            assertNotNull( map.get( \"self\" ) );\n            String indexedUri = (String) map.get( \"indexed\" );\n            assertEquals( uriToName.get( indexedUri ), properties.get( \"name\" ) );\n            counter++;\n        }\n        assertEquals( 2, counter );\n    }","id":70645,"modified_method":"@Test\n    public void shouldGet200AndArrayOfNodeRepsWhenGettingFromIndex() throws PropertyValueException\n    {\n        String key = \"key_get\";\n        String value = \"value\";\n\n        String name1 = \"Thomas Anderson\";\n        String name2 = \"Agent Smith\";\n\n        String indexName = \"matrix\";\n        ClientResponse responseToPost = Client.create().resource( functionalTestHelper.nodeUri() )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( \"{\\\"name\\\":\\\"\" + name1 + \"\\\"}\", MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeUri() ).accept( MediaType.APPLICATION_JSON ).entity( \"{\\\"name\\\":\\\"\" + name2 + \"\\\"}\",\n                MediaType.APPLICATION_JSON ).post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .entity( JsonHelper.createJsonFrom( location1 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .entity( JsonHelper.createJsonFrom( location2 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        Map<String, String> uriToName = new HashMap<String, String>();\n        uriToName.put( indexLocation1.toString(), name1 );\n        uriToName.put( indexLocation2.toString(), name2 );\n\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) ).accept( MediaType.APPLICATION_JSON )\n                .get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n        Collection<?> items = (Collection<?>) JsonHelper.jsonToSingleValue( response.getEntity( String.class ) );\n        int counter = 0;\n        for ( Object item : items )\n        {\n            Map<?, ?> map = (Map<?, ?>) item;\n            Map<?, ?> properties = (Map<?, ?>) map.get( \"data\" );\n            assertNotNull( map.get( \"self\" ) );\n            String indexedUri = (String) map.get( \"indexed\" );\n            assertEquals( uriToName.get( indexedUri ), properties.get( \"name\" ) );\n            counter++;\n        }\n        assertEquals( 2, counter );\n    }","commit_id":"7b0c1a4820884fe057c252454b8a88302ed2a3ce","url":"https://github.com/neo4j/neo4j"},{"original_method":"private JaxRsResponse httpPostIndexRelationshipNameKeyValue( String indexName, String key, String value, String entity, MediaType postType, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( postType )\n                .accept( acceptType )\n                .entity( entity ).post( ClientResponse.class ) );\n    }","id":70646,"modified_method":"private JaxRsResponse httpPostIndexRelationshipNameKeyValue( String indexName, String key, String value, String entity, MediaType postType, MediaType acceptType )\n    {\n        return new JaxRsResponse(\n                Client.create().resource(\n                        functionalTestHelper.indexRelationshipUri( indexName, key, value ) )\n                .type( postType )\n                .accept( acceptType )\n                .entity( entity ).post( ClientResponse.class ) );\n    }","commit_id":"7b0c1a4820884fe057c252454b8a88302ed2a3ce","url":"https://github.com/neo4j/neo4j"},{"original_method":"private JaxRsResponse httpGetIndexRelationshipNameKeyValue( String indexName, String key, String value, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .accept( acceptType )\n                .get( ClientResponse.class ) );\n    }","id":70647,"modified_method":"private JaxRsResponse httpGetIndexRelationshipNameKeyValue( String indexName, String key, String value, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.indexRelationshipUri( indexName, key, value ) )\n                .accept( acceptType )\n                .get( ClientResponse.class ) );\n    }","commit_id":"7b0c1a4820884fe057c252454b8a88302ed2a3ce","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200WhenGettingRelationshipFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createRelationshipIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/non-existent-key/non-existent-value\" ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","id":70648,"modified_method":"@Test\n    public void shouldGet200WhenGettingRelationshipFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createRelationshipIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexRelationshipUri( indexName, \"non-existent-key\", \"non-existent-value\" ) ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","commit_id":"7b0c1a4820884fe057c252454b8a88302ed2a3ce","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGetNodeRepresentationFromIndexUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key2\";\n        String value = \"value\";\n\n        String indexName = \"mindex\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON ).entity( JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) ) ).post( ClientResponse.class );\n\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        String indexUri = response.getHeaders().getFirst( \"Location\" );\n\n        response = Client.create().resource( indexUri ).accept( MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n\n        String entity = response.getEntity( String.class );\n\n        Map<String, Object> map = JsonHelper.jsonToMap( entity );\n        assertNotNull( map.get( \"self\" ) );\n    }","id":70649,"modified_method":"@Test\n    public void shouldGetNodeRepresentationFromIndexUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key2\";\n        String value = \"value\";\n\n        String indexName = \"mindex\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON ).entity( JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) ) ).post( ClientResponse.class );\n\n        assertEquals( Status.CREATED.getStatusCode(), response.getStatus() );\n        String indexUri = response.getHeaders().getFirst( \"Location\" );\n        \n        System.out.println(indexUri);\n\n        response = Client.create().resource( indexUri ).accept( MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n\n        String entity = response.getEntity( String.class );\n\n        Map<String, Object> map = JsonHelper.jsonToMap( entity );\n        assertNotNull( map.get( \"self\" ) );\n    }","commit_id":"5d521d8a98abf164adb874b063d96814bfc40575","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldRespondWith400WhenSendingCorruptJson() throws Exception\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"botherable-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( functionalTestHelper.nodeUri( nodeId ) ).post( ClientResponse.class );\n        assertEquals( 400, response.getStatus() );\n    }","id":70650,"modified_method":"@Test\n    public void shouldRespondWith400WhenSendingCorruptJson() throws Exception\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"botherable-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( functionalTestHelper.nodeUri( nodeId ) ).post( ClientResponse.class );\n        assertEquals( 400, response.getStatus() );\n    }","commit_id":"5d521d8a98abf164adb874b063d96814bfc40575","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/node/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingJsonNodeUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createNodeIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( entity ).post( ClientResponse.class );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().getFirst( \"Location\" ) );\n        assertEquals( Arrays.asList( (Long) nodeId ), helper.getIndexedNodes( indexName, key, value ) );\n    }","id":70651,"modified_method":"/**\n     * POST ${org.neo4j.server.rest.web}/index/node/{indexName}/{key}/{value}\n     * \"http://uri.for.node.to.index\"\n     */\n    @Test\n    public void shouldRespondWith201CreatedWhenIndexingJsonNodeUri() throws DatabaseBlockedException, JsonParseException\n    {\n        long nodeId = helper.createNode();\n        String key = \"key\";\n        String value = \"value\";\n        String indexName = \"testy\";\n        helper.createNodeIndex( indexName );\n        String entity = JsonHelper.createJsonFrom( functionalTestHelper.nodeUri( nodeId ) );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .type( MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( entity ).post( ClientResponse.class );\n        assertEquals( 201, response.getStatus() );\n        assertNotNull( response.getHeaders().getFirst( \"Location\" ) );\n        assertEquals( Arrays.asList( (Long) nodeId ), helper.getIndexedNodes( indexName, key, value ) );\n    }","commit_id":"5d521d8a98abf164adb874b063d96814bfc40575","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200WhenGettingNodesFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/non-existent-key/non-existent-value\" ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","id":70652,"modified_method":"@Test\n    public void shouldGet200WhenGettingNodesFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createNodeIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, \"non-existent-key\", \"non-existent-value\" ) ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","commit_id":"5d521d8a98abf164adb874b063d96814bfc40575","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200AndArrayOfNodeRepsWhenGettingFromIndex() throws PropertyValueException\n    {\n        String key = \"key_get\";\n        String value = \"value\";\n\n        String name1 = \"Thomas Anderson\";\n        String name2 = \"Agent Smith\";\n\n        String indexName = \"matrix\";\n        ClientResponse responseToPost = Client.create().resource( functionalTestHelper.nodeUri() )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( \"{\\\"name\\\":\\\"\" + name1 + \"\\\"}\", MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeUri() ).accept( MediaType.APPLICATION_JSON ).entity( \"{\\\"name\\\":\\\"\" + name2 + \"\\\"}\",\n                MediaType.APPLICATION_JSON ).post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .entity( JsonHelper.createJsonFrom( location1 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .entity( JsonHelper.createJsonFrom( location2 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        Map<String, String> uriToName = new HashMap<String, String>();\n        uriToName.put( indexLocation1.toString(), name1 );\n        uriToName.put( indexLocation2.toString(), name2 );\n\n        ClientResponse response = Client.create().resource( functionalTestHelper.nodeIndexUri() + indexName + \"/\" + key + \"/\" + value ).accept( MediaType.APPLICATION_JSON )\n                .get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n        Collection<?> items = (Collection<?>) JsonHelper.jsonToSingleValue( response.getEntity( String.class ) );\n        int counter = 0;\n        for ( Object item : items )\n        {\n            Map<?, ?> map = (Map<?, ?>) item;\n            Map<?, ?> properties = (Map<?, ?>) map.get( \"data\" );\n            assertNotNull( map.get( \"self\" ) );\n            String indexedUri = (String) map.get( \"indexed\" );\n            assertEquals( uriToName.get( indexedUri ), properties.get( \"name\" ) );\n            counter++;\n        }\n        assertEquals( 2, counter );\n    }","id":70653,"modified_method":"@Test\n    public void shouldGet200AndArrayOfNodeRepsWhenGettingFromIndex() throws PropertyValueException\n    {\n        String key = \"key_get\";\n        String value = \"value\";\n\n        String name1 = \"Thomas Anderson\";\n        String name2 = \"Agent Smith\";\n\n        String indexName = \"matrix\";\n        ClientResponse responseToPost = Client.create().resource( functionalTestHelper.nodeUri() )\n                .accept( MediaType.APPLICATION_JSON )\n                .entity( \"{\\\"name\\\":\\\"\" + name1 + \"\\\"}\", MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.nodeUri() ).accept( MediaType.APPLICATION_JSON ).entity( \"{\\\"name\\\":\\\"\" + name2 + \"\\\"}\",\n                MediaType.APPLICATION_JSON ).post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String location2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .entity( JsonHelper.createJsonFrom( location1 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation1 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        responseToPost = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) )\n                .entity( JsonHelper.createJsonFrom( location2 ), MediaType.APPLICATION_JSON )\n                .accept( MediaType.APPLICATION_JSON )\n                .post( ClientResponse.class );\n        assertEquals( 201, responseToPost.getStatus() );\n        String indexLocation2 = responseToPost.getHeaders().getFirst( HttpHeaders.LOCATION );\n        Map<String, String> uriToName = new HashMap<String, String>();\n        uriToName.put( indexLocation1.toString(), name1 );\n        uriToName.put( indexLocation2.toString(), name2 );\n\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexNodeUri( indexName, key, value ) ).accept( MediaType.APPLICATION_JSON )\n                .get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n        Collection<?> items = (Collection<?>) JsonHelper.jsonToSingleValue( response.getEntity( String.class ) );\n        int counter = 0;\n        for ( Object item : items )\n        {\n            Map<?, ?> map = (Map<?, ?>) item;\n            Map<?, ?> properties = (Map<?, ?>) map.get( \"data\" );\n            assertNotNull( map.get( \"self\" ) );\n            String indexedUri = (String) map.get( \"indexed\" );\n            assertEquals( uriToName.get( indexedUri ), properties.get( \"name\" ) );\n            counter++;\n        }\n        assertEquals( 2, counter );\n    }","commit_id":"5d521d8a98abf164adb874b063d96814bfc40575","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldGet200WhenGettingRelationshipFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createRelationshipIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/non-existent-key/non-existent-value\" ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","id":70654,"modified_method":"@Test\n    public void shouldGet200WhenGettingRelationshipFromIndexWithNoHits()\n    {\n        String indexName = \"empty-index\";\n        helper.createRelationshipIndex( indexName );\n        ClientResponse response = Client.create().resource( functionalTestHelper.indexRelationshipUri( indexName, \"non-existent-key\", \"non-existent-value\" ) ).accept(\n                MediaType.APPLICATION_JSON ).get( ClientResponse.class );\n        assertEquals( 200, response.getStatus() );\n    }","commit_id":"5d521d8a98abf164adb874b063d96814bfc40575","url":"https://github.com/neo4j/neo4j"},{"original_method":"private JaxRsResponse httpGetIndexRelationshipNameKeyValue( String indexName, String key, String value, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .accept( acceptType )\n                .get( ClientResponse.class ) );\n    }","id":70655,"modified_method":"private JaxRsResponse httpGetIndexRelationshipNameKeyValue( String indexName, String key, String value, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.indexRelationshipUri( indexName, key, value ) )\n                .accept( acceptType )\n                .get( ClientResponse.class ) );\n    }","commit_id":"5d521d8a98abf164adb874b063d96814bfc40575","url":"https://github.com/neo4j/neo4j"},{"original_method":"private JaxRsResponse httpPostIndexRelationshipNameKeyValue( String indexName, String key, String value, String entity, MediaType postType, MediaType acceptType )\n    {\n        return new JaxRsResponse( Client.create().resource( functionalTestHelper.relationshipIndexUri() + indexName + \"/\" + key + \"/\" + value )\n                .type( postType )\n                .accept( acceptType )\n                .entity( entity ).post( ClientResponse.class ) );\n    }","id":70656,"modified_method":"private JaxRsResponse httpPostIndexRelationshipNameKeyValue( String indexName, String key, String value, String entity, MediaType postType, MediaType acceptType )\n    {\n        return new JaxRsResponse(\n                Client.create().resource(\n                        functionalTestHelper.indexRelationshipUri( indexName, key, value ) )\n                .type( postType )\n                .accept( acceptType )\n                .entity( entity ).post( ClientResponse.class ) );\n    }","commit_id":"5d521d8a98abf164adb874b063d96814bfc40575","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n  public void loops() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Xbase supports Java\\'s while and do .. while as well as the new form \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* of the for loop. In Xbase these constructs are expressions not \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* statements. Anyway, they always result in \\'null\\' and are of type \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* \\'void\\'. \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val list = newArrayList(\\'foo\\',\\'bar\\',\\'baz\\')\");\n      _builder.newLine();\n      _builder.append(\"val result = new java.util.ArrayList<String>()\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"for (x : list.reverse) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"result += x.toUpperCase\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"result\");\n      _builder.newLine();\n      _builder.append(\"// [BAZ, BAR, FOO] (ArrayList<String>)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"var i = 0\");\n      _builder.newLine();\n      _builder.append(\"while(i<list.size) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"result += \\'whiled-\\'+list.get(i)\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"i = i+1\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"result\");\n      _builder.newLine();\n      _builder.append(\"// [BAZ, BAR, FOO, whiled-baz, whiled-bar, whiled-foo] (ArrayList<String>)\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.util.ArrayList;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.List;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ListExtensions;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public ArrayList<String> myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"ArrayList<String> _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<String> list = CollectionLiterals.<String>newArrayList(\\\"foo\\\", \\\"bar\\\", \\\"baz\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"ArrayList<String> _arrayList = new ArrayList<String>();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<String> result = _arrayList;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"List<String> _reverse = ListExtensions.<String>reverse(list);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"for (final String x : _reverse) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"String _upperCase = x.toUpperCase();\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"result.add(_upperCase);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/*result;*/\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int i = 0;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int _size = list.size();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _lessThan = (i < _size);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _while = _lessThan;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"while (_while) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"String _get = list.get(i);\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"String _plus = (\\\"whiled-\\\" + _get);\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"result.add(_plus);\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"int _plus_1 = (i + 1);\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"i = _plus_1;\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"int _size_1 = list.size();\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"boolean _lessThan_1 = (i < _size_1);\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"_while = _lessThan_1;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (result);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":70657,"modified_method":"@Test\n  public void loops() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Xbase supports Java\\'s while and do .. while as well as the new form \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* of the for loop. In Xbase these constructs are expressions not \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* statements. Anyway, they always result in \\'null\\' and are of type \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* \\'void\\'. \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val list = newArrayList(\\'foo\\',\\'bar\\',\\'baz\\')\");\n      _builder.newLine();\n      _builder.append(\"val result = new java.util.ArrayList<String>()\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"for (x : list.reverse) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"result += x.toUpperCase\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"result\");\n      _builder.newLine();\n      _builder.append(\"// [BAZ, BAR, FOO] (ArrayList<String>)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"var i = 0\");\n      _builder.newLine();\n      _builder.append(\"while(i<list.size) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"result += \\'whiled-\\'+list.get(i)\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"i = i+1\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"result\");\n      _builder.newLine();\n      _builder.append(\"// [BAZ, BAR, FOO, whiled-baz, whiled-bar, whiled-foo] (ArrayList<String>)\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.util.ArrayList;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.List;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ListExtensions;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public ArrayList<String> myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"ArrayList<String> _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<String> list = CollectionLiterals.<String>newArrayList(\\\"foo\\\", \\\"bar\\\", \\\"baz\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"ArrayList<String> _arrayList = new ArrayList<String>();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<String> result = _arrayList;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"List<String> _reverse = ListExtensions.<String>reverse(list);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"for (final String x : _reverse) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"String _upperCase = x.toUpperCase();\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"result.add(_upperCase);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"//result;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int i = 0;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int _size = list.size();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _lessThan = (i < _size);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _while = _lessThan;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"while (_while) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"String _get = list.get(i);\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"String _plus = (\\\"whiled-\\\" + _get);\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"result.add(_plus);\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"int _plus_1 = (i + 1);\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"i = _plus_1;\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"int _size_1 = list.size();\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"boolean _lessThan_1 = (i < _size_1);\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"_while = _lessThan_1;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (result);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void typeCoercion() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* AUTOBOXING\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Xbase supports Java\\'s primitives and also the autoboxing introduced\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* with Java 1.4.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.newLine();\n      _builder.append(\"\\'string\\'.length\");\n      _builder.newLine();\n      _builder.append(\"// 6 (int)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"val Integer i = \\'string\\'.length\");\n      _builder.newLine();\n      _builder.append(\"i\");\n      _builder.newLine();\n      _builder.append(\"// 6 (Integer)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* It does autoboxing even when used in the receiver context.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"\\'string\\'.length.toString\");\n      _builder.newLine();\n      _builder.append(\"// 6 (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Arrays are automatically coerced to Lists.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.newLine();\n      _builder.append(\"\\'string\\'.toCharArray\");\n      _builder.newLine();\n      _builder.append(\"// [C@388e28 (char[])\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"val java.util.List<Character> l = \\'string\\'.toCharArray\");\n      _builder.newLine();\n      _builder.append(\"// [s, t, r, i, n, g] (void)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Again this works also in a receiver context.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"\\'string\\'.toCharArray.get(3)\");\n      _builder.newLine();\n      _builder.append(\"// i (Character)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Closure Coercion\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* A closure can be passed whenever a type is expected which has only defined \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* one method in addition to the ones inherited from java.lang.Object\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val java.util.Comparator<String> comparator = [a,b| a.length.compareTo(b.length)]\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.util.Comparator;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.List;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.Conversions;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public void myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"\\\"string\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final Integer i = Integer.valueOf(\\\"string\\\".length());\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"/*i;*/\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"int _length = \\\"string\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"Integer.valueOf(_length).toString();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"\\\"string\\\".toCharArray();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final List<Character> l = ((List<Character>)Conversions.doWrapArray(\\\"string\\\".toCharArray()));\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"char[] _charArray = \\\"string\\\".toCharArray();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"((List<Character>)Conversions.doWrapArray(_charArray)).get(3);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final Comparator<String> _function = new Comparator<String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"public int compare(final String a, final String b) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"int _length = a.length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"int _length_1 = b.length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"int _compareTo = Integer.valueOf(_length).compareTo(Integer.valueOf(_length_1));\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"return _compareTo;\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final Comparator<String> comparator = _function;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":70658,"modified_method":"@Test\n  public void typeCoercion() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* AUTOBOXING\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Xbase supports Java\\'s primitives and also the autoboxing introduced\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* with Java 1.4.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.newLine();\n      _builder.append(\"\\'string\\'.length\");\n      _builder.newLine();\n      _builder.append(\"// 6 (int)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"val Integer i = \\'string\\'.length\");\n      _builder.newLine();\n      _builder.append(\"i\");\n      _builder.newLine();\n      _builder.append(\"// 6 (Integer)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* It does autoboxing even when used in the receiver context.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"\\'string\\'.length.toString\");\n      _builder.newLine();\n      _builder.append(\"// 6 (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Arrays are automatically coerced to Lists.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.newLine();\n      _builder.append(\"\\'string\\'.toCharArray\");\n      _builder.newLine();\n      _builder.append(\"// [C@388e28 (char[])\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"val java.util.List<Character> l = \\'string\\'.toCharArray\");\n      _builder.newLine();\n      _builder.append(\"// [s, t, r, i, n, g] (void)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Again this works also in a receiver context.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"\\'string\\'.toCharArray.get(3)\");\n      _builder.newLine();\n      _builder.append(\"// i (Character)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Closure Coercion\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* A closure can be passed whenever a type is expected which has only defined \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* one method in addition to the ones inherited from java.lang.Object\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val java.util.Comparator<String> comparator = [a,b| a.length.compareTo(b.length)]\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.util.Comparator;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.List;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.Conversions;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public void myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"\\\"string\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final Integer i = Integer.valueOf(\\\"string\\\".length());\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"//i;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"int _length = \\\"string\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"Integer.valueOf(_length).toString();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"\\\"string\\\".toCharArray();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final List<Character> l = ((List<Character>)Conversions.doWrapArray(\\\"string\\\".toCharArray()));\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"char[] _charArray = \\\"string\\\".toCharArray();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"((List<Character>)Conversions.doWrapArray(_charArray)).get(3);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final Comparator<String> _function = new Comparator<String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"public int compare(final String a, final String b) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"int _length = a.length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"int _length_1 = b.length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"int _compareTo = Integer.valueOf(_length).compareTo(Integer.valueOf(_length_1));\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"return _compareTo;\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final Comparator<String> comparator = _function;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void switchExpression() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"import org.eclipse.xtext.purexbase.test.data.*\");\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The switch expression is different and much more powerful than the\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* switch statement in Java.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* First it allows to switch over everything (not only primitives) and\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* it does not have a fall through logic. Also the order of cases is \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* important : First match wins!\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val list = newArrayList(\\'foo\\',\\'bar\\',\\'baz\\')\");\n      _builder.newLine();\n      _builder.append(\"switch(list.head) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"case \\'foo\\' : \\\"it\\'s foo\\\"\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"case \\'bar\\' : \\'a bar\\'\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"default : \\\"don\\'t know\\\"\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"// it\\'s foo (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The type guards are a pragmatic variant of what people often do with\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* pattern matching in functional languages.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val list2 = newArrayList(new Rectangle(5,5), new Circle(4), new Rectangle(6,8))\");\n      _builder.newLine();\n      _builder.append(\"list2.map(shape | \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"switch (shape) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"Circle \\t: \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"\\'a circle : diameter=\\'+shape.diameter\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"Rectangle case shape.height == shape.width : \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"\\'a square : size=\\'+shape.width\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"Rectangle : \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"\\'a rectangle : width=\\'+shape.width+\\', height=\\'+shape.height\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"})\");\n      _builder.newLine();\n      _builder.append(\"// [a square : size=5, a circle : diameter=4, a rectangle : width=8 height=6] (List<String>)\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import com.google.common.base.Objects;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.ArrayList;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.List;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.purexbase.test.data.Circle;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.purexbase.test.data.Rectangle;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.purexbase.test.data.Shape;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.Functions.Function1;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.IterableExtensions;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ListExtensions;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public List<String> myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"List<String> _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<String> list = CollectionLiterals.<String>newArrayList(\\\"foo\\\", \\\"bar\\\", \\\"baz\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"String _head = IterableExtensions.<String>head(list);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final String _switchValue = _head;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _matched = false;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"if (Objects.equal(_switchValue,\\\"foo\\\")) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"/* \\\"it\\\\\\'s foo\\\" */\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"if (Objects.equal(_switchValue,\\\"bar\\\")) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"/* \\\"a bar\\\" */\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"/* \\\"don\\\\\\'t know\\\" */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Rectangle _rectangle = new Rectangle(5, 5);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Circle _circle = new Circle(4);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Rectangle _rectangle_1 = new Rectangle(6, 8);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<Shape> list2 = CollectionLiterals.<Shape>newArrayList(_rectangle, _circle, _rectangle_1);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<Shape,String> _function = new Function1<Shape,String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"public String apply(final Shape shape) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"String _switchResult = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"boolean _matched = false;\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"if (shape instanceof Circle) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"final Circle _circle = (Circle)shape;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"String _plus = (\\\"a circle : diameter=\\\" + Integer.valueOf(_circle.diameter));\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"_switchResult = _plus;\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"if (shape instanceof Rectangle) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"final Rectangle _rectangle = (Rectangle)shape;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"boolean _equals = (_rectangle.height == _rectangle.width);\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"if (_equals) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"                  \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                  \");\n      _builder_1.append(\"String _plus = (\\\"a square : size=\\\" + Integer.valueOf(_rectangle.width));\");\n      _builder_1.newLine();\n      _builder_1.append(\"                  \");\n      _builder_1.append(\"_switchResult = _plus;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"if (shape instanceof Rectangle) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"final Rectangle _rectangle = (Rectangle)shape;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"String _plus = (\\\"a rectangle : width=\\\" + Integer.valueOf(_rectangle.width));\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"String _plus_1 = (_plus + \\\", height=\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"String _plus_2 = (_plus_1 + Integer.valueOf(_rectangle.height));\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"_switchResult = _plus_2;\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"return _switchResult;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"List<String> _map = ListExtensions.<Shape, String>map(list2, _function);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (_map);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":70659,"modified_method":"@Test\n  public void switchExpression() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"import org.eclipse.xtext.purexbase.test.data.*\");\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The switch expression is different and much more powerful than the\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* switch statement in Java.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* First it allows to switch over everything (not only primitives) and\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* it does not have a fall through logic. Also the order of cases is \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* important : First match wins!\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val list = newArrayList(\\'foo\\',\\'bar\\',\\'baz\\')\");\n      _builder.newLine();\n      _builder.append(\"switch(list.head) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"case \\'foo\\' : \\\"it\\'s foo\\\"\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"case \\'bar\\' : \\'a bar\\'\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"default : \\\"don\\'t know\\\"\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"// it\\'s foo (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The type guards are a pragmatic variant of what people often do with\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* pattern matching in functional languages.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val list2 = newArrayList(new Rectangle(5,5), new Circle(4), new Rectangle(6,8))\");\n      _builder.newLine();\n      _builder.append(\"list2.map(shape | \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"switch (shape) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"Circle \\t: \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"\\'a circle : diameter=\\'+shape.diameter\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"Rectangle case shape.height == shape.width : \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"\\'a square : size=\\'+shape.width\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"Rectangle : \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"\\'a rectangle : width=\\'+shape.width+\\', height=\\'+shape.height\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"})\");\n      _builder.newLine();\n      _builder.append(\"// [a square : size=5, a circle : diameter=4, a rectangle : width=8 height=6] (List<String>)\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import com.google.common.base.Objects;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.ArrayList;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.List;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.purexbase.test.data.Circle;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.purexbase.test.data.Rectangle;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.purexbase.test.data.Shape;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.Functions.Function1;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.IterableExtensions;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ListExtensions;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public List<String> myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"List<String> _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<String> list = CollectionLiterals.<String>newArrayList(\\\"foo\\\", \\\"bar\\\", \\\"baz\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"String _head = IterableExtensions.<String>head(list);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final String _switchValue = _head;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _matched = false;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"if (Objects.equal(_switchValue,\\\"foo\\\")) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"// \\\"it\\\\\\'s foo\\\"\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"if (Objects.equal(_switchValue,\\\"bar\\\")) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"// \\\"a bar\\\"\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"// \\\"don\\\\\\'t know\\\"\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Rectangle _rectangle = new Rectangle(5, 5);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Circle _circle = new Circle(4);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Rectangle _rectangle_1 = new Rectangle(6, 8);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<Shape> list2 = CollectionLiterals.<Shape>newArrayList(_rectangle, _circle, _rectangle_1);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<Shape,String> _function = new Function1<Shape,String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"public String apply(final Shape shape) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"String _switchResult = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"boolean _matched = false;\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"if (shape instanceof Circle) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"final Circle _circle = (Circle)shape;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"String _plus = (\\\"a circle : diameter=\\\" + Integer.valueOf(_circle.diameter));\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"_switchResult = _plus;\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"if (shape instanceof Rectangle) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"final Rectangle _rectangle = (Rectangle)shape;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"boolean _equals = (_rectangle.height == _rectangle.width);\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"if (_equals) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"                  \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                  \");\n      _builder_1.append(\"String _plus = (\\\"a square : size=\\\" + Integer.valueOf(_rectangle.width));\");\n      _builder_1.newLine();\n      _builder_1.append(\"                  \");\n      _builder_1.append(\"_switchResult = _plus;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"if (!_matched) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"if (shape instanceof Rectangle) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"final Rectangle _rectangle = (Rectangle)shape;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"_matched=true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"String _plus = (\\\"a rectangle : width=\\\" + Integer.valueOf(_rectangle.width));\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"String _plus_1 = (_plus + \\\", height=\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"String _plus_2 = (_plus_1 + Integer.valueOf(_rectangle.height));\");\n      _builder_1.newLine();\n      _builder_1.append(\"                \");\n      _builder_1.append(\"_switchResult = _plus_2;\");\n      _builder_1.newLine();\n      _builder_1.append(\"              \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"return _switchResult;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"List<String> _map = ListExtensions.<Shape, String>map(list2, _function);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (_map);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void ifExpression() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The if expression looks exactly like in Java. \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* As it is an expression it yields a value and is of some type.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"if (\\'foo\\'.length>3) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"\\'never true!\\'\");\n      _builder.newLine();\n      _builder.append(\"} else {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"\\'always true!\\'\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"// always true! (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The else branch is optional and if not specified \\'else null\\' is \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* inferred:\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"if (\\'foo\\'.length>3) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"\\'never true!\\'\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"// null (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* This also means that control structure expressions like \\'if\\' can \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* occur wherever an expression is expected.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"if (if (\\'foo\\'.length>3) \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"false \");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"else \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"true) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"\\\"Xbase doesn\\'t need the ternary operator\\\"\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public String myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int _length = \\\"foo\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _greaterThan = (_length > 3);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (_greaterThan) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"/* \\\"never true!\\\" */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"} else {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"/* \\\"always true!\\\" */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int _length_1 = \\\"foo\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _greaterThan_1 = (_length_1 > 3);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (_greaterThan_1) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"/* \\\"never true!\\\" */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"String _xifexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _xifexpression_1 = false;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int _length_2 = \\\"foo\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _greaterThan_2 = (_length_2 > 3);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (_greaterThan_2) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"_xifexpression_1 = false;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"} else {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"_xifexpression_1 = true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (_xifexpression_1) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"_xifexpression = \\\"Xbase doesn\\\\\\'t need the ternary operator\\\";\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (_xifexpression);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":70660,"modified_method":"@Test\n  public void ifExpression() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The if expression looks exactly like in Java. \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* As it is an expression it yields a value and is of some type.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"if (\\'foo\\'.length>3) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"\\'never true!\\'\");\n      _builder.newLine();\n      _builder.append(\"} else {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"\\'always true!\\'\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"// always true! (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The else branch is optional and if not specified \\'else null\\' is \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* inferred:\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"if (\\'foo\\'.length>3) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"\\'never true!\\'\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"// null (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* This also means that control structure expressions like \\'if\\' can \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* occur wherever an expression is expected.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"if (if (\\'foo\\'.length>3) \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"false \");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"else \");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"true) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"\\\"Xbase doesn\\'t need the ternary operator\\\"\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public String myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int _length = \\\"foo\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _greaterThan = (_length > 3);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (_greaterThan) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"// \\\"never true!\\\"\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"} else {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"// \\\"always true!\\\"\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int _length_1 = \\\"foo\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _greaterThan_1 = (_length_1 > 3);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (_greaterThan_1) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"// \\\"never true!\\\"\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"String _xifexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _xifexpression_1 = false;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"int _length_2 = \\\"foo\\\".length();\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"boolean _greaterThan_2 = (_length_2 > 3);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (_greaterThan_2) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"_xifexpression_1 = false;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"} else {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"_xifexpression_1 = true;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"if (_xifexpression_1) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"_xifexpression = \\\"Xbase doesn\\\\\\'t need the ternary operator\\\";\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (_xifexpression);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void literals() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Literals are notations for representing fixed values.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Xbase only has literals for the most important data types \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* predefined.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/ \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.newLine();\n      _builder.append(\"// Null Literal\");\n      _builder.newLine();\n      _builder.append(\"null\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// String Literal\");\n      _builder.newLine();\n      _builder.append(\"\\'Hello World\\'\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Number Literals are mostly like in Java\");\n      _builder.newLine();\n      _builder.append(\"// (consult the documentation for more details)\");\n      _builder.newLine();\n      _builder.append(\"42\");\n      _builder.newLine();\n      _builder.append(\"0.42e2\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Boolean Literal\");\n      _builder.newLine();\n      _builder.append(\"true\");\n      _builder.newLine();\n      _builder.append(\"false\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Class Literal (in java : String.class)\");\n      _builder.newLine();\n      _builder.append(\"typeof(String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Collection literals are down using a library approach.\");\n      _builder.newLine();\n      _builder.append(\"newArrayList(3,5,7)\");\n      _builder.newLine();\n      _builder.append(\"newHashSet(\\'foo\\',\\'bar\\',\\'baz\\')\");\n      _builder.newLine();\n      _builder.append(\"newHashMap( 1->\\'one\\', 2->\\'two\\', 3->\\'three\\' )\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Into the bargain, there are number literals for \");\n      _builder.newLine();\n      _builder.append(\"// java.math.BigInteger and java.math.BigDecimal\");\n      _builder.newLine();\n      _builder.append(\"0xbeef_beef_beef_beef_beef#BI\");\n      _builder.newLine();\n      _builder.append(\"0.123_456_789_123_456_789_123_456_789_123_456_789e4242BD\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.math.BigDecimal;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.math.BigInteger;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.Pair;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public BigDecimal myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"BigDecimal _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/* null */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/* \\\"Hello World\\\" */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/* 42 */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/* 0.42e2 */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/* true */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/* false */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/* String.class */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/*CollectionLiterals.<Integer>newArrayList(Integer.valueOf(3), Integer.valueOf(5), Integer.valueOf(7));*/\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/*CollectionLiterals.<String>newHashSet(\\\"foo\\\", \\\"bar\\\", \\\"baz\\\");*/\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Pair<Integer,String> _mappedTo = Pair.<Integer, String>of(Integer.valueOf(1), \\\"one\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Pair<Integer,String> _mappedTo_1 = Pair.<Integer, String>of(Integer.valueOf(2), \\\"two\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Pair<Integer,String> _mappedTo_2 = Pair.<Integer, String>of(Integer.valueOf(3), \\\"three\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/*CollectionLiterals.<Integer, String>newHashMap(_mappedTo, _mappedTo_1, _mappedTo_2);*/\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/* new BigInteger(\\\"beefbeefbeefbeefbeef\\\", 16) */\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (new BigDecimal(\\\"0.123456789123456789123456789123456789e4242\\\"));\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":70661,"modified_method":"@Test\n  public void literals() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Literals are notations for representing fixed values.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Xbase only has literals for the most important data types \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* predefined.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/ \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.newLine();\n      _builder.append(\"// Null Literal\");\n      _builder.newLine();\n      _builder.append(\"null\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// String Literal\");\n      _builder.newLine();\n      _builder.append(\"\\'Hello World\\'\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Number Literals are mostly like in Java\");\n      _builder.newLine();\n      _builder.append(\"// (consult the documentation for more details)\");\n      _builder.newLine();\n      _builder.append(\"42\");\n      _builder.newLine();\n      _builder.append(\"0.42e2\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Boolean Literal\");\n      _builder.newLine();\n      _builder.append(\"true\");\n      _builder.newLine();\n      _builder.append(\"false\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Class Literal (in java : String.class)\");\n      _builder.newLine();\n      _builder.append(\"typeof(String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Collection literals are down using a library approach.\");\n      _builder.newLine();\n      _builder.append(\"newArrayList(3,5,7)\");\n      _builder.newLine();\n      _builder.append(\"newHashSet(\\'foo\\',\\'bar\\',\\'baz\\')\");\n      _builder.newLine();\n      _builder.append(\"newHashMap( 1->\\'one\\', 2->\\'two\\', 3->\\'three\\' )\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// Into the bargain, there are number literals for \");\n      _builder.newLine();\n      _builder.append(\"// java.math.BigInteger and java.math.BigDecimal\");\n      _builder.newLine();\n      _builder.append(\"0xbeef_beef_beef_beef_beef#BI\");\n      _builder.newLine();\n      _builder.append(\"0.123_456_789_123_456_789_123_456_789_123_456_789e4242BD\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.math.BigDecimal;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.math.BigInteger;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.Pair;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public BigDecimal myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"BigDecimal _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"// null\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"// \\\"Hello World\\\"\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"// 42\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"// 0.42e2\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"// true\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"// false\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"// String.class\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"//CollectionLiterals.<Integer>newArrayList(Integer.valueOf(3), Integer.valueOf(5), Integer.valueOf(7));\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"//CollectionLiterals.<String>newHashSet(\\\"foo\\\", \\\"bar\\\", \\\"baz\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Pair<Integer,String> _mappedTo = Pair.<Integer, String>of(Integer.valueOf(1), \\\"one\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Pair<Integer,String> _mappedTo_1 = Pair.<Integer, String>of(Integer.valueOf(2), \\\"two\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"Pair<Integer,String> _mappedTo_2 = Pair.<Integer, String>of(Integer.valueOf(3), \\\"three\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"//CollectionLiterals.<Integer, String>newHashMap(_mappedTo, _mappedTo_1, _mappedTo_2);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"// new BigInteger(\\\"beefbeefbeefbeefbeef\\\", 16)\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (new BigDecimal(\\\"0.123456789123456789123456789123456789e4242\\\"));\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void featureCalls() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"import org.eclipse.xtext.purexbase.test.data.*\");\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Xbase comes with sugared accessor syntax for getter and setter \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* methods\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.newLine();\n      _builder.append(\"val person = new Person()\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// setting\");\n      _builder.newLine();\n      _builder.append(\"person.forename = \\'Jimi\\'\");\n      _builder.newLine();\n      _builder.append(\"person.name = \\'Hendrix\\'\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// accessing\");\n      _builder.newLine();\n      _builder.append(\"person.forename +\\' \\'+ person.name\");\n      _builder.newLine();\n      _builder.append(\"// Jimi Hendrix (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// static features can be accessed using ::\");\n      _builder.newLine();\n      _builder.append(\"java::util::Collections::singleton(\\\"So lonely\\\") \");\n      _builder.newLine();\n      _builder.append(\"System::err.println()\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.util.Collections;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.purexbase.test.data.Person;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public void myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"Person _person = new Person();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final Person person = _person;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"person.setForename(\\\"Jimi\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"person.setName(\\\"Hendrix\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _forename = person.getForename();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _plus = (_forename + \\\" \\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _name = person.getName();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"/*(_plus + _name);*/\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"Collections.<String>singleton(\\\"So lonely\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"System.err.println();\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":70662,"modified_method":"@Test\n  public void featureCalls() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"import org.eclipse.xtext.purexbase.test.data.*\");\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* Xbase comes with sugared accessor syntax for getter and setter \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* methods\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.newLine();\n      _builder.append(\"val person = new Person()\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// setting\");\n      _builder.newLine();\n      _builder.append(\"person.forename = \\'Jimi\\'\");\n      _builder.newLine();\n      _builder.append(\"person.name = \\'Hendrix\\'\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// accessing\");\n      _builder.newLine();\n      _builder.append(\"person.forename +\\' \\'+ person.name\");\n      _builder.newLine();\n      _builder.append(\"// Jimi Hendrix (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"// static features can be accessed using ::\");\n      _builder.newLine();\n      _builder.append(\"java::util::Collections::singleton(\\\"So lonely\\\") \");\n      _builder.newLine();\n      _builder.append(\"System::err.println()\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.util.Collections;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.purexbase.test.data.Person;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public void myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"Person _person = new Person();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"final Person person = _person;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"person.setForename(\\\"Jimi\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"person.setName(\\\"Hendrix\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _forename = person.getForename();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _plus = (_forename + \\\" \\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _name = person.getName();\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"//(_plus + _name);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"Collections.<String>singleton(\\\"So lonely\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"System.err.println();\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void closures() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* A closures is an anonymous function which can access variables from \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* the outer lexical scope.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"val x = \\'Hello \\'\");\n      _builder.newLine();\n      _builder.append(\"val f = [ String e | x + e ]\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"f.apply(\\'World!\\')\");\n      _builder.newLine();\n      _builder.append(\"// Hello World! (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The square brackets are optional if a closure is passed as the \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* single parameter to a method. Also the parameter types are optional \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* if they can be inferred from the context.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"val list = newArrayList(\\'a\\', \\'b\\', \\'c\\')\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"list.map( e | e.toUpperCase )\");\n      _builder.newLine();\n      _builder.append(\"// [A, B, C] (List<String>)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The type signature of a closure is written like this \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*   (ParamType) => ReturnType\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val (String)=>String f2 = [ e | e.toUpperCase ]\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"f2.apply(\\'simsalabim\\')\");\n      _builder.newLine();\n      _builder.append(\"// SIMSALABIM (String)\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.util.ArrayList;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.Functions.Function1;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ListExtensions;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public String myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final String x = \\\"Hello \\\";\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<String,String> _function = new Function1<String,String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"public String apply(final String e) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"String _plus = (x + e);\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"return _plus;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<String,String> f = _function;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"f.apply(\\\"World!\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<String> list = CollectionLiterals.<String>newArrayList(\\\"a\\\", \\\"b\\\", \\\"c\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<String,String> _function_1 = new Function1<String,String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"public String apply(final String e) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"String _upperCase = e.toUpperCase();\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"return _upperCase;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"/*ListExtensions.<String, String>map(list, _function_1);*/\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<String,String> _function_2 = new Function1<String,String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"public String apply(final String e) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"String _upperCase = e.toUpperCase();\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"return _upperCase;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<? super String,? extends String> f2 = _function_2;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"String _apply = f2.apply(\\\"simsalabim\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (_apply);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":70663,"modified_method":"@Test\n  public void closures() {\n    try {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* A closures is an anonymous function which can access variables from \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* the outer lexical scope.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"val x = \\'Hello \\'\");\n      _builder.newLine();\n      _builder.append(\"val f = [ String e | x + e ]\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"f.apply(\\'World!\\')\");\n      _builder.newLine();\n      _builder.append(\"// Hello World! (String)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The square brackets are optional if a closure is passed as the \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* single parameter to a method. Also the parameter types are optional \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* if they can be inferred from the context.\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"val list = newArrayList(\\'a\\', \\'b\\', \\'c\\')\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"list.map( e | e.toUpperCase )\");\n      _builder.newLine();\n      _builder.append(\"// [A, B, C] (List<String>)\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"/*\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"* The type signature of a closure is written like this \");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*   (ParamType) => ReturnType\");\n      _builder.newLine();\n      _builder.append(\" \");\n      _builder.append(\"*/\");\n      _builder.newLine();\n      _builder.append(\"val (String)=>String f2 = [ e | e.toUpperCase ]\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"f2.apply(\\'simsalabim\\')\");\n      _builder.newLine();\n      _builder.append(\"// SIMSALABIM (String)\");\n      _builder.newLine();\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"import java.util.ArrayList;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.CollectionLiterals;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.Functions.Function1;\");\n      _builder_1.newLine();\n      _builder_1.append(\"import org.eclipse.xtext.xbase.lib.ListExtensions;\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"public class MyFile {\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"public String myMethod() throws Throwable {\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"String _specialblockexpression = null;\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"{\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final String x = \\\"Hello \\\";\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<String,String> _function = new Function1<String,String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"public String apply(final String e) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"String _plus = (x + e);\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"return _plus;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<String,String> f = _function;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"f.apply(\\\"World!\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final ArrayList<String> list = CollectionLiterals.<String>newArrayList(\\\"a\\\", \\\"b\\\", \\\"c\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<String,String> _function_1 = new Function1<String,String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"public String apply(final String e) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"String _upperCase = e.toUpperCase();\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"return _upperCase;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"//ListExtensions.<String, String>map(list, _function_1);\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<String,String> _function_2 = new Function1<String,String>() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"public String apply(final String e) {\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"String _upperCase = e.toUpperCase();\");\n      _builder_1.newLine();\n      _builder_1.append(\"            \");\n      _builder_1.append(\"return _upperCase;\");\n      _builder_1.newLine();\n      _builder_1.append(\"          \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"        \");\n      _builder_1.append(\"};\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"final Function1<? super String,? extends String> f2 = _function_2;\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"String _apply = f2.apply(\\\"simsalabim\\\");\");\n      _builder_1.newLine();\n      _builder_1.append(\"      \");\n      _builder_1.append(\"_specialblockexpression = (_apply);\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"    \");\n      _builder_1.append(\"return _specialblockexpression;\");\n      _builder_1.newLine();\n      _builder_1.append(\"  \");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic TreeAppendable append(JvmType type) {\n\t\tif(type.eIsProxy()) {\n\t\t\tString fragment = ((InternalEObject)type).eProxyURI().fragment();\n\t\t\tTriple<EObject, EReference, INode> unresolvedLink = encoder.decode(context.eResource(), fragment);\n\t\t\tif(unresolvedLink != null) {\n\t\t\t\tINode linkNode = unresolvedLink.getThird();\n\t\t\t\tif(linkNode != null) {\n\t\t\t\t\tappend(linkNode.getText().trim());\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\t\t\tappend(\"unresolvedType\");\n\t\t\treturn this;\n\t\t}\n\t\treturn super.append(type);\n\t}","id":70664,"modified_method":"@Override\n\tpublic TreeAppendable append(JvmType type) {\n\t\tif(type.eIsProxy()) {\n\t\t\tString fragment = ((InternalEObject)type).eProxyURI().fragment();\n\t\t\tTriple<EObject, EReference, INode> unresolvedLink = encoder.decode(context.eResource(), fragment);\n\t\t\tif(unresolvedLink != null) {\n\t\t\t\tINode linkNode = unresolvedLink.getThird();\n\t\t\t\tif(linkNode != null) {\n\t\t\t\t\tappend(linkNode.getText().trim());\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\t\t\tappend(\"unresolved type\");\n\t\t\treturn this;\n\t\t}\n\t\treturn super.append(type);\n\t}","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean _generateMember(final JvmMember it, final ITreeAppendable appendable) {\n    Class<? extends Object> _class = it==null?(Class<? extends Object>)null:it.getClass();\n    String _name = _class==null?(String)null:_class.getName();\n    String _plus = (\"generateMember not implemented for elements of type \" + _name);\n    UnsupportedOperationException _unsupportedOperationException = new UnsupportedOperationException(_plus);\n    throw _unsupportedOperationException;\n  }","id":70665,"modified_method":"protected ITreeAppendable _generateMember(final JvmMember it, final ITreeAppendable appendable) {\n    Class<? extends Object> _class = it==null?(Class<? extends Object>)null:it.getClass();\n    String _name = _class==null?(String)null:_class.getName();\n    String _plus = (\"generateMember not implemented for elements of type \" + _name);\n    UnsupportedOperationException _unsupportedOperationException = new UnsupportedOperationException(_plus);\n    throw _unsupportedOperationException;\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean _generateMember(final JvmGenericType it, final ITreeAppendable appendable) {\n    appendable.newLine();\n    this.generateBody(it, appendable);\n    return true;\n  }","id":70666,"modified_method":"protected ITreeAppendable _generateMember(final JvmGenericType it, final ITreeAppendable appendable) {\n    ITreeAppendable _xblockexpression = null;\n    {\n      appendable.newLine();\n      ITreeAppendable _generateBody = this.generateBody(it, appendable);\n      _xblockexpression = (_generateBody);\n    }\n    return _xblockexpression;\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"protected ITreeAppendable _generateBody(final JvmEnumerationType it, final ITreeAppendable appendable) {\n    ITreeAppendable _xblockexpression = null;\n    {\n      this.generateJavaDoc(it, appendable);\n      this.generateAnnotations(it, appendable, true);\n      this.generateModifier(it, appendable);\n      appendable.append(\"enum \");\n      ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(appendable, it);\n      String _simpleName = it.getSimpleName();\n      _traceSignificant.append(_simpleName);\n      appendable.append(\" \");\n      this.generateExtendsClause(it, appendable);\n      ITreeAppendable _append = appendable.append(\"{\");\n      _append.increaseIndentation();\n      EList<JvmEnumerationLiteral> _literals = it.getLiterals();\n      final Procedure1<LoopParams> _function = new Procedure1<LoopParams>() {\n          public void apply(final LoopParams it) {\n            final Function1<ITreeAppendable,ITreeAppendable> _function = new Function1<ITreeAppendable,ITreeAppendable>() {\n                public ITreeAppendable apply(final ITreeAppendable it) {\n                  ITreeAppendable _append = it.append(\",\");\n                  ITreeAppendable _newLine = _append.newLine();\n                  return _newLine;\n                }\n              };\n            it.setSeparator(_function);\n            it.setSuffix(\";\");\n          }\n        };\n      final Function1<JvmEnumerationLiteral,Boolean> _function_1 = new Function1<JvmEnumerationLiteral,Boolean>() {\n          public Boolean apply(final JvmEnumerationLiteral it) {\n            ITreeAppendable _trace = appendable.trace(it);\n            boolean _generateEnumLiteral = JvmModelGenerator.this.generateEnumLiteral(it, _trace);\n            return Boolean.valueOf(_generateEnumLiteral);\n          }\n        };\n      this._loopExtensions.<JvmEnumerationLiteral>forEach(appendable, _literals, _function, _function_1);\n      EList<JvmMember> _members = it.getMembers();\n      final Function1<JvmMember,Boolean> _function_2 = new Function1<JvmMember,Boolean>() {\n          public Boolean apply(final JvmMember it) {\n            boolean _not = (!(it instanceof JvmEnumerationLiteral));\n            return Boolean.valueOf(_not);\n          }\n        };\n      Iterable<JvmMember> _filter = IterableExtensions.<JvmMember>filter(_members, _function_2);\n      final Procedure1<LoopParams> _function_3 = new Procedure1<LoopParams>() {\n          public void apply(final LoopParams it) {\n            final Function1<ITreeAppendable,ITreeAppendable> _function = new Function1<ITreeAppendable,ITreeAppendable>() {\n                public ITreeAppendable apply(final ITreeAppendable it) {\n                  ITreeAppendable _newLine = it.newLine();\n                  return _newLine;\n                }\n              };\n            it.setSeparator(_function);\n          }\n        };\n      final Function1<JvmMember,Boolean> _function_4 = new Function1<JvmMember,Boolean>() {\n          public Boolean apply(final JvmMember it) {\n            ITreeAppendable _trace = appendable.trace(it);\n            boolean _generateMember = JvmModelGenerator.this.generateMember(it, _trace);\n            return Boolean.valueOf(_generateMember);\n          }\n        };\n      this._loopExtensions.<JvmMember>forEach(appendable, _filter, _function_3, _function_4);\n      ITreeAppendable _decreaseIndentation = appendable.decreaseIndentation();\n      ITreeAppendable _newLine = _decreaseIndentation.newLine();\n      ITreeAppendable _append_1 = _newLine.append(\"}\");\n      ITreeAppendable _newLine_1 = _append_1.newLine();\n      _xblockexpression = (_newLine_1);\n    }\n    return _xblockexpression;\n  }","id":70667,"modified_method":"protected ITreeAppendable _generateBody(final JvmEnumerationType it, final ITreeAppendable appendable) {\n    ITreeAppendable _xblockexpression = null;\n    {\n      this.generateJavaDoc(it, appendable);\n      this.generateAnnotations(it, appendable, true);\n      this.generateModifier(it, appendable);\n      appendable.append(\"enum \");\n      ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(appendable, it);\n      String _simpleName = it.getSimpleName();\n      _traceSignificant.append(_simpleName);\n      appendable.append(\" \");\n      this.generateExtendsClause(it, appendable);\n      ITreeAppendable _append = appendable.append(\"{\");\n      _append.increaseIndentation();\n      EList<JvmEnumerationLiteral> _literals = it.getLiterals();\n      final Procedure1<LoopParams> _function = new Procedure1<LoopParams>() {\n          public void apply(final LoopParams it) {\n            final Function1<ITreeAppendable,ITreeAppendable> _function = new Function1<ITreeAppendable,ITreeAppendable>() {\n                public ITreeAppendable apply(final ITreeAppendable it) {\n                  ITreeAppendable _append = it.append(\",\");\n                  ITreeAppendable _newLine = _append.newLine();\n                  return _newLine;\n                }\n              };\n            it.setSeparator(_function);\n            it.setSuffix(\";\");\n          }\n        };\n      final Function1<JvmEnumerationLiteral,Boolean> _function_1 = new Function1<JvmEnumerationLiteral,Boolean>() {\n          public Boolean apply(final JvmEnumerationLiteral it) {\n            ITreeAppendable _trace = appendable.trace(it);\n            boolean _generateEnumLiteral = JvmModelGenerator.this.generateEnumLiteral(it, _trace);\n            return Boolean.valueOf(_generateEnumLiteral);\n          }\n        };\n      this._loopExtensions.<JvmEnumerationLiteral>forEach(appendable, _literals, _function, _function_1);\n      Iterable<JvmMember> _membersToBeCompiled = this.getMembersToBeCompiled(it);\n      final Function1<JvmMember,Boolean> _function_2 = new Function1<JvmMember,Boolean>() {\n          public Boolean apply(final JvmMember it) {\n            boolean _not = (!(it instanceof JvmEnumerationLiteral));\n            return Boolean.valueOf(_not);\n          }\n        };\n      Iterable<JvmMember> _filter = IterableExtensions.<JvmMember>filter(_membersToBeCompiled, _function_2);\n      final Procedure1<LoopParams> _function_3 = new Procedure1<LoopParams>() {\n          public void apply(final LoopParams it) {\n            final Function1<ITreeAppendable,ITreeAppendable> _function = new Function1<ITreeAppendable,ITreeAppendable>() {\n                public ITreeAppendable apply(final ITreeAppendable it) {\n                  ITreeAppendable _newLine = it.newLine();\n                  return _newLine;\n                }\n              };\n            it.setSeparator(_function);\n          }\n        };\n      final Procedure1<JvmMember> _function_4 = new Procedure1<JvmMember>() {\n          public void apply(final JvmMember it) {\n            ITreeAppendable _trace = appendable.trace(it);\n            JvmModelGenerator.this.generateMember(it, _trace);\n          }\n        };\n      this._loopExtensions.<JvmMember>forEach(appendable, _filter, _function_3, _function_4);\n      ITreeAppendable _decreaseIndentation = appendable.decreaseIndentation();\n      ITreeAppendable _newLine = _decreaseIndentation.newLine();\n      ITreeAppendable _append_1 = _newLine.append(\"}\");\n      ITreeAppendable _newLine_1 = _append_1.newLine();\n      _xblockexpression = (_newLine_1);\n    }\n    return _xblockexpression;\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean _generateMember(final JvmField it, final ITreeAppendable appendable) {\n    appendable.newLine();\n    this.generateJavaDoc(it, appendable);\n    final ITreeAppendable tracedAppendable = appendable.trace(it);\n    this.generateAnnotations(it, tracedAppendable, true);\n    this.generateModifier(it, tracedAppendable);\n    JvmTypeReference _type = it.getType();\n    this._errorSafeExtensions.serializeSafely(_type, \"Object\", tracedAppendable);\n    tracedAppendable.append(\" \");\n    ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(tracedAppendable, it);\n    String _simpleName = it.getSimpleName();\n    _traceSignificant.append(_simpleName);\n    this.generateInitialization(it, tracedAppendable);\n    tracedAppendable.append(\";\");\n    return true;\n  }","id":70668,"modified_method":"protected ITreeAppendable _generateMember(final JvmField it, final ITreeAppendable appendable) {\n    ITreeAppendable _xblockexpression = null;\n    {\n      appendable.newLine();\n      this.generateJavaDoc(it, appendable);\n      final ITreeAppendable tracedAppendable = appendable.trace(it);\n      this.generateAnnotations(it, tracedAppendable, true);\n      this.generateModifier(it, tracedAppendable);\n      JvmTypeReference _type = it.getType();\n      this._errorSafeExtensions.serializeSafely(_type, \"Object\", tracedAppendable);\n      tracedAppendable.append(\" \");\n      ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(tracedAppendable, it);\n      String _simpleName = it.getSimpleName();\n      _traceSignificant.append(_simpleName);\n      this.generateInitialization(it, tracedAppendable);\n      ITreeAppendable _append = tracedAppendable.append(\";\");\n      _xblockexpression = (_append);\n    }\n    return _xblockexpression;\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean _generateMember(final JvmOperation it, final ITreeAppendable appendable) {\n    appendable.newLine();\n    appendable.openScope();\n    this.generateJavaDoc(it, appendable);\n    final ITreeAppendable tracedAppendable = appendable.trace(it);\n    this.generateAnnotations(it, tracedAppendable, true);\n    this.generateModifier(it, tracedAppendable);\n    this.generateTypeParameterDeclaration(it, tracedAppendable);\n    JvmTypeReference _returnType = it.getReturnType();\n    boolean _equals = Objects.equal(_returnType, null);\n    if (_equals) {\n      tracedAppendable.append(\"void\");\n    } else {\n      JvmTypeReference _returnType_1 = it.getReturnType();\n      this._errorSafeExtensions.serializeSafely(_returnType_1, \"Object\", tracedAppendable);\n    }\n    tracedAppendable.append(\" \");\n    ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(tracedAppendable, it);\n    String _simpleName = it.getSimpleName();\n    _traceSignificant.append(_simpleName);\n    tracedAppendable.append(\"(\");\n    this.generateParameters(it, tracedAppendable);\n    tracedAppendable.append(\")\");\n    this.generateThrowsClause(it, tracedAppendable);\n    boolean _or = false;\n    boolean _isAbstract = it.isAbstract();\n    if (_isAbstract) {\n      _or = true;\n    } else {\n      boolean _hasBody = this.hasBody(it);\n      boolean _not = (!_hasBody);\n      _or = (_isAbstract || _not);\n    }\n    if (_or) {\n      tracedAppendable.append(\";\");\n    } else {\n      tracedAppendable.append(\" \");\n      this.generateExecutableBody(it, tracedAppendable);\n    }\n    appendable.closeScope();\n    return true;\n  }","id":70669,"modified_method":"protected ITreeAppendable _generateMember(final JvmOperation it, final ITreeAppendable appendable) {\n    ITreeAppendable _xblockexpression = null;\n    {\n      appendable.newLine();\n      appendable.openScope();\n      this.generateJavaDoc(it, appendable);\n      final ITreeAppendable tracedAppendable = appendable.trace(it);\n      this.generateAnnotations(it, tracedAppendable, true);\n      this.generateModifier(it, tracedAppendable);\n      this.generateTypeParameterDeclaration(it, tracedAppendable);\n      JvmTypeReference _returnType = it.getReturnType();\n      boolean _equals = Objects.equal(_returnType, null);\n      if (_equals) {\n        tracedAppendable.append(\"void\");\n      } else {\n        JvmTypeReference _returnType_1 = it.getReturnType();\n        this._errorSafeExtensions.serializeSafely(_returnType_1, \"Object\", tracedAppendable);\n      }\n      tracedAppendable.append(\" \");\n      ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(tracedAppendable, it);\n      String _simpleName = it.getSimpleName();\n      _traceSignificant.append(_simpleName);\n      tracedAppendable.append(\"(\");\n      this.generateParameters(it, tracedAppendable);\n      tracedAppendable.append(\")\");\n      this.generateThrowsClause(it, tracedAppendable);\n      boolean _or = false;\n      boolean _isAbstract = it.isAbstract();\n      if (_isAbstract) {\n        _or = true;\n      } else {\n        boolean _hasBody = this.hasBody(it);\n        boolean _not = (!_hasBody);\n        _or = (_isAbstract || _not);\n      }\n      if (_or) {\n        tracedAppendable.append(\";\");\n      } else {\n        tracedAppendable.append(\" \");\n        this.generateExecutableBody(it, tracedAppendable);\n      }\n      appendable.closeScope();\n      _xblockexpression = (appendable);\n    }\n    return _xblockexpression;\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"protected ITreeAppendable _generateBody(final JvmGenericType it, final ITreeAppendable appendable) {\n    ITreeAppendable _xblockexpression = null;\n    {\n      this.generateJavaDoc(it, appendable);\n      final ITreeAppendable childAppendable = appendable.trace(it);\n      this.generateAnnotations(it, childAppendable, true);\n      this.generateModifier(it, childAppendable);\n      boolean _isInterface = it.isInterface();\n      if (_isInterface) {\n        childAppendable.append(\"interface \");\n      } else {\n        childAppendable.append(\"class \");\n      }\n      ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(childAppendable, it);\n      String _simpleName = it.getSimpleName();\n      _traceSignificant.append(_simpleName);\n      this.generateTypeParameterDeclaration(it, childAppendable);\n      EList<JvmTypeParameter> _typeParameters = it.getTypeParameters();\n      boolean _isEmpty = _typeParameters.isEmpty();\n      if (_isEmpty) {\n        childAppendable.append(\" \");\n      }\n      this.generateExtendsClause(it, childAppendable);\n      ITreeAppendable _append = childAppendable.append(\"{\");\n      _append.increaseIndentation();\n      EList<JvmMember> _members = it.getMembers();\n      final Procedure1<LoopParams> _function = new Procedure1<LoopParams>() {\n          public void apply(final LoopParams it) {\n            final Function1<ITreeAppendable,ITreeAppendable> _function = new Function1<ITreeAppendable,ITreeAppendable>() {\n                public ITreeAppendable apply(final ITreeAppendable it) {\n                  ITreeAppendable _newLine = it.newLine();\n                  return _newLine;\n                }\n              };\n            it.setSeparator(_function);\n          }\n        };\n      final Function1<JvmMember,Boolean> _function_1 = new Function1<JvmMember,Boolean>() {\n          public Boolean apply(final JvmMember it) {\n            boolean _xblockexpression = false;\n            {\n              final ITreeAppendable memberAppendable = JvmModelGenerator.this._treeAppendableUtil.traceWithComments(childAppendable, it);\n              memberAppendable.openScope();\n              final boolean hasGenerated = JvmModelGenerator.this.generateMember(it, memberAppendable);\n              memberAppendable.closeScope();\n              _xblockexpression = (hasGenerated);\n            }\n            return Boolean.valueOf(_xblockexpression);\n          }\n        };\n      this._loopExtensions.<JvmMember>forEach(appendable, _members, _function, _function_1);\n      ITreeAppendable _decreaseIndentation = childAppendable.decreaseIndentation();\n      ITreeAppendable _newLine = _decreaseIndentation.newLine();\n      _newLine.append(\"}\");\n      ITreeAppendable _newLine_1 = appendable.newLine();\n      _xblockexpression = (_newLine_1);\n    }\n    return _xblockexpression;\n  }","id":70670,"modified_method":"protected ITreeAppendable _generateBody(final JvmGenericType it, final ITreeAppendable appendable) {\n    ITreeAppendable _xblockexpression = null;\n    {\n      this.generateJavaDoc(it, appendable);\n      final ITreeAppendable childAppendable = appendable.trace(it);\n      this.generateAnnotations(it, childAppendable, true);\n      this.generateModifier(it, childAppendable);\n      boolean _isInterface = it.isInterface();\n      if (_isInterface) {\n        childAppendable.append(\"interface \");\n      } else {\n        childAppendable.append(\"class \");\n      }\n      ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(childAppendable, it);\n      String _simpleName = it.getSimpleName();\n      _traceSignificant.append(_simpleName);\n      this.generateTypeParameterDeclaration(it, childAppendable);\n      EList<JvmTypeParameter> _typeParameters = it.getTypeParameters();\n      boolean _isEmpty = _typeParameters.isEmpty();\n      if (_isEmpty) {\n        childAppendable.append(\" \");\n      }\n      this.generateExtendsClause(it, childAppendable);\n      ITreeAppendable _append = childAppendable.append(\"{\");\n      _append.increaseIndentation();\n      Iterable<JvmMember> _membersToBeCompiled = this.getMembersToBeCompiled(it);\n      final Procedure1<LoopParams> _function = new Procedure1<LoopParams>() {\n          public void apply(final LoopParams it) {\n            final Function1<ITreeAppendable,ITreeAppendable> _function = new Function1<ITreeAppendable,ITreeAppendable>() {\n                public ITreeAppendable apply(final ITreeAppendable it) {\n                  ITreeAppendable _newLine = it.newLine();\n                  return _newLine;\n                }\n              };\n            it.setSeparator(_function);\n          }\n        };\n      final Procedure1<JvmMember> _function_1 = new Procedure1<JvmMember>() {\n          public void apply(final JvmMember it) {\n            final ITreeAppendable memberAppendable = JvmModelGenerator.this._treeAppendableUtil.traceWithComments(childAppendable, it);\n            memberAppendable.openScope();\n            JvmModelGenerator.this.generateMember(it, memberAppendable);\n            memberAppendable.closeScope();\n          }\n        };\n      this._loopExtensions.<JvmMember>forEach(appendable, _membersToBeCompiled, _function, _function_1);\n      ITreeAppendable _decreaseIndentation = childAppendable.decreaseIndentation();\n      ITreeAppendable _newLine = _decreaseIndentation.newLine();\n      _newLine.append(\"}\");\n      ITreeAppendable _newLine_1 = appendable.newLine();\n      _xblockexpression = (_newLine_1);\n    }\n    return _xblockexpression;\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean _generateMember(final JvmConstructor it, final ITreeAppendable appendable) {\n    boolean _isSingleSyntheticDefaultConstructor = this._jvmTypeExtensions.isSingleSyntheticDefaultConstructor(it);\n    boolean _not = (!_isSingleSyntheticDefaultConstructor);\n    if (_not) {\n      appendable.newLine();\n      appendable.openScope();\n      this.generateJavaDoc(it, appendable);\n      final ITreeAppendable tracedAppendable = appendable.trace(it);\n      this.generateAnnotations(it, tracedAppendable, true);\n      this.generateModifier(it, tracedAppendable);\n      this.generateTypeParameterDeclaration(it, tracedAppendable);\n      ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(tracedAppendable, it);\n      String _simpleName = it.getSimpleName();\n      _traceSignificant.append(_simpleName);\n      tracedAppendable.append(\"(\");\n      this.generateParameters(it, tracedAppendable);\n      tracedAppendable.append(\")\");\n      this.generateThrowsClause(it, tracedAppendable);\n      tracedAppendable.append(\" \");\n      this.generateExecutableBody(it, tracedAppendable);\n      appendable.closeScope();\n      return true;\n    }\n    return false;\n  }","id":70671,"modified_method":"protected ITreeAppendable _generateMember(final JvmConstructor it, final ITreeAppendable appendable) {\n    ITreeAppendable _xblockexpression = null;\n    {\n      appendable.newLine();\n      appendable.openScope();\n      this.generateJavaDoc(it, appendable);\n      final ITreeAppendable tracedAppendable = appendable.trace(it);\n      this.generateAnnotations(it, tracedAppendable, true);\n      this.generateModifier(it, tracedAppendable);\n      this.generateTypeParameterDeclaration(it, tracedAppendable);\n      ITreeAppendable _traceSignificant = this._treeAppendableUtil.traceSignificant(tracedAppendable, it);\n      String _simpleName = it.getSimpleName();\n      _traceSignificant.append(_simpleName);\n      tracedAppendable.append(\"(\");\n      this.generateParameters(it, tracedAppendable);\n      tracedAppendable.append(\")\");\n      this.generateThrowsClause(it, tracedAppendable);\n      tracedAppendable.append(\" \");\n      this.generateExecutableBody(it, tracedAppendable);\n      appendable.closeScope();\n      _xblockexpression = (appendable);\n    }\n    return _xblockexpression;\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"public void generateAnnotations(final JvmAnnotationAnnotationValue it, final ITreeAppendable appendable, final boolean withLineBreak) {\n    final Function1<ITreeAppendable,ITreeAppendable> _function = new Function1<ITreeAppendable,ITreeAppendable>() {\n        public ITreeAppendable apply(final ITreeAppendable it) {\n          ITreeAppendable _xifexpression = null;\n          if (withLineBreak) {\n            ITreeAppendable _newLine = it.newLine();\n            _xifexpression = _newLine;\n          } else {\n            ITreeAppendable _append = it.append(\" \");\n            _xifexpression = _append;\n          }\n          return _xifexpression;\n        }\n      };\n    final Function1<ITreeAppendable,ITreeAppendable> sep = _function;\n    EList<JvmAnnotationReference> _annotations = it.getAnnotations();\n    final Procedure1<LoopParams> _function_1 = new Procedure1<LoopParams>() {\n        public void apply(final LoopParams it) {\n          it.setSeparator(sep);\n          it.setSuffix(sep);\n        }\n      };\n    final Procedure2<JvmAnnotationReference,ITreeAppendable> _function_2 = new Procedure2<JvmAnnotationReference,ITreeAppendable>() {\n        public void apply(final JvmAnnotationReference it, final ITreeAppendable app) {\n          JvmModelGenerator.this.generateAnnotation(it, app);\n        }\n      };\n    this._errorSafeExtensions.<JvmAnnotationReference>forEachSafely(appendable, _annotations, _function_1, _function_2);\n  }","id":70672,"modified_method":"public void generateAnnotations(final JvmAnnotationAnnotationValue it, final ITreeAppendable appendable, final boolean withLineBreak) {\n    EList<JvmAnnotationReference> _annotations = it.getAnnotations();\n    final Procedure1<LoopParams> _function = new Procedure1<LoopParams>() {\n        public void apply(final LoopParams it) {\n          final Function1<ITreeAppendable,ITreeAppendable> _function = new Function1<ITreeAppendable,ITreeAppendable>() {\n              public ITreeAppendable apply(final ITreeAppendable it) {\n                ITreeAppendable _xifexpression = null;\n                if (withLineBreak) {\n                  ITreeAppendable _append = it.append(\",\");\n                  ITreeAppendable _newLine = _append.newLine();\n                  _xifexpression = _newLine;\n                } else {\n                  ITreeAppendable _append_1 = it.append(\", \");\n                  _xifexpression = _append_1;\n                }\n                return _xifexpression;\n              }\n            };\n          it.setSeparator(_function);\n          final Function1<ITreeAppendable,ITreeAppendable> _function_1 = new Function1<ITreeAppendable,ITreeAppendable>() {\n              public ITreeAppendable apply(final ITreeAppendable it) {\n                ITreeAppendable _xifexpression = null;\n                if (withLineBreak) {\n                  ITreeAppendable _newLine = it.newLine();\n                  _xifexpression = _newLine;\n                }\n                return _xifexpression;\n              }\n            };\n          it.setSuffix(_function_1);\n        }\n      };\n    final Procedure2<JvmAnnotationReference,ITreeAppendable> _function_1 = new Procedure2<JvmAnnotationReference,ITreeAppendable>() {\n        public void apply(final JvmAnnotationReference it, final ITreeAppendable app) {\n          JvmModelGenerator.this.generateAnnotation(it, app);\n        }\n      };\n    this._errorSafeExtensions.<JvmAnnotationReference>forEachSafely(appendable, _annotations, _function, _function_1);\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"public boolean generateMember(final JvmMember it, final ITreeAppendable appendable) {\n    if (it instanceof JvmConstructor) {\n      return _generateMember((JvmConstructor)it, appendable);\n    } else if (it instanceof JvmGenericType) {\n      return _generateMember((JvmGenericType)it, appendable);\n    } else if (it instanceof JvmOperation) {\n      return _generateMember((JvmOperation)it, appendable);\n    } else if (it instanceof JvmField) {\n      return _generateMember((JvmField)it, appendable);\n    } else if (it != null) {\n      return _generateMember(it, appendable);\n    } else {\n      throw new IllegalArgumentException(\"Unhandled parameter types: \" +\n        Arrays.<Object>asList(it, appendable).toString());\n    }\n  }","id":70673,"modified_method":"public ITreeAppendable generateMember(final JvmMember it, final ITreeAppendable appendable) {\n    if (it instanceof JvmConstructor) {\n      return _generateMember((JvmConstructor)it, appendable);\n    } else if (it instanceof JvmGenericType) {\n      return _generateMember((JvmGenericType)it, appendable);\n    } else if (it instanceof JvmOperation) {\n      return _generateMember((JvmOperation)it, appendable);\n    } else if (it instanceof JvmField) {\n      return _generateMember((JvmField)it, appendable);\n    } else if (it != null) {\n      return _generateMember(it, appendable);\n    } else {\n      throw new IllegalArgumentException(\"Unhandled parameter types: \" +\n        Arrays.<Object>asList(it, appendable).toString());\n    }\n  }","commit_id":"c8bdff688231733472462bacac6cf3372b172d7d","url":"https://github.com/eclipse/xtext"},{"original_method":"protected final Preference createPref(FormatterSetting formatterSetting, Composite composite, int numColumns) {\n\t\tPreference result = null;\n\t\tswitch (formatterSetting.getType()) {\n\t\t\tcase NUMBER_FIELD:\n\t\t\t\tresult = createNumberPref(composite, numColumns, formatterSetting.getLabel(),\n\t\t\t\t\t\tformatterSetting.getName());\n\t\t\t\tbreak;\n\t\t\tcase COMBO_BOX:\n\t\t\t\tresult = createComboPref(composite, numColumns, formatterSetting.getLabel(),\n\t\t\t\t\t\tformatterSetting.getName(), asStringArray(formatterSetting.getPosibleValues()),\n\t\t\t\t\t\tasStringArray(formatterSetting.getPosibleValuesLabels()));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn result;\n\t}","id":70674,"modified_method":"protected final void createPref(FormatterSetting formatterSetting, Composite composite, int numColumns) {\n\t\tswitch (formatterSetting.getType()) {\n\t\t\tcase NUMBER_FIELD:\n\t\t\t\tcreateNumberPref(composite, numColumns, formatterSetting.getLabel(), formatterSetting.getName());\n\t\t\t\tbreak;\n\t\t\tcase MIN_MAX_FIELDS:\n\t\t\t\tcreateMinMaxPref(composite, numColumns, formatterSetting.getLabel(), formatterSetting.getName());\n\t\t\t\tbreak;\n\t\t\tcase COMBO_BOX:\n\t\t\t\tcreateComboPref(composite, numColumns, formatterSetting.getLabel(), formatterSetting.getName(),\n\t\t\t\t\t\tasStringArray(formatterSetting.getPosibleValues()),\n\t\t\t\t\t\tasStringArray(formatterSetting.getPosibleValuesLabels()));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}","commit_id":"58f4d29500d1ed00d471ff62ec4da0ede48342b4","url":"https://github.com/eclipse/xtext"},{"original_method":"public static List<FormatterSetting> settings(final XtendFormatterConfig config) {\n    final List<FormatterSetting> settings = CollectionLiterals.<FormatterSetting>newArrayList();\n    Map<String,Field> _namedProperties = config.getNamedProperties();\n    Set<Entry<String,Field>> _entrySet = _namedProperties.entrySet();\n    for (final Entry<String,Field> entry : _entrySet) {\n      {\n        final String key = entry.getKey();\n        String[] _split = key.split(\"\\\\.\");\n        final String category = IterableExtensions.<String>head(((Iterable<String>)Conversions.doWrapArray(_split)));\n        Category catEnum = Category.byName(category);\n        Field _value = entry.getValue();\n        Class<? extends Object> _type = _value.getType();\n        boolean _equals = int.class.equals(_type);\n        if (_equals) {\n          String _firstUpper = StringExtensions.toFirstUpper(key);\n          Field _value_1 = entry.getValue();\n          String _name = _value_1.getName();\n          ArrayList<String> _newArrayList = CollectionLiterals.<String>newArrayList(_name);\n          FormatterSetting _createSetting = FormatterPreferenceInfra.createSetting(catEnum, WidgetType.NUMBER_FIELD, key, _firstUpper, _newArrayList);\n          settings.add(_createSetting);\n        }\n      }\n    }\n    return settings;\n  }","id":70675,"modified_method":"public static List<FormatterSetting> settings(final XtendFormatterConfig config) {\n    final List<FormatterSetting> settings = CollectionLiterals.<FormatterSetting>newArrayList();\n    Map<String,Field> _namedProperties = config.getNamedProperties();\n    Set<Entry<String,Field>> _entrySet = _namedProperties.entrySet();\n    for (final Entry<String,Field> entry : _entrySet) {\n      {\n        final String key = entry.getKey();\n        String[] _split = key.split(\"\\\\.\");\n        final String category = IterableExtensions.<String>head(((Iterable<String>)Conversions.doWrapArray(_split)));\n        Category catEnum = Category.byName(category);\n        Field _value = entry.getValue();\n        Class<? extends Object> _type = _value.getType();\n        final Class<? extends Object> _switchValue = _type;\n        boolean _matched = false;\n        if (!_matched) {\n          if (Objects.equal(_switchValue,int.class)) {\n            _matched=true;\n            Field _value_1 = entry.getValue();\n            String _name = _value_1.getName();\n            ArrayList<String> _newArrayList = CollectionLiterals.<String>newArrayList(_name);\n            FormatterSetting _createSetting = FormatterPreferenceInfra.createSetting(catEnum, WidgetType.NUMBER_FIELD, key, _newArrayList);\n            settings.add(_createSetting);\n          }\n        }\n        if (!_matched) {\n          if (Objects.equal(_switchValue,NewLineConfig.class)) {\n            _matched=true;\n            Field _value_2 = entry.getValue();\n            String _name_1 = _value_2.getName();\n            ArrayList<String> _newArrayList_1 = CollectionLiterals.<String>newArrayList(_name_1);\n            FormatterSetting _createSetting_1 = FormatterPreferenceInfra.createSetting(catEnum, WidgetType.MIN_MAX_FIELDS, key, _newArrayList_1);\n            settings.add(_createSetting_1);\n          }\n        }\n      }\n    }\n    return settings;\n  }","commit_id":"58f4d29500d1ed00d471ff62ec4da0ede48342b4","url":"https://github.com/eclipse/xtext"},{"original_method":"public static FormatterSetting createSetting(final Category category, final WidgetType type, final String name, final String label, final List<String> values) {\n    FormatterSetting _formatterSetting = new FormatterSetting(category, name, label, type, values);\n    return _formatterSetting;\n  }","id":70676,"modified_method":"public static FormatterSetting createSetting(final Category category, final WidgetType type, final String name, final List<String> values) {\n    final String label = Messages.bind(name, null);\n    FormatterSetting _formatterSetting = new FormatterSetting(category, name, label, type, values);\n    return _formatterSetting;\n  }","commit_id":"58f4d29500d1ed00d471ff62ec4da0ede48342b4","url":"https://github.com/eclipse/xtext"},{"original_method":"public static CharSequence previewText(final Category category) {\n    CharSequence _switchResult = null;\n    boolean _matched = false;\n    if (!_matched) {\n      if (Objects.equal(category,Category.INDENTATION)) {\n        _matched=true;\n        StringConcatenation _builder = new StringConcatenation();\n        _builder.append(\"class BugTester {\");\n        _builder.newLine();\n        _builder.append(\"def myDef(){\");\n        _builder.newLine();\n        _builder.append(\"println(\\\"Works fine\\\")\");\n        _builder.newLine();\n        _builder.append(\"}\");\n        _builder.newLine();\n        _builder.append(\"}\");\n        _switchResult = _builder;\n      }\n    }\n    if (!_matched) {\n      if (Objects.equal(category,Category.LINE_WRAPPING)) {\n        _matched=true;\n        StringConcatenation _builder_1 = new StringConcatenation();\n        _builder_1.append(\"class Movies {\");\n        _builder_1.newLine();\n        _builder_1.append(\"  \");\n        _builder_1.append(\"def readMovies() {\");\n        _builder_1.newLine();\n        _builder_1.append(\"    \");\n        _builder_1.append(\"val movies = new FileReader(\\'data.csv\\').readLines.map [ line |  val segments = line.split(\\'  \\').iterator\");\n        _builder_1.newLine();\n        _builder_1.append(\"    \");\n        _builder_1.append(\"return new Movie(segments.next, Integer::parseInt(segments.next), Double::parseDouble(segments.next), Long::parseLong(segments.next),  segments.toSet)]\");\n        _builder_1.newLine();\n        _builder_1.append(\"  \");\n        _builder_1.append(\"}\");\n        _builder_1.newLine();\n        _builder_1.append(\"}\");\n        _switchResult = _builder_1;\n      }\n    }\n    if (!_matched) {\n      StringConcatenation _builder_2 = new StringConcatenation();\n      _builder_2.append(\"class Movies {\");\n      _builder_2.newLine();\n      _builder_2.append(\"def settings(XtendFormatterConfig config) {\");\n      _builder_2.newLine();\n      _builder_2.append(\"val List<FormatterSetting> settings = newArrayList()\");\n      _builder_2.newLine();\n      _builder_2.append(\"for (entry : config.namedProperties.entrySet) {\");\n      _builder_2.newLine();\n      _builder_2.append(\"val key = entry.key\");\n      _builder_2.newLine();\n      _builder_2.append(\"val category = key.split(\\\".\\\").head\");\n      _builder_2.newLine();\n      _builder_2.append(\"var catEnum = SettingsData$Category::byName(category)\");\n      _builder_2.newLine();\n      _builder_2.append(\"if (catEnum == null)\");\n      _builder_2.newLine();\n      _builder_2.append(\"catEnum = SettingsData$Category::OTHER\");\n      _builder_2.newLine();\n      _builder_2.append(\"settings.add(\");\n      _builder_2.newLine();\n      _builder_2.append(\"createSetting(catEnum, SettingsData$WidgetType::NUMBER_FIELD, key, key.toFirstUpper,\");\n      _builder_2.newLine();\n      _builder_2.append(\"newArrayList(entry.value.name)))\");\n      _builder_2.newLine();\n      _builder_2.append(\"}\");\n      _builder_2.newLine();\n      _builder_2.append(\"return settings\");\n      _builder_2.newLine();\n      _builder_2.append(\"}\");\n      _builder_2.newLine();\n      _builder_2.append(\"}\");\n      _builder_2.newLine();\n      _switchResult = _builder_2;\n    }\n    return _switchResult;\n  }","id":70677,"modified_method":"public static CharSequence previewText(final Category category) {\n    CharSequence _switchResult = null;\n    boolean _matched = false;\n    if (!_matched) {\n      if (Objects.equal(category,Category.INDENTATION)) {\n        _matched=true;\n        StringConcatenation _builder = new StringConcatenation();\n        _builder.append(\"class BugTester {\");\n        _builder.newLine();\n        _builder.append(\"def myDef(){\");\n        _builder.newLine();\n        _builder.append(\"println(\\\"Works fine\\\")\");\n        _builder.newLine();\n        _builder.append(\"}\");\n        _builder.newLine();\n        _builder.append(\"}\");\n        _switchResult = _builder;\n      }\n    }\n    if (!_matched) {\n      if (Objects.equal(category,Category.LINE_WRAPPING)) {\n        _matched=true;\n        StringConcatenation _builder_1 = new StringConcatenation();\n        _builder_1.append(\"package test\");\n        _builder_1.newLine();\n        _builder_1.newLine();\n        _builder_1.append(\"import java.io.FileReader\");\n        _builder_1.newLine();\n        _builder_1.append(\"import java.util.List\");\n        _builder_1.newLine();\n        _builder_1.newLine();\n        _builder_1.append(\"class XtendClass {\");\n        _builder_1.newLine();\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\");\n        _builder_1.append(\"def testy() {\");\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\");\n        _builder_1.append(\"}\");\n        _builder_1.newLine();\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\");\n        _builder_1.append(\"def readMovies() {\");\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\\t\");\n        _builder_1.append(\"val movies = new FileReader(\\'data.csv\\').readLines.map[\");\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\\t\\t\");\n        _builder_1.append(\"line |line.toFirstUpper.toFirstLower.toFirstLower.toFirstUpper]\");\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\\t\");\n        _builder_1.append(\"return movies\");\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\");\n        _builder_1.append(\"}\");\n        _builder_1.newLine();\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\");\n        _builder_1.append(\"def List<String> readLines(FileReader fr) {\");\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\\t\");\n        _builder_1.append(\"return newArrayList(\\\"\\\")\");\n        _builder_1.newLine();\n        _builder_1.append(\"\\t\");\n        _builder_1.append(\"}\");\n        _builder_1.newLine();\n        _builder_1.append(\"}\");\n        _builder_1.newLine();\n        _switchResult = _builder_1;\n      }\n    }\n    if (!_matched) {\n      StringConcatenation _builder_2 = new StringConcatenation();\n      _builder_2.append(\"class Movies {\");\n      _builder_2.newLine();\n      _builder_2.append(\"def settings(XtendFormatterConfig config) {\");\n      _builder_2.newLine();\n      _builder_2.append(\"val List<FormatterSetting> settings = newArrayList()\");\n      _builder_2.newLine();\n      _builder_2.append(\"for (entry : config.namedProperties.entrySet) {\");\n      _builder_2.newLine();\n      _builder_2.append(\"val key = entry.key\");\n      _builder_2.newLine();\n      _builder_2.append(\"val category = key.split(\\\".\\\").head\");\n      _builder_2.newLine();\n      _builder_2.append(\"var catEnum = SettingsData$Category::byName(category)\");\n      _builder_2.newLine();\n      _builder_2.append(\"if (catEnum == null)\");\n      _builder_2.newLine();\n      _builder_2.append(\"catEnum = SettingsData$Category::OTHER\");\n      _builder_2.newLine();\n      _builder_2.append(\"settings.add(\");\n      _builder_2.newLine();\n      _builder_2.append(\"createSetting(catEnum, SettingsData$WidgetType::NUMBER_FIELD, key, key.toFirstUpper,\");\n      _builder_2.newLine();\n      _builder_2.append(\"newArrayList(entry.value.name)))\");\n      _builder_2.newLine();\n      _builder_2.append(\"}\");\n      _builder_2.newLine();\n      _builder_2.append(\"return settings\");\n      _builder_2.newLine();\n      _builder_2.append(\"}\");\n      _builder_2.newLine();\n      _builder_2.append(\"}\");\n      _builder_2.newLine();\n      _switchResult = _builder_2;\n    }\n    return _switchResult;\n  }","commit_id":"58f4d29500d1ed00d471ff62ec4da0ede48342b4","url":"https://github.com/eclipse/xtext"},{"original_method":"public static void main(final String[] args) {\n    try {\n      InetSocketAddress _inetSocketAddress = new InetSocketAddress(\"localhost\", 8080);\n      final Server server = new Server(_inetSocketAddress);\n      HandlerList _handlerList = new HandlerList();\n      final Procedure1<HandlerList> _function = new Procedure1<HandlerList>() {\n        @Override\n        public void apply(final HandlerList it) {\n          ResourceHandler _resourceHandler = new ResourceHandler();\n          final Procedure1<ResourceHandler> _function = new Procedure1<ResourceHandler>() {\n            @Override\n            public void apply(final ResourceHandler it) {\n              it.setResourceBase(\"src/main/webapp\");\n              it.setWelcomeFiles(new String[] { \"index.html\" });\n            }\n          };\n          ResourceHandler _doubleArrow = ObjectExtensions.<ResourceHandler>operator_doubleArrow(_resourceHandler, _function);\n          WebAppContext _webAppContext = new WebAppContext();\n          final Procedure1<WebAppContext> _function_1 = new Procedure1<WebAppContext>() {\n            @Override\n            public void apply(final WebAppContext it) {\n              it.setResourceBase(\"../org.eclipse.xtext.web/src/main/js\");\n              it.setContextPath(\"/\");\n              AnnotationConfiguration _annotationConfiguration = new AnnotationConfiguration();\n              WebXmlConfiguration _webXmlConfiguration = new WebXmlConfiguration();\n              WebInfConfiguration _webInfConfiguration = new WebInfConfiguration();\n              MetaInfConfiguration _metaInfConfiguration = new MetaInfConfiguration();\n              it.setConfigurations(new Configuration[] { _annotationConfiguration, _webXmlConfiguration, _webInfConfiguration, _metaInfConfiguration });\n              it.setAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN, \".*org\\\\.eclipse\\\\.xtext\\\\.web.*\");\n            }\n          };\n          WebAppContext _doubleArrow_1 = ObjectExtensions.<WebAppContext>operator_doubleArrow(_webAppContext, _function_1);\n          it.setHandlers(new Handler[] { _doubleArrow, _doubleArrow_1 });\n        }\n      };\n      HandlerList _doubleArrow = ObjectExtensions.<HandlerList>operator_doubleArrow(_handlerList, _function);\n      server.setHandler(_doubleArrow);\n      final Slf4jLog log = new Slf4jLog();\n      server.start();\n      log.info(\"Press enter to stop the server...\");\n      final Runnable _function_1 = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            final int key = System.in.read();\n            server.stop();\n            if ((key == (-1))) {\n              log.warn(\"The standard input stream is empty.\");\n            }\n          } catch (Throwable _e) {\n            throw Exceptions.sneakyThrow(_e);\n          }\n        }\n      };\n      Thread _thread = new Thread(_function_1);\n      _thread.start();\n      server.join();\n    } catch (Throwable _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":70678,"modified_method":"public static void main(final String[] args) {\n    InetSocketAddress _inetSocketAddress = new InetSocketAddress(\"localhost\", 8080);\n    final Server server = new Server(_inetSocketAddress);\n    HandlerList _handlerList = new HandlerList();\n    final Procedure1<HandlerList> _function = new Procedure1<HandlerList>() {\n      @Override\n      public void apply(final HandlerList it) {\n        ResourceHandler _resourceHandler = new ResourceHandler();\n        final Procedure1<ResourceHandler> _function = new Procedure1<ResourceHandler>() {\n          @Override\n          public void apply(final ResourceHandler it) {\n            it.setResourceBase(\"src/main/webapp\");\n            it.setWelcomeFiles(new String[] { \"index.html\" });\n          }\n        };\n        ResourceHandler _doubleArrow = ObjectExtensions.<ResourceHandler>operator_doubleArrow(_resourceHandler, _function);\n        WebAppContext _webAppContext = new WebAppContext();\n        final Procedure1<WebAppContext> _function_1 = new Procedure1<WebAppContext>() {\n          @Override\n          public void apply(final WebAppContext it) {\n            it.setResourceBase(\"../org.eclipse.xtext.web/src/main/js\");\n            it.setContextPath(\"/\");\n            AnnotationConfiguration _annotationConfiguration = new AnnotationConfiguration();\n            WebXmlConfiguration _webXmlConfiguration = new WebXmlConfiguration();\n            WebInfConfiguration _webInfConfiguration = new WebInfConfiguration();\n            MetaInfConfiguration _metaInfConfiguration = new MetaInfConfiguration();\n            it.setConfigurations(new Configuration[] { _annotationConfiguration, _webXmlConfiguration, _webInfConfiguration, _metaInfConfiguration });\n            it.setAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN, \".*org\\\\.eclipse\\\\.xtext\\\\.web.*\");\n          }\n        };\n        WebAppContext _doubleArrow_1 = ObjectExtensions.<WebAppContext>operator_doubleArrow(_webAppContext, _function_1);\n        it.setHandlers(new Handler[] { _doubleArrow, _doubleArrow_1 });\n      }\n    };\n    HandlerList _doubleArrow = ObjectExtensions.<HandlerList>operator_doubleArrow(_handlerList, _function);\n    server.setHandler(_doubleArrow);\n    String _name = ServerLauncher.class.getName();\n    final Slf4jLog log = new Slf4jLog(_name);\n    try {\n      server.start();\n      log.info(\"Press enter to stop the server...\");\n      final Runnable _function_1 = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            final int key = System.in.read();\n            server.stop();\n            if ((key == (-1))) {\n              log.warn(\"The standard input stream is empty.\");\n            }\n          } catch (Throwable _e) {\n            throw Exceptions.sneakyThrow(_e);\n          }\n        }\n      };\n      Thread _thread = new Thread(_function_1);\n      _thread.start();\n      server.join();\n    } catch (final Throwable _t) {\n      if (_t instanceof Exception) {\n        final Exception exception = (Exception)_t;\n        String _message = exception.getMessage();\n        log.warn(_message);\n        System.exit(1);\n      } else {\n        throw Exceptions.sneakyThrow(_t);\n      }\n    }\n  }","commit_id":"cf862a50642ff6938d5726434f36c2aeefa8ec1f","url":"https://github.com/eclipse/xtext"},{"original_method":"public ValidationResult validate(final XtextWebDocumentAccess document) throws InvalidRequestException {\n    final CancelableUnitOfWork<Collection<Issue>, IXtextWebDocument> _function = new CancelableUnitOfWork<Collection<Issue>, IXtextWebDocument>() {\n      @Override\n      public Collection<Issue> exec(final IXtextWebDocument it, final CancelIndicator cancelIndicator) throws Exception {\n        ValidationService.this.updateDocumentService.processUpdatedDocument(it, cancelIndicator);\n        return it.getIssues();\n      }\n    };\n    final Collection<Issue> issues = document.<Collection<Issue>>readOnly(_function);\n    final ValidationResult result = new ValidationResult();\n    final Function1<Issue, Boolean> _function_1 = new Function1<Issue, Boolean>() {\n      @Override\n      public Boolean apply(final Issue it) {\n        Severity _severity = it.getSeverity();\n        return Boolean.valueOf((!Objects.equal(_severity, Severity.IGNORE)));\n      }\n    };\n    Iterable<Issue> _filter = IterableExtensions.<Issue>filter(issues, _function_1);\n    final Procedure1<Issue> _function_2 = new Procedure1<Issue>() {\n      @Override\n      public void apply(final Issue issue) {\n        ArrayList<ValidationResult.Entry> _entries = result.getEntries();\n        String _message = issue.getMessage();\n        Severity _severity = issue.getSeverity();\n        String _translate = ValidationService.this.translate(_severity);\n        Integer _lineNumber = issue.getLineNumber();\n        Integer _offset = issue.getOffset();\n        Integer _offset_1 = issue.getOffset();\n        Integer _length = issue.getLength();\n        int _plus = ((_offset_1).intValue() + (_length).intValue());\n        ValidationResult.Entry _entry = new ValidationResult.Entry(_message, _translate, _lineNumber, _offset, Integer.valueOf(_plus));\n        _entries.add(_entry);\n      }\n    };\n    IterableExtensions.<Issue>forEach(_filter, _function_2);\n    return result;\n  }","id":70679,"modified_method":"public ValidationResult validate(final XtextWebDocumentAccess document) throws InvalidRequestException {\n    final CancelableUnitOfWork<Collection<Issue>, IXtextWebDocument> _function = new CancelableUnitOfWork<Collection<Issue>, IXtextWebDocument>() {\n      @Override\n      public Collection<Issue> exec(final IXtextWebDocument it, final CancelIndicator cancelIndicator) throws Exception {\n        ValidationService.this._updateDocumentService.processUpdatedDocument(it, cancelIndicator);\n        return it.getIssues();\n      }\n    };\n    final Collection<Issue> issues = document.<Collection<Issue>>readOnly(_function);\n    final ValidationResult result = new ValidationResult();\n    final Function1<Issue, Boolean> _function_1 = new Function1<Issue, Boolean>() {\n      @Override\n      public Boolean apply(final Issue it) {\n        Severity _severity = it.getSeverity();\n        return Boolean.valueOf((!Objects.equal(_severity, Severity.IGNORE)));\n      }\n    };\n    Iterable<Issue> _filter = IterableExtensions.<Issue>filter(issues, _function_1);\n    final Procedure1<Issue> _function_2 = new Procedure1<Issue>() {\n      @Override\n      public void apply(final Issue issue) {\n        ArrayList<ValidationResult.Entry> _entries = result.getEntries();\n        String _message = issue.getMessage();\n        Severity _severity = issue.getSeverity();\n        String _translate = ValidationService.this.translate(_severity);\n        Integer _lineNumber = issue.getLineNumber();\n        Integer _offset = issue.getOffset();\n        Integer _offset_1 = issue.getOffset();\n        Integer _length = issue.getLength();\n        int _plus = ((_offset_1).intValue() + (_length).intValue());\n        ValidationResult.Entry _entry = new ValidationResult.Entry(_message, _translate, _lineNumber, _offset, Integer.valueOf(_plus));\n        _entries.add(_entry);\n      }\n    };\n    IterableExtensions.<Issue>forEach(_filter, _function_2);\n    return result;\n  }","commit_id":"cf862a50642ff6938d5726434f36c2aeefa8ec1f","url":"https://github.com/eclipse/xtext"},{"original_method":"public IFile contributeXtendCode(final IProjectFactoryContributor.IFileCreator fc) {\n    IFile _xblockexpression = null;\n    {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"package \");\n      String _basePackage = this.projectInfo.getBasePackage();\n      _builder.append(_basePackage, \"\");\n      _builder.append(\".\");\n      _builder.append(XtextProjectInfo.WEB, \"\");\n      _builder.newLineIfNotEmpty();\n      _builder.newLine();\n      _builder.append(\"import java.net.InetSocketAddress\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.annotations.AnnotationConfiguration\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.server.Server\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.util.log.Slf4jLog\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.webapp.MetaInfConfiguration\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.webapp.WebAppContext\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.webapp.WebInfConfiguration\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.webapp.WebXmlConfiguration\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"class ServerLauncher {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"def static void main(String[] args) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"val server = new Server(new InetSocketAddress(\\'localhost\\', 8080))\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"server.handler = new WebAppContext => [\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"resourceBase = \\'src/main/webapp\\'\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"welcomeFiles = #[\\\"index.html\\\"]\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"contextPath = \\\"/\\\"\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"configurations = #[\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"new AnnotationConfiguration,\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"new WebXmlConfiguration,\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"new WebInfConfiguration,\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"new MetaInfConfiguration\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"]\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"setAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN, \\\".*org\\\\\\\\.eclipse\\\\\\\\.xtext\\\\\\\\.web.*|.*\");\n      String _webProjectName = this.projectInfo.getWebProjectName();\n      String _replaceAll = _webProjectName.replaceAll(\"\\\\.\", \"\\\\\\\\\\\\\\\\.\");\n      _builder.append(_replaceAll, \"\\t\\t\\t\");\n      _builder.append(\".*|.*requirejs.*|.*jquery.*\\\")\");\n      _builder.newLineIfNotEmpty();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"]\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"val log = new Slf4jLog\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"server.start\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"log.info(\\'Press enter to stop the server...\\')\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"new Thread[\");\n      _builder.newLine();\n      _builder.append(\"\\t    \\t\");\n      _builder.append(\"val key = System.in.read\");\n      _builder.newLine();\n      _builder.append(\"\\t    \\t\");\n      _builder.append(\"server.stop\");\n      _builder.newLine();\n      _builder.append(\"\\t    \\t\");\n      _builder.append(\"if (key == -1)\");\n      _builder.newLine();\n      _builder.append(\"\\t    \\t\\t\");\n      _builder.append(\"log.warn(\\'The standard input stream is empty. If you are using Gradle, set the property \\\\\\'standardInput = System.in\\\\\\' in the JavaExec task.\\')\");\n      _builder.newLine();\n      _builder.append(\"\\t    \");\n      _builder.append(\"].start\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"server.join\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      String _baseWebPackagePath = this.baseWebPackagePath();\n      String _plus = (_baseWebPackagePath + \"/ServerLauncher.xtend\");\n      this.writeToFile(_builder, fc, _plus);\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"package \");\n      String _basePackage_1 = this.projectInfo.getBasePackage();\n      _builder_1.append(_basePackage_1, \"\");\n      _builder_1.append(\".\");\n      _builder_1.append(XtextProjectInfo.WEB, \"\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.newLine();\n      _builder_1.append(\"import com.google.inject.Guice\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.concurrent.ExecutorService\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.concurrent.Executors\");\n      _builder_1.newLine();\n      _builder_1.append(\"import javax.servlet.annotation.WebServlet\");\n      _builder_1.newLine();\n      _builder_1.append(\"import \");\n      String _basePackage_2 = this.projectInfo.getBasePackage();\n      _builder_1.append(_basePackage_2, \"\");\n      _builder_1.append(\".\");\n      String _languageNameAbbreviation = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation, \"\");\n      _builder_1.append(\"RuntimeModule\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"import \");\n      String _basePackage_3 = this.projectInfo.getBasePackage();\n      _builder_1.append(_basePackage_3, \"\");\n      _builder_1.append(\".\");\n      String _languageNameAbbreviation_1 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_1, \"\");\n      _builder_1.append(\"StandaloneSetup\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"import org.eclipse.xtext.web.servlet.XtextServlet\");\n      _builder_1.newLine();\n      _builder_1.append(\"import com.google.inject.Module\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"@WebServlet(name = \\\"Xtext Services\\\", urlPatterns = \\\"/xtext-service/*\\\")\");\n      _builder_1.newLine();\n      _builder_1.append(\"class \");\n      String _languageNameAbbreviation_2 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_2, \"\");\n      _builder_1.append(\"XtextServlet extends XtextServlet {\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"ExecutorService executorService\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"override init() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"super.init()\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"executorService = Executors.newCachedThreadPool\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"new \");\n      String _languageNameAbbreviation_3 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_3, \"\\t\\t\");\n      _builder_1.append(\"StandaloneSetup {\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"\\t\\t\\t\");\n      _builder_1.append(\"override createInjector() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\\t\\t\");\n      _builder_1.append(\"val runtimeModule = new \");\n      String _languageNameAbbreviation_4 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_4, \"\\t\\t\\t\\t\");\n      _builder_1.append(\"RuntimeModule as Module\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"\\t\\t\\t\\t\");\n      _builder_1.append(\"val webModule = new \");\n      String _languageNameAbbreviation_5 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_5, \"\\t\\t\\t\\t\");\n      _builder_1.append(\"WebModule(executorService)\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"\\t\\t\\t\\t\");\n      _builder_1.append(\"return Guice.createInjector(runtimeModule, webModule)\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\\t\");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"}.createInjectorAndDoEMFRegistration\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"override destroy() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"if (executorService !== null)\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\\t\");\n      _builder_1.append(\"executorService.shutdown()\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"executorService = null\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"super.destroy()\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      StringConcatenation _builder_2 = new StringConcatenation();\n      String _baseWebPackagePath_1 = this.baseWebPackagePath();\n      _builder_2.append(_baseWebPackagePath_1, \"\");\n      _builder_2.append(\"/\");\n      String _languageNameAbbreviation_6 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_2.append(_languageNameAbbreviation_6, \"\");\n      _builder_2.append(\"XtextServlet.xtend\");\n      this.writeToFile(_builder_1, fc, _builder_2.toString());\n      StringConcatenation _builder_3 = new StringConcatenation();\n      _builder_3.append(\"package \");\n      String _basePackage_4 = this.projectInfo.getBasePackage();\n      _builder_3.append(_basePackage_4, \"\");\n      _builder_3.append(\".\");\n      _builder_3.append(XtextProjectInfo.WEB, \"\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.newLine();\n      _builder_3.append(\"import com.google.inject.Binder\");\n      _builder_3.newLine();\n      _builder_3.append(\"import com.google.inject.name.Names\");\n      _builder_3.newLine();\n      _builder_3.append(\"import java.util.concurrent.ExecutorService\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtend.lib.annotations.Accessors\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtext.ide.LexerIdeBindings\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtext.ide.editor.contentassist.antlr.IContentAssistParser\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtext.service.AbstractGenericModule\");\n      _builder_3.newLine();\n      _builder_3.append(\"import \");\n      String _basePackage_5 = this.projectInfo.getBasePackage();\n      _builder_3.append(_basePackage_5, \"\");\n      _builder_3.append(\".ide.contentassist.antlr.\");\n      String _languageNameAbbreviation_7 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_7, \"\");\n      _builder_3.append(\"Parser\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.append(\"import \");\n      String _basePackage_6 = this.projectInfo.getBasePackage();\n      _builder_3.append(_basePackage_6, \"\");\n      _builder_3.append(\".ide.contentassist.antlr.internal.Internal\");\n      String _languageNameAbbreviation_8 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_8, \"\");\n      _builder_3.append(\"Lexer\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.newLine();\n      _builder_3.append(\"@Accessors\");\n      _builder_3.newLine();\n      _builder_3.append(\"@FinalFieldsConstructor\");\n      _builder_3.newLine();\n      _builder_3.append(\"class \");\n      String _languageNameAbbreviation_9 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_9, \"\");\n      _builder_3.append(\"WebModule extends AbstractGenericModule {\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"val ExecutorService executorService\");\n      _builder_3.newLine();\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"def configureExecutorService(Binder binder) {\");\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\\t\");\n      _builder_3.append(\"binder.bind(ExecutorService).toInstance(executorService)\");\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"}\");\n      _builder_3.newLine();\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"def configureContentAssistLexer(Binder binder) {\");\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\\t\");\n      _builder_3.append(\"binder.bind(Lexer).annotatedWith(Names.named(LexerIdeBindings.CONTENT_ASSIST)).to(Internal\");\n      String _languageNameAbbreviation_10 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_10, \"\\t\\t\");\n      _builder_3.append(\"Lexer)\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"}\");\n      _builder_3.newLine();\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"def Class<? extends IContentAssistParser> bindIContentAssistParser() {\");\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\\t\");\n      String _languageNameAbbreviation_11 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_11, \"\\t\\t\");\n      _builder_3.append(\"Parser\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"}\");\n      _builder_3.newLine();\n      _builder_3.newLine();\n      _builder_3.append(\"}\");\n      _builder_3.newLine();\n      StringConcatenation _builder_4 = new StringConcatenation();\n      String _baseWebPackagePath_2 = this.baseWebPackagePath();\n      _builder_4.append(_baseWebPackagePath_2, \"\");\n      _builder_4.append(\"/\");\n      String _languageNameAbbreviation_12 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_4.append(_languageNameAbbreviation_12, \"\");\n      _builder_4.append(\"WebModule.xtend\");\n      _xblockexpression = this.writeToFile(_builder_3, fc, _builder_4.toString());\n    }\n    return _xblockexpression;\n  }","id":70680,"modified_method":"public IFile contributeXtendCode(final IProjectFactoryContributor.IFileCreator fc) {\n    IFile _xblockexpression = null;\n    {\n      StringConcatenation _builder = new StringConcatenation();\n      _builder.append(\"package \");\n      String _basePackage = this.projectInfo.getBasePackage();\n      _builder.append(_basePackage, \"\");\n      _builder.append(\".\");\n      _builder.append(XtextProjectInfo.WEB, \"\");\n      _builder.newLineIfNotEmpty();\n      _builder.newLine();\n      _builder.append(\"import java.net.InetSocketAddress\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.annotations.AnnotationConfiguration\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.server.Server\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.util.log.Slf4jLog\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.webapp.MetaInfConfiguration\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.webapp.WebAppContext\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.webapp.WebInfConfiguration\");\n      _builder.newLine();\n      _builder.append(\"import org.eclipse.jetty.webapp.WebXmlConfiguration\");\n      _builder.newLine();\n      _builder.newLine();\n      _builder.append(\"class ServerLauncher {\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"def static void main(String[] args) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"val server = new Server(new InetSocketAddress(\\'localhost\\', 8080))\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"server.handler = new WebAppContext => [\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"resourceBase = \\'src/main/webapp\\'\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"welcomeFiles = #[\\\"index.html\\\"]\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"contextPath = \\\"/\\\"\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"configurations = #[\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"new AnnotationConfiguration,\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"new WebXmlConfiguration,\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"new WebInfConfiguration,\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\\t\");\n      _builder.append(\"new MetaInfConfiguration\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"]\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"setAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN, \\\".*org\\\\\\\\.eclipse\\\\\\\\.xtext\\\\\\\\.web.*|.*\");\n      String _webProjectName = this.projectInfo.getWebProjectName();\n      String _replaceAll = _webProjectName.replaceAll(\"\\\\.\", \"\\\\\\\\\\\\\\\\.\");\n      _builder.append(_replaceAll, \"\\t\\t\\t\");\n      _builder.append(\".*|.*requirejs.*|.*jquery.*\\\")\");\n      _builder.newLineIfNotEmpty();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"]\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"val log = new Slf4jLog(ServerLauncher.name)\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"try {\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"server.start\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"log.info(\\'Press enter to stop the server...\\')\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"new Thread[\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t    \\t\");\n      _builder.append(\"val key = System.in.read\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t    \\t\");\n      _builder.append(\"server.stop\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t    \\t\");\n      _builder.append(\"if (key == -1)\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t    \\t\\t\");\n      _builder.append(\"log.warn(\\'The standard input stream is empty.\\')\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t    \");\n      _builder.append(\"].start\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"server.join\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"} catch (Exception exception) {\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"log.warn(exception.message)\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\\t\");\n      _builder.append(\"System.exit(1)\");\n      _builder.newLine();\n      _builder.append(\"\\t\\t\");\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"\\t\");\n      _builder.append(\"}\");\n      _builder.newLine();\n      _builder.append(\"}\");\n      _builder.newLine();\n      String _baseWebPackagePath = this.baseWebPackagePath();\n      String _plus = (_baseWebPackagePath + \"/ServerLauncher.xtend\");\n      this.writeToFile(_builder, fc, _plus);\n      StringConcatenation _builder_1 = new StringConcatenation();\n      _builder_1.append(\"package \");\n      String _basePackage_1 = this.projectInfo.getBasePackage();\n      _builder_1.append(_basePackage_1, \"\");\n      _builder_1.append(\".\");\n      _builder_1.append(XtextProjectInfo.WEB, \"\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.newLine();\n      _builder_1.append(\"import com.google.inject.Guice\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.concurrent.ExecutorService\");\n      _builder_1.newLine();\n      _builder_1.append(\"import java.util.concurrent.Executors\");\n      _builder_1.newLine();\n      _builder_1.append(\"import javax.servlet.annotation.WebServlet\");\n      _builder_1.newLine();\n      _builder_1.append(\"import \");\n      String _basePackage_2 = this.projectInfo.getBasePackage();\n      _builder_1.append(_basePackage_2, \"\");\n      _builder_1.append(\".\");\n      String _languageNameAbbreviation = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation, \"\");\n      _builder_1.append(\"RuntimeModule\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"import \");\n      String _basePackage_3 = this.projectInfo.getBasePackage();\n      _builder_1.append(_basePackage_3, \"\");\n      _builder_1.append(\".\");\n      String _languageNameAbbreviation_1 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_1, \"\");\n      _builder_1.append(\"StandaloneSetup\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"import org.eclipse.xtext.web.servlet.XtextServlet\");\n      _builder_1.newLine();\n      _builder_1.append(\"import com.google.inject.Module\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"@WebServlet(name = \\\"Xtext Services\\\", urlPatterns = \\\"/xtext-service/*\\\")\");\n      _builder_1.newLine();\n      _builder_1.append(\"class \");\n      String _languageNameAbbreviation_2 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_2, \"\");\n      _builder_1.append(\"XtextServlet extends XtextServlet {\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"ExecutorService executorService\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"override init() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"super.init()\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"executorService = Executors.newCachedThreadPool\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"new \");\n      String _languageNameAbbreviation_3 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_3, \"\\t\\t\");\n      _builder_1.append(\"StandaloneSetup {\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"\\t\\t\\t\");\n      _builder_1.append(\"override createInjector() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\\t\\t\");\n      _builder_1.append(\"val runtimeModule = new \");\n      String _languageNameAbbreviation_4 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_4, \"\\t\\t\\t\\t\");\n      _builder_1.append(\"RuntimeModule as Module\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"\\t\\t\\t\\t\");\n      _builder_1.append(\"val webModule = new \");\n      String _languageNameAbbreviation_5 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_1.append(_languageNameAbbreviation_5, \"\\t\\t\\t\\t\");\n      _builder_1.append(\"WebModule(executorService)\");\n      _builder_1.newLineIfNotEmpty();\n      _builder_1.append(\"\\t\\t\\t\\t\");\n      _builder_1.append(\"return Guice.createInjector(runtimeModule, webModule)\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\\t\");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"}.createInjectorAndDoEMFRegistration\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"override destroy() {\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"if (executorService !== null)\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\\t\");\n      _builder_1.append(\"executorService.shutdown()\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"executorService = null\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\\t\");\n      _builder_1.append(\"super.destroy()\");\n      _builder_1.newLine();\n      _builder_1.append(\"\\t\");\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      _builder_1.newLine();\n      _builder_1.append(\"}\");\n      _builder_1.newLine();\n      StringConcatenation _builder_2 = new StringConcatenation();\n      String _baseWebPackagePath_1 = this.baseWebPackagePath();\n      _builder_2.append(_baseWebPackagePath_1, \"\");\n      _builder_2.append(\"/\");\n      String _languageNameAbbreviation_6 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_2.append(_languageNameAbbreviation_6, \"\");\n      _builder_2.append(\"XtextServlet.xtend\");\n      this.writeToFile(_builder_1, fc, _builder_2.toString());\n      StringConcatenation _builder_3 = new StringConcatenation();\n      _builder_3.append(\"package \");\n      String _basePackage_4 = this.projectInfo.getBasePackage();\n      _builder_3.append(_basePackage_4, \"\");\n      _builder_3.append(\".\");\n      _builder_3.append(XtextProjectInfo.WEB, \"\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.newLine();\n      _builder_3.append(\"import com.google.inject.Binder\");\n      _builder_3.newLine();\n      _builder_3.append(\"import com.google.inject.name.Names\");\n      _builder_3.newLine();\n      _builder_3.append(\"import java.util.concurrent.ExecutorService\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtend.lib.annotations.Accessors\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtext.ide.LexerIdeBindings\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtext.ide.editor.contentassist.antlr.IContentAssistParser\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer\");\n      _builder_3.newLine();\n      _builder_3.append(\"import org.eclipse.xtext.service.AbstractGenericModule\");\n      _builder_3.newLine();\n      _builder_3.append(\"import \");\n      String _basePackage_5 = this.projectInfo.getBasePackage();\n      _builder_3.append(_basePackage_5, \"\");\n      _builder_3.append(\".ide.contentassist.antlr.\");\n      String _languageNameAbbreviation_7 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_7, \"\");\n      _builder_3.append(\"Parser\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.append(\"import \");\n      String _basePackage_6 = this.projectInfo.getBasePackage();\n      _builder_3.append(_basePackage_6, \"\");\n      _builder_3.append(\".ide.contentassist.antlr.internal.Internal\");\n      String _languageNameAbbreviation_8 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_8, \"\");\n      _builder_3.append(\"Lexer\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.newLine();\n      _builder_3.append(\"@Accessors\");\n      _builder_3.newLine();\n      _builder_3.append(\"@FinalFieldsConstructor\");\n      _builder_3.newLine();\n      _builder_3.append(\"class \");\n      String _languageNameAbbreviation_9 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_9, \"\");\n      _builder_3.append(\"WebModule extends AbstractGenericModule {\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"val ExecutorService executorService\");\n      _builder_3.newLine();\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"def configureExecutorService(Binder binder) {\");\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\\t\");\n      _builder_3.append(\"binder.bind(ExecutorService).toInstance(executorService)\");\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"}\");\n      _builder_3.newLine();\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"def configureContentAssistLexer(Binder binder) {\");\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\\t\");\n      _builder_3.append(\"binder.bind(Lexer).annotatedWith(Names.named(LexerIdeBindings.CONTENT_ASSIST)).to(Internal\");\n      String _languageNameAbbreviation_10 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_10, \"\\t\\t\");\n      _builder_3.append(\"Lexer)\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"}\");\n      _builder_3.newLine();\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"def Class<? extends IContentAssistParser> bindIContentAssistParser() {\");\n      _builder_3.newLine();\n      _builder_3.append(\"\\t\\t\");\n      String _languageNameAbbreviation_11 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_3.append(_languageNameAbbreviation_11, \"\\t\\t\");\n      _builder_3.append(\"Parser\");\n      _builder_3.newLineIfNotEmpty();\n      _builder_3.append(\"\\t\");\n      _builder_3.append(\"}\");\n      _builder_3.newLine();\n      _builder_3.newLine();\n      _builder_3.append(\"}\");\n      _builder_3.newLine();\n      StringConcatenation _builder_4 = new StringConcatenation();\n      String _baseWebPackagePath_2 = this.baseWebPackagePath();\n      _builder_4.append(_baseWebPackagePath_2, \"\");\n      _builder_4.append(\"/\");\n      String _languageNameAbbreviation_12 = this.projectInfo.getLanguageNameAbbreviation();\n      _builder_4.append(_languageNameAbbreviation_12, \"\");\n      _builder_4.append(\"WebModule.xtend\");\n      _xblockexpression = this.writeToFile(_builder_3, fc, _builder_4.toString());\n    }\n    return _xblockexpression;\n  }","commit_id":"cf862a50642ff6938d5726434f36c2aeefa8ec1f","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n  protected void service(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {\n    try {\n      super.service(req, resp);\n    } catch (final Throwable _t) {\n      if (_t instanceof InvalidRequestException) {\n        final InvalidRequestException ire = (InvalidRequestException)_t;\n        String _requestURI = req.getRequestURI();\n        String _plus = (\"Invalid request (\" + _requestURI);\n        String _plus_1 = (_plus + \"): \");\n        String _message = ire.getMessage();\n        String _plus_2 = (_plus_1 + _message);\n        this.LOG.trace(_plus_2);\n        int _switchResult = (int) 0;\n        InvalidRequestException.Type _type = ire.getType();\n        if (_type != null) {\n          switch (_type) {\n            case RESOURCE_NOT_FOUND:\n              _switchResult = 404;\n              break;\n            case INVALID_DOCUMENT_STATE:\n              _switchResult = 409;\n              break;\n            default:\n              _switchResult = 400;\n              break;\n          }\n        } else {\n          _switchResult = 400;\n        }\n        final int statusCode = _switchResult;\n        String _message_1 = ire.getMessage();\n        resp.sendError(statusCode, _message_1);\n      } else {\n        throw Exceptions.sneakyThrow(_t);\n      }\n    }\n  }","id":70681,"modified_method":"@Override\n  protected void service(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {\n    try {\n      super.service(req, resp);\n    } catch (final Throwable _t) {\n      if (_t instanceof InvalidRequestException) {\n        final InvalidRequestException ire = (InvalidRequestException)_t;\n        String _requestURI = req.getRequestURI();\n        String _plus = (\"Invalid request (\" + _requestURI);\n        String _plus_1 = (_plus + \"): \");\n        String _message = ire.getMessage();\n        String _plus_2 = (_plus_1 + _message);\n        this.LOG.trace(_plus_2);\n        int _switchResult = (int) 0;\n        InvalidRequestException.Type _type = ire.getType();\n        if (_type != null) {\n          switch (_type) {\n            case RESOURCE_NOT_FOUND:\n              _switchResult = HttpServletResponse.SC_NOT_FOUND;\n              break;\n            case INVALID_DOCUMENT_STATE:\n              _switchResult = HttpServletResponse.SC_CONFLICT;\n              break;\n            case PERMISSION_DENIED:\n              _switchResult = HttpServletResponse.SC_FORBIDDEN;\n              break;\n            default:\n              _switchResult = HttpServletResponse.SC_BAD_REQUEST;\n              break;\n          }\n        } else {\n          _switchResult = HttpServletResponse.SC_BAD_REQUEST;\n        }\n        final int statusCode = _switchResult;\n        String _message_1 = ire.getMessage();\n        resp.sendError(statusCode, _message_1);\n      } else {\n        throw Exceptions.sneakyThrow(_t);\n      }\n    }\n  }","commit_id":"cf862a50642ff6938d5726434f36c2aeefa8ec1f","url":"https://github.com/eclipse/xtext"},{"original_method":"protected XtextServiceDispatcher.ServiceDescriptor getService(final HttpServletRequest req) {\n    try {\n      HttpSession _session = req.getSession();\n      final HttpServletSessionStore sessionStore = new HttpServletSessionStore(_session);\n      final Map<String, String> parameters = this.getParameterMap(req);\n      final Injector injector = this.getInjector(parameters);\n      final XtextServiceDispatcher serviceDispatcher = injector.<XtextServiceDispatcher>getInstance(XtextServiceDispatcher.class);\n      String _elvis = null;\n      String _pathInfo = req.getPathInfo();\n      if (_pathInfo != null) {\n        _elvis = _pathInfo;\n      } else {\n        _elvis = \"\";\n      }\n      return serviceDispatcher.getService(_elvis, parameters, sessionStore);\n    } catch (Throwable _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":70682,"modified_method":"protected XtextServiceDispatcher.ServiceDescriptor getService(final HttpServletRequest req) {\n    try {\n      HttpSession _session = req.getSession();\n      final HttpServletSessionStore sessionStore = new HttpServletSessionStore(_session);\n      final Map<String, String> parameters = this.getParameterMap(req);\n      final Injector injector = this.getInjector(parameters);\n      final XtextServiceDispatcher serviceDispatcher = injector.<XtextServiceDispatcher>getInstance(XtextServiceDispatcher.class);\n      String _elvis = null;\n      String _pathInfo = req.getPathInfo();\n      if (_pathInfo != null) {\n        _elvis = _pathInfo;\n      } else {\n        _elvis = \"\";\n      }\n      final XtextServiceDispatcher.ServiceDescriptor service = serviceDispatcher.getService(_elvis, parameters, sessionStore);\n      this.checkPermission(req, service);\n      return service;\n    } catch (Throwable _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"cf862a50642ff6938d5726434f36c2aeefa8ec1f","url":"https://github.com/eclipse/xtext"},{"original_method":"private void writeJarTarget( XMLWriter writer )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Creation target\", 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"jar\" );\n        writer.addAttribute( \"depends\", \"compile,test\" );\n        writer.addAttribute( \"description\", \"Create the JAR\" );\n\n        writer.startElement( \"jar\" );\n        writer.addAttribute( \"jarfile\", \"${maven.build.dir}/${maven.build.finalName}.jar\" );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"jar\", \"basedir\", \"${maven.build.outputDir}\", 3 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"jar\", \"excludes\", \"**/package.html\", 3 );\n        writer.endElement(); // jar\n\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","id":70683,"modified_method":"/**\n     * Write jar target in the writer depending the packaging of the project.\n     *\n     * @param writer\n     */\n    private void writeJarTarget( XMLWriter writer )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Creation target\", 1 );\n\n        if ( isPomPackaging( project ) )\n        {\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"jar\" );\n            writer.addAttribute( \"description\", \"Create the JAR\" );\n            if ( project.getModules() != null )\n            {\n                for ( Iterator it = project.getModules().iterator(); it.hasNext(); )\n                {\n                    String moduleSubPath = (String) it.next();\n                    writer.startElement( \"ant\" );\n                    writer.addAttribute( \"antfile\", \"build.xml\" );\n                    writer.addAttribute( \"dir\", PathUtils.toRelative( project.getBasedir(), moduleSubPath ) );\n                    writer.addAttribute( \"target\", \"jar\" );\n                    writer.endElement(); // ant\n                }\n            }\n            writer.endElement(); // target\n        }\n        else\n        {\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"jar\" );\n            writer.addAttribute( \"depends\", \"compile,test\" );\n            writer.addAttribute( \"description\", \"Create the JAR\" );\n\n            writer.startElement( \"jar\" );\n            writer.addAttribute( \"jarfile\", \"${maven.build.dir}/${maven.build.finalName}.jar\" );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"jar\", \"basedir\", \"${maven.build.outputDir}\", 3 );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"jar\", \"excludes\", \"**/package.html\", 3 );\n            writer.endElement(); // jar\n\n            writer.endElement(); // target\n        }\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void writeTestTargets( XMLWriter writer, List testCompileSourceRoots )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Run all tests\", 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"test\" );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"depends\", \"junit-present, compile-tests\", 2 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"if\", \"junit.present\", 2 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"description\", \"Run the test cases\", 2 );\n\n        if ( !testCompileSourceRoots.isEmpty() )\n        {\n            writer.startElement( \"mkdir\" );\n            writer.addAttribute( \"dir\", \"${maven.test.reports}\" );\n            writer.endElement(); //mkdir\n\n            writer.startElement( \"junit\" );\n            writer.addAttribute( \"printSummary\", \"yes\" );\n            writer.addAttribute( \"haltonerror\", \"true\" );\n            writer.addAttribute( \"haltonfailure\", \"true\" );\n            writer.addAttribute( \"fork\", \"true\" );\n            writer.addAttribute( \"dir\", \".\" );\n\n            writer.startElement( \"sysproperty\" );\n            writer.addAttribute( \"key\", \"basedir\" );\n            writer.addAttribute( \"value\", \".\" );\n            writer.endElement(); // sysproperty\n\n            writer.startElement( \"formatter\" );\n            writer.addAttribute( \"type\", \"xml\" );\n            writer.endElement(); // formatter\n\n            writer.startElement( \"formatter\" );\n            writer.addAttribute( \"type\", \"plain\" );\n            writer.addAttribute( \"usefile\", \"false\" );\n            writer.endElement(); // formatter\n\n            writer.startElement( \"classpath\" );\n            writer.startElement( \"path\" );\n            writer.addAttribute( \"refid\", \"build.test.classpath\" );\n            writer.endElement(); // path\n            writer.startElement( \"pathelement\" );\n            writer.addAttribute( \"location\", \"${maven.build.outputDir}\" );\n            writer.endElement(); // pathelement\n            writer.startElement( \"pathelement\" );\n            writer.addAttribute( \"location\", \"${maven.build.testOutputDir}\" );\n            writer.endElement(); // pathelement\n            writer.endElement(); // classpath\n\n            writer.startElement( \"batchtest\" );\n            writer.addAttribute( \"todir\", \"${maven.test.reports}\" );\n\n            String[] compileSourceRoots = (String[]) testCompileSourceRoots.toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                writer.startElement( \"fileset\" );\n                writer.addAttribute( \"dir\", \"${maven.build.testDir.\" + i + \"}\" );\n                /* TODO: need to get these from the test plugin somehow?\n                 UnitTest unitTest = project.getBuild().getUnitTest();\n                 writeIncludesExcludes( writer, unitTest.getIncludes(), unitTest.getExcludes() );\n                 // TODO: m1 allows additional test exclusions via maven.ant.excludeTests\n                 */\n                writeIncludesExcludes( writer, Collections.singletonList( \"**/*Test.java\" ), Collections\n                    .singletonList( \"**/*Abstract*Test.java\" ) );\n                writer.endElement(); // fileset\n            }\n            writer.endElement(); // batchtest\n\n            writer.endElement(); // junit\n        }\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"test-junit-present\" );\n\n        writer.startElement( \"available\" );\n        writer.addAttribute( \"classname\", \"junit.framework.Test\" );\n        writer.addAttribute( \"property\", \"junit.present\" );\n        writer.endElement(); // available\n\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"junit-present\" );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"depends\", \"test-junit-present\", 2 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"unless\", \"junit.present\", 2 );\n\n        writer.startElement( \"echo\" );\n        writer.writeText( StringUtils.repeat( \"=\", 35 ) + \" WARNING \" + StringUtils.repeat( \"=\", 35 ) );\n        writer.endElement(); // echo\n\n        writer.startElement( \"echo\" );\n        writer.writeText( \" Junit isn't present in your $ANT_HOME/lib directory. Tests not executed. \" );\n        writer.endElement(); // echo\n\n        writer.startElement( \"echo\" );\n        writer.writeText( StringUtils.repeat( \"=\", 79 ) );\n        writer.endElement(); // echo\n\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","id":70684,"modified_method":"/**\n     * Write test target in the writer depending the packaging of the project.\n     *\n     * @param writer\n     * @param testCompileSourceRoots\n     */\n    private void writeTestTargets( XMLWriter writer, List testCompileSourceRoots )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Run all tests\", 1 );\n\n        if ( isPomPackaging( project ) )\n        {\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"test\" );\n            writer.addAttribute( \"description\", \"Run the test cases\" );\n            if ( project.getModules() != null )\n            {\n                for ( Iterator it = project.getModules().iterator(); it.hasNext(); )\n                {\n                    String moduleSubPath = (String) it.next();\n                    writer.startElement( \"ant\" );\n                    writer.addAttribute( \"antfile\", \"build.xml\" );\n                    writer.addAttribute( \"dir\", PathUtils.toRelative( project.getBasedir(), moduleSubPath ) );\n                    writer.addAttribute( \"target\", \"test\" );\n                    writer.endElement(); // ant\n                }\n            }\n            writer.endElement(); // target\n        }\n        else\n        {\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"test\" );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"depends\", \"junit-present, compile-tests\", 2 );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"if\", \"junit.present\", 2 );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"description\", \"Run the test cases\", 2 );\n\n            if ( !testCompileSourceRoots.isEmpty() )\n            {\n                writer.startElement( \"mkdir\" );\n                writer.addAttribute( \"dir\", \"${maven.test.reports}\" );\n                writer.endElement(); //mkdir\n\n                writer.startElement( \"junit\" );\n                writer.addAttribute( \"printSummary\", \"yes\" );\n                writer.addAttribute( \"haltonerror\", \"true\" );\n                writer.addAttribute( \"haltonfailure\", \"true\" );\n                writer.addAttribute( \"fork\", \"true\" );\n                writer.addAttribute( \"dir\", \".\" );\n\n                writer.startElement( \"sysproperty\" );\n                writer.addAttribute( \"key\", \"basedir\" );\n                writer.addAttribute( \"value\", \".\" );\n                writer.endElement(); // sysproperty\n\n                writer.startElement( \"formatter\" );\n                writer.addAttribute( \"type\", \"xml\" );\n                writer.endElement(); // formatter\n\n                writer.startElement( \"formatter\" );\n                writer.addAttribute( \"type\", \"plain\" );\n                writer.addAttribute( \"usefile\", \"false\" );\n                writer.endElement(); // formatter\n\n                writer.startElement( \"classpath\" );\n                writer.startElement( \"path\" );\n                writer.addAttribute( \"refid\", \"build.test.classpath\" );\n                writer.endElement(); // path\n                writer.startElement( \"pathelement\" );\n                writer.addAttribute( \"location\", \"${maven.build.outputDir}\" );\n                writer.endElement(); // pathelement\n                writer.startElement( \"pathelement\" );\n                writer.addAttribute( \"location\", \"${maven.build.testOutputDir}\" );\n                writer.endElement(); // pathelement\n                writer.endElement(); // classpath\n\n                writer.startElement( \"batchtest\" );\n                writer.addAttribute( \"todir\", \"${maven.test.reports}\" );\n\n                String[] compileSourceRoots = (String[]) testCompileSourceRoots.toArray( new String[0] );\n                for ( int i = 0; i < compileSourceRoots.length; i++ )\n                {\n                    writer.startElement( \"fileset\" );\n                    writer.addAttribute( \"dir\", \"${maven.build.testDir.\" + i + \"}\" );\n                    /* TODO: need to get these from the test plugin somehow?\n                     UnitTest unitTest = project.getBuild().getUnitTest();\n                     writeIncludesExcludes( writer, unitTest.getIncludes(), unitTest.getExcludes() );\n                     // TODO: m1 allows additional test exclusions via maven.ant.excludeTests\n                     */\n                    writeIncludesExcludes( writer, Collections.singletonList( \"**/*Test.java\" ), Collections\n                        .singletonList( \"**/*Abstract*Test.java\" ) );\n                    writer.endElement(); // fileset\n                }\n                writer.endElement(); // batchtest\n\n                writer.endElement(); // junit\n            }\n            writer.endElement(); // target\n\n            AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"test-junit-present\" );\n\n            writer.startElement( \"available\" );\n            writer.addAttribute( \"classname\", \"junit.framework.Test\" );\n            writer.addAttribute( \"property\", \"junit.present\" );\n            writer.endElement(); // available\n\n            writer.endElement(); // target\n\n            AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"junit-present\" );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"depends\", \"test-junit-present\", 2 );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"unless\", \"junit.present\", 2 );\n\n            writer.startElement( \"echo\" );\n            writer.writeText( StringUtils.repeat( \"=\", 35 ) + \" WARNING \" + StringUtils.repeat( \"=\", 35 ) );\n            writer.endElement(); // echo\n\n            writer.startElement( \"echo\" );\n            writer.writeText( \" Junit isn't present in your $ANT_HOME/lib directory. Tests not executed. \" );\n            writer.endElement(); // echo\n\n            writer.startElement( \"echo\" );\n            writer.writeText( StringUtils.repeat( \"=\", 79 ) );\n            writer.endElement(); // echo\n\n            writer.endElement(); // target\n        }\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * @param writer\n     */\n    private void writeGetDepsTarget( XMLWriter writer )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Download dependencies target\", 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"test-offline\" );\n\n        writer.startElement( \"condition\" );\n        writer.addAttribute( \"property\", \"maven.mode.offline\" );\n        writer.startElement( \"equals\" );\n        writer.addAttribute( \"arg1\", \"${maven.settings.offline}\" );\n        writer.addAttribute( \"arg2\", \"true\" );\n        writer.endElement(); // equals\n        writer.endElement(); // condition\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"get-deps\" );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"depends\", \"test-offline\", 2 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"description\", \"Download all dependencies\", 2 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"unless\", \"maven.mode.offline\", 2 ); // TODO: check, and differs from m1\n\n        writer.startElement( \"mkdir\" );\n        writer.addAttribute( \"dir\", \"${maven.repo.local}\" );\n        writer.endElement(); // mkdir\n\n        // TODO: proxy - probably better to use wagon!\n        for ( Iterator i = project.getTestArtifacts().iterator(); i.hasNext(); )\n        {\n            Artifact artifact = (Artifact) i.next();\n\n            // TODO: should the artifacthandler be used instead?\n            String path = PathUtils.toRelative( localRepository, artifact.getFile().getPath() );\n\n            File parentDirs = new File( path ).getParentFile();\n            if ( parentDirs != null )\n            {\n                writer.startElement( \"mkdir\" );\n                writer.addAttribute( \"dir\", \"${maven.repo.local}/\" + parentDirs.getPath() );\n                writer.endElement(); // mkdir\n            }\n\n            for ( Iterator j = project.getRepositories().iterator(); j.hasNext(); )\n            {\n                Repository repository = (Repository) j.next();\n\n                writer.startElement( \"get\" );\n                writer.addAttribute( \"src\", repository.getUrl() + \"/\" + path );\n                AntBuildWriterUtil.addWrapAttribute( writer, \"get\", \"dest\", \"${maven.repo.local}/\" + path, 3 );\n                AntBuildWriterUtil.addWrapAttribute( writer, \"get\", \"usetimestamp\", \"true\", 3 );\n                AntBuildWriterUtil.addWrapAttribute( writer, \"get\", \"ignoreerrors\", \"true\", 3 );\n                writer.endElement(); // get\n            }\n        }\n\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","id":70685,"modified_method":"/**\n     * Write get-deps target in the writer only for a non-POM project\n     *\n     * @param writer\n     */\n    private void writeGetDepsTarget( XMLWriter writer )\n    {\n        if ( isPomPackaging( project ) )\n        {\n            return;\n        }\n\n        AntBuildWriterUtil.writeCommentText( writer, \"Download dependencies target\", 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"test-offline\" );\n\n        writer.startElement( \"condition\" );\n        writer.addAttribute( \"property\", \"maven.mode.offline\" );\n        writer.startElement( \"equals\" );\n        writer.addAttribute( \"arg1\", \"${maven.settings.offline}\" );\n        writer.addAttribute( \"arg2\", \"true\" );\n        writer.endElement(); // equals\n        writer.endElement(); // condition\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"get-deps\" );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"depends\", \"test-offline\", 2 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"description\", \"Download all dependencies\", 2 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"unless\", \"maven.mode.offline\", 2 ); // TODO: check, and differs from m1\n\n        writer.startElement( \"mkdir\" );\n        writer.addAttribute( \"dir\", \"${maven.repo.local}\" );\n        writer.endElement(); // mkdir\n\n        // TODO: proxy - probably better to use wagon!\n        for ( Iterator i = project.getTestArtifacts().iterator(); i.hasNext(); )\n        {\n            Artifact artifact = (Artifact) i.next();\n\n            // TODO: should the artifacthandler be used instead?\n            String path = PathUtils.toRelative( localRepository, artifact.getFile().getPath() );\n\n            File parentDirs = new File( path ).getParentFile();\n            if ( parentDirs != null )\n            {\n                writer.startElement( \"mkdir\" );\n                writer.addAttribute( \"dir\", \"${maven.repo.local}/\" + parentDirs.getPath() );\n                writer.endElement(); // mkdir\n            }\n\n            for ( Iterator j = project.getRepositories().iterator(); j.hasNext(); )\n            {\n                Repository repository = (Repository) j.next();\n\n                writer.startElement( \"get\" );\n                writer.addAttribute( \"src\", repository.getUrl() + \"/\" + path );\n                AntBuildWriterUtil.addWrapAttribute( writer, \"get\", \"dest\", \"${maven.repo.local}/\" + path, 3 );\n                AntBuildWriterUtil.addWrapAttribute( writer, \"get\", \"usetimestamp\", \"true\", 3 );\n                AntBuildWriterUtil.addWrapAttribute( writer, \"get\", \"ignoreerrors\", \"true\", 3 );\n                writer.endElement(); // get\n            }\n        }\n\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void writeBuildPathDefinition( XMLWriter writer )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Defining classpaths\", 1 );\n\n        writer.startElement( \"path\" );\n        writer.addAttribute( \"id\", \"build.classpath\" );\n        writer.startElement( \"fileset\" );\n        writer.addAttribute( \"dir\", \"${maven.repo.local}\" );\n        if ( !project.getCompileArtifacts().isEmpty() )\n        {\n            for ( Iterator i = project.getCompileArtifacts().iterator(); i.hasNext(); )\n            {\n                Artifact artifact = (Artifact) i.next();\n                writer.startElement( \"include\" );\n                writer.addAttribute( \"name\", PathUtils.toRelative( localRepository, artifact.getFile().getPath() ) );\n                writer.endElement(); // include\n            }\n        }\n        else\n        {\n            writer.startElement( \"include\" );\n            writer.addAttribute( \"name\", \"*.jar\" );\n            writer.endElement(); // include\n        }\n        writer.endElement(); // fileset\n        writer.endElement(); // path\n\n        writer.startElement( \"path\" );\n        writer.addAttribute( \"id\", \"build.test.classpath\" );\n        writer.startElement( \"fileset\" );\n        writer.addAttribute( \"dir\", \"${maven.repo.local}\" );\n        if ( !project.getTestArtifacts().isEmpty() )\n        {\n            for ( Iterator i = project.getTestArtifacts().iterator(); i.hasNext(); )\n            {\n                Artifact artifact = (Artifact) i.next();\n                writer.startElement( \"include\" );\n                writer.addAttribute( \"name\", PathUtils.toRelative( localRepository, artifact.getFile().getPath() ) );\n                writer.endElement(); // include\n            }\n        }\n        else\n        {\n            writer.startElement( \"include\" );\n            writer.addAttribute( \"name\", \"*.jar\" );\n            writer.endElement(); // include\n        }\n        writer.endElement(); // fileset\n        writer.endElement(); // path\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","id":70686,"modified_method":"/**\n     * Write path definition in the writer only for a non-POM project.\n     *\n     * @param writer\n     */\n    private void writeBuildPathDefinition( XMLWriter writer )\n    {\n        if ( isPomPackaging( project ) )\n        {\n            return;\n        }\n\n        AntBuildWriterUtil.writeCommentText( writer, \"Defining classpaths\", 1 );\n\n        writer.startElement( \"path\" );\n        writer.addAttribute( \"id\", \"build.classpath\" );\n        writer.startElement( \"fileset\" );\n        writer.addAttribute( \"dir\", \"${maven.repo.local}\" );\n        if ( !project.getCompileArtifacts().isEmpty() )\n        {\n            for ( Iterator i = project.getCompileArtifacts().iterator(); i.hasNext(); )\n            {\n                Artifact artifact = (Artifact) i.next();\n                writer.startElement( \"include\" );\n                writer.addAttribute( \"name\", PathUtils.toRelative( localRepository, artifact.getFile().getPath() ) );\n                writer.endElement(); // include\n            }\n        }\n        else\n        {\n            writer.startElement( \"include\" );\n            writer.addAttribute( \"name\", \"*.jar\" );\n            writer.endElement(); // include\n        }\n        writer.endElement(); // fileset\n        writer.endElement(); // path\n\n        writer.startElement( \"path\" );\n        writer.addAttribute( \"id\", \"build.test.classpath\" );\n        writer.startElement( \"fileset\" );\n        writer.addAttribute( \"dir\", \"${maven.repo.local}\" );\n        if ( !project.getTestArtifacts().isEmpty() )\n        {\n            for ( Iterator i = project.getTestArtifacts().iterator(); i.hasNext(); )\n            {\n                Artifact artifact = (Artifact) i.next();\n                writer.startElement( \"include\" );\n                writer.addAttribute( \"name\", PathUtils.toRelative( localRepository, artifact.getFile().getPath() ) );\n                writer.endElement(); // include\n            }\n        }\n        else\n        {\n            writer.startElement( \"include\" );\n            writer.addAttribute( \"name\", \"*.jar\" );\n            writer.endElement(); // include\n        }\n        writer.endElement(); // fileset\n        writer.endElement(); // path\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void writeCompileTestsTarget( XMLWriter writer, List testCompileSourceRoots )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Test-compilation target\", 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"compile-tests\" );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"depends\", \"junit-present, compile\", 2 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"description\", \"Compile the test code\", 2 );\n        AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"if\", \"junit.present\", 2 );\n\n        writeCompileTasks( writer, project.getBasedir(), \"${maven.build.testOutputDir}\", testCompileSourceRoots,\n                           project.getBuild().getTestResources(), \"${maven.build.outputDir}\", true );\n\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","id":70687,"modified_method":"/**\n     * Write compile-test target in the writer depending the packaging of the project.\n     *\n     * @param writer\n     * @param testCompileSourceRoots\n     */\n    private void writeCompileTestsTarget( XMLWriter writer, List testCompileSourceRoots )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Test-compilation target\", 1 );\n\n        if ( isPomPackaging( project ) )\n        {\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"compile-tests\" );\n            writer.addAttribute( \"description\", \"Compile the test code\" );\n            if ( project.getModules() != null )\n            {\n                for ( Iterator it = project.getModules().iterator(); it.hasNext(); )\n                {\n                    String moduleSubPath = (String) it.next();\n                    writer.startElement( \"ant\" );\n                    writer.addAttribute( \"antfile\", \"build.xml\" );\n                    writer.addAttribute( \"dir\", PathUtils.toRelative( project.getBasedir(), moduleSubPath ) );\n                    writer.addAttribute( \"target\", \"compile-tests\" );\n                    writer.endElement(); // ant\n                }\n            }\n            writer.endElement(); // target\n        }\n        else\n        {\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"compile-tests\" );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"depends\", \"junit-present, compile\", 2 );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"description\", \"Compile the test code\", 2 );\n            AntBuildWriterUtil.addWrapAttribute( writer, \"target\", \"if\", \"junit.present\", 2 );\n\n            writeCompileTasks( writer, project.getBasedir(), \"${maven.build.testOutputDir}\", testCompileSourceRoots,\n                               project.getBuild().getTestResources(), \"${maven.build.outputDir}\", true );\n\n            writer.endElement(); // target\n        }\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void writeProperties( XMLWriter writer )\n    {\n        // TODO: optional in m1\n        // TODO: USD properties\n        AntBuildWriterUtil.writeCommentText( writer, \"Build environnement properties\", 1 );\n\n        // ----------------------------------------------------------------------\n        // File properties to override local properties\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"file\", \"${user.home}/.m2/maven.properties\" );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"file\", DEFAULT_MAVEN_PROPERTIES_FILENAME );\n        writer.endElement(); // property\n\n        // ----------------------------------------------------------------------\n        // Build properties\n        // ----------------------------------------------------------------------\n\n        AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.build.finalName\" );\n        writer.addAttribute( \"value\", project.getBuild().getFinalName() );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.build.dir\" );\n        writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), project.getBuild().getDirectory() ) );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.build.outputDir\" );\n        writer.addAttribute( \"value\", \"${maven.build.dir}/\"\n            + PathUtils.toRelative( new File( project.getBuild().getDirectory() ), project.getBuild()\n                .getOutputDirectory() ) );\n        writer.endElement(); // property\n\n        if ( !project.getCompileSourceRoots().isEmpty() )\n        {\n            String[] compileSourceRoots = (String[]) project.getCompileSourceRoots().toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                writer.startElement( \"property\" );\n                writer.addAttribute( \"name\", \"maven.build.srcDir.\" + i );\n                writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), compileSourceRoots[i] ) );\n                writer.endElement(); // property\n            }\n        }\n\n        if ( project.getBuild().getResources() != null )\n        {\n            Resource[] array = (Resource[]) project.getBuild().getResources().toArray( new Resource[0] );\n            for ( int i = 0; i < array.length; i++ )\n            {\n                writer.startElement( \"property\" );\n                writer.addAttribute( \"name\", \"maven.build.resourceDir.\" + i );\n                writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), array[i].getDirectory() ) );\n                writer.endElement(); // property\n            }\n        }\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.build.testOutputDir\" );\n        writer.addAttribute( \"value\", \"${maven.build.dir}/\"\n            + PathUtils.toRelative( new File( project.getBuild().getDirectory() ), project.getBuild()\n                .getTestOutputDirectory() ) );\n        writer.endElement(); // property\n\n        if ( !project.getTestCompileSourceRoots().isEmpty() )\n        {\n            String[] compileSourceRoots = (String[]) project.getTestCompileSourceRoots().toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                writer.startElement( \"property\" );\n                writer.addAttribute( \"name\", \"maven.build.testDir.\" + i );\n                writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), compileSourceRoots[i] ) );\n                writer.endElement(); // property\n            }\n        }\n\n        if ( project.getBuild().getResources() != null )\n        {\n            Resource[] array = (Resource[]) project.getBuild().getResources().toArray( new Resource[0] );\n            for ( int i = 0; i < array.length; i++ )\n            {\n                writer.startElement( \"property\" );\n                writer.addAttribute( \"name\", \"maven.build.testResourceDir.\" + i );\n                writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), array[i].getDirectory() ) );\n                writer.endElement(); // property\n            }\n        }\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.test.reports\" );\n        writer.addAttribute( \"value\", \"${maven.build.dir}/test-reports\" );\n        writer.endElement(); // property\n\n        // ----------------------------------------------------------------------\n        // Setting properties\n        // ----------------------------------------------------------------------\n\n        AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.repo.local\" );\n        writer.addAttribute( \"value\", localRepository.getAbsolutePath() );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.settings.offline\" );\n        writer.addAttribute( \"value\", String.valueOf( settings.isOffline() ) );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.settings.interactiveMode\" );\n        writer.addAttribute( \"value\", String.valueOf( settings.isInteractiveMode() ) );\n        writer.endElement(); // property\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","id":70688,"modified_method":"/**\n     * Write properties in the writer only for a non-POM project.\n     *\n     * @param writer\n     */\n    private void writeProperties( XMLWriter writer )\n    {\n        if ( isPomPackaging( project ) )\n        {\n            return;\n        }\n\n        // TODO: optional in m1\n        // TODO: USD properties\n        AntBuildWriterUtil.writeCommentText( writer, \"Build environnement properties\", 1 );\n\n        // ----------------------------------------------------------------------\n        // File properties to override local properties\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"file\", \"${user.home}/.m2/maven.properties\" );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"file\", DEFAULT_MAVEN_PROPERTIES_FILENAME );\n        writer.endElement(); // property\n\n        // ----------------------------------------------------------------------\n        // Build properties\n        // ----------------------------------------------------------------------\n\n        AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.build.finalName\" );\n        writer.addAttribute( \"value\", project.getBuild().getFinalName() );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.build.dir\" );\n        writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), project.getBuild().getDirectory() ) );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.build.outputDir\" );\n        writer.addAttribute( \"value\", \"${maven.build.dir}/\"\n            + PathUtils.toRelative( new File( project.getBuild().getDirectory() ), project.getBuild()\n                .getOutputDirectory() ) );\n        writer.endElement(); // property\n\n        if ( !project.getCompileSourceRoots().isEmpty() )\n        {\n            String[] compileSourceRoots = (String[]) project.getCompileSourceRoots().toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                writer.startElement( \"property\" );\n                writer.addAttribute( \"name\", \"maven.build.srcDir.\" + i );\n                writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), compileSourceRoots[i] ) );\n                writer.endElement(); // property\n            }\n        }\n\n        if ( project.getBuild().getResources() != null )\n        {\n            Resource[] array = (Resource[]) project.getBuild().getResources().toArray( new Resource[0] );\n            for ( int i = 0; i < array.length; i++ )\n            {\n                writer.startElement( \"property\" );\n                writer.addAttribute( \"name\", \"maven.build.resourceDir.\" + i );\n                writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), array[i].getDirectory() ) );\n                writer.endElement(); // property\n            }\n        }\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.build.testOutputDir\" );\n        writer.addAttribute( \"value\", \"${maven.build.dir}/\"\n            + PathUtils.toRelative( new File( project.getBuild().getDirectory() ), project.getBuild()\n                .getTestOutputDirectory() ) );\n        writer.endElement(); // property\n\n        if ( !project.getTestCompileSourceRoots().isEmpty() )\n        {\n            String[] compileSourceRoots = (String[]) project.getTestCompileSourceRoots().toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                writer.startElement( \"property\" );\n                writer.addAttribute( \"name\", \"maven.build.testDir.\" + i );\n                writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), compileSourceRoots[i] ) );\n                writer.endElement(); // property\n            }\n        }\n\n        if ( project.getBuild().getResources() != null )\n        {\n            Resource[] array = (Resource[]) project.getBuild().getResources().toArray( new Resource[0] );\n            for ( int i = 0; i < array.length; i++ )\n            {\n                writer.startElement( \"property\" );\n                writer.addAttribute( \"name\", \"maven.build.testResourceDir.\" + i );\n                writer.addAttribute( \"value\", PathUtils.toRelative( project.getBasedir(), array[i].getDirectory() ) );\n                writer.endElement(); // property\n            }\n        }\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.test.reports\" );\n        writer.addAttribute( \"value\", \"${maven.build.dir}/test-reports\" );\n        writer.endElement(); // property\n\n        // ----------------------------------------------------------------------\n        // Setting properties\n        // ----------------------------------------------------------------------\n\n        AntBuildWriterUtil.writeLineBreak( writer, 2, 1 );\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.repo.local\" );\n        writer.addAttribute( \"value\", localRepository.getAbsolutePath() );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.settings.offline\" );\n        writer.addAttribute( \"value\", String.valueOf( settings.isOffline() ) );\n        writer.endElement(); // property\n\n        writer.startElement( \"property\" );\n        writer.addAttribute( \"name\", \"maven.settings.interactiveMode\" );\n        writer.addAttribute( \"value\", String.valueOf( settings.isInteractiveMode() ) );\n        writer.endElement(); // property\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void writeCompileTarget( XMLWriter writer, List compileSourceRoots )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Compilation target\", 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"compile\" );\n        writer.addAttribute( \"depends\", \"get-deps\" );\n        writer.addAttribute( \"description\", \"Compile the code\" );\n\n        writeCompileTasks( writer, project.getBasedir(), \"${maven.build.outputDir}\", compileSourceRoots, project\n            .getBuild().getResources(), null, false );\n\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","id":70689,"modified_method":"/**\n     * Write compile target in the writer depending the packaging of the project.\n     *\n     * @param writer\n     * @param compileSourceRoots\n     */\n    private void writeCompileTarget( XMLWriter writer, List compileSourceRoots )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Compilation target\", 1 );\n\n        if ( isPomPackaging( project ) )\n        {\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"compile\" );\n            writer.addAttribute( \"description\", \"Compile the code\" );\n            if ( project.getModules() != null )\n            {\n                for ( Iterator it = project.getModules().iterator(); it.hasNext(); )\n                {\n                    String moduleSubPath = (String) it.next();\n                    writer.startElement( \"ant\" );\n                    writer.addAttribute( \"antfile\", \"build.xml\" );\n                    writer.addAttribute( \"dir\", PathUtils.toRelative( project.getBasedir(), moduleSubPath ) );\n                    writer.addAttribute( \"target\", \"compile\" );\n                    writer.endElement(); // ant\n                }\n            }\n            writer.endElement(); // target\n        }\n        else\n        {\n            writer.startElement( \"target\" );\n            writer.addAttribute( \"name\", \"compile\" );\n            writer.addAttribute( \"depends\", \"get-deps\" );\n            writer.addAttribute( \"description\", \"Compile the code\" );\n\n            writeCompileTasks( writer, project.getBasedir(), \"${maven.build.outputDir}\", compileSourceRoots, project\n                .getBuild().getResources(), null, false );\n\n            writer.endElement(); // target\n        }\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Generate <code>maven-build.properties<\/code>\n     *\n     * @see #DEFAULT_MAVEN_PROPERTIES_FILENAME\n     * @throws IOException\n     */\n    protected void writeBuildProperties()\n        throws IOException\n    {\n        FileOutputStream os = new FileOutputStream( new File( project.getBasedir(), DEFAULT_MAVEN_PROPERTIES_FILENAME ) );\n        Properties properties = new Properties();\n\n        // ----------------------------------------------------------------------\n        // Build properties\n        // ----------------------------------------------------------------------\n\n        addProperty( properties, \"maven.build.finalName\", PathUtils.toRelative( project.getBasedir(), project\n            .getBuild().getFinalName() ) );\n\n        // target\n        addProperty( properties, \"maven.build.dir\", PathUtils.toRelative( project.getBasedir(), project.getBuild()\n            .getDirectory() ) );\n\n        // ${maven.build.dir}/classes\n        addProperty( properties, \"maven.build.outputDir\", \"${maven.build.dir}/\"\n            + PathUtils.toRelative( new File( project.getBasedir(), properties.getProperty( \"maven.build.dir\" ) ),\n                                    project.getBuild().getOutputDirectory() ) );\n        // src/main/java\n        if ( !project.getCompileSourceRoots().isEmpty() )\n        {\n            String[] compileSourceRoots = (String[]) project.getCompileSourceRoots().toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                addProperty( properties, \"maven.build.srcDir.\" + i, PathUtils.toRelative( project.getBasedir(),\n                                                                                          compileSourceRoots[i] ) );\n            }\n        }\n        // src/main/resources\n        if ( project.getBuild().getResources() != null )\n        {\n            Resource[] array = (Resource[]) project.getBuild().getResources().toArray( new Resource[0] );\n            for ( int i = 0; i < array.length; i++ )\n            {\n                addProperty( properties, \"maven.build.resourceDir.\" + i, PathUtils.toRelative( project.getBasedir(),\n                                                                                               array[i].getDirectory() ) );\n            }\n        }\n\n        // ${maven.build.dir}/test-classes\n        addProperty( properties, \"maven.build.testOutputDir\", \"${maven.build.dir}/\"\n            + PathUtils.toRelative( new File( project.getBasedir(), properties.getProperty( \"maven.build.dir\" ) ),\n                                    project.getBuild().getTestOutputDirectory() ) );\n        // src/test/java\n        if ( !project.getTestCompileSourceRoots().isEmpty() )\n        {\n            String[] compileSourceRoots = (String[]) project.getTestCompileSourceRoots().toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                addProperty( properties, \"maven.build.testDir.\" + i, PathUtils.toRelative( project.getBasedir(),\n                                                                                           compileSourceRoots[i] ) );\n            }\n        }\n        // src/test/resources\n        if ( project.getBuild().getTestResources() != null )\n        {\n            Resource[] array = (Resource[]) project.getBuild().getTestResources().toArray( new Resource[0] );\n            for ( int i = 0; i < array.length; i++ )\n            {\n                addProperty( properties, \"maven.build.testResourceDir.\" + i, PathUtils\n                    .toRelative( project.getBasedir(), array[i].getDirectory() ) );\n            }\n        }\n\n        // ----------------------------------------------------------------------\n        // Settings properties\n        // ----------------------------------------------------------------------\n\n        addProperty( properties, \"maven.settings.offline\", String.valueOf( settings.isOffline() ) );\n        addProperty( properties, \"maven.settings.interactiveMode\", String.valueOf( settings.isInteractiveMode() ) );\n        addProperty( properties, \"maven.repo.local\", localRepository.getAbsolutePath() );\n\n        properties.store( os, \"Generated by Maven Ant Plugin - DO NOT EDIT THIS FILE!\" );\n    }","id":70690,"modified_method":"/**\n     * Generate <code>maven-build.properties<\/code> only for a non-POM project\n     *\n     * @see #DEFAULT_MAVEN_PROPERTIES_FILENAME\n     * @throws IOException\n     */\n    protected void writeBuildProperties()\n        throws IOException\n    {\n        if ( isPomPackaging( project ) )\n        {\n            return;\n        }\n\n        FileOutputStream os = new FileOutputStream( new File( project.getBasedir(), DEFAULT_MAVEN_PROPERTIES_FILENAME ) );\n        Properties properties = new Properties();\n\n        // ----------------------------------------------------------------------\n        // Build properties\n        // ----------------------------------------------------------------------\n\n        addProperty( properties, \"maven.build.finalName\", PathUtils.toRelative( project.getBasedir(), project\n            .getBuild().getFinalName() ) );\n\n        // target\n        addProperty( properties, \"maven.build.dir\", PathUtils.toRelative( project.getBasedir(), project.getBuild()\n            .getDirectory() ) );\n\n        // ${maven.build.dir}/classes\n        addProperty( properties, \"maven.build.outputDir\", \"${maven.build.dir}/\"\n            + PathUtils.toRelative( new File( project.getBasedir(), properties.getProperty( \"maven.build.dir\" ) ),\n                                    project.getBuild().getOutputDirectory() ) );\n        // src/main/java\n        if ( !project.getCompileSourceRoots().isEmpty() )\n        {\n            String[] compileSourceRoots = (String[]) project.getCompileSourceRoots().toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                addProperty( properties, \"maven.build.srcDir.\" + i, PathUtils.toRelative( project.getBasedir(),\n                                                                                          compileSourceRoots[i] ) );\n            }\n        }\n        // src/main/resources\n        if ( project.getBuild().getResources() != null )\n        {\n            Resource[] array = (Resource[]) project.getBuild().getResources().toArray( new Resource[0] );\n            for ( int i = 0; i < array.length; i++ )\n            {\n                addProperty( properties, \"maven.build.resourceDir.\" + i, PathUtils.toRelative( project.getBasedir(),\n                                                                                               array[i].getDirectory() ) );\n            }\n        }\n\n        // ${maven.build.dir}/test-classes\n        addProperty( properties, \"maven.build.testOutputDir\", \"${maven.build.dir}/\"\n            + PathUtils.toRelative( new File( project.getBasedir(), properties.getProperty( \"maven.build.dir\" ) ),\n                                    project.getBuild().getTestOutputDirectory() ) );\n        // src/test/java\n        if ( !project.getTestCompileSourceRoots().isEmpty() )\n        {\n            String[] compileSourceRoots = (String[]) project.getTestCompileSourceRoots().toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                addProperty( properties, \"maven.build.testDir.\" + i, PathUtils.toRelative( project.getBasedir(),\n                                                                                           compileSourceRoots[i] ) );\n            }\n        }\n        // src/test/resources\n        if ( project.getBuild().getTestResources() != null )\n        {\n            Resource[] array = (Resource[]) project.getBuild().getTestResources().toArray( new Resource[0] );\n            for ( int i = 0; i < array.length; i++ )\n            {\n                addProperty( properties, \"maven.build.testResourceDir.\" + i, PathUtils\n                    .toRelative( project.getBasedir(), array[i].getDirectory() ) );\n            }\n        }\n\n        // ----------------------------------------------------------------------\n        // Settings properties\n        // ----------------------------------------------------------------------\n\n        addProperty( properties, \"maven.settings.offline\", String.valueOf( settings.isOffline() ) );\n        addProperty( properties, \"maven.settings.interactiveMode\", String.valueOf( settings.isInteractiveMode() ) );\n        addProperty( properties, \"maven.repo.local\", localRepository.getAbsolutePath() );\n\n        properties.store( os, \"Generated by Maven Ant Plugin - DO NOT EDIT THIS FILE!\" );\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void writeCleanTarget( XMLWriter writer )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Cleaning up target\", 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"clean\" );\n        writer.addAttribute( \"description\", \"Clean the output directory\" );\n\n        writer.startElement( \"delete\" );\n        writer.addAttribute( \"dir\", \"${maven.build.dir}\" );\n        writer.endElement(); // delete\n\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","id":70691,"modified_method":"/**\n     * Write clean target in the writer depending the packaging of the project.\n     *\n     * @param writer\n     */\n    private void writeCleanTarget( XMLWriter writer )\n    {\n        AntBuildWriterUtil.writeCommentText( writer, \"Cleaning up target\", 1 );\n\n        writer.startElement( \"target\" );\n        writer.addAttribute( \"name\", \"clean\" );\n        writer.addAttribute( \"description\", \"Clean the output directory\" );\n\n        if ( isPomPackaging( project ) )\n        {\n            if ( project.getModules() != null )\n            {\n                for ( Iterator it = project.getModules().iterator(); it.hasNext(); )\n                {\n                    String moduleSubPath = (String) it.next();\n                    writer.startElement( \"ant\" );\n                    writer.addAttribute( \"antfile\", \"build.xml\" );\n                    writer.addAttribute( \"dir\", PathUtils.toRelative( project.getBasedir(), moduleSubPath ) );\n                    writer.addAttribute( \"target\", \"clean\" );\n                    writer.endElement(); // ant\n                }\n            }\n        }\n        else\n        {\n            writer.startElement( \"delete\" );\n            writer.addAttribute( \"dir\", \"${maven.build.dir}\" );\n            writer.endElement(); // delete\n        }\n\n        writer.endElement(); // target\n\n        AntBuildWriterUtil.writeLineBreak( writer );\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Invoke Ant mojo.\n     * <br/>\n     * The Maven test project should be in a directory called <code>testProject<\/code> in  \"src/test/resources/unit/\" directory.\n     * The Maven test project should be called <code>\"testProject\"-plugin-config.xml<\/code> and should produced\n     * <code>ant-plugin-test.jar<\/code> as artefact.\n     *\n     * @param testProject\n     * @throws Exception\n     */\n    private void invokeAntMojo( String testProject )\n        throws Exception\n    {\n        File testPom = new File( getBasedir(), \"src/test/resources/unit/\" + testProject + \"/\" + testProject\n            + \"-plugin-config.xml\" );\n        AntMojo mojo = (AntMojo) lookupMojo( \"ant\", testPom );\n        mojo.execute();\n\n        File antBasedir = new File( getBasedir(), \"target/test/unit/\" + testProject + \"/\" );\n        File antBuild = new File( antBasedir, AntBuildWriter.DEFAULT_BUILD_FILENAME );\n        assertTrue( antBuild.exists() );\n        File antProperties = new File( antBasedir, AntBuildWriter.DEFAULT_MAVEN_PROPERTIES_FILENAME );\n        assertTrue( antProperties.exists() );\n\n        AntWrapper.invoke( antBuild );\n\n        assertTrue( new File( antBasedir, \"target\" ).exists() );\n        assertTrue( new File( antBasedir, \"target/classes\" ).exists() );\n        assertTrue( new File( antBasedir, \"target/ant-plugin-test.jar\" ).exists() );\n\n        Properties properties = new Properties();\n        properties.load( new FileInputStream( new File( antBasedir, AntBuildWriter.DEFAULT_MAVEN_PROPERTIES_FILENAME ) ) );\n        String repo = properties.getProperty( \"maven.repo.local\" );\n        assertTrue( repo.equals( new File( getBasedir(), \"target/local-repo\" ).getAbsolutePath() ) );\n    }","id":70692,"modified_method":"/**\n     * Invoke Ant mojo.\n     * <br/>\n     * The Maven test project should be in a directory called <code>testProject<\/code> in  \"src/test/resources/unit/\" directory.\n     * The Maven test project should be called <code>\"testProject\"-plugin-config.xml<\/code> and should produced\n     * <code>ant-plugin-test.jar<\/code> as artefact.\n     *\n     * @param testProject\n     * @throws Exception\n     */\n    private void invokeAntMojo( String testProject )\n        throws Exception\n    {\n        File testPom = new File( getBasedir(), \"src/test/resources/unit/\" + testProject + \"/\" + testProject\n            + \"-plugin-config.xml\" );\n        AntMojo mojo = (AntMojo) lookupMojo( \"ant\", testPom );\n        mojo.execute();\n\n        MavenProject currentProject = (MavenProject) getVariableValueFromObject( mojo, \"project\" );\n\n        File antBasedir = new File( getBasedir(), \"target/test/unit/\" + testProject + \"/\" );\n        File antBuild = new File( antBasedir, AntBuildWriter.DEFAULT_BUILD_FILENAME );\n        assertTrue( antBuild.exists() );\n        if ( !currentProject.getPackaging().toLowerCase().equals( \"pom\" ) )\n        {\n            File antProperties = new File( antBasedir, AntBuildWriter.DEFAULT_MAVEN_PROPERTIES_FILENAME );\n            assertTrue( antProperties.exists() );\n        }\n\n        AntWrapper.invoke( antBuild );\n\n        if ( !currentProject.getPackaging().toLowerCase().equals( \"pom\" ) )\n        {\n            assertTrue( new File( antBasedir, \"target\" ).exists() );\n            assertTrue( new File( antBasedir, \"target/classes\" ).exists() );\n            assertTrue( new File( antBasedir, \"target/\" + currentProject.getBuild().getFinalName() + \".jar\" ).exists() );\n\n            Properties properties = new Properties();\n            properties\n                .load( new FileInputStream( new File( antBasedir, AntBuildWriter.DEFAULT_MAVEN_PROPERTIES_FILENAME ) ) );\n            String repo = properties.getProperty( \"maven.repo.local\" );\n            assertTrue( repo.equals( new File( getBasedir(), \"target/local-repo\" ).getAbsolutePath() ) );\n        }\n    }","commit_id":"98e5ae181ce4c0e72c895bd6b995f4bbec06798d","url":"https://github.com/apache/maven-plugins"},{"original_method":"@OperateOnDeployment(DEP4)\n   @Test\n   public void testHashedPassword4(@ArquillianResource URL url) throws Exception {\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", hash(\"anil\", \"MD5\", HEX));\n      String pageContent = getContent(response);\n      assertTrue(pageContent.contains(\"The username and password you supplied are not valid.\"));\n   }","id":70693,"modified_method":"/**\n     * Test login module setting with MD5 hashing enabled - Base64 coding used.\n     */\n    @OperateOnDeployment(DEP3)\n    @Test\n    public void testHashedBase64(@ArquillianResource URL url) throws Exception {\n        testAccess(url);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"@OperateOnDeployment(DEP3)\n   @Test\n   public void testHashedPassword3(@ArquillianResource URL url) throws Exception {\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", hash(\"anil\", \"MD5\", Coding.BASE_64));\n      String pageContent = getContent(response);\n      assertTrue(pageContent.contains(\"The username and password you supplied are not valid.\"));\n   }","id":70694,"modified_method":"/**\n     * Test login module setting with MD5 hashing enabled - HEX coding used.\n     */\n    @OperateOnDeployment(DEP4)\n    @Test\n    public void testHashedHex(@ArquillianResource URL url) throws Exception {\n        testAccess(url);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * plaintext login with no additional options\n    */\n   @Deployment(name = DEP1, order = 1)\n   public static WebArchive appDeployment1() throws SQLException {\n      log.info(\"start\" + DEP1 + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP1, SecuredServletWithDBSetupForDep1.class, DatabaseServerLoginModule.class);\n      DEPLOYMENTS.put(DEP1, dep);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"dsJndiName\", \"java:jboss/datasources/LoginDSdep\" + DEP_NUM.get(DEP1));\n      dep.addModuleOption(\"principalsQuery\", \"select Password from Principals where PrincipalID=?\");\n      dep.addModuleOption(\"rolesQuery\", \"select Role, RoleGroup from Roles where PrincipalID=?\");\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", \"anil\");\n      usersProps.put(\"marcus\", \"marcus\");\n      databaseManager.updateDatabase(DEP_NUM.get(DEP1), usersProps);\n\n      log.debug(dep.getWar().toString(true));\n\n      WebArchive war = dep.getWar();\n      addH2Lib(war);\n      return war;\n   }","id":70695,"modified_method":"/**\n     * Creates WAR for test login module with default settings.\n     * \n     * @return\n     */\n    @Deployment(name = DEP1)\n    public static WebArchive appDeployment1() {\n        return createWar(DEP1);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * DatabaseServerLoginModule: hashAlgorithm=MD5, hashEncoding=base64 testcase\n    */\n   @Deployment(name = DEP3, order = 3)\n   public static WebArchive appDeployment3() throws SQLException {\n      log.info(\"start\" + DEP3 + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP3, SecuredServletWithDBSetupForDep3.class, DatabaseServerLoginModule.class);\n      DEPLOYMENTS.put(DEP3, dep);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"dsJndiName\", \"java:jboss/datasources/LoginDSdep\" + DEP_NUM.get(DEP3));\n      dep.addModuleOption(\"principalsQuery\", \"select Password from Principals where PrincipalID=?\");\n      dep.addModuleOption(\"rolesQuery\", \"select Role, RoleGroup from Roles where PrincipalID=?\");\n      dep.addModuleOption(\"hashAlgorithm\", \"MD5\");\n      dep.addModuleOption(\"hashEncoding\", \"base64\");\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", Utils.hash(\"anil\", \"MD5\", Coding.BASE_64));\n      usersProps.put(\"marcus\", Utils.hash(\"marcus\", \"MD5\", BASE_64));\n      databaseManager.updateDatabase(DEP_NUM.get(DEP3), usersProps);\n\n      log.debug(dep.getWar().toString(true));\n\n      WebArchive war = dep.getWar();\n      addH2Lib(war);\n      return war;\n   }","id":70696,"modified_method":"/**\n     * Creates WAR for test login module with MD5 hashing enabled - Base64 coding used.\n     * \n     * @return\n     */\n    @Deployment(name = DEP3)\n    public static WebArchive appDeployment3() {\n        return createWar(DEP3);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"@OperateOnDeployment(DEP2)\n   @Test\n   public void testHashedPassword(@ArquillianResource URL url) throws Exception {\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", hash(\"anil\", \"MD5\", Coding.BASE_64));\n      String pageContent = getContent(response);\n      assertTrue(pageContent.contains(\"The username and password you supplied are not valid.\"));\n   }","id":70697,"modified_method":"/**\n     * Test login module setting with MD5 hashing enabled.\n     */\n    @OperateOnDeployment(DEP2)\n    @Test\n    public void testHashed(@ArquillianResource URL url) throws Exception {\n        testAccess(url);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * DatabaseServerLoginModule: hashAlgorithm=MD5 testcase\n    */\n   @Deployment(name = DEP2, order = 2)\n   public static WebArchive appDeployment2() throws SQLException {\n      log.info(\"start\" + DEP2 + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP2, SecuredServletWithDBSetupForDep2.class, DatabaseServerLoginModule.class);\n      DEPLOYMENTS.put(DEP2, dep);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"dsJndiName\", \"java:jboss/datasources/LoginDSdep\" + DEP_NUM.get(DEP2));\n      dep.addModuleOption(\"principalsQuery\", \"select Password from Principals where PrincipalID=?\");\n      dep.addModuleOption(\"rolesQuery\", \"select Role, RoleGroup from Roles where PrincipalID=?\");\n      dep.addModuleOption(\"hashAlgorithm\", \"MD5\");\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", Utils.hash(\"anil\", \"MD5\", BASE_64));\n      usersProps.put(\"marcus\", Utils.hash(\"marcus\", \"MD5\", BASE_64));\n\n      databaseManager.updateDatabase(DEP_NUM.get(DEP2), usersProps);\n\n      log.debug(dep.getWar().toString(true));\n\n      WebArchive war = dep.getWar();\n      addH2Lib(war);\n      return war;\n   }","id":70698,"modified_method":"/**\n     * Creates WAR for test login module with MD5 hashing enabled.\n     * \n     * @return\n     */\n    @Deployment(name = DEP2)\n    public static WebArchive appDeployment2() {\n        return createWar(DEP2);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * DatabaseServerLoginModule: hashAlgorithm=MD5, hashEncoding=hex testcase\n    */\n   @Deployment(name = DEP4, order = 4)\n   public static WebArchive appDeployment4() throws SQLException {\n      log.info(\"start\" + DEP4 + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP4, SecuredServletWithDBSetupForDep4.class, DatabaseServerLoginModule.class);\n      DEPLOYMENTS.put(DEP4, dep);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"dsJndiName\", \"java:jboss/datasources/LoginDSdep\" + DEP_NUM.get(DEP4));\n      dep.addModuleOption(\"principalsQuery\", \"select Password from Principals where PrincipalID=?\");\n      dep.addModuleOption(\"rolesQuery\", \"select Role, RoleGroup from Roles where PrincipalID=?\");\n      dep.addModuleOption(\"hashAlgorithm\", \"MD5\");\n      dep.addModuleOption(\"hashEncoding\", \"hex\");\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", Utils.hash(\"anil\", \"MD5\", HEX));\n      usersProps.put(\"marcus\", Utils.hash(\"marcus\", \"MD5\", HEX));\n      databaseManager.updateDatabase(DEP_NUM.get(DEP4), usersProps);\n\n      log.debug(dep.getWar().toString(true));\n\n      WebArchive war = dep.getWar();\n      addH2Lib(war);\n      return war;\n   }","id":70699,"modified_method":"/**\n     * Creates WAR for test login module with MD5 hashing enabled - HEX coding used.\n     * \n     * @return\n     */\n    @Deployment(name = DEP4)\n    public static WebArchive appDeployment4() {\n        return createWar(DEP4);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates {@link JavaArchive} for testing the {@link CustomXACMLAuthorizationModule}.\n     * \n     * @return\n     * @throws IOException\n     * @throws IllegalArgumentException\n     */\n    @Deployment\n    public static JavaArchive deploymentCustomXACMLAuthz() throws IllegalArgumentException, IOException {\n        return createJar(\"test-custom-xacml.jar\", CustomXACMLAuthzSecurityDomainSetup.SECURITY_DOMAIN_NAME);\n    }","id":70700,"modified_method":"/**\n     * Creates {@link JavaArchive} for testing the {@link CustomXACMLAuthorizationModule}.\n     * \n     * @return\n     * @throws IOException\n     * @throws IllegalArgumentException\n     */\n    @Deployment\n    public static JavaArchive deploymentCustomXACMLAuthz() throws IllegalArgumentException, IOException {\n        return createJar(\"test-custom-xacml.jar\", SecurityDomain.DEFAULT_NAME);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates JAR with the EJB for the test deployment.\n     * \n     * @param archiveName\n     * @param securityDomainName\n     * @return\n     */\n    private static JavaArchive createJar(final String archiveName, final String securityDomainName) {\n        final JavaArchive jar = ShrinkWrap\n                .create(JavaArchive.class, archiveName)\n                .addClasses(HelloBean.class, Hello.class, CustomXACMLAuthorizationModule.class)\n                .addAsResource(new StringAsset(\"jduke=theduke\\nJohnDoe=jdoe\"), \"users.properties\")\n                .addAsResource(new StringAsset(\"jduke=TestRole,TestRole2\\nJohnDoe=TestRole\"), \"roles.properties\")\n                .addAsResource(EjbXACMLAuthorizationModuleTestCase.class.getPackage(),\n                        XACMLTestUtils.TESTOBJECTS_CONFIG + \"/jbossxacml-config.xml\", \"jbossxacml-config.xml\")\n                .addAsManifestResource(EjbXACMLAuthorizationModuleTestCase.class.getPackage(),\n                        XACMLTestUtils.TESTOBJECTS_POLICIES + \"/ejb-xacml-policy.xml\", \"xacml-policy.xml\")\n                .addAsManifestResource(EjbXACMLAuthorizationModuleTestCase.class.getPackage(),\n                        XACMLTestUtils.TESTOBJECTS_CONFIG + \"/jboss-ejb3.xml\", \"jboss-ejb3.xml\");\n        XACMLTestUtils.addJBossDeploymentStructureToArchive(jar);\n        jar.addClasses(AbstractSecurityDomainStackServerSetupTask.class);\n        LOGGER.info(jar.toString(true));\n        return jar;\n    }","id":70701,"modified_method":"/**\n     * Creates JAR with the EJB for the test deployment.\n     * \n     * @param archiveName\n     * @param securityDomainName\n     * @return\n     */\n    private static JavaArchive createJar(final String archiveName, final String securityDomainName) {\n        final JavaArchive jar = ShrinkWrap\n                .create(JavaArchive.class, archiveName)\n                .addClasses(HelloBean.class, Hello.class, CustomXACMLAuthorizationModule.class)\n                .addAsResource(new StringAsset(\"jduke=theduke\\nJohnDoe=jdoe\"), \"users.properties\")\n                .addAsResource(new StringAsset(\"jduke=TestRole,TestRole2\\nJohnDoe=TestRole\"), \"roles.properties\")\n                .addAsResource(EjbXACMLAuthorizationModuleTestCase.class.getPackage(),\n                        XACMLTestUtils.TESTOBJECTS_CONFIG + \"/jbossxacml-config.xml\", \"jbossxacml-config.xml\")\n                .addAsManifestResource(EjbXACMLAuthorizationModuleTestCase.class.getPackage(),\n                        XACMLTestUtils.TESTOBJECTS_POLICIES + \"/ejb-xacml-policy.xml\", \"xacml-policy.xml\")\n                .addAsManifestResource(EjbXACMLAuthorizationModuleTestCase.class.getPackage(),\n                        XACMLTestUtils.TESTOBJECTS_CONFIG + \"/jboss-ejb3.xml\", \"jboss-ejb3.xml\");\n        XACMLTestUtils.addJBossDeploymentStructureToArchive(jar);\n        jar.addClasses(AbstractSecurityDomainsServerSetupTask.class);\n        LOGGER.info(jar.toString(true));\n        return jar;\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test case for Example 2.\n     * \n     * @throws Exception\n     */\n    @Test\n    @Ignore(\"JBPAPP-8556 - LdapExtLoginModule adds the role name(s) also from the mapping object\")\n    @OperateOnDeployment(DEP2)\n    public void test2(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"jduke\");\n    }","id":70702,"modified_method":"/**\n     * Test case for Example 2.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP2)\n    public void test2(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"jduke\", true);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test case for Example 1.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP1)\n    public void test1(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"jduke\");\n    }","id":70703,"modified_method":"/**\n     * Test case for Example 1.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP1)\n    public void test1(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"jduke\", false);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Asserts, the role list returned from the {@link RolePrintingServlet} doesn't contain the given role.\n     * \n     * @param rolePrintResponse\n     * @param role\n     */\n    private void assertNotInRole(final String rolePrintResponse, String role) {\n        assertFalse(\"Unexpected role assignment\", StringUtils.contains(rolePrintResponse, \",\" + role + \",\"));\n    }","id":70704,"modified_method":"/**\n     * Asserts, the role list returned from the {@link RolePrintingServlet} doesn't contain the given role.\n     * \n     * @param rolePrintResponse\n     * @param role\n     */\n    private void assertNotInRole(final String rolePrintResponse, String role) {\n        if (StringUtils.contains(rolePrintResponse, \",\" + role + \",\")) {\n            fail(\"Unexpected role '\" + role + \"' assignment\");\n        }\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates {@link WebArchive} for {@link #test3(URL)}.\n     * \n     * @return\n     */\n    @Deployment(name = DEP4)\n    public static WebArchive deployment4() {\n        return createWar(SecurityDomainSetup4.SECURITY_DOMAIN_NAME);\n    }","id":70705,"modified_method":"/**\n     * Creates {@link WebArchive} for {@link #test3(URL)}.\n     * \n     * @return\n     */\n    @Deployment(name = DEP4)\n    public static WebArchive deployment4() {\n        return createWar(SECURITY_DOMAIN_NAME_PREFIX + DEP4);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates {@link WebArchive} for {@link #test2(URL)}.\n     * \n     * @return\n     */\n    @Deployment(name = DEP2)\n    public static WebArchive deployment2() {\n        return createWar(SecurityDomainSetup2.SECURITY_DOMAIN_NAME);\n    }","id":70706,"modified_method":"/**\n     * Creates {@link WebArchive} for {@link #test2(URL)}.\n     * \n     * @return\n     */\n    @Deployment(name = DEP2)\n    public static WebArchive deployment2() {\n        return createWar(SECURITY_DOMAIN_NAME_PREFIX + DEP2);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test case for Example 4.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP4)\n    public void test4(@ArquillianResource URL webAppURL) throws Exception {\n        final URL rolesPrintingURL = new URL(webAppURL.toExternalForm() + RolePrintingServlet.SERVLET_PATH + \"?\" + QUERY_ROLES);\n        final String userName = \"Java Duke\";\n        final String rolesResponse = getResponse(rolesPrintingURL, userName, \"theduke\", 200);\n\n        assertNotInRole(rolesResponse, \"jduke\");\n        assertNotInRole(rolesResponse, \"Java Duke\");\n        assertNotInRole(rolesResponse, \"Roles\");\n        assertNotInRole(rolesResponse, \"JBossAdmin\");\n        assertNotInRole(rolesResponse, \"R4\");\n        //assigned roles\n        assertInRole(rolesResponse, \"RG2\");\n        assertInRole(rolesResponse, \"R1\");\n        assertInRole(rolesResponse, \"R2\");\n        assertInRole(rolesResponse, \"R3\");\n        assertInRole(rolesResponse, \"R5\");\n\n        final URL principalPrintingURL = new URL(webAppURL.toExternalForm() + PrincipalPrintingServlet.SERVLET_PATH + \"?\"\n                + QUERY_ROLES);\n        final String principal = getResponse(principalPrintingURL, userName, \"theduke\", 200);\n        assertEquals(\"Unexpected Principal name\", userName, principal);\n    }","id":70707,"modified_method":"/**\n     * Test case for Example 4.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP4)\n    public void test4(@ArquillianResource URL webAppURL) throws Exception {\n        final URL rolesPrintingURL = new URL(webAppURL.toExternalForm() + RolePrintingServlet.SERVLET_PATH.substring(1) + \"?\"\n                + QUERY_ROLES);\n        final String userName = \"Java Duke\";\n        final String rolesResponse = Utils.makeCallWithBasicAuthn(rolesPrintingURL, userName, \"theduke\", 200);\n\n        assertNotInRole(rolesResponse, \"jduke\");\n        assertNotInRole(rolesResponse, \"Java Duke\");\n        assertNotInRole(rolesResponse, \"Roles\");\n        assertNotInRole(rolesResponse, \"JBossAdmin\");\n        assertNotInRole(rolesResponse, \"R4\");\n        //assigned roles\n        assertInRole(rolesResponse, \"RG2\");\n        assertInRole(rolesResponse, \"R1\");\n        assertInRole(rolesResponse, \"R2\");\n        assertInRole(rolesResponse, \"R3\");\n        assertInRole(rolesResponse, \"R5\");\n\n        final URL principalPrintingURL = new URL(webAppURL.toExternalForm()\n                + PrincipalPrintingServlet.SERVLET_PATH.substring(1) + \"?\" + QUERY_ROLES);\n        final String principal = Utils.makeCallWithBasicAuthn(principalPrintingURL, userName, \"theduke\", 200);\n        assertEquals(\"Unexpected Principal name\", userName, principal);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test case for Example 3.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP3)\n    public void test3(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"Java Duke\");\n    }","id":70708,"modified_method":"/**\n     * Test case for Example 3.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP3)\n    public void test3(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"Java Duke\", false);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Tests role assignment.\n     * \n     * @param webAppURL\n     * @throws MalformedURLException\n     * @throws ClientProtocolException\n     * @throws IOException\n     * @throws URISyntaxException\n     */\n    private void testDeployment(URL webAppURL, String username) throws MalformedURLException, ClientProtocolException,\n            IOException, URISyntaxException {\n        final URL rolesPrintingURL = new URL(webAppURL.toExternalForm() + RolePrintingServlet.SERVLET_PATH + \"?\" + QUERY_ROLES);\n        final String rolesResponse = getResponse(rolesPrintingURL, username, \"theduke\", 200);\n\n        assertNotInRole(rolesResponse, \"jduke\");\n        assertNotInRole(rolesResponse, \"Java Duke\");\n        assertNotInRole(rolesResponse, \"Roles\");\n        assertNotInRole(rolesResponse, \"JBossAdmin\");\n        assertNotInRole(rolesResponse, \"TheDuke2\");\n        assertNotInRole(rolesResponse, \"Echo2\");\n\n        //assigned roles\n        assertInRole(rolesResponse, \"TheDuke\");\n        assertInRole(rolesResponse, \"Echo\");\n\n        final URL principalPrintingURL = new URL(webAppURL.toExternalForm() + PrincipalPrintingServlet.SERVLET_PATH + \"?\"\n                + QUERY_ROLES);\n        final String principal = getResponse(principalPrintingURL, username, \"theduke\", 200);\n        assertEquals(\"Unexpected Principal name\", username, principal);\n    }","id":70709,"modified_method":"/**\n     * Tests role assignment.\n     * \n     * @param webAppURL\n     * @throws MalformedURLException\n     * @throws ClientProtocolException\n     * @throws IOException\n     * @throws URISyntaxException\n     */\n    private void testDeployment(URL webAppURL, String username, boolean hasJdukeRole) throws MalformedURLException,\n            ClientProtocolException, IOException, URISyntaxException {\n        final URL rolesPrintingURL = new URL(webAppURL.toExternalForm() + RolePrintingServlet.SERVLET_PATH.substring(1) + \"?\"\n                + QUERY_ROLES);\n        final String rolesResponse = Utils.makeCallWithBasicAuthn(rolesPrintingURL, username, \"theduke\", 200);\n\n        if (hasJdukeRole) {\n            assertInRole(rolesResponse, \"jduke\");\n        } else {\n            assertNotInRole(rolesResponse, \"jduke\");\n        }\n        assertNotInRole(rolesResponse, \"Java Duke\");\n        assertNotInRole(rolesResponse, \"Roles\");\n        assertNotInRole(rolesResponse, \"JBossAdmin\");\n        assertNotInRole(rolesResponse, \"TheDuke2\");\n        assertNotInRole(rolesResponse, \"Echo2\");\n\n        //assigned roles\n        assertInRole(rolesResponse, \"TheDuke\");\n        assertInRole(rolesResponse, \"Echo\");\n\n        final URL principalPrintingURL = new URL(webAppURL.toExternalForm()\n                + PrincipalPrintingServlet.SERVLET_PATH.substring(1) + \"?\" + QUERY_ROLES);\n        final String principal = Utils.makeCallWithBasicAuthn(principalPrintingURL, username, \"theduke\", 200);\n        assertEquals(\"Unexpected Principal name\", username, principal);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates {@link WebArchive} for {@link #test3(URL)}.\n     * \n     * @return\n     */\n    @Deployment(name = DEP3)\n    public static WebArchive deployment3() {\n        return createWar(SecurityDomainSetup3.SECURITY_DOMAIN_NAME);\n    }","id":70710,"modified_method":"/**\n     * Creates {@link WebArchive} for {@link #test3(URL)}.\n     * \n     * @return\n     */\n    @Deployment(name = DEP3)\n    public static WebArchive deployment3() {\n        return createWar(SECURITY_DOMAIN_NAME_PREFIX + DEP3);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Asserts, the role list returned from the {@link RolePrintingServlet} contains the given role.\n     * \n     * @param rolePrintResponse\n     * @param role\n     */\n    private void assertInRole(final String rolePrintResponse, String role) {\n        assertTrue(\"Missing role assignment\", StringUtils.contains(rolePrintResponse, \",\" + role + \",\"));\n    }","id":70711,"modified_method":"/**\n     * Asserts, the role list returned from the {@link RolePrintingServlet} contains the given role.\n     * \n     * @param rolePrintResponse\n     * @param role\n     */\n    private void assertInRole(final String rolePrintResponse, String role) {\n        if (!StringUtils.contains(rolePrintResponse, \",\" + role + \",\")) {\n            fail(\"Missing role '\" + role + \"' assignment\");\n        }\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates {@link WebArchive} for {@link #test1(URL)}.\n     * \n     * @return\n     */\n    @Deployment(name = DEP1)\n    public static WebArchive deployment1() {\n        return createWar(SecurityDomainSetup1.SECURITY_DOMAIN_NAME);\n    }","id":70712,"modified_method":"/**\n     * Creates {@link WebArchive} for {@link #test1(URL)}.\n     * \n     * @return\n     */\n    @Deployment(name = DEP1)\n    public static WebArchive deployment1() {\n        return createWar(SECURITY_DOMAIN_NAME_PREFIX + DEP1);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates {@link WebArchive} with the {@link OKServlet}.\n     * \n     * @return\n     * @throws SQLException\n     */\n    @Deployment\n    public static WebArchive deployment() {\n        LOGGER.info(\"start deployment\");\n        final WebArchive war = ShrinkWrap.create(WebArchive.class, \"ldap-login-module.war\");\n        war.addClasses(SecuredLdapLoginModuleTestServlet.class, SimpleUnsecuredServlet.class,\n                AbstractLoginModuleTestServlet.class);\n        war.addAsWebInfResource(LdapLoginModuleTestCase.class.getPackage(), \"web-basic-authn.xml\", \"web.xml\");\n        war.addAsWebInfResource(new StringAsset(\"<jboss-web><security-domain>\"\n                + AbstractSecurityDomainStackServerSetupTask.SECURITY_DOMAIN_NAME\n                + \"<\/security-domain><\/jboss-web>\"), \"jboss-web.xml\");\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(war.toString(true));\n        }\n        return war;\n    }","id":70713,"modified_method":"/**\n     * Creates {@link WebArchive} with the {@link OKServlet}.\n     * \n     * @return\n     * @throws SQLException\n     */\n    @Deployment(name = SECURITY_DOMAIN_LDAP)\n    public static WebArchive deploymentLdap() {\n        return createWar(SECURITY_DOMAIN_LDAP);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Tests if masked DS deployed by servlet supports standard operations.\n    */\n\n   @Test\n   public void datasourceOperationsTest(){\n      DataSource ds;\n      try {\n      Context ctx = new InitialContext();\n      ds = (DataSource)ctx.lookup(\"java:jboss/datasources/MaskedDS\");\n      } catch (NamingException ex) {\n         throw new AssertionError(\"Masked datasource not found!\");\n      }\n      assertNotNull(\"Datasource injection failed.\", ds);\n\n      try {\n         Connection conn = ds.getConnection();\n         Statement statement = conn.createStatement();\n         statement.execute(\"CREATE TABLE FooBars(ID Varchar(50), Password Varchar(50))\");\n         statement.execute(\"INSERT INTO FooBars VALUES ('foo','foo'),('bar','bar')\");\n         ResultSet resultSet = statement.executeQuery(\"SELECT COUNT (*) FROM FooBars\");\n         resultSet.next();\n         int size = resultSet.getInt(1);\n         Assert.assertEquals(2,size);\n         statement.execute(\"DROP TABLE FooBars\");\n         conn.close();\n      } catch (SQLException ex) {\n         throw new AssertionError(\"Masked datasource is not operable!\");\n      }\n   }","id":70714,"modified_method":"/**\n     * Tests if masked DS deployed by servlet supports standard operations.\n     */\n    @Test\n    public void datasourceOperationsTest() {\n        DataSource ds;\n        try {\n            Context ctx = new InitialContext();\n            ds = (DataSource) ctx.lookup(PasswordMaskingTestServlet.JNDI_MASKED_DS);\n        } catch (NamingException ex) {\n            throw new AssertionError(\"Masked datasource not found!\");\n        }\n        assertNotNull(\"Datasource injection failed.\", ds);\n\n        try {\n            Connection conn = ds.getConnection();\n            Statement statement = conn.createStatement();\n            statement.execute(\"CREATE TABLE FooBars(ID Varchar(50), Password Varchar(50))\");\n            statement.execute(\"INSERT INTO FooBars VALUES ('foo','foo'),('bar','bar')\");\n            ResultSet resultSet = statement.executeQuery(\"SELECT COUNT (*) FROM FooBars\");\n            resultSet.next();\n            int size = resultSet.getInt(1);\n            assertEquals(2, size);\n            statement.execute(\"DROP TABLE FooBars\");\n            conn.close();\n        } catch (SQLException ex) {\n            fail(\"Masked datasource is not operable!\");\n        }\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n   public static WebArchive deploy(){\n\n      WebArchive war = ShrinkWrap.create(WebArchive.class, \"passwordMasking\" + \".war\");\n      war.addClass(PasswordMaskingTestServlet.class);\n      war.addAsLibrary(Utils.getResource(\"database-login-module.war/h2-1.2.145.jar\"), \"h2-1.2.145.jar\");\n      return war;\n   }","id":70715,"modified_method":"@Deployment\n    public static WebArchive deploy() {\n        WebArchive war = ShrinkWrap.create(WebArchive.class, \"passwordMasking\" + \".war\");\n        war.addClass(PasswordMaskingTestServlet.class);\n        return war;\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * passwords stored as MD5, no additional options\n    */\n   @Deployment(name = DEP2, order = 2)\n   public static WebArchive appDeployment2() {\n      log.info(\"start\" + DEP2 + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP2, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP2, dep);\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", hash(\"anil\", \"MD5\", Coding.BASE_64));\n      File usersPropsFile = Utils.createTempPropFile(usersProps);\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      File rolesPropsFile = Utils.createTempPropFile(rolesProps);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", usersPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"rolesProperties\", rolesPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"hashAlgorithm\", \"MD5\");\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70716,"modified_method":"/**\n     * passwords stored as MD5, no additional options\n     */\n    @Deployment(name = DEP2)\n    public static WebArchive appDeployment2() {\n        return createWar(DEP2, Coding.BASE_64);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * tests hashUserPassword=false option\n    */\n   @Deployment(name = DEP5a, order = 5)\n   public static WebArchive appDeployment5A() {\n      log.info(\"start\" + DEP5a + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP5a, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP5a, dep);\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", hash(\"anil\", \"MD5\", Coding.BASE_64));\n      File usersPropsFile = Utils.createTempPropFile(usersProps);\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      File rolesPropsFile = Utils.createTempPropFile(rolesProps);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", usersPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"rolesProperties\", rolesPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"hashAlgorithm\", \"MD5\");\n      dep.addModuleOption(\"hashUserPassword\", \"false\");\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70717,"modified_method":"/**\n     * tests hashUserPassword=false option\n     */\n    @Deployment(name = DEP5a)\n    public static WebArchive appDeployment5a() {\n        return createWar(DEP5a, null);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * plaintext login with no additional options\n    */\n   @Deployment(name = DEP1, order = 1)\n   public static WebArchive appDeployment1() {\n      log.info(\"start\" + DEP1 + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP1, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP1, dep);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", Utils.getResource(\"users-roles-login-module.war/users.properties\").getFile());\n      dep.addModuleOption(\"rolesProperties\", Utils.getResource(\"users-roles-login-module.war/roles.properties\").getFile());\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", \"anil\");\n      usersProps.put(\"marcus\", \"marcus\");\n      Utils.setPropertiesFile(usersProps, getResource(\"users-roles-login-module.war/users.properties\"));\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      rolesProps.put(\"marcus\", \"superuser\");\n      Utils.setPropertiesFile(rolesProps, getResource(\"users-roles-login-module.war/roles.properties\"));\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70718,"modified_method":"/**\n     * plaintext login with no additional options\n     */\n    @Deployment(name = DEP1)\n    public static WebArchive appDeployment1() {\n        return createWar(DEP1, null);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * tests hashUserPassword option\n    */\n   @Deployment(name = DEP6, order = 6)\n   public static WebArchive appDeployment6() {\n      log.info(\"start\" + DEP6 + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP6, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP6, dep);\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", \"anil\");\n      File usersPropsFile = Utils.createTempPropFile(usersProps);\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      File rolesPropsFile = Utils.createTempPropFile(rolesProps);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", usersPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"rolesProperties\", rolesPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"hashAlgorithm\", \"MD5\");\n      dep.addModuleOption(\"hashStorePassword\", \"true\");\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70719,"modified_method":"/**\n     * tests hashUserPassword option\n     */\n    @Deployment(name = DEP6b)\n    public static WebArchive appDeployment6b() {\n        return createWar(DEP6b, null);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * tests ignorePasswordCase=true option\n    */\n   @Deployment(name = DEP7a)\n   public static WebArchive appDeployment7a() {\n      log.info(\"start\" + DEP7a + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP7a, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP7a, dep);\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", \"anil\");\n      File usersPropsFile = Utils.createTempPropFile(usersProps);\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      File rolesPropsFile = Utils.createTempPropFile(rolesProps);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", usersPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"rolesProperties\", rolesPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"ignorePasswordCase\", \"true\");\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70720,"modified_method":"/**\n     * tests ignorePasswordCase=true option\n     */\n    @Deployment(name = DEP7a)\n    public static WebArchive appDeployment7a() {\n        return createWar(DEP7a, null);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Correct login\n    *\n    * @throws Exception\n    */\n   @OperateOnDeployment(DEP5a)\n   @Test\n   public void testHashUserPasswordA(@ArquillianResource URL url) throws Exception {\n      log.debug(\"start testHashUserPasswordA()\");\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", hash(\"anil\", \"MD5\", Coding.BASE_64));\n      String pageContent = getContent(response);\n      log.debug(\"returned page content:\\n\" + pageContent);\n      assertTrue(pageContent.contains(\"GOOD\"));\n   }","id":70721,"modified_method":"/**\n     * testHashUserPasswordTrue\n     * \n     * @throws Exception\n     */\n    @OperateOnDeployment(DEP5a)\n    @Test\n    public void testHashUserPasswordTrue(@ArquillianResource URL url) throws Exception {\n        testAccess(url, false);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Correct login\n    *\n    * @throws Exception\n    */\n   @OperateOnDeployment(DEP5b)\n   @Test\n   public void testHashUserPasswordB(@ArquillianResource URL url) throws Exception {\n      log.debug(\"start testHashUserPasswordB()\");\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", \"anil\");\n      String pageContent = getContent(response);\n      log.debug(\"returned page content:\\n\" + pageContent);\n      assertTrue(pageContent.contains(\"GOOD\"));\n   }","id":70722,"modified_method":"/**\n     * testHashUserPassword\n     * \n     * @throws Exception\n     */\n    @OperateOnDeployment(DEP5b)\n    @Test\n    public void testHashUserPasswordFalse(@ArquillianResource URL url) throws Exception {\n        testAccess(url, false);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * passwords stored as MD5 in BASE64 encoding, no additional options\n    */\n   @Deployment(name = DEP4, order = 4)\n   public static WebArchive appDeployment4() {\n      log.info(\"start\" + DEP4 + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP4, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP4, dep);\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", hash(\"anil\", \"MD5\", Coding.BASE_64));\n      File usersPropsFile = Utils.createTempPropFile(usersProps);\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      File rolesPropsFile = Utils.createTempPropFile(rolesProps);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", usersPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"rolesProperties\", rolesPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"hashAlgorithm\", \"MD5\");\n      dep.addModuleOption(\"hashEncoding\", \"base64\");\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70723,"modified_method":"/**\n     * passwords stored as MD5 in BASE64 encoding, no additional options\n     */\n    @Deployment(name = DEP4)\n    public static WebArchive appDeployment4() {\n        return createWar(DEP4, Coding.BASE_64);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * tests hashUserPassword=true option\n    */\n   @Deployment(name = DEP5b, order = 5)\n   public static WebArchive appDeployment5B() {\n      log.info(\"start\" + DEP5b + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP5b, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP5b, dep);\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", hash(\"anil\", \"MD5\", Coding.BASE_64));\n      File usersPropsFile = Utils.createTempPropFile(usersProps);\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      File rolesPropsFile = Utils.createTempPropFile(rolesProps);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", usersPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"rolesProperties\", rolesPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"hashAlgorithm\", \"MD5\");\n      dep.addModuleOption(\"hashUserPassword\", \"true\");\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70724,"modified_method":"/**\n     * tests hashUserPassword=true option\n     */\n    @Deployment(name = DEP5b)\n    public static WebArchive appDeployment5b() {\n        return createWar(DEP5b, Coding.BASE_64);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Correct login\n    *\n    * @throws Exception\n    */\n   @OperateOnDeployment(DEP7a)\n   @Test\n   public void testIgnorePasswordCaseA(@ArquillianResource URL url) throws Exception {\n      log.debug(\"start testIgnorePasswordCaseA()\");\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", \"ANIL\");\n      String pageContent = getContent(response);\n      log.debug(\"returned page content:\\n\" + pageContent);\n      assertTrue(pageContent.contains(\"GOOD\"));\n   }","id":70725,"modified_method":"/**\n     * testIgnorePasswordCaseFalse\n     * \n     * @throws Exception\n     */\n    @OperateOnDeployment(DEP7b)\n    @Test\n    public void testIgnorePasswordCaseFalse(@ArquillianResource URL url) throws Exception {\n        testAccess(url, false);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Correct login\n    *\n    * @throws Exception\n    */\n   @OperateOnDeployment(DEP3)\n   @Test\n   public void testMD5PasswordHex(@ArquillianResource URL url) throws Exception {\n      log.debug(\"start testMD5PasswordHex()\");\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", \"anil\");\n      String pageContent = getContent(response);\n      log.debug(\"returned page content:\\n\" + pageContent);\n      assertTrue(pageContent.contains(\"GOOD\"));\n   }","id":70726,"modified_method":"/**\n     * testMD5PasswordHex\n     * \n     * @throws Exception\n     */\n    @OperateOnDeployment(DEP3)\n    @Test\n    public void testMD5PasswordHex(@ArquillianResource URL url) throws Exception {\n        testAccess(url, false);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * tests ignorePasswordCase=true option\n    */\n   @Deployment(name = DEP7b)\n   public static WebArchive appDeployment7() {\n      log.info(\"start\" + DEP7b + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP7b, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP7b, dep);\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", \"anil\");\n      File usersPropsFile = Utils.createTempPropFile(usersProps);\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      File rolesPropsFile = Utils.createTempPropFile(rolesProps);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", usersPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"rolesProperties\", rolesPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"ignorePasswordCase\", \"false\");\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70727,"modified_method":"/**\n     * tests ignorePasswordCase=false option\n     */\n    @Deployment(name = DEP7b)\n    public static WebArchive appDeployment7b() {\n        return createWar(DEP7b, null);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Correct login\n    *\n    * @throws Exception\n    */\n   @OperateOnDeployment(DEP7c)\n   @Test\n   public void testIgnorePasswordCaseC(@ArquillianResource URL url) throws Exception {\n      log.debug(\"start testIgnorePasswordCaseB()\");\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", \"anil\");\n      String pageContent = getContent(response);\n      log.debug(\"returned page content:\\n\" + pageContent);\n      assertTrue(pageContent.contains(\"GOOD\"));\n   }","id":70728,"modified_method":"/**\n     * testIgnorePasswordCaseTrue\n     * \n     * @throws Exception\n     */\n    @OperateOnDeployment(DEP7a)\n    @Test\n    public void testIgnorePasswordCaseTrue(@ArquillianResource URL url) throws Exception {\n        testAccess(url, true);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Correct login\n    *\n    * @throws Exception\n    */\n   @OperateOnDeployment(DEP2)\n   @Test\n   public void testMD5Password1(@ArquillianResource URL url) throws Exception {\n      log.debug(\"start testMD5Password1()\");\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", \"anil\");\n      String pageContent = getContent(response);\n      log.debug(\"returned page content:\\n\" + pageContent);\n      assertTrue(pageContent.contains(\"GOOD\"));\n   }","id":70729,"modified_method":"/**\n     * testMD5Password\n     * \n     * @throws Exception\n     */\n    @OperateOnDeployment(DEP2)\n    @Test\n    public void testMD5Password(@ArquillianResource URL url) throws Exception {\n        testAccess(url, false);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * passwords stored as MD5 in HEX encoding, no additional options\n    */\n   @Deployment(name = DEP3, order = 3)\n   public static WebArchive appDeployment3() {\n      log.info(\"start\" + DEP3 + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP3, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP3, dep);\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", hash(\"anil\", \"MD5\", Coding.HEX));\n      File usersPropsFile = Utils.createTempPropFile(usersProps);\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      File rolesPropsFile = Utils.createTempPropFile(rolesProps);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", usersPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"rolesProperties\", rolesPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"hashAlgorithm\", \"MD5\");\n      dep.addModuleOption(\"hashEncoding\", \"hex\");\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70730,"modified_method":"/**\n     * passwords stored as MD5 in HEX encoding, no additional options\n     */\n    @Deployment(name = DEP3)\n    public static WebArchive appDeployment3() {\n        return createWar(DEP3, Coding.HEX);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Correct login\n    *\n    * @throws Exception\n    */\n   @OperateOnDeployment(DEP4)\n   @Test\n   public void testMD5PasswordBase64(@ArquillianResource URL url) throws Exception {\n      log.debug(\"start testMD5PasswordBase64()\");\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", \"anil\");\n      String pageContent = getContent(response);\n      log.debug(\"returned page content:\\n\" + pageContent);\n      assertTrue(pageContent.contains(\"GOOD\"));\n   }","id":70731,"modified_method":"/**\n     * testMD5PasswordBase64\n     * \n     * @throws Exception\n     */\n    @OperateOnDeployment(DEP4)\n    @Test\n    public void testMD5PasswordBase64(@ArquillianResource URL url) throws Exception {\n        testAccess(url, false);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Correct login\n    *\n    * @throws Exception\n    */\n   @OperateOnDeployment(DEP6)\n   @Test\n   public void testHashStorePassword(@ArquillianResource URL url) throws Exception {\n      log.debug(\"start testCleartextPassword()\");\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", \"anil\");\n      String pageContent = getContent(response);\n      log.debug(\"returned page content:\\n\" + pageContent);\n      assertTrue(pageContent.contains(\"GOOD\"));\n   }","id":70732,"modified_method":"/**\n     * testHashStorePassword\n     * \n     * @throws Exception\n     */\n    @OperateOnDeployment(DEP6b)\n    @Test\n    public void testHashStorePassword(@ArquillianResource URL url) throws Exception {\n        testAccess(url, false);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * Incorrect login\n    */\n   @OperateOnDeployment(DEP6)\n   @Test\n   public void testIncorrectHashStorePassword(@ArquillianResource URL url) throws Exception {\n      log.debug(\"start testCleartextPassword()\");\n      HttpResponse response = authAndGetResponse(url + \"secured/\", \"anil\", hash(\"anil\", \"MD5\", Coding.BASE_64));\n      String pageContent = getContent(response);\n      log.debug(\"returned page content:\\n\" + pageContent);\n      assertTrue(pageContent.contains(\"The username and password you supplied are not valid\"));\n   }","id":70733,"modified_method":"/**\n     * testHashOnlyStorePassword\n     * \n     * @throws Exception\n     */\n    @OperateOnDeployment(DEP6a)\n    @Test\n    public void testHashOnlyStorePassword(@ArquillianResource URL url) throws Exception {\n        final URL servletUrl = new URL(url.toExternalForm() + SimpleSecuredServlet.SERVLET_PATH.substring(1));\n        //successful authentication and authorization\n        assertEquals(\"Response body is not correct.\", SimpleSecuredServlet.RESPONSE_BODY,\n                Utils.makeCallWithBasicAuthn(servletUrl, ANIL, Utils.hashMD5(ANIL_PWD, Coding.BASE_64), 200));\n        //successful authentication and unsuccessful authorization\n        Utils.makeCallWithBasicAuthn(servletUrl, MARCUS, Utils.hashMD5(MARCUS_PWD, Coding.BASE_64), 403);\n        //unsuccessful authentication\n        Utils.makeCallWithBasicAuthn(servletUrl, ANIL, ANIL_PWD, 401);\n        Utils.makeCallWithBasicAuthn(servletUrl, MARCUS, MARCUS_PWD, 401);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n    * tests ignorePasswordCase=true option\n    */\n   @Deployment(name = DEP7c)\n   public static WebArchive appDeployment7c() {\n      log.info(\"start\" + DEP7c + \"deployment\");\n\n      WebAppDeployment dep = new WebAppDeployment(DEP7c, SecuredServlet.class, UsersRolesLoginModule.class);\n      DEPLOYMENTS.put(DEP7c, dep);\n\n      Map<String, String> usersProps = new HashMap<String, String>();\n      usersProps.put(\"anil\", \"anil\");\n      File usersPropsFile = Utils.createTempPropFile(usersProps);\n\n      Map<String, String> rolesProps = new HashMap<String, String>();\n      rolesProps.put(\"anil\", \"gooduser\");\n      File rolesPropsFile = Utils.createTempPropFile(rolesProps);\n\n      log.debug(\"adding module options\");\n      dep.addModuleOption(\"usersProperties\", usersPropsFile.getAbsolutePath());\n      dep.addModuleOption(\"rolesProperties\", rolesPropsFile.getAbsolutePath());\n\n      log.debug(dep.getWar().toString(true));\n\n      return dep.getWar();\n   }","id":70734,"modified_method":"/**\n     * tests hashUserPassword option\n     */\n    @Deployment(name = DEP6a)\n    public static WebArchive appDeployment6a() {\n        return createWar(DEP6a, null);\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void applyUpdate(ModelNode update, final ModelControllerClient client) throws Exception {\n      ModelNode result = client.execute(new OperationBuilder(update).build());\n      if (result.hasDefined(\"outcome\") && \"success\".equals(result.get(\"outcome\").asString())) {\n         if (result.hasDefined(\"result\")) {\n            //System.out.println(result.get(\"result\"));\n         }\n      } else if (result.hasDefined(\"failure-description\")) {\n         throw new RuntimeException(result.get(\"failure-description\").toString());\n      } else {\n         throw new RuntimeException(\"Operation not successful; outcome = \" + result.get(\"outcome\"));\n      }\n   }","id":70735,"modified_method":"public static void applyUpdate(ModelNode update, final ModelControllerClient client) throws Exception {\n        ModelNode result = client.execute(new OperationBuilder(update).build());\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Client update: \" + update);\n            LOGGER.info(\"Client update result: \" + result);\n        }\n        if (result.hasDefined(\"outcome\") && \"success\".equals(result.get(\"outcome\").asString())) {\n            LOGGER.debug(\"Operation succeeded.\");\n        } else if (result.hasDefined(\"failure-description\")) {\n            throw new RuntimeException(result.get(\"failure-description\").toString());\n        } else {\n            throw new RuntimeException(\"Operation not successful; outcome = \" + result.get(\"outcome\"));\n        }\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates {@link WebArchive} for the XACMLAuthorizationModule testing.\n     * \n     * @return\n     * @throws IOException\n     * @throws IllegalArgumentException\n     */\n    @Deployment(name = \"XACML\")\n    public static WebArchive deploymentDefaultXACML() throws IllegalArgumentException, IOException {\n        return createWar(XACMLAuthzSecurityDomainSetup.SECURITY_DOMAIN_NAME, \"xacml-web-test.war\");\n    }","id":70736,"modified_method":"/**\n     * Creates {@link WebArchive} for the XACMLAuthorizationModule testing.\n     * \n     * @return\n     * @throws IOException\n     * @throws IllegalArgumentException\n     */\n    @Deployment(name = \"XACML\")\n    public static WebArchive deploymentDefaultXACML() throws IllegalArgumentException, IOException {\n        return createWar(SECURITY_DOMAIN_XACML, \"xacml-web-test.war\");\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates {@link WebArchive} for the {@link CustomXACMLAuthorizationModule} testing.\n     * \n     * @return\n     * @throws IOException\n     * @throws IllegalArgumentException\n     */\n    @Deployment(name = \"CustomXACML\")\n    public static WebArchive deploymentCustomXACML() throws IllegalArgumentException, IOException {\n        return createWar(CustomXACMLAuthzSecurityDomainSetup.SECURITY_DOMAIN_NAME, \"custom-xacml-web-test.war\");\n    }","id":70737,"modified_method":"/**\n     * Creates {@link WebArchive} for the {@link CustomXACMLAuthorizationModule} testing.\n     * \n     * @return\n     * @throws IOException\n     * @throws IllegalArgumentException\n     */\n    @Deployment(name = \"CustomXACML\")\n    public static WebArchive deploymentCustomXACML() throws IllegalArgumentException, IOException {\n        return createWar(SECURITY_DOMAIN_CUSTOM, \"custom-xacml-web-test.war\");\n    }","commit_id":"a1a9c582975be06b0c5f216609c6eec6b4d96db3","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected static void checkRemaining(ByteBuffer bb, int offs, int length)\n    {\n        if (offs + length > bb.limit())\n            throw new IllegalArgumentException(\"Not enough bytes\");\n    }","id":70738,"modified_method":"protected static void checkRemaining(ByteBuffer bb, int offs, int length)\n    {\n        if (offs + length > bb.limit())\n            throw new IllegalArgumentException(String.format(\"Not enough bytes. Offset: %d. Length: %d. Buffer size: %d\",\n                                                             offs, length, bb.limit()));\n    }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * @param source Input source to read compressed data from\n     * @param info Compression info\n     */\n    public CompressedInputStream(InputStream source, CompressionInfo info, boolean hasPostCompressionAdlerChecksums)\n    {\n        this.info = info;\n        this.checksum = hasPostCompressionAdlerChecksums ? new Adler32() : new CRC32();\n        this.hasPostCompressionAdlerChecksums = hasPostCompressionAdlerChecksums;\n        this.buffer = new byte[info.parameters.chunkLength()];\n        // buffer is limited to store up to 1024 chunks\n        this.dataBuffer = new ArrayBlockingQueue<>(Math.min(info.chunks.length, 1024));\n\n        readerThread = new Thread(new Reader(source, info, dataBuffer));\n        readerThread.start();\n    }","id":70739,"modified_method":"/**\n     * @param source Input source to read compressed data from\n     * @param info Compression info\n     */\n    public CompressedInputStream(InputStream source, CompressionInfo info, boolean hasPostCompressionAdlerChecksums)\n    {\n        this.info = info;\n        this.checksum = hasPostCompressionAdlerChecksums ? new Adler32() : new CRC32();\n        this.hasPostCompressionAdlerChecksums = hasPostCompressionAdlerChecksums;\n        this.buffer = new byte[info.parameters.chunkLength()];\n        // buffer is limited to store up to 1024 chunks\n        this.dataBuffer = new ArrayBlockingQueue<byte[]>(Math.min(info.chunks.length, 1024));\n\n        new Thread(new Reader(source, info, dataBuffer)).start();\n    }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"protected void runMayThrow() throws Exception\n        {\n            byte[] compressedWithCRC;\n            while (!Thread.currentThread().isInterrupted() && chunks.hasNext())\n            {\n                CompressionMetadata.Chunk chunk = chunks.next();\n\n                int readLength = chunk.length + 4; // read with CRC\n                compressedWithCRC = new byte[readLength];\n\n                int bufferRead = 0;\n                while (bufferRead < readLength)\n                {\n                    int r;\n                    try\n                    {\n                        r = source.read(compressedWithCRC, bufferRead, readLength - bufferRead);\n                        if (r < 0)\n                        {\n                            dataBuffer.put(POISON_PILL);\n                            return; // throw exception where we consume dataBuffer\n                        }\n                    }\n                    catch (IOException e)\n                    {\n                        dataBuffer.put(POISON_PILL);\n                        throw e;\n                    }\n                    bufferRead += r;\n                }\n                dataBuffer.put(compressedWithCRC);\n            }\n            synchronized(CompressedInputStream.this)\n            {\n                readerThread = null;\n            }\n        }","id":70740,"modified_method":"protected void runMayThrow() throws Exception\n        {\n            byte[] compressedWithCRC;\n            while (chunks.hasNext())\n            {\n                CompressionMetadata.Chunk chunk = chunks.next();\n\n                int readLength = chunk.length + 4; // read with CRC\n                compressedWithCRC = new byte[readLength];\n\n                int bufferRead = 0;\n                while (bufferRead < readLength)\n                {\n                    try\n                    {\n                        int r = source.read(compressedWithCRC, bufferRead, readLength - bufferRead);\n                        if (r < 0)\n                        {\n                            dataBuffer.put(POISON_PILL);\n                            return; // throw exception where we consume dataBuffer\n                        }\n                        bufferRead += r;\n                    }\n                    catch (IOException e)\n                    {\n                        logger.warn(\"Error while reading compressed input stream.\", e);\n                        dataBuffer.put(POISON_PILL);\n                        return; // throw exception where we consume dataBuffer\n                    }\n                }\n                dataBuffer.put(compressedWithCRC);\n            }\n        }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * @return SSTable transferred\n     * @throws java.io.IOException if reading the remote sstable fails. Will throw an RTE if local write fails.\n     */\n    @Override\n    public SSTableWriter read(ReadableByteChannel channel) throws IOException\n    {\n        logger.debug(\"reading file from {}, repairedAt = {}\", session.peer, repairedAt);\n        long totalSize = totalSize();\n\n        Pair<String, String> kscf = Schema.instance.getCF(cfId);\n        if (kscf == null)\n        {\n            // schema was dropped during streaming\n            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n        }\n        ColumnFamilyStore cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n\n        CompressedInputStream cis = new CompressedInputStream(Channels.newInputStream(channel), compressionInfo, inputVersion.hasPostCompressionAdlerChecksums);\n        BytesReadTracker in = new BytesReadTracker(new DataInputStream(cis));\n        SSTableWriter writer = null;\n        try\n        {\n            writer = createWriter(cfs, totalSize, repairedAt);\n            for (Pair<Long, Long> section : sections)\n            {\n                long length = section.right - section.left;\n                // skip to beginning of section inside chunk\n                cis.position(section.left);\n                in.reset(0);\n                while (in.getBytesRead() < length)\n                {\n                    writeRow(writer, in, cfs);\n                    // when compressed, report total bytes of compressed chunks read since remoteFile.size is the sum of chunks transferred\n                    session.progress(desc, ProgressInfo.Direction.IN, cis.getTotalCompressedBytesRead(), totalSize);\n                }\n            }\n            return writer;\n        }\n        catch (Throwable e)\n        {\n            if (writer != null)\n            {\n                try\n                {\n                    writer.abort();\n                }\n                catch (Throwable e2)\n                {\n                    // add abort error to original and continue so we can drain unread stream\n                    e.addSuppressed(e2);\n                }\n            }\n            drain(cis, in.getBytesRead());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                throw Throwables.propagate(e);\n        }\n        finally\n        {\n            cis.close();\n        }\n    }","id":70741,"modified_method":"/**\n     * @return SSTable transferred\n     * @throws java.io.IOException if reading the remote sstable fails. Will throw an RTE if local write fails.\n     */\n    @Override\n    public SSTableWriter read(ReadableByteChannel channel) throws IOException\n    {\n        long totalSize = totalSize();\n\n        Pair<String, String> kscf = Schema.instance.getCF(cfId);\n        ColumnFamilyStore cfs = null;\n        if (kscf != null)\n            cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n\n        if (kscf == null || cfs == null)\n        {\n            // schema was dropped during streaming\n            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n        }\n\n        logger.debug(\"[Stream #{}] Start receiving file #{} from {}, repairedAt = {}, size = {}, ks = '{}', table = '{}'.\",\n                     session.planId(), fileSeqNum, session.peer, repairedAt, totalSize, cfs.keyspace.getName(),\n                     cfs.getColumnFamilyName());\n\n        CompressedInputStream cis = new CompressedInputStream(Channels.newInputStream(channel), compressionInfo, inputVersion.hasPostCompressionAdlerChecksums);\n        BytesReadTracker in = new BytesReadTracker(new DataInputStream(cis));\n        SSTableWriter writer = null;\n        DecoratedKey key = null;\n        try\n        {\n            writer = createWriter(cfs, totalSize, repairedAt);\n            int sectionIdx = 0;\n            for (Pair<Long, Long> section : sections)\n            {\n                long length = section.right - section.left;\n                // skip to beginning of section inside chunk\n                cis.position(section.left);\n                in.reset(0);\n                logger.trace(\"[Stream #{}] Reading section {} with length {} from stream.\", session.planId(), sectionIdx++, length);\n                while (in.getBytesRead() < length)\n                {\n                    key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));\n                    writeRow(key, writer, in, cfs);\n\n                    // when compressed, report total bytes of compressed chunks read since remoteFile.size is the sum of chunks transferred\n                    session.progress(desc, ProgressInfo.Direction.IN, cis.getTotalCompressedBytesRead(), totalSize);\n                }\n            }\n            logger.debug(\"[Stream #{}] Finished receiving file #{} from {} readBytes = {}, totalSize = {}\", session.planId(), fileSeqNum,\n                         session.peer, cis.getTotalCompressedBytesRead(), totalSize);\n            return writer;\n        }\n        catch (Throwable e)\n        {\n            if (key != null)\n                logger.warn(\"[Stream {}] Error while reading partition {} from stream on ks='{}' and table='{}'.\",\n                            session.planId(), key, cfs.keyspace.getName(), cfs.getColumnFamilyName());\n            if (writer != null)\n            {\n                try\n                {\n                    writer.abort();\n                }\n                catch (Throwable e2)\n                {\n                    // add abort error to original and continue so we can drain unread stream\n                    e.addSuppressed(e2);\n                }\n            }\n            drain(cis, in.getBytesRead());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                throw Throwables.propagate(e);\n        }\n    }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"@Override\n    public void write(WritableByteChannel channel) throws IOException\n    {\n        long totalSize = totalSize();\n        RandomAccessReader file = sstable.openDataReader();\n        FileChannel fc = file.getChannel();\n\n        long progress = 0L;\n        // calculate chunks to transfer. we want to send continuous chunks altogether.\n        List<Pair<Long, Long>> sections = getTransferSections(compressionInfo.chunks);\n        try\n        {\n            // stream each of the required sections of the file\n            for (Pair<Long, Long> section : sections)\n            {\n                // length of the section to stream\n                long length = section.right - section.left;\n                // tracks write progress\n                long bytesTransferred = 0;\n                while (bytesTransferred < length)\n                {\n                    int toTransfer = (int) Math.min(CHUNK_SIZE, length - bytesTransferred);\n                    limiter.acquire(toTransfer);\n                    long lastWrite = fc.transferTo(section.left + bytesTransferred, toTransfer, channel);\n                    bytesTransferred += lastWrite;\n                    progress += lastWrite;\n                    session.progress(sstable.descriptor, ProgressInfo.Direction.OUT, progress, totalSize);\n                }\n            }\n        }\n        finally\n        {\n            // no matter what happens close file\n            FileUtils.closeQuietly(file);\n        }\n    }","id":70742,"modified_method":"@Override\n    public void write(WritableByteChannel channel) throws IOException\n    {\n        long totalSize = totalSize();\n        logger.debug(\"[Stream #{}] Start streaming file {} to {}, repairedAt = {}, totalSize = {}\", session.planId(),\n                     sstable.getFilename(), session.peer, sstable.getSSTableMetadata().repairedAt, totalSize);\n        RandomAccessReader file = sstable.openDataReader();\n        FileChannel fc = file.getChannel();\n\n        long progress = 0L;\n        // calculate chunks to transfer. we want to send continuous chunks altogether.\n        List<Pair<Long, Long>> sections = getTransferSections(compressionInfo.chunks);\n        int sectionIdx = 0;\n        try\n        {\n            // stream each of the required sections of the file\n            for (Pair<Long, Long> section : sections)\n            {\n                // length of the section to stream\n                long length = section.right - section.left;\n                logger.trace(\"[Stream #{}] Writing section {} with length {} to stream.\", session.planId(), sectionIdx++, length);\n\n                // tracks write progress\n                long bytesTransferred = 0;\n                while (bytesTransferred < length)\n                {\n                    int toTransfer = (int) Math.min(CHUNK_SIZE, length - bytesTransferred);\n                    limiter.acquire(toTransfer);\n                    long lastWrite = fc.transferTo(section.left + bytesTransferred, toTransfer, channel);\n                    bytesTransferred += lastWrite;\n                    progress += lastWrite;\n                    session.progress(sstable.descriptor, ProgressInfo.Direction.OUT, progress, totalSize);\n                }\n            }\n            logger.debug(\"[Stream #{}] Finished streaming file {} to {}, bytesTransferred = {}, totalSize = {}\",\n                         session.planId(), sstable.getFilename(), session.peer, progress, totalSize);\n        }\n        finally\n        {\n            // no matter what happens close file\n            FileUtils.closeQuietly(file);\n        }\n    }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"public void run()\n        {\n            try\n            {\n                ReadableByteChannel in = getReadChannel(socket);\n                while (!isClosed())\n                {\n                    // receive message\n                    StreamMessage message = StreamMessage.deserialize(in, protocolVersion, session);\n                    // Might be null if there is an error during streaming (see FileMessage.deserialize). It's ok\n                    // to ignore here since we'll have asked for a retry.\n                    if (message != null)\n                    {\n                        logger.debug(\"[Stream #{}] Received {}\", session.planId(), message);\n                        session.messageReceived(message);\n                    }\n                }\n            }\n            catch (SocketException e)\n            {\n                // socket is closed\n                close();\n            }\n            catch (Throwable t)\n            {\n                JVMStabilityInspector.inspectThrowable(t);\n                session.onError(t);\n            }\n            finally\n            {\n                signalCloseDone();\n            }\n        }","id":70743,"modified_method":"public void run()\n        {\n            try\n            {\n                ReadableByteChannel in = getReadChannel(socket);\n                while (!isClosed())\n                {\n                    // receive message\n                    StreamMessage message = StreamMessage.deserialize(in, protocolVersion, session);\n                    logger.debug(\"[Stream #{}] Received {}\", session.planId(), message);\n                    // Might be null if there is an error during streaming (see FileMessage.deserialize). It's ok\n                    // to ignore here since we'll have asked for a retry.\n                    if (message != null)\n                    {\n                        session.messageReceived(message);\n                    }\n                }\n            }\n            catch (SocketException e)\n            {\n                // socket is closed\n                close();\n            }\n            catch (Throwable t)\n            {\n                JVMStabilityInspector.inspectThrowable(t);\n                session.onError(t);\n            }\n            finally\n            {\n                signalCloseDone();\n            }\n        }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"public StreamReader(FileMessageHeader header, StreamSession session)\n    {\n        this.session = session;\n        this.cfId = header.cfId;\n        this.estimatedKeys = header.estimatedKeys;\n        this.sections = header.sections;\n        this.inputVersion = new Descriptor.Version(header.version);\n        this.repairedAt = header.repairedAt;\n    }","id":70744,"modified_method":"public StreamReader(FileMessageHeader header, StreamSession session)\n    {\n        this.session = session;\n        this.cfId = header.cfId;\n        this.estimatedKeys = header.estimatedKeys;\n        this.sections = header.sections;\n        this.inputVersion = new Descriptor.Version(header.version);\n        this.repairedAt = header.repairedAt;\n        this.fileSeqNum = header.sequenceNumber;\n    }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * @param channel where this reads data from\n     * @return SSTable transferred\n     * @throws IOException if reading the remote sstable fails. Will throw an RTE if local write fails.\n     */\n    public SSTableWriter read(ReadableByteChannel channel) throws IOException\n    {\n        logger.debug(\"reading file from {}, repairedAt = {}\", session.peer, repairedAt);\n        long totalSize = totalSize();\n\n        Pair<String, String> kscf = Schema.instance.getCF(cfId);\n        if (kscf == null)\n        {\n            // schema was dropped during streaming\n            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n        }\n        ColumnFamilyStore cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n\n        DataInputStream dis = new DataInputStream(new LZFInputStream(Channels.newInputStream(channel)));\n        BytesReadTracker in = new BytesReadTracker(dis);\n        SSTableWriter writer = null;\n        try\n        {\n            writer = createWriter(cfs, totalSize, repairedAt);\n            while (in.getBytesRead() < totalSize)\n            {\n                writeRow(writer, in, cfs);\n                // TODO move this to BytesReadTracker\n                session.progress(desc, ProgressInfo.Direction.IN, in.getBytesRead(), totalSize);\n            }\n            return writer;\n        }\n        catch (Throwable e)\n        {\n            if (writer != null)\n            {\n                try\n                {\n                    writer.abort();\n                }\n                catch (Throwable e2)\n                {\n                    // add abort error to original and continue so we can drain unread stream\n                    e.addSuppressed(e2);\n                }\n            }\n            drain(dis, in.getBytesRead());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                throw Throwables.propagate(e);\n        }\n    }","id":70745,"modified_method":"/**\n     * @param channel where this reads data from\n     * @return SSTable transferred\n     * @throws IOException if reading the remote sstable fails. Will throw an RTE if local write fails.\n     */\n    public SSTableWriter read(ReadableByteChannel channel) throws IOException\n    {\n        long totalSize = totalSize();\n\n        Pair<String, String> kscf = Schema.instance.getCF(cfId);\n        ColumnFamilyStore cfs = null;\n        if (kscf != null)\n            cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n\n        if (kscf == null || cfs == null)\n        {\n            // schema was dropped during streaming\n            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n        }\n\n        logger.debug(\"[Stream #{}] Start receiving file #{} from {}, repairedAt = {}, size = {}, ks = '{}', table = '{}'.\",\n                     session.planId(), fileSeqNum, session.peer, repairedAt, totalSize, cfs.keyspace.getName(),\n                     cfs.getColumnFamilyName());\n\n        DataInputStream dis = new DataInputStream(new LZFInputStream(Channels.newInputStream(channel)));\n        BytesReadTracker in = new BytesReadTracker(dis);\n        SSTableWriter writer = null;\n        DecoratedKey key = null;\n        try\n        {\n            writer = createWriter(cfs, totalSize, repairedAt);\n            while (in.getBytesRead() < totalSize)\n            {\n                key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));\n                writeRow(key, writer, in, cfs);\n                // TODO move this to BytesReadTracker\n                session.progress(desc, ProgressInfo.Direction.IN, in.getBytesRead(), totalSize);\n            }\n            logger.debug(\"[Stream #{}] Finished receiving file #{} from {} readBytes = {}, totalSize = {}\",\n                         session.planId(), fileSeqNum, session.peer, in.getBytesRead(), totalSize);\n            return writer;\n        }\n        catch (Throwable e)\n        {\n            if (key != null)\n                logger.warn(\"[Stream {}] Error while reading partition {} from stream on ks='{}' and table='{}'.\",\n                            session.planId(), key, cfs.keyspace.getName(), cfs.getColumnFamilyName());\n            if (writer != null)\n            {\n                try\n                {\n                    writer.abort();\n                }\n                catch (Throwable e2)\n                {\n                    // add abort error to original and continue so we can drain unread stream\n                    e.addSuppressed(e2);\n                }\n            }\n            drain(dis, in.getBytesRead());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                throw Throwables.propagate(e);\n        }\n    }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"protected void writeRow(SSTableWriter writer, DataInput in, ColumnFamilyStore cfs) throws IOException\n    {\n        DecoratedKey key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));\n        writer.appendFromStream(key, cfs.metadata, in, inputVersion);\n    }","id":70746,"modified_method":"protected void writeRow(DecoratedKey key, SSTableWriter writer, DataInput in, ColumnFamilyStore cfs) throws IOException\n    {\n        writer.appendFromStream(key, cfs.metadata, in, inputVersion);\n    }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Stream file of specified sections to given channel.\n     *\n     * StreamWriter uses LZF compression on wire to decrease size to transfer.\n     *\n     * @param channel where this writes data to\n     * @throws IOException on any I/O error\n     */\n    public void write(WritableByteChannel channel) throws IOException\n    {\n        long totalSize = totalSize();\n        RandomAccessReader file = sstable.openDataReader();\n        ChecksumValidator validator = new File(sstable.descriptor.filenameFor(Component.CRC)).exists()\n                                    ? DataIntegrityMetadata.checksumValidator(sstable.descriptor)\n                                    : null;\n        transferBuffer = validator == null ? new byte[DEFAULT_CHUNK_SIZE] : new byte[validator.chunkSize];\n\n        // setting up data compression stream\n        compressedOutput = new LZFOutputStream(Channels.newOutputStream(channel));\n        long progress = 0L;\n\n        try\n        {\n            // stream each of the required sections of the file\n            for (Pair<Long, Long> section : sections)\n            {\n                long start = validator == null ? section.left : validator.chunkStart(section.left);\n                int readOffset = (int) (section.left - start);\n                // seek to the beginning of the section\n                file.seek(start);\n                if (validator != null)\n                    validator.seek(start);\n\n                // length of the section to read\n                long length = section.right - start;\n                // tracks write progress\n                long bytesRead = 0;\n                while (bytesRead < length)\n                {\n                    long lastBytesRead = write(file, validator, readOffset, length, bytesRead);\n                    bytesRead += lastBytesRead;\n                    progress += (lastBytesRead - readOffset);\n                    session.progress(sstable.descriptor, ProgressInfo.Direction.OUT, progress, totalSize);\n                    readOffset = 0;\n                }\n\n                // make sure that current section is send\n                compressedOutput.flush();\n            }\n        }\n        finally\n        {\n            // no matter what happens close file\n            FileUtils.closeQuietly(file);\n            FileUtils.closeQuietly(validator);\n        }\n    }","id":70747,"modified_method":"/**\n     * Stream file of specified sections to given channel.\n     *\n     * StreamWriter uses LZF compression on wire to decrease size to transfer.\n     *\n     * @param channel where this writes data to\n     * @throws IOException on any I/O error\n     */\n    public void write(WritableByteChannel channel) throws IOException\n    {\n        long totalSize = totalSize();\n        logger.debug(\"[Stream #{}] Start streaming file {} to {}, repairedAt = {}, totalSize = {}\", session.planId(),\n                     sstable.getFilename(), session.peer, sstable.getSSTableMetadata().repairedAt, totalSize);\n        RandomAccessReader file = sstable.openDataReader();\n        ChecksumValidator validator = new File(sstable.descriptor.filenameFor(Component.CRC)).exists()\n                                    ? DataIntegrityMetadata.checksumValidator(sstable.descriptor)\n                                    : null;\n        transferBuffer = validator == null ? new byte[DEFAULT_CHUNK_SIZE] : new byte[validator.chunkSize];\n\n        // setting up data compression stream\n        compressedOutput = new LZFOutputStream(Channels.newOutputStream(channel));\n        long progress = 0L;\n\n        try\n        {\n            // stream each of the required sections of the file\n            for (Pair<Long, Long> section : sections)\n            {\n                long start = validator == null ? section.left : validator.chunkStart(section.left);\n                int readOffset = (int) (section.left - start);\n                // seek to the beginning of the section\n                file.seek(start);\n                if (validator != null)\n                    validator.seek(start);\n\n                // length of the section to read\n                long length = section.right - start;\n                // tracks write progress\n                long bytesRead = 0;\n                while (bytesRead < length)\n                {\n                    long lastBytesRead = write(file, validator, readOffset, length, bytesRead);\n                    bytesRead += lastBytesRead;\n                    progress += (lastBytesRead - readOffset);\n                    session.progress(sstable.descriptor, ProgressInfo.Direction.OUT, progress, totalSize);\n                    readOffset = 0;\n                }\n\n                // make sure that current section is send\n                compressedOutput.flush();\n            }\n            logger.debug(\"[Stream #{}] Finished streaming file {} to {}, bytesTransferred = {}, totalSize = {}\",\n                         session.planId(), sstable.getFilename(), session.peer, progress, totalSize);\n        }\n        finally\n        {\n            // no matter what happens close file\n            FileUtils.closeQuietly(file);\n            FileUtils.closeQuietly(validator);\n        }\n    }","commit_id":"58a0079c391d12dab97e036f05be070dfaddcc95","url":"https://github.com/apache/cassandra"},{"original_method":"protected static void checkRemaining(ByteBuffer bb, int offs, int length)\n    {\n        if (offs + length > bb.limit())\n            throw new IllegalArgumentException(\"Not enough bytes\");\n    }","id":70748,"modified_method":"protected static void checkRemaining(ByteBuffer bb, int offs, int length)\n    {\n        if (offs + length > bb.limit())\n            throw new IllegalArgumentException(String.format(\"Not enough bytes. Offset: %d. Length: %d. Buffer size: %d\",\n                                                             offs, length, bb.limit()));\n    }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * @param source Input source to read compressed data from\n     * @param info Compression info\n     */\n    public CompressedInputStream(InputStream source, CompressionInfo info)\n    {\n        this.info = info;\n        this.checksum =  new Adler32();\n        this.buffer = new byte[info.parameters.chunkLength()];\n        // buffer is limited to store up to 1024 chunks\n        this.dataBuffer = new ArrayBlockingQueue<>(Math.min(info.chunks.length, 1024));\n\n        readerThread = new Thread(new Reader(source, info, dataBuffer));\n        readerThread.start();\n    }","id":70749,"modified_method":"/**\n     * @param source Input source to read compressed data from\n     * @param info Compression info\n     */\n    public CompressedInputStream(InputStream source, CompressionInfo info)\n    {\n        this.info = info;\n        this.checksum =  new Adler32();\n        this.buffer = new byte[info.parameters.chunkLength()];\n        // buffer is limited to store up to 1024 chunks\n        this.dataBuffer = new ArrayBlockingQueue<byte[]>(Math.min(info.chunks.length, 1024));\n\n        new Thread(new Reader(source, info, dataBuffer)).start();\n    }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"protected void runMayThrow() throws Exception\n        {\n            byte[] compressedWithCRC;\n            while (!Thread.currentThread().isInterrupted() && chunks.hasNext())\n            {\n                CompressionMetadata.Chunk chunk = chunks.next();\n\n                int readLength = chunk.length + 4; // read with CRC\n                compressedWithCRC = new byte[readLength];\n\n                int bufferRead = 0;\n                while (bufferRead < readLength)\n                {\n                    int r;\n                    try\n                    {\n                        r = source.read(compressedWithCRC, bufferRead, readLength - bufferRead);\n                        if (r < 0)\n                        {\n                            dataBuffer.put(POISON_PILL);\n                            return; // throw exception where we consume dataBuffer\n                        }\n                    }\n                    catch (IOException e)\n                    {\n                        dataBuffer.put(POISON_PILL);\n                        throw e;\n                    }\n                    bufferRead += r;\n                }\n                dataBuffer.put(compressedWithCRC);\n            }\n            synchronized(CompressedInputStream.this)\n            {\n                readerThread = null;\n            }\n        }","id":70750,"modified_method":"protected void runMayThrow() throws Exception\n        {\n            byte[] compressedWithCRC;\n            while (chunks.hasNext())\n            {\n                CompressionMetadata.Chunk chunk = chunks.next();\n\n                int readLength = chunk.length + 4; // read with CRC\n                compressedWithCRC = new byte[readLength];\n\n                int bufferRead = 0;\n                while (bufferRead < readLength)\n                {\n                    try\n                    {\n                        int r = source.read(compressedWithCRC, bufferRead, readLength - bufferRead);\n                        if (r < 0)\n                        {\n                            dataBuffer.put(POISON_PILL);\n                            return; // throw exception where we consume dataBuffer\n                        }\n                        bufferRead += r;\n                    }\n                    catch (IOException e)\n                    {\n                        logger.warn(\"Error while reading compressed input stream.\", e);\n                        dataBuffer.put(POISON_PILL);\n                        return; // throw exception where we consume dataBuffer\n                    }\n                }\n                dataBuffer.put(compressedWithCRC);\n            }\n        }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * @return SSTable transferred\n     * @throws java.io.IOException if reading the remote sstable fails. Will throw an RTE if local write fails.\n     */\n    @Override\n    @SuppressWarnings(\"resource\")\n    public SSTableWriter read(ReadableByteChannel channel) throws IOException\n    {\n        logger.debug(\"reading file from {}, repairedAt = {}\", session.peer, repairedAt);\n        long totalSize = totalSize();\n\n        Pair<String, String> kscf = Schema.instance.getCF(cfId);\n        if (kscf == null)\n        {\n            // schema was dropped during streaming\n            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n        }\n        ColumnFamilyStore cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n\n        CompressedInputStream cis = new CompressedInputStream(Channels.newInputStream(channel), compressionInfo);\n        BytesReadTracker in = new BytesReadTracker(new DataInputStream(cis));\n        SSTableWriter writer = null;\n        try\n        {\n            writer = createWriter(cfs, totalSize, repairedAt, format);\n            for (Pair<Long, Long> section : sections)\n            {\n                assert cis.getTotalCompressedBytesRead() <= totalSize;\n                int sectionLength = (int) (section.right - section.left);\n\n                // skip to beginning of section inside chunk\n                cis.position(section.left);\n                in.reset(0);\n\n                while (in.getBytesRead() < sectionLength)\n                {\n                    writeRow(writer, in, cfs);\n\n                    // when compressed, report total bytes of compressed chunks read since remoteFile.size is the sum of chunks transferred\n                    session.progress(desc, ProgressInfo.Direction.IN, cis.getTotalCompressedBytesRead(), totalSize);\n                }\n            }\n            return writer;\n        }\n        catch (Throwable e)\n        {\n            if (writer != null)\n            {\n                try\n                {\n                    writer.abort();\n                }\n                catch (Throwable e2)\n                {\n                    // add abort error to original and continue so we can drain unread stream\n                    e.addSuppressed(e2);\n                }\n            }\n            drain(cis, in.getBytesRead());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                throw Throwables.propagate(e);\n        }\n        finally\n        {\n            cis.close();\n        }\n    }","id":70751,"modified_method":"/**\n     * @return SSTable transferred\n     * @throws java.io.IOException if reading the remote sstable fails. Will throw an RTE if local write fails.\n     */\n    @Override\n    @SuppressWarnings(\"resource\")\n    public SSTableWriter read(ReadableByteChannel channel) throws IOException\n    {\n        long totalSize = totalSize();\n\n        Pair<String, String> kscf = Schema.instance.getCF(cfId);\n        ColumnFamilyStore cfs = null;\n        if (kscf != null)\n            cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n\n        if (kscf == null || cfs == null)\n        {\n            // schema was dropped during streaming\n            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n        }\n\n        logger.debug(\"[Stream #{}] Start receiving file #{} from {}, repairedAt = {}, size = {}, ks = '{}', table = '{}'.\",\n                     session.planId(), fileSeqNum, session.peer, repairedAt, totalSize, cfs.keyspace.getName(),\n                     cfs.getColumnFamilyName());\n\n        CompressedInputStream cis = new CompressedInputStream(Channels.newInputStream(channel), compressionInfo);\n        BytesReadTracker in = new BytesReadTracker(new DataInputStream(cis));\n        SSTableWriter writer = null;\n        DecoratedKey key = null;\n        try\n        {\n            writer = createWriter(cfs, totalSize, repairedAt, format);\n            int sectionIdx = 0;\n            for (Pair<Long, Long> section : sections)\n            {\n                assert cis.getTotalCompressedBytesRead() <= totalSize;\n                long sectionLength = section.right - section.left;\n\n                logger.trace(\"[Stream #{}] Reading section {} with length {} from stream.\", session.planId(), sectionIdx++, sectionLength);\n                // skip to beginning of section inside chunk\n                cis.position(section.left);\n                in.reset(0);\n\n                while (in.getBytesRead() < sectionLength)\n                {\n                    key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));\n                    writeRow(key, writer, in, cfs);\n\n                    // when compressed, report total bytes of compressed chunks read since remoteFile.size is the sum of chunks transferred\n                    session.progress(desc, ProgressInfo.Direction.IN, cis.getTotalCompressedBytesRead(), totalSize);\n                }\n            }\n            logger.debug(\"[Stream #{}] Finished receiving file #{} from {} readBytes = {}, totalSize = {}\", session.planId(), fileSeqNum,\n                         session.peer, cis.getTotalCompressedBytesRead(), totalSize);\n            return writer;\n        }\n        catch (Throwable e)\n        {\n            if (key != null)\n                logger.warn(\"[Stream {}] Error while reading partition {} from stream on ks='{}' and table='{}'.\",\n                            session.planId(), key, cfs.keyspace.getName(), cfs.getColumnFamilyName());\n            if (writer != null)\n            {\n                try\n                {\n                    writer.abort();\n                }\n                catch (Throwable e2)\n                {\n                    // add abort error to original and continue so we can drain unread stream\n                    e.addSuppressed(e2);\n                }\n            }\n            drain(cis, in.getBytesRead());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                throw Throwables.propagate(e);\n        }\n    }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"@Override\n    public void write(DataOutputStreamPlus out) throws IOException\n    {\n        long totalSize = totalSize();\n        try (RandomAccessReader file = sstable.openDataReader(); final ChannelProxy fc = file.getChannel())\n        {\n            long progress = 0L;\n            // calculate chunks to transfer. we want to send continuous chunks altogether.\n            List<Pair<Long, Long>> sections = getTransferSections(compressionInfo.chunks);\n            // stream each of the required sections of the file\n            for (final Pair<Long, Long> section : sections)\n            {\n                // length of the section to stream\n                long length = section.right - section.left;\n                // tracks write progress\n                long bytesTransferred = 0;\n                while (bytesTransferred < length)\n                {\n                    final long bytesTransferredFinal = bytesTransferred;\n                    final int toTransfer = (int) Math.min(CHUNK_SIZE, length - bytesTransferred);\n                    limiter.acquire(toTransfer);\n                    long lastWrite = out.applyToChannel(new Function<WritableByteChannel, Long>()\n                    {\n                        public Long apply(WritableByteChannel wbc)\n                        {\n                            return fc.transferTo(section.left + bytesTransferredFinal, toTransfer, wbc);\n                        }\n                    });\n                    bytesTransferred += lastWrite;\n                    progress += lastWrite;\n                    session.progress(sstable.descriptor, ProgressInfo.Direction.OUT, progress, totalSize);\n                }\n            }\n        }\n    }","id":70752,"modified_method":"@Override\n    public void write(DataOutputStreamPlus out) throws IOException\n    {\n        long totalSize = totalSize();\n        logger.debug(\"[Stream #{}] Start streaming file {} to {}, repairedAt = {}, totalSize = {}\", session.planId(),\n                     sstable.getFilename(), session.peer, sstable.getSSTableMetadata().repairedAt, totalSize);\n        try (RandomAccessReader file = sstable.openDataReader(); final ChannelProxy fc = file.getChannel())\n        {\n            long progress = 0L;\n            // calculate chunks to transfer. we want to send continuous chunks altogether.\n            List<Pair<Long, Long>> sections = getTransferSections(compressionInfo.chunks);\n\n            int sectionIdx = 0;\n\n            // stream each of the required sections of the file\n            for (final Pair<Long, Long> section : sections)\n            {\n                // length of the section to stream\n                long length = section.right - section.left;\n\n                logger.trace(\"[Stream #{}] Writing section {} with length {} to stream.\", session.planId(), sectionIdx++, length);\n\n                // tracks write progress\n                long bytesTransferred = 0;\n                while (bytesTransferred < length)\n                {\n                    final long bytesTransferredFinal = bytesTransferred;\n                    final int toTransfer = (int) Math.min(CHUNK_SIZE, length - bytesTransferred);\n                    limiter.acquire(toTransfer);\n                    long lastWrite = out.applyToChannel(new Function<WritableByteChannel, Long>()\n                    {\n                        public Long apply(WritableByteChannel wbc)\n                        {\n                            return fc.transferTo(section.left + bytesTransferredFinal, toTransfer, wbc);\n                        }\n                    });\n                    bytesTransferred += lastWrite;\n                    progress += lastWrite;\n                    session.progress(sstable.descriptor, ProgressInfo.Direction.OUT, progress, totalSize);\n                }\n            }\n            logger.debug(\"[Stream #{}] Finished streaming file {} to {}, bytesTransferred = {}, totalSize = {}\",\n                         session.planId(), sstable.getFilename(), session.peer, progress, totalSize);\n        }\n    }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"@SuppressWarnings(\"resource\")\n        public void run()\n        {\n            try\n            {\n                ReadableByteChannel in = getReadChannel(socket);\n                while (!isClosed())\n                {\n                    // receive message\n                    StreamMessage message = StreamMessage.deserialize(in, protocolVersion, session);\n                    // Might be null if there is an error during streaming (see FileMessage.deserialize). It's ok\n                    // to ignore here since we'll have asked for a retry.\n                    if (message != null)\n                    {\n                        logger.debug(\"[Stream #{}] Received {}\", session.planId(), message);\n                        session.messageReceived(message);\n                    }\n                }\n            }\n            catch (SocketException e)\n            {\n                // socket is closed\n                close();\n            }\n            catch (Throwable t)\n            {\n                JVMStabilityInspector.inspectThrowable(t);\n                session.onError(t);\n            }\n            finally\n            {\n                signalCloseDone();\n            }\n        }","id":70753,"modified_method":"@SuppressWarnings(\"resource\")\n        public void run()\n        {\n            try\n            {\n                ReadableByteChannel in = getReadChannel(socket);\n                while (!isClosed())\n                {\n                    // receive message\n                    StreamMessage message = StreamMessage.deserialize(in, protocolVersion, session);\n                    logger.debug(\"[Stream #{}] Received {}\", session.planId(), message);\n                    // Might be null if there is an error during streaming (see FileMessage.deserialize). It's ok\n                    // to ignore here since we'll have asked for a retry.\n                    if (message != null)\n                    {\n                        session.messageReceived(message);\n                    }\n                }\n            }\n            catch (SocketException e)\n            {\n                // socket is closed\n                close();\n            }\n            catch (Throwable t)\n            {\n                JVMStabilityInspector.inspectThrowable(t);\n                session.onError(t);\n            }\n            finally\n            {\n                signalCloseDone();\n            }\n        }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * @param channel where this reads data from\n     * @return SSTable transferred\n     * @throws IOException if reading the remote sstable fails. Will throw an RTE if local write fails.\n     */\n    @SuppressWarnings(\"resource\")\n    public SSTableWriter read(ReadableByteChannel channel) throws IOException\n    {\n        logger.debug(\"reading file from {}, repairedAt = {}, level = {}\", session.peer, repairedAt, sstableLevel);\n        long totalSize = totalSize();\n\n        Pair<String, String> kscf = Schema.instance.getCF(cfId);\n        if (kscf == null)\n        {\n            // schema was dropped during streaming\n            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n        }\n        ColumnFamilyStore cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n\n        DataInputStream dis = new DataInputStream(new LZFInputStream(Channels.newInputStream(channel)));\n        BytesReadTracker in = new BytesReadTracker(dis);\n        SSTableWriter writer = null;\n        try\n        {\n            writer = createWriter(cfs, totalSize, repairedAt, format);\n            while (in.getBytesRead() < totalSize)\n            {\n                writeRow(writer, in, cfs);\n\n                // TODO move this to BytesReadTracker\n                session.progress(desc, ProgressInfo.Direction.IN, in.getBytesRead(), totalSize);\n            }\n            return writer;\n        } catch (Throwable e)\n        {\n            if (writer != null)\n            {\n                try\n                {\n                    writer.abort();\n                }\n                catch (Throwable e2)\n                {\n                    // add abort error to original and continue so we can drain unread stream\n                    e.addSuppressed(e2);\n                }\n            }\n            drain(dis, in.getBytesRead());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                throw Throwables.propagate(e);\n        }\n    }","id":70754,"modified_method":"/**\n     * @param channel where this reads data from\n     * @return SSTable transferred\n     * @throws IOException if reading the remote sstable fails. Will throw an RTE if local write fails.\n     */\n    @SuppressWarnings(\"resource\")\n    public SSTableWriter read(ReadableByteChannel channel) throws IOException\n    {\n        long totalSize = totalSize();\n\n        Pair<String, String> kscf = Schema.instance.getCF(cfId);\n        ColumnFamilyStore cfs = null;\n        if (kscf != null)\n            cfs = Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);\n\n        if (kscf == null || cfs == null)\n        {\n            // schema was dropped during streaming\n            throw new IOException(\"CF \" + cfId + \" was dropped during streaming\");\n        }\n\n        logger.debug(\"[Stream #{}] Start receiving file #{} from {}, repairedAt = {}, size = {}, ks = '{}', table = '{}'.\",\n                     session.planId(), fileSeqNum, session.peer, repairedAt, totalSize, cfs.keyspace.getName(),\n                     cfs.getColumnFamilyName());\n\n        DataInputStream dis = new DataInputStream(new LZFInputStream(Channels.newInputStream(channel)));\n        BytesReadTracker in = new BytesReadTracker(dis);\n        SSTableWriter writer = null;\n        DecoratedKey key = null;\n        try\n        {\n            writer = createWriter(cfs, totalSize, repairedAt, format);\n            while (in.getBytesRead() < totalSize)\n            {\n                key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));\n                writeRow(key, writer, in, cfs);\n\n                // TODO move this to BytesReadTracker\n                session.progress(desc, ProgressInfo.Direction.IN, in.getBytesRead(), totalSize);\n            }\n            logger.debug(\"[Stream #{}] Finished receiving file #{} from {} readBytes = {}, totalSize = {}\",\n                         session.planId(), fileSeqNum, session.peer, in.getBytesRead(), totalSize);\n            return writer;\n        } catch (Throwable e)\n        {\n            if (key != null)\n                logger.warn(\"[Stream {}] Error while reading partition {} from stream on ks='{}' and table='{}'.\",\n                            session.planId(), key, cfs.keyspace.getName(), cfs.getColumnFamilyName());\n            if (writer != null)\n            {\n                try\n                {\n                    writer.abort();\n                }\n                catch (Throwable e2)\n                {\n                    // add abort error to original and continue so we can drain unread stream\n                    e.addSuppressed(e2);\n                }\n            }\n            drain(dis, in.getBytesRead());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                throw Throwables.propagate(e);\n        }\n    }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"protected void writeRow(SSTableWriter writer, DataInput in, ColumnFamilyStore cfs) throws IOException\n    {\n        DecoratedKey key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));\n        writer.appendFromStream(key, cfs.metadata, in, inputVersion);\n    }","id":70755,"modified_method":"protected void writeRow(DecoratedKey key, SSTableWriter writer, DataInput in, ColumnFamilyStore cfs) throws IOException\n    {\n        writer.appendFromStream(key, cfs.metadata, in, inputVersion);\n    }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"public StreamReader(FileMessageHeader header, StreamSession session)\n    {\n        this.session = session;\n        this.cfId = header.cfId;\n        this.estimatedKeys = header.estimatedKeys;\n        this.sections = header.sections;\n        this.inputVersion = header.format.info.getVersion(header.version);\n        this.repairedAt = header.repairedAt;\n        this.format = header.format;\n        this.sstableLevel = header.sstableLevel;\n    }","id":70756,"modified_method":"public StreamReader(FileMessageHeader header, StreamSession session)\n    {\n        this.session = session;\n        this.cfId = header.cfId;\n        this.estimatedKeys = header.estimatedKeys;\n        this.sections = header.sections;\n        this.inputVersion = header.format.info.getVersion(header.version);\n        this.repairedAt = header.repairedAt;\n        this.format = header.format;\n        this.sstableLevel = header.sstableLevel;\n        this.fileSeqNum = header.sequenceNumber;\n    }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Stream file of specified sections to given channel.\n     *\n     * StreamWriter uses LZF compression on wire to decrease size to transfer.\n     *\n     * @param output where this writes data to\n     * @throws IOException on any I/O error\n     */\n    public void write(DataOutputStreamPlus output) throws IOException\n    {\n        long totalSize = totalSize();\n\n\n        try(RandomAccessReader file = sstable.openDataReader();\n            ChecksumValidator validator = new File(sstable.descriptor.filenameFor(Component.CRC)).exists()\n                                          ? DataIntegrityMetadata.checksumValidator(sstable.descriptor)\n                                          : null;)\n        {\n            transferBuffer = validator == null ? new byte[DEFAULT_CHUNK_SIZE] : new byte[validator.chunkSize];\n\n            // setting up data compression stream\n            compressedOutput = new LZFOutputStream(output);\n            long progress = 0L;\n\n            // stream each of the required sections of the file\n            for (Pair<Long, Long> section : sections)\n            {\n                long start = validator == null ? section.left : validator.chunkStart(section.left);\n                int readOffset = (int) (section.left - start);\n                // seek to the beginning of the section\n                file.seek(start);\n                if (validator != null)\n                    validator.seek(start);\n\n                // length of the section to read\n                long length = section.right - start;\n                // tracks write progress\n                long bytesRead = 0;\n                while (bytesRead < length)\n                {\n                    long lastBytesRead = write(file, validator, readOffset, length, bytesRead);\n                    bytesRead += lastBytesRead;\n                    progress += (lastBytesRead - readOffset);\n                    session.progress(sstable.descriptor, ProgressInfo.Direction.OUT, progress, totalSize);\n                    readOffset = 0;\n                }\n\n                // make sure that current section is sent\n                compressedOutput.flush();\n            }\n        }\n    }","id":70757,"modified_method":"/**\n     * Stream file of specified sections to given channel.\n     *\n     * StreamWriter uses LZF compression on wire to decrease size to transfer.\n     *\n     * @param output where this writes data to\n     * @throws IOException on any I/O error\n     */\n    public void write(DataOutputStreamPlus output) throws IOException\n    {\n        long totalSize = totalSize();\n        logger.debug(\"[Stream #{}] Start streaming file {} to {}, repairedAt = {}, totalSize = {}\", session.planId(),\n                     sstable.getFilename(), session.peer, sstable.getSSTableMetadata().repairedAt, totalSize);\n\n        try(RandomAccessReader file = sstable.openDataReader();\n            ChecksumValidator validator = new File(sstable.descriptor.filenameFor(Component.CRC)).exists()\n                                          ? DataIntegrityMetadata.checksumValidator(sstable.descriptor)\n                                          : null;)\n        {\n            transferBuffer = validator == null ? new byte[DEFAULT_CHUNK_SIZE] : new byte[validator.chunkSize];\n\n            // setting up data compression stream\n            compressedOutput = new LZFOutputStream(output);\n            long progress = 0L;\n\n            // stream each of the required sections of the file\n            for (Pair<Long, Long> section : sections)\n            {\n                long start = validator == null ? section.left : validator.chunkStart(section.left);\n                int readOffset = (int) (section.left - start);\n                // seek to the beginning of the section\n                file.seek(start);\n                if (validator != null)\n                    validator.seek(start);\n\n                // length of the section to read\n                long length = section.right - start;\n                // tracks write progress\n                long bytesRead = 0;\n                while (bytesRead < length)\n                {\n                    long lastBytesRead = write(file, validator, readOffset, length, bytesRead);\n                    bytesRead += lastBytesRead;\n                    progress += (lastBytesRead - readOffset);\n                    session.progress(sstable.descriptor, ProgressInfo.Direction.OUT, progress, totalSize);\n                    readOffset = 0;\n                }\n\n                // make sure that current section is sent\n                compressedOutput.flush();\n            }\n            logger.debug(\"[Stream #{}] Finished streaming file {} to {}, bytesTransferred = {}, totalSize = {}\",\n                         session.planId(), sstable.getFilename(), session.peer, progress, totalSize);\n        }\n    }","commit_id":"582bdba4b201e6ab8e2a9a05cff3566f1bab9dce","url":"https://github.com/apache/cassandra"},{"original_method":"public void onApplicationEvent(ApplicationEvent event) {\n        if (event instanceof AuthenticationSuccessEvent) {\n            AuthenticationSuccessEvent authEvent = (AuthenticationSuccessEvent) event;\n\n            EventBuilder builder = new EventBuilder(SUCCESS_UEI, \"OpenNMS.WebUI\");\n            builder.setTime(new Date(authEvent.getTimestamp()));\n            Authentication auth = authEvent.getAuthentication();\n            builder.addParam(\"user\", auth.getName());\n            if (auth.getDetails() instanceof WebAuthenticationDetails) {\n                WebAuthenticationDetails webDetails = (WebAuthenticationDetails) auth.getDetails();\n                if (webDetails.getRemoteAddress() != null) {\n                    builder.addParam(\"ip\", webDetails.getRemoteAddress());\n                }\n            }\n            sendEvent(builder.getEvent());\n        }\n    }","id":70758,"modified_method":"public void onApplicationEvent(ApplicationEvent event) {\n        if (event instanceof AuthenticationSuccessEvent) {\n            AuthenticationSuccessEvent authEvent = (AuthenticationSuccessEvent) event;\n\n            EventBuilder builder = createEvent(SUCCESS_UEI, authEvent);\n            sendEvent(builder.getEvent());\n        }\n        \n        if (event instanceof AbstractAuthenticationFailureEvent) {\n            AbstractAuthenticationFailureEvent authEvent = (AbstractAuthenticationFailureEvent) event;\n\n            EventBuilder builder = createEvent(FAILURE_UEI, authEvent);\n            builder.addParam(\"exceptionName\", authEvent.getException().getClass().getSimpleName());\n            builder.addParam(\"exceptionMessage\", authEvent.getException().getMessage());\n            sendEvent(builder.getEvent());\n        }\n    }","commit_id":"07dd6d652b1e1ada4f4e0026bbabcf1078adba13","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void onApplicationEvent(ApplicationEvent event) {\n        if (event instanceof AuthenticationSuccessEvent) {\n            AuthenticationSuccessEvent authEvent = (AuthenticationSuccessEvent) event;\n\n            EventBuilder builder = new EventBuilder(SUCCESS_UEI, \"OpenNMS.WebUI\");\n            builder.setTime(new Date(authEvent.getTimestamp()));\n            Authentication auth = authEvent.getAuthentication();\n            builder.addParam(\"user\", auth.getName());\n            if (auth.getDetails() instanceof WebAuthenticationDetails) {\n                WebAuthenticationDetails webDetails = (WebAuthenticationDetails) auth.getDetails();\n                if (webDetails.getRemoteAddress() != null) {\n                    builder.addParam(\"ip\", webDetails.getRemoteAddress());\n                }\n            }\n            sendEvent(builder.getEvent());\n        }\n    }","id":70759,"modified_method":"public void onApplicationEvent(ApplicationEvent event) {\n        if (event instanceof AuthenticationSuccessEvent) {\n            AuthenticationSuccessEvent authEvent = (AuthenticationSuccessEvent) event;\n\n            EventBuilder builder = createEvent(SUCCESS_UEI, authEvent);\n            sendEvent(builder.getEvent());\n        }\n        \n        if (event instanceof AbstractAuthenticationFailureEvent) {\n            AbstractAuthenticationFailureEvent authEvent = (AbstractAuthenticationFailureEvent) event;\n\n            EventBuilder builder = createEvent(FAILURE_UEI, authEvent);\n            builder.addParam(\"exceptionName\", authEvent.getException().getClass().getSimpleName());\n            builder.addParam(\"exceptionMessage\", authEvent.getException().getMessage());\n            sendEvent(builder.getEvent());\n        }\n    }","commit_id":"0bf7f426710795136ba29ce60dce326900aeaa0f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void onApplicationEvent(ApplicationEvent event) {\n        if (event instanceof AuthenticationSuccessEvent) {\n            AuthenticationSuccessEvent authEvent = (AuthenticationSuccessEvent) event;\n\n            EventBuilder builder = new EventBuilder(SUCCESS_UEI, \"OpenNMS.WebUI\");\n            builder.setTime(new Date(authEvent.getTimestamp()));\n            Authentication auth = authEvent.getAuthentication();\n            builder.addParam(\"user\", auth.getName());\n            if (auth.getDetails() instanceof WebAuthenticationDetails) {\n                WebAuthenticationDetails webDetails = (WebAuthenticationDetails) auth.getDetails();\n                if (webDetails.getRemoteAddress() != null) {\n                    builder.addParam(\"ip\", webDetails.getRemoteAddress());\n                }\n            }\n            sendEvent(builder.getEvent());\n        }\n    }","id":70760,"modified_method":"public void onApplicationEvent(ApplicationEvent event) {\n        if (event instanceof AuthenticationSuccessEvent) {\n            AuthenticationSuccessEvent authEvent = (AuthenticationSuccessEvent) event;\n\n            EventBuilder builder = createEvent(SUCCESS_UEI, authEvent);\n            sendEvent(builder.getEvent());\n        }\n        \n        if (event instanceof AbstractAuthenticationFailureEvent) {\n            AbstractAuthenticationFailureEvent authEvent = (AbstractAuthenticationFailureEvent) event;\n\n            EventBuilder builder = createEvent(FAILURE_UEI, authEvent);\n            builder.addParam(\"exceptionName\", authEvent.getException().getClass().getSimpleName());\n            builder.addParam(\"exceptionMessage\", authEvent.getException().getMessage());\n            sendEvent(builder.getEvent());\n        }\n    }","commit_id":"a8f13e2d04aaace3ab85561ea02ac74ecbf7e63f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main(String[] args) throws IOException {\n\n      String serializedClassifier = \"classifiers/english.all.3class.distsim.crf.ser.gz\";\n\n      if (args.length > 0) {\n        serializedClassifier = args[0];\n      }\n\n      AbstractSequenceClassifier<CoreLabel> classifier = CRFClassifier.getClassifierNoExceptions(serializedClassifier);\n\n      /* For either a file to annotate or for the hardcoded text example,\n         this demo file shows two ways to process the output, for teaching\n         purposes.  For the file, it shows both how to run NER on a String\n         and how to run it on a whole file.  For the hard-coded String,\n         it shows how to run it on a single sentence, and how to do this\n         and produce an inline XML output format.\n      */\n      if (args.length > 1) {\n        String fileContents = IOUtils.slurpFile(args[1]);\n        List<List<CoreLabel>> out = classifier.classify(fileContents);\n        for (List<CoreLabel> sentence : out) {\n          for (CoreLabel word : sentence) {\n            System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n          }\n          System.out.println();\n        }\n        out = classifier.classifyFile(args[1]);\n        for (List<CoreLabel> sentence : out) {\n          for (CoreLabel word : sentence) {\n            System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n          }\n          System.out.println();\n        }\n\n      } else {\n        String s1 = \"Good afternoon Rajat Raina, how are you today?\";\n        String s2 = \"I go to school at Stanford University, which is located in California.\";\n        System.out.println(classifier.classifyToString(s1));\n        System.out.println(classifier.classifyWithInlineXML(s2));\n        System.out.println(classifier.classifyToString(s2, \"xml\", true));\n        int i=0;\n        for (List<CoreLabel> lcl : classifier.classify(s2)) {\n          for (CoreLabel cl : lcl) {\n            System.out.println(i++ + \":\");\n            System.out.println(cl);\n          }\n        }\n      }\n    }","id":70761,"modified_method":"public static void main(String[] args) throws Exception {\n\n    String serializedClassifier = \"classifiers/english.all.3class.distsim.crf.ser.gz\";\n\n    if (args.length > 0) {\n      serializedClassifier = args[0];\n    }\n\n    AbstractSequenceClassifier<CoreLabel> classifier = CRFClassifier.getClassifier(serializedClassifier);\n\n    /* For either a file to annotate or for the hardcoded text example,\n       this demo file shows two ways to process the output, for teaching\n       purposes.  For the file, it shows both how to run NER on a String\n       and how to run it on a whole file.  For the hard-coded String,\n       it shows how to run it on a single sentence, and how to do this\n       and produce an inline XML output format.\n    */\n    if (args.length > 1) {\n      String fileContents = IOUtils.slurpFile(args[1]);\n      List<List<CoreLabel>> out = classifier.classify(fileContents);\n      for (List<CoreLabel> sentence : out) {\n        for (CoreLabel word : sentence) {\n          System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n        }\n        System.out.println();\n      }\n      System.out.println(\"---\");\n      out = classifier.classifyFile(args[1]);\n      for (List<CoreLabel> sentence : out) {\n        for (CoreLabel word : sentence) {\n          System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n        }\n        System.out.println();\n      }\n\n    } else {\n      String[] example = {\"Good afternoon Rajat Raina, how are you today?\",\n                          \"I go to school at Stanford University, which is located in California.\" };\n      for (String str : example) {\n        System.out.println(classifier.classifyToString(str));\n      }\n      System.out.println(\"---\");\n\n      for (String str : example) {\n        // This one puts in spaces and newlines between tokens, so just print not println.\n        System.out.print(classifier.classifyToString(str, \"slashTags\", false));\n      }\n      System.out.println(\"---\");\n\n      for (String str : example) {\n        System.out.println(classifier.classifyWithInlineXML(str));\n      }\n      System.out.println(\"---\");\n\n      for (String str : example) {\n        System.out.println(classifier.classifyToString(str, \"xml\", true));\n      }\n      System.out.println(\"---\");\n\n      int i=0;\n      for (String str : example) {\n        for (List<CoreLabel> lcl : classifier.classify(str)) {\n          for (CoreLabel cl : lcl) {\n            System.out.print(i++ + \": \");\n            System.out.println(cl.toShorterString());\n          }\n        }\n      }\n    }\n  }","commit_id":"e778b68b872288f3d1feef1b081605df89a16cdb","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public static void main(String[] args) throws IOException {\n\n      String serializedClassifier = \"classifiers/english.all.3class.distsim.crf.ser.gz\";\n\n      if (args.length > 0) {\n        serializedClassifier = args[0];\n      }\n\n      AbstractSequenceClassifier<CoreLabel> classifier = CRFClassifier.getClassifierNoExceptions(serializedClassifier);\n\n      /* For either a file to annotate or for the hardcoded text example,\n         this demo file shows two ways to process the output, for teaching\n         purposes.  For the file, it shows both how to run NER on a String\n         and how to run it on a whole file.  For the hard-coded String,\n         it shows how to run it on a single sentence, and how to do this\n         and produce an inline XML output format.\n      */\n      if (args.length > 1) {\n        String fileContents = IOUtils.slurpFile(args[1]);\n        List<List<CoreLabel>> out = classifier.classify(fileContents);\n        for (List<CoreLabel> sentence : out) {\n          for (CoreLabel word : sentence) {\n            System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n          }\n          System.out.println();\n        }\n        out = classifier.classifyFile(args[1]);\n        for (List<CoreLabel> sentence : out) {\n          for (CoreLabel word : sentence) {\n            System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n          }\n          System.out.println();\n        }\n\n      } else {\n        String s1 = \"Good afternoon Rajat Raina, how are you today?\";\n        String s2 = \"I go to school at Stanford University, which is located in California.\";\n        System.out.println(classifier.classifyToString(s1));\n        System.out.println(classifier.classifyWithInlineXML(s2));\n        System.out.println(classifier.classifyToString(s2, \"xml\", true));\n        int i=0;\n        for (List<CoreLabel> lcl : classifier.classify(s2)) {\n          for (CoreLabel cl : lcl) {\n            System.out.println(i++ + \":\");\n            System.out.println(cl);\n          }\n        }\n      }\n    }","id":70762,"modified_method":"public static void main(String[] args) throws Exception {\n\n    String serializedClassifier = \"classifiers/english.all.3class.distsim.crf.ser.gz\";\n\n    if (args.length > 0) {\n      serializedClassifier = args[0];\n    }\n\n    AbstractSequenceClassifier<CoreLabel> classifier = CRFClassifier.getClassifier(serializedClassifier);\n\n    /* For either a file to annotate or for the hardcoded text example,\n       this demo file shows two ways to process the output, for teaching\n       purposes.  For the file, it shows both how to run NER on a String\n       and how to run it on a whole file.  For the hard-coded String,\n       it shows how to run it on a single sentence, and how to do this\n       and produce an inline XML output format.\n    */\n    if (args.length > 1) {\n      String fileContents = IOUtils.slurpFile(args[1]);\n      List<List<CoreLabel>> out = classifier.classify(fileContents);\n      for (List<CoreLabel> sentence : out) {\n        for (CoreLabel word : sentence) {\n          System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n        }\n        System.out.println();\n      }\n      System.out.println(\"---\");\n      out = classifier.classifyFile(args[1]);\n      for (List<CoreLabel> sentence : out) {\n        for (CoreLabel word : sentence) {\n          System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n        }\n        System.out.println();\n      }\n\n    } else {\n      String[] example = {\"Good afternoon Rajat Raina, how are you today?\",\n                          \"I go to school at Stanford University, which is located in California.\" };\n      for (String str : example) {\n        System.out.println(classifier.classifyToString(str));\n      }\n      System.out.println(\"---\");\n\n      for (String str : example) {\n        // This one puts in spaces and newlines between tokens, so just print not println.\n        System.out.print(classifier.classifyToString(str, \"slashTags\", false));\n      }\n      System.out.println(\"---\");\n\n      for (String str : example) {\n        System.out.println(classifier.classifyWithInlineXML(str));\n      }\n      System.out.println(\"---\");\n\n      for (String str : example) {\n        System.out.println(classifier.classifyToString(str, \"xml\", true));\n      }\n      System.out.println(\"---\");\n\n      int i=0;\n      for (String str : example) {\n        for (List<CoreLabel> lcl : classifier.classify(str)) {\n          for (CoreLabel cl : lcl) {\n            System.out.print(i++ + \": \");\n            System.out.println(cl.toShorterString());\n          }\n        }\n      }\n    }\n  }","commit_id":"1a99d8299d1802f67e1525062efd2dd3eb047080","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public EvaluateTreebank(Options op, Lexicon lex, ParserGrammar pqFactory) {\n    this.op = op;\n    this.debinarizer = new Debinarizer(op.forceCNF);\n    this.subcategoryStripper = op.tlpParams.subcategoryStripper();\n\n    this.extraEvals = pqFactory.getExtraEvals();\n\n    // this.lex = lex;\n    this.pqFactory = pqFactory;\n\n    if(op.testOptions.preTag) {\n      try {\n        Class[] argsClass = { String.class };\n        Object[] arguments = { op.testOptions.taggerSerializedFile };\n        System.err.printf(\"Loading tagger from serialized file %s ...\\n\",op.testOptions.taggerSerializedFile);\n        tagger = (Function<List<? extends HasWord>,ArrayList<TaggedWord>>) Class.forName(\"edu.stanford.nlp.tagger.maxent.MaxentTagger\").getConstructor(argsClass).newInstance(arguments);\n      } catch (RuntimeException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    collinizer = op.tlpParams.collinizer();\n    boundaryRemover = new BoundaryRemover();\n\n    runningAverages = Boolean.parseBoolean(op.testOptions.evals.getProperty(\"runningAverages\"));\n    summary = Boolean.parseBoolean(op.testOptions.evals.getProperty(\"summary\"));\n    tsv = Boolean.parseBoolean(op.testOptions.evals.getProperty(\"tsv\"));\n\n    if (!op.trainOptions.leftToRight) {\n      binarizerOnly = new TreeAnnotatorAndBinarizer(op.tlpParams, op.forceCNF, false, false, op);\n    } else {\n      binarizerOnly = new TreeAnnotatorAndBinarizer(op.tlpParams.headFinder(), new LeftHeadFinder(), op.tlpParams, op.forceCNF, false, false, op);\n    }\n\n\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgLB\"))) {\n      pcfgLB = new Evalb(\"pcfg LP/LR\", runningAverages);\n    }\n    // TODO: might be nice to allow more than one child-specific scorer\n    if (op.testOptions.evals.getProperty(\"pcfgChildSpecific\") != null) {\n      String filter = op.testOptions.evals.getProperty(\"pcfgChildSpecific\");\n      pcfgChildSpecific = FilteredEval.childFilteredEval(\"pcfg children matching \" + filter + \" LP/LR\", runningAverages, op.langpack(), filter);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgLA\"))) {\n      pcfgLA = new LeafAncestorEval(\"pcfg LeafAncestor\");\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgCB\"))) {\n      pcfgCB = new Evalb.CBEval(\"pcfg CB\", runningAverages);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgDA\"))) {\n      pcfgDA = new UnlabeledAttachmentEval(\"pcfg DA\", runningAverages, op.langpack().headFinder());\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgTA\"))) {\n      pcfgTA = new TaggingEval(\"pcfg Tag\", runningAverages, lex);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"depDA\"))) {\n      depDA = new UnlabeledAttachmentEval(\"dep DA\", runningAverages, null, op.langpack().punctuationWordRejectFilter());\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"depTA\"))) {\n      depTA = new TaggingEval(\"dep Tag\", runningAverages, lex);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"factLB\"))) {\n      factLB = new Evalb(\"factor LP/LR\", runningAverages);\n    }\n    if (op.testOptions.evals.getProperty(\"factChildSpecific\") != null) {\n      String filter = op.testOptions.evals.getProperty(\"factChildSpecific\");\n      factChildSpecific = FilteredEval.childFilteredEval(\"fact children matching \" + filter + \" LP/LR\", runningAverages, op.langpack(), filter);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"factLA\"))) {\n      factLA = new LeafAncestorEval(\"factor LeafAncestor\");\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"factCB\"))) {\n      factCB = new Evalb.CBEval(\"fact CB\", runningAverages);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"factDA\"))) {\n      factDA = new UnlabeledAttachmentEval(\"factor DA\", runningAverages, null);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"factTA\"))) {\n      factTA = new TaggingEval(\"factor Tag\", runningAverages, lex);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgRUO\"))) {\n      pcfgRUO = new AbstractEval.RuleErrorEval(\"pcfg Rule under/over\");\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgCUO\"))) {\n      pcfgCUO = new AbstractEval.CatErrorEval(\"pcfg Category under/over\");\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgCatE\"))) {\n      pcfgCatE = new EvalbByCat(\"pcfg Category Eval\", runningAverages);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgLL\"))) {\n      pcfgLL = new AbstractEval.ScoreEval(\"pcfgLL\", runningAverages);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"depLL\"))) {\n      depLL = new AbstractEval.ScoreEval(\"depLL\", runningAverages);\n    }\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"factLL\"))) {\n      factLL = new AbstractEval.ScoreEval(\"factLL\", runningAverages);\n    }\n    // this one is for the various k Good/Best options.  Just for individual results\n    kGoodLB = new Evalb(\"kGood LP/LR\", false);\n\n    if (Boolean.parseBoolean(op.testOptions.evals.getProperty(\"pcfgTopK\"))) {\n      topKEvals.add(new BestOfTopKEval(new Evalb(\"pcfg top k comparisons\", false), new Evalb(\"pcfg top k LP/LR\", runningAverages)));\n    }\n\n    if (topKEvals.size() > 0) {\n      kbestPCFG = op.testOptions.evalPCFGkBest;\n    }\n    if (op.testOptions.printPCFGkBest > 0) {\n      kbestPCFG = Math.max(kbestPCFG, op.testOptions.printPCFGkBest);\n    }\n\n  }","id":70763,"modified_method":"public EvaluateTreebank(Options op, Lexicon lex, ParserGrammar pqFactory) {\n    this(op, lex, pqFactory, loadTagger(op));\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Returns a new Sentence that is a copy of the given sentence with all the\n   * words tagged with their part-of-speech. Convenience method when you only\n   * want to tag a single List instead of a List of Lists.  If you\n   * supply tagSentence with a List of HasTag, and set reuseTags to\n   * true, the tagger will reuse the supplied tags.\n   * @param sentence sentence to tag\n   * @param reuseTags whether or not to reuse the given tag\n   * @return tagged sentence\n   */\n  public ArrayList<TaggedWord> tagSentence(List<? extends HasWord> sentence,\n                                           boolean reuseTags) {\n    TestSentence testSentence = new TestSentence(this);\n    return testSentence.tagSentence(sentence, reuseTags);\n  }","id":70764,"modified_method":"/**\n   * Returns a new Sentence that is a copy of the given sentence with all the\n   * words tagged with their part-of-speech. Convenience method when you only\n   * want to tag a single List instead of a List of Lists.  If you\n   * supply tagSentence with a List of HasTag, and set reuseTags to\n   * true, the tagger will reuse the supplied tags.\n   * @param sentence sentence to tag\n   * @param reuseTags whether or not to reuse the given tag\n   * @return tagged sentence\n   */\n  public List<TaggedWord> tagSentence(List<? extends HasWord> sentence,\n                                           boolean reuseTags) {\n    TestSentence testSentence = new TestSentence(this);\n    return testSentence.tagSentence(sentence, reuseTags);\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Reads data from r, tokenizes it with the given tokenizer, and\n   * returns a List of Lists of (extends) HasWord objects, which can then be\n   * fed into tagSentence.\n   *\n   * @param r Reader where untokenized text is read\n   * @param tokenizerFactory Tokenizer.  This can be <code>null<\/code> in which case\n   *     the default English tokenizer (PTBTokenizerFactory) is used.\n   * @return List of tokenized sentences\n   */\n  public static List<List<HasWord>> tokenizeText(Reader r,\n                 TokenizerFactory<? extends HasWord> tokenizerFactory) {\n    DocumentPreprocessor documentPreprocessor = new DocumentPreprocessor(r);\n    if (tokenizerFactory != null) {\n      documentPreprocessor.setTokenizerFactory(tokenizerFactory);\n    }\n    List<List<HasWord>> out = new ArrayList<List<HasWord>>();\n    for (List<HasWord> item : documentPreprocessor) {\n      out.add(item);\n    }\n    return out;\n  }","id":70765,"modified_method":"/**\n   * Reads data from r, tokenizes it with the given tokenizer, and\n   * returns a List of Lists of (extends) HasWord objects, which can then be\n   * fed into tagSentence.\n   *\n   * @param r Reader where untokenized text is read\n   * @param tokenizerFactory Tokenizer.  This can be <code>null<\/code> in which case\n   *     the default English tokenizer (PTBTokenizerFactory) is used.\n   * @return List of tokenized sentences\n   */\n  public static List<List<HasWord>> tokenizeText(Reader r,\n                 TokenizerFactory<? extends HasWord> tokenizerFactory) {\n    DocumentPreprocessor documentPreprocessor = new DocumentPreprocessor(r);\n    if (tokenizerFactory != null) {\n      documentPreprocessor.setTokenizerFactory(tokenizerFactory);\n    }\n    List<List<HasWord>> out = Generics.newArrayList();\n    for (List<HasWord> item : documentPreprocessor) {\n      out.add(item);\n    }\n    return out;\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public List<? extends HasWord> tagCoreLabelsOrHasWords(List<? extends HasWord> sentence, Morphology morpha, boolean outputLemmas) {\n    if (sentence.size() > 0 && sentence.get(0) instanceof CoreLabel) {\n      List<CoreLabel> coreLabels = castCoreLabels(sentence);\n      tagCoreLabels(coreLabels);\n      if (outputLemmas) {\n        // We may want to lemmatize things without using an existing\n        // Morphology object, as Morphology objects are not\n        // thread-safe, so we would make a new one here\n        if (morpha == null) {\n          morpha = new Morphology();\n        }\n        lemmatize(coreLabels, morpha);\n      }\n      return coreLabels;\n    } else {\n      ArrayList<TaggedWord> taggedSentence = tagSentence(sentence, false);\n      return taggedSentence;\n    }\n  }","id":70766,"modified_method":"public List<? extends HasWord> tagCoreLabelsOrHasWords(List<? extends HasWord> sentence, Morphology morpha, boolean outputLemmas) {\n    if (sentence.size() > 0 && sentence.get(0) instanceof CoreLabel) {\n      List<CoreLabel> coreLabels = castCoreLabels(sentence);\n      tagCoreLabels(coreLabels);\n      if (outputLemmas) {\n        // We may want to lemmatize things without using an existing\n        // Morphology object, as Morphology objects are not\n        // thread-safe, so we would make a new one here\n        if (morpha == null) {\n          morpha = new Morphology();\n        }\n        lemmatize(coreLabels, morpha);\n      }\n      return coreLabels;\n    } else {\n      List<TaggedWord> taggedSentence = tagSentence(sentence, false);\n      return taggedSentence;\n    }\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Tags the Words in each Sentence in the given List with their\n   * grammatical part-of-speech. The returned List contains Sentences\n   * consisting of TaggedWords.\n   * <p><b>NOTE: <\/b>The input document must contain sentences as its elements,\n   * not words. To turn a Document of words into a Document of sentences, run\n   * it through {@link edu.stanford.nlp.process.WordToSentenceProcessor}.\n   *\n   * @param sentences A List of Sentence\n   * @return A List of Sentence of TaggedWord\n   */\n  @Override\n  public List<ArrayList<TaggedWord>> process(List<? extends List<? extends HasWord>> sentences) {\n    List<ArrayList<TaggedWord>> taggedSentences = new ArrayList<ArrayList<TaggedWord>>();\n\n    TestSentence testSentence = new TestSentence(this);\n    for (List<? extends HasWord> sentence : sentences) {\n      taggedSentences.add(testSentence.tagSentence(sentence, false));\n    }\n    return taggedSentences;\n  }","id":70767,"modified_method":"/**\n   * Tags the Words in each Sentence in the given List with their\n   * grammatical part-of-speech. The returned List contains Sentences\n   * consisting of TaggedWords.\n   * <p><b>NOTE: <\/b>The input document must contain sentences as its elements,\n   * not words. To turn a Document of words into a Document of sentences, run\n   * it through {@link edu.stanford.nlp.process.WordToSentenceProcessor}.\n   *\n   * @param sentences A List of Sentence\n   * @return A List of Sentence of TaggedWord\n   */\n  @Override\n  public List<List<TaggedWord>> process(List<? extends List<? extends HasWord>> sentences) {\n    List<List<TaggedWord>> taggedSentences = Generics.newArrayList();\n\n    TestSentence testSentence = new TestSentence(this);\n    for (List<? extends HasWord> sentence : sentences) {\n      taggedSentences.add(testSentence.tagSentence(sentence, false));\n    }\n    return taggedSentences;\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void runTaggerSGML(BufferedReader reader, BufferedWriter writer, OutputStyle outputStyle)\n    throws IOException\n  {\n    Timing t = new Timing();\n\n    //Counts\n    int numWords = 0;\n    int numSentences = 0;\n\n    if (outputStyle == OutputStyle.XML ||\n        outputStyle == OutputStyle.INLINE_XML) {\n      writer.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"\" +\n                   config.getEncoding() + \"\\\"?>\\n\");\n      writer.write(\"<pos>\\n\");\n    }\n\n    // this uses NER codebase technology to read/write SGML-ish files\n    PlainTextDocumentReaderAndWriter<CoreLabel> readerAndWriter = new PlainTextDocumentReaderAndWriter<CoreLabel>();\n    ObjectBank<List<CoreLabel>> ob = new ObjectBank<List<CoreLabel>>(new ReaderIteratorFactory(reader), readerAndWriter);\n    PrintWriter pw = new PrintWriter(writer);\n    for (List<CoreLabel> sentence : ob) {\n      ArrayList<CoreLabel> s = new ArrayList<CoreLabel>(sentence);\n      numWords += s.size();\n      ArrayList<TaggedWord> taggedSentence = tagSentence(s, false);\n      Iterator<CoreLabel> origIter = sentence.iterator();\n      for (TaggedWord tw : taggedSentence) {\n        CoreLabel cl = origIter.next();\n        cl.set(CoreAnnotations.AnswerAnnotation.class, tw.tag());\n      }\n      readerAndWriter.printAnswers(sentence, pw, outputStyle, true);\n      ++numSentences;\n    }\n\n    if (outputStyle == OutputStyle.XML ||\n        outputStyle == OutputStyle.INLINE_XML) {\n      writer.write(\"<\/pos>\\n\");\n    }\n\n    writer.flush();\n    long millis = t.stop();\n    printErrWordsPerSec(millis, numWords);\n  }","id":70768,"modified_method":"public void runTaggerSGML(BufferedReader reader, BufferedWriter writer, OutputStyle outputStyle)\n    throws IOException\n  {\n    Timing t = new Timing();\n\n    //Counts\n    int numWords = 0;\n    int numSentences = 0;\n\n    if (outputStyle == OutputStyle.XML ||\n        outputStyle == OutputStyle.INLINE_XML) {\n      writer.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"\" +\n                   config.getEncoding() + \"\\\"?>\\n\");\n      writer.write(\"<pos>\\n\");\n    }\n\n    // this uses NER codebase technology to read/write SGML-ish files\n    PlainTextDocumentReaderAndWriter<CoreLabel> readerAndWriter = new PlainTextDocumentReaderAndWriter<CoreLabel>();\n    ObjectBank<List<CoreLabel>> ob = new ObjectBank<List<CoreLabel>>(new ReaderIteratorFactory(reader), readerAndWriter);\n    PrintWriter pw = new PrintWriter(writer);\n    for (List<CoreLabel> sentence : ob) {\n      List<CoreLabel> s = Generics.newArrayList();\n      numWords += s.size();\n      List<TaggedWord> taggedSentence = tagSentence(s, false);\n      Iterator<CoreLabel> origIter = sentence.iterator();\n      for (TaggedWord tw : taggedSentence) {\n        CoreLabel cl = origIter.next();\n        cl.set(CoreAnnotations.AnswerAnnotation.class, tw.tag());\n      }\n      readerAndWriter.printAnswers(sentence, pw, outputStyle, true);\n      ++numSentences;\n    }\n\n    if (outputStyle == OutputStyle.XML ||\n        outputStyle == OutputStyle.INLINE_XML) {\n      writer.write(\"<\/pos>\\n\");\n    }\n\n    writer.flush();\n    long millis = t.stop();\n    printErrWordsPerSec(millis, numWords);\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"@Override\n    public String apply(String o) {\n      StringWriter taggedResults = new StringWriter();\n\n      List<List<HasWord>> sentences;\n      if (tokenize) {\n        sentences = tokenizeText(new StringReader(o), tokenizerFactory);\n      } else {\n        sentences = new ArrayList<List<HasWord>>();\n        sentences.add(Sentence.toWordList(o.split(\"\\\\s+\")));\n      }\n\n      // TODO: there is another almost identical block of code elsewhere.  Refactor\n      if (config.getNThreads() != 1) {\n        MulticoreWrapper<List<? extends HasWord>, List<? extends HasWord>> wrapper = new MulticoreWrapper<List<? extends HasWord>, List<? extends HasWord>>(config.getNThreads(), new SentenceTaggingProcessor(tagger, outputLemmas));\n        for (List<? extends HasWord> sentence : sentences) {\n          wrapper.put(sentence);\n          while (wrapper.peek()) {\n            List<? extends HasWord> taggedSentence = wrapper.poll();\n            tagger.outputTaggedSentence(taggedSentence, outputLemmas, outputStyle, outputVerbosity, sentNum++, \" \", taggedResults);\n          }\n        }\n        wrapper.join();\n        while (wrapper.peek()) {\n          List<? extends HasWord> taggedSentence = wrapper.poll();\n          tagger.outputTaggedSentence(taggedSentence, outputLemmas, outputStyle, outputVerbosity, sentNum++, \" \", taggedResults);\n        }\n      } else {\n        for (List<? extends HasWord> sent : sentences) {\n          Morphology morpha = (outputLemmas) ? new Morphology() : null;\n          sent = tagger.tagCoreLabelsOrHasWords(sent, morpha, outputLemmas);\n          tagger.outputTaggedSentence(sent, outputLemmas, outputStyle, outputVerbosity, sentNum++, \" \", taggedResults);\n        }\n      }\n      return taggedResults.toString();\n    }","id":70769,"modified_method":"@Override\n    public String apply(String o) {\n      StringWriter taggedResults = new StringWriter();\n\n      List<List<HasWord>> sentences;\n      if (tokenize) {\n        sentences = tokenizeText(new StringReader(o), tokenizerFactory);\n      } else {\n        sentences = Generics.newArrayList();\n        sentences.add(Sentence.toWordList(o.split(\"\\\\s+\")));\n      }\n\n      // TODO: there is another almost identical block of code elsewhere.  Refactor\n      if (config.getNThreads() != 1) {\n        MulticoreWrapper<List<? extends HasWord>, List<? extends HasWord>> wrapper = new MulticoreWrapper<List<? extends HasWord>, List<? extends HasWord>>(config.getNThreads(), new SentenceTaggingProcessor(tagger, outputLemmas));\n        for (List<? extends HasWord> sentence : sentences) {\n          wrapper.put(sentence);\n          while (wrapper.peek()) {\n            List<? extends HasWord> taggedSentence = wrapper.poll();\n            tagger.outputTaggedSentence(taggedSentence, outputLemmas, outputStyle, outputVerbosity, sentNum++, \" \", taggedResults);\n          }\n        }\n        wrapper.join();\n        while (wrapper.peek()) {\n          List<? extends HasWord> taggedSentence = wrapper.poll();\n          tagger.outputTaggedSentence(taggedSentence, outputLemmas, outputStyle, outputVerbosity, sentNum++, \" \", taggedResults);\n        }\n      } else {\n        for (List<? extends HasWord> sent : sentences) {\n          Morphology morpha = (outputLemmas) ? new Morphology() : null;\n          sent = tagger.tagCoreLabelsOrHasWords(sent, morpha, outputLemmas);\n          tagger.outputTaggedSentence(sent, outputLemmas, outputStyle, outputVerbosity, sentNum++, \" \", taggedResults);\n        }\n      }\n      return taggedResults.toString();\n    }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Returns a new Sentence that is a copy of the given sentence with all the\n   * words tagged with their part-of-speech. Convenience method when you only\n   * want to tag a single List instead of a Document of sentences.\n   * @param sentence sentence to tag\n   * @return tagged sentence\n   */\n  public ArrayList<TaggedWord> tagSentence(List<? extends HasWord> sentence) {\n    TestSentence testSentence = new TestSentence(this);\n    return testSentence.tagSentence(sentence, false);\n  }","id":70770,"modified_method":"/**\n   * Returns a new Sentence that is a copy of the given sentence with all the\n   * words tagged with their part-of-speech. Convenience method when you only\n   * want to tag a single List instead of a Document of sentences.\n   * @param sentence sentence to tag\n   * @return tagged sentence\n   */\n  public List<TaggedWord> tagSentence(List<? extends HasWord> sentence) {\n    TestSentence testSentence = new TestSentence(this);\n    return testSentence.tagSentence(sentence, false);\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/** This reads the complete tagger from a single model file, and inits\n   *  the tagger using a combination of the properties passed in and\n   *  parameters from the file.\n   *  <p>\n   *  <i>Note for the future: This assumes that the TaggerConfig in the file\n   *  has already been read and used.  It might be better to refactor\n   *  things so that is all done inside this method, but for the moment\n   *  it seemed better to leave working code alone [cdm 2008].<\/i>\n   *\n   *  @param config The tagger config\n   *  @param rf DataInputStream to read from.  It's the caller's job to open and close this stream.\n   *  @param printLoading Whether to print a message saying what model file is being loaded and how long it took when finished.\n   *  @throws RuntimeIOException if I/O errors or serialization errors\n   */\n  protected void readModelAndInit(Properties config, DataInputStream rf, boolean printLoading) {\n    try {\n      Timing t = new Timing();\n      if (printLoading) {\n        String source = null;\n        if (config != null) {\n          // TODO: \"model\"\n          source = config.getProperty(\"model\");\n        }\n        if (source == null) {\n          source = \"data stream\";\n        }\n        t.doing(\"Reading POS tagger model from \" + source);\n      }\n      TaggerConfig taggerConfig = TaggerConfig.readConfig(rf);\n      if (config != null) {\n        taggerConfig.setProperties(config);\n      }\n      // then init tagger\n      init(taggerConfig);\n\n      xSize = rf.readInt();\n      ySize = rf.readInt();\n      dict = new Dictionary();\n      dict.read(rf);\n\n      if (VERBOSE) {\n        System.err.println(\" dictionary read \");\n      }\n      tags.read(rf);\n      readExtractors(rf);\n      dict.setAmbClasses(ambClasses, veryCommonWordThresh, tags);\n\n      int[] numFA = new int[extractors.size() + extractorsRare.size()];\n      int sizeAssoc = rf.readInt();\n      fAssociations = new ArrayList<Map<String, int[]>>();\n      for (int i = 0; i < extractors.size() + extractorsRare.size(); ++i) {\n        fAssociations.add(Generics.<String, int[]>newHashMap());\n      }\n      if (VERBOSE) System.err.printf(\"Reading %d feature keys...%n\",sizeAssoc);\n      PrintFile pfVP = null;\n      if (VERBOSE) {\n        pfVP = new PrintFile(\"pairs.txt\");\n      }\n      for (int i = 0; i < sizeAssoc; i++) {\n        int numF = rf.readInt();\n        FeatureKey fK = new FeatureKey();\n        fK.read(rf);\n        numFA[fK.num]++;\n\n        // TODO: rewrite the writing / reading code to store\n        // fAssociations in a cleaner manner?  Only do this when\n        // rebuilding all the tagger models anyway.  When we do that, we\n        // can get rid of FeatureKey\n        Map<String, int[]> fValueAssociations = fAssociations.get(fK.num);\n        int[] fTagAssociations = fValueAssociations.get(fK.val);\n        if (fTagAssociations == null) {\n          fTagAssociations = new int[ySize];\n          for (int j = 0; j < ySize; ++j) {\n            fTagAssociations[j] = -1;\n          }\n          fValueAssociations.put(fK.val, fTagAssociations);\n        }\n        fTagAssociations[tags.getIndex(fK.tag)] = numF;\n      }\n      if (VERBOSE) {\n        IOUtils.closeIgnoringExceptions(pfVP);\n      }\n      if (VERBOSE) {\n        for (int k = 0; k < numFA.length; k++) {\n          System.err.println(\" Number of features of kind \" + k + ' ' + numFA[k]);\n        }\n      }\n      prob = new LambdaSolveTagger(rf);\n      if (VERBOSE) {\n        System.err.println(\" prob read \");\n      }\n      if (printLoading) t.done();\n    } catch (IOException e) {\n      throw new RuntimeIOException(\"Unrecoverable error while loading a tagger model\", e);\n    } catch (ClassNotFoundException e) {\n      throw new RuntimeIOException(\"Unrecoverable error while loading a tagger model\", e);\n    }\n  }","id":70771,"modified_method":"/** This reads the complete tagger from a single model file, and inits\n   *  the tagger using a combination of the properties passed in and\n   *  parameters from the file.\n   *  <p>\n   *  <i>Note for the future: This assumes that the TaggerConfig in the file\n   *  has already been read and used.  It might be better to refactor\n   *  things so that is all done inside this method, but for the moment\n   *  it seemed better to leave working code alone [cdm 2008].<\/i>\n   *\n   *  @param config The tagger config\n   *  @param rf DataInputStream to read from.  It's the caller's job to open and close this stream.\n   *  @param printLoading Whether to print a message saying what model file is being loaded and how long it took when finished.\n   *  @throws RuntimeIOException if I/O errors or serialization errors\n   */\n  protected void readModelAndInit(Properties config, DataInputStream rf, boolean printLoading) {\n    try {\n      Timing t = new Timing();\n      if (printLoading) {\n        String source = null;\n        if (config != null) {\n          // TODO: \"model\"\n          source = config.getProperty(\"model\");\n        }\n        if (source == null) {\n          source = \"data stream\";\n        }\n        t.doing(\"Reading POS tagger model from \" + source);\n      }\n      TaggerConfig taggerConfig = TaggerConfig.readConfig(rf);\n      if (config != null) {\n        taggerConfig.setProperties(config);\n      }\n      // then init tagger\n      init(taggerConfig);\n\n      xSize = rf.readInt();\n      ySize = rf.readInt();\n      dict = new Dictionary();\n      dict.read(rf);\n\n      if (VERBOSE) {\n        System.err.println(\" dictionary read \");\n      }\n      tags.read(rf);\n      readExtractors(rf);\n      dict.setAmbClasses(ambClasses, veryCommonWordThresh, tags);\n\n      int[] numFA = new int[extractors.size() + extractorsRare.size()];\n      int sizeAssoc = rf.readInt();\n      fAssociations = Generics.newArrayList();\n      for (int i = 0; i < extractors.size() + extractorsRare.size(); ++i) {\n        fAssociations.add(Generics.<String, int[]>newHashMap());\n      }\n      if (VERBOSE) System.err.printf(\"Reading %d feature keys...%n\",sizeAssoc);\n      PrintFile pfVP = null;\n      if (VERBOSE) {\n        pfVP = new PrintFile(\"pairs.txt\");\n      }\n      for (int i = 0; i < sizeAssoc; i++) {\n        int numF = rf.readInt();\n        FeatureKey fK = new FeatureKey();\n        fK.read(rf);\n        numFA[fK.num]++;\n\n        // TODO: rewrite the writing / reading code to store\n        // fAssociations in a cleaner manner?  Only do this when\n        // rebuilding all the tagger models anyway.  When we do that, we\n        // can get rid of FeatureKey\n        Map<String, int[]> fValueAssociations = fAssociations.get(fK.num);\n        int[] fTagAssociations = fValueAssociations.get(fK.val);\n        if (fTagAssociations == null) {\n          fTagAssociations = new int[ySize];\n          for (int j = 0; j < ySize; ++j) {\n            fTagAssociations[j] = -1;\n          }\n          fValueAssociations.put(fK.val, fTagAssociations);\n        }\n        fTagAssociations[tags.getIndex(fK.tag)] = numF;\n      }\n      if (VERBOSE) {\n        IOUtils.closeIgnoringExceptions(pfVP);\n      }\n      if (VERBOSE) {\n        for (int k = 0; k < numFA.length; k++) {\n          System.err.println(\" Number of features of kind \" + k + ' ' + numFA[k]);\n        }\n      }\n      prob = new LambdaSolveTagger(rf);\n      if (VERBOSE) {\n        System.err.println(\" prob read \");\n      }\n      if (printLoading) t.done();\n    } catch (IOException e) {\n      throw new RuntimeIOException(\"Unrecoverable error while loading a tagger model\", e);\n    } catch (ClassNotFoundException e) {\n      throw new RuntimeIOException(\"Unrecoverable error while loading a tagger model\", e);\n    }\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Casts a list of HasWords, which we secretly know to be\n   * CoreLabels, to a list of CoreLabels.  Barfs if you didn't\n   * actually give it CoreLabels.\n   */\n  private static List<CoreLabel> castCoreLabels(List<? extends HasWord> sent) {\n    List<CoreLabel> coreLabels = new ArrayList<CoreLabel>();\n    for (HasWord word : sent) {\n      if (!(word instanceof CoreLabel)) {\n        throw new ClassCastException(\"Expected CoreLabels\");\n      }\n      coreLabels.add((CoreLabel) word);\n    }\n    return coreLabels;\n  }","id":70772,"modified_method":"/**\n   * Casts a list of HasWords, which we secretly know to be\n   * CoreLabels, to a list of CoreLabels.  Barfs if you didn't\n   * actually give it CoreLabels.\n   */\n  private static List<CoreLabel> castCoreLabels(List<? extends HasWord> sent) {\n    List<CoreLabel> coreLabels = Generics.newArrayList();\n    for (HasWord word : sent) {\n      if (!(word instanceof CoreLabel)) {\n        throw new ClassCastException(\"Expected CoreLabels\");\n      }\n      coreLabels.add((CoreLabel) word);\n    }\n    return coreLabels;\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Expects a sentence and returns a tagged sentence.  The input Sentence items\n   *\n   *\n   * @param in This needs to be a Sentence\n   * @return A Sentence of TaggedWord\n   */\n  public ArrayList<TaggedWord> apply(List<? extends HasWord> in) {\n    TestSentence testSentence = new TestSentence(this);\n    return testSentence.tagSentence(in, false);\n  }","id":70773,"modified_method":"/**\n   * Expects a sentence and returns a tagged sentence.  The input Sentence items\n   *\n   *\n   * @param in This needs to be a Sentence\n   * @return A Sentence of TaggedWord\n   */\n  public List<TaggedWord> apply(List<? extends HasWord> in) {\n    TestSentence testSentence = new TestSentence(this);\n    return testSentence.tagSentence(in, false);\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/** Removes features that never have a non-zero weight for any tag from\n   *  the fAssociations' appropriate Map.\n   */\n  private void removeDeadRules() {\n    for (Map<String, int[]> fAssociation : fAssociations) {\n      List<String> deadRules = new ArrayList<String>();\n      for (Map.Entry<String, int[]> entry : fAssociation.entrySet()) {\n        String value = entry.getKey();\n        int[] fAssociations = entry.getValue();\n\n        boolean found = false;\n        for (int index = 0; index < ySize; ++index) {\n          int fNum = fAssociations[index];\n          if (fNum > -1) {\n            if (getLambdaSolve().lambda[fNum] != 0.0) {\n              found = true;\n              break;\n            }\n          }\n        }\n        if (!found) {\n          deadRules.add(value);\n        }\n      }\n\n      for (String rule : deadRules) {\n        fAssociation.remove(rule);\n      }\n    }\n  }","id":70774,"modified_method":"/** Removes features that never have a non-zero weight for any tag from\n   *  the fAssociations' appropriate Map.\n   */\n  private void removeDeadRules() {\n    for (Map<String, int[]> fAssociation : fAssociations) {\n      List<String> deadRules = Generics.newArrayList();\n      for (Map.Entry<String, int[]> entry : fAssociation.entrySet()) {\n        String value = entry.getKey();\n        int[] fAssociations = entry.getValue();\n\n        boolean found = false;\n        for (int index = 0; index < ySize; ++index) {\n          int fNum = fAssociations[index];\n          if (fNum > -1) {\n            if (getLambdaSolve().lambda[fNum] != 0.0) {\n              found = true;\n              break;\n            }\n          }\n        }\n        if (!found) {\n          deadRules.add(value);\n        }\n      }\n\n      for (String rule : deadRules) {\n        fAssociation.remove(rule);\n      }\n    }\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"protected void dumpModel(PrintStream out) {\n    out.println(\"Features: template featureValue tag: lambda\");\n    NumberFormat nf = new DecimalFormat(\" 0.000000;-0.000000\");\n    for (int i = 0; i < fAssociations.size(); ++i) {\n      Map<String, int[]> fValueAssociations = fAssociations.get(i);\n      List<String> features = new ArrayList<String>(fValueAssociations.keySet());\n      Collections.sort(features);\n      for (String featureValue : features) {\n        int[] fTagAssociations = fValueAssociations.get(featureValue);\n        for (int j = 0; j < fTagAssociations.length; ++j) {\n          int association = fTagAssociations[j];\n          if (association >= 0) {\n            FeatureKey fk = new FeatureKey(i, featureValue, tags.getTag(j));\n            out.println((fk.num < extractors.size() ? extractors.get(fk.num) : extractorsRare.get(fk.num - extractors.size()))\n                    + \" \" + fk.val + \" \" + fk.tag + \": \" + nf.format(getLambdaSolve().lambda[association]));\n          }\n        }\n      }\n    }\n  }","id":70775,"modified_method":"protected void dumpModel(PrintStream out) {\n    out.println(\"Features: template featureValue tag: lambda\");\n    NumberFormat nf = new DecimalFormat(\" 0.000000;-0.000000\");\n    for (int i = 0; i < fAssociations.size(); ++i) {\n      Map<String, int[]> fValueAssociations = fAssociations.get(i);\n      List<String> features = Generics.newArrayList();\n      Collections.sort(features);\n      for (String featureValue : features) {\n        int[] fTagAssociations = fValueAssociations.get(featureValue);\n        for (int j = 0; j < fTagAssociations.length; ++j) {\n          int association = fTagAssociations[j];\n          if (association >= 0) {\n            FeatureKey fk = new FeatureKey(i, featureValue, tags.getTag(j));\n            out.println((fk.num < extractors.size() ? extractors.get(fk.num) : extractorsRare.get(fk.num - extractors.size()))\n                    + \" \" + fk.val + \" \" + fk.tag + \": \" + nf.format(getLambdaSolve().lambda[association]));\n          }\n        }\n      }\n    }\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Tags the tokenized input string and returns the tagged version.\n   * This method requires the input to already be tokenized.\n   * The tagger wants input that is whitespace separated tokens, tokenized\n   * according to the conventions of the training data. (For instance,\n   * for the Penn Treebank, punctuation marks and possessive \"'s\" should\n   * be separated from words.)\n   *\n   * @param toTag The untagged input String\n   * @return The same string with tags inserted in the form word/tag\n   */\n  public String tagTokenizedString(String toTag) {\n    ArrayList<Word> sent = Sentence.toUntaggedList(Arrays.asList(toTag.split(\"\\\\s+\")));\n    TestSentence testSentence = new TestSentence(this);\n    testSentence.tagSentence(sent, false);\n    return testSentence.getTaggedNice();\n  }","id":70776,"modified_method":"/**\n   * Tags the tokenized input string and returns the tagged version.\n   * This method requires the input to already be tokenized.\n   * The tagger wants input that is whitespace separated tokens, tokenized\n   * according to the conventions of the training data. (For instance,\n   * for the Penn Treebank, punctuation marks and possessive \"'s\" should\n   * be separated from words.)\n   *\n   * @param toTag The untagged input String\n   * @return The same string with tags inserted in the form word/tag\n   */\n  public String tagTokenizedString(String toTag) {\n    List<Word> sent = Sentence.toUntaggedList(Arrays.asList(toTag.split(\"\\\\s+\")));\n    TestSentence testSentence = new TestSentence(this);\n    testSentence.tagSentence(sent, false);\n    return testSentence.getTaggedNice();\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public static void main(String[] args) throws IOException {\n\n      String serializedClassifier = \"classifiers/english.all.3class.distsim.crf.ser.gz\";\n\n      if (args.length > 0) {\n        serializedClassifier = args[0];\n      }\n\n      AbstractSequenceClassifier<CoreLabel> classifier = CRFClassifier.getClassifierNoExceptions(serializedClassifier);\n\n      /* For either a file to annotate or for the hardcoded text example,\n         this demo file shows two ways to process the output, for teaching\n         purposes.  For the file, it shows both how to run NER on a String\n         and how to run it on a whole file.  For the hard-coded String,\n         it shows how to run it on a single sentence, and how to do this\n         and produce an inline XML output format.\n      */\n      if (args.length > 1) {\n        String fileContents = IOUtils.slurpFile(args[1]);\n        List<List<CoreLabel>> out = classifier.classify(fileContents);\n        for (List<CoreLabel> sentence : out) {\n          for (CoreLabel word : sentence) {\n            System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n          }\n          System.out.println();\n        }\n        out = classifier.classifyFile(args[1]);\n        for (List<CoreLabel> sentence : out) {\n          for (CoreLabel word : sentence) {\n            System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n          }\n          System.out.println();\n        }\n\n      } else {\n        String s1 = \"Good afternoon Rajat Raina, how are you today?\";\n        String s2 = \"I go to school at Stanford University, which is located in California.\";\n        System.out.println(classifier.classifyToString(s1));\n        System.out.println(classifier.classifyWithInlineXML(s2));\n        System.out.println(classifier.classifyToString(s2, \"xml\", true));\n        int i=0;\n        for (List<CoreLabel> lcl : classifier.classify(s2)) {\n          for (CoreLabel cl : lcl) {\n            System.out.println(i++ + \":\");\n            System.out.println(cl);\n          }\n        }\n      }\n    }","id":70777,"modified_method":"public static void main(String[] args) throws Exception {\n\n    String serializedClassifier = \"classifiers/english.all.3class.distsim.crf.ser.gz\";\n\n    if (args.length > 0) {\n      serializedClassifier = args[0];\n    }\n\n    AbstractSequenceClassifier<CoreLabel> classifier = CRFClassifier.getClassifier(serializedClassifier);\n\n    /* For either a file to annotate or for the hardcoded text example,\n       this demo file shows two ways to process the output, for teaching\n       purposes.  For the file, it shows both how to run NER on a String\n       and how to run it on a whole file.  For the hard-coded String,\n       it shows how to run it on a single sentence, and how to do this\n       and produce an inline XML output format.\n    */\n    if (args.length > 1) {\n      String fileContents = IOUtils.slurpFile(args[1]);\n      List<List<CoreLabel>> out = classifier.classify(fileContents);\n      for (List<CoreLabel> sentence : out) {\n        for (CoreLabel word : sentence) {\n          System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n        }\n        System.out.println();\n      }\n      System.out.println(\"---\");\n      out = classifier.classifyFile(args[1]);\n      for (List<CoreLabel> sentence : out) {\n        for (CoreLabel word : sentence) {\n          System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');\n        }\n        System.out.println();\n      }\n\n    } else {\n      String[] example = {\"Good afternoon Rajat Raina, how are you today?\",\n                          \"I go to school at Stanford University, which is located in California.\" };\n      for (String str : example) {\n        System.out.println(classifier.classifyToString(str));\n      }\n      System.out.println(\"---\");\n\n      for (String str : example) {\n        // This one puts in spaces and newlines between tokens, so just print not println.\n        System.out.print(classifier.classifyToString(str, \"slashTags\", false));\n      }\n      System.out.println(\"---\");\n\n      for (String str : example) {\n        System.out.println(classifier.classifyWithInlineXML(str));\n      }\n      System.out.println(\"---\");\n\n      for (String str : example) {\n        System.out.println(classifier.classifyToString(str, \"xml\", true));\n      }\n      System.out.println(\"---\");\n\n      int i=0;\n      for (String str : example) {\n        for (List<CoreLabel> lcl : classifier.classify(str)) {\n          for (CoreLabel cl : lcl) {\n            System.out.print(i++ + \": \");\n            System.out.println(cl.toShorterString());\n          }\n        }\n      }\n    }\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public static void main(String[] args) throws Exception {\n    if (args.length != 2) {\n      System.err.println(\"usage: java TaggerDemo modelFile fileToTag\");\n      return;\n    }\n    MaxentTagger tagger = new MaxentTagger(args[0]);\n    List<List<HasWord>> sentences = MaxentTagger.tokenizeText(new BufferedReader(new FileReader(args[1])));\n    for (List<HasWord> sentence : sentences) {\n      ArrayList<TaggedWord> tSentence = tagger.tagSentence(sentence);\n      System.out.println(Sentence.listToString(tSentence, false));\n    }\n  }","id":70778,"modified_method":"public static void main(String[] args) throws Exception {\n    if (args.length != 2) {\n      System.err.println(\"usage: java TaggerDemo modelFile fileToTag\");\n      return;\n    }\n    MaxentTagger tagger = new MaxentTagger(args[0]);\n    List<List<HasWord>> sentences = MaxentTagger.tokenizeText(new BufferedReader(new FileReader(args[1])));\n    for (List<HasWord> sentence : sentences) {\n      List<TaggedWord> tSentence = tagger.tagSentence(sentence);\n      System.out.println(Sentence.listToString(tSentence, false));\n    }\n  }","commit_id":"8828c9b14bc568184b421750010e5b1373bc3c48","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void confirm(Tuples._2<Language, SConcept> initialState, Tuples._2<Language, SConcept> finalState, LanguageStructureMigrationParticipant.MigrationBuilder migrationBuilder) {\n    migrationBuilder.addPart(initialState._1().getDeclarationNode(), finalState._1().getDeclarationNode(), createMoveConcept_kdm6vl_c0a0a1());\n  }","id":70779,"modified_method":"public void confirm(Tuples._2<Language, SConcept> initialState, Tuples._2<Language, SConcept> finalState, LanguageStructureMigrationParticipant.MigrationBuilder migrationBuilder) {\n    SNode from = SNodeOperations.cast(initialState._1().getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, \"jetbrains.mps.lang.structure.structure.ConceptDeclaration\"));\n    SNode to = SNodeOperations.cast(finalState._1().getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, \"jetbrains.mps.lang.structure.structure.ConceptDeclaration\"));\n    SPropertyOperations.set(from, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, \"name\"), SPropertyOperations.getString_def(from, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, \"name\"), \"\") + \"_old\");\n    AttributeOperations.setAttribute(from, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x11d0a70ae54L, \"jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation\")), createDeprecatedNodeAnnotation_kdm6vl_a0d0b(\"The concept was moved to language \\\"\" + SNodeOperations.getModel(to).getModule().getModuleName() + \"\\\"\"));\n    migrationBuilder.addPart(initialState._1().getDeclarationNode(), finalState._1().getDeclarationNode(), createMoveConcept_kdm6vl_c0a4a1());\n  }","commit_id":"170f202e030dc80059c324e2019ce48ef3fca8ef","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode createMoveConcept_kdm6vl_c0a0a1() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1741b6L, \"jetbrains.mps.lang.migration.util.structure.MoveConcept\"), null, null, false);\n    return n1;\n  }","id":70780,"modified_method":"private static SNode createMoveConcept_kdm6vl_c0a4a1() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1741b6L, \"jetbrains.mps.lang.migration.util.structure.MoveConcept\"), null, null, false);\n    return n1;\n  }","commit_id":"170f202e030dc80059c324e2019ce48ef3fca8ef","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void confirm(Tuples._2<Language, SContainmentLink> initialState, Tuples._2<Language, SContainmentLink> finalState, LanguageStructureMigrationParticipant.MigrationBuilder migrationBuilder) {\n    migrationBuilder.addPart(initialState._1().getDeclarationNode(), finalState._1().getDeclarationNode(), createMoveContainmentLink_mzlq6b_c0a0a1());\n  }","id":70781,"modified_method":"public void confirm(Tuples._2<Language, SContainmentLink> initialState, Tuples._2<Language, SContainmentLink> finalState, LanguageStructureMigrationParticipant.MigrationBuilder migrationBuilder) {\n    SNode from = SNodeOperations.cast(initialState._1().getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, \"jetbrains.mps.lang.structure.structure.LinkDeclaration\"));\n    SNode to = SNodeOperations.cast(finalState._1().getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, \"jetbrains.mps.lang.structure.structure.LinkDeclaration\"));\n    SPropertyOperations.set(from, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98052f333L, \"role\"), SPropertyOperations.getString_def(from, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98052f333L, \"role\"), \"\") + \"_old\");\n    AttributeOperations.setAttribute(from, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x11d0a70ae54L, \"jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation\")), createDeprecatedNodeAnnotation_mzlq6b_a0d0b(\"The link was moved to concept \\\"\" + INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SNodeOperations.cast(SNodeOperations.getParent(to), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\"))) + \"\\\"\"));\n    migrationBuilder.addPart(initialState._1().getDeclarationNode(), finalState._1().getDeclarationNode(), createMoveContainmentLink_mzlq6b_c0a4a1());\n  }","commit_id":"170f202e030dc80059c324e2019ce48ef3fca8ef","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode createMoveContainmentLink_mzlq6b_c0a0a1() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1741baL, \"jetbrains.mps.lang.migration.util.structure.MoveContainmentLink\"), null, null, false);\n    return n1;\n  }","id":70782,"modified_method":"private static SNode createMoveContainmentLink_mzlq6b_c0a4a1() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1741baL, \"jetbrains.mps.lang.migration.util.structure.MoveContainmentLink\"), null, null, false);\n    return n1;\n  }","commit_id":"170f202e030dc80059c324e2019ce48ef3fca8ef","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode createMoveProperty_fubpxk_c0a0a1() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1741b9L, \"jetbrains.mps.lang.migration.util.structure.MoveProperty\"), null, null, false);\n    return n1;\n  }","id":70783,"modified_method":"private static SNode createMoveProperty_fubpxk_c0a4a1() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1741b9L, \"jetbrains.mps.lang.migration.util.structure.MoveProperty\"), null, null, false);\n    return n1;\n  }","commit_id":"170f202e030dc80059c324e2019ce48ef3fca8ef","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void confirm(Tuples._2<Language, SProperty> initialState, Tuples._2<Language, SProperty> finalState, LanguageStructureMigrationParticipant.MigrationBuilder migrationBuilder) {\n    migrationBuilder.addPart(initialState._1().getDeclarationNode(), finalState._1().getDeclarationNode(), createMoveProperty_fubpxk_c0a0a1());\n  }","id":70784,"modified_method":"public void confirm(Tuples._2<Language, SProperty> initialState, Tuples._2<Language, SProperty> finalState, LanguageStructureMigrationParticipant.MigrationBuilder migrationBuilder) {\n    SNode from = SNodeOperations.cast(initialState._1().getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, \"jetbrains.mps.lang.structure.structure.PropertyDeclaration\"));\n    SNode to = SNodeOperations.cast(finalState._1().getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, \"jetbrains.mps.lang.structure.structure.PropertyDeclaration\"));\n    SPropertyOperations.set(from, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, \"name\"), SPropertyOperations.getString_def(from, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, \"name\"), \"\") + \"_old\");\n    AttributeOperations.setAttribute(from, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x11d0a70ae54L, \"jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation\")), createDeprecatedNodeAnnotation_fubpxk_a0d0b(\"The property was moved to concept \\\"\" + INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SNodeOperations.cast(SNodeOperations.getParent(to), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\"))) + \"\\\"\"));\n    migrationBuilder.addPart(initialState._1().getDeclarationNode(), finalState._1().getDeclarationNode(), createMoveProperty_fubpxk_c0a4a1());\n  }","commit_id":"170f202e030dc80059c324e2019ce48ef3fca8ef","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode createMoveReferenceLink_w90w7j_c0a0a1() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1741b7L, \"jetbrains.mps.lang.migration.util.structure.MoveReferenceLink\"), null, null, false);\n    return n1;\n  }","id":70785,"modified_method":"private static SNode createMoveReferenceLink_w90w7j_c0a4a1() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9882f4ad195546feL, 0x826994189e5dbbf2L, 0x2b3f57492c1741b7L, \"jetbrains.mps.lang.migration.util.structure.MoveReferenceLink\"), null, null, false);\n    return n1;\n  }","commit_id":"170f202e030dc80059c324e2019ce48ef3fca8ef","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void confirm(Tuples._2<Language, SReferenceLink> initialState, Tuples._2<Language, SReferenceLink> finalState, LanguageStructureMigrationParticipant.MigrationBuilder migrationBuilder) {\n    migrationBuilder.addPart(initialState._1().getDeclarationNode(), finalState._1().getDeclarationNode(), createMoveReferenceLink_w90w7j_c0a0a1());\n  }","id":70786,"modified_method":"public void confirm(Tuples._2<Language, SReferenceLink> initialState, Tuples._2<Language, SReferenceLink> finalState, LanguageStructureMigrationParticipant.MigrationBuilder migrationBuilder) {\n    SNode from = SNodeOperations.cast(initialState._1().getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, \"jetbrains.mps.lang.structure.structure.LinkDeclaration\"));\n    SNode to = SNodeOperations.cast(finalState._1().getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, \"jetbrains.mps.lang.structure.structure.LinkDeclaration\"));\n    SPropertyOperations.set(from, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98052f333L, \"role\"), SPropertyOperations.getString_def(from, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98052f333L, \"role\"), \"\") + \"_old\");\n    AttributeOperations.setAttribute(from, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x11d0a70ae54L, \"jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation\")), createDeprecatedNodeAnnotation_w90w7j_a0d0b(\"The link was moved to concept \\\"\" + INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SNodeOperations.cast(SNodeOperations.getParent(to), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, \"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration\"))) + \"\\\"\"));\n    migrationBuilder.addPart(initialState._1().getDeclarationNode(), finalState._1().getDeclarationNode(), createMoveReferenceLink_w90w7j_c0a4a1());\n  }","commit_id":"170f202e030dc80059c324e2019ce48ef3fca8ef","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference>> getChanges(final NamedNodeReference initialState, SRepository repository, Map<String, Boolean> options, SearchScope searchScope) {\n    if (!(MapSequence.fromMap(options).get(getDescription()))) {\n      return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference>>());\n    }\n    {\n      final SearchScope scope = CommandUtil.createScope(searchScope);\n      QueryExecutionContext context = new QueryExecutionContext() {\n        public SearchScope getDefaultSearchScope() {\n          return scope;\n        }\n      };\n      final SNode movedNode = initialState.reference().resolve(repository);\n      Collection<SReference> usages;\n      if (movedNode != null) {\n        usages = CommandUtil.usages(CommandUtil.createConsoleScope(null, false, context), movedNode);\n      } else {\n        usages = Sequence.fromIterable(CommandUtil.references(CommandUtil.createConsoleScope(null, false, context))).where(new IWhereFilter<SReference>() {\n          public boolean accept(SReference it) {\n            return eq_k8iioh_a0a0a0a0a0a0a0a4a1a21(it.getTargetNodeReference(), initialState.reference());\n          }\n        }).toListSequence();\n      }\n      return CollectionSequence.fromCollection(usages).select(new ISelector<SReference, RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference>>() {\n        public RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference> select(SReference ref) {\n          final SNodeReference containingNode = ref.getSourceNode().getReference();\n          final SReferenceLink role = ref.getLink();\n          final String resolveInfo = SLinkOperations.getResolveInfo(ref);\n          final SearchResults searchResults = new SearchResults(SetSequence.fromSetAndArray(new HashSet<SNode>(), movedNode), ListSequence.fromListAndArray(new ArrayList<SearchResult<SNode>>(), new SearchResult<SNode>(ref.getSourceNode(), \"reference\")));\n          RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference> change = new RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference>() {\n            public MoveNodeRefactoringParticipant<NamedNodeReference, NamedNodeReference> getParticipant() {\n              return UpdateReferencesParticipant.this;\n            }\n            public SearchResults getSearchResults() {\n              return searchResults;\n            }\n            public boolean needsToPreserveOldNode() {\n              return false;\n            }\n            public void confirm(final NamedNodeReference finalState, final SRepository repository, final RefactoringSession refactoringSession) {\n              refactoringSession.registerChange(new Runnable() {\n                public void run() {\n                  SNode node = containingNode.resolve(repository);\n                  MoveNodesDefault.CopyMapObject copyMap = MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession);\n                  if (node == null || MapSequence.fromMap(copyMap.getCopyMap()).containsKey(node)) {\n                    return;\n                  }\n                  node.setReference(role, jetbrains.mps.smodel.SReference.create(role, node, finalState.reference().getModelReference(), finalState.reference().getNodeId(), resolveInfo));\n                }\n              });\n            }\n          };\n          return change;\n        }\n      }).toListSequence();\n    }\n  }","id":70787,"modified_method":"public List<RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference>> getChanges(final NamedNodeReference initialState, SRepository repository, Map<String, Boolean> options, SearchScope searchScope) {\n    if (!(MapSequence.fromMap(options).get(getDescription()))) {\n      return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference>>());\n    }\n    {\n      final SearchScope scope = CommandUtil.createScope(searchScope);\n      QueryExecutionContext context = new QueryExecutionContext() {\n        public SearchScope getDefaultSearchScope() {\n          return scope;\n        }\n      };\n      final SNode movedNode = initialState.reference().resolve(repository);\n      Collection<SReference> usages;\n      if (movedNode != null) {\n        usages = CommandUtil.usages(CommandUtil.createConsoleScope(null, false, context), movedNode);\n      } else {\n        usages = Sequence.fromIterable(CommandUtil.references(CommandUtil.createConsoleScope(null, false, context))).where(new IWhereFilter<SReference>() {\n          public boolean accept(SReference it) {\n            return eq_k8iioh_a0a0a0a0a0a0a0a4a1a21(it.getTargetNodeReference(), initialState.reference());\n          }\n        }).toListSequence();\n      }\n      return CollectionSequence.fromCollection(usages).select(new ISelector<SReference, RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference>>() {\n        public RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference> select(SReference ref) {\n          final SNodeReference containingNode = ref.getSourceNode().getReference();\n          final SReferenceLink role = ref.getLink();\n          final String resolveInfo = SLinkOperations.getResolveInfo(ref);\n          final SearchResults searchResults = new SearchResults(SetSequence.fromSetAndArray(new HashSet<SNode>(), movedNode), ListSequence.fromListAndArray(new ArrayList<SearchResult<SNode>>(), new SearchResult<SNode>(ref.getSourceNode(), \"reference\")));\n          RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference> change = new RefactoringParticipant.Change<NamedNodeReference, NamedNodeReference>() {\n            public MoveNodeRefactoringParticipant<NamedNodeReference, NamedNodeReference> getParticipant() {\n              return UpdateReferencesParticipant.this;\n            }\n            public SearchResults getSearchResults() {\n              return searchResults;\n            }\n            public boolean needsToPreserveOldNode() {\n              return false;\n            }\n            public void confirm(final NamedNodeReference finalState, final SRepository repository, final RefactoringSession refactoringSession) {\n              refactoringSession.registerChange(new Runnable() {\n                public void run() {\n                  final SNode node = containingNode.resolve(repository);\n                  MoveNodesDefault.CopyMapObject copyMap = MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession);\n                  if (node == null || MapSequence.fromMap(copyMap.getCopyMap()).any(new IWhereFilter<IMapping<SNode, SNode>>() {\n                    public boolean accept(IMapping<SNode, SNode> it) {\n                      return eq_k8iioh_a0a0a0a0a0a0c0a0a0a0a0d0a0a4a0a0a0a0f0b0m(it.key(), node.getReference(role).getTargetNode()) && node.getReference(role).getTargetNode().getModel() != null;\n                    }\n                  })) {\n                    return;\n                  }\n                  node.setReference(role, jetbrains.mps.smodel.SReference.create(role, node, finalState.reference().getModelReference(), finalState.reference().getNodeId(), resolveInfo));\n                }\n              });\n            }\n          };\n          return change;\n        }\n      }).toListSequence();\n    }\n  }","commit_id":"170f202e030dc80059c324e2019ce48ef3fca8ef","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#init(com.xpn.xwiki.XWikiContext)\n     */\n    @Override\n    public void init(XWikiContext context)\n    {\n        super.init(context);\n        alwaysUsedExtensions = new HashMap<String, Set<String>>();\n        getExtensionClass(context);\n        context.getWiki().getNotificationManager().addGeneralRule(new DocChangeRule(this));\n        context.getWiki().getNotificationManager().addGeneralRule(new XWikiActionRule(this, true, true));\n    }","id":70788,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * Create/update the XClass corresponding to this kind of extension, and register the listeners that update the list\n     * of always used extensions.\n     * <\/p>\n     * \n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#init(com.xpn.xwiki.XWikiContext)\n     */\n    @Override\n    public void init(XWikiContext context)\n    {\n        super.init(context);\n        this.alwaysUsedExtensions = new HashMap<String, Set<String>>();\n        getExtensionClass(context);\n        context.getWiki().getNotificationManager().addGeneralRule(new DocChangeRule(this));\n        context.getWiki().getNotificationManager().addGeneralRule(new XWikiActionRule(this, true, true));\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70789,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected abstract String getExtensionName();","id":70790,"modified_method":"/**\n     * A user-friendly name for this type of resource, used in the auto-generated class document.\n     * \n     * @return The user-friendly name for this type of resource.\n     */\n    protected abstract String getExtensionName();","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Resets the list of \"Use always\" extensions every time a XAR is imported. This way, next time a page is rendered,\n     * such extensions will be retrieved from database, and if one has been imported during last import, it will be taken\n     * into consideration. (We have to this since the importer does not generate DocChanged notification).\n     * See http://jira.xwiki.org/jira/browse/XWIKI-2868\n     * \n     * @see XWikiActionNotificationInterface#notify(XWikiNotificationRule, XWikiDocument, String, XWikiContext)\n     */\n    public void notify(XWikiNotificationRule rule, XWikiDocument doc, String action, XWikiContext context)\n    {\n        // if the action is not import, this notification does not concern this method.\n        if (!action.equals(\"import\")) {\n            return;\n        }\n        // if the action is import, we check the request parameter to see if it is an actual XAR import.\n        // if it is the case, we flush the always used extensions cache for the context wiki.\n        if (context.getRequest().getParameter(\"action\") != null \n            && context.getRequest().getParameter(\"action\").equals(\"import\")) {\n            String currentWiki = !context.getDatabase().equals(\"\") ? context.getDatabase() : context.getMainXWiki();\n            this.alwaysUsedExtensions.remove(currentWiki);\n        }\n    }","id":70791,"modified_method":"/**\n     * Resets the list of \"Use always\" extensions every time a XAR is imported. This way, next time a page is rendered,\n     * such extensions will be retrieved from database, and if one has been imported during last import, it will be\n     * taken into consideration. (We have to this since the importer does not generate DocChanged notification). See\n     * http://jira.xwiki.org/jira/browse/XWIKI-2868\n     * \n     * @param rule The rule that triggered the notification, the one that was used when registering for notifications.\n     * @param doc The context document, the one affected by this action.\n     * @param action The requested action.\n     * @param context The current request context.\n     * @see XWikiActionNotificationInterface#notify(XWikiNotificationRule, XWikiDocument, String, XWikiContext)\n     */\n    public void notify(XWikiNotificationRule rule, XWikiDocument doc, String action, XWikiContext context)\n    {\n        // If the action is not \"import\", this notification does not concern this method.\n        if (!action.equals(\"import\")) {\n            return;\n        }\n        // If the action is \"import\", we check the request parameter to see if it is an actual XAR import.\n        if (StringUtils.equals(context.getRequest().getParameter(\"action\"), action)) {\n            // If this is the case, we flush the always used extensions cache for the context wiki. This is needed\n            // because the import action does not trigger document change notifications.\n            String currentWiki = StringUtils.defaultIfEmpty(context.getDatabase(), context.getMainXWiki());\n            this.alwaysUsedExtensions.remove(currentWiki);\n        }\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public BaseClass getExtensionClass(XWikiContext context)\n    {\n        try {\n            XWikiDocument doc = context.getWiki().getDocument(getExtensionClassName(), context);\n            boolean needsUpdate = false;\n\n            BaseClass bclass = doc.getxWikiClass();\n            if (context.get(\"initdone\") != null) {\n                return bclass;\n            }\n\n            bclass.setName(getExtensionClassName());\n\n            needsUpdate |= bclass.addTextField(\"name\", \"Name\", 30);\n            needsUpdate |= bclass.addTextAreaField(\"code\", \"Code\", 50, 20);\n            needsUpdate |= bclass.addStaticListField(\"use\", \"Use this extension\", \"onDemand=On demand|always=Always\");\n            needsUpdate |= bclass.addBooleanField(\"parse\", \"Parse content\", \"yesno\");\n            needsUpdate |= bclass.addStaticListField(\"cache\", \"Caching policy\", \"long|short|default|forbid\");\n\n            if (StringUtils.isBlank(doc.getAuthor())) {\n                needsUpdate = true;\n                doc.setAuthor(\"XWiki.Admin\");\n            }\n            if (StringUtils.isBlank(doc.getCreator())) {\n                needsUpdate = true;\n                doc.setCreator(\"XWiki.Admin\");\n            }\n            if (StringUtils.isBlank(doc.getParent())) {\n                needsUpdate = true;\n                doc.setParent(\"XWiki.XWikiClasses\");\n            }\n            if (StringUtils.isBlank(doc.getContent())) {\n                needsUpdate = true;\n                doc.setContent(\"1 XWiki \" + getExtensionName() + \" Extension Class\");\n            }\n\n            if (needsUpdate) {\n                context.getWiki().saveDocument(doc, context);\n            }\n            return bclass;\n        } catch (Exception ex) {\n            LOG.error(\"Cannot initialize skin extenstion class [\" + getExtensionClassName() + \"]\", ex);\n        }\n        return null;\n    }","id":70792,"modified_method":"/**\n     * Creates or updates the XClass used for this type of extension. Usually called on {@link #init(XWikiContext)} and\n     * {@link #virtualInit(XWikiContext)}.\n     * \n     * @param context The current request context, which gives access to the wiki.\n     * @return The XClass for this extension.\n     */\n    public BaseClass getExtensionClass(XWikiContext context)\n    {\n        try {\n            XWikiDocument doc = context.getWiki().getDocument(getExtensionClassName(), context);\n            boolean needsUpdate = false;\n\n            BaseClass bclass = doc.getxWikiClass();\n            if (context.get(\"initdone\") != null) {\n                return bclass;\n            }\n\n            bclass.setName(getExtensionClassName());\n\n            needsUpdate |= bclass.addTextField(\"name\", \"Name\", 30);\n            needsUpdate |= bclass.addTextAreaField(\"code\", \"Code\", 50, 20);\n            needsUpdate |=\n                bclass.addStaticListField(USE_FIELDNAME, \"Use this extension\", \"onDemand=On demand|always=Always\");\n            needsUpdate |= bclass.addBooleanField(\"parse\", \"Parse content\", \"yesno\");\n            needsUpdate |= bclass.addStaticListField(\"cache\", \"Caching policy\", \"long|short|default|forbid\");\n\n            if (StringUtils.isBlank(doc.getCreator())) {\n                needsUpdate = true;\n                doc.setCreator(\"XWiki.Admin\");\n            }\n            if (StringUtils.isBlank(doc.getAuthor())) {\n                needsUpdate = true;\n                doc.setAuthor(doc.getCreator());\n            }\n            if (StringUtils.isBlank(doc.getParent())) {\n                needsUpdate = true;\n                doc.setParent(\"XWiki.XWikiClasses\");\n            }\n            if (StringUtils.isBlank(doc.getContent())) {\n                needsUpdate = true;\n                doc.setContent(\"1 XWiki \" + getExtensionName() + \" Extension Class\");\n            }\n\n            if (needsUpdate) {\n                context.getWiki().saveDocument(doc, context);\n            }\n            return bclass;\n        } catch (Exception ex) {\n            LOG.error(\"Cannot initialize skin extenstion class [\" + getExtensionClassName() + \"]\", ex);\n        }\n        return null;\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param context the XWiki context\n     * @return a set of extensions that should always be used for the context wiki. The extensions are lazily in a cache\n     * for each wiki. If the extension set for the context wiki is null, then they will be looked up in the database and\n     * added to the cache if any.  \n     */\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // retrieve the current wiki name from the XWiki context\n        String currentWiki = !context.getDatabase().equals(\"\") ? context.getDatabase() : context.getMainXWiki();\n        // if we already have extensions defined for this wiki, we return them\n        if (this.alwaysUsedExtensions.get(currentWiki) != null) {\n            return this.alwaysUsedExtensions.get(currentWiki);\n        } else {\n            // otherwise, we look them up in the database.\n            Set<String> extensions = new HashSet<String>();\n            String query =\n                \", BaseObject as obj, StringProperty as use where obj.className='\" + getExtensionClassName() + \"'\"\n                    + \" and obj.name=doc.fullName and use.id.id=obj.id and use.id.name='use' and use.value='always'\";\n            try {\n                for (String extension : context.getWiki().getStore().searchDocumentsNames(query, context)) {\n                    try {\n                        XWikiDocument doc = context.getWiki().getDocument(extension, context);\n                        // only add the extension as being \"always used\" if the page holding it has been saved with programming rights.\n                        if (context.getWiki().getRightService().hasProgrammingRights(doc, context)) {\n                            extensions.add(extension);\n                        }\n                    } catch (XWikiException e1) {\n                        LOG.error(\"Error while adding JS extension [\" + extension\n                            + \"] as always used. It will be ignored\", e1);\n                    }\n                }\n                this.alwaysUsedExtensions.put(currentWiki, extensions);\n                return extensions;\n            } catch (XWikiException e) {\n                LOG.error(\"Error while retrieving always used JS extensions\", e);\n                return Collections.emptySet();\n            }\n        }\n    }","id":70793,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * For this kind of resources, an XObject property (<tt>use<\/tt>) with the value <tt>always<\/tt> indicates always\n     * used extensions. The list of extensions for each wiki is lazily placed in a cache: if the extension set for the\n     * context wiki is null, then they will be looked up in the database and added to it. The cache is invalidated using\n     * the notification mechanism.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#getAlwaysUsedExtensions(XWikiContext)\n     */\n    @Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // Retrieve the current wiki name from the XWiki context\n        String currentWiki = StringUtils.defaultIfEmpty(context.getDatabase(), context.getMainXWiki());\n        // If we already have extensions defined for this wiki, we return them\n        if (this.alwaysUsedExtensions.get(currentWiki) != null) {\n            return this.alwaysUsedExtensions.get(currentWiki);\n        } else {\n            // Otherwise, we look them up in the database.\n            Set<String> extensions = new HashSet<String>();\n            String query =\n                \", BaseObject as obj, StringProperty as use where obj.className='\" + getExtensionClassName() + \"'\"\n                    + \" and obj.name=doc.fullName and use.id.id=obj.id and use.id.name='use' and use.value='always'\";\n            try {\n                for (String extension : context.getWiki().getStore().searchDocumentsNames(query, context)) {\n                    try {\n                        XWikiDocument doc = context.getWiki().getDocument(extension, context);\n                        // Only add the extension as being \"always used\" if the page holding it has been saved with\n                        // programming rights.\n                        if (context.getWiki().getRightService().hasProgrammingRights(doc, context)) {\n                            extensions.add(extension);\n                        }\n                    } catch (XWikiException e1) {\n                        LOG.error(\"Error while adding skin extension [\" + extension\n                            + \"] as always used. It will be ignored.\", e1);\n                    }\n                }\n                this.alwaysUsedExtensions.put(currentWiki, extensions);\n                return extensions;\n            } catch (XWikiException e) {\n                LOG.error(\"Error while retrieving always used JS extensions\", e);\n                return Collections.emptySet();\n            }\n        }\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected abstract String getExtensionClassName();","id":70794,"modified_method":"/**\n     * The name of the XClass which holds extensions of this type.\n     * \n     * @return A <code>String<\/code> representation of the XClass name, in the <code>Space.Document<\/code> format.\n     */\n    protected abstract String getExtensionClassName();","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AbstractDocumentSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n    }","id":70795,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public AbstractDocumentSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Notification method called upon document changed. This method is used to keep the {@link #alwaysUsedExtensions}\n     * map consistent when the database changes. Upon each document save, it looks in the newly saved document\n     * for an extension object. If one is found, then if the use field is set to \"always\" and the document has been\n     * saved with programming rights, we put the document in the map (considering it could already be there). If those\n     * last two conditions are not verified, we remove the document from the map (considering it could not have been there already).\n     * Last, if the old document (before the save) contained an extension object, but the new one (after the save) does not,\n     * it means the object has been deleted, so again we remove this document from the map.\n     * \n     * @see XWikiNotificationInterface#notify(XWikiNotificationRule, XWikiDocument, XWikiDocument, int, XWikiContext)\n     */\n    public void notify(XWikiNotificationRule rule, XWikiDocument newdoc, XWikiDocument olddoc, int event,\n        XWikiContext context)\n    {\n        boolean remove = false;\n        if (newdoc.getObject(getExtensionClassName()) != null) {\n            // new or already existing object\n            if (newdoc.getObject(getExtensionClassName()).getStringValue(\"use\").equals(\"always\")) {\n                if (context.getWiki().getRightService().hasProgrammingRights(newdoc, context)) {\n                    this.getAlwaysUsedExtensions(context).add(newdoc.getFullName());\n                    return;\n                } else {\n                    // in case the extension losed its programming rights upon this save.\n                    remove = true;\n                }\n            } else {\n                // remove if exists but use onDemand\n                remove = true;\n            }\n        } else if (olddoc.getObject(getExtensionClassName()) != null) {\n            // object removed\n            remove = true;\n        }\n        if (remove) {\n            this.getAlwaysUsedExtensions(context).remove(newdoc.getFullName());\n        }\n    }","id":70796,"modified_method":"/**\n     * Notification method called upon document changed. This method is used to keep the {@link #alwaysUsedExtensions}\n     * map consistent when the database changes. Upon each document save, it looks in the newly saved document for an\n     * extension object. If one is found, then if the use field is set to \"always\" and the document has been saved with\n     * programming rights, we put the document in the map (considering it could already be there). If those last two\n     * conditions are not verified, we remove the document from the map (considering it could not have been there\n     * already). Last, if the old document (before the save) contained an extension object, but the new one (after the\n     * save) does not, it means the object has been deleted, so again we remove this document from the map.\n     * \n     * @param rule The rule that triggered the notification, the one that was used when registering for notifications.\n     * @param newdoc The new version of the changed document.\n     * @param olddoc The old version of the changed document.\n     * @param event The type of event (save, delete, update). Currently not correct.\n     * @param context The current request context.\n     * @see XWikiDocChangeNotificationInterface#notify(XWikiNotificationRule, XWikiDocument, XWikiDocument, int,\n     *      XWikiContext)\n     */\n    public void notify(XWikiNotificationRule rule, XWikiDocument newdoc, XWikiDocument olddoc, int event,\n        XWikiContext context)\n    {\n        boolean remove = false;\n        if (newdoc.getObject(getExtensionClassName()) != null) {\n            // new or already existing object\n            if (newdoc.getObject(getExtensionClassName(), USE_FIELDNAME, \"always\", false) != null) {\n                if (context.getWiki().getRightService().hasProgrammingRights(newdoc, context)) {\n                    this.getAlwaysUsedExtensions(context).add(newdoc.getFullName());\n                    return;\n                } else {\n                    // in case the extension lost its programming rights upon this save.\n                    remove = true;\n                }\n            } else {\n                // remove if exists but use onDemand\n                remove = true;\n            }\n        } else if (olddoc.getObject(getExtensionClassName()) != null) {\n            // object removed\n            remove = true;\n        }\n        if (remove) {\n            this.getAlwaysUsedExtensions(context).remove(newdoc.getFullName());\n        }\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see SkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        String url = \"\";\n        try {\n            // If the current user has access to Main.WebHome, we will use this document in the URL\n            // to serve the js resource. This way, the resource can be efficiently cached, since it has a\n            // common URL for any page.\n            if (context.getWiki().getRightService().hasAccessLevel(\"view\", context.getUser(), \"Main.WebHome\", context)) {\n                url = context.getWiki().getURL(\"Main.WebHome\", \"ssx\", \"resource=\" + documentName, context);\n            }\n        } catch (XWikiException e) {\n            // do nothing here, we'll fold back just after.\n        }\n        if (url.equals(\"\")) {\n            // If we could not have an URL with Main.WebHome, we use the context document.\n            url = context.getDoc().getURL(\"ssx\", \"resource=\" + documentName, context);\n        }\n        return \"<link rel='stylesheet' type='text/css' href='\" + url + \"'/>\";\n    }","id":70797,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractSkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        String result = \"\";\n        // If the current user has access to Main.WebHome, we will use this document in the URL\n        // to serve the css resource. This way, the resource can be efficiently cached, since it has a\n        // common URL for any page.\n        try {\n            String page = context.getWiki().getDefaultWeb(context) + \".\" + context.getWiki().getDefaultPage(context);\n            if (!context.getWiki().getRightService().hasAccessLevel(\"view\", context.getUser(), page, context)) {\n                page = context.getDoc().getFullName();\n            }\n            String url =\n                context.getWiki().getURL(page, \"ssx\",\n                    \"resource=\" + documentName + parametersAsQueryString(documentName, context), context);\n            result = \"<link rel='stylesheet' type='text/css' href='\" + url + \"'/>\";\n        } catch (XWikiException e) {\n            // Do nothing here; we can't access the wiki, so don't link to this resource at all.\n        }\n        return result;\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // There is no mean to define an always used extension for something else than a document extension now,\n        // so for resources-based extensions, we return an emtpy set.\n        // An idea for the future could be to have an API for plugins and components to register always used resources\n        // extensions.\n        return Collections.emptySet();\n    }","id":70798,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * There is no support for always used resource-based extensions yet.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#getAlwaysUsedExtensions(XWikiContext)\n     */\n    @Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // There is no mean to define an always used extension for something else than a document extension now,\n        // so for resources-based extensions, we return an emtpy set.\n        // An idea for the future could be to have an API for plugins and components to register always used resources\n        // extensions.\n        return Collections.emptySet();\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public CssResourceSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n        init(context);\n    }","id":70799,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public CssResourceSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n        init(context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70800,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see SkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        try {\n            return \"<link rel='stylesheet' type='text/css' href='\"\n                + context.getWiki().getURL(documentName, \"ssx\", \"lang=\" + context.getLanguage(), context) + \"'/>\";\n        } catch (XWikiException e) {\n            LOG.warn(\"Cannot link to CSS extension: \" + documentName);\n            return \"\";\n        }\n    }","id":70801,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractSkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        try {\n            return \"<link rel='stylesheet' type='text/css' href='\"\n                + context.getWiki().getURL(documentName, PLUGIN_NAME,\n                    \"language=\" + context.getLanguage() + parametersAsQueryString(documentName, context), context)\n                + \"'/>\";\n        } catch (XWikiException e) {\n            LOG.warn(\"Cannot link to CSS extension: \" + documentName);\n            return \"\";\n        }\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String getExtensionClassName()\n    {\n        return SSX_CLASS_NAME;\n    }","id":70802,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractDocumentSkinExtensionPlugin#getExtensionClassName()\n     */\n    @Override\n    protected String getExtensionClassName()\n    {\n        return SSX_CLASS_NAME;\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70803,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public CssSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n        init(context);\n    }","id":70804,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public CssSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(PLUGIN_NAME, className, context);\n        init(context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String getExtensionName()\n    {\n        return \"Stylesheet\";\n    }","id":70805,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractDocumentSkinExtensionPlugin#getExtensionName()\n     */\n    @Override\n    protected String getExtensionName()\n    {\n        return \"Stylesheet\";\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // There is no mean to define an always used extension for something else than a document extension now,\n        // so for resources-based extensions, we return an emtpy set.\n        // An idea for the future could be to have an API for plugins and components to register always used resources\n        // extensions.\n        return Collections.emptySet();\n    }","id":70806,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * There is no support for always used resource-based extensions yet.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#getAlwaysUsedExtensions(XWikiContext)\n     */\n    @Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // There is no mean to define an always used extension for something else than a document extension now,\n        // so for resources-based extensions, we return an emtpy set.\n        // An idea for the future could be to have an API for plugins and components to register always used resources\n        // extensions.\n        return Collections.emptySet();\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70807,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see SkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        String url = \"\";\n        try {\n            // If the current user has access to Main.WebHome, we will use this document in the URL\n            // to serve the js resource. This way, the resource can be efficiently cached, since it has a\n            // common URL for any page.\n            if (context.getWiki().getRightService().hasAccessLevel(\"view\", context.getUser(), \"Main.WebHome\", context)) {\n                url = context.getWiki().getURL(\"Main.WebHome\", \"jsx\", \"resource=\" + documentName, context);\n            }\n        } catch (XWikiException e) {\n            // do nothing here, we'll fold back just after.\n        }\n        if (url.equals(\"\")) {\n            // If we could not have an URL with Main.WebHome, we use the context document.\n            url = context.getDoc().getURL(\"jsx\", \"resource=\" + documentName, context);\n        }\n        return \"<script type=\\\"text/javascript\\\" src=\\\"\" + url + \"\\\"><\/script>\";\n    }","id":70808,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractSkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        String result = \"\";\n        // If the current user has access to Main.WebHome, we will use this document in the URL\n        // to serve the js resource. This way, the resource can be efficiently cached, since it has a\n        // common URL for any page.\n        try {\n            String page = context.getWiki().getDefaultWeb(context) + \".\" + context.getWiki().getDefaultPage(context);\n            if (!context.getWiki().getRightService().hasAccessLevel(\"view\", context.getUser(), page, context)) {\n                page = context.getDoc().getFullName();\n            }\n            String url =\n                context.getWiki().getURL(page, \"jsx\",\n                    \"resource=\" + documentName + parametersAsQueryString(documentName, context), context);\n            result = \"<script type=\\\"text/javascript\\\" src=\\\"\" + url + \"\\\"><\/script>\";\n        } catch (XWikiException e) {\n            // Do nothing here; we can't access the wiki, so don't link to this resource at all.\n        }\n        return result;\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public JsResourceSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n        init(context);\n    }","id":70809,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public JsResourceSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(\"jsrx\", className, context);\n        init(context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public JsSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n    }","id":70810,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public JsSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(PLUGIN_NAME, className, context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String getExtensionName()\n    {\n        return \"Javascript\";\n    }","id":70811,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractDocumentSkinExtensionPlugin#getExtensionName()\n     */\n    @Override\n    protected String getExtensionName()\n    {\n        return \"Javascript\";\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70812,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String getExtensionClassName()\n    {\n        return JSX_CLASS_NAME;\n    }","id":70813,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractDocumentSkinExtensionPlugin#getExtensionClassName()\n     */\n    @Override\n    protected String getExtensionClassName()\n    {\n        return JSX_CLASS_NAME;\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        try {\n            return \"<script type='text/javascript' src='\"\n                + context.getWiki().getURL(documentName, \"jsx\", \"lang=\" + context.getLanguage(), context)\n                + \"'><\/script>\";\n        } catch (XWikiException e) {\n            LOG.warn(\"Cannot link to JS extension: \" + documentName);\n            return \"\";\n        }\n    }","id":70814,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractSkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        try {\n            return \"<script type='text/javascript' src='\"\n                + context.getWiki().getURL(documentName, PLUGIN_NAME,\n                    \"language=\" + context.getLanguage() + parametersAsQueryString(documentName, context), context)\n                + \"'><\/script>\";\n        } catch (XWikiException e) {\n            LOG.warn(\"Cannot link to JS extension: \" + documentName);\n            return \"\";\n        }\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void use(String skinFile)\n    {\n        this.getProtectedPlugin().use(skinFile, getXWikiContext());\n    }","id":70815,"modified_method":"/**\n     * Mark a resource as used in the current result. A resource is registered only once per request, further calls will\n     * not result in additional links, even if it is pulled with different parameters.\n     * \n     * @param resource The name of the resource to pull.\n     * @see AbstractSkinExtensionPlugin#use(String, XWikiContext)\n     */\n    public void use(String resource)\n    {\n        this.getProtectedPlugin().use(resource, getXWikiContext());\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String getImportString()\n    {\n        return this.getProtectedPlugin().getImportString(getXWikiContext());\n    }","id":70816,"modified_method":"/**\n     * Composes and returns the links to the resources pulled in the current request. This method is called at the end\n     * of each request, once for each type of resource (subclass), and the result is placed in the generated XHTML.\n     * \n     * @return a XHMTL fragment with all extensions imports statements for this request. This includes both extensions\n     *         that are defined as being \"used always\" and \"on demand\" extensions explicitly requested for this page.\n     *         Always used extensions are always, before on demand extensions, so that on demand extensions can override\n     *         more general elements in the always used ones.\n     */\n    public String getImportString()\n    {\n        return this.getProtectedPlugin().getImportString(getXWikiContext());\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public SkinExtensionPluginApi(SkinExtensionPlugin plugin, XWikiContext context)\n    {\n        super(plugin, context);\n        setPlugin(plugin);\n    }","id":70817,"modified_method":"/**\n     * XWiki Plugin API constructor.\n     * \n     * @param plugin The wrapped plugin.\n     * @param context The current request context.\n     * @see PluginApi#PluginApi(com.xpn.xwiki.plugin.XWikiPluginInterface, XWikiContext)\n     */\n    public SkinExtensionPluginApi(AbstractSkinExtensionPlugin plugin, XWikiContext context)\n    {\n        super(plugin, context);\n    }","commit_id":"d71c19e1ed951fe2cbd1a5511c69745511f7126a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AbstractDocumentSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n    }","id":70818,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public AbstractDocumentSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public BaseClass getExtensionClass(XWikiContext context)\n    {\n        try {\n            XWikiDocument doc = context.getWiki().getDocument(getExtensionClassName(), context);\n            boolean needsUpdate = false;\n\n            BaseClass bclass = doc.getxWikiClass();\n            if (context.get(\"initdone\") != null) {\n                return bclass;\n            }\n\n            bclass.setName(getExtensionClassName());\n\n            needsUpdate |= bclass.addTextField(\"name\", \"Name\", 30);\n            needsUpdate |= bclass.addTextAreaField(\"code\", \"Code\", 50, 20);\n            needsUpdate |= bclass.addStaticListField(\"use\", \"Use this extension\", \"onDemand=On demand|always=Always\");\n            needsUpdate |= bclass.addBooleanField(\"parse\", \"Parse content\", \"yesno\");\n            needsUpdate |= bclass.addStaticListField(\"cache\", \"Caching policy\", \"long|short|default|forbid\");\n\n            if (StringUtils.isBlank(doc.getAuthor())) {\n                needsUpdate = true;\n                doc.setAuthor(\"XWiki.Admin\");\n            }\n            if (StringUtils.isBlank(doc.getCreator())) {\n                needsUpdate = true;\n                doc.setCreator(\"XWiki.Admin\");\n            }\n            if (StringUtils.isBlank(doc.getParent())) {\n                needsUpdate = true;\n                doc.setParent(\"XWiki.XWikiClasses\");\n            }\n            if (StringUtils.isBlank(doc.getContent())) {\n                needsUpdate = true;\n                doc.setContent(\"1 XWiki \" + getExtensionName() + \" Extension Class\");\n            }\n\n            if (needsUpdate) {\n                context.getWiki().saveDocument(doc, context);\n            }\n            return bclass;\n        } catch (Exception ex) {\n            LOG.error(\"Cannot initialize skin extenstion class [\" + getExtensionClassName() + \"]\", ex);\n        }\n        return null;\n    }","id":70819,"modified_method":"/**\n     * Creates or updates the XClass used for this type of extension. Usually called on {@link #init(XWikiContext)} and\n     * {@link #virtualInit(XWikiContext)}.\n     * \n     * @param context The current request context, which gives access to the wiki.\n     * @return The XClass for this extension.\n     */\n    public BaseClass getExtensionClass(XWikiContext context)\n    {\n        try {\n            XWikiDocument doc = context.getWiki().getDocument(getExtensionClassName(), context);\n            boolean needsUpdate = false;\n\n            BaseClass bclass = doc.getxWikiClass();\n            if (context.get(\"initdone\") != null) {\n                return bclass;\n            }\n\n            bclass.setName(getExtensionClassName());\n\n            needsUpdate |= bclass.addTextField(\"name\", \"Name\", 30);\n            needsUpdate |= bclass.addTextAreaField(\"code\", \"Code\", 50, 20);\n            needsUpdate |=\n                bclass.addStaticListField(USE_FIELDNAME, \"Use this extension\", \"onDemand=On demand|always=Always\");\n            needsUpdate |= bclass.addBooleanField(\"parse\", \"Parse content\", \"yesno\");\n            needsUpdate |= bclass.addStaticListField(\"cache\", \"Caching policy\", \"long|short|default|forbid\");\n\n            if (StringUtils.isBlank(doc.getCreator())) {\n                needsUpdate = true;\n                doc.setCreator(\"XWiki.Admin\");\n            }\n            if (StringUtils.isBlank(doc.getAuthor())) {\n                needsUpdate = true;\n                doc.setAuthor(doc.getCreator());\n            }\n            if (StringUtils.isBlank(doc.getParent())) {\n                needsUpdate = true;\n                doc.setParent(\"XWiki.XWikiClasses\");\n            }\n            if (StringUtils.isBlank(doc.getContent())) {\n                needsUpdate = true;\n                doc.setContent(\"1 XWiki \" + getExtensionName() + \" Extension Class\");\n            }\n\n            if (needsUpdate) {\n                context.getWiki().saveDocument(doc, context);\n            }\n            return bclass;\n        } catch (Exception ex) {\n            LOG.error(\"Cannot initialize skin extenstion class [\" + getExtensionClassName() + \"]\", ex);\n        }\n        return null;\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected abstract String getExtensionName();","id":70820,"modified_method":"/**\n     * A user-friendly name for this type of resource, used in the auto-generated class document.\n     * \n     * @return The user-friendly name for this type of resource.\n     */\n    protected abstract String getExtensionName();","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Notification method called upon document changed. This method is used to keep the {@link #alwaysUsedExtensions}\n     * map consistent when the database changes. Upon each document save, it looks in the newly saved document\n     * for an extension object. If one is found, then if the use field is set to \"always\" and the document has been\n     * saved with programming rights, we put the document in the map (considering it could already be there). If those\n     * last two conditions are not verified, we remove the document from the map (considering it could not have been there already).\n     * Last, if the old document (before the save) contained an extension object, but the new one (after the save) does not,\n     * it means the object has been deleted, so again we remove this document from the map.\n     * \n     * @see XWikiNotificationInterface#notify(XWikiNotificationRule, XWikiDocument, XWikiDocument, int, XWikiContext)\n     */\n    public void notify(XWikiNotificationRule rule, XWikiDocument newdoc, XWikiDocument olddoc, int event,\n        XWikiContext context)\n    {\n        boolean remove = false;\n        if (newdoc.getObject(getExtensionClassName()) != null) {\n            // new or already existing object\n            if (newdoc.getObject(getExtensionClassName()).getStringValue(\"use\").equals(\"always\")) {\n                if (context.getWiki().getRightService().hasProgrammingRights(newdoc, context)) {\n                    this.getAlwaysUsedExtensions(context).add(newdoc.getFullName());\n                    return;\n                } else {\n                    // in case the extension losed its programming rights upon this save.\n                    remove = true;\n                }\n            } else {\n                // remove if exists but use onDemand\n                remove = true;\n            }\n        } else if (olddoc.getObject(getExtensionClassName()) != null) {\n            // object removed\n            remove = true;\n        }\n        if (remove) {\n            this.getAlwaysUsedExtensions(context).remove(newdoc.getFullName());\n        }\n    }","id":70821,"modified_method":"/**\n     * Notification method called upon document changed. This method is used to keep the {@link #alwaysUsedExtensions}\n     * map consistent when the database changes. Upon each document save, it looks in the newly saved document for an\n     * extension object. If one is found, then if the use field is set to \"always\" and the document has been saved with\n     * programming rights, we put the document in the map (considering it could already be there). If those last two\n     * conditions are not verified, we remove the document from the map (considering it could not have been there\n     * already). Last, if the old document (before the save) contained an extension object, but the new one (after the\n     * save) does not, it means the object has been deleted, so again we remove this document from the map.\n     * \n     * @param rule The rule that triggered the notification, the one that was used when registering for notifications.\n     * @param newdoc The new version of the changed document.\n     * @param olddoc The old version of the changed document.\n     * @param event The type of event (save, delete, update). Currently not correct.\n     * @param context The current request context.\n     * @see XWikiDocChangeNotificationInterface#notify(XWikiNotificationRule, XWikiDocument, XWikiDocument, int,\n     *      XWikiContext)\n     */\n    public void notify(XWikiNotificationRule rule, XWikiDocument newdoc, XWikiDocument olddoc, int event,\n        XWikiContext context)\n    {\n        boolean remove = false;\n        if (newdoc.getObject(getExtensionClassName()) != null) {\n            // new or already existing object\n            if (newdoc.getObject(getExtensionClassName(), USE_FIELDNAME, \"always\", false) != null) {\n                if (context.getWiki().getRightService().hasProgrammingRights(newdoc, context)) {\n                    this.getAlwaysUsedExtensions(context).add(newdoc.getFullName());\n                    return;\n                } else {\n                    // in case the extension lost its programming rights upon this save.\n                    remove = true;\n                }\n            } else {\n                // remove if exists but use onDemand\n                remove = true;\n            }\n        } else if (olddoc.getObject(getExtensionClassName()) != null) {\n            // object removed\n            remove = true;\n        }\n        if (remove) {\n            this.getAlwaysUsedExtensions(context).remove(newdoc.getFullName());\n        }\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Resets the list of \"Use always\" extensions every time a XAR is imported. This way, next time a page is rendered,\n     * such extensions will be retrieved from database, and if one has been imported during last import, it will be taken\n     * into consideration. (We have to this since the importer does not generate DocChanged notification).\n     * See http://jira.xwiki.org/jira/browse/XWIKI-2868\n     * \n     * @see XWikiActionNotificationInterface#notify(XWikiNotificationRule, XWikiDocument, String, XWikiContext)\n     */\n    public void notify(XWikiNotificationRule rule, XWikiDocument doc, String action, XWikiContext context)\n    {\n        // if the action is not import, this notification does not concern this method.\n        if (!action.equals(\"import\")) {\n            return;\n        }\n        // if the action is import, we check the request parameter to see if it is an actual XAR import.\n        // if it is the case, we flush the always used extensions cache for the context wiki.\n        if (context.getRequest().getParameter(\"action\") != null \n            && context.getRequest().getParameter(\"action\").equals(\"import\")) {\n            String currentWiki = !context.getDatabase().equals(\"\") ? context.getDatabase() : context.getMainXWiki();\n            this.alwaysUsedExtensions.remove(currentWiki);\n        }\n    }","id":70822,"modified_method":"/**\n     * Resets the list of \"Use always\" extensions every time a XAR is imported. This way, next time a page is rendered,\n     * such extensions will be retrieved from database, and if one has been imported during last import, it will be\n     * taken into consideration. (We have to this since the importer does not generate DocChanged notification). See\n     * http://jira.xwiki.org/jira/browse/XWIKI-2868\n     * \n     * @param rule The rule that triggered the notification, the one that was used when registering for notifications.\n     * @param doc The context document, the one affected by this action.\n     * @param action The requested action.\n     * @param context The current request context.\n     * @see XWikiActionNotificationInterface#notify(XWikiNotificationRule, XWikiDocument, String, XWikiContext)\n     */\n    public void notify(XWikiNotificationRule rule, XWikiDocument doc, String action, XWikiContext context)\n    {\n        // If the action is not \"import\", this notification does not concern this method.\n        if (!action.equals(\"import\")) {\n            return;\n        }\n        // If the action is \"import\", we check the request parameter to see if it is an actual XAR import.\n        if (StringUtils.equals(context.getRequest().getParameter(\"action\"), action)) {\n            // If this is the case, we flush the always used extensions cache for the context wiki. This is needed\n            // because the import action does not trigger document change notifications.\n            String currentWiki = StringUtils.defaultIfEmpty(context.getDatabase(), context.getMainXWiki());\n            this.alwaysUsedExtensions.remove(currentWiki);\n        }\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#init(com.xpn.xwiki.XWikiContext)\n     */\n    @Override\n    public void init(XWikiContext context)\n    {\n        super.init(context);\n        alwaysUsedExtensions = new HashMap<String, Set<String>>();\n        getExtensionClass(context);\n        context.getWiki().getNotificationManager().addGeneralRule(new DocChangeRule(this));\n        context.getWiki().getNotificationManager().addGeneralRule(new XWikiActionRule(this, true, true));\n    }","id":70823,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * Create/update the XClass corresponding to this kind of extension, and register the listeners that update the list\n     * of always used extensions.\n     * <\/p>\n     * \n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#init(com.xpn.xwiki.XWikiContext)\n     */\n    @Override\n    public void init(XWikiContext context)\n    {\n        super.init(context);\n        this.alwaysUsedExtensions = new HashMap<String, Set<String>>();\n        getExtensionClass(context);\n        context.getWiki().getNotificationManager().addGeneralRule(new DocChangeRule(this));\n        context.getWiki().getNotificationManager().addGeneralRule(new XWikiActionRule(this, true, true));\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected abstract String getExtensionClassName();","id":70824,"modified_method":"/**\n     * The name of the XClass which holds extensions of this type.\n     * \n     * @return A <code>String<\/code> representation of the XClass name, in the <code>Space.Document<\/code> format.\n     */\n    protected abstract String getExtensionClassName();","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param context the XWiki context\n     * @return a set of extensions that should always be used for the context wiki. The extensions are lazily in a cache\n     * for each wiki. If the extension set for the context wiki is null, then they will be looked up in the database and\n     * added to the cache if any.  \n     */\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // retrieve the current wiki name from the XWiki context\n        String currentWiki = !context.getDatabase().equals(\"\") ? context.getDatabase() : context.getMainXWiki();\n        // if we already have extensions defined for this wiki, we return them\n        if (this.alwaysUsedExtensions.get(currentWiki) != null) {\n            return this.alwaysUsedExtensions.get(currentWiki);\n        } else {\n            // otherwise, we look them up in the database.\n            Set<String> extensions = new HashSet<String>();\n            String query =\n                \", BaseObject as obj, StringProperty as use where obj.className='\" + getExtensionClassName() + \"'\"\n                    + \" and obj.name=doc.fullName and use.id.id=obj.id and use.id.name='use' and use.value='always'\";\n            try {\n                for (String extension : context.getWiki().getStore().searchDocumentsNames(query, context)) {\n                    try {\n                        XWikiDocument doc = context.getWiki().getDocument(extension, context);\n                        // only add the extension as being \"always used\" if the page holding it has been saved with programming rights.\n                        if (context.getWiki().getRightService().hasProgrammingRights(doc, context)) {\n                            extensions.add(extension);\n                        }\n                    } catch (XWikiException e1) {\n                        LOG.error(\"Error while adding JS extension [\" + extension\n                            + \"] as always used. It will be ignored\", e1);\n                    }\n                }\n                this.alwaysUsedExtensions.put(currentWiki, extensions);\n                return extensions;\n            } catch (XWikiException e) {\n                LOG.error(\"Error while retrieving always used JS extensions\", e);\n                return Collections.emptySet();\n            }\n        }\n    }","id":70825,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * For this kind of resources, an XObject property (<tt>use<\/tt>) with the value <tt>always<\/tt> indicates always\n     * used extensions. The list of extensions for each wiki is lazily placed in a cache: if the extension set for the\n     * context wiki is null, then they will be looked up in the database and added to it. The cache is invalidated using\n     * the notification mechanism.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#getAlwaysUsedExtensions(XWikiContext)\n     */\n    @Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // Retrieve the current wiki name from the XWiki context\n        String currentWiki = StringUtils.defaultIfEmpty(context.getDatabase(), context.getMainXWiki());\n        // If we already have extensions defined for this wiki, we return them\n        if (this.alwaysUsedExtensions.get(currentWiki) != null) {\n            return this.alwaysUsedExtensions.get(currentWiki);\n        } else {\n            // Otherwise, we look them up in the database.\n            Set<String> extensions = new HashSet<String>();\n            String query =\n                \", BaseObject as obj, StringProperty as use where obj.className='\" + getExtensionClassName() + \"'\"\n                    + \" and obj.name=doc.fullName and use.id.id=obj.id and use.id.name='use' and use.value='always'\";\n            try {\n                for (String extension : context.getWiki().getStore().searchDocumentsNames(query, context)) {\n                    try {\n                        XWikiDocument doc = context.getWiki().getDocument(extension, context);\n                        // Only add the extension as being \"always used\" if the page holding it has been saved with\n                        // programming rights.\n                        if (context.getWiki().getRightService().hasProgrammingRights(doc, context)) {\n                            extensions.add(extension);\n                        }\n                    } catch (XWikiException e1) {\n                        LOG.error(\"Error while adding skin extension [\" + extension\n                            + \"] as always used. It will be ignored.\", e1);\n                    }\n                }\n                this.alwaysUsedExtensions.put(currentWiki, extensions);\n                return extensions;\n            } catch (XWikiException e) {\n                LOG.error(\"Error while retrieving always used JS extensions\", e);\n                return Collections.emptySet();\n            }\n        }\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70826,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70827,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public CssResourceSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n        init(context);\n    }","id":70828,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public CssResourceSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n        init(context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // There is no mean to define an always used extension for something else than a document extension now,\n        // so for resources-based extensions, we return an emtpy set.\n        // An idea for the future could be to have an API for plugins and components to register always used resources\n        // extensions.\n        return Collections.emptySet();\n    }","id":70829,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * There is no support for always used resource-based extensions yet.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#getAlwaysUsedExtensions(XWikiContext)\n     */\n    @Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // There is no mean to define an always used extension for something else than a document extension now,\n        // so for resources-based extensions, we return an emtpy set.\n        // An idea for the future could be to have an API for plugins and components to register always used resources\n        // extensions.\n        return Collections.emptySet();\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see SkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        String url = \"\";\n        try {\n            // If the current user has access to Main.WebHome, we will use this document in the URL\n            // to serve the js resource. This way, the resource can be efficiently cached, since it has a\n            // common URL for any page.\n            if (context.getWiki().getRightService().hasAccessLevel(\"view\", context.getUser(), \"Main.WebHome\", context)) {\n                url = context.getWiki().getURL(\"Main.WebHome\", \"ssx\", \"resource=\" + documentName, context);\n            }\n        } catch (XWikiException e) {\n            // do nothing here, we'll fold back just after.\n        }\n        if (url.equals(\"\")) {\n            // If we could not have an URL with Main.WebHome, we use the context document.\n            url = context.getDoc().getURL(\"ssx\", \"resource=\" + documentName, context);\n        }\n        return \"<link rel='stylesheet' type='text/css' href='\" + url + \"'/>\";\n    }","id":70830,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractSkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        String result = \"\";\n        // If the current user has access to Main.WebHome, we will use this document in the URL\n        // to serve the css resource. This way, the resource can be efficiently cached, since it has a\n        // common URL for any page.\n        try {\n            String page = context.getWiki().getDefaultWeb(context) + \".\" + context.getWiki().getDefaultPage(context);\n            if (!context.getWiki().getRightService().hasAccessLevel(\"view\", context.getUser(), page, context)) {\n                page = context.getDoc().getFullName();\n            }\n            String url =\n                context.getWiki().getURL(page, \"ssx\",\n                    \"resource=\" + documentName + parametersAsQueryString(documentName, context), context);\n            result = \"<link rel='stylesheet' type='text/css' href='\" + url + \"'/>\";\n        } catch (XWikiException e) {\n            // Do nothing here; we can't access the wiki, so don't link to this resource at all.\n        }\n        return result;\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70831,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public CssSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n        init(context);\n    }","id":70832,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public CssSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(PLUGIN_NAME, className, context);\n        init(context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see SkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        try {\n            return \"<link rel='stylesheet' type='text/css' href='\"\n                + context.getWiki().getURL(documentName, \"ssx\", \"lang=\" + context.getLanguage(), context) + \"'/>\";\n        } catch (XWikiException e) {\n            LOG.warn(\"Cannot link to CSS extension: \" + documentName);\n            return \"\";\n        }\n    }","id":70833,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractSkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        try {\n            return \"<link rel='stylesheet' type='text/css' href='\"\n                + context.getWiki().getURL(documentName, PLUGIN_NAME,\n                    \"language=\" + context.getLanguage() + parametersAsQueryString(documentName, context), context)\n                + \"'/>\";\n        } catch (XWikiException e) {\n            LOG.warn(\"Cannot link to CSS extension: \" + documentName);\n            return \"\";\n        }\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String getExtensionClassName()\n    {\n        return SSX_CLASS_NAME;\n    }","id":70834,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractDocumentSkinExtensionPlugin#getExtensionClassName()\n     */\n    @Override\n    protected String getExtensionClassName()\n    {\n        return SSX_CLASS_NAME;\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String getExtensionName()\n    {\n        return \"Stylesheet\";\n    }","id":70835,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractDocumentSkinExtensionPlugin#getExtensionName()\n     */\n    @Override\n    protected String getExtensionName()\n    {\n        return \"Stylesheet\";\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // There is no mean to define an always used extension for something else than a document extension now,\n        // so for resources-based extensions, we return an emtpy set.\n        // An idea for the future could be to have an API for plugins and components to register always used resources\n        // extensions.\n        return Collections.emptySet();\n    }","id":70836,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * There is no support for always used resource-based extensions yet.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#getAlwaysUsedExtensions(XWikiContext)\n     */\n    @Override\n    public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n    {\n        // There is no mean to define an always used extension for something else than a document extension now,\n        // so for resources-based extensions, we return an emtpy set.\n        // An idea for the future could be to have an API for plugins and components to register always used resources\n        // extensions.\n        return Collections.emptySet();\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see SkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        String url = \"\";\n        try {\n            // If the current user has access to Main.WebHome, we will use this document in the URL\n            // to serve the js resource. This way, the resource can be efficiently cached, since it has a\n            // common URL for any page.\n            if (context.getWiki().getRightService().hasAccessLevel(\"view\", context.getUser(), \"Main.WebHome\", context)) {\n                url = context.getWiki().getURL(\"Main.WebHome\", \"jsx\", \"resource=\" + documentName, context);\n            }\n        } catch (XWikiException e) {\n            // do nothing here, we'll fold back just after.\n        }\n        if (url.equals(\"\")) {\n            // If we could not have an URL with Main.WebHome, we use the context document.\n            url = context.getDoc().getURL(\"jsx\", \"resource=\" + documentName, context);\n        }\n        return \"<script type=\\\"text/javascript\\\" src=\\\"\" + url + \"\\\"><\/script>\";\n    }","id":70837,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractSkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        String result = \"\";\n        // If the current user has access to Main.WebHome, we will use this document in the URL\n        // to serve the js resource. This way, the resource can be efficiently cached, since it has a\n        // common URL for any page.\n        try {\n            String page = context.getWiki().getDefaultWeb(context) + \".\" + context.getWiki().getDefaultPage(context);\n            if (!context.getWiki().getRightService().hasAccessLevel(\"view\", context.getUser(), page, context)) {\n                page = context.getDoc().getFullName();\n            }\n            String url =\n                context.getWiki().getURL(page, \"jsx\",\n                    \"resource=\" + documentName + parametersAsQueryString(documentName, context), context);\n            result = \"<script type=\\\"text/javascript\\\" src=\\\"\" + url + \"\\\"><\/script>\";\n        } catch (XWikiException e) {\n            // Do nothing here; we can't access the wiki, so don't link to this resource at all.\n        }\n        return result;\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70838,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public JsResourceSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n        init(context);\n    }","id":70839,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public JsResourceSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(\"jsrx\", className, context);\n        init(context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String getExtensionName()\n    {\n        return \"Javascript\";\n    }","id":70840,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractDocumentSkinExtensionPlugin#getExtensionName()\n     */\n    @Override\n    protected String getExtensionName()\n    {\n        return \"Javascript\";\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected String getExtensionClassName()\n    {\n        return JSX_CLASS_NAME;\n    }","id":70841,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractDocumentSkinExtensionPlugin#getExtensionClassName()\n     */\n    @Override\n    protected String getExtensionClassName()\n    {\n        return JSX_CLASS_NAME;\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","id":70842,"modified_method":"/**\n     * {@inheritDoc}\n     * <p>\n     * We must override this method since the plugin manager only calls it for classes that provide their own\n     * implementation, and not an inherited one.\n     * <\/p>\n     * \n     * @see AbstractSkinExtensionPlugin#endParsing(String, XWikiContext)\n     */\n    @Override\n    public String endParsing(String content, XWikiContext context)\n    {\n        return super.endParsing(content, context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        try {\n            return \"<script type='text/javascript' src='\"\n                + context.getWiki().getURL(documentName, \"jsx\", \"lang=\" + context.getLanguage(), context)\n                + \"'><\/script>\";\n        } catch (XWikiException e) {\n            LOG.warn(\"Cannot link to JS extension: \" + documentName);\n            return \"\";\n        }\n    }","id":70843,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractSkinExtensionPlugin#getLink(String, XWikiContext)\n     */\n    @Override\n    public String getLink(String documentName, XWikiContext context)\n    {\n        try {\n            return \"<script type='text/javascript' src='\"\n                + context.getWiki().getURL(documentName, PLUGIN_NAME,\n                    \"language=\" + context.getLanguage() + parametersAsQueryString(documentName, context), context)\n                + \"'><\/script>\";\n        } catch (XWikiException e) {\n            LOG.warn(\"Cannot link to JS extension: \" + documentName);\n            return \"\";\n        }\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public JsSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(name, className, context);\n    }","id":70844,"modified_method":"/**\n     * XWiki plugin constructor.\n     * \n     * @param name The name of the plugin, which can be used for retrieving the plugin API from velocity. Unused.\n     * @param className The canonical classname of the plugin. Unused.\n     * @param context The current request context.\n     * @see com.xpn.xwiki.plugin.XWikiDefaultPlugin#XWikiDefaultPlugin(String,String,com.xpn.xwiki.XWikiContext)\n     */\n    public JsSkinExtensionPlugin(String name, String className, XWikiContext context)\n    {\n        super(PLUGIN_NAME, className, context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void use(String skinFile)\n    {\n        this.getProtectedPlugin().use(skinFile, getXWikiContext());\n    }","id":70845,"modified_method":"/**\n     * Mark a resource as used in the current result. A resource is registered only once per request, further calls will\n     * not result in additional links, even if it is pulled with different parameters.\n     * \n     * @param resource The name of the resource to pull.\n     * @see AbstractSkinExtensionPlugin#use(String, XWikiContext)\n     */\n    public void use(String resource)\n    {\n        this.getProtectedPlugin().use(resource, getXWikiContext());\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public SkinExtensionPluginApi(SkinExtensionPlugin plugin, XWikiContext context)\n    {\n        super(plugin, context);\n        setPlugin(plugin);\n    }","id":70846,"modified_method":"/**\n     * XWiki Plugin API constructor.\n     * \n     * @param plugin The wrapped plugin.\n     * @param context The current request context.\n     * @see PluginApi#PluginApi(com.xpn.xwiki.plugin.XWikiPluginInterface, XWikiContext)\n     */\n    public SkinExtensionPluginApi(AbstractSkinExtensionPlugin plugin, XWikiContext context)\n    {\n        super(plugin, context);\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String getImportString()\n    {\n        return this.getProtectedPlugin().getImportString(getXWikiContext());\n    }","id":70847,"modified_method":"/**\n     * Composes and returns the links to the resources pulled in the current request. This method is called at the end\n     * of each request, once for each type of resource (subclass), and the result is placed in the generated XHTML.\n     * \n     * @return a XHMTL fragment with all extensions imports statements for this request. This includes both extensions\n     *         that are defined as being \"used always\" and \"on demand\" extensions explicitly requested for this page.\n     *         Always used extensions are always, before on demand extensions, so that on demand extensions can override\n     *         more general elements in the always used ones.\n     */\n    public String getImportString()\n    {\n        return this.getProtectedPlugin().getImportString(getXWikiContext());\n    }","commit_id":"44c70a38b9519b708f1566e42d5f6351097be2b1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n   * convert args to properties with variable names resolved. for each value\n   * having a ${VAR} or $VAR, its value is first resolved using the variables\n   * listed in the props file, and if not found then using the environment\n   * variables. if the variable is not found then substitute it for empty string\n   */\n  public static Properties argsToPropertiesWithResolve(String[] args) {\n    TreeMap<String, String> result = new TreeMap<String, String>();\n    for (int i = 0; i < args.length; i++) {\n      String key = args[i];\n      if (key.length() > 0 && key.charAt(0) == '-') { // found a flag\n        if (key.length() > 1 && key.charAt(1) == '-')\n          key = key.substring(2); // strip off 2 hyphens\n        else\n          key = key.substring(1); // strip off the hyphen\n        if (key.equalsIgnoreCase(PROP) || key.equalsIgnoreCase(PROPS) || key.equalsIgnoreCase(PROPERTIES) || key.equalsIgnoreCase(ARGUMENTS) || key.equalsIgnoreCase(ARGS)) {\n          result.putAll(propFileToTreeMap(args[i + 1]));\n          i++;\n        }\n\n      }\n    }\n    for (Entry<String, String> o : result.entrySet()) {\n      String val = resolveVars(o.getValue(), result);\n      result.put(o.getKey(), val);\n    }\n    Properties props = new Properties();\n    props.putAll(result);\n    return props;\n  }","id":70848,"modified_method":"/**\n   * convert args to properties with variable names resolved. for each value\n   * having a ${VAR} or $VAR, its value is first resolved using the variables\n   * listed in the props file, and if not found then using the environment\n   * variables. if the variable is not found then substitute it for empty string\n   */\n  public static Properties argsToPropertiesWithResolve(String[] args) {\n    TreeMap<String, String> result = new TreeMap<String, String>();\n    Map<String, String> existingArgs = new TreeMap<String, String>();\n    for (int i = 0; i < args.length; i++) {\n      String key = args[i];\n      if (key.length() > 0 && key.charAt(0) == '-') { // found a flag\n        if (key.length() > 1 && key.charAt(1) == '-')\n          key = key.substring(2); // strip off 2 hyphens\n        else\n          key = key.substring(1); // strip off the hyphen\n\n        int max = 1;\n        int min = 0;\n        List<String> flagArgs = new ArrayList<String>();\n        // cdm oct 2007: add length check to allow for empty string argument!\n        for (int j = 0; j < max && i + 1 < args.length && (j < min || args[i + 1].length() == 0 || args[i + 1].charAt(0) != '-'); i++, j++) {\n          flagArgs.add(args[i + 1]);\n        }\n        if (flagArgs.isEmpty()) {\n          existingArgs.put(key, \"true\");\n        } else {\n          \n          if (key.equalsIgnoreCase(PROP) || key.equalsIgnoreCase(PROPS) || key.equalsIgnoreCase(PROPERTIES) || key.equalsIgnoreCase(ARGUMENTS) || key.equalsIgnoreCase(ARGS)) {\n            result.putAll(propFileToTreeMap(join(flagArgs,\" \"), existingArgs));\n            i++;\n            existingArgs.clear();\n          } else\n            existingArgs.put(key, join(flagArgs, \" \"));\n        }\n      }\n    }\n    result.putAll(existingArgs);\n    \n    for (Entry<String, String> o : result.entrySet()) {\n      String val = resolveVars(o.getValue(), result);\n      result.put(o.getKey(), val);\n    }\n    Properties props = new Properties();\n    props.putAll(result);\n    return props;\n  }","commit_id":"7fc77d55cb6a596ff07df05c816cc2ca3b24a8df","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * This method reads in properties listed in a file in the format prop=value,\n   * one property per line. and reads them into a TreeMap (order preserving)\n   * Flags not having any arguments is set to \"true\".\n   *\n   * @param filename A properties file to read\n   * @return The corresponding TreeMap where the ordering is the same as in the\n   *         props file\n   */\n  public static TreeMap<String, String> propFileToTreeMap(String filename) {\n    TreeMap<String, String> result = new TreeMap<String, String>();\n    for (String l : IOUtils.readLines(filename)) {\n      l = l.trim();\n      if (l.isEmpty() || l.startsWith(\"#\"))\n        continue;\n      int index = l.indexOf('=');\n\n      if (index == -1)\n        result.put(l, \"true\");\n      else\n        result.put(l.substring(0, index).trim(), l.substring(index + 1).trim());\n    }\n    return result;\n  }","id":70849,"modified_method":"/**\n   * This method reads in properties listed in a file in the format prop=value,\n   * one property per line. and reads them into a TreeMap (order preserving)\n   * Flags not having any arguments is set to \"true\".\n   *\n   * @param filename A properties file to read\n   * @return The corresponding TreeMap where the ordering is the same as in the\n   *         props file\n   */\n  public static TreeMap<String, String> propFileToTreeMap(String filename, Map<String, String> existingArgs) {\n    \n    TreeMap<String, String> result = new TreeMap<String, String>();\n    result.putAll(existingArgs);\n    for (String l : IOUtils.readLines(filename)) {\n      l = l.trim();\n      if (l.isEmpty() || l.startsWith(\"#\"))\n        continue;\n      int index = l.indexOf('=');\n\n      if (index == -1)\n        result.put(l, \"true\");\n      else\n        result.put(l.substring(0, index).trim(), l.substring(index + 1).trim());\n    }\n    return result;\n  }","commit_id":"7fc77d55cb6a596ff07df05c816cc2ca3b24a8df","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * This method reads in properties listed in a file in the format prop=value,\n   * one property per line. and reads them into a TreeMap (order preserving)\n   * Flags not having any arguments is set to \"true\".\n   *\n   * @param filename A properties file to read\n   * @return The corresponding TreeMap where the ordering is the same as in the\n   *         props file\n   */\n  public static TreeMap<String, String> propFileToTreeMap(String filename) {\n    TreeMap<String, String> result = new TreeMap<String, String>();\n    for (String l : IOUtils.readLines(filename)) {\n      l = l.trim();\n      if (l.isEmpty() || l.startsWith(\"#\"))\n        continue;\n      int index = l.indexOf('=');\n\n      if (index == -1)\n        result.put(l, \"true\");\n      else\n        result.put(l.substring(0, index).trim(), l.substring(index + 1).trim());\n    }\n    return result;\n  }","id":70850,"modified_method":"/**\n   * This method reads in properties listed in a file in the format prop=value,\n   * one property per line. and reads them into a TreeMap (order preserving)\n   * Flags not having any arguments is set to \"true\".\n   *\n   * @param filename A properties file to read\n   * @return The corresponding TreeMap where the ordering is the same as in the\n   *         props file\n   */\n  public static TreeMap<String, String> propFileToTreeMap(String filename, Map<String, String> existingArgs) {\n    \n    TreeMap<String, String> result = new TreeMap<String, String>();\n    result.putAll(existingArgs);\n    for (String l : IOUtils.readLines(filename)) {\n      l = l.trim();\n      if (l.isEmpty() || l.startsWith(\"#\"))\n        continue;\n      int index = l.indexOf('=');\n\n      if (index == -1)\n        result.put(l, \"true\");\n      else\n        result.put(l.substring(0, index).trim(), l.substring(index + 1).trim());\n    }\n    return result;\n  }","commit_id":"72d84460d2a51bdb63bb291744caed8bee45923b","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * convert args to properties with variable names resolved. for each value\n   * having a ${VAR} or $VAR, its value is first resolved using the variables\n   * listed in the props file, and if not found then using the environment\n   * variables. if the variable is not found then substitute it for empty string\n   */\n  public static Properties argsToPropertiesWithResolve(String[] args) {\n    TreeMap<String, String> result = new TreeMap<String, String>();\n    for (int i = 0; i < args.length; i++) {\n      String key = args[i];\n      if (key.length() > 0 && key.charAt(0) == '-') { // found a flag\n        if (key.length() > 1 && key.charAt(1) == '-')\n          key = key.substring(2); // strip off 2 hyphens\n        else\n          key = key.substring(1); // strip off the hyphen\n        if (key.equalsIgnoreCase(PROP) || key.equalsIgnoreCase(PROPS) || key.equalsIgnoreCase(PROPERTIES) || key.equalsIgnoreCase(ARGUMENTS) || key.equalsIgnoreCase(ARGS)) {\n          result.putAll(propFileToTreeMap(args[i + 1]));\n          i++;\n        }\n\n      }\n    }\n    for (Entry<String, String> o : result.entrySet()) {\n      String val = resolveVars(o.getValue(), result);\n      result.put(o.getKey(), val);\n    }\n    Properties props = new Properties();\n    props.putAll(result);\n    return props;\n  }","id":70851,"modified_method":"/**\n   * convert args to properties with variable names resolved. for each value\n   * having a ${VAR} or $VAR, its value is first resolved using the variables\n   * listed in the props file, and if not found then using the environment\n   * variables. if the variable is not found then substitute it for empty string\n   */\n  public static Properties argsToPropertiesWithResolve(String[] args) {\n    TreeMap<String, String> result = new TreeMap<String, String>();\n    Map<String, String> existingArgs = new TreeMap<String, String>();\n    for (int i = 0; i < args.length; i++) {\n      String key = args[i];\n      if (key.length() > 0 && key.charAt(0) == '-') { // found a flag\n        if (key.length() > 1 && key.charAt(1) == '-')\n          key = key.substring(2); // strip off 2 hyphens\n        else\n          key = key.substring(1); // strip off the hyphen\n\n        int max = 1;\n        int min = 0;\n        List<String> flagArgs = new ArrayList<String>();\n        // cdm oct 2007: add length check to allow for empty string argument!\n        for (int j = 0; j < max && i + 1 < args.length && (j < min || args[i + 1].length() == 0 || args[i + 1].charAt(0) != '-'); i++, j++) {\n          flagArgs.add(args[i + 1]);\n        }\n        if (flagArgs.isEmpty()) {\n          existingArgs.put(key, \"true\");\n        } else {\n          \n          if (key.equalsIgnoreCase(PROP) || key.equalsIgnoreCase(PROPS) || key.equalsIgnoreCase(PROPERTIES) || key.equalsIgnoreCase(ARGUMENTS) || key.equalsIgnoreCase(ARGS)) {\n            result.putAll(propFileToTreeMap(join(flagArgs,\" \"), existingArgs));\n            i++;\n            existingArgs.clear();\n          } else\n            existingArgs.put(key, join(flagArgs, \" \"));\n        }\n      }\n    }\n    result.putAll(existingArgs);\n    \n    for (Entry<String, String> o : result.entrySet()) {\n      String val = resolveVars(o.getValue(), result);\n      result.put(o.getKey(), val);\n    }\n    Properties props = new Properties();\n    props.putAll(result);\n    return props;\n  }","commit_id":"72d84460d2a51bdb63bb291744caed8bee45923b","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * convert args to properties with variable names resolved. for each value\n   * having a ${VAR} or $VAR, its value is first resolved using the variables\n   * listed in the props file, and if not found then using the environment\n   * variables. if the variable is not found then substitute it for empty string\n   */\n  public static Properties argsToPropertiesWithResolve(String[] args) {\n    TreeMap<String, String> result = new TreeMap<String, String>();\n    for (int i = 0; i < args.length; i++) {\n      String key = args[i];\n      if (key.length() > 0 && key.charAt(0) == '-') { // found a flag\n        if (key.length() > 1 && key.charAt(1) == '-')\n          key = key.substring(2); // strip off 2 hyphens\n        else\n          key = key.substring(1); // strip off the hyphen\n        if (key.equalsIgnoreCase(PROP) || key.equalsIgnoreCase(PROPS) || key.equalsIgnoreCase(PROPERTIES) || key.equalsIgnoreCase(ARGUMENTS) || key.equalsIgnoreCase(ARGS)) {\n          result.putAll(propFileToTreeMap(args[i + 1]));\n          i++;\n        }\n\n      }\n    }\n    for (Entry<String, String> o : result.entrySet()) {\n      String val = resolveVars(o.getValue(), result);\n      result.put(o.getKey(), val);\n    }\n    Properties props = new Properties();\n    props.putAll(result);\n    return props;\n  }","id":70852,"modified_method":"/**\n   * convert args to properties with variable names resolved. for each value\n   * having a ${VAR} or $VAR, its value is first resolved using the variables\n   * listed in the props file, and if not found then using the environment\n   * variables. if the variable is not found then substitute it for empty string\n   */\n  public static Properties argsToPropertiesWithResolve(String[] args) {\n    TreeMap<String, String> result = new TreeMap<String, String>();\n    Map<String, String> existingArgs = new TreeMap<String, String>();\n    for (int i = 0; i < args.length; i++) {\n      String key = args[i];\n      if (key.length() > 0 && key.charAt(0) == '-') { // found a flag\n        if (key.length() > 1 && key.charAt(1) == '-')\n          key = key.substring(2); // strip off 2 hyphens\n        else\n          key = key.substring(1); // strip off the hyphen\n\n        int max = 1;\n        int min = 0;\n        List<String> flagArgs = new ArrayList<String>();\n        // cdm oct 2007: add length check to allow for empty string argument!\n        for (int j = 0; j < max && i + 1 < args.length && (j < min || args[i + 1].length() == 0 || args[i + 1].charAt(0) != '-'); i++, j++) {\n          flagArgs.add(args[i + 1]);\n        }\n        if (flagArgs.isEmpty()) {\n          existingArgs.put(key, \"true\");\n        } else {\n          \n          if (key.equalsIgnoreCase(PROP) || key.equalsIgnoreCase(PROPS) || key.equalsIgnoreCase(PROPERTIES) || key.equalsIgnoreCase(ARGUMENTS) || key.equalsIgnoreCase(ARGS)) {\n            result.putAll(propFileToTreeMap(args[i + 1], existingArgs));\n            i++;\n            existingArgs.clear();\n          } else\n            existingArgs.put(key, join(flagArgs, \" \"));\n        }\n      }\n    }\n    result.putAll(existingArgs);\n    \n    for (Entry<String, String> o : result.entrySet()) {\n      String val = resolveVars(o.getValue(), result);\n      result.put(o.getKey(), val);\n    }\n    Properties props = new Properties();\n    props.putAll(result);\n    return props;\n  }","commit_id":"4102a5baa8219b267cf5921870d0026c788d1886","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * This method reads in properties listed in a file in the format prop=value,\n   * one property per line. and reads them into a TreeMap (order preserving)\n   * Flags not having any arguments is set to \"true\".\n   *\n   * @param filename A properties file to read\n   * @return The corresponding TreeMap where the ordering is the same as in the\n   *         props file\n   */\n  public static TreeMap<String, String> propFileToTreeMap(String filename) {\n    TreeMap<String, String> result = new TreeMap<String, String>();\n    for (String l : IOUtils.readLines(filename)) {\n      l = l.trim();\n      if (l.isEmpty() || l.startsWith(\"#\"))\n        continue;\n      int index = l.indexOf('=');\n\n      if (index == -1)\n        result.put(l, \"true\");\n      else\n        result.put(l.substring(0, index).trim(), l.substring(index + 1).trim());\n    }\n    return result;\n  }","id":70853,"modified_method":"/**\n   * This method reads in properties listed in a file in the format prop=value,\n   * one property per line. and reads them into a TreeMap (order preserving)\n   * Flags not having any arguments is set to \"true\".\n   *\n   * @param filename A properties file to read\n   * @return The corresponding TreeMap where the ordering is the same as in the\n   *         props file\n   */\n  public static TreeMap<String, String> propFileToTreeMap(String filename, Map<String, String> existingArgs) {\n    \n    TreeMap<String, String> result = new TreeMap<String, String>();\n    result.putAll(existingArgs);\n    for (String l : IOUtils.readLines(filename)) {\n      l = l.trim();\n      if (l.isEmpty() || l.startsWith(\"#\"))\n        continue;\n      int index = l.indexOf('=');\n\n      if (index == -1)\n        result.put(l, \"true\");\n      else\n        result.put(l.substring(0, index).trim(), l.substring(index + 1).trim());\n    }\n    return result;\n  }","commit_id":"4102a5baa8219b267cf5921870d0026c788d1886","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n     */\n    public String getEventLabel(String uei) {\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                if (event.getUei().equals(uei)) {\n                    return event.getEventLabel();\n                }   \n            }\n        }\n        return \"No label found for \" + uei;\n    }","id":70854,"modified_method":"/**\n     */\n    public String getEventLabel(String uei) {\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                if (event.getUei().equals(uei)) {\n                    return event.getEventLabel();\n                }   \n            }\n        }\n        return \"No label found for \" + uei;\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public Map getEventLabels() {\n        TreeMap eventLabels = new TreeMap();\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                eventLabels.put(event.getUei(), event.getEventLabel());\n            }\n        }\n\n        return eventLabels;\n    }","id":70855,"modified_method":"/**\n     */\n    public Map<String, String> getEventLabels() {\n        Map<String, String> eventLabels = new TreeMap<String, String>();\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                eventLabels.put(event.getUei(), event.getEventLabel());\n            }\n        }\n\n        return eventLabels;\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public static synchronized void init() throws IOException, MarshalException, ValidationException {\n        if (!initialized) {\n            m_rootConfigFile=ConfigFileConstants.getFile(ConfigFileConstants.EVENT_CONF_FILE_NAME);\n            m_programmaticStoreFile=new File(m_rootConfigFile.getParent() + File.separator + \"events/programmatic.events.xml\");\n            reload();\n            initialized = true;\n        }\n    }","id":70856,"modified_method":"/**\n     * \n     */\n    public static synchronized void init() throws IOException, MarshalException, ValidationException {\n        if (m_initialized) {\n            return;\n        }\n        \n        m_rootConfigFile = ConfigFileConstants.getFile(ConfigFileConstants.EVENT_CONF_FILE_NAME);\n        m_programmaticStoreFile = new File(m_rootConfigFile.getParent() + File.separator + PROGRAMMATIC_STORE_RELATIVE_PATH);\n        reload();\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * EventconfFactory\n     * \n     * @return the single eventconf factory instance\n     */\n    static synchronized public EventconfFactory getInstance() {\n        if (!initialized)\n            return null;\n\n        if (instance == null) {\n            instance = new EventconfFactory();\n        }\n\n        return instance;\n    }","id":70857,"modified_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * EventconfFactory\n     * \n     * @return the single eventconf factory instance\n     */\n    public static synchronized EventconfFactory getInstance() {\n        if (!m_initialized) {\n            return null;\n        }\n\n        if (s_instance == null) {\n            s_instance = new EventconfFactory();\n        }\n\n        return s_instance;\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public List<String> getEventUEIs() {\n        List<String> eventUEIs = new ArrayList<String>();\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                eventUEIs.add(event.getUei());\n            }\n        }\n        return eventUEIs;\n    }","id":70858,"modified_method":"/**\n     */\n    public List<String> getEventUEIs() {\n        List<String> eventUEIs = new ArrayList<String>();\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                eventUEIs.add(event.getUei());\n            }\n        }\n        return eventUEIs;\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List getEventsByLabel() {\n        ArrayList list = new ArrayList();\n        for(Events fileEvents : m_eventFiles.values()) {\n            list.addAll(fileEvents.getEventCollection());\n        }\n        Collections.sort(list, new EventLabelComparator());\n        return list;\n    }","id":70859,"modified_method":"public List<Event> getEventsByLabel() {\n        List<Event> list = new ArrayList<Event>();\n        for (Events fileEvents : m_eventFiles.values()) {\n            list.addAll(fileEvents.getEventCollection());\n        }\n        Collections.sort(list, new EventLabelComparator());\n        return list;\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * A full reinitialization, from scratch.  Subtly different from a reload (more encompassing).\n     * Safe to call in place of init if you so desire\n     * @throws IOException \n     * @throws ValidationException \n     * @throws MarshalException \n     *\n     */\n    public static synchronized void reinit() throws MarshalException, ValidationException, IOException {\n        initialized=false;\n        EventconfFactory.init();\n    }","id":70860,"modified_method":"/**\n     * A full reinitialization, from scratch.  Subtly different from a reload (more encompassing).\n     * Safe to call in place of init if you so desire\n     * @throws IOException \n     * @throws ValidationException \n     * @throws MarshalException \n     *\n     */\n    public static synchronized void reinit() throws MarshalException, ValidationException, IOException {\n        m_initialized = false;\n        EventconfFactory.init();\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public List<Event> getEvents(String uei) {\n        List<Event> events = new ArrayList<Event>();\n\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                if (event.getUei().equals(uei)) {\n                    events.add(event);\n                }\n            }\n        }\n        if (events.size() > 0)\n            return events;\n        else\n            return null;\n    }","id":70861,"modified_method":"/**\n     * \n     */\n    public List<Event> getEvents(String uei) {\n        List<Event> events = new ArrayList<Event>();\n\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                if (event.getUei().equals(uei)) {\n                    events.add(event);\n                }\n            }\n        }\n        \n        if (events.size() > 0) {\n            return events;\n        } else {\n            return null;\n        }\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public static synchronized void reload() throws IOException, MarshalException, ValidationException {\n        InputStream configIn = new FileInputStream(m_rootConfigFile);\n        Events events = ((Events) Unmarshaller.unmarshal(Events.class, new InputStreamReader(configIn)));\n       \n        m_eventFiles=new HashMap<File, Events>();\n        m_eventFiles.put(m_rootConfigFile, events);\n\n        //Create an array, and add any nested eventfiles defs found, to the end of the array.  \n        //Using the \"size\" field (rather than an enumeration) means we don't need any funky nesting logic\n        List<String> eventFiles=new ArrayList(events.getEventFileCollection());\n        \n        for(int i=0; i<eventFiles.size(); i++) {\n            String eventFilePath = (String) eventFiles.get(i);\n            File eventFile=new File(eventFilePath);\n            if(!eventFile.isAbsolute()) {\n                //This event file is specified with a relative path.  Get the absolute path relative to the root config file, and use \n                // that for all later file references\n                File tempFile=new File(m_rootConfigFile.getParent() + File.separator + eventFile.getPath());\n                eventFile=tempFile.getCanonicalFile();\n            }\n            InputStream fileIn = new FileInputStream(eventFile);\n            if (fileIn == null) {\n                throw new IOException(\"Eventconf: Failed to load/locate events file: \" + eventFile);\n            }\n\n            Reader filerdr = new InputStreamReader(fileIn);\n            Events filelevel = null;\n            filelevel = (Events) Unmarshaller.unmarshal(Events.class, filerdr);\n            m_eventFiles.put(eventFile, filelevel);\n            \n            //There are nested event-file definitions - load them as well\n            if(filelevel.getEventFileCount()>0) {\n                eventFiles.addAll(filelevel.getEventFileCollection());\n            }\n        }\n\n        //m_global = events.getGlobal();\n\n        initialized = true;\n    }","id":70862,"modified_method":"/**\n     * \n     */\n    public static synchronized void reload() throws IOException, MarshalException, ValidationException {\n        Events events = CastorUtils.unmarshal(Events.class, new FileReader(m_rootConfigFile));\n       \n        m_eventFiles = new HashMap<File, Events>();\n        m_eventFiles.put(m_rootConfigFile, events);\n\n        /*\n         * Create an array, and add any nested eventfiles defs found, to the end of the array.  \n         * Using the \"size\" field (rather than an enumeration) means we don't need any funky nesting logic\n         */\n        List<String> eventFiles = new ArrayList<String>(events.getEventFileCollection());\n        \n        for (String eventFilePath : eventFiles) {\n            File eventFile = new File(eventFilePath);\n            if (!eventFile.isAbsolute()) {\n                /*\n                 * This event file is specified with a relative path.  Get the absolute path relative to the root config file, and use \n                 * that for all later file references\n                 */\n                File tempFile = new File(m_rootConfigFile.getParent() + File.separator + eventFile.getPath());\n                eventFile = tempFile.getCanonicalFile();\n            }\n            \n            FileReader fileIn = new FileReader(eventFile);\n            if (fileIn == null) {\n                throw new IOException(\"Eventconf: Failed to load/locate events file: \" + eventFile);\n            }\n\n            Events filelevel = CastorUtils.unmarshal(Events.class, fileIn);\n            m_eventFiles.put(eventFile, filelevel);\n            \n            if (filelevel.getGlobal() != null) {\n                throw new ValidationException(\"The event file \" + eventFile + \" included from the top-level event configuration file cannot have a 'global' element\");\n            }\n            if (filelevel.getEventFileCollection().size() > 0) {\n                throw new ValidationException(\"The event file \" + eventFile + \" included from the top-level event configuration file cannot include other configuration files: \" + StringUtils.collectionToCommaDelimitedString(filelevel.getEventFileCollection()));\n            }\n        }\n\n        m_initialized = true;\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetLabel() {\n        EventconfFactory factory = EventconfFactory.getInstance();\n        assertEquals(\"Must have correct label\"+knownLabel1, knownLabel1, factory.getEventLabel(knownUEI1));\n        assertEquals(\"Must have correct label\"+knownSubfileLabel1, knownSubfileLabel1, factory.getEventLabel(knownSubfileUEI1));\n        assertEquals(\"Must have correct label\"+knownSubSubfileLabel1, knownSubSubfileLabel1, factory.getEventLabel(knownSubSubfileUEI1));\n    }","id":70863,"modified_method":"public void testGetLabel() {\n        EventconfFactory factory = EventconfFactory.getInstance();\n        assertEquals(\"Must have correct label\"+knownLabel1, knownLabel1, factory.getEventLabel(knownUEI1));\n        assertEquals(\"Must have correct label\"+knownSubfileLabel1, knownSubfileLabel1, factory.getEventLabel(knownSubfileUEI1));\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetEventByUEI() {\n        EventconfFactory factory=EventconfFactory.getInstance();\n        List result=factory.getEvents(knownUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        Event firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownUEI1, knownUEI1, firstEvent.getUei());\n        \n        result=factory.getEvents(\"uei.opennms.org/internal/capsd/nonexistent\");\n        assertNull(\"Should be null list for non-existent URI\", result);\n        \n        //Find an event that's in a sub-file\n        result=factory.getEvents(knownSubfileUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownSubfileUEI1,knownSubfileUEI1, firstEvent.getUei());\n \n        //Find an event that's in a nested-sub-file\n        result=factory.getEvents(knownSubSubfileUEI1);\n        assertNotNull(result);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownSubSubfileUEI1,knownSubSubfileUEI1, firstEvent.getUei());\n\n    }","id":70864,"modified_method":"public void testGetEventByUEI() {\n        EventconfFactory factory=EventconfFactory.getInstance();\n        List result=factory.getEvents(knownUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        Event firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownUEI1, knownUEI1, firstEvent.getUei());\n        \n        result=factory.getEvents(\"uei.opennms.org/internal/capsd/nonexistent\");\n        assertNull(\"Should be null list for non-existent URI\", result);\n        \n        //Find an event that's in a sub-file\n        result=factory.getEvents(knownSubfileUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownSubfileUEI1,knownSubfileUEI1, firstEvent.getUei());\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetEventUEIS() {\n        List ueis=EventconfFactory.getInstance().getEventUEIs();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 5, ueis.size());\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownUEI1));\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownSubfileUEI1));\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownSubSubfileUEI1));\n    }","id":70865,"modified_method":"public void testGetEventUEIS() {\n        List ueis=EventconfFactory.getInstance().getEventUEIs();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 4, ueis.size());\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownUEI1));\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownSubfileUEI1));\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetLabels() {\n        Map labels=EventconfFactory.getInstance().getEventLabels();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 5, labels.size());\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownUEI1), knownLabel1);\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownSubfileUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownSubfileUEI1), knownSubfileLabel1);\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownSubSubfileUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownSubSubfileUEI1), knownSubSubfileLabel1);\n     }","id":70866,"modified_method":"public void testGetLabels() {\n        Map labels=EventconfFactory.getInstance().getEventLabels();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 4, labels.size());\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownUEI1), knownLabel1);\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownSubfileUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownSubfileUEI1), knownSubfileLabel1);\n    }","commit_id":"337e90fa521bee9794fdc4c1ee83a931ba38f09e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List getEventsByLabel() {\n        ArrayList list = new ArrayList();\n        for(Events fileEvents : m_eventFiles.values()) {\n            list.addAll(fileEvents.getEventCollection());\n        }\n        Collections.sort(list, new EventLabelComparator());\n        return list;\n    }","id":70867,"modified_method":"public List<Event> getEventsByLabel() {\n        List<Event> list = new ArrayList<Event>();\n        for (Events fileEvents : m_eventFiles.values()) {\n            list.addAll(fileEvents.getEventCollection());\n        }\n        Collections.sort(list, new EventLabelComparator());\n        return list;\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public String getEventLabel(String uei) {\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                if (event.getUei().equals(uei)) {\n                    return event.getEventLabel();\n                }   \n            }\n        }\n        return \"No label found for \" + uei;\n    }","id":70868,"modified_method":"/**\n     */\n    public String getEventLabel(String uei) {\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                if (event.getUei().equals(uei)) {\n                    return event.getEventLabel();\n                }   \n            }\n        }\n        return \"No label found for \" + uei;\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public List<Event> getEvents(String uei) {\n        List<Event> events = new ArrayList<Event>();\n\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                if (event.getUei().equals(uei)) {\n                    events.add(event);\n                }\n            }\n        }\n        if (events.size() > 0)\n            return events;\n        else\n            return null;\n    }","id":70869,"modified_method":"/**\n     * \n     */\n    public List<Event> getEvents(String uei) {\n        List<Event> events = new ArrayList<Event>();\n\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                if (event.getUei().equals(uei)) {\n                    events.add(event);\n                }\n            }\n        }\n        \n        if (events.size() > 0) {\n            return events;\n        } else {\n            return null;\n        }\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public Map getEventLabels() {\n        TreeMap eventLabels = new TreeMap();\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                eventLabels.put(event.getUei(), event.getEventLabel());\n            }\n        }\n\n        return eventLabels;\n    }","id":70870,"modified_method":"/**\n     */\n    public Map<String, String> getEventLabels() {\n        Map<String, String> eventLabels = new TreeMap<String, String>();\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                eventLabels.put(event.getUei(), event.getEventLabel());\n            }\n        }\n\n        return eventLabels;\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * EventconfFactory\n     * \n     * @return the single eventconf factory instance\n     */\n    static synchronized public EventconfFactory getInstance() {\n        if (!initialized)\n            return null;\n\n        if (instance == null) {\n            instance = new EventconfFactory();\n        }\n\n        return instance;\n    }","id":70871,"modified_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * EventconfFactory\n     * \n     * @return the single eventconf factory instance\n     */\n    public static synchronized EventconfFactory getInstance() {\n        if (!m_initialized) {\n            return null;\n        }\n\n        if (s_instance == null) {\n            s_instance = new EventconfFactory();\n        }\n\n        return s_instance;\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public static synchronized void init() throws IOException, MarshalException, ValidationException {\n        if (!initialized) {\n            m_rootConfigFile=ConfigFileConstants.getFile(ConfigFileConstants.EVENT_CONF_FILE_NAME);\n            m_programmaticStoreFile=new File(m_rootConfigFile.getParent() + File.separator + \"events/programmatic.events.xml\");\n            reload();\n            initialized = true;\n        }\n    }","id":70872,"modified_method":"/**\n     * \n     */\n    public static synchronized void init() throws IOException, MarshalException, ValidationException {\n        if (m_initialized) {\n            return;\n        }\n        \n        m_rootConfigFile = ConfigFileConstants.getFile(ConfigFileConstants.EVENT_CONF_FILE_NAME);\n        m_programmaticStoreFile = new File(m_rootConfigFile.getParent() + File.separator + PROGRAMMATIC_STORE_RELATIVE_PATH);\n        reload();\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public List<String> getEventUEIs() {\n        List<String> eventUEIs = new ArrayList<String>();\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                eventUEIs.add(event.getUei());\n            }\n        }\n        return eventUEIs;\n    }","id":70873,"modified_method":"/**\n     */\n    public List<String> getEventUEIs() {\n        List<String> eventUEIs = new ArrayList<String>();\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                eventUEIs.add(event.getUei());\n            }\n        }\n        return eventUEIs;\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public static synchronized void reload() throws IOException, MarshalException, ValidationException {\n        InputStream configIn = new FileInputStream(m_rootConfigFile);\n        Events events = ((Events) Unmarshaller.unmarshal(Events.class, new InputStreamReader(configIn)));\n       \n        m_eventFiles=new HashMap<File, Events>();\n        m_eventFiles.put(m_rootConfigFile, events);\n\n        //Create an array, and add any nested eventfiles defs found, to the end of the array.  \n        //Using the \"size\" field (rather than an enumeration) means we don't need any funky nesting logic\n        List<String> eventFiles=new ArrayList(events.getEventFileCollection());\n        \n        for(int i=0; i<eventFiles.size(); i++) {\n            String eventFilePath = (String) eventFiles.get(i);\n            File eventFile=new File(eventFilePath);\n            if(!eventFile.isAbsolute()) {\n                //This event file is specified with a relative path.  Get the absolute path relative to the root config file, and use \n                // that for all later file references\n                File tempFile=new File(m_rootConfigFile.getParent() + File.separator + eventFile.getPath());\n                eventFile=tempFile.getCanonicalFile();\n            }\n            InputStream fileIn = new FileInputStream(eventFile);\n            if (fileIn == null) {\n                throw new IOException(\"Eventconf: Failed to load/locate events file: \" + eventFile);\n            }\n\n            Reader filerdr = new InputStreamReader(fileIn);\n            Events filelevel = null;\n            filelevel = (Events) Unmarshaller.unmarshal(Events.class, filerdr);\n            m_eventFiles.put(eventFile, filelevel);\n            \n            //There are nested event-file definitions - load them as well\n            if(filelevel.getEventFileCount()>0) {\n                eventFiles.addAll(filelevel.getEventFileCollection());\n            }\n        }\n\n        //m_global = events.getGlobal();\n\n        initialized = true;\n    }","id":70874,"modified_method":"/**\n     * \n     */\n    public static synchronized void reload() throws IOException, MarshalException, ValidationException {\n        Events events = CastorUtils.unmarshal(Events.class, new FileReader(m_rootConfigFile));\n       \n        m_eventFiles = new HashMap<File, Events>();\n        m_eventFiles.put(m_rootConfigFile, events);\n\n        /*\n         * Create an array, and add any nested eventfiles defs found, to the end of the array.  \n         * Using the \"size\" field (rather than an enumeration) means we don't need any funky nesting logic\n         */\n        List<String> eventFiles = new ArrayList<String>(events.getEventFileCollection());\n        \n        for (String eventFilePath : eventFiles) {\n            File eventFile = new File(eventFilePath);\n            if (!eventFile.isAbsolute()) {\n                /*\n                 * This event file is specified with a relative path.  Get the absolute path relative to the root config file, and use \n                 * that for all later file references\n                 */\n                File tempFile = new File(m_rootConfigFile.getParent() + File.separator + eventFile.getPath());\n                eventFile = tempFile.getCanonicalFile();\n            }\n            \n            FileReader fileIn = new FileReader(eventFile);\n            if (fileIn == null) {\n                throw new IOException(\"Eventconf: Failed to load/locate events file: \" + eventFile);\n            }\n\n            Events filelevel = CastorUtils.unmarshal(Events.class, fileIn);\n            m_eventFiles.put(eventFile, filelevel);\n            \n            if (filelevel.getGlobal() != null) {\n                throw new ValidationException(\"The event file \" + eventFile + \" included from the top-level event configuration file cannot have a 'global' element\");\n            }\n            if (filelevel.getEventFileCollection().size() > 0) {\n                throw new ValidationException(\"The event file \" + eventFile + \" included from the top-level event configuration file cannot include other configuration files: \" + StringUtils.collectionToCommaDelimitedString(filelevel.getEventFileCollection()));\n            }\n        }\n\n        m_initialized = true;\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * A full reinitialization, from scratch.  Subtly different from a reload (more encompassing).\n     * Safe to call in place of init if you so desire\n     * @throws IOException \n     * @throws ValidationException \n     * @throws MarshalException \n     *\n     */\n    public static synchronized void reinit() throws MarshalException, ValidationException, IOException {\n        initialized=false;\n        EventconfFactory.init();\n    }","id":70875,"modified_method":"/**\n     * A full reinitialization, from scratch.  Subtly different from a reload (more encompassing).\n     * Safe to call in place of init if you so desire\n     * @throws IOException \n     * @throws ValidationException \n     * @throws MarshalException \n     *\n     */\n    public static synchronized void reinit() throws MarshalException, ValidationException, IOException {\n        m_initialized = false;\n        EventconfFactory.init();\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetLabels() {\n        Map labels=EventconfFactory.getInstance().getEventLabels();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 5, labels.size());\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownUEI1), knownLabel1);\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownSubfileUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownSubfileUEI1), knownSubfileLabel1);\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownSubSubfileUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownSubSubfileUEI1), knownSubSubfileLabel1);\n     }","id":70876,"modified_method":"public void testGetLabels() {\n        Map labels=EventconfFactory.getInstance().getEventLabels();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 4, labels.size());\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownUEI1), knownLabel1);\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownSubfileUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownSubfileUEI1), knownSubfileLabel1);\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetLabel() {\n        EventconfFactory factory = EventconfFactory.getInstance();\n        assertEquals(\"Must have correct label\"+knownLabel1, knownLabel1, factory.getEventLabel(knownUEI1));\n        assertEquals(\"Must have correct label\"+knownSubfileLabel1, knownSubfileLabel1, factory.getEventLabel(knownSubfileUEI1));\n        assertEquals(\"Must have correct label\"+knownSubSubfileLabel1, knownSubSubfileLabel1, factory.getEventLabel(knownSubSubfileUEI1));\n    }","id":70877,"modified_method":"public void testGetLabel() {\n        EventconfFactory factory = EventconfFactory.getInstance();\n        assertEquals(\"Must have correct label\"+knownLabel1, knownLabel1, factory.getEventLabel(knownUEI1));\n        assertEquals(\"Must have correct label\"+knownSubfileLabel1, knownSubfileLabel1, factory.getEventLabel(knownSubfileUEI1));\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetEventByUEI() {\n        EventconfFactory factory=EventconfFactory.getInstance();\n        List result=factory.getEvents(knownUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        Event firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownUEI1, knownUEI1, firstEvent.getUei());\n        \n        result=factory.getEvents(\"uei.opennms.org/internal/capsd/nonexistent\");\n        assertNull(\"Should be null list for non-existent URI\", result);\n        \n        //Find an event that's in a sub-file\n        result=factory.getEvents(knownSubfileUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownSubfileUEI1,knownSubfileUEI1, firstEvent.getUei());\n \n        //Find an event that's in a nested-sub-file\n        result=factory.getEvents(knownSubSubfileUEI1);\n        assertNotNull(result);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownSubSubfileUEI1,knownSubSubfileUEI1, firstEvent.getUei());\n\n    }","id":70878,"modified_method":"public void testGetEventByUEI() {\n        EventconfFactory factory=EventconfFactory.getInstance();\n        List result=factory.getEvents(knownUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        Event firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownUEI1, knownUEI1, firstEvent.getUei());\n        \n        result=factory.getEvents(\"uei.opennms.org/internal/capsd/nonexistent\");\n        assertNull(\"Should be null list for non-existent URI\", result);\n        \n        //Find an event that's in a sub-file\n        result=factory.getEvents(knownSubfileUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownSubfileUEI1,knownSubfileUEI1, firstEvent.getUei());\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetEventUEIS() {\n        List ueis=EventconfFactory.getInstance().getEventUEIs();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 5, ueis.size());\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownUEI1));\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownSubfileUEI1));\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownSubSubfileUEI1));\n    }","id":70879,"modified_method":"public void testGetEventUEIS() {\n        List ueis=EventconfFactory.getInstance().getEventUEIs();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 4, ueis.size());\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownUEI1));\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownSubfileUEI1));\n    }","commit_id":"a742c0e7ad65f81f67b459c1fb8c8d56443ce044","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public List<Event> getEvents(String uei) {\n        List<Event> events = new ArrayList<Event>();\n\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                if (event.getUei().equals(uei)) {\n                    events.add(event);\n                }\n            }\n        }\n        if (events.size() > 0)\n            return events;\n        else\n            return null;\n    }","id":70880,"modified_method":"/**\n     * \n     */\n    public List<Event> getEvents(String uei) {\n        List<Event> events = new ArrayList<Event>();\n\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                if (event.getUei().equals(uei)) {\n                    events.add(event);\n                }\n            }\n        }\n        \n        if (events.size() > 0) {\n            return events;\n        } else {\n            return null;\n        }\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public static synchronized void init() throws IOException, MarshalException, ValidationException {\n        if (!initialized) {\n            m_rootConfigFile=ConfigFileConstants.getFile(ConfigFileConstants.EVENT_CONF_FILE_NAME);\n            m_programmaticStoreFile=new File(m_rootConfigFile.getParent() + File.separator + \"events/programmatic.events.xml\");\n            reload();\n            initialized = true;\n        }\n    }","id":70881,"modified_method":"/**\n     * \n     */\n    public static synchronized void init() throws IOException, MarshalException, ValidationException {\n        if (m_initialized) {\n            return;\n        }\n        \n        m_rootConfigFile = ConfigFileConstants.getFile(ConfigFileConstants.EVENT_CONF_FILE_NAME);\n        m_programmaticStoreFile = new File(m_rootConfigFile.getParent() + File.separator + PROGRAMMATIC_STORE_RELATIVE_PATH);\n        reload();\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * \n     */\n    public static synchronized void reload() throws IOException, MarshalException, ValidationException {\n        InputStream configIn = new FileInputStream(m_rootConfigFile);\n        Events events = ((Events) Unmarshaller.unmarshal(Events.class, new InputStreamReader(configIn)));\n       \n        m_eventFiles=new HashMap<File, Events>();\n        m_eventFiles.put(m_rootConfigFile, events);\n\n        //Create an array, and add any nested eventfiles defs found, to the end of the array.  \n        //Using the \"size\" field (rather than an enumeration) means we don't need any funky nesting logic\n        List<String> eventFiles=new ArrayList(events.getEventFileCollection());\n        \n        for(int i=0; i<eventFiles.size(); i++) {\n            String eventFilePath = (String) eventFiles.get(i);\n            File eventFile=new File(eventFilePath);\n            if(!eventFile.isAbsolute()) {\n                //This event file is specified with a relative path.  Get the absolute path relative to the root config file, and use \n                // that for all later file references\n                File tempFile=new File(m_rootConfigFile.getParent() + File.separator + eventFile.getPath());\n                eventFile=tempFile.getCanonicalFile();\n            }\n            InputStream fileIn = new FileInputStream(eventFile);\n            if (fileIn == null) {\n                throw new IOException(\"Eventconf: Failed to load/locate events file: \" + eventFile);\n            }\n\n            Reader filerdr = new InputStreamReader(fileIn);\n            Events filelevel = null;\n            filelevel = (Events) Unmarshaller.unmarshal(Events.class, filerdr);\n            m_eventFiles.put(eventFile, filelevel);\n            \n            //There are nested event-file definitions - load them as well\n            if(filelevel.getEventFileCount()>0) {\n                eventFiles.addAll(filelevel.getEventFileCollection());\n            }\n        }\n\n        //m_global = events.getGlobal();\n\n        initialized = true;\n    }","id":70882,"modified_method":"/**\n     * \n     */\n    public static synchronized void reload() throws IOException, MarshalException, ValidationException {\n        Events events = CastorUtils.unmarshal(Events.class, new FileReader(m_rootConfigFile));\n       \n        m_eventFiles = new HashMap<File, Events>();\n        m_eventFiles.put(m_rootConfigFile, events);\n\n        /*\n         * Create an array, and add any nested eventfiles defs found, to the end of the array.  \n         * Using the \"size\" field (rather than an enumeration) means we don't need any funky nesting logic\n         */\n        List<String> eventFiles = new ArrayList<String>(events.getEventFileCollection());\n        \n        for (String eventFilePath : eventFiles) {\n            File eventFile = new File(eventFilePath);\n            if (!eventFile.isAbsolute()) {\n                /*\n                 * This event file is specified with a relative path.  Get the absolute path relative to the root config file, and use \n                 * that for all later file references\n                 */\n                File tempFile = new File(m_rootConfigFile.getParent() + File.separator + eventFile.getPath());\n                eventFile = tempFile.getCanonicalFile();\n            }\n            \n            FileReader fileIn = new FileReader(eventFile);\n            if (fileIn == null) {\n                throw new IOException(\"Eventconf: Failed to load/locate events file: \" + eventFile);\n            }\n\n            Events filelevel = CastorUtils.unmarshal(Events.class, fileIn);\n            m_eventFiles.put(eventFile, filelevel);\n            \n            if (filelevel.getGlobal() != null) {\n                throw new ValidationException(\"The event file \" + eventFile + \" included from the top-level event configuration file cannot have a 'global' element\");\n            }\n            if (filelevel.getEventFileCollection().size() > 0) {\n                throw new ValidationException(\"The event file \" + eventFile + \" included from the top-level event configuration file cannot include other configuration files: \" + StringUtils.collectionToCommaDelimitedString(filelevel.getEventFileCollection()));\n            }\n        }\n\n        m_initialized = true;\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public String getEventLabel(String uei) {\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                if (event.getUei().equals(uei)) {\n                    return event.getEventLabel();\n                }   \n            }\n        }\n        return \"No label found for \" + uei;\n    }","id":70883,"modified_method":"/**\n     */\n    public String getEventLabel(String uei) {\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                if (event.getUei().equals(uei)) {\n                    return event.getEventLabel();\n                }   \n            }\n        }\n        return \"No label found for \" + uei;\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public List<String> getEventUEIs() {\n        List<String> eventUEIs = new ArrayList<String>();\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                eventUEIs.add(event.getUei());\n            }\n        }\n        return eventUEIs;\n    }","id":70884,"modified_method":"/**\n     */\n    public List<String> getEventUEIs() {\n        List<String> eventUEIs = new ArrayList<String>();\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                eventUEIs.add(event.getUei());\n            }\n        }\n        return eventUEIs;\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     */\n    public Map getEventLabels() {\n        TreeMap eventLabels = new TreeMap();\n        for(Events fileEvents : m_eventFiles.values()) {\n            for(int i=0; i<fileEvents.getEventCount(); i++) {\n                Event event=fileEvents.getEvent(i);\n                eventLabels.put(event.getUei(), event.getEventLabel());\n            }\n        }\n\n        return eventLabels;\n    }","id":70885,"modified_method":"/**\n     */\n    public Map<String, String> getEventLabels() {\n        Map<String, String> eventLabels = new TreeMap<String, String>();\n        for (Events fileEvents : m_eventFiles.values()) {\n            for (Event event : fileEvents.getEventCollection()) {\n                eventLabels.put(event.getUei(), event.getEventLabel());\n            }\n        }\n\n        return eventLabels;\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * EventconfFactory\n     * \n     * @return the single eventconf factory instance\n     */\n    static synchronized public EventconfFactory getInstance() {\n        if (!initialized)\n            return null;\n\n        if (instance == null) {\n            instance = new EventconfFactory();\n        }\n\n        return instance;\n    }","id":70886,"modified_method":"/**\n     * Singleton static call to get the only instance that should exist for the\n     * EventconfFactory\n     * \n     * @return the single eventconf factory instance\n     */\n    public static synchronized EventconfFactory getInstance() {\n        if (!m_initialized) {\n            return null;\n        }\n\n        if (s_instance == null) {\n            s_instance = new EventconfFactory();\n        }\n\n        return s_instance;\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * A full reinitialization, from scratch.  Subtly different from a reload (more encompassing).\n     * Safe to call in place of init if you so desire\n     * @throws IOException \n     * @throws ValidationException \n     * @throws MarshalException \n     *\n     */\n    public static synchronized void reinit() throws MarshalException, ValidationException, IOException {\n        initialized=false;\n        EventconfFactory.init();\n    }","id":70887,"modified_method":"/**\n     * A full reinitialization, from scratch.  Subtly different from a reload (more encompassing).\n     * Safe to call in place of init if you so desire\n     * @throws IOException \n     * @throws ValidationException \n     * @throws MarshalException \n     *\n     */\n    public static synchronized void reinit() throws MarshalException, ValidationException, IOException {\n        m_initialized = false;\n        EventconfFactory.init();\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List getEventsByLabel() {\n        ArrayList list = new ArrayList();\n        for(Events fileEvents : m_eventFiles.values()) {\n            list.addAll(fileEvents.getEventCollection());\n        }\n        Collections.sort(list, new EventLabelComparator());\n        return list;\n    }","id":70888,"modified_method":"public List<Event> getEventsByLabel() {\n        List<Event> list = new ArrayList<Event>();\n        for (Events fileEvents : m_eventFiles.values()) {\n            list.addAll(fileEvents.getEventCollection());\n        }\n        Collections.sort(list, new EventLabelComparator());\n        return list;\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetEventByUEI() {\n        EventconfFactory factory=EventconfFactory.getInstance();\n        List result=factory.getEvents(knownUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        Event firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownUEI1, knownUEI1, firstEvent.getUei());\n        \n        result=factory.getEvents(\"uei.opennms.org/internal/capsd/nonexistent\");\n        assertNull(\"Should be null list for non-existent URI\", result);\n        \n        //Find an event that's in a sub-file\n        result=factory.getEvents(knownSubfileUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownSubfileUEI1,knownSubfileUEI1, firstEvent.getUei());\n \n        //Find an event that's in a nested-sub-file\n        result=factory.getEvents(knownSubSubfileUEI1);\n        assertNotNull(result);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownSubSubfileUEI1,knownSubSubfileUEI1, firstEvent.getUei());\n\n    }","id":70889,"modified_method":"public void testGetEventByUEI() {\n        EventconfFactory factory=EventconfFactory.getInstance();\n        List result=factory.getEvents(knownUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        Event firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownUEI1, knownUEI1, firstEvent.getUei());\n        \n        result=factory.getEvents(\"uei.opennms.org/internal/capsd/nonexistent\");\n        assertNull(\"Should be null list for non-existent URI\", result);\n        \n        //Find an event that's in a sub-file\n        result=factory.getEvents(knownSubfileUEI1);\n        assertEquals(\"Should only be one result\", 1, result.size());\n        firstEvent=(Event)result.get(0);\n        assertEquals(\"UEI should be \"+knownSubfileUEI1,knownSubfileUEI1, firstEvent.getUei());\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetLabels() {\n        Map labels=EventconfFactory.getInstance().getEventLabels();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 5, labels.size());\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownUEI1), knownLabel1);\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownSubfileUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownSubfileUEI1), knownSubfileLabel1);\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownSubSubfileUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownSubSubfileUEI1), knownSubSubfileLabel1);\n     }","id":70890,"modified_method":"public void testGetLabels() {\n        Map labels=EventconfFactory.getInstance().getEventLabels();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 4, labels.size());\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownUEI1), knownLabel1);\n        assertTrue(\"Must contain known UEI\", labels.containsKey(knownSubfileUEI1));\n        assertEquals(\"Must have known Label\", labels.get(knownSubfileUEI1), knownSubfileLabel1);\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetLabel() {\n        EventconfFactory factory = EventconfFactory.getInstance();\n        assertEquals(\"Must have correct label\"+knownLabel1, knownLabel1, factory.getEventLabel(knownUEI1));\n        assertEquals(\"Must have correct label\"+knownSubfileLabel1, knownSubfileLabel1, factory.getEventLabel(knownSubfileUEI1));\n        assertEquals(\"Must have correct label\"+knownSubSubfileLabel1, knownSubSubfileLabel1, factory.getEventLabel(knownSubSubfileUEI1));\n    }","id":70891,"modified_method":"public void testGetLabel() {\n        EventconfFactory factory = EventconfFactory.getInstance();\n        assertEquals(\"Must have correct label\"+knownLabel1, knownLabel1, factory.getEventLabel(knownUEI1));\n        assertEquals(\"Must have correct label\"+knownSubfileLabel1, knownSubfileLabel1, factory.getEventLabel(knownSubfileUEI1));\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testGetEventUEIS() {\n        List ueis=EventconfFactory.getInstance().getEventUEIs();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 5, ueis.size());\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownUEI1));\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownSubfileUEI1));\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownSubSubfileUEI1));\n    }","id":70892,"modified_method":"public void testGetEventUEIS() {\n        List ueis=EventconfFactory.getInstance().getEventUEIs();\n        //This test assumes the test eventconf files only have X events in them.  Adjust as you modify eventconf.xml and sub files\n        assertEquals(\"Count must be correct\", 4, ueis.size());\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownUEI1));\n        assertTrue(\"Must contain known UEI\", ueis.contains(knownSubfileUEI1));\n    }","commit_id":"382e0c609b4e16eae0201dfe2f7ca15a5f8c17e3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n\tpublic void testOriginalCoverImageStored() throws Exception {\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tint initialFolderFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextTestUtil.getServiceContext(\n\t\t\t\t_group.getGroupId(), _user.getUserId());\n\n\t\tFileEntry fileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image.jpg\", serviceContext);\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\tfileEntry.getFileEntryId(), StringPool.BLANK, _IMAGE_CROP_REGION);\n\t\tImageSelector smallImageSelector = null;\n\n\t\tBlogsEntryLocalServiceUtil.addEntry(\n\t\t\t_user.getUserId(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), new Date(), true, true,\n\t\t\tnew String[0], StringPool.BLANK, coverImageSelector,\n\t\t\tsmallImageSelector, serviceContext);\n\n\t\tint finalPortletFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderFileEntriesCount + 1, finalPortletFileEntriesCount);\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image.jpg\");\n\t}","id":70893,"modified_method":"@Test\n\tpublic void testOriginalCoverImageStored() throws Exception {\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tint initialFolderFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\taddBlogsEntry(\"image.jpg\");\n\n\t\tint finalPortletFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderFileEntriesCount + 1, finalPortletFileEntriesCount);\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image.jpg\");\n\t}","commit_id":"a13b2e2c7199f1a9d4d3fa313e998080fcddfe30","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test(expected = NoSuchFileEntryException.class)\n\tpublic void testPreviousCoverImageDeletedWhenChangingCoverImage()\n\t\tthrows Exception {\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextTestUtil.getServiceContext(\n\t\t\t\t_group.getGroupId(), _user.getUserId());\n\n\t\tFileEntry fileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image1.jpg\", serviceContext);\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\tfileEntry.getFileEntryId(), StringPool.BLANK, _IMAGE_CROP_REGION);\n\t\tImageSelector smallImageSelector = null;\n\n\t\tBlogsEntry entry = BlogsEntryLocalServiceUtil.addEntry(\n\t\t\t_user.getUserId(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), new Date(), true, true,\n\t\t\tnew String[0], StringPool.BLANK, coverImageSelector,\n\t\t\tsmallImageSelector, serviceContext);\n\n\t\tFileEntry initialCoverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tfileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image2.jpg\", serviceContext);\n\n\t\tcoverImageSelector = new ImageSelector(\n\t\t\tfileEntry.getFileEntryId(), StringPool.BLANK, _IMAGE_CROP_REGION);\n\n\t\tentry = BlogsEntryLocalServiceUtil.updateEntry(\n\t\t\t_user.getUserId(), entry.getEntryId(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tnew Date(), true, true, new String[0], StringPool.BLANK,\n\t\t\tcoverImageSelector, smallImageSelector, serviceContext);\n\n\t\tFileEntry finalCoverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tAssert.assertEquals(\"image2.jpg\", finalCoverImageFileEntry.getTitle());\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\tinitialCoverImageFileEntry.getFileEntryId());\n\t}","id":70894,"modified_method":"@Test(expected = NoSuchFileEntryException.class)\n\tpublic void testPreviousCoverImageDeletedWhenChangingCoverImage()\n\t\tthrows Exception {\n\n\t\tBlogsEntry entry = addBlogsEntry(\"image.jpg\");\n\n\t\tFileEntry initialCoverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tupdateBlogsEntry(entry.getEntryId(), \"image2.jpg\");\n\n\t\tFileEntry finalCoverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tAssert.assertEquals(\"image2.jpg\", finalCoverImageFileEntry.getTitle());\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\tinitialCoverImageFileEntry.getFileEntryId());\n\t}","commit_id":"a13b2e2c7199f1a9d4d3fa313e998080fcddfe30","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testCoverImageStored() throws Exception {\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextTestUtil.getServiceContext(\n\t\t\t\t_group.getGroupId(), _user.getUserId());\n\n\t\tFileEntry fileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image.jpg\", serviceContext);\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\tfileEntry.getFileEntryId(), StringPool.BLANK, _IMAGE_CROP_REGION);\n\t\tImageSelector smallImageSelector = null;\n\n\t\tBlogsEntry entry = BlogsEntryLocalServiceUtil.addEntry(\n\t\t\t_user.getUserId(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), new Date(), true, true,\n\t\t\tnew String[0], StringPool.BLANK, coverImageSelector,\n\t\t\tsmallImageSelector, serviceContext);\n\n\t\tFileEntry coverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tRepository repository = RepositoryLocalServiceUtil.getRepository(\n\t\t\tcoverImageFileEntry.getRepositoryId());\n\n\t\tAssert.assertEquals(BlogsConstants.SERVICE_NAME, repository.getName());\n\n\t\tFolder coverImageFolder = coverImageFileEntry.getFolder();\n\n\t\tAssert.assertNotEquals(\n\t\t\tBlogsConstants.SERVICE_NAME, coverImageFolder.getName());\n\t\tAssert.assertEquals(\"image.jpg\", coverImageFileEntry.getTitle());\n\t}","id":70895,"modified_method":"@Test\n\tpublic void testCoverImageStored() throws Exception {\n\t\tBlogsEntry entry = addBlogsEntry(\"image.jpg\");\n\n\t\tFileEntry coverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tRepository repository = RepositoryLocalServiceUtil.getRepository(\n\t\t\tcoverImageFileEntry.getRepositoryId());\n\n\t\tAssert.assertEquals(BlogsConstants.SERVICE_NAME, repository.getName());\n\n\t\tFolder coverImageFolder = coverImageFileEntry.getFolder();\n\n\t\tAssert.assertNotEquals(\n\t\t\tBlogsConstants.SERVICE_NAME, coverImageFolder.getName());\n\t\tAssert.assertEquals(\"image.jpg\", coverImageFileEntry.getTitle());\n\t}","commit_id":"a13b2e2c7199f1a9d4d3fa313e998080fcddfe30","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testOriginalCoverImageNotDeletedWhenEmptyCoverImageSelector()\n\t\tthrows Exception {\n\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tint initialFolderFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextTestUtil.getServiceContext(\n\t\t\t\t_group.getGroupId(), _user.getUserId());\n\n\t\tFileEntry fileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image1.jpg\", serviceContext);\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\tfileEntry.getFileEntryId(), StringPool.BLANK, _IMAGE_CROP_REGION);\n\t\tImageSelector smallImageSelector = null;\n\n\t\tBlogsEntry entry = BlogsEntryLocalServiceUtil.addEntry(\n\t\t\t_user.getUserId(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), new Date(), true, true,\n\t\t\tnew String[0], StringPool.BLANK, coverImageSelector,\n\t\t\tsmallImageSelector, serviceContext);\n\n\t\tcoverImageSelector = new ImageSelector(\n\t\t\t0, StringPool.BLANK, StringPool.BLANK);\n\n\t\tBlogsEntryLocalServiceUtil.updateEntry(\n\t\t\t_user.getUserId(), entry.getEntryId(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tnew Date(), true, true, new String[0], StringPool.BLANK,\n\t\t\tcoverImageSelector, smallImageSelector, serviceContext);\n\n\t\tint finalPortletFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderFileEntriesCount + 1, finalPortletFileEntriesCount);\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image1.jpg\");\n\t}","id":70896,"modified_method":"@Test\n\tpublic void testOriginalCoverImageNotDeletedWhenEmptyCoverImageSelector()\n\t\tthrows Exception {\n\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tint initialFolderFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tBlogsEntry entry = addBlogsEntry(\"image.jpg\");\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\t0, StringPool.BLANK, StringPool.BLANK);\n\n\t\tupdateBlogsEntry(entry.getEntryId(), coverImageSelector);\n\n\t\tint finalPortletFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderFileEntriesCount + 1, finalPortletFileEntriesCount);\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image.jpg\");\n\t}","commit_id":"a13b2e2c7199f1a9d4d3fa313e998080fcddfe30","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testCoverImageNotChangedWhenNullCoverImageSelector()\n\t\tthrows Exception {\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextTestUtil.getServiceContext(\n\t\t\t\t_group.getGroupId(), _user.getUserId());\n\n\t\tFileEntry fileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image1.jpg\", serviceContext);\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\tfileEntry.getFileEntryId(), StringPool.BLANK, _IMAGE_CROP_REGION);\n\t\tImageSelector smallImageSelector = null;\n\n\t\tBlogsEntry entry = BlogsEntryLocalServiceUtil.addEntry(\n\t\t\t_user.getUserId(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), new Date(), true, true,\n\t\t\tnew String[0], StringPool.BLANK, coverImageSelector,\n\t\t\tsmallImageSelector, serviceContext);\n\n\t\tFileEntry coverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tcoverImageSelector = null;\n\n\t\tentry = BlogsEntryLocalServiceUtil.updateEntry(\n\t\t\t_user.getUserId(), entry.getEntryId(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tnew Date(), true, true, new String[0], StringPool.BLANK,\n\t\t\tcoverImageSelector, smallImageSelector, serviceContext);\n\n\t\tAssert.assertEquals(\n\t\t\tcoverImageFileEntry.getFileEntryId(),\n\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image1.jpg\");\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\tcoverImageFileEntry.getFileEntryId());\n\t}","id":70897,"modified_method":"@Test\n\tpublic void testCoverImageNotChangedWhenNullCoverImageSelector()\n\t\tthrows Exception {\n\n\t\tBlogsEntry entry = addBlogsEntry(\"image.jpg\");\n\n\t\tFileEntry coverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tImageSelector coverImageSelector = null;\n\n\t\tupdateBlogsEntry(entry.getEntryId(), coverImageSelector);\n\n\t\tAssert.assertEquals(\n\t\t\tcoverImageFileEntry.getFileEntryId(),\n\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image.jpg\");\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\tcoverImageFileEntry.getFileEntryId());\n\t}","commit_id":"a13b2e2c7199f1a9d4d3fa313e998080fcddfe30","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test(expected = NoSuchFileEntryException.class)\n\tpublic void testCoverImageDeletedWhenEmptyCoverImageSelector()\n\t\tthrows Exception {\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextTestUtil.getServiceContext(\n\t\t\t\t_group.getGroupId(), _user.getUserId());\n\n\t\tFileEntry fileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image1.jpg\", serviceContext);\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\tfileEntry.getFileEntryId(), StringPool.BLANK, _IMAGE_CROP_REGION);\n\t\tImageSelector smallImageSelector = null;\n\n\t\tBlogsEntry entry = BlogsEntryLocalServiceUtil.addEntry(\n\t\t\t_user.getUserId(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), new Date(), true, true,\n\t\t\tnew String[0], StringPool.BLANK, coverImageSelector,\n\t\t\tsmallImageSelector, serviceContext);\n\n\t\tFileEntry coverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tcoverImageSelector = new ImageSelector(\n\t\t\t0, StringPool.BLANK, StringPool.BLANK);\n\n\t\tentry = BlogsEntryLocalServiceUtil.updateEntry(\n\t\t\t_user.getUserId(), entry.getEntryId(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tnew Date(), true, true, new String[0], StringPool.BLANK,\n\t\t\tcoverImageSelector, smallImageSelector, serviceContext);\n\n\t\tAssert.assertEquals(0, entry.getCoverImageFileEntryId());\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\tcoverImageFileEntry.getFileEntryId());\n\t}","id":70898,"modified_method":"@Test(expected = NoSuchFileEntryException.class)\n\tpublic void testCoverImageDeletedWhenEmptyCoverImageSelector()\n\t\tthrows Exception {\n\n\t\tBlogsEntry entry = addBlogsEntry(\"image.jpg\");\n\n\t\tFileEntry coverImageFileEntry =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t\tentry.getCoverImageFileEntryId());\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\t0, StringPool.BLANK, StringPool.BLANK);\n\n\t\tupdateBlogsEntry(entry.getEntryId(), coverImageSelector);\n\n\t\tAssert.assertEquals(0, entry.getCoverImageFileEntryId());\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\tcoverImageFileEntry.getFileEntryId());\n\t}","commit_id":"a13b2e2c7199f1a9d4d3fa313e998080fcddfe30","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testPreviousOriginalCoverImageNotDeletedWhenChangingCoverImage()\n\t\tthrows Exception {\n\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tint initialFolderFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextTestUtil.getServiceContext(\n\t\t\t\t_group.getGroupId(), _user.getUserId());\n\n\t\tFileEntry initialFileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image1.jpg\", serviceContext);\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\tinitialFileEntry.getFileEntryId(), StringPool.BLANK,\n\t\t\t_IMAGE_CROP_REGION);\n\t\tImageSelector smallImageSelector = null;\n\n\t\tBlogsEntry entry = BlogsEntryLocalServiceUtil.addEntry(\n\t\t\t_user.getUserId(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), new Date(), true, true,\n\t\t\tnew String[0], StringPool.BLANK, coverImageSelector,\n\t\t\tsmallImageSelector, serviceContext);\n\n\t\tFileEntry finalFileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image2.jpg\", serviceContext);\n\n\t\tcoverImageSelector = new ImageSelector(\n\t\t\tfinalFileEntry.getFileEntryId(), StringPool.BLANK,\n\t\t\t_IMAGE_CROP_REGION);\n\n\t\tBlogsEntryLocalServiceUtil.updateEntry(\n\t\t\t_user.getUserId(), entry.getEntryId(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tnew Date(), true, true, new String[0], StringPool.BLANK,\n\t\t\tcoverImageSelector, smallImageSelector, serviceContext);\n\n\t\tint finalPortletFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderFileEntriesCount + 2, finalPortletFileEntriesCount);\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image1.jpg\");\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image2.jpg\");\n\t}","id":70899,"modified_method":"@Test\n\tpublic void testPreviousOriginalCoverImageNotDeletedWhenChangingCoverImage()\n\t\tthrows Exception {\n\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tint initialFolderFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tBlogsEntry entry = addBlogsEntry(\"image.jpg\");\n\n\t\tupdateBlogsEntry(entry.getEntryId(), \"image2.jpg\");\n\n\t\tint finalPortletFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderFileEntriesCount + 2, finalPortletFileEntriesCount);\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image.jpg\");\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image2.jpg\");\n\t}","commit_id":"a13b2e2c7199f1a9d4d3fa313e998080fcddfe30","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testOriginalCoverImageNotDeletedWhenNullCoverImageSelector()\n\t\tthrows Exception {\n\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tint initialFolderFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextTestUtil.getServiceContext(\n\t\t\t\t_group.getGroupId(), _user.getUserId());\n\n\t\tFileEntry fileEntry = getTempFileEntry(\n\t\t\t_user.getUserId(), \"image1.jpg\", serviceContext);\n\n\t\tImageSelector coverImageSelector = new ImageSelector(\n\t\t\tfileEntry.getFileEntryId(), StringPool.BLANK, _IMAGE_CROP_REGION);\n\t\tImageSelector smallImageSelector = null;\n\n\t\tBlogsEntry entry = BlogsEntryLocalServiceUtil.addEntry(\n\t\t\t_user.getUserId(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), new Date(), true, true,\n\t\t\tnew String[0], StringPool.BLANK, coverImageSelector,\n\t\t\tsmallImageSelector, serviceContext);\n\n\t\tcoverImageSelector = null;\n\n\t\tBlogsEntryLocalServiceUtil.updateEntry(\n\t\t\t_user.getUserId(), entry.getEntryId(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tRandomTestUtil.randomString(), RandomTestUtil.randomString(),\n\t\t\tnew Date(), true, true, new String[0], StringPool.BLANK,\n\t\t\tcoverImageSelector, smallImageSelector, serviceContext);\n\n\t\tint finalPortletFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderFileEntriesCount + 1, finalPortletFileEntriesCount);\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image1.jpg\");\n\t}","id":70900,"modified_method":"@Test\n\tpublic void testOriginalCoverImageNotDeletedWhenNullCoverImageSelector()\n\t\tthrows Exception {\n\n\t\tFolder folder = BlogsEntryLocalServiceUtil.addAttachmentsFolder(\n\t\t\t_user.getUserId(), _group.getGroupId());\n\n\t\tint initialFolderFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tBlogsEntry entry = addBlogsEntry(\"image.jpg\");\n\n\t\tImageSelector coverImageSelector = null;\n\n\t\tupdateBlogsEntry(entry.getEntryId(), coverImageSelector);\n\n\t\tint finalPortletFileEntriesCount =\n\t\t\tPortletFileRepositoryUtil.getPortletFileEntriesCount(\n\t\t\t\t_group.getGroupId(), folder.getFolderId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderFileEntriesCount + 1, finalPortletFileEntriesCount);\n\n\t\tPortletFileRepositoryUtil.getPortletFileEntry(\n\t\t\t_group.getGroupId(), folder.getFolderId(), \"image.jpg\");\n\t}","commit_id":"a13b2e2c7199f1a9d4d3fa313e998080fcddfe30","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        System.setProperty(\"opennms.home\", \"/opt/opennms\");\n        MockUtil.println(\"------------ Begin Test \" + getName() + \" --------------------------\");\n        MockLogAppender.setupLogging();\n\n        MockNetwork m_network = new MockNetwork();\n        m_network.setCriticalService(\"ICMP\");\n        m_network.addNode(1, \"testnode\");\n        m_network.addInterface(InetAddress.getByName(m_testHostName).getHostAddress());\n        m_network.addService(\"ICMP\");\n        m_network.addService(\"HTTP\");\n\n        MockDatabase m_db = new MockDatabase();\n        m_db.populate(m_network);\n\n        DataSourceFactory.setInstance(m_db);\n        \n        MockEventIpcManager eventIpcManager = new MockEventIpcManager();\n        \n        EventIpcManagerFactory.setIpcManager(eventIpcManager);\n        \n        RrdTestUtils.initialize();\n        \n        initializeDatabaseSchemaConfig(\"/org/opennms/netmgt/config/test-database-schema.xml\");\n        \n        setTransMgr();\n        setFileAnticipator();\n    }","id":70901,"modified_method":"@Before\n    public void setUp() throws Exception {\n        assertNotNull(m_mockEventIpcManager);\n        assertNotNull(m_ipInterfaceDao);\n        assertNotNull(m_nodeDao);\n\n        if (m_nodeDao.findByLabel(\"testnode\").size() == 0) {\n            NetworkBuilder builder = new NetworkBuilder(m_distPoller);\n            builder.addNode(\"testnode\");\n            builder.addInterface(InetAddress.getByName(m_testHostName).getHostAddress()).setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n            builder.addService(getServiceType(\"ICMP\"));\n            builder.addService(getServiceType(\"HTTP\"));\n            if (m_nodeDao == null) {\n                throw new Exception(\"node DAO does not exist!\");\n            }\n            OnmsNode n = builder.getCurrentNode();\n            assertNotNull(n);\n            m_nodeDao.save(n);\n            m_nodeDao.flush();\n        }\n\n        HttpCollector collector = new HttpCollector();\n\n        Collection<OnmsIpInterface> ifaces = m_ipInterfaceDao.findByIpAddress(m_testHostName);\n        assertEquals(1, ifaces.size());\n        OnmsIpInterface iface = ifaces.iterator().next();\n        \n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"collection\", \"default\");\n        collector.initialize(parameters);\n\n        m_collectionSpecification = CollectorTestUtils.createCollectionSpec(\"HTTP\", collector, \"default\");\n        m_collectionAgent = DefaultCollectionAgent.create(iface.getId(), m_ipInterfaceDao, m_transactionManager);\n    }","commit_id":"c26a8ab1b7bd2514e47ebc47028174f32554500f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public final void testPersist() throws Exception {\n        InetAddress opennmsDotOrg = InetAddress.getByName(m_testHostName);\n        \n        initializeHttpDatacollectionConfigFactory(\"/org/opennms/netmgt/config/http-datacollection-persist-test-config.xml\");\n        RrdTestUtils.initialize();\n        HttpCollector collector = new HttpCollector();\n        OnmsDistPoller distPoller = new OnmsDistPoller(\"localhost\", \"127.0.0.1\");\n        OnmsNode node = new OnmsNode(distPoller);\n        node.setId(1);\n        OnmsIpInterface iface = new OnmsIpInterface(opennmsDotOrg.getHostAddress(), node );\n        iface.setId(2);\n        node.addIpInterface(iface);\n\n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"collection\", \"default\");\n        collector.initialize(parameters);\n        \n        CollectionSpecification spec = createCollectionSpec(\"HTTP\", collector, \"default\");\n        \n        CollectionAgent agent = createCollectionAgent(iface);\n        \n        // node level collection\n        File nodeDir = anticipatePath(getSnmpRrdDirectory(), \"1\");\n        anticipateRrdFiles(nodeDir, \"documentCount\", \"documentType\", \"greatAnswer\");\n        File documentCountRrdFile = new File(nodeDir, rrd(\"documentCount\"));\n        File someNumberRrdFile = new File(nodeDir, rrd(\"someNumber\"));\n        File greatAnswerRrdFile = new File(nodeDir, rrd(\"greatAnswer\"));\n        \n        int numUpdates = 2;\n        int stepSizeInSecs = 1;\n        \n        int stepSizeInMillis = stepSizeInSecs*1000;\n\n        spec.initialize(agent);\n        \n        collectNTimes(spec, agent, numUpdates);\n        \n        // This is the value of documentCount from the first test page\n        // documentCount = Gauge32: 5\n        assertEquals(5.0, RrdUtils.fetchLastValueInRange(documentCountRrdFile.getAbsolutePath(), \"documentCount\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of documentType from the first test page\n        // someNumber = Gauge32: 17\n        assertEquals(17.0, RrdUtils.fetchLastValueInRange(someNumberRrdFile.getAbsolutePath(), \"someNumber\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of greatAnswer from the second test page\n        //someNumber = Gauge32: 42\n        assertEquals(42.0, RrdUtils.fetchLastValueInRange(greatAnswerRrdFile.getAbsolutePath(), \"greatAnswer\", stepSizeInMillis, stepSizeInMillis));\n        \n        spec.release(agent);\n        \n        // Wait for any RRD writes to finish up\n        Thread.sleep(1000);\n    }","id":70902,"modified_method":"@Test\n    @JUnitCollector(datacollectionConfig=\"/org/opennms/netmgt/config/http-datacollection-persist-test-config.xml\", datacollectionType=\"http\",\n                    anticipateRrds={ \"1/documentCount\", \"1/greatAnswer\", \"1/someNumber\" }, anticipateFiles={ \"1/strings.properties\" })\n    public final void testPersist() throws Exception {\n        File snmpRrdDirectory = (File)m_context.getAttribute(\"rrdDirectory\");\n        FileAnticipator anticipator = (FileAnticipator)m_context.getAttribute(\"fileAnticipator\");\n\n        int numUpdates = 2;\n        int stepSizeInSecs = 1;\n        \n        int stepSizeInMillis = stepSizeInSecs*1000;\n\n        m_collectionSpecification.initialize(m_collectionAgent);\n        \n        CollectorTestUtils.collectNTimes(m_collectionSpecification, m_collectionAgent, numUpdates);\n        \n        // node level collection\n        File nodeDir = CollectorTestUtils.anticipatePath(anticipator, snmpRrdDirectory, \"1\");\n        File documentCountRrdFile = new File(nodeDir, CollectorTestUtils.rrd(\"documentCount\"));\n        File someNumberRrdFile = new File(nodeDir, CollectorTestUtils.rrd(\"someNumber\"));\n        File greatAnswerRrdFile = new File(nodeDir, CollectorTestUtils.rrd(\"greatAnswer\"));\n\n       // This is the value of documentCount from the first test page\n        // documentCount = Gauge32: 5\n        assertEquals(\"documentCount\", Double.valueOf(5.0), RrdUtils.fetchLastValueInRange(documentCountRrdFile.getAbsolutePath(), \"documentCount\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of documentType from the first test page\n        // someNumber = Gauge32: 17\n        assertEquals(\"documentType\", Double.valueOf(17.0), RrdUtils.fetchLastValueInRange(someNumberRrdFile.getAbsolutePath(), \"someNumber\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of greatAnswer from the second test page\n        //someNumber = Gauge32: 42\n        assertEquals(\"greatAnswer\", Double.valueOf(42.0), RrdUtils.fetchLastValueInRange(greatAnswerRrdFile.getAbsolutePath(), \"greatAnswer\", stepSizeInMillis, stepSizeInMillis));\n        \n        m_collectionSpecification.release(m_collectionAgent);\n    }","commit_id":"c26a8ab1b7bd2514e47ebc47028174f32554500f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Test method for {@link org.opennms.netmgt.collectd.HttpCollector#collect(\n     *   org.opennms.netmgt.collectd.CollectionAgent, org.opennms.netmgt.model.events.EventProxy, java.util.Map)}.\n     */\n    @Test\n    public final void testCollect() throws Exception {\n        InetAddress opennmsDotOrg = InetAddress.getByName(m_testHostName);\n        \n        initializeHttpDatacollectionConfigFactory(\"/org/opennms/netmgt/config/http-datacollection-config.xml\");\n        RrdTestUtils.initializeNullStrategy();\n        HttpCollector collector = new HttpCollector();\n        OnmsDistPoller distPoller = new OnmsDistPoller(\"localhost\", \"127.0.0.1\");\n        OnmsNode node = new OnmsNode(distPoller);\n        node.setId(1);\n        OnmsIpInterface iface = new OnmsIpInterface(opennmsDotOrg.getHostAddress(), node );\n        iface.setId(2);\n        node.addIpInterface(iface);\n\n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"collection\", \"default\");\n        collector.initialize(parameters);\n        \n        CollectionSpecification spec = createCollectionSpec(\"HTTP\", collector, \"default\");\n        \n        CollectionAgent agent = createCollectionAgent(iface);\n        \n        // node level collection\n        File nodeDir = anticipatePath(getSnmpRrdDirectory(), \"1\");\n        anticipateRrdFiles(nodeDir, \"documentCount\");\n        anticipateRrdFiles(nodeDir, \"documentType\");\n        anticipateRrdFiles(nodeDir, \"greatAnswer\");\n\n        spec.initialize(agent);\n        \n        CollectionSet collectionSet = spec.collect(agent);\n        assertEquals(\"collection status\",\n                     ServiceCollector.COLLECTION_SUCCEEDED,\n                     collectionSet.getStatus());\n        persistCollectionSet(spec, collectionSet);\n        \n        spec.release(agent);\n        \n        // Wait for any RRD writes to finish up\n        Thread.sleep(1000);\n    }","id":70903,"modified_method":"/**\n     * Test method for {@link org.opennms.netmgt.collectd.HttpCollector#collect(\n     *   org.opennms.netmgt.collectd.CollectionAgent, org.opennms.netmgt.model.events.EventProxy, java.util.Map)}.\n     */\n    @Test\n    @JUnitCollector(datacollectionConfig=\"/org/opennms/netmgt/config/http-datacollection-config.xml\", datacollectionType=\"http\",\n                    anticipateRrds={ \"1/documentCount\", \"1/greatAnswer\", \"1/someNumber\" }, anticipateFiles={ \"1/strings.properties\" })\n    public final void testCollect() throws Exception {\n        m_collectionSpecification.initialize(m_collectionAgent);\n\n        CollectionSet collectionSet = m_collectionSpecification.collect(m_collectionAgent);\n        assertEquals(\"collection status\", ServiceCollector.COLLECTION_SUCCEEDED, collectionSet.getStatus());\n        CollectorTestUtils.persistCollectionSet(m_collectionSpecification, collectionSet);\n\n        m_collectionSpecification.release(m_collectionAgent);\n    }","commit_id":"c26a8ab1b7bd2514e47ebc47028174f32554500f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"void logIfAliasConfig() {\n    \tlog().info(\"domain: \" + getDomain() + \", \"\n    \t\t\t+ \"storeByNodeID: \" + getStoreByNodeID() + \", \"\n    \t\t\t+ \"storeByIfAlias: \" + getStoreByIfAlias() + \", \"\n\t\t\t\t+ \"storFlagOverride: \" + getStorFlagOverride() + \", \"\n\t\t\t\t+ \"ifAliasComment: \" + getIfAliasComment());\n    }","id":70904,"modified_method":"void logIfAliasConfig() {\n    \tlog().info(this.toString());\n    }","commit_id":"c26a8ab1b7bd2514e47ebc47028174f32554500f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public final void testPersist() throws Exception {\n        InetAddress opennmsDotOrg = InetAddress.getByName(m_testHostName);\n        \n        initializeHttpDatacollectionConfigFactory(\"/org/opennms/netmgt/config/http-datacollection-persist-test-config.xml\");\n        RrdTestUtils.initialize();\n        HttpCollector collector = new HttpCollector();\n        OnmsDistPoller distPoller = new OnmsDistPoller(\"localhost\", \"127.0.0.1\");\n        OnmsNode node = new OnmsNode(distPoller);\n        node.setId(1);\n        OnmsIpInterface iface = new OnmsIpInterface(opennmsDotOrg.getHostAddress(), node );\n        iface.setId(2);\n        node.addIpInterface(iface);\n\n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"collection\", \"default\");\n        collector.initialize(parameters);\n        \n        CollectionSpecification spec = createCollectionSpec(\"HTTP\", collector, \"default\");\n        \n        CollectionAgent agent = createCollectionAgent(iface);\n        \n        // node level collection\n        File nodeDir = anticipatePath(getSnmpRrdDirectory(), \"1\");\n        anticipateRrdFiles(nodeDir, \"documentCount\", \"documentType\", \"greatAnswer\");\n        File documentCountRrdFile = new File(nodeDir, rrd(\"documentCount\"));\n        File someNumberRrdFile = new File(nodeDir, rrd(\"someNumber\"));\n        File greatAnswerRrdFile = new File(nodeDir, rrd(\"greatAnswer\"));\n        \n        int numUpdates = 2;\n        int stepSizeInSecs = 1;\n        \n        int stepSizeInMillis = stepSizeInSecs*1000;\n\n        spec.initialize(agent);\n        \n        collectNTimes(spec, agent, numUpdates);\n        \n        // This is the value of documentCount from the first test page\n        // documentCount = Gauge32: 5\n        assertEquals(5.0, RrdUtils.fetchLastValueInRange(documentCountRrdFile.getAbsolutePath(), \"documentCount\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of documentType from the first test page\n        // someNumber = Gauge32: 17\n        assertEquals(17.0, RrdUtils.fetchLastValueInRange(someNumberRrdFile.getAbsolutePath(), \"someNumber\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of greatAnswer from the second test page\n        //someNumber = Gauge32: 42\n        assertEquals(42.0, RrdUtils.fetchLastValueInRange(greatAnswerRrdFile.getAbsolutePath(), \"greatAnswer\", stepSizeInMillis, stepSizeInMillis));\n        \n        spec.release(agent);\n        \n        // Wait for any RRD writes to finish up\n        Thread.sleep(1000);\n    }","id":70905,"modified_method":"@Test\n    @JUnitCollector(datacollectionConfig=\"/org/opennms/netmgt/config/http-datacollection-persist-test-config.xml\", datacollectionType=\"http\",\n                    anticipateRrds={ \"1/documentCount\", \"1/greatAnswer\", \"1/someNumber\" }, anticipateFiles={ \"1/strings.properties\" })\n    public final void testPersist() throws Exception {\n        File snmpRrdDirectory = (File)m_context.getAttribute(\"rrdDirectory\");\n        FileAnticipator anticipator = (FileAnticipator)m_context.getAttribute(\"fileAnticipator\");\n\n        int numUpdates = 2;\n        int stepSizeInSecs = 1;\n        \n        int stepSizeInMillis = stepSizeInSecs*1000;\n\n        m_collectionSpecification.initialize(m_collectionAgent);\n        \n        CollectorTestUtils.collectNTimes(m_collectionSpecification, m_collectionAgent, numUpdates);\n        \n        // node level collection\n        File nodeDir = CollectorTestUtils.anticipatePath(anticipator, snmpRrdDirectory, \"1\");\n        File documentCountRrdFile = new File(nodeDir, CollectorTestUtils.rrd(\"documentCount\"));\n        File someNumberRrdFile = new File(nodeDir, CollectorTestUtils.rrd(\"someNumber\"));\n        File greatAnswerRrdFile = new File(nodeDir, CollectorTestUtils.rrd(\"greatAnswer\"));\n\n       // This is the value of documentCount from the first test page\n        // documentCount = Gauge32: 5\n        assertEquals(\"documentCount\", Double.valueOf(5.0), RrdUtils.fetchLastValueInRange(documentCountRrdFile.getAbsolutePath(), \"documentCount\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of documentType from the first test page\n        // someNumber = Gauge32: 17\n        assertEquals(\"documentType\", Double.valueOf(17.0), RrdUtils.fetchLastValueInRange(someNumberRrdFile.getAbsolutePath(), \"someNumber\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of greatAnswer from the second test page\n        //someNumber = Gauge32: 42\n        assertEquals(\"greatAnswer\", Double.valueOf(42.0), RrdUtils.fetchLastValueInRange(greatAnswerRrdFile.getAbsolutePath(), \"greatAnswer\", stepSizeInMillis, stepSizeInMillis));\n        \n        m_collectionSpecification.release(m_collectionAgent);\n    }","commit_id":"201bfe8ac93258144bfe6763f5d09333aedc9b55","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Test method for {@link org.opennms.netmgt.collectd.HttpCollector#collect(\n     *   org.opennms.netmgt.collectd.CollectionAgent, org.opennms.netmgt.model.events.EventProxy, java.util.Map)}.\n     */\n    @Test\n    public final void testCollect() throws Exception {\n        InetAddress opennmsDotOrg = InetAddress.getByName(m_testHostName);\n        \n        initializeHttpDatacollectionConfigFactory(\"/org/opennms/netmgt/config/http-datacollection-config.xml\");\n        RrdTestUtils.initializeNullStrategy();\n        HttpCollector collector = new HttpCollector();\n        OnmsDistPoller distPoller = new OnmsDistPoller(\"localhost\", \"127.0.0.1\");\n        OnmsNode node = new OnmsNode(distPoller);\n        node.setId(1);\n        OnmsIpInterface iface = new OnmsIpInterface(opennmsDotOrg.getHostAddress(), node );\n        iface.setId(2);\n        node.addIpInterface(iface);\n\n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"collection\", \"default\");\n        collector.initialize(parameters);\n        \n        CollectionSpecification spec = createCollectionSpec(\"HTTP\", collector, \"default\");\n        \n        CollectionAgent agent = createCollectionAgent(iface);\n        \n        // node level collection\n        File nodeDir = anticipatePath(getSnmpRrdDirectory(), \"1\");\n        anticipateRrdFiles(nodeDir, \"documentCount\");\n        anticipateRrdFiles(nodeDir, \"documentType\");\n        anticipateRrdFiles(nodeDir, \"greatAnswer\");\n\n        spec.initialize(agent);\n        \n        CollectionSet collectionSet = spec.collect(agent);\n        assertEquals(\"collection status\",\n                     ServiceCollector.COLLECTION_SUCCEEDED,\n                     collectionSet.getStatus());\n        persistCollectionSet(spec, collectionSet);\n        \n        spec.release(agent);\n        \n        // Wait for any RRD writes to finish up\n        Thread.sleep(1000);\n    }","id":70906,"modified_method":"/**\n     * Test method for {@link org.opennms.netmgt.collectd.HttpCollector#collect(\n     *   org.opennms.netmgt.collectd.CollectionAgent, org.opennms.netmgt.model.events.EventProxy, java.util.Map)}.\n     */\n    @Test\n    @JUnitCollector(datacollectionConfig=\"/org/opennms/netmgt/config/http-datacollection-config.xml\", datacollectionType=\"http\",\n                    anticipateRrds={ \"1/documentCount\", \"1/greatAnswer\", \"1/someNumber\" }, anticipateFiles={ \"1/strings.properties\" })\n    public final void testCollect() throws Exception {\n        m_collectionSpecification.initialize(m_collectionAgent);\n\n        CollectionSet collectionSet = m_collectionSpecification.collect(m_collectionAgent);\n        assertEquals(\"collection status\", ServiceCollector.COLLECTION_SUCCEEDED, collectionSet.getStatus());\n        CollectorTestUtils.persistCollectionSet(m_collectionSpecification, collectionSet);\n\n        m_collectionSpecification.release(m_collectionAgent);\n    }","commit_id":"201bfe8ac93258144bfe6763f5d09333aedc9b55","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        System.setProperty(\"opennms.home\", \"/opt/opennms\");\n        MockUtil.println(\"------------ Begin Test \" + getName() + \" --------------------------\");\n        MockLogAppender.setupLogging();\n\n        MockNetwork m_network = new MockNetwork();\n        m_network.setCriticalService(\"ICMP\");\n        m_network.addNode(1, \"testnode\");\n        m_network.addInterface(InetAddress.getByName(m_testHostName).getHostAddress());\n        m_network.addService(\"ICMP\");\n        m_network.addService(\"HTTP\");\n\n        MockDatabase m_db = new MockDatabase();\n        m_db.populate(m_network);\n\n        DataSourceFactory.setInstance(m_db);\n        \n        MockEventIpcManager eventIpcManager = new MockEventIpcManager();\n        \n        EventIpcManagerFactory.setIpcManager(eventIpcManager);\n        \n        RrdTestUtils.initialize();\n        \n        initializeDatabaseSchemaConfig(\"/org/opennms/netmgt/config/test-database-schema.xml\");\n        \n        setTransMgr();\n        setFileAnticipator();\n    }","id":70907,"modified_method":"@Before\n    public void setUp() throws Exception {\n        assertNotNull(m_mockEventIpcManager);\n        assertNotNull(m_ipInterfaceDao);\n        assertNotNull(m_nodeDao);\n\n        if (m_nodeDao.findByLabel(\"testnode\").size() == 0) {\n            NetworkBuilder builder = new NetworkBuilder(m_distPoller);\n            builder.addNode(\"testnode\");\n            builder.addInterface(InetAddress.getByName(m_testHostName).getHostAddress()).setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n            builder.addService(getServiceType(\"ICMP\"));\n            builder.addService(getServiceType(\"HTTP\"));\n            if (m_nodeDao == null) {\n                throw new Exception(\"node DAO does not exist!\");\n            }\n            OnmsNode n = builder.getCurrentNode();\n            assertNotNull(n);\n            m_nodeDao.save(n);\n            m_nodeDao.flush();\n        }\n\n        HttpCollector collector = new HttpCollector();\n\n        Collection<OnmsIpInterface> ifaces = m_ipInterfaceDao.findByIpAddress(m_testHostName);\n        assertEquals(1, ifaces.size());\n        OnmsIpInterface iface = ifaces.iterator().next();\n        \n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"collection\", \"default\");\n        collector.initialize(parameters);\n\n        m_collectionSpecification = CollectorTestUtils.createCollectionSpec(\"HTTP\", collector, \"default\");\n        m_collectionAgent = DefaultCollectionAgent.create(iface.getId(), m_ipInterfaceDao, m_transactionManager);\n    }","commit_id":"201bfe8ac93258144bfe6763f5d09333aedc9b55","url":"https://github.com/OpenNMS/opennms"},{"original_method":"void logIfAliasConfig() {\n    \tlog().info(\"domain: \" + getDomain() + \", \"\n    \t\t\t+ \"storeByNodeID: \" + getStoreByNodeID() + \", \"\n    \t\t\t+ \"storeByIfAlias: \" + getStoreByIfAlias() + \", \"\n\t\t\t\t+ \"storFlagOverride: \" + getStorFlagOverride() + \", \"\n\t\t\t\t+ \"ifAliasComment: \" + getIfAliasComment());\n    }","id":70908,"modified_method":"void logIfAliasConfig() {\n    \tlog().info(this.toString());\n    }","commit_id":"201bfe8ac93258144bfe6763f5d09333aedc9b55","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public final void testPersist() throws Exception {\n        InetAddress opennmsDotOrg = InetAddress.getByName(m_testHostName);\n        \n        initializeHttpDatacollectionConfigFactory(\"/org/opennms/netmgt/config/http-datacollection-persist-test-config.xml\");\n        RrdTestUtils.initialize();\n        HttpCollector collector = new HttpCollector();\n        OnmsDistPoller distPoller = new OnmsDistPoller(\"localhost\", \"127.0.0.1\");\n        OnmsNode node = new OnmsNode(distPoller);\n        node.setId(1);\n        OnmsIpInterface iface = new OnmsIpInterface(opennmsDotOrg.getHostAddress(), node );\n        iface.setId(2);\n        node.addIpInterface(iface);\n\n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"collection\", \"default\");\n        collector.initialize(parameters);\n        \n        CollectionSpecification spec = createCollectionSpec(\"HTTP\", collector, \"default\");\n        \n        CollectionAgent agent = createCollectionAgent(iface);\n        \n        // node level collection\n        File nodeDir = anticipatePath(getSnmpRrdDirectory(), \"1\");\n        anticipateRrdFiles(nodeDir, \"documentCount\", \"documentType\", \"greatAnswer\");\n        File documentCountRrdFile = new File(nodeDir, rrd(\"documentCount\"));\n        File someNumberRrdFile = new File(nodeDir, rrd(\"someNumber\"));\n        File greatAnswerRrdFile = new File(nodeDir, rrd(\"greatAnswer\"));\n        \n        int numUpdates = 2;\n        int stepSizeInSecs = 1;\n        \n        int stepSizeInMillis = stepSizeInSecs*1000;\n\n        spec.initialize(agent);\n        \n        collectNTimes(spec, agent, numUpdates);\n        \n        // This is the value of documentCount from the first test page\n        // documentCount = Gauge32: 5\n        assertEquals(5.0, RrdUtils.fetchLastValueInRange(documentCountRrdFile.getAbsolutePath(), \"documentCount\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of documentType from the first test page\n        // someNumber = Gauge32: 17\n        assertEquals(17.0, RrdUtils.fetchLastValueInRange(someNumberRrdFile.getAbsolutePath(), \"someNumber\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of greatAnswer from the second test page\n        //someNumber = Gauge32: 42\n        assertEquals(42.0, RrdUtils.fetchLastValueInRange(greatAnswerRrdFile.getAbsolutePath(), \"greatAnswer\", stepSizeInMillis, stepSizeInMillis));\n        \n        spec.release(agent);\n        \n        // Wait for any RRD writes to finish up\n        Thread.sleep(1000);\n    }","id":70909,"modified_method":"@Test\n    @JUnitCollector(datacollectionConfig=\"/org/opennms/netmgt/config/http-datacollection-persist-test-config.xml\", datacollectionType=\"http\",\n                    anticipateRrds={ \"1/documentCount\", \"1/greatAnswer\", \"1/someNumber\" }, anticipateFiles={ \"1/strings.properties\" })\n    public final void testPersist() throws Exception {\n        File snmpRrdDirectory = (File)m_context.getAttribute(\"rrdDirectory\");\n        FileAnticipator anticipator = (FileAnticipator)m_context.getAttribute(\"fileAnticipator\");\n\n        int numUpdates = 2;\n        int stepSizeInSecs = 1;\n        \n        int stepSizeInMillis = stepSizeInSecs*1000;\n\n        m_collectionSpecification.initialize(m_collectionAgent);\n        \n        CollectorTestUtils.collectNTimes(m_collectionSpecification, m_collectionAgent, numUpdates);\n        \n        // node level collection\n        File nodeDir = CollectorTestUtils.anticipatePath(anticipator, snmpRrdDirectory, \"1\");\n        File documentCountRrdFile = new File(nodeDir, CollectorTestUtils.rrd(\"documentCount\"));\n        File someNumberRrdFile = new File(nodeDir, CollectorTestUtils.rrd(\"someNumber\"));\n        File greatAnswerRrdFile = new File(nodeDir, CollectorTestUtils.rrd(\"greatAnswer\"));\n\n       // This is the value of documentCount from the first test page\n        // documentCount = Gauge32: 5\n        assertEquals(\"documentCount\", Double.valueOf(5.0), RrdUtils.fetchLastValueInRange(documentCountRrdFile.getAbsolutePath(), \"documentCount\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of documentType from the first test page\n        // someNumber = Gauge32: 17\n        assertEquals(\"documentType\", Double.valueOf(17.0), RrdUtils.fetchLastValueInRange(someNumberRrdFile.getAbsolutePath(), \"someNumber\", stepSizeInMillis, stepSizeInMillis));\n\n        // This is the value of greatAnswer from the second test page\n        //someNumber = Gauge32: 42\n        assertEquals(\"greatAnswer\", Double.valueOf(42.0), RrdUtils.fetchLastValueInRange(greatAnswerRrdFile.getAbsolutePath(), \"greatAnswer\", stepSizeInMillis, stepSizeInMillis));\n        \n        m_collectionSpecification.release(m_collectionAgent);\n    }","commit_id":"1e6f3c10ec705bfcbe05c925a07c70c6d990367b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        System.setProperty(\"opennms.home\", \"/opt/opennms\");\n        MockUtil.println(\"------------ Begin Test \" + getName() + \" --------------------------\");\n        MockLogAppender.setupLogging();\n\n        MockNetwork m_network = new MockNetwork();\n        m_network.setCriticalService(\"ICMP\");\n        m_network.addNode(1, \"testnode\");\n        m_network.addInterface(InetAddress.getByName(m_testHostName).getHostAddress());\n        m_network.addService(\"ICMP\");\n        m_network.addService(\"HTTP\");\n\n        MockDatabase m_db = new MockDatabase();\n        m_db.populate(m_network);\n\n        DataSourceFactory.setInstance(m_db);\n        \n        MockEventIpcManager eventIpcManager = new MockEventIpcManager();\n        \n        EventIpcManagerFactory.setIpcManager(eventIpcManager);\n        \n        RrdTestUtils.initialize();\n        \n        initializeDatabaseSchemaConfig(\"/org/opennms/netmgt/config/test-database-schema.xml\");\n        \n        setTransMgr();\n        setFileAnticipator();\n    }","id":70910,"modified_method":"@Before\n    public void setUp() throws Exception {\n        assertNotNull(m_mockEventIpcManager);\n        assertNotNull(m_ipInterfaceDao);\n        assertNotNull(m_nodeDao);\n\n        if (m_nodeDao.findByLabel(\"testnode\").size() == 0) {\n            NetworkBuilder builder = new NetworkBuilder(m_distPoller);\n            builder.addNode(\"testnode\");\n            builder.addInterface(InetAddress.getByName(m_testHostName).getHostAddress()).setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n            builder.addService(getServiceType(\"ICMP\"));\n            builder.addService(getServiceType(\"HTTP\"));\n            if (m_nodeDao == null) {\n                throw new Exception(\"node DAO does not exist!\");\n            }\n            OnmsNode n = builder.getCurrentNode();\n            assertNotNull(n);\n            m_nodeDao.save(n);\n            m_nodeDao.flush();\n        }\n\n        HttpCollector collector = new HttpCollector();\n\n        Collection<OnmsIpInterface> ifaces = m_ipInterfaceDao.findByIpAddress(m_testHostName);\n        assertEquals(1, ifaces.size());\n        OnmsIpInterface iface = ifaces.iterator().next();\n        \n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"collection\", \"default\");\n        collector.initialize(parameters);\n\n        m_collectionSpecification = CollectorTestUtils.createCollectionSpec(\"HTTP\", collector, \"default\");\n        m_collectionAgent = DefaultCollectionAgent.create(iface.getId(), m_ipInterfaceDao, m_transactionManager);\n    }","commit_id":"1e6f3c10ec705bfcbe05c925a07c70c6d990367b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Test method for {@link org.opennms.netmgt.collectd.HttpCollector#collect(\n     *   org.opennms.netmgt.collectd.CollectionAgent, org.opennms.netmgt.model.events.EventProxy, java.util.Map)}.\n     */\n    @Test\n    public final void testCollect() throws Exception {\n        InetAddress opennmsDotOrg = InetAddress.getByName(m_testHostName);\n        \n        initializeHttpDatacollectionConfigFactory(\"/org/opennms/netmgt/config/http-datacollection-config.xml\");\n        RrdTestUtils.initializeNullStrategy();\n        HttpCollector collector = new HttpCollector();\n        OnmsDistPoller distPoller = new OnmsDistPoller(\"localhost\", \"127.0.0.1\");\n        OnmsNode node = new OnmsNode(distPoller);\n        node.setId(1);\n        OnmsIpInterface iface = new OnmsIpInterface(opennmsDotOrg.getHostAddress(), node );\n        iface.setId(2);\n        node.addIpInterface(iface);\n\n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"collection\", \"default\");\n        collector.initialize(parameters);\n        \n        CollectionSpecification spec = createCollectionSpec(\"HTTP\", collector, \"default\");\n        \n        CollectionAgent agent = createCollectionAgent(iface);\n        \n        // node level collection\n        File nodeDir = anticipatePath(getSnmpRrdDirectory(), \"1\");\n        anticipateRrdFiles(nodeDir, \"documentCount\");\n        anticipateRrdFiles(nodeDir, \"documentType\");\n        anticipateRrdFiles(nodeDir, \"greatAnswer\");\n\n        spec.initialize(agent);\n        \n        CollectionSet collectionSet = spec.collect(agent);\n        assertEquals(\"collection status\",\n                     ServiceCollector.COLLECTION_SUCCEEDED,\n                     collectionSet.getStatus());\n        persistCollectionSet(spec, collectionSet);\n        \n        spec.release(agent);\n        \n        // Wait for any RRD writes to finish up\n        Thread.sleep(1000);\n    }","id":70911,"modified_method":"/**\n     * Test method for {@link org.opennms.netmgt.collectd.HttpCollector#collect(\n     *   org.opennms.netmgt.collectd.CollectionAgent, org.opennms.netmgt.model.events.EventProxy, java.util.Map)}.\n     */\n    @Test\n    @JUnitCollector(datacollectionConfig=\"/org/opennms/netmgt/config/http-datacollection-config.xml\", datacollectionType=\"http\",\n                    anticipateRrds={ \"1/documentCount\", \"1/greatAnswer\", \"1/someNumber\" }, anticipateFiles={ \"1/strings.properties\" })\n    public final void testCollect() throws Exception {\n        m_collectionSpecification.initialize(m_collectionAgent);\n\n        CollectionSet collectionSet = m_collectionSpecification.collect(m_collectionAgent);\n        assertEquals(\"collection status\", ServiceCollector.COLLECTION_SUCCEEDED, collectionSet.getStatus());\n        CollectorTestUtils.persistCollectionSet(m_collectionSpecification, collectionSet);\n\n        m_collectionSpecification.release(m_collectionAgent);\n    }","commit_id":"1e6f3c10ec705bfcbe05c925a07c70c6d990367b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"void logIfAliasConfig() {\n    \tlog().info(\"domain: \" + getDomain() + \", \"\n    \t\t\t+ \"storeByNodeID: \" + getStoreByNodeID() + \", \"\n    \t\t\t+ \"storeByIfAlias: \" + getStoreByIfAlias() + \", \"\n\t\t\t\t+ \"storFlagOverride: \" + getStorFlagOverride() + \", \"\n\t\t\t\t+ \"ifAliasComment: \" + getIfAliasComment());\n    }","id":70912,"modified_method":"void logIfAliasConfig() {\n    \tlog().info(this.toString());\n    }","commit_id":"1e6f3c10ec705bfcbe05c925a07c70c6d990367b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void reindexRoot(long companyId) throws Exception {\n\t\tDynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(\n\t\t\tGroup.class, PACLClassLoaderUtil.getPortalClassLoader());\n\n\t\tProjection minGroupIdProjection = ProjectionFactoryUtil.min(\"groupId\");\n\t\tProjection maxGroupIdProjection = ProjectionFactoryUtil.max(\"groupId\");\n\n\t\tProjectionList projectionList = ProjectionFactoryUtil.projectionList();\n\n\t\tprojectionList.add(minGroupIdProjection);\n\t\tprojectionList.add(maxGroupIdProjection);\n\n\t\tdynamicQuery.setProjection(projectionList);\n\n\t\taddReindexCriteria(dynamicQuery, companyId);\n\n\t\tList<Object[]> results = GroupLocalServiceUtil.dynamicQuery(\n\t\t\tdynamicQuery);\n\n\t\tObject[] minAndMaxGroupIds = results.get(0);\n\n\t\tif ((minAndMaxGroupIds[0] == null) || (minAndMaxGroupIds[1] == null)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong minGroupId = (Long)minAndMaxGroupIds[0];\n\t\tlong maxGroupId = (Long)minAndMaxGroupIds[1];\n\n\t\tlong startGroupId = minGroupId;\n\t\tlong endGroupId = startGroupId + DEFAULT_INTERVAL;\n\n\t\twhile (startGroupId <= maxGroupId) {\n\t\t\treindexRoot(companyId, startGroupId, endGroupId);\n\n\t\t\tstartGroupId = endGroupId;\n\t\t\tendGroupId += DEFAULT_INTERVAL;\n\t\t}\n\t}","id":70913,"modified_method":"protected void reindexRoot(final long companyId)\n\t\tthrows PortalException, SystemException {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew GroupActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object)\n\t\t\t\tthrows PortalException, SystemException {\n\n\t\t\t\tGroup group = (Group)object;\n\n\t\t\t\tlong groupId = group.getGroupId();\n\t\t\t\tlong folderId =\n\t\t\t\t\tBookmarksFolderConstants.DEFAULT_PARENT_FOLDER_ID;\n\n\t\t\t\treindexEntries(companyId, groupId, folderId);\n\t\t\t}\n\n\t\t};\n\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\n\t\tactionableDynamicQuery.performActions();\n\t}","commit_id":"5a4564681c79a445d11d96c4c56fada7d90e9149","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reindexFolders(long companyId) throws Exception {\n\t\tDynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(\n\t\t\tBookmarksFolder.class, PACLClassLoaderUtil.getPortalClassLoader());\n\n\t\tProjection minFolderIdProjection = ProjectionFactoryUtil.min(\n\t\t\t\"folderId\");\n\t\tProjection maxFolderIdProjection = ProjectionFactoryUtil.max(\n\t\t\t\"folderId\");\n\n\t\tProjectionList projectionList = ProjectionFactoryUtil.projectionList();\n\n\t\tprojectionList.add(minFolderIdProjection);\n\t\tprojectionList.add(maxFolderIdProjection);\n\n\t\tdynamicQuery.setProjection(projectionList);\n\n\t\taddReindexCriteria(dynamicQuery, companyId);\n\n\t\tList<Object[]> results = BookmarksFolderLocalServiceUtil.dynamicQuery(\n\t\t\tdynamicQuery);\n\n\t\tObject[] minAndMaxFolderIds = results.get(0);\n\n\t\tif ((minAndMaxFolderIds[0] == null) ||\n\t\t\t(minAndMaxFolderIds[1] == null)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tlong minFolderId = (Long)minAndMaxFolderIds[0];\n\t\tlong maxFolderId = (Long)minAndMaxFolderIds[1];\n\n\t\tlong startFolderId = minFolderId;\n\t\tlong endFolderId = startFolderId + DEFAULT_INTERVAL;\n\n\t\twhile (startFolderId <= maxFolderId) {\n\t\t\treindexFolders(companyId, startFolderId, endFolderId);\n\n\t\t\tstartFolderId = endFolderId;\n\t\t\tendFolderId += DEFAULT_INTERVAL;\n\t\t}\n\t}","id":70914,"modified_method":"protected void reindexFolders(final long companyId)\n\t\tthrows PortalException, SystemException {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew BaseActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object)\n\t\t\t\tthrows PortalException, SystemException {\n\n\t\t\t\tBookmarksFolder folder = (BookmarksFolder)object;\n\n\t\t\t\tlong groupId = folder.getGroupId();\n\t\t\t\tlong folderId = folder.getFolderId();\n\n\t\t\t\treindexEntries(companyId, groupId, folderId);\n\t\t\t}\n\n\t\t};\n\n\t\tactionableDynamicQuery.setBaseLocalService(\n\t\t\tBookmarksFolderLocalServiceUtil.getService());\n\t\tactionableDynamicQuery.setClass(BookmarksFolder.class);\n\t\tactionableDynamicQuery.setClassLoader(\n\t\t\tPACLClassLoaderUtil.getPortalClassLoader());\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\t\tactionableDynamicQuery.setPrimaryKeyPropertyName(\"folderId\");\n\n\t\tactionableDynamicQuery.performActions();\n\t}","commit_id":"5a4564681c79a445d11d96c4c56fada7d90e9149","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reindexEntries(long companyId, long groupId, long folderId)\n\t\tthrows Exception {\n\n\t\tDynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(\n\t\t\tBookmarksEntry.class, PACLClassLoaderUtil.getPortalClassLoader());\n\n\t\tProjection minEntryIdProjection = ProjectionFactoryUtil.min(\"entryId\");\n\t\tProjection maxEntryIdProjection = ProjectionFactoryUtil.max(\"entryId\");\n\n\t\tProjectionList projectionList = ProjectionFactoryUtil.projectionList();\n\n\t\tprojectionList.add(minEntryIdProjection);\n\t\tprojectionList.add(maxEntryIdProjection);\n\n\t\tdynamicQuery.setProjection(projectionList);\n\n\t\taddReindexCriteria(dynamicQuery, groupId, folderId);\n\n\t\tList<Object[]> results = BookmarksEntryLocalServiceUtil.dynamicQuery(\n\t\t\tdynamicQuery);\n\n\t\tObject[] minAndMaxEntryIds = results.get(0);\n\n\t\tif ((minAndMaxEntryIds[0] == null) || (minAndMaxEntryIds[1] == null)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong minEntryId = (Long)minAndMaxEntryIds[0];\n\t\tlong maxEntryId = (Long)minAndMaxEntryIds[1];\n\n\t\tlong startEntryId = minEntryId;\n\t\tlong endEntryId = startEntryId + DEFAULT_INTERVAL;\n\n\t\twhile (startEntryId <= maxEntryId) {\n\t\t\treindexEntries(\n\t\t\t\tcompanyId, groupId, folderId, startEntryId, endEntryId);\n\n\t\t\tstartEntryId = endEntryId;\n\t\t\tendEntryId += DEFAULT_INTERVAL;\n\t\t}\n\t}","id":70915,"modified_method":"protected void reindexEntries(\n\t\t\tlong companyId, final long groupId, final long folderId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfinal Collection<Document> documents = new ArrayList<Document>();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew BaseActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void addCriteria(DynamicQuery dynamicQuery) {\n\t\t\t\tProperty property = PropertyFactoryUtil.forName(\"folderId\");\n\n\t\t\t\tdynamicQuery.add(property.eq(folderId));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object) throws PortalException {\n\t\t\t\tBookmarksEntry entry = (BookmarksEntry)object;\n\n\t\t\t\tDocument document = getDocument(entry);\n\n\t\t\t\tdocuments.add(document);\n\t\t\t}\n\n\t\t};\n\n\t\tactionableDynamicQuery.setBaseLocalService(\n\t\t\tBookmarksEntryLocalServiceUtil.getService());\n\t\tactionableDynamicQuery.setClass(BookmarksEntry.class);\n\t\tactionableDynamicQuery.setClassLoader(\n\t\t\tPACLClassLoaderUtil.getPortalClassLoader());\n\t\tactionableDynamicQuery.setGroupId(groupId);\n\t\tactionableDynamicQuery.setPrimaryKeyPropertyName(\"entryId\");\n\n\t\tactionableDynamicQuery.performActions();\n\n\t\tSearchEngineUtil.updateDocuments(\n\t\t\tgetSearchEngineId(), companyId, documents);\n\t}","commit_id":"5a4564681c79a445d11d96c4c56fada7d90e9149","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reindexEntries(long companyId) throws Exception {\n\t\tDynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(\n\t\t\tBlogsEntry.class, PACLClassLoaderUtil.getPortalClassLoader());\n\n\t\tProjection minEntryIdProjection = ProjectionFactoryUtil.min(\"entryId\");\n\t\tProjection maxEntryIdProjection = ProjectionFactoryUtil.max(\"entryId\");\n\n\t\tProjectionList projectionList = ProjectionFactoryUtil.projectionList();\n\n\t\tprojectionList.add(minEntryIdProjection);\n\t\tprojectionList.add(maxEntryIdProjection);\n\n\t\tdynamicQuery.setProjection(projectionList);\n\n\t\taddReindexCriteria(dynamicQuery, companyId);\n\n\t\tList<Object[]> results = BlogsEntryLocalServiceUtil.dynamicQuery(\n\t\t\tdynamicQuery);\n\n\t\tObject[] minAndMaxEntryIds = results.get(0);\n\n\t\tif ((minAndMaxEntryIds[0] == null) || (minAndMaxEntryIds[1] == null)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong minEntryId = (Long)minAndMaxEntryIds[0];\n\t\tlong maxEntryId = (Long)minAndMaxEntryIds[1];\n\n\t\tlong startEntryId = minEntryId;\n\t\tlong endEntryId = startEntryId + DEFAULT_INTERVAL;\n\n\t\twhile (startEntryId <= maxEntryId) {\n\t\t\treindexEntries(companyId, startEntryId, endEntryId);\n\n\t\t\tstartEntryId = endEntryId;\n\t\t\tendEntryId += DEFAULT_INTERVAL;\n\t\t}\n\t}","id":70916,"modified_method":"protected void reindexEntries(long companyId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfinal Collection<Document> documents = new ArrayList<Document>();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew BaseActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void addCriteria(DynamicQuery dynamicQuery) {\n\t\t\t\tProperty displayDateProperty = PropertyFactoryUtil.forName(\n\t\t\t\t\t\"displayDate\");\n\n\t\t\t\tdynamicQuery.add(displayDateProperty.lt(new Date()));\n\n\t\t\t\tProperty statusProperty = PropertyFactoryUtil.forName(\"status\");\n\n\t\t\t\tInteger[] statuses = {\n\t\t\t\t\tWorkflowConstants.STATUS_APPROVED,\n\t\t\t\t\tWorkflowConstants.STATUS_IN_TRASH\n\t\t\t\t};\n\n\t\t\t\tdynamicQuery.add(statusProperty.in(statuses));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object) throws PortalException {\n\t\t\t\tBlogsEntry entry = (BlogsEntry)object;\n\n\t\t\t\tDocument document = getDocument(entry);\n\n\t\t\t\tdocuments.add(document);\n\t\t\t}\n\n\t\t};\n\n\t\tactionableDynamicQuery.setBaseLocalService(\n\t\t\tBlogsEntryLocalServiceUtil.getService());\n\t\tactionableDynamicQuery.setClass(BlogsEntry.class);\n\t\tactionableDynamicQuery.setClassLoader(\n\t\t\tPACLClassLoaderUtil.getPortalClassLoader());\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\t\tactionableDynamicQuery.setPrimaryKeyPropertyName(\"entryId\");\n\n\t\tactionableDynamicQuery.performActions();\n\n\t\tSearchEngineUtil.updateDocuments(\n\t\t\tgetSearchEngineId(), companyId, documents);\n\t}","commit_id":"5508ae90fadde7dff73a2fd24b371daf54b43bad","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reindexEvents(long companyId) throws Exception {\n\t\tDynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(\n\t\t\tCalEvent.class, PACLClassLoaderUtil.getPortalClassLoader());\n\n\t\tProjection minEventIdProjection = ProjectionFactoryUtil.min(\"eventId\");\n\t\tProjection maxEventIdProjection = ProjectionFactoryUtil.max(\"eventId\");\n\n\t\tProjectionList projectionList = ProjectionFactoryUtil.projectionList();\n\n\t\tprojectionList.add(minEventIdProjection);\n\t\tprojectionList.add(maxEventIdProjection);\n\n\t\tdynamicQuery.setProjection(projectionList);\n\n\t\taddReindexCriteria(dynamicQuery, companyId);\n\n\t\tList<Object[]> results = CalEventLocalServiceUtil.dynamicQuery(\n\t\t\tdynamicQuery);\n\n\t\tObject[] minAndMaxEventIds = results.get(0);\n\n\t\tif ((minAndMaxEventIds[0] == null) || (minAndMaxEventIds[1] == null)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong minEventId = (Long)minAndMaxEventIds[0];\n\t\tlong maxEventId = (Long)minAndMaxEventIds[1];\n\n\t\tlong startEventId = minEventId;\n\t\tlong endEventId = startEventId + DEFAULT_INTERVAL;\n\n\t\twhile (startEventId <= maxEventId) {\n\t\t\treindexEvents(companyId, startEventId, endEventId);\n\n\t\t\tstartEventId = endEventId;\n\t\t\tendEventId += DEFAULT_INTERVAL;\n\t\t}\n\t}","id":70917,"modified_method":"protected void reindexEvents(long companyId) throws Exception {\n\t\tfinal Collection<Document> documents = new ArrayList<Document>();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew BaseActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object) throws PortalException {\n\t\t\t\tCalEvent event = (CalEvent)object;\n\n\t\t\t\tDocument document = getDocument(event);\n\n\t\t\t\tdocuments.add(document);\n\t\t\t}\n\n\t\t};\n\n\t\tactionableDynamicQuery.setBaseLocalService(\n\t\t\tCalEventLocalServiceUtil.getService());\n\t\tactionableDynamicQuery.setClass(CalEvent.class);\n\t\tactionableDynamicQuery.setClassLoader(\n\t\t\tPACLClassLoaderUtil.getPortalClassLoader());\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\t\tactionableDynamicQuery.setPrimaryKeyPropertyName(\"eventId\");\n\n\t\tactionableDynamicQuery.performActions();\n\n\t\tSearchEngineUtil.updateDocuments(\n\t\t\tgetSearchEngineId(), companyId, documents);\n\t}","commit_id":"5508ae90fadde7dff73a2fd24b371daf54b43bad","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reindexProductEntries(long companyId) throws Exception {\n\t\tDynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(\n\t\t\tSCProductEntry.class, PACLClassLoaderUtil.getPortalClassLoader());\n\n\t\tProjection minProductEntryIdProjection = ProjectionFactoryUtil.min(\n\t\t\t\"productEntryId\");\n\t\tProjection maxProductEntryIdProjection = ProjectionFactoryUtil.max(\n\t\t\t\"productEntryId\");\n\n\t\tProjectionList projectionList = ProjectionFactoryUtil.projectionList();\n\n\t\tprojectionList.add(minProductEntryIdProjection);\n\t\tprojectionList.add(maxProductEntryIdProjection);\n\n\t\tdynamicQuery.setProjection(projectionList);\n\n\t\taddReindexCriteria(dynamicQuery, companyId);\n\n\t\tList<Object[]> results = SCProductEntryLocalServiceUtil.dynamicQuery(\n\t\t\tdynamicQuery);\n\n\t\tObject[] minAndMaxProductEntryIds = results.get(0);\n\n\t\tif ((minAndMaxProductEntryIds[0] == null) ||\n\t\t\t(minAndMaxProductEntryIds[1] == null)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tlong minProductEntryId = (Long)minAndMaxProductEntryIds[0];\n\t\tlong maxProductEntryId = (Long)minAndMaxProductEntryIds[1];\n\n\t\tlong startProductEntryId = minProductEntryId;\n\t\tlong endProductEntryId = startProductEntryId + DEFAULT_INTERVAL;\n\n\t\twhile (startProductEntryId <= maxProductEntryId) {\n\t\t\treindexProductEntries(\n\t\t\t\tcompanyId, startProductEntryId, endProductEntryId);\n\n\t\t\tstartProductEntryId = endProductEntryId;\n\t\t\tendProductEntryId += DEFAULT_INTERVAL;\n\t\t}\n\t}","id":70918,"modified_method":"protected void reindexProductEntries(long companyId) throws Exception {\n\t\tfinal Collection<Document> documents = new ArrayList<Document>();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew BaseActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object) throws PortalException {\n\t\t\t\tSCProductEntry productEntry = (SCProductEntry)object;\n\n\t\t\t\tDocument document = getDocument(productEntry);\n\n\t\t\t\tdocuments.add(document);\n\t\t\t}\n\n\t\t};\n\n\t\tactionableDynamicQuery.setBaseLocalService(\n\t\t\tSCProductEntryLocalServiceUtil.getService());\n\t\tactionableDynamicQuery.setClass(SCProductEntry.class);\n\t\tactionableDynamicQuery.setClassLoader(\n\t\t\tPACLClassLoaderUtil.getPortalClassLoader());\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\t\tactionableDynamicQuery.setPrimaryKeyPropertyName(\"productEntryId\");\n\n\t\tactionableDynamicQuery.performActions();\n\n\t\tSearchEngineUtil.updateDocuments(\n\t\t\tgetSearchEngineId(), companyId, documents);\n\t}","commit_id":"5508ae90fadde7dff73a2fd24b371daf54b43bad","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reindexUserGroups(long companyId) throws Exception {\n\t\tDynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(\n\t\t\tUserGroup.class, PACLClassLoaderUtil.getPortalClassLoader());\n\n\t\tProjection minUserGroupIdProjection = ProjectionFactoryUtil.min(\n\t\t\t\"userGroupId\");\n\t\tProjection maxUserGroupIdProjection = ProjectionFactoryUtil.max(\n\t\t\t\"userGroupId\");\n\n\t\tProjectionList projectionList = ProjectionFactoryUtil.projectionList();\n\n\t\tprojectionList.add(minUserGroupIdProjection);\n\t\tprojectionList.add(maxUserGroupIdProjection);\n\n\t\tdynamicQuery.setProjection(projectionList);\n\n\t\taddReindexCriteria(dynamicQuery, companyId);\n\n\t\tList<Object[]> results = UserGroupLocalServiceUtil.dynamicQuery(\n\t\t\tdynamicQuery);\n\n\t\tObject[] minAndMaxUserGroupIds = results.get(0);\n\n\t\tif ((minAndMaxUserGroupIds[0] == null) ||\n\t\t\t(minAndMaxUserGroupIds[1] == null)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tlong minUserGroupId = (Long)minAndMaxUserGroupIds[0];\n\t\tlong maxUserGroupId = (Long)minAndMaxUserGroupIds[1];\n\n\t\tlong startUserGroupId = minUserGroupId;\n\t\tlong endUserGroupId = startUserGroupId + DEFAULT_INTERVAL;\n\n\t\twhile (startUserGroupId <= maxUserGroupId) {\n\t\t\treindexUserGroups(companyId, startUserGroupId, endUserGroupId);\n\n\t\t\tstartUserGroupId = endUserGroupId;\n\t\t\tendUserGroupId += DEFAULT_INTERVAL;\n\t\t}\n\t}","id":70919,"modified_method":"protected void reindexUserGroups(long companyId) throws Exception {\n\t\tfinal Collection<Document> documents = new ArrayList<Document>();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew BaseActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object) throws PortalException {\n\t\t\t\tUserGroup userGroup = (UserGroup)object;\n\n\t\t\t\tDocument document = getDocument(userGroup);\n\n\t\t\t\tdocuments.add(document);\n\t\t\t}\n\n\t\t};\n\n\t\tactionableDynamicQuery.setBaseLocalService(\n\t\t\tUserGroupLocalServiceUtil.getService());\n\t\tactionableDynamicQuery.setClass(UserGroup.class);\n\t\tactionableDynamicQuery.setClassLoader(\n\t\t\tPACLClassLoaderUtil.getPortalClassLoader());\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\t\tactionableDynamicQuery.setPrimaryKeyPropertyName(\"userGroupId\");\n\n\t\tactionableDynamicQuery.performActions();\n\n\t\tSearchEngineUtil.updateDocuments(\n\t\t\tgetSearchEngineId(), companyId, documents);\n\t}","commit_id":"5508ae90fadde7dff73a2fd24b371daf54b43bad","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public EditorCell createValueCell(EditorContext context, SNode node) {\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, \"value\", false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"value\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867281037\");\n    return editorCell;\n  }","id":70920,"modified_method":"public EditorCell createValueCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"value\");\n    provider.setNoTargetText(\"\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createValueCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createNameCell(EditorContext context, SNode node) {\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, \"name\", false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"?name?\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(Color.blue);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"name\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867281034\");\n    return editorCell;\n  }","id":70921,"modified_method":"public EditorCell createNameCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"name\");\n    provider.setNoTargetText(\"?name?\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createNameCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createNameCell(context, node));\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"=\"));\n    editorCell.addEditorCell(this.createConstantCell1(context, node, \"\\\"\"));\n    editorCell.addEditorCell(this.createValueCell(context, node));\n    editorCell.addEditorCell(this.createConstantCell2(context, node, \"\\\"\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867208213\");\n    return editorCell;\n  }","id":70922,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createNameCell(context, node));\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"=\"));\n    editorCell.addEditorCell(this.createConstantCell1(context, node, \"\\\\\\\"\"));\n    editorCell.addEditorCell(this.createValueCell(context, node));\n    editorCell.addEditorCell(this.createConstantCell2(context, node, \"\\\\\\\"\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867208213\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell1(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867281036\");\n    return editorCell;\n  }","id":70923,"modified_method":"public EditorCell createConstantCell1(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867281036\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867281035\");\n    return editorCell;\n  }","id":70924,"modified_method":"public EditorCell createConstantCell(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867281035\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell2(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867281038\");\n    return editorCell;\n  }","id":70925,"modified_method":"public EditorCell createConstantCell2(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867281038\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_BLUE);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119976794070\");\n    return editorCell;\n  }","id":70926,"modified_method":"public EditorCell createConstantCell(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_BLUE);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119976794070\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createNameCell(EditorContext context, SNode node) {\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, \"name\", false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"?name?\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_GREEN);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"name\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119976811900\");\n    return editorCell;\n  }","id":70927,"modified_method":"public EditorCell createNameCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"name\");\n    provider.setNoTargetText(\"?name?\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createNameCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createColumnCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createRowCell(context, node));\n    editorCell.addEditorCell(this.createConstantCell1(context, node, \"\"));\n    editorCell.addEditorCell(this.createRootElementCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119976778254\");\n    return editorCell;\n  }","id":70928,"modified_method":"public EditorCell createColumnCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createRowCell(context, node));\n    editorCell.addEditorCell(this.createConstantCell1(context, node, \"\"));\n    editorCell.addEditorCell(this.createRootElementCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119976778254\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRootElementCell(EditorContext context, SNode node) {\n    SNode referencedNode = null;\n    SReference reference = null;\n    referencedNode = node.getChild(\"rootElement\");\n    LinkDeclaration linkDeclaration = SModelUtil.getLinkDeclaration(node, \"rootElement\", context.getOperationContext().getScope());\n    if (!(reference == null) && !((reference.isResolved()))) {\n      EditorCell_Error noRefCell = EditorCell_Error.create(context, node, BadReferenceTextProvider.getBadReferenceText(reference));\n      noRefCell.setEditable(true);\n      noRefCell.setSelectable(true);\n      noRefCell.setDrawBorder(false);\n      noRefCell.setDrawBrackets(false);\n      noRefCell.setBracketsColor(Color.black);\n      noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n      noRefCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration, context));\n      noRefCell.putUserObject(EditorCell.CELL_ID, \"1119976859013\");\n      return noRefCell;\n    }\n    if(referencedNode == null) {\n      {\n        EditorCell_Error noRefCell = EditorCell_Error.create(context, node, \"<no root element>\");\n        noRefCell.setEditable(true);\n        noRefCell.setSelectable(true);\n        noRefCell.setDrawBorder(false);\n        noRefCell.setDrawBrackets(false);\n        noRefCell.setBracketsColor(Color.black);\n        noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n        noRefCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration, context));\n        noRefCell.putUserObject(EditorCell.CELL_ID, \"1119976859013\");\n        return noRefCell;\n      }\n    }\n    EditorCell editorCell = context.createNodeCell(referencedNode);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteSmart(node, linkDeclaration, referencedNode));\n    editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(node, linkDeclaration, context));\n    return editorCell;\n  }","id":70929,"modified_method":"public EditorCell createRootElementCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, context);\n    provider.setRole(\"rootElement\");\n    provider.setNoTargetText(\"<no root element>\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createRootElementCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(false);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"document\"));\n    editorCell.addEditorCell(this.createNameCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119976784944\");\n    return editorCell;\n  }","id":70930,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(false);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"document\"));\n    editorCell.addEditorCell(this.createNameCell(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119976784944\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell1(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(false);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119976839636\");\n    return editorCell;\n  }","id":70931,"modified_method":"public EditorCell createConstantCell1(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(false);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119976839636\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createErrorCell(EditorContext context, SNode node) {\n    EditorCell_Error editorCell = EditorCell_Error.create(context, node, \"<choose content>\");\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119977874007\");\n    return editorCell;\n  }","id":70932,"modified_method":"public EditorCell createErrorCell(EditorContext context, SNode node) {\n    EditorCell_Error editorCell = EditorCell_Error.create(context, node, \"<choose content>\");\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1119977874007\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell2(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createConstantCell5(context, node, \"<\/\"));\n    editorCell.addEditorCell(this.createNameCell1(context, node));\n    editorCell.addEditorCell(this.createConstantCell6(context, node, \">\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867400971\");\n    return editorCell;\n  }","id":70933,"modified_method":"public EditorCell createRowCell2(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell5(context, node, \"<\/\"));\n    editorCell.addEditorCell(this.createNameCell1(context, node));\n    editorCell.addEditorCell(this.createConstantCell6(context, node, \">\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867400971\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createContentList(EditorContext context, SNode node) {\n    if(this.myContentListHandler == null) {\n      this.myContentListHandler = new Element_Editor_ContentListHandler(node, \"content\", context);\n    }\n    EditorCell_Collection editorCell = this.myContentListHandler.createCells(context, new CellLayout_Vertical());\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    return editorCell;\n  }","id":70934,"modified_method":"public EditorCell createContentList(EditorContext context, SNode node) {\n    if(this.myContentListHandler == null) {\n      this.myContentListHandler = new Element_Editor_ContentListHandler(node, \"content\", context);\n    }\n    EditorCell_Collection editorCell = this.myContentListHandler.createCells(context, new CellLayout_Vertical(), false);\n    editorCell.setSelectable(false);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.putUserObject(EditorCell.ROLE, this.myContentListHandler.getElementRole());\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"<\"));\n    editorCell.addEditorCell(this.createNameCell(context, node));\n    editorCell.addEditorCell(this.createAttributeList(context, node));\n    editorCell.addEditorCell(this.createConstantCell2(context, node, \">\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867303147\");\n    return editorCell;\n  }","id":70935,"modified_method":"public EditorCell createRowCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell(context, node, \"<\"));\n    editorCell.addEditorCell(this.createNameCell(context, node));\n    editorCell.addEditorCell(this.createAttributeList(context, node));\n    editorCell.addEditorCell(this.createConstantCell2(context, node, \">\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867303147\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createRowCell1(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createConstantCell3(context, node, \"    \"));\n    editorCell.addEditorCell(this.createContentList(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867423219\");\n    return editorCell;\n  }","id":70936,"modified_method":"public EditorCell createRowCell1(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createConstantCell3(context, node, \"    \"));\n    editorCell.addEditorCell(this.createContentList(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867423219\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createNameCell1(EditorContext context, SNode node) {\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, \"name\", false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"?name?\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_BLUE);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"name\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522567\");\n    return editorCell;\n  }","id":70937,"modified_method":"public EditorCell createNameCell1(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"name\");\n    provider.setNoTargetText(\"?name?\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createNameCell1internal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createAttributeList(EditorContext context, SNode node) {\n    if(this.myAttributeListHandler == null) {\n      this.myAttributeListHandler = new Element_Editor_AttributeListHandler(node, \"attribute\", context);\n    }\n    EditorCell_Collection editorCell = this.myAttributeListHandler.createCells(context, new CellLayout_Horizontal());\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    return editorCell;\n  }","id":70938,"modified_method":"public EditorCell createAttributeList(EditorContext context, SNode node) {\n    if(this.myAttributeListHandler == null) {\n      this.myAttributeListHandler = new Element_Editor_AttributeListHandler(node, \"attribute\", context);\n    }\n    EditorCell_Collection editorCell = this.myAttributeListHandler.createCells(context, new CellLayout_Horizontal(), false);\n    editorCell.setSelectable(false);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.putUserObject(EditorCell.ROLE, this.myAttributeListHandler.getElementRole());\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522561\");\n    return editorCell;\n  }","id":70939,"modified_method":"public EditorCell createConstantCell(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522561\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createNameCell(EditorContext context, SNode node) {\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, \"name\", false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"?name?\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.getTextLine().setTextColor(MPSColors.DARK_BLUE);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"name\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522562\");\n    return editorCell;\n  }","id":70940,"modified_method":"public EditorCell createNameCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"name\");\n    provider.setNoTargetText(\"?name?\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createNameCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell5(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522566\");\n    return editorCell;\n  }","id":70941,"modified_method":"public EditorCell createConstantCell5(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522566\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createColumnCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.addEditorCell(this.createRowCell(context, node));\n    editorCell.addEditorCell(this.createRowCell1(context, node));\n    editorCell.addEditorCell(this.createRowCell2(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867292911\");\n    return editorCell;\n  }","id":70942,"modified_method":"public EditorCell createColumnCell(EditorContext context, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setGridLayout(false);\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setUsesBraces(false);\n    editorCell.addEditorCell(this.createRowCell(context, node));\n    editorCell.addEditorCell(this.createRowCell1(context, node));\n    editorCell.addEditorCell(this.createRowCell2(context, node));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867292911\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell2(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867877448\");\n    return editorCell;\n  }","id":70943,"modified_method":"public EditorCell createConstantCell2(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867877448\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell3(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522564\");\n    return editorCell;\n  }","id":70944,"modified_method":"public EditorCell createConstantCell3(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522564\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createConstantCell6(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.BOLD);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522568\");\n    return editorCell;\n  }","id":70945,"modified_method":"public EditorCell createConstantCell6(EditorContext context, SNode node, String text) {\n    EditorCell_Constant editorCell = EditorCell_Constant.create(context, node, text, false);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(false);\n    editorCell.setDefaultText(\"\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.setFontType(MPSFonts.BOLD);\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107867522568\");\n    editorCell.setLayoutConstraint(\"\");\n    ((EditorCell_Basic)editorCell).setParseable(false);\n    return editorCell;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createTextCell(EditorContext context, SNode node) {\n    PropertyAccessor propertyAccessor = new PropertyAccessor(node, \"text\", false, false, context);\n    EditorCell_Property editorCell = EditorCell_Property.create(context, propertyAccessor, node);\n    editorCell.setSelectable(true);\n    editorCell.setDrawBorder(false);\n    editorCell.setEditable(true);\n    editorCell.setDefaultText(\"<no text>\");\n    editorCell.setDrawBrackets(false);\n    editorCell.setBracketsColor(Color.black);\n    editorCell.getTextLine().setFontType(MPSFonts.ITALIC);\n    editorCell.getTextLine().setTextColor(Color.blue);\n    editorCell.setAction(EditorCellAction.DELETE, new CellAction_DeleteProperty(node, \"text\"));\n    editorCell.putUserObject(EditorCell.CELL_ID, \"1107868239951\");\n    return editorCell;\n  }","id":70946,"modified_method":"public EditorCell createTextCell(EditorContext context, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, context);\n    provider.setRole(\"text\");\n    provider.setNoTargetText(\"<no text>\");\n    provider.setReadOnly(false);\n    provider.setAllowsEmptyTarget(false);\n    EditorCell cellWithRole = this.createTextCellinternal(context, node, provider);\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if(attributeConcept != null) {\n      IOperationContext opContext = context.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);\n    } else \n    return cellWithRole;\n  }","commit_id":"5bbb4bfdff6cafe7b0e163046399ecd6df4f6325","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * <p>validateResponse<\/p>\n     *\n     * @param pattern a {@link java.lang.String} object.\n     * @param url a {@link java.lang.String} object.\n     * @param isCheckCode a boolean.\n     * @param maxRetCode a int.\n     * @return a boolean.\n     * @throws java.lang.Exception if any.\n     */\n    public boolean validateResponse(final String pattern, final String url, final boolean isCheckCode, final int maxRetCode) throws Exception {\n        final String[] codeArray = Integer.toString(maxRetCode).split(\"\");\n        if(codeArray.length < 3) {\n            throw new Exception(\"Max Ret Code is too Short\");\n        }\n        final String httpResponse = (String)getResponseList().toArray()[0];\n\n        final Pattern p;\n        if (isCheckCode) {\n            p = Pattern.compile(String.format(\"([H][T][T][P+]/[1].[0-1]) ([0-%s][0-2][0-%s]) ([a-zA-Z ]+)\\r\\n\", codeArray[1], codeArray[3]));\n        } else {\n            p = DEFAULT_REGEX;\n        }\n\n        final Matcher m = p.matcher(httpResponse);\n        if (m.matches()) {\n            return getResponseListAsString(getResponseList().toArray()).contains(pattern);\n        }\n        \n        return false;\n    }","id":70947,"modified_method":"/**\n     * <p>validateResponse<\/p>\n     *\n     * @param pattern a {@link java.lang.String} object.\n     * @param url a {@link java.lang.String} object.\n     * @param isCheckCode a boolean.\n     * @param maxRetCode a int.\n     * @return a boolean.\n     * @throws java.lang.Exception if any.\n     */\n    public boolean validateResponse(final String pattern, final String url, final boolean isCheckCode, final int maxRetCode) throws Exception {\n        final String httpResponse = (String)getResponseList().toArray()[0];\n        LOG.debug(\"HTTP Response: {}\", httpResponse);\n        final Matcher m = HTTP_RESPONSE_REGEX.matcher(httpResponse);\n        if (m.matches()) {\n            if (isCheckCode) {\n                final int returnCode = Integer.valueOf(m.group(2)).intValue();\n                LOG.debug(\"return code = {}, max return code = {}\", returnCode, maxRetCode);\n                return (returnCode <= maxRetCode);\n            } else {\n                return true;\n            }\n        } else {\n            LOG.debug(\"does not match\");\n            return false;\n        }\n    }","commit_id":"1a6dd9cd99f80549ca150769ea3269960c40c244","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>validateResponse<\/p>\n     *\n     * @param pattern a {@link java.lang.String} object.\n     * @param url a {@link java.lang.String} object.\n     * @param isCheckCode a boolean.\n     * @param maxRetCode a int.\n     * @return a boolean.\n     * @throws java.lang.Exception if any.\n     */\n    public boolean validateResponse(final String pattern, final String url, final boolean isCheckCode, final int maxRetCode) throws Exception {\n        final String[] codeArray = Integer.toString(maxRetCode).split(\"\");\n        if(codeArray.length < 3) {\n            throw new Exception(\"Max Ret Code is too Short\");\n        }\n        final String httpResponse = (String)getResponseList().toArray()[0];\n\n        final Pattern p;\n        if (isCheckCode) {\n            p = Pattern.compile(String.format(\"([H][T][T][P+]/[1].[0-1]) ([0-%s][0-2][0-%s]) ([a-zA-Z ]+)\\r\\n\", codeArray[1], codeArray[3]));\n        } else {\n            p = DEFAULT_REGEX;\n        }\n\n        final Matcher m = p.matcher(httpResponse);\n        if (m.matches()) {\n            return getResponseListAsString(getResponseList().toArray()).contains(pattern);\n        }\n        \n        return false;\n    }","id":70948,"modified_method":"/**\n     * <p>validateResponse<\/p>\n     *\n     * @param pattern a {@link java.lang.String} object.\n     * @param url a {@link java.lang.String} object.\n     * @param isCheckCode a boolean.\n     * @param maxRetCode a int.\n     * @return a boolean.\n     * @throws java.lang.Exception if any.\n     */\n    public boolean validateResponse(final String pattern, final String url, final boolean isCheckCode, final int maxRetCode) throws Exception {\n        final String httpResponse = (String)getResponseList().toArray()[0];\n        LOG.debug(\"HTTP Response: {}\", httpResponse);\n        final Matcher m = HTTP_RESPONSE_REGEX.matcher(httpResponse);\n        if (m.matches()) {\n            if (isCheckCode) {\n                final int returnCode = Integer.valueOf(m.group(2)).intValue();\n                LOG.debug(\"return code = {}, max return code = {}\", returnCode, maxRetCode);\n                return (returnCode <= maxRetCode);\n            } else {\n                return true;\n            }\n        } else {\n            LOG.debug(\"does not match\");\n            return false;\n        }\n    }","commit_id":"944bfd7c8ef3e65ecba5a086a1317f4830fa31fe","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>validateResponse<\/p>\n     *\n     * @param pattern a {@link java.lang.String} object.\n     * @param url a {@link java.lang.String} object.\n     * @param isCheckCode a boolean.\n     * @param maxRetCode a int.\n     * @return a boolean.\n     * @throws java.lang.Exception if any.\n     */\n    public boolean validateResponse(final String pattern, final String url, final boolean isCheckCode, final int maxRetCode) throws Exception {\n        final String[] codeArray = Integer.toString(maxRetCode).split(\"\");\n        if(codeArray.length < 3) {\n            throw new Exception(\"Max Ret Code is too Short\");\n        }\n        final String httpResponse = (String)getResponseList().toArray()[0];\n\n        final Pattern p;\n        if (isCheckCode) {\n            p = Pattern.compile(String.format(\"([H][T][T][P+]/[1].[0-1]) ([0-%s][0-2][0-%s]) ([a-zA-Z ]+)\\r\\n\", codeArray[1], codeArray[3]));\n        } else {\n            p = DEFAULT_REGEX;\n        }\n\n        final Matcher m = p.matcher(httpResponse);\n        if (m.matches()) {\n            return getResponseListAsString(getResponseList().toArray()).contains(pattern);\n        }\n        \n        return false;\n    }","id":70949,"modified_method":"/**\n     * <p>validateResponse<\/p>\n     *\n     * @param pattern a {@link java.lang.String} object.\n     * @param url a {@link java.lang.String} object.\n     * @param isCheckCode a boolean.\n     * @param maxRetCode a int.\n     * @return a boolean.\n     * @throws java.lang.Exception if any.\n     */\n    public boolean validateResponse(final String pattern, final String url, final boolean isCheckCode, final int maxRetCode) throws Exception {\n        final String httpResponse = (String)getResponseList().toArray()[0];\n        LOG.debug(\"HTTP Response: {}\", httpResponse);\n        final Matcher m = HTTP_RESPONSE_REGEX.matcher(httpResponse);\n        if (m.matches()) {\n            if (isCheckCode) {\n                final int returnCode = Integer.valueOf(m.group(2)).intValue();\n                LOG.debug(\"return code = {}, max return code = {}\", returnCode, maxRetCode);\n                return (returnCode <= maxRetCode);\n            } else {\n                return true;\n            }\n        } else {\n            LOG.debug(\"does not match\");\n            return false;\n        }\n    }","commit_id":"1ead89ce7e663244f27983be80fdffedb2e01647","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@POST\n    @Produces( MediaType.APPLICATION_JSON )\n    @Consumes( MediaType.APPLICATION_JSON )\n    public Response exec( String data )\n    {\n        try\n        {\n            Map<String, Object> args = jsonToMap( data );\n\n            if ( !args.containsKey( \"command\" ) )\n            {\n                throw new IllegalArgumentException(\n                        \"Missing 'command' parameter in arguments.\" );\n            }\n\n\n            ScriptSession scriptSession = getSession( args );\n            log.info( scriptSession.toString() );\n\n            List<String> resultLines = scriptSession.evaluate( (String)args.get( \"command\" ) );\n\n            return Response.ok( JsonHelper.createJsonFrom( resultLines ) ).header(\n                    \"Content-Type\", MediaType.APPLICATION_JSON ).build();\n        } catch ( IllegalArgumentException e )\n        {\n            return Response.status( Status.BAD_REQUEST ).build();\n        }\n    }","id":70950,"modified_method":"@POST\n    @Produces( MediaType.APPLICATION_JSON )\n    @Consumes( MediaType.APPLICATION_JSON )\n    public Response exec( String data )\n    {\n        try\n        {\n            Map<String, Object> args = jsonToMap( data );\n\n            if ( !args.containsKey( \"command\" ) )\n            {\n                throw new IllegalArgumentException(\n                        \"Missing 'command' parameter in arguments.\" );\n            }\n\n\n            ScriptSession scriptSession = getSession( args );\n            log.info( scriptSession.toString() );\n\n            String result = scriptSession.evaluate( (String)args.get( \"command\" ) );\n\n            return Response.ok( JsonHelper.createJsonFrom( result ) ).header(\n                    \"Content-Type\", MediaType.APPLICATION_JSON ).build();\n        } catch ( IllegalArgumentException e )\n        {\n            return Response.status( Status.BAD_REQUEST ).build();\n        }\n    }","commit_id":"7347273f9c02207aa38dc4f79bd83b56a0d3e8c4","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Take some gremlin script, evaluate it in the context of this gremlin\n     * session, and return the result.\n     * \n     * @param script\n     * @return\n     */\n    @Override\n    @SuppressWarnings( \"unchecked\" )\n    public List<String> evaluate( String script )\n    {\n        try\n        {\n            resetOutputWriter();\n            Transaction tx = database.graph.beginTx();\n            List<Object> resultLines = (List<Object>) scriptEngine.eval( script );\n            tx.success();\n            tx.finish();\n            // Handle output data\n            List<String> outputLines = new ArrayList<String>();\n\n            // Handle eval() result\n            String[] printLines = outputWriter.toString().split( \"\\n\" );\n\n            if ( printLines.length > 0 && printLines[0].length() > 0 )\n            {\n                for ( String printLine : printLines )\n                {\n                    outputLines.add( printLine );\n                }\n            }\n\n            if ( resultLines == null\n                 || resultLines.size() == 0\n                 || ( resultLines.size() == 1 && ( resultLines.get( 0 ) == null || resultLines.get(\n                         0 ).toString().length() == 0 ) ) )\n            {\n                // Result was empty, add empty text if there was also no IO\n                // output\n                if ( outputLines.size() == 0 )\n                {\n                    outputLines.add( \"\" );\n                }\n            }\n            else\n            {\n                // Make sure all lines are strings\n                for ( Object resultLine : resultLines )\n                {\n                    outputLines.add( resultLine.toString() );\n                }\n            }\n\n            return outputLines;\n        }\n        catch ( ScriptException e )\n        {\n            return exceptionToResultList( e );\n        }\n        catch ( RuntimeException e )\n        {\n            e.printStackTrace();\n            return exceptionToResultList( e );\n        }\n    }","id":70951,"modified_method":"/**\n     * Take some gremlin script, evaluate it in the context of this gremlin\n     * session, and return the result.\n     *\n     * @param script\n     * @return\n     */\n    @Override\n    @SuppressWarnings( \"unchecked\" )\n    public String evaluate( String script )\n    {\n        try\n        {\n            List<Object> resultLines = runScript( script );\n\n            StringBuilder result = new StringBuilder();\n            result.append( outputWriter.toString() );\n\n            if ( resultLines.size() > 0 )\n            {\n                for ( Object resultLine : resultLines )\n                {\n                    result.append( resultLine.toString() );\n                }\n            }\n\n            return result.toString();\n        } catch ( ScriptException e )\n        {\n            return e.getMessage();\n        } catch ( RuntimeException e )\n        {\n            e.printStackTrace();\n            return e.getMessage();\n        }\n    }","commit_id":"7347273f9c02207aa38dc4f79bd83b56a0d3e8c4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void retrievesTheReferenceNode()\n    {\n        List<String> result = session.evaluate( \"$_\" );\n\n        assertThat( result.get( 0 ), is( \"v[0]\" ) );\n    }","id":70952,"modified_method":"@Test\n    public void retrievesTheReferenceNode()\n    {\n        String result = session.evaluate( \"$_\" );\n\n        assertThat( result, is( \"v[0]\" ) );\n    }","commit_id":"7347273f9c02207aa38dc4f79bd83b56a0d3e8c4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canCreateNodesInGremlinLand()\n    {\n        List<String> result = session.evaluate( \"g:add-v()\" );\n\n        assertThat( result.get( 0 ), is( \"v[1]\" ) );\n    }","id":70953,"modified_method":"@Test\n    public void canCreateNodesInGremlinLand()\n    {\n        String result = session.evaluate( \"g:add-v()\" );\n\n        assertThat( result, is( \"v[1]\" ) );\n    }","commit_id":"7347273f9c02207aa38dc4f79bd83b56a0d3e8c4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@POST\n    @Produces( MediaType.APPLICATION_JSON )\n    @Consumes( MediaType.APPLICATION_JSON )\n    public Response exec( String data )\n    {\n        try\n        {\n            Map<String, Object> args = jsonToMap( data );\n\n            if ( !args.containsKey( \"command\" ) )\n            {\n                throw new IllegalArgumentException(\n                        \"Missing 'command' parameter in arguments.\" );\n            }\n\n\n            ScriptSession scriptSession = getSession( args );\n            log.info( scriptSession.toString() );\n\n            List<String> resultLines = scriptSession.evaluate( (String)args.get( \"command\" ) );\n\n            return Response.ok( JsonHelper.createJsonFrom( resultLines ) ).header(\n                    \"Content-Type\", MediaType.APPLICATION_JSON ).build();\n        } catch ( IllegalArgumentException e )\n        {\n            return Response.status( Status.BAD_REQUEST ).build();\n        }\n    }","id":70954,"modified_method":"@POST\n    @Produces( MediaType.APPLICATION_JSON )\n    @Consumes( MediaType.APPLICATION_JSON )\n    public Response exec( String data )\n    {\n        try\n        {\n            Map<String, Object> args = jsonToMap( data );\n\n            if ( !args.containsKey( \"command\" ) )\n            {\n                throw new IllegalArgumentException(\n                        \"Missing 'command' parameter in arguments.\" );\n            }\n\n\n            ScriptSession scriptSession = getSession( args );\n            log.info( scriptSession.toString() );\n\n            String result = scriptSession.evaluate( (String)args.get( \"command\" ) );\n\n            return Response.ok( JsonHelper.createJsonFrom( result ) ).header(\n                    \"Content-Type\", MediaType.APPLICATION_JSON ).build();\n        } catch ( IllegalArgumentException e )\n        {\n            return Response.status( Status.BAD_REQUEST ).build();\n        }\n    }","commit_id":"c41fadcdbaa139f8fddeaa41012c0506dfde9d7c","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Take some gremlin script, evaluate it in the context of this gremlin\n     * session, and return the result.\n     * \n     * @param script\n     * @return\n     */\n    @Override\n    @SuppressWarnings( \"unchecked\" )\n    public List<String> evaluate( String script )\n    {\n        try\n        {\n            resetOutputWriter();\n            Transaction tx = database.graph.beginTx();\n            List<Object> resultLines = (List<Object>) scriptEngine.eval( script );\n            tx.success();\n            tx.finish();\n            // Handle output data\n            List<String> outputLines = new ArrayList<String>();\n\n            // Handle eval() result\n            String[] printLines = outputWriter.toString().split( \"\\n\" );\n\n            if ( printLines.length > 0 && printLines[0].length() > 0 )\n            {\n                for ( String printLine : printLines )\n                {\n                    outputLines.add( printLine );\n                }\n            }\n\n            if ( resultLines == null\n                 || resultLines.size() == 0\n                 || ( resultLines.size() == 1 && ( resultLines.get( 0 ) == null || resultLines.get(\n                         0 ).toString().length() == 0 ) ) )\n            {\n                // Result was empty, add empty text if there was also no IO\n                // output\n                if ( outputLines.size() == 0 )\n                {\n                    outputLines.add( \"\" );\n                }\n            }\n            else\n            {\n                // Make sure all lines are strings\n                for ( Object resultLine : resultLines )\n                {\n                    outputLines.add( resultLine.toString() );\n                }\n            }\n\n            return outputLines;\n        }\n        catch ( ScriptException e )\n        {\n            return exceptionToResultList( e );\n        }\n        catch ( RuntimeException e )\n        {\n            e.printStackTrace();\n            return exceptionToResultList( e );\n        }\n    }","id":70955,"modified_method":"/**\n     * Take some gremlin script, evaluate it in the context of this gremlin\n     * session, and return the result.\n     *\n     * @param script\n     * @return\n     */\n    @Override\n    @SuppressWarnings( \"unchecked\" )\n    public String evaluate( String script )\n    {\n        try\n        {\n            List<Object> resultLines = runScript( script );\n\n            StringBuilder result = new StringBuilder();\n            result.append( outputWriter.toString() );\n\n            if ( resultLines.size() > 0 )\n            {\n                for ( Object resultLine : resultLines )\n                {\n                    result.append( resultLine.toString() );\n                }\n            }\n\n            return result.toString();\n        } catch ( ScriptException e )\n        {\n            return e.getMessage();\n        } catch ( RuntimeException e )\n        {\n            e.printStackTrace();\n            return e.getMessage();\n        }\n    }","commit_id":"c41fadcdbaa139f8fddeaa41012c0506dfde9d7c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void retrievesTheReferenceNode()\n    {\n        List<String> result = session.evaluate( \"$_\" );\n\n        assertThat( result.get( 0 ), is( \"v[0]\" ) );\n    }","id":70956,"modified_method":"@Test\n    public void retrievesTheReferenceNode()\n    {\n        String result = session.evaluate( \"$_\" );\n\n        assertThat( result, is( \"v[0]\" ) );\n    }","commit_id":"c41fadcdbaa139f8fddeaa41012c0506dfde9d7c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canCreateNodesInGremlinLand()\n    {\n        List<String> result = session.evaluate( \"g:add-v()\" );\n\n        assertThat( result.get( 0 ), is( \"v[1]\" ) );\n    }","id":70957,"modified_method":"@Test\n    public void canCreateNodesInGremlinLand()\n    {\n        String result = session.evaluate( \"g:add-v()\" );\n\n        assertThat( result, is( \"v[1]\" ) );\n    }","commit_id":"c41fadcdbaa139f8fddeaa41012c0506dfde9d7c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@POST\n    @Produces( MediaType.APPLICATION_JSON )\n    @Consumes( MediaType.APPLICATION_JSON )\n    public Response exec( String data )\n    {\n        try\n        {\n            Map<String, Object> args = jsonToMap( data );\n\n            if ( !args.containsKey( \"command\" ) )\n            {\n                throw new IllegalArgumentException(\n                        \"Missing 'command' parameter in arguments.\" );\n            }\n\n\n            ScriptSession scriptSession = getSession( args );\n            log.info( scriptSession.toString() );\n\n            List<String> resultLines = scriptSession.evaluate( (String)args.get( \"command\" ) );\n\n            return Response.ok( JsonHelper.createJsonFrom( resultLines ) ).header(\n                    \"Content-Type\", MediaType.APPLICATION_JSON ).build();\n        } catch ( IllegalArgumentException e )\n        {\n            return Response.status( Status.BAD_REQUEST ).build();\n        }\n    }","id":70958,"modified_method":"@POST\n    @Produces( MediaType.APPLICATION_JSON )\n    @Consumes( MediaType.APPLICATION_JSON )\n    public Response exec( String data )\n    {\n        try\n        {\n            Map<String, Object> args = jsonToMap( data );\n\n            if ( !args.containsKey( \"command\" ) )\n            {\n                throw new IllegalArgumentException(\n                        \"Missing 'command' parameter in arguments.\" );\n            }\n\n\n            ScriptSession scriptSession = getSession( args );\n            log.info( scriptSession.toString() );\n\n            String result = scriptSession.evaluate( (String)args.get( \"command\" ) );\n\n            return Response.ok( JsonHelper.createJsonFrom( result ) ).header(\n                    \"Content-Type\", MediaType.APPLICATION_JSON ).build();\n        } catch ( IllegalArgumentException e )\n        {\n            return Response.status( Status.BAD_REQUEST ).build();\n        }\n    }","commit_id":"a348fcd72416f2337f3a3e9b96a01e6fb08d9b58","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Take some gremlin script, evaluate it in the context of this gremlin\n     * session, and return the result.\n     * \n     * @param script\n     * @return\n     */\n    @Override\n    @SuppressWarnings( \"unchecked\" )\n    public List<String> evaluate( String script )\n    {\n        try\n        {\n            resetOutputWriter();\n            Transaction tx = database.graph.beginTx();\n            List<Object> resultLines = (List<Object>) scriptEngine.eval( script );\n            tx.success();\n            tx.finish();\n            // Handle output data\n            List<String> outputLines = new ArrayList<String>();\n\n            // Handle eval() result\n            String[] printLines = outputWriter.toString().split( \"\\n\" );\n\n            if ( printLines.length > 0 && printLines[0].length() > 0 )\n            {\n                for ( String printLine : printLines )\n                {\n                    outputLines.add( printLine );\n                }\n            }\n\n            if ( resultLines == null\n                 || resultLines.size() == 0\n                 || ( resultLines.size() == 1 && ( resultLines.get( 0 ) == null || resultLines.get(\n                         0 ).toString().length() == 0 ) ) )\n            {\n                // Result was empty, add empty text if there was also no IO\n                // output\n                if ( outputLines.size() == 0 )\n                {\n                    outputLines.add( \"\" );\n                }\n            }\n            else\n            {\n                // Make sure all lines are strings\n                for ( Object resultLine : resultLines )\n                {\n                    outputLines.add( resultLine.toString() );\n                }\n            }\n\n            return outputLines;\n        }\n        catch ( ScriptException e )\n        {\n            return exceptionToResultList( e );\n        }\n        catch ( RuntimeException e )\n        {\n            e.printStackTrace();\n            return exceptionToResultList( e );\n        }\n    }","id":70959,"modified_method":"/**\n     * Take some gremlin script, evaluate it in the context of this gremlin\n     * session, and return the result.\n     *\n     * @param script\n     * @return\n     */\n    @Override\n    @SuppressWarnings( \"unchecked\" )\n    public String evaluate( String script )\n    {\n        try\n        {\n            List<Object> resultLines = runScript( script );\n\n            StringBuilder result = new StringBuilder();\n            result.append( outputWriter.toString() );\n\n            if ( resultLines.size() > 0 )\n            {\n                for ( Object resultLine : resultLines )\n                {\n                    result.append( resultLine.toString() );\n                }\n            }\n\n            return result.toString();\n        } catch ( ScriptException e )\n        {\n            return e.getMessage();\n        } catch ( RuntimeException e )\n        {\n            e.printStackTrace();\n            return e.getMessage();\n        }\n    }","commit_id":"a348fcd72416f2337f3a3e9b96a01e6fb08d9b58","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canCreateNodesInGremlinLand()\n    {\n        List<String> result = session.evaluate( \"g:add-v()\" );\n\n        assertThat( result.get( 0 ), is( \"v[1]\" ) );\n    }","id":70960,"modified_method":"@Test\n    public void canCreateNodesInGremlinLand()\n    {\n        String result = session.evaluate( \"g:add-v()\" );\n\n        assertThat( result, is( \"v[1]\" ) );\n    }","commit_id":"a348fcd72416f2337f3a3e9b96a01e6fb08d9b58","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void retrievesTheReferenceNode()\n    {\n        List<String> result = session.evaluate( \"$_\" );\n\n        assertThat( result.get( 0 ), is( \"v[0]\" ) );\n    }","id":70961,"modified_method":"@Test\n    public void retrievesTheReferenceNode()\n    {\n        String result = session.evaluate( \"$_\" );\n\n        assertThat( result, is( \"v[0]\" ) );\n    }","commit_id":"a348fcd72416f2337f3a3e9b96a01e6fb08d9b58","url":"https://github.com/neo4j/neo4j"},{"original_method":"@POST\n    @Produces( MediaType.APPLICATION_JSON )\n    @Consumes( MediaType.APPLICATION_JSON )\n    public Response exec( String data )\n    {\n        try\n        {\n            Map<String, Object> args = jsonToMap( data );\n\n            if ( !args.containsKey( \"command\" ) )\n            {\n                throw new IllegalArgumentException(\n                        \"Missing 'command' parameter in arguments.\" );\n            }\n\n\n            ScriptSession scriptSession = getSession( args );\n            log.info( scriptSession.toString() );\n\n            List<String> resultLines = scriptSession.evaluate( (String)args.get( \"command\" ) );\n\n            return Response.ok( JsonHelper.createJsonFrom( resultLines ) ).header(\n                    \"Content-Type\", MediaType.APPLICATION_JSON ).build();\n        } catch ( IllegalArgumentException e )\n        {\n            return Response.status( Status.BAD_REQUEST ).build();\n        }\n    }","id":70962,"modified_method":"@POST\n    @Produces( MediaType.APPLICATION_JSON )\n    @Consumes( MediaType.APPLICATION_JSON )\n    public Response exec( String data )\n    {\n        try\n        {\n            Map<String, Object> args = jsonToMap( data );\n\n            if ( !args.containsKey( \"command\" ) )\n            {\n                throw new IllegalArgumentException(\n                        \"Missing 'command' parameter in arguments.\" );\n            }\n\n\n            ScriptSession scriptSession = getSession( args );\n            log.info( scriptSession.toString() );\n\n            String result = scriptSession.evaluate( (String)args.get( \"command\" ) );\n\n            return Response.ok( JsonHelper.createJsonFrom( result ) ).header(\n                    \"Content-Type\", MediaType.APPLICATION_JSON ).build();\n        } catch ( IllegalArgumentException e )\n        {\n            return Response.status( Status.BAD_REQUEST ).build();\n        }\n    }","commit_id":"cd1c7d64487c418fb10be0aa130d8a1cec6f1524","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Take some gremlin script, evaluate it in the context of this gremlin\n     * session, and return the result.\n     * \n     * @param script\n     * @return\n     */\n    @Override\n    @SuppressWarnings( \"unchecked\" )\n    public List<String> evaluate( String script )\n    {\n        try\n        {\n            resetOutputWriter();\n            Transaction tx = database.graph.beginTx();\n            List<Object> resultLines = (List<Object>) scriptEngine.eval( script );\n            tx.success();\n            tx.finish();\n            // Handle output data\n            List<String> outputLines = new ArrayList<String>();\n\n            // Handle eval() result\n            String[] printLines = outputWriter.toString().split( \"\\n\" );\n\n            if ( printLines.length > 0 && printLines[0].length() > 0 )\n            {\n                for ( String printLine : printLines )\n                {\n                    outputLines.add( printLine );\n                }\n            }\n\n            if ( resultLines == null\n                 || resultLines.size() == 0\n                 || ( resultLines.size() == 1 && ( resultLines.get( 0 ) == null || resultLines.get(\n                         0 ).toString().length() == 0 ) ) )\n            {\n                // Result was empty, add empty text if there was also no IO\n                // output\n                if ( outputLines.size() == 0 )\n                {\n                    outputLines.add( \"\" );\n                }\n            }\n            else\n            {\n                // Make sure all lines are strings\n                for ( Object resultLine : resultLines )\n                {\n                    outputLines.add( resultLine.toString() );\n                }\n            }\n\n            return outputLines;\n        }\n        catch ( ScriptException e )\n        {\n            return exceptionToResultList( e );\n        }\n        catch ( RuntimeException e )\n        {\n            e.printStackTrace();\n            return exceptionToResultList( e );\n        }\n    }","id":70963,"modified_method":"/**\n     * Take some gremlin script, evaluate it in the context of this gremlin\n     * session, and return the result.\n     *\n     * @param script\n     * @return\n     */\n    @Override\n    @SuppressWarnings( \"unchecked\" )\n    public String evaluate( String script )\n    {\n        try\n        {\n            List<Object> resultLines = runScript( script );\n\n            StringBuilder result = new StringBuilder();\n            result.append( outputWriter.toString() );\n\n            if ( resultLines.size() > 0 )\n            {\n                for ( Object resultLine : resultLines )\n                {\n                    result.append( resultLine.toString() );\n                }\n            }\n\n            return result.toString();\n        } catch ( ScriptException e )\n        {\n            return e.getMessage();\n        } catch ( RuntimeException e )\n        {\n            e.printStackTrace();\n            return e.getMessage();\n        }\n    }","commit_id":"cd1c7d64487c418fb10be0aa130d8a1cec6f1524","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canCreateNodesInGremlinLand()\n    {\n        List<String> result = session.evaluate( \"g:add-v()\" );\n\n        assertThat( result.get( 0 ), is( \"v[1]\" ) );\n    }","id":70964,"modified_method":"@Test\n    public void canCreateNodesInGremlinLand()\n    {\n        String result = session.evaluate( \"g:add-v()\" );\n\n        assertThat( result, is( \"v[1]\" ) );\n    }","commit_id":"cd1c7d64487c418fb10be0aa130d8a1cec6f1524","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void retrievesTheReferenceNode()\n    {\n        List<String> result = session.evaluate( \"$_\" );\n\n        assertThat( result.get( 0 ), is( \"v[0]\" ) );\n    }","id":70965,"modified_method":"@Test\n    public void retrievesTheReferenceNode()\n    {\n        String result = session.evaluate( \"$_\" );\n\n        assertThat( result, is( \"v[0]\" ) );\n    }","commit_id":"cd1c7d64487c418fb10be0aa130d8a1cec6f1524","url":"https://github.com/neo4j/neo4j"},{"original_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n\t\tSnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n\t\tSnmpObjId[] oids = new SnmpObjId[]\n\t\t\t\t{SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_PORTID, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_DESCR,instance)};\n\t\t\n\t\tSnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\t\t// Log error condition...rreally must be null if the port was not found?\n\t\tif (val == null || val.length != 3 || val[0] == null || val[1] == null || !val[0].isNumeric())\n\t\t\treturn null;\n\t\tLldpLink lldplink = new LldpLink();\n\t\tlldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n\t\tlldplink.setLldpPortId(LldpRemTableTracker.decodeLldpPortId(val[0].toInt(),val[1]));\n\t\tlldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n\t\tif (val[2] != null)\n\t\t\tlldplink.setLldpPortDescr((val[2].toDisplayString()));\n\t\telse\n\t\t\tlldplink.setLldpPortDescr(\"\");\n\t\tif (val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n\t\t\ttry {\n\t\t\t\tlldplink.setLldpPortIfindex((val[1].toInt()));\n\t\t\t} catch (Exception e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn lldplink;\n\t}","id":70966,"modified_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n        SnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n        SnmpObjId[] oids = new SnmpObjId[] {\n                SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n                SnmpObjId.get(LLDP_LOC_PORTID, instance),\n                SnmpObjId.get(LLDP_LOC_DESCR, instance) };\n\n        SnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\n        LldpLink lldplink = new LldpLink();\n        lldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n        if (val == null || val.length != 3) {\n            LOG.warn(\"get: cannot find local instance for lldp local port number {}\",\n                     lldpRemLocalPortNum);\n            LOG.warn(\"get: setting default not found Values: portidtype \\\"InterfaceAlias\\\", portid=\\\"Not Found On lldpLocPortTable\\\"\");\n            lldplink.setLldpPortIdSubType(LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACEALIAS);\n            lldplink.setLldpPortId(\"\\\"Not Found On lldpLocPortTable\\\"\");\n            lldplink.setLldpPortDescr(\"\");\n            return lldplink;\n        }\n\n        if (val[0] == null || !val[0].isNumeric()) {\n            LOG.warn(\"get: port id subtype is null or invalid for lldp local port number {}\",\n                     lldpRemLocalPortNum);\n            LOG.warn(\"get: setting default not found Values: portidtype \\\"InterfaceAlias\\\"\");\n            lldplink.setLldpPortIdSubType(LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACEALIAS);\n        } else {\n            lldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n        }\n        if (val[1] == null) {\n            LOG.warn(\"get: port id is null for lldp local port number {}\",\n                     lldpRemLocalPortNum);\n            LOG.warn(\"get: setting default not found Values: portid=\\\"Not Found On lldpLocPortTable\\\"\");\n            lldplink.setLldpPortId(\"\\\"Not Found On lldpLocPortTable\\\"\");\n        } else {\n            lldplink.setLldpPortId(LldpRemTableTracker.decodeLldpPortId(lldplink.getLldpPortIdSubType().getValue(),\n                                                                        val[1]));\n        }\n        if (val[2] != null)\n            lldplink.setLldpPortDescr((val[2].toDisplayString()));\n        else\n            lldplink.setLldpPortDescr(\"\");\n        if (val[0].isNumeric()\n                && val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n            try {\n                lldplink.setLldpPortIfindex((val[1].toInt()));\n            } catch (Exception e) {\n                LOG.debug(\"get: failed to convert to ifindex local port id {}\",\n                          val[1]);\n            }\n        }\n        return lldplink;\n    }","commit_id":"9b919fd47837602a70927a871c5067442d5012b4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row count: {}\", getColumnCount());\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n            // Check if lldpLink is null.....and do what?\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(LldpLocalGroupTracker.decodeLldpChassisId(getLldpRemChassisId() , getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(getLldpRemPortid());\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","id":70967,"modified_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n            // Check if lldpLink is null.....and do what?\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(LldpLocalGroupTracker.decodeLldpChassisId(getLldpRemChassisId() , getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(getLldpRemPortid());\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","commit_id":"9b919fd47837602a70927a871c5067442d5012b4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t    // Fix for DragonWave, we avoid to store if target has the same chassis id then the source\n        \t    if (lldpLocalGroup.getLldpLocChassisid().equals(row.getLldpRemChassisId())\n\t                && lldpLocalGroup.getLldpLocChassisidSubType().intValue() == row.getLldpRemChassisidSubtype().intValue())\n        \t        return;\n        \t    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","id":70968,"modified_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        if (getSysoid() == null || getSysoid().equals(DW_SYSOID) ) {\n            if (lldpLocalGroup.getLldpLocChassisid().toHexString().equals(DW_NULL_CHASSIS_ID) &&\n                    lldpLocalGroup.getLldpLocChassisidSubType() == LldpChassisIdSubType.LLDP_CHASSISID_SUBTYPE_CHASSISCOMPONENT.getValue()) {\n                LOG.info( \"lldp not active for Dragon Wave Device identifier : {}\", lldpLocalGroup.getLldpElement());\n                return;\n            }\n    \n            if (lldpLocalGroup.getLldpLocSysname().equals(DW_NULL_SYSOID_ID) ) {\n                LOG.info( \"lldp not active for Dragon Wave Device identifier : {}\", lldpLocalGroup.getLldpElement());\n                return;\n            }\n        }\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","commit_id":"9b919fd47837602a70927a871c5067442d5012b4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n\t\tSnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n\t\tSnmpObjId[] oids = new SnmpObjId[]\n\t\t\t\t{SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_PORTID, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_DESCR,instance)};\n\t\t\n\t\tSnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\t\t// Log error condition...rreally must be null if the port was not found?\n\t\tif (val == null || val.length != 3 || val[0] == null || val[1] == null || !val[0].isNumeric())\n\t\t\treturn null;\n\t\tLldpLink lldplink = new LldpLink();\n\t\tlldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n\t\tlldplink.setLldpPortId(LldpRemTableTracker.decodeLldpPortId(val[0].toInt(),val[1]));\n\t\tlldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n\t\tif (val[2] != null)\n\t\t\tlldplink.setLldpPortDescr((val[2].toDisplayString()));\n\t\telse\n\t\t\tlldplink.setLldpPortDescr(\"\");\n\t\tif (val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n\t\t\ttry {\n\t\t\t\tlldplink.setLldpPortIfindex((val[1].toInt()));\n\t\t\t} catch (Exception e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn lldplink;\n\t}","id":70969,"modified_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n        SnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n        SnmpObjId[] oids = new SnmpObjId[] {\n                SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n                SnmpObjId.get(LLDP_LOC_PORTID, instance),\n                SnmpObjId.get(LLDP_LOC_DESCR, instance) };\n\n        SnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\n        LldpLink lldplink = new LldpLink();\n        lldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n        if (val == null || val.length != 3) {\n            LOG.warn(\"get: cannot find local instance for lldp local port number {}\",\n                     lldpRemLocalPortNum);\n            LOG.warn(\"get: setting default not found Values: portidtype \\\"InterfaceAlias\\\", portid=\\\"Not Found On lldpLocPortTable\\\"\");\n            lldplink.setLldpPortIdSubType(LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACEALIAS);\n            lldplink.setLldpPortId(\"\\\"Not Found On lldpLocPortTable\\\"\");\n            lldplink.setLldpPortDescr(\"\");\n            return lldplink;\n        }\n\n        if (val[0] == null || !val[0].isNumeric()) {\n            LOG.warn(\"get: port id subtype is null or invalid for lldp local port number {}\",\n                     lldpRemLocalPortNum);\n            LOG.warn(\"get: setting default not found Values: portidtype \\\"InterfaceAlias\\\"\");\n            lldplink.setLldpPortIdSubType(LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACEALIAS);\n        } else {\n            lldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n        }\n        if (val[1] == null) {\n            LOG.warn(\"get: port id is null for lldp local port number {}\",\n                     lldpRemLocalPortNum);\n            LOG.warn(\"get: setting default not found Values: portid=\\\"Not Found On lldpLocPortTable\\\"\");\n            lldplink.setLldpPortId(\"\\\"Not Found On lldpLocPortTable\\\"\");\n        } else {\n            lldplink.setLldpPortId(LldpRemTableTracker.decodeLldpPortId(lldplink.getLldpPortIdSubType().getValue(),\n                                                                        val[1]));\n        }\n        if (val[2] != null)\n            lldplink.setLldpPortDescr((val[2].toDisplayString()));\n        else\n            lldplink.setLldpPortDescr(\"\");\n        if (val[0].isNumeric()\n                && val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n            try {\n                lldplink.setLldpPortIfindex((val[1].toInt()));\n            } catch (Exception e) {\n                LOG.debug(\"get: failed to convert to ifindex local port id {}\",\n                          val[1]);\n            }\n        }\n        return lldplink;\n    }","commit_id":"4b48d40c8d99d3a570da1429c1e151ba7599ccd0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row count: {}\", getColumnCount());\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n            // Check if lldpLink is null.....and do what?\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(LldpLocalGroupTracker.decodeLldpChassisId(getLldpRemChassisId() , getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(getLldpRemPortid());\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","id":70970,"modified_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n            // Check if lldpLink is null.....and do what?\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(LldpLocalGroupTracker.decodeLldpChassisId(getLldpRemChassisId() , getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(getLldpRemPortid());\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","commit_id":"4b48d40c8d99d3a570da1429c1e151ba7599ccd0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t    // Fix for DragonWave, we avoid to store if target has the same chassis id then the source\n        \t    if (lldpLocalGroup.getLldpLocChassisid().equals(row.getLldpRemChassisId())\n\t                && lldpLocalGroup.getLldpLocChassisidSubType().intValue() == row.getLldpRemChassisidSubtype().intValue())\n        \t        return;\n        \t    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","id":70971,"modified_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        if (getSysoid() == null || getSysoid().equals(DW_SYSOID) ) {\n            if (lldpLocalGroup.getLldpLocChassisid().toHexString().equals(DW_NULL_CHASSIS_ID) &&\n                    lldpLocalGroup.getLldpLocChassisidSubType() == LldpChassisIdSubType.LLDP_CHASSISID_SUBTYPE_CHASSISCOMPONENT.getValue()) {\n                LOG.info( \"lldp not active for Dragon Wave Device identifier : {}\", lldpLocalGroup.getLldpElement());\n                return;\n            }\n    \n            if (lldpLocalGroup.getLldpLocSysname().equals(DW_NULL_SYSOID_ID) ) {\n                LOG.info( \"lldp not active for Dragon Wave Device identifier : {}\", lldpLocalGroup.getLldpElement());\n                return;\n            }\n        }\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","commit_id":"4b48d40c8d99d3a570da1429c1e151ba7599ccd0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n\t\tSnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n\t\tSnmpObjId[] oids = new SnmpObjId[]\n\t\t\t\t{SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_PORTID, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_DESCR,instance)};\n\t\t\n\t\tSnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\t\t// Log error condition...rreally must be null if the port was not found?\n\t\tif (val == null || val.length != 3 || val[0] == null || val[1] == null || !val[0].isNumeric())\n\t\t\treturn null;\n\t\tLldpLink lldplink = new LldpLink();\n\t\tlldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n\t\tlldplink.setLldpPortId(LldpRemTableTracker.decodeLldpPortId(val[0].toInt(),val[1]));\n\t\tlldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n\t\tif (val[2] != null)\n\t\t\tlldplink.setLldpPortDescr((val[2].toDisplayString()));\n\t\telse\n\t\t\tlldplink.setLldpPortDescr(\"\");\n\t\tif (val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n\t\t\ttry {\n\t\t\t\tlldplink.setLldpPortIfindex((val[1].toInt()));\n\t\t\t} catch (Exception e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn lldplink;\n\t}","id":70972,"modified_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n        SnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n        SnmpObjId[] oids = new SnmpObjId[] {\n                SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n                SnmpObjId.get(LLDP_LOC_PORTID, instance),\n                SnmpObjId.get(LLDP_LOC_DESCR, instance) };\n\n        SnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\n        LldpLink lldplink = new LldpLink();\n        lldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n        if (val == null || val.length != 3) {\n            LOG.warn(\"get: cannot find local instance for lldp local port number {}\",\n                     lldpRemLocalPortNum);\n            LOG.warn(\"get: setting default not found Values: portidtype \\\"InterfaceAlias\\\", portid=\\\"Not Found On lldpLocPortTable\\\"\");\n            lldplink.setLldpPortIdSubType(LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACEALIAS);\n            lldplink.setLldpPortId(\"\\\"Not Found On lldpLocPortTable\\\"\");\n            lldplink.setLldpPortDescr(\"\");\n            return lldplink;\n        }\n\n        if (val[0] == null || !val[0].isNumeric()) {\n            LOG.warn(\"get: port id subtype is null or invalid for lldp local port number {}\",\n                     lldpRemLocalPortNum);\n            LOG.warn(\"get: setting default not found Values: portidtype \\\"InterfaceAlias\\\"\");\n            lldplink.setLldpPortIdSubType(LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACEALIAS);\n        } else {\n            lldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n        }\n        if (val[1] == null) {\n            LOG.warn(\"get: port id is null for lldp local port number {}\",\n                     lldpRemLocalPortNum);\n            LOG.warn(\"get: setting default not found Values: portid=\\\"Not Found On lldpLocPortTable\\\"\");\n            lldplink.setLldpPortId(\"\\\"Not Found On lldpLocPortTable\\\"\");\n        } else {\n            lldplink.setLldpPortId(LldpRemTableTracker.decodeLldpPortId(lldplink.getLldpPortIdSubType().getValue(),\n                                                                        val[1]));\n        }\n        if (val[2] != null)\n            lldplink.setLldpPortDescr((val[2].toDisplayString()));\n        else\n            lldplink.setLldpPortDescr(\"\");\n        if (val[0].isNumeric()\n                && val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n            try {\n                lldplink.setLldpPortIfindex((val[1].toInt()));\n            } catch (Exception e) {\n                LOG.debug(\"get: failed to convert to ifindex local port id {}\",\n                          val[1]);\n            }\n        }\n        return lldplink;\n    }","commit_id":"572dbc319f00f450dbc354ffe2db5807f4666ca5","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row count: {}\", getColumnCount());\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n            // Check if lldpLink is null.....and do what?\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(LldpLocalGroupTracker.decodeLldpChassisId(getLldpRemChassisId() , getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(getLldpRemPortid());\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","id":70973,"modified_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n            // Check if lldpLink is null.....and do what?\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(LldpLocalGroupTracker.decodeLldpChassisId(getLldpRemChassisId() , getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(getLldpRemPortid());\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","commit_id":"572dbc319f00f450dbc354ffe2db5807f4666ca5","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t    // Fix for DragonWave, we avoid to store if target has the same chassis id then the source\n        \t    if (lldpLocalGroup.getLldpLocChassisid().equals(row.getLldpRemChassisId())\n\t                && lldpLocalGroup.getLldpLocChassisidSubType().intValue() == row.getLldpRemChassisidSubtype().intValue())\n        \t        return;\n        \t    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","id":70974,"modified_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        if (getSysoid() == null || getSysoid().equals(DW_SYSOID) ) {\n            if (lldpLocalGroup.getLldpLocChassisid().toHexString().equals(DW_NULL_CHASSIS_ID) &&\n                    lldpLocalGroup.getLldpLocChassisidSubType() == LldpChassisIdSubType.LLDP_CHASSISID_SUBTYPE_CHASSISCOMPONENT.getValue()) {\n                LOG.info( \"lldp not active for Dragon Wave Device identifier : {}\", lldpLocalGroup.getLldpElement());\n                return;\n            }\n    \n            if (lldpLocalGroup.getLldpLocSysname().equals(DW_NULL_SYSOID_ID) ) {\n                LOG.info( \"lldp not active for Dragon Wave Device identifier : {}\", lldpLocalGroup.getLldpElement());\n                return;\n            }\n        }\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","commit_id":"572dbc319f00f450dbc354ffe2db5807f4666ca5","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void addRootsToWatch() {\n    LocalFileSystem.getInstance().removeWatchedRoots(myRootsToWatch);\n    myRootsToWatch.clear();\n\n    Module[] modules = ModuleManager.getInstance(myProject).getModules();\n    Set<VirtualFile> contentRoots = new HashSet<VirtualFile>();\n    for (Module module : modules) {\n      final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module);\n      contentRoots.addAll(Arrays.asList(moduleRootManager.getContentRoots()));\n      contentRoots.add(module.getModuleFile());\n    }\n\n    contentRoots.add(myProject.getProjectFile()); // No need to add workspace file separately since they're definetely on same directory with ipr.\n\n    myRootsToWatch.addAll(LocalFileSystem.getInstance().addRootsToWatch(contentRoots, true));\n\n\n    Set<VirtualFile> libraryRoots = new HashSet<VirtualFile>();\n    for (Module module : modules) {\n      final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module);\n      final OrderEntry[] orderEntries = moduleRootManager.getOrderEntries();\n      for (OrderEntry entry : orderEntries) {\n        if (entry instanceof LibraryOrderEntry) {\n          final Library library = ((LibraryOrderEntry)entry).getLibrary();\n          libraryRoots.addAll(getRootsToTrack(library, OrderRootType.CLASSES));\n          libraryRoots.addAll(getRootsToTrack(library, OrderRootType.SOURCES));\n          libraryRoots.addAll(getRootsToTrack(library, OrderRootType.JAVADOC));\n        }\n      }\n    }\n\n    myRootsToWatch.addAll(LocalFileSystem.getInstance().addRootsToWatch(libraryRoots, false));\n  }","id":70975,"modified_method":"private void addRootsToWatch() {\n    LocalFileSystem.getInstance().removeWatchedRoots(myRootsToWatch);\n    myRootsToWatch.clear();\n\n    Module[] modules = ModuleManager.getInstance(myProject).getModules();\n    Set<VirtualFile> contentRoots = new HashSet<VirtualFile>();\n    for (Module module : modules) {\n      final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module);\n      contentRoots.addAll(Arrays.asList(moduleRootManager.getContentRoots()));\n      final VirtualFile moduleFile = module.getModuleFile();\n      if (moduleFile != null) {\n        contentRoots.add(moduleFile);\n      }\n    }\n\n    final VirtualFile projectFile = myProject.getProjectFile();\n    if (projectFile != null) {\n      contentRoots.add(projectFile);\n      // No need to add workspace file separately since they're definetely on same directory with ipr.\n    }\n\n    myRootsToWatch.addAll(LocalFileSystem.getInstance().addRootsToWatch(contentRoots, true));\n\n\n    Set<VirtualFile> libraryRoots = new HashSet<VirtualFile>();\n    for (Module module : modules) {\n      final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module);\n      final OrderEntry[] orderEntries = moduleRootManager.getOrderEntries();\n      for (OrderEntry entry : orderEntries) {\n        if (entry instanceof LibraryOrderEntry) {\n          final Library library = ((LibraryOrderEntry)entry).getLibrary();\n          libraryRoots.addAll(getRootsToTrack(library, OrderRootType.CLASSES));\n          libraryRoots.addAll(getRootsToTrack(library, OrderRootType.SOURCES));\n          libraryRoots.addAll(getRootsToTrack(library, OrderRootType.JAVADOC));\n        }\n      }\n    }\n\n    myRootsToWatch.addAll(LocalFileSystem.getInstance().addRootsToWatch(libraryRoots, false));\n  }","commit_id":"cb827722e2db08a1b96b3152a5417f3721ca8f89","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static synchronized void closeAndDeleteProject() {\n    if (ourProject != null) {\n      final File projectFile = VfsUtil.virtualToIoFile(((ProjectEx)ourProject).getStateStore().getProjectFile());\n      if (!ourProject.isDisposed()) Disposer.dispose(ourProject);\n      FileUtil.delete(projectFile);\n    }\n  }","id":70976,"modified_method":"private static synchronized void closeAndDeleteProject() {\n    if (ourProject != null) {\n      final VirtualFile projFile = ((ProjectEx)ourProject).getStateStore().getProjectFile();\n      final File projectFile = projFile == null ? null : VfsUtil.virtualToIoFile(projFile);\n      if (!ourProject.isDisposed()) Disposer.dispose(ourProject);\n      \n      if (projectFile != null) {\n        FileUtil.delete(projectFile);\n      }\n    }\n  }","commit_id":"57ca6b61d8be977187b1a7e055677334ecec83d0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void checkIfProjectIsConflicting() {\n    FileStatus currentStatus = FileStatusManager.getInstance(myProject).getStatus(myProject.getProjectFile());\n    if (currentStatus != myLastProjectStatus) {\n      if (currentStatus == FileStatus.MERGED_WITH_CONFLICTS || currentStatus == FileStatus.MERGED_WITH_BOTH_CONFLICTS) {\n        int answer = Messages.showYesNoDialog(myProject, \"You have your project file unmerged. It is strongly recommended to merge it before continuing. \" + \"\\nDo you want to merge it now?\", \"Unmerged Project File\", Messages.getWarningIcon());\n        if (answer == 0) {\n          AbstractVcsHelper.getInstance(myProject).showMergeDialog(Arrays.asList(myProject.getProjectFile()));\n        }\n      }\n      myLastProjectStatus = currentStatus;\n    }\n  }","id":70977,"modified_method":"private void checkIfProjectIsConflicting() {\n    VirtualFile projectFile = myProject.getProjectFile();\n    if (projectFile == null) {\n      return;\n    }\n    FileStatus currentStatus = FileStatusManager.getInstance(myProject).getStatus(projectFile);\n    if (currentStatus != myLastProjectStatus) {\n      if (currentStatus == FileStatus.MERGED_WITH_CONFLICTS || currentStatus == FileStatus.MERGED_WITH_BOTH_CONFLICTS) {\n        int answer = Messages.showYesNoDialog(myProject, \"You have your project file unmerged. It is strongly recommended to merge it before continuing. \" + \"\\nDo you want to merge it now?\", \"Unmerged Project File\", Messages.getWarningIcon());\n        if (answer == 0) {\n          AbstractVcsHelper.getInstance(myProject).showMergeDialog(Arrays.asList(projectFile));\n        }\n      }\n      myLastProjectStatus = currentStatus;\n    }\n  }","commit_id":"5e5751b235fb3b148df44c7b09e4372082c263a6","url":"https://github.com/JetBrains/MPS"},{"original_method":"private String newSessionId() {\n    return myProject.getProjectFile().getAbsolutePath().hashCode() + Long.toHexString(System.currentTimeMillis());\n  }","id":70978,"modified_method":"private String newSessionId() {\n    File projectFile = myProject.getProjectFile();\n    return (projectFile != null ? projectFile.getAbsolutePath().hashCode() : System.identityHashCode(myProject)) +\n      Long.toHexString(System.currentTimeMillis());\n  }","commit_id":"89a11b391536b44d91b55bab5851dc194a36fa4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void prepare() throws OsgiBuildException {\n    myModuleOutputDir = JpsJavaExtensionService.getInstance().getOutputDirectory(myModule, false);\n    if (myModuleOutputDir == null) {\n      throw new OsgiBuildException(\"Unable to determine the compiler output path for the module.\");\n    }\n\n    String jarFileLocation = myExtension.getJarFileLocation();\n    if (jarFileLocation.isEmpty()) {\n      throw new OsgiBuildException(\"Bundle path is empty - please check OSGi facet settings.\");\n    }\n\n    myOutputJarFile = new File(jarFileLocation);\n    if (!FileUtil.delete(myOutputJarFile)) {\n      throw new OsgiBuildException(\"Can't delete bundle file '\" + myOutputJarFile + \"'.\");\n    }\n    if (!FileUtil.createParentDirs(myOutputJarFile)) {\n      throw new OsgiBuildException(\"Cannot create directory for bundle file '\" + myOutputJarFile + \"'.\");\n    }\n\n    List<File> classes = ContainerUtil.newSmartList(myModuleOutputDir);\n    for (JpsDependencyElement dependency : myModule.getDependenciesList().getDependencies()) {\n      if (dependency instanceof JpsModuleDependency) {\n        JpsModule module = ((JpsModuleDependency)dependency).getModule();\n        if (module != null && JpsOsmorcExtensionService.getExtension(module) == null) {\n          File outputDir = JpsJavaExtensionService.getInstance().getOutputDirectory(module, false);\n          if (outputDir != null) {\n            classes.add(outputDir);\n          }\n        }\n      }\n    }\n    myClasses = classes.toArray(new File[classes.size()]);\n\n    mySources = ContainerUtil.map2Array(myModule.getSourceRoots(), File.class, new Function<JpsModuleSourceRoot, File>() {\n      @Override\n      public File fun(JpsModuleSourceRoot root) {\n        return root.getFile();\n      }\n    });\n    myBndWrapper = new BndWrapper(this);\n  }","id":70979,"modified_method":"private void prepare() throws OsgiBuildException {\n    myModuleOutputDir = JpsJavaExtensionService.getInstance().getOutputDirectory(myModule, false);\n    if (myModuleOutputDir == null) {\n      throw new OsgiBuildException(\"Unable to determine the compiler output path for the module.\");\n    }\n\n    String jarFileLocation = myExtension.getJarFileLocation();\n    if (jarFileLocation.isEmpty()) {\n      throw new OsgiBuildException(\"Bundle path is empty - please check OSGi facet settings.\");\n    }\n\n    myOutputJarFile = new File(jarFileLocation);\n    if (!FileUtil.delete(myOutputJarFile)) {\n      throw new OsgiBuildException(\"Can't delete bundle file '\" + myOutputJarFile + \"'.\");\n    }\n    if (!FileUtil.createParentDirs(myOutputJarFile)) {\n      throw new OsgiBuildException(\"Cannot create directory for bundle file '\" + myOutputJarFile + \"'.\");\n    }\n\n    List<File> classes = ContainerUtil.newSmartList();\n    if (myModuleOutputDir.exists()) {\n      classes.add(myModuleOutputDir);\n    }\n    for (JpsDependencyElement dependency : myModule.getDependenciesList().getDependencies()) {\n      if (dependency instanceof JpsModuleDependency) {\n        JpsModule module = ((JpsModuleDependency)dependency).getModule();\n        if (module != null && JpsOsmorcExtensionService.getExtension(module) == null) {\n          File outputDir = JpsJavaExtensionService.getInstance().getOutputDirectory(module, false);\n          if (outputDir != null && outputDir.exists()) {\n            classes.add(outputDir);\n          }\n        }\n      }\n    }\n    myClasses = classes.isEmpty() ? ArrayUtil.EMPTY_FILE_ARRAY : classes.toArray(new File[classes.size()]);\n\n    List<File> sources = ContainerUtil.newSmartList();\n    for (JpsModuleSourceRoot sourceRoot : myModule.getSourceRoots()) {\n      File sourceDir = sourceRoot.getFile();\n      if (sourceDir.exists()) {\n        sources.add(sourceDir);\n      }\n    }\n    mySources = sources.isEmpty() ? ArrayUtil.EMPTY_FILE_ARRAY : sources.toArray(new File[sources.size()]);\n\n    myBndWrapper = new BndWrapper(this);\n  }","commit_id":"b54fe79d42f5a5672d5dd60b6e0da89bd49022f2","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static void fillSourceRoots(@NotNull Module module, @NotNull Set<Module> visited, @NotNull Set<VirtualFile> result) {\n    visited.add(module);\n    ModuleRootManager manager = ModuleRootManager.getInstance(module);\n    Collections.addAll(result, manager.getSourceRoots());\n    for (OrderEntry entry : manager.getOrderEntries()) {\n      if (entry instanceof ModuleOrderEntry) {\n        ModuleOrderEntry moduleOrderEntry = (ModuleOrderEntry)entry;\n        DependencyScope scope = moduleOrderEntry.getScope();\n        if (scope == DependencyScope.COMPILE || scope == DependencyScope.TEST) {\n          Module depModule = moduleOrderEntry.getModule();\n          if (depModule != null && !visited.contains(depModule)) {\n            fillSourceRoots(depModule, visited, result);\n          }\n        }\n      }\n    }\n  }","id":70980,"modified_method":"private static void fillSourceRoots(@NotNull Module module, @NotNull Set<Module> visited, @NotNull Set<VirtualFile> result) {\n    visited.add(module);\n    VirtualFile resDir = AndroidRootUtil.getResourceDir(module);\n    ModuleRootManager manager = ModuleRootManager.getInstance(module);\n    for (VirtualFile sourceRoot : manager.getSourceRoots()) {\n      if (resDir != sourceRoot) {\n        result.add(sourceRoot);\n      }\n    }\n    for (OrderEntry entry : manager.getOrderEntries()) {\n      if (entry instanceof ModuleOrderEntry) {\n        ModuleOrderEntry moduleOrderEntry = (ModuleOrderEntry)entry;\n        DependencyScope scope = moduleOrderEntry.getScope();\n        if (scope == DependencyScope.COMPILE || scope == DependencyScope.TEST) {\n          Module depModule = moduleOrderEntry.getModule();\n          if (depModule != null && !visited.contains(depModule)) {\n            fillSourceRoots(depModule, visited, result);\n          }\n        }\n      }\n    }\n  }","commit_id":"5b4f0459a6d33300ae13b9a0b37513431df20b52","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected static void checkForTestRoots(Module srcModule, Set<VirtualFile> testFolders) {\n    testFolders.addAll(ModuleRootManager.getInstance(srcModule).getSourceRoots(JavaSourceRootType.TEST_SOURCE));\n    //create test in the same module\n    if (!testFolders.isEmpty()) return;\n\n    //suggest to choose from all dependencies modules\n    final HashSet<Module> modules = new HashSet<Module>();\n    ModuleUtilCore.collectModulesDependsOn(srcModule, modules);\n    for (Module module : modules) {\n      testFolders.addAll(ModuleRootManager.getInstance(module).getSourceRoots(JavaSourceRootType.TEST_SOURCE));\n    }\n  }","id":70981,"modified_method":"protected static void checkForTestRoots(Module srcModule, Set<VirtualFile> testFolders) {\n    List<VirtualFile> sourceRoots = ModuleRootManager.getInstance(srcModule).getSourceRoots(JavaSourceRootType.TEST_SOURCE);\n    for (VirtualFile sourceRoot : sourceRoots) {\n      if (!JavaProjectRootsUtil.isInGeneratedCode(sourceRoot, srcModule.getProject())) {\n        testFolders.add(sourceRoot);\n      }\n    }\n    //create test in the same module\n    if (!testFolders.isEmpty()) return;\n\n    //suggest to choose from all dependencies modules\n    final HashSet<Module> modules = new HashSet<Module>();\n    ModuleUtilCore.collectModulesDependsOn(srcModule, modules);\n    for (Module module : modules) {\n      testFolders.addAll(ModuleRootManager.getInstance(module).getSourceRoots(JavaSourceRootType.TEST_SOURCE));\n    }\n  }","commit_id":"b51b95bafd02ce59d23f747e816fd61ea7727435","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void finishRegister(final SendableGet[] getters, boolean persistent, ObjectContainer container, final boolean anyValid, final DatastoreCheckerItem reg) {\n\t\tif(logMINOR) Logger.minor(this, \"finishRegister for \"+getters+\" anyValid=\"+anyValid+\" reg=\"+reg+\" persistent=\"+persistent);\n\t\tif(isInsertScheduler) {\n\t\t\tIllegalStateException e = new IllegalStateException(\"finishRegister on an insert scheduler\");\n\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(getters[i], 1);\n\t\t\t\tgetters[i].internalError(e, this, container, clientContext, persistent);\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.deactivate(getters[i], 1);\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t\tif(persistent) {\n\t\t\t// Add to the persistent registration queue\n\t\t\t\tif(!databaseExecutor.onThread()) {\n\t\t\t\t\tthrow new IllegalStateException(\"Not on database thread!\");\n\t\t\t\t}\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(getters, 1);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"finishRegister() for \"+getters);\n\t\t\t\tif(anyValid) {\n\t\t\t\t\tboolean wereAnyValid = false;\n\t\t\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\t\t\tSendableGet getter = getters[i];\n\t\t\t\t\t\tcontainer.activate(getter, 1);\n\t\t\t\t\t\tif(!(getter.isCancelled(container) || getter.isEmpty(container))) {\n\t\t\t\t\t\t\twereAnyValid = true;\n\t\t\t\t\t\t\tgetter.preRegister(container, clientContext, true);\n\t\t\t\t\t\t\tschedCore.innerRegister(getter, random, container, getters);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tgetter.preRegister(container, clientContext, false);\n\n\t\t\t\t\t}\n\t\t\t\t\tif(!wereAnyValid) {\n\t\t\t\t\t\tLogger.normal(this, \"No requests valid: \"+getters);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tLogger.normal(this, \"No valid requests passed in: \"+getters);\n\t\t\t\t}\n\t\t\t\tif(reg != null)\n\t\t\t\t\tcontainer.delete(reg);\n\t\t\t\tmaybeFillStarterQueue(container, clientContext, getters);\n\t\t\t\tstarter.wakeUp();\n\t\t} else {\n\t\t\t// Register immediately.\n\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\t\n\t\t\t\tif((!anyValid) || getters[i].isCancelled(null) || getters[i].isEmpty(null)) {\n\t\t\t\t\tgetters[i].preRegister(container, clientContext, false);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else\n\t\t\t\t\tgetters[i].preRegister(container, clientContext, true);\n\t\t\t\tschedTransient.innerRegister(getters[i], random, null, getters);\n\t\t\t}\n\t\t\tstarter.wakeUp();\n\t\t}\n\t}","id":70982,"modified_method":"void finishRegister(final SendableGet[] getters, boolean persistent, ObjectContainer container, final boolean anyValid, final DatastoreCheckerItem reg) {\n\t\tif(logMINOR) Logger.minor(this, \"finishRegister for \"+getters+\" anyValid=\"+anyValid+\" reg=\"+reg+\" persistent=\"+persistent);\n\t\tif(isInsertScheduler) {\n\t\t\tIllegalStateException e = new IllegalStateException(\"finishRegister on an insert scheduler\");\n\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(getters[i], 1);\n\t\t\t\tgetters[i].internalError(e, this, container, clientContext, persistent);\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.deactivate(getters[i], 1);\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t\tif(persistent) {\n\t\t\t// Add to the persistent registration queue\n\t\t\t\tif(!databaseExecutor.onThread()) {\n\t\t\t\t\tthrow new IllegalStateException(\"Not on database thread!\");\n\t\t\t\t}\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(getters, 1);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"finishRegister() for \"+getters);\n\t\t\t\tif(anyValid) {\n\t\t\t\t\tboolean wereAnyValid = false;\n\t\t\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\t\t\tSendableGet getter = getters[i];\n\t\t\t\t\t\tcontainer.activate(getter, 1);\n\t\t\t\t\t\tif(!(getter.isCancelled(container) || getter.isEmpty(container))) {\n\t\t\t\t\t\t\twereAnyValid = true;\n\t\t\t\t\t\t\tgetter.preRegister(container, clientContext, true);\n\t\t\t\t\t\t\tschedCore.innerRegister(getter, random, container, getters);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tgetter.preRegister(container, clientContext, false);\n\n\t\t\t\t\t}\n\t\t\t\t\tif(!wereAnyValid) {\n\t\t\t\t\t\tLogger.normal(this, \"No requests valid: \"+getters);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tLogger.normal(this, \"No valid requests passed in: \"+getters);\n\t\t\t\t}\n\t\t\t\tif(reg != null)\n\t\t\t\t\tcontainer.delete(reg);\n\t\t\t\tmaybeFillStarterQueue(container, clientContext, getters);\n\t\t\t\tstarter.wakeUp();\n\t\t} else {\n\t\t\t// Register immediately.\n\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\t\n\t\t\t\tif((!anyValid) || getters[i].isCancelled(null) || getters[i].isEmpty(null)) {\n\t\t\t\t\tgetters[i].preRegister(container, clientContext, false);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else\n\t\t\t\t\tgetters[i].preRegister(container, clientContext, true);\n\t\t\t\tif(!getters[i].isEmpty(null))\n\t\t\t\t\tschedTransient.innerRegister(getters[i], random, null, getters);\n\t\t\t}\n\t\t\tstarter.wakeUp();\n\t\t}\n\t}","commit_id":"e08727caf84d8ccd97275b2d30215323c0e9e95d","url":"https://github.com/freenet/fred"},{"original_method":"void finishRegister(final SendableGet[] getters, boolean persistent, ObjectContainer container, final boolean anyValid, final DatastoreCheckerItem reg) {\n\t\tif(logMINOR) Logger.minor(this, \"finishRegister for \"+getters+\" anyValid=\"+anyValid+\" reg=\"+reg+\" persistent=\"+persistent);\n\t\tif(isInsertScheduler) {\n\t\t\tIllegalStateException e = new IllegalStateException(\"finishRegister on an insert scheduler\");\n\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(getters[i], 1);\n\t\t\t\tgetters[i].internalError(e, this, container, clientContext, persistent);\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.deactivate(getters[i], 1);\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t\tif(persistent) {\n\t\t\t// Add to the persistent registration queue\n\t\t\t\tif(!databaseExecutor.onThread()) {\n\t\t\t\t\tthrow new IllegalStateException(\"Not on database thread!\");\n\t\t\t\t}\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(getters, 1);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"finishRegister() for \"+getters);\n\t\t\t\tif(anyValid) {\n\t\t\t\t\tboolean wereAnyValid = false;\n\t\t\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\t\t\tSendableGet getter = getters[i];\n\t\t\t\t\t\tcontainer.activate(getter, 1);\n\t\t\t\t\t\t// Just check isCancelled, we have already checked the cooldown.\n\t\t\t\t\t\tif(!(getter.isCancelled(container))) {\n\t\t\t\t\t\t\twereAnyValid = true;\n\t\t\t\t\t\t\tgetter.preRegister(container, clientContext, true);\n\t\t\t\t\t\t\tschedCore.innerRegister(getter, random, container, clientContext, getters);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tgetter.preRegister(container, clientContext, false);\n\n\t\t\t\t\t}\n\t\t\t\t\tif(!wereAnyValid) {\n\t\t\t\t\t\tLogger.normal(this, \"No requests valid: \"+getters);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tLogger.normal(this, \"No valid requests passed in: \"+getters);\n\t\t\t\t}\n\t\t\t\tif(reg != null)\n\t\t\t\t\tcontainer.delete(reg);\n\t\t\t\tqueueFillRequestStarterQueue(true);\n\t\t} else {\n\t\t\t// Register immediately.\n\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\t\n\t\t\t\tif((!anyValid) || getters[i].isCancelled(null)) {\n\t\t\t\t\tgetters[i].preRegister(container, clientContext, false);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else\n\t\t\t\t\tgetters[i].preRegister(container, clientContext, true);\n\t\t\t\tif(!getters[i].isCancelled(null))\n\t\t\t\t\tschedTransient.innerRegister(getters[i], random, null, clientContext, getters);\n\t\t\t}\n\t\t\tstarter.wakeUp();\n\t\t}\n\t}","id":70983,"modified_method":"void finishRegister(final SendableGet[] getters, boolean persistent, ObjectContainer container, final boolean anyValid, final DatastoreCheckerItem reg) {\n\t\tif(logMINOR) Logger.minor(this, \"finishRegister for \"+getters+\" anyValid=\"+anyValid+\" reg=\"+reg+\" persistent=\"+persistent);\n\t\tif(isInsertScheduler) {\n\t\t\tIllegalStateException e = new IllegalStateException(\"finishRegister on an insert scheduler\");\n\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(getters[i], 1);\n\t\t\t\tgetters[i].internalError(e, this, container, clientContext, persistent);\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.deactivate(getters[i], 1);\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t\tif(persistent) {\n\t\t\t// Add to the persistent registration queue\n\t\t\t\tif(!databaseExecutor.onThread()) {\n\t\t\t\t\tthrow new IllegalStateException(\"Not on database thread!\");\n\t\t\t\t}\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(getters, 1);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"finishRegister() for \"+getters);\n\t\t\t\tif(anyValid) {\n\t\t\t\t\tboolean wereAnyValid = false;\n\t\t\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\t\t\tSendableGet getter = getters[i];\n\t\t\t\t\t\tcontainer.activate(getter, 1);\n\t\t\t\t\t\t// Just check isCancelled, we have already checked the cooldown.\n\t\t\t\t\t\tif(!(getter.isCancelled(container))) {\n\t\t\t\t\t\t\twereAnyValid = true;\n\t\t\t\t\t\t\tif(!getter.preRegister(container, clientContext, true)) {\n\t\t\t\t\t\t\t\tschedCore.innerRegister(getter, random, container, clientContext, getters);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgetter.onFailure(new LowLevelGetException(LowLevelGetException.DATA_NOT_FOUND_IN_STORE), null, container, clientContext);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tgetter.preRegister(container, clientContext, false);\n\n\t\t\t\t\t}\n\t\t\t\t\tif(!wereAnyValid) {\n\t\t\t\t\t\tLogger.normal(this, \"No requests valid: \"+getters);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tLogger.normal(this, \"No valid requests passed in: \"+getters);\n\t\t\t\t}\n\t\t\t\tif(reg != null)\n\t\t\t\t\tcontainer.delete(reg);\n\t\t\t\tqueueFillRequestStarterQueue(true);\n\t\t} else {\n\t\t\t// Register immediately.\n\t\t\tfor(int i=0;i<getters.length;i++) {\n\t\t\t\t\n\t\t\t\tif((!anyValid) || getters[i].isCancelled(null)) {\n\t\t\t\t\tgetters[i].preRegister(container, clientContext, false);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tif(getters[i].preRegister(container, clientContext, true)) continue;\n\t\t\t\t}\n\t\t\t\tif(!getters[i].isCancelled(null))\n\t\t\t\t\tschedTransient.innerRegister(getters[i], random, null, clientContext, getters);\n\t\t\t}\n\t\t\tstarter.wakeUp();\n\t\t}\n\t}","commit_id":"152bc250c0f9385c5b7c6a920e2b4e095639ebea","url":"https://github.com/freenet/fred"},{"original_method":"private void finishRegister(final SendableRequest req, boolean persistent, boolean onDatabaseThread, final boolean anyValid, final RegisterMe reg) {\n\t\tif(persistent) {\n\t\t\t// Add to the persistent registration queue\n\t\t\tif(onDatabaseThread) {\n\t\t\t\tif(!databaseExecutor.onThread()) {\n\t\t\t\t\tthrow new IllegalStateException(\"Not on database thread!\");\n\t\t\t\t}\n\t\t\t\tif(persistent)\n\t\t\t\t\tselectorContainer.activate(req, 1);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"finishRegister() for \"+req);\n\t\t\t\tif(anyValid)\n\t\t\t\t\tschedCore.innerRegister(req, random, selectorContainer);\n\t\t\t\tif(reg != null)\n\t\t\t\t\tselectorContainer.delete(reg);\n\t\t\t\tmaybeFillStarterQueue(selectorContainer, clientContext);\n\t\t\t\tstarter.wakeUp();\n\t\t\t} else {\n\t\t\t\tjobRunner.queue(new DBJob() {\n\n\t\t\t\t\tpublic void run(ObjectContainer container, ClientContext context) {\n\t\t\t\t\t\tcontainer.activate(req, 1);\n\t\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\t\tLogger.minor(this, \"finishRegister() for \"+req);\n\t\t\t\t\t\tif(anyValid) {\n\t\t\t\t\t\t\tif(req.isCancelled(container) || req.isEmpty(container)) {\n\t\t\t\t\t\t\t\tLogger.error(this, \"Request is empty/cancelled: \"+req);\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tschedCore.innerRegister(req, random, container);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(reg != null)\n\t\t\t\t\t\t\tcontainer.delete(reg);\n\t\t\t\t\t\tmaybeFillStarterQueue(container, context);\n\t\t\t\t\t\tstarter.wakeUp();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, NativeThread.NORM_PRIORITY+1, false);\n\t\t\t}\n\t\t} else {\n\t\t\t// Register immediately.\n\t\t\tschedTransient.innerRegister(req, random, null);\n\t\t\tstarter.wakeUp();\n\t\t}\n\t}","id":70984,"modified_method":"private void finishRegister(final SendableRequest req, boolean persistent, boolean onDatabaseThread, final boolean anyValid, final RegisterMe reg) {\n\t\tif(persistent) {\n\t\t\t// Add to the persistent registration queue\n\t\t\tif(onDatabaseThread) {\n\t\t\t\tif(!databaseExecutor.onThread()) {\n\t\t\t\t\tthrow new IllegalStateException(\"Not on database thread!\");\n\t\t\t\t}\n\t\t\t\tif(persistent)\n\t\t\t\t\tselectorContainer.activate(req, 1);\n\t\t\t\tboolean tryDirect = false;\n\t\t\t\tif(anyValid && TRY_DIRECT) {\n\t\t\t\t\tsynchronized(starterQueue) {\n\t\t\t\t\t\ttryDirect = starterQueue.size() < MAX_STARTER_QUEUE_SIZE * 1 / 4;\n\t\t\t\t\t}\n\t\t\t\t\tif(tryDirect) {\n\t\t\t\t\t\twhile(true) {\n\t\t\t\t\t\t\tPersistentChosenRequest cr = (PersistentChosenRequest) schedCore.maybeMakeChosenRequest(req, selectorContainer, clientContext);\n\t\t\t\t\t\t\tif(cr == null) {\n\t\t\t\t\t\t\t\tif(!(req.isEmpty(selectorContainer) || req.isCancelled(selectorContainer)))\n\t\t\t\t\t\t\t\t\t// Still needs to be registered\n\t\t\t\t\t\t\t\t\ttryDirect = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsynchronized(starterQueue) {\n\t\t\t\t\t\t\t\tif(starterQueue.size() >= MAX_STARTER_QUEUE_SIZE) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstarterQueue.add(cr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"finishRegister() for \"+req);\n\t\t\t\tif(anyValid) {\n\t\t\t\t\tif(!tryDirect) {\n\t\t\t\t\t\tif(req.isCancelled(selectorContainer) || req.isEmpty(selectorContainer)) {\n\t\t\t\t\t\t\tLogger.error(this, \"Request is empty/cancelled: \"+req);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tschedCore.innerRegister(req, random, selectorContainer);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(reg != null)\n\t\t\t\t\tselectorContainer.delete(reg);\n\t\t\t\tmaybeFillStarterQueue(selectorContainer, clientContext);\n\t\t\t\tstarter.wakeUp();\n\t\t\t} else {\n\t\t\t\tjobRunner.queue(new DBJob() {\n\n\t\t\t\t\tpublic void run(ObjectContainer container, ClientContext context) {\n\t\t\t\t\t\tcontainer.activate(req, 1);\n\t\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\t\tLogger.minor(this, \"finishRegister() for \"+req);\n\t\t\t\t\t\tif(anyValid) {\n\t\t\t\t\t\t\tif(req.isCancelled(container) || req.isEmpty(container)) {\n\t\t\t\t\t\t\t\tLogger.error(this, \"Request is empty/cancelled: \"+req);\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tschedCore.innerRegister(req, random, container);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(reg != null)\n\t\t\t\t\t\t\tcontainer.delete(reg);\n\t\t\t\t\t\tmaybeFillStarterQueue(container, context);\n\t\t\t\t\t\tstarter.wakeUp();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, NativeThread.NORM_PRIORITY+1, false);\n\t\t\t}\n\t\t} else {\n\t\t\t// Register immediately.\n\t\t\tschedTransient.innerRegister(req, random, null);\n\t\t\tstarter.wakeUp();\n\t\t}\n\t}","commit_id":"982de765308feacd6eed527ba63ba10f9d0628b1","url":"https://github.com/freenet/fred"},{"original_method":"public static void doHandshake(SocketChannel ch, SSLEngine sslEngine,\n                               boolean isClient) throws IOException {\n        s_logger.info(\"SSL: begin Handshake, isClient: \" + isClient);\n\n        SSLEngineResult engResult;\n        SSLSession sslSession = sslEngine.getSession();\n        HandshakeStatus hsStatus;\n        ByteBuffer in_pkgBuf =\n            ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);\n        ByteBuffer in_appBuf =\n            ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);\n        ByteBuffer out_pkgBuf =\n            ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);\n        ByteBuffer out_appBuf =\n            ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);\n        int count;\n\n        if (isClient) {\n            hsStatus = SSLEngineResult.HandshakeStatus.NEED_WRAP;\n        } else {\n            hsStatus = SSLEngineResult.HandshakeStatus.NEED_UNWRAP;\n        }\n\n        while (hsStatus != SSLEngineResult.HandshakeStatus.FINISHED) {\n            if (s_logger.isTraceEnabled()) {\n                s_logger.trace(\"SSL: Handshake status \" + hsStatus);\n            }\n            engResult = null;\n            if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n                out_pkgBuf.clear();\n                out_appBuf.clear();\n                out_appBuf.put(\"Hello\".getBytes());\n                engResult = sslEngine.wrap(out_appBuf, out_pkgBuf);\n                out_pkgBuf.flip();\n                int remain = out_pkgBuf.limit();\n                while (remain != 0) {\n                    remain -= ch.write(out_pkgBuf);\n                    if (remain < 0) {\n                        throw new IOException(\"Too much bytes sent?\");\n                    }\n                }\n            } else if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP) {\n                in_appBuf.clear();\n                // One packet may contained multiply operation\n                if (in_pkgBuf.position() == 0 || !in_pkgBuf.hasRemaining()) {\n                    in_pkgBuf.clear();\n                    count = ch.read(in_pkgBuf);\n                    if (count == -1) {\n                        throw new IOException(\"Connection closed with -1 on reading size.\");\n                    }\n                    in_pkgBuf.flip();\n                }\n                engResult = sslEngine.unwrap(in_pkgBuf, in_appBuf);\n                ByteBuffer tmp_pkgBuf =\n                    ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);\n                int loop_count = 0;\n                while (engResult.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW) {\n                    // The client is too slow? Cut it and let it reconnect\n                    if (loop_count > 10) {\n                        throw new IOException(\"Too many times in SSL BUFFER_UNDERFLOW, disconnect guest.\");\n                    }\n                    // We need more packets to complete this operation\n                    if (s_logger.isTraceEnabled()) {\n                        s_logger.trace(\"SSL: Buffer overflowed, getting more packets\");\n                    }\n                    tmp_pkgBuf.clear();\n                    count = ch.read(tmp_pkgBuf);\n                    if (count == -1) {\n                        throw new IOException(\"Connection closed with -1 on reading size.\");\n                    }\n                    tmp_pkgBuf.flip();\n                    \n                    in_pkgBuf.mark();\n                    in_pkgBuf.position(in_pkgBuf.limit());\n                    in_pkgBuf.limit(in_pkgBuf.limit() + tmp_pkgBuf.limit());\n                    in_pkgBuf.put(tmp_pkgBuf);\n                    in_pkgBuf.reset();\n                    \n                    in_appBuf.clear();\n                    engResult = sslEngine.unwrap(in_pkgBuf, in_appBuf);\n                    loop_count ++;\n                }\n            } else if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_TASK) {\n                Runnable run;\n                while ((run = sslEngine.getDelegatedTask()) != null) {\n                    if (s_logger.isTraceEnabled()) {\n                        s_logger.trace(\"SSL: Running delegated task!\");\n                    }\n                    run.run();\n                }\n            } else if (hsStatus == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n                throw new IOException(\"NOT a handshaking!\");\n            }\n            if (engResult != null && engResult.getStatus() != SSLEngineResult.Status.OK) {\n                throw new IOException(\"Fail to handshake! \" + engResult.getStatus());\n            }\n            if (engResult != null)\n                hsStatus = engResult.getHandshakeStatus();\n            else\n                hsStatus = sslEngine.getHandshakeStatus();\n        }\n    }","id":70985,"modified_method":"public static void doHandshake(SocketChannel ch, SSLEngine sslEngine,\n                               boolean isClient) throws IOException {\n        if (s_logger.isTraceEnabled()) {\n            s_logger.trace(\"SSL: begin Handshake, isClient: \" + isClient);\n        }\n\n        SSLEngineResult engResult;\n        SSLSession sslSession = sslEngine.getSession();\n        HandshakeStatus hsStatus;\n        ByteBuffer in_pkgBuf =\n            ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);\n        ByteBuffer in_appBuf =\n            ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);\n        ByteBuffer out_pkgBuf =\n            ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);\n        ByteBuffer out_appBuf =\n            ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);\n        int count;\n\n        if (isClient) {\n            hsStatus = SSLEngineResult.HandshakeStatus.NEED_WRAP;\n        } else {\n            hsStatus = SSLEngineResult.HandshakeStatus.NEED_UNWRAP;\n        }\n\n        while (hsStatus != SSLEngineResult.HandshakeStatus.FINISHED) {\n            if (s_logger.isTraceEnabled()) {\n                s_logger.trace(\"SSL: Handshake status \" + hsStatus);\n            }\n            engResult = null;\n            if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n                out_pkgBuf.clear();\n                out_appBuf.clear();\n                out_appBuf.put(\"Hello\".getBytes());\n                engResult = sslEngine.wrap(out_appBuf, out_pkgBuf);\n                out_pkgBuf.flip();\n                int remain = out_pkgBuf.limit();\n                while (remain != 0) {\n                    remain -= ch.write(out_pkgBuf);\n                    if (remain < 0) {\n                        throw new IOException(\"Too much bytes sent?\");\n                    }\n                }\n            } else if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP) {\n                in_appBuf.clear();\n                // One packet may contained multiply operation\n                if (in_pkgBuf.position() == 0 || !in_pkgBuf.hasRemaining()) {\n                    in_pkgBuf.clear();\n                    count = ch.read(in_pkgBuf);\n                    if (count == -1) {\n                        throw new IOException(\"Connection closed with -1 on reading size.\");\n                    }\n                    in_pkgBuf.flip();\n                }\n                engResult = sslEngine.unwrap(in_pkgBuf, in_appBuf);\n                ByteBuffer tmp_pkgBuf =\n                    ByteBuffer.allocate(sslSession.getPacketBufferSize() + 40);\n                int loop_count = 0;\n                while (engResult.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW) {\n                    // The client is too slow? Cut it and let it reconnect\n                    if (loop_count > 10) {\n                        throw new IOException(\"Too many times in SSL BUFFER_UNDERFLOW, disconnect guest.\");\n                    }\n                    // We need more packets to complete this operation\n                    if (s_logger.isTraceEnabled()) {\n                        s_logger.trace(\"SSL: Buffer overflowed, getting more packets\");\n                    }\n                    tmp_pkgBuf.clear();\n                    count = ch.read(tmp_pkgBuf);\n                    if (count == -1) {\n                        throw new IOException(\"Connection closed with -1 on reading size.\");\n                    }\n                    tmp_pkgBuf.flip();\n                    \n                    in_pkgBuf.mark();\n                    in_pkgBuf.position(in_pkgBuf.limit());\n                    in_pkgBuf.limit(in_pkgBuf.limit() + tmp_pkgBuf.limit());\n                    in_pkgBuf.put(tmp_pkgBuf);\n                    in_pkgBuf.reset();\n                    \n                    in_appBuf.clear();\n                    engResult = sslEngine.unwrap(in_pkgBuf, in_appBuf);\n                    loop_count ++;\n                }\n            } else if (hsStatus == SSLEngineResult.HandshakeStatus.NEED_TASK) {\n                Runnable run;\n                while ((run = sslEngine.getDelegatedTask()) != null) {\n                    if (s_logger.isTraceEnabled()) {\n                        s_logger.trace(\"SSL: Running delegated task!\");\n                    }\n                    run.run();\n                }\n            } else if (hsStatus == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n                throw new IOException(\"NOT a handshaking!\");\n            }\n            if (engResult != null && engResult.getStatus() != SSLEngineResult.Status.OK) {\n                throw new IOException(\"Fail to handshake! \" + engResult.getStatus());\n            }\n            if (engResult != null)\n                hsStatus = engResult.getHandshakeStatus();\n            else\n                hsStatus = sslEngine.getHandshakeStatus();\n        }\n    }","commit_id":"ccc12793c63a9388f6503d5447519c6ef1c06859","url":"https://github.com/apache/cloudstack"},{"original_method":"public static SSLContext initSSLContext(boolean isClient) throws Exception {\n        SSLContext sslContext = null;\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        KeyStore ks = KeyStore.getInstance(\"JKS\");\n        TrustManager[] tms;\n        \n        if (!isClient) {\n        \tchar[] passphrase = \"vmops.com\".toCharArray();\n        \tString keystorePath = \"/etc/cloud/management/cloud.keystore\";\n        \tif (new File(keystorePath).exists()) {\n        \t\tks.load(new FileInputStream(keystorePath), passphrase);\n        \t} else {\n        \t\ts_logger.warn(\"SSL: Fail to find the generated keystore. Loading fail-safe one to continue.\");\n        \t\tks.load(NioConnection.class.getResourceAsStream(\"/cloud.keystore\"), passphrase);\n        \t}\n        \tkmf.init(ks, passphrase);\n        \ttmf.init(ks);\n        \ttms = tmf.getTrustManagers();\n        } else {\n        \tks.load(null, null);\n        \tkmf.init(ks, null);\n        \ttms = new TrustManager[1];\n        \ttms[0] = new TrustAllManager();\n        }\n        \n        sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(kmf.getKeyManagers(), tms, null);\n        s_logger.info(\"SSL: SSLcontext has been initialized\");\n\n        return sslContext;\n    }","id":70986,"modified_method":"public static SSLContext initSSLContext(boolean isClient) throws Exception {\n        InputStream stream;\n        SSLContext sslContext = null;\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        KeyStore ks = KeyStore.getInstance(\"JKS\");\n        TrustManager[] tms;\n        \n        if (!isClient) {\n        \tchar[] passphrase = \"vmops.com\".toCharArray();\n        \tString keystorePath = \"/etc/cloud/management/cloud.keystore\";\n        \tif (new File(keystorePath).exists()) {\n        \t    stream = new FileInputStream(keystorePath);\n        \t} else {\n        \t\ts_logger.warn(\"SSL: Fail to find the generated keystore. Loading fail-safe one to continue.\");\n                        stream = NioConnection.class.getResourceAsStream(\"/cloud.keystore\");\n        \t}\n        \tks.load(stream, passphrase);\n        \tstream.close();\n        \tkmf.init(ks, passphrase);\n        \ttmf.init(ks);\n        \ttms = tmf.getTrustManagers();\n        } else {\n        \tks.load(null, null);\n        \tkmf.init(ks, null);\n        \ttms = new TrustManager[1];\n        \ttms[0] = new TrustAllManager();\n        }\n        \n        sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(kmf.getKeyManagers(), tms, null);\n        if (s_logger.isTraceEnabled()) {\n        \ts_logger.trace(\"SSL: SSLcontext has been initialized\");\n        }\n\n        return sslContext;\n    }","commit_id":"ccc12793c63a9388f6503d5447519c6ef1c06859","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void accept(SelectionKey key) throws IOException {\n        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();\n\n        SocketChannel socketChannel = serverSocketChannel.accept();\n        Socket socket = socketChannel.socket();\n        socket.setKeepAlive(true);\n\n        if (s_logger.isTraceEnabled()) {\n            s_logger.trace(\"Connection accepted for \" + socket);\n        }\n        \n        // Begin SSL handshake in BLOCKING mode\n        socketChannel.configureBlocking(true);\n\n        SSLEngine sslEngine = null;\n        try {\n        \tSSLContext sslContext = Link.initSSLContext(false);\n        \tsslEngine = sslContext.createSSLEngine();\n        \tsslEngine.setUseClientMode(false);\n        \tsslEngine.setNeedClientAuth(false);\n\n        \tLink.doHandshake(socketChannel, sslEngine, false);\n        \ts_logger.info(\"SSL: Handshake done\");\n        } catch (Exception e) {\n        \tthrow new IOException(\"SSL: Fail to init SSL! \" + e);\n        }\n        \n        socketChannel.configureBlocking(false);\n        InetSocketAddress saddr = (InetSocketAddress)socket.getRemoteSocketAddress();\n        Link link = new Link(saddr, this);\n        link.setSSLEngine(sslEngine);\n        link.setKey(socketChannel.register(key.selector(), SelectionKey.OP_READ, link));\n        Task task = _factory.create(Task.Type.CONNECT, link, null);\n        registerLink(saddr, link);\n        _executor.execute(task);\n    }","id":70987,"modified_method":"protected void accept(SelectionKey key) throws IOException {\n        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();\n\n        SocketChannel socketChannel = serverSocketChannel.accept();\n        Socket socket = socketChannel.socket();\n        socket.setKeepAlive(true);\n\n        if (s_logger.isTraceEnabled()) {\n            s_logger.trace(\"Connection accepted for \" + socket);\n        }\n        \n        // Begin SSL handshake in BLOCKING mode\n        socketChannel.configureBlocking(true);\n\n        SSLEngine sslEngine = null;\n        try {\n            SSLContext sslContext = Link.initSSLContext(false);\n            sslEngine = sslContext.createSSLEngine();\n            sslEngine.setUseClientMode(false);\n            sslEngine.setNeedClientAuth(false);\n\n            Link.doHandshake(socketChannel, sslEngine, false);\n        } catch (Exception e) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Socket \" + socket + \" closed on read.  Probably -1 returned: \" + e.getMessage());\n                s_logger.debug(\"Closing socket \" + socketChannel.socket());\n            }\n            try {\n                socketChannel.close();\n                socket.close();\n            } catch (IOException ignore) {\n            }\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Closed socket \" + socketChannel.socket());\n            }\n            return;\n        }\n        \n        if (s_logger.isTraceEnabled()) {\n            s_logger.trace(\"SSL: Handshake done\");\n        }\n        socketChannel.configureBlocking(false);\n        InetSocketAddress saddr = (InetSocketAddress)socket.getRemoteSocketAddress();\n        Link link = new Link(saddr, this);\n        link.setSSLEngine(sslEngine);\n        link.setKey(socketChannel.register(key.selector(), SelectionKey.OP_READ, link));\n        Task task = _factory.create(Task.Type.CONNECT, link, null);\n        registerLink(saddr, link);\n        _executor.execute(task);\n    }","commit_id":"ccc12793c63a9388f6503d5447519c6ef1c06859","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    protected void run() throws Exception {\n\n        // we need to wait for the ProcessBuffer to start its disruptor\n        startLatch.await();\n\n        while (isRunning()) {\n            // approximate count to read from the journal to backfill the processing chain\n            final long remainingCapacity = processBuffer.getRemainingCapacity();\n            final List<Journal.JournalReadEntry> encodedRawMessages = journal.read(remainingCapacity);\n            if (encodedRawMessages.isEmpty()) {\n                log.info(\"No messages to read from Journal, waiting until the writer adds more messages.\");\n                // block until something is written to the journal again\n                try {\n                    journalFilled.acquire();\n                } catch (InterruptedException ignored) {\n                    // this can happen when we are blocked but the system wants to shut down. We don't have to do anything in that case.\n                    continue;\n                }\n                log.info(\"Messages have been written to Journal, continuing to read.\");\n                // we don't care how many messages were inserted in the meantime, we'll read all of them eventually\n                journalFilled.drainPermits();\n            } else {\n                log.info(\"Processing {} messages from journal.\", encodedRawMessages.size());\n                for (final Journal.JournalReadEntry encodedRawMessage : encodedRawMessages) {\n                    final RawMessage rawMessage = RawMessage.decode(encodedRawMessage.getPayload(),\n                                                                    encodedRawMessage.getOffset());\n                    if (rawMessage == null) {\n                        // never insert null objects into the ringbuffer, as that is useless\n                        continue;\n                    }\n\n                    processBuffer.insertBlocking(rawMessage);\n                }\n            }\n        }\n        log.info(\"Stopping.\");\n    }","id":70988,"modified_method":"@Override\n    protected void run() throws Exception {\n\n        // we need to wait for the ProcessBuffer to start its disruptor\n        startLatch.await();\n\n        while (isRunning()) {\n            // approximate count to read from the journal to backfill the processing chain\n            final long remainingCapacity = processBuffer.getRemainingCapacity();\n            final List<Journal.JournalReadEntry> encodedRawMessages = journal.read(remainingCapacity);\n            if (encodedRawMessages.isEmpty()) {\n                log.debug(\"No messages to read from Journal, waiting until the writer adds more messages.\");\n                // block until something is written to the journal again\n                try {\n                    journalFilled.acquire();\n                } catch (InterruptedException ignored) {\n                    // this can happen when we are blocked but the system wants to shut down. We don't have to do anything in that case.\n                    continue;\n                }\n                log.debug(\"Messages have been written to Journal, continuing to read.\");\n                // we don't care how many messages were inserted in the meantime, we'll read all of them eventually\n                journalFilled.drainPermits();\n            } else {\n                log.debug(\"Processing {} messages from journal.\", encodedRawMessages.size());\n                for (final Journal.JournalReadEntry encodedRawMessage : encodedRawMessages) {\n                    final RawMessage rawMessage = RawMessage.decode(encodedRawMessage.getPayload(),\n                                                                    encodedRawMessage.getOffset());\n                    if (rawMessage == null) {\n                        // never insert null objects into the ringbuffer, as that is useless\n                        continue;\n                    }\n\n                    processBuffer.insertBlocking(rawMessage);\n                }\n            }\n        }\n        log.info(\"Stopping.\");\n    }","commit_id":"c38c2b4007a982aab96685aad11f373c44ee65df","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Nullable\n        @Override\n        public Journal.Entry apply(RawMessageEvent input) {\n            log.info(\"Journalling message {}\", input.rawMessage.getId());\n            // stats\n            final int size = input.encodedRawMessage.length;\n            bytesWritten += size;\n            byteCounter.inc(size);\n\n            // convert to journal entry\n            return journal.createEntry(input.rawMessage.getIdBytes(), input.encodedRawMessage);\n        }","id":70989,"modified_method":"@Nullable\n        @Override\n        public Journal.Entry apply(RawMessageEvent input) {\n            if (log.isTraceEnabled()) {\n                log.trace(\"Journalling message {}\", input.rawMessage.getId());\n            }\n            // stats\n            final int size = input.encodedRawMessage.length;\n            bytesWritten += size;\n            byteCounter.inc(size);\n\n            // convert to journal entry\n            return journal.createEntry(input.rawMessage.getIdBytes(), input.encodedRawMessage);\n        }","commit_id":"c38c2b4007a982aab96685aad11f373c44ee65df","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    public void onEvent(RawMessageEvent event, long sequence, boolean endOfBatch) throws Exception {\n        batch.add(event);\n\n        if (endOfBatch) {\n            log.info(\"End of batch, journalling {} messages\", batch.size());\n            // write batch to journal\n\n            final Converter converter = new Converter();\n            // copy to avoid re-running this all the time\n            final List<Journal.Entry> entries = Lists.newArrayList(transform(batch, converter));\n            final long lastOffset = journal.write(entries);\n            log.info(\"Processed batch, wrote {} bytes, last journal offset: {}, signalling reader.\",\n                     converter.getBytesWritten(),\n                     lastOffset);\n            journalFilled.release();\n\n            batch.clear();\n        }\n    }","id":70990,"modified_method":"@Override\n    public void onEvent(RawMessageEvent event, long sequence, boolean endOfBatch) throws Exception {\n        batch.add(event);\n\n        if (endOfBatch) {\n            log.debug(\"End of batch, journalling {} messages\", batch.size());\n            // write batch to journal\n\n            final Converter converter = new Converter();\n            // copy to avoid re-running this all the time\n            final List<Journal.Entry> entries = Lists.newArrayList(transform(batch, converter));\n            final long lastOffset = journal.write(entries);\n            log.debug(\"Processed batch, wrote {} bytes, last journal offset: {}, signalling reader.\",\n                      converter.getBytesWritten(),\n                      lastOffset);\n            journalFilled.release();\n\n            batch.clear();\n        }\n    }","commit_id":"c38c2b4007a982aab96685aad11f373c44ee65df","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"/**\n     * Writes the list of entries to the journal.\n     * @param entries journal entries to be written\n     * @return the last position written to in the journal\n     */\n    @Override\n    public long write(List<Entry> entries) {\n        final long[] payloadSize = {0L};\n\n        final List<Message> messages = Lists.newArrayList();\n        for (final Entry entry : entries) {\n            final byte[] messageBytes = entry.getMessageBytes();\n            final byte[] idBytes = entry.getIdBytes();\n\n            payloadSize[0] += messageBytes.length;\n            messages.add(new Message(messageBytes, idBytes));\n\n            if (log.isInfoEnabled()) {\n                log.info(\"Message {} contains bytes {}\", bytesToHex(idBytes), bytesToHex(messageBytes));\n            }\n        }\n\n        final ByteBufferMessageSet messageSet = new ByteBufferMessageSet(JavaConversions.asScalaBuffer(messages));\n\n        final Log.LogAppendInfo appendInfo = kafkaLog.append(messageSet, true);\n        log.info(\"Wrote {} messages to journal: {} bytes, log position {} to {}\",\n                 entries.size(), payloadSize[0], appendInfo.firstOffset(), appendInfo.lastOffset());\n        return appendInfo.lastOffset();\n    }","id":70991,"modified_method":"/**\n     * Writes the list of entries to the journal.\n     * @param entries journal entries to be written\n     * @return the last position written to in the journal\n     */\n    @Override\n    public long write(List<Entry> entries) {\n        final long[] payloadSize = {0L};\n\n        final List<Message> messages = Lists.newArrayList();\n        for (final Entry entry : entries) {\n            final byte[] messageBytes = entry.getMessageBytes();\n            final byte[] idBytes = entry.getIdBytes();\n\n            payloadSize[0] += messageBytes.length;\n            messages.add(new Message(messageBytes, idBytes));\n\n            if (log.isTraceEnabled()) {\n                log.trace(\"Message {} contains bytes {}\", bytesToHex(idBytes), bytesToHex(messageBytes));\n            }\n        }\n\n        final ByteBufferMessageSet messageSet = new ByteBufferMessageSet(JavaConversions.asScalaBuffer(messages));\n\n        final Log.LogAppendInfo appendInfo = kafkaLog.append(messageSet, true);\n        log.debug(\"Wrote {} messages to journal: {} bytes, log position {} to {}\",\n                 entries.size(), payloadSize[0], appendInfo.firstOffset(), appendInfo.lastOffset());\n        return appendInfo.lastOffset();\n    }","commit_id":"c38c2b4007a982aab96685aad11f373c44ee65df","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    public void onEvent(RawMessageEvent event) throws Exception {\n        event.encodedRawMessage = event.rawMessage.encode();\n        log.info(\"Serialized message {} for journal, size {} bytes\",\n                 event.rawMessage.getId(), event.encodedRawMessage.length);\n    }","id":70992,"modified_method":"@Override\n    public void onEvent(RawMessageEvent event) throws Exception {\n        event.encodedRawMessage = event.rawMessage.encode();\n        if (log.isTraceEnabled()) {\n            log.trace(\"Serialized message {} for journal, size {} bytes\",\n                      event.rawMessage.getId(), event.encodedRawMessage.length);\n        }\n    }","commit_id":"c38c2b4007a982aab96685aad11f373c44ee65df","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n    public void handleMessage(Channel channel, MessageInputStream messageInputStream) {\n        try {\n            // read the first byte to see what type of a message it is\n            final int header = messageInputStream.read();\n            // TODO: Log at lower level after the code attains a bit of stability\n            logger.info(\"Got message with header 0x\" + Integer.toHexString(header) + \" on channel \" + channel);\n            MessageHandler messageHandler = null;\n            switch (header) {\n                case HEADER_INVOCATION_REQUEST:\n                    messageHandler = new MethodInvocationMessageHandler(this.deploymentRepository, this.marshallingStrategy, this.executorService);\n                    messageHandler.processMessage(channel, messageInputStream);\n                    break;\n                case HEADER_SESSION_OPEN_REQUEST:\n                    messageHandler = new SessionOpenRequestHandler(this.deploymentRepository, this.marshallingStrategy);\n                    messageHandler.processMessage(channel, messageInputStream);\n                    break;\n                default:\n                    logger.warn(\"Received unsupported message header 0x\" + Integer.toHexString(header) + \" on channel \" + channel);\n            }\n        } catch (IOException e) {\n            // log it\n            logger.errorf(e, \"Exception on channel %s from message %s\", channel, messageInputStream);\n            try {\n                // press the panic button\n                // TODO: Why panic? Better way to handle? Review this entire block of code\n                channel.writeShutdown();\n            } catch (IOException e1) {\n                // ignore\n            }\n        } finally {\n            // enroll for next message (whenever it's available)\n            channel.receiveMessage(this);\n            IoUtils.safeClose(messageInputStream);\n        }\n    }","id":70993,"modified_method":"@Override\n    public void handleMessage(Channel channel, MessageInputStream messageInputStream) {\n        try {\n            // read the first byte to see what type of a message it is\n            final int header = messageInputStream.read();\n            if (logger.isTraceEnabled()) {\n                logger.trace(\"Got message with header 0x\" + Integer.toHexString(header) + \" on channel \" + channel);\n            }\n            MessageHandler messageHandler = null;\n            switch (header) {\n                case HEADER_INVOCATION_REQUEST:\n                    messageHandler = new MethodInvocationMessageHandler(this.deploymentRepository, this.marshallingStrategy, this.executorService);\n                    messageHandler.processMessage(channel, messageInputStream);\n                    break;\n                case HEADER_SESSION_OPEN_REQUEST:\n                    messageHandler = new SessionOpenRequestHandler(this.deploymentRepository, this.marshallingStrategy);\n                    messageHandler.processMessage(channel, messageInputStream);\n                    break;\n                default:\n                    logger.warn(\"Received unsupported message header 0x\" + Integer.toHexString(header) + \" on channel \" + channel);\n            }\n        } catch (IOException e) {\n            // log it\n            logger.errorf(e, \"Exception on channel %s from message %s\", channel, messageInputStream);\n            try {\n                // press the panic button\n                // TODO: Why panic? Better way to handle? Review this entire block of code\n                channel.writeShutdown();\n            } catch (IOException e1) {\n                // ignore\n            }\n        } finally {\n            // enroll for next message (whenever it's available)\n            channel.receiveMessage(this);\n            IoUtils.safeClose(messageInputStream);\n        }\n    }","commit_id":"00f5722c3decda0c0462ebd773a9013e879e335a","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void listenerAdded(DeploymentRepository repository) {\n        // get the initial available modules and send a message to the client\n        final Map<DeploymentModuleIdentifier, ModuleDeployment> availableModules = this.deploymentRepository.getModules();\n        if (availableModules != null && !availableModules.isEmpty()) {\n            try {\n                logger.info(\"Sending initial module availabilty message, containing \" + availableModules.size() + \" module(s) to channel \" + this.channel);\n                this.sendModuleAvailability(availableModules.keySet().toArray(new DeploymentModuleIdentifier[availableModules.size()]));\n            } catch (IOException e) {\n                logger.warn(\"Could not send initial module availability report to channel \" + this.channel, e);\n            }\n        }\n    }","id":70994,"modified_method":"@Override\n    public void listenerAdded(DeploymentRepository repository) {\n        // get the initial available modules and send a message to the client\n        final Map<DeploymentModuleIdentifier, ModuleDeployment> availableModules = this.deploymentRepository.getModules();\n        if (availableModules != null && !availableModules.isEmpty()) {\n            try {\n                logger.debug(\"Sending initial module availabilty message, containing \" + availableModules.size() + \" module(s) to channel \" + this.channel);\n                this.sendModuleAvailability(availableModules.keySet().toArray(new DeploymentModuleIdentifier[availableModules.size()]));\n            } catch (IOException e) {\n                logger.warn(\"Could not send initial module availability report to channel \" + this.channel, e);\n            }\n        }\n    }","commit_id":"00f5722c3decda0c0462ebd773a9013e879e335a","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n         * returns true if this sender already holds a\n         * fragmentation for this sender, false otherwise\n         *\n         * @param sender - the sender, cannot be null\n         * @return true if this sender already has a fragmentation table\n         */\n        public boolean containsSender(Address sender) {\n            return frag_tables.containsKey(sender);\n        }","id":70995,"modified_method":"/**\n         * returns true if this sender already holds a\n         * fragmentation for this sender, false otherwise\n         * @param sender - the sender, cannot be null\n         * @return true if this sender already has a fragmentation table\n         */\n        public boolean containsSender(Address sender) {\n            synchronized(frag_tables) {\n                return frag_tables.containsKey(sender);\n            }\n        }","commit_id":"e726946cf912184c118edc3dec5ed157da309a53","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n         * returns a list of all the senders that have fragmentation tables\n         * opened.\n         *\n         * @return an array of all the senders in the fragmentation list\n         */\n        public synchronized Address[] getSenders() {\n            Address[] result=new Address[frag_tables.size()];\n            java.util.Enumeration en=frag_tables.keys();\n            int index=0;\n            while(en.hasMoreElements()) {\n                result[index++]=(Address)en.nextElement();\n            }\n            return result;\n        }","id":70996,"modified_method":"/**\n         * returns a list of all the senders that have fragmentation tables opened.\n         * @return an array of all the senders in the fragmentation list\n         */\n        public Address[] getSenders() {\n            Address[] result;\n\n            synchronized(frag_tables) {\n                int index=0;\n                result=new Address[frag_tables.size()];\n                for(Iterator it=frag_tables.keySet().iterator(); it.hasNext();) {\n                    result[index++]=(Address)it.next();\n                }\n            }\n            return result;\n        }","commit_id":"e726946cf912184c118edc3dec5ed157da309a53","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n         * Adds a fragmentation table for this particular sender\n         * If this sender already has a fragmentation table, an IllegalArgumentException\n         * will be thrown.\n         *\n         * @param sender - the address of the sender, cannot be null\n         * @param table  - the fragmentation table of this sender, cannot be null\n         * @throws IllegalArgumentException if an entry for this sender already exist\n         */\n        public synchronized void add(Address sender, FragmentationTable table) throws IllegalArgumentException {\n            FragmentationTable healthCheck=(FragmentationTable)frag_tables.get(sender);\n            if(healthCheck == null) {\n                frag_tables.put(sender, table);\n            }\n            else {\n                throw new IllegalArgumentException(\"Sender <\" + sender + \"> already exists in the fragementation list.\");\n            }\n        }","id":70997,"modified_method":"/**\n         * Adds a fragmentation table for this particular sender\n         * If this sender already has a fragmentation table, an IllegalArgumentException\n         * will be thrown.\n         * @param sender - the address of the sender, cannot be null\n         * @param table  - the fragmentation table of this sender, cannot be null\n         * @throws IllegalArgumentException if an entry for this sender already exist\n         */\n        public void add(Address sender, FragmentationTable table) throws IllegalArgumentException {\n            FragmentationTable healthCheck;\n\n            synchronized(frag_tables) {\n                healthCheck=(FragmentationTable)frag_tables.get(sender);\n                if(healthCheck == null) {\n                    frag_tables.put(sender, table);\n                }\n                else {\n                    throw new IllegalArgumentException(\"Sender <\" + sender + \"> already exists in the fragementation list.\");\n                }\n            }\n        }","commit_id":"e726946cf912184c118edc3dec5ed157da309a53","url":"https://github.com/belaban/JGroups"},{"original_method":"public String toString() {\n            java.util.Enumeration e=frag_tables.elements();\n            StringBuffer buf=new StringBuffer(\"Fragmentation list contains \")\n                    .append(frag_tables.size()).append(\" tables\\n\");\n            while(e.hasMoreElements()) {\n                buf.append(e.nextElement());\n            }\n            return buf.toString();\n        }","id":70998,"modified_method":"public String toString() {\n            Map.Entry entry;\n            StringBuffer buf=new StringBuffer(\"Fragmentation list contains \");\n            synchronized(frag_tables) {\n                buf.append(frag_tables.size()).append(\" tables\\n\");\n                for(Iterator it=frag_tables.entrySet().iterator(); it.hasNext();) {\n                    entry=(Map.Entry)it.next();\n                    buf.append(entry.getKey()).append(\": \" ).append(entry.getValue()).append(\"\\n\");\n                }\n            }\n            return buf.toString();\n        }","commit_id":"e726946cf912184c118edc3dec5ed157da309a53","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n         * removes the fragmentation table from the list.\n         * after this operation, the fragementation list will no longer\n         * hold a reference to this sender's fragmentation table\n         *\n         * @param sender - the sender who's fragmentation table you wish to remove, cannot be null\n         * @return true if the table was removed, false if the sender doesn't have an entry\n         */\n        public synchronized boolean remove(Address sender) {\n            boolean result=containsSender(sender);\n            frag_tables.remove(sender);\n            return result;\n        }","id":70999,"modified_method":"/**\n         * removes the fragmentation table from the list.\n         * after this operation, the fragementation list will no longer\n         * hold a reference to this sender's fragmentation table\n         * @param sender - the sender who's fragmentation table you wish to remove, cannot be null\n         * @return true if the table was removed, false if the sender doesn't have an entry\n         */\n        public boolean remove(Address sender) {\n            synchronized(frag_tables) {\n                boolean result=containsSender(sender);\n                frag_tables.remove(sender);\n                return result;\n            }\n        }","commit_id":"e726946cf912184c118edc3dec5ed157da309a53","url":"https://github.com/belaban/JGroups"}]