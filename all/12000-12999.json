[{"original_method":"private EditorCell createCollection_hi5u6k_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_hi5u6k_a\");\n    editorCell.addEditorCell(this.createConstant_hi5u6k_a0(editorContext, node));\n    editorCell.addEditorCell(this.createProperty_hi5u6k_b0(editorContext, node));\n    editorCell.addEditorCell(this.createCollection_hi5u6k_c0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_hi5u6k_d0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_hi5u6k_e0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_hi5u6k_f0(editorContext, node));\n    return editorCell;\n  }","id":12000,"modified_method":"private EditorCell createCollection_hi5u6k_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_hi5u6k_a\");\n    if (renderingCondition_hi5u6k_a0a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createConstant_hi5u6k_a0(editorContext, node));\n    }\n    if (renderingCondition_hi5u6k_a1a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createConstant_hi5u6k_b0(editorContext, node));\n    }\n    if (renderingCondition_hi5u6k_a2a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createConstant_hi5u6k_c0(editorContext, node));\n    }\n    editorCell.addEditorCell(this.createRefNode_hi5u6k_d0(editorContext, node));\n    editorCell.addEditorCell(this.createProperty_hi5u6k_e0(editorContext, node));\n    editorCell.addEditorCell(this.createCollection_hi5u6k_f0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_hi5u6k_g0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_hi5u6k_h0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_hi5u6k_i0(editorContext, node));\n    return editorCell;\n  }","commit_id":"d2621e88f0f0c432f560ad487b0afc6c906dff12","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNode_htbfoy_a0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);\n    provider.setRole(\"type\");\n    provider.setNoTargetText(\"<no type>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","id":12001,"modified_method":"private EditorCell createRefNode_htbfoy_a0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);\n    provider.setRole(\"type\");\n    provider.setNoTargetText(\"<no type>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext, provider.getCellContext(), new SubstituteInfoPart[]{new SProperty_Editor.ReplaceWith_SChildLink_cellMenu_a0a0(), new SProperty_Editor.ReplaceWith_SReference_cellMenu_b0a0(), new SProperty_Editor.SProperty_type_cellMenu_c0a0()}));\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","commit_id":"d2621e88f0f0c432f560ad487b0afc6c906dff12","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_iir456_a0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"ref\");\n    editorCell.setCellId(\"Constant_iir456_a0\");\n    default_StyleSheet.getKeyword(editorCell).apply(editorCell);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12002,"modified_method":"private EditorCell createConstant_iir456_a0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"ref\");\n    editorCell.setCellId(\"Constant_iir456_a0\");\n    default_StyleSheet.getKeyword(editorCell).apply(editorCell);\n    SReference_deleteRef.setCellActions(editorCell, node, editorContext);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"d2621e88f0f0c432f560ad487b0afc6c906dff12","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ConceptDescriptor getDescriptor(String conceptFqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {\n      case 0:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.MqlLinkSelector\", \"jetbrains.mps.core.query.structure.MqlSelector\", false, new String[]{\"jetbrains.mps.core.query.structure.MqlSelector\"}, new String[]{}, new String[]{\"link\"});\n      case 1:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.MqlNodeType\", \"jetbrains.mps.core.query.structure.MqlType\", false, new String[]{\"jetbrains.mps.core.query.structure.MqlType\"}, new String[]{}, new String[]{\"concept\"});\n      case 2:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.MqlPropertySelector\", \"jetbrains.mps.core.query.structure.MqlSelector\", false, new String[]{\"jetbrains.mps.core.query.structure.MqlSelector\"}, new String[]{}, new String[]{\"property\"});\n      case 3:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.SConceptQuery\", \"jetbrains.mps.core.structure.structure.SConceptMember\", false, new String[]{\"jetbrains.mps.core.structure.structure.SConceptMember\", \"jetbrains.mps.lang.core.structure.INamedConcept\", \"jetbrains.mps.core.query.structure.MqlParametersContainer\", \"jetbrains.mps.core.query.structure.MqlThisProvider\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 4:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.SConceptQueryCall\", \"jetbrains.mps.core.query.structure.MqlSelector\", false, new String[]{\"jetbrains.mps.core.query.structure.MqlSelector\"}, new String[]{}, new String[]{\"query\"});\n      default:\n        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);\n    }\n  }","id":12003,"modified_method":"public ConceptDescriptor getDescriptor(String conceptFqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {\n      case 0:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.MqlLinkSelector\", \"jetbrains.mps.core.query.structure.MqlSelector\", false, new String[]{\"jetbrains.mps.core.query.structure.MqlSelector\"}, new String[]{}, new String[]{\"link\"});\n      case 1:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.MqlNodeType\", \"jetbrains.mps.core.query.structure.MqlType\", false, new String[]{\"jetbrains.mps.core.query.structure.MqlType\"}, new String[]{}, new String[]{\"concept\"});\n      case 2:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.MqlPropertySelector\", \"jetbrains.mps.core.query.structure.MqlSelector\", false, new String[]{\"jetbrains.mps.core.query.structure.MqlSelector\"}, new String[]{}, new String[]{\"property\"});\n      case 3:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.SConceptQuery\", \"jetbrains.mps.core.structure.structure.SConceptMember\", false, new String[]{\"jetbrains.mps.core.structure.structure.SConceptMember\", \"jetbrains.mps.lang.core.structure.INamedConcept\", \"jetbrains.mps.core.query.structure.MqlParametersContainer\", \"jetbrains.mps.core.query.structure.MqlThisProvider\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"isAbstract\", \"isFinal\", \"isOverride\"}, new String[]{});\n      case 4:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.smodel.structure.SConceptQueryCall\", \"jetbrains.mps.core.query.structure.MqlSelector\", false, new String[]{\"jetbrains.mps.core.query.structure.MqlSelector\"}, new String[]{}, new String[]{\"query\"});\n      default:\n        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);\n    }\n  }","commit_id":"d2621e88f0f0c432f560ad487b0afc6c906dff12","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode variableReference, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode directAncestor = SNodeOperations.getAncestor(variableReference, \"org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor\", false, false);\n    if (directAncestor != null) {\n      SNode variableDeclaration = SLinkOperations.getTarget(variableReference, \"variableDeclaration\", false);\n\n      SNode declarationsAncestor = SNodeOperations.getAncestor(variableDeclaration, \"org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor\", false, false);\n      if (directAncestor != declarationsAncestor) {\n        if (!(SPropertyOperations.getBoolean(variableDeclaration, \"isFinal\"))) {\n          {\n            MessageTarget errorTarget = new NodeMessageTarget();\n            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(variableReference, \"Cannot refer non-final variables and parameters from within concurrent code\", \"r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)\", \"7793246093816027855\", null, errorTarget);\n            {\n              BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider(\"org.jetbrains.mps.samples.ParallelFor.typesystem.MakeDeclarationFinal_QuickFix\", false);\n              _reporter_2309309498.addIntentionProvider(intentionProvider);\n            }\n          }\n        }\n      }\n    }\n  }","id":12004,"modified_method":"public void applyRule(final SNode variableReference, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode directAncestor = SNodeOperations.getAncestor(variableReference, \"org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor\", false, false);\n    if (directAncestor != null && !(SNodeOperations.hasRole(variableReference, \"org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor\", \"threadPool\"))) {\n      SNode variableDeclaration = SLinkOperations.getTarget(variableReference, \"variableDeclaration\", false);\n\n      SNode declarationsAncestor = SNodeOperations.getAncestor(variableDeclaration, \"org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor\", false, false);\n      if (directAncestor != declarationsAncestor) {\n        if (!(SPropertyOperations.getBoolean(variableDeclaration, \"isFinal\"))) {\n          {\n            MessageTarget errorTarget = new NodeMessageTarget();\n            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(variableReference, \"Cannot refer non-final variables and parameters from within concurrent code\", \"r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)\", \"7793246093816027855\", null, errorTarget);\n            {\n              BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider(\"org.jetbrains.mps.samples.ParallelFor.typesystem.MakeDeclarationFinal_QuickFix\", false);\n              _reporter_2309309498.addIntentionProvider(intentionProvider);\n            }\n          }\n        }\n      }\n    }\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_p0t1np_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_p0t1np_a\");\n    editorCell.addEditorCell(this.createConstant_p0t1np_a0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_b0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_p0t1np_c0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_d0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_p0t1np_e0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_f0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_g0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_p0t1np_h0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_i0(editorContext, node));\n    return editorCell;\n  }","id":12005,"modified_method":"private EditorCell createCollection_p0t1np_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_p0t1np_a\");\n    editorCell.addEditorCell(this.createConstant_p0t1np_a0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_b0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_p0t1np_c0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_d0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_p0t1np_e0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_f0(editorContext, node));\n    if (renderingCondition_p0t1np_a6a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createConstant_p0t1np_g0(editorContext, node));\n    }\n    if (renderingCondition_p0t1np_a7a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefNode_p0t1np_h0(editorContext, node));\n    }\n    if (renderingCondition_p0t1np_a8a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createConstant_p0t1np_i0(editorContext, node));\n    }\n    editorCell.addEditorCell(this.createConstant_p0t1np_j0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_p0t1np_k0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_l0(editorContext, node));\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_p0t1np_f0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \")\");\n    editorCell.setCellId(\"Constant_p0t1np_f0\");\n    Style style = new StyleImpl();\n    BaseLanguageStyle_StyleSheet.applyRightParen(style, editorCell);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12006,"modified_method":"private EditorCell createConstant_p0t1np_f0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \")\");\n    editorCell.setCellId(\"Constant_p0t1np_f0\");\n    Style style = new StyleImpl();\n    BaseLanguageStyle_StyleSheet.applyRightParen(style, editorCell);\n    style.set(StyleAttributes.RT_ANCHOR_TAG, \"default_RTransform\");\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_p0t1np_g0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"{\");\n    editorCell.setCellId(\"Constant_p0t1np_g0\");\n    Style style = new StyleImpl();\n    BaseLanguageStyle_StyleSheet.applyLeftBrace(style, editorCell);\n    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, true);\n    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12007,"modified_method":"private EditorCell createConstant_p0t1np_g0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"using\");\n    editorCell.setCellId(\"Constant_p0t1np_g0\");\n    Style style = new StyleImpl();\n    BaseLanguageStyle_StyleSheet.applyKeyWord(style, editorCell);\n    editorCell.getStyle().putAll(style);\n    RemoveThreadPoolReference.setCellActions(editorCell, node, editorContext);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_p0t1np_a0_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"Thread Pool\");\n    editorCell.setCellId(\"Constant_p0t1np_a0_0\");\n    RemoveThreadPoolReference.setCellActions(editorCell, node, editorContext);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12008,"modified_method":"private EditorCell createConstant_p0t1np_a0_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"Loops through a collection in parallel using multiple threads.\");\n    editorCell.setCellId(\"Constant_p0t1np_a0_0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createProperty_p0t1np_d0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n    provider.setRole(\"nowait\");\n    provider.setNoTargetText(\"<no nowait>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    editorCell.setCellId(\"property_nowait\");\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","id":12009,"modified_method":"private EditorCell createConstant_p0t1np_d0_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"Example:\");\n    editorCell.setCellId(\"Constant_p0t1np_d0_0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_p0t1np_a_0(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_p0t1np_a_0\");\n    editorCell.addEditorCell(this.createConstant_p0t1np_a0_0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_p0t1np_b0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_c0(editorContext, node));\n    editorCell.addEditorCell(this.createProperty_p0t1np_d0(editorContext, node));\n    return editorCell;\n  }","id":12010,"modified_method":"private EditorCell createCollection_p0t1np_a_0(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_p0t1np_a_0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, false);\n    editorCell.getStyle().putAll(style);\n    editorCell.addEditorCell(this.createConstant_p0t1np_a0_0(editorContext, node));\n    editorCell.addEditorCell(this.createCollection_p0t1np_b0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_c0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_d0_0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_e0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_f0_0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_g0_0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_h0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_i0_0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_j0_0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_k0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_l0_0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_m0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_n0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_o0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_p0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_p0t1np_q0(editorContext, node));\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNode_p0t1np_h0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);\n    provider.setRole(\"body\");\n    provider.setNoTargetText(\"<no body>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","id":12011,"modified_method":"private EditorCell createRefNode_p0t1np_h0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);\n    provider.setRole(\"threadPool\");\n    provider.setNoTargetText(\"<no threadPool>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.RT_ANCHOR_TAG, \"default_RTransform\");\n    editorCell.getStyle().putAll(style);\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNode_p0t1np_b0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);\n    provider.setRole(\"threadPool\");\n    provider.setNoTargetText(\"<no threadPool>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","id":12012,"modified_method":"private EditorCell createRefNode_p0t1np_k0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);\n    provider.setRole(\"body\");\n    provider.setNoTargetText(\"<no body>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_p0t1np_i0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"}\");\n    editorCell.setCellId(\"Constant_p0t1np_i0\");\n    Style style = new StyleImpl();\n    BaseLanguageStyle_StyleSheet.applyRightBrace(style, editorCell);\n    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12013,"modified_method":"private EditorCell createConstant_p0t1np_i0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"no wait\");\n    editorCell.setCellId(\"Constant_p0t1np_i0\");\n    Style style = new StyleImpl();\n    BaseLanguageStyle_StyleSheet.applyKeyWord(style, editorCell);\n    style.set(StyleAttributes.RT_ANCHOR_TAG, \"ext_3_RTransform\");\n    editorCell.getStyle().putAll(style);\n    DeleteNoWait.setCellActions(editorCell, node, editorContext);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_p0t1np_c0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"Nowait\");\n    editorCell.setCellId(\"Constant_p0t1np_c0\");\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12014,"modified_method":"private EditorCell createConstant_p0t1np_c0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"\");\n    editorCell.setCellId(\"Constant_p0t1np_c0\");\n    Style style = new StyleImpl();\n    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    editorCell.getStyle().putAll(style);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fac9f2e4ad089f9e3cb940cbec2aed563105bef3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createProperty_e5b6m9_a0a0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name\");\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","id":12015,"modified_method":"private EditorCell createProperty_e5b6m9_a0a0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name\");\n      ExecutionSettings_StyleSheet.getPersistentConfigurationRef(editorCell).apply(editorCell);\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_e5b6m9_d0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \")\");\n    editorCell.setCellId(\"Constant_e5b6m9_d0\");\n    RunConfigurations_StyleSheet.getRightOperationBrace(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.TEXT_COLOR, MPSColors.black);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12016,"modified_method":"private EditorCell createConstant_e5b6m9_c0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"(\");\n    editorCell.setCellId(\"Constant_e5b6m9_c0\");\n    RunConfigurations_StyleSheet.getLeftOperationBrace(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.TEXT_COLOR, MPSColors.black);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_e5b6m9_b0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"(\");\n    editorCell.setCellId(\"Constant_e5b6m9_b0\");\n    RunConfigurations_StyleSheet.getLeftOperationBrace(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.TEXT_COLOR, MPSColors.black);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12017,"modified_method":"private EditorCell createConstant_e5b6m9_e0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \")\");\n    editorCell.setCellId(\"Constant_e5b6m9_e0\");\n    RunConfigurations_StyleSheet.getRightOperationBrace(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.TEXT_COLOR, MPSColors.black);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNodeList_e5b6m9_c0(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new PersistentConfigurationTemplateInitializer_Editor.parameterListHandler_e5b6m9_c0(node, \"parameter\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Horizontal(), false);\n    editorCell.setCellId(\"refNodeList_parameter\");\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","id":12018,"modified_method":"private EditorCell createRefNodeList_e5b6m9_d0(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new PersistentConfigurationTemplateInitializer_Editor.parameterListHandler_e5b6m9_d0(node, \"parameter\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Horizontal(), false);\n    editorCell.setCellId(\"refNodeList_parameter\");\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_e5b6m9_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);\n    editorCell.setCellId(\"Collection_e5b6m9_a\");\n    editorCell.addEditorCell(this.createRefCell_e5b6m9_a0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_e5b6m9_b0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNodeList_e5b6m9_c0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_e5b6m9_d0(editorContext, node));\n    return editorCell;\n  }","id":12019,"modified_method":"private EditorCell createCollection_e5b6m9_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);\n    editorCell.setCellId(\"Collection_e5b6m9_a\");\n    if (renderingCondition_e5b6m9_a0a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefCell_e5b6m9_a0(editorContext, node));\n    }\n    if (renderingCondition_e5b6m9_a1a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefCell_e5b6m9_b0(editorContext, node));\n    }\n    editorCell.addEditorCell(this.createConstant_e5b6m9_c0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNodeList_e5b6m9_d0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_e5b6m9_e0(editorContext, node));\n    return editorCell;\n  }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createProperty_c5arh5_a0b0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name_1\");\n      {\n        Style style = editorCell.getStyle();\n        style.set(StyleAttributes.STRIKE_OUT, true);\n      }\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","id":12020,"modified_method":"private EditorCell createProperty_c5arh5_a0b0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name_1\");\n      ExecutionSettings_StyleSheet.getPersistentConfigurationRefDeprecated(editorCell).apply(editorCell);\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createProperty_c5arh5_a0a0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name\");\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","id":12021,"modified_method":"private EditorCell createProperty_c5arh5_a0a0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name\");\n      ExecutionSettings_StyleSheet.getPersistentConfigurationRef(editorCell).apply(editorCell);\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_nyg1sl_b0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"(\");\n    editorCell.setCellId(\"Constant_nyg1sl_b0\");\n    BaseLanguageStyle_StyleSheet.getLeftParenAfterName(editorCell).apply(editorCell);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12022,"modified_method":"private EditorCell createConstant_nyg1sl_e0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \")\");\n    editorCell.setCellId(\"Constant_nyg1sl_e0\");\n    BaseLanguageStyle_StyleSheet.getRightParen(editorCell).apply(editorCell);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_nyg1sl_d0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \")\");\n    editorCell.setCellId(\"Constant_nyg1sl_d0\");\n    BaseLanguageStyle_StyleSheet.getRightParen(editorCell).apply(editorCell);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12023,"modified_method":"private EditorCell createConstant_nyg1sl_c0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"(\");\n    editorCell.setCellId(\"Constant_nyg1sl_c0\");\n    BaseLanguageStyle_StyleSheet.getLeftParenAfterName(editorCell).apply(editorCell);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNode_nyg1sl_c0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);\n    provider.setRole(\"configurationName\");\n    provider.setNoTargetText(\"<no configurationName>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","id":12024,"modified_method":"private EditorCell createRefNode_nyg1sl_d0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);\n    provider.setRole(\"configurationName\");\n    provider.setNoTargetText(\"<no configurationName>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_nyg1sl_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);\n    editorCell.setCellId(\"Collection_nyg1sl_a\");\n    editorCell.addEditorCell(this.createRefCell_nyg1sl_a0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_nyg1sl_b0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_nyg1sl_c0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_nyg1sl_d0(editorContext, node));\n    return editorCell;\n  }","id":12025,"modified_method":"private EditorCell createCollection_nyg1sl_a(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);\n    editorCell.setCellId(\"Collection_nyg1sl_a\");\n    if (renderingCondition_nyg1sl_a0a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefCell_nyg1sl_a0(editorContext, node));\n    }\n    if (renderingCondition_nyg1sl_a1a(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefCell_nyg1sl_b0(editorContext, node));\n    }\n    editorCell.addEditorCell(this.createConstant_nyg1sl_c0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNode_nyg1sl_d0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_nyg1sl_e0(editorContext, node));\n    return editorCell;\n  }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createProperty_nyg1sl_a0a0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name\");\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","id":12026,"modified_method":"private EditorCell createProperty_nyg1sl_a0a0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name\");\n      ExecutionSettings_StyleSheet.getPersistentConfigurationRef(editorCell).apply(editorCell);\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createProperty_1clvom_a0a0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name\");\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","id":12027,"modified_method":"private EditorCell createProperty_1clvom_a0a0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name\");\n      ExecutionSettings_StyleSheet.getPersistentConfigurationRef(editorCell).apply(editorCell);\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createProperty_1clvom_a0b0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name_1\");\n      {\n        Style style = editorCell.getStyle();\n        style.set(StyleAttributes.STRIKE_OUT, true);\n      }\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","id":12028,"modified_method":"private EditorCell createProperty_1clvom_a0b0(EditorContext editorContext, SNode node) {\n      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n      provider.setRole(\"name\");\n      provider.setNoTargetText(\"<no name>\");\n      provider.setReadOnly(true);\n      EditorCell editorCell;\n      editorCell = provider.createEditorCell(editorContext);\n      editorCell.setCellId(\"property_name_1\");\n      ExecutionSettings_StyleSheet.getPersistentConfigurationRefDeprecated(editorCell).apply(editorCell);\n      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n      SNode attributeConcept = provider.getRoleAttribute();\n      Class attributeKind = provider.getRoleAttributeClass();\n      if (attributeConcept != null) {\n        IOperationContext opContext = editorContext.getOperationContext();\n        EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n      } else\n      return editorCell;\n    }","commit_id":"fb22e03427b0b85c9f37d674087b4c1abf75a6d7","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void execute(final SNode node, final EditorContext editorContext) {\n    SLinkOperations.setTarget(node, AttributesRolesUtil.childRoleFromAttributeRole(\"methodDocComment\"), SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\", null), true);\n    for (SNode parameterDeclaration : ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true))) {\n      SNode paramTag = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag\", null);\n      SLinkOperations.setTarget(paramTag, \"parameter\", parameterDeclaration, false);\n      SLinkOperations.addChild(SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromAttributeRole(\"methodDocComment\"), true), \"param\", paramTag);\n    }\n  }","id":12029,"modified_method":"public void execute(final SNode node, final EditorContext editorContext) {\n    SLinkOperations.setTarget(node, AttributesRolesUtil.childRoleFromAttributeRole(\"methodDocComment\"), SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\", null), true);\n    //  Method parameters\n    for (SNode parameterDeclaration : ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true))) {\n      SNode paramTag = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag\", null);\n      SLinkOperations.setTarget(paramTag, \"parameter\", parameterDeclaration, false);\n      SLinkOperations.addChild(SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromAttributeRole(\"methodDocComment\"), true), \"param\", paramTag);\n    }\n\n    //  Type variables - TODO\n\n    //  Thrown exceptions\n    for (SNode throwsItem : ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true))) {\n      SNode throwsTag = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag\", null);\n      SLinkOperations.setTarget(throwsTag, \"exceptionType\", throwsItem, true);\n      SLinkOperations.addChild(SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromAttributeRole(\"methodDocComment\"), true), \"throwsTag\", throwsTag);\n    }\n\n    //  Return value\n    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, \"returnType\", true), \"jetbrains.mps.baseLanguage.structure.VoidType\"))) {\n      SLinkOperations.setTarget(SLinkOperations.getTarget(node, AttributesRolesUtil.childRoleFromAttributeRole(\"methodDocComment\"), true), \"return\", SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag\", null), true);\n    }\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_9512_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"@author\");\n    editorCell.setCellId(\"Constant_9512_0\");\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12030,"modified_method":"private EditorCell createConstant_9512_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"@author\");\n    editorCell.setCellId(\"Constant_9512_0\");\n    DocumentationCommentStyleSheet_StyleSheet.getCommentTag(editorCell).apply(editorCell);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createProperty_0937_0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n    provider.setRole(\"line\");\n    provider.setNoTargetText(\"<no line>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    editorCell.setCellId(\"property_line\");\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","id":12031,"modified_method":"private EditorCell createProperty_0937_0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);\n    provider.setRole(\"line\");\n    provider.setNoTargetText(\"\");\n    provider.setAllowsEmptyTarget(true);\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    editorCell.setCellId(\"property_line\");\n    editorCell.addKeyMap(new CommentLine_KeyMap());\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = this.createEmptyCell_internal(editorContext, this.getOwner());\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","id":12032,"modified_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = super.createEmptyCell(editorContext);\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNodeList_2364_4(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.paramListHandler_2364_0(node, \"param\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_param\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","id":12033,"modified_method":"private EditorCell createRefNodeList_2364_4(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.paramListHandler_2364_0(node, \"param\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_param\");\n    DocumentationCommentStyleSheet_StyleSheet.getComment(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_2364_1(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \" */\");\n    editorCell.setCellId(\"Constant_2364_1\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12034,"modified_method":"private EditorCell createConstant_2364_1(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \" */\");\n    editorCell.setCellId(\"Constant_2364_1\");\n    DocumentationCommentStyleSheet_StyleSheet.getComment(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean renderingCondition2364_0(SNode node, EditorContext editorContext, IScope scope) {\n    return !(BaseDocComment_Behavior.call_isTagSectionEmpty_8465538089690623795(node));\n  }","id":12035,"modified_method":"private static boolean renderingCondition2364_0(SNode node, EditorContext editorContext, IScope scope) {\n    return ListSequence.fromList(SLinkOperations.getTargets(node, \"author\", true)).isNotEmpty();\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_2364_0(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_2364_0\");\n    editorCell.addEditorCell(this.createConstant_2364_0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNodeList_2364_0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_2364_2(editorContext, node));\n    editorCell.addEditorCell(this.createAlternation_2364_0(editorContext, node));\n    editorCell.addEditorCell(this.createConstant_2364_1(editorContext, node));\n    editorCell.addEditorCell(this.createAttributedNodeCell_2364_0(editorContext, node));\n    return editorCell;\n  }","id":12036,"modified_method":"private EditorCell createCollection_2364_0(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_2364_0\");\n    editorCell.addEditorCell(this.createConstant_2364_0(editorContext, node));\n    editorCell.addEditorCell(this.createRefNodeList_2364_5(editorContext, node));\n    if (renderingCondition2364_6(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createCollection_2364_1(editorContext, node));\n    }\n    editorCell.addEditorCell(this.createConstant_2364_1(editorContext, node));\n    editorCell.addEditorCell(this.createAttributedNodeCell_2364_0(editorContext, node));\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_2364_2(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"\");\n    editorCell.setCellId(\"Constant_2364_2\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12037,"modified_method":"private EditorCell createConstant_2364_2(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"\");\n    editorCell.setCellId(\"Constant_2364_2\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNodeList_2364_1(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.authorListHandler_2364_0(node, \"author\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_author\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","id":12038,"modified_method":"private EditorCell createRefNodeList_2364_1(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.authorListHandler_2364_0(node, \"author\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_author\");\n    DocumentationCommentStyleSheet_StyleSheet.getComment(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = this.createEmptyCell_internal(editorContext, this.getOwner());\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","id":12039,"modified_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = super.createEmptyCell(editorContext);\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNodeList_2364_2(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.sinceListHandler_2364_0(node, \"since\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_since\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","id":12040,"modified_method":"private EditorCell createRefNodeList_2364_2(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.sinceListHandler_2364_0(node, \"since\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_since\");\n    DocumentationCommentStyleSheet_StyleSheet.getComment(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNodeList_2364_3(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.versionListHandler_2364_0(node, \"version\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_version\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","id":12041,"modified_method":"private EditorCell createRefNodeList_2364_3(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.versionListHandler_2364_0(node, \"version\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_version\");\n    DocumentationCommentStyleSheet_StyleSheet.getComment(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_2364_5(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"\");\n    editorCell.setCellId(\"Constant_2364_5\");\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12042,"modified_method":"private EditorCell createRefNodeList_2364_5(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.bodyListHandler_2364_0(node, \"body\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_body\");\n    DocumentationCommentStyleSheet_StyleSheet.getComment(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = super.createEmptyCell(editorContext);\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","id":12043,"modified_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = this.createEmptyCell_internal(editorContext, this.getOwner());\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_2364_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"/**\");\n    editorCell.setCellId(\"Constant_2364_0\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12044,"modified_method":"private EditorCell createConstant_2364_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"/**\");\n    editorCell.setCellId(\"Constant_2364_0\");\n    DocumentationCommentStyleSheet_StyleSheet.getComment(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_2364_4(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"\");\n    editorCell.setCellId(\"Constant_2364_4\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    }\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12045,"modified_method":"private static boolean renderingCondition2364_4(SNode node, EditorContext editorContext, IScope scope) {\n    return ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsTag\", true)).isNotEmpty();\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = this.createEmptyCell_internal(editorContext, this.getOwner());\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","id":12046,"modified_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = super.createEmptyCell(editorContext);\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createRefNodeList_2364_0(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.bodyListHandler_2364_0(node, \"body\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_body\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","id":12047,"modified_method":"private EditorCell createRefNodeList_2364_0(EditorContext editorContext, SNode node) {\n    AbstractCellListHandler handler = new MethodDocComment_Editor.throwsTagListHandler_2364_0(node, \"throwsTag\", editorContext);\n    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);\n    editorCell.setCellId(\"refNodeList_throwsTag\");\n    DocumentationCommentStyleSheet_StyleSheet.getComment(editorCell).apply(editorCell);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, true);\n    }\n    editorCell.setRole(handler.getElementRole());\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = this.createEmptyCell_internal(editorContext, this.getOwner());\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","id":12048,"modified_method":"public EditorCell createEmptyCell(EditorContext editorContext) {\n      EditorCell emptyCell = null;\n      emptyCell = super.createEmptyCell(editorContext);\n      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);\n      return emptyCell;\n    }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createCollection_2364_1(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_2364_1\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.SELECTABLE, false);\n    }\n    editorCell.addEditorCell(this.createConstant_2364_4(editorContext, node));\n    editorCell.addEditorCell(this.createRefNodeList_2364_1(editorContext, node));\n    editorCell.addEditorCell(this.createRefNodeList_2364_2(editorContext, node));\n    editorCell.addEditorCell(this.createRefNodeList_2364_3(editorContext, node));\n    editorCell.addEditorCell(this.createRefNodeList_2364_4(editorContext, node));\n    return editorCell;\n  }","id":12049,"modified_method":"private EditorCell createCollection_2364_1(EditorContext editorContext, SNode node) {\n    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);\n    editorCell.setCellId(\"Collection_2364_1\");\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.SELECTABLE, false);\n    }\n    editorCell.addEditorCell(this.createConstant_2364_2(editorContext, node));\n    if (renderingCondition2364_0(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefNodeList_2364_1(editorContext, node));\n    }\n    if (renderingCondition2364_1(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefNodeList_2364_2(editorContext, node));\n    }\n    if (renderingCondition2364_2(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefNodeList_2364_3(editorContext, node));\n    }\n    if (renderingCondition2364_3(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefNodeList_2364_4(editorContext, node));\n    }\n    if (renderingCondition2364_4(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefNodeList_2364_0(editorContext, node));\n    }\n    if (renderingCondition2364_5(node, editorContext, editorContext.getOperationContext().getScope())) {\n      editorCell.addEditorCell(this.createRefNode_2364_0(editorContext, node));\n    }\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createAlternation_2364_0(EditorContext editorContext, SNode node) {\n    boolean alternationCondition = true;\n    alternationCondition = MethodDocComment_Editor.renderingCondition2364_0(node, editorContext, editorContext.getOperationContext().getScope());\n    EditorCell editorCell = null;\n    if (alternationCondition) {\n      editorCell = this.createCollection_2364_1(editorContext, node);\n    } else {\n      editorCell = this.createConstant_2364_5(editorContext, node);\n    }\n    return editorCell;\n  }","id":12050,"modified_method":"private EditorCell createRefNode_2364_0(EditorContext editorContext, SNode node) {\n    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);\n    provider.setRole(\"return\");\n    provider.setNoTargetText(\"<no return>\");\n    EditorCell editorCell;\n    editorCell = provider.createEditorCell(editorContext);\n    {\n      Style style = editorCell.getStyle();\n      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);\n      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);\n    }\n    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());\n    SNode attributeConcept = provider.getRoleAttribute();\n    Class attributeKind = provider.getRoleAttributeClass();\n    if (attributeConcept != null) {\n      IOperationContext opContext = editorContext.getOperationContext();\n      EditorManager manager = EditorManager.getInstanceFromContext(opContext);\n      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);\n    } else\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_8822_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"@param\");\n    editorCell.setCellId(\"Constant_8822_0\");\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12051,"modified_method":"private EditorCell createConstant_8822_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"@param\");\n    editorCell.setCellId(\"Constant_8822_0\");\n    DocumentationCommentStyleSheet_StyleSheet.getCommentTag(editorCell).apply(editorCell);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_1513_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"@since\");\n    editorCell.setCellId(\"Constant_1513_0\");\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12052,"modified_method":"private EditorCell createConstant_1513_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"@since\");\n    editorCell.setCellId(\"Constant_1513_0\");\n    DocumentationCommentStyleSheet_StyleSheet.getCommentTag(editorCell).apply(editorCell);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private EditorCell createConstant_0581_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"@version\");\n    editorCell.setCellId(\"Constant_0581_0\");\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","id":12053,"modified_method":"private EditorCell createConstant_0581_0(EditorContext editorContext, SNode node) {\n    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, \"@version\");\n    editorCell.setCellId(\"Constant_0581_0\");\n    DocumentationCommentStyleSheet_StyleSheet.getCommentTag(editorCell).apply(editorCell);\n    editorCell.setDefaultText(\"\");\n    return editorCell;\n  }","commit_id":"6f410d1349c8ce807d6a78a38c7149b4e0e309c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void start(XFormsElementContext context, String uri, String localname,\n                      String qname, Attributes attributes) throws SAXException {\n        final AttributesImpl newAttributes = new AttributesImpl(attributes);\n        Map prefixToURI = context.getCurrentPrefixToURIMap();\n\n        if ((\"if\".equals(localname) || \"when\".equals(localname)) && XFormsConstants.XXFORMS_NAMESPACE_URI.equals(uri)) {\n            String test = attributes.getValue(\"test\");\n            final FunctionLibrary fncLib = context.getFunctionLibrary();\n            Boolean value = (Boolean) context.getCurrentInstance().evaluateXPathSingle(context.getPipelineContext(), context.getCurrentSingleNode(),\n                    \"boolean(\" + test + \")\", prefixToURI, context.getRepeatIdToIndex(), fncLib, null);\n\n            addExtensionAttribute(newAttributes, \"value\", Boolean.toString(value.booleanValue()));\n        } else if (context.getParentElement(0) instanceof Itemset\n                && (\"copy\".equals(localname) || \"label\".equals(localname))) {\n            // Pass information about the \"ref\" on the element to the parent \"itemset\"\n            Itemset itemset = (Itemset) context.getParentElement(0);\n            if (\"copy\".equals(localname)) {\n                itemset.setCopyRef(attributes.getValue(\"ref\"), prefixToURI);\n            } else {\n                itemset.setLabelRef(attributes.getValue(\"ref\"), prefixToURI);\n            }\n        } else {\n            // Add annotations about referenced element\n            boolean bindPresent = attributes.getIndex(\"\", \"bind\") != -1;\n            boolean refPresent = attributes.getIndex(\"\", \"ref\") != -1;\n            boolean nodesetPresent = attributes.getIndex(\"\", \"nodeset\") != -1;\n            boolean positionPresent = attributes.getIndex(XFormsConstants.XXFORMS_NAMESPACE_URI, \"position\") != -1;\n            if (refPresent || bindPresent || nodesetPresent || positionPresent) {\n                {\n                    final InstanceData currentNodeInstanceData = XFormsUtils.getInstanceDataUpdateInherited(context.getCurrentSingleNode());\n                    if (currentNodeInstanceData != null) { // will be null for /\n                        final String typeAsString = currentNodeInstanceData.getType().getAsString();\n                        if (typeAsString != null)\n                            addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_TYPE_ATTRIBUTE_NAME, typeAsString);\n                        addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_READONLY_ATTRIBUTE_NAME,\n                                Boolean.toString(currentNodeInstanceData.getInheritedReadonly().get()));\n                        addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_RELEVANT_ATTRIBUTE_NAME,\n                                Boolean.toString(currentNodeInstanceData.getInheritedRelevant().get()));\n                        addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_REQUIRED_ATTRIBUTE_NAME,\n                                Boolean.toString(currentNodeInstanceData.getRequired().get()));\n                        addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_VALID_ATTRIBUTE_NAME,\n                                Boolean.toString(currentNodeInstanceData.getValid().get()));\n                        if (currentNodeInstanceData.getInvalidBindIds() != null)\n                            addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_INVALID_BIND_IDS_ATTRIBUTE_NAME, currentNodeInstanceData.getInvalidBindIds());\n                        if (DATA_CONTROLS.containsKey(localname)) {\n                            // Must use local instance data to perform modifications\n                            final InstanceData currentNodeLocalInstanceData = XFormsUtils.getLocalInstanceData(context.getCurrentSingleNode());\n                            currentNodeLocalInstanceData.setGenerated(true);\n                            String id = Integer.toString(currentNodeLocalInstanceData.getId());\n                            if (XFormsUtils.isNameEncryptionEnabled())\n                                id = SecureUtils.encrypt(context.getPipelineContext(), context.getEncryptionPassword(), id);\n\n                            // Check if node value must be externalized\n                            final boolean externalize = currentNodeInstanceData.getXXFormsExternalize().get();\n                            final String namePrefix = externalize ? \"$extnode^\" : \"$node^\";\n                            addExtensionAttribute(newAttributes, \"name\", namePrefix + id);\n\n                            final String valueToSet;\n                            if (externalize) {\n                                // In this case, the value is empty or an URL that we must dereference\n                                final String url = context.getRefValue();\n\n                                if (!url.trim().equals(\"\")){\n\n                                    // There is non-blank content, decode\n                                    try {\n                                        final String fileName = new URL(url).getPath();\n                                        final Reader reader = new InputStreamReader(new FileInputStream(new File(fileName)), \"utf-8\");\n                                        final StringWriter writer = new StringWriter();\n                                        try {\n                                            NetUtils.copyStream(reader, writer);\n                                        } finally {\n                                            reader.close();\n                                        }\n                                        valueToSet = writer.toString();\n                                    } catch (Exception e) {\n                                        throw new OXFException(e);\n                                    }\n                                } else {\n                                    // No non-blank content, keep value as is\n                                    valueToSet = context.getRefValue();\n                                }\n                            } else {\n                                // Use value as is\n                                valueToSet = context.getRefValue();\n                            }\n\n                            addExtensionAttribute(newAttributes, \"value\", valueToSet);\n                        } else if (ACTION_CONTROLS.containsKey(localname)) {\n                            addExtensionAttribute(newAttributes, \"value\", context.getRefValue());\n                        }\n                    }\n                }\n\n                if (!positionPresent) {\n                    // Get ids of node\n                    StringBuffer ids = new StringBuffer();\n                    boolean first = true;\n                    final List currentNodeSet = context.getCurrentNodeset();\n                    if (currentNodeSet != null) {\n                        for (Iterator i = currentNodeSet.iterator(); i.hasNext();) {\n                            final Node node = (Node) i.next();\n                            if (!first) ids.append(' '); else first = false;\n                            final InstanceData currentNodeInstanceData = XFormsUtils.getLocalInstanceData(node);\n                            if (currentNodeInstanceData != null) {\n                                String id = Integer.toString(currentNodeInstanceData.getId());\n                                if (XFormsUtils.isNameEncryptionEnabled())\n                                    id = SecureUtils.encrypt(context.getPipelineContext(), context.getEncryptionPassword(), id);\n                                ids.append(id);\n                            }\n                        }\n                    }\n                    addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_NODE_IDS_ATTRIBUTE_NAME, ids.toString());\n                }\n            }\n\n            if (attributes.getIndex(\"\", \"at\") != -1) {\n                // Evaluate \"at\" as a number\n                Object at = context.getCurrentInstance().evaluateXPathSingle(context.getPipelineContext(), context.getCurrentSingleNode(),\n                        \"round(\" + attributes.getValue(\"at\") + \")\", context.getCurrentPrefixToURIMap(), null, context.getFunctionLibrary(), null);\n\n                if (!(at instanceof Number))\n                    throw new ValidationException(\"'at' expression must return a number\",\n                            new LocationData(context.getLocator()));\n                String atString = at.toString();\n                if (XFormsUtils.isNameEncryptionEnabled())\n                    atString = SecureUtils.encrypt(context.getPipelineContext(),\n                            context.getEncryptionPassword(), atString);\n                addExtensionAttribute(newAttributes, \"at-value\", atString);\n            }\n            if (attributes.getIndex(\"\", \"value\") != -1) {\n                // Evaluate \"value\" as a string\n                Object value = context.getCurrentInstance().evaluateXPathSingle(context.getPipelineContext(), context.getCurrentSingleNode(),\n                        \"string(\" + attributes.getValue(\"value\") + \")\", context.getCurrentPrefixToURIMap(), null, context.getFunctionLibrary(), null);\n\n                if (!(value instanceof String))\n                    throw new ValidationException(\"'value' expression must return a string\",\n                            new LocationData(context.getLocator()));\n\n                addExtensionAttribute(newAttributes, \"value-value\", (String) value);\n            }\n            // Linking attribute: load content to xxforms:src-value\n            if (attributes.getIndex(\"\", \"src\") != -1 && LINKING_CONTROLS.containsKey(localname)) {\n                try {\n                    final String val;\n                    String src = attributes.getValue(\"src\");\n                    if (\"orbeon:xforms:schema:errors\".equals(src)) {\n                        final org.dom4j.Node nd = context.getCurrentSingleNode();\n                        final InstanceData instDat = XFormsUtils.getLocalInstanceData(nd);\n                        final java.util.Iterator itr = instDat.getSchemaErrorsMsgs();\n                        val = StringUtils.join(itr, \"\\n\");\n                    } else {\n                        val = XFormsUtils.retrieveSrcValue(src);\n\n                    }\n                    addExtensionAttribute(newAttributes, \"src-value\", val);\n                } catch (MalformedURLException e) {\n                    throw new OXFException(e);\n                } catch (IOException ioe) {\n                    throw new OXFException(ioe);\n                }\n            }\n        }\n        context.getContentHandler().startElement(uri, localname, qname, newAttributes);\n    }","id":12054,"modified_method":"public void start(XFormsElementContext context, String uri, String localname,\n                      String qname, Attributes attributes) throws SAXException {\n        final AttributesImpl newAttributes = new AttributesImpl(attributes);\n        Map prefixToURI = context.getCurrentPrefixToURIMap();\n\n        if ((\"if\".equals(localname) || \"when\".equals(localname)) && XFormsConstants.XXFORMS_NAMESPACE_URI.equals(uri)) {\n            String test = attributes.getValue(\"test\");\n            final FunctionLibrary fncLib = context.getFunctionLibrary();\n            final Node contextNode = context.getCurrentSingleNode();\n            if (contextNode == null)\n                throw new ValidationException(\"null context node for boolean 'test' expression: \" + test, new LocationData(context.getLocator())); \n            final Boolean value = (Boolean) context.getCurrentInstance().evaluateXPathSingle(context.getPipelineContext(), contextNode,\n                    \"boolean(\" + test + \")\", prefixToURI, context.getRepeatIdToIndex(), fncLib, null);\n\n            addExtensionAttribute(newAttributes, \"value\", Boolean.toString(value.booleanValue()));\n        } else if (context.getParentElement(0) instanceof Itemset\n                && (\"copy\".equals(localname) || \"label\".equals(localname))) {\n            // Pass information about the \"ref\" on the element to the parent \"itemset\"\n            Itemset itemset = (Itemset) context.getParentElement(0);\n            if (\"copy\".equals(localname)) {\n                itemset.setCopyRef(attributes.getValue(\"ref\"), prefixToURI);\n            } else {\n                itemset.setLabelRef(attributes.getValue(\"ref\"), prefixToURI);\n            }\n        } else {\n            // Add annotations about referenced element\n            boolean bindPresent = attributes.getIndex(\"\", \"bind\") != -1;\n            boolean refPresent = attributes.getIndex(\"\", \"ref\") != -1;\n            boolean nodesetPresent = attributes.getIndex(\"\", \"nodeset\") != -1;\n            boolean positionPresent = attributes.getIndex(XFormsConstants.XXFORMS_NAMESPACE_URI, \"position\") != -1;\n\n            if (refPresent || bindPresent || nodesetPresent || positionPresent) {\n\n                final Node contextNode = context.getCurrentSingleNode();\n//                if (contextNode == null)\n//                    throw new ValidationException(\"null context node\", new LocationData(context.getLocator()));\n\n                {\n                    final InstanceData currentNodeInstanceData = XFormsUtils.getInstanceDataUpdateInherited(contextNode);\n                    if (currentNodeInstanceData != null) { // will be null for /\n                        final String typeAsString = currentNodeInstanceData.getType().getAsString();\n                        if (typeAsString != null)\n                            addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_TYPE_ATTRIBUTE_NAME, typeAsString);\n                        addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_READONLY_ATTRIBUTE_NAME,\n                                Boolean.toString(currentNodeInstanceData.getInheritedReadonly().get()));\n                        addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_RELEVANT_ATTRIBUTE_NAME,\n                                Boolean.toString(currentNodeInstanceData.getInheritedRelevant().get()));\n                        addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_REQUIRED_ATTRIBUTE_NAME,\n                                Boolean.toString(currentNodeInstanceData.getRequired().get()));\n                        addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_VALID_ATTRIBUTE_NAME,\n                                Boolean.toString(currentNodeInstanceData.getValid().get()));\n                        if (currentNodeInstanceData.getInvalidBindIds() != null)\n                            addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_INVALID_BIND_IDS_ATTRIBUTE_NAME, currentNodeInstanceData.getInvalidBindIds());\n                        if (DATA_CONTROLS.containsKey(localname)) {\n                            // Must use local instance data to perform modifications\n                            final InstanceData currentNodeLocalInstanceData = XFormsUtils.getLocalInstanceData(contextNode);\n                            currentNodeLocalInstanceData.setGenerated(true);\n                            String id = Integer.toString(currentNodeLocalInstanceData.getId());\n                            if (XFormsUtils.isNameEncryptionEnabled())\n                                id = SecureUtils.encrypt(context.getPipelineContext(), context.getEncryptionPassword(), id);\n\n                            // Check if node value must be externalized\n                            final boolean externalize = currentNodeInstanceData.getXXFormsExternalize().get();\n                            final String namePrefix = externalize ? \"$extnode^\" : \"$node^\";\n                            addExtensionAttribute(newAttributes, \"name\", namePrefix + id);\n\n                            final String valueToSet;\n                            if (externalize) {\n                                // In this case, the value is empty or an URL that we must dereference\n                                final String url = context.getRefValue();\n\n                                if (!url.trim().equals(\"\")){\n\n                                    // There is non-blank content, decode\n                                    try {\n                                        final String fileName = new URL(url).getPath();\n                                        final Reader reader = new InputStreamReader(new FileInputStream(new File(fileName)), \"utf-8\");\n                                        final StringWriter writer = new StringWriter();\n                                        try {\n                                            NetUtils.copyStream(reader, writer);\n                                        } finally {\n                                            reader.close();\n                                        }\n                                        valueToSet = writer.toString();\n                                    } catch (Exception e) {\n                                        throw new OXFException(e);\n                                    }\n                                } else {\n                                    // No non-blank content, keep value as is\n                                    valueToSet = context.getRefValue();\n                                }\n                            } else {\n                                // Use value as is\n                                valueToSet = context.getRefValue();\n                            }\n\n                            addExtensionAttribute(newAttributes, \"value\", valueToSet);\n                        } else if (ACTION_CONTROLS.containsKey(localname)) {\n                            addExtensionAttribute(newAttributes, \"value\", context.getRefValue());\n                        }\n                    }\n                }\n\n                if (!positionPresent) {\n                    // Get ids of node\n                    StringBuffer ids = new StringBuffer();\n                    boolean first = true;\n                    final List currentNodeSet = context.getCurrentNodeset();\n                    if (currentNodeSet != null) {\n                        for (Iterator i = currentNodeSet.iterator(); i.hasNext();) {\n                            final Node node = (Node) i.next();\n                            if (!first) ids.append(' '); else first = false;\n                            final InstanceData currentNodeInstanceData = XFormsUtils.getLocalInstanceData(node);\n                            if (currentNodeInstanceData != null) {\n                                String id = Integer.toString(currentNodeInstanceData.getId());\n                                if (XFormsUtils.isNameEncryptionEnabled())\n                                    id = SecureUtils.encrypt(context.getPipelineContext(), context.getEncryptionPassword(), id);\n                                ids.append(id);\n                            }\n                        }\n                    }\n                    addExtensionAttribute(newAttributes, XFormsConstants.XXFORMS_NODE_IDS_ATTRIBUTE_NAME, ids.toString());\n                }\n            }\n\n            if (attributes.getIndex(\"\", \"at\") != -1) {\n                // Evaluate \"at\" as a number\n\n                final String atExpression = attributes.getValue(\"at\");\n                final Node contextNode = context.getCurrentSingleNode();\n                if (contextNode == null)\n                    throw new ValidationException(\"null context node for number 'at' expression: \" + atExpression, new LocationData(context.getLocator()));\n\n                final Object at = context.getCurrentInstance().evaluateXPathSingle(context.getPipelineContext(), context.getCurrentSingleNode(),\n                        \"round(\" + atExpression + \")\", context.getCurrentPrefixToURIMap(), null, context.getFunctionLibrary(), null);\n\n                if (!(at instanceof Number))\n                    throw new ValidationException(\"'at' expression must return a number\",\n                            new LocationData(context.getLocator()));\n                String atString = at.toString();\n                if (XFormsUtils.isNameEncryptionEnabled())\n                    atString = SecureUtils.encrypt(context.getPipelineContext(),\n                            context.getEncryptionPassword(), atString);\n                addExtensionAttribute(newAttributes, \"at-value\", atString);\n            }\n            if (attributes.getIndex(\"\", \"value\") != -1) {\n                // Evaluate \"value\" as a string\n\n                final String valueExpression = attributes.getValue(\"value\");\n                final Node contextNode = context.getCurrentSingleNode();\n                if (contextNode == null)\n                    throw new ValidationException(\"null context node for string 'value' expression: \" + valueExpression, new LocationData(context.getLocator()));\n\n                Object value = context.getCurrentInstance().evaluateXPathSingle(context.getPipelineContext(), context.getCurrentSingleNode(),\n                        \"string(\" + valueExpression + \")\", context.getCurrentPrefixToURIMap(), null, context.getFunctionLibrary(), null);\n\n                if (!(value instanceof String))\n                    throw new ValidationException(\"'value' expression must return a string\",\n                            new LocationData(context.getLocator()));\n\n                addExtensionAttribute(newAttributes, \"value-value\", (String) value);\n            }\n            // Linking attribute: load content to xxforms:src-value\n            if (attributes.getIndex(\"\", \"src\") != -1 && LINKING_CONTROLS.containsKey(localname)) {\n                try {\n                    final String val;\n                    String src = attributes.getValue(\"src\");\n                    if (\"orbeon:xforms:schema:errors\".equals(src)) {\n                        final Node contextNode = context.getCurrentSingleNode();\n//                        if (contextNode == null)\n//                            throw new ValidationException(\"null context node\", new LocationData(context.getLocator()));\n\n                        final InstanceData instanceData = XFormsUtils.getLocalInstanceData(contextNode);\n                        final Iterator iterator = instanceData.getSchemaErrorsMsgs();\n                        val = StringUtils.join(iterator, \"\\n\");\n                    } else {\n                        val = XFormsUtils.retrieveSrcValue(src);\n\n                    }\n                    addExtensionAttribute(newAttributes, \"src-value\", val);\n                } catch (MalformedURLException e) {\n                    throw new OXFException(e);\n                } catch (IOException ioe) {\n                    throw new OXFException(ioe);\n                }\n            }\n        }\n        context.getContentHandler().startElement(uri, localname, qname, newAttributes);\n    }","commit_id":"0f92ae23bc99fbe9ad9771be57c84db32a4fbef5","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"protected void upload(CommandContext ctx) throws CommandLineException {\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        if(!Util.isValidPath(ctx.getModelControllerClient(), Util.DEPLOYMENT_OVERLAY, name)) {\n            throw new CommandLineException(\"Deployment overlay \" + name + \" does not exist.\");\n        }\n        final String contentStr = content.getValue(args, true);\n\n        final String[] contentPairs = contentStr.split(\",+\");\n        if(contentPairs.length == 0) {\n            throw new CommandFormatException(\"Overlay content is not specified.\");\n        }\n        final String[] contentNames = new String[contentPairs.length];\n        final File[] contentPaths = new File[contentPairs.length];\n        for(int i = 0; i < contentPairs.length; ++i) {\n            final String pair = contentPairs[i];\n            final int equalsIndex = pair.indexOf('=');\n            if(equalsIndex < 0) {\n                throw new CommandFormatException(\"Content pair is not following archive-path=fs-path format: '\" + pair + \"'\");\n            }\n            contentNames[i] = pair.substring(0, equalsIndex);\n            if(contentNames[i].length() == 0) {\n                throw new CommandFormatException(\"The archive path is missing for the content '\" + pair + \"'\");\n            }\n            final String path = pair.substring(equalsIndex + 1);\n            if(path.length() == 0) {\n                throw new CommandFormatException(\"The filesystem paths is missing for the content '\" + pair + \"'\");\n            }\n            final File f = new File(path);\n            if(!f.exists()) {\n                throw new CommandFormatException(\"Content file doesn't exist \" + f.getAbsolutePath());\n            }\n            contentPaths[i] = f;\n        }\n\n        final String deploymentsStr = deployment.getValue(args);\n        if(deploymentsStr != null) {\n            throw new CommandFormatException(deployment.getFullName() + \" can't be used in combination with upload.\");\n        }\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n\n        // upload the content\n        final List<ModelNode> uploadResponses;\n        {\n            final ModelNode composite = new ModelNode();\n            final OperationBuilder opBuilder = new OperationBuilder(composite);\n            composite.get(Util.OPERATION).set(Util.COMPOSITE);\n            composite.get(Util.ADDRESS).setEmptyList();\n            final ModelNode steps = composite.get(Util.STEPS);\n            for (int i = 0; i < contentPaths.length; ++i) {\n                final ModelNode op = new ModelNode();\n                op.get(Util.ADDRESS).setEmptyList();\n                op.get(Util.OPERATION).set(Util.UPLOAD_DEPLOYMENT_STREAM);\n                op.get(Util.INPUT_STREAM_INDEX).set(i);\n                opBuilder.addFileAsAttachment(contentPaths[i]);\n                steps.add(op);\n            }\n            final Operation compositeOp = opBuilder.build();\n            final ModelNode response;\n            try {\n                response = client.execute(compositeOp);\n            } catch (IOException e) {\n                throw new CommandFormatException(\"Failed to upload content\", e);\n            } finally {\n                try {\n                    compositeOp.close();\n                } catch (IOException e) {\n                }\n            }\n            if(!response.hasDefined(Util.RESULT)) {\n                final String descr = Util.getFailureDescription(response);\n                if(descr == null) {\n                    throw new CommandLineException(\"Upload response is missing result.\");\n                } else {\n                    throw new CommandLineException(descr);\n                }\n            }\n            uploadResponses = response.get(Util.RESULT).asList();\n        }\n\n        // create the overlay and link it to the deployments\n        {\n            final ModelNode composite = new ModelNode();\n            composite.get(Util.OPERATION).set(Util.COMPOSITE);\n            composite.get(Util.ADDRESS).setEmptyList();\n            final ModelNode steps = composite.get(Util.STEPS);\n\n            // add the content\n            for (int i = 0; i < contentNames.length; ++i) {\n                final String contentName = contentNames[i];\n                ModelNode result = uploadResponses.get(i);\n                result = result.get(\"step-\" + (i+1));\n                if(!result.isDefined()) {\n                    throw new CommandLineException(\"Upload step response is missing expected step-\" + (i+1) + \" attribute: \" + result);\n                }\n                result = result.get(Util.RESULT);\n                if(!result.isDefined()) {\n                    throw new CommandLineException(\"Upload step response is missing result: \" + result);\n                }\n                final ModelNode op = new ModelNode();\n                final ModelNode address = op.get(Util.ADDRESS);\n                address.add(Util.DEPLOYMENT_OVERLAY, name);\n                address.add(Util.CONTENT, contentName);\n                op.get(Util.OPERATION).set(Util.ADD);\n                op.get(Util.CONTENT).set(result);\n                steps.add(op);\n            }\n\n            try {\n                final ModelNode result = client.execute(composite);\n                if (!Util.isSuccess(result)) {\n                    throw new CommandFormatException(Util.getFailureDescription(result));\n                }\n            } catch (IOException e) {\n                throw new CommandFormatException(\"Failed to add overlay\", e);\n            }\n        }\n    }","id":12055,"modified_method":"protected void upload(CommandContext ctx) throws CommandLineException {\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        if(!Util.isValidPath(ctx.getModelControllerClient(), Util.DEPLOYMENT_OVERLAY, name)) {\n            throw new CommandLineException(\"Deployment overlay \" + name + \" does not exist.\");\n        }\n        final String contentStr = content.getValue(args, true);\n\n        final String[] contentPairs = contentStr.split(\",+\");\n        if(contentPairs.length == 0) {\n            throw new CommandFormatException(\"Overlay content is not specified.\");\n        }\n        final String[] contentNames = new String[contentPairs.length];\n        final File[] contentPaths = new File[contentPairs.length];\n        for(int i = 0; i < contentPairs.length; ++i) {\n            final String pair = contentPairs[i];\n            final int equalsIndex = pair.indexOf('=');\n            if(equalsIndex < 0) {\n                throw new CommandFormatException(\"Content pair is not following archive-path=fs-path format: '\" + pair + \"'\");\n            }\n            contentNames[i] = pair.substring(0, equalsIndex);\n            if(contentNames[i].length() == 0) {\n                throw new CommandFormatException(\"The archive path is missing for the content '\" + pair + \"'\");\n            }\n            final String path = pair.substring(equalsIndex + 1);\n            if(path.length() == 0) {\n                throw new CommandFormatException(\"The filesystem paths is missing for the content '\" + pair + \"'\");\n            }\n            final File f = new File(path);\n            if(!f.exists()) {\n                throw new CommandFormatException(\"Content file doesn't exist \" + f.getAbsolutePath());\n            }\n            contentPaths[i] = f;\n        }\n\n        final String deploymentsStr = deployments.getValue(args);\n        if(deploymentsStr != null) {\n            throw new CommandFormatException(deployments.getFullName() + \" can't be used in combination with upload.\");\n        }\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n\n        // upload the content\n        final List<ModelNode> uploadResponses;\n        {\n            final ModelNode composite = new ModelNode();\n            final OperationBuilder opBuilder = new OperationBuilder(composite);\n            composite.get(Util.OPERATION).set(Util.COMPOSITE);\n            composite.get(Util.ADDRESS).setEmptyList();\n            final ModelNode steps = composite.get(Util.STEPS);\n            for (int i = 0; i < contentPaths.length; ++i) {\n                final ModelNode op = new ModelNode();\n                op.get(Util.ADDRESS).setEmptyList();\n                op.get(Util.OPERATION).set(Util.UPLOAD_DEPLOYMENT_STREAM);\n                op.get(Util.INPUT_STREAM_INDEX).set(i);\n                opBuilder.addFileAsAttachment(contentPaths[i]);\n                steps.add(op);\n            }\n            final Operation compositeOp = opBuilder.build();\n            final ModelNode response;\n            try {\n                response = client.execute(compositeOp);\n            } catch (IOException e) {\n                throw new CommandFormatException(\"Failed to upload content\", e);\n            } finally {\n                try {\n                    compositeOp.close();\n                } catch (IOException e) {\n                }\n            }\n            if(!response.hasDefined(Util.RESULT)) {\n                final String descr = Util.getFailureDescription(response);\n                if(descr == null) {\n                    throw new CommandLineException(\"Upload response is missing result.\");\n                } else {\n                    throw new CommandLineException(descr);\n                }\n            }\n            uploadResponses = response.get(Util.RESULT).asList();\n        }\n\n        // create the overlay and link it to the deployments\n        {\n            final ModelNode composite = new ModelNode();\n            composite.get(Util.OPERATION).set(Util.COMPOSITE);\n            composite.get(Util.ADDRESS).setEmptyList();\n            final ModelNode steps = composite.get(Util.STEPS);\n\n            // add the content\n            for (int i = 0; i < contentNames.length; ++i) {\n                final String contentName = contentNames[i];\n                ModelNode result = uploadResponses.get(i);\n                result = result.get(\"step-\" + (i+1));\n                if(!result.isDefined()) {\n                    throw new CommandLineException(\"Upload step response is missing expected step-\" + (i+1) + \" attribute: \" + result);\n                }\n                result = result.get(Util.RESULT);\n                if(!result.isDefined()) {\n                    throw new CommandLineException(\"Upload step response is missing result: \" + result);\n                }\n                final ModelNode op = new ModelNode();\n                final ModelNode address = op.get(Util.ADDRESS);\n                address.add(Util.DEPLOYMENT_OVERLAY, name);\n                address.add(Util.CONTENT, contentName);\n                op.get(Util.OPERATION).set(Util.ADD);\n                op.get(Util.CONTENT).set(result);\n                steps.add(op);\n            }\n\n            try {\n                final ModelNode result = client.execute(composite);\n                if (!Util.isSuccess(result)) {\n                    throw new CommandFormatException(Util.getFailureDescription(result));\n                }\n            } catch (IOException e) {\n                throw new CommandFormatException(\"Failed to add overlay\", e);\n            }\n        }\n    }","commit_id":"f9b955c7c399cc70ec45c824c42e97a182e5af6a","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void link(CommandContext ctx) throws CommandLineException {\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        final String deploymentsStr = deployment.getValue(args, true);\n        final String sg = serverGroup.getValue(args);\n        if(ctx.isDomainMode() && sg == null) {\n            throw new CommandFormatException(serverGroup.getFullName() + \" is missing value.\");\n        }\n        final String[] deployments = deploymentsStr.split(\",+\");\n\n        if(deployments.length == 0) {\n            throw new CommandFormatException(\"Missing value for \" + deployment.getFullName() + \": '\" + deploymentsStr + \"'\");\n        }\n\n        final ModelNode composite = new ModelNode();\n        composite.get(Util.OPERATION).set(Util.COMPOSITE);\n        composite.get(Util.ADDRESS).setEmptyList();\n        final ModelNode steps = composite.get(Util.STEPS);\n\n        if(sg != null && !Util.isValidPath(ctx.getModelControllerClient(), Util.SERVER_GROUP, sg, Util.DEPLOYMENT_OVERLAY, name)) {\n            final ModelNode op = new ModelNode();\n            final ModelNode address = op.get(Util.ADDRESS);\n            address.add(Util.SERVER_GROUP, sg);\n            address.add(Util.DEPLOYMENT_OVERLAY, name);\n            op.get(Util.OPERATION).set(Util.ADD);\n            steps.add(op);\n        }\n\n        // link the deployments\n        addLinkDeploymentSteps(name, sg, deployments, steps);\n\n        try {\n            final ModelNode result = ctx.getModelControllerClient().execute(composite);\n            if (!Util.isSuccess(result)) {\n                throw new CommandFormatException(Util.getFailureDescription(result));\n            }\n        } catch (IOException e) {\n            throw new CommandFormatException(\"Failed to link overlay\", e);\n        }\n    }","id":12056,"modified_method":"protected void link(CommandContext ctx) throws CommandLineException {\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        final String deploymentsStr = deployments.getValue(args, true);\n        final String sgStr = serverGroups.getValue(args);\n        final String[] sg;\n        if(ctx.isDomainMode()) {\n            if(sgStr == null) {\n                throw new CommandFormatException(serverGroups.getFullName() + \" is missing value.\");\n            }\n            sg = sgStr.split(\",+\");\n            if(sg.length == 0) {\n                throw new CommandFormatException(serverGroups.getFullName() + \" is missing value.\");\n            }\n        } else {\n            sg = null;\n        }\n        final String[] deployments = deploymentsStr.split(\",+\");\n\n        if(deployments.length == 0) {\n            throw new CommandFormatException(\"Missing value for \" + this.deployments.getFullName() + \": '\" + deploymentsStr + \"'\");\n        }\n\n        final ModelNode composite = new ModelNode();\n        composite.get(Util.OPERATION).set(Util.COMPOSITE);\n        composite.get(Util.ADDRESS).setEmptyList();\n        final ModelNode steps = composite.get(Util.STEPS);\n\n        if(sg != null) {\n            for(String group : sg) {\n                if(!Util.isValidPath(ctx.getModelControllerClient(), Util.SERVER_GROUP, group, Util.DEPLOYMENT_OVERLAY, name)) {\n                    final ModelNode op = new ModelNode();\n                    final ModelNode address = op.get(Util.ADDRESS);\n                    address.add(Util.SERVER_GROUP, group);\n                    address.add(Util.DEPLOYMENT_OVERLAY, name);\n                    op.get(Util.OPERATION).set(Util.ADD);\n                    steps.add(op);\n                }\n                addLinkDeploymentSteps(name, group, deployments, steps);\n            }\n        } else {\n            addLinkDeploymentSteps(name, null, deployments, steps);\n        }\n\n        try {\n            final ModelNode result = ctx.getModelControllerClient().execute(composite);\n            if (!Util.isSuccess(result)) {\n                throw new CommandFormatException(Util.getFailureDescription(result));\n            }\n        } catch (IOException e) {\n            throw new CommandFormatException(\"Failed to link overlay\", e);\n        }\n    }","commit_id":"f9b955c7c399cc70ec45c824c42e97a182e5af6a","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void doHandle(CommandContext ctx) throws CommandLineException {\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        if(!args.hasProperties() || l.isPresent(args) && args.getPropertyNames().isEmpty() && args.getOtherProperties().size() == 1) {\n            final ModelNode op = new ModelNode();\n            op.get(Util.ADDRESS).setEmptyList();\n            op.get(Util.OPERATION).set(Util.READ_CHILDREN_NAMES);\n            op.get(Util.CHILD_TYPE).set(Util.DEPLOYMENT_OVERLAY);\n            final ModelNode response;\n            try {\n                response = ctx.getModelControllerClient().execute(op);\n            } catch (IOException e) {\n                throw new CommandLineException(\"Failed to execute \" + Util.READ_CHILDREN_NAMES, e);\n            }\n            final ModelNode result = response.get(Util.RESULT);\n            if(!result.isDefined()) {\n                final String descr = Util.getFailureDescription(response);\n                if(descr != null) {\n                    throw new CommandLineException(descr);\n                }\n                throw new CommandLineException(\"The response of \" + Util.READ_CHILDREN_NAMES + \" is missing result: \" + response);\n            }\n\n            if(l.isPresent(args)) {\n                for(ModelNode node : result.asList()) {\n                    ctx.printLine(node.asString());\n                }\n            } else {\n                final List<String> names = new ArrayList<String>();\n                for(ModelNode node : result.asList()) {\n                    names.add(node.asString());\n                }\n                ctx.printColumns(names);\n            }\n            return;\n        }\n\n        final String action = this.action.getValue(args, true);\n        if(\"add\".equals(action)) {\n            add(ctx);\n        } else if(\"remove\".equals(action)) {\n            remove(ctx);\n        } else if(\"upload\".equals(action)) {\n            upload(ctx);\n        } else if(\"list-content\".equals(action)) {\n            listContent(ctx);\n        } else if(\"list-deployments\".equals(action)) {\n            listDeployments(ctx);\n        } else if(\"link\".equals(action)) {\n            link(ctx);\n        } else {\n            throw new CommandFormatException(\"Unrecognized action: '\" + action + \"'\");\n        }\n    }","id":12057,"modified_method":"@Override\n    protected void doHandle(CommandContext ctx) throws CommandLineException {\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        if(!args.hasProperties() || l.isPresent(args) && args.getPropertyNames().isEmpty() && args.getOtherProperties().size() == 1) {\n            final ModelNode op = new ModelNode();\n            op.get(Util.ADDRESS).setEmptyList();\n            op.get(Util.OPERATION).set(Util.READ_CHILDREN_NAMES);\n            op.get(Util.CHILD_TYPE).set(Util.DEPLOYMENT_OVERLAY);\n            final ModelNode response;\n            try {\n                response = ctx.getModelControllerClient().execute(op);\n            } catch (IOException e) {\n                throw new CommandLineException(\"Failed to execute \" + Util.READ_CHILDREN_NAMES, e);\n            }\n            final ModelNode result = response.get(Util.RESULT);\n            if(!result.isDefined()) {\n                final String descr = Util.getFailureDescription(response);\n                if(descr != null) {\n                    throw new CommandLineException(descr);\n                }\n                throw new CommandLineException(\"The response of \" + Util.READ_CHILDREN_NAMES + \" is missing result: \" + response);\n            }\n\n            if(l.isPresent(args)) {\n                for(ModelNode node : result.asList()) {\n                    ctx.printLine(node.asString());\n                }\n            } else {\n                final List<String> names = new ArrayList<String>();\n                for(ModelNode node : result.asList()) {\n                    names.add(node.asString());\n                }\n                ctx.printColumns(names);\n            }\n            return;\n        }\n\n        final String action = this.action.getValue(args, true);\n        if(ADD.equals(action)) {\n            add(ctx);\n        } else if(REMOVE.equals(action)) {\n            remove(ctx);\n        } else if(UPLOAD.equals(action)) {\n            upload(ctx);\n        } else if(LIST_CONTENT.equals(action)) {\n            listContent(ctx);\n        } else if(LIST_LINKS.equals(action)) {\n            listLinks(ctx);\n        } else if(LINK.equals(action)) {\n            link(ctx);\n        } else {\n            throw new CommandFormatException(\"Unrecognized action: '\" + action + \"'\");\n        }\n    }","commit_id":"f9b955c7c399cc70ec45c824c42e97a182e5af6a","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void listDeployments(CommandContext ctx) throws CommandLineException {\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        if(name == null) {\n            throw new CommandFormatException(this.name + \" is missing value.\");\n        }\n        final String sg = serverGroup.getValue(ctx.getParsedCommandLine());\n        if(ctx.isDomainMode() && sg == null) {\n            throw new CommandFormatException(serverGroup.getFullName() + \" is missing value.\");\n        }\n        final List<String> content = loadLinkedDeployments(client, name, sg);\n        if(l.isPresent(args)) {\n            for(String contentPath : content) {\n                ctx.printLine(contentPath);\n            }\n        } else {\n            ctx.printColumns(content);\n        }\n    }","id":12058,"modified_method":"protected void listLinks(CommandContext ctx) throws CommandLineException {\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        if(name == null) {\n            throw new CommandFormatException(this.name + \" is missing value.\");\n        }\n        final String sg = serverGroups.getValue(ctx.getParsedCommandLine());\n        if(ctx.isDomainMode()) {\n            if(sg == null) {\n                throw new CommandFormatException(serverGroups.getFullName() + \" is missing value.\");\n            }\n            final String[] groups = sg.split(\",+\");\n            if(groups.length == 0) {\n                throw new CommandFormatException(serverGroups.getFullName() + \" is missing value.\");\n            }\n            for(String group : groups) {\n                ctx.printLine(\"SERVER GROUP: \" + group + Util.LINE_SEPARATOR);\n                ctx.printColumns(loadLinkedDeployments(client, name, sg));\n            }\n        } else {\n            final List<String> content = loadLinkedDeployments(client, name, sg);\n            if (l.isPresent(args)) {\n                for (String contentPath : content) {\n                    ctx.printLine(contentPath);\n                }\n            } else {\n                ctx.printColumns(content);\n            }\n        }\n    }","commit_id":"f9b955c7c399cc70ec45c824c42e97a182e5af6a","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void remove(CommandContext ctx) throws CommandLineException {\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        if(name == null) {\n            throw new CommandFormatException(this.name + \" is missing value.\");\n        }\n        final String contentStr = content.getValue(args);\n        final String deploymentStr = deployment.getValue(args);\n        final String sg = serverGroup.getValue(args);\n\n        final ModelNode composite = new ModelNode();\n        composite.get(Util.OPERATION).set(Util.COMPOSITE);\n        composite.get(Util.ADDRESS).setEmptyList();\n        final ModelNode steps = composite.get(Util.STEPS);\n\n        if(deploymentStr != null || contentStr == null) {\n            // remove the overlay links\n\n            if(ctx.isDomainMode()) {\n                if(deploymentStr == null) {\n                    final List<String> sgNames = sg == null ? Util.getServerGroups(client) : Collections.singletonList(sg);\n                    // remove all\n                    for(String sgName : sgNames) {\n                        final List<String> deployments = loadLinkedDeployments(client, name, sgName);\n                        if(!deployments.isEmpty()) {\n                            addRemoveDeploymentSteps(name, sgName, deployments, steps);\n                            final ModelNode op = new ModelNode();\n                            final ModelNode addr = op.get(Util.ADDRESS);\n                            addr.add(Util.SERVER_GROUP, sgName);\n                            addr.add(Util.DEPLOYMENT_OVERLAY, name);\n                            op.get(Util.OPERATION).set(Util.REMOVE);\n                            steps.add(op);\n                        }\n                    }\n                } else {\n                    // in the domain mode, there must be a server group\n                    if(ctx.isDomainMode() && sg == null) {\n                        throw new CommandFormatException(serverGroup.getFullName() + \" is missing.\");\n                    }\n                    final List<String> deployments = Arrays.asList(deploymentStr.split(\",+\"));\n                    addRemoveDeploymentSteps(name, sg, deployments, steps);\n                }\n            } else {\n                final List<String> overlays;\n                if(deploymentStr == null) {\n                    // remove all\n                    overlays = loadLinkedDeployments(client, name, null);\n                } else {\n                    // in the domain mode, there must server group\n                    if(ctx.isDomainMode() && sg == null) {\n                        throw new CommandFormatException(serverGroup.getFullName() + \" is missing.\");\n                    }\n                    overlays = Arrays.asList(deploymentStr.split(\",+\"));\n                }\n                addRemoveDeploymentSteps(name, sg, overlays, steps);\n            }\n        }\n\n        if(contentStr != null || deploymentStr == null && sg == null) {\n            // determine the content to be removed\n\n            final List<String> contentList;\n            if(contentStr == null) {\n                contentList = loadContentFor(client, name);\n            } else {\n                contentList = java.util.Arrays.asList(contentStr.split(\",+\"));\n            }\n\n            for(String content : contentList) {\n                final ModelNode op = new ModelNode();\n                ModelNode addr = op.get(Util.ADDRESS);\n                addr.add(Util.DEPLOYMENT_OVERLAY, name);\n                addr.add(Util.CONTENT, content);\n                op.get(Util.OPERATION).set(Util.REMOVE);\n                steps.add(op);\n            }\n        }\n\n        if(contentStr == null && deploymentStr == null && sg == null) {\n            final ModelNode op = new ModelNode();\n            op.get(Util.ADDRESS).add(Util.DEPLOYMENT_OVERLAY, name);\n            op.get(Util.OPERATION).set(Util.REMOVE);\n            steps.add(op);\n        }\n\n        try {\n            final ModelNode result = client.execute(composite);\n            if (!Util.isSuccess(result)) {\n                throw new CommandFormatException(Util.getFailureDescription(result));\n            }\n        } catch (IOException e) {\n            throw new CommandFormatException(\"Failed to remove overlay\", e);\n        }\n    }","id":12059,"modified_method":"protected void remove(CommandContext ctx) throws CommandLineException {\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        if(name == null) {\n            throw new CommandFormatException(this.name + \" is missing value.\");\n        }\n        final String contentStr = content.getValue(args);\n        final String deploymentStr = deployments.getValue(args);\n        final String sgStr = serverGroups.getValue(args);\n        final List<String> sg;\n        if(sgStr == null) {\n            if(allRelevantServerGroups.isPresent(args)) {\n                sg = Util.getServerGroups(client);\n            } else {\n                sg = null;\n            }\n        } else {\n            sg = Arrays.asList(sgStr.split(\",+\"));\n            if(sg.isEmpty()) {\n                throw new CommandFormatException(serverGroups.getFullName() + \" is missing value.\");\n            }\n        }\n\n        final ModelNode composite = new ModelNode();\n        composite.get(Util.OPERATION).set(Util.COMPOSITE);\n        composite.get(Util.ADDRESS).setEmptyList();\n        final ModelNode steps = composite.get(Util.STEPS);\n\n        if(deploymentStr != null || contentStr == null) {\n            // remove the overlay links\n\n            if(ctx.isDomainMode()) {\n                if(deploymentStr == null) {\n                    final List<String> sgNames = sg == null ? Util.getServerGroups(client) : sg;\n                    // remove all\n                    for(String sgName : sgNames) {\n                        final List<String> deployments = loadLinkedDeployments(client, name, sgName);\n                        if(!deployments.isEmpty()) {\n                            addRemoveDeploymentSteps(name, sgName, deployments, steps);\n                            final ModelNode op = new ModelNode();\n                            final ModelNode addr = op.get(Util.ADDRESS);\n                            addr.add(Util.SERVER_GROUP, sgName);\n                            addr.add(Util.DEPLOYMENT_OVERLAY, name);\n                            op.get(Util.OPERATION).set(Util.REMOVE);\n                            steps.add(op);\n                        }\n                    }\n                } else {\n                    if(ctx.isDomainMode() && sg == null) {\n                        throw new CommandFormatException(serverGroups.getFullName() + \" or \" + allRelevantServerGroups.getFullName() + \" is required.\");\n                    }\n                    final List<String> deployments = Arrays.asList(deploymentStr.split(\",+\"));\n                    for(String group : sg) {\n                        addRemoveDeploymentSteps(name, group, deployments, steps);\n                    }\n                }\n            } else {\n                final List<String> overlays;\n                if(deploymentStr == null) {\n                    // remove all\n                    overlays = loadLinkedDeployments(client, name, null);\n                } else {\n                    overlays = Arrays.asList(deploymentStr.split(\",+\"));\n                }\n                addRemoveDeploymentSteps(name, null, overlays, steps);\n            }\n        }\n\n        if(contentStr != null || deploymentStr == null && sg == null) {\n            // determine the content to be removed\n\n            final List<String> contentList;\n            if(contentStr == null) {\n                contentList = loadContentFor(client, name);\n            } else {\n                contentList = java.util.Arrays.asList(contentStr.split(\",+\"));\n            }\n\n            for(String content : contentList) {\n                final ModelNode op = new ModelNode();\n                ModelNode addr = op.get(Util.ADDRESS);\n                addr.add(Util.DEPLOYMENT_OVERLAY, name);\n                addr.add(Util.CONTENT, content);\n                op.get(Util.OPERATION).set(Util.REMOVE);\n                steps.add(op);\n            }\n        }\n\n        if(contentStr == null && deploymentStr == null && sg == null) {\n            final ModelNode op = new ModelNode();\n            op.get(Util.ADDRESS).add(Util.DEPLOYMENT_OVERLAY, name);\n            op.get(Util.OPERATION).set(Util.REMOVE);\n            steps.add(op);\n        }\n\n        try {\n            final ModelNode result = client.execute(composite);\n            if (!Util.isSuccess(result)) {\n                throw new CommandFormatException(Util.getFailureDescription(result));\n            }\n        } catch (IOException e) {\n            throw new CommandFormatException(\"Failed to remove overlay\", e);\n        }\n    }","commit_id":"f9b955c7c399cc70ec45c824c42e97a182e5af6a","url":"https://github.com/wildfly/wildfly"},{"original_method":"public DeploymentOverlayHandler(CommandContext ctx) {\n        super(\"deployment-overlay\", true);\n\n        l = new ArgumentWithoutValue(this, \"-l\") {\n            @Override\n            public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if(actionStr == null || \"list-content\".equals(actionStr) || \"list-deployments\".equals(actionStr)) {\n                    return super.canAppearNext(ctx);\n                }\n                return false;\n            }\n        };\n\n        action = new ArgumentWithValue(this, new SimpleTabCompleter(\n                new String[]{\"add\", \"link\", \"list-content\", \"list-deployments\", \"remove\", \"upload\"}), 0, \"--action\");\n\n        name = new ArgumentWithValue(this, new DefaultCompleter(new CandidatesProvider(){\n            @Override\n            public Collection<String> getAllCandidates(CommandContext ctx) {\n                final ModelControllerClient client = ctx.getModelControllerClient();\n                if(client == null) {\n                    return Collections.emptyList();\n                }\n                final ModelNode op = new ModelNode();\n                op.get(Util.OPERATION).set(Util.READ_CHILDREN_NAMES);\n                op.get(Util.ADDRESS).setEmptyList();\n                op.get(Util.CHILD_TYPE).set(Util.DEPLOYMENT_OVERLAY);\n                final ModelNode response;\n                try {\n                    response = client.execute(op);\n                } catch (IOException e) {\n                    return Collections.emptyList();\n                }\n                final ModelNode result = response.get(Util.RESULT);\n                if(!result.isDefined()) {\n                    return Collections.emptyList();\n                }\n                final List<String> names = new ArrayList<String>();\n                for(ModelNode node : result.asList()) {\n                    names.add(node.asString());\n                }\n                return names;\n            }}), \"--name\");\n        name.addRequiredPreceding(action);\n\n        final FilenameTabCompleter pathCompleter = Util.isWindows() ? new WindowsFilenameTabCompleter(ctx) : new DefaultFilenameTabCompleter(ctx);\n        content = new ArgumentWithValue(this, new CommandLineCompleter(){\n            @Override\n            public int complete(CommandContext ctx, String buffer, int cursor, List<String> candidates) {\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if (\"add\".equals(actionStr) || \"upload\".equals(actionStr)) {\n                    // TODO add support for quoted paths\n                    int i = buffer.lastIndexOf(',');\n                    i = buffer.indexOf('=', i + 1);\n                    if (i < 0) {\n                        return -1;\n                    }\n                    final String path = buffer.substring(i + 1);\n                    int pathResult = pathCompleter.complete(ctx, path, 0, candidates);\n                    if (pathResult < 0) {\n                        return -1;\n                    }\n                    return i + 1 + pathResult;\n                } else if(\"remove\".equals(actionStr)) {\n                    final String nameStr = name.getValue(ctx.getParsedCommandLine());\n                    if(nameStr == null) {\n                        return -1;\n                    }\n                    final List<String> existing;\n                    try {\n                        existing = loadContentFor(ctx.getModelControllerClient(), nameStr);\n                    } catch (CommandLineException e) {\n                        return -1;\n                    }\n                    if(existing.isEmpty()) {\n                        return buffer.length();\n                    }\n                    candidates.addAll(existing);\n                    if(buffer.isEmpty()) {\n                        return 0;\n                    }\n                    final String[] specified = buffer.split(\",+\");\n                    candidates.removeAll(Arrays.asList(specified));\n                    if(buffer.charAt(buffer.length() - 1) == ',') {\n                        return buffer.length();\n                    }\n                    final String chunk = specified[specified.length - 1];\n                    for(int i = 0; i < candidates.size(); ++i) {\n                        if(!candidates.get(i).startsWith(chunk)) {\n                            candidates.remove(i);\n                        }\n                    }\n                    return buffer.length() - chunk.length();\n                } else {\n                    return -1;\n                }\n            }}, \"--content\") {\n            @Override\n            public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if(actionStr == null) {\n                    return false;\n                }\n                if(\"add\".equals(actionStr) || \"upload\".equals(actionStr) || \"remove\".equals(actionStr)) {\n                    return super.canAppearNext(ctx);\n                }\n                return false;\n            }\n        };\n        content.addRequiredPreceding(name);\n        content.addCantAppearAfter(l);\n\n        serverGroup = new ArgumentWithValue(this, new DefaultCompleter(new CandidatesProvider(){\n            @Override\n            public Collection<String> getAllCandidates(CommandContext ctx) {\n                return Util.getServerGroups(ctx.getModelControllerClient());\n            }}) , \"--server-group\") {\n            @Override\n            public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {\n                if(!ctx.isDomainMode()) {\n                    return false;\n                }\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if(actionStr == null) {\n                    return false;\n                }\n                if(\"add\".equals(actionStr) || \"link\".equals(actionStr)\n                        || \"remove\".equals(actionStr) || \"list-deployments\".equals(actionStr)) {\n                    return super.canAppearNext(ctx);\n                }\n                return false;\n            }\n        };\n        serverGroup.addRequiredPreceding(name);\n\n        deployment = new ArgumentWithValue(this, new CommandLineCompleter(){\n            @Override\n            public int complete(CommandContext ctx, String buffer, int cursor, List<String> candidates) {\n                final ModelControllerClient client = ctx.getModelControllerClient();\n                if(client == null) {\n                    return -1;\n                }\n                // TODO in domain mode it should consult the specified server group for deployments\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                final List<String> existing;\n                if(\"add\".equals(actionStr) || \"link\".equals(actionStr)) {\n                    existing = Util.getDeployments(client);\n                } else if(\"remove\".equals(actionStr)) {\n                    try {\n                        final String nameStr = name.getValue(ctx.getParsedCommandLine());\n                        if(nameStr == null) {\n                            return -1;\n                        }\n                        final String sg = serverGroup.getValue(ctx.getParsedCommandLine());\n                        if(ctx.isDomainMode() && sg == null) {\n                            return -1;\n                        }\n                        existing = loadLinkedDeployments(client, nameStr, sg);\n                    } catch (CommandLineException e) {\n                        return -1;\n                    }\n                } else {\n                    return -1;\n                }\n\n                if(existing.isEmpty()) {\n                    return buffer.length();\n                }\n                candidates.addAll(existing);\n                if(buffer.isEmpty()) {\n                    return 0;\n                }\n                final String[] specified = buffer.split(\",+\");\n                candidates.removeAll(Arrays.asList(specified));\n                if(buffer.charAt(buffer.length() - 1) == ',') {\n                    return buffer.length();\n                }\n                final String chunk = specified[specified.length - 1];\n                for(int i = 0; i < candidates.size(); ++i) {\n                    if(!candidates.get(i).startsWith(chunk)) {\n                        candidates.remove(i);\n                    }\n                }\n                return buffer.length() - chunk.length();\n            }\n        }, \"--deployment\") {\n            @Override\n            public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {\n                if(ctx.isDomainMode()) {\n                    if(serverGroup.isPresent(ctx.getParsedCommandLine())) {\n                        return super.canAppearNext(ctx);\n                    }\n                    return false;\n                }\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if(actionStr == null) {\n                    return false;\n                }\n                if(\"add\".equals(actionStr) || \"link\".equals(actionStr) || \"remove\".equals(actionStr)) {\n                    return super.canAppearNext(ctx);\n                }\n                return false;\n            }\n        };\n        deployment.addRequiredPreceding(name);\n        deployment.addCantAppearAfter(l);\n    }","id":12060,"modified_method":"public DeploymentOverlayHandler(CommandContext ctx) {\n        super(\"deployment-overlay\", true);\n\n        l = new ArgumentWithoutValue(this, \"-l\") {\n            @Override\n            public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if(actionStr == null || LIST_CONTENT.equals(actionStr) || LIST_LINKS.equals(actionStr)) {\n                    return super.canAppearNext(ctx);\n                }\n                return false;\n            }\n        };\n\n        action = new ArgumentWithValue(this, new SimpleTabCompleter(\n                new String[]{ADD, LINK, LIST_CONTENT, LIST_LINKS, REDEPLOY_AFFECTED, REMOVE, UPLOAD}), 0, \"--action\");\n\n        name = new ArgumentWithValue(this, new DefaultCompleter(new CandidatesProvider(){\n            @Override\n            public Collection<String> getAllCandidates(CommandContext ctx) {\n                final ModelControllerClient client = ctx.getModelControllerClient();\n                if(client == null) {\n                    return Collections.emptyList();\n                }\n                final ModelNode op = new ModelNode();\n                op.get(Util.OPERATION).set(Util.READ_CHILDREN_NAMES);\n                op.get(Util.ADDRESS).setEmptyList();\n                op.get(Util.CHILD_TYPE).set(Util.DEPLOYMENT_OVERLAY);\n                final ModelNode response;\n                try {\n                    response = client.execute(op);\n                } catch (IOException e) {\n                    return Collections.emptyList();\n                }\n                final ModelNode result = response.get(Util.RESULT);\n                if(!result.isDefined()) {\n                    return Collections.emptyList();\n                }\n                final List<String> names = new ArrayList<String>();\n                for(ModelNode node : result.asList()) {\n                    names.add(node.asString());\n                }\n                return names;\n            }}), \"--name\");\n        name.addRequiredPreceding(action);\n\n        final FilenameTabCompleter pathCompleter = Util.isWindows() ? new WindowsFilenameTabCompleter(ctx) : new DefaultFilenameTabCompleter(ctx);\n        content = new ArgumentWithValue(this, new CommandLineCompleter(){\n            @Override\n            public int complete(CommandContext ctx, String buffer, int cursor, List<String> candidates) {\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if (ADD.equals(actionStr) || UPLOAD.equals(actionStr)) {\n                    // TODO add support for quoted paths\n                    int i = buffer.lastIndexOf(',');\n                    i = buffer.indexOf('=', i + 1);\n                    if (i < 0) {\n                        return -1;\n                    }\n                    final String path = buffer.substring(i + 1);\n                    int pathResult = pathCompleter.complete(ctx, path, 0, candidates);\n                    if (pathResult < 0) {\n                        return -1;\n                    }\n                    return i + 1 + pathResult;\n                } else if(REMOVE.equals(actionStr)) {\n                    final String nameStr = name.getValue(ctx.getParsedCommandLine());\n                    if(nameStr == null) {\n                        return -1;\n                    }\n                    final List<String> existing;\n                    try {\n                        existing = loadContentFor(ctx.getModelControllerClient(), nameStr);\n                    } catch (CommandLineException e) {\n                        return -1;\n                    }\n                    if(existing.isEmpty()) {\n                        return buffer.length();\n                    }\n                    candidates.addAll(existing);\n                    if(buffer.isEmpty()) {\n                        return 0;\n                    }\n                    final String[] specified = buffer.split(\",+\");\n                    candidates.removeAll(Arrays.asList(specified));\n                    if(buffer.charAt(buffer.length() - 1) == ',') {\n                        return buffer.length();\n                    }\n                    final String chunk = specified[specified.length - 1];\n                    for(int i = 0; i < candidates.size(); ++i) {\n                        if(!candidates.get(i).startsWith(chunk)) {\n                            candidates.remove(i);\n                        }\n                    }\n                    return buffer.length() - chunk.length();\n                } else {\n                    return -1;\n                }\n            }}, \"--content\") {\n            @Override\n            public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if(actionStr == null) {\n                    return false;\n                }\n                if(ADD.equals(actionStr) || UPLOAD.equals(actionStr) || REMOVE.equals(actionStr)) {\n                    return super.canAppearNext(ctx);\n                }\n                return false;\n            }\n        };\n        content.addRequiredPreceding(name);\n        content.addCantAppearAfter(l);\n\n        serverGroups = new ArgumentWithValue(this, new CommaSeparatedCompleter() {\n            @Override\n            protected Collection<String> getAllCandidates(CommandContext ctx) {\n                return Util.getServerGroups(ctx.getModelControllerClient());\n            }} , \"--server-groups\") {\n            @Override\n            public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {\n                if(!ctx.isDomainMode()) {\n                    return false;\n                }\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if(actionStr == null) {\n                    return false;\n                }\n                if(ADD.equals(actionStr) || LINK.equals(actionStr)\n                        || REMOVE.equals(actionStr) || LIST_LINKS.equals(actionStr)) {\n                    return super.canAppearNext(ctx);\n                }\n                return false;\n            }\n        };\n        serverGroups.addRequiredPreceding(name);\n\n        allRelevantServerGroups = new ArgumentWithoutValue(this, \"--all-relevant-server-groups\") {\n            @Override\n            public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {\n                if(!ctx.isDomainMode()) {\n                    return false;\n                }\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if(actionStr == null) {\n                    return false;\n                }\n                if(REMOVE.equals(actionStr)) {\n                    return super.canAppearNext(ctx);\n                }\n                return false;\n            }\n        };\n        allRelevantServerGroups.addRequiredPreceding(name);\n        allRelevantServerGroups.addCantAppearAfter(serverGroups);\n        serverGroups.addCantAppearAfter(allRelevantServerGroups);\n\n        deployments = new ArgumentWithValue(this, new CommandLineCompleter(){\n            @Override\n            public int complete(CommandContext ctx, String buffer, int cursor, List<String> candidates) {\n                final ModelControllerClient client = ctx.getModelControllerClient();\n                if(client == null) {\n                    return -1;\n                }\n//                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                final List<String> existing;\n//                if(ADD.equals(actionStr) || LINK.equals(actionStr)) {\n                    existing = Util.getDeployments(client);\n/*                } else if(REMOVE.equals(actionStr)) {\n                    try {\n                        final String nameStr = name.getValue(ctx.getParsedCommandLine());\n                        if(nameStr == null) {\n                            return -1;\n                        }\n                        final String sg = serverGroups.getValue(ctx.getParsedCommandLine());\n                        if(ctx.isDomainMode() && sg == null) {\n                            return -1;\n                        }\n                        existing = loadLinkedDeployments(client, nameStr, sg);\n                    } catch (CommandLineException e) {\n                        return -1;\n                    }\n                } else {\n                    return -1;\n                }\n*/\n                if(existing.isEmpty()) {\n                    return buffer.length();\n                }\n                candidates.addAll(existing);\n                if(buffer.isEmpty()) {\n                    return 0;\n                }\n                final String[] specified = buffer.split(\",+\");\n                candidates.removeAll(Arrays.asList(specified));\n                if(buffer.charAt(buffer.length() - 1) == ',') {\n                    return buffer.length();\n                }\n                final String chunk = specified[specified.length - 1];\n                for(int i = 0; i < candidates.size(); ++i) {\n                    if(!candidates.get(i).startsWith(chunk)) {\n                        candidates.remove(i);\n                    }\n                }\n                return buffer.length() - chunk.length();\n            }\n        }, \"--deployments\") {\n            @Override\n            public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {\n                if(ctx.isDomainMode()) {\n                    if(serverGroups.isPresent(ctx.getParsedCommandLine())) {\n                        return super.canAppearNext(ctx);\n                    }\n                    return false;\n                }\n                final String actionStr = action.getValue(ctx.getParsedCommandLine());\n                if(actionStr == null) {\n                    return false;\n                }\n                if(ADD.equals(actionStr) || LINK.equals(actionStr) || REMOVE.equals(actionStr)) {\n                    return super.canAppearNext(ctx);\n                }\n                return false;\n            }\n        };\n        deployments.addRequiredPreceding(name);\n        deployments.addCantAppearAfter(l);\n    }","commit_id":"f9b955c7c399cc70ec45c824c42e97a182e5af6a","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void add(CommandContext ctx) throws CommandLineException {\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        final String contentStr = content.getValue(args, true);\n\n        final String[] contentPairs = contentStr.split(\",+\");\n        if(contentPairs.length == 0) {\n            throw new CommandFormatException(\"Overlay content is not specified.\");\n        }\n        final String[] contentNames = new String[contentPairs.length];\n        final File[] contentPaths = new File[contentPairs.length];\n        for(int i = 0; i < contentPairs.length; ++i) {\n            final String pair = contentPairs[i];\n            final int equalsIndex = pair.indexOf('=');\n            if(equalsIndex < 0) {\n                throw new CommandFormatException(\"Content pair is not following archive-path=fs-path format: '\" + pair + \"'\");\n            }\n            contentNames[i] = pair.substring(0, equalsIndex);\n            if(contentNames[i].length() == 0) {\n                throw new CommandFormatException(\"The archive path is missing for the content '\" + pair + \"'\");\n            }\n            final String path = pair.substring(equalsIndex + 1);\n            if(path.length() == 0) {\n                throw new CommandFormatException(\"The filesystem paths is missing for the content '\" + pair + \"'\");\n            }\n            final File f = new File(path);\n            if(!f.exists()) {\n                throw new CommandFormatException(\"Content file doesn't exist \" + f.getAbsolutePath());\n            }\n            contentPaths[i] = f;\n        }\n\n        final String sg = serverGroup.getValue(args);\n        if(ctx.isDomainMode() && sg == null) {\n            throw new CommandFormatException(serverGroup.getFullName() + \" is missing\");\n        }\n        final String deploymentsStr = deployment.getValue(args);\n        final String[] deployments;\n        if(deploymentsStr == null) {\n            deployments = null;\n        } else {\n            deployments = deploymentsStr.split(\",+\");\n        }\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n\n\n        // create the overlay and link it to the deployments\n        {\n            final ModelNode composite = new ModelNode();\n            final OperationBuilder opBuilder = new OperationBuilder(composite, true);\n            composite.get(Util.OPERATION).set(Util.COMPOSITE);\n            composite.get(Util.ADDRESS).setEmptyList();\n            final ModelNode steps = composite.get(Util.STEPS);\n\n            // add the overlay\n            ModelNode op = new ModelNode();\n            ModelNode address = op.get(Util.ADDRESS);\n            address.add(Util.DEPLOYMENT_OVERLAY, name);\n            op.get(Util.OPERATION).set(Util.ADD);\n            steps.add(op);\n\n            // add the content\n            for (int i = 0; i < contentNames.length; ++i) {\n                final String contentName = contentNames[i];\n                op = new ModelNode();\n                address = op.get(Util.ADDRESS);\n                address.add(Util.DEPLOYMENT_OVERLAY, name);\n                address.add(Util.CONTENT, contentName);\n                op.get(Util.OPERATION).set(Util.ADD);\n                op.get(Util.CONTENT).get(Util.INPUT_STREAM_INDEX).set(i);\n                opBuilder.addFileAsAttachment(contentPaths[i]);\n                steps.add(op);\n            }\n\n            if(deployments != null && deployments.length > 0) {\n                if(sg != null) {\n                    // here we don't need a separate check whether the overlay is linked\n                    // from the server group since it is created in the same op.\n                    op = new ModelNode();\n                    address = op.get(Util.ADDRESS);\n                    address.add(Util.SERVER_GROUP, sg);\n                    address.add(Util.DEPLOYMENT_OVERLAY, name);\n                    op.get(Util.OPERATION).set(Util.ADD);\n                    steps.add(op);\n                }\n                // link the deployments\n                addLinkDeploymentSteps(name, sg, deployments, steps);\n            }\n\n            try {\n                final ModelNode result = client.execute(opBuilder.build());\n                if (!Util.isSuccess(result)) {\n                    throw new CommandFormatException(Util.getFailureDescription(result));\n                }\n            } catch (IOException e) {\n                throw new CommandFormatException(\"Failed to add overlay\", e);\n            }\n        }\n    }","id":12061,"modified_method":"protected void add(CommandContext ctx) throws CommandLineException {\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n        final String name = this.name.getValue(args, true);\n        final String contentStr = content.getValue(args, true);\n\n        final String[] contentPairs = contentStr.split(\",+\");\n        if(contentPairs.length == 0) {\n            throw new CommandFormatException(\"Overlay content is not specified.\");\n        }\n        final String[] contentNames = new String[contentPairs.length];\n        final File[] contentPaths = new File[contentPairs.length];\n        for(int i = 0; i < contentPairs.length; ++i) {\n            final String pair = contentPairs[i];\n            final int equalsIndex = pair.indexOf('=');\n            if(equalsIndex < 0) {\n                throw new CommandFormatException(\"Content pair is not following archive-path=fs-path format: '\" + pair + \"'\");\n            }\n            contentNames[i] = pair.substring(0, equalsIndex);\n            if(contentNames[i].length() == 0) {\n                throw new CommandFormatException(\"The archive path is missing for the content '\" + pair + \"'\");\n            }\n            final String path = pair.substring(equalsIndex + 1);\n            if(path.length() == 0) {\n                throw new CommandFormatException(\"The filesystem paths is missing for the content '\" + pair + \"'\");\n            }\n            final File f = new File(path);\n            if(!f.exists()) {\n                throw new CommandFormatException(\"Content file doesn't exist \" + f.getAbsolutePath());\n            }\n            contentPaths[i] = f;\n        }\n\n        final String sgStr = serverGroups.getValue(args);\n        final String[] sg;\n        if(ctx.isDomainMode()) {\n            if(sgStr == null) {\n                throw new CommandFormatException(serverGroups.getFullName() + \" is missing.\");\n            }\n            sg = sgStr.split(\",+\");\n            if(sg.length == 0) {\n                throw new CommandFormatException(serverGroups.getFullName() + \" is missing value.\");\n            }\n        } else {\n            sg = null;\n        }\n\n        final String deploymentsStr = deployments.getValue(args);\n        final String[] deployments;\n        if(deploymentsStr == null) {\n            deployments = null;\n        } else {\n            deployments = deploymentsStr.split(\",+\");\n        }\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n\n\n        // create the overlay and link it to the deployments\n        {\n            final ModelNode composite = new ModelNode();\n            final OperationBuilder opBuilder = new OperationBuilder(composite, true);\n            composite.get(Util.OPERATION).set(Util.COMPOSITE);\n            composite.get(Util.ADDRESS).setEmptyList();\n            final ModelNode steps = composite.get(Util.STEPS);\n\n            // add the overlay\n            ModelNode op = new ModelNode();\n            ModelNode address = op.get(Util.ADDRESS);\n            address.add(Util.DEPLOYMENT_OVERLAY, name);\n            op.get(Util.OPERATION).set(Util.ADD);\n            steps.add(op);\n\n            // add the content\n            for (int i = 0; i < contentNames.length; ++i) {\n                final String contentName = contentNames[i];\n                op = new ModelNode();\n                address = op.get(Util.ADDRESS);\n                address.add(Util.DEPLOYMENT_OVERLAY, name);\n                address.add(Util.CONTENT, contentName);\n                op.get(Util.OPERATION).set(Util.ADD);\n                op.get(Util.CONTENT).get(Util.INPUT_STREAM_INDEX).set(i);\n                opBuilder.addFileAsAttachment(contentPaths[i]);\n                steps.add(op);\n            }\n\n            if(deployments != null && deployments.length > 0) {\n                if(sg != null) {\n                    // here we don't need a separate check whether the overlay is linked\n                    // from the server group since it is created in the same op.\n                    for(String group : sg) {\n                        op = new ModelNode();\n                        address = op.get(Util.ADDRESS);\n                        address.add(Util.SERVER_GROUP, group);\n                        address.add(Util.DEPLOYMENT_OVERLAY, name);\n                        op.get(Util.OPERATION).set(Util.ADD);\n                        steps.add(op);\n                        addLinkDeploymentSteps(name, group, deployments, steps);\n                    }\n                } else {\n                    addLinkDeploymentSteps(name, null, deployments, steps);\n                }\n            }\n\n            try {\n                final ModelNode result = client.execute(opBuilder.build());\n                if (!Util.isSuccess(result)) {\n                    throw new CommandFormatException(Util.getFailureDescription(result));\n                }\n            } catch (IOException e) {\n                throw new CommandFormatException(\"Failed to add overlay\", e);\n            }\n        }\n    }","commit_id":"f9b955c7c399cc70ec45c824c42e97a182e5af6a","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws CommandFormatException {\n\n        final ModelNode composite = new ModelNode();\n        composite.get(Util.OPERATION).set(Util.COMPOSITE);\n        composite.get(Util.ADDRESS).setEmptyList();\n        final ModelNode steps = composite.get(Util.STEPS);\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n\n        final String name = this.name.getValue(args);\n        final boolean keepContent = this.keepContent.isPresent(args);\n        final boolean allRelevantServerGroups = this.allRelevantServerGroups.isPresent(args);\n        final String serverGroupsStr = this.serverGroups.getValue(args);\n\n        final String path = this.path.getValue(args);\n        final File f;\n        if(path != null) {\n            f = new File(path);\n            if(!f.exists()) {\n                throw new OperationFormatException(\"Path '\" + f.getAbsolutePath() + \"' doesn't exist.\");\n            }\n            if(!isCliArchive(f)) {\n                throw new OperationFormatException(\"File '\" + f.getAbsolutePath() + \"' is not a valid CLI archive. CLI archives should have a '.cli' extension.\");\n            }\n        } else {\n            f = null;\n        }\n        if (isCliArchive(f)) {\n            if (name != null) {\n                throw new OperationFormatException(this.name.getFullName() + \" can't be used in combination with a CLI archive.\");\n            }\n\n            if(serverGroupsStr != null || allRelevantServerGroups) {\n                throw new OperationFormatException(this.serverGroups.getFullName() + \" and \" + this.allRelevantServerGroups.getFullName() +\n                        \" can't be used in combination with a CLI archive.\");\n            }\n\n            if (keepContent) {\n                throw new OperationFormatException(this.keepContent.getFullName() + \" can't be used in combination with a CLI archive.\");\n            }\n\n            MountHandle root;\n            try {\n                root = extractArchive(f);\n            } catch (IOException e) {\n                throw new OperationFormatException(\"Unable to extract archive '\" + f.getAbsolutePath() + \"' to temporary location\");\n            }\n\n            final File currentDir = ctx.getCurrentDir();\n            ctx.setCurrentDir(root.getMountSource());\n            String holdbackBatch = activateNewBatch(ctx);\n\n            try {\n                String script = this.script.getValue(args);\n                if (script == null) {\n                    script = \"undeploy.scr\";\n                }\n\n                File scriptFile = new File(ctx.getCurrentDir(),script);\n                if (!scriptFile.exists()) {\n                    throw new CommandFormatException(\"ERROR: script '\" + script + \"' not found in archive '\" + f.getAbsolutePath() + \"'.\");\n                }\n\n                try {\n                    BufferedReader reader = new BufferedReader(new FileReader(scriptFile));\n                    String line = reader.readLine();\n                    while (!ctx.isTerminated() && line != null) {\n                        ctx.handle(line);\n                        line = reader.readLine();\n                    }\n                } catch (FileNotFoundException e) {\n                    throw new CommandFormatException(\"ERROR: script '\" + script + \"' not found in archive '\" + f.getAbsolutePath() + \"'.\");\n                } catch (IOException e) {\n                    throw new CommandFormatException(\"Failed to read the next command from \" + scriptFile.getName() + \": \" + e.getMessage(), e);\n                } catch (CommandLineException e) {\n                    throw new CommandFormatException(e.getMessage(), e);\n                }\n\n                return ctx.getBatchManager().getActiveBatch().toRequest();\n            } finally {\n                // reset current dir in context\n                ctx.setCurrentDir(currentDir);\n                discardBatch(ctx, holdbackBatch);\n                try {\n                    root.close();\n                } catch (IOException ignore) {}\n            }\n        }\n\n        if(name == null) {\n            throw new OperationFormatException(\"Deployment name is missing.\");\n        }\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n        DefaultOperationRequestBuilder builder;\n\n        final List<String> deploymentNames;\n        if(name.indexOf('*') < 0) {\n            deploymentNames = Collections.singletonList(name);\n        } else {\n            deploymentNames = Util.getDeployments(client, name);\n            if(deploymentNames.isEmpty()) {\n                throw new CommandFormatException(\"No deployment matched wildcard expression \" + name);\n            }\n        }\n\n        for(String deploymentName : deploymentNames) {\n\n            final List<String> serverGroups;\n            if(ctx.isDomainMode()) {\n                if(allRelevantServerGroups) {\n                    if(keepContent) {\n                        serverGroups = Util.getAllEnabledServerGroups(deploymentName, client);\n                    } else {\n                        serverGroups = Util.getAllReferencingServerGroups(deploymentName, client);\n                    }\n                } else {\n                    if(serverGroupsStr == null) {\n                        //throw new OperationFormatException(\"Either --all-relevant-server-groups or --server-groups must be specified.\");\n                        serverGroups = Collections.emptyList();\n                    } else {\n                        serverGroups = Arrays.asList(serverGroupsStr.split(\",\"));\n                    }\n                }\n\n                if(serverGroups.isEmpty()) {\n                    if(keepContent) {\n                        throw new OperationFormatException(\"None of the server groups is specified or references specified deployment.\");\n                    }\n                } else {\n                    for (String group : serverGroups){\n                        ModelNode groupStep = Util.configureDeploymentOperation(Util.UNDEPLOY, deploymentName, group);\n                        steps.add(groupStep);\n//                      if(!keepContent) {\n                            groupStep = Util.configureDeploymentOperation(Util.REMOVE, deploymentName, group);\n                            steps.add(groupStep);\n//                      }\n                    }\n                }\n            } else {\n                if(Util.isDeployedAndEnabledInStandalone(deploymentName, client)) {\n                    builder = new DefaultOperationRequestBuilder();\n                    builder.setOperationName(Util.UNDEPLOY);\n                    builder.addNode(Util.DEPLOYMENT, deploymentName);\n                    steps.add(builder.buildRequest());\n                }\n            }\n        }\n\n        if (!keepContent) {\n            for(String deploymentName : deploymentNames) {\n                builder = new DefaultOperationRequestBuilder();\n                builder.setOperationName(Util.REMOVE);\n                builder.addNode(Util.DEPLOYMENT, deploymentName);\n                steps.add(builder.buildRequest());\n            }\n        }\n        return composite;\n    }","id":12062,"modified_method":"@Override\n    public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws CommandFormatException {\n\n        final ModelNode composite = new ModelNode();\n        composite.get(Util.OPERATION).set(Util.COMPOSITE);\n        composite.get(Util.ADDRESS).setEmptyList();\n        final ModelNode steps = composite.get(Util.STEPS);\n\n        final ParsedCommandLine args = ctx.getParsedCommandLine();\n\n        final String name = this.name.getValue(args);\n        final boolean keepContent = this.keepContent.isPresent(args);\n        final boolean allRelevantServerGroups = this.allRelevantServerGroups.isPresent(args);\n        final String serverGroupsStr = this.serverGroups.getValue(args);\n\n        final String path = this.path.getValue(args);\n        final File f;\n        if(path != null) {\n            f = new File(path);\n            if(!f.exists()) {\n                throw new OperationFormatException(\"Path '\" + f.getAbsolutePath() + \"' doesn't exist.\");\n            }\n            if(!isCliArchive(f)) {\n                throw new OperationFormatException(\"File '\" + f.getAbsolutePath() + \"' is not a valid CLI archive. CLI archives should have a '.cli' extension.\");\n            }\n        } else {\n            f = null;\n        }\n        if (isCliArchive(f)) {\n            if (name != null) {\n                throw new OperationFormatException(this.name.getFullName() + \" can't be used in combination with a CLI archive.\");\n            }\n\n            if(serverGroupsStr != null || allRelevantServerGroups) {\n                throw new OperationFormatException(this.serverGroups.getFullName() + \" and \" + this.allRelevantServerGroups.getFullName() +\n                        \" can't be used in combination with a CLI archive.\");\n            }\n\n            if (keepContent) {\n                throw new OperationFormatException(this.keepContent.getFullName() + \" can't be used in combination with a CLI archive.\");\n            }\n\n            MountHandle root;\n            try {\n                root = extractArchive(f);\n            } catch (IOException e) {\n                throw new OperationFormatException(\"Unable to extract archive '\" + f.getAbsolutePath() + \"' to temporary location\");\n            }\n\n            final File currentDir = ctx.getCurrentDir();\n            ctx.setCurrentDir(root.getMountSource());\n            String holdbackBatch = activateNewBatch(ctx);\n\n            try {\n                String script = this.script.getValue(args);\n                if (script == null) {\n                    script = \"undeploy.scr\";\n                }\n\n                File scriptFile = new File(ctx.getCurrentDir(),script);\n                if (!scriptFile.exists()) {\n                    throw new CommandFormatException(\"ERROR: script '\" + script + \"' not found in archive '\" + f.getAbsolutePath() + \"'.\");\n                }\n\n                BufferedReader reader = null;\n                try {\n                    reader = new BufferedReader(new FileReader(scriptFile));\n                    String line = reader.readLine();\n                    while (!ctx.isTerminated() && line != null) {\n                        ctx.handle(line);\n                        line = reader.readLine();\n                    }\n                } catch (FileNotFoundException e) {\n                    throw new CommandFormatException(\"ERROR: script '\" + script + \"' not found in archive '\" + f.getAbsolutePath() + \"'.\");\n                } catch (IOException e) {\n                    throw new CommandFormatException(\"Failed to read the next command from \" + scriptFile.getName() + \": \" + e.getMessage(), e);\n                } catch (CommandLineException e) {\n                    throw new CommandFormatException(e.getMessage(), e);\n                } finally {\n                    if(reader != null) {\n                        try {\n                            reader.close();\n                        } catch (IOException e) {\n                        }\n                    }\n                }\n\n                return ctx.getBatchManager().getActiveBatch().toRequest();\n            } finally {\n                // reset current dir in context\n                ctx.setCurrentDir(currentDir);\n                discardBatch(ctx, holdbackBatch);\n                try {\n                    root.close();\n                } catch (IOException ignore) {}\n            }\n        }\n\n        if(name == null) {\n            throw new OperationFormatException(\"Deployment name is missing.\");\n        }\n\n        final ModelControllerClient client = ctx.getModelControllerClient();\n        DefaultOperationRequestBuilder builder;\n\n        final List<String> deploymentNames;\n        if(name.indexOf('*') < 0) {\n            deploymentNames = Collections.singletonList(name);\n        } else {\n            deploymentNames = Util.getDeployments(client, name);\n            if(deploymentNames.isEmpty()) {\n                throw new CommandFormatException(\"No deployment matched wildcard expression \" + name);\n            }\n        }\n\n        for(String deploymentName : deploymentNames) {\n\n            final List<String> serverGroups;\n            if(ctx.isDomainMode()) {\n                if(allRelevantServerGroups) {\n                    if(keepContent) {\n                        serverGroups = Util.getAllEnabledServerGroups(deploymentName, client);\n                    } else {\n                        serverGroups = Util.getAllReferencingServerGroups(deploymentName, client);\n                    }\n                } else {\n                    if(serverGroupsStr == null) {\n                        //throw new OperationFormatException(\"Either --all-relevant-server-groups or --server-groups must be specified.\");\n                        serverGroups = Collections.emptyList();\n                    } else {\n                        serverGroups = Arrays.asList(serverGroupsStr.split(\",\"));\n                    }\n                }\n\n                if(serverGroups.isEmpty()) {\n                    if(keepContent) {\n                        throw new OperationFormatException(\"None of the server groups is specified or references specified deployment.\");\n                    }\n                } else {\n                    for (String group : serverGroups){\n                        ModelNode groupStep = Util.configureDeploymentOperation(Util.UNDEPLOY, deploymentName, group);\n                        steps.add(groupStep);\n//                      if(!keepContent) {\n                            groupStep = Util.configureDeploymentOperation(Util.REMOVE, deploymentName, group);\n                            steps.add(groupStep);\n//                      }\n                    }\n                }\n            } else {\n                if(Util.isDeployedAndEnabledInStandalone(deploymentName, client)) {\n                    builder = new DefaultOperationRequestBuilder();\n                    builder.setOperationName(Util.UNDEPLOY);\n                    builder.addNode(Util.DEPLOYMENT, deploymentName);\n                    steps.add(builder.buildRequest());\n                }\n            }\n        }\n\n        if (!keepContent) {\n            for(String deploymentName : deploymentNames) {\n                builder = new DefaultOperationRequestBuilder();\n                builder.setOperationName(Util.REMOVE);\n                builder.addNode(Util.DEPLOYMENT, deploymentName);\n                steps.add(builder.buildRequest());\n            }\n        }\n        return composite;\n    }","commit_id":"f9b955c7c399cc70ec45c824c42e97a182e5af6a","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n   * This forces an immediate update of the config cache. It should only be called from the refresh thread or from\n   * tests, to avoid having to add a sleep for the duration of the refresh interval.\n   *\n   * This method is synchronized to protect from race conditions if called directly from a test. Otherwise this is\n   * only called from the refresh thread, and there will not be concurrent invocations.\n   */\n  public synchronized void updateCache() {\n    Map<byte[], QueueConsumerConfig> newCache = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n    long now = System.currentTimeMillis();\n    HTable table = null;\n    try {\n      table = new HTable(hConf, configTableName);\n      Scan scan = new Scan();\n      scan.addFamily(QueueEntryRow.COLUMN_FAMILY);\n      ResultScanner scanner = table.getScanner(scan);\n      int configCnt = 0;\n      for (Result result : scanner) {\n        if (!result.isEmpty()) {\n          NavigableMap<byte[], byte[]> familyMap = result.getFamilyMap(QueueEntryRow.COLUMN_FAMILY);\n          if (familyMap != null) {\n            configCnt++;\n            Map<ConsumerInstance, byte[]> consumerInstances = new HashMap<ConsumerInstance, byte[]>();\n            // Gather the startRow of all instances across all consumer groups.\n            int numGroups = 0;\n            Long groupId = null;\n            for (Map.Entry<byte[], byte[]> entry : familyMap.entrySet()) {\n              long gid = Bytes.toLong(entry.getKey());\n              int instanceId = Bytes.toInt(entry.getKey(), LONG_BYTES);\n              consumerInstances.put(new ConsumerInstance(gid, instanceId), entry.getValue());\n\n              // Columns are sorted by groupId, hence if it change, then numGroups would get +1\n              if (groupId == null || groupId != gid) {\n                numGroups++;\n                groupId = gid;\n              }\n            }\n            byte[] queueName = result.getRow();\n            newCache.put(queueName, new QueueConsumerConfig(consumerInstances, numGroups));\n          }\n        }\n      }\n      long elapsed = System.currentTimeMillis() - now;\n      this.configCache = newCache;\n      this.lastUpdated = now;\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updated consumer config cache with {} entries, took {} msec\", configCnt, elapsed);\n      }\n    } catch (IOException ioe) {\n      LOG.warn(\"Error updating queue consumer config cache: {}\", ioe.getMessage());\n    } finally {\n      if (table != null) {\n        try {\n          table.close();\n        } catch (IOException ioe) {\n          LOG.error(\"Error closing table {}\", Bytes.toString(configTableName), ioe);\n        }\n      }\n    }\n\n  }","id":12063,"modified_method":"/**\n   * This forces an immediate update of the config cache. It should only be called from the refresh thread or from\n   * tests, to avoid having to add a sleep for the duration of the refresh interval.\n   *\n   * This method is synchronized to protect from race conditions if called directly from a test. Otherwise this is\n   * only called from the refresh thread, and there will not be concurrent invocations.\n   *\n   * @throws IOException if failed to update config cache\n   */\n  @VisibleForTesting\n  public synchronized void updateCache() throws IOException {\n    Map<byte[], QueueConsumerConfig> newCache = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n    long now = System.currentTimeMillis();\n    HTable table = null;\n    try {\n      table = new HTable(hConf, configTableName);\n      Scan scan = new Scan();\n      scan.addFamily(QueueEntryRow.COLUMN_FAMILY);\n      ResultScanner scanner = table.getScanner(scan);\n      int configCnt = 0;\n      for (Result result : scanner) {\n        if (!result.isEmpty()) {\n          NavigableMap<byte[], byte[]> familyMap = result.getFamilyMap(QueueEntryRow.COLUMN_FAMILY);\n          if (familyMap != null) {\n            configCnt++;\n            Map<ConsumerInstance, byte[]> consumerInstances = new HashMap<ConsumerInstance, byte[]>();\n            // Gather the startRow of all instances across all consumer groups.\n            int numGroups = 0;\n            Long groupId = null;\n            for (Map.Entry<byte[], byte[]> entry : familyMap.entrySet()) {\n              long gid = Bytes.toLong(entry.getKey());\n              int instanceId = Bytes.toInt(entry.getKey(), LONG_BYTES);\n              consumerInstances.put(new ConsumerInstance(gid, instanceId), entry.getValue());\n\n              // Columns are sorted by groupId, hence if it change, then numGroups would get +1\n              if (groupId == null || groupId != gid) {\n                numGroups++;\n                groupId = gid;\n              }\n            }\n            byte[] queueName = result.getRow();\n            newCache.put(queueName, new QueueConsumerConfig(consumerInstances, numGroups));\n          }\n        }\n      }\n      long elapsed = System.currentTimeMillis() - now;\n      this.configCache = newCache;\n      this.lastUpdated = now;\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updated consumer config cache with {} entries, took {} msec\", configCnt, elapsed);\n      }\n    } finally {\n      if (table != null) {\n        try {\n          table.close();\n        } catch (IOException ioe) {\n          LOG.error(\"Error closing table {}\", Bytes.toString(configTableName), ioe);\n        }\n      }\n    }\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"private void startRefreshThread() {\n    this.refreshThread = new Thread(\"queue-cache-refresh\") {\n      @Override\n      public void run() {\n        while (!isInterrupted()) {\n          updateConfig();\n          long now = System.currentTimeMillis();\n          if (now > (lastUpdated + configCacheUpdateFrequency)) {\n            updateCache();\n          }\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException ie) {\n            // reset status\n            interrupt();\n            break;\n          }\n        }\n      }\n    };\n    this.refreshThread.setDaemon(true);\n    this.refreshThread.start();\n  }","id":12064,"modified_method":"private void startRefreshThread() {\n    refreshThread = new Thread(\"queue-cache-refresh\") {\n      @Override\n      public void run() {\n        int tableNotFoundCount = 0;\n        while (!isInterrupted() && tableNotFoundCount < TABLE_NOT_FOUND_MAX_RETRY) {\n          updateConfig();\n          long now = System.currentTimeMillis();\n          if (now > (lastUpdated + configCacheUpdateFrequency)) {\n            try {\n              updateCache();\n              tableNotFoundCount = 0;\n            } catch (TableNotFoundException e) {\n              tableNotFoundCount++;\n              LOG.error(\"Queue config table not found: {}. Retries remaining {}\",\n                        Bytes.toString(configTableName), TABLE_NOT_FOUND_MAX_RETRY - tableNotFoundCount, e);\n            } catch (IOException e) {\n              LOG.warn(\"Error updating queue consumer config cache: {}\", e.getMessage());\n            }\n          }\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException ie) {\n            // reset status\n            interrupt();\n            break;\n          }\n        }\n        LOG.info(\"Config cache update for {} terminated.\", Bytes.toString(configTableName));\n        instances.remove(configTableName, this);\n      }\n    };\n    refreshThread.setDaemon(true);\n    refreshThread.start();\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String tableName = tableDesc.getNameAsString();\n      String configTableName = QueueUtils.determineQueueConfigTableName(tableName);\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? HBaseQueueAdmin.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + HBaseQueueAdmin.SALT_BYTES, e);\n        this.prefixBytes = HBaseQueueAdmin.SALT_BYTES;\n      }\n\n      namespaceId = HBaseQueueAdmin.getNamespaceId(tableName);\n      appName = HBaseQueueAdmin.getApplicationName(tableName);\n      flowName = HBaseQueueAdmin.getFlowName(tableName);\n\n      configCache = ConsumerConfigCache.getInstance(env.getConfiguration(),\n                                                    Bytes.toBytes(configTableName));\n    }\n  }","id":12065,"modified_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String tableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? HBaseQueueAdmin.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + HBaseQueueAdmin.SALT_BYTES, e);\n        this.prefixBytes = HBaseQueueAdmin.SALT_BYTES;\n      }\n\n      namespaceId = HBaseQueueAdmin.getNamespaceId(tableName);\n      appName = HBaseQueueAdmin.getApplicationName(tableName);\n      flowName = HBaseQueueAdmin.getFlowName(tableName);\n\n      conf = env.getConfiguration();\n      configTableName = Bytes.toBytes(QueueUtils.determineQueueConfigTableName(tableName));\n      configCache = ConsumerConfigCache.getInstance(conf, configTableName);\n    }\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = configCache.getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","id":12066,"modified_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache().getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"private ConsumerConfigCache getConfigCache() {\n    return configCache;\n  }","id":12067,"modified_method":"private ConsumerConfigCache getConfigCache() {\n    if (!configCache.isAlive()) {\n      configCache = ConsumerConfigCache.getInstance(conf, configTableName);\n    }\n    return configCache;\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"private ConsumerConfigCache getConfigCache() {\n    return configCache;\n  }","id":12068,"modified_method":"private ConsumerConfigCache getConfigCache() {\n    if (!configCache.isAlive()) {\n      configCache = ConsumerConfigCache.getInstance(conf, configTableName);\n    }\n    return configCache;\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String tableName = tableDesc.getNameAsString();\n      String configTableName = QueueUtils.determineQueueConfigTableName(tableName);\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? HBaseQueueAdmin.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + HBaseQueueAdmin.SALT_BYTES, e);\n        this.prefixBytes = HBaseQueueAdmin.SALT_BYTES;\n      }\n\n      namespaceId = HBaseQueueAdmin.getNamespaceId(tableName);\n      appName = HBaseQueueAdmin.getApplicationName(tableName);\n      flowName = HBaseQueueAdmin.getFlowName(tableName);\n\n      configCache = ConsumerConfigCache.getInstance(env.getConfiguration(),\n                                                    Bytes.toBytes(configTableName));\n    }\n  }","id":12069,"modified_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String tableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? HBaseQueueAdmin.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + HBaseQueueAdmin.SALT_BYTES, e);\n        this.prefixBytes = HBaseQueueAdmin.SALT_BYTES;\n      }\n\n      namespaceId = HBaseQueueAdmin.getNamespaceId(tableName);\n      appName = HBaseQueueAdmin.getApplicationName(tableName);\n      flowName = HBaseQueueAdmin.getFlowName(tableName);\n\n      conf = env.getConfiguration();\n      configTableName = Bytes.toBytes(QueueUtils.determineQueueConfigTableName(tableName));\n      configCache = ConsumerConfigCache.getInstance(conf, configTableName);\n    }\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = configCache.getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","id":12070,"modified_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache().getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public boolean next(List<KeyValue> result, int limit, String metric) throws IOException {\n      boolean hasNext = scanner.next(result, limit, metric);\n\n      while (!result.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        KeyValue kv = result.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, kv.getBuffer(),\n                                                                kv.getRowOffset(), kv.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId,\n                                                           appName, flowName, prefixBytes,\n                                                           kv.getBuffer(), kv.getRowOffset(), kv.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = configCache.getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, result)) {\n          rowsEvicted++;\n          result.clear();\n          hasNext = scanner.next(result, limit, metric);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","id":12071,"modified_method":"@Override\n    public boolean next(List<KeyValue> result, int limit, String metric) throws IOException {\n      boolean hasNext = scanner.next(result, limit, metric);\n\n      while (!result.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        KeyValue kv = result.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, kv.getBuffer(),\n                                                                kv.getRowOffset(), kv.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId,\n                                                           appName, flowName, prefixBytes,\n                                                           kv.getBuffer(), kv.getRowOffset(), kv.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache().getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, result)) {\n          rowsEvicted++;\n          result.clear();\n          hasNext = scanner.next(result, limit, metric);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String tableName = tableDesc.getNameAsString();\n      String configTableName = QueueUtils.determineQueueConfigTableName(tableName);\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? HBaseQueueAdmin.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + HBaseQueueAdmin.SALT_BYTES, e);\n        this.prefixBytes = HBaseQueueAdmin.SALT_BYTES;\n      }\n\n      namespaceId = HBaseQueueAdmin.getNamespaceId(tableName);\n      appName = HBaseQueueAdmin.getApplicationName(tableName);\n      flowName = HBaseQueueAdmin.getFlowName(tableName);\n\n      configCache = ConsumerConfigCache.getInstance(env.getConfiguration(),\n                                                    Bytes.toBytes(configTableName));\n    }\n  }","id":12072,"modified_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String tableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? HBaseQueueAdmin.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + HBaseQueueAdmin.SALT_BYTES, e);\n        this.prefixBytes = HBaseQueueAdmin.SALT_BYTES;\n      }\n\n      namespaceId = HBaseQueueAdmin.getNamespaceId(tableName);\n      appName = HBaseQueueAdmin.getApplicationName(tableName);\n      flowName = HBaseQueueAdmin.getFlowName(tableName);\n\n      conf = env.getConfiguration();\n      configTableName = Bytes.toBytes(QueueUtils.determineQueueConfigTableName(tableName));\n      configCache = ConsumerConfigCache.getInstance(conf, configTableName);\n    }\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"private ConsumerConfigCache getConfigCache() {\n    return configCache;\n  }","id":12073,"modified_method":"private ConsumerConfigCache getConfigCache() {\n    if (!configCache.isAlive()) {\n      configCache = ConsumerConfigCache.getInstance(conf, configTableName);\n    }\n    return configCache;\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected void verifyConsumerConfigExists(QueueName... queueNames) throws InterruptedException, ExecutionException {\n    updateConfigCaches(queueNames);\n    for (QueueName queueName : queueNames) {\n      Optional<ConsumerConfigCache> cache = getConfigCache(queueName);\n      Assert.assertTrue(cache.isPresent());\n      Assert.assertNotNull(\"for \" + queueName, cache.get().getConsumerConfig(queueName.toBytes()));\n    }\n  }","id":12074,"modified_method":"@Override\n  protected void verifyConsumerConfigExists(QueueName... queueNames) throws Exception {\n    for (QueueName queueName : queueNames) {\n      byte[] configTableName = Bytes.toBytes(((HBaseQueueAdmin) queueAdmin).getConfigTableName(queueName));\n      ConsumerConfigCache cache = ConsumerConfigCache.getInstance(hConf, configTableName);\n      cache.updateCache();\n      Assert.assertNotNull(\"for \" + queueName, cache.getConsumerConfig(queueName.toBytes()));\n    }\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@BeforeClass\n  public static void init() throws Exception {\n    // Start hbase\n    testHBase = new HBaseTestFactory().get();\n    testHBase.startHBase();\n    hConf = testHBase.getConfiguration();\n\n    // Customize test configuration\n    cConf = CConfiguration.create();\n    cConf.set(Constants.Zookeeper.QUORUM, testHBase.getZkConnectionString());\n    cConf.set(TxConstants.Service.CFG_DATA_TX_BIND_PORT,\n              Integer.toString(Networks.getRandomPort()));\n    cConf.set(Constants.Dataset.TABLE_PREFIX, \"test\");\n    cConf.setBoolean(TxConstants.Manager.CFG_DO_PERSIST, false);\n    cConf.set(Constants.CFG_HDFS_USER, System.getProperty(\"user.name\"));\n    cConf.setLong(QueueConstants.QUEUE_CONFIG_UPDATE_FREQUENCY, 1L);\n\n    final DataFabricDistributedModule dfModule =\n      new DataFabricDistributedModule();\n    // turn off persistence in tx manager to get rid of ugly zookeeper warnings\n    final Module dataFabricModule = Modules.override(dfModule).with(\n      new AbstractModule() {\n        @Override\n        protected void configure() {\n          bind(TransactionStateStorage.class).to(NoOpTransactionStateStorage.class);\n        }\n      });\n\n    ConfigurationTable configTable = new ConfigurationTable(hConf);\n    configTable.write(ConfigurationTable.Type.DEFAULT, cConf);\n\n    final Injector injector = Guice.createInjector(\n      dataFabricModule,\n      new ConfigModule(cConf, hConf),\n      new ZKClientModule(),\n      new DiscoveryRuntimeModule().getDistributedModules(),\n      new TransactionMetricsModule(),\n      new AbstractModule() {\n        @Override\n        protected void configure() {\n          try {\n            bind(LocationFactory.class).toInstance(new LocalLocationFactory(tmpFolder.newFolder()));\n            bind(NotificationFeedManager.class).to(NoOpNotificationFeedManager.class).in(Scopes.SINGLETON);\n          } catch (IOException e) {\n            throw Throwables.propagate(e);\n          }\n        }\n      },\n      Modules.override(new StreamAdminModules().getDistributedModules())\n      .with(new AbstractModule() {\n        @Override\n        protected void configure() {\n          // The tests are actually testing stream on queue implementation, hence bind it to the queue implementation\n          bind(StreamAdmin.class).to(HBaseStreamAdmin.class);\n          bind(StreamMetaStore.class).to(InMemoryStreamMetaStore.class);\n        }\n      })\n    );\n\n    zkClientService = injector.getInstance(ZKClientService.class);\n    zkClientService.startAndWait();\n\n    txService = injector.getInstance(TransactionService.class);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        txService.start();\n      }\n    };\n    t.start();\n\n    txSystemClient = injector.getInstance(TransactionSystemClient.class);\n    queueClientFactory = injector.getInstance(QueueClientFactory.class);\n    queueAdmin = injector.getInstance(QueueAdmin.class);\n    streamAdmin = injector.getInstance(StreamAdmin.class);\n    executorFactory = injector.getInstance(TransactionExecutorFactory.class);\n    consumerConfigCaches = CacheBuilder.newBuilder().build(\n      new CacheLoader<QueueName, Optional<ConsumerConfigCache>>() {\n        @Override\n        public Optional<ConsumerConfigCache> load(QueueName key) throws Exception {\n          String configTableName = ((HBaseQueueAdmin) queueAdmin).getConfigTableName(key);\n          byte[] tableName = Bytes.toBytes(configTableName);\n          if (testHBase.getHBaseAdmin().tableExists(tableName)) {\n            return Optional.of(ConsumerConfigCache.getInstance(hConf, tableName));\n          }\n          return Optional.absent();\n        }\n      }\n    );\n\n    tableUtil = new HBaseTableUtilFactory().get();\n  }","id":12075,"modified_method":"@BeforeClass\n  public static void init() throws Exception {\n    // Start hbase\n    testHBase = new HBaseTestFactory().get();\n    testHBase.startHBase();\n    hConf = testHBase.getConfiguration();\n\n    // Customize test configuration\n    cConf = CConfiguration.create();\n    cConf.set(Constants.Zookeeper.QUORUM, testHBase.getZkConnectionString());\n    cConf.set(TxConstants.Service.CFG_DATA_TX_BIND_PORT,\n              Integer.toString(Networks.getRandomPort()));\n    cConf.set(Constants.Dataset.TABLE_PREFIX, \"test\");\n    cConf.setBoolean(TxConstants.Manager.CFG_DO_PERSIST, false);\n    cConf.set(Constants.CFG_HDFS_USER, System.getProperty(\"user.name\"));\n    cConf.setLong(QueueConstants.QUEUE_CONFIG_UPDATE_FREQUENCY, 1L);\n\n    final DataFabricDistributedModule dfModule =\n      new DataFabricDistributedModule();\n    // turn off persistence in tx manager to get rid of ugly zookeeper warnings\n    final Module dataFabricModule = Modules.override(dfModule).with(\n      new AbstractModule() {\n        @Override\n        protected void configure() {\n          bind(TransactionStateStorage.class).to(NoOpTransactionStateStorage.class);\n        }\n      });\n\n    ConfigurationTable configTable = new ConfigurationTable(hConf);\n    configTable.write(ConfigurationTable.Type.DEFAULT, cConf);\n\n    final Injector injector = Guice.createInjector(\n      dataFabricModule,\n      new ConfigModule(cConf, hConf),\n      new ZKClientModule(),\n      new DiscoveryRuntimeModule().getDistributedModules(),\n      new TransactionMetricsModule(),\n      new AbstractModule() {\n        @Override\n        protected void configure() {\n          try {\n            bind(LocationFactory.class).toInstance(new LocalLocationFactory(tmpFolder.newFolder()));\n            bind(NotificationFeedManager.class).to(NoOpNotificationFeedManager.class).in(Scopes.SINGLETON);\n          } catch (IOException e) {\n            throw Throwables.propagate(e);\n          }\n        }\n      },\n      Modules.override(new StreamAdminModules().getDistributedModules())\n      .with(new AbstractModule() {\n        @Override\n        protected void configure() {\n          // The tests are actually testing stream on queue implementation, hence bind it to the queue implementation\n          bind(StreamAdmin.class).to(HBaseStreamAdmin.class);\n          bind(StreamMetaStore.class).to(InMemoryStreamMetaStore.class);\n        }\n      })\n    );\n\n    zkClientService = injector.getInstance(ZKClientService.class);\n    zkClientService.startAndWait();\n\n    txService = injector.getInstance(TransactionService.class);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        txService.start();\n      }\n    };\n    t.start();\n\n    txSystemClient = injector.getInstance(TransactionSystemClient.class);\n    queueClientFactory = injector.getInstance(QueueClientFactory.class);\n    queueAdmin = injector.getInstance(QueueAdmin.class);\n    streamAdmin = injector.getInstance(StreamAdmin.class);\n    executorFactory = injector.getInstance(TransactionExecutorFactory.class);\n    tableUtil = new HBaseTableUtilFactory().get();\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected void verifyConsumerConfigIsDeleted(QueueName... queueNames) throws InterruptedException,\n    ExecutionException {\n    updateConfigCaches(queueNames);\n    for (QueueName queueName : queueNames) {\n      Optional<ConsumerConfigCache> cache = getConfigCache(queueName);\n      // either the config table has to be missing, or the queue entries in the config table are not present\n      if (!cache.isPresent()) {\n        continue;\n      }\n      Assert.assertTrue(\"for \" + queueName, cache.get().getConsumerConfig(queueName.toBytes()) == null);\n    }\n  }","id":12076,"modified_method":"@Override\n  protected void verifyConsumerConfigIsDeleted(QueueName... queueNames) throws Exception {\n    for (QueueName queueName : queueNames) {\n      byte[] configTableName = Bytes.toBytes(((HBaseQueueAdmin) queueAdmin).getConfigTableName(queueName));\n      // Either the config table doesn't exists, or the consumer config is empty for the given queue\n      ConsumerConfigCache cache = ConsumerConfigCache.getInstance(hConf, configTableName);\n      try {\n        cache.updateCache();\n        Assert.assertNull(\"for \" + queueName, cache.getConsumerConfig(queueName.toBytes()));\n      } catch (TableNotFoundException e) {\n        // Expected.\n      }\n    }\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"protected void verifyConsumerConfigExists(QueueName ... queueNames) throws InterruptedException, ExecutionException {\n    // do nothing, HBase test will override this\n  }","id":12077,"modified_method":"protected void verifyConsumerConfigExists(QueueName ... queueNames) throws Exception {\n    // do nothing, HBase test will override this\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"protected void verifyConsumerConfigIsDeleted(QueueName ... queueNames)\n    throws InterruptedException, ExecutionException {\n    // do nothing, HBase test will override this\n  }","id":12078,"modified_method":"protected void verifyConsumerConfigIsDeleted(QueueName ... queueNames) throws Exception {\n    // do nothing, HBase test will override this\n  }","commit_id":"f5948d659ea9ff9e643e794f9334601748ccc454","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void deleteTempDirectory() {\n      Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n      _batchCompiler.setDeleteTempDirectory(true);\n      Xtend2BatchCompiler _batchCompiler_1 = this.batchCompiler;\n      String _TEMP_DIRECTORY = TestBatchCompiler.TEMP_DIRECTORY;\n      _batchCompiler_1.setTempDirectory(_TEMP_DIRECTORY);\n      Xtend2BatchCompiler _batchCompiler_2 = this.batchCompiler;\n      boolean _compile = _batchCompiler_2.compile();\n      Assert.assertTrue(_compile);\n      String _TEMP_DIRECTORY_1 = TestBatchCompiler.TEMP_DIRECTORY;\n      File _file = new File(_TEMP_DIRECTORY_1);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(0, _size);\n  }","id":12079,"modified_method":"@Test\n  public void deleteTempDirectory() {\n      this.batchCompiler.setDeleteTempDirectory(true);\n      this.batchCompiler.setTempDirectory(TestBatchCompiler.TEMP_DIRECTORY);\n      boolean _compile = this.batchCompiler.compile();\n      Assert.assertTrue(_compile);\n      File _file = new File(TestBatchCompiler.TEMP_DIRECTORY);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(0, _size);\n  }","commit_id":"3a83064d16c9c29bd58149949422165615a685c2","url":"https://github.com/eclipse/xtext"},{"original_method":"@After\n  public void onTearDown() {\n    try {\n      {\n        String _OUTPUT_DIRECTORY = TestBatchCompiler.OUTPUT_DIRECTORY;\n        File _file = new File(_OUTPUT_DIRECTORY);\n        Files.cleanFolder(_file, null, true, true);\n        String _OUTPUT_DIRECTORY_WITH_SPACES = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n        File _file_1 = new File(_OUTPUT_DIRECTORY_WITH_SPACES);\n        Files.cleanFolder(_file_1, null, true, true);\n        String _TEMP_DIRECTORY = TestBatchCompiler.TEMP_DIRECTORY;\n        File _file_2 = new File(_TEMP_DIRECTORY);\n        boolean _exists = _file_2.exists();\n        if (_exists) {\n          String _TEMP_DIRECTORY_1 = TestBatchCompiler.TEMP_DIRECTORY;\n          File _file_3 = new File(_TEMP_DIRECTORY_1);\n          Files.cleanFolder(_file_3, null, true, true);\n        }\n        String _TEMP_DIRECTORY_WITH_SPACES = TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES;\n        File _file_4 = new File(_TEMP_DIRECTORY_WITH_SPACES);\n        boolean _exists_1 = _file_4.exists();\n        if (_exists_1) {\n          String _TEMP_DIRECTORY_WITH_SPACES_1 = TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES;\n          File _file_5 = new File(_TEMP_DIRECTORY_WITH_SPACES_1);\n          Files.cleanFolder(_file_5, null, true, true);\n        }\n      }\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":12080,"modified_method":"@After\n  public void onTearDown() {\n    try {\n      {\n        File _file = new File(TestBatchCompiler.OUTPUT_DIRECTORY);\n        Files.cleanFolder(_file, null, true, true);\n        File _file_1 = new File(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES);\n        Files.cleanFolder(_file_1, null, true, true);\n        File _file_2 = new File(TestBatchCompiler.TEMP_DIRECTORY);\n        boolean _exists = _file_2.exists();\n        if (_exists) {\n          File _file_3 = new File(TestBatchCompiler.TEMP_DIRECTORY);\n          Files.cleanFolder(_file_3, null, true, true);\n        }\n        File _file_4 = new File(TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES);\n        boolean _exists_1 = _file_4.exists();\n        if (_exists_1) {\n          File _file_5 = new File(TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES);\n          Files.cleanFolder(_file_5, null, true, true);\n        }\n      }\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"3a83064d16c9c29bd58149949422165615a685c2","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void tempDirectory() {\n      Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n      _batchCompiler.setDeleteTempDirectory(false);\n      Xtend2BatchCompiler _batchCompiler_1 = this.batchCompiler;\n      String _TEMP_DIRECTORY = TestBatchCompiler.TEMP_DIRECTORY;\n      _batchCompiler_1.setTempDirectory(_TEMP_DIRECTORY);\n      Xtend2BatchCompiler _batchCompiler_2 = this.batchCompiler;\n      boolean _compile = _batchCompiler_2.compile();\n      Assert.assertTrue(_compile);\n      Xtend2BatchCompiler _batchCompiler_3 = this.batchCompiler;\n      String _tempDirectory = _batchCompiler_3.getTempDirectory();\n      File _file = new File(_tempDirectory);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n      Xtend2BatchCompiler _batchCompiler_4 = this.batchCompiler;\n      boolean _compile_1 = _batchCompiler_4.compile();\n      Assert.assertTrue(_compile_1);\n      Xtend2BatchCompiler _batchCompiler_5 = this.batchCompiler;\n      String _tempDirectory_1 = _batchCompiler_5.getTempDirectory();\n      File _file_1 = new File(_tempDirectory_1);\n      String[] _list_1 = _file_1.list();\n      int _size_1 = ((List<String>)Conversions.doWrapArray(_list_1)).size();\n      Assert.assertEquals(4, _size_1);\n  }","id":12081,"modified_method":"@Test\n  public void tempDirectory() {\n      this.batchCompiler.setDeleteTempDirectory(false);\n      this.batchCompiler.setTempDirectory(TestBatchCompiler.TEMP_DIRECTORY);\n      boolean _compile = this.batchCompiler.compile();\n      Assert.assertTrue(_compile);\n      String _tempDirectory = this.batchCompiler.getTempDirectory();\n      File _file = new File(_tempDirectory);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n      boolean _compile_1 = this.batchCompiler.compile();\n      Assert.assertTrue(_compile_1);\n      String _tempDirectory_1 = this.batchCompiler.getTempDirectory();\n      File _file_1 = new File(_tempDirectory_1);\n      String[] _list_1 = _file_1.list();\n      int _size_1 = ((List<String>)Conversions.doWrapArray(_list_1)).size();\n      Assert.assertEquals(4, _size_1);\n  }","commit_id":"3a83064d16c9c29bd58149949422165615a685c2","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void bug368551() {\n      Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n      String _TEMP_DIRECTORY_WITH_SPACES = TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES;\n      _batchCompiler.setTempDirectory(_TEMP_DIRECTORY_WITH_SPACES);\n      Xtend2BatchCompiler _batchCompiler_1 = this.batchCompiler;\n      String _XTEND_SRC_DIRECTORY_WITH_SPACES = TestBatchCompiler.XTEND_SRC_DIRECTORY_WITH_SPACES;\n      _batchCompiler_1.setSourcePath(_XTEND_SRC_DIRECTORY_WITH_SPACES);\n      Xtend2BatchCompiler _batchCompiler_2 = this.batchCompiler;\n      String _OUTPUT_DIRECTORY_WITH_SPACES = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n      _batchCompiler_2.setOutputPath(_OUTPUT_DIRECTORY_WITH_SPACES);\n      Xtend2BatchCompiler _batchCompiler_3 = this.batchCompiler;\n      _batchCompiler_3.compile();\n      String _OUTPUT_DIRECTORY_WITH_SPACES_1 = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n      String _operator_plus = StringExtensions.operator_plus(_OUTPUT_DIRECTORY_WITH_SPACES_1, \"/test\");\n      File _file = new File(_operator_plus);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n  }","id":12082,"modified_method":"@Test\n  public void bug368551() {\n      this.batchCompiler.setTempDirectory(TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES);\n      this.batchCompiler.setSourcePath(TestBatchCompiler.XTEND_SRC_DIRECTORY_WITH_SPACES);\n      this.batchCompiler.setOutputPath(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES);\n      this.batchCompiler.compile();\n      String _operator_plus = StringExtensions.operator_plus(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES, \"/test\");\n      File _file = new File(_operator_plus);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n  }","commit_id":"3a83064d16c9c29bd58149949422165615a685c2","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void testCompileTestData() {\n      Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n      _batchCompiler.compile();\n      String _OUTPUT_DIRECTORY = TestBatchCompiler.OUTPUT_DIRECTORY;\n      String _operator_plus = StringExtensions.operator_plus(_OUTPUT_DIRECTORY, \"/test\");\n      File _file = new File(_operator_plus);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n  }","id":12083,"modified_method":"@Test\n  public void testCompileTestData() {\n      this.batchCompiler.compile();\n      String _operator_plus = StringExtensions.operator_plus(TestBatchCompiler.OUTPUT_DIRECTORY, \"/test\");\n      File _file = new File(_operator_plus);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n  }","commit_id":"3a83064d16c9c29bd58149949422165615a685c2","url":"https://github.com/eclipse/xtext"},{"original_method":"@Before\n  public void onSetup() {\n    try {\n      {\n        Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n        String _XTEND_SRC_DIRECTORY = TestBatchCompiler.XTEND_SRC_DIRECTORY;\n        _batchCompiler.setSourcePath(_XTEND_SRC_DIRECTORY);\n        Xtend2BatchCompiler _batchCompiler_1 = this.batchCompiler;\n        String _OUTPUT_DIRECTORY = TestBatchCompiler.OUTPUT_DIRECTORY;\n        _batchCompiler_1.setOutputPath(_OUTPUT_DIRECTORY);\n        Xtend2BatchCompiler _batchCompiler_2 = this.batchCompiler;\n        _batchCompiler_2.setDeleteTempDirectory(true);\n        String _OUTPUT_DIRECTORY_1 = TestBatchCompiler.OUTPUT_DIRECTORY;\n        File _file = new File(_OUTPUT_DIRECTORY_1);\n        _file.mkdir();\n        String _OUTPUT_DIRECTORY_2 = TestBatchCompiler.OUTPUT_DIRECTORY;\n        File _file_1 = new File(_OUTPUT_DIRECTORY_2);\n        Files.cleanFolder(_file_1, null, true, false);\n        String _OUTPUT_DIRECTORY_WITH_SPACES = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n        File _file_2 = new File(_OUTPUT_DIRECTORY_WITH_SPACES);\n        _file_2.mkdir();\n        String _OUTPUT_DIRECTORY_WITH_SPACES_1 = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n        File _file_3 = new File(_OUTPUT_DIRECTORY_WITH_SPACES_1);\n        Files.cleanFolder(_file_3, null, true, false);\n      }\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":12084,"modified_method":"@Before\n  public void onSetup() {\n    try {\n      {\n        this.batchCompiler.setSourcePath(TestBatchCompiler.XTEND_SRC_DIRECTORY);\n        this.batchCompiler.setOutputPath(TestBatchCompiler.OUTPUT_DIRECTORY);\n        this.batchCompiler.setDeleteTempDirectory(true);\n        File _file = new File(TestBatchCompiler.OUTPUT_DIRECTORY);\n        _file.mkdir();\n        File _file_1 = new File(TestBatchCompiler.OUTPUT_DIRECTORY);\n        Files.cleanFolder(_file_1, null, true, false);\n        File _file_2 = new File(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES);\n        _file_2.mkdir();\n        File _file_3 = new File(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES);\n        Files.cleanFolder(_file_3, null, true, false);\n      }\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"3a83064d16c9c29bd58149949422165615a685c2","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void deleteTempDirectory() {\n      Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n      _batchCompiler.setDeleteTempDirectory(true);\n      Xtend2BatchCompiler _batchCompiler_1 = this.batchCompiler;\n      String _TEMP_DIRECTORY = TestBatchCompiler.TEMP_DIRECTORY;\n      _batchCompiler_1.setTempDirectory(_TEMP_DIRECTORY);\n      Xtend2BatchCompiler _batchCompiler_2 = this.batchCompiler;\n      boolean _compile = _batchCompiler_2.compile();\n      Assert.assertTrue(_compile);\n      String _TEMP_DIRECTORY_1 = TestBatchCompiler.TEMP_DIRECTORY;\n      File _file = new File(_TEMP_DIRECTORY_1);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(0, _size);\n  }","id":12085,"modified_method":"@Test\n  public void deleteTempDirectory() {\n      this.batchCompiler.setDeleteTempDirectory(true);\n      this.batchCompiler.setTempDirectory(TestBatchCompiler.TEMP_DIRECTORY);\n      boolean _compile = this.batchCompiler.compile();\n      Assert.assertTrue(_compile);\n      File _file = new File(TestBatchCompiler.TEMP_DIRECTORY);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(0, _size);\n  }","commit_id":"181f84adc24f40d379834cddb49965f263741023","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void tempDirectory() {\n      Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n      _batchCompiler.setDeleteTempDirectory(false);\n      Xtend2BatchCompiler _batchCompiler_1 = this.batchCompiler;\n      String _TEMP_DIRECTORY = TestBatchCompiler.TEMP_DIRECTORY;\n      _batchCompiler_1.setTempDirectory(_TEMP_DIRECTORY);\n      Xtend2BatchCompiler _batchCompiler_2 = this.batchCompiler;\n      boolean _compile = _batchCompiler_2.compile();\n      Assert.assertTrue(_compile);\n      Xtend2BatchCompiler _batchCompiler_3 = this.batchCompiler;\n      String _tempDirectory = _batchCompiler_3.getTempDirectory();\n      File _file = new File(_tempDirectory);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n      Xtend2BatchCompiler _batchCompiler_4 = this.batchCompiler;\n      boolean _compile_1 = _batchCompiler_4.compile();\n      Assert.assertTrue(_compile_1);\n      Xtend2BatchCompiler _batchCompiler_5 = this.batchCompiler;\n      String _tempDirectory_1 = _batchCompiler_5.getTempDirectory();\n      File _file_1 = new File(_tempDirectory_1);\n      String[] _list_1 = _file_1.list();\n      int _size_1 = ((List<String>)Conversions.doWrapArray(_list_1)).size();\n      Assert.assertEquals(4, _size_1);\n  }","id":12086,"modified_method":"@Test\n  public void tempDirectory() {\n      this.batchCompiler.setDeleteTempDirectory(false);\n      this.batchCompiler.setTempDirectory(TestBatchCompiler.TEMP_DIRECTORY);\n      boolean _compile = this.batchCompiler.compile();\n      Assert.assertTrue(_compile);\n      String _tempDirectory = this.batchCompiler.getTempDirectory();\n      File _file = new File(_tempDirectory);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n      boolean _compile_1 = this.batchCompiler.compile();\n      Assert.assertTrue(_compile_1);\n      String _tempDirectory_1 = this.batchCompiler.getTempDirectory();\n      File _file_1 = new File(_tempDirectory_1);\n      String[] _list_1 = _file_1.list();\n      int _size_1 = ((List<String>)Conversions.doWrapArray(_list_1)).size();\n      Assert.assertEquals(4, _size_1);\n  }","commit_id":"181f84adc24f40d379834cddb49965f263741023","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void bug368551() {\n      Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n      String _TEMP_DIRECTORY_WITH_SPACES = TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES;\n      _batchCompiler.setTempDirectory(_TEMP_DIRECTORY_WITH_SPACES);\n      Xtend2BatchCompiler _batchCompiler_1 = this.batchCompiler;\n      String _XTEND_SRC_DIRECTORY_WITH_SPACES = TestBatchCompiler.XTEND_SRC_DIRECTORY_WITH_SPACES;\n      _batchCompiler_1.setSourcePath(_XTEND_SRC_DIRECTORY_WITH_SPACES);\n      Xtend2BatchCompiler _batchCompiler_2 = this.batchCompiler;\n      String _OUTPUT_DIRECTORY_WITH_SPACES = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n      _batchCompiler_2.setOutputPath(_OUTPUT_DIRECTORY_WITH_SPACES);\n      Xtend2BatchCompiler _batchCompiler_3 = this.batchCompiler;\n      _batchCompiler_3.compile();\n      String _OUTPUT_DIRECTORY_WITH_SPACES_1 = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n      String _operator_plus = StringExtensions.operator_plus(_OUTPUT_DIRECTORY_WITH_SPACES_1, \"/test\");\n      File _file = new File(_operator_plus);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n  }","id":12087,"modified_method":"@Test\n  public void bug368551() {\n      this.batchCompiler.setTempDirectory(TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES);\n      this.batchCompiler.setSourcePath(TestBatchCompiler.XTEND_SRC_DIRECTORY_WITH_SPACES);\n      this.batchCompiler.setOutputPath(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES);\n      this.batchCompiler.compile();\n      String _operator_plus = StringExtensions.operator_plus(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES, \"/test\");\n      File _file = new File(_operator_plus);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n  }","commit_id":"181f84adc24f40d379834cddb49965f263741023","url":"https://github.com/eclipse/xtext"},{"original_method":"@After\n  public void onTearDown() {\n    try {\n      {\n        String _OUTPUT_DIRECTORY = TestBatchCompiler.OUTPUT_DIRECTORY;\n        File _file = new File(_OUTPUT_DIRECTORY);\n        Files.cleanFolder(_file, null, true, true);\n        String _OUTPUT_DIRECTORY_WITH_SPACES = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n        File _file_1 = new File(_OUTPUT_DIRECTORY_WITH_SPACES);\n        Files.cleanFolder(_file_1, null, true, true);\n        String _TEMP_DIRECTORY = TestBatchCompiler.TEMP_DIRECTORY;\n        File _file_2 = new File(_TEMP_DIRECTORY);\n        boolean _exists = _file_2.exists();\n        if (_exists) {\n          String _TEMP_DIRECTORY_1 = TestBatchCompiler.TEMP_DIRECTORY;\n          File _file_3 = new File(_TEMP_DIRECTORY_1);\n          Files.cleanFolder(_file_3, null, true, true);\n        }\n        String _TEMP_DIRECTORY_WITH_SPACES = TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES;\n        File _file_4 = new File(_TEMP_DIRECTORY_WITH_SPACES);\n        boolean _exists_1 = _file_4.exists();\n        if (_exists_1) {\n          String _TEMP_DIRECTORY_WITH_SPACES_1 = TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES;\n          File _file_5 = new File(_TEMP_DIRECTORY_WITH_SPACES_1);\n          Files.cleanFolder(_file_5, null, true, true);\n        }\n      }\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":12088,"modified_method":"@After\n  public void onTearDown() {\n    try {\n      {\n        File _file = new File(TestBatchCompiler.OUTPUT_DIRECTORY);\n        Files.cleanFolder(_file, null, true, true);\n        File _file_1 = new File(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES);\n        Files.cleanFolder(_file_1, null, true, true);\n        File _file_2 = new File(TestBatchCompiler.TEMP_DIRECTORY);\n        boolean _exists = _file_2.exists();\n        if (_exists) {\n          File _file_3 = new File(TestBatchCompiler.TEMP_DIRECTORY);\n          Files.cleanFolder(_file_3, null, true, true);\n        }\n        File _file_4 = new File(TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES);\n        boolean _exists_1 = _file_4.exists();\n        if (_exists_1) {\n          File _file_5 = new File(TestBatchCompiler.TEMP_DIRECTORY_WITH_SPACES);\n          Files.cleanFolder(_file_5, null, true, true);\n        }\n      }\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"181f84adc24f40d379834cddb49965f263741023","url":"https://github.com/eclipse/xtext"},{"original_method":"@Test\n  public void testCompileTestData() {\n      Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n      _batchCompiler.compile();\n      String _OUTPUT_DIRECTORY = TestBatchCompiler.OUTPUT_DIRECTORY;\n      String _operator_plus = StringExtensions.operator_plus(_OUTPUT_DIRECTORY, \"/test\");\n      File _file = new File(_operator_plus);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n  }","id":12089,"modified_method":"@Test\n  public void testCompileTestData() {\n      this.batchCompiler.compile();\n      String _operator_plus = StringExtensions.operator_plus(TestBatchCompiler.OUTPUT_DIRECTORY, \"/test\");\n      File _file = new File(_operator_plus);\n      String[] _list = _file.list();\n      int _size = ((List<String>)Conversions.doWrapArray(_list)).size();\n      Assert.assertEquals(2, _size);\n  }","commit_id":"181f84adc24f40d379834cddb49965f263741023","url":"https://github.com/eclipse/xtext"},{"original_method":"@Before\n  public void onSetup() {\n    try {\n      {\n        Xtend2BatchCompiler _batchCompiler = this.batchCompiler;\n        String _XTEND_SRC_DIRECTORY = TestBatchCompiler.XTEND_SRC_DIRECTORY;\n        _batchCompiler.setSourcePath(_XTEND_SRC_DIRECTORY);\n        Xtend2BatchCompiler _batchCompiler_1 = this.batchCompiler;\n        String _OUTPUT_DIRECTORY = TestBatchCompiler.OUTPUT_DIRECTORY;\n        _batchCompiler_1.setOutputPath(_OUTPUT_DIRECTORY);\n        Xtend2BatchCompiler _batchCompiler_2 = this.batchCompiler;\n        _batchCompiler_2.setDeleteTempDirectory(true);\n        String _OUTPUT_DIRECTORY_1 = TestBatchCompiler.OUTPUT_DIRECTORY;\n        File _file = new File(_OUTPUT_DIRECTORY_1);\n        _file.mkdir();\n        String _OUTPUT_DIRECTORY_2 = TestBatchCompiler.OUTPUT_DIRECTORY;\n        File _file_1 = new File(_OUTPUT_DIRECTORY_2);\n        Files.cleanFolder(_file_1, null, true, false);\n        String _OUTPUT_DIRECTORY_WITH_SPACES = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n        File _file_2 = new File(_OUTPUT_DIRECTORY_WITH_SPACES);\n        _file_2.mkdir();\n        String _OUTPUT_DIRECTORY_WITH_SPACES_1 = TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES;\n        File _file_3 = new File(_OUTPUT_DIRECTORY_WITH_SPACES_1);\n        Files.cleanFolder(_file_3, null, true, false);\n      }\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","id":12090,"modified_method":"@Before\n  public void onSetup() {\n    try {\n      {\n        this.batchCompiler.setSourcePath(TestBatchCompiler.XTEND_SRC_DIRECTORY);\n        this.batchCompiler.setOutputPath(TestBatchCompiler.OUTPUT_DIRECTORY);\n        this.batchCompiler.setDeleteTempDirectory(true);\n        File _file = new File(TestBatchCompiler.OUTPUT_DIRECTORY);\n        _file.mkdir();\n        File _file_1 = new File(TestBatchCompiler.OUTPUT_DIRECTORY);\n        Files.cleanFolder(_file_1, null, true, false);\n        File _file_2 = new File(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES);\n        _file_2.mkdir();\n        File _file_3 = new File(TestBatchCompiler.OUTPUT_DIRECTORY_WITH_SPACES);\n        Files.cleanFolder(_file_3, null, true, false);\n      }\n    } catch (Exception _e) {\n      throw Exceptions.sneakyThrow(_e);\n    }\n  }","commit_id":"181f84adc24f40d379834cddb49965f263741023","url":"https://github.com/eclipse/xtext"},{"original_method":"public void deleteFile(\n\t\t\tlong companyId, String portletId, long repositoryId,\n\t\t\tString fileName, String versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.deleteFile(\n\t\t\tcompanyId, portletId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), versionNumber);\n\t}","id":12091,"modified_method":"public void deleteFile(\n\t\t\tlong companyId, String portletId, long repositoryId,\n\t\t\tString fileName, String versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber)) {\n\n\t\t\t_hook.deleteFile(\n\t\t\t\tcompanyId, portletId, repositoryId, fileName, versionNumber);\n\n\t\t\treturn;\n\t\t}\n\n\t\t_hook.deleteFile(\n\t\t\tcompanyId, portletId, repositoryId, safeFileName, versionNumber);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, InputStream is)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), fileEntryId,\n\t\t\tproperties, modifiedDate, serviceContext, is);\n\t}","id":12092,"modified_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, InputStream is)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tfileEntryId, properties, modifiedDate, serviceContext, is);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, byte[] bytes)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), versionNumber,\n\t\t\tFileUtil.encodeSafeFileName(sourceFileName), fileEntryId,\n\t\t\tproperties, modifiedDate, serviceContext, bytes);\n\t}","id":12093,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, byte[] bytes)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\t\tString safeSourceFileName = FileUtil.encodeSafeFileName(sourceFileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, sourceFileName,\n\t\t\tsafeSourceFileName);\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tversionNumber, safeSourceFileName, fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, bytes);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public byte[] getFile(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFile(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName),\n\t\t\tversionNumber);\n\t}","id":12094,"modified_method":"public byte[] getFile(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber)) {\n\n\t\t\treturn _hook.getFile(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber);\n\t\t}\n\n\t\treturn _hook.getFile(\n\t\t\tcompanyId, repositoryId, safeFileName, versionNumber);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteDirectory(\n\t\t\tlong companyId, String portletId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.deleteDirectory(\n\t\t\tcompanyId, portletId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(dirName));\n\t}","id":12095,"modified_method":"public void deleteDirectory(\n\t\t\tlong companyId, String portletId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeDirName = FileUtil.encodeSafeFileName(dirName);\n\n\t\tif (!safeDirName.equals(dirName)) {\n\t\t\ttry {\n\t\t\t\t_hook.deleteDirectory(\n\t\t\t\t\tcompanyId, portletId, repositoryId, dirName);\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\t\t}\n\n\t\t_hook.deleteDirectory(companyId, portletId, repositoryId, safeDirName);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String[] getFileNames(\n\t\t\tlong companyId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString[] fileNames = _hook.getFileNames(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(dirName));\n\n\t\tString[] decodedFileNames = new String[fileNames.length];\n\n\t\tfor (int i = 0; i < fileNames.length; i++) {\n\t\t\tdecodedFileNames[i] = FileUtil.decodeSafeFileName(fileNames[i]);\n\t\t}\n\n\t\treturn decodedFileNames;\n\t}","id":12096,"modified_method":"public String[] getFileNames(\n\t\t\tlong companyId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeDirName = FileUtil.encodeSafeFileName(dirName);\n\n\t\tif (!safeDirName.equals(dirName)) {\n\t\t\ttry {\n\t\t\t\t_hook.move(dirName, safeDirName);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\t\t}\n\n\t\tString[] fileNames = _hook.getFileNames(\n\t\t\tcompanyId, repositoryId, safeDirName);\n\n\t\tString[] decodedFileNames = new String[fileNames.length];\n\n\t\tfor (int i = 0; i < fileNames.length; i++) {\n\t\t\tdecodedFileNames[i] = FileUtil.decodeSafeFileName(fileNames[i]);\n\t\t}\n\n\t\treturn decodedFileNames;\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, byte[] bytes)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, bytes);\n\t}","id":12097,"modified_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, byte[] bytes)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tfileEntryId, properties, modifiedDate, serviceContext, bytes);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public byte[] getFile(long companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFile(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName));\n\t}","id":12098,"modified_method":"public byte[] getFile(long companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\treturn _hook.getFile(companyId, repositoryId, fileName);\n\t\t}\n\n\t\treturn _hook.getFile(companyId, repositoryId, safeFileName);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tlong newRepositoryId, String fileName, long fileEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, newRepositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), fileEntryId);\n\t}","id":12099,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tlong newRepositoryId, String fileName, long fileEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, newRepositoryId,\n\t\t\tsafeFileName, fileEntryId);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addDirectory(long companyId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.addDirectory(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(dirName));\n\t}","id":12100,"modified_method":"public void addDirectory(long companyId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeDirName = FileUtil.encodeSafeFileName(dirName);\n\n\t\tif (!safeDirName.equals(dirName)) {\n\t\t\ttry {\n\t\t\t\t_hook.move(dirName, safeDirName);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\t\t}\n\n\t\t_hook.addDirectory(companyId, repositoryId, safeDirName);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, File file)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName),\n\t\t\tversionNumber, FileUtil.encodeSafeFileName(sourceFileName),\n\t\t\tfileEntryId, properties, modifiedDate, serviceContext, file);\n\t}","id":12101,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, File file)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\t\tString safeSourceFileName = FileUtil.encodeSafeFileName(sourceFileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, sourceFileName,\n\t\t\tsafeSourceFileName);\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tversionNumber, safeSourceFileName, fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, file);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public InputStream getFileAsStream(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFileAsStream(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName),\n\t\t\tversionNumber);\n\t}","id":12102,"modified_method":"public InputStream getFileAsStream(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber)) {\n\n\t\t\treturn _hook.getFileAsStream(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber);\n\t\t}\n\n\t\treturn _hook.getFileAsStream(\n\t\t\tcompanyId, repositoryId, safeFileName, versionNumber);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public InputStream getFileAsStream(\n\t\t\tlong companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFileAsStream(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName));\n\t}","id":12103,"modified_method":"public InputStream getFileAsStream(\n\t\t\tlong companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\treturn _hook.getFileAsStream(companyId, repositoryId, fileName);\n\t\t}\n\n\t\treturn _hook.getFileAsStream(companyId, repositoryId, safeFileName);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String newFileName, boolean reindex)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName),\n\t\t\tFileUtil.encodeSafeFileName(newFileName), reindex);\n\t}","id":12104,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String newFileName, boolean reindex)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\t\tString safeNewFileName = FileUtil.encodeSafeFileName(newFileName);\n\n\t\tif (!safeFileName.equals(fileName)) {\n\t\t\tif (_hook.hasFile(\n\t\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t\tsafeFileName = fileName;\n\t\t\t}\n\t\t}\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tsafeNewFileName, reindex);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public long getFileSize(\n\t\t\tlong companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFileSize(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName));\n\t}","id":12105,"modified_method":"public long getFileSize(\n\t\t\tlong companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\treturn _hook.getFileSize(companyId, repositoryId, fileName);\n\t\t}\n\n\t\treturn _hook.getFileSize(companyId, repositoryId, safeFileName);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, InputStream is)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), versionNumber,\n\t\t\tFileUtil.encodeSafeFileName(sourceFileName), fileEntryId,\n\t\t\tproperties, modifiedDate, serviceContext, is);\n\t}","id":12106,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, InputStream is)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\t\tString safeSourceFileName = FileUtil.encodeSafeFileName(sourceFileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, sourceFileName,\n\t\t\tsafeSourceFileName);\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tversionNumber, safeSourceFileName, fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, is);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteFile(\n\t\t\tlong companyId, String portletId, long repositoryId,\n\t\t\tString fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.deleteFile(\n\t\t\tcompanyId, portletId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName));\n\t}","id":12107,"modified_method":"public void deleteFile(\n\t\t\tlong companyId, String portletId, long repositoryId,\n\t\t\tString fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t_hook.deleteFile(companyId, portletId, repositoryId, fileName);\n\n\t\t\treturn;\n\t\t}\n\n\t\t_hook.deleteFile(companyId, portletId, repositoryId, safeFileName);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public boolean hasFile(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.hasFile(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName),\n\t\t\tversionNumber);\n\t}","id":12108,"modified_method":"public boolean hasFile(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) &&\n\t\t\t_hook.hasFile(companyId, repositoryId, fileName, versionNumber)) {\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn _hook.hasFile(\n\t\t\tcompanyId, repositoryId, safeFileName, versionNumber);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, File file)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, file);\n\t}","id":12109,"modified_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, File file)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tfileEntryId, properties, modifiedDate, serviceContext, file);\n\t}","commit_id":"40e2b8ff95a6d2425643f5216b7214c7f149ed09","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public long getFileSize(\n\t\t\tlong companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFileSize(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName));\n\t}","id":12110,"modified_method":"public long getFileSize(\n\t\t\tlong companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\treturn _hook.getFileSize(companyId, repositoryId, fileName);\n\t\t}\n\n\t\treturn _hook.getFileSize(companyId, repositoryId, safeFileName);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String[] getFileNames(\n\t\t\tlong companyId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString[] fileNames = _hook.getFileNames(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(dirName));\n\n\t\tString[] decodedFileNames = new String[fileNames.length];\n\n\t\tfor (int i = 0; i < fileNames.length; i++) {\n\t\t\tdecodedFileNames[i] = FileUtil.decodeSafeFileName(fileNames[i]);\n\t\t}\n\n\t\treturn decodedFileNames;\n\t}","id":12111,"modified_method":"public String[] getFileNames(\n\t\t\tlong companyId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeDirName = FileUtil.encodeSafeFileName(dirName);\n\n\t\tif (!safeDirName.equals(dirName)) {\n\t\t\ttry {\n\t\t\t\t_hook.move(dirName, safeDirName);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\t\t}\n\n\t\tString[] fileNames = _hook.getFileNames(\n\t\t\tcompanyId, repositoryId, safeDirName);\n\n\t\tString[] decodedFileNames = new String[fileNames.length];\n\n\t\tfor (int i = 0; i < fileNames.length; i++) {\n\t\t\tdecodedFileNames[i] = FileUtil.decodeSafeFileName(fileNames[i]);\n\t\t}\n\n\t\treturn decodedFileNames;\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, File file)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, file);\n\t}","id":12112,"modified_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, File file)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tfileEntryId, properties, modifiedDate, serviceContext, file);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteFile(\n\t\t\tlong companyId, String portletId, long repositoryId,\n\t\t\tString fileName, String versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.deleteFile(\n\t\t\tcompanyId, portletId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), versionNumber);\n\t}","id":12113,"modified_method":"public void deleteFile(\n\t\t\tlong companyId, String portletId, long repositoryId,\n\t\t\tString fileName, String versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber)) {\n\n\t\t\t_hook.deleteFile(\n\t\t\t\tcompanyId, portletId, repositoryId, fileName, versionNumber);\n\n\t\t\treturn;\n\t\t}\n\n\t\t_hook.deleteFile(\n\t\t\tcompanyId, portletId, repositoryId, safeFileName, versionNumber);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public boolean hasFile(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.hasFile(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName),\n\t\t\tversionNumber);\n\t}","id":12114,"modified_method":"public boolean hasFile(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) &&\n\t\t\t_hook.hasFile(companyId, repositoryId, fileName, versionNumber)) {\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn _hook.hasFile(\n\t\t\tcompanyId, repositoryId, safeFileName, versionNumber);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, InputStream is)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), fileEntryId,\n\t\t\tproperties, modifiedDate, serviceContext, is);\n\t}","id":12115,"modified_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, InputStream is)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tfileEntryId, properties, modifiedDate, serviceContext, is);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteDirectory(\n\t\t\tlong companyId, String portletId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.deleteDirectory(\n\t\t\tcompanyId, portletId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(dirName));\n\t}","id":12116,"modified_method":"public void deleteDirectory(\n\t\t\tlong companyId, String portletId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeDirName = FileUtil.encodeSafeFileName(dirName);\n\n\t\tif (!safeDirName.equals(dirName)) {\n\t\t\ttry {\n\t\t\t\t_hook.deleteDirectory(\n\t\t\t\t\tcompanyId, portletId, repositoryId, dirName);\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\t\t}\n\n\t\t_hook.deleteDirectory(companyId, portletId, repositoryId, safeDirName);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public InputStream getFileAsStream(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFileAsStream(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName),\n\t\t\tversionNumber);\n\t}","id":12117,"modified_method":"public InputStream getFileAsStream(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber)) {\n\n\t\t\treturn _hook.getFileAsStream(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber);\n\t\t}\n\n\t\treturn _hook.getFileAsStream(\n\t\t\tcompanyId, repositoryId, safeFileName, versionNumber);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, byte[] bytes)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, bytes);\n\t}","id":12118,"modified_method":"public void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, ServiceContext serviceContext, byte[] bytes)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\n\t\t_hook.addFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tfileEntryId, properties, modifiedDate, serviceContext, bytes);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public byte[] getFile(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFile(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName),\n\t\t\tversionNumber);\n\t}","id":12119,"modified_method":"public byte[] getFile(\n\t\t\tlong companyId, long repositoryId, String fileName,\n\t\t\tString versionNumber)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber)) {\n\n\t\t\treturn _hook.getFile(\n\t\t\t\tcompanyId, repositoryId, fileName, versionNumber);\n\t\t}\n\n\t\treturn _hook.getFile(\n\t\t\tcompanyId, repositoryId, safeFileName, versionNumber);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, byte[] bytes)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), versionNumber,\n\t\t\tFileUtil.encodeSafeFileName(sourceFileName), fileEntryId,\n\t\t\tproperties, modifiedDate, serviceContext, bytes);\n\t}","id":12120,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, byte[] bytes)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\t\tString safeSourceFileName = FileUtil.encodeSafeFileName(sourceFileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, sourceFileName,\n\t\t\tsafeSourceFileName);\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tversionNumber, safeSourceFileName, fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, bytes);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public byte[] getFile(long companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFile(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName));\n\t}","id":12121,"modified_method":"public byte[] getFile(long companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\treturn _hook.getFile(companyId, repositoryId, fileName);\n\t\t}\n\n\t\treturn _hook.getFile(companyId, repositoryId, safeFileName);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public InputStream getFileAsStream(\n\t\t\tlong companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\treturn _hook.getFileAsStream(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(fileName));\n\t}","id":12122,"modified_method":"public InputStream getFileAsStream(\n\t\t\tlong companyId, long repositoryId, String fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\treturn _hook.getFileAsStream(companyId, repositoryId, fileName);\n\t\t}\n\n\t\treturn _hook.getFileAsStream(companyId, repositoryId, safeFileName);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addDirectory(long companyId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.addDirectory(\n\t\t\tcompanyId, repositoryId, FileUtil.encodeSafeFileName(dirName));\n\t}","id":12123,"modified_method":"public void addDirectory(long companyId, long repositoryId, String dirName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeDirName = FileUtil.encodeSafeFileName(dirName);\n\n\t\tif (!safeDirName.equals(dirName)) {\n\t\t\ttry {\n\t\t\t\t_hook.move(dirName, safeDirName);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\t\t}\n\n\t\t_hook.addDirectory(companyId, repositoryId, safeDirName);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, File file)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName),\n\t\t\tversionNumber, FileUtil.encodeSafeFileName(sourceFileName),\n\t\t\tfileEntryId, properties, modifiedDate, serviceContext, file);\n\t}","id":12124,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, File file)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\t\tString safeSourceFileName = FileUtil.encodeSafeFileName(sourceFileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, sourceFileName,\n\t\t\tsafeSourceFileName);\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tversionNumber, safeSourceFileName, fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, file);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteFile(\n\t\t\tlong companyId, String portletId, long repositoryId,\n\t\t\tString fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.deleteFile(\n\t\t\tcompanyId, portletId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName));\n\t}","id":12125,"modified_method":"public void deleteFile(\n\t\t\tlong companyId, String portletId, long repositoryId,\n\t\t\tString fileName)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\tif (!safeFileName.equals(fileName) && _hook.hasFile(\n\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t_hook.deleteFile(companyId, portletId, repositoryId, fileName);\n\n\t\t\treturn;\n\t\t}\n\n\t\t_hook.deleteFile(companyId, portletId, repositoryId, safeFileName);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String newFileName, boolean reindex)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName),\n\t\t\tFileUtil.encodeSafeFileName(newFileName), reindex);\n\t}","id":12126,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String newFileName, boolean reindex)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\t\tString safeNewFileName = FileUtil.encodeSafeFileName(newFileName);\n\n\t\tif (!safeFileName.equals(fileName)) {\n\t\t\tif (_hook.hasFile(\n\t\t\t\t\tcompanyId, repositoryId, fileName,\n\t\t\t\t\tDLFileEntryConstants.DEFAULT_VERSION)) {\n\n\t\t\t\tsafeFileName = fileName;\n\t\t\t}\n\t\t}\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tsafeNewFileName, reindex);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, InputStream is)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), versionNumber,\n\t\t\tFileUtil.encodeSafeFileName(sourceFileName), fileEntryId,\n\t\t\tproperties, modifiedDate, serviceContext, is);\n\t}","id":12127,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, String versionNumber, String sourceFileName,\n\t\t\tlong fileEntryId, String properties, Date modifiedDate,\n\t\t\tServiceContext serviceContext, InputStream is)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\t\tString safeSourceFileName = FileUtil.encodeSafeFileName(sourceFileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, sourceFileName,\n\t\t\tsafeSourceFileName);\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, safeFileName,\n\t\t\tversionNumber, safeSourceFileName, fileEntryId, properties,\n\t\t\tmodifiedDate, serviceContext, is);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tlong newRepositoryId, String fileName, long fileEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, newRepositoryId,\n\t\t\tFileUtil.encodeSafeFileName(fileName), fileEntryId);\n\t}","id":12128,"modified_method":"public void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tlong newRepositoryId, String fileName, long fileEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tString safeFileName = FileUtil.encodeSafeFileName(fileName);\n\n\t\trenameUnsafeFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName,\n\t\t\tsafeFileName);\n\n\t\t_hook.updateFile(\n\t\t\tcompanyId, portletId, groupId, repositoryId, newRepositoryId,\n\t\t\tsafeFileName, fileEntryId);\n\t}","commit_id":"5c1ab29861c6d53c29339ca02cd582f442eeaa59","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * release an IP Address\n     * \n     * @param request\n     * @return\n     */\n    public boolean releaseAddress(EC2ReleaseAddress request) {\n        try {\n            CloudStackIpAddress cloudIp = getApi().listPublicIpAddresses(null, null, null, null, null, request.getPublicIp(), null, null, null).get(0);\n            CloudStackInfoResponse resp = getApi().disassociateIpAddress(cloudIp.getId());\n            if (resp != null) {\n                return resp.getSuccess();\n            }\n        } catch(Exception e) {\n            logger.error(\"EC2 ReleaseAddress - \", e);\n            throw new EC2ServiceException(ServerError.InternalError, e.getMessage());\n        }\n        return false;\n    }","id":12129,"modified_method":"/**\n     * release an IP Address\n     * \n     * @param request\n     * @return\n     */\n    public boolean releaseAddress(EC2ReleaseAddress request) {\n        try {\n            List<CloudStackIpAddress> cloudIps = getApi().listPublicIpAddresses(null, null, null, null, null, request.getPublicIp(), null, null, null);\n            if (cloudIps == null)\n                throw new EC2ServiceException(ServerError.InternalError, \"Specified ipAddress doesn't exist\");\n            CloudStackIpAddress cloudIp = cloudIps.get(0);\n            CloudStackInfoResponse resp = getApi().disassociateIpAddress(cloudIp.getId());\n            if (resp != null) {\n                return resp.getSuccess();\n            }\n        } catch(Exception e) {\n            logger.error(\"EC2 ReleaseAddress - \", e);\n            throw new EC2ServiceException(ServerError.InternalError, e.getMessage());\n        }\n        return false;\n    }","commit_id":"41f6585754ed9d7e878f3b53ad4294e225cdb759","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n     * Disassociate an address from an instance\n     * \n     * @param request\n     * @return\n     */\n    public boolean disassociateAddress( EC2DisassociateAddress request ) {\n        try {\n            CloudStackIpAddress cloudIp = getApi().listPublicIpAddresses(null, null, null, null, null, request.getPublicIp(), null, null, null).get(0);\n            CloudStackInfoResponse resp = getApi().disableStaticNat(cloudIp.getId());\n            if (resp != null) {\n                return resp.getSuccess();\n            }\n        } catch(Exception e) {\n            logger.error( \"EC2 DisassociateAddress - \", e);\n            throw new EC2ServiceException(ServerError.InternalError, e.getMessage() != null ? e.getMessage() : \"An unexpected error occurred.\");\n        }\n        return false;\n    }","id":12130,"modified_method":"/**\n     * Disassociate an address from an instance\n     * \n     * @param request\n     * @return\n     */\n    public boolean disassociateAddress( EC2DisassociateAddress request ) {\n        try {\n            List<CloudStackIpAddress> cloudIps = getApi().listPublicIpAddresses(null, null, null, null, null, request.getPublicIp(), null, null, null);\n            if (cloudIps == null)\n                throw new EC2ServiceException(ServerError.InternalError, \"Specified ipAddress doesn't exist\");\n            CloudStackIpAddress cloudIp = cloudIps.get(0);\n\n            CloudStackInfoResponse resp = getApi().disableStaticNat(cloudIp.getId());\n            if (resp != null) {\n                return resp.getSuccess();\n            }\n        } catch(Exception e) {\n            logger.error( \"EC2 DisassociateAddress - \", e);\n            throw new EC2ServiceException(ServerError.InternalError, e.getMessage() != null ? e.getMessage() : \"An unexpected error occurred.\");\n        }\n        return false;\n    }","commit_id":"41f6585754ed9d7e878f3b53ad4294e225cdb759","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n     * Associate an address with an instance\n     * \n     * @param request\n     * @return\n     */\n    public boolean associateAddress( EC2AssociateAddress request ) {\n        try {\n            CloudStackIpAddress cloudIp = getApi().listPublicIpAddresses(null, null, null, null, null, request.getPublicIp(), null, null, null).get(0);\n            CloudStackUserVm cloudVm = getApi().listVirtualMachines(null, null, true, null, null, null, null, request.getInstanceId(), null, null, null, null, null, null, null, null, null).get(0);\n\n            CloudStackInfoResponse resp = getApi().enableStaticNat(cloudIp.getId(), cloudVm.getId());\n            if (resp != null) {\n                return resp.getSuccess();\n            }\n        } catch(Exception e) {\n            logger.error( \"EC2 AssociateAddress - \", e);\n            throw new EC2ServiceException(ServerError.InternalError, e.getMessage() != null ? e.getMessage() : \"An unexpected error occurred.\");\n        }\n        return false;\n    }","id":12131,"modified_method":"/**\n     * Associate an address with an instance\n     * \n     * @param request\n     * @return\n     */\n    public boolean associateAddress( EC2AssociateAddress request ) {\n        try {\n            List<CloudStackIpAddress> cloudIps = getApi().listPublicIpAddresses(null, null, null, null, null, request.getPublicIp(), null, null, null);\n            if (cloudIps == null)\n                throw new EC2ServiceException(ServerError.InternalError, \"Specified ipAddress doesn't exist\");\n            CloudStackIpAddress cloudIp = cloudIps.get(0);\n\n            List<CloudStackUserVm> vmList = getApi().listVirtualMachines(null, null, true, null, null, null, null,\n                    request.getInstanceId(), null, null, null, null, null, null, null, null, null);\n            if (vmList == null || vmList.size() == 0) {\n                throw new EC2ServiceException(ServerError.InternalError, \"Specified instance-id doesn't exist\");\n            }\n            CloudStackUserVm cloudVm = vmList.get(0);\n\n            CloudStackInfoResponse resp = getApi().enableStaticNat(cloudIp.getId(), cloudVm.getId());\n            if (resp != null) {\n                return resp.getSuccess();\n            }\n        } catch(Exception e) {\n            logger.error( \"EC2 AssociateAddress - \", e);\n            throw new EC2ServiceException(ServerError.InternalError, e.getMessage() != null ? e.getMessage() : \"An unexpected error occurred.\");\n        }\n        return false;\n    }","commit_id":"41f6585754ed9d7e878f3b53ad4294e225cdb759","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n     * start the persistence unit in one phase\n     *\n     * @param phaseContext\n     * @param deploymentUnit\n     * @param eeModuleDescription\n     * @param components\n     * @param serviceTarget\n     * @param classLoader\n     * @param pu\n     * @param startEarly\n     * @param provider\n     * @param adaptor\n     * @param allowCdiBeanManagerAccess\n     * @throws DeploymentUnitProcessingException\n     */\n    private static void deployPersistenceUnit(\n            final DeploymentPhaseContext phaseContext,\n            final DeploymentUnit deploymentUnit,\n            final EEModuleDescription eeModuleDescription,\n            final Collection<ComponentDescription> components,\n            final ServiceTarget serviceTarget,\n            final ModuleClassLoader classLoader,\n            final PersistenceUnitMetadata pu,\n            final boolean startEarly,\n            final PersistenceProvider provider,\n            final PersistenceProviderAdaptor adaptor,\n            final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException {\n        pu.setClassLoader(classLoader);\n        try {\n            ValidatorFactory validatorFactory = null;\n            final HashMap<String, ValidatorFactory> properties = new HashMap();\n            if (!ValidationMode.NONE.equals(pu.getValidationMode())) {\n                // Get the CDI-enabled ValidatorFactory\n                validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY);\n            }\n\n            final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory);\n\n            deploymentUnit.addToAttachmentList(REMOVAL_KEY, new PersistenceAdaptorRemoval(pu, adaptor));\n\n            // add persistence provider specific properties\n            adaptor.addProviderProperties(properties, pu);\n\n            final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu);\n            deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName);\n\n            ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service);\n            boolean useDefaultDataSource = true;\n            final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName());\n            final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName());\n\n            if (jtaDataSource != null && jtaDataSource.length() > 0) {\n                if (jtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(jtaDataSource), new CastingInjector<DataSource>(service.getJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) {\n                if (nonJtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(nonJtaDataSource), new CastingInjector<DataSource>(service.getNonJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            // JPA 2.0 8.2.1.5, container provides default JTA datasource\n            if (useDefaultDataSource) {\n                // try the one defined in the jpa subsystem\n                String defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName());\n                if ((defaultJtaDataSource == null ||\n                        defaultJtaDataSource.isEmpty()) &&\n                        eeModuleDescription != null) {\n                    // try the one defined in the ee subsystem\n                    defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource();\n                }\n                if (defaultJtaDataSource != null &&\n                    defaultJtaDataSource.length() > 0) {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(defaultJtaDataSource), new CastingInjector<DataSource>(service.getJtaDataSourceInjector(), DataSource.class));\n                    JPA_LOGGER.tracef(\"%s is using the default data source '%s'\", puServiceName, defaultJtaDataSource);\n                }\n            }\n\n            // JPA 2.1 sections 3.5.1 + 9.1 require the CDI bean manager to be passed to the peristence provider\n            // if the persistence unit is contained in a deployment that is a CDI bean archive (has beans.xml).\n            if (allowCdiBeanManagerAccess && WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {\n                builder.addDependency(beanManagerServiceName(deploymentUnit),  new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class));\n            }\n\n            try {\n                // save a thread local reference to the builder for setting up the second level cache dependencies\n                CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder);\n                adaptor.addProviderDependencies(pu);\n            }\n            finally {\n                CacheDeploymentListener.clearInternalDeploymentServiceBuilder();\n            }\n\n            /**\n             * handle extension that binds a transaction scoped entity manager to specified JNDI location\n             */\n            entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName);\n\n            /**\n             * handle extension that binds an entity manager factory to specified JNDI location\n             */\n            entityManagerFactoryBind(eeModuleDescription, serviceTarget, pu, puServiceName);\n\n            if (startEarly) {   // require that the pu service start before the next deployment phase starts\n                phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS, puServiceName);\n            }\n\n            builder.setInitialMode(ServiceController.Mode.ACTIVE)\n                .addInjection(service.getPropertiesInjector(), properties);\n\n            // get async executor from Services.addServerExecutorDependency\n            addServerExecutorDependency(builder, service.getExecutorInjector(), false);\n\n            builder.install();\n\n            JPA_LOGGER.tracef(\"added PersistenceUnitService for '%s'.  PU is ready for injector action.\", puServiceName);\n            addManagementConsole(deploymentUnit, pu, adaptor);\n\n        } catch (ServiceRegistryException e) {\n            throw JpaMessages.MESSAGES.failedToAddPersistenceUnit(e, pu.getPersistenceUnitName());\n        }\n    }","id":12132,"modified_method":"/**\n     * start the persistence unit in one phase\n     *\n     * @param phaseContext\n     * @param deploymentUnit\n     * @param eeModuleDescription\n     * @param components\n     * @param serviceTarget\n     * @param classLoader\n     * @param pu\n     * @param startEarly\n     * @param provider\n     * @param adaptor\n     * @param allowCdiBeanManagerAccess\n     * @throws DeploymentUnitProcessingException\n     */\n    private static void deployPersistenceUnit(\n            final DeploymentPhaseContext phaseContext,\n            final DeploymentUnit deploymentUnit,\n            final EEModuleDescription eeModuleDescription,\n            final Collection<ComponentDescription> components,\n            final ServiceTarget serviceTarget,\n            final ModuleClassLoader classLoader,\n            final PersistenceUnitMetadata pu,\n            final boolean startEarly,\n            final PersistenceProvider provider,\n            final PersistenceProviderAdaptor adaptor,\n            final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException {\n        pu.setClassLoader(classLoader);\n        try {\n            ValidatorFactory validatorFactory = null;\n            final HashMap<String, ValidatorFactory> properties = new HashMap();\n            if (!ValidationMode.NONE.equals(pu.getValidationMode())) {\n                // Get the CDI-enabled ValidatorFactory\n                validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY);\n            }\n\n            final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory);\n\n            deploymentUnit.addToAttachmentList(REMOVAL_KEY, new PersistenceAdaptorRemoval(pu, adaptor));\n\n            // add persistence provider specific properties\n            adaptor.addProviderProperties(properties, pu);\n\n            final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu);\n            deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName);\n\n            ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service);\n            boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu);\n            final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName());\n            final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName());\n\n            if (jtaDataSource != null && jtaDataSource.length() > 0) {\n                if (jtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(jtaDataSource), new CastingInjector<>(service.getJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) {\n                if (nonJtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(nonJtaDataSource), new CastingInjector<>(service.getNonJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            // JPA 2.0 8.2.1.5, container provides default JTA datasource\n            if (useDefaultDataSource) {\n                // try the default datasource defined in the ee subsystem\n                String defaultJtaDataSource = null;\n                if (eeModuleDescription != null) {\n                    defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource();\n                }\n\n                if (defaultJtaDataSource == null ||\n                        defaultJtaDataSource.isEmpty()) {\n                    // try the datasource defined in the jpa subsystem\n                    defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName());\n                }\n                if (defaultJtaDataSource != null &&\n                    !defaultJtaDataSource.isEmpty()) {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(defaultJtaDataSource), new CastingInjector<>(service.getJtaDataSourceInjector(), DataSource.class));\n                    JPA_LOGGER.tracef(\"%s is using the default data source '%s'\", puServiceName, defaultJtaDataSource);\n                }\n            }\n\n            // JPA 2.1 sections 3.5.1 + 9.1 require the CDI bean manager to be passed to the peristence provider\n            // if the persistence unit is contained in a deployment that is a CDI bean archive (has beans.xml).\n            if (allowCdiBeanManagerAccess && WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {\n                builder.addDependency(beanManagerServiceName(deploymentUnit),  new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class));\n            }\n\n            try {\n                // save a thread local reference to the builder for setting up the second level cache dependencies\n                CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder);\n                adaptor.addProviderDependencies(pu);\n            }\n            finally {\n                CacheDeploymentListener.clearInternalDeploymentServiceBuilder();\n            }\n\n            /**\n             * handle extension that binds a transaction scoped entity manager to specified JNDI location\n             */\n            entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName);\n\n            /**\n             * handle extension that binds an entity manager factory to specified JNDI location\n             */\n            entityManagerFactoryBind(eeModuleDescription, serviceTarget, pu, puServiceName);\n\n            if (startEarly) {   // require that the pu service start before the next deployment phase starts\n                phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS, puServiceName);\n            }\n\n            builder.setInitialMode(ServiceController.Mode.ACTIVE)\n                .addInjection(service.getPropertiesInjector(), properties);\n\n            // get async executor from Services.addServerExecutorDependency\n            addServerExecutorDependency(builder, service.getExecutorInjector(), false);\n\n            builder.install();\n\n            JPA_LOGGER.tracef(\"added PersistenceUnitService for '%s'.  PU is ready for injector action.\", puServiceName);\n            addManagementConsole(deploymentUnit, pu, adaptor);\n\n        } catch (ServiceRegistryException e) {\n            throw JpaMessages.MESSAGES.failedToAddPersistenceUnit(e, pu.getPersistenceUnitName());\n        }\n    }","commit_id":"117bf0227481af24fe33ea711804c90e033f2c90","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * first phase of starting the persistence unit\n     *\n     * @param phaseContext\n     * @param deploymentUnit\n     * @param eeModuleDescription\n     * @param components\n     * @param serviceTarget\n     * @param classLoader\n     * @param pu\n     * @param adaptor\n     * @throws DeploymentUnitProcessingException\n     */\n    private static void deployPersistenceUnitPhaseOne(\n            final DeploymentPhaseContext phaseContext,\n            final DeploymentUnit deploymentUnit,\n            final EEModuleDescription eeModuleDescription,\n            final Collection<ComponentDescription> components,\n            final ServiceTarget serviceTarget,\n            final ModuleClassLoader classLoader,\n            final PersistenceUnitMetadata pu,\n            final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException {\n        pu.setClassLoader(classLoader);\n        try {\n            ValidatorFactory validatorFactory = null;\n            final HashMap<String, ValidatorFactory> properties = new HashMap();\n\n            ProxyBeanManager proxyBeanManager = null;\n            // JPA 2.1 sections 3.5.1 + 9.1 require the CDI bean manager to be passed to the peristence provider\n            // if the persistence unit is contained in a deployment that is a CDI bean archive (has beans.xml).\n            if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {\n                proxyBeanManager = new ProxyBeanManager();\n            }\n\n            final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager);\n\n            deploymentUnit.addToAttachmentList(REMOVAL_KEY, new PersistenceAdaptorRemoval(pu, adaptor));\n\n            // add persistence provider specific properties\n            adaptor.addProviderProperties(properties, pu);\n\n            final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE);\n\n            deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName);\n\n            ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service);\n            boolean useDefaultDataSource = true;\n            final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName());\n            final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName());\n\n            if (jtaDataSource != null && jtaDataSource.length() > 0) {\n                if (jtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(jtaDataSource), new CastingInjector<DataSource>(service.getJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) {\n                if (nonJtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(nonJtaDataSource), new CastingInjector<DataSource>(service.getNonJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            // JPA 2.0 8.2.1.5, container provides default JTA datasource\n            if (useDefaultDataSource) {\n                // try the one defined in the jpa subsystem\n                String defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName());\n                if ((defaultJtaDataSource == null ||\n                        defaultJtaDataSource.isEmpty()) &&\n                        eeModuleDescription != null) {\n                    // try the one defined in the ee subsystem\n                    defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource();\n                }\n                if (defaultJtaDataSource != null &&\n                    defaultJtaDataSource.length() > 0) {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(defaultJtaDataSource), new CastingInjector<DataSource>(service.getJtaDataSourceInjector(), DataSource.class));\n                    JPA_LOGGER.tracef(\"%s is using the default data source '%s'\", puServiceName, defaultJtaDataSource);\n                }\n            }\n\n            try {\n                // save a thread local reference to the builder for setting up the second level cache dependencies\n                CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder);\n                adaptor.addProviderDependencies(pu);\n            }\n            finally {\n                CacheDeploymentListener.clearInternalDeploymentServiceBuilder();\n            }\n\n            phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS, puServiceName);\n\n            builder.setInitialMode(ServiceController.Mode.ACTIVE)\n                .addInjection(service.getPropertiesInjector(), properties);\n\n            // get async executor from Services.addServerExecutorDependency\n            addServerExecutorDependency(builder, service.getExecutorInjector(), false);\n\n            builder.install();\n\n            JPA_LOGGER.tracef(\"added PersistenceUnitService (phase 1 of 2) for '%s'.  PU is ready for injector action.\", puServiceName);\n        } catch (ServiceRegistryException e) {\n            throw JpaMessages.MESSAGES.failedToAddPersistenceUnit(e, pu.getPersistenceUnitName());\n        }\n    }","id":12133,"modified_method":"/**\n     * first phase of starting the persistence unit\n     *\n     * @param phaseContext\n     * @param deploymentUnit\n     * @param eeModuleDescription\n     * @param components\n     * @param serviceTarget\n     * @param classLoader\n     * @param pu\n     * @param adaptor\n     * @throws DeploymentUnitProcessingException\n     */\n    private static void deployPersistenceUnitPhaseOne(\n            final DeploymentPhaseContext phaseContext,\n            final DeploymentUnit deploymentUnit,\n            final EEModuleDescription eeModuleDescription,\n            final Collection<ComponentDescription> components,\n            final ServiceTarget serviceTarget,\n            final ModuleClassLoader classLoader,\n            final PersistenceUnitMetadata pu,\n            final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException {\n        pu.setClassLoader(classLoader);\n        try {\n            ValidatorFactory validatorFactory = null;\n            final HashMap<String, ValidatorFactory> properties = new HashMap();\n\n            ProxyBeanManager proxyBeanManager = null;\n            // JPA 2.1 sections 3.5.1 + 9.1 require the CDI bean manager to be passed to the peristence provider\n            // if the persistence unit is contained in a deployment that is a CDI bean archive (has beans.xml).\n            if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {\n                proxyBeanManager = new ProxyBeanManager();\n            }\n\n            final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager);\n\n            deploymentUnit.addToAttachmentList(REMOVAL_KEY, new PersistenceAdaptorRemoval(pu, adaptor));\n\n            // add persistence provider specific properties\n            adaptor.addProviderProperties(properties, pu);\n\n            final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE);\n\n            deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName);\n\n            ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service);\n\n            boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu);\n            final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName());\n            final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName());\n\n            if (jtaDataSource != null && jtaDataSource.length() > 0) {\n                if (jtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(jtaDataSource), new CastingInjector<>(service.getJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) {\n                if (nonJtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(nonJtaDataSource), new CastingInjector<>(service.getNonJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            // JPA 2.0 8.2.1.5, container provides default JTA datasource\n            if (useDefaultDataSource) {\n                // try the one defined in the jpa subsystem\n                String defaultJtaDataSource = null;\n                if (eeModuleDescription != null) {\n                    defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource();\n                }\n\n                if (defaultJtaDataSource == null ||\n                        defaultJtaDataSource.isEmpty()) {\n                    // try the datasource defined in the JPA subsystem\n                    defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName());\n                }\n                if (defaultJtaDataSource != null &&\n                    !defaultJtaDataSource.isEmpty()) {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(defaultJtaDataSource), new CastingInjector<>(service.getJtaDataSourceInjector(), DataSource.class));\n                    JPA_LOGGER.tracef(\"%s is using the default data source '%s'\", puServiceName, defaultJtaDataSource);\n                }\n            }\n\n            try {\n                // save a thread local reference to the builder for setting up the second level cache dependencies\n                CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder);\n                adaptor.addProviderDependencies(pu);\n            }\n            finally {\n                CacheDeploymentListener.clearInternalDeploymentServiceBuilder();\n            }\n\n            phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS, puServiceName);\n\n            builder.setInitialMode(ServiceController.Mode.ACTIVE)\n                .addInjection(service.getPropertiesInjector(), properties);\n\n            // get async executor from Services.addServerExecutorDependency\n            addServerExecutorDependency(builder, service.getExecutorInjector(), false);\n\n            builder.install();\n\n            JPA_LOGGER.tracef(\"added PersistenceUnitService (phase 1 of 2) for '%s'.  PU is ready for injector action.\", puServiceName);\n        } catch (ServiceRegistryException e) {\n            throw JpaMessages.MESSAGES.failedToAddPersistenceUnit(e, pu.getPersistenceUnitName());\n        }\n    }","commit_id":"117bf0227481af24fe33ea711804c90e033f2c90","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Second phase of starting the persistence unit\n     *\n     * @param phaseContext\n     * @param deploymentUnit\n     * @param eeModuleDescription\n     * @param components\n     * @param serviceTarget\n     * @param classLoader\n     * @param pu\n     * @param provider\n     * @param adaptor\n     * @throws DeploymentUnitProcessingException\n     */\n    private static void deployPersistenceUnitPhaseTwo(\n            final DeploymentPhaseContext phaseContext,\n            final DeploymentUnit deploymentUnit,\n            final EEModuleDescription eeModuleDescription,\n            final Collection<ComponentDescription> components,\n            final ServiceTarget serviceTarget,\n            final ModuleClassLoader classLoader,\n            final PersistenceUnitMetadata pu,\n            final PersistenceProvider provider,\n            final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException {\n        pu.setClassLoader(classLoader);\n        try {\n            ValidatorFactory validatorFactory = null;\n            final HashMap<String, ValidatorFactory> properties = new HashMap();\n            if (!ValidationMode.NONE.equals(pu.getValidationMode())) {\n                // Get the CDI-enabled ValidatorFactory\n                validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY);\n            }\n\n            final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory);\n\n            deploymentUnit.addToAttachmentList(REMOVAL_KEY, new PersistenceAdaptorRemoval(pu, adaptor));\n\n            // add persistence provider specific properties\n            adaptor.addProviderProperties(properties, pu);\n\n            final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu);\n            deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName);\n\n            ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service);\n            // the PU service has to depend on the JPAService which is responsible for setting up the necessary JPA infrastructure (like registering the cache EventListener(s))\n            // @see https://issues.jboss.org/browse/WFLY-1531 for details\n            builder.addDependency(JPAServiceNames.getJPAServiceName());\n\n            // add dependency on first phase\n            builder.addDependency(puServiceName.append(FIRST_PHASE), new CastingInjector<>(service.getPhaseOnePersistenceUnitServiceImplInjector(), PhaseOnePersistenceUnitServiceImpl.class));\n\n            boolean useDefaultDataSource = true;\n            final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName());\n            final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName());\n\n            if (jtaDataSource != null && jtaDataSource.length() > 0) {\n                if (jtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(jtaDataSource), new CastingInjector<DataSource>(service.getJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) {\n                if (nonJtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(nonJtaDataSource), new CastingInjector<DataSource>(service.getNonJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            // JPA 2.0 8.2.1.5, container provides default JTA datasource\n            if (useDefaultDataSource) {\n                // try the one defined in the jpa subsystem\n                String defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName());\n                if ((defaultJtaDataSource == null ||\n                        defaultJtaDataSource.isEmpty()) &&\n                        eeModuleDescription != null) {\n                    // try the one defined in the ee subsystem\n                    defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource();\n                }\n                if (defaultJtaDataSource != null &&\n                    defaultJtaDataSource.length() > 0) {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(defaultJtaDataSource), new CastingInjector<DataSource>(service.getJtaDataSourceInjector(), DataSource.class));\n                    JPA_LOGGER.tracef(\"%s is using the default data source '%s'\", puServiceName, defaultJtaDataSource);\n                }\n            }\n\n            // JPA 2.1 sections 3.5.1 + 9.1 require the CDI bean manager to be passed to the peristence provider\n            // if the persistence unit is contained in a deployment that is a CDI bean archive (has beans.xml).\n            if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {\n                builder.addDependency(beanManagerServiceName(deploymentUnit),  new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class));\n            }\n\n            try {\n                // save a thread local reference to the builder for setting up the second level cache dependencies\n                CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder);\n                adaptor.addProviderDependencies(pu);\n            }\n            finally {\n                CacheDeploymentListener.clearInternalDeploymentServiceBuilder();\n            }\n\n\n            /**\n             * handle extension that binds a transaction scoped entity manager to specified JNDI location\n             */\n            entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName);\n\n            /**\n             * handle extension that binds an entity manager factory to specified JNDI location\n             */\n            entityManagerFactoryBind(eeModuleDescription, serviceTarget, pu, puServiceName);\n\n            builder.setInitialMode(ServiceController.Mode.ACTIVE)\n                .addInjection(service.getPropertiesInjector(), properties);\n\n            // get async executor from Services.addServerExecutorDependency\n            addServerExecutorDependency(builder, service.getExecutorInjector(), false);\n\n            builder.install();\n\n            JPA_LOGGER.tracef(\"added PersistenceUnitService (phase 2 of 2) for '%s'.  PU is ready for injector action.\", puServiceName);\n            addManagementConsole(deploymentUnit, pu, adaptor);\n\n        } catch (ServiceRegistryException e) {\n            throw JpaMessages.MESSAGES.failedToAddPersistenceUnit(e, pu.getPersistenceUnitName());\n        }\n    }","id":12134,"modified_method":"/**\n     * Second phase of starting the persistence unit\n     *\n     * @param phaseContext\n     * @param deploymentUnit\n     * @param eeModuleDescription\n     * @param components\n     * @param serviceTarget\n     * @param classLoader\n     * @param pu\n     * @param provider\n     * @param adaptor\n     * @throws DeploymentUnitProcessingException\n     */\n    private static void deployPersistenceUnitPhaseTwo(\n            final DeploymentPhaseContext phaseContext,\n            final DeploymentUnit deploymentUnit,\n            final EEModuleDescription eeModuleDescription,\n            final Collection<ComponentDescription> components,\n            final ServiceTarget serviceTarget,\n            final ModuleClassLoader classLoader,\n            final PersistenceUnitMetadata pu,\n            final PersistenceProvider provider,\n            final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException {\n        pu.setClassLoader(classLoader);\n        try {\n            ValidatorFactory validatorFactory = null;\n            final HashMap<String, ValidatorFactory> properties = new HashMap();\n            if (!ValidationMode.NONE.equals(pu.getValidationMode())) {\n                // Get the CDI-enabled ValidatorFactory\n                validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY);\n            }\n\n            final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory);\n\n            deploymentUnit.addToAttachmentList(REMOVAL_KEY, new PersistenceAdaptorRemoval(pu, adaptor));\n\n            // add persistence provider specific properties\n            adaptor.addProviderProperties(properties, pu);\n\n            final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu);\n            deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName);\n\n            deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName);\n\n            ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service);\n            // the PU service has to depend on the JPAService which is responsible for setting up the necessary JPA infrastructure (like registering the cache EventListener(s))\n            // @see https://issues.jboss.org/browse/WFLY-1531 for details\n            builder.addDependency(JPAServiceNames.getJPAServiceName());\n\n            // add dependency on first phase\n            builder.addDependency(puServiceName.append(FIRST_PHASE), new CastingInjector<>(service.getPhaseOnePersistenceUnitServiceImplInjector(), PhaseOnePersistenceUnitServiceImpl.class));\n\n            boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu);\n            final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName());\n            final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName());\n\n            if (jtaDataSource != null && jtaDataSource.length() > 0) {\n                if (jtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(jtaDataSource), new CastingInjector<>(service.getJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) {\n                if (nonJtaDataSource.startsWith(\"java:\")) {\n                    builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()));\n                    useDefaultDataSource = false;\n                } else {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(nonJtaDataSource), new CastingInjector<>(service.getNonJtaDataSourceInjector(), DataSource.class));\n                    useDefaultDataSource = false;\n                }\n            }\n            // JPA 2.0 8.2.1.5, container provides default JTA datasource\n            if (useDefaultDataSource) {\n                // try the default datasource defined in the ee subsystem\n                String defaultJtaDataSource = null;\n                if (eeModuleDescription != null) {\n                    defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource();\n                }\n\n                if (defaultJtaDataSource == null ||\n                        defaultJtaDataSource.isEmpty()) {\n                    // try the datasource defined in the jpa subsystem\n                    defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName());\n                }\n                if (defaultJtaDataSource != null &&\n                    !defaultJtaDataSource.isEmpty()) {\n                    builder.addDependency(AbstractDataSourceService.SERVICE_NAME_BASE.append(defaultJtaDataSource), new CastingInjector<>(service.getJtaDataSourceInjector(), DataSource.class));\n                    JPA_LOGGER.tracef(\"%s is using the default data source '%s'\", puServiceName, defaultJtaDataSource);\n                }\n            }\n\n            // JPA 2.1 sections 3.5.1 + 9.1 require the CDI bean manager to be passed to the peristence provider\n            // if the persistence unit is contained in a deployment that is a CDI bean archive (has beans.xml).\n            if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {\n                builder.addDependency(beanManagerServiceName(deploymentUnit),  new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class));\n            }\n\n            try {\n                // save a thread local reference to the builder for setting up the second level cache dependencies\n                CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder);\n                adaptor.addProviderDependencies(pu);\n            }\n            finally {\n                CacheDeploymentListener.clearInternalDeploymentServiceBuilder();\n            }\n\n\n            /**\n             * handle extension that binds a transaction scoped entity manager to specified JNDI location\n             */\n            entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName);\n\n            /**\n             * handle extension that binds an entity manager factory to specified JNDI location\n             */\n            entityManagerFactoryBind(eeModuleDescription, serviceTarget, pu, puServiceName);\n\n            builder.setInitialMode(ServiceController.Mode.ACTIVE)\n                .addInjection(service.getPropertiesInjector(), properties);\n\n            // get async executor from Services.addServerExecutorDependency\n            addServerExecutorDependency(builder, service.getExecutorInjector(), false);\n\n            builder.install();\n\n            JPA_LOGGER.tracef(\"added PersistenceUnitService (phase 2 of 2) for '%s'.  PU is ready for injector action.\", puServiceName);\n            addManagementConsole(deploymentUnit, pu, adaptor);\n\n        } catch (ServiceRegistryException e) {\n            throw JpaMessages.MESSAGES.failedToAddPersistenceUnit(e, pu.getPersistenceUnitName());\n        }\n    }","commit_id":"117bf0227481af24fe33ea711804c90e033f2c90","url":"https://github.com/wildfly/wildfly"},{"original_method":"private int getWhitespaces(int pos) {\n    if (pos >= myBufferEndOffset) return myBufferEndOffset;\n    final CharSequence lBuffer = myBuffer;\n\n    char c = lBuffer.charAt(pos);\n\n    while (c == ' ' || c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f') {\n      pos++;\n      if (pos == myBufferEndOffset) return pos;\n      c = lBuffer.charAt(pos);\n    }\n\n    return pos;\n  }","id":12135,"modified_method":"private int getWhitespaces(int pos) {\n    if (pos >= myBufferEndOffset) return myBufferEndOffset;\n    final CharSequence lBuffer = myBuffer;\n    final char[] lBufferArray = myBufferArray;\n\n    char c = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n\n    while (c == ' ' || c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f') {\n      pos++;\n      if (pos == myBufferEndOffset) return pos;\n      c = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n    }\n\n    return pos;\n  }","commit_id":"aa7fae426038495bd8b7ffc13cb592f6b2198616","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private int getClosingComment(int offset) {\n    int pos = offset;\n\n    final int lBufferEnd = myBufferEndOffset;\n    final CharSequence lBuffer = myBuffer;\n\n    while (pos < lBufferEnd - 1) {\n      final char c = lBuffer.charAt(pos);\n\n      if (c == '*' && lBuffer.charAt(pos + 1) == '/') {\n        break;\n      }\n      pos++;\n    }\n\n    return pos + 2;\n  }","id":12136,"modified_method":"private int getClosingComment(int offset) {\n    int pos = offset;\n\n    final int lBufferEnd = myBufferEndOffset;\n    final CharSequence lBuffer = myBuffer;\n    final char[] lBufferArray = myBufferArray;\n\n    while (pos < lBufferEnd - 1) {\n      final char c = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n\n      if (c == '*' && (lBufferArray != null ? lBufferArray[pos + 1]:lBuffer.charAt(pos + 1)) == '/') {\n        break;\n      }\n      pos++;\n    }\n\n    return pos + 2;\n  }","commit_id":"aa7fae426038495bd8b7ffc13cb592f6b2198616","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private int getIdentifier(int offset) {\n    final CharSequence lBuffer = myBuffer;\n\n    int hashCode = lBuffer.charAt(offset - 1) * 2;\n    final int lBufferEnd = myBufferEndOffset;\n\n    int pos = offset;\n    if (pos < lBufferEnd) {\n      char c = lBuffer.charAt(pos);\n\n      while (c >= 'a' && c <= 'z' ||\n             c >= 'A' && c <= 'Z' ||\n             c >= '0' && c <= '9' ||\n             c == '_' ||\n             c == '$' ||\n             c > 127 && Character.isJavaIdentifierPart(c)) {\n        pos++;\n        hashCode += c;\n\n        if (pos == lBufferEnd) break;\n        c = lBuffer.charAt(pos);\n      }\n    }\n\n    if (myTable.contains(hashCode, lBuffer, offset - 1)) {\n      myTokenType = myTable.getTokenType(hashCode);\n    }\n    else {\n      myTokenType = JavaTokenType.IDENTIFIER;\n    }\n\n    return pos;\n  }","id":12137,"modified_method":"private int getIdentifier(int offset) {\n    final CharSequence lBuffer = myBuffer;\n    final char[] lBufferArray = myBufferArray;\n\n    int hashCode = (lBufferArray != null ? lBufferArray[offset - 1]:lBuffer.charAt(offset - 1)) * 2;\n    final int lBufferEnd = myBufferEndOffset;\n\n    int pos = offset;\n    if (pos < lBufferEnd) {\n      char c = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n\n      while (c >= 'a' && c <= 'z' ||\n             c >= 'A' && c <= 'Z' ||\n             c >= '0' && c <= '9' ||\n             c == '_' ||\n             c == '$' ||\n             c > 127 && Character.isJavaIdentifierPart(c)) {\n        pos++;\n        hashCode += c;\n\n        if (pos == lBufferEnd) break;\n        c = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n      }\n    }\n\n    if (myTable.contains(hashCode, lBufferArray, lBuffer, offset - 1)) {\n      myTokenType = myTable.getTokenType(hashCode);\n    }\n    else {\n      myTokenType = JavaTokenType.IDENTIFIER;\n    }\n\n    return pos;\n  }","commit_id":"aa7fae426038495bd8b7ffc13cb592f6b2198616","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private int getLineTerminator(int offset) {\n    int pos = offset;\n    final int lBufferEnd = myBufferEndOffset;\n    final CharSequence lBuffer = myBuffer;\n\n    while (pos < lBufferEnd) {\n      final char c = lBuffer.charAt(pos);\n      if (c == '\\r' || c == '\\n') break;\n      pos++;\n    }\n\n    return pos;\n  }","id":12138,"modified_method":"private int getLineTerminator(int offset) {\n    int pos = offset;\n    final int lBufferEnd = myBufferEndOffset;\n    final CharSequence lBuffer = myBuffer;\n    final char[] lBufferArray = myBufferArray;\n\n    while (pos < lBufferEnd) {\n      final char c = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n      if (c == '\\r' || c == '\\n') break;\n      pos++;\n    }\n\n    return pos;\n  }","commit_id":"aa7fae426038495bd8b7ffc13cb592f6b2198616","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public final void start(CharSequence buffer, int startOffset, int endOffset, int initialState) {\n    myBuffer = buffer;\n    myBufferIndex = startOffset;\n    myBufferEndOffset = endOffset;\n    myTokenType = null;\n    myTokenEndOffset = startOffset;\n    myFlexLexer.reset(myBuffer, startOffset, endOffset, 0);\n  }","id":12139,"modified_method":"@Override\n  public final void start(CharSequence buffer, int startOffset, int endOffset, int initialState) {\n    myBuffer = buffer;\n    myBufferArray = CharArrayUtil.fromSequenceWithoutCopying(buffer);\n    myBufferIndex = startOffset;\n    myBufferEndOffset = endOffset;\n    myTokenType = null;\n    myTokenEndOffset = startOffset;\n    myFlexLexer.reset(myBuffer, startOffset, endOffset, 0);\n  }","commit_id":"aa7fae426038495bd8b7ffc13cb592f6b2198616","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private int getClosingParenthesis(int offset, char c) {\n    int pos = offset;\n    final int lBufferEnd = myBufferEndOffset;\n    if (pos >= lBufferEnd) return lBufferEnd;\n\n    final CharSequence lBuffer = myBuffer;\n    char cur = lBuffer.charAt(pos);\n\n    while (true) {\n      while (cur != c && cur != '\\n' && cur != '\\r' && cur != '\\\\') {\n        pos++;\n        if (pos >= lBufferEnd) return lBufferEnd;\n        cur = lBuffer.charAt(pos);\n      }\n\n      if (cur == '\\\\') {\n        pos++;\n        if (pos >= lBufferEnd) return lBufferEnd;\n        cur = lBuffer.charAt(pos);\n        if (cur == '\\n' || cur == '\\r') continue;\n        pos++;\n        if (pos >= lBufferEnd) return lBufferEnd;\n        cur = lBuffer.charAt(pos);\n      }\n      else if (cur == c) {\n        break;\n      }\n      else {\n        pos--;\n        break;\n      }\n    }\n\n    return pos + 1;\n  }","id":12140,"modified_method":"private int getClosingParenthesis(int offset, char c) {\n    int pos = offset;\n    final int lBufferEnd = myBufferEndOffset;\n    if (pos >= lBufferEnd) return lBufferEnd;\n\n    final CharSequence lBuffer = myBuffer;\n    final char[] lBufferArray = myBufferArray;\n    char cur = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n\n    while (true) {\n      while (cur != c && cur != '\\n' && cur != '\\r' && cur != '\\\\') {\n        pos++;\n        if (pos >= lBufferEnd) return lBufferEnd;\n        cur = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n      }\n\n      if (cur == '\\\\') {\n        pos++;\n        if (pos >= lBufferEnd) return lBufferEnd;\n        cur = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n        if (cur == '\\n' || cur == '\\r') continue;\n        pos++;\n        if (pos >= lBufferEnd) return lBufferEnd;\n        cur = lBufferArray != null ? lBufferArray[pos]:lBuffer.charAt(pos);\n      }\n      else if (cur == c) {\n        break;\n      }\n      else {\n        pos--;\n        break;\n      }\n    }\n\n    return pos + 1;\n  }","commit_id":"aa7fae426038495bd8b7ffc13cb592f6b2198616","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void _locateToken() {\n    if (myTokenEndOffset == myBufferEndOffset) {\n      myTokenType = null;\n      myBufferIndex = myBufferEndOffset;\n      return;\n    }\n\n    myBufferIndex = myTokenEndOffset;\n\n    final char c = myBuffer.charAt(myBufferIndex);\n    switch (c) {\n      default:\n        flexLocateToken();\n        break;\n\n      case ' ':\n      case '\\t':\n      case '\\n':\n      case '\\r':\n      case '\\f':\n        myTokenType = TokenType.WHITE_SPACE;\n        myTokenEndOffset = getWhitespaces(myBufferIndex + 1);\n        break;\n\n      case '/':\n        if (myBufferIndex + 1 >= myBufferEndOffset) {\n          myTokenType = JavaTokenType.DIV;\n          myTokenEndOffset = myBufferEndOffset;\n        }\n        else {\n          final char nextChar = myBuffer.charAt(myBufferIndex + 1);\n\n          if (nextChar == '/') {\n            myTokenType = JavaTokenType.END_OF_LINE_COMMENT;\n            myTokenEndOffset = getLineTerminator(myBufferIndex + 2);\n          }\n          else if (nextChar == '*') {\n            if (myBufferIndex + 2 >= myBufferEndOffset || myBuffer.charAt(myBufferIndex + 2) != '*' ||\n                (myBufferIndex + 3 < myBufferEndOffset && myBuffer.charAt(myBufferIndex + 3) == '/')) {\n              myTokenType = JavaTokenType.C_STYLE_COMMENT;\n              myTokenEndOffset = getClosingComment(myBufferIndex + 2);\n            }\n            else {\n              myTokenType = JavaDocElementType.DOC_COMMENT;\n              myTokenEndOffset = getClosingComment(myBufferIndex + 3);\n            }\n          }\n          else if (c > 127 && Character.isJavaIdentifierStart(c)) {\n            myTokenEndOffset = getIdentifier(myBufferIndex + 1);\n          }\n          else {\n            flexLocateToken();\n          }\n        }\n        break;\n\n      case '\"':\n      case '\\'':\n        myTokenType = c == '\"' ? JavaTokenType.STRING_LITERAL : JavaTokenType.CHARACTER_LITERAL;\n        myTokenEndOffset = getClosingParenthesis(myBufferIndex + 1, c);\n    }\n\n    if (myTokenEndOffset > myBufferEndOffset) {\n      myTokenEndOffset = myBufferEndOffset;\n    }\n  }","id":12141,"modified_method":"private void _locateToken() {\n    if (myTokenEndOffset == myBufferEndOffset) {\n      myTokenType = null;\n      myBufferIndex = myBufferEndOffset;\n      return;\n    }\n\n    myBufferIndex = myTokenEndOffset;\n\n    final char c = myBufferArray != null ? myBufferArray[myBufferIndex]:myBuffer.charAt(myBufferIndex);\n    switch (c) {\n      default:\n        flexLocateToken();\n        break;\n\n      case ' ':\n      case '\\t':\n      case '\\n':\n      case '\\r':\n      case '\\f':\n        myTokenType = TokenType.WHITE_SPACE;\n        myTokenEndOffset = getWhitespaces(myBufferIndex + 1);\n        break;\n\n      case '/':\n        if (myBufferIndex + 1 >= myBufferEndOffset) {\n          myTokenType = JavaTokenType.DIV;\n          myTokenEndOffset = myBufferEndOffset;\n        }\n        else {\n          final char nextChar = myBufferArray != null ? myBufferArray[myBufferIndex + 1]:myBuffer.charAt(myBufferIndex + 1);\n\n          if (nextChar == '/') {\n            myTokenType = JavaTokenType.END_OF_LINE_COMMENT;\n            myTokenEndOffset = getLineTerminator(myBufferIndex + 2);\n          }\n          else if (nextChar == '*') {\n            if (myBufferIndex + 2 >= myBufferEndOffset || \n                (myBufferArray != null ? myBufferArray[myBufferIndex + 2]:myBuffer.charAt(myBufferIndex + 2)) != '*' ||\n                (myBufferIndex + 3 < myBufferEndOffset && \n                 (myBufferArray != null ? myBufferArray[myBufferIndex + 3]:myBuffer.charAt(myBufferIndex + 3)) == '/')) {\n              myTokenType = JavaTokenType.C_STYLE_COMMENT;\n              myTokenEndOffset = getClosingComment(myBufferIndex + 2);\n            }\n            else {\n              myTokenType = JavaDocElementType.DOC_COMMENT;\n              myTokenEndOffset = getClosingComment(myBufferIndex + 3);\n            }\n          }\n          else if (c > 127 && Character.isJavaIdentifierStart(c)) {\n            myTokenEndOffset = getIdentifier(myBufferIndex + 1);\n          }\n          else {\n            flexLocateToken();\n          }\n        }\n        break;\n\n      case '\"':\n      case '\\'':\n        myTokenType = c == '\"' ? JavaTokenType.STRING_LITERAL : JavaTokenType.CHARACTER_LITERAL;\n        myTokenEndOffset = getClosingParenthesis(myBufferIndex + 1, c);\n    }\n\n    if (myTokenEndOffset > myBufferEndOffset) {\n      myTokenEndOffset = myBufferEndOffset;\n    }\n  }","commit_id":"aa7fae426038495bd8b7ffc13cb592f6b2198616","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean contains(int hashCode, final CharSequence buffer, int offset) {\n      int modHashCode = hashCode % NUM_ENTRIES;\n      final char[] kwd = myTable[modHashCode];\n      if (kwd == null) return false;\n\n      for (int j = 0; j < kwd.length; j++) {\n        if (buffer.charAt(j + offset) != kwd[j]) return false;\n      }\n      return true;\n    }","id":12142,"modified_method":"private boolean contains(int hashCode, final char[] bufferArray, final CharSequence buffer, int offset) {\n      int modHashCode = hashCode % NUM_ENTRIES;\n      final char[] kwd = myTable[modHashCode];\n      if (kwd == null) return false;\n\n      if (bufferArray != null) {\n        for (int j = 0; j < kwd.length; j++) {\n          if (bufferArray[j + offset] != kwd[j]) return false;\n        }\n      } else {\n        for (int j = 0; j < kwd.length; j++) {\n          if (buffer.charAt(j + offset) != kwd[j]) return false;\n        }\n      }\n      return true;\n    }","commit_id":"aa7fae426038495bd8b7ffc13cb592f6b2198616","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void goOneStep( DirectionData directionData,\n            DirectionData otherSide, Map<Integer, Collection<Hit>> hits,\n            boolean stopAsEarlyAsPossible, DirectionData startSide )\n    {\n        if ( !directionData.hasNext() )\n        {\n            return;\n        }\n        \n        Node nextNode = directionData.next();\n        LevelData otherSideHit = otherSide.visitedNodes.get( nextNode );\n        if ( otherSideHit != null )\n        {\n            // This is a hit\n            int depth = directionData.currentDepth + otherSideHit.depth;\n            if ( directionData.sharedFrozenDepth.value == null )\n            {\n                directionData.sharedFrozenDepth.value = depth;\n            }\n            if ( depth <= directionData.sharedFrozenDepth.value )\n            {\n                directionData.haveFoundSomething = true;\n                if ( depth < directionData.sharedFrozenDepth.value )\n                {\n                    directionData.sharedFrozenDepth.value = depth;\n                    // TODO Is it really ok to just stop the other side here?\n                    // I'm basing that decision on that it was the other side\n                    // which found the deeper paths (correct assumption?)\n                    otherSide.stop = true;\n                    if ( stopAsEarlyAsPossible )\n                    {\n                        // we can stop here because we won't get a less deep path than this.\n                        directionData.sharedStop.value = true;\n                    }\n                }\n                \n                // Add it to the list of hits\n                Collection<Hit> depthHits = hits.get( depth );\n                if ( depthHits == null )\n                {\n                    depthHits = new HashSet<Hit>();\n                    hits.put( depth, depthHits );\n                }\n                \n                DirectionData startSideData =\n                        directionData == startSide ? directionData : otherSide;\n                DirectionData endSideData =\n                        directionData == startSide ? otherSide : directionData;\n                depthHits.add( new Hit( startSideData, endSideData, nextNode ) );\n            }\n        }\n    }","id":12143,"modified_method":"private void goOneStep( DirectionData directionData, DirectionData otherSide, Hits hits,\n            boolean stopAsEarlyAsPossible, DirectionData startSide )\n    {\n        if ( !directionData.hasNext() )\n        {\n            return;\n        }\n        \n        Node nextNode = directionData.next();\n        LevelData otherSideHit = otherSide.visitedNodes.get( nextNode );\n        if ( otherSideHit != null )\n        {\n            // This is a hit\n            int depth = directionData.currentDepth + otherSideHit.depth;\n            if ( directionData.sharedFrozenDepth.value == null )\n            {\n                directionData.sharedFrozenDepth.value = depth;\n            }\n            if ( depth <= directionData.sharedFrozenDepth.value )\n            {\n                directionData.haveFoundSomething = true;\n                if ( depth < directionData.sharedFrozenDepth.value )\n                {\n                    directionData.sharedFrozenDepth.value = depth;\n                    // TODO Is it really ok to just stop the other side here?\n                    // I'm basing that decision on that it was the other side\n                    // which found the deeper paths (correct assumption?)\n                    otherSide.stop = true;\n                    if ( stopAsEarlyAsPossible )\n                    {\n                        // we can stop here because we won't get a less deep path than this.\n                        directionData.sharedStop.value = true;\n                    }\n                }\n                \n                // Add it to the list of hits\n                DirectionData startSideData =\n                        directionData == startSide ? directionData : otherSide;\n                DirectionData endSideData =\n                        directionData == startSide ? otherSide : directionData;\n                hits.add( new Hit( startSideData, endSideData, nextNode ), depth );\n            }\n        }\n    }","commit_id":"6ec8d7bf71953e7220095cd6bd65ba13a5ef1ec3","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Collection<Path> internalPaths( Node start, Node end,\n            boolean stopAsap )\n    {\n        if ( start.equals( end ) )\n        {\n            return Arrays.asList( PathImpl.singular( start ) );\n        }\n\n        Map<Integer, Collection<Hit>> hits =\n                new HashMap<Integer, Collection<Hit>>();\n        Collection<Long> sharedVisitedRels = new HashSet<Long>();\n        ValueHolder<Integer> sharedFrozenDepth = new ValueHolder<Integer>( null );\n        ValueHolder<Boolean> sharedStop = new ValueHolder<Boolean>( false );\n        ValueHolder<Integer> sharedCurrentDepth = new ValueHolder<Integer>( 0 );\n        final DirectionData startData = new DirectionData( start,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander );\n        final DirectionData endData = new DirectionData( end,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander.reversed() );\n        \n        while ( startData.hasNext() || endData.hasNext() )\n        {\n            goOneStep( startData, endData, hits, stopAsap, startData );\n            goOneStep( endData, startData, hits, stopAsap, startData );\n        }\n        return least( hits, start, end );\n    }","id":12144,"modified_method":"private Iterable<Path> internalPaths( Node start, Node end, boolean stopAsap )\n    {\n        if ( start.equals( end ) )\n        {\n            return Arrays.asList( PathImpl.singular( start ) );\n        }\n\n        Hits hits = new Hits();\n        Collection<Long> sharedVisitedRels = new HashSet<Long>();\n        ValueHolder<Integer> sharedFrozenDepth = new ValueHolder<Integer>( null );\n        ValueHolder<Boolean> sharedStop = new ValueHolder<Boolean>( false );\n        ValueHolder<Integer> sharedCurrentDepth = new ValueHolder<Integer>( 0 );\n        final DirectionData startData = new DirectionData( start,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander );\n        final DirectionData endData = new DirectionData( end,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander.reversed() );\n        \n        while ( startData.hasNext() || endData.hasNext() )\n        {\n            goOneStep( startData, endData, hits, stopAsap, startData );\n            goOneStep( endData, startData, hits, stopAsap, startData );\n        }\n        \n        Collection<Hit> least = hits.least();\n        return least != null ? hitsToPaths( least, start, end ) : Collections.<Path>emptyList();\n    }","commit_id":"6ec8d7bf71953e7220095cd6bd65ba13a5ef1ec3","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Collection<LinkedList<Relationship>> getPaths( Hit hit, DirectionData data )\n    {\n        LevelData levelData = data.visitedNodes.get( hit.connectingNode );\n        if ( levelData.depth == 0 )\n        {\n            Collection<LinkedList<Relationship>> result = new ArrayList<LinkedList<Relationship>>();\n            result.add( new LinkedList<Relationship>() );\n            return result;\n        }\n        \n        Collection<PathData> set = new ArrayList<PathData>();\n        GraphDatabaseService graphDb = data.startNode.getGraphDatabase();\n        for ( Long rel : levelData.relsToHere )\n        {\n            set.add( new PathData( hit.connectingNode, new LinkedList<Relationship>(\n                    Arrays.asList( graphDb.getRelationshipById( rel ) ) ) ) );\n        }\n        for ( int i = 0; i < levelData.depth - 1; i++ )\n        {\n            // One level\n            Collection<PathData> nextSet = new ArrayList<PathData>();\n            for ( PathData entry : set )\n            {\n                // One path...\n                int counter = 0;\n                Node otherNode = entry.rels.getFirst().getOtherNode( entry.node );\n                LevelData otherLevelData = data.visitedNodes.get( otherNode );\n                for ( Long rel : otherLevelData.relsToHere )\n                {\n                    // ...may split into several paths\n                    LinkedList<Relationship> rels = counter++ == 0 ? entry.rels : \n                        new LinkedList<Relationship>( entry.rels );\n                    rels.addFirst( graphDb.getRelationshipById( rel ) );\n                    nextSet.add( new PathData( otherNode, rels ) );\n                }\n            }\n            set = nextSet;\n        }\n        \n        return new CollectionWrapper<LinkedList<Relationship>, PathData>( set )\n        {\n            @Override\n            protected PathData objectToUnderlyingObject( LinkedList<Relationship> list )\n            {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            protected LinkedList<Relationship> underlyingObjectToObject( PathData object )\n            {\n                return object.rels;\n            }\n        };\n    }","id":12145,"modified_method":"private static Iterable<LinkedList<Relationship>> getPaths( Hit hit, DirectionData data )\n    {\n        LevelData levelData = data.visitedNodes.get( hit.connectingNode );\n        if ( levelData.depth == 0 )\n        {\n            Collection<LinkedList<Relationship>> result = new ArrayList<LinkedList<Relationship>>();\n            result.add( new LinkedList<Relationship>() );\n            return result;\n        }\n        \n        Collection<PathData> set = new ArrayList<PathData>();\n        GraphDatabaseService graphDb = data.startNode.getGraphDatabase();\n        for ( Long rel : levelData.relsToHere )\n        {\n            set.add( new PathData( hit.connectingNode, new LinkedList<Relationship>(\n                    Arrays.asList( graphDb.getRelationshipById( rel ) ) ) ) );\n        }\n        for ( int i = 0; i < levelData.depth - 1; i++ )\n        {\n            // One level\n            Collection<PathData> nextSet = new ArrayList<PathData>();\n            for ( PathData entry : set )\n            {\n                // One path...\n                int counter = 0;\n                Node otherNode = entry.rels.getFirst().getOtherNode( entry.node );\n                LevelData otherLevelData = data.visitedNodes.get( otherNode );\n                for ( Long rel : otherLevelData.relsToHere )\n                {\n                    // ...may split into several paths\n                    LinkedList<Relationship> rels = counter++ == 0 ? entry.rels : \n                        new LinkedList<Relationship>( entry.rels );\n                    rels.addFirst( graphDb.getRelationshipById( rel ) );\n                    nextSet.add( new PathData( otherNode, rels ) );\n                }\n            }\n            set = nextSet;\n        }\n        \n        return new IterableWrapper<LinkedList<Relationship>, PathData>( set )\n        {\n            @Override\n            protected LinkedList<Relationship> underlyingObjectToObject( PathData object )\n            {\n                return object.rels;\n            }\n        };\n    }","commit_id":"6ec8d7bf71953e7220095cd6bd65ba13a5ef1ec3","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ShortestPath( int maxDepth, RelationshipExpander relExpander )\n    {\n        this.maxDepth = maxDepth;\n        this.relExpander = relExpander;\n    }","id":12146,"modified_method":"/**\n     * Constructs a new stortest path algorithm.\n     * @param maxDepth the maximum depth for the traversal. Returned paths\n     * will never have a greater {@link Path#length()} than {@code maxDepth}.\n     * @param relExpander the {@link RelationshipExpander} to use for deciding\n     * which relationships to expand for each {@link Node}.\n     */\n    public ShortestPath( int maxDepth, RelationshipExpander relExpander )\n    {\n        this.maxDepth = maxDepth;\n        this.relExpander = relExpander;\n    }","commit_id":"6ec8d7bf71953e7220095cd6bd65ba13a5ef1ec3","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Collection<Path> hitsToPaths( Collection<Hit> depthHits, Node start, Node end )\n    {\n        Collection<Path> paths = new ArrayList<Path>();\n        for ( Hit hit : depthHits )\n        {\n            Collection<LinkedList<Relationship>> startPaths = getPaths( hit, hit.start );\n            Collection<LinkedList<Relationship>> endPaths = getPaths( hit, hit.end );\n            for ( LinkedList<Relationship> startPath : startPaths )\n            {\n                PathImpl.Builder startBuilder = toBuilder( start, startPath );\n                for ( LinkedList<Relationship> endPath : endPaths )\n                {\n                    PathImpl.Builder endBuilder = toBuilder( end, endPath );\n                    Path path = startBuilder.build( endBuilder );\n                    paths.add( path );\n                }\n            }\n        }\n        return paths;\n    }","id":12147,"modified_method":"private static Iterable<Path> hitsToPaths( Collection<Hit> depthHits, Node start, Node end )\n    {\n        Collection<Path> paths = new ArrayList<Path>();\n        for ( Hit hit : depthHits )\n        {\n            Iterable<LinkedList<Relationship>> startPaths = getPaths( hit, hit.start );\n            Iterable<LinkedList<Relationship>> endPaths = getPaths( hit, hit.end );\n            for ( LinkedList<Relationship> startPath : startPaths )\n            {\n                PathImpl.Builder startBuilder = toBuilder( start, startPath );\n                for ( LinkedList<Relationship> endPath : endPaths )\n                {\n                    PathImpl.Builder endBuilder = toBuilder( end, endPath );\n                    Path path = startBuilder.build( endBuilder );\n                    paths.add( path );\n                }\n            }\n        }\n        return paths;\n    }","commit_id":"6ec8d7bf71953e7220095cd6bd65ba13a5ef1ec3","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Path findSinglePath( Node start, Node end )\n    {\n        Collection<Path> paths = internalPaths( start, end, true );\n        return paths.isEmpty() ? null : paths.iterator().next();\n    }","id":12148,"modified_method":"public Path findSinglePath( Node start, Node end )\n    {\n        Iterator<Path> paths = internalPaths( start, end, true ).iterator();\n        return paths.hasNext() ? paths.next() : null;\n    }","commit_id":"6ec8d7bf71953e7220095cd6bd65ba13a5ef1ec3","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void goOneStep( DirectionData directionData,\n            DirectionData otherSide, Map<Integer, Collection<Hit>> hits,\n            boolean stopAsEarlyAsPossible, DirectionData startSide )\n    {\n        if ( !directionData.hasNext() )\n        {\n            return;\n        }\n        \n        Node nextNode = directionData.next();\n        LevelData otherSideHit = otherSide.visitedNodes.get( nextNode );\n        if ( otherSideHit != null )\n        {\n            // This is a hit\n            int depth = directionData.currentDepth + otherSideHit.depth;\n            if ( directionData.sharedFrozenDepth.value == null )\n            {\n                directionData.sharedFrozenDepth.value = depth;\n            }\n            if ( depth <= directionData.sharedFrozenDepth.value )\n            {\n                directionData.haveFoundSomething = true;\n                if ( depth < directionData.sharedFrozenDepth.value )\n                {\n                    directionData.sharedFrozenDepth.value = depth;\n                    // TODO Is it really ok to just stop the other side here?\n                    // I'm basing that decision on that it was the other side\n                    // which found the deeper paths (correct assumption?)\n                    otherSide.stop = true;\n                    if ( stopAsEarlyAsPossible )\n                    {\n                        // we can stop here because we won't get a less deep path than this.\n                        directionData.sharedStop.value = true;\n                    }\n                }\n                \n                // Add it to the list of hits\n                Collection<Hit> depthHits = hits.get( depth );\n                if ( depthHits == null )\n                {\n                    depthHits = new HashSet<Hit>();\n                    hits.put( depth, depthHits );\n                }\n                \n                DirectionData startSideData =\n                        directionData == startSide ? directionData : otherSide;\n                DirectionData endSideData =\n                        directionData == startSide ? otherSide : directionData;\n                depthHits.add( new Hit( startSideData, endSideData, nextNode ) );\n            }\n        }\n    }","id":12149,"modified_method":"private void goOneStep( DirectionData directionData, DirectionData otherSide, Hits hits,\n            boolean stopAsEarlyAsPossible, DirectionData startSide )\n    {\n        if ( !directionData.hasNext() )\n        {\n            return;\n        }\n        \n        Node nextNode = directionData.next();\n        LevelData otherSideHit = otherSide.visitedNodes.get( nextNode );\n        if ( otherSideHit != null )\n        {\n            // This is a hit\n            int depth = directionData.currentDepth + otherSideHit.depth;\n            if ( directionData.sharedFrozenDepth.value == null )\n            {\n                directionData.sharedFrozenDepth.value = depth;\n            }\n            if ( depth <= directionData.sharedFrozenDepth.value )\n            {\n                directionData.haveFoundSomething = true;\n                if ( depth < directionData.sharedFrozenDepth.value )\n                {\n                    directionData.sharedFrozenDepth.value = depth;\n                    // TODO Is it really ok to just stop the other side here?\n                    // I'm basing that decision on that it was the other side\n                    // which found the deeper paths (correct assumption?)\n                    otherSide.stop = true;\n                    if ( stopAsEarlyAsPossible )\n                    {\n                        // we can stop here because we won't get a less deep path than this.\n                        directionData.sharedStop.value = true;\n                    }\n                }\n                \n                // Add it to the list of hits\n                DirectionData startSideData =\n                        directionData == startSide ? directionData : otherSide;\n                DirectionData endSideData =\n                        directionData == startSide ? otherSide : directionData;\n                hits.add( new Hit( startSideData, endSideData, nextNode ), depth );\n            }\n        }\n    }","commit_id":"14b032c36f039ce4282e6d41772b9f3b89b8356f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ShortestPath( int maxDepth, RelationshipExpander relExpander )\n    {\n        this.maxDepth = maxDepth;\n        this.relExpander = relExpander;\n    }","id":12150,"modified_method":"/**\n     * Constructs a new stortest path algorithm.\n     * @param maxDepth the maximum depth for the traversal. Returned paths\n     * will never have a greater {@link Path#length()} than {@code maxDepth}.\n     * @param relExpander the {@link RelationshipExpander} to use for deciding\n     * which relationships to expand for each {@link Node}.\n     */\n    public ShortestPath( int maxDepth, RelationshipExpander relExpander )\n    {\n        this.maxDepth = maxDepth;\n        this.relExpander = relExpander;\n    }","commit_id":"14b032c36f039ce4282e6d41772b9f3b89b8356f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Collection<LinkedList<Relationship>> getPaths( Hit hit, DirectionData data )\n    {\n        LevelData levelData = data.visitedNodes.get( hit.connectingNode );\n        if ( levelData.depth == 0 )\n        {\n            Collection<LinkedList<Relationship>> result = new ArrayList<LinkedList<Relationship>>();\n            result.add( new LinkedList<Relationship>() );\n            return result;\n        }\n        \n        Collection<PathData> set = new ArrayList<PathData>();\n        GraphDatabaseService graphDb = data.startNode.getGraphDatabase();\n        for ( Long rel : levelData.relsToHere )\n        {\n            set.add( new PathData( hit.connectingNode, new LinkedList<Relationship>(\n                    Arrays.asList( graphDb.getRelationshipById( rel ) ) ) ) );\n        }\n        for ( int i = 0; i < levelData.depth - 1; i++ )\n        {\n            // One level\n            Collection<PathData> nextSet = new ArrayList<PathData>();\n            for ( PathData entry : set )\n            {\n                // One path...\n                int counter = 0;\n                Node otherNode = entry.rels.getFirst().getOtherNode( entry.node );\n                LevelData otherLevelData = data.visitedNodes.get( otherNode );\n                for ( Long rel : otherLevelData.relsToHere )\n                {\n                    // ...may split into several paths\n                    LinkedList<Relationship> rels = counter++ == 0 ? entry.rels : \n                        new LinkedList<Relationship>( entry.rels );\n                    rels.addFirst( graphDb.getRelationshipById( rel ) );\n                    nextSet.add( new PathData( otherNode, rels ) );\n                }\n            }\n            set = nextSet;\n        }\n        \n        return new CollectionWrapper<LinkedList<Relationship>, PathData>( set )\n        {\n            @Override\n            protected PathData objectToUnderlyingObject( LinkedList<Relationship> list )\n            {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            protected LinkedList<Relationship> underlyingObjectToObject( PathData object )\n            {\n                return object.rels;\n            }\n        };\n    }","id":12151,"modified_method":"private static Iterable<LinkedList<Relationship>> getPaths( Hit hit, DirectionData data )\n    {\n        LevelData levelData = data.visitedNodes.get( hit.connectingNode );\n        if ( levelData.depth == 0 )\n        {\n            Collection<LinkedList<Relationship>> result = new ArrayList<LinkedList<Relationship>>();\n            result.add( new LinkedList<Relationship>() );\n            return result;\n        }\n        \n        Collection<PathData> set = new ArrayList<PathData>();\n        GraphDatabaseService graphDb = data.startNode.getGraphDatabase();\n        for ( Long rel : levelData.relsToHere )\n        {\n            set.add( new PathData( hit.connectingNode, new LinkedList<Relationship>(\n                    Arrays.asList( graphDb.getRelationshipById( rel ) ) ) ) );\n        }\n        for ( int i = 0; i < levelData.depth - 1; i++ )\n        {\n            // One level\n            Collection<PathData> nextSet = new ArrayList<PathData>();\n            for ( PathData entry : set )\n            {\n                // One path...\n                int counter = 0;\n                Node otherNode = entry.rels.getFirst().getOtherNode( entry.node );\n                LevelData otherLevelData = data.visitedNodes.get( otherNode );\n                for ( Long rel : otherLevelData.relsToHere )\n                {\n                    // ...may split into several paths\n                    LinkedList<Relationship> rels = counter++ == 0 ? entry.rels : \n                        new LinkedList<Relationship>( entry.rels );\n                    rels.addFirst( graphDb.getRelationshipById( rel ) );\n                    nextSet.add( new PathData( otherNode, rels ) );\n                }\n            }\n            set = nextSet;\n        }\n        \n        return new IterableWrapper<LinkedList<Relationship>, PathData>( set )\n        {\n            @Override\n            protected LinkedList<Relationship> underlyingObjectToObject( PathData object )\n            {\n                return object.rels;\n            }\n        };\n    }","commit_id":"14b032c36f039ce4282e6d41772b9f3b89b8356f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Path findSinglePath( Node start, Node end )\n    {\n        Collection<Path> paths = internalPaths( start, end, true );\n        return paths.isEmpty() ? null : paths.iterator().next();\n    }","id":12152,"modified_method":"public Path findSinglePath( Node start, Node end )\n    {\n        Iterator<Path> paths = internalPaths( start, end, true ).iterator();\n        return paths.hasNext() ? paths.next() : null;\n    }","commit_id":"14b032c36f039ce4282e6d41772b9f3b89b8356f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Collection<Path> internalPaths( Node start, Node end,\n            boolean stopAsap )\n    {\n        if ( start.equals( end ) )\n        {\n            return Arrays.asList( PathImpl.singular( start ) );\n        }\n\n        Map<Integer, Collection<Hit>> hits =\n                new HashMap<Integer, Collection<Hit>>();\n        Collection<Long> sharedVisitedRels = new HashSet<Long>();\n        ValueHolder<Integer> sharedFrozenDepth = new ValueHolder<Integer>( null );\n        ValueHolder<Boolean> sharedStop = new ValueHolder<Boolean>( false );\n        ValueHolder<Integer> sharedCurrentDepth = new ValueHolder<Integer>( 0 );\n        final DirectionData startData = new DirectionData( start,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander );\n        final DirectionData endData = new DirectionData( end,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander.reversed() );\n        \n        while ( startData.hasNext() || endData.hasNext() )\n        {\n            goOneStep( startData, endData, hits, stopAsap, startData );\n            goOneStep( endData, startData, hits, stopAsap, startData );\n        }\n        return least( hits, start, end );\n    }","id":12153,"modified_method":"private Iterable<Path> internalPaths( Node start, Node end, boolean stopAsap )\n    {\n        if ( start.equals( end ) )\n        {\n            return Arrays.asList( PathImpl.singular( start ) );\n        }\n\n        Hits hits = new Hits();\n        Collection<Long> sharedVisitedRels = new HashSet<Long>();\n        ValueHolder<Integer> sharedFrozenDepth = new ValueHolder<Integer>( null );\n        ValueHolder<Boolean> sharedStop = new ValueHolder<Boolean>( false );\n        ValueHolder<Integer> sharedCurrentDepth = new ValueHolder<Integer>( 0 );\n        final DirectionData startData = new DirectionData( start,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander );\n        final DirectionData endData = new DirectionData( end,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander.reversed() );\n        \n        while ( startData.hasNext() || endData.hasNext() )\n        {\n            goOneStep( startData, endData, hits, stopAsap, startData );\n            goOneStep( endData, startData, hits, stopAsap, startData );\n        }\n        \n        Collection<Hit> least = hits.least();\n        return least != null ? hitsToPaths( least, start, end ) : Collections.<Path>emptyList();\n    }","commit_id":"14b032c36f039ce4282e6d41772b9f3b89b8356f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Collection<Path> hitsToPaths( Collection<Hit> depthHits, Node start, Node end )\n    {\n        Collection<Path> paths = new ArrayList<Path>();\n        for ( Hit hit : depthHits )\n        {\n            Collection<LinkedList<Relationship>> startPaths = getPaths( hit, hit.start );\n            Collection<LinkedList<Relationship>> endPaths = getPaths( hit, hit.end );\n            for ( LinkedList<Relationship> startPath : startPaths )\n            {\n                PathImpl.Builder startBuilder = toBuilder( start, startPath );\n                for ( LinkedList<Relationship> endPath : endPaths )\n                {\n                    PathImpl.Builder endBuilder = toBuilder( end, endPath );\n                    Path path = startBuilder.build( endBuilder );\n                    paths.add( path );\n                }\n            }\n        }\n        return paths;\n    }","id":12154,"modified_method":"private static Iterable<Path> hitsToPaths( Collection<Hit> depthHits, Node start, Node end )\n    {\n        Collection<Path> paths = new ArrayList<Path>();\n        for ( Hit hit : depthHits )\n        {\n            Iterable<LinkedList<Relationship>> startPaths = getPaths( hit, hit.start );\n            Iterable<LinkedList<Relationship>> endPaths = getPaths( hit, hit.end );\n            for ( LinkedList<Relationship> startPath : startPaths )\n            {\n                PathImpl.Builder startBuilder = toBuilder( start, startPath );\n                for ( LinkedList<Relationship> endPath : endPaths )\n                {\n                    PathImpl.Builder endBuilder = toBuilder( end, endPath );\n                    Path path = startBuilder.build( endBuilder );\n                    paths.add( path );\n                }\n            }\n        }\n        return paths;\n    }","commit_id":"14b032c36f039ce4282e6d41772b9f3b89b8356f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ShortestPath( int maxDepth, RelationshipExpander relExpander )\n    {\n        this.maxDepth = maxDepth;\n        this.relExpander = relExpander;\n    }","id":12155,"modified_method":"/**\n     * Constructs a new stortest path algorithm.\n     * @param maxDepth the maximum depth for the traversal. Returned paths\n     * will never have a greater {@link Path#length()} than {@code maxDepth}.\n     * @param relExpander the {@link RelationshipExpander} to use for deciding\n     * which relationships to expand for each {@link Node}.\n     */\n    public ShortestPath( int maxDepth, RelationshipExpander relExpander )\n    {\n        this.maxDepth = maxDepth;\n        this.relExpander = relExpander;\n    }","commit_id":"af45ebcfb5762a48dabc0cde1d3692a3f980d931","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Collection<Path> internalPaths( Node start, Node end,\n            boolean stopAsap )\n    {\n        if ( start.equals( end ) )\n        {\n            return Arrays.asList( PathImpl.singular( start ) );\n        }\n\n        Map<Integer, Collection<Hit>> hits =\n                new HashMap<Integer, Collection<Hit>>();\n        Collection<Long> sharedVisitedRels = new HashSet<Long>();\n        ValueHolder<Integer> sharedFrozenDepth = new ValueHolder<Integer>( null );\n        ValueHolder<Boolean> sharedStop = new ValueHolder<Boolean>( false );\n        ValueHolder<Integer> sharedCurrentDepth = new ValueHolder<Integer>( 0 );\n        final DirectionData startData = new DirectionData( start,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander );\n        final DirectionData endData = new DirectionData( end,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander.reversed() );\n        \n        while ( startData.hasNext() || endData.hasNext() )\n        {\n            goOneStep( startData, endData, hits, stopAsap, startData );\n            goOneStep( endData, startData, hits, stopAsap, startData );\n        }\n        return least( hits, start, end );\n    }","id":12156,"modified_method":"private Iterable<Path> internalPaths( Node start, Node end, boolean stopAsap )\n    {\n        if ( start.equals( end ) )\n        {\n            return Arrays.asList( PathImpl.singular( start ) );\n        }\n\n        Hits hits = new Hits();\n        Collection<Long> sharedVisitedRels = new HashSet<Long>();\n        ValueHolder<Integer> sharedFrozenDepth = new ValueHolder<Integer>( null );\n        ValueHolder<Boolean> sharedStop = new ValueHolder<Boolean>( false );\n        ValueHolder<Integer> sharedCurrentDepth = new ValueHolder<Integer>( 0 );\n        final DirectionData startData = new DirectionData( start,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander );\n        final DirectionData endData = new DirectionData( end,\n                sharedVisitedRels, sharedFrozenDepth, sharedStop,\n                sharedCurrentDepth, stopAsap, relExpander.reversed() );\n        \n        while ( startData.hasNext() || endData.hasNext() )\n        {\n            goOneStep( startData, endData, hits, stopAsap, startData );\n            goOneStep( endData, startData, hits, stopAsap, startData );\n        }\n        \n        Collection<Hit> least = hits.least();\n        return least != null ? hitsToPaths( least, start, end ) : Collections.<Path>emptyList();\n    }","commit_id":"af45ebcfb5762a48dabc0cde1d3692a3f980d931","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Collection<Path> hitsToPaths( Collection<Hit> depthHits, Node start, Node end )\n    {\n        Collection<Path> paths = new ArrayList<Path>();\n        for ( Hit hit : depthHits )\n        {\n            Collection<LinkedList<Relationship>> startPaths = getPaths( hit, hit.start );\n            Collection<LinkedList<Relationship>> endPaths = getPaths( hit, hit.end );\n            for ( LinkedList<Relationship> startPath : startPaths )\n            {\n                PathImpl.Builder startBuilder = toBuilder( start, startPath );\n                for ( LinkedList<Relationship> endPath : endPaths )\n                {\n                    PathImpl.Builder endBuilder = toBuilder( end, endPath );\n                    Path path = startBuilder.build( endBuilder );\n                    paths.add( path );\n                }\n            }\n        }\n        return paths;\n    }","id":12157,"modified_method":"private static Iterable<Path> hitsToPaths( Collection<Hit> depthHits, Node start, Node end )\n    {\n        Collection<Path> paths = new ArrayList<Path>();\n        for ( Hit hit : depthHits )\n        {\n            Iterable<LinkedList<Relationship>> startPaths = getPaths( hit, hit.start );\n            Iterable<LinkedList<Relationship>> endPaths = getPaths( hit, hit.end );\n            for ( LinkedList<Relationship> startPath : startPaths )\n            {\n                PathImpl.Builder startBuilder = toBuilder( start, startPath );\n                for ( LinkedList<Relationship> endPath : endPaths )\n                {\n                    PathImpl.Builder endBuilder = toBuilder( end, endPath );\n                    Path path = startBuilder.build( endBuilder );\n                    paths.add( path );\n                }\n            }\n        }\n        return paths;\n    }","commit_id":"af45ebcfb5762a48dabc0cde1d3692a3f980d931","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void goOneStep( DirectionData directionData,\n            DirectionData otherSide, Map<Integer, Collection<Hit>> hits,\n            boolean stopAsEarlyAsPossible, DirectionData startSide )\n    {\n        if ( !directionData.hasNext() )\n        {\n            return;\n        }\n        \n        Node nextNode = directionData.next();\n        LevelData otherSideHit = otherSide.visitedNodes.get( nextNode );\n        if ( otherSideHit != null )\n        {\n            // This is a hit\n            int depth = directionData.currentDepth + otherSideHit.depth;\n            if ( directionData.sharedFrozenDepth.value == null )\n            {\n                directionData.sharedFrozenDepth.value = depth;\n            }\n            if ( depth <= directionData.sharedFrozenDepth.value )\n            {\n                directionData.haveFoundSomething = true;\n                if ( depth < directionData.sharedFrozenDepth.value )\n                {\n                    directionData.sharedFrozenDepth.value = depth;\n                    // TODO Is it really ok to just stop the other side here?\n                    // I'm basing that decision on that it was the other side\n                    // which found the deeper paths (correct assumption?)\n                    otherSide.stop = true;\n                    if ( stopAsEarlyAsPossible )\n                    {\n                        // we can stop here because we won't get a less deep path than this.\n                        directionData.sharedStop.value = true;\n                    }\n                }\n                \n                // Add it to the list of hits\n                Collection<Hit> depthHits = hits.get( depth );\n                if ( depthHits == null )\n                {\n                    depthHits = new HashSet<Hit>();\n                    hits.put( depth, depthHits );\n                }\n                \n                DirectionData startSideData =\n                        directionData == startSide ? directionData : otherSide;\n                DirectionData endSideData =\n                        directionData == startSide ? otherSide : directionData;\n                depthHits.add( new Hit( startSideData, endSideData, nextNode ) );\n            }\n        }\n    }","id":12158,"modified_method":"private void goOneStep( DirectionData directionData, DirectionData otherSide, Hits hits,\n            boolean stopAsEarlyAsPossible, DirectionData startSide )\n    {\n        if ( !directionData.hasNext() )\n        {\n            return;\n        }\n        \n        Node nextNode = directionData.next();\n        LevelData otherSideHit = otherSide.visitedNodes.get( nextNode );\n        if ( otherSideHit != null )\n        {\n            // This is a hit\n            int depth = directionData.currentDepth + otherSideHit.depth;\n            if ( directionData.sharedFrozenDepth.value == null )\n            {\n                directionData.sharedFrozenDepth.value = depth;\n            }\n            if ( depth <= directionData.sharedFrozenDepth.value )\n            {\n                directionData.haveFoundSomething = true;\n                if ( depth < directionData.sharedFrozenDepth.value )\n                {\n                    directionData.sharedFrozenDepth.value = depth;\n                    // TODO Is it really ok to just stop the other side here?\n                    // I'm basing that decision on that it was the other side\n                    // which found the deeper paths (correct assumption?)\n                    otherSide.stop = true;\n                    if ( stopAsEarlyAsPossible )\n                    {\n                        // we can stop here because we won't get a less deep path than this.\n                        directionData.sharedStop.value = true;\n                    }\n                }\n                \n                // Add it to the list of hits\n                DirectionData startSideData =\n                        directionData == startSide ? directionData : otherSide;\n                DirectionData endSideData =\n                        directionData == startSide ? otherSide : directionData;\n                hits.add( new Hit( startSideData, endSideData, nextNode ), depth );\n            }\n        }\n    }","commit_id":"af45ebcfb5762a48dabc0cde1d3692a3f980d931","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Collection<LinkedList<Relationship>> getPaths( Hit hit, DirectionData data )\n    {\n        LevelData levelData = data.visitedNodes.get( hit.connectingNode );\n        if ( levelData.depth == 0 )\n        {\n            Collection<LinkedList<Relationship>> result = new ArrayList<LinkedList<Relationship>>();\n            result.add( new LinkedList<Relationship>() );\n            return result;\n        }\n        \n        Collection<PathData> set = new ArrayList<PathData>();\n        GraphDatabaseService graphDb = data.startNode.getGraphDatabase();\n        for ( Long rel : levelData.relsToHere )\n        {\n            set.add( new PathData( hit.connectingNode, new LinkedList<Relationship>(\n                    Arrays.asList( graphDb.getRelationshipById( rel ) ) ) ) );\n        }\n        for ( int i = 0; i < levelData.depth - 1; i++ )\n        {\n            // One level\n            Collection<PathData> nextSet = new ArrayList<PathData>();\n            for ( PathData entry : set )\n            {\n                // One path...\n                int counter = 0;\n                Node otherNode = entry.rels.getFirst().getOtherNode( entry.node );\n                LevelData otherLevelData = data.visitedNodes.get( otherNode );\n                for ( Long rel : otherLevelData.relsToHere )\n                {\n                    // ...may split into several paths\n                    LinkedList<Relationship> rels = counter++ == 0 ? entry.rels : \n                        new LinkedList<Relationship>( entry.rels );\n                    rels.addFirst( graphDb.getRelationshipById( rel ) );\n                    nextSet.add( new PathData( otherNode, rels ) );\n                }\n            }\n            set = nextSet;\n        }\n        \n        return new CollectionWrapper<LinkedList<Relationship>, PathData>( set )\n        {\n            @Override\n            protected PathData objectToUnderlyingObject( LinkedList<Relationship> list )\n            {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            protected LinkedList<Relationship> underlyingObjectToObject( PathData object )\n            {\n                return object.rels;\n            }\n        };\n    }","id":12159,"modified_method":"private static Iterable<LinkedList<Relationship>> getPaths( Hit hit, DirectionData data )\n    {\n        LevelData levelData = data.visitedNodes.get( hit.connectingNode );\n        if ( levelData.depth == 0 )\n        {\n            Collection<LinkedList<Relationship>> result = new ArrayList<LinkedList<Relationship>>();\n            result.add( new LinkedList<Relationship>() );\n            return result;\n        }\n        \n        Collection<PathData> set = new ArrayList<PathData>();\n        GraphDatabaseService graphDb = data.startNode.getGraphDatabase();\n        for ( Long rel : levelData.relsToHere )\n        {\n            set.add( new PathData( hit.connectingNode, new LinkedList<Relationship>(\n                    Arrays.asList( graphDb.getRelationshipById( rel ) ) ) ) );\n        }\n        for ( int i = 0; i < levelData.depth - 1; i++ )\n        {\n            // One level\n            Collection<PathData> nextSet = new ArrayList<PathData>();\n            for ( PathData entry : set )\n            {\n                // One path...\n                int counter = 0;\n                Node otherNode = entry.rels.getFirst().getOtherNode( entry.node );\n                LevelData otherLevelData = data.visitedNodes.get( otherNode );\n                for ( Long rel : otherLevelData.relsToHere )\n                {\n                    // ...may split into several paths\n                    LinkedList<Relationship> rels = counter++ == 0 ? entry.rels : \n                        new LinkedList<Relationship>( entry.rels );\n                    rels.addFirst( graphDb.getRelationshipById( rel ) );\n                    nextSet.add( new PathData( otherNode, rels ) );\n                }\n            }\n            set = nextSet;\n        }\n        \n        return new IterableWrapper<LinkedList<Relationship>, PathData>( set )\n        {\n            @Override\n            protected LinkedList<Relationship> underlyingObjectToObject( PathData object )\n            {\n                return object.rels;\n            }\n        };\n    }","commit_id":"af45ebcfb5762a48dabc0cde1d3692a3f980d931","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Path findSinglePath( Node start, Node end )\n    {\n        Collection<Path> paths = internalPaths( start, end, true );\n        return paths.isEmpty() ? null : paths.iterator().next();\n    }","id":12160,"modified_method":"public Path findSinglePath( Node start, Node end )\n    {\n        Iterator<Path> paths = internalPaths( start, end, true ).iterator();\n        return paths.hasNext() ? paths.next() : null;\n    }","commit_id":"af45ebcfb5762a48dabc0cde1d3692a3f980d931","url":"https://github.com/neo4j/neo4j"},{"original_method":"private SNode createClassifierForClass(String fqName, ClassReader reader) {\n    SNode result = null;\n    ClassifierKind kind = ClassifierKind.getClassifierKind(reader);\n    if (kind == null) {\n      return null;\n    }\n    if (kind == ClassifierKind.CLASS) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ClassConcept\", null);\n    } else if (kind == ClassifierKind.INTERFACE) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Interface\", null);\n    } else if (kind == ClassifierKind.ANNOTATIONS) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.Annotation\", null);\n    } else if (kind == ClassifierKind.ENUM) {\n      result = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.EnumClass\", null);\n    } else if (kind == ClassifierKind.UNKNOWN) {\n      return null;\n    }\n    SPropertyOperations.set(result, \"name\", NameUtil.shortNameFromLongName(fqName.replace('$', '.')));\n    result.setId(ASMNodeId.createId(fqName));\n    return result;\n  }","id":12161,"modified_method":"private Classifier createClassifierForClass(String fqName, SModel model, ClassReader reader) {\n    Classifier result = null;\n    ClassifierKind kind = ClassifierKind.getClassifierKind(reader);\n    if (kind == null) {\n      return null;\n    }\n    if (kind == ClassifierKind.CLASS) {\n      result = ClassConcept.newInstance(model);\n    } else if (kind == ClassifierKind.INTERFACE) {\n      result = Interface.newInstance(model);\n    } else if (kind == ClassifierKind.ANNOTATIONS) {\n      result = Annotation.newInstance(model);\n    } else if (kind == ClassifierKind.ENUM) {\n      result = EnumClass.newInstance(model);\n    } else if (kind == ClassifierKind.UNKNOWN) {\n      return null;\n    }\n    result.setName(NameUtil.shortNameFromLongName(fqName.replace('$', '.')));\n    result.getNode().setId(ASMNodeId.createId(fqName));\n    return result;\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void getClassifier(String name, _FunctionTypes._void_P1_E0<? super SNode> adder) {\n    if (AbstractClassPathItem.isAnonymous(name)) {\n      return;\n    }\n\n    String pack = myModel.getLongName();\n    byte[] code = myCpItem.getClass((pack.length() == 0 ?\n      name :\n      pack + \".\" + name\n    ));\n    if (code == null) {\n      return;\n    }\n    ClassReader reader = new ClassReader(code);\n    ASMClass ac = new ASMClass(reader);\n    SNode res = createClassifierForClass(name, reader);\n    adder.invoke(res);\n    myUpdater.updateClassifier(myLocation.getModule(), res, ac);\n    updateInnerClassifiers(ac, res);\n  }","id":12162,"modified_method":"private void getClassifier(String name, _FunctionTypes._void_P1_E0<? super SNode> adder) {\n    if (AbstractClassPathItem.isAnonymous(name)) {\n      return;\n    }\n\n    String pack = myModel.getLongName();\n    byte[] code = myCpItem.getClass((pack.length() == 0 ?\n      name :\n      pack + \".\" + name\n    ));\n    if (code == null) {\n      return;\n    }\n    ClassReader reader = new ClassReader(code);\n    ASMClass ac = new ASMClass(reader);\n    Classifier res = createClassifierForClass(name, myModel, reader);\n    adder.invoke(res.getNode());\n    myUpdater.updateClassifier(myLocation.getModule(), res, ac);\n    updateInnerClassifiers(ac, res);\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void updateInnerClassifiers(ASMClass ac, final SNode cls) {\n    for (InnerClassNode cn : ac.getInnerClasses()) {\n      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {\n        continue;\n      }\n\n      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;\n      if (isPrivate && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n\n      String name = cn.name;\n      if (name == null) {\n        continue;\n      }\n      if (!(name.startsWith(ac.getName() + \"$\"))) {\n        continue;\n      }\n\n      int index = name.lastIndexOf(\"/\");\n      if (index != -1) {\n        name = name.substring(index + 1);\n      }\n\n      final boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;\n      getClassifier(name, new _FunctionTypes._void_P1_E0<SNode>() {\n        public void invoke(SNode n) {\n          SPropertyOperations.set(SNodeOperations.cast(n, \"jetbrains.mps.baseLanguage.structure.Classifier\"), \"nonStatic\", \"\" + !(isStatic));\n          ListSequence.fromList(SLinkOperations.getTargets(cls, \"staticInnerClassifiers\", true)).addElement(n);\n        }\n      });\n    }\n  }","id":12163,"modified_method":"public void updateInnerClassifiers(ASMClass ac, final Classifier cls) {\n    for (InnerClassNode cn : ac.getInnerClasses()) {\n      if ((cn.access & Opcodes.ACC_SYNTHETIC) != 0) {\n        continue;\n      }\n\n      boolean isPrivate = (cn.access & Opcodes.ACC_PRIVATE) != 0;\n      if (isPrivate && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n\n      String name = cn.name;\n      if (name == null) {\n        continue;\n      }\n      if (!(name.startsWith(ac.getName() + \"$\"))) {\n        continue;\n      }\n\n      int index = name.lastIndexOf(\"/\");\n      if (index != -1) {\n        name = name.substring(index + 1);\n      }\n\n      final boolean isStatic = (cn.access & Opcodes.ACC_STATIC) != 0;\n      getClassifier(name, new _FunctionTypes._void_P1_E0<SNode>() {\n        public void invoke(SNode n) {\n          SPropertyOperations.set(SNodeOperations.cast(n, \"jetbrains.mps.baseLanguage.structure.Classifier\"), \"nonStatic\", \"\" + !(isStatic));\n          cls.addStaticInnerClassifiers(((Classifier) ((BaseConcept) SNodeOperations.getAdapter(n))));\n        }\n      });\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateTypeVariables(ASMMethod method, SNode result, SNode cls) {\n    Map<ASMTypeVariable, SNode> typeVars = MapSequence.fromMap(new HashMap<ASMTypeVariable, SNode>());\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      SNode tvd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a1a2().createNode(tv.getName());\n      ListSequence.fromList(SLinkOperations.getTargets(result, \"typeVariableDeclaration\", true)).addElement(tvd);\n      MapSequence.fromMap(typeVars).put(tv, tvd);\n    }\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      SNode tvd = MapSequence.fromMap(typeVars).get(tv);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          SLinkOperations.setTarget(tvd, \"bound\", getTypeByASMType(tp.getClassBound(), result, cls), true);\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          ListSequence.fromList(SLinkOperations.getTargets(tvd, \"auxBounds\", true)).addElement(SNodeOperations.cast(getTypeByASMType(act, result, cls), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n        }\n      }\n    }\n  }","id":12164,"modified_method":"private void updateTypeVariables(ASMMethod method, SModel model, BaseMethodDeclaration result, Classifier cls) {\n    Map<ASMTypeVariable, TypeVariableDeclaration> typeVars = new HashMap<ASMTypeVariable, TypeVariableDeclaration>();\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      TypeVariableDeclaration typeVariableDeclaration = TypeVariableDeclaration.newInstance(model);\n      typeVariableDeclaration.setName(tv.getName());\n      result.addTypeVariableDeclaration(typeVariableDeclaration);\n      typeVars.put(tv, typeVariableDeclaration);\n    }\n    for (ASMTypeVariable tv : method.getTypeParameters()) {\n      TypeVariableDeclaration typeVariableDeclaration = typeVars.get(tv);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          typeVariableDeclaration.setBound(getTypeByASMType(tp.getClassBound(), result, cls, model));\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          typeVariableDeclaration.addAuxBounds((ClassifierType) getTypeByASMType(act, result, cls, model));\n        }\n      }\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private SNode createTypeVariableReference(SNode genDecl, String name) {\n    return new ClassifierUpdater.QuotationClass_ol94f8_a0a0e().createNode(findTypeVariableDeclaration(genDecl, name));\n  }","id":12165,"modified_method":"private TypeVariableReference createTypeVariableReference(GenericDeclaration genDecl, String name) {\n    TypeVariableReference result = TypeVariableReference.newInstance(genDecl.getModel());\n    result.setTypeVariableDeclaration(findTypeVariableDeclaration(genDecl, name));\n    return result;\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void addTypeParameters(List<? extends ASMType> typeParameters, SNode method, SNode classifier, SNode result) {\n    List<SNode> toAdd = new ArrayList<SNode>();\n    for (ASMType tv : typeParameters) {\n      SNode type = getTypeByASMType(tv, method, classifier);\n      if (type == null) {\n        toAdd.clear();\n        break;\n      }\n      toAdd.add(type);\n    }\n    ListSequence.fromList(SLinkOperations.getTargets(result, \"parameter\", true)).addSequence(ListSequence.fromList(toAdd));\n  }","id":12166,"modified_method":"private void addTypeParameters(List<? extends ASMType> typeParameters, BaseMethodDeclaration method, Classifier classifier, ClassifierType result) {\n    List<Type> toAdd = new ArrayList<Type>();\n    for (ASMType tv : typeParameters) {\n      Type type = getTypeByASMType(tv, method, classifier, result.getModel());\n      if (type == null) {\n        toAdd.clear();\n        break;\n      }\n      toAdd.add(type);\n    }\n    for (Type tvr : toAdd) {\n      result.addParameter(tvr);\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void updateClassifier(IModule module, final SNode clsfr, ASMClass ac) {\n    this.myModule = module;\n\n    if (SNodeOperations.isInstanceOf(clsfr, \"jetbrains.mps.baseLanguage.structure.Annotation\")) {\n      SNode annotation = SNodeOperations.cast(clsfr, \"jetbrains.mps.baseLanguage.structure.Annotation\");\n      updateAnnotationMethods(ac, annotation);\n      updateAnnotations(ac, annotation);\n    } else if (SNodeOperations.isInstanceOf(clsfr, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n      SNode cls = SNodeOperations.cast(clsfr, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n      SPropertyOperations.set(cls, \"abstractClass\", \"\" + ac.isAbstract());\n      SPropertyOperations.set(cls, \"isDeprecated\", \"\" + ac.isDeprecated());\n      SPropertyOperations.set(cls, \"isFinal\", \"\" + ac.isFinal());\n\n      updateAnnotations(ac, cls);\n      updateTypeVariables(ac, cls);\n      updateExtendsAndImplements(ac, cls);\n      updateInstanceFields(ac, cls);\n      updateStaticFields(ac, cls);\n      updateConstructors(ac, cls);\n      updateInstanceMethods(ac, cls);\n      updateStaticMethods(ac, cls);\n    } else if (SNodeOperations.isInstanceOf(clsfr, \"jetbrains.mps.baseLanguage.structure.Interface\")) {\n      SNode intfc = SNodeOperations.cast(clsfr, \"jetbrains.mps.baseLanguage.structure.Interface\");\n      SPropertyOperations.set(intfc, \"isDeprecated\", \"\" + ac.isDeprecated());\n      updateAnnotations(ac, intfc);\n      updateTypeVariables(ac, intfc);\n      updateExtendsForInterface(ac, intfc);\n      updateStaticFields(ac, intfc);\n      updateInstanceMethods(ac, intfc);\n    } else {\n      return;\n    }\n\n    SLinkOperations.setTarget(clsfr, \"visibility\", (ac.isPublic() ?\n      new ClassifierUpdater.QuotationClass_ol94f8_a0a0e0a().createNode() :\n      null\n    ), true);\n\n  }","id":12167,"modified_method":"public void updateClassifier(IModule module, final Classifier clsfr, ASMClass ac) {\n    this.myModule = module;\n\n    if (clsfr instanceof Annotation) {\n      final Annotation annotation = (Annotation) clsfr;\n      if (ac.isPublic()) {\n        annotation.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));\n      } else {\n        annotation.setVisibility(null);\n      }\n      updateAnnotationMethods(ac, annotation);\n      updateAnnotations(ac, annotation);\n    } else if (clsfr instanceof ClassConcept) {\n      final ClassConcept cls = (ClassConcept) clsfr;\n      if (ac.isPublic()) {\n        cls.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));\n      } else {\n        cls.setVisibility(null);\n      }\n      cls.setAbstractClass(ac.isAbstract());\n      cls.setIsDeprecated(ac.isDeprecated());\n      updateAnnotations(ac, cls);\n      updateTypeVariables(ac, cls.getModel(), cls);\n      updateExtendsAndImplements(ac, cls);\n      updateInstanceFields(ac, cls);\n      updateStaticFields(ac, cls);\n      updateConstructors(ac, cls);\n      updateInstanceMethods(ac, cls);\n      updateStaticMethods(ac, cls);\n      cls.setIsFinal(ac.isFinal());\n    } else if (clsfr instanceof Interface) {\n      final Interface intfc = (Interface) clsfr;\n      if (ac.isPublic()) {\n        intfc.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));\n      } else {\n        intfc.setVisibility(null);\n      }\n      intfc.setIsDeprecated(ac.isDeprecated());\n      updateAnnotations(ac, intfc);\n      updateTypeVariables(ac, intfc.getModel(), intfc);\n      updateExtendsForInterface(ac, intfc);\n      updateStaticFields(ac, intfc);\n      updateInstanceMethods(ac, intfc);\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateConstructors(ASMClass ac, final SNode cls) {\n    for (ASMMethod c : ac.getDeclaredConstructors()) {\n      if (c.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      SNode constructor = new ClassifierUpdater.QuotationClass_ol94f8_a0a1a0a11().createNode(createVisibility(c), SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null), SPropertyOperations.getString(cls, \"name\"));\n      SPropertyOperations.set(constructor, \"isDeprecated\", \"\" + c.isDeprecated());\n      for (ASMTypeVariable tv : c.getTypeParameters()) {\n        ListSequence.fromList(SLinkOperations.getTargets(constructor, \"typeVariableDeclaration\", true)).addElement(new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0d0a0l().createNode(tv.getName()));\n      }\n      {\n        ASMType pt;\n        String pn;\n        List<ASMAnnotation> pa;\n        Iterator<ASMType> pt_iterator = ListSequence.fromList(c.getGenericParameterTypes()).iterator();\n        Iterator<String> pn_iterator = ListSequence.fromList(c.getParameterNames()).iterator();\n        Iterator<List<ASMAnnotation>> pa_iterator = ListSequence.fromList(c.getParameterAnnotations()).iterator();\n        while (true) {\n          if (!(pt_iterator.hasNext())) {\n            break;\n          }\n          if (!(pn_iterator.hasNext())) {\n            break;\n          }\n          if (!(pa_iterator.hasNext())) {\n            break;\n          }\n          pt = pt_iterator.next();\n          pn = pn_iterator.next();\n          pa = pa_iterator.next();\n          {\n            SNode pd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a6a6a4a0a11().createNode(getTypeByASMType(pt, constructor, cls), pn);\n            addAnnotationsToParameter(pd, pa);\n            ListSequence.fromList(SLinkOperations.getTargets(constructor, \"parameter\", true)).addElement(pd);\n          }\n        }\n      }\n      for (ASMAnnotation annotation : c.getAnnotations()) {\n        ListSequence.fromList(SLinkOperations.getTargets(constructor, \"annotation\", true)).addElement(createAnnotation(annotation));\n      }\n      for (ASMType exception : c.getExceptionTypes()) {\n        ListSequence.fromList(SLinkOperations.getTargets(constructor, \"throwsItem\", true)).addElement(getTypeByASMType(exception, constructor, cls));\n      }\n\n      constructor.setId(ASMNodeId.createId(ac, c));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"constructor\", true)).addElement(constructor);\n    }\n  }","id":12168,"modified_method":"private void updateConstructors(ASMClass ac, ClassConcept cls) {\n    SModel model = cls.getModel();\n    for (ASMMethod c : ac.getDeclaredConstructors()) {\n      if (c.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      ConstructorDeclaration constructor = ConstructorDeclaration.newInstance(model);\n      constructor.getNode().setId(ASMNodeId.createId(ac, c));\n      constructor.setBody(((StatementList) ((StubStatementList) SNodeOperations.getAdapter((SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null))))));\n\n      constructor.setVisibility(createVisibility(c, model));\n      constructor.setIsDeprecated(c.isDeprecated());\n      for (ASMTypeVariable tv : c.getTypeParameters()) {\n        TypeVariableDeclaration typeVariableDeclaration = TypeVariableDeclaration.newInstance(cls.getModel());\n        typeVariableDeclaration.setName(tv.getName());\n        constructor.addTypeVariableDeclaration(typeVariableDeclaration);\n      }\n      constructor.setName(cls.getName());\n      List<ASMType> parameterType = c.getGenericParameterTypes();\n      List<String> parameterNames = c.getParameterNames();\n      for (int i = 0; i < parameterType.size(); i++) {\n        ASMType pt = parameterType.get(i);\n        ParameterDeclaration pd = ParameterDeclaration.newInstance(model);\n        pd.setName(parameterNames.get(i));\n        pd.setType(getTypeByASMType(pt, constructor, cls, model));\n        addAnnotationsToParameter(pd, c.getParameterAnnotations().get(i));\n        constructor.addParameter(pd);\n      }\n      for (ASMAnnotation annotation : c.getAnnotations()) {\n        constructor.addAnnotation(createAnnotation(annotation, model));\n      }\n      for (ASMType exception : c.getExceptionTypes()) {\n        constructor.addThrowsItem(getTypeByASMType(exception, constructor, cls, model));\n      }\n      cls.addConstructor(constructor);\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateAnnotationMethods(ASMClass refCls, final SNode annotation) {\n    for (ASMMethod m : refCls.getDeclaredMethods()) {\n      SNode md = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0a01().createNode(getTypeByASMType(m.getGenericReturnType(), null, annotation), m.getName());\n      SLinkOperations.setTarget(md, \"visibility\", new ClassifierUpdater.QuotationClass_ol94f8_a0a1a0a01().createNode(), true);\n      if (m.getAnnotationDefault() != null) {\n        SLinkOperations.setTarget(md, \"defaultValue\", getAnnotationValue(m.getAnnotationDefault()), true);\n      }\n\n      md.setId(ASMNodeId.createAnnotationMethodId(refCls.getFqName(), m.getName()));\n      ListSequence.fromList(SLinkOperations.getTargets(annotation, \"method\", true)).addElement(md);\n    }\n  }","id":12169,"modified_method":"private void updateAnnotationMethods(ASMClass refCls, Annotation annotation) {\n    SModel model = annotation.getModel();\n    for (ASMMethod m : refCls.getDeclaredMethods()) {\n      AnnotationMethodDeclaration methodDeclaration = AnnotationMethodDeclaration.newInstance(model);\n      methodDeclaration.getNode().setId(ASMNodeId.createId(refCls, m));\n      methodDeclaration.setVisibility(PublicVisibility.newInstance(model));\n      methodDeclaration.setName(m.getName());\n      methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(), null, annotation, model));\n      methodDeclaration.getNode().setId(ASMNodeId.createAnnotationMethodId(refCls.getFqName(), m.getName()));\n      if (m.getAnnotationDefault() != null) {\n        methodDeclaration.setDefaultValue(getAnnotationValue(m.getAnnotationDefault(), model));\n      }\n      annotation.addMethod(methodDeclaration);\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateInstanceMethods(ASMClass ac, SNode cls) {\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (m.isStatic()) {\n        continue;\n      }\n      if (m.isBridge()) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n\n      SNode md = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", null);\n      SPropertyOperations.set(md, \"isAbstract\", \"\" + m.isAbstract());\n      SLinkOperations.setTarget(md, \"visibility\", createVisibility(m), true);\n      this.updateBaseMethod(m, md, cls);\n\n      md.setId(ASMNodeId.createId(ac, m));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"method\", true)).addElement(md);\n    }\n  }","id":12170,"modified_method":"private void updateInstanceMethods(ASMClass ac, Classifier cls) {\n    SModel model = cls.getModel();\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (m.isStatic()) {\n        continue;\n      }\n      if (m.isBridge()) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n      InstanceMethodDeclaration methodDeclaration = InstanceMethodDeclaration.newInstance(model);\n      methodDeclaration.getNode().setId(ASMNodeId.createId(ac, m));\n      methodDeclaration.setBody(((StatementList) ((StubStatementList) SNodeOperations.getAdapter((SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null))))));\n      methodDeclaration.setVisibility(createVisibility(m, model));\n      methodDeclaration.setIsFinal(m.isFinal());\n      methodDeclaration.setIsAbstract(m.isAbstract());\n      methodDeclaration.setIsDeprecated(m.isDeprecated());\n      updateTypeVariables(m, model, methodDeclaration, cls);\n      methodDeclaration.setName(m.getName());\n      methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(), methodDeclaration, cls, model));\n      List<ASMType> parameterTypes = m.getGenericParameterTypes();\n      List<String> parameterNames = m.getParameterNames();\n      for (int i = 0; i < parameterTypes.size(); i++) {\n        ASMType paramType = parameterTypes.get(i);\n        ParameterDeclaration parameterDeclaration = ParameterDeclaration.newInstance(model);\n        parameterDeclaration.setName(parameterNames.get(i));\n        parameterDeclaration.setType(getTypeByASMType(paramType, methodDeclaration, cls, model));\n        addAnnotationsToParameter(parameterDeclaration, m.getParameterAnnotations().get(i));\n        methodDeclaration.addParameter(parameterDeclaration);\n      }\n      for (ASMType exception : m.getExceptionTypes()) {\n        methodDeclaration.addThrowsItem(getTypeByASMType(exception, methodDeclaration, cls, model));\n      }\n      for (ASMAnnotation annotation : m.getAnnotations()) {\n        methodDeclaration.addAnnotation(createAnnotation(annotation, model));\n      }\n      cls.addMethod(methodDeclaration);\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateStaticMethods(ASMClass ac, SNode cls) {\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(m.isStatic())) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n      if (SNodeOperations.isInstanceOf(cls, \"jetbrains.mps.baseLanguage.structure.EnumClass\") && isGeneratedEnumMethod(m)) {\n        continue;\n      }\n\n      SNode md = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\", null);\n      SLinkOperations.setTarget(md, \"visibility\", createVisibility(m), true);\n      updateBaseMethod(m, md, cls);\n\n      md.setId(ASMNodeId.createId(ac, m));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"staticMethod\", true)).addElement(md);\n    }\n  }","id":12171,"modified_method":"private void updateStaticMethods(ASMClass ac, ClassConcept cls) {\n    SModel model = cls.getModel();\n    for (ASMMethod m : ac.getDeclaredMethods()) {\n      if (m.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(m.isStatic())) {\n        continue;\n      }\n      if (m.isCompilerGenerated()) {\n        continue;\n      }\n      if (cls instanceof EnumClass && isGeneratedEnumMethod(m)) {\n        continue;\n      }\n      StaticMethodDeclaration methodDeclaration = StaticMethodDeclaration.newInstance(model);\n      methodDeclaration.getNode().setId(ASMNodeId.createId(ac, m));\n      methodDeclaration.setBody(((StatementList) ((StubStatementList) SNodeOperations.getAdapter((SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", null))))));\n      methodDeclaration.setVisibility(createVisibility(m, model));\n      methodDeclaration.setIsDeprecated(m.isDeprecated());\n      if (m.isFinal()) {\n        methodDeclaration.setIsFinal(true);\n      }\n      updateTypeVariables(m, model, methodDeclaration, cls);\n      methodDeclaration.setName(m.getName());\n      methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(), methodDeclaration, cls, model));\n      List<ASMType> parameterTypes = m.getGenericParameterTypes();\n      List<String> parameterNames = m.getParameterNames();\n      for (int i = 0; i < parameterTypes.size(); i++) {\n        ASMType paramType = parameterTypes.get(i);\n        ParameterDeclaration parameterDeclaration = ParameterDeclaration.newInstance(model);\n        parameterDeclaration.setName(parameterNames.get(i));\n        parameterDeclaration.setType(getTypeByASMType(paramType, methodDeclaration, cls, model));\n        addAnnotationsToParameter(parameterDeclaration, m.getParameterAnnotations().get(i));\n        methodDeclaration.addParameter(parameterDeclaration);\n      }\n      for (ASMAnnotation annotation : m.getAnnotations()) {\n        methodDeclaration.addAnnotation(createAnnotation(annotation, model));\n      }\n      for (ASMType exception : m.getExceptionTypes()) {\n        methodDeclaration.addThrowsItem(getTypeByASMType(exception, methodDeclaration, cls, model));\n      }\n      cls.addStaticMethod(methodDeclaration);\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateExtendsForInterface(ASMClass ac, SNode intfc) {\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ListSequence.fromList(SLinkOperations.getTargets(intfc, \"extendedInterface\", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, intfc), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n    }\n  }","id":12172,"modified_method":"private void updateExtendsForInterface(ASMClass ac, Interface intfc) {\n    SModel model = intfc.getModel();\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ClassifierType classifierType = (ClassifierType) getTypeByASMType(type, null, intfc, model);\n      intfc.addExtendedInterface(classifierType);\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateAnnotations(ASMClass ac, SNode cls) {\n    for (ASMAnnotation annotation : ac.getAnnotations()) {\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"annotation\", true)).addElement(createAnnotation(annotation));\n    }\n  }","id":12173,"modified_method":"private void updateAnnotations(ASMClass ac, Classifier cls) {\n    for (ASMAnnotation annotation : ac.getAnnotations()) {\n      cls.addAnnotation(createAnnotation(annotation, cls.getModel()));\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModelReference getModelReferenceFor(String packageName, SModel model) {\n    ModuleReference module = myModule.getModuleFor(packageName, LanguageID.JAVA);\n    if (module == null) {\n      Tuples._2<String, String> p = MultiTuple.<String,String>from(packageName, myModule.getModuleFqName());\n      if (!(SetSequence.fromSet(reported).contains(p))) {\n        SetSequence.fromSet(reported).addElement(p);\n        if (IdeMain.getTestMode() == IdeMain.TestMode.NO_TEST) {\n          LOG.warning(\"no module found for: \" + packageName + \" in \" + myModule.getModuleFqName());\n        }\n      }\n    }\n    SModelReference ref = StubHelper.uidForPackageInStubs(packageName, LanguageID.JAVA, module);\n    model.addModelImport(ref, false);\n    return ref;\n  }","id":12174,"modified_method":"public SModelReference getModelReferenceFor(String packageName, SModel model) {\n    ModuleReference module = myModule.getModuleFor(packageName, LanguageID.JAVA);\n    if (module == null) {\n      Pair<String, String> p = new Pair<String, String>(packageName, myModule.getModuleFqName());\n      if (!(reported.contains(p))) {\n        reported.add(p);\n        if (IdeMain.getTestMode() == IdeMain.TestMode.NO_TEST) {\n          LOG.warning(\"no module found for: \" + packageName + \" in \" + myModule.getModuleFqName());\n        }\n      }\n    }\n    SModelReference ref = StubHelper.uidForPackageInStubs(packageName, LanguageID.JAVA, module);\n    model.addModelImport(ref, false);\n    return ref;\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected SNode createVisibility(ASMField f) {\n    if (f.isPublic()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0r().createNode();\n    }\n    if (f.isPrivate()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0r().createNode();\n    }\n    if (f.isProtected()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0r().createNode();\n    }\n    return null;\n  }","id":12175,"modified_method":"protected Visibility createVisibility(ASMField f, SModel model) {\n    if (f.isPublic()) {\n      return PublicVisibility.newInstance(model);\n    }\n    if (f.isPrivate()) {\n      return PrivateVisibility.newInstance(model);\n    }\n    if (f.isProtected()) {\n      return ProtectedVisibility.newInstance(model);\n    }\n    return null;\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateInstanceFields(ASMClass refCls, SNode cls) {\n    for (ASMField field : refCls.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (field.isStatic()) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      SNode decl = new ClassifierUpdater.QuotationClass_ol94f8_a0a3a0a8().createNode(createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());\n      SPropertyOperations.set(decl, \"isDeprecated\", \"\" + field.isDeprecated());\n      for (ASMAnnotation annotation : field.getAnnotations()) {\n        ListSequence.fromList(SLinkOperations.getTargets(decl, \"annotation\", true)).addElement(createAnnotation(annotation));\n      }\n\n      decl.setId(ASMNodeId.createId(refCls, field));\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"field\", true)).addElement(decl);\n    }\n  }","id":12176,"modified_method":"private void updateInstanceFields(ASMClass refCls, ClassConcept cls) {\n    SModel model = cls.getModel();\n    for (ASMField field : refCls.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (field.isStatic()) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      FieldDeclaration decl = FieldDeclaration.newInstance(model);\n      decl.getNode().setId(ASMNodeId.createId(refCls, field));\n      decl.setVisibility(createVisibility(field, model));\n      decl.setName(field.getName());\n      decl.setType(getTypeByASMType(field.getGenericType(), null, cls, model));\n      decl.setIsDeprecated(field.isDeprecated());\n      for (ASMAnnotation annotation : field.getAnnotations()) {\n        decl.addAnnotation(createAnnotation(annotation, model));\n      }\n      cls.addField(decl);\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void addAnnotationsToParameter(SNode pd, List<ASMAnnotation> anns) {\n    ListSequence.fromList(SLinkOperations.getTargets(pd, \"annotation\", true)).addSequence(ListSequence.fromList(anns).<SNode>select(new ISelector<ASMAnnotation, SNode>() {\n      public SNode select(ASMAnnotation it) {\n        return createAnnotation(it);\n      }\n    }));\n  }","id":12177,"modified_method":"private void addAnnotationsToParameter(ParameterDeclaration pd, List<ASMAnnotation> annotations) {\n    for (ASMAnnotation a : annotations) {\n      pd.addAnnotation(createAnnotation(a, pd.getModel()));\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private SNode createAnnotation(ASMAnnotation annotation) {\n    SNode result = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a91().createNode();\n    ASMClassType c = (ASMClassType) annotation.getType();\n    addClassifierReference(result, \"annotation\", c);\n    Map<String, Object> values = ((Map<String, Object>) annotation.getValues());\n    for (String key : MapSequence.fromMap(values).keySet()) {\n      SNode value = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a4a91().createNode(getAnnotationValue(MapSequence.fromMap(values).get(key)));\n      addAnnotationMethodReference(value, \"key\", c, key);\n      ListSequence.fromList(SLinkOperations.getTargets(result, \"value\", true)).addElement(value);\n    }\n    return result;\n  }","id":12178,"modified_method":"private AnnotationInstance createAnnotation(ASMAnnotation annotation, SModel model) {\n    AnnotationInstance result = AnnotationInstance.newInstance(model);\n    ASMClassType c = (ASMClassType) annotation.getType();\n    addClassifierReference(result.getNode(), AnnotationInstance.ANNOTATION, c);\n    Map<String, Object> values = annotation.getValues();\n    for (String key : values.keySet()) {\n      AnnotationInstanceValue value = AnnotationInstanceValue.newInstance(model);\n      addAnnotationMethodReference(value.getNode(), AnnotationInstanceValue.KEY, c, key);\n      value.setValue(getAnnotationValue(values.get(key), model));\n      result.addValue(value);\n    }\n    return result;\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected SNode createVisibility(ASMMethod m) {\n    if (m.isPublic()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0q().createNode();\n    }\n    if (m.isPrivate()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0q().createNode();\n    }\n    if (m.isProtected()) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0q().createNode();\n    }\n    return null;\n  }","id":12179,"modified_method":"protected Visibility createVisibility(ASMMethod m, SModel model) {\n    if (m.isPublic()) {\n      return PublicVisibility.newInstance(model);\n    }\n    if (m.isPrivate()) {\n      return PrivateVisibility.newInstance(model);\n    }\n    if (m.isProtected()) {\n      return ProtectedVisibility.newInstance(model);\n    }\n    return null;\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateStaticFields(ASMClass ac, SNode cls) {\n    for (ASMField field : ac.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(field.isStatic())) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      if (field.isEnumConstant()) {\n        SNode enumClass = SNodeOperations.cast(cls, \"jetbrains.mps.baseLanguage.structure.EnumClass\");\n        SNode ecd = new ClassifierUpdater.QuotationClass_ol94f8_a0a1a3a0a9().createNode(field.getName());\n\n        ecd.setId(ASMNodeId.createId(ac, field));\n        ListSequence.fromList(SLinkOperations.getTargets(enumClass, \"enumConstant\", true)).addElement(ecd);\n      } else {\n        SNode decl = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0d0a0j().createNode(createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());\n        SPropertyOperations.set(decl, \"isDeprecated\", \"\" + field.isDeprecated());\n        for (ASMAnnotation annotation : field.getAnnotations()) {\n          ListSequence.fromList(SLinkOperations.getTargets(decl, \"annotation\", true)).addElement(createAnnotation(annotation));\n        }\n        if (field.isFinal()) {\n          SPropertyOperations.set(decl, \"isFinal\", \"\" + true);\n          if (field.hasValue()) {\n            Object value = field.getValue();\n            if (value instanceof Integer) {\n              SLinkOperations.setTarget(decl, \"initializer\", new ClassifierUpdater.QuotationClass_ol94f8_a0a0a1a1a3a0d0a0j().createNode(value.toString()), true);\n            } else if (value instanceof String) {\n              SLinkOperations.setTarget(decl, \"initializer\", new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0b0b0d0a3a0a9().createNode((String) value), true);\n            }\n          }\n        }\n\n        decl.setId(ASMNodeId.createId(ac, field));\n        ListSequence.fromList(SLinkOperations.getTargets(cls, \"staticField\", true)).addElement(decl);\n      }\n    }\n  }","id":12180,"modified_method":"private void updateStaticFields(ASMClass ac, Classifier cls) {\n    SModel model = cls.getModel();\n    for (ASMField field : ac.getDeclaredFields()) {\n      if (field.isPrivate() && ASMModelLoader.SKIP_PRIVATE) {\n        continue;\n      }\n      if (!(field.isStatic())) {\n        continue;\n      }\n      if (field.isCompilerGenerated()) {\n        continue;\n      }\n      if (field.isEnumConstant()) {\n        EnumClass enumClass = (EnumClass) cls;\n        EnumConstantDeclaration enumConstantDeclaration = EnumConstantDeclaration.newInstance(model);\n        enumConstantDeclaration.getNode().setId(ASMNodeId.createId(ac, field));\n        enumConstantDeclaration.setName(field.getName());\n        enumClass.addEnumConstant(enumConstantDeclaration);\n      } else {\n        StaticFieldDeclaration decl = StaticFieldDeclaration.newInstance(model);\n        decl.getNode().setId(ASMNodeId.createId(ac, field));\n        decl.setVisibility(createVisibility(field, model));\n        decl.setName(field.getName());\n        decl.setType(getTypeByASMType(field.getGenericType(), null, cls, model));\n        decl.setIsDeprecated(field.isDeprecated());\n        for (ASMAnnotation annotation : field.getAnnotations()) {\n          decl.addAnnotation(createAnnotation(annotation, model));\n        }\n        if (field.isFinal()) {\n          decl.setIsFinal(true);\n          if (field.hasValue()) {\n            Object value = field.getValue();\n            if (value instanceof Integer) {\n              IntegerConstant initialValue = IntegerConstant.newInstance(model);\n              initialValue.setValue((Integer) value);\n              decl.setInitializer(initialValue);\n            } else if (value instanceof String) {\n              StringLiteral initialValue = StringLiteral.newInstance(model);\n              initialValue.setValue((String) value);\n              decl.setInitializer(initialValue);\n            }\n          }\n        }\n        cls.addStaticField(decl);\n      }\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateExtendsAndImplements(ASMClass ac, SNode cls) {\n    ASMType refSuperclass = ac.getGenericSuperclass();\n    if (refSuperclass != null) {\n      SLinkOperations.setTarget(cls, \"superclass\", SNodeOperations.cast(getTypeByASMType(refSuperclass, null, cls), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"), true);\n    }\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ListSequence.fromList(SLinkOperations.getTargets(cls, \"implementedInterface\", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, cls), \"jetbrains.mps.baseLanguage.structure.ClassifierType\"));\n    }\n  }","id":12181,"modified_method":"private void updateExtendsAndImplements(ASMClass ac, ClassConcept cls) {\n    SModel model = cls.getModel();\n    ASMType refSuperclass = ac.getGenericSuperclass();\n    if (refSuperclass != null) {\n      ClassifierType classifierType = (ClassifierType) getTypeByASMType(refSuperclass, null, cls, model);\n      cls.setSuperclass(classifierType);\n    }\n    for (ClassifierType itype : cls.getImplementedInterfaces()) {\n      itype.delete();\n    }\n    for (ASMType type : ac.getGenericInterfaces()) {\n      ClassifierType classifierType = (ClassifierType) getTypeByASMType(type, null, cls, model);\n      cls.addImplementedInterface(classifierType);\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private SNode getAnnotationValue(Object value) {\n    if (value instanceof Integer) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0u().createNode(value.toString());\n    }\n    if (value instanceof Byte) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0u().createNode(value.toString());\n    }\n    if (value instanceof Short) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0u().createNode(value.toString());\n    }\n    if (value instanceof Boolean) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0d0u().createNode(value.toString());\n    }\n    if (value instanceof Character) {\n      return null;\n    }\n    if (value instanceof Long) {\n      return null;\n    }\n    if (value instanceof Float) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0g0u().createNode(value.toString());\n    }\n    if (value instanceof Double) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0h0u().createNode(value.toString());\n    }\n    if (value instanceof String) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0i0u().createNode(value.toString());\n    }\n    if (value instanceof ASMAnnotation) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0j0u().createNode(createAnnotation((ASMAnnotation) value));\n    }\n    if (value instanceof ASMPrimitiveType) {\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0k0u().createNode(SNodeOperations.cast(getTypeByASMType((ASMPrimitiveType) value, null, null), \"jetbrains.mps.baseLanguage.structure.PrimitiveType\"));\n    }\n    if (value instanceof List) {\n      List<Object> list = (List<Object>) value;\n      return new ClassifierUpdater.QuotationClass_ol94f8_a0b0l0u().createNode(ListSequence.fromList(list).<SNode>select(new ISelector<Object, SNode>() {\n        public SNode select(Object it) {\n          return getAnnotationValue(it);\n        }\n      }).where(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return (it != null);\n        }\n      }).toListSequence());\n    }\n    if (value instanceof ASMEnumValue) {\n      ASMEnumValue enumValue = (ASMEnumValue) value;\n      ASMClassType c = (ASMClassType) enumValue.getType();\n      SNode res = new ClassifierUpdater.QuotationClass_ol94f8_a0a2a21a02().createNode();\n      addClassifierReference(res, \"enumClass\", c);\n      addEnumConstReference(res, \"enumConstantDeclaration\", enumValue);\n      return res;\n    }\n    if (value instanceof ASMClassType) {\n      SNode res = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a31a02().createNode();\n      addClassifierReference(res, \"classifier\", (ASMClassType) value);\n      return res;\n    }\n    LOG.error(\"couldn't create annotation value from \" + ((value == null ?\n      \"\" :\n      value.getClass().getName()\n    )) + \" : \" + value);\n    return null;\n  }","id":12182,"modified_method":"private Expression getAnnotationValue(Object value, SModel model) {\n    if (value instanceof Byte) {\n      Byte b = (Byte) value;\n      IntegerConstant res = IntegerConstant.newInstance(model);\n      res.setValue(b);\n      return res;\n    }\n    if (value instanceof Boolean) {\n      Boolean b = (Boolean) value;\n      BooleanConstant res = BooleanConstant.newInstance(model);\n      res.setValue(b);\n      return res;\n    }\n    if (value instanceof Character) {\n      return null;\n    }\n    if (value instanceof Short) {\n      Short s = (Short) value;\n      IntegerConstant res = IntegerConstant.newInstance(model);\n      res.setValue(s);\n      return res;\n    }\n    if (value instanceof Integer) {\n      Integer i = (Integer) value;\n      IntegerConstant res = IntegerConstant.newInstance(model);\n      res.setValue(i);\n      return res;\n    }\n    if (value instanceof Long) {\n      return null;\n    }\n    if (value instanceof Float) {\n      Float f = (Float) value;\n      FloatingPointConstant res = FloatingPointConstant.newInstance(model);\n      res.setValue(\"\" + f);\n      return res;\n    }\n    if (value instanceof Double) {\n      Double d = (Double) value;\n      FloatingPointConstant res = FloatingPointConstant.newInstance(model);\n      res.setValue(\"\" + d);\n      return res;\n    }\n    if (value instanceof String) {\n      String s = (String) value;\n      StringLiteral res = StringLiteral.newInstance(model);\n      res.setValue(s);\n      return res;\n    }\n    if (value instanceof List) {\n      List<Object> list = (List) value;\n      ArrayLiteral res = ArrayLiteral.newInstance(model);\n      for (Object o : list) {\n        Expression annotationValue = getAnnotationValue(o, model);\n        if (annotationValue != null) {\n          res.addItem(annotationValue);\n        }\n      }\n      return res;\n    }\n    if (value instanceof ASMEnumValue) {\n      ASMEnumValue enumValue = (ASMEnumValue) value;\n      EnumConstantReference res = EnumConstantReference.newInstance(model);\n      ASMClassType c = (ASMClassType) enumValue.getType();\n      addClassifierReference(res.getNode(), EnumConstantReference.ENUM_CLASS, c);\n      addEnumConstReference(res.getNode(), EnumConstantReference.ENUM_CONSTANT_DECLARATION, enumValue);\n      return res;\n    }\n    if (value instanceof ASMAnnotation) {\n      ASMAnnotation annotation = (ASMAnnotation) value;\n      AnnotationInstanceExpression res = AnnotationInstanceExpression.newInstance(model);\n      res.setAnnotationInstance(createAnnotation(annotation, model));\n      return res;\n    }\n    if (value instanceof ASMClassType) {\n      ASMClassType classType = (ASMClassType) value;\n      ClassifierClassExpression res = ClassifierClassExpression.newInstance(model);\n      addClassifierReference(res.getNode(), ClassifierClassExpression.CLASSIFIER, classType);\n      return res;\n    }\n    if (value instanceof ASMPrimitiveType) {\n      ASMPrimitiveType primitiveType = (ASMPrimitiveType) value;\n      PrimitiveClassExpression res = PrimitiveClassExpression.newInstance(model);\n      res.setPrimitiveType((PrimitiveType) getTypeByASMType(primitiveType, null, null, model));\n      return res;\n    }\n    LOG.error(\"couldn't create annotation value from \" + ((value == null ?\n      \"\" :\n      value.getClass().getName()\n    )) + \" : \" + value);\n    return null;\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"private SNode findTypeVariableDeclaration(SNode genDecl, final String name) {\n    return ListSequence.fromList(SLinkOperations.getTargets(genDecl, \"typeVariableDeclaration\", true)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return eq_ol94f8_a0a0a0a0a0a0a3(SPropertyOperations.getString(it, \"name\"), name);\n      }\n    }).first();\n  }","id":12183,"modified_method":"private void updateTypeVariables(ASMClass cls, SModel model, Classifier result) {\n    for (ASMTypeVariable tv : cls.getTypeParameters()) {\n      TypeVariableDeclaration typeVariableDeclaration = TypeVariableDeclaration.newInstance(model);\n      typeVariableDeclaration.setName(tv.getName());\n      result.addTypeVariableDeclaration(typeVariableDeclaration);\n      if (tv instanceof ASMFormalTypeParameter) {\n        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;\n        if (tp.getClassBound() != null) {\n          typeVariableDeclaration.setBound(getTypeByASMType(tp.getClassBound(), null, result, model));\n        }\n        for (ASMType act : tp.getInterfaceBounds()) {\n          typeVariableDeclaration.addAuxBounds((ClassifierType) getTypeByASMType(act, null, result, model));\n        }\n      }\n    }\n  }","commit_id":"3f46c0b7fdef7e8573813e0dfd6ddac7c150fb92","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Test\n    public void testSuperUser() throws Exception {\n        ModelControllerClient client = getClientForUser(SUPERUSER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, SUPERUSER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, SUPERUSER_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n//        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSensitiveAttribute(client, null, null, false, SUPERUSER_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, true, SUPERUSER_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n//        runGC(client, MASTER, OTHER_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, SUPERUSER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, SUPERUSER_USER);\n    }","id":12184,"modified_method":"@Test\n    public void testSuperUser() throws Exception {\n        ModelControllerClient client = getClientForUser(SUPERUSER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, SUPERUSER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, SUPERUSER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, SUPERUSER_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, SUPERUSER_USER);\n        checkSensitiveAttribute(client, null, null, false, SUPERUSER_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, true, SUPERUSER_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, SUPERUSER_USER);\n        runGC(client, SLAVE, SLAVE_B, Outcome.HIDDEN, SUPERUSER_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, SUPERUSER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, SUPERUSER_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testOperator() throws Exception {\n        ModelControllerClient client = getClientForUser(OPERATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, OPERATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, OPERATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, OPERATOR_USER);\n//        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, OPERATOR_USER);\n        checkSensitiveAttribute(client, null, null, false, OPERATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, OPERATOR_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, OPERATOR_USER);\n//        runGC(client, MASTER, OTHER_ONE, Outcome.SUCCESS, OPERATOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n    }","id":12185,"modified_method":"@Test\n    public void testOperator() throws Exception {\n        ModelControllerClient client = getClientForUser(OPERATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, OPERATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, OPERATOR_USER);\n        checkSensitiveAttribute(client, null, null, false, OPERATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, OPERATOR_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, OPERATOR_USER);\n        runGC(client, SLAVE, SLAVE_B, Outcome.HIDDEN, OPERATOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testMonitor() throws Exception {\n        ModelControllerClient client = getClientForUser(MONITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MONITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, MONITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, MONITOR_USER);\n//        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, MONITOR_USER);\n        checkSensitiveAttribute(client, null, null, false, MONITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, MONITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, MONITOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.UNAUTHORIZED, MONITOR_USER);\n//        runGC(client, MASTER, OTHER_ONE, Outcome.UNAUTHORIZED, MONITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n    }","id":12186,"modified_method":"@Test\n    public void testMonitor() throws Exception {\n        ModelControllerClient client = getClientForUser(MONITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MONITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, MONITOR_USER);\n        checkSensitiveAttribute(client, null, null, false, MONITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, MONITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, MONITOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.UNAUTHORIZED, MONITOR_USER);\n        runGC(client, SLAVE, SLAVE_B, Outcome.HIDDEN, MONITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testDeployer() throws Exception {\n        ModelControllerClient client = getClientForUser(DEPLOYER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, DEPLOYER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, DEPLOYER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, DEPLOYER_USER);\n//        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSensitiveAttribute(client, null, null, false, DEPLOYER_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, DEPLOYER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n//        runGC(client, MASTER, OTHER_ONE, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n    }","id":12187,"modified_method":"@Test\n    public void testDeployer() throws Exception {\n        ModelControllerClient client = getClientForUser(DEPLOYER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, DEPLOYER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSensitiveAttribute(client, null, null, false, DEPLOYER_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, DEPLOYER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        runGC(client, SLAVE, SLAVE_B, Outcome.HIDDEN, DEPLOYER_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testAuditor() throws Exception {\n        ModelControllerClient client = getClientForUser(AUDITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, AUDITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, AUDITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, AUDITOR_USER);\n//        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, AUDITOR_USER);\n        checkSensitiveAttribute(client, null, null, false, AUDITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, true, AUDITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.UNAUTHORIZED, AUDITOR_USER);\n//        runGC(client, MASTER, OTHER_ONE, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n    }","id":12188,"modified_method":"@Test\n    public void testAuditor() throws Exception {\n        ModelControllerClient client = getClientForUser(AUDITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, AUDITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, AUDITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, AUDITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, AUDITOR_USER);\n        checkSensitiveAttribute(client, null, null, false, AUDITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, true, AUDITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        runGC(client, SLAVE, SLAVE_B, Outcome.HIDDEN, AUDITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testMaintainer() throws Exception {\n        ModelControllerClient client = getClientForUser(MAINTAINER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MAINTAINER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, MAINTAINER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, MAINTAINER_USER);\n//        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSensitiveAttribute(client, null, null, false, MAINTAINER_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, MAINTAINER_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, MAINTAINER_USER);\n//        runGC(client, MASTER, OTHER_ONE, Outcome.SUCCESS, MAINTAINER_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, MAINTAINER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MAINTAINER_USER);\n    }","id":12189,"modified_method":"@Test\n    public void testMaintainer() throws Exception {\n        ModelControllerClient client = getClientForUser(MAINTAINER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MAINTAINER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSensitiveAttribute(client, null, null, false, MAINTAINER_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, MAINTAINER_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, MAINTAINER_USER);\n        runGC(client, SLAVE, SLAVE_B, Outcome.HIDDEN, MAINTAINER_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, MAINTAINER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MAINTAINER_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testAdministrator() throws Exception {\n        ModelControllerClient client = getClientForUser(ADMINISTRATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, ADMINISTRATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n//        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, null, null, false, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, true, ADMINISTRATOR_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n//        runGC(client, MASTER, OTHER_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, ADMINISTRATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, ADMINISTRATOR_USER);\n    }","id":12190,"modified_method":"@Test\n    public void testAdministrator() throws Exception {\n        ModelControllerClient client = getClientForUser(ADMINISTRATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, ADMINISTRATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, SLAVE, SLAVE_B, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, null, null, false, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, true, ADMINISTRATOR_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        runGC(client, SLAVE, SLAVE_B, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, ADMINISTRATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, ADMINISTRATOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void checkSecurityDomainRead(ModelControllerClient client, String host, String server, Outcome expectedOutcome, String... roles) throws IOException {\n        String sdAddress = host == null ? DEFAULT_PROFILE + \"/\" + SECURITY_DOMAIN : SECURITY_DOMAIN;\n        readResource(client, sdAddress, host, server, expectedOutcome, roles);\n    }","id":12191,"modified_method":"protected void checkSecurityDomainRead(ModelControllerClient client, String host, String server, Outcome expectedOutcome, String... roles) throws IOException {\n        String sdAddress = host == null ? PROFILE_A + \"/\" + SECURITY_DOMAIN : SECURITY_DOMAIN;\n        readResource(client, sdAddress, host, server, expectedOutcome, roles);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void checkSensitiveAttribute(ModelControllerClient client, String host, String server, boolean expectSuccess, String... roles) throws IOException {\n        String dsAddress = host == null ? DEFAULT_PROFILE + \"/\" + EXAMPLE_DS\n                : \"host=\" + host + \"server=\" + server + \"/\" + EXAMPLE_DS;\n        ModelNode attrValue = readResource(client, dsAddress, host, server, Outcome.SUCCESS, roles).get(RESULT, PASSWORD);\n        ModelNode correct = new ModelNode();\n        if (expectSuccess) {\n            correct.set(\"sa\");\n        }\n        assertEquals(correct, attrValue);\n    }","id":12192,"modified_method":"protected void checkSensitiveAttribute(ModelControllerClient client, String host, String server, boolean expectSuccess, String... roles) throws IOException {\n        String dsAddress = host == null ? PROFILE_A + \"/\" + EXAMPLE_DS\n                : \"host=\" + host + \"server=\" + server + \"/\" + EXAMPLE_DS;\n        ModelNode attrValue = readResource(client, dsAddress, host, server, Outcome.SUCCESS, roles).get(RESULT, PASSWORD);\n        ModelNode correct = new ModelNode();\n        if (expectSuccess) {\n            correct.set(\"sa\");\n        }\n        assertEquals(correct, attrValue);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testDeployer() throws Exception {\n        ModelControllerClient client = getClientForUser(DEPLOYER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, DEPLOYER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSensitiveAttribute(client, null, null, false, DEPLOYER_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, DEPLOYER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        runGC(client, MASTER, OTHER_ONE, Outcome.HIDDEN, DEPLOYER_USER);\n        addDeployment2(client, Outcome.SUCCESS, DEPLOYER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n    }","id":12193,"modified_method":"@Test\n    public void testDeployer() throws Exception {\n        ModelControllerClient client = getClientForUser(DEPLOYER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, DEPLOYER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSensitiveAttribute(client, null, null, false, DEPLOYER_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, DEPLOYER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        runGC(client, MASTER, SLAVE_B, Outcome.HIDDEN, DEPLOYER_USER);\n        addDeployment2(client, Outcome.SUCCESS, DEPLOYER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testMonitor() throws Exception {\n        ModelControllerClient client = getClientForUser(MONITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MONITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, MONITOR_USER);\n        checkSensitiveAttribute(client, null, null, false, MONITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, MONITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, MONITOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.UNAUTHORIZED, MONITOR_USER);\n        runGC(client, MASTER, OTHER_ONE, Outcome.HIDDEN, MONITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n    }","id":12194,"modified_method":"@Test\n    public void testMonitor() throws Exception {\n        ModelControllerClient client = getClientForUser(MONITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MONITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, MONITOR_USER);\n        checkSensitiveAttribute(client, null, null, false, MONITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, MONITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, MONITOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.UNAUTHORIZED, MONITOR_USER);\n        runGC(client, MASTER, SLAVE_B, Outcome.HIDDEN, MONITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testAuditor() throws Exception {\n        ModelControllerClient client = getClientForUser(AUDITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, AUDITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, AUDITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, AUDITOR_USER);\n        checkSensitiveAttribute(client, null, null, true, AUDITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, true, AUDITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        runGC(client, MASTER, OTHER_ONE, Outcome.HIDDEN, AUDITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n    }","id":12195,"modified_method":"@Test\n    public void testAuditor() throws Exception {\n        ModelControllerClient client = getClientForUser(AUDITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, AUDITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, AUDITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, AUDITOR_USER);\n        checkSensitiveAttribute(client, null, null, true, AUDITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, true, AUDITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        runGC(client, MASTER, SLAVE_B, Outcome.HIDDEN, AUDITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testMaintainer() throws Exception {\n        ModelControllerClient client = getClientForUser(MAINTAINER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MAINTAINER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSensitiveAttribute(client, null, null, false, MAINTAINER_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, MAINTAINER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, MAINTAINER_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, MAINTAINER_USER);\n        runGC(client, MASTER, OTHER_ONE, Outcome.HIDDEN, MAINTAINER_USER);\n        addDeployment2(client, Outcome.SUCCESS, MAINTAINER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MAINTAINER_USER);\n    }","id":12196,"modified_method":"@Test\n    public void testMaintainer() throws Exception {\n        ModelControllerClient client = getClientForUser(MAINTAINER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MAINTAINER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSensitiveAttribute(client, null, null, false, MAINTAINER_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, MAINTAINER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, MAINTAINER_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, MAINTAINER_USER);\n        runGC(client, MASTER, SLAVE_B, Outcome.HIDDEN, MAINTAINER_USER);\n        addDeployment2(client, Outcome.SUCCESS, MAINTAINER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MAINTAINER_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testAdministrator() throws Exception {\n        ModelControllerClient client = getClientForUser(ADMINISTRATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, ADMINISTRATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, null, null, true, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, true, ADMINISTRATOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, ADMINISTRATOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        runGC(client, MASTER, OTHER_ONE, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        addDeployment2(client, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, ADMINISTRATOR_USER);\n    }","id":12197,"modified_method":"@Test\n    public void testAdministrator() throws Exception {\n        ModelControllerClient client = getClientForUser(ADMINISTRATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, ADMINISTRATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, null, null, true, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, true, ADMINISTRATOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, ADMINISTRATOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        runGC(client, MASTER, SLAVE_B, Outcome.HIDDEN, ADMINISTRATOR_USER);\n        addDeployment2(client, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, ADMINISTRATOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testOperator() throws Exception {\n        ModelControllerClient client = getClientForUser(OPERATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, OPERATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, OPERATOR_USER);\n        checkSensitiveAttribute(client, null, null, false, OPERATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, OPERATOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, OPERATOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, OPERATOR_USER);\n        runGC(client, MASTER, OTHER_ONE, Outcome.HIDDEN, OPERATOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n    }","id":12198,"modified_method":"@Test\n    public void testOperator() throws Exception {\n        ModelControllerClient client = getClientForUser(OPERATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, OPERATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, OPERATOR_USER);\n        checkSensitiveAttribute(client, null, null, false, OPERATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, OPERATOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, OPERATOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, OPERATOR_USER);\n        runGC(client, MASTER, SLAVE_B, Outcome.HIDDEN, OPERATOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected static void setupRoles(DomainClient domainClient) throws IOException {\n        for (int i = 0; i < USERS.length; i++) {\n            ModelNode op = createOpNode(SCOPED_ROLE + USERS[i], ADD);\n            op.get(BASE_ROLE).set(BASES[i]);\n            op.get(SERVER_GROUPS).add(MAIN_SERVER_GROUP);\n            RbacUtil.executeOperation(domainClient, op, Outcome.SUCCESS);\n        }\n    }","id":12199,"modified_method":"protected static void setupRoles(DomainClient domainClient) throws IOException {\n        for (int i = 0; i < USERS.length; i++) {\n            ModelNode op = createOpNode(SCOPED_ROLE + USERS[i], ADD);\n            op.get(BASE_ROLE).set(BASES[i]);\n            op.get(SERVER_GROUPS).add(SERVER_GROUP_A);\n            RbacUtil.executeOperation(domainClient, op, Outcome.SUCCESS);\n        }\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSuperUser() throws Exception {\n        ModelControllerClient client = getClientForUser(SUPERUSER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, SUPERUSER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, SUPERUSER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, MASTER, OTHER_ONE, Outcome.HIDDEN, SUPERUSER_USER);\n        checkSensitiveAttribute(client, null, null, true, SUPERUSER_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, true, SUPERUSER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, SUPERUSER_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        runGC(client, MASTER, OTHER_ONE, Outcome.HIDDEN, SUPERUSER_USER);\n        addDeployment2(client, Outcome.SUCCESS, SUPERUSER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, SUPERUSER_USER);\n    }","id":12200,"modified_method":"@Test\n    public void testSuperUser() throws Exception {\n        ModelControllerClient client = getClientForUser(SUPERUSER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, SUPERUSER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, SUPERUSER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, MASTER, SLAVE_B, Outcome.HIDDEN, SUPERUSER_USER);\n        checkSensitiveAttribute(client, null, null, true, SUPERUSER_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, true, SUPERUSER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, SUPERUSER_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, SUPERUSER_USER);\n        runGC(client, MASTER, SLAVE_B, Outcome.HIDDEN, SUPERUSER_USER);\n        addDeployment2(client, Outcome.SUCCESS, SUPERUSER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, SUPERUSER_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testMonitor() throws Exception {\n        ModelControllerClient client = getClientForUser(MONITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MONITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, MONITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, MONITOR_USER);\n        checkSensitiveAttribute(client, null, null, false, MONITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, MONITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, MONITOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.UNAUTHORIZED, MONITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n    }","id":12201,"modified_method":"@Test\n    public void testMonitor() throws Exception {\n        ModelControllerClient client = getClientForUser(MONITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MONITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MONITOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, MONITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MONITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, MONITOR_USER);\n        checkSensitiveAttribute(client, null, null, false, MONITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, MONITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, MONITOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.UNAUTHORIZED, MONITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, MONITOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testDeployer() throws Exception {\n        ModelControllerClient client = getClientForUser(DEPLOYER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, DEPLOYER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, DEPLOYER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSensitiveAttribute(client, null, null, false, DEPLOYER_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, DEPLOYER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        addDeployment2(client, Outcome.SUCCESS, DEPLOYER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n    }","id":12202,"modified_method":"@Test\n    public void testDeployer() throws Exception {\n        ModelControllerClient client = getClientForUser(DEPLOYER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, DEPLOYER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, DEPLOYER_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, DEPLOYER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, DEPLOYER_USER);\n        checkSensitiveAttribute(client, null, null, false, DEPLOYER_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, DEPLOYER_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n        addDeployment2(client, Outcome.SUCCESS, DEPLOYER_USER);\n        addPath(client, Outcome.UNAUTHORIZED, DEPLOYER_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testAdministrator() throws Exception {\n        ModelControllerClient client = getClientForUser(ADMINISTRATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, ADMINISTRATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, null, null, true, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, true, ADMINISTRATOR_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        addDeployment2(client, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        addPath(client, Outcome.SUCCESS, ADMINISTRATOR_USER);\n    }","id":12203,"modified_method":"@Test\n    public void testAdministrator() throws Exception {\n        ModelControllerClient client = getClientForUser(ADMINISTRATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, ADMINISTRATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, null, null, true, ADMINISTRATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, true, ADMINISTRATOR_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        addDeployment2(client, Outcome.SUCCESS, ADMINISTRATOR_USER);\n        addPath(client, Outcome.SUCCESS, ADMINISTRATOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSuperUser() throws Exception {\n        ModelControllerClient client = getClientForUser(SUPERUSER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, SUPERUSER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSensitiveAttribute(client, null, null, true, SUPERUSER_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, true, SUPERUSER_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, SUPERUSER_USER);\n        addDeployment2(client, Outcome.SUCCESS, SUPERUSER_USER);\n        addPath(client, Outcome.SUCCESS, SUPERUSER_USER);\n    }","id":12204,"modified_method":"@Test\n    public void testSuperUser() throws Exception {\n        ModelControllerClient client = getClientForUser(SUPERUSER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, SUPERUSER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.SUCCESS, SUPERUSER_USER);\n        checkSensitiveAttribute(client, null, null, true, SUPERUSER_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, true, SUPERUSER_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, SUPERUSER_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, SUPERUSER_USER);\n        addDeployment2(client, Outcome.SUCCESS, SUPERUSER_USER);\n        addPath(client, Outcome.SUCCESS, SUPERUSER_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testMaintainer() throws Exception {\n        ModelControllerClient client = getClientForUser(MAINTAINER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MAINTAINER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, MAINTAINER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSensitiveAttribute(client, null, null, false, MAINTAINER_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, MAINTAINER_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, MAINTAINER_USER);\n        addDeployment2(client, Outcome.SUCCESS, MAINTAINER_USER);\n        addPath(client, Outcome.SUCCESS, MAINTAINER_USER);\n    }","id":12205,"modified_method":"@Test\n    public void testMaintainer() throws Exception {\n        ModelControllerClient client = getClientForUser(MAINTAINER_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, MAINTAINER_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, MAINTAINER_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, MAINTAINER_USER);\n        checkSensitiveAttribute(client, null, null, false, MAINTAINER_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, MAINTAINER_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, MAINTAINER_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, MAINTAINER_USER);\n        addDeployment2(client, Outcome.SUCCESS, MAINTAINER_USER);\n        addPath(client, Outcome.SUCCESS, MAINTAINER_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testAuditor() throws Exception {\n        ModelControllerClient client = getClientForUser(AUDITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, AUDITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, AUDITOR_USER);\n        checkSensitiveAttribute(client, null, null, true, AUDITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, true, AUDITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n    }","id":12206,"modified_method":"@Test\n    public void testAuditor() throws Exception {\n        ModelControllerClient client = getClientForUser(AUDITOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, AUDITOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.SUCCESS, AUDITOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.SUCCESS, AUDITOR_USER);\n        checkSensitiveAttribute(client, null, null, true, AUDITOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, true, AUDITOR_USER);\n        runGC(client, MASTER, null, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, AUDITOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testOperator() throws Exception {\n        ModelControllerClient client = getClientForUser(OPERATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, OPERATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, MAIN_ONE, Outcome.SUCCESS, OPERATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MAIN_ONE, Outcome.HIDDEN, OPERATOR_USER);\n        checkSensitiveAttribute(client, null, null, false, OPERATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MAIN_ONE, false, OPERATOR_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        runGC(client, MASTER, MAIN_ONE, Outcome.SUCCESS, OPERATOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n    }","id":12207,"modified_method":"@Test\n    public void testOperator() throws Exception {\n        ModelControllerClient client = getClientForUser(OPERATOR_USER, isAllowLocalAuth(), masterClientConfig);\n        checkStandardReads(client, null, null, OPERATOR_USER);\n        checkRootRead(client, null, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        checkRootRead(client, MASTER, MASTER_A, Outcome.SUCCESS, OPERATOR_USER);\n        checkSecurityDomainRead(client, null, null, Outcome.HIDDEN, OPERATOR_USER);\n        checkSecurityDomainRead(client, MASTER, MASTER_A, Outcome.HIDDEN, OPERATOR_USER);\n        checkSensitiveAttribute(client, null, null, false, OPERATOR_USER);\n        checkSensitiveAttribute(client, MASTER, MASTER_A, false, OPERATOR_USER);\n        runGC(client, MASTER, null, Outcome.SUCCESS, OPERATOR_USER);\n        runGC(client, MASTER, MASTER_A, Outcome.SUCCESS, OPERATOR_USER);\n        addDeployment2(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n        addPath(client, Outcome.UNAUTHORIZED, OPERATOR_USER);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n        testSupport = DomainRbacTestSuite.createSupport(PermissionsCoverageTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        UserRolesMappingServerSetupTask.StandardUsersSetup.INSTANCE.setup(domainClient);\n    }","id":12208,"modified_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n        testSupport = FullRbacProviderTestSuite.createSupport(PermissionsCoverageTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        UserRolesMappingServerSetupTask.StandardUsersSetup.INSTANCE.setup(domainClient);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        try {\n            UserRolesMappingServerSetupTask.StandardUsersSetup.INSTANCE.tearDown(testSupport.getDomainMasterLifecycleUtil().getDomainClient());\n        } finally {\n            DomainRbacTestSuite.stopSupport();\n            testSupport = null;\n        }\n    }","id":12209,"modified_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        try {\n            UserRolesMappingServerSetupTask.StandardUsersSetup.INSTANCE.tearDown(testSupport.getDomainMasterLifecycleUtil().getDomainClient());\n        } finally {\n            FullRbacProviderTestSuite.stopSupport();\n            testSupport = null;\n        }\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        try {\n            HostRolesMappingSetup.INSTANCE.tearDown(domainClient);\n        } finally {\n            try {\n                tearDownRoles(domainClient);\n            } finally {\n                try {\n                    removeDeployment1(domainClient);\n                } finally {\n                    DomainRbacTestSuite.stopSupport();\n                    testSupport = null;\n                }\n            }\n        }\n    }","id":12210,"modified_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        try {\n            HostRolesMappingSetup.INSTANCE.tearDown(domainClient);\n        } finally {\n            try {\n                tearDownRoles(domainClient);\n            } finally {\n                try {\n                    removeDeployment1(domainClient);\n                } finally {\n                    FullRbacProviderTestSuite.stopSupport();\n                    testSupport = null;\n                }\n            }\n        }\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n        testSupport = DomainRbacTestSuite.createSupport(RBACProviderHostScopedRolesTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        setupRoles(domainClient);\n        HostRolesMappingSetup.INSTANCE.setup(domainClient);\n        deployDeployment1(domainClient);\n    }","id":12211,"modified_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n        testSupport = FullRbacProviderTestSuite.createSupport(RBACProviderHostScopedRolesTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        setupRoles(domainClient);\n        HostRolesMappingSetup.INSTANCE.setup(domainClient);\n        deployDeployment1(domainClient);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n\n        try {\n            ServerGroupRolesMappingSetup.INSTANCE.tearDown(domainClient);\n        } finally {\n            try {\n                tearDownRoles(domainClient);\n            } finally {\n                try {\n                    removeDeployment1(domainClient);\n                } finally {\n                    DomainRbacTestSuite.stopSupport();\n                    testSupport = null;\n                }\n            }\n        }\n    }","id":12212,"modified_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n\n        try {\n            ServerGroupRolesMappingSetup.INSTANCE.tearDown(domainClient);\n        } finally {\n            try {\n                tearDownRoles(domainClient);\n            } finally {\n                try {\n                    removeDeployment1(domainClient);\n                } finally {\n                    FullRbacProviderTestSuite.stopSupport();\n                    testSupport = null;\n                }\n            }\n        }\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n        testSupport = DomainRbacTestSuite.createSupport(RBACProviderServerGroupScopedRolesTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        setupRoles(domainClient);\n        ServerGroupRolesMappingSetup.INSTANCE.setup(domainClient);\n        deployDeployment1(domainClient);\n    }","id":12213,"modified_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n        testSupport = FullRbacProviderTestSuite.createSupport(RBACProviderServerGroupScopedRolesTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        setupRoles(domainClient);\n        ServerGroupRolesMappingSetup.INSTANCE.setup(domainClient);\n        deployDeployment1(domainClient);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n\n        try {\n            UserRolesMappingServerSetupTask.StandardUsersSetup.INSTANCE.tearDown(testSupport.getDomainMasterLifecycleUtil().getDomainClient());\n        } finally {\n            try {\n                removeDeployment1(testSupport.getDomainMasterLifecycleUtil().getDomainClient());\n            } finally {\n                DomainRbacTestSuite.stopSupport();\n                testSupport = null;\n            }\n        }\n    }","id":12214,"modified_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n\n        try {\n            UserRolesMappingServerSetupTask.StandardUsersSetup.INSTANCE.tearDown(testSupport.getDomainMasterLifecycleUtil().getDomainClient());\n        } finally {\n            try {\n                removeDeployment1(testSupport.getDomainMasterLifecycleUtil().getDomainClient());\n            } finally {\n                FullRbacProviderTestSuite.stopSupport();\n                testSupport = null;\n            }\n        }\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n        testSupport = DomainRbacTestSuite.createSupport(RBACProviderStandardRolesTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        UserRolesMappingServerSetupTask.StandardUsersSetup.INSTANCE.setup(domainClient);\n        deployDeployment1(domainClient);\n    }","id":12215,"modified_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n        testSupport = FullRbacProviderTestSuite.createSupport(RBACProviderStandardRolesTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        UserRolesMappingServerSetupTask.StandardUsersSetup.INSTANCE.setup(domainClient);\n        deployDeployment1(domainClient);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n\n        try {\n            tearDownRoles(domainClient);\n        } finally {\n            try {\n                removeDeployment1(domainClient);\n            } finally {\n                // TODO use DomainTestSuite once config propagation to slaves is sorted\n//                testSupport = null;\n//                DomainTestSuite.stopSupport();\n                testSupport.stop();\n                testSupport = null;\n            }\n        }\n    }","id":12216,"modified_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n\n        try {\n            tearDownRoles(domainClient);\n        } finally {\n            try {\n                removeDeployment1(domainClient);\n            } finally {\n                testSupport = null;\n                SimpleRbacProviderTestSuite.stopSupport();\n            }\n        }\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n\n        // Launch the domain\n\n        // TODO use DomainTestSuite once config propagation to slaves is sorted\n//        testSupport = DomainTestSuite.createSupport(SimpleRbacProviderTestCase.class.getSimpleName());\n        final DomainTestSupport.Configuration config =\n                DomainTestSupport.Configuration.create(SimpleProviderHostScopedRolesTestCase.class.getSimpleName(),\n                        \"domain-configs/domain-standard.xml\", \"host-configs/host-master.xml\", null);\n        testSupport = DomainTestSupport.createAndStartSupport(config);\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        setupRoles(domainClient);\n        deployDeployment1(domainClient);\n    }","id":12217,"modified_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n\n        // Launch the domain\n\n        testSupport = SimpleRbacProviderTestSuite.createSupport(SimpleProviderHostScopedRolesTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        setupRoles(domainClient);\n        deployDeployment1(domainClient);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n\n        // Launch the domain\n\n        // TODO use DomainTestSuite once config propagation to slaves is sorted\n//        testSupport = DomainTestSuite.createSupport(SimpleRbacProviderTestCase.class.getSimpleName());\n        final DomainTestSupport.Configuration config =\n                DomainTestSupport.Configuration.create(SimpleProviderServerGroupScopedRolesTestCase.class.getSimpleName(),\n                \"domain-configs/domain-standard.xml\", \"host-configs/host-master.xml\", null);\n        testSupport = DomainTestSupport.createAndStartSupport(config);\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        setupRoles(domainClient);\n        deployDeployment1(domainClient);\n    }","id":12218,"modified_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n\n        // Launch the domain\n\n        testSupport = SimpleRbacProviderTestSuite.createSupport(SimpleProviderServerGroupScopedRolesTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n        setupRoles(domainClient);\n        deployDeployment1(domainClient);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n\n        try {\n            tearDownRoles(domainClient);\n        } finally {\n            try {\n                removeDeployment1(domainClient);\n            } finally {\n                // TODO use DomainTestSuite once config propagation to slaves is sorted\n//                testSupport = null;\n//                DomainTestSuite.stopSupport();\n                testSupport.stop();\n                testSupport = null;\n            }\n        }\n    }","id":12219,"modified_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n\n        try {\n            tearDownRoles(domainClient);\n        } finally {\n            try {\n                removeDeployment1(domainClient);\n            } finally {\n                testSupport = null;\n                SimpleRbacProviderTestSuite.stopSupport();\n            }\n        }\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n\n        try {\n            removeDeployment1(testSupport.getDomainMasterLifecycleUtil().getDomainClient());\n        } finally {\n            // TODO use DomainTestSuite once config propagation to slaves is sorted\n//            testSupport = null;\n//            DomainTestSuite.stopSupport();\n            testSupport.stop();\n            testSupport = null;\n        }\n    }","id":12220,"modified_method":"@AfterClass\n    public static void tearDownDomain() throws Exception {\n\n        try {\n            removeDeployment1(testSupport.getDomainMasterLifecycleUtil().getDomainClient());\n        } finally {\n            testSupport = null;\n            SimpleRbacProviderTestSuite.stopSupport();\n        }\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n\n        // Launch the domain\n\n        // TODO use DomainTestSuite once config propagation to slaves is sorted\n//        testSupport = DomainTestSuite.createSupport(SimpleRbacProviderTestCase.class.getSimpleName());\n        final DomainTestSupport.Configuration config = DomainTestSupport.Configuration.create(SimpleProviderStandardRolesTestCase.class.getSimpleName(),\n                \"domain-configs/domain-standard.xml\", \"host-configs/host-master.xml\", null);\n        testSupport = DomainTestSupport.createAndStartSupport(config);\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n\n        deployDeployment1(domainClient);\n    }","id":12221,"modified_method":"@BeforeClass\n    public static void setupDomain() throws Exception {\n\n        // Launch the domain\n\n        testSupport = SimpleRbacProviderTestSuite.createSupport(SimpleProviderStandardRolesTestCase.class.getSimpleName());\n        masterClientConfig = testSupport.getDomainMasterConfiguration();\n        DomainClient domainClient = testSupport.getDomainMasterLifecycleUtil().getDomainClient();\n\n        deployDeployment1(domainClient);\n    }","commit_id":"ddd1903bbd3822bd7f4632aca2c27287266141b5","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String service = req.getParameter(SERVICE);\n        if (service == null) {\n            throw new ServletException(String.format(\"No %s specified\", SERVICE));\n        }\n        this.log(String.format(\"Received request for %s\", service));\n        Environment env = (Environment) CurrentServiceContainer.getServiceContainer().getService(ServiceName.parse(service)).getValue();\n        if (env != null) {\n            resp.setHeader(\"node\", env.getNodeName());\n        }\n        resp.getWriter().write(\"Success\");\n    }","id":12222,"modified_method":"@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String serviceName = getRequiredParameter(req, SERVICE);\n        String expected = req.getParameter(EXPECTED);\n        this.log(String.format(\"Received request for %s, expecting %s\", serviceName, expected));\n        @SuppressWarnings(\"unchecked\")\n        ServiceController<Environment> service = (ServiceController<Environment>) CurrentServiceContainer.getServiceContainer().getService(ServiceName.parse(serviceName));\n        Environment env = service.getValue();\n        if (expected != null) {\n            for (int i = 0; i < RETRIES; ++i) {\n                if ((env != null) && expected.equals(env.getNodeName())) break;\n                Thread.yield();\n                env = service.getValue();\n            }\n        }\n        if (env != null) {\n            resp.setHeader(\"node\", env.getNodeName());\n        }\n        resp.getWriter().write(\"Success\");\n    }","commit_id":"1ba60a85b6b72fac878a355b79ce57224172dbe6","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static URI createURI(URL baseURL, ServiceName serviceName) throws URISyntaxException {\n        return baseURL.toURI().resolve(new StringBuilder(SERVLET_NAME).append('?').append(SERVICE).append('=').append(serviceName.getCanonicalName()).toString());\n    }","id":12223,"modified_method":"public static URI createURI(URL baseURL, ServiceName serviceName) throws URISyntaxException {\n        return baseURL.toURI().resolve(buildQuery(serviceName).toString());\n    }","commit_id":"1ba60a85b6b72fac878a355b79ce57224172dbe6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Inject\n    public ShardSlowLogSearchService(ShardId shardId, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService) {\n        super(shardId, indexSettings);\n\n        this.reformat = componentSettings.getAsBoolean(\"reformat\", true);\n\n        this.queryWarnThreshold = parseTimeSetting(\"threshold.query.warn\", -1);\n        this.queryInfoThreshold = parseTimeSetting(\"threshold.query.info\", -1);\n        this.queryDebugThreshold = parseTimeSetting(\"threshold.query.debug\", -1);\n        this.queryTraceThreshold = parseTimeSetting(\"threshold.query.trace\", -1);\n\n        this.fetchWarnThreshold = parseTimeSetting(\"threshold.fetch.warn\", -1);\n        this.fetchInfoThreshold = parseTimeSetting(\"threshold.fetch.info\", -1);\n        this.fetchDebugThreshold = parseTimeSetting(\"threshold.fetch.debug\", -1);\n        this.fetchTraceThreshold = parseTimeSetting(\"threshold.fetch.trace\", -1);\n\n        this.level = componentSettings.get(\"level\", \"TRACE\").toUpperCase(Locale.ROOT);\n\n        this.queryLogger = Loggers.getLogger(logger, \".query\");\n        this.fetchLogger = Loggers.getLogger(logger, \".fetch\");\n\n        queryLogger.setLevel(level);\n        fetchLogger.setLevel(level);\n\n        indexSettingsService.addListener(new ApplySettings());\n    }","id":12224,"modified_method":"@Inject\n    public ShardSlowLogSearchService(ShardId shardId, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService) {\n        super(shardId, indexSettings);\n\n        this.reformat = componentSettings.getAsBoolean(\"reformat\", true);\n\n        this.queryWarnThreshold = componentSettings.getAsTime(\"threshold.query.warn\", TimeValue.timeValueNanos(-1)).nanos();\n        this.queryInfoThreshold = componentSettings.getAsTime(\"threshold.query.info\", TimeValue.timeValueNanos(-1)).nanos();\n        this.queryDebugThreshold = componentSettings.getAsTime(\"threshold.query.debug\", TimeValue.timeValueNanos(-1)).nanos();\n        this.queryTraceThreshold = componentSettings.getAsTime(\"threshold.query.trace\", TimeValue.timeValueNanos(-1)).nanos();\n\n        this.fetchWarnThreshold = componentSettings.getAsTime(\"threshold.fetch.warn\", TimeValue.timeValueNanos(-1)).nanos();\n        this.fetchInfoThreshold = componentSettings.getAsTime(\"threshold.fetch.info\", TimeValue.timeValueNanos(-1)).nanos();\n        this.fetchDebugThreshold = componentSettings.getAsTime(\"threshold.fetch.debug\", TimeValue.timeValueNanos(-1)).nanos();\n        this.fetchTraceThreshold = componentSettings.getAsTime(\"threshold.fetch.trace\", TimeValue.timeValueNanos(-1)).nanos();\n\n        this.level = componentSettings.get(\"level\", \"TRACE\").toUpperCase(Locale.ROOT);\n\n        this.queryLogger = Loggers.getLogger(logger, \".query\");\n        this.fetchLogger = Loggers.getLogger(logger, \".fetch\");\n\n        queryLogger.setLevel(level);\n        fetchLogger.setLevel(level);\n\n        indexSettingsService.addListener(new ApplySettings());\n    }","commit_id":"dab841d4ecaf434ff7cf87fa8c5af76edd8acf53","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private String formatField(Value v, XMLField field)\r\n    {\r\n        String retval=\"\";\r\n        if(field == null)\r\n            return \"\";\r\n\r\n        if(v == null || v.isNull()) {\r\n            String defaultNullValue = field.getNullString();\r\n            return defaultNullValue != null ? defaultNullValue : \"\";\r\n        }\r\n\r\n        if (v.isBigNumber() || v.isNumber() || v.isInteger())\r\n        {\r\n            if (field.getFormat() == null) {\r\n                return  v.toString();\r\n            }\r\n            // Formatting\r\n            if ( !Const.isEmpty(field.getFormat()) )\r\n            {\r\n                data.df.applyPattern(field.getFormat());\r\n            }\r\n            else\r\n            {\r\n                data.df.applyPattern(data.defaultDecimalFormat.toLocalizedPattern());\r\n            }\r\n            // Decimal \r\n            if ( !Const.isEmpty( field.getDecimalSymbol()) )\r\n            {\r\n                data.dfs.setDecimalSeparator( field.getDecimalSymbol().charAt(0) );\r\n            }\r\n            else\r\n            {\r\n                data.dfs.setDecimalSeparator( data.defaultDecimalFormatSymbols.getDecimalSeparator() );\r\n            }\r\n            // Grouping\r\n            if ( !Const.isEmpty( field.getGroupingSymbol()) )\r\n            {\r\n                data.dfs.setGroupingSeparator( field.getGroupingSymbol().charAt(0) );\r\n            }\r\n            else\r\n            {\r\n                data.dfs.setGroupingSeparator( data.defaultDecimalFormatSymbols.getGroupingSeparator() );\r\n            }\r\n            // Currency symbol\r\n            if ( !Const.isEmpty( field.getCurrencySymbol()) ) \r\n            {\r\n                data.dfs.setCurrencySymbol( field.getCurrencySymbol() );\r\n            }\r\n            else\r\n            {\r\n                data.dfs.setCurrencySymbol( data.defaultDecimalFormatSymbols.getCurrencySymbol() );\r\n            }\r\n\r\n            data.df.setDecimalFormatSymbols(data.dfs);\r\n\r\n            if (v.isBigNumber())\r\n            {\r\n                retval=data.df.format(v.getBigNumber());\r\n            }\r\n            else if (v.isNumber())\r\n            {\r\n                retval=data.df.format(v.getNumber());\r\n            }\r\n            else // Integer\r\n            {\r\n                retval=data.df.format(v.getInteger());\r\n            }\r\n        }\r\n        else\r\n            if (v.isDate())\r\n            {\r\n                if (field!=null && field.getFormat()!=null && v.getDate()!=null)\r\n                {\r\n                    if (!Const.isEmpty(field.getFormat()))\r\n                    {\r\n                        data.daf.applyPattern( field.getFormat() );\r\n                    }\r\n                    else\r\n                    {\r\n                        data.daf.applyPattern( data.defaultDateFormat.toLocalizedPattern() );\r\n                    }\r\n                    data.daf.setDateFormatSymbols(data.dafs);\r\n                    retval= data.daf.format(v.getDate());\r\n                }\r\n                else\r\n                {\r\n                    if (v.isNull() || v.getDate()==null) \r\n                    {\r\n                        if (field!=null && field.getNullString()!=null)\r\n                        {\r\n                            retval=field.getNullString();\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        retval=v.toString();\r\n                    }\r\n                }\r\n            }\r\n            else\r\n                if (v.isString())\r\n                {\r\n                    retval=v.toString();\r\n                }\r\n                else if (v.isBinary())\r\n                {\r\n                    if (v.isNull())\r\n                    {\r\n                        if (field.getNullString()!=null) retval=field.getNullString();\r\n                        else retval=Const.NULL_BINARY;\r\n                    }\r\n                    else\r\n                    {                   \r\n                        try {\r\n                            retval=new String(v.getBytes(), \"US-ASCII\");\r\n                        } catch (UnsupportedEncodingException e) {\r\n                            // chances are small we'll get here. US_ASCII is\r\n                            // mandatory.\r\n                            retval=Const.NULL_BINARY;   \r\n                        }                   \r\n                    }\r\n                }        \r\n                else // Boolean\r\n                {\r\n                    retval=v.toString();\r\n                }\r\n\r\n        return retval;\r\n    }","id":12225,"modified_method":"private String formatField(Value v, XMLField field)\r\n    {\r\n        String retval=\"\";\r\n        if(field == null)\r\n            return \"\";\r\n\r\n        if(v == null || v.isNull()) \r\n        {\r\n            String defaultNullValue = field.getNullString();\r\n            return Const.isEmpty(defaultNullValue) ? \"\" : defaultNullValue ;\r\n        }\r\n\r\n        if (v.isNumeric())\r\n        {\r\n            // Formatting\r\n            if ( !Const.isEmpty(field.getFormat()) )\r\n            {\r\n                data.df.applyPattern(field.getFormat());\r\n            }\r\n            else\r\n            {\r\n                data.df.applyPattern(data.defaultDecimalFormat.toPattern());\r\n            }\r\n            // Decimal \r\n            if ( !Const.isEmpty( field.getDecimalSymbol()) )\r\n            {\r\n                data.dfs.setDecimalSeparator( field.getDecimalSymbol().charAt(0) );\r\n            }\r\n            else\r\n            {\r\n                data.dfs.setDecimalSeparator( data.defaultDecimalFormatSymbols.getDecimalSeparator() );\r\n            }\r\n            // Grouping\r\n            if ( !Const.isEmpty( field.getGroupingSymbol()) )\r\n            {\r\n                data.dfs.setGroupingSeparator( field.getGroupingSymbol().charAt(0) );\r\n            }\r\n            else\r\n            {\r\n                data.dfs.setGroupingSeparator( data.defaultDecimalFormatSymbols.getGroupingSeparator() );\r\n            }\r\n            // Currency symbol\r\n            if ( !Const.isEmpty( field.getCurrencySymbol()) ) \r\n            {\r\n                data.dfs.setCurrencySymbol( field.getCurrencySymbol() );\r\n            }\r\n            else\r\n            {\r\n                data.dfs.setCurrencySymbol( data.defaultDecimalFormatSymbols.getCurrencySymbol() );\r\n            }\r\n\r\n            data.df.setDecimalFormatSymbols(data.dfs);\r\n\r\n            if (v.isBigNumber())\r\n            {\r\n                retval=data.df.format(v.getBigNumber());\r\n            }\r\n            else if (v.isNumber())\r\n            {\r\n                retval=data.df.format(v.getNumber());\r\n            }\r\n            else // Integer\r\n            {\r\n                retval=data.df.format(v.getInteger());\r\n            }\r\n        }\r\n        else\r\n        if (v.isDate())\r\n        {\r\n            if (field!=null && !Const.isEmpty(field.getFormat()) && v.getDate()!=null)\r\n            {\r\n                if (!Const.isEmpty(field.getFormat()))\r\n                {\r\n                    data.daf.applyPattern( field.getFormat() );\r\n                }\r\n                else\r\n                {\r\n                    data.daf.applyPattern( data.defaultDateFormat.toLocalizedPattern() );\r\n                }\r\n                data.daf.setDateFormatSymbols(data.dafs);\r\n                retval= data.daf.format(v.getDate());\r\n            }\r\n            else\r\n            {\r\n                if (v.isNull() || v.getDate()==null) \r\n                {\r\n                    if (field!=null && !Const.isEmpty(field.getNullString()))\r\n                    {\r\n                        retval=field.getNullString();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    retval=v.toString();\r\n                }\r\n            }\r\n        }\r\n        else\r\n        if (v.isString())\r\n        {\r\n            retval=v.toString();\r\n        }\r\n        else if (v.isBinary())\r\n        {\r\n            if (v.isNull())\r\n            {\r\n                if (!Const.isEmpty(field.getNullString()))\r\n                {\r\n                    retval=field.getNullString();\r\n                }\r\n                else\r\n                {\r\n                    retval=Const.NULL_BINARY;\r\n                }\r\n            }\r\n            else\r\n            {                   \r\n                try \r\n                {\r\n                    retval=new String(v.getBytes(), \"UTF-8\");\r\n                } \r\n                catch (UnsupportedEncodingException e) \r\n                {\r\n                    // chances are small we'll get here. UTF-8 is\r\n                    // mandatory.\r\n                    retval=Const.NULL_BINARY;   \r\n                }                   \r\n            }\r\n        }        \r\n        else // Boolean\r\n        {\r\n            retval=v.toString();\r\n        }\r\n\r\n        return retval;\r\n    }","commit_id":"d7cd7b81ee2b8400e495453751f6025eed5a9600","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getXML()\r\n    {\r\n        StringBuffer retval=new StringBuffer();\r\n        \r\n        retval.append(\"    \"+XMLHandler.addTagValue(\"encoding\",  encoding));\r\n        retval.append(\"    \"+XMLHandler.addTagValue(\"valueName\",  valueName));\r\n        retval.append(\"    \"+XMLHandler.addTagValue(\"xml_repeat_element\",  rootNode));\r\n\r\n        retval.append(\"    <file>\"+Const.CR);\r\n        retval.append(\"      \"+XMLHandler.addTagValue(\"omitXMLheader\", omitXMLheader));\r\n        retval.append(\"      <\/file>\"+Const.CR);\r\n        retval.append(\"    <fields>\"+Const.CR);\r\n        for (int i=0;i<outputFields.length;i++)\r\n        {\r\n            XMLField field = outputFields[i];\r\n            \r\n            if (field.getFieldName()!=null && field.getFieldName().length()!=0)\r\n            {\r\n                retval.append(\"      <field>\"+Const.CR);\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"name\",      field.getFieldName()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"element\",   field.getElementName()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"type\",      field.getTypeDesc()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"format\",    field.getFormat()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"currency\",  field.getCurrencySymbol()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"decimal\",   field.getDecimalSymbol()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"group\",     field.getGroupingSymbol()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"nullif\",    field.getNullString()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"length\",    field.getLength()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"precision\", field.getPrecision()));\r\n                retval.append(\"        <\/field>\"+Const.CR);\r\n            }\r\n        }\r\n        retval.append(\"      <\/fields>\"+Const.CR);\r\n\r\n        return retval.toString();\r\n    }","id":12226,"modified_method":"public String getXML()\r\n    {\r\n        StringBuffer retval=new StringBuffer();\r\n        \r\n        retval.append(\"    \"+XMLHandler.addTagValue(\"encoding\",  encoding));\r\n        retval.append(\"    \"+XMLHandler.addTagValue(\"valueName\",  valueName));\r\n        retval.append(\"    \"+XMLHandler.addTagValue(\"xml_repeat_element\",  rootNode));\r\n\r\n        retval.append(\"    <file>\"+Const.CR);\r\n        retval.append(\"      \"+XMLHandler.addTagValue(\"omitXMLheader\", omitXMLheader));\r\n        retval.append(\"      <\/file>\"+Const.CR);\r\n        retval.append(\"    <fields>\"+Const.CR);\r\n        for (int i=0;i<outputFields.length;i++)\r\n        {\r\n            XMLField field = outputFields[i];\r\n            \r\n            if (field.getFieldName()!=null && field.getFieldName().length()!=0)\r\n            {\r\n                retval.append(\"      <field>\"+Const.CR);\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"name\",      field.getFieldName()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"element\",   field.getElementName()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"type\",      field.getTypeDesc()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"format\",    field.getFormat()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"currency\",  field.getCurrencySymbol()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"decimal\",   field.getDecimalSymbol()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"group\",     field.getGroupingSymbol()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"nullif\",    field.getNullString()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"length\",    field.getLength()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"precision\", field.getPrecision()));\r\n                retval.append(\"        \"+XMLHandler.addTagValue(\"attribute\", field.isAttribute()));\r\n                retval.append(\"        <\/field>\"+Const.CR);\r\n            }\r\n        }\r\n        retval.append(\"      <\/fields>\"+Const.CR);\r\n\r\n        return retval.toString();\r\n    }","commit_id":"d7cd7b81ee2b8400e495453751f6025eed5a9600","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void readData(Node stepnode)\r\n        throws KettleXMLException\r\n    {\r\n        try\r\n        {\r\n            encoding         = XMLHandler.getTagValue(stepnode, \"encoding\");\r\n            valueName      = XMLHandler.getTagValue(stepnode, \"valueName\");\r\n            rootNode    = XMLHandler.getTagValue(stepnode, \"xml_repeat_element\");\r\n\r\n            omitXMLheader    = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(stepnode, \"file\", \"omitXMLheader\"));\r\n            \r\n            Node fields = XMLHandler.getSubNode(stepnode, \"fields\");\r\n            int nrfields= XMLHandler.countNodes(fields, \"field\");\r\n    \r\n            allocate(nrfields);\r\n            \r\n            for (int i=0;i<nrfields;i++)\r\n            {\r\n                Node fnode = XMLHandler.getSubNodeByNr(fields, \"field\", i);\r\n            \r\n                outputFields[i] = new XMLField();\r\n                outputFields[i].setFieldName( XMLHandler.getTagValue(fnode, \"name\") );\r\n                outputFields[i].setElementName( XMLHandler.getTagValue(fnode, \"element\") );\r\n                outputFields[i].setType( XMLHandler.getTagValue(fnode, \"type\") );\r\n                outputFields[i].setFormat( XMLHandler.getTagValue(fnode, \"format\") );\r\n                outputFields[i].setCurrencySymbol( XMLHandler.getTagValue(fnode, \"currency\") );\r\n                outputFields[i].setDecimalSymbol( XMLHandler.getTagValue(fnode, \"decimal\") );\r\n                outputFields[i].setGroupingSymbol( XMLHandler.getTagValue(fnode, \"group\") );\r\n                outputFields[i].setNullString( XMLHandler.getTagValue(fnode, \"nullif\") );\r\n                outputFields[i].setLength( Const.toInt(XMLHandler.getTagValue(fnode, \"length\"), -1) );\r\n                outputFields[i].setPrecision( Const.toInt(XMLHandler.getTagValue(fnode, \"precision\"), -1) );\r\n            }\r\n        }\r\n        catch(Exception e)\r\n        {\r\n            throw new KettleXMLException(\"Unable to load step info from XML\", e);\r\n        }\r\n    }","id":12227,"modified_method":"private void readData(Node stepnode)\r\n        throws KettleXMLException\r\n    {\r\n        try\r\n        {\r\n            encoding         = XMLHandler.getTagValue(stepnode, \"encoding\");\r\n            valueName      = XMLHandler.getTagValue(stepnode, \"valueName\");\r\n            rootNode    = XMLHandler.getTagValue(stepnode, \"xml_repeat_element\");\r\n\r\n            omitXMLheader    = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(stepnode, \"file\", \"omitXMLheader\"));\r\n            \r\n            Node fields = XMLHandler.getSubNode(stepnode, \"fields\");\r\n            int nrfields= XMLHandler.countNodes(fields, \"field\");\r\n    \r\n            allocate(nrfields);\r\n            \r\n            for (int i=0;i<nrfields;i++)\r\n            {\r\n                Node fnode = XMLHandler.getSubNodeByNr(fields, \"field\", i);\r\n            \r\n                outputFields[i] = new XMLField();\r\n                outputFields[i].setFieldName( XMLHandler.getTagValue(fnode, \"name\") );\r\n                outputFields[i].setElementName( XMLHandler.getTagValue(fnode, \"element\") );\r\n                outputFields[i].setType( XMLHandler.getTagValue(fnode, \"type\") );\r\n                outputFields[i].setFormat( XMLHandler.getTagValue(fnode, \"format\") );\r\n                outputFields[i].setCurrencySymbol( XMLHandler.getTagValue(fnode, \"currency\") );\r\n                outputFields[i].setDecimalSymbol( XMLHandler.getTagValue(fnode, \"decimal\") );\r\n                outputFields[i].setGroupingSymbol( XMLHandler.getTagValue(fnode, \"group\") );\r\n                outputFields[i].setNullString( XMLHandler.getTagValue(fnode, \"nullif\") );\r\n                outputFields[i].setLength( Const.toInt(XMLHandler.getTagValue(fnode, \"length\"), -1) );\r\n                outputFields[i].setPrecision( Const.toInt(XMLHandler.getTagValue(fnode, \"precision\"), -1) );\r\n                outputFields[i].setAttribute( \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(fnode, \"attribute\") ) );\r\n            }\r\n        }\r\n        catch(Exception e)\r\n        {\r\n            throw new KettleXMLException(\"Unable to load step info from XML\", e);\r\n        }\r\n    }","commit_id":"d7cd7b81ee2b8400e495453751f6025eed5a9600","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void setDefault()\r\n    {\r\n        omitXMLheader    = true;\r\n        encoding         = Const.XML_ENCODING;\r\n        \r\n        valueName        = \"xmlvaluename\";\r\n        rootNode         = \"Row\";\r\n\r\n\r\n        int nrfields=0;\r\n        \r\n        allocate(nrfields);\r\n                    \r\n        for (int i=0;i<nrfields;i++)\r\n        {\r\n            outputFields[i] = new XMLField();\r\n\r\n            outputFields[i].setFieldName( \"field\"+i );              \r\n            outputFields[i].setElementName( \"field\"+i );              \r\n            outputFields[i].setType( \"Number\" );\r\n            outputFields[i].setFormat( \" 0,000,000.00;-0,000,000.00\" );\r\n            outputFields[i].setCurrencySymbol( \"\" );\r\n            outputFields[i].setDecimalSymbol( \",\" );\r\n            outputFields[i].setGroupingSymbol(  \".\" );\r\n            outputFields[i].setNullString( \"\" );\r\n            outputFields[i].setLength( -1 );\r\n            outputFields[i].setPrecision( -1 );\r\n        }\r\n    }","id":12228,"modified_method":"public void setDefault()\r\n    {\r\n        omitXMLheader    = true;\r\n        encoding         = Const.XML_ENCODING;\r\n        \r\n        valueName        = \"xmlvaluename\";\r\n        rootNode         = \"Row\";\r\n\r\n\r\n        int nrfields=0;\r\n        \r\n        allocate(nrfields);\r\n                    \r\n        for (int i=0;i<nrfields;i++)\r\n        {\r\n            outputFields[i] = new XMLField();\r\n\r\n            outputFields[i].setFieldName( \"field\"+i );              \r\n            outputFields[i].setElementName( \"field\"+i );              \r\n            outputFields[i].setType( \"Number\" );\r\n            outputFields[i].setFormat( \" 0,000,000.00;-0,000,000.00\" );\r\n            outputFields[i].setCurrencySymbol( \"\" );\r\n            outputFields[i].setDecimalSymbol( \",\" );\r\n            outputFields[i].setGroupingSymbol(  \".\" );\r\n            outputFields[i].setNullString( \"\" );\r\n            outputFields[i].setLength( -1 );\r\n            outputFields[i].setPrecision( -1 );\r\n            outputFields[i].setAttribute( false );\r\n        }\r\n    }","commit_id":"d7cd7b81ee2b8400e495453751f6025eed5a9600","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private String formatField(Value v, int idx)\r\n    {\r\n        String retval=\"\";\r\n\r\n        TextFileField field = null;\r\n        if (idx>=0) field = meta.getOutputFields()[idx];\r\n        \r\n        if (v.isString())\r\n        {\r\n            if (v.isNull() || v.getString()==null) \r\n            {\r\n                if (idx>=0 && field!=null && field.getNullString()!=null) \r\n                {\r\n                    if (meta.isEnclosureForced() && meta.getEnclosure()!=null)\r\n                    {\r\n                        retval=meta.getEnclosure()+field.getNullString()+meta.getEnclosure();\r\n                    }\r\n                    else\r\n                    {\r\n                        retval=field.getNullString();\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n       \t\t    // Any separators in string?\r\n\t\t    // example: 123.4;\"a;b;c\";Some name\r\n\t\t    String value = v.toString();\r\n\t\t    // do not output separator if it is null or when \r\n\t\t    // there is no separator in the value and enclosure\r\n\t\t    // is not forced (i.e. optional enclosure).\r\n\t\t    // N.B. be careful not to call indexOf with null string.\r\n\t\t    \r\n\t\t    String separator = meta.getSeparator();\r\n\t\t    boolean enclosureIsOptional = !meta.isEnclosureForced();\r\n\t\t    \r\n\t\t    if(separator == null || (value.indexOf(separator) < 0 && enclosureIsOptional))\r\n\t\t    {\r\n\t\t\t\tretval = v.toString();\r\n\t\t    }\r\n\t\t    else {\r\n\t\t\t    retval=meta.getEnclosure()+v.toString()+meta.getEnclosure();\r\n\t\t    }\r\n\t    }\r\n\t\t\t\t\t    \r\n        }\r\n        else if (v.isBigNumber() || v.isNumber() || v.isInteger())\r\n        {\r\n            if (idx>=0 && field!=null && field.getFormat()!=null)\r\n            {\r\n                if (v.isNull())\r\n                {\r\n                    if (field.getNullString()!=null) retval=field.getNullString();\r\n                    else retval = \"\";\r\n                }\r\n                else\r\n                {\r\n                    // Formatting\r\n                    if ( !Const.isEmpty(field.getFormat()) )\r\n                    {\r\n                        data.df.applyPattern(field.getFormat());\r\n                    }\r\n                    else\r\n                    {\r\n                        data.df.applyPattern(data.defaultDecimalFormat.toLocalizedPattern());\r\n                    }\r\n                    // Decimal \r\n                    if ( !Const.isEmpty( field.getDecimalSymbol()) )\r\n                    {\r\n                        data.dfs.setDecimalSeparator( field.getDecimalSymbol().charAt(0) );\r\n                    }\r\n                    else\r\n                    {\r\n                        data.dfs.setDecimalSeparator( data.defaultDecimalFormatSymbols.getDecimalSeparator() );\r\n                    }\r\n                    // Grouping\r\n                    if ( !Const.isEmpty( field.getGroupingSymbol()) )\r\n                    {\r\n                        data.dfs.setGroupingSeparator( field.getGroupingSymbol().charAt(0) );\r\n                    }\r\n                    else\r\n                    {\r\n                        data.dfs.setGroupingSeparator( data.defaultDecimalFormatSymbols.getGroupingSeparator() );\r\n                    }\r\n                    // Currency symbol\r\n                    if ( !Const.isEmpty( field.getCurrencySymbol()) ) \r\n                    {\r\n                        data.dfs.setCurrencySymbol( field.getCurrencySymbol() );\r\n                    }\r\n                    else\r\n                    {\r\n                        data.dfs.setCurrencySymbol( data.defaultDecimalFormatSymbols.getCurrencySymbol() );\r\n                    }\r\n                            \r\n                    data.df.setDecimalFormatSymbols(data.dfs);\r\n                    \r\n                    if (v.isBigNumber())\r\n                    {\r\n                        retval=data.df.format(v.getBigNumber());\r\n                    }\r\n                    else if (v.isNumber())\r\n                    {\r\n                        retval=data.df.format(v.getNumber());\r\n                    }\r\n                    else // Integer\r\n                    {\r\n                        retval=data.df.format(v.getInteger());\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (v.isNull()) \r\n                {\r\n                    if (idx>=0 && field!=null && field.getNullString()!=null) retval=field.getNullString();\r\n                    else retval = \"\";\r\n                }\r\n                else\r\n                {\r\n                    retval=v.toString();\r\n                }\r\n            }\r\n        }\r\n        else if (v.isDate())\r\n        {\r\n            if (idx>=0 && field!=null && field.getFormat()!=null && v.getDate()!=null)\r\n            {\r\n                if (!Const.isEmpty(field.getFormat()))\r\n                {\r\n                    data.daf.applyPattern( field.getFormat() );\r\n                }\r\n                else\r\n                {\r\n                    data.daf.applyPattern( data.defaultDateFormat.toLocalizedPattern() );\r\n                }\r\n                data.daf.setDateFormatSymbols(data.dafs);\r\n                retval= data.daf.format(v.getDate());\r\n            }\r\n            else\r\n            {\r\n                if (v.isNull() || v.getDate()==null) \r\n                {\r\n                    if (idx>=0 && field!=null && field.getNullString()!=null)\r\n                    {\r\n                        retval=field.getNullString();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    retval=v.toString();\r\n                }\r\n            }\r\n        }\r\n        else if (v.isBinary())\r\n        {\r\n            if (v.isNull())\r\n            {\r\n                if (field.getNullString()!=null) retval=field.getNullString();\r\n                else retval=Const.NULL_BINARY;\r\n            }\r\n            else\r\n            {                   \r\n                try {\r\n                    retval=new String(v.getBytes(), \"US-ASCII\");\r\n                } catch (UnsupportedEncodingException e) {\r\n                    // chances are small we'll get here. US_ASCII is\r\n                    // mandatory.\r\n                    retval=Const.NULL_BINARY;   \r\n                }                   \r\n            }\r\n        }        \r\n        else // Boolean\r\n        {\r\n            if (v.isNull()) \r\n            {\r\n                if (idx>=0 && field!=null && field.getNullString()!=null) retval=field.getNullString();\r\n            }\r\n            else\r\n            {\r\n                retval=v.toString();\r\n            }\r\n        }\r\n        \r\n        if (meta.isPadded()) // maybe we need to rightpad to field length?\r\n        {\r\n            // What's the field length?\r\n            int length, precision;\r\n            \r\n            if (idx<0 || field==null) // Nothing specified: get it from the values themselves.\r\n            {\r\n                length   =v.getLength()<0?0:v.getLength();\r\n                precision=v.getPrecision()<0?0:v.getPrecision();\r\n            }\r\n            else // Get the info from the specified lengths & precision...\r\n            {\r\n                length   =field.getLength()   <0?0:field.getLength();\r\n                precision=field.getPrecision()<0?0:field.getPrecision();\r\n            }\r\n\r\n            if (v.isNumber())\r\n            {\r\n                length++; // for the sign...\r\n                if (precision>0) length++; // for the decimal point... \r\n            }\r\n            if (v.isDate()) { length=23; precision=0; }\r\n            if (v.isBoolean()) { length=5; precision=0; }\r\n            \r\n            retval=Const.rightPad(new StringBuffer(retval), length+precision);\r\n        }\r\n\r\n        return retval;\r\n    }","id":12229,"modified_method":"private String formatField(Value v, int idx)\r\n    {\r\n        String retval=\"\";\r\n\r\n        TextFileField field = null;\r\n        if (idx>=0) field = meta.getOutputFields()[idx];\r\n        \r\n        if (v.isString())\r\n        {\r\n            if (v.isNull() || v.getString()==null) \r\n            {\r\n                if (idx>=0 && field!=null && !Const.isEmpty(field.getNullString())) \r\n                {\r\n                    if (meta.isEnclosureForced() && !Const.isEmpty(meta.getEnclosure()))\r\n                    {\r\n                        retval=meta.getEnclosure()+field.getNullString()+meta.getEnclosure();\r\n                    }\r\n                    else\r\n                    {\r\n                        retval=field.getNullString();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    retval = Const.NULL_STRING;\r\n                }\r\n            }\r\n            else\r\n            {\r\n       \t\t    // Any separators in string?\r\n\t\t    // example: 123.4;\"a;b;c\";Some name\r\n\t\t    String value = v.toString();\r\n\t\t    // do not output separator if it is null or when \r\n\t\t    // there is no separator in the value and enclosure\r\n\t\t    // is not forced (i.e. optional enclosure).\r\n\t\t    // N.B. be careful not to call indexOf with null string.\r\n\t\t    \r\n\t\t    String separator = meta.getSeparator();\r\n\t\t    boolean enclosureIsOptional = !meta.isEnclosureForced();\r\n\t\t    \r\n\t\t    if(Const.isEmpty(separator) || (value.indexOf(separator) < 0 && enclosureIsOptional))\r\n\t\t    {\r\n\t\t\t\tretval = v.toString();\r\n\t\t    }\r\n\t\t    else \r\n            {\r\n\t\t\t    retval=meta.getEnclosure()+v.toString()+meta.getEnclosure();\r\n\t\t    }\r\n\t    }\r\n\t\t\t\t\t    \r\n        }\r\n        else if (v.isNumeric())\r\n        {\r\n            if (idx>=0 && field!=null && field.getFormat()!=null)\r\n            {\r\n                if (v.isNull())\r\n                {\r\n                    if (field.getNullString()!=null) retval=field.getNullString();\r\n                    else retval = \"\";\r\n                }\r\n                else\r\n                {\r\n                    // Formatting\r\n                    if ( !Const.isEmpty(field.getFormat()) )\r\n                    {\r\n                        data.df.applyPattern(field.getFormat());\r\n                    }\r\n                    else\r\n                    {\r\n                        data.df.applyPattern(data.defaultDecimalFormat.toPattern());\r\n                    }\r\n                    // Decimal \r\n                    if ( !Const.isEmpty( field.getDecimalSymbol()) )\r\n                    {\r\n                        data.dfs.setDecimalSeparator( field.getDecimalSymbol().charAt(0) );\r\n                    }\r\n                    else\r\n                    {\r\n                        data.dfs.setDecimalSeparator( data.defaultDecimalFormatSymbols.getDecimalSeparator() );\r\n                    }\r\n                    // Grouping\r\n                    if ( !Const.isEmpty( field.getGroupingSymbol()) )\r\n                    {\r\n                        data.dfs.setGroupingSeparator( field.getGroupingSymbol().charAt(0) );\r\n                    }\r\n                    else\r\n                    {\r\n                        data.dfs.setGroupingSeparator( data.defaultDecimalFormatSymbols.getGroupingSeparator() );\r\n                    }\r\n                    // Currency symbol\r\n                    if ( !Const.isEmpty( field.getCurrencySymbol()) ) \r\n                    {\r\n                        data.dfs.setCurrencySymbol( field.getCurrencySymbol() );\r\n                    }\r\n                    else\r\n                    {\r\n                        data.dfs.setCurrencySymbol( data.defaultDecimalFormatSymbols.getCurrencySymbol() );\r\n                    }\r\n                            \r\n                    data.df.setDecimalFormatSymbols(data.dfs);\r\n                    \r\n                    if (v.isBigNumber())\r\n                    {\r\n                        retval=data.df.format(v.getBigNumber());\r\n                    }\r\n                    else if (v.isNumber())\r\n                    {\r\n                        retval=data.df.format(v.getNumber());\r\n                    }\r\n                    else // Integer\r\n                    {\r\n                        retval=data.df.format(v.getInteger());\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (v.isNull()) \r\n                {\r\n                    if (idx>=0 && field!=null && !Const.isEmpty(field.getNullString()))\r\n                    {\r\n                        retval=field.getNullString();\r\n                    }\r\n                    else\r\n                    {\r\n                        retval = Const.NULL_NUMBER;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    retval=v.toString();\r\n                }\r\n            }\r\n        }\r\n        else if (v.isDate())\r\n        {\r\n            if (idx>=0 && field!=null && !Const.isEmpty(field.getFormat()) && v.getDate()!=null)\r\n            {\r\n                if (!Const.isEmpty(field.getFormat()))\r\n                {\r\n                    data.daf.applyPattern( field.getFormat() );\r\n                }\r\n                else\r\n                {\r\n                    data.daf.applyPattern( data.defaultDateFormat.toPattern() );\r\n                }\r\n                data.daf.setDateFormatSymbols(data.dafs);\r\n                retval= data.daf.format(v.getDate());\r\n            }\r\n            else\r\n            {\r\n                if (v.isNull() || v.getDate()==null) \r\n                {\r\n                    if (idx>=0 && field!=null && !Const.isEmpty(field.getNullString()))\r\n                    {\r\n                        retval=field.getNullString();\r\n                    }\r\n                    else\r\n                    {\r\n                        retval = Const.NULL_DATE;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    retval=v.toString();\r\n                }\r\n            }\r\n        }\r\n        else if (v.isBinary())\r\n        {\r\n            if (v.isNull())\r\n            {\r\n                if (!Const.isEmpty(field.getNullString()))\r\n                {\r\n                    retval=field.getNullString();\r\n                }\r\n                else\r\n                {\r\n                    retval=Const.NULL_BINARY;\r\n                }\r\n            }\r\n            else\r\n            {                   \r\n                try \r\n                {\r\n                    retval=new String(v.getBytes(), \"UTF-8\");\r\n                } \r\n                catch (UnsupportedEncodingException e) \r\n                {\r\n                    // chances are small we'll get here. UTF-8 is\r\n                    // mandatory.\r\n                    retval=Const.NULL_BINARY;   \r\n                }                   \r\n            }\r\n        }        \r\n        else // Boolean\r\n        {\r\n            if (v.isNull()) \r\n            {\r\n                if (idx>=0 && field!=null && !Const.isEmpty(field.getNullString()))\r\n                {\r\n                    retval=field.getNullString();\r\n                }\r\n                else\r\n                {\r\n                    retval = Const.NULL_BOOLEAN;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                retval=v.toString();\r\n            }\r\n        }\r\n        \r\n        if (meta.isPadded()) // maybe we need to rightpad to field length?\r\n        {\r\n            // What's the field length?\r\n            int length, precision;\r\n            \r\n            if (idx<0 || field==null) // Nothing specified: get it from the values themselves.\r\n            {\r\n                length   =v.getLength()<0?0:v.getLength();\r\n                precision=v.getPrecision()<0?0:v.getPrecision();\r\n            }\r\n            else // Get the info from the specified lengths & precision...\r\n            {\r\n                length   =field.getLength()   <0?0:field.getLength();\r\n                precision=field.getPrecision()<0?0:field.getPrecision();\r\n            }\r\n\r\n            if (v.isNumber())\r\n            {\r\n                length++; // for the sign...\r\n                if (precision>0) length++; // for the decimal point... \r\n            }\r\n            if (v.isDate()) { length=23; precision=0; }\r\n            if (v.isBoolean()) { length=5; precision=0; }\r\n            \r\n            retval=Const.rightPad(new StringBuffer(retval), length+precision);\r\n        }\r\n\r\n        return retval;\r\n    }","commit_id":"d7cd7b81ee2b8400e495453751f6025eed5a9600","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private String formatField(Value v, int idx)\n\t{\n\t\tString retval=\"\";\n\n\t\tXMLField field = null;\n\t\tif (idx>=0) field = meta.getOutputFields()[idx];\n\t\t\n        if (v.isBigNumber() || v.isNumber() || v.isInteger())\n        {\n\t\t\tif (idx>=0 && field!=null && field.getFormat()!=null)\n\t\t\t{\n\t\t\t\tif (v.isNull())\n\t\t\t\t{\n\t\t\t\t\tif (field.getNullString()!=null) retval=field.getNullString();\n\t\t\t\t\telse retval = \"\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n                    // Formatting\n                    if ( !Const.isEmpty(field.getFormat()) )\n                    {\n                        data.df.applyPattern(field.getFormat());\n                    }\n                    else\n                    {\n                        data.df.applyPattern(data.defaultDecimalFormat.toLocalizedPattern());\n                    }\n                    // Decimal \n\t\t\t\t\tif ( !Const.isEmpty( field.getDecimalSymbol()) )\n                    {\n                        data.dfs.setDecimalSeparator( field.getDecimalSymbol().charAt(0) );\n                    }\n                    else\n                    {\n                        data.dfs.setDecimalSeparator( data.defaultDecimalFormatSymbols.getDecimalSeparator() );\n                    }\n                    // Grouping\n\t\t\t\t\tif ( !Const.isEmpty( field.getGroupingSymbol()) )\n                    {\n                        data.dfs.setGroupingSeparator( field.getGroupingSymbol().charAt(0) );\n                    }\n                    else\n                    {\n                        data.dfs.setGroupingSeparator( data.defaultDecimalFormatSymbols.getGroupingSeparator() );\n                    }\n                    // Currency symbol\n\t\t\t\t\tif ( !Const.isEmpty( field.getCurrencySymbol()) ) \n                    {\n                        data.dfs.setCurrencySymbol( field.getCurrencySymbol() );\n                    }\n                    else\n                    {\n                        data.dfs.setCurrencySymbol( data.defaultDecimalFormatSymbols.getCurrencySymbol() );\n                    }\n\t\t\t\t\t\t\t\n\t\t\t\t\tdata.df.setDecimalFormatSymbols(data.dfs);\n                    \n                    if (v.isBigNumber())\n                    {\n                        retval=data.df.format(v.getBigNumber());\n                    }\n                    else if (v.isNumber())\n                    {\n                        retval=data.df.format(v.getNumber());\n                    }\n                    else // Integer\n                    {\n                        retval=data.df.format(v.getInteger());\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (v.isNull()) \n\t\t\t\t{\n\t\t\t\t\tif (idx>=0 && field!=null && field.getNullString()!=null) retval=field.getNullString();\n\t\t\t\t\telse retval = \"\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tretval=v.toString();\n\t\t\t\t}\n\t\t\t}\n        }\n\t\telse\n\t\tif (v.isDate())\n\t\t{\n\t\t\tif (idx>=0 && field!=null && field.getFormat()!=null && v.getDate()!=null)\n\t\t\t{\n                if (!Const.isEmpty(field.getFormat()))\n                {\n                    data.daf.applyPattern( field.getFormat() );\n                }\n                else\n                {\n                    data.daf.applyPattern( data.defaultDateFormat.toLocalizedPattern() );\n                }\n\t\t\t\tdata.daf.setDateFormatSymbols(data.dafs);\n\t\t\t\tretval= data.daf.format(v.getDate());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (v.isNull() || v.getDate()==null) \n\t\t\t\t{\n\t\t\t\t\tif (idx>=0 && field!=null && field.getNullString()!=null)\n                    {\n                        retval=field.getNullString();\n                    }\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tretval=v.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\tif (v.isString())\n\t\t{\n\t\t\tif (v.isNull() || v.getString()==null) \n\t\t\t{\n\t\t\t\tif (idx>=0 && field!=null && field.getNullString()!=null) retval=field.getNullString();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tretval=v.toString();\n\t\t\t}\n\t\t}\n        else if (v.isBinary())\n        {\n            if (v.isNull())\n            {\n                if (field.getNullString()!=null) retval=field.getNullString();\n                else retval=Const.NULL_BINARY;\n            }\n            else\n            {                   \n                try {\n                    retval=new String(v.getBytes(), \"US-ASCII\");\n                } catch (UnsupportedEncodingException e) {\n                    // chances are small we'll get here. US_ASCII is\n                    // mandatory.\n                    retval=Const.NULL_BINARY;   \n                }                   \n            }\n        }        \n\t\telse // Boolean\n\t\t{\n\t\t\tif (v.isNull()) \n\t\t\t{\n\t\t\t\tif (idx>=0 && field!=null && field.getNullString()!=null) retval=field.getNullString();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tretval=v.toString();\n\t\t\t}\n\t\t}\n        \n\t\treturn retval;\n\t}","id":12230,"modified_method":"private String formatField(Value v, int idx)\n\t{\n\t\tString retval=\"\";\n\n\t\tXMLField field = null;\n\t\tif (idx>=0)\n        {\n            field = meta.getOutputFields()[idx];\n        }\n\t\t\n        if (v.isNumeric())\n        {\n\t\t\tif (idx>=0 && field!=null && !Const.isEmpty(field.getFormat()))\n\t\t\t{\n\t\t\t\tif (v.isNull())\n\t\t\t\t{\n\t\t\t\t\tif (!Const.isEmpty(field.getNullString()))\n                    {\n                        retval=field.getNullString();\n                    }\n\t\t\t\t\telse\n                    {\n                        retval = Const.NULL_NUMBER;\n                    }\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n                    // Formatting\n                    if ( !Const.isEmpty(field.getFormat()) )\n                    {\n                        data.df.applyPattern(field.getFormat());\n                    }\n                    else\n                    {\n                        data.df.applyPattern(data.defaultDecimalFormat.toPattern());\n                    }\n                    // Decimal \n\t\t\t\t\tif ( !Const.isEmpty( field.getDecimalSymbol()) )\n                    {\n                        data.dfs.setDecimalSeparator( field.getDecimalSymbol().charAt(0) );\n                    }\n                    else\n                    {\n                        data.dfs.setDecimalSeparator( data.defaultDecimalFormatSymbols.getDecimalSeparator() );\n                    }\n                    // Grouping\n\t\t\t\t\tif ( !Const.isEmpty( field.getGroupingSymbol()) )\n                    {\n                        data.dfs.setGroupingSeparator( field.getGroupingSymbol().charAt(0) );\n                    }\n                    else\n                    {\n                        data.dfs.setGroupingSeparator( data.defaultDecimalFormatSymbols.getGroupingSeparator() );\n                    }\n                    // Currency symbol\n\t\t\t\t\tif ( !Const.isEmpty( field.getCurrencySymbol()) ) \n                    {\n                        data.dfs.setCurrencySymbol( field.getCurrencySymbol() );\n                    }\n                    else\n                    {\n                        data.dfs.setCurrencySymbol( data.defaultDecimalFormatSymbols.getCurrencySymbol() );\n                    }\n\t\t\t\t\t\t\t\n\t\t\t\t\tdata.df.setDecimalFormatSymbols(data.dfs);\n                    \n                    if (v.isBigNumber())\n                    {\n                        retval=data.df.format(v.getBigNumber());\n                    }\n                    else if (v.isNumber())\n                    {\n                        retval=data.df.format(v.getNumber());\n                    }\n                    else // Integer\n                    {\n                        retval=data.df.format(v.getInteger());\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (v.isNull()) \n\t\t\t\t{\n\t\t\t\t\tif (idx>=0 && field!=null && !Const.isEmpty(field.getNullString()))\n                    {\n                        retval=field.getNullString();\n                    }\n\t\t\t\t\telse\n                    {\n                        retval = Const.NULL_NUMBER;\n                    }\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tretval=v.toString();\n\t\t\t\t}\n\t\t\t}\n        }\n\t\telse\n\t\tif (v.isDate())\n\t\t{\n\t\t\tif (idx>=0 && field!=null && !Const.isEmpty(field.getFormat()) && v.getDate()!=null)\n\t\t\t{\n                if (!Const.isEmpty(field.getFormat()))\n                {\n                    data.daf.applyPattern( field.getFormat() );\n                }\n                else\n                {\n                    data.daf.applyPattern( data.defaultDateFormat.toPattern() );\n                }\n\t\t\t\tdata.daf.setDateFormatSymbols(data.dafs);\n\t\t\t\tretval= data.daf.format(v.getDate());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (v.isNull() || v.getDate()==null) \n\t\t\t\t{\n\t\t\t\t\tif (idx>=0 && field!=null && !Const.isEmpty(field.getNullString()))\n                    {\n                        retval=field.getNullString();\n                    }\n                    else\n                    {\n                        retval = Const.NULL_DATE;\n                    }\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tretval=v.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\tif (v.isString())\n\t\t{\n\t\t\tif (v.isNull() || v.getString()==null) \n\t\t\t{\n\t\t\t\tif (idx>=0 && field!=null && !Const.isEmpty(field.getNullString()))\n                {\n                    retval=field.getNullString();\n                }\n                else\n                {\n                    retval = Const.NULL_STRING;\n                }\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tretval=v.toString();\n\t\t\t}\n\t\t}\n        else if (v.isBinary())\n        {\n            if (v.isNull())\n            {\n                if (!Const.isEmpty(field.getNullString()))\n                {\n                    retval=field.getNullString();\n                }\n                else\n                {\n                    retval=Const.NULL_BINARY;\n                }\n            }\n            else\n            {                   \n                try \n                {\n                    retval=new String(v.getBytes(), \"UTF-8\");\n                } \n                catch (UnsupportedEncodingException e) \n                {\n                    // chances are small we'll get here. UTF-8 is\n                    // mandatory.\n                    retval=Const.NULL_BINARY;   \n                }                   \n            }\n        }        \n\t\telse // Boolean\n\t\t{\n\t\t\tif (v.isNull()) \n\t\t\t{\n\t\t\t\tif (idx>=0 && field!=null && !Const.isEmpty(field.getNullString()))\n                {\n                    retval=field.getNullString();\n                }\n                else\n                {\n                    retval = Const.NULL_BOOLEAN;\n                }\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tretval=v.toString();\n\t\t\t}\n\t\t}\n        \n\t\treturn retval;\n\t}","commit_id":"d7cd7b81ee2b8400e495453751f6025eed5a9600","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void run(String[] ids) {\n\n\t\t// Hot deploy\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Registering hot deploy listeners\");\n\t\t}\n\n\t\tfor (HotDeployListener hotDeployListener : getHotDeployListeners()) {\n\t\t\tHotDeployUtil.registerListener(hotDeployListener);\n\t\t}\n\n\t\t// Auto deploy\n\n\t\ttry {\n\t\t\tif (PrefsPropsUtil.getBoolean(\n\t\t\t\t\tPropsKeys.AUTO_DEPLOY_ENABLED,\n\t\t\t\t\tPropsValues.AUTO_DEPLOY_ENABLED)) {\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Registering auto deploy directories\");\n\t\t\t\t}\n\n\t\t\t\tFile deployDir = new File(\n\t\t\t\t\tPrefsPropsUtil.getString(\n\t\t\t\t\t\tPropsKeys.AUTO_DEPLOY_DEPLOY_DIR,\n\t\t\t\t\t\tPropsValues.AUTO_DEPLOY_DEPLOY_DIR));\n\t\t\t\tFile destDir = new File(DeployUtil.getAutoDeployDestDir());\n\t\t\t\tlong interval = PrefsPropsUtil.getLong(\n\t\t\t\t\tPropsKeys.AUTO_DEPLOY_INTERVAL,\n\t\t\t\t\tPropsValues.AUTO_DEPLOY_INTERVAL);\n\t\t\t\tint blacklistThreshold = PrefsPropsUtil.getInteger(\n\t\t\t\t\tPropsKeys.AUTO_DEPLOY_BLACKLIST_THRESHOLD,\n\t\t\t\t\tPropsValues.AUTO_DEPLOY_BLACKLIST_THRESHOLD);\n\n\t\t\t\tList<AutoDeployListener> autoDeployListeners =\n\t\t\t\t\tgetAutoDeployListeners();\n\n\t\t\t\tAutoDeployDir autoDeployDir = new AutoDeployDir(\n\t\t\t\t\t\"defaultAutoDeployDir\", deployDir, destDir, interval,\n\t\t\t\t\tblacklistThreshold, autoDeployListeners);\n\n\t\t\t\tAutoDeployUtil.registerDir(autoDeployDir);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Not registering auto deploy directories\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\n\t\t// JCR\n\n\t\ttry {\n\t\t\tJCRFactoryUtil.prepare();\n\n\t\t\tif (GetterUtil.getBoolean(PropsUtil.get(\n\t\t\t\t\tPropsKeys.JCR_INITIALIZE_ON_STARTUP))) {\n\n\t\t\t\tJCRFactoryUtil.initialize();\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\n\t\t// JGroups\n\n\t\tCommLink.getInstance();\n\n\t\t// JNDI\n\n\t\ttry {\n\t\t\tPortalJNDIUtil.getDataSource();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\n\t\ttry {\n\t\t\tif (!ServerDetector.isJOnAS()) {\n\t\t\t\tPortalJNDIUtil.getMailSession();\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\t// POP server\n\n\t\tif (PropsValues.POP_SERVER_NOTIFICATIONS_ENABLED) {\n\t\t\tPOPServerUtil.start();\n\t\t}\n\n\t\t// Scheduler\n\n\t\ttry {\n\t\t\tQuartzSchedulerEngineUtil.init();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\n\t\tSchedulerEngineUtil.init(new SchedulerEngineImpl());\n\t}","id":12231,"modified_method":"public void run(String[] ids) {\n\n\t\t// Hot deploy\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Registering hot deploy listeners\");\n\t\t}\n\n\t\tfor (HotDeployListener hotDeployListener : getHotDeployListeners()) {\n\t\t\tHotDeployUtil.registerListener(hotDeployListener);\n\t\t}\n\n\t\t// Auto deploy\n\n\t\ttry {\n\t\t\tif (PrefsPropsUtil.getBoolean(\n\t\t\t\t\tPropsKeys.AUTO_DEPLOY_ENABLED,\n\t\t\t\t\tPropsValues.AUTO_DEPLOY_ENABLED)) {\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Registering auto deploy directories\");\n\t\t\t\t}\n\n\t\t\t\tFile deployDir = new File(\n\t\t\t\t\tPrefsPropsUtil.getString(\n\t\t\t\t\t\tPropsKeys.AUTO_DEPLOY_DEPLOY_DIR,\n\t\t\t\t\t\tPropsValues.AUTO_DEPLOY_DEPLOY_DIR));\n\t\t\t\tFile destDir = new File(DeployUtil.getAutoDeployDestDir());\n\t\t\t\tlong interval = PrefsPropsUtil.getLong(\n\t\t\t\t\tPropsKeys.AUTO_DEPLOY_INTERVAL,\n\t\t\t\t\tPropsValues.AUTO_DEPLOY_INTERVAL);\n\t\t\t\tint blacklistThreshold = PrefsPropsUtil.getInteger(\n\t\t\t\t\tPropsKeys.AUTO_DEPLOY_BLACKLIST_THRESHOLD,\n\t\t\t\t\tPropsValues.AUTO_DEPLOY_BLACKLIST_THRESHOLD);\n\n\t\t\t\tList<AutoDeployListener> autoDeployListeners =\n\t\t\t\t\tgetAutoDeployListeners();\n\n\t\t\t\tAutoDeployDir autoDeployDir = new AutoDeployDir(\n\t\t\t\t\t\"defaultAutoDeployDir\", deployDir, destDir, interval,\n\t\t\t\t\tblacklistThreshold, autoDeployListeners);\n\n\t\t\t\tAutoDeployUtil.registerDir(autoDeployDir);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\"Not registering auto deploy directories\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\n\t\t// JCR\n\n\t\ttry {\n\t\t\tJCRFactoryUtil.prepare();\n\n\t\t\tif (GetterUtil.getBoolean(PropsUtil.get(\n\t\t\t\t\tPropsKeys.JCR_INITIALIZE_ON_STARTUP))) {\n\n\t\t\t\tJCRFactoryUtil.initialize();\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\n\t\t// JGroups\n\n\t\tCommLink.getInstance();\n\n\t\t// JNDI\n\n\t\ttry {\n\t\t\tPortalJNDIUtil.getDataSource();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\n\t\ttry {\n\t\t\tif (!ServerDetector.isJOnAS()) {\n\t\t\t\tPortalJNDIUtil.getMailSession();\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\t// POP server\n\n\t\tif (PropsValues.POP_SERVER_NOTIFICATIONS_ENABLED) {\n\t\t\tPOPServerUtil.start();\n\t\t}\n\n\t\t// Scheduler\n\n\t\ttry {\n\t\t\tQuartzSchedulerEngineUtil.init();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\n\t\tSchedulerEngineUtil.init(new SchedulerEngineImpl());\n\n\t\t// Message boards\n\n\t\tDestination destination = new ParallelDestination(\n\t\t\tDestinationNames.MESSAGE_BOARDS_MESSAGE);\n\n\t\tMessageBusUtil.addDestination(destination);\n\n\t\tMessageBusUtil.registerMessageListener(\n\t\t\tdestination.getName(), new MBMessageListener());\n\t}","commit_id":"1f23f32b42a82c526d711efc14c22fc96a1b9799","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void notifySubscribers(\n\t\t\tMBCategory category, MBMessage message, PortletPreferences prefs,\n\t\t\tThemeDisplay themeDisplay, boolean update)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (category.isDiscussion()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (prefs == null) {\n\t\t\tlong ownerId = category.getGroupId();\n\t\t\tint ownerType = PortletKeys.PREFS_OWNER_TYPE_GROUP;\n\t\t\tlong plid = PortletKeys.PREFS_PLID_SHARED;\n\t\t\tString portletId = PortletKeys.MESSAGE_BOARDS;\n\t\t\tString defaultPreferences = null;\n\n\t\t\tprefs = portletPreferencesLocalService.getPreferences(\n\t\t\t\tcategory.getCompanyId(), ownerId, ownerType, plid, portletId,\n\t\t\t\tdefaultPreferences);\n\t\t}\n\n\t\tif (!update && MBUtil.getEmailMessageAddedEnabled(prefs)) {\n\t\t}\n\t\telse if (update && MBUtil.getEmailMessageUpdatedEnabled(prefs)) {\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\n\t\tCompany company = companyPersistence.findByPrimaryKey(\n\t\t\tmessage.getCompanyId());\n\n\t\tGroup group = groupPersistence.findByPrimaryKey(category.getGroupId());\n\n\t\tUser user = userPersistence.findByPrimaryKey(message.getUserId());\n\n\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\tcategoryIds.add(category.getCategoryId());\n\t\tcategoryIds.addAll(category.getAncestorCategoryIds());\n\n\t\tString messageURL = StringPool.BLANK;\n\n\t\tif (themeDisplay != null) {\n\t\t\tString portalURL = PortalUtil.getPortalURL(themeDisplay);\n\t\t\tString layoutURL = PortalUtil.getLayoutURL(themeDisplay);\n\n\t\t\tmessageURL =\n\t\t\t\tportalURL + layoutURL + \"/message_boards/message/\" +\n\t\t\t\t\tmessage.getMessageId();\n\t\t}\n\n\t\tString portletName = PortalUtil.getPortletTitle(\n\t\t\tPortletKeys.MESSAGE_BOARDS, user);\n\n\t\tString fromName = MBUtil.getEmailFromName(prefs);\n\t\tString fromAddress = MBUtil.getEmailFromAddress(prefs);\n\n\t\tString mailingListAddress = StringPool.BLANK;\n\n\t\tif (PropsValues.POP_SERVER_NOTIFICATIONS_ENABLED) {\n\t\t\tmailingListAddress = MBUtil.getMailingListAddress(\n\t\t\t\tmessage.getCategoryId(), message.getMessageId(),\n\t\t\t\tcompany.getMx());\n\t\t}\n\n\t\tString replyToAddress = mailingListAddress;\n\t\tString mailId = MBUtil.getMailId(\n\t\t\tcompany.getMx(), message.getCategoryId(), message.getMessageId());\n\n\t\tfromName = StringUtil.replace(\n\t\t\tfromName,\n\t\t\tnew String[] {\n\t\t\t\t\"[$COMPANY_ID$]\",\n\t\t\t\t\"[$COMPANY_MX$]\",\n\t\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\t\t\"[$COMMUNITY_NAME$]\",\n\t\t\t\t\"[$MAILING_LIST_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_NAME$]\",\n\t\t\t\t\"[$PORTLET_NAME$]\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\tString.valueOf(company.getCompanyId()),\n\t\t\t\tcompany.getMx(),\n\t\t\t\tcompany.getName(),\n\t\t\t\tgroup.getName(),\n\t\t\t\tmailingListAddress,\n\t\t\t\tuser.getEmailAddress(),\n\t\t\t\tuser.getFullName(),\n\t\t\t\tportletName\n\t\t\t});\n\n\t\tfromAddress = StringUtil.replace(\n\t\t\tfromAddress,\n\t\t\tnew String[] {\n\t\t\t\t\"[$COMPANY_ID$]\",\n\t\t\t\t\"[$COMPANY_MX$]\",\n\t\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\t\t\"[$COMMUNITY_NAME$]\",\n\t\t\t\t\"[$MAILING_LIST_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_NAME$]\",\n\t\t\t\t\"[$PORTLET_NAME$]\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\tString.valueOf(company.getCompanyId()),\n\t\t\t\tcompany.getMx(),\n\t\t\t\tcompany.getName(),\n\t\t\t\tgroup.getName(),\n\t\t\t\tmailingListAddress,\n\t\t\t\tuser.getEmailAddress(),\n\t\t\t\tuser.getFullName(),\n\t\t\t\tportletName\n\t\t\t});\n\n\t\tString subjectPrefix = null;\n\t\tString body = null;\n\t\tString signature = null;\n\t\tboolean htmlFormat = MBUtil.getEmailHtmlFormat(prefs);\n\n\t\tif (update) {\n\t\t\tsubjectPrefix = MBUtil.getEmailMessageUpdatedSubjectPrefix(prefs);\n\t\t\tbody = MBUtil.getEmailMessageUpdatedBody(prefs);\n\t\t\tsignature = MBUtil.getEmailMessageUpdatedSignature(prefs);\n\t\t}\n\t\telse {\n\t\t\tsubjectPrefix = MBUtil.getEmailMessageAddedSubjectPrefix(prefs);\n\t\t\tbody = MBUtil.getEmailMessageAddedBody(prefs);\n\t\t\tsignature = MBUtil.getEmailMessageAddedSignature(prefs);\n\t\t}\n\n\t\tif (Validator.isNotNull(signature)) {\n\t\t\tbody +=  \"\\n--\\n\" + signature;\n\t\t}\n\n\t\tsubjectPrefix = StringUtil.replace(\n\t\t\tsubjectPrefix,\n\t\t\tnew String[] {\n\t\t\t\t\"[$CATEGORY_NAME$]\",\n\t\t\t\t\"[$COMPANY_ID$]\",\n\t\t\t\t\"[$COMPANY_MX$]\",\n\t\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\t\t\"[$COMMUNITY_NAME$]\",\n\t\t\t\t\"[$FROM_ADDRESS$]\",\n\t\t\t\t\"[$FROM_NAME$]\",\n\t\t\t\t\"[$MAILING_LIST_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_BODY$]\",\n\t\t\t\t\"[$MESSAGE_ID$]\",\n\t\t\t\t\"[$MESSAGE_SUBJECT$]\",\n\t\t\t\t\"[$MESSAGE_USER_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_NAME$]\",\n\t\t\t\t\"[$PORTAL_URL$]\",\n\t\t\t\t\"[$PORTLET_NAME$]\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\tcategory.getName(),\n\t\t\t\tString.valueOf(company.getCompanyId()),\n\t\t\t\tcompany.getMx(),\n\t\t\t\tcompany.getName(),\n\t\t\t\tgroup.getName(),\n\t\t\t\tfromAddress,\n\t\t\t\tfromName,\n\t\t\t\tmailingListAddress,\n\t\t\t\tmessage.getBody(),\n\t\t\t\tString.valueOf(message.getMessageId()),\n\t\t\t\tmessage.getSubject(),\n\t\t\t\tuser.getEmailAddress(),\n\t\t\t\tuser.getFullName(),\n\t\t\t\tcompany.getVirtualHost(),\n\t\t\t\tportletName\n\t\t\t});\n\n\t\tbody = StringUtil.replace(\n\t\t\tbody,\n\t\t\tnew String[] {\n\t\t\t\t\"[$CATEGORY_NAME$]\",\n\t\t\t\t\"[$COMPANY_ID$]\",\n\t\t\t\t\"[$COMPANY_MX$]\",\n\t\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\t\t\"[$COMMUNITY_NAME$]\",\n\t\t\t\t\"[$FROM_ADDRESS$]\",\n\t\t\t\t\"[$FROM_NAME$]\",\n\t\t\t\t\"[$MAILING_LIST_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_BODY$]\",\n\t\t\t\t\"[$MESSAGE_ID$]\",\n\t\t\t\t\"[$MESSAGE_SUBJECT$]\",\n\t\t\t\t\"[$MESSAGE_URL$]\",\n\t\t\t\t\"[$MESSAGE_USER_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_NAME$]\",\n\t\t\t\t\"[$PORTAL_URL$]\",\n\t\t\t\t\"[$PORTLET_NAME$]\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\tcategory.getName(),\n\t\t\t\tString.valueOf(company.getCompanyId()),\n\t\t\t\tcompany.getMx(),\n\t\t\t\tcompany.getName(),\n\t\t\t\tgroup.getName(),\n\t\t\t\tfromAddress,\n\t\t\t\tfromName,\n\t\t\t\tmailingListAddress,\n\t\t\t\tmessage.getBody(),\n\t\t\t\tString.valueOf(message.getMessageId()),\n\t\t\t\tmessage.getSubject(),\n\t\t\t\tmessageURL,\n\t\t\t\tuser.getEmailAddress(),\n\t\t\t\tuser.getFullName(),\n\t\t\t\tcompany.getVirtualHost(),\n\t\t\t\tportletName\n\t\t\t});\n\n\t\tString subject = message.getSubject();\n\n\t\tif (subject.indexOf(subjectPrefix) == -1) {\n\t\t\tsubject = subjectPrefix.trim() + \" \" + subject.trim();\n\t\t}\n\n\t\tString inReplyTo = null;\n\n\t\tif (message.getParentMessageId() !=\n\t\t\t\tMBMessageImpl.DEFAULT_PARENT_MESSAGE_ID) {\n\n\t\t\tinReplyTo = MBUtil.getMailId(\n\t\t\t\tcompany.getMx(), message.getCategoryId(),\n\t\t\t\tmessage.getParentMessageId());\n\t\t}\n\n\t\tMBMessageProducer.produce(\n\t\t\tnew String[] {\n\t\t\t\tString.valueOf(message.getCompanyId()),\n\t\t\t\tString.valueOf(message.getUserId()),\n\t\t\t\tStringUtil.merge(categoryIds),\n\t\t\t\tString.valueOf(message.getThreadId()),\n\t\t\t\tfromName, fromAddress, subject, body, replyToAddress, mailId,\n\t\t\t\tinReplyTo, String.valueOf(htmlFormat)\n\t\t\t});\n\t}","id":12232,"modified_method":"protected void notifySubscribers(\n\t\t\tMBCategory category, MBMessage message, PortletPreferences prefs,\n\t\t\tThemeDisplay themeDisplay, boolean update)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (category.isDiscussion()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (prefs == null) {\n\t\t\tlong ownerId = category.getGroupId();\n\t\t\tint ownerType = PortletKeys.PREFS_OWNER_TYPE_GROUP;\n\t\t\tlong plid = PortletKeys.PREFS_PLID_SHARED;\n\t\t\tString portletId = PortletKeys.MESSAGE_BOARDS;\n\t\t\tString defaultPreferences = null;\n\n\t\t\tprefs = portletPreferencesLocalService.getPreferences(\n\t\t\t\tcategory.getCompanyId(), ownerId, ownerType, plid, portletId,\n\t\t\t\tdefaultPreferences);\n\t\t}\n\n\t\tif (!update && MBUtil.getEmailMessageAddedEnabled(prefs)) {\n\t\t}\n\t\telse if (update && MBUtil.getEmailMessageUpdatedEnabled(prefs)) {\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\n\t\tCompany company = companyPersistence.findByPrimaryKey(\n\t\t\tmessage.getCompanyId());\n\n\t\tGroup group = groupPersistence.findByPrimaryKey(category.getGroupId());\n\n\t\tUser user = userPersistence.findByPrimaryKey(message.getUserId());\n\n\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\tcategoryIds.add(category.getCategoryId());\n\t\tcategoryIds.addAll(category.getAncestorCategoryIds());\n\n\t\tString messageURL = StringPool.BLANK;\n\n\t\tif (themeDisplay != null) {\n\t\t\tString portalURL = PortalUtil.getPortalURL(themeDisplay);\n\t\t\tString layoutURL = PortalUtil.getLayoutURL(themeDisplay);\n\n\t\t\tmessageURL =\n\t\t\t\tportalURL + layoutURL + \"/message_boards/message/\" +\n\t\t\t\t\tmessage.getMessageId();\n\t\t}\n\n\t\tString portletName = PortalUtil.getPortletTitle(\n\t\t\tPortletKeys.MESSAGE_BOARDS, user);\n\n\t\tString fromName = MBUtil.getEmailFromName(prefs);\n\t\tString fromAddress = MBUtil.getEmailFromAddress(prefs);\n\n\t\tString mailingListAddress = StringPool.BLANK;\n\n\t\tif (PropsValues.POP_SERVER_NOTIFICATIONS_ENABLED) {\n\t\t\tmailingListAddress = MBUtil.getMailingListAddress(\n\t\t\t\tmessage.getCategoryId(), message.getMessageId(),\n\t\t\t\tcompany.getMx());\n\t\t}\n\n\t\tString replyToAddress = mailingListAddress;\n\t\tString mailId = MBUtil.getMailId(\n\t\t\tcompany.getMx(), message.getCategoryId(), message.getMessageId());\n\n\t\tfromName = StringUtil.replace(\n\t\t\tfromName,\n\t\t\tnew String[] {\n\t\t\t\t\"[$COMPANY_ID$]\",\n\t\t\t\t\"[$COMPANY_MX$]\",\n\t\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\t\t\"[$COMMUNITY_NAME$]\",\n\t\t\t\t\"[$MAILING_LIST_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_NAME$]\",\n\t\t\t\t\"[$PORTLET_NAME$]\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\tString.valueOf(company.getCompanyId()),\n\t\t\t\tcompany.getMx(),\n\t\t\t\tcompany.getName(),\n\t\t\t\tgroup.getName(),\n\t\t\t\tmailingListAddress,\n\t\t\t\tuser.getEmailAddress(),\n\t\t\t\tuser.getFullName(),\n\t\t\t\tportletName\n\t\t\t});\n\n\t\tfromAddress = StringUtil.replace(\n\t\t\tfromAddress,\n\t\t\tnew String[] {\n\t\t\t\t\"[$COMPANY_ID$]\",\n\t\t\t\t\"[$COMPANY_MX$]\",\n\t\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\t\t\"[$COMMUNITY_NAME$]\",\n\t\t\t\t\"[$MAILING_LIST_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_NAME$]\",\n\t\t\t\t\"[$PORTLET_NAME$]\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\tString.valueOf(company.getCompanyId()),\n\t\t\t\tcompany.getMx(),\n\t\t\t\tcompany.getName(),\n\t\t\t\tgroup.getName(),\n\t\t\t\tmailingListAddress,\n\t\t\t\tuser.getEmailAddress(),\n\t\t\t\tuser.getFullName(),\n\t\t\t\tportletName\n\t\t\t});\n\n\t\tString subjectPrefix = null;\n\t\tString body = null;\n\t\tString signature = null;\n\t\tboolean htmlFormat = MBUtil.getEmailHtmlFormat(prefs);\n\n\t\tif (update) {\n\t\t\tsubjectPrefix = MBUtil.getEmailMessageUpdatedSubjectPrefix(prefs);\n\t\t\tbody = MBUtil.getEmailMessageUpdatedBody(prefs);\n\t\t\tsignature = MBUtil.getEmailMessageUpdatedSignature(prefs);\n\t\t}\n\t\telse {\n\t\t\tsubjectPrefix = MBUtil.getEmailMessageAddedSubjectPrefix(prefs);\n\t\t\tbody = MBUtil.getEmailMessageAddedBody(prefs);\n\t\t\tsignature = MBUtil.getEmailMessageAddedSignature(prefs);\n\t\t}\n\n\t\tif (Validator.isNotNull(signature)) {\n\t\t\tbody +=  \"\\n--\\n\" + signature;\n\t\t}\n\n\t\tsubjectPrefix = StringUtil.replace(\n\t\t\tsubjectPrefix,\n\t\t\tnew String[] {\n\t\t\t\t\"[$CATEGORY_NAME$]\",\n\t\t\t\t\"[$COMPANY_ID$]\",\n\t\t\t\t\"[$COMPANY_MX$]\",\n\t\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\t\t\"[$COMMUNITY_NAME$]\",\n\t\t\t\t\"[$FROM_ADDRESS$]\",\n\t\t\t\t\"[$FROM_NAME$]\",\n\t\t\t\t\"[$MAILING_LIST_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_BODY$]\",\n\t\t\t\t\"[$MESSAGE_ID$]\",\n\t\t\t\t\"[$MESSAGE_SUBJECT$]\",\n\t\t\t\t\"[$MESSAGE_USER_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_NAME$]\",\n\t\t\t\t\"[$PORTAL_URL$]\",\n\t\t\t\t\"[$PORTLET_NAME$]\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\tcategory.getName(),\n\t\t\t\tString.valueOf(company.getCompanyId()),\n\t\t\t\tcompany.getMx(),\n\t\t\t\tcompany.getName(),\n\t\t\t\tgroup.getName(),\n\t\t\t\tfromAddress,\n\t\t\t\tfromName,\n\t\t\t\tmailingListAddress,\n\t\t\t\tmessage.getBody(),\n\t\t\t\tString.valueOf(message.getMessageId()),\n\t\t\t\tmessage.getSubject(),\n\t\t\t\tuser.getEmailAddress(),\n\t\t\t\tuser.getFullName(),\n\t\t\t\tcompany.getVirtualHost(),\n\t\t\t\tportletName\n\t\t\t});\n\n\t\tbody = StringUtil.replace(\n\t\t\tbody,\n\t\t\tnew String[] {\n\t\t\t\t\"[$CATEGORY_NAME$]\",\n\t\t\t\t\"[$COMPANY_ID$]\",\n\t\t\t\t\"[$COMPANY_MX$]\",\n\t\t\t\t\"[$COMPANY_NAME$]\",\n\t\t\t\t\"[$COMMUNITY_NAME$]\",\n\t\t\t\t\"[$FROM_ADDRESS$]\",\n\t\t\t\t\"[$FROM_NAME$]\",\n\t\t\t\t\"[$MAILING_LIST_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_BODY$]\",\n\t\t\t\t\"[$MESSAGE_ID$]\",\n\t\t\t\t\"[$MESSAGE_SUBJECT$]\",\n\t\t\t\t\"[$MESSAGE_URL$]\",\n\t\t\t\t\"[$MESSAGE_USER_ADDRESS$]\",\n\t\t\t\t\"[$MESSAGE_USER_NAME$]\",\n\t\t\t\t\"[$PORTAL_URL$]\",\n\t\t\t\t\"[$PORTLET_NAME$]\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\tcategory.getName(),\n\t\t\t\tString.valueOf(company.getCompanyId()),\n\t\t\t\tcompany.getMx(),\n\t\t\t\tcompany.getName(),\n\t\t\t\tgroup.getName(),\n\t\t\t\tfromAddress,\n\t\t\t\tfromName,\n\t\t\t\tmailingListAddress,\n\t\t\t\tmessage.getBody(),\n\t\t\t\tString.valueOf(message.getMessageId()),\n\t\t\t\tmessage.getSubject(),\n\t\t\t\tmessageURL,\n\t\t\t\tuser.getEmailAddress(),\n\t\t\t\tuser.getFullName(),\n\t\t\t\tcompany.getVirtualHost(),\n\t\t\t\tportletName\n\t\t\t});\n\n\t\tString subject = message.getSubject();\n\n\t\tif (subject.indexOf(subjectPrefix) == -1) {\n\t\t\tsubject = subjectPrefix.trim() + \" \" + subject.trim();\n\t\t}\n\n\t\tString inReplyTo = null;\n\n\t\tif (message.getParentMessageId() !=\n\t\t\t\tMBMessageImpl.DEFAULT_PARENT_MESSAGE_ID) {\n\n\t\t\tinReplyTo = MBUtil.getMailId(\n\t\t\t\tcompany.getMx(), message.getCategoryId(),\n\t\t\t\tmessage.getParentMessageId());\n\t\t}\n\n\t\tJSONObject jsonObj = JSONFactoryUtil.createJSONObject();\n\n\t\tjsonObj.put(\"companyId\", message.getCompanyId());\n\t\tjsonObj.put(\"userId\", message.getUserId());\n\t\tjsonObj.put(\"categoryIds\", StringUtil.merge(categoryIds));\n\t\tjsonObj.put(\"threadId\", message.getThreadId());\n\t\tjsonObj.put(\"fromName\", fromName);\n\t\tjsonObj.put(\"fromAddress\", fromAddress);\n\t\tjsonObj.put(\"subject\", subject);\n\t\tjsonObj.put(\"body\", body);\n\t\tjsonObj.put(\"replyToAddress\", replyToAddress);\n\t\tjsonObj.put(\"mailId\", mailId);\n\t\tjsonObj.put(\"inReplyTo\", inReplyTo);\n\t\tjsonObj.put(\"htmlFormat\", htmlFormat);\n\n\t\tMessageBusUtil.sendMessage(\n\t\t\tDestinationNames.MESSAGE_BOARDS_MESSAGE, jsonObj.toString());\n\t}","commit_id":"1f23f32b42a82c526d711efc14c22fc96a1b9799","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String getXML()\n\t{\n\t\tStringBuffer retval = new StringBuffer(300);\n\t\t\n\t\tretval.append(super.getXML());\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"copy_empty_folders\",      copy_empty_folders));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"arg_from_previous\",  arg_from_previous));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"overwrite_files\",      overwrite_files));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"include_subfolders\", include_subfolders));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"remove_sourcefiles\", remove_source_files));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_resultfilesname\", add_result_filesname));\n\t\t\n\t\t\n\t\t\r\n\t\t\r\n\t\tretval.append(\"      <fields>\").append(Const.CR);\n\t\tif (source_filefolder!=null)\n\t\t{\r\n\t\t\tfor (int i=0;i<source_filefolder.length;i++)\r\n\t\t\t{\n\t\t\t\tretval.append(\"        <field>\").append(Const.CR);\r\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"source_filefolder\",     source_filefolder[i]));\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"destination_filefolder\",     destination_filefolder[i]));\r\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"wildcard\", wildcard[i]));\n\t\t\t\tretval.append(\"        <\/field>\").append(Const.CR);\r\n\t\t\t}\n\t\t}\n\t\tretval.append(\"      <\/fields>\").append(Const.CR);\r\n\t\t\n\t\treturn retval.toString();\n\t}","id":12233,"modified_method":"public String getXML()\n\t{\n\t\tStringBuffer retval = new StringBuffer(300);\n\t\t\n\t\tretval.append(super.getXML());\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"copy_empty_folders\",      copy_empty_folders));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"arg_from_previous\",  arg_from_previous));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"overwrite_files\",      overwrite_files));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"include_subfolders\", include_subfolders));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"remove_source_files\", remove_source_files));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_result_filesname\", add_result_filesname));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"destination_is_a_file\", destination_is_a_file));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"create_destination_folder\", create_destination_folder));\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tretval.append(\"      <fields>\").append(Const.CR);\n\t\tif (source_filefolder!=null)\n\t\t{\n\t\t\tfor (int i=0;i<source_filefolder.length;i++)\n\t\t\t{\n\t\t\t\tretval.append(\"        <field>\").append(Const.CR);\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"source_filefolder\",     source_filefolder[i]));\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"destination_filefolder\",     destination_filefolder[i]));\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"wildcard\", wildcard[i]));\n\t\t\t\tretval.append(\"        <\/field>\").append(Const.CR);\n\t\t\t}\n\t\t}\n\t\tretval.append(\"      <\/fields>\").append(Const.CR);\n\t\t\n\t\treturn retval.toString();\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public boolean includeFile(FileSelectInfo info) \r\n\t\t{\n\t\t\tboolean returncode=false;\n\t\t\tFileObject file_name=null;\n\t\t\ttry\n\t\t\t{\n\t\t\t\t\n\t\t\t\tif (!info.getFile().toString().equals(source_folder))\n\t\t\t\t{\n\t\t\t\t\t// Pass over the Base folder itself\n\t\t\t\t\t\n\t\t\t\t\tString short_filename_from_basefolder=info.getFile().getName().toString().substring(source_folder.length(),info.getFile().getName().toString().length());\n\t\t\t\t\tString short_filename= info.getFile().getName().getBaseName();\n\t\t\t\t\t// Built destination filename\n\t\t\t\t\tfile_name=KettleVFS.getFileObject(destination_folder + Const.FILE_SEPARATOR + short_filename_from_basefolder);//source_folder + Const.FILE_SEPARATOR + info.getFile().getName().getBaseName()); \n\t\t\t\t\t\n\t\t\t\t\tif (!info.getFile().getParent().equals(info.getBaseFolder()))\n\t\t\t\t\t {\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Not in the Base Folder..Only if include sub folders  \n\t\t\t\t\t\t if (include_subfolders)\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t// Folders..only if include subfolders\n\t\t\t\t\t\t\t if (info.getFile().getType() == FileType.FOLDER)\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t if (include_subfolders && copy_empty_folders && Const.isEmpty(file_wildcard))\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t if (!file_name.exists())\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\tlog.logBasic(\"\",\" ------ \");\n\n\t\t\t\t\t\t\t\t\t\tlog.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderCopiedInfos\"),  Messages.getString(\"JobCopyFiles.Log.FolderCopied\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\treturncode= true;\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderExistsInfos\"), Messages.getString(\"JobCopyFiles.Log.FolderExists\",file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t if (overwrite_files)\n\t\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderOverwriteInfos\"),Messages.getString(\"JobCopyFiles.Log.FolderOverwrite\",info.getFile().toString(), file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t } \n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\tif (GetFileWildcard(short_filename,file_wildcard))\n\t\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\t// Check if the file exists\n\t\t\t\t\t\t\t\t\t if (!file_name.exists())\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\tlog.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tlog.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileCopiedInfos\"),Messages.getString(\"JobCopyFiles.Log.FileCopied\",info.getFile().toString(),file_name.toString())) ;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\treturncode= true;\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileExistsInfos\"), Messages.getString(\"JobCopyFiles.Log.FileExists\",file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t if (overwrite_files)\n\t\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t\t log.logBasic(\"       \" + Messages.getString(\"JobCopyFiles.Log.FileOverwriteInfos\"),Messages.getString(\"JobCopyFiles.Log.FileOverwrite\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t }\n\t\t\t\t\t }\n\t\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t\t// In the Base Folder...\n\t\t\t\t\t\t// Folders..only if include subfolders\n\t\t\t\t\t\t if (info.getFile().getType() == FileType.FOLDER)\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t if (include_subfolders && copy_empty_folders  && Const.isEmpty(file_wildcard))\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t if (!file_name.exists())\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\tlog.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderCopiedInfos\"),Messages.getString(\"JobCopyFiles.Log.FolderCopied\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderExistsInfos\"), Messages.getString(\"JobCopyFiles.Log.FolderExists\",file_name.toString()));\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t if (overwrite_files)\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderOverwriteInfos\"),Messages.getString(\"JobCopyFiles.Log.FolderOverwrite\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t // file...Check if exists\n\t\t\t\t\t\t\t if (GetFileWildcard(short_filename,file_wildcard))\n\t\t\t\t\t\t\t {\t\n\t\t\t\t\t\t\t\t if (!file_name.exists())\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileCopiedInfos\"),Messages.getString(\"JobCopyFiles.Log.FileCopied\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t returncode= true;\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\n\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileExistsInfos\"), Messages.getString(\"JobCopyFiles.Log.FileExists\",file_name.toString()));\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t if (overwrite_files)\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileOverwriteInfos\"),Messages.getString(\"JobCopyFiles.Log.FileOverwrite\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t\t } \n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t }\n\t\t\t\t\t\t \n\t\t\t\t\t\t \n\t\t\t\t\t\t\n\t\t\t\t\t }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tcatch (Exception e) \r\n\t\t\t{\n\t\t\t\t\n\n\t\t\t\tlog.logError(Messages.getString(\"JobCopyFiles.Error.Exception.CopyProcessError\") , Messages.getString(\"JobCopyFiles.Error.Exception.CopyProcess\",info.getFile().toString(), \n\t\t\t\t\tfile_name.toString(),e.getMessage()));\n\t\t\t\t\n\t\t\t\t returncode= false;\n\t\t\t}\n\t\t\tfinally \n\t\t\t{\n\t\t\t\tif ( file_name != null )\n\t\t\t\t{\n\t\t\t\t\ttry  \n\t\t\t\t\t{\n\t\t\t\t\t\tfile_name.close();\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\tif (returncode && remove_source_files)\n\t\t\t{\n\t\t\t\t// add this folder/file to remove files\n\t\t\t\t// This list will be fetched and all entries files\n\t\t\t\t// will be removed\n\t\t\t\tlist_files_remove.add(info.getFile().toString());\n\t\t\t}\n\t\t\t\n\t\t\tif (returncode && add_result_filesname)\n\t\t\t{\n\t\t\t\t// add this folder/file to result files name\n\t\t\t\tlist_add_result.add(file_name.toString());\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\treturn returncode;\n\t\t}","id":12234,"modified_method":"public boolean includeFile(FileSelectInfo info) \n\t\t{\n\t\t\tboolean returncode=false;\n\t\t\tFileObject file_name=null;\n\t\t\ttry\n\t\t\t{\n\t\t\t\t\n\t\t\t\tif (!info.getFile().toString().equals(source_folder))\n\t\t\t\t{\n\t\t\t\t\t// Pass over the Base folder itself\n\t\t\t\t\t\n\t\t\t\t\tString short_filename_from_basefolder=info.getFile().getName().toString().substring(source_folder.length(),info.getFile().getName().toString().length());\n\t\t\t\t\tString short_filename= info.getFile().getName().getBaseName();\n\t\t\t\t\t// Built destination filename\n\t\t\t\t\tfile_name=KettleVFS.getFileObject(destination_folder + Const.FILE_SEPARATOR + short_filename_from_basefolder);//source_folder + Const.FILE_SEPARATOR + info.getFile().getName().getBaseName()); \n\t\t\t\t\t\n\t\t\t\t\tif (!info.getFile().getParent().equals(info.getBaseFolder()))\n\t\t\t\t\t {\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Not in the Base Folder..Only if include sub folders  \n\t\t\t\t\t\t if (include_subfolders)\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t// Folders..only if include subfolders\n\t\t\t\t\t\t\t if (info.getFile().getType() == FileType.FOLDER)\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t if (include_subfolders && copy_empty_folders && Const.isEmpty(file_wildcard))\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t if (!file_name.exists())\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\tlog.logBasic(\"\",\" ------ \");\n\n\t\t\t\t\t\t\t\t\t\tlog.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderCopiedInfos\"),  Messages.getString(\"JobCopyFiles.Log.FolderCopied\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\treturncode= true;\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderExistsInfos\"), Messages.getString(\"JobCopyFiles.Log.FolderExists\",file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t if (overwrite_files)\n\t\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderOverwriteInfos\"),Messages.getString(\"JobCopyFiles.Log.FolderOverwrite\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t } \n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\tif (GetFileWildcard(short_filename,file_wildcard))\n\t\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\t// Check if the file exists\n\t\t\t\t\t\t\t\t\t if (!file_name.exists())\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\tlog.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tlog.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileCopiedInfos\"),Messages.getString(\"JobCopyFiles.Log.FileCopied\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\treturncode= true;\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileExistsInfos\"), Messages.getString(\"JobCopyFiles.Log.FileExists\",file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t if (overwrite_files)\n\t\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t\t log.logBasic(\"       \" + Messages.getString(\"JobCopyFiles.Log.FileExistsInfos\"),Messages.getString(\"JobCopyFiles.Log.FileExists\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t }\n\t\t\t\t\t }\n\t\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t\t// In the Base Folder...\n\t\t\t\t\t\t// Folders..only if include subfolders\n\t\t\t\t\t\t if (info.getFile().getType() == FileType.FOLDER)\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t if (include_subfolders && copy_empty_folders  && Const.isEmpty(file_wildcard))\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t if (!file_name.exists())\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\tlog.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderCopiedInfos\"),Messages.getString(\"JobCopyFiles.Log.FolderCopied\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderExistsInfos\"), Messages.getString(\"JobCopyFiles.Log.FolderExists\",file_name.toString()));\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t if (overwrite_files)\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FolderOverwriteInfos\"),Messages.getString(\"JobCopyFiles.Log.FolderOverwrite\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t // file...Check if exists\n\t\t\t\t\t\t\t if (GetFileWildcard(short_filename,file_wildcard))\n\t\t\t\t\t\t\t {\t\n\t\t\t\t\t\t\t\t if (!file_name.exists())\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileCopiedInfos\"),Messages.getString(\"JobCopyFiles.Log.FileCopied\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t returncode= true;\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t log.logBasic(\"\",\" ------ \");\n\t\t\n\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileExistsInfos\"), Messages.getString(\"JobCopyFiles.Log.FileExists\",file_name.toString()));\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t if (overwrite_files)\n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileExistsInfos\"),Messages.getString(\"JobCopyFiles.Log.FileExists\",info.getFile().toString(),file_name.toString()));\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t returncode= true; \n\t\t\t\t\t\t\t\t\t } \n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t }\n\t\t\t\t\t\t \n\t\t\t\t\t\t \n\t\t\t\t\t\t\n\t\t\t\t\t }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tcatch (Exception e) \n\t\t\t{\n\t\t\t\t\n\n\t\t\t\tlog.logError(Messages.getString(\"JobCopyFiles.Error.Exception.CopyProcessError\") , Messages.getString(\"JobCopyFiles.Error.Exception.CopyProcess\", \n\t\t\t\t\tinfo.getFile().toString(), file_name.toString(), e.getMessage()));\n\t\t\t\t\n\t\t\t\t returncode= false;\n\t\t\t}\n\t\t\tfinally \n\t\t\t{\n\t\t\t\tif ( file_name != null )\n\t\t\t\t{\n\t\t\t\t\ttry  \n\t\t\t\t\t{\n\t\t\t\t\t\tfile_name.close();\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\tif (returncode && remove_source_files)\n\t\t\t{\n\t\t\t\t// add this folder/file to remove files\n\t\t\t\t// This list will be fetched and all entries files\n\t\t\t\t// will be removed\n\t\t\t\tlist_files_remove.add(info.getFile().toString());\n\t\t\t}\n\t\t\t\n\t\t\tif (returncode && add_result_filesname)\n\t\t\t{\n\t\t\t\t// add this folder/file to result files name\n\t\t\t\tlist_add_result.add(file_name.toString());\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\treturn returncode;\n\t\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException {\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases, slaveServers);\n\t\t\tcopy_empty_folders      = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"copy_empty_folders\"));\n\t\t\targ_from_previous   = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"arg_from_previous\") );\r\n\t\t\toverwrite_files      = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"overwrite_files\") );\r\n\t\t\tinclude_subfolders = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"include_subfolders\") );\n\t\t\tremove_source_files = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"remove_sourcefiles\") );\n\t\t\tadd_result_filesname = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_resultfilesname\") );\n\t\t\t\n\t\t\n\t\t\tNode fields = XMLHandler.getSubNode(entrynode, \"fields\");\n\t\t\t\n\t\t\t// How many field arguments?\n\t\t\tint nrFields = XMLHandler.countNodes(fields, \"field\");\t\n\t\t\tsource_filefolder = new String[nrFields];\r\n\t\t\tdestination_filefolder = new String[nrFields];\r\n\t\t\twildcard = new String[nrFields];\r\n\t\t\t\r\n\t\t\t// Read them all...\n\t\t\tfor (int i = 0; i < nrFields; i++)\n\t\t\t{\n\t\t\t\tNode fnode = XMLHandler.getSubNodeByNr(fields, \"field\", i);\n\t\t\t\t\n\t\t\t\tsource_filefolder[i] = XMLHandler.getTagValue(fnode, \"source_filefolder\");\n\t\t\t\tdestination_filefolder[i] = XMLHandler.getTagValue(fnode, \"destination_filefolder\");\n\t\t\t\twildcard[i] = XMLHandler.getTagValue(fnode, \"wildcard\");\n\t\t\t}\n\t\t}\n\t\tcatch(KettleXMLException xe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleXMLException(Messages.getString(\"JobCopyFiles.Error.Exception.UnableLoadXML\"), xe);\n\t\t}\n\t}","id":12235,"modified_method":"public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException\n\t  {\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases, slaveServers);\n\t\t\tcopy_empty_folders      = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"copy_empty_folders\"));\n\t\t\targ_from_previous   = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"arg_from_previous\") );\n\t\t\toverwrite_files      = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"overwrite_files\") );\n\t\t\tinclude_subfolders = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"include_subfolders\") );\n\t\t\tremove_source_files = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"remove_source_files\") );\n\t\t\tadd_result_filesname = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_result_filesname\") );\n\t\t\tdestination_is_a_file = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"destination_is_a_file\") );\n\t\t\tcreate_destination_folder = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"create_destination_folder\") );\n\t\t\t\n\t\t\n\t\t\tNode fields = XMLHandler.getSubNode(entrynode, \"fields\");\n\t\t\t\n\t\t\t// How many field arguments?\n\t\t\tint nrFields = XMLHandler.countNodes(fields, \"field\");\t\n\t\t\tsource_filefolder = new String[nrFields];\n\t\t\tdestination_filefolder = new String[nrFields];\n\t\t\twildcard = new String[nrFields];\n\t\t\t\n\t\t\t// Read them all...\n\t\t\tfor (int i = 0; i < nrFields; i++)\n\t\t\t{\n\t\t\t\tNode fnode = XMLHandler.getSubNodeByNr(fields, \"field\", i);\n\t\t\t\t\n\t\t\t\tsource_filefolder[i] = XMLHandler.getTagValue(fnode, \"source_filefolder\");\n\t\t\t\tdestination_filefolder[i] = XMLHandler.getTagValue(fnode, \"destination_filefolder\");\n\t\t\t\twildcard[i] = XMLHandler.getTagValue(fnode, \"wildcard\");\n\t\t\t}\n\t\t}\n\t\n\t\tcatch(KettleXMLException xe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleXMLException(Messages.getString(\"JobCopyFiles.Error.Exception.UnableLoadXML\"), xe);\n\t\t}\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public Result execute(Result previousResult, int nr, Repository rep, Job parentJob) throws KettleException \n\t{\n\t\t    \n\t\n\t\tLogWriter log = LogWriter.getInstance();\n\t\t\n\t\tList<RowMetaAndData> rows = previousResult.getRows();\n\t    RowMetaAndData resultRow = null;\n\t\t\n\t\tResult result = previousResult;\n\t\t\n\t\tNbrFail=0;\r\n\t\n\t\t// Get source and destination files, also wildcard\r\n\t\tString vsourcefilefolder[] = source_filefolder;\n\t\tString vdestinationfilefolder[] = destination_filefolder;\n\t\tString vwildcard[] = wildcard;\n\t\t\n\t\tresult.setResult( true );\n\t\t\n\t\t\t\n\t\tif (arg_from_previous)\n\t\t{\n\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobCopyFiles.Log.ArgFromPrevious.Found\",\"\"+(rows!=null?rows.size():0)));\n\t\t\t\n\t\t}\n\n\t\tif (arg_from_previous && rows!=null) // Copy the input row to the (command line) arguments\r\n\t\t{\n\r\n\t\t\tfor (int iteration=0;iteration<rows.size();iteration++) \r\n\t\t\t{\r\n\t\t\t\tresultRow = rows.get(iteration);\r\n\t\t\t\tvsourcefilefolder = new String[resultRow.size()];\n\t\t\t\tvdestinationfilefolder = new String[resultRow.size()];\r\n\t\t\t\tvwildcard = new String[resultRow.size()];\r\n\t\t\t\t// Get source and destination file names, also wildcard\r\n\t\t\t\tvsourcefilefolder[iteration] = resultRow.getString(0,null);\n\t\t\t\tvdestinationfilefolder[iteration] = resultRow.getString(1,null);\r\n\t\t\t\tvwildcard[iteration] = resultRow.getString(2,null);\r\n\n\t\t\t\t\n\t\t\t\tif(!Const.isEmpty(vsourcefilefolder[iteration]) &&  !Const.isEmpty(vdestinationfilefolder[iteration]))\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\r\n\t\t\t\t\tlog.logBasic(toString(), Messages.getString(\"JobCopyFiles.Log.ProcessingRow\", vsourcefilefolder[iteration],vdestinationfilefolder[iteration],vwildcard[iteration]));\r\n\r\n\t\t\t\t\tif(! ProcessFileFolder(vsourcefilefolder[iteration],vdestinationfilefolder[iteration],vwildcard[iteration],parentJob,result))\r\n\t\t\t\t\t{\n\t\t\t\t\t\t// The copy process fail\r\n\t\t\t\t\t\tNbrFail=NbrFail++;\r\n\t\t\t\t\t}\r\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t \n\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobCopyFiles.Log.IgnoringRow\",vsourcefilefolder[iteration],vdestinationfilefolder[iteration], vwildcard[iteration]));\n\t\t\t\t\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (vsourcefilefolder!=null && vdestinationfilefolder!=null)\n\t\t{\n\r\n\t\t\tfor (int i=0;i<vsourcefilefolder.length;i++)\r\n\t\t\t{\n\t\t\t\tif(!Const.isEmpty(vsourcefilefolder[i]) && !Const.isEmpty(vdestinationfilefolder[i]))\n\t\t\t\t{\r\n\r\n\t\t\t\t\t// ok we can process this file/folder\r\n\t\t\t\t\t\n\t\t\t\t\tlog.logBasic(toString(), Messages.getString(\"JobCopyFiles.Log.ProcessingRow\",vsourcefilefolder[i], vdestinationfilefolder[i],vwildcard[i]));\n\t\t\t\t\t\n\t\t\t\t\tif(!ProcessFileFolder(vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i],parentJob,result))\r\n\t\t\t\t\t{\n\t\t\t\t\t\t// The copy process fail\r\n\t\t\t\t\t\tNbrFail=NbrFail++;\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\t\t\t\n\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobCopyFiles.Log.IgnoringRow\",vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i]));\n\t\t\t\t\n\t\t\t\t}\r\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\t// Check if all files was successfully process\n\t\n\t\tif (NbrFail>0)\n\t\t{\n\t\t\tresult.setResult( false );\n\t\t\tresult.setNrErrors(NbrFail);\t\n\t\t}\r\n\n\t\t\n\t\treturn result;\n\t}","id":12236,"modified_method":"public Result execute(Result previousResult, int nr, Repository rep, Job parentJob) throws KettleException \n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\t\tResult result = previousResult;\n\n\t    List<RowMetaAndData> rows = result.getRows();\n\t    RowMetaAndData resultRow = null;\n\t\t\n\t\tint NbrFail=0;    \n\t\t\n\t\tNbrFail=0;\n\t\n\t\t// Get source and destination files, also wildcard\n\t\tString vsourcefilefolder[] = source_filefolder;\n\t\tString vdestinationfilefolder[] = destination_filefolder;\n\t\tString vwildcard[] = wildcard;\n\t\t\n\t\tresult.setResult( true );\n\t\t\n\t\t\t\n\t\tif (arg_from_previous)\n\t\t{\n\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobCopyFiles.Log.ArgFromPrevious.Found\",(rows!=null?rows.size():0)+ \"\"));\n\t\t\t\n\t\t}\n\n\t\tif (arg_from_previous && rows!=null) // Copy the input row to the (command line) arguments\n\t\t{\n\t\t\tfor (int iteration=0;iteration<rows.size();iteration++) \n\t\t\t{\n\t\t\t\t\n\t\t\t\tresultRow = rows.get(iteration);\n\t\t\t\tvsourcefilefolder = new String[resultRow.size()];\n\t\t\t\tvdestinationfilefolder = new String[resultRow.size()];\n\t\t\t\tvwildcard = new String[resultRow.size()];\n\t\t\t\t\n\t\t\t\t// Get source and destination file names, also wildcard\n\t\t\t\tvsourcefilefolder[iteration] = resultRow.getString(0,null);\n\t\t\t\tvdestinationfilefolder[iteration] = resultRow.getString(1,null);\n\t\t\t\tvwildcard[iteration] = resultRow.getString(2,null);\n\t\n\n\t\t\t\t\n\t\t\t\tif(!Const.isEmpty(vsourcefilefolder[iteration]) &&  !Const.isEmpty(vdestinationfilefolder[iteration]))\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\t\tlog.logBasic(toString(), Messages.getString(\"JobCopyFiles.Log.ProcessingRow\",vsourcefilefolder[iteration], vdestinationfilefolder[iteration], vwildcard[iteration]));\n\n\t\t\t\t\tif(! ProcessFileFolder(vsourcefilefolder[iteration],vdestinationfilefolder[iteration],vwildcard[iteration],parentJob,result))\n\t\t\t\t\t{\n\t\t\t\t\t\t// The copy process fail\n\t\t\t\t\t\tNbrFail=NbrFail++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t \n\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobCopyFiles.Log.IgnoringRow\",vsourcefilefolder[iteration],vdestinationfilefolder[iteration],vwildcard[iteration]));\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (vsourcefilefolder!=null && vdestinationfilefolder!=null)\n\t\t{\n\t\t\tfor (int i=0;i<vsourcefilefolder.length;i++)\n\t\t\t{\n\t\t\t\tif(!Const.isEmpty(vsourcefilefolder[i]) && !Const.isEmpty(vdestinationfilefolder[i]))\n\t\t\t\t{\n\n\t\t\t\t\t// ok we can process this file/folder\n\t\t\t\t\t\n\t\t\t\t\tlog.logBasic(toString(), Messages.getString(\"JobCopyFiles.Log.ProcessingRow\",vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i]));\n\t\t\t\t\t\n\t\t\t\t\tif(!ProcessFileFolder(vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i],parentJob,result))\n\t\t\t\t\t{\n\t\t\t\t\t\t// The copy process fail\n\t\t\t\t\t\tNbrFail=NbrFail++;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\t\t\t\n\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobCopyFiles.Log.IgnoringRow\",vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i]));\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\t// Check if all files was process with success\n\t\tif (NbrFail>0)\n\t\t{\n\t\t\tresult.setResult( false );\n\t\t\tresult.setNrErrors(NbrFail);\t\n\t\t}\n\n\t\t\n\t\treturn result;\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void saveRep(Repository rep, long id_job) throws KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"copyemptfolders\",      copy_empty_folders);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"arg_from_previous\",  arg_from_previous);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"overwrite_files\",      overwrite_files);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"include_subfolders\", include_subfolders);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"remove_sourcefiles\", remove_source_files);\n\t\t\t\r\n\t\t\t\r\n\t\t\t// save the arguments...\r\n\t\t\tif (source_filefolder!=null)\r\n\t\t\t{\r\n\t\t\t\tfor (int i=0;i<source_filefolder.length;i++) \r\n\t\t\t\t{\r\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"sourcefilefolder\",     source_filefolder[i]);\r\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"destinationfilefolder\",     destination_filefolder[i]);\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"wildcard\", wildcard[i]);\r\n\t\t\t\t}\r\n\t\t\t}\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleException(Messages.getString(\"JobCopyFiles.Error.Exception.UnableSaveRep\")+id_job, dbe);\n\t\t}\n\t}","id":12237,"modified_method":"public void saveRep(Repository rep, long id_job)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"copyemptfolders\",      copy_empty_folders);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"arg_from_previous\",  arg_from_previous);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"overwrite_files\",      overwrite_files);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"include_subfolders\", include_subfolders);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"remove_sourcefiles\", remove_source_files);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"destination_is_a_file\", destination_is_a_file);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"create_destination_folder\", create_destination_folder);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t// save the arguments...\n\t\t\tif (source_filefolder!=null)\n\t\t\t{\n\t\t\t\tfor (int i=0;i<source_filefolder.length;i++) \n\t\t\t\t{\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"source_filefolder\",     source_filefolder[i]);\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"destination_filefolder\",     destination_filefolder[i]);\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"wildcard\", wildcard[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleException(Messages.getString(\"JobCopyFiles.Error.Exception.UnableSaveRep\")+id_job, dbe);\n\t\t}\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private boolean ProcessFileFolder(String sourcefilefoldername,String destinationfilefoldername,String wildcard,Job parentJob,Result result)\n\t{\n\n\t\t\n\t\tLogWriter log = LogWriter.getInstance();\n\t\tboolean entrystatus = false ;\n\t\tFileObject sourcefilefolder = null;\n\t\tFileObject destinationfilefolder = null;\n\t\t\n\t\t// Clear list files to remove after copy process\n\t\t// This list is also added to result files name\n\t\tlist_files_remove.clear();\n\t\tlist_add_result.clear();\n\t\t\n\t\t\n\t\t// Get real source, destination file and wilcard\n\t\tString realSourceFilefoldername = environmentSubstitute(sourcefilefoldername);\n\t\tString realDestinationFilefoldername = environmentSubstitute(destinationfilefoldername);\n\t\tString realWildcard=environmentSubstitute(wildcard);\n\n\t\ttry\n\t\t{\n\t\t\t\n\t\t     // Here gc() is explicitly called if e.g. createfile is used in the same\n\t\t     // job for the same file. The problem is that after creating the file the\n\t\t     // file object is not properly garbaged collected and thus the file cannot\n\t\t     // be deleted anymore. This is a known problem in the JVM.\n\n\t\t     System.gc();\n\t\t      \n\t\t\tsourcefilefolder = KettleVFS.getFileObject(realSourceFilefoldername);\n\t\t\tdestinationfilefolder = KettleVFS.getFileObject(realDestinationFilefoldername);\n\t\t\t\n\t\t\tif (sourcefilefolder.exists())\n\t\t\t{\n\t\t\t\n\t\t\t\t// Basic Tests\n\t\t\t\tif (sourcefilefolder.getType().equals(FileType.FOLDER) && destinationfilefolder.getType().equals(FileType.FILE))\n\t\t\t\t{\n\t\t\t\t\t// Source is a folder, destination is a file\n\t\t\t\t\t// WARNING !!! CAN NOT COPY FOLDER TO FILE !!!\n\t\t\t\t\t\n\t\t\t\t\tlog.logError(Messages.getString(\"JobCopyFiles.Log.Forbidden\"), Messages.getString(\"JobCopyFiles.Log.CanNotCopyFolderToFile\",realSourceFilefoldername, realDestinationFilefoldername));\t\n\t\t\t\t\t\n\t\t\t\t\tNbrFail++;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tif (destinationfilefolder.exists() && destinationfilefolder.getType().equals(FileType.FOLDER) && sourcefilefolder.getType().equals(FileType.FILE) )\n\t\t\t\t\t{\t\t\t\t\n\t\t\t\t\t\t// Source is a file, destination is a folder\n\t\t\t\t\t\t// Copy the file to the destination folder\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tdestinationfilefolder.copyFrom(sourcefilefolder.getParent(),new TextOneFileSelector(sourcefilefolder.getParent().toString(),sourcefilefolder.getName().getBaseName(),destinationfilefolder.toString() ) );\n\t\t\t\t\t\t\n\t\t\t\t\t\tlog.logDetailed(Messages.getString(\"JobCopyFiles.Log.FileCopiedInfos\"), Messages.getString(\"JobCopyFiles.Log.FileCopied\"), sourcefilefolder.getName(),destinationfilefolder.getName());\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Both source and destination are folders\n\t\t\t\t\t\tlog.logBasic(\"\",\"  \");\n\t\t\t\t\t\t\n\t\t\t\t\t\tlog.logBasic(\"---> \", Messages.getString(\"JobCopyFiles.Log.FetchFolder\", sourcefilefolder.toString()));\n\t\t\t\t\t\t\n\t\t\t\t\t\tdestinationfilefolder.copyFrom(sourcefilefolder,new TextFileSelector(sourcefilefolder.toString(),destinationfilefolder.toString(),realWildcard) );\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Remove Files if needed\n\t\t\t\t\tif (remove_source_files && !list_files_remove.isEmpty())\n\t\t\t\t\t{\n\n\t\t\t\t\t\t for (Iterator<String> iter = list_files_remove.iterator(); iter.hasNext();)\n\t\t\t\t        {\n\t\t\t\t            String fileremoventry = (String) iter.next();\n\t\t\t\t            // Remove ONLY Files\n\t\t\t\t            if (KettleVFS.getFileObject(fileremoventry).getType() == FileType.FILE)\n\t\t\t\t            {\n\t\t\t\t\t            boolean deletefile=KettleVFS.getFileObject(fileremoventry).delete();\n\t\t\t\t\t            log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t            if (!deletefile)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t            \t\n\t\t\t\t\t\t\t\t\tlog.logError(\"      \" + Messages.getString(\"JobCopyFiles.Log.Error\"), Messages.getString(\"JobCopyFiles.Error.Exception.CanRemoveFileFolder\",fileremoventry));\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t            else\n\t\t\t\t\t            {\n\t\t\t\t\t            \t\n\t\t\t\t\t            \tlog.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileFolderRemovedInfos\"),Messages.getString(\"JobCopyFiles.Log.FileFolderRemoved\", fileremoventry));\n\t\t\t\t\t            }\n\t\t\t\t            }\n\t\t\t\t        }\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// Add files to result files name\n\t\t\t\t\tif (add_result_filesname && !list_add_result.isEmpty())\n\t\t\t\t\t{\n\n\t\t\t\t\t\t for (Iterator<String> iter = list_add_result.iterator(); iter.hasNext();)\n\t\t\t\t        {\n\t\t\t\t            String fileaddentry = (String) iter.next();\n\t\t\t\t            // Add ONLY Files\n\t\t\t\t            if (KettleVFS.getFileObject(fileaddentry).getType() == FileType.FILE)\n\t\t\t\t            {\n\t\t\t\n\t\t\t                    \n\t\t\t                \tResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_GENERAL, KettleVFS.getFileObject(fileaddentry), parentJob.getName(), toString());\n\t\t\t                    result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n\t\t\t                    \n\t\t\t\t\t            log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t            log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.ResultFilesName\"),\tMessages.getString(\"JobCopyFiles.Log.FileAddedToResultFilesName\", fileaddentry));\n\t\t\t\t            }\n\t\t\t\t        }\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tentrystatus = true ;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\n\t\t\t\tlog.logError(toString(), Messages.getString(\"JobCopyFiles.Error.SourceFileNotExists\",realSourceFilefoldername));\t\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\n\t\t}\n\t\n\t\tcatch (IOException e) \r\n\t\t{\n\n\t\t\tlog.logError(\"Error\", Messages.getString(\"JobCopyFiles.Error.Exception.CopyProcess\", realSourceFilefoldername, realDestinationFilefoldername,e.getMessage()));\t\t\t\t\t\n\t\t}\n\t\tfinally \r\n\t\t{\n\t\t\tif ( sourcefilefolder != null )\n\t\t\t{\n\t\t\t\ttry  \r\n\t\t\t\t{\n\t\t\t\t\tsourcefilefolder.close();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\n\t\t\tif ( destinationfilefolder != null )\n\t\t\t{\n\t\t\t\ttry  \n\t\t\t\t{\n\t\t\t\t\tdestinationfilefolder.close();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\n\t\treturn entrystatus;\n\t}","id":12238,"modified_method":"private boolean ProcessFileFolder(String sourcefilefoldername,String destinationfilefoldername,String wildcard,Job parentJob,Result result)\n\t{\n\n\t\t\n\t\tLogWriter log = LogWriter.getInstance();\n\t\tboolean entrystatus = false ;\n\t\tFileObject sourcefilefolder = null;\n\t\tFileObject destinationfilefolder = null;\n\t\t\n\t\t// Clear list files to remove after copy process\n\t\t// This list is also added to result files name\n\t\tlist_files_remove.clear();\n\t\tlist_add_result.clear();\n\t\t\n\t\t\n\t\t// Get real source, destination file and wilcard\n\t\tString realSourceFilefoldername = environmentSubstitute(sourcefilefoldername);\n\t\tString realDestinationFilefoldername = environmentSubstitute(destinationfilefoldername);\n\t\tString realWildcard=environmentSubstitute(wildcard);\n\n\t\ttry\n\t\t{\n\t\t\t\n\t\t     // Here gc() is explicitly called if e.g. createfile is used in the same\n\t\t     // job for the same file. The problem is that after creating the file the\n\t\t     // file object is not properly garbaged collected and thus the file cannot\n\t\t     // be deleted anymore. This is a known problem in the JVM.\n\n\t\t     System.gc();\n\t\t      \n\t\t\tsourcefilefolder = KettleVFS.getFileObject(realSourceFilefoldername);\n\t\t\tdestinationfilefolder = KettleVFS.getFileObject(realDestinationFilefoldername);\n\t\t\t\n\t\t\tif (sourcefilefolder.exists())\n\t\t\t{\n\t\t\t\n\t\t\t\t// Check if destination folder/parent folder exists !\n\t\t\t\t// If user wanted and if destination folder does not exist\n\t\t\t\t// PDI will create it\n\t\t\t\tif(CreateDestinationFolder(destinationfilefolder))\n\t\t\t\t{\n\n\t\t\t\t\t// Basic Tests\n\t\t\t\t\tif (sourcefilefolder.getType().equals(FileType.FOLDER) && destination_is_a_file)//destinationfilefolder.getType().equals(FileType.FILE))\n\t\t\t\t\t{\n\t\t\t\t\t\t// Source is a folder, destination is a file\n\t\t\t\t\t\t// WARNING !!! CAN NOT COPY FOLDER TO FILE !!!\n\t\t\t\t\t\t\n\t\t\t\t\t\tlog.logError(Messages.getString(\"JobCopyFiles.Log.Forbidden\"), Messages.getString(\"JobCopyFiles.Log.CanNotCopyFolderToFile\",realSourceFilefoldername,realDestinationFilefoldername));\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tNbrFail++;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (destinationfilefolder.getType().equals(FileType.FOLDER) && sourcefilefolder.getType().equals(FileType.FILE) )\n\t\t\t\t\t\t{\t\t\t\t\n\t\t\t\t\t\t\t// Source is a file, destination is a folder\n\t\t\t\t\t\t\t// Copy the file to the destination folder\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdestinationfilefolder.copyFrom(sourcefilefolder.getParent(),new TextOneFileSelector(sourcefilefolder.getParent().toString(),sourcefilefolder.getName().getBaseName(),destinationfilefolder.toString() ) );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlog.logDetailed(Messages.getString(\"JobCopyFiles.Log.FileCopiedInfos\"), \n\t\t\t\t\t\t\t\t\tMessages.getString(\"JobCopyFiles.Log.FileCopied\",sourcefilefolder.getName().toString(),destinationfilefolder.getName().toString()));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sourcefilefolder.getType().equals(FileType.FILE) && destination_is_a_file)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Source is a file, destination is a file\n\n\t\t\t\t\t\t\tdestinationfilefolder.copyFrom(sourcefilefolder, new TextOneToOneFileSelector(destinationfilefolder));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Both source and destination are folders\n\t\t\t\t\t\t\tlog.logBasic(\"\",\"  \");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlog.logBasic(toString(),Messages.getString(\"JobCopyFiles.Log.FetchFolder\",sourcefilefolder.toString()));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdestinationfilefolder.copyFrom(sourcefilefolder,new TextFileSelector(sourcefilefolder.toString(),destinationfilefolder.toString(),realWildcard) );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove Files if needed\n\t\t\t\t\t\tif (remove_source_files && !list_files_remove.isEmpty())\n\t\t\t\t\t\t{\n\t\n\t\t\t\t\t\t\t for (Iterator iter = list_files_remove.iterator(); iter.hasNext();)\n\t\t\t\t\t        {\n\t\t\t\t\t            String fileremoventry = (String) iter.next();\n\t\t\t\t\t            // Remove ONLY Files\n\t\t\t\t\t            if (KettleVFS.getFileObject(fileremoventry).getType() == FileType.FILE)\n\t\t\t\t\t            {\n\t\t\t\t\t\t            boolean deletefile=KettleVFS.getFileObject(fileremoventry).delete();\n\t\t\t\t\t\t            log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t            if (!deletefile)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t            \t\n\t\t\t\t\t\t\t\t\t\tlog.logError(\"      \" + Messages.getString(\"JobCopyFiles.Log.Error\"), \n\t\t\t\t\t\t\t\t\t\t\t\tMessages.getString(\"JobCopyFiles.Error.Exception.CanRemoveFileFolder\",fileremoventry));\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t            else\n\t\t\t\t\t\t            {\n\t\t\t\t\t\t            \t\n\t\t\t\t\t\t            \tlog.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.FileFolderRemovedInfos\"), \n\t\t\t\t\t\t            \t\t\tMessages.getString(\"JobCopyFiles.Log.FileFolderRemoved\", fileremoventry));\n\t\t\t\t\t\t            }\n\t\t\t\t\t            }\n\t\t\t\t\t        }\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Add files to result files name\n\t\t\t\t\t\tif (add_result_filesname && !list_add_result.isEmpty())\n\t\t\t\t\t\t{\n\t\n\t\t\t\t\t\t\t for (Iterator iter = list_add_result.iterator(); iter.hasNext();)\n\t\t\t\t\t        {\n\t\t\t\t\t            String fileaddentry = (String) iter.next();\n\t\t\t\t\t            // Add ONLY Files\n\t\t\t\t\t            if (KettleVFS.getFileObject(fileaddentry).getType() == FileType.FILE)\n\t\t\t\t\t            {\n\t\t\t\t\n\t\t\t\t                    \n\t\t\t\t                \tResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_GENERAL, KettleVFS.getFileObject(fileaddentry), parentJob.getName(), toString());\n\t\t\t\t                    result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n\t\t\t\t                    \n\t\t\t\t\t\t            log.logBasic(\"\",\" ------ \");\n\t\t\t\t\t\t            log.logBasic(\"      \" + Messages.getString(\"JobCopyFiles.Log.ResultFilesName\"),\n\t\t\t\t\t\t            \t\tMessages.getString(\"JobCopyFiles.Log.FileAddedToResultFilesName\",fileaddentry));\n\t\t\t\t\t            }\n\t\t\t\t\t        }\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\n\t\t\t\t\t}\n\t\t\t\t\tentrystatus = true ;\n\t\t\t\t}\t\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Destination Folder or Parent folder is missing\n\t\t\t\t\tlog.logError(toString(), Messages.getString(\"JobCopyFiles.Error.DestinationFolderNotFound\",realDestinationFilefoldername));\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\n\t\t\t\tlog.logError(toString(), Messages.getString(\"JobCopyFiles.Error.SourceFileNotExists\",realSourceFilefoldername));\t\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\n\t\t}\n\t\n\t\tcatch (IOException e) \n\t\t{\n\n\t\t\tlog.logError(\"Error\", Messages.getString(\"JobCopyFiles.Error.Exception.CopyProcess\",realSourceFilefoldername.toString(),destinationfilefolder.toString(), e.getMessage()));\t\t\t\t\t\n\t\t}\n\t\tfinally \n\t\t{\n\t\t\tif ( sourcefilefolder != null )\n\t\t\t{\n\t\t\t\ttry  \n\t\t\t\t{\n\t\t\t\t\tsourcefilefolder.close();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\n\t\t\tif ( destinationfilefolder != null )\n\t\t\t{\n\t\t\t\ttry  \n\t\t\t\t{\n\t\t\t\t\tdestinationfilefolder.close();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\n\t\treturn entrystatus;\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public JobEntryCopyFiles(String n)\n\t{\n\t\tsuper(n, \"\");\n\t\tcopy_empty_folders=true;\n\t\targ_from_previous=false;\n\t\tsource_filefolder=null;\n\t\tremove_source_files=false;\n\t\tdestination_filefolder=null;\n\t\twildcard=null;\n\t\toverwrite_files=false;\n\t\tinclude_subfolders=false;\n\t\tadd_result_filesname=false;\n\t\tsetID(-1L);\n\t\tsetJobEntryType(JobEntryType.COPY_FILES);\n\t}","id":12239,"modified_method":"public JobEntryCopyFiles(String n)\n\t{\n\t\tsuper(n, \"\");\n\t\tcopy_empty_folders=true;\n\t\targ_from_previous=false;\n\t\tsource_filefolder=null;\n\t\tremove_source_files=false;\n\t\tdestination_filefolder=null;\n\t\twildcard=null;\n\t\toverwrite_files=false;\n\t\tinclude_subfolders=false;\n\t\tadd_result_filesname=false;\n\t\tdestination_is_a_file=false;\n\t\tcreate_destination_folder=false;\n\t\tsetID(-1L);\n\t\tsetJobEntryType(JobEntryType.COPY_FILES);\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadRep(Repository rep, long id_jobentry, List<DatabaseMeta> databases, List<SlaveServer> slaveServers) throws KettleException {\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases, slaveServers);\n\t\t\tcopy_empty_folders      = rep.getJobEntryAttributeBoolean(id_jobentry, \"copy_empty_folders\");\n\t\t\targ_from_previous   = rep.getJobEntryAttributeBoolean(id_jobentry, \"arg_from_previous\");\r\n\t\t\toverwrite_files      = rep.getJobEntryAttributeBoolean(id_jobentry, \"overwrite_files\");\r\n\t\t\tinclude_subfolders = rep.getJobEntryAttributeBoolean(id_jobentry, \"include_subfolders\");\n\t\t\tremove_source_files = rep.getJobEntryAttributeBoolean(id_jobentry, \"remove_sourcefiles\");\n\t\t\t\n\t\t\tadd_result_filesname = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_resultfilesname\");\n\t\t\t\n\t\t\t\t\n\t\t\t// How many arguments?\r\n\t\t\tint argnr = rep.countNrJobEntryAttributes(id_jobentry, \"sourcefilefolder\");\r\n\t\t\tsource_filefolder = new String[argnr];\r\n\t\t\tdestination_filefolder = new String[argnr];\n\t\t\twildcard = new String[argnr];\r\n\t\t\t\r\n\t\t\t// Read them all...\r\n\t\t\tfor (int a=0;a<argnr;a++) \r\n\t\t\t{\r\n\t\t\t\tsource_filefolder[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"source_filefolder\");\n\t\t\t\tdestination_filefolder[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"destination_filefolder\");\r\n\t\t\t\twildcard[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"wildcard\");\r\n\t\t\t}\n\t\t}\n\t\tcatch(KettleException dbe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleException(Messages.getString(\"JobCopyFiles.Error.Exception.UnableLoadRep\")+id_jobentry, dbe);\n\t\t}\n\t}","id":12240,"modified_method":"public void loadRep(Repository rep, long id_jobentry, List<DatabaseMeta> databases, List<SlaveServer> slaveServers) throws KettleException\n\t  {\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases, slaveServers);\n\t\t\tcopy_empty_folders      = rep.getJobEntryAttributeBoolean(id_jobentry, \"copy_empty_folders\");\n\t\t\targ_from_previous   = rep.getJobEntryAttributeBoolean(id_jobentry, \"arg_from_previous\");\n\t\t\toverwrite_files      = rep.getJobEntryAttributeBoolean(id_jobentry, \"overwrite_files\");\n\t\t\tinclude_subfolders = rep.getJobEntryAttributeBoolean(id_jobentry, \"include_subfolders\");\n\t\t\tremove_source_files = rep.getJobEntryAttributeBoolean(id_jobentry, \"remove_source_files\");\n\t\t\t\n\t\t\tadd_result_filesname = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_result_filesname\");\n\t\t\tdestination_is_a_file = rep.getJobEntryAttributeBoolean(id_jobentry, \"destination_is_a_file\");\n\t\t\tcreate_destination_folder = rep.getJobEntryAttributeBoolean(id_jobentry, \"create_destination_folder\");\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t// How many arguments?\n\t\t\tint argnr = rep.countNrJobEntryAttributes(id_jobentry, \"source_filefolder\");\n\t\t\tsource_filefolder = new String[argnr];\n\t\t\tdestination_filefolder = new String[argnr];\n\t\t\twildcard = new String[argnr];\n\t\t\t\n\t\t\t// Read them all...\n\t\t\tfor (int a=0;a<argnr;a++) \n\t\t\t{\n\t\t\t\tsource_filefolder[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"source_filefolder\");\n\t\t\t\tdestination_filefolder[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"destination_filefolder\");\n\t\t\t\twildcard[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"wildcard\");\n\t\t\t}\n\t\t}\n\t\tcatch(KettleException dbe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleException(Messages.getString(\"JobCopyFiles.Error.Exception.UnableLoadRep\")+id_jobentry, dbe);\n\t\t}\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\tif (jobEntry.getName()    != null) wName.setText( jobEntry.getName() );\n\t\twName.selectAll();\n\t\twCopyEmptyFolders.setSelection(jobEntry.copy_empty_folders);\n\t\t\n\t\tif (jobEntry.source_filefolder != null)\n\t\t{\n\t\t\tfor (int i = 0; i < jobEntry.source_filefolder.length; i++)\n\t\t\t{\n\t\t\t\tTableItem ti = wFields.table.getItem(i);\n\t\t\t\tif (jobEntry.source_filefolder[i] != null)\n\t\t\t\t\tti.setText(1, jobEntry.source_filefolder[i]);\n\t\t\t\tif (jobEntry.destination_filefolder[i] != null)\n\t\t\t\t\tti.setText(2, jobEntry.destination_filefolder[i]);\n\t\t\t\tif (jobEntry.wildcard[i] != null)\n\t\t\t\t\tti.setText(3, jobEntry.wildcard[i]);\n\t\t\t}\n\t\t\twFields.setRowNums();\n\t\t\twFields.optWidth(true);\n\t\t}\n\t\twPrevious.setSelection(jobEntry.arg_from_previous);\n\t\twOverwriteFiles.setSelection(jobEntry.overwrite_files);\n\t\twIncludeSubfolders.setSelection(jobEntry.include_subfolders);\n\t\twRemoveSourceFiles.setSelection(jobEntry.remove_source_files);\n\t\t\n\t\twAddFileToResult.setSelection(jobEntry.add_result_filesname);\n\t\t\n\n\t}","id":12241,"modified_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\tif (jobEntry.getName()    != null) wName.setText( jobEntry.getName() );\n\t\twName.selectAll();\n\t\twCopyEmptyFolders.setSelection(jobEntry.copy_empty_folders);\n\t\t\n\t\tif (jobEntry.source_filefolder != null)\n\t\t{\n\t\t\tfor (int i = 0; i < jobEntry.source_filefolder.length; i++)\n\t\t\t{\n\t\t\t\tTableItem ti = wFields.table.getItem(i);\n\t\t\t\tif (jobEntry.source_filefolder[i] != null)\n\t\t\t\t\tti.setText(1, jobEntry.source_filefolder[i]);\n\t\t\t\tif (jobEntry.destination_filefolder[i] != null)\n\t\t\t\t\tti.setText(2, jobEntry.destination_filefolder[i]);\n\t\t\t\tif (jobEntry.wildcard[i] != null)\n\t\t\t\t\tti.setText(3, jobEntry.wildcard[i]);\n\t\t\t}\n\t\t\twFields.setRowNums();\n\t\t\twFields.optWidth(true);\n\t\t}\n\t\twPrevious.setSelection(jobEntry.arg_from_previous);\n\t\twOverwriteFiles.setSelection(jobEntry.overwrite_files);\n\t\twIncludeSubfolders.setSelection(jobEntry.include_subfolders);\n\t\twRemoveSourceFiles.setSelection(jobEntry.remove_source_files);\n\t\twDestinationIsAFile.setSelection(jobEntry.destination_is_a_file);\n\t\twCreateDestinationFolder.setSelection(jobEntry.create_destination_folder);\n\t\t\t\n\t\t\n\t\twAddFileToResult.setSelection(jobEntry.add_result_filesname);\n\t\t\n\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void ok()\n\t{\n\t\tjobEntry.setName(wName.getText());\n\t\tjobEntry.setCopyEmptyFolders(wCopyEmptyFolders.getSelection());\n\t\tjobEntry.setoverwrite_files(wOverwriteFiles.getSelection());\n\t\tjobEntry.setIncludeSubfolders(wIncludeSubfolders.getSelection());\n\t\tjobEntry.setArgFromPrevious(wPrevious.getSelection());\n\t\tjobEntry.setRemoveSourceFiles(wRemoveSourceFiles.getSelection());\n\t\tjobEntry.setAddresultfilesname(wAddFileToResult.getSelection());\n\t\t\n\n\t\tint nritems = wFields.nrNonEmpty();\n\t\tint nr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString arg = wFields.getNonEmpty(i).getText(1);\n\t\t\tif (arg != null && arg.length() != 0)\n\t\t\t\tnr++;\n\t\t}\n\t\tjobEntry.source_filefolder = new String[nr];\n\t\tjobEntry.destination_filefolder = new String[nr];\n\t\tjobEntry.wildcard = new String[nr];\n\t\tnr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString source = wFields.getNonEmpty(i).getText(1);\n\t\t\tString dest = wFields.getNonEmpty(i).getText(2);\n\t\t\tString wild = wFields.getNonEmpty(i).getText(3);\n\t\t\tif (source != null && source.length() != 0)\n\t\t\t{\n\t\t\t\tjobEntry.source_filefolder[nr] = source;\n\t\t\t\tjobEntry.destination_filefolder[nr] = dest;\n\t\t\t\tjobEntry.wildcard[nr] = wild;\n\t\t\t\tnr++;\n\t\t\t}\n\t\t}\n\t\tdispose();\n\t}","id":12242,"modified_method":"private void ok()\n\t{\n\t\tjobEntry.setName(wName.getText());\n\t\tjobEntry.setCopyEmptyFolders(wCopyEmptyFolders.getSelection());\n\t\tjobEntry.setoverwrite_files(wOverwriteFiles.getSelection());\n\t\tjobEntry.setIncludeSubfolders(wIncludeSubfolders.getSelection());\n\t\tjobEntry.setArgFromPrevious(wPrevious.getSelection());\n\t\tjobEntry.setRemoveSourceFiles(wRemoveSourceFiles.getSelection());\n\t\tjobEntry.setAddresultfilesname(wAddFileToResult.getSelection());\n\t\tjobEntry.setDestinationIsAFile(wDestinationIsAFile.getSelection());\n\t\tjobEntry.setCreateDestinationFolder(wCreateDestinationFolder.getSelection());\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\tint nritems = wFields.nrNonEmpty();\n\t\tint nr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString arg = wFields.getNonEmpty(i).getText(1);\n\t\t\tif (arg != null && arg.length() != 0)\n\t\t\t\tnr++;\n\t\t}\n\t\tjobEntry.source_filefolder = new String[nr];\n\t\tjobEntry.destination_filefolder = new String[nr];\n\t\tjobEntry.wildcard = new String[nr];\n\t\tnr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString source = wFields.getNonEmpty(i).getText(1);\n\t\t\tString dest = wFields.getNonEmpty(i).getText(2);\n\t\t\tString wild = wFields.getNonEmpty(i).getText(3);\n\t\t\tif (source != null && source.length() != 0)\n\t\t\t{\n\t\t\t\tjobEntry.source_filefolder[nr] = source;\n\t\t\t\tjobEntry.destination_filefolder[nr] = dest;\n\t\t\t\tjobEntry.wildcard[nr] = wild;\n\t\t\t\tnr++;\n\t\t\t}\n\t\t}\n\t\tdispose();\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public JobEntryInterface open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, props.getJobsDialogStyle());\n\t\tprops.setLook(shell);\n\t\tJobDialog.setShellImage(shell, jobEntry);\n\t\t\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = jobEntry.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"JobCopyFiles.Title\"));\n\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Filename line\n\t\twlName=new Label(shell, SWT.RIGHT);\n\t\twlName.setText(Messages.getString(\"JobCopyFiles.Name.Label\"));\n\t\tprops.setLook(wlName);\n\t\tfdlName=new FormData();\n\t\tfdlName.left = new FormAttachment(0, 0);\n\t\tfdlName.right= new FormAttachment(middle, -margin);\n\t\tfdlName.top  = new FormAttachment(0, margin);\n\t\twlName.setLayoutData(fdlName);\n\t\twName=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wName);\n\t\twName.addModifyListener(lsMod);\n\t\tfdName=new FormData();\n\t\tfdName.left = new FormAttachment(middle, 0);\n\t\tfdName.top  = new FormAttachment(0, margin);\n\t\tfdName.right= new FormAttachment(100, 0);\n\t\twName.setLayoutData(fdName);\n\t\t\n\t\t\n\t\t\n\t\t  \n        wTabFolder = new CTabFolder(shell, SWT.BORDER);\n \t\tprops.setLook(wTabFolder, Props.WIDGET_STYLE_TAB);\n \t\t\n \t\t//////////////////////////\n\t\t// START OF GENERAL TAB   ///\n\t\t//////////////////////////\n\t\t\n\t\t\n\t\t\n\t\twGeneralTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twGeneralTab.setText(Messages.getString(\"JobCopyFiles.Tab.General.Label\"));\n\t\t\n\t\twGeneralComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wGeneralComp);\n\n\t\tFormLayout generalLayout = new FormLayout();\n\t\tgeneralLayout.marginWidth  = 3;\n\t\tgeneralLayout.marginHeight = 3;\n\t\twGeneralComp.setLayout(generalLayout);\n\t\t\n\n\t\t// SETTINGS grouping?\n\t\t// ////////////////////////\n\t\t// START OF SETTINGS GROUP\n\t\t// \n\n\t\twSettings = new Group(wGeneralComp, SWT.SHADOW_NONE);\n\t\tprops.setLook(wSettings);\n\t\twSettings.setText(Messages.getString(\"JobCopyFiles.Settings.Label\"));\n\n\t\tFormLayout groupLayout = new FormLayout();\n\t\tgroupLayout.marginWidth = 10;\n\t\tgroupLayout.marginHeight = 10;\n\t\twSettings.setLayout(groupLayout);\n\t\t\n\t\twlIncludeSubfolders = new Label(wSettings, SWT.RIGHT);\r\n\t\twlIncludeSubfolders.setText(Messages.getString(\"JobCopyFiles.IncludeSubfolders.Label\"));\r\n\t\tprops.setLook(wlIncludeSubfolders);\r\n\t\tfdlIncludeSubfolders = new FormData();\r\n\t\tfdlIncludeSubfolders.left = new FormAttachment(0, 0);\r\n\t\tfdlIncludeSubfolders.top = new FormAttachment(wName, margin);\r\n\t\tfdlIncludeSubfolders.right = new FormAttachment(middle, -margin);\r\n\t\twlIncludeSubfolders.setLayoutData(fdlIncludeSubfolders);\r\n\t\twIncludeSubfolders = new Button(wSettings, SWT.CHECK);\r\n\t\tprops.setLook(wIncludeSubfolders);\r\n\t\twIncludeSubfolders.setToolTipText(Messages.getString(\"JobCopyFiles.IncludeSubfolders.Tooltip\"));\r\n\t\tfdIncludeSubfolders = new FormData();\r\n\t\tfdIncludeSubfolders.left = new FormAttachment(middle, 0);\r\n\t\tfdIncludeSubfolders.top = new FormAttachment(wName, margin);\r\n\t\tfdIncludeSubfolders.right = new FormAttachment(100, 0);\r\n\t\twIncludeSubfolders.setLayoutData(fdIncludeSubfolders);\r\n\t\twIncludeSubfolders.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\tCheckIncludeSubFolders();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\n\t\t// OverwriteFiles Option : If selected, files won't be deleted\n\t\twlOverwriteFiles = new Label(wSettings, SWT.RIGHT);\r\n\t\twlOverwriteFiles.setText(Messages.getString(\"JobCopyFiles.OverwriteFiles.Label\"));\r\n\t\tprops.setLook(wlOverwriteFiles);\r\n\t\tfdlOverwriteFiles = new FormData();\r\n\t\tfdlOverwriteFiles.left = new FormAttachment(0, 0);\r\n\t\tfdlOverwriteFiles.top = new FormAttachment(wIncludeSubfolders, margin);\r\n\t\tfdlOverwriteFiles.right = new FormAttachment(middle, -margin);\r\n\t\twlOverwriteFiles.setLayoutData(fdlOverwriteFiles);\r\n\t\twOverwriteFiles = new Button(wSettings, SWT.CHECK);\r\n\t\tprops.setLook(wOverwriteFiles);\r\n\t\twOverwriteFiles.setToolTipText(Messages.getString(\"JobCopyFiles.OverwriteFiles.Tooltip\"));\r\n\t\tfdOverwriteFiles = new FormData();\r\n\t\tfdOverwriteFiles.left = new FormAttachment(middle, 0);\r\n\t\tfdOverwriteFiles.top = new FormAttachment(wIncludeSubfolders, margin);\r\n\t\tfdOverwriteFiles.right = new FormAttachment(100, 0);\r\n\t\twOverwriteFiles.setLayoutData(fdOverwriteFiles);\r\n\t\twOverwriteFiles.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\n\n\t\twlCopyEmptyFolders = new Label(wSettings, SWT.RIGHT);\n\t\twlCopyEmptyFolders.setText(Messages.getString(\"JobCopyFiles.CopyEmptyFolders.Label\"));\n\t\tprops.setLook(wlCopyEmptyFolders);\n\t\tfdlCopyEmptyFolders = new FormData();\n\t\tfdlCopyEmptyFolders.left = new FormAttachment(0, 0);\n\t\tfdlCopyEmptyFolders.top = new FormAttachment(wOverwriteFiles, margin);\n\t\tfdlCopyEmptyFolders.right = new FormAttachment(middle, -margin);\n\t\twlCopyEmptyFolders.setLayoutData(fdlCopyEmptyFolders);\n\t\twCopyEmptyFolders = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wCopyEmptyFolders);\n\t\twCopyEmptyFolders.setToolTipText(Messages.getString(\"JobCopyFiles.CopyEmptyFolders.Tooltip\"));\n\t\tfdCopyEmptyFolders = new FormData();\n\t\tfdCopyEmptyFolders.left = new FormAttachment(middle, 0);\n\t\tfdCopyEmptyFolders.top = new FormAttachment(wOverwriteFiles, margin);\n\t\tfdCopyEmptyFolders.right = new FormAttachment(100, 0);\n\t\twCopyEmptyFolders.setLayoutData(fdCopyEmptyFolders);\n\t\twCopyEmptyFolders.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\n\t\t// Remove source files option\n\t\twlRemoveSourceFiles = new Label(wSettings, SWT.RIGHT);\n\t\twlRemoveSourceFiles.setText(Messages.getString(\"JobCopyFiles.RemoveSourceFiles.Label\"));\n\t\tprops.setLook(wlRemoveSourceFiles);\n\t\tfdlRemoveSourceFiles = new FormData();\n\t\tfdlRemoveSourceFiles.left = new FormAttachment(0, 0);\n\t\tfdlRemoveSourceFiles.top = new FormAttachment(wCopyEmptyFolders, margin);\n\t\tfdlRemoveSourceFiles.right = new FormAttachment(middle, -margin);\n\t\twlRemoveSourceFiles.setLayoutData(fdlRemoveSourceFiles);\n\t\twRemoveSourceFiles = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wRemoveSourceFiles);\n\t\twRemoveSourceFiles.setToolTipText(Messages.getString(\"JobCopyFiles.RemoveSourceFiles.Tooltip\"));\n\t\tfdRemoveSourceFiles = new FormData();\n\t\tfdRemoveSourceFiles.left = new FormAttachment(middle, 0);\n\t\tfdRemoveSourceFiles.top = new FormAttachment(wCopyEmptyFolders, margin);\n\t\tfdRemoveSourceFiles.right = new FormAttachment(100, 0);\n\t\twRemoveSourceFiles.setLayoutData(fdRemoveSourceFiles);\n\t\twRemoveSourceFiles.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\n\t\twlPrevious = new Label(wSettings, SWT.RIGHT);\n\t\twlPrevious.setText(Messages.getString(\"JobCopyFiles.Previous.Label\"));\n\t\tprops.setLook(wlPrevious);\n\t\tfdlPrevious = new FormData();\n\t\tfdlPrevious.left = new FormAttachment(0, 0);\n\t\tfdlPrevious.top = new FormAttachment(wRemoveSourceFiles, margin );\n\t\tfdlPrevious.right = new FormAttachment(middle, -margin);\n\t\twlPrevious.setLayoutData(fdlPrevious);\n\t\twPrevious = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wPrevious);\n\t\twPrevious.setSelection(jobEntry.arg_from_previous);\n\t\twPrevious.setToolTipText(Messages.getString(\"JobCopyFiles.Previous.Tooltip\"));\n\t\tfdPrevious = new FormData();\n\t\tfdPrevious.left = new FormAttachment(middle, 0);\n\t\tfdPrevious.top = new FormAttachment(wRemoveSourceFiles, margin );\n\t\tfdPrevious.right = new FormAttachment(100, 0);\n\t\twPrevious.setLayoutData(fdPrevious);\n\t\twPrevious.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\n\t\t\t\tRefreshArgFromPrevious();\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tfdSettings = new FormData();\n\t\tfdSettings.left = new FormAttachment(0, margin);\n\t\tfdSettings.top = new FormAttachment(wName, margin);\n\t\tfdSettings.right = new FormAttachment(100, -margin);\n\t\twSettings.setLayoutData(fdSettings);\n\t\t\n\t\t// ///////////////////////////////////////////////////////////\n\t\t// / END OF SETTINGS GROUP\n\t\t// ///////////////////////////////////////////////////////////\n\n\t\t// SourceFileFolder line\n\t\twlSourceFileFolder=new Label(wGeneralComp, SWT.RIGHT);\n\t\twlSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.SourceFileFolder.Label\"));\n\t\tprops.setLook(wlSourceFileFolder);\n\t\tfdlSourceFileFolder=new FormData();\n\t\tfdlSourceFileFolder.left = new FormAttachment(0, 0);\n\t\tfdlSourceFileFolder.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdlSourceFileFolder.right= new FormAttachment(middle, -margin);\n\t\twlSourceFileFolder.setLayoutData(fdlSourceFileFolder);\n\n\t\t// Browse Source folders button ...\n\t\twbSourceDirectory=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbSourceDirectory);\n\t\twbSourceDirectory.setText(Messages.getString(\"JobCopyFiles.BrowseFolders.Label\"));\n\t\tfdbSourceDirectory=new FormData();\n\t\tfdbSourceDirectory.right= new FormAttachment(100, 0);\n\t\tfdbSourceDirectory.top  = new FormAttachment(wSettings, margin);\n\t\twbSourceDirectory.setLayoutData(fdbSourceDirectory);\n\t\t\n\t\twbSourceDirectory.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t\t{\n\t\t\t\t\tDirectoryDialog ddialog = new DirectoryDialog(shell, SWT.OPEN);\n\t\t\t\t\tif (wSourceFileFolder.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tddialog.setFilterPath(jobMeta.environmentSubstitute(wSourceFileFolder.getText()) );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t // Calling open() will open and run the dialog.\n\t\t\t        // It will return the selected directory, or\n\t\t\t        // null if user cancels\n\t\t\t        String dir = ddialog.open();\n\t\t\t        if (dir != null) {\n\t\t\t          // Set the text box to the new selection\n\t\t\t        \twSourceFileFolder.setText(dir);\n\t\t\t        }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\t\n\t\t// Browse Source files button ...\n\t\twbSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbSourceFileFolder);\n\t\twbSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.BrowseFiles.Label\"));\n\t\tfdbSourceFileFolder=new FormData();\n\t\tfdbSourceFileFolder.right= new FormAttachment(wbSourceDirectory, -margin);\n\t\tfdbSourceFileFolder.top  = new FormAttachment(wSettings, margin);\n\t\twbSourceFileFolder.setLayoutData(fdbSourceFileFolder);\n\t\t\n\t\t// Browse Destination file add button ...\n\t\twbaSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbaSourceFileFolder);\r\n\t\twbaSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.FilenameAdd.Button\"));\r\n\t\tfdbaSourceFileFolder=new FormData();\r\n\t\tfdbaSourceFileFolder.right= new FormAttachment(wbSourceFileFolder, -margin);\r\n\t\tfdbaSourceFileFolder.top  = new FormAttachment(wSettings, margin);\r\n\t\twbaSourceFileFolder.setLayoutData(fdbaSourceFileFolder);\n\n\t\twSourceFileFolder=new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twSourceFileFolder.setToolTipText(Messages.getString(\"JobCopyFiles.SourceFileFolder.Tooltip\"));\n\t\t\n\t\tprops.setLook(wSourceFileFolder);\n\t\twSourceFileFolder.addModifyListener(lsMod);\n\t\tfdSourceFileFolder=new FormData();\n\t\tfdSourceFileFolder.left = new FormAttachment(middle, 0);\n\t\tfdSourceFileFolder.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdSourceFileFolder.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twSourceFileFolder.setLayoutData(fdSourceFileFolder);\n\n\t\t// Whenever something changes, set the tooltip to the expanded version:\n\t\twSourceFileFolder.addModifyListener(new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\twSourceFileFolder.setToolTipText(jobMeta.environmentSubstitute(wSourceFileFolder.getText() ) );\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\twbSourceFileFolder.addSelectionListener\n\t\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\tif (wSourceFileFolder.getText()!=null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wSourceFileFolder.getText()) );\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t{\n\t\t\t\t\twSourceFileFolder.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t);\n\t\t\n\t\t// Destination\n\t\twlDestinationFileFolder = new Label(wGeneralComp, SWT.RIGHT);\n\t\twlDestinationFileFolder.setText(Messages.getString(\"JobCopyFiles.DestinationFileFolder.Label\"));\n\t\tprops.setLook(wlDestinationFileFolder);\n\t\tfdlDestinationFileFolder = new FormData();\n\t\tfdlDestinationFileFolder.left = new FormAttachment(0, 0);\n\t\tfdlDestinationFileFolder.top = new FormAttachment(wSourceFileFolder, margin);\n\t\tfdlDestinationFileFolder.right = new FormAttachment(middle, -margin);\n\t\twlDestinationFileFolder.setLayoutData(fdlDestinationFileFolder);\n\t\t\n\t\t\n\t\t\n\t\t// Browse Destination folders button ...\n\t\twbDestinationDirectory=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbDestinationDirectory);\n\t\twbDestinationDirectory.setText(Messages.getString(\"JobCopyFiles.BrowseFolders.Label\"));\n\t\tfdbDestinationDirectory=new FormData();\n\t\tfdbDestinationDirectory.right= new FormAttachment(100, 0);\n\t\tfdbDestinationDirectory.top  = new FormAttachment(wSourceFileFolder, margin);\n\t\twbDestinationDirectory.setLayoutData(fdbDestinationDirectory);\n\t\t\n\t\t\n\t\twbDestinationDirectory.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t\t{\n\t\t\t\t\tDirectoryDialog ddialog = new DirectoryDialog(shell, SWT.OPEN);\n\t\t\t\t\tif (wDestinationFileFolder.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tddialog.setFilterPath(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()) );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t // Calling open() will open and run the dialog.\n\t\t\t        // It will return the selected directory, or\n\t\t\t        // null if user cancels\n\t\t\t        String dir = ddialog.open();\n\t\t\t        if (dir != null) {\n\t\t\t          // Set the text box to the new selection\n\t\t\t        \twDestinationFileFolder.setText(dir);\n\t\t\t        }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t// Browse Destination file browse button ...\n\t\twbDestinationFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbDestinationFileFolder);\n\t\twbDestinationFileFolder.setText(Messages.getString(\"JobCopyFiles.BrowseFiles.Label\"));\n\t\tfdbDestinationFileFolder=new FormData();\n\t\tfdbDestinationFileFolder.right= new FormAttachment(wbDestinationDirectory, -margin);\n\t\tfdbDestinationFileFolder.top  = new FormAttachment(wSourceFileFolder, margin);\n\t\twbDestinationFileFolder.setLayoutData(fdbDestinationFileFolder);\n\t\t\n\t\t\t\t\n\t\t\n\t\twDestinationFileFolder = new TextVar(jobMeta,wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER); \n\t\twDestinationFileFolder.setToolTipText(Messages.getString(\"JobCopyFiles.DestinationFileFolder.Tooltip\"));\n\t\tprops.setLook(wDestinationFileFolder);\n\t\twDestinationFileFolder.addModifyListener(lsMod);\n\t\tfdDestinationFileFolder = new FormData();\n\t\tfdDestinationFileFolder.left = new FormAttachment(middle, 0);\n\t\tfdDestinationFileFolder.top = new FormAttachment(wSourceFileFolder, margin);\n\t\tfdDestinationFileFolder.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twDestinationFileFolder.setLayoutData(fdDestinationFileFolder);\n\t\t\n\t\twbDestinationFileFolder.addSelectionListener\n\t\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\tif (wDestinationFileFolder.getText()!=null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()) );\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t{\n\t\t\t\t\twDestinationFileFolder.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\t// Buttons to the right of the screen...\r\n\t\twbdSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbdSourceFileFolder);\r\n\t\twbdSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.FilenameDelete.Button\"));\r\n\t\twbdSourceFileFolder.setToolTipText(Messages.getString(\"JobCopyFiles.FilenameDelete.Tooltip\"));\r\n\t\tfdbdSourceFileFolder=new FormData();\r\n\t\tfdbdSourceFileFolder.right = new FormAttachment(100, 0);\r\n\t\tfdbdSourceFileFolder.top  = new FormAttachment (wDestinationFileFolder, 40);\r\n\t\twbdSourceFileFolder.setLayoutData(fdbdSourceFileFolder);\r\n\r\n\t\twbeSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbeSourceFileFolder);\r\n\t\twbeSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.FilenameEdit.Button\"));\r\n\t\twbeSourceFileFolder.setToolTipText(Messages.getString(\"JobCopyFiles.FilenameEdit.Tooltip\"));\r\n\t\tfdbeSourceFileFolder=new FormData();\r\n\t\tfdbeSourceFileFolder.right = new FormAttachment(100, 0);\r\n\t\tfdbeSourceFileFolder.left = new FormAttachment(wbdSourceFileFolder, 0, SWT.LEFT);\r\n\t\tfdbeSourceFileFolder.top  = new FormAttachment (wbdSourceFileFolder, margin);\r\n\t\twbeSourceFileFolder.setLayoutData(fdbeSourceFileFolder);\n\t\t\n\t\t\n\t\t\n\t\t// Wildcard\n\t\twlWildcard = new Label(wGeneralComp, SWT.RIGHT);\n\t\twlWildcard.setText(Messages.getString(\"JobCopyFiles.Wildcard.Label\"));\n\t\tprops.setLook(wlWildcard);\n\t\tfdlWildcard = new FormData();\n\t\tfdlWildcard.left = new FormAttachment(0, 0);\n\t\tfdlWildcard.top = new FormAttachment(wDestinationFileFolder, margin);\n\t\tfdlWildcard.right = new FormAttachment(middle, -margin);\n\t\twlWildcard.setLayoutData(fdlWildcard);\n\t\t\n\t\twWildcard = new TextVar(jobMeta,wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twWildcard.setToolTipText(Messages.getString(\"JobCopyFiles.Wildcard.Tooltip\"));\n\t\tprops.setLook(wWildcard);\n\t\twWildcard.addModifyListener(lsMod);\n\t\tfdWildcard = new FormData();\n\t\tfdWildcard.left = new FormAttachment(middle, 0);\n\t\tfdWildcard.top = new FormAttachment(wDestinationFileFolder, margin);\n\t\tfdWildcard.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twWildcard.setLayoutData(fdWildcard);\r\n\n\t\twlFields = new Label(wGeneralComp, SWT.NONE);\n\t\twlFields.setText(Messages.getString(\"JobCopyFiles.Fields.Label\"));\n\t\tprops.setLook(wlFields);\n\t\tfdlFields = new FormData();\n\t\tfdlFields.left = new FormAttachment(0, 0);\n\t\tfdlFields.right= new FormAttachment(middle, -margin);\n\t\tfdlFields.top = new FormAttachment(wWildcard,margin);\n\t\twlFields.setLayoutData(fdlFields);\n\n\t\tint rows = jobEntry.source_filefolder == null\n\t\t\t? 1\n\t\t\t: (jobEntry.source_filefolder.length == 0\n\t\t\t? 0\n\t\t\t: jobEntry.source_filefolder.length);\n\t\tfinal int FieldsRows = rows;\n\n\t\tColumnInfo[] colinf=new ColumnInfo[]\r\n\t\t\t{\r\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobCopyFiles.Fields.SourceFileFolder.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\r\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobCopyFiles.Fields.DestinationFileFolder.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobCopyFiles.Fields.Wildcard.Label\"), ColumnInfo.COLUMN_TYPE_TEXT,    false ),\r\n\t\t\t};\n\n\t\tcolinf[0].setUsingVariables(true);\r\n\t\tcolinf[0].setToolTip(Messages.getString(\"JobCopyFiles.Fields.SourceFileFolder.Tooltip\"));\n\t\tcolinf[1].setUsingVariables(true);\n\t\tcolinf[1].setToolTip(Messages.getString(\"JobCopyFiles.Fields.DestinationFileFolder.Tooltip\"));\n\t\tcolinf[2].setUsingVariables(true);\n\t\tcolinf[2].setToolTip(Messages.getString(\"JobCopyFiles.Fields.Wildcard.Tooltip\"));\n\n\t\twFields = new TableView(jobMeta, wGeneralComp, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, colinf,\tFieldsRows, lsMod, props);\n\n\t\tfdFields = new FormData();\n\t\tfdFields.left = new FormAttachment(0, 0);\n\t\tfdFields.top = new FormAttachment(wlFields, margin);\n\t\tfdFields.right = new FormAttachment(100, -75);\n\t\tfdFields.bottom = new FormAttachment(100, -margin);\n\t\twFields.setLayoutData(fdFields);\n\n\t\tRefreshArgFromPrevious();\n\n\t\t// Add the file to the list of files...\r\n\t\tSelectionAdapter selA = new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\r\n\t\t\t{\r\n\t\t\t\twFields.add(new String[] { wSourceFileFolder.getText(), wDestinationFileFolder.getText(), wWildcard.getText() } );\r\n\t\t\t\twSourceFileFolder.setText(\"\");\r\n\t\t\t\twDestinationFileFolder.setText(\"\");\n\t\t\t\twWildcard.setText(\"\");\r\n\t\t\t\twFields.removeEmptyRows();\r\n\t\t\t\twFields.setRowNums();\r\n\t\t\t\twFields.optWidth(true);\r\n\t\t\t}\r\n\t\t};\r\n\t\twbaSourceFileFolder.addSelectionListener(selA);\r\n\t\twSourceFileFolder.addSelectionListener(selA);\n\n\t\t// Delete files from the list of files...\r\n\t\twbdSourceFileFolder.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\r\n\t\t\t{\r\n\t\t\t\tint idx[] = wFields.getSelectionIndices();\r\n\t\t\t\twFields.remove(idx);\r\n\t\t\t\twFields.removeEmptyRows();\r\n\t\t\t\twFields.setRowNums();\r\n\t\t\t}\r\n\t\t});\n\n\t\t// Edit the selected file & remove from the list...\r\n\t\twbeSourceFileFolder.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\r\n\t\t\t{\r\n\t\t\t\tint idx = wFields.getSelectionIndex();\r\n\t\t\t\tif (idx>=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tString string[] = wFields.getItem(idx);\r\n\t\t\t\t\twSourceFileFolder.setText(string[0]);\r\n\t\t\t\t\twDestinationFileFolder.setText(string[1]);\n\t\t\t\t\twWildcard.setText(string[2]);\r\n\t\t\t\t\twFields.remove(idx);\r\n\t\t\t\t}\r\n\t\t\t\twFields.removeEmptyRows();\r\n\t\t\t\twFields.setRowNums();\r\n\t\t\t}\r\n\t\t});\n\t\t\n\t\t\n\t\t\n\n\t\tfdGeneralComp=new FormData();\n\t\tfdGeneralComp.left  = new FormAttachment(0, 0);\n\t\tfdGeneralComp.top   = new FormAttachment(0, 0);\n\t\tfdGeneralComp.right = new FormAttachment(100, 0);\n\t\tfdGeneralComp.bottom= new FormAttachment(100, 0);\n\t\twGeneralComp.setLayoutData(fdGeneralComp);\n\t\t\n\t\twGeneralComp.layout();\n\t\twGeneralTab.setControl(wGeneralComp);\n \t\tprops.setLook(wGeneralComp);\n \t\t\n \t\t\n \t\t\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF GENERAL TAB\n\t\t/////////////////////////////////////////////////////////////\n\t\t\n \t\t\n        \n \t\t//////////////////////////////////////\n\t\t// START OF RESULT FILES  TAB   ///\n\t\t/////////////////////////////////////\n\t\t\n\t\t\n\t\t\n\t\twResultfilesTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twResultfilesTab.setText(Messages.getString(\"JobCopyFiles.Tab.AddResultFilesName.Label\"));\n\n\t\tFormLayout contentLayout = new FormLayout ();\n\t\tcontentLayout.marginWidth  = 3;\n\t\tcontentLayout.marginHeight = 3;\n\t\t\n\t\twResultfilesComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wResultfilesComp);\n \t\twResultfilesComp.setLayout(contentLayout);\n \t\t\n \t\t\n\t\t // fileresult grouping?\n\t     // ////////////////////////\n\t     // START OF LOGGING GROUP///\n\t     // /\n\t    wFileResult = new Group(wResultfilesComp, SWT.SHADOW_NONE);\n\t    props.setLook(wFileResult);\n\t    wFileResult.setText(Messages.getString(\"JobCopyFiles.FileResult.Group.Label\"));\n\n\t    FormLayout fileresultgroupLayout = new FormLayout();\n\t    fileresultgroupLayout.marginWidth = 10;\n\t    fileresultgroupLayout.marginHeight = 10;\n\n\t    wFileResult.setLayout(fileresultgroupLayout);\n\t      \n\t      \n\t  \t//Add file to result\n\t\twlAddFileToResult = new Label(wFileResult, SWT.RIGHT);\n\t\twlAddFileToResult.setText(Messages.getString(\"JobCopyFiles.AddFileToResult.Label\"));\n\t\tprops.setLook(wlAddFileToResult);\n\t\tfdlAddFileToResult = new FormData();\n\t\tfdlAddFileToResult.left = new FormAttachment(0, 0);\n\t\tfdlAddFileToResult.top = new FormAttachment(0, margin);\n\t\tfdlAddFileToResult.right = new FormAttachment(middle, -margin);\n\t\twlAddFileToResult.setLayoutData(fdlAddFileToResult);\n\t\twAddFileToResult = new Button(wFileResult, SWT.CHECK);\n\t\tprops.setLook(wAddFileToResult);\n\t\twAddFileToResult.setToolTipText(Messages.getString(\"JobCopyFiles.AddFileToResult.Tooltip\"));\n\t\tfdAddFileToResult = new FormData();\n\t\tfdAddFileToResult.left = new FormAttachment(middle, 0);\n\t\tfdAddFileToResult.top = new FormAttachment(0, margin);\n\t\tfdAddFileToResult.right = new FormAttachment(100, 0);\n\t\twAddFileToResult.setLayoutData(fdAddFileToResult);\n\t\twAddFileToResult.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t      \n\t      \n\t     fdFileResult = new FormData();\n\t     fdFileResult.left = new FormAttachment(0, margin);\n\t     fdFileResult.top = new FormAttachment(0, margin);\n\t     fdFileResult.right = new FormAttachment(100, -margin);\n\t     wFileResult.setLayoutData(fdFileResult);\n\t     // ///////////////////////////////////////////////////////////\n\t     // / END OF FilesRsult GROUP\n\t     // ///////////////////////////////////////////////////////////\n\n\t\t\n \t\t\n \t\t\n \t\t\n\t     fdResultfilesComp = new FormData();\n\t\tfdResultfilesComp.left  = new FormAttachment(0, 0);\n \t\tfdResultfilesComp.top   = new FormAttachment(0, 0);\n \t\tfdResultfilesComp.right = new FormAttachment(100, 0);\n \t\tfdResultfilesComp.bottom= new FormAttachment(100, 0);\n \t\twResultfilesComp.setLayoutData(wResultfilesComp);\n\n \t\twResultfilesComp.layout();\n\t\twResultfilesTab.setControl(wResultfilesComp);\n\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF RESULT FILES TAB\n\t\t/////////////////////////////////////////////////////////////\n \t\t\n \t\t\n \t\t\n\t\tfdTabFolder = new FormData();\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\n\t\tfdTabFolder.top   = new FormAttachment(wName, margin);\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\n\t\twTabFolder.setLayoutData(fdTabFolder);\n\t\t\n\t\t\n\n\t\twOK = new Button(shell, SWT.PUSH);\n\t\twOK.setText(Messages.getString(\"System.Button.OK\"));\n\t\twCancel = new Button(shell, SWT.PUSH);\n\t\twCancel.setText(Messages.getString(\"System.Button.Cancel\"));\n\n\t\tBaseStepDialog.positionBottomButtons(shell, new Button[] { wOK, wCancel }, margin, wTabFolder);\n\t\t\n\n\t\t// Add listeners\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\n\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twName.addSelectionListener( lsDef );\n\t\twSourceFileFolder.addSelectionListener( lsDef );\n\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\n\t\tgetData();\n\t\tCheckIncludeSubFolders();\n\t\twTabFolder.setSelection(0);\n\t\tBaseStepDialog.setSize(shell);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn jobEntry;\n\t}","id":12243,"modified_method":"public JobEntryInterface open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, props.getJobsDialogStyle());\n\t\tprops.setLook(shell);\n\t\tJobDialog.setShellImage(shell, jobEntry);\n\t\t\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = jobEntry.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"JobCopyFiles.Title\"));\n\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Filename line\n\t\twlName=new Label(shell, SWT.RIGHT);\n\t\twlName.setText(Messages.getString(\"JobCopyFiles.Name.Label\"));\n\t\tprops.setLook(wlName);\n\t\tfdlName=new FormData();\n\t\tfdlName.left = new FormAttachment(0, 0);\n\t\tfdlName.right= new FormAttachment(middle, -margin);\n\t\tfdlName.top  = new FormAttachment(0, margin);\n\t\twlName.setLayoutData(fdlName);\n\t\twName=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wName);\n\t\twName.addModifyListener(lsMod);\n\t\tfdName=new FormData();\n\t\tfdName.left = new FormAttachment(middle, 0);\n\t\tfdName.top  = new FormAttachment(0, margin);\n\t\tfdName.right= new FormAttachment(100, 0);\n\t\twName.setLayoutData(fdName);\n\t\t\n\t\t\n\t\t\n\t\t  \n        wTabFolder = new CTabFolder(shell, SWT.BORDER);\n \t\tprops.setLook(wTabFolder, Props.WIDGET_STYLE_TAB);\n \t\t\n \t\t//////////////////////////\n\t\t// START OF GENERAL TAB   ///\n\t\t//////////////////////////\n\t\t\n\t\t\n\t\t\n\t\twGeneralTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twGeneralTab.setText(Messages.getString(\"JobCopyFiles.Tab.General.Label\"));\n\t\t\n\t\twGeneralComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wGeneralComp);\n\n\t\tFormLayout generalLayout = new FormLayout();\n\t\tgeneralLayout.marginWidth  = 3;\n\t\tgeneralLayout.marginHeight = 3;\n\t\twGeneralComp.setLayout(generalLayout);\n\t\t\n\n\t\t// SETTINGS grouping?\n\t\t// ////////////////////////\n\t\t// START OF SETTINGS GROUP\n\t\t// \n\n\t\twSettings = new Group(wGeneralComp, SWT.SHADOW_NONE);\n\t\tprops.setLook(wSettings);\n\t\twSettings.setText(Messages.getString(\"JobCopyFiles.Settings.Label\"));\n\n\t\tFormLayout groupLayout = new FormLayout();\n\t\tgroupLayout.marginWidth = 10;\n\t\tgroupLayout.marginHeight = 10;\n\t\twSettings.setLayout(groupLayout);\n\t\t\n\t\twlIncludeSubfolders = new Label(wSettings, SWT.RIGHT);\n\t\twlIncludeSubfolders.setText(Messages.getString(\"JobCopyFiles.IncludeSubfolders.Label\"));\n\t\tprops.setLook(wlIncludeSubfolders);\n\t\tfdlIncludeSubfolders = new FormData();\n\t\tfdlIncludeSubfolders.left = new FormAttachment(0, 0);\n\t\tfdlIncludeSubfolders.top = new FormAttachment(wName, margin);\n\t\tfdlIncludeSubfolders.right = new FormAttachment(middle, -margin);\n\t\twlIncludeSubfolders.setLayoutData(fdlIncludeSubfolders);\n\t\twIncludeSubfolders = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wIncludeSubfolders);\n\t\twIncludeSubfolders.setToolTipText(Messages.getString(\"JobCopyFiles.IncludeSubfolders.Tooltip\"));\n\t\tfdIncludeSubfolders = new FormData();\n\t\tfdIncludeSubfolders.left = new FormAttachment(middle, 0);\n\t\tfdIncludeSubfolders.top = new FormAttachment(wName, margin);\n\t\tfdIncludeSubfolders.right = new FormAttachment(100, 0);\n\t\twIncludeSubfolders.setLayoutData(fdIncludeSubfolders);\n\t\twIncludeSubfolders.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t\tCheckIncludeSubFolders();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Destination is a file?\n\t\twlDestinationIsAFile = new Label(wSettings, SWT.RIGHT);\n\t\twlDestinationIsAFile.setText(Messages.getString(\"JobCopyFiles.DestinationIsAFile.Label\"));\n\t\tprops.setLook(wlDestinationIsAFile);\n\t\tfdlDestinationIsAFile = new FormData();\n\t\tfdlDestinationIsAFile.left = new FormAttachment(0, 0);\n\t\tfdlDestinationIsAFile.top = new FormAttachment(wIncludeSubfolders, margin);\n\t\tfdlDestinationIsAFile.right = new FormAttachment(middle, -margin);\n\t\twlDestinationIsAFile.setLayoutData(fdlDestinationIsAFile);\n\t\twDestinationIsAFile = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wDestinationIsAFile);\n\t\twDestinationIsAFile.setToolTipText(Messages.getString(\"JobCopyFiles.DestinationIsAFile.Tooltip\"));\n\t\tfdDestinationIsAFile = new FormData();\n\t\tfdDestinationIsAFile.left = new FormAttachment(middle, 0);\n\t\tfdDestinationIsAFile.top = new FormAttachment(wIncludeSubfolders, margin);\n\t\tfdDestinationIsAFile.right = new FormAttachment(100, 0);\n\t\twDestinationIsAFile.setLayoutData(fdDestinationIsAFile);\n\t\twDestinationIsAFile.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Copy empty folders\n\t\twlCopyEmptyFolders = new Label(wSettings, SWT.RIGHT);\n\t\twlCopyEmptyFolders.setText(Messages.getString(\"JobCopyFiles.CopyEmptyFolders.Label\"));\n\t\tprops.setLook(wlCopyEmptyFolders);\n\t\tfdlCopyEmptyFolders = new FormData();\n\t\tfdlCopyEmptyFolders.left = new FormAttachment(0, 0);\n\t\tfdlCopyEmptyFolders.top = new FormAttachment(wDestinationIsAFile, margin);\n\t\tfdlCopyEmptyFolders.right = new FormAttachment(middle, -margin);\n\t\twlCopyEmptyFolders.setLayoutData(fdlCopyEmptyFolders);\n\t\twCopyEmptyFolders = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wCopyEmptyFolders);\n\t\twCopyEmptyFolders.setToolTipText(Messages.getString(\"JobCopyFiles.CopyEmptyFolders.Tooltip\"));\n\t\tfdCopyEmptyFolders = new FormData();\n\t\tfdCopyEmptyFolders.left = new FormAttachment(middle, 0);\n\t\tfdCopyEmptyFolders.top = new FormAttachment(wDestinationIsAFile, margin);\n\t\tfdCopyEmptyFolders.right = new FormAttachment(100, 0);\n\t\twCopyEmptyFolders.setLayoutData(fdCopyEmptyFolders);\n\t\twCopyEmptyFolders.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Create destination folder/parent folder\n\t\twlCreateDestinationFolder = new Label(wSettings, SWT.RIGHT);\n\t\twlCreateDestinationFolder.setText(Messages.getString(\"JobCopyFiles.CreateDestinationFolder.Label\"));\n\t\tprops.setLook(wlCreateDestinationFolder);\n\t\tfdlCreateDestinationFolder = new FormData();\n\t\tfdlCreateDestinationFolder.left = new FormAttachment(0, 0);\n\t\tfdlCreateDestinationFolder.top = new FormAttachment(wCopyEmptyFolders, margin);\n\t\tfdlCreateDestinationFolder.right = new FormAttachment(middle, -margin);\n\t\twlCreateDestinationFolder.setLayoutData(fdlCreateDestinationFolder);\n\t\twCreateDestinationFolder = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wCreateDestinationFolder);\n\t\twCreateDestinationFolder.setToolTipText(Messages.getString(\"JobCopyFiles.CreateDestinationFolder.Tooltip\"));\n\t\tfdCreateDestinationFolder = new FormData();\n\t\tfdCreateDestinationFolder.left = new FormAttachment(middle, 0);\n\t\tfdCreateDestinationFolder.top = new FormAttachment(wCopyEmptyFolders, margin);\n\t\tfdCreateDestinationFolder.right = new FormAttachment(100, 0);\n\t\twCreateDestinationFolder.setLayoutData(fdCreateDestinationFolder);\n\t\twCreateDestinationFolder.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// OverwriteFiles Option \n\t\twlOverwriteFiles = new Label(wSettings, SWT.RIGHT);\n\t\twlOverwriteFiles.setText(Messages.getString(\"JobCopyFiles.OverwriteFiles.Label\"));\n\t\tprops.setLook(wlOverwriteFiles);\n\t\tfdlOverwriteFiles = new FormData();\n\t\tfdlOverwriteFiles.left = new FormAttachment(0, 0);\n\t\tfdlOverwriteFiles.top = new FormAttachment(wCreateDestinationFolder, margin);\n\t\tfdlOverwriteFiles.right = new FormAttachment(middle, -margin);\n\t\twlOverwriteFiles.setLayoutData(fdlOverwriteFiles);\n\t\twOverwriteFiles = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wOverwriteFiles);\n\t\twOverwriteFiles.setToolTipText(Messages.getString(\"JobCopyFiles.OverwriteFiles.Tooltip\"));\n\t\tfdOverwriteFiles = new FormData();\n\t\tfdOverwriteFiles.left = new FormAttachment(middle, 0);\n\t\tfdOverwriteFiles.top = new FormAttachment(wCreateDestinationFolder, margin);\n\t\tfdOverwriteFiles.right = new FormAttachment(100, 0);\n\t\twOverwriteFiles.setLayoutData(fdOverwriteFiles);\n\t\twOverwriteFiles.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\n\n\t\n\t\t// Remove source files option\n\t\twlRemoveSourceFiles = new Label(wSettings, SWT.RIGHT);\n\t\twlRemoveSourceFiles.setText(Messages.getString(\"JobCopyFiles.RemoveSourceFiles.Label\"));\n\t\tprops.setLook(wlRemoveSourceFiles);\n\t\tfdlRemoveSourceFiles = new FormData();\n\t\tfdlRemoveSourceFiles.left = new FormAttachment(0, 0);\n\t\tfdlRemoveSourceFiles.top = new FormAttachment(wOverwriteFiles, margin);\n\t\tfdlRemoveSourceFiles.right = new FormAttachment(middle, -margin);\n\t\twlRemoveSourceFiles.setLayoutData(fdlRemoveSourceFiles);\n\t\twRemoveSourceFiles = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wRemoveSourceFiles);\n\t\twRemoveSourceFiles.setToolTipText(Messages.getString(\"JobCopyFiles.RemoveSourceFiles.Tooltip\"));\n\t\tfdRemoveSourceFiles = new FormData();\n\t\tfdRemoveSourceFiles.left = new FormAttachment(middle, 0);\n\t\tfdRemoveSourceFiles.top = new FormAttachment(wOverwriteFiles, margin);\n\t\tfdRemoveSourceFiles.right = new FormAttachment(100, 0);\n\t\twRemoveSourceFiles.setLayoutData(fdRemoveSourceFiles);\n\t\twRemoveSourceFiles.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\n\t\twlPrevious = new Label(wSettings, SWT.RIGHT);\n\t\twlPrevious.setText(Messages.getString(\"JobCopyFiles.Previous.Label\"));\n\t\tprops.setLook(wlPrevious);\n\t\tfdlPrevious = new FormData();\n\t\tfdlPrevious.left = new FormAttachment(0, 0);\n\t\tfdlPrevious.top = new FormAttachment(wRemoveSourceFiles, margin );\n\t\tfdlPrevious.right = new FormAttachment(middle, -margin);\n\t\twlPrevious.setLayoutData(fdlPrevious);\n\t\twPrevious = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wPrevious);\n\t\twPrevious.setSelection(jobEntry.arg_from_previous);\n\t\twPrevious.setToolTipText(Messages.getString(\"JobCopyFiles.Previous.Tooltip\"));\n\t\tfdPrevious = new FormData();\n\t\tfdPrevious.left = new FormAttachment(middle, 0);\n\t\tfdPrevious.top = new FormAttachment(wRemoveSourceFiles, margin );\n\t\tfdPrevious.right = new FormAttachment(100, 0);\n\t\twPrevious.setLayoutData(fdPrevious);\n\t\twPrevious.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\n\t\t\t\tRefreshArgFromPrevious();\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tfdSettings = new FormData();\n\t\tfdSettings.left = new FormAttachment(0, margin);\n\t\tfdSettings.top = new FormAttachment(wName, margin);\n\t\tfdSettings.right = new FormAttachment(100, -margin);\n\t\twSettings.setLayoutData(fdSettings);\n\t\t\n\t\t// ///////////////////////////////////////////////////////////\n\t\t// / END OF SETTINGS GROUP\n\t\t// ///////////////////////////////////////////////////////////\n\n\t\t// SourceFileFolder line\n\t\twlSourceFileFolder=new Label(wGeneralComp, SWT.RIGHT);\n\t\twlSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.SourceFileFolder.Label\"));\n\t\tprops.setLook(wlSourceFileFolder);\n\t\tfdlSourceFileFolder=new FormData();\n\t\tfdlSourceFileFolder.left = new FormAttachment(0, 0);\n\t\tfdlSourceFileFolder.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdlSourceFileFolder.right= new FormAttachment(middle, -margin);\n\t\twlSourceFileFolder.setLayoutData(fdlSourceFileFolder);\n\n\t\t// Browse Source folders button ...\n\t\twbSourceDirectory=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbSourceDirectory);\n\t\twbSourceDirectory.setText(Messages.getString(\"JobCopyFiles.BrowseFolders.Label\"));\n\t\tfdbSourceDirectory=new FormData();\n\t\tfdbSourceDirectory.right= new FormAttachment(100, 0);\n\t\tfdbSourceDirectory.top  = new FormAttachment(wSettings, margin);\n\t\twbSourceDirectory.setLayoutData(fdbSourceDirectory);\n\t\t\n\t\twbSourceDirectory.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t\t{\n\t\t\t\t\tDirectoryDialog ddialog = new DirectoryDialog(shell, SWT.OPEN);\n\t\t\t\t\tif (wSourceFileFolder.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tddialog.setFilterPath(jobMeta.environmentSubstitute(wSourceFileFolder.getText()) );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t // Calling open() will open and run the dialog.\n\t\t\t        // It will return the selected directory, or\n\t\t\t        // null if user cancels\n\t\t\t        String dir = ddialog.open();\n\t\t\t        if (dir != null) {\n\t\t\t          // Set the text box to the new selection\n\t\t\t        \twSourceFileFolder.setText(dir);\n\t\t\t        }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\t\n\t\t// Browse Source files button ...\n\t\twbSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbSourceFileFolder);\n\t\twbSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.BrowseFiles.Label\"));\n\t\tfdbSourceFileFolder=new FormData();\n\t\tfdbSourceFileFolder.right= new FormAttachment(wbSourceDirectory, -margin);\n\t\tfdbSourceFileFolder.top  = new FormAttachment(wSettings, margin);\n\t\twbSourceFileFolder.setLayoutData(fdbSourceFileFolder);\n\t\t\n\t\t// Browse Destination file add button ...\n\t\twbaSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbaSourceFileFolder);\n\t\twbaSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.FilenameAdd.Button\"));\n\t\tfdbaSourceFileFolder=new FormData();\n\t\tfdbaSourceFileFolder.right= new FormAttachment(wbSourceFileFolder, -margin);\n\t\tfdbaSourceFileFolder.top  = new FormAttachment(wSettings, margin);\n\t\twbaSourceFileFolder.setLayoutData(fdbaSourceFileFolder);\n\n\t\twSourceFileFolder=new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twSourceFileFolder.setToolTipText(Messages.getString(\"JobCopyFiles.SourceFileFolder.Tooltip\"));\n\t\t\n\t\tprops.setLook(wSourceFileFolder);\n\t\twSourceFileFolder.addModifyListener(lsMod);\n\t\tfdSourceFileFolder=new FormData();\n\t\tfdSourceFileFolder.left = new FormAttachment(middle, 0);\n\t\tfdSourceFileFolder.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdSourceFileFolder.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twSourceFileFolder.setLayoutData(fdSourceFileFolder);\n\n\t\t// Whenever something changes, set the tooltip to the expanded version:\n\t\twSourceFileFolder.addModifyListener(new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\twSourceFileFolder.setToolTipText(jobMeta.environmentSubstitute(wSourceFileFolder.getText() ) );\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\twbSourceFileFolder.addSelectionListener\n\t\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\tif (wSourceFileFolder.getText()!=null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wSourceFileFolder.getText()) );\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t{\n\t\t\t\t\twSourceFileFolder.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t);\n\t\t\n\t\t// Destination\n\t\twlDestinationFileFolder = new Label(wGeneralComp, SWT.RIGHT);\n\t\twlDestinationFileFolder.setText(Messages.getString(\"JobCopyFiles.DestinationFileFolder.Label\"));\n\t\tprops.setLook(wlDestinationFileFolder);\n\t\tfdlDestinationFileFolder = new FormData();\n\t\tfdlDestinationFileFolder.left = new FormAttachment(0, 0);\n\t\tfdlDestinationFileFolder.top = new FormAttachment(wSourceFileFolder, margin);\n\t\tfdlDestinationFileFolder.right = new FormAttachment(middle, -margin);\n\t\twlDestinationFileFolder.setLayoutData(fdlDestinationFileFolder);\n\t\t\n\t\t\n\t\t\n\t\t// Browse Destination folders button ...\n\t\twbDestinationDirectory=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbDestinationDirectory);\n\t\twbDestinationDirectory.setText(Messages.getString(\"JobCopyFiles.BrowseFolders.Label\"));\n\t\tfdbDestinationDirectory=new FormData();\n\t\tfdbDestinationDirectory.right= new FormAttachment(100, 0);\n\t\tfdbDestinationDirectory.top  = new FormAttachment(wSourceFileFolder, margin);\n\t\twbDestinationDirectory.setLayoutData(fdbDestinationDirectory);\n\t\t\n\t\t\n\t\twbDestinationDirectory.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t\t{\n\t\t\t\t\tDirectoryDialog ddialog = new DirectoryDialog(shell, SWT.OPEN);\n\t\t\t\t\tif (wDestinationFileFolder.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tddialog.setFilterPath(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()) );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t // Calling open() will open and run the dialog.\n\t\t\t        // It will return the selected directory, or\n\t\t\t        // null if user cancels\n\t\t\t        String dir = ddialog.open();\n\t\t\t        if (dir != null) {\n\t\t\t          // Set the text box to the new selection\n\t\t\t        \twDestinationFileFolder.setText(dir);\n\t\t\t        }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t// Browse Destination file browse button ...\n\t\twbDestinationFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbDestinationFileFolder);\n\t\twbDestinationFileFolder.setText(Messages.getString(\"JobCopyFiles.BrowseFiles.Label\"));\n\t\tfdbDestinationFileFolder=new FormData();\n\t\tfdbDestinationFileFolder.right= new FormAttachment(wbDestinationDirectory, -margin);\n\t\tfdbDestinationFileFolder.top  = new FormAttachment(wSourceFileFolder, margin);\n\t\twbDestinationFileFolder.setLayoutData(fdbDestinationFileFolder);\n\t\t\n\t\t\t\t\n\t\t\n\t\twDestinationFileFolder = new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER); \n\t\twDestinationFileFolder.setToolTipText(Messages.getString(\"JobCopyFiles.DestinationFileFolder.Tooltip\"));\n\t\tprops.setLook(wDestinationFileFolder);\n\t\twDestinationFileFolder.addModifyListener(lsMod);\n\t\tfdDestinationFileFolder = new FormData();\n\t\tfdDestinationFileFolder.left = new FormAttachment(middle, 0);\n\t\tfdDestinationFileFolder.top = new FormAttachment(wSourceFileFolder, margin);\n\t\tfdDestinationFileFolder.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twDestinationFileFolder.setLayoutData(fdDestinationFileFolder);\n\t\t\n\t\twbDestinationFileFolder.addSelectionListener\n\t\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\tif (wDestinationFileFolder.getText()!=null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()) );\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t{\n\t\t\t\t\twDestinationFileFolder.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\t// Buttons to the right of the screen...\n\t\twbdSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbdSourceFileFolder);\n\t\twbdSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.FilenameDelete.Button\"));\n\t\twbdSourceFileFolder.setToolTipText(Messages.getString(\"JobCopyFiles.FilenameDelete.Tooltip\"));\n\t\tfdbdSourceFileFolder=new FormData();\n\t\tfdbdSourceFileFolder.right = new FormAttachment(100, 0);\n\t\tfdbdSourceFileFolder.top  = new FormAttachment (wDestinationFileFolder, 40);\n\t\twbdSourceFileFolder.setLayoutData(fdbdSourceFileFolder);\n\n\t\twbeSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbeSourceFileFolder);\n\t\twbeSourceFileFolder.setText(Messages.getString(\"JobCopyFiles.FilenameEdit.Button\"));\n\t\twbeSourceFileFolder.setToolTipText(Messages.getString(\"JobCopyFiles.FilenameEdit.Tooltip\"));\n\t\tfdbeSourceFileFolder=new FormData();\n\t\tfdbeSourceFileFolder.right = new FormAttachment(100, 0);\n\t\tfdbeSourceFileFolder.left = new FormAttachment(wbdSourceFileFolder, 0, SWT.LEFT);\n\t\tfdbeSourceFileFolder.top  = new FormAttachment (wbdSourceFileFolder, margin);\n\t\twbeSourceFileFolder.setLayoutData(fdbeSourceFileFolder);\n\t\t\n\t\t\n\t\t\n\t\t// Wildcard\n\t\twlWildcard = new Label(wGeneralComp, SWT.RIGHT);\n\t\twlWildcard.setText(Messages.getString(\"JobCopyFiles.Wildcard.Label\"));\n\t\tprops.setLook(wlWildcard);\n\t\tfdlWildcard = new FormData();\n\t\tfdlWildcard.left = new FormAttachment(0, 0);\n\t\tfdlWildcard.top = new FormAttachment(wDestinationFileFolder, margin);\n\t\tfdlWildcard.right = new FormAttachment(middle, -margin);\n\t\twlWildcard.setLayoutData(fdlWildcard);\n\t\t\n\t\twWildcard = new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twWildcard.setToolTipText(Messages.getString(\"JobCopyFiles.Wildcard.Tooltip\"));\n\t\tprops.setLook(wWildcard);\n\t\twWildcard.addModifyListener(lsMod);\n\t\tfdWildcard = new FormData();\n\t\tfdWildcard.left = new FormAttachment(middle, 0);\n\t\tfdWildcard.top = new FormAttachment(wDestinationFileFolder, margin);\n\t\tfdWildcard.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twWildcard.setLayoutData(fdWildcard);\n\n\t\twlFields = new Label(wGeneralComp, SWT.NONE);\n\t\twlFields.setText(Messages.getString(\"JobCopyFiles.Fields.Label\"));\n\t\tprops.setLook(wlFields);\n\t\tfdlFields = new FormData();\n\t\tfdlFields.left = new FormAttachment(0, 0);\n\t\tfdlFields.right= new FormAttachment(middle, -margin);\n\t\tfdlFields.top = new FormAttachment(wWildcard,margin);\n\t\twlFields.setLayoutData(fdlFields);\n\n\t\tint rows = jobEntry.source_filefolder == null\n\t\t\t? 1\n\t\t\t: (jobEntry.source_filefolder.length == 0\n\t\t\t? 0\n\t\t\t: jobEntry.source_filefolder.length);\n\t\tfinal int FieldsRows = rows;\n\n\t\tColumnInfo[] colinf=new ColumnInfo[]\n\t\t\t{\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobCopyFiles.Fields.SourceFileFolder.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobCopyFiles.Fields.DestinationFileFolder.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobCopyFiles.Fields.Wildcard.Label\"), ColumnInfo.COLUMN_TYPE_TEXT,    false ),\n\t\t\t};\n\n\t\tcolinf[0].setUsingVariables(true);\n\t\tcolinf[0].setToolTip(Messages.getString(\"JobCopyFiles.Fields.SourceFileFolder.Tooltip\"));\n\t\tcolinf[1].setUsingVariables(true);\n\t\tcolinf[1].setToolTip(Messages.getString(\"JobCopyFiles.Fields.DestinationFileFolder.Tooltip\"));\n\t\tcolinf[2].setUsingVariables(true);\n\t\tcolinf[2].setToolTip(Messages.getString(\"JobCopyFiles.Fields.Wildcard.Tooltip\"));\n\n\t\twFields = new TableView(jobMeta, wGeneralComp, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, colinf,\tFieldsRows, lsMod, props);\n\n\t\tfdFields = new FormData();\n\t\tfdFields.left = new FormAttachment(0, 0);\n\t\tfdFields.top = new FormAttachment(wlFields, margin);\n\t\tfdFields.right = new FormAttachment(100, -75);\n\t\tfdFields.bottom = new FormAttachment(100, -margin);\n\t\twFields.setLayoutData(fdFields);\n\n\t\tRefreshArgFromPrevious();\n\n\t\t// Add the file to the list of files...\n\t\tSelectionAdapter selA = new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\twFields.add(new String[] { wSourceFileFolder.getText(), wDestinationFileFolder.getText(), wWildcard.getText() } );\n\t\t\t\twSourceFileFolder.setText(\"\");\n\t\t\t\twDestinationFileFolder.setText(\"\");\n\t\t\t\twWildcard.setText(\"\");\n\t\t\t\twFields.removeEmptyRows();\n\t\t\t\twFields.setRowNums();\n\t\t\t\twFields.optWidth(true);\n\t\t\t}\n\t\t};\n\t\twbaSourceFileFolder.addSelectionListener(selA);\n\t\twSourceFileFolder.addSelectionListener(selA);\n\n\t\t// Delete files from the list of files...\n\t\twbdSourceFileFolder.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\tint idx[] = wFields.getSelectionIndices();\n\t\t\t\twFields.remove(idx);\n\t\t\t\twFields.removeEmptyRows();\n\t\t\t\twFields.setRowNums();\n\t\t\t}\n\t\t});\n\n\t\t// Edit the selected file & remove from the list...\n\t\twbeSourceFileFolder.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\tint idx = wFields.getSelectionIndex();\n\t\t\t\tif (idx>=0)\n\t\t\t\t{\n\t\t\t\t\tString string[] = wFields.getItem(idx);\n\t\t\t\t\twSourceFileFolder.setText(string[0]);\n\t\t\t\t\twDestinationFileFolder.setText(string[1]);\n\t\t\t\t\twWildcard.setText(string[2]);\n\t\t\t\t\twFields.remove(idx);\n\t\t\t\t}\n\t\t\t\twFields.removeEmptyRows();\n\t\t\t\twFields.setRowNums();\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\t\n\n\t\tfdGeneralComp=new FormData();\n\t\tfdGeneralComp.left  = new FormAttachment(0, 0);\n\t\tfdGeneralComp.top   = new FormAttachment(0, 0);\n\t\tfdGeneralComp.right = new FormAttachment(100, 0);\n\t\tfdGeneralComp.bottom= new FormAttachment(100, 0);\n\t\twGeneralComp.setLayoutData(fdGeneralComp);\n\t\t\n\t\twGeneralComp.layout();\n\t\twGeneralTab.setControl(wGeneralComp);\n \t\tprops.setLook(wGeneralComp);\n \t\t\n \t\t\n \t\t\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF GENERAL TAB\n\t\t/////////////////////////////////////////////////////////////\n\t\t\n \t\t\n        \n \t\t//////////////////////////////////////\n\t\t// START OF RESULT FILES  TAB   ///\n\t\t/////////////////////////////////////\n\t\t\n\t\t\n\t\t\n\t\twResultfilesTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twResultfilesTab.setText(Messages.getString(\"JobCopyFiles.Tab.AddResultFilesName.Label\"));\n\n\t\tFormLayout contentLayout = new FormLayout ();\n\t\tcontentLayout.marginWidth  = 3;\n\t\tcontentLayout.marginHeight = 3;\n\t\t\n\t\twResultfilesComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wResultfilesComp);\n \t\twResultfilesComp.setLayout(contentLayout);\n \t\t\n \t\t\n\t\t // fileresult grouping?\n\t     // ////////////////////////\n\t     // START OF LOGGING GROUP///\n\t     // /\n\t    wFileResult = new Group(wResultfilesComp, SWT.SHADOW_NONE);\n\t    props.setLook(wFileResult);\n\t    wFileResult.setText(Messages.getString(\"JobCopyFiles.FileResult.Group.Label\"));\n\n\t    FormLayout fileresultgroupLayout = new FormLayout();\n\t    fileresultgroupLayout.marginWidth = 10;\n\t    fileresultgroupLayout.marginHeight = 10;\n\n\t    wFileResult.setLayout(fileresultgroupLayout);\n\t      \n\t      \n\t  \t//Add file to result\n\t\twlAddFileToResult = new Label(wFileResult, SWT.RIGHT);\n\t\twlAddFileToResult.setText(Messages.getString(\"JobCopyFiles.AddFileToResult.Label\"));\n\t\tprops.setLook(wlAddFileToResult);\n\t\tfdlAddFileToResult = new FormData();\n\t\tfdlAddFileToResult.left = new FormAttachment(0, 0);\n\t\tfdlAddFileToResult.top = new FormAttachment(0, margin);\n\t\tfdlAddFileToResult.right = new FormAttachment(middle, -margin);\n\t\twlAddFileToResult.setLayoutData(fdlAddFileToResult);\n\t\twAddFileToResult = new Button(wFileResult, SWT.CHECK);\n\t\tprops.setLook(wAddFileToResult);\n\t\twAddFileToResult.setToolTipText(Messages.getString(\"JobCopyFiles.AddFileToResult.Tooltip\"));\n\t\tfdAddFileToResult = new FormData();\n\t\tfdAddFileToResult.left = new FormAttachment(middle, 0);\n\t\tfdAddFileToResult.top = new FormAttachment(0, margin);\n\t\tfdAddFileToResult.right = new FormAttachment(100, 0);\n\t\twAddFileToResult.setLayoutData(fdAddFileToResult);\n\t\twAddFileToResult.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t      \n\t      \n\t     fdFileResult = new FormData();\n\t     fdFileResult.left = new FormAttachment(0, margin);\n\t     fdFileResult.top = new FormAttachment(0, margin);\n\t     fdFileResult.right = new FormAttachment(100, -margin);\n\t     wFileResult.setLayoutData(fdFileResult);\n\t     // ///////////////////////////////////////////////////////////\n\t     // / END OF FilesRsult GROUP\n\t     // ///////////////////////////////////////////////////////////\n\n\t\t\n \t\t\n \t\t\n \t\t\n\t     fdResultfilesComp = new FormData();\n\t\tfdResultfilesComp.left  = new FormAttachment(0, 0);\n \t\tfdResultfilesComp.top   = new FormAttachment(0, 0);\n \t\tfdResultfilesComp.right = new FormAttachment(100, 0);\n \t\tfdResultfilesComp.bottom= new FormAttachment(100, 0);\n \t\twResultfilesComp.setLayoutData(wResultfilesComp);\n\n \t\twResultfilesComp.layout();\n\t\twResultfilesTab.setControl(wResultfilesComp);\n\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF RESULT FILES TAB\n\t\t/////////////////////////////////////////////////////////////\n \t\t\n \t\t\n \t\t\n\t\tfdTabFolder = new FormData();\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\n\t\tfdTabFolder.top   = new FormAttachment(wName, margin);\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\n\t\twTabFolder.setLayoutData(fdTabFolder);\n\t\t\n\t\t\n\n\t\twOK = new Button(shell, SWT.PUSH);\n\t\twOK.setText(Messages.getString(\"System.Button.OK\"));\n\t\twCancel = new Button(shell, SWT.PUSH);\n\t\twCancel.setText(Messages.getString(\"System.Button.Cancel\"));\n\n\t\tBaseStepDialog.positionBottomButtons(shell, new Button[] { wOK, wCancel }, margin, wTabFolder);\n\t\t\n\n\t\t// Add listeners\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\n\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twName.addSelectionListener( lsDef );\n\t\twSourceFileFolder.addSelectionListener( lsDef );\n\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\n\t\tgetData();\n\t\tCheckIncludeSubFolders();\n\t\twTabFolder.setSelection(0);\n\t\tBaseStepDialog.setSize(shell);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn jobEntry;\n\t}","commit_id":"97bdb3efa41245ffbb7207a9d5c59661d71d72ce","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getXML()\n\t{\n\t\tStringBuffer retval = new StringBuffer(300);\n\t\t\n\t\tretval.append(super.getXML());\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"move_empty_folders\",      move_empty_folders));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"arg_from_previous\",  arg_from_previous));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"overwrite_files\",      overwrite_files));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"include_subfolders\", include_subfolders));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_result_filesname\", add_result_filesname));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"destination_is_a_file\", destination_is_a_file));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"create_destination_folder\", create_destination_folder));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"IgnoreRestOfFiles\", IgnoreRestOfFiles));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_date\", add_date));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_time\", add_time));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"SpecifyFormat\", SpecifyFormat));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"date_time_format\", date_time_format));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"nr_errors_less_than\", nr_errors_less_than));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"success_condition\", success_condition));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"AddDateBeforeExtension\", AddDateBeforeExtension));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"DoNotKeepFolderStructure\", DoNotKeepFolderStructure));\r\n\t\t\n\t\t\n\t\tretval.append(\"      <fields>\").append(Const.CR);\n\t\tif (source_filefolder!=null)\n\t\t{\n\t\t\tfor (int i=0;i<source_filefolder.length;i++)\n\t\t\t{\n\t\t\t\tretval.append(\"        <field>\").append(Const.CR);\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"source_filefolder\",     source_filefolder[i]));\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"destination_filefolder\",     destination_filefolder[i]));\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"wildcard\", wildcard[i]));\n\t\t\t\tretval.append(\"        <\/field>\").append(Const.CR);\n\t\t\t}\n\t\t}\n\t\tretval.append(\"      <\/fields>\").append(Const.CR);\n\t\t\n\t\treturn retval.toString();\n\t}","id":12244,"modified_method":"public String getXML()\n\t{\n\t\tStringBuffer retval = new StringBuffer(300);\n\t\t\n\t\tretval.append(super.getXML());\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"move_empty_folders\",      move_empty_folders));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"arg_from_previous\",  arg_from_previous));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"include_subfolders\", include_subfolders));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_result_filesname\", add_result_filesname));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"destination_is_a_file\", destination_is_a_file));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"create_destination_folder\", create_destination_folder));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"IgnoreRestOfFiles\", IgnoreRestOfFiles));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_date\", add_date));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_time\", add_time));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"SpecifyFormat\", SpecifyFormat));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"date_time_format\", date_time_format));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"nr_errors_less_than\", nr_errors_less_than));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"success_condition\", success_condition));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"AddDateBeforeExtension\", AddDateBeforeExtension));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"DoNotKeepFolderStructure\", DoNotKeepFolderStructure));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"iffileexists\", iffileexists));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"destinationFolder\", destinationFolder));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"ifmovedfileexists\", ifmovedfileexists));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"moved_date_time_format\", moved_date_time_format));\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_moved_date\", add_moved_date));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"add_moved_time\", add_moved_time));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"SpecifyMoveFormat\", SpecifyMoveFormat));\r\n\t\t\r\n\t\t\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"AddMovedDateBeforeExtension\", AddMovedDateBeforeExtension));\r\n\t\t\n\t\t\n\t\tretval.append(\"      <fields>\").append(Const.CR);\n\t\tif (source_filefolder!=null)\n\t\t{\n\t\t\tfor (int i=0;i<source_filefolder.length;i++)\n\t\t\t{\n\t\t\t\tretval.append(\"        <field>\").append(Const.CR);\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"source_filefolder\",     source_filefolder[i]));\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"destination_filefolder\",     destination_filefolder[i]));\n\t\t\t\tretval.append(\"          \").append(XMLHandler.addTagValue(\"wildcard\", wildcard[i]));\n\t\t\t\tretval.append(\"        <\/field>\").append(Const.CR);\n\t\t\t}\n\t\t}\n\t\tretval.append(\"      <\/fields>\").append(Const.CR);\n\t\t\n\t\treturn retval.toString();\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void saveRep(Repository rep, long id_job)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"move_empty_folders\",      move_empty_folders);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"arg_from_previous\",  arg_from_previous);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"overwrite_files\",      overwrite_files);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"include_subfolders\", include_subfolders);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"destination_is_a_file\", destination_is_a_file);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"create_destination_folder\", create_destination_folder);\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"IgnoreRestOfFiles\", IgnoreRestOfFiles);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"nr_errors_less_than\",      nr_errors_less_than);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"success_condition\",      success_condition);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"add_date\", add_date);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"add_time\", add_time);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"SpecifyFormat\", SpecifyFormat);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"date_time_format\",      date_time_format);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"AddDateBeforeExtension\", AddDateBeforeExtension);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"DoNotKeepFolderStructure\", DoNotKeepFolderStructure);\r\n\t\t\t\r\n\t\t\t\n\t\t\t\n\t\t\t// save the arguments...\n\t\t\tif (source_filefolder!=null)\n\t\t\t{\n\t\t\t\tfor (int i=0;i<source_filefolder.length;i++) \n\t\t\t\t{\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"source_filefolder\",     source_filefolder[i]);\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"destination_filefolder\",     destination_filefolder[i]);\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"wildcard\", wildcard[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleException(Messages.getString(\"JobMoveFiles.Error.Exception.UnableSaveRep\")+id_job, dbe);\n\t\t}\n\t}","id":12245,"modified_method":"public void saveRep(Repository rep, long id_job)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"move_empty_folders\",      move_empty_folders);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"arg_from_previous\",  arg_from_previous);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"include_subfolders\", include_subfolders);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"destination_is_a_file\", destination_is_a_file);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"create_destination_folder\", create_destination_folder);\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"IgnoreRestOfFiles\", IgnoreRestOfFiles);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"nr_errors_less_than\",      nr_errors_less_than);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"success_condition\",      success_condition);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"add_date\", add_date);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"add_time\", add_time);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"SpecifyFormat\", SpecifyFormat);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"date_time_format\",      date_time_format);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"AddDateBeforeExtension\", AddDateBeforeExtension);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"DoNotKeepFolderStructure\", DoNotKeepFolderStructure);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"iffileexists\", iffileexists);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"destinationFolder\", destinationFolder);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"ifmovedfileexists\", ifmovedfileexists);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"moved_date_time_format\",      moved_date_time_format);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"add_moved_date\", add_moved_date);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"add_moved_time\", add_moved_time);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"SpecifyMoveFormat\", SpecifyMoveFormat);\r\n\t\t\t\r\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"AddMovedDateBeforeExtension\", AddMovedDateBeforeExtension);\r\n\t\t\t\n\t\t\t// save the arguments...\n\t\t\tif (source_filefolder!=null)\n\t\t\t{\n\t\t\t\tfor (int i=0;i<source_filefolder.length;i++) \n\t\t\t\t{\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"source_filefolder\",     source_filefolder[i]);\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"destination_filefolder\",     destination_filefolder[i]);\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"wildcard\", wildcard[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleException(Messages.getString(\"JobMoveFiles.Error.Exception.UnableSaveRep\")+id_job, dbe);\n\t\t}\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException\n\t  {\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases, slaveServers);\n\t\t\tmove_empty_folders      = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"move_empty_folders\"));\n\t\t\targ_from_previous   = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"arg_from_previous\") );\n\t\t\toverwrite_files      = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"overwrite_files\") );\n\t\t\tinclude_subfolders = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"include_subfolders\") );\n\t\t\tadd_result_filesname = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_result_filesname\") );\n\t\t\tdestination_is_a_file = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"destination_is_a_file\") );\n\t\t\tcreate_destination_folder = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"create_destination_folder\") );\n\t\t\tIgnoreRestOfFiles = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"IgnoreRestOfFiles\") );\r\n\t\t\tadd_date = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_date\"));\r\n\t\t\tadd_time = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_time\"));\r\n\t\t\tSpecifyFormat = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"SpecifyFormat\"));\r\n\t\t\tAddDateBeforeExtension = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"AddDateBeforeExtension\"));\r\n\t\t\tDoNotKeepFolderStructure = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"DoNotKeepFolderStructure\"));\r\n\r\n\t\t\tdate_time_format          = XMLHandler.getTagValue(entrynode, \"date_time_format\");\r\n\t\t\t\r\n\t\t\tnr_errors_less_than          = XMLHandler.getTagValue(entrynode, \"nr_errors_less_than\");\r\n\t\t\tsuccess_condition          = XMLHandler.getTagValue(entrynode, \"success_condition\");\r\n\t\t\t\n\t\t\t\n\t\t\tNode fields = XMLHandler.getSubNode(entrynode, \"fields\");\n\t\t\t\n\t\t\t// How many field arguments?\n\t\t\tint nrFields = XMLHandler.countNodes(fields, \"field\");\t\n\t\t\tsource_filefolder = new String[nrFields];\n\t\t\tdestination_filefolder = new String[nrFields];\n\t\t\twildcard = new String[nrFields];\n\t\t\t\n\t\t\t// Read them all...\n\t\t\tfor (int i = 0; i < nrFields; i++)\n\t\t\t{\n\t\t\t\tNode fnode = XMLHandler.getSubNodeByNr(fields, \"field\", i);\n\t\t\t\t\n\t\t\t\tsource_filefolder[i] = XMLHandler.getTagValue(fnode, \"source_filefolder\");\n\t\t\t\tdestination_filefolder[i] = XMLHandler.getTagValue(fnode, \"destination_filefolder\");\n\t\t\t\twildcard[i] = XMLHandler.getTagValue(fnode, \"wildcard\");\n\t\t\t}\n\t\t}\n\t\n\t\tcatch(KettleXMLException xe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleXMLException(Messages.getString(\"JobMoveFiles.Error.Exception.UnableLoadXML\"), xe);\n\t\t}\n\t}","id":12246,"modified_method":"public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException\n\t  {\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases, slaveServers);\n\t\t\tmove_empty_folders      = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"move_empty_folders\"));\n\t\t\targ_from_previous   = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"arg_from_previous\") );\n\t\t\tinclude_subfolders = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"include_subfolders\") );\n\t\t\tadd_result_filesname = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_result_filesname\") );\n\t\t\tdestination_is_a_file = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"destination_is_a_file\") );\n\t\t\tcreate_destination_folder = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"create_destination_folder\") );\n\t\t\tIgnoreRestOfFiles = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"IgnoreRestOfFiles\") );\r\n\t\t\tadd_date = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_date\"));\r\n\t\t\tadd_time = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_time\"));\r\n\t\t\tSpecifyFormat = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"SpecifyFormat\"));\r\n\t\t\tAddDateBeforeExtension = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"AddDateBeforeExtension\"));\r\n\t\t\tDoNotKeepFolderStructure = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"DoNotKeepFolderStructure\"));\r\n\r\n\t\t\tdate_time_format          = XMLHandler.getTagValue(entrynode, \"date_time_format\");\r\n\t\t\t\r\n\t\t\tnr_errors_less_than          = XMLHandler.getTagValue(entrynode, \"nr_errors_less_than\");\r\n\t\t\tsuccess_condition          = XMLHandler.getTagValue(entrynode, \"success_condition\");\r\n\t\t\tiffileexists          = XMLHandler.getTagValue(entrynode, \"iffileexists\");\r\n\t\t\tdestinationFolder          = XMLHandler.getTagValue(entrynode, \"destinationFolder\");\r\n\t\t\tifmovedfileexists          = XMLHandler.getTagValue(entrynode, \"ifmovedfileexists\");\r\n\t\t\tmoved_date_time_format          = XMLHandler.getTagValue(entrynode, \"moved_date_time_format\");\r\n\t\t\tAddMovedDateBeforeExtension = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"AddMovedDateBeforeExtension\"));\r\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tadd_moved_date = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_moved_date\"));\r\n\t\t\tadd_moved_time = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"add_moved_time\"));\r\n\t\t\tSpecifyMoveFormat = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"SpecifyMoveFormat\"));\r\n\t\t\t\r\n\t\t\t\n\t\t\tNode fields = XMLHandler.getSubNode(entrynode, \"fields\");\n\t\t\t\n\t\t\t// How many field arguments?\n\t\t\tint nrFields = XMLHandler.countNodes(fields, \"field\");\t\n\t\t\tsource_filefolder = new String[nrFields];\n\t\t\tdestination_filefolder = new String[nrFields];\n\t\t\twildcard = new String[nrFields];\n\t\t\t\n\t\t\t// Read them all...\n\t\t\tfor (int i = 0; i < nrFields; i++)\n\t\t\t{\n\t\t\t\tNode fnode = XMLHandler.getSubNodeByNr(fields, \"field\", i);\n\t\t\t\t\n\t\t\t\tsource_filefolder[i] = XMLHandler.getTagValue(fnode, \"source_filefolder\");\n\t\t\t\tdestination_filefolder[i] = XMLHandler.getTagValue(fnode, \"destination_filefolder\");\n\t\t\t\twildcard[i] = XMLHandler.getTagValue(fnode, \"wildcard\");\n\t\t\t}\n\t\t}\n\t\n\t\tcatch(KettleXMLException xe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleXMLException(Messages.getString(\"JobMoveFiles.Error.Exception.UnableLoadXML\"), xe);\n\t\t}\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public Result execute(Result previousResult, int nr, Repository rep, Job parentJob) throws KettleException \n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\t\tResult result = previousResult;\n\n\t    List<RowMetaAndData> rows = result.getRows();\n\t    RowMetaAndData resultRow = null;\n\t\t\n\t    NrErrors=0;\r\n\t\tDoNotProcessRest=false;\r\n\t\t\n\t\t// Get source and destination files, also wildcard\n\t\tString vsourcefilefolder[] = source_filefolder;\n\t\tString vdestinationfilefolder[] = destination_filefolder;\n\t\tString vwildcard[] = wildcard;\n\t\t\n\t\tresult.setResult( true );\n\t\t\n\t\t\t\n\t\tif (arg_from_previous)\n\t\t{\n\t\t\tif (log.isDetailed())\r\n\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.ArgFromPrevious.Found\",(rows!=null?rows.size():0)+ \"\"));\n\t\t\t\n\t\t}\n\t\tif (arg_from_previous && rows!=null) // Copy the input row to the (command line) arguments\n\t\t{\n\t\t\tfor (int iteration=0;iteration<rows.size();iteration++) \n\t\t\t{\n\t\t\t\n\t\t\t\tresultRow = rows.get(iteration);\n\t\t\t\n\t\t\t\t// Get source and destination file names, also wildcard\n\t\t\t\tString vsourcefilefolder_previous = resultRow.getString(0,null);\n\t\t\t\tString vdestinationfilefolder_previous = resultRow.getString(1,null);\n\t\t\t\tString vwildcard_previous = resultRow.getString(2,null);\n\n\t\t\t\tif(!Const.isEmpty(vsourcefilefolder_previous) &&  !Const.isEmpty(vdestinationfilefolder_previous))\n\t\t\t\t{\n\t\t\t\t\tif(!DoNotProcessRest)\r\n\t           \t\t{\n\t\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.ProcessingRow\",vsourcefilefolder_previous, vdestinationfilefolder_previous, vwildcard_previous));\n\n\t\t\t\t\t\tif(! ProcessFileFolder(vsourcefilefolder_previous,vdestinationfilefolder_previous,vwildcard_previous,parentJob,result))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The move process fail\n\t\t\t\t\t\t\t// Update Errors\r\n\t\t\t\t\t\t\tupdateErrors();\n\t\t\t\t\t\t}\r\n\t           \t\t}else\r\n\t           \t\t{\r\n\t           \t\t\tif(log.isDetailed()) \r\n\t           \t\t\t\tlog.logDetailed(toString(),Messages.getString(\"JobEntryMoveFiles.log.IgnoringFile\",vsourcefilefolder_previous));\r\n\t           \t\r\n\t           \t\t}\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t \n\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.IgnoringRow\",vsourcefilefolder[iteration],vdestinationfilefolder[iteration],vwildcard[iteration]));\n\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (vsourcefilefolder!=null && vdestinationfilefolder!=null)\n\t\t{\n\t\t\tfor (int i=0;i<vsourcefilefolder.length;i++)\n\t\t\t{\n\t\t\t\tif(!Const.isEmpty(vsourcefilefolder[i]) && !Const.isEmpty(vdestinationfilefolder[i]))\n\t\t\t\t{\n\n\t\t\t\t\t// ok we can process this file/folder\n\t\t\t\t\tif(!DoNotProcessRest)\r\n\t           \t\t{\n\t\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.ProcessingRow\",vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i]));\n\t\t\t\t\t\n\t\t\t\t\t\tif(!ProcessFileFolder(vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i],parentJob,result))\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Update Errors\r\n\t\t\t\t\t\t\tupdateErrors();\n\t\t\t\t\t\t}\r\n\t           \t\t}else\r\n\t           \t\t{\r\n\t           \t\t\tif(log.isDetailed()) log.logDetailed(toString(),Messages.getString(\"JobEntryMoveFiles.log.IgnoringFile\",vsourcefilefolder[i]));\r\n\t           \t\r\n\t           \t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\t\t\n\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.IgnoringRow\",vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i]));\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\r\n\t\t\n\t\t// Success Condition\r\n\t\tif (getStatus())\r\n\t\t{\r\n\t\t\tresult.setResult( false );\r\n\t\t\tresult.setNrErrors(NrErrors);\t\r\n\t\t}else\r\n\t\t\tresult.setResult(true);\r\n\t\t\n\n\t\t\n\t\treturn result;\n\t}","id":12247,"modified_method":"public Result execute(Result previousResult, int nr, Repository rep, Job parentJob) throws KettleException \n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\t\tResult result = previousResult;\n\n\t    List<RowMetaAndData> rows = result.getRows();\n\t    RowMetaAndData resultRow = null;\n\t\t\n\t    NrErrors=0;\r\n\t\tDoNotProcessRest=false;\r\n\t\t\r\n\t\tString MoveToFolder=environmentSubstitute(destinationFolder);\n\t\t// Get source and destination files, also wildcard\n\t\tString vsourcefilefolder[] = source_filefolder;\n\t\tString vdestinationfilefolder[] = destination_filefolder;\n\t\tString vwildcard[] = wildcard;\n\t\t\n\t\tresult.setResult( true );\n\t\t\r\n\t\tif(iffileexists.equals(\"move_file\"))\r\n\t\t{\r\n\t\t\tif(Const.isEmpty(MoveToFolder))\r\n\t\t\t{\r\n\t\t\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Log.Error.MoveToFolderMissing\"));\r\n\t\t\t\tresult.setResult( false );\r\n\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\treturn result;\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t FileObject folder = null;\r\n\t\t\t try{\r\n\t\t\t\t folder = KettleVFS.getFileObject(MoveToFolder);\r\n\t\t\t\t if(!folder.exists())\r\n\t\t\t\t {\r\n\t\t\t\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Log.Error.FolderMissing\",MoveToFolder));\r\n\t\t\t\t\tresult.setResult( false );\r\n\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\treturn result; \r\n\t\t\t\t }\r\n\t\t\t\t if(!folder.getType().equals(FileType.FOLDER))\r\n\t\t\t\t {\r\n\t\t\t\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Log.Error.NotFolder\",MoveToFolder));\r\n\t\t\t\t\tresult.setResult( false );\r\n\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\treturn result; \r\n\t\t\t\t }\r\n\t\t\t }catch (Exception e)\r\n\t\t\t {\r\n\t\t\t\t log.logError(toString(), Messages.getString(\"JobMoveFiles.Log.Error.GettingMoveToFolder\",MoveToFolder,e.getMessage()));\r\n\t\t\t\t result.setResult( false );\r\n\t\t\t\t result.setNrErrors(1);\r\n\t\t\t\t return result; \r\n\t\t\t }finally{\r\n\t\t\t\t if ( folder != null )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry  \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfolder.close();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch ( IOException ex ) {};\r\n\t\t\t\t\t} \r\n\t\t\t }\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\n\t\t\t\n\t\tif (arg_from_previous)\n\t\t{\n\t\t\tif (log.isDetailed())\r\n\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.ArgFromPrevious.Found\",(rows!=null?rows.size():0)+ \"\"));\n\t\t\t\n\t\t}\n\t\tif (arg_from_previous && rows!=null) // Copy the input row to the (command line) arguments\n\t\t{\n\t\t\tfor (int iteration=0;iteration<rows.size();iteration++) \n\t\t\t{\n\t\t\t\n\t\t\t\tresultRow = rows.get(iteration);\n\t\t\t\n\t\t\t\t// Get source and destination file names, also wildcard\n\t\t\t\tString vsourcefilefolder_previous = resultRow.getString(0,null);\n\t\t\t\tString vdestinationfilefolder_previous = resultRow.getString(1,null);\n\t\t\t\tString vwildcard_previous = resultRow.getString(2,null);\n\n\t\t\t\tif(!Const.isEmpty(vsourcefilefolder_previous) &&  !Const.isEmpty(vdestinationfilefolder_previous))\n\t\t\t\t{\n\t\t\t\t\tif(!DoNotProcessRest)\r\n\t           \t\t{\n\t\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.ProcessingRow\",vsourcefilefolder_previous, vdestinationfilefolder_previous, vwildcard_previous));\n\n\t\t\t\t\t\tif(! ProcessFileFolder(vsourcefilefolder_previous,vdestinationfilefolder_previous,vwildcard_previous,parentJob,result,MoveToFolder))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The move process fail\n\t\t\t\t\t\t\t// Update Errors\r\n\t\t\t\t\t\t\tupdateErrors();\n\t\t\t\t\t\t}\r\n\t           \t\t}else\r\n\t           \t\t{\r\n\t           \t\t\tif(log.isDetailed()) \r\n\t           \t\t\t\tlog.logDetailed(toString(),Messages.getString(\"JobEntryMoveFiles.log.IgnoringFile\",vsourcefilefolder_previous));\r\n\t           \t\r\n\t           \t\t}\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t \n\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.IgnoringRow\",vsourcefilefolder[iteration],vdestinationfilefolder[iteration],vwildcard[iteration]));\n\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (vsourcefilefolder!=null && vdestinationfilefolder!=null)\n\t\t{\n\t\t\tfor (int i=0;i<vsourcefilefolder.length;i++)\n\t\t\t{\n\t\t\t\tif(!Const.isEmpty(vsourcefilefolder[i]) && !Const.isEmpty(vdestinationfilefolder[i]))\n\t\t\t\t{\n\n\t\t\t\t\t// ok we can process this file/folder\n\t\t\t\t\tif(!DoNotProcessRest)\r\n\t           \t\t{\n\t\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.ProcessingRow\",vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i]));\n\t\t\t\t\t\n\t\t\t\t\t\tif(!ProcessFileFolder(vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i],parentJob,result,MoveToFolder))\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Update Errors\r\n\t\t\t\t\t\t\tupdateErrors();\n\t\t\t\t\t\t}\r\n\t           \t\t}else\r\n\t           \t\t{\r\n\t           \t\t\tif(log.isDetailed()) log.logDetailed(toString(),Messages.getString(\"JobEntryMoveFiles.log.IgnoringFile\",vsourcefilefolder[i]));\r\n\t           \t\r\n\t           \t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\t\t\n\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.IgnoringRow\",vsourcefilefolder[i],vdestinationfilefolder[i],vwildcard[i]));\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\r\n\t\t\n\t\t// Success Condition\r\n\t\tif (getStatus())\r\n\t\t{\r\n\t\t\tresult.setResult( false );\r\n\t\t\tresult.setNrErrors(NrErrors);\t\r\n\t\t}else\r\n\t\t\tresult.setResult(true);\r\n\t\t\n\n\t\t\n\t\treturn result;\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public JobEntryMoveFiles(String n)\n\t{\n\t\tsuper(n, \"\");\r\n\t\tDoNotKeepFolderStructure=false;\n\t\tmove_empty_folders=true;\n\t\targ_from_previous=false;\n\t\tsource_filefolder=null;\n\t\tdestination_filefolder=null;\n\t\twildcard=null;\n\t\toverwrite_files=false;\n\t\tinclude_subfolders=false;\n\t\tadd_result_filesname=false;\n\t\tdestination_is_a_file=false;\n\t\tcreate_destination_folder=false;\r\n\t\tIgnoreRestOfFiles=false;\r\n\t\tnr_errors_less_than=\"10\";\r\n\t\tsuccess_condition=\"success_when_all_works_fine\";\r\n\t\tadd_date=false;\r\n\t\tadd_time=false;\r\n\t\tSpecifyFormat=false;\r\n\t\tdate_time_format=null;\r\n\t\tAddDateBeforeExtension=false;\n\t\tsetID(-1L);\n\t\tsetJobEntryType(JobEntryType.MOVE_FILES);\n\t}","id":12248,"modified_method":"public JobEntryMoveFiles(String n)\n\t{\n\t\tsuper(n, \"\");\r\n\t\tSpecifyMoveFormat=false;\r\n\t\tadd_moved_date=false;\r\n\t\tadd_moved_time=false;\r\n\t\tAddMovedDateBeforeExtension=false;\r\n\t\tmoved_date_time_format=null;\r\n\t\tifmovedfileexists=\"do_nothing\";\r\n\t\tdestinationFolder=null;\r\n\t\tDoNotKeepFolderStructure=false;\n\t\tmove_empty_folders=true;\n\t\targ_from_previous=false;\n\t\tsource_filefolder=null;\n\t\tdestination_filefolder=null;\n\t\twildcard=null;\n\t\tinclude_subfolders=false;\n\t\tadd_result_filesname=false;\n\t\tdestination_is_a_file=false;\n\t\tcreate_destination_folder=false;\r\n\t\tIgnoreRestOfFiles=false;\r\n\t\tnr_errors_less_than=\"10\";\r\n\t\tsuccess_condition=\"success_when_all_works_fine\";\r\n\t\tadd_date=false;\r\n\t\tadd_time=false;\r\n\t\tSpecifyFormat=false;\r\n\t\tdate_time_format=null;\r\n\t\tAddDateBeforeExtension=false;\r\n\t\tiffileexists=\"do_nothing\";\n\t\tsetID(-1L);\n\t\tsetJobEntryType(JobEntryType.MOVE_FILES);\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadRep(Repository rep, long id_jobentry, List<DatabaseMeta> databases, List<SlaveServer> slaveServers) throws KettleException\n\t  {\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases, slaveServers);\n\t\t\tmove_empty_folders      = rep.getJobEntryAttributeBoolean(id_jobentry, \"move_empty_folders\");\n\t\t\targ_from_previous   = rep.getJobEntryAttributeBoolean(id_jobentry, \"arg_from_previous\");\n\t\t\toverwrite_files      = rep.getJobEntryAttributeBoolean(id_jobentry, \"overwrite_files\");\n\t\t\tinclude_subfolders = rep.getJobEntryAttributeBoolean(id_jobentry, \"include_subfolders\");\n\n\t\t\tadd_result_filesname = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_result_filesname\");\n\t\t\tdestination_is_a_file = rep.getJobEntryAttributeBoolean(id_jobentry, \"destination_is_a_file\");\n\t\t\tcreate_destination_folder = rep.getJobEntryAttributeBoolean(id_jobentry, \"create_destination_folder\");\n\t\t\tIgnoreRestOfFiles = rep.getJobEntryAttributeBoolean(id_jobentry, \"IgnoreRestOfFiles\");\r\n\t\t\t\n\t\t\tnr_errors_less_than  = rep.getJobEntryAttributeString(id_jobentry, \"nr_errors_less_than\");\r\n\t\t\tsuccess_condition  = rep.getJobEntryAttributeString(id_jobentry, \"success_condition\");\r\n\t\t\tadd_date = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_date\"); \r\n\t\t\tadd_time = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_time\"); \r\n\t\t\tSpecifyFormat = rep.getJobEntryAttributeBoolean(id_jobentry, \"SpecifyFormat\"); \r\n\t\t\tdate_time_format  = rep.getJobEntryAttributeString(id_jobentry, \"date_time_format\");\r\n\t\t\tAddDateBeforeExtension = rep.getJobEntryAttributeBoolean(id_jobentry, \"AddDateBeforeExtension\");\r\n\t\t\tDoNotKeepFolderStructure = rep.getJobEntryAttributeBoolean(id_jobentry, \"DoNotKeepFolderStructure\");\r\n\t\t\t\n\t\t\t\n\t\t\t// How many arguments?\n\t\t\tint argnr = rep.countNrJobEntryAttributes(id_jobentry, \"source_filefolder\");\n\t\t\tsource_filefolder = new String[argnr];\n\t\t\tdestination_filefolder = new String[argnr];\n\t\t\twildcard = new String[argnr];\n\t\t\t\n\t\t\t// Read them all...\n\t\t\tfor (int a=0;a<argnr;a++) \n\t\t\t{\n\t\t\t\tsource_filefolder[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"source_filefolder\");\n\t\t\t\tdestination_filefolder[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"destination_filefolder\");\n\t\t\t\twildcard[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"wildcard\");\n\t\t\t}\n\t\t}\n\t\tcatch(KettleException dbe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleException(Messages.getString(\"JobMoveFiles.Error.Exception.UnableLoadRep\")+id_jobentry, dbe);\n\t\t}\n\t}","id":12249,"modified_method":"public void loadRep(Repository rep, long id_jobentry, List<DatabaseMeta> databases, List<SlaveServer> slaveServers) throws KettleException\n\t  {\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases, slaveServers);\n\t\t\tmove_empty_folders      = rep.getJobEntryAttributeBoolean(id_jobentry, \"move_empty_folders\");\n\t\t\targ_from_previous   = rep.getJobEntryAttributeBoolean(id_jobentry, \"arg_from_previous\");\n\t\t\tinclude_subfolders = rep.getJobEntryAttributeBoolean(id_jobentry, \"include_subfolders\");\n\n\t\t\tadd_result_filesname = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_result_filesname\");\n\t\t\tdestination_is_a_file = rep.getJobEntryAttributeBoolean(id_jobentry, \"destination_is_a_file\");\n\t\t\tcreate_destination_folder = rep.getJobEntryAttributeBoolean(id_jobentry, \"create_destination_folder\");\n\t\t\tIgnoreRestOfFiles = rep.getJobEntryAttributeBoolean(id_jobentry, \"IgnoreRestOfFiles\");\r\n\t\t\t\n\t\t\tnr_errors_less_than  = rep.getJobEntryAttributeString(id_jobentry, \"nr_errors_less_than\");\r\n\t\t\tsuccess_condition  = rep.getJobEntryAttributeString(id_jobentry, \"success_condition\");\r\n\t\t\tadd_date = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_date\"); \r\n\t\t\tadd_time = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_time\"); \r\n\t\t\tSpecifyFormat = rep.getJobEntryAttributeBoolean(id_jobentry, \"SpecifyFormat\"); \r\n\t\t\tdate_time_format  = rep.getJobEntryAttributeString(id_jobentry, \"date_time_format\");\r\n\t\t\tAddDateBeforeExtension = rep.getJobEntryAttributeBoolean(id_jobentry, \"AddDateBeforeExtension\");\r\n\t\t\tDoNotKeepFolderStructure = rep.getJobEntryAttributeBoolean(id_jobentry, \"DoNotKeepFolderStructure\");\r\n\t\t\tiffileexists  = rep.getJobEntryAttributeString(id_jobentry, \"iffileexists\");\n\t\t\tdestinationFolder  = rep.getJobEntryAttributeString(id_jobentry, \"destinationFolder\");\r\n\t\t\tifmovedfileexists  = rep.getJobEntryAttributeString(id_jobentry, \"ifmovedfileexists\");\r\n\t\t\tmoved_date_time_format  = rep.getJobEntryAttributeString(id_jobentry, \"moved_date_time_format\");\r\n\t\t\t\r\n\t\t\tAddMovedDateBeforeExtension = rep.getJobEntryAttributeBoolean(id_jobentry, \"AddMovedDateBeforeExtension\");\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tadd_moved_date = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_moved_date\"); \r\n\t\t\tadd_moved_time = rep.getJobEntryAttributeBoolean(id_jobentry, \"add_moved_time\"); \r\n\t\t\tSpecifyMoveFormat = rep.getJobEntryAttributeBoolean(id_jobentry, \"SpecifyMoveFormat\"); \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\n\t\t\t// How many arguments?\n\t\t\tint argnr = rep.countNrJobEntryAttributes(id_jobentry, \"source_filefolder\");\n\t\t\tsource_filefolder = new String[argnr];\n\t\t\tdestination_filefolder = new String[argnr];\n\t\t\twildcard = new String[argnr];\n\t\t\t\n\t\t\t// Read them all...\n\t\t\tfor (int a=0;a<argnr;a++) \n\t\t\t{\n\t\t\t\tsource_filefolder[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"source_filefolder\");\n\t\t\t\tdestination_filefolder[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"destination_filefolder\");\n\t\t\t\twildcard[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"wildcard\");\n\t\t\t}\n\t\t}\n\t\tcatch(KettleException dbe)\n\t\t{\n\t\t\t\n\t\t\tthrow new KettleException(Messages.getString(\"JobMoveFiles.Error.Exception.UnableLoadRep\")+id_jobentry, dbe);\n\t\t}\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private boolean ProcessFileFolder(String sourcefilefoldername,String destinationfilefoldername,String wildcard,Job parentJob,Result result)\n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\t\tboolean entrystatus = false ;\n\t\tFileObject sourcefilefolder = null;\n\t\tFileObject destinationfilefolder = null;\r\n\t\tFileObject Currentfile =null;\n\t\t\n\t\t// Get real source, destination file and wilcard\n\t\tString realSourceFilefoldername = environmentSubstitute(sourcefilefoldername);\n\t\tString realDestinationFilefoldername = environmentSubstitute(destinationfilefoldername);\n\t\tString realWildcard=environmentSubstitute(wildcard);\n\n\t\ttry\n\t\t{\n\t\t\t\n\t\t     // Here gc() is explicitly called if e.g. createfile is used in the same\n\t\t     // job for the same file. The problem is that after creating the file the\n\t\t     // file object is not properly garbaged collected and thus the file cannot\n\t\t     // be deleted anymore. This is a known problem in the JVM.\n\n\t\t     System.gc();\n\t\t      \n\t\t\tsourcefilefolder = KettleVFS.getFileObject(realSourceFilefoldername);\n\t\t\tdestinationfilefolder = KettleVFS.getFileObject(realDestinationFilefoldername);\n\t\t\t\n\t\t\tif (sourcefilefolder.exists())\n\t\t\t{\n\t\t\t\n\t\t\t\t// Check if destination folder/parent folder exists !\n\t\t\t\t// If user wanted and if destination folder does not exist\n\t\t\t\t// PDI will create it\n\t\t\t\tif(CreateDestinationFolder(destinationfilefolder))\n\t\t\t\t{\n\n\t\t\t\t\t// Basic Tests\n\t\t\t\t\tif (sourcefilefolder.getType().equals(FileType.FOLDER) && destination_is_a_file)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Source is a folder, destination is a file\n\t\t\t\t\t\t// WARNING !!! CAN NOT MOVE FOLDER TO FILE !!!\n\t\t\t\t\t\t\n\t\t\t\t\t\tlog.logError(Messages.getString(\"JobMoveFiles.Log.Forbidden\"), Messages.getString(\"JobMoveFiles.Log.CanNotMoveFolderToFile\",realSourceFilefoldername,realDestinationFilefoldername));\t\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Update Errors\n\t\t\t\t\t\tupdateErrors();\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif (destinationfilefolder.getType().equals(FileType.FOLDER) && sourcefilefolder.getType().equals(FileType.FILE) )\n\t\t\t\t\t\t{\t\t\t\t\n\t\t\t\t\t\t\t// Source is a file, destination is a folder\r\n\t\t\t\t\t\t\t// return destination short filename\r\n\t\t\t\t\t\t\tString shortfilename=sourcefilefolder.getName().getBaseName();\r\n\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t shortfilename=getDestinationFilename(sourcefilefolder.getName().getBaseName());\r\n\t\t\t\t\t\t\t}catch (Exception e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlog.logError(toString(), Messages.getString(Messages.getString(\"JobMoveFiles.Error.GettingFilename\",sourcefilefolder.getName().getBaseName(),e.toString())));\r\n\t\t\t\t\t\t\t\treturn entrystatus;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Move the file to the destination folder\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tString destinationfilenamefull=destinationfilefolder.toString()+Const.FILE_SEPARATOR+shortfilename;\r\n\t\t\t\t\t\t\tFileObject destinationfile= KettleVFS.getFileObject(destinationfilenamefull);\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsourcefilefolder.moveTo(destinationfile);\r\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileMoved\",sourcefilefolder.getName().toString(),destinationfile.getName().toString()));\n\t\t\t\t\t\t\t// add filename to result filename\r\n\t\t\t\t\t\t\tif(add_result_filesname) addFileToResultFilenames(destinationfile.toString(),log,result,parentJob);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sourcefilefolder.getType().equals(FileType.FILE) && destination_is_a_file)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Source is a file, destination is a file\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tFileObject destinationfile= KettleVFS.getFileObject(realDestinationFilefoldername);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// return destination short filename\r\n\t\t\t\t\t\t\tString shortfilename=destinationfile.getName().getBaseName();\r\n\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t shortfilename=getDestinationFilename(destinationfile.getName().getBaseName());\r\n\t\t\t\t\t\t\t}catch (Exception e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlog.logError(toString(), Messages.getString(Messages.getString(\"JobMoveFiles.Error.GettingFilename\",sourcefilefolder.getName().getBaseName(),e.toString())));\r\n\t\t\t\t\t\t\t\treturn entrystatus;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tString destinationfilenamefull=destinationfilefolder.getParent().toString()+Const.FILE_SEPARATOR+shortfilename;\r\n\t\t\t\t\t\t\tdestinationfile= KettleVFS.getFileObject(destinationfilenamefull);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsourcefilefolder.moveTo(destinationfile);\r\n\t\t\t\t\t\t\tif(log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileMoved\",sourcefilefolder.getName().toString(),destinationfile.getName().toString()));\r\n\t\t\t\t\t\t\t// add filename to result filename\r\n\t\t\t\t\t\t\tif(add_result_filesname) addFileToResultFilenames(destinationfile.toString(),log,result,parentJob);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Both source and destination are folders\n\t\t\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlog.logDetailed(toString(),\"  \");\r\n\t\t\t\t\t\t\t\tlog.logDetailed(toString(),Messages.getString(\"JobMoveFiles.Log.FetchFolder\",sourcefilefolder.toString()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tFileObject[] fileObjects = sourcefilefolder.findFiles(\r\n\t                                new AllFileSelector() \r\n\t                                {\t\r\n\t                                    public boolean traverseDescendents(FileSelectInfo info)\r\n\t                                    {\r\n\t                                        return true;\r\n\t                                    }\r\n\t                                    \r\n\t                                    public boolean includeFile(FileSelectInfo info)\r\n\t                                    {\r\n\t                                    \r\n\t                                    \tFileObject fileObject = info.getFile();\r\n\t                                    \ttry {\r\n\t                                    \t    if ( fileObject == null) return false;\r\n\t                                    \t}\r\n\t                                    \tcatch (Exception ex)\r\n\t                                    \t{\r\n\t                                    \t\t// Upon error don't process the file.\r\n\t                                    \t\treturn false;\r\n\t                                    \t}\r\n\t                                    \t\r\n\t                                    \tfinally \r\n\t                                \t\t{\r\n\t                                \t\t\tif ( fileObject != null )\r\n\t                                \t\t\t{\r\n\t                                \t\t\t\ttry  {fileObject.close();} catch ( IOException ex ) {};\r\n\t                                \t\t\t}\r\n\t           \r\n\t                                \t\t}\r\n\t                                    \treturn true;\r\n\t                                    }\r\n\t                                }\r\n\t                            );\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (fileObjects != null) \r\n\t                        {\r\n\t                            for (int j = 0; j < fileObjects.length; j++)\r\n\t                            {\r\n\t                            \t// Fetch files list one after one ...\r\n\t                                Currentfile=fileObjects[j];\r\n\t                                if(!DoNotProcessRest)\r\n\t    \t\t\t           \t\t{\r\n\t\t                                if(!MoveOneFile(Currentfile, sourcefilefolder,realDestinationFilefoldername, \r\n\t\t                \t\t\t\t\t\trealWildcard,log,parentJob,result))\r\n\t\t                                {\r\n\t\t                                \t// Update Errors\r\n\t\t        \t\t\t\t\t\t\tupdateErrors();\r\n\t\t                                }\r\n\t    \t\t\t           \t\t}else\r\n\t    \t\t\t           \t\t{\r\n\t    \t\t\t           \t\t\tif(log.isDetailed()) log.logDetailed(toString(),Messages.getString(\"JobEntryMoveFiles.log.IgnoringFile\",Currentfile.toString()));\r\n\t    \t\t\t           \t\r\n\t    \t\t\t           \t\t}\r\n\t                            }\n\t                        }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tentrystatus = true ;\n\t\t\t\t} // end if\t\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Destination Folder or Parent folder is missing\n\t\t\t\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Error.DestinationFolderNotFound\",realDestinationFilefoldername));\t\t\t\t\t\n\t\t\t\t\t\r\n\t\t\t\t\t// Update Errors\r\n\t\t\t\t\tupdateErrors();\n\t\t\t\t}\t\n\t\t\t} // end if\n\t\t\telse\n\t\t\t{\t\n\t\t\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Error.SourceFileNotExists\",realSourceFilefoldername));\t\t\t\t\t\n\t\t\t\t\r\n\t\t\t\t// Update Errors\r\n\t\t\t\tupdateErrors();\n\t\t\t}\n\t\t} // end try\n\t\n\t\tcatch (IOException e) \n\t\t{\n\n\t\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Error.Exception.MoveProcess\",realSourceFilefoldername.toString(),destinationfilefolder.toString(), e.getMessage()));\t\t\t\t\t\n\t\t\t// Update Errors\r\n\t\t\tupdateErrors();\r\n\t\t}\n\t\tfinally \n\t\t{\n\t\t\tif ( sourcefilefolder != null )\n\t\t\t{\n\t\t\t\ttry  \n\t\t\t\t{\n\t\t\t\t\tsourcefilefolder.close();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\n\t\t\tif ( destinationfilefolder != null )\n\t\t\t{\n\t\t\t\ttry  \n\t\t\t\t{\n\t\t\t\t\tdestinationfilefolder.close();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\r\n\t\t\tif ( Currentfile != null )\r\n\t\t\t{\r\n\t\t\t\ttry  \r\n\t\t\t\t{\r\n\t\t\t\t\tCurrentfile.close();\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tcatch ( IOException ex ) {};\r\n\t\t\t}\n\t\t}\n\n\t\treturn entrystatus;\n\t}","id":12250,"modified_method":"private boolean ProcessFileFolder(String sourcefilefoldername,String destinationfilefoldername,String wildcard,Job parentJob,Result result,String MoveToFolder)\n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\t\tboolean entrystatus = false ;\n\t\tFileObject sourcefilefolder = null;\n\t\tFileObject destinationfilefolder = null;\r\n\t\tFileObject movetofolderfolder = null;\r\n\t\tFileObject Currentfile =null;\n\t\t\n\t\t// Get real source, destination file and wilcard\n\t\tString realSourceFilefoldername = environmentSubstitute(sourcefilefoldername);\n\t\tString realDestinationFilefoldername = environmentSubstitute(destinationfilefoldername);\n\t\tString realWildcard=environmentSubstitute(wildcard);\n\n\t\ttry\n\t\t{\n\t\t\t\n\t\t     // Here gc() is explicitly called if e.g. createfile is used in the same\n\t\t     // job for the same file. The problem is that after creating the file the\n\t\t     // file object is not properly garbaged collected and thus the file cannot\n\t\t     // be deleted anymore. This is a known problem in the JVM.\n\n\t\t     System.gc();\n\t\t      \n\t\t\tsourcefilefolder = KettleVFS.getFileObject(realSourceFilefoldername);\n\t\t\tdestinationfilefolder = KettleVFS.getFileObject(realDestinationFilefoldername);\r\n\t\t\tmovetofolderfolder   =KettleVFS.getFileObject(MoveToFolder);\n\t\t\t\n\t\t\tif (sourcefilefolder.exists())\n\t\t\t{\n\t\t\t\n\t\t\t\t// Check if destination folder/parent folder exists !\n\t\t\t\t// If user wanted and if destination folder does not exist\n\t\t\t\t// PDI will create it\n\t\t\t\tif(CreateDestinationFolder(destinationfilefolder))\n\t\t\t\t{\n\n\t\t\t\t\t// Basic Tests\n\t\t\t\t\tif (sourcefilefolder.getType().equals(FileType.FOLDER) && destination_is_a_file)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Source is a folder, destination is a file\n\t\t\t\t\t\t// WARNING !!! CAN NOT MOVE FOLDER TO FILE !!!\n\t\t\t\t\t\t\n\t\t\t\t\t\tlog.logError(Messages.getString(\"JobMoveFiles.Log.Forbidden\"), Messages.getString(\"JobMoveFiles.Log.CanNotMoveFolderToFile\",realSourceFilefoldername,realDestinationFilefoldername));\t\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Update Errors\n\t\t\t\t\t\tupdateErrors();\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif (destinationfilefolder.getType().equals(FileType.FOLDER) && sourcefilefolder.getType().equals(FileType.FILE) )\n\t\t\t\t\t\t{\t\t\t\t\n\t\t\t\t\t\t\t// Source is a file, destination is a folder\r\n\t\t\t\t\t\t\t// return destination short filename\r\n\t\t\t\t\t\t\tString shortfilename=sourcefilefolder.getName().getBaseName();\r\n\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t shortfilename=getDestinationFilename(sourcefilefolder.getName().getBaseName());\r\n\t\t\t\t\t\t\t}catch (Exception e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlog.logError(toString(), Messages.getString(Messages.getString(\"JobMoveFiles.Error.GettingFilename\",sourcefilefolder.getName().getBaseName(),e.toString())));\r\n\t\t\t\t\t\t\t\treturn entrystatus;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// Move the file to the destination folder\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tString destinationfilenamefull=destinationfilefolder.toString()+Const.FILE_SEPARATOR+shortfilename;\r\n\t\t\t\t\t\t\tFileObject destinationfile= KettleVFS.getFileObject(destinationfilenamefull);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tentrystatus=MoveFile(shortfilename,sourcefilefolder,destinationfile,movetofolderfolder,log,parentJob,result);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sourcefilefolder.getType().equals(FileType.FILE) && destination_is_a_file)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Source is a file, destination is a file\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tFileObject destinationfile= KettleVFS.getFileObject(realDestinationFilefoldername);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// return destination short filename\r\n\t\t\t\t\t\t\tString shortfilename=destinationfile.getName().getBaseName();\r\n\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t shortfilename=getDestinationFilename(destinationfile.getName().getBaseName());\r\n\t\t\t\t\t\t\t}catch (Exception e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlog.logError(toString(), Messages.getString(Messages.getString(\"JobMoveFiles.Error.GettingFilename\",sourcefilefolder.getName().getBaseName(),e.toString())));\r\n\t\t\t\t\t\t\t\treturn entrystatus;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tString destinationfilenamefull=destinationfilefolder.getParent().toString()+Const.FILE_SEPARATOR+shortfilename;\r\n\t\t\t\t\t\t\tdestinationfile= KettleVFS.getFileObject(destinationfilenamefull);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tentrystatus=MoveFile(shortfilename,sourcefilefolder,destinationfile,movetofolderfolder,log,parentJob,result);\r\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Both source and destination are folders\n\t\t\t\t\t\t\tif(log.isDetailed())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlog.logDetailed(toString(),\"  \");\r\n\t\t\t\t\t\t\t\tlog.logDetailed(toString(),Messages.getString(\"JobMoveFiles.Log.FetchFolder\",sourcefilefolder.toString()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tFileObject[] fileObjects = sourcefilefolder.findFiles(\r\n\t                                new AllFileSelector() \r\n\t                                {\t\r\n\t                                    public boolean traverseDescendents(FileSelectInfo info)\r\n\t                                    {\r\n\t                                        return true;\r\n\t                                    }\r\n\t                                    \r\n\t                                    public boolean includeFile(FileSelectInfo info)\r\n\t                                    {\r\n\t                                    \r\n\t                                    \tFileObject fileObject = info.getFile();\r\n\t                                    \ttry {\r\n\t                                    \t    if ( fileObject == null) return false;\r\n\t                                    \t}\r\n\t                                    \tcatch (Exception ex)\r\n\t                                    \t{\r\n\t                                    \t\t// Upon error don't process the file.\r\n\t                                    \t\treturn false;\r\n\t                                    \t}\r\n\t                                    \t\r\n\t                                    \tfinally \r\n\t                                \t\t{\r\n\t                                \t\t\tif ( fileObject != null )\r\n\t                                \t\t\t{\r\n\t                                \t\t\t\ttry  {fileObject.close();} catch ( IOException ex ) {};\r\n\t                                \t\t\t}\r\n\t           \r\n\t                                \t\t}\r\n\t                                    \treturn true;\r\n\t                                    }\r\n\t                                }\r\n\t                            );\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (fileObjects != null) \r\n\t                        {\r\n\t                            for (int j = 0; j < fileObjects.length; j++)\r\n\t                            {\r\n\t                            \t// Fetch files list one after one ...\r\n\t                                Currentfile=fileObjects[j];\r\n\t                                if(!DoNotProcessRest)\r\n\t    \t\t\t           \t\t{\r\n\t\t                                if(!MoveOneFile(Currentfile, sourcefilefolder,realDestinationFilefoldername, \r\n\t\t                \t\t\t\t\t\trealWildcard,log,parentJob,result,movetofolderfolder))\r\n\t\t                                {\r\n\t\t                                \t// Update Errors\r\n\t\t        \t\t\t\t\t\t\tupdateErrors();\r\n\t\t                                }\r\n\t    \t\t\t           \t\t}else\r\n\t    \t\t\t           \t\t{\r\n\t    \t\t\t           \t\t\tif(log.isDetailed()) log.logDetailed(toString(),Messages.getString(\"JobEntryMoveFiles.log.IgnoringFile\",Currentfile.toString()));\r\n\t    \t\t\t           \t\r\n\t    \t\t\t           \t\t}\r\n\t                            }\n\t                        }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tentrystatus = true ;\n\t\t\t\t} // end if\t\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Destination Folder or Parent folder is missing\n\t\t\t\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Error.DestinationFolderNotFound\",realDestinationFilefoldername));\t\t\t\t\t\n\t\t\t\t\t\r\n\t\t\t\t\t// Update Errors\r\n\t\t\t\t\tupdateErrors();\n\t\t\t\t}\t\n\t\t\t} // end if\n\t\t\telse\n\t\t\t{\t\n\t\t\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Error.SourceFileNotExists\",realSourceFilefoldername));\t\t\t\t\t\n\t\t\t\t\r\n\t\t\t\t// Update Errors\r\n\t\t\t\tupdateErrors();\n\t\t\t}\n\t\t} // end try\n\t\n\t\tcatch (IOException e) \n\t\t{\n\n\t\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Error.Exception.MoveProcess\",realSourceFilefoldername.toString(),destinationfilefolder.toString(), e.getMessage()));\t\t\t\t\t\n\t\t\t// Update Errors\r\n\t\t\tupdateErrors();\r\n\t\t}\n\t\tfinally \n\t\t{\n\t\t\tif ( sourcefilefolder != null )\n\t\t\t{\n\t\t\t\ttry  \n\t\t\t\t{\n\t\t\t\t\tsourcefilefolder.close();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\n\t\t\tif ( destinationfilefolder != null )\n\t\t\t{\n\t\t\t\ttry  \n\t\t\t\t{\n\t\t\t\t\tdestinationfilefolder.close();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\r\n\t\t\tif ( Currentfile != null )\r\n\t\t\t{\r\n\t\t\t\ttry  \r\n\t\t\t\t{\r\n\t\t\t\t\tCurrentfile.close();\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tcatch ( IOException ex ) {};\r\n\t\t\t}\r\n\t\t\tif ( movetofolderfolder != null )\r\n\t\t\t{\r\n\t\t\t\ttry  \r\n\t\t\t\t{\r\n\t\t\t\t\tmovetofolderfolder.close();\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tcatch ( IOException ex ) {};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\n\t\t}\n\n\t\treturn entrystatus;\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private boolean MoveOneFile(FileObject Currentfile, FileObject sourcefilefolder,String realDestinationFilefoldername, \r\n\t\t\t\t\t\tString realWildcard,LogWriter log,Job parentJob,Result result)\r\n\t{\r\n\t\tboolean entrystatus=false;\r\n\t\tFileObject file_name=null;\r\n\ttry {\r\n     \tif (!Currentfile.toString().equals(sourcefilefolder.toString()))\r\n\t\t{\r\n\t\t\t// Pass over the Base folder itself\r\n\t\t\t\r\n    \t\t// return destination short filename\r\n    \t\tString shortfilename=Currentfile.getName().getBaseName();\r\n\t\t\ttry{\r\n\t\t\t  shortfilename=getDestinationFilename(Currentfile.getName().getBaseName());\r\n\t\t\t}catch (Exception e)\r\n\t\t\t{\r\n\t\t\t\tlog.logError(toString(), Messages.getString(Messages.getString(\"JobMoveFiles.Error.GettingFilename\",Currentfile.getName().getBaseName(),e.toString())));\r\n\t\t\t\treturn entrystatus;\r\n\t\t\t}\r\n\t\t\t//log.logBasic(\"-----Current-------\", Currentfile.getName().getBaseName());\r\n\t\t\tint lenCurrent=Currentfile.getName().getBaseName().length();\r\n\t\t\t//log.logBasic(\"-----short_filename-------\", shortfilename);\r\n\t\t\tString short_filename_from_basefolder=shortfilename;\r\n\t\t\tif(!isDoNotKeepFolderStructure())\t\r\n\t\t\t\tshort_filename_from_basefolder=Currentfile.toString().substring(sourcefilefolder.toString().length(),Currentfile.toString().length());        \t\t\t\t\t\r\n\t\t\t//log.logBasic(\"-----short_filename_from_basefolder-------\", short_filename_from_basefolder);\r\n\t\t\tshort_filename_from_basefolder=short_filename_from_basefolder.substring(0,short_filename_from_basefolder.length()-lenCurrent)+shortfilename;\r\n\t\t\t//log.logBasic(\"-----short_filename_from_basefolder-------\", short_filename_from_basefolder);\r\n\t\t\t// Built destination filename\r\n\t\t\tfile_name=KettleVFS.getFileObject(realDestinationFilefoldername + Const.FILE_SEPARATOR + short_filename_from_basefolder); \r\n\t\t\t\r\n\t\t\tif (!Currentfile.getParent().toString().equals(sourcefilefolder.toString()))\r\n\t\t\t {\r\n\t\t\t\t// Not in the Base Folder..Only if include sub folders  \r\n\t\t\t\t if (include_subfolders)\r\n\t\t\t\t {\r\n\t\t\t\t\t// Folders..only if include subfolders\r\n\t\t\t\t\t if (Currentfile.getType() == FileType.FOLDER)\r\n\t\t\t\t\t {\r\n\t\t\t\t\t\t if (include_subfolders && move_empty_folders && Const.isEmpty(wildcard))\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t if (!file_name.exists())\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t// Move Folder\r\n\t\t\t\t\t\t\t\tCurrentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t if(log.isDetailed())\r\n\t\t\t\t\t\t\t\t {\t                \t\t\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FolderMoved\",Currentfile.getName().toString(),file_name.getName().toString()));\r\n\r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t if(add_result_filesname) addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t else\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t if(log.isDetailed()) \r\n\t\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FolderExists\", file_name.toString()));\r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t if (overwrite_files)\r\n\t\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t if(log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileOverwrite\",file_name.getName().toString()));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t\t if(add_result_filesname) addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t } \r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t }\r\n\t\t\t\t\t else\r\n\t\t\t\t\t {\r\n\t\t\t\t\t\tif (GetFileWildcard(shortfilename,realWildcard))\r\n\t\t\t\t\t\t{\t\r\n\t\t\t\t\t\t\t// Check if the file exists\r\n\t\t\t\t\t\t\t if (!file_name.exists())\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\tif(log.isDetailed()) \r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlog.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileMoved\",Currentfile.toString(),file_name.toString()));\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// add filename to result filename\r\n\t\t\t\t\t\t\t\tif(add_result_filesname) addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t else\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t if(log.isDetailed()) \r\n\t\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileExists\",file_name.getName().toString()));\r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t if (overwrite_files)\r\n\t\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t if(log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileOverwrite\",file_name.toString()));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t\t if(add_result_filesname) addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t\t \r\n\r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\t\t\t }\r\n\t\t\t else\r\n\t\t\t {\r\n\t\t\t\t// In the Base Folder...\r\n\t\t\t\t// Folders..only if include subfolders\r\n\t\t\t\t if (Currentfile.getType() == FileType.FOLDER)\r\n\t\t\t\t {\r\n\t\t\t\t\t if (include_subfolders && move_empty_folders  && Const.isEmpty(wildcard))\r\n\t\t\t\t\t {\r\n\t\t\t\t\t\t if (!file_name.exists())\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t if(log.isDetailed())  \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileMoved\",Currentfile.toString(),file_name.toString()));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t if(add_result_filesname) addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t\t else\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t if(log.isDetailed())  \r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileExists\",file_name.getName().toString()));\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t if (overwrite_files)\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t if(log.isDetailed())  log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileOverwrite\",file_name.toString()));\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t if(add_result_filesname) addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t  \r\n\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t }\r\n\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\t\t\t\t else\r\n\t\t\t\t {\r\n\t\t\t\t\t // file...Check if exists\r\n\t\t\t\t\t if (GetFileWildcard(shortfilename,realWildcard))\r\n\t\t\t\t\t {\t\r\n\t\t\t\t\t\t if (!file_name.exists())\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t if(log.isDetailed())  \r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileMoved\",Currentfile.toString(),file_name.toString()));\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t }\t\r\n\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t if(add_result_filesname) addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t\t else\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t if(log.isDetailed())  \r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileExists\",file_name.getName().toString()));\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t \r\n\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t if (overwrite_files)\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t if(log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileOverwrite\",file_name.toString()));\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t if(add_result_filesname) addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t } \r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\r\n\t\t\t }\r\n\t\t\t\r\n\t\t}\r\n     \tentrystatus=true;\r\n    \r\n\t}catch (Exception e)\r\n\t{\r\n\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Log.Error\",e.toString()));\r\n\t}\r\n\tfinally \r\n\t{\r\n\t\tif ( file_name != null )\r\n\t\t{\r\n\t\t\ttry  \r\n\t\t\t{\r\n\t\t\t\tfile_name.close();\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tcatch ( IOException ex ) {};\r\n\t\t}\r\n\t\r\n\t}\r\n return entrystatus;\r\n }","id":12251,"modified_method":"private boolean MoveOneFile(FileObject Currentfile, FileObject sourcefilefolder,String realDestinationFilefoldername, \r\n\t\t\t\t\t\tString realWildcard,LogWriter log,Job parentJob,Result result, FileObject movetofolderfolder)\r\n\t{\r\n\t\tboolean entrystatus=false;\r\n\t\tFileObject file_name=null;\r\n\ttry {\r\n     \tif (!Currentfile.toString().equals(sourcefilefolder.toString()))\r\n\t\t{\r\n\t\t\t// Pass over the Base folder itself\r\n\t\t\t\r\n    \t\t// return destination short filename\r\n    \t\tString shortfilename=Currentfile.getName().getBaseName();\r\n\t\t\ttry{\r\n\t\t\t  shortfilename=getDestinationFilename(Currentfile.getName().getBaseName());\r\n\t\t\t}catch (Exception e)\r\n\t\t\t{\r\n\t\t\t\tlog.logError(toString(), Messages.getString(Messages.getString(\"JobMoveFiles.Error.GettingFilename\",Currentfile.getName().getBaseName(),e.toString())));\r\n\t\t\t\treturn entrystatus;\r\n\t\t\t}\r\n\t\t\t//log.logBasic(\"-----Current-------\", Currentfile.getName().getBaseName());\r\n\t\t\tint lenCurrent=Currentfile.getName().getBaseName().length();\r\n\t\t\t//log.logBasic(\"-----short_filename-------\", shortfilename);\r\n\t\t\tString short_filename_from_basefolder=shortfilename;\r\n\t\t\tif(!isDoNotKeepFolderStructure())\t\r\n\t\t\t\tshort_filename_from_basefolder=Currentfile.toString().substring(sourcefilefolder.toString().length(),Currentfile.toString().length());        \t\t\t\t\t\r\n\t\t\t//log.logBasic(\"-----short_filename_from_basefolder-------\", short_filename_from_basefolder);\r\n\t\t\tshort_filename_from_basefolder=short_filename_from_basefolder.substring(0,short_filename_from_basefolder.length()-lenCurrent)+shortfilename;\r\n\t\t\t//log.logBasic(\"-----short_filename_from_basefolder-------\", short_filename_from_basefolder);\r\n\t\t\t// Built destination filename\r\n\t\t\tfile_name=KettleVFS.getFileObject(realDestinationFilefoldername + Const.FILE_SEPARATOR + short_filename_from_basefolder); \r\n\t\t\t\r\n\t\t\tif (!Currentfile.getParent().toString().equals(sourcefilefolder.toString()))\r\n\t\t\t {\r\n\t\t\t\t// Not in the Base Folder..Only if include sub folders  \r\n\t\t\t\t if (include_subfolders)\r\n\t\t\t\t {\r\n\t\t\t\t\t// Folders..only if include subfolders\r\n\t\t\t\t\t if (Currentfile.getType() == FileType.FOLDER)\r\n\t\t\t\t\t {\r\n\t\t\t\t\t\t if (include_subfolders && move_empty_folders && Const.isEmpty(wildcard))\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t entrystatus=MoveFile(shortfilename,Currentfile,file_name,movetofolderfolder,log,parentJob,result);\r\n\r\n\t\t\t\t\t\t\t/* if (!file_name.exists())\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t// Move Folder\r\n\t\t\t\t\t\t\t\tCurrentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t if(log.isDetailed())\r\n\t\t\t\t\t\t\t\t {\t                \t\t\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FolderMoved\",Currentfile.getName().toString(),file_name.getName().toString()));\r\n\r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t if(add_result_filesname && !iffileexists.equals(\"fail\") && !iffileexists.equals(\"do_nothing\")) \r\n\t\t\t\t\t\t\t\t\t addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t else\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t if(log.isDetailed()) \r\n\t\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FolderExists\", file_name.toString()));\r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t entrystatus=MoveFile(shortfilename,Currentfile,file_name,movetofolderfolder,log,parentJob,result);\r\n\r\n\t\t\t\t\t\t\t\tif (overwrite_files)\r\n\t\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t if(log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileOverwrite\",file_name.getName().toString()));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t\t if(add_result_filesname && !iffileexists.equals(\"fail\") && iffileexists.equals(\"do_nothing\")) \r\n\t\t\t\t\t\t\t\t\t\t addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t } */\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t }\r\n\t\t\t\t\t else\r\n\t\t\t\t\t {\r\n\t\t\t\t\t\tif (GetFileWildcard(shortfilename,realWildcard))\r\n\t\t\t\t\t\t{\t\r\n\t\t\t\t\t\t\tentrystatus=MoveFile(shortfilename,Currentfile,file_name,movetofolderfolder,log,parentJob,result);\r\n\r\n\t\t\t\t\t\t\t// Check if the file exists\r\n\t\t\t\t\t\t\t /*if (!file_name.exists())\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\tif(log.isDetailed()) \r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlog.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileMoved\",Currentfile.toString(),file_name.toString()));\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// add filename to result filename\r\n\t\t\t\t\t\t\t\tif(add_result_filesname && !iffileexists.equals(\"fail\") && iffileexists.equals(\"do_nothing\")) \r\n\t\t\t\t\t\t\t\t\taddFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t else\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t if(log.isDetailed()) \r\n\t\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileExists\",file_name.getName().toString()));\r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t if (overwrite_files)\r\n\t\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t if(log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileOverwrite\",file_name.toString()));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t\t if(add_result_filesname && !iffileexists.equals(\"fail\") && iffileexists.equals(\"do_nothing\")) \r\n\t\t\t\t\t\t\t\t\t\t addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t\t \r\n\r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t }*/\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\t\t\t }\r\n\t\t\t else\r\n\t\t\t {\r\n\t\t\t\t// In the Base Folder...\r\n\t\t\t\t// Folders..only if include subfolders\r\n\t\t\t\t if (Currentfile.getType() == FileType.FOLDER)\r\n\t\t\t\t {\r\n\t\t\t\t\t if (include_subfolders && move_empty_folders  && Const.isEmpty(wildcard))\r\n\t\t\t\t\t {\r\n\t\t\t\t\t\t entrystatus=MoveFile(shortfilename,Currentfile,file_name,movetofolderfolder,log,parentJob,result);\r\n\r\n\t\t\t\t\t\t /*if (!file_name.exists())\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t if(log.isDetailed())  \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileMoved\",Currentfile.toString(),file_name.toString()));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t if(add_result_filesname && !iffileexists.equals(\"fail\") && iffileexists.equals(\"do_nothing\")) \r\n\t\t\t\t\t\t\t\t addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t\t else\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t if(log.isDetailed())  \r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileExists\",file_name.getName().toString()));\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t if (overwrite_files)\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t if(log.isDetailed())  log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileOverwrite\",file_name.toString()));\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t if(add_result_filesname && !iffileexists.equals(\"fail\") && iffileexists.equals(\"do_nothing\")) \r\n\t\t\t\t\t\t\t\t\t addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t  \r\n\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t }*/\r\n\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\t\t\t\t else\r\n\t\t\t\t {\r\n\t\t\t\t\t // file...Check if exists\r\n\t\t\t\t\t if (GetFileWildcard(shortfilename,realWildcard))\r\n\t\t\t\t\t {\t\r\n\t\t\t\t\t\t entrystatus=MoveFile(shortfilename,Currentfile,file_name,movetofolderfolder,log,parentJob,result);\r\n\r\n\t\t\t\t\t\t /*if (!file_name.exists())\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t if(log.isDetailed())  \r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileMoved\",Currentfile.toString(),file_name.toString()));\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t }\t\r\n\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t if(add_result_filesname && !iffileexists.equals(\"fail\") && iffileexists.equals(\"do_nothing\")) \r\n\t\t\t\t\t\t\t\t addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t\t else\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t if(log.isDetailed())  \r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(),\" ------ \");\r\n\t\t\t\t\t\t\t\t log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileExists\",file_name.getName().toString()));\r\n\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t \r\n\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t if (overwrite_files)\r\n\t\t\t\t\t\t\t {\r\n\t\t\t\t\t\t\t\t // Move File\r\n\t\t\t\t\t\t\t\t Currentfile.moveTo(file_name);\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t if(log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMoveFiles.Log.FileOverwrite\",file_name.toString()));\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t // add filename to result filename\r\n\t\t\t\t\t\t\t\t if(add_result_filesname && !iffileexists.equals(\"fail\") && iffileexists.equals(\"do_nothing\")) \r\n\t\t\t\t\t\t\t\t\t addFileToResultFilenames(file_name.toString(),log,result,parentJob);\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t } \r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t }*/\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\r\n\t\t\t }\r\n\t\t\t\r\n\t\t}\r\n     \tentrystatus=true;\r\n    \r\n\t}catch (Exception e)\r\n\t{\r\n\t\tlog.logError(toString(), Messages.getString(\"JobMoveFiles.Log.Error\",e.toString()));\r\n\t}\r\n\tfinally \r\n\t{\r\n\t\tif ( file_name != null )\r\n\t\t{\r\n\t\t\ttry  \r\n\t\t\t{\r\n\t\t\t\tfile_name.close();\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tcatch ( IOException ex ) {};\r\n\t\t}\r\n\t\r\n\t}\r\n return entrystatus;\r\n }","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public JobEntryInterface open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, props.getJobsDialogStyle());\n\t\tprops.setLook(shell);\n\t\tJobDialog.setShellImage(shell, jobEntry);\n\t\t\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = jobEntry.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"JobMoveFiles.Title\"));\n\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Filename line\n\t\twlName=new Label(shell, SWT.RIGHT);\n\t\twlName.setText(Messages.getString(\"JobMoveFiles.Name.Label\"));\n\t\tprops.setLook(wlName);\n\t\tfdlName=new FormData();\n\t\tfdlName.left = new FormAttachment(0, 0);\n\t\tfdlName.right= new FormAttachment(middle, -margin);\n\t\tfdlName.top  = new FormAttachment(0, margin);\n\t\twlName.setLayoutData(fdlName);\n\t\twName=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wName);\n\t\twName.addModifyListener(lsMod);\n\t\tfdName=new FormData();\n\t\tfdName.left = new FormAttachment(middle, 0);\n\t\tfdName.top  = new FormAttachment(0, margin);\n\t\tfdName.right= new FormAttachment(100, 0);\n\t\twName.setLayoutData(fdName);\n\t\t\n\t\t\n\t\t\n\t\t  \n        wTabFolder = new CTabFolder(shell, SWT.BORDER);\n \t\tprops.setLook(wTabFolder, Props.WIDGET_STYLE_TAB);\n \t\t\n \t\t//////////////////////////\n\t\t// START OF GENERAL TAB   ///\n\t\t//////////////////////////\n\t\t\n\t\t\n\t\t\n\t\twGeneralTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twGeneralTab.setText(Messages.getString(\"JobMoveFiles.Tab.General.Label\"));\n\t\t\n\t\twGeneralComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wGeneralComp);\n\n\t\tFormLayout generalLayout = new FormLayout();\n\t\tgeneralLayout.marginWidth  = 3;\n\t\tgeneralLayout.marginHeight = 3;\n\t\twGeneralComp.setLayout(generalLayout);\n\t\t\n\n\t\t// SETTINGS grouping?\n\t\t// ////////////////////////\n\t\t// START OF SETTINGS GROUP\n\t\t// \n\n\t\twSettings = new Group(wGeneralComp, SWT.SHADOW_NONE);\n\t\tprops.setLook(wSettings);\n\t\twSettings.setText(Messages.getString(\"JobMoveFiles.Settings.Label\"));\n\n\t\tFormLayout groupLayout = new FormLayout();\n\t\tgroupLayout.marginWidth = 10;\n\t\tgroupLayout.marginHeight = 10;\n\t\twSettings.setLayout(groupLayout);\n\t\t\n\t\twlIncludeSubfolders = new Label(wSettings, SWT.RIGHT);\n\t\twlIncludeSubfolders.setText(Messages.getString(\"JobMoveFiles.IncludeSubfolders.Label\"));\n\t\tprops.setLook(wlIncludeSubfolders);\n\t\tfdlIncludeSubfolders = new FormData();\n\t\tfdlIncludeSubfolders.left = new FormAttachment(0, 0);\n\t\tfdlIncludeSubfolders.top = new FormAttachment(wName, margin);\n\t\tfdlIncludeSubfolders.right = new FormAttachment(middle, -margin);\n\t\twlIncludeSubfolders.setLayoutData(fdlIncludeSubfolders);\n\t\twIncludeSubfolders = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wIncludeSubfolders);\n\t\twIncludeSubfolders.setToolTipText(Messages.getString(\"JobMoveFiles.IncludeSubfolders.Tooltip\"));\n\t\tfdIncludeSubfolders = new FormData();\n\t\tfdIncludeSubfolders.left = new FormAttachment(middle, 0);\n\t\tfdIncludeSubfolders.top = new FormAttachment(wName, margin);\n\t\tfdIncludeSubfolders.right = new FormAttachment(100, 0);\n\t\twIncludeSubfolders.setLayoutData(fdIncludeSubfolders);\n\t\twIncludeSubfolders.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t\tCheckIncludeSubFolders();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Destination is a file?\n\t\twlDestinationIsAFile = new Label(wSettings, SWT.RIGHT);\n\t\twlDestinationIsAFile.setText(Messages.getString(\"JobMoveFiles.DestinationIsAFile.Label\"));\n\t\tprops.setLook(wlDestinationIsAFile);\n\t\tfdlDestinationIsAFile = new FormData();\n\t\tfdlDestinationIsAFile.left = new FormAttachment(0, 0);\n\t\tfdlDestinationIsAFile.top = new FormAttachment(wIncludeSubfolders, margin);\n\t\tfdlDestinationIsAFile.right = new FormAttachment(middle, -margin);\n\t\twlDestinationIsAFile.setLayoutData(fdlDestinationIsAFile);\n\t\twDestinationIsAFile = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wDestinationIsAFile);\n\t\twDestinationIsAFile.setToolTipText(Messages.getString(\"JobMoveFiles.DestinationIsAFile.Tooltip\"));\n\t\tfdDestinationIsAFile = new FormData();\n\t\tfdDestinationIsAFile.left = new FormAttachment(middle, 0);\n\t\tfdDestinationIsAFile.top = new FormAttachment(wIncludeSubfolders, margin);\n\t\tfdDestinationIsAFile.right = new FormAttachment(100, 0);\n\t\twDestinationIsAFile.setLayoutData(fdDestinationIsAFile);\n\t\twDestinationIsAFile.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Copy empty folders\n\t\twlMoveEmptyFolders = new Label(wSettings, SWT.RIGHT);\n\t\twlMoveEmptyFolders.setText(Messages.getString(\"JobMoveFiles.MoveEmptyFolders.Label\"));\n\t\tprops.setLook(wlMoveEmptyFolders);\n\t\tfdlMoveEmptyFolders = new FormData();\n\t\tfdlMoveEmptyFolders.left = new FormAttachment(0, 0);\n\t\tfdlMoveEmptyFolders.top = new FormAttachment(wDestinationIsAFile, margin);\n\t\tfdlMoveEmptyFolders.right = new FormAttachment(middle, -margin);\n\t\twlMoveEmptyFolders.setLayoutData(fdlMoveEmptyFolders);\n\t\twMoveEmptyFolders = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wMoveEmptyFolders);\n\t\twMoveEmptyFolders.setToolTipText(Messages.getString(\"JobMoveFiles.MoveEmptyFolders.Tooltip\"));\n\t\tfdMoveEmptyFolders = new FormData();\n\t\tfdMoveEmptyFolders.left = new FormAttachment(middle, 0);\n\t\tfdMoveEmptyFolders.top = new FormAttachment(wDestinationIsAFile, margin);\n\t\tfdMoveEmptyFolders.right = new FormAttachment(100, 0);\n\t\twMoveEmptyFolders.setLayoutData(fdMoveEmptyFolders);\n\t\twMoveEmptyFolders.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Create destination folder/parent folder\n\t\twlCreateDestinationFolder = new Label(wSettings, SWT.RIGHT);\n\t\twlCreateDestinationFolder.setText(Messages.getString(\"JobMoveFiles.CreateDestinationFolder.Label\"));\n\t\tprops.setLook(wlCreateDestinationFolder);\n\t\tfdlCreateDestinationFolder = new FormData();\n\t\tfdlCreateDestinationFolder.left = new FormAttachment(0, 0);\n\t\tfdlCreateDestinationFolder.top = new FormAttachment(wMoveEmptyFolders, margin);\n\t\tfdlCreateDestinationFolder.right = new FormAttachment(middle, -margin);\n\t\twlCreateDestinationFolder.setLayoutData(fdlCreateDestinationFolder);\n\t\twCreateDestinationFolder = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wCreateDestinationFolder);\n\t\twCreateDestinationFolder.setToolTipText(Messages.getString(\"JobMoveFiles.CreateDestinationFolder.Tooltip\"));\n\t\tfdCreateDestinationFolder = new FormData();\n\t\tfdCreateDestinationFolder.left = new FormAttachment(middle, 0);\n\t\tfdCreateDestinationFolder.top = new FormAttachment(wMoveEmptyFolders, margin);\n\t\tfdCreateDestinationFolder.right = new FormAttachment(100, 0);\n\t\twCreateDestinationFolder.setLayoutData(fdCreateDestinationFolder);\n\t\twCreateDestinationFolder.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// OverwriteFiles Option \n\t\twlOverwriteFiles = new Label(wSettings, SWT.RIGHT);\n\t\twlOverwriteFiles.setText(Messages.getString(\"JobMoveFiles.OverwriteFiles.Label\"));\n\t\tprops.setLook(wlOverwriteFiles);\n\t\tfdlOverwriteFiles = new FormData();\n\t\tfdlOverwriteFiles.left = new FormAttachment(0, 0);\n\t\tfdlOverwriteFiles.top = new FormAttachment(wCreateDestinationFolder, margin);\n\t\tfdlOverwriteFiles.right = new FormAttachment(middle, -margin);\n\t\twlOverwriteFiles.setLayoutData(fdlOverwriteFiles);\n\t\twOverwriteFiles = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wOverwriteFiles);\n\t\twOverwriteFiles.setToolTipText(Messages.getString(\"JobMoveFiles.OverwriteFiles.Tooltip\"));\n\t\tfdOverwriteFiles = new FormData();\n\t\tfdOverwriteFiles.left = new FormAttachment(middle, 0);\n\t\tfdOverwriteFiles.top = new FormAttachment(wCreateDestinationFolder, margin);\n\t\tfdOverwriteFiles.right = new FormAttachment(100, 0);\n\t\twOverwriteFiles.setLayoutData(fdOverwriteFiles);\n\t\twOverwriteFiles.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\n\t\twlPrevious = new Label(wSettings, SWT.RIGHT);\n\t\twlPrevious.setText(Messages.getString(\"JobMoveFiles.Previous.Label\"));\n\t\tprops.setLook(wlPrevious);\n\t\tfdlPrevious = new FormData();\n\t\tfdlPrevious.left = new FormAttachment(0, 0);\n\t\tfdlPrevious.top = new FormAttachment(wOverwriteFiles, margin );\n\t\tfdlPrevious.right = new FormAttachment(middle, -margin);\n\t\twlPrevious.setLayoutData(fdlPrevious);\n\t\twPrevious = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wPrevious);\n\t\twPrevious.setSelection(jobEntry.arg_from_previous);\n\t\twPrevious.setToolTipText(Messages.getString(\"JobMoveFiles.Previous.Tooltip\"));\n\t\tfdPrevious = new FormData();\n\t\tfdPrevious.left = new FormAttachment(middle, 0);\n\t\tfdPrevious.top = new FormAttachment(wOverwriteFiles, margin );\n\t\tfdPrevious.right = new FormAttachment(100, 0);\n\t\twPrevious.setLayoutData(fdPrevious);\n\t\twPrevious.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\n\t\t\t\tRefreshArgFromPrevious();\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tfdSettings = new FormData();\n\t\tfdSettings.left = new FormAttachment(0, margin);\n\t\tfdSettings.top = new FormAttachment(wName, margin);\n\t\tfdSettings.right = new FormAttachment(100, -margin);\n\t\twSettings.setLayoutData(fdSettings);\n\t\t\n\t\t// ///////////////////////////////////////////////////////////\n\t\t// / END OF SETTINGS GROUP\n\t\t// ///////////////////////////////////////////////////////////\n\n\t\t// SourceFileFolder line\n\t\twlSourceFileFolder=new Label(wGeneralComp, SWT.RIGHT);\n\t\twlSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.SourceFileFolder.Label\"));\n\t\tprops.setLook(wlSourceFileFolder);\n\t\tfdlSourceFileFolder=new FormData();\n\t\tfdlSourceFileFolder.left = new FormAttachment(0, 0);\n\t\tfdlSourceFileFolder.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdlSourceFileFolder.right= new FormAttachment(middle, -margin);\n\t\twlSourceFileFolder.setLayoutData(fdlSourceFileFolder);\n\n\t\t// Browse Source folders button ...\n\t\twbSourceDirectory=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbSourceDirectory);\n\t\twbSourceDirectory.setText(Messages.getString(\"JobMoveFiles.BrowseFolders.Label\"));\n\t\tfdbSourceDirectory=new FormData();\n\t\tfdbSourceDirectory.right= new FormAttachment(100, 0);\n\t\tfdbSourceDirectory.top  = new FormAttachment(wSettings, margin);\n\t\twbSourceDirectory.setLayoutData(fdbSourceDirectory);\n\t\t\n\t\twbSourceDirectory.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t\t{\n\t\t\t\t\tDirectoryDialog ddialog = new DirectoryDialog(shell, SWT.OPEN);\n\t\t\t\t\tif (wSourceFileFolder.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tddialog.setFilterPath(jobMeta.environmentSubstitute(wSourceFileFolder.getText()) );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t // Calling open() will open and run the dialog.\n\t\t\t        // It will return the selected directory, or\n\t\t\t        // null if user cancels\n\t\t\t        String dir = ddialog.open();\n\t\t\t        if (dir != null) {\n\t\t\t          // Set the text box to the new selection\n\t\t\t        \twSourceFileFolder.setText(dir);\n\t\t\t        }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\t\n\t\t// Browse Source files button ...\n\t\twbSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbSourceFileFolder);\n\t\twbSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.BrowseFiles.Label\"));\n\t\tfdbSourceFileFolder=new FormData();\n\t\tfdbSourceFileFolder.right= new FormAttachment(wbSourceDirectory, -margin);\n\t\tfdbSourceFileFolder.top  = new FormAttachment(wSettings, margin);\n\t\twbSourceFileFolder.setLayoutData(fdbSourceFileFolder);\n\t\t\n\t\t// Browse Destination file add button ...\n\t\twbaSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbaSourceFileFolder);\n\t\twbaSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.FilenameAdd.Button\"));\n\t\tfdbaSourceFileFolder=new FormData();\n\t\tfdbaSourceFileFolder.right= new FormAttachment(wbSourceFileFolder, -margin);\n\t\tfdbaSourceFileFolder.top  = new FormAttachment(wSettings, margin);\n\t\twbaSourceFileFolder.setLayoutData(fdbaSourceFileFolder);\n\n\t\twSourceFileFolder=new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twSourceFileFolder.setToolTipText(Messages.getString(\"JobMoveFiles.SourceFileFolder.Tooltip\"));\n\t\t\n\t\tprops.setLook(wSourceFileFolder);\n\t\twSourceFileFolder.addModifyListener(lsMod);\n\t\tfdSourceFileFolder=new FormData();\n\t\tfdSourceFileFolder.left = new FormAttachment(middle, 0);\n\t\tfdSourceFileFolder.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdSourceFileFolder.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twSourceFileFolder.setLayoutData(fdSourceFileFolder);\n\n\t\t// Whenever something changes, set the tooltip to the expanded version:\n\t\twSourceFileFolder.addModifyListener(new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\twSourceFileFolder.setToolTipText(jobMeta.environmentSubstitute(wSourceFileFolder.getText() ) );\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\twbSourceFileFolder.addSelectionListener\n\t\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\tif (wSourceFileFolder.getText()!=null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wSourceFileFolder.getText()) );\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t{\n\t\t\t\t\twSourceFileFolder.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t);\n\t\t\n\t\t// Destination\n\t\twlDestinationFileFolder = new Label(wGeneralComp, SWT.RIGHT);\n\t\twlDestinationFileFolder.setText(Messages.getString(\"JobMoveFiles.DestinationFileFolder.Label\"));\n\t\tprops.setLook(wlDestinationFileFolder);\n\t\tfdlDestinationFileFolder = new FormData();\n\t\tfdlDestinationFileFolder.left = new FormAttachment(0, 0);\n\t\tfdlDestinationFileFolder.top = new FormAttachment(wSourceFileFolder, margin);\n\t\tfdlDestinationFileFolder.right = new FormAttachment(middle, -margin);\n\t\twlDestinationFileFolder.setLayoutData(fdlDestinationFileFolder);\n\t\t\n\t\t\n\t\t\n\t\t// Browse Destination folders button ...\n\t\twbDestinationDirectory=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbDestinationDirectory);\n\t\twbDestinationDirectory.setText(Messages.getString(\"JobMoveFiles.BrowseFolders.Label\"));\n\t\tfdbDestinationDirectory=new FormData();\n\t\tfdbDestinationDirectory.right= new FormAttachment(100, 0);\n\t\tfdbDestinationDirectory.top  = new FormAttachment(wSourceFileFolder, margin);\n\t\twbDestinationDirectory.setLayoutData(fdbDestinationDirectory);\n\t\t\n\t\t\n\t\twbDestinationDirectory.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t\t{\n\t\t\t\t\tDirectoryDialog ddialog = new DirectoryDialog(shell, SWT.OPEN);\n\t\t\t\t\tif (wDestinationFileFolder.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tddialog.setFilterPath(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()) );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t // Calling open() will open and run the dialog.\n\t\t\t        // It will return the selected directory, or\n\t\t\t        // null if user cancels\n\t\t\t        String dir = ddialog.open();\n\t\t\t        if (dir != null) {\n\t\t\t          // Set the text box to the new selection\n\t\t\t        \twDestinationFileFolder.setText(dir);\n\t\t\t        }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t// Browse Destination file browse button ...\n\t\twbDestinationFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbDestinationFileFolder);\n\t\twbDestinationFileFolder.setText(Messages.getString(\"JobMoveFiles.BrowseFiles.Label\"));\n\t\tfdbDestinationFileFolder=new FormData();\n\t\tfdbDestinationFileFolder.right= new FormAttachment(wbDestinationDirectory, -margin);\n\t\tfdbDestinationFileFolder.top  = new FormAttachment(wSourceFileFolder, margin);\n\t\twbDestinationFileFolder.setLayoutData(fdbDestinationFileFolder);\n\t\t\n\t\t\t\t\n\t\t\n\t\twDestinationFileFolder = new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER); \n\t\twDestinationFileFolder.setToolTipText(Messages.getString(\"JobMoveFiles.DestinationFileFolder.Tooltip\"));\n\t\tprops.setLook(wDestinationFileFolder);\n\t\twDestinationFileFolder.addModifyListener(lsMod);\n\t\tfdDestinationFileFolder = new FormData();\n\t\tfdDestinationFileFolder.left = new FormAttachment(middle, 0);\n\t\tfdDestinationFileFolder.top = new FormAttachment(wSourceFileFolder, margin);\n\t\tfdDestinationFileFolder.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twDestinationFileFolder.setLayoutData(fdDestinationFileFolder);\n\t\t\n\t\twbDestinationFileFolder.addSelectionListener\n\t\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\tif (wDestinationFileFolder.getText()!=null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()) );\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t{\n\t\t\t\t\twDestinationFileFolder.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\t// Buttons to the right of the screen...\n\t\twbdSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbdSourceFileFolder);\n\t\twbdSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.FilenameDelete.Button\"));\n\t\twbdSourceFileFolder.setToolTipText(Messages.getString(\"JobMoveFiles.FilenameDelete.Tooltip\"));\n\t\tfdbdSourceFileFolder=new FormData();\n\t\tfdbdSourceFileFolder.right = new FormAttachment(100, 0);\n\t\tfdbdSourceFileFolder.top  = new FormAttachment (wDestinationFileFolder, 40);\n\t\twbdSourceFileFolder.setLayoutData(fdbdSourceFileFolder);\n\n\t\twbeSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbeSourceFileFolder);\n\t\twbeSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.FilenameEdit.Button\"));\n\t\twbeSourceFileFolder.setToolTipText(Messages.getString(\"JobMoveFiles.FilenameEdit.Tooltip\"));\n\t\tfdbeSourceFileFolder=new FormData();\n\t\tfdbeSourceFileFolder.right = new FormAttachment(100, 0);\n\t\tfdbeSourceFileFolder.left = new FormAttachment(wbdSourceFileFolder, 0, SWT.LEFT);\n\t\tfdbeSourceFileFolder.top  = new FormAttachment (wbdSourceFileFolder, margin);\n\t\twbeSourceFileFolder.setLayoutData(fdbeSourceFileFolder);\n\t\t\n\t\t\n\t\t\n\t\t// Wildcard\n\t\twlWildcard = new Label(wGeneralComp, SWT.RIGHT);\n\t\twlWildcard.setText(Messages.getString(\"JobMoveFiles.Wildcard.Label\"));\n\t\tprops.setLook(wlWildcard);\n\t\tfdlWildcard = new FormData();\n\t\tfdlWildcard.left = new FormAttachment(0, 0);\n\t\tfdlWildcard.top = new FormAttachment(wDestinationFileFolder, margin);\n\t\tfdlWildcard.right = new FormAttachment(middle, -margin);\n\t\twlWildcard.setLayoutData(fdlWildcard);\n\t\t\n\t\twWildcard = new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twWildcard.setToolTipText(Messages.getString(\"JobMoveFiles.Wildcard.Tooltip\"));\n\t\tprops.setLook(wWildcard);\n\t\twWildcard.addModifyListener(lsMod);\n\t\tfdWildcard = new FormData();\n\t\tfdWildcard.left = new FormAttachment(middle, 0);\n\t\tfdWildcard.top = new FormAttachment(wDestinationFileFolder, margin);\n\t\tfdWildcard.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twWildcard.setLayoutData(fdWildcard);\n\n\t\twlFields = new Label(wGeneralComp, SWT.NONE);\n\t\twlFields.setText(Messages.getString(\"JobMoveFiles.Fields.Label\"));\n\t\tprops.setLook(wlFields);\n\t\tfdlFields = new FormData();\n\t\tfdlFields.left = new FormAttachment(0, 0);\n\t\tfdlFields.right= new FormAttachment(middle, -margin);\n\t\tfdlFields.top = new FormAttachment(wWildcard,margin);\n\t\twlFields.setLayoutData(fdlFields);\n\n\t\tint rows = jobEntry.source_filefolder == null\n\t\t\t? 1\n\t\t\t: (jobEntry.source_filefolder.length == 0\n\t\t\t? 0\n\t\t\t: jobEntry.source_filefolder.length);\n\t\tfinal int FieldsRows = rows;\n\n\t\tColumnInfo[] colinf=new ColumnInfo[]\n\t\t\t{\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobMoveFiles.Fields.SourceFileFolder.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobMoveFiles.Fields.DestinationFileFolder.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobMoveFiles.Fields.Wildcard.Label\"), ColumnInfo.COLUMN_TYPE_TEXT,    false ),\n\t\t\t};\n\n\t\tcolinf[0].setUsingVariables(true);\n\t\tcolinf[0].setToolTip(Messages.getString(\"JobMoveFiles.Fields.SourceFileFolder.Tooltip\"));\n\t\tcolinf[1].setUsingVariables(true);\n\t\tcolinf[1].setToolTip(Messages.getString(\"JobMoveFiles.Fields.DestinationFileFolder.Tooltip\"));\n\t\tcolinf[2].setUsingVariables(true);\n\t\tcolinf[2].setToolTip(Messages.getString(\"JobMoveFiles.Fields.Wildcard.Tooltip\"));\n\n\t\twFields = new TableView(jobMeta, wGeneralComp, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, colinf,\tFieldsRows, lsMod, props);\n\n\t\tfdFields = new FormData();\n\t\tfdFields.left = new FormAttachment(0, 0);\n\t\tfdFields.top = new FormAttachment(wlFields, margin);\n\t\tfdFields.right = new FormAttachment(100, -75);\n\t\tfdFields.bottom = new FormAttachment(100, -margin);\n\t\twFields.setLayoutData(fdFields);\n\n\t\tRefreshArgFromPrevious();\n\n\t\t// Add the file to the list of files...\n\t\tSelectionAdapter selA = new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\twFields.add(new String[] { wSourceFileFolder.getText(), wDestinationFileFolder.getText(), wWildcard.getText() } );\n\t\t\t\twSourceFileFolder.setText(\"\");\n\t\t\t\twDestinationFileFolder.setText(\"\");\n\t\t\t\twWildcard.setText(\"\");\n\t\t\t\twFields.removeEmptyRows();\n\t\t\t\twFields.setRowNums();\n\t\t\t\twFields.optWidth(true);\n\t\t\t}\n\t\t};\n\t\twbaSourceFileFolder.addSelectionListener(selA);\n\t\twSourceFileFolder.addSelectionListener(selA);\n\n\t\t// Delete files from the list of files...\n\t\twbdSourceFileFolder.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\tint idx[] = wFields.getSelectionIndices();\n\t\t\t\twFields.remove(idx);\n\t\t\t\twFields.removeEmptyRows();\n\t\t\t\twFields.setRowNums();\n\t\t\t}\n\t\t});\n\n\t\t// Edit the selected file & remove from the list...\n\t\twbeSourceFileFolder.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\tint idx = wFields.getSelectionIndex();\n\t\t\t\tif (idx>=0)\n\t\t\t\t{\n\t\t\t\t\tString string[] = wFields.getItem(idx);\n\t\t\t\t\twSourceFileFolder.setText(string[0]);\n\t\t\t\t\twDestinationFileFolder.setText(string[1]);\n\t\t\t\t\twWildcard.setText(string[2]);\n\t\t\t\t\twFields.remove(idx);\n\t\t\t\t}\n\t\t\t\twFields.removeEmptyRows();\n\t\t\t\twFields.setRowNums();\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\t\n\n\t\tfdGeneralComp=new FormData();\n\t\tfdGeneralComp.left  = new FormAttachment(0, 0);\n\t\tfdGeneralComp.top   = new FormAttachment(0, 0);\n\t\tfdGeneralComp.right = new FormAttachment(100, 0);\n\t\tfdGeneralComp.bottom= new FormAttachment(100, 0);\n\t\twGeneralComp.setLayoutData(fdGeneralComp);\n\t\t\n\t\twGeneralComp.layout();\n\t\twGeneralTab.setControl(wGeneralComp);\n \t\tprops.setLook(wGeneralComp);\n \t\t\n \t\t\n \t\t\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF GENERAL TAB\n\t\t/////////////////////////////////////////////////////////////\n\t\t\n \t\t\n        \n \t\t//////////////////////////////////////\n\t\t// START OF ADVANCED  TAB   ///\n\t\t/////////////////////////////////////\n\t\t\n\t\t\n\t\t\n\t\twAdvancedTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twAdvancedTab.setText(Messages.getString(\"JobMoveFiles.Tab.Advanced.Label\"));\n\n\t\tFormLayout contentLayout = new FormLayout ();\n\t\tcontentLayout.marginWidth  = 3;\n\t\tcontentLayout.marginHeight = 3;\n\t\t\n\t\twAdvancedComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wAdvancedComp);\n \t\twAdvancedComp.setLayout(contentLayout);\r\n \t\t\r\n \t\t\r\n \t// DestinationFile grouping?\r\n\t\t// ////////////////////////\r\n\t\t// START OF DestinationFile GROUP\r\n\t\t// \r\n\r\n\t\twDestinationFile = new Group(wAdvancedComp, SWT.SHADOW_NONE);\r\n\t\tprops.setLook(wDestinationFile);\r\n\t\twDestinationFile.setText(Messages.getString(\"JobMoveFiles.GroupDestinationFile.Label\"));\r\n\r\n\t\tFormLayout groupLayoutFile = new FormLayout();\r\n\t\tgroupLayoutFile.marginWidth = 10;\r\n\t\tgroupLayoutFile.marginHeight = 10;\r\n\t\twDestinationFile.setLayout(groupLayoutFile);\r\n\t\t\r\n\t\t// Do not keep folder structure?\r\n\t\twlDoNotKeepFolderStructure=new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlDoNotKeepFolderStructure.setText(Messages.getString(\"JobMoveFiles.DoNotKeepFolderStructure.Label\"));\r\n \t\tprops.setLook(wlDoNotKeepFolderStructure);\r\n\t\tfdlDoNotKeepFolderStructure=new FormData();\r\n\t\tfdlDoNotKeepFolderStructure.left = new FormAttachment(0, 0);\r\n\t\tfdlDoNotKeepFolderStructure.top  = new FormAttachment(0, margin);\r\n\t\tfdlDoNotKeepFolderStructure.right= new FormAttachment(middle, -margin);\r\n\t\twlDoNotKeepFolderStructure.setLayoutData(fdlDoNotKeepFolderStructure);\r\n\t\twDoNotKeepFolderStructure=new Button(wDestinationFile, SWT.CHECK);\r\n \t\tprops.setLook(wDoNotKeepFolderStructure);\r\n \t\twDoNotKeepFolderStructure.setToolTipText(Messages.getString(\"JobMoveFiles.DoNotKeepFolderStructure.Tooltip\"));\r\n\t\tfdDoNotKeepFolderStructure=new FormData();\r\n\t\tfdDoNotKeepFolderStructure.left = new FormAttachment(middle, 0);\r\n\t\tfdDoNotKeepFolderStructure.top  = new FormAttachment(0, margin);\r\n\t\tfdDoNotKeepFolderStructure.right= new FormAttachment(100, 0);\r\n\t\twDoNotKeepFolderStructure.setLayoutData(fdDoNotKeepFolderStructure);\r\n\t\twDoNotKeepFolderStructure.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Create multi-part file?\r\n\t\twlAddDate=new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlAddDate.setText(Messages.getString(\"JobMoveFiles.AddDate.Label\"));\r\n \t\tprops.setLook(wlAddDate);\r\n\t\tfdlAddDate=new FormData();\r\n\t\tfdlAddDate.left = new FormAttachment(0, 0);\r\n\t\tfdlAddDate.top  = new FormAttachment(wDoNotKeepFolderStructure, margin);\r\n\t\tfdlAddDate.right= new FormAttachment(middle, -margin);\r\n\t\twlAddDate.setLayoutData(fdlAddDate);\r\n\t\twAddDate=new Button(wDestinationFile, SWT.CHECK);\r\n \t\tprops.setLook(wAddDate);\r\n \t\twAddDate.setToolTipText(Messages.getString(\"JobMoveFiles.AddDate.Tooltip\"));\r\n\t\tfdAddDate=new FormData();\r\n\t\tfdAddDate.left = new FormAttachment(middle, 0);\r\n\t\tfdAddDate.top  = new FormAttachment(wDoNotKeepFolderStructure, margin);\r\n\t\tfdAddDate.right= new FormAttachment(100, 0);\r\n\t\twAddDate.setLayoutData(fdAddDate);\r\n\t\twAddDate.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t\tsetAddDateBeforeExtension();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\t// Create multi-part file?\r\n\t\twlAddTime=new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlAddTime.setText(Messages.getString(\"JobMoveFiles.AddTime.Label\"));\r\n \t\tprops.setLook(wlAddTime);\r\n\t\tfdlAddTime=new FormData();\r\n\t\tfdlAddTime.left = new FormAttachment(0, 0);\r\n\t\tfdlAddTime.top  = new FormAttachment(wAddDate, margin);\r\n\t\tfdlAddTime.right= new FormAttachment(middle, -margin);\r\n\t\twlAddTime.setLayoutData(fdlAddTime);\r\n\t\twAddTime=new Button(wDestinationFile, SWT.CHECK);\r\n \t\tprops.setLook(wAddTime);\r\n \t\twAddTime.setToolTipText(Messages.getString(\"JobMoveFiles.AddTime.Tooltip\"));\r\n\t\tfdAddTime=new FormData();\r\n\t\tfdAddTime.left = new FormAttachment(middle, 0);\r\n\t\tfdAddTime.top  = new FormAttachment(wAddDate, margin);\r\n\t\tfdAddTime.right= new FormAttachment(100, 0);\r\n\t\twAddTime.setLayoutData(fdAddTime);\r\n\t\twAddTime.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t\tsetAddDateBeforeExtension();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// Specify date time format?\r\n\t\twlSpecifyFormat=new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlSpecifyFormat.setText(Messages.getString(\"JobMoveFiles.SpecifyFormat.Label\"));\r\n\t\tprops.setLook(wlSpecifyFormat);\r\n\t\tfdlSpecifyFormat=new FormData();\r\n\t\tfdlSpecifyFormat.left = new FormAttachment(0, 0);\r\n\t\tfdlSpecifyFormat.top  = new FormAttachment(wAddTime, margin);\r\n\t\tfdlSpecifyFormat.right= new FormAttachment(middle, -margin);\r\n\t\twlSpecifyFormat.setLayoutData(fdlSpecifyFormat);\r\n\t\twSpecifyFormat=new Button(wDestinationFile, SWT.CHECK);\r\n\t\tprops.setLook(wSpecifyFormat);\r\n\t\twSpecifyFormat.setToolTipText(Messages.getString(\"JobMoveFiles.SpecifyFormat.Tooltip\"));\r\n\t    fdSpecifyFormat=new FormData();\r\n\t\tfdSpecifyFormat.left = new FormAttachment(middle, 0);\r\n\t\tfdSpecifyFormat.top  = new FormAttachment(wAddTime, margin);\r\n\t\tfdSpecifyFormat.right= new FormAttachment(100, 0);\r\n\t\twSpecifyFormat.setLayoutData(fdSpecifyFormat);\r\n\t\twSpecifyFormat.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t\tsetDateTimeFormat();\r\n\t\t\t\t\tsetAddDateBeforeExtension();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t\r\n\t\t//\tPrepare a list of possible DateTimeFormats...\r\n\t\tString dats[] = Const.getDateFormats();\r\n\t\t\r\n \t\t// DateTimeFormat\r\n\t\twlDateTimeFormat=new Label(wDestinationFile, SWT.RIGHT);\r\n        wlDateTimeFormat.setText(Messages.getString(\"JobMoveFiles.DateTimeFormat.Label\"));\r\n        props.setLook(wlDateTimeFormat);\r\n        fdlDateTimeFormat=new FormData();\r\n        fdlDateTimeFormat.left = new FormAttachment(0, 0);\r\n        fdlDateTimeFormat.top  = new FormAttachment(wSpecifyFormat, margin);\r\n        fdlDateTimeFormat.right= new FormAttachment(middle, -margin);\r\n        wlDateTimeFormat.setLayoutData(fdlDateTimeFormat);\r\n        wDateTimeFormat=new CCombo(wDestinationFile, SWT.BORDER | SWT.READ_ONLY);\r\n        wDateTimeFormat.setEditable(true);\r\n        props.setLook(wDateTimeFormat);\r\n        wDateTimeFormat.addModifyListener(lsMod);\r\n        fdDateTimeFormat=new FormData();\r\n        fdDateTimeFormat.left = new FormAttachment(middle, 0);\r\n        fdDateTimeFormat.top  = new FormAttachment(wSpecifyFormat, margin);\r\n        fdDateTimeFormat.right= new FormAttachment(100, 0);\r\n        wDateTimeFormat.setLayoutData(fdDateTimeFormat);\r\n        for (int x=0;x<dats.length;x++) wDateTimeFormat.add(dats[x]);\r\n        \r\n        \r\n\r\n        // Add Date before extension?\r\n        wlAddDateBeforeExtension = new Label(wDestinationFile, SWT.RIGHT);\r\n        wlAddDateBeforeExtension.setText(Messages.getString(\"JobMoveFiles.AddDateBeforeExtension.Label\"));\r\n        props.setLook(wlAddDateBeforeExtension);\r\n        fdlAddDateBeforeExtension = new FormData();\r\n        fdlAddDateBeforeExtension.left = new FormAttachment(0, 0);\r\n        fdlAddDateBeforeExtension.top = new FormAttachment(wDateTimeFormat, margin);\r\n        fdlAddDateBeforeExtension.right = new FormAttachment(middle, -margin);\r\n        wlAddDateBeforeExtension.setLayoutData(fdlAddDateBeforeExtension);\r\n        wAddDateBeforeExtension = new Button(wDestinationFile, SWT.CHECK);\r\n        props.setLook(wAddDateBeforeExtension);\r\n        wAddDateBeforeExtension.setToolTipText(Messages.getString(\"JobMoveFiles.AddDateBeforeExtension.Tooltip\"));\r\n        fdAddDateBeforeExtension = new FormData();\r\n        fdAddDateBeforeExtension.left = new FormAttachment(middle, 0);\r\n        fdAddDateBeforeExtension.top = new FormAttachment(wDateTimeFormat, margin);\r\n        fdAddDateBeforeExtension.right = new FormAttachment(100, 0);\r\n        wAddDateBeforeExtension.setLayoutData(fdAddDateBeforeExtension);\r\n        wAddDateBeforeExtension.addSelectionListener(new SelectionAdapter()\r\n        {\r\n            public void widgetSelected(SelectionEvent e)\r\n            {\r\n                jobEntry.setChanged();\r\n            }\r\n        });\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tfdDestinationFile = new FormData();\r\n\t\tfdDestinationFile.left = new FormAttachment(0, margin);\r\n\t\tfdDestinationFile.top = new FormAttachment(wName, margin);\r\n\t\tfdDestinationFile.right = new FormAttachment(100, -margin);\r\n\t\twDestinationFile.setLayoutData(fdDestinationFile);\r\n\t\t\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\t\t// / END OF DestinationFile GROUP\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\r\n \t\t\r\n \t\t\r\n\t\t // SuccessOngrouping?\r\n\t     // ////////////////////////\r\n\t     // START OF SUCCESS ON GROUP///\r\n\t     // /\r\n\t    wSuccessOn= new Group(wAdvancedComp, SWT.SHADOW_NONE);\r\n\t    props.setLook(wSuccessOn);\r\n\t    wSuccessOn.setText(Messages.getString(\"JobMoveFiles.SuccessOn.Group.Label\"));\r\n\r\n\t    FormLayout successongroupLayout = new FormLayout();\r\n\t    successongroupLayout.marginWidth = 10;\r\n\t    successongroupLayout.marginHeight = 10;\r\n\r\n\t    wSuccessOn.setLayout(successongroupLayout);\r\n\t    \r\n\r\n\t    //Success Condition\r\n\t  \twlSuccessCondition = new Label(wSuccessOn, SWT.RIGHT);\r\n\t  \twlSuccessCondition.setText(Messages.getString(\"JobMoveFiles.SuccessCondition.Label\"));\r\n\t  \tprops.setLook(wlSuccessCondition);\r\n\t  \tfdlSuccessCondition = new FormData();\r\n\t  \tfdlSuccessCondition.left = new FormAttachment(0, 0);\r\n\t  \tfdlSuccessCondition.right = new FormAttachment(middle, 0);\r\n\t  \tfdlSuccessCondition.top = new FormAttachment(wDestinationFile, 2*margin);\r\n\t  \twlSuccessCondition.setLayoutData(fdlSuccessCondition);\r\n\t  \twSuccessCondition = new CCombo(wSuccessOn, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t  \twSuccessCondition.add(Messages.getString(\"JobMoveFiles.SuccessWhenAllWorksFine.Label\"));\r\n\t  \twSuccessCondition.add(Messages.getString(\"JobMoveFiles.SuccessWhenErrorsLessThan.Label\"));\r\n\t  \twSuccessCondition.select(0); // +1: starts at -1\r\n\t  \t\r\n\t\tprops.setLook(wSuccessCondition);\r\n\t\tfdSuccessCondition= new FormData();\r\n\t\tfdSuccessCondition.left = new FormAttachment(middle, 0);\r\n\t\tfdSuccessCondition.top = new FormAttachment(wDestinationFile, 2*margin);\r\n\t\tfdSuccessCondition.right = new FormAttachment(100, 0);\r\n\t\twSuccessCondition.setLayoutData(fdSuccessCondition);\r\n\t\twSuccessCondition.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tactiveSuccessCondition();\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Success when number of errors less than\r\n\t\twlNrErrorsLessThan= new Label(wSuccessOn, SWT.RIGHT);\r\n\t\twlNrErrorsLessThan.setText(Messages.getString(\"JobMoveFiles.NrErrorsLessThan.Label\"));\r\n\t\tprops.setLook(wlNrErrorsLessThan);\r\n\t\tfdlNrErrorsLessThan= new FormData();\r\n\t\tfdlNrErrorsLessThan.left = new FormAttachment(0, 0);\r\n\t\tfdlNrErrorsLessThan.top = new FormAttachment(wSuccessCondition, margin);\r\n\t\tfdlNrErrorsLessThan.right = new FormAttachment(middle, -margin);\r\n\t\twlNrErrorsLessThan.setLayoutData(fdlNrErrorsLessThan);\r\n\t\t\r\n\t\t\r\n\t\twNrErrorsLessThan= new TextVar(jobMeta,wSuccessOn, SWT.SINGLE | SWT.LEFT | SWT.BORDER, Messages\r\n\t\t\t.getString(\"JobMoveFiles.NrErrorsLessThan.Tooltip\"));\r\n\t\tprops.setLook(wNrErrorsLessThan);\r\n\t\twNrErrorsLessThan.addModifyListener(lsMod);\r\n\t\tfdNrErrorsLessThan= new FormData();\r\n\t\tfdNrErrorsLessThan.left = new FormAttachment(middle, 0);\r\n\t\tfdNrErrorsLessThan.top = new FormAttachment(wSuccessCondition, margin);\r\n\t\tfdNrErrorsLessThan.right = new FormAttachment(100, -margin);\r\n\t\twNrErrorsLessThan.setLayoutData(fdNrErrorsLessThan);\r\n\t\t\r\n\t\t\r\n\r\n\t\t// Do Not process rest of files\r\n\t\twlDoNotProcessRest = new Label(wSuccessOn, SWT.RIGHT);\r\n\t\twlDoNotProcessRest.setText(Messages.getString(\"JobMoveFiles.DoNotProcessRest.Label\"));\r\n\t\tprops.setLook(wlDoNotProcessRest);\r\n\t\tfdlDoNotProcessRest = new FormData();\r\n\t\tfdlDoNotProcessRest.left = new FormAttachment(0, 0);\r\n\t\tfdlDoNotProcessRest.top = new FormAttachment(wNrErrorsLessThan, margin);\r\n\t\tfdlDoNotProcessRest.right = new FormAttachment(middle, -margin);\r\n\t\twlDoNotProcessRest.setLayoutData(fdlDoNotProcessRest);\r\n\t\twDoNotProcessRest = new Button(wSuccessOn, SWT.CHECK);\r\n\t\tprops.setLook(wDoNotProcessRest);\r\n\t\twDoNotProcessRest.setToolTipText(Messages.getString(\"JobMoveFiles.DoNotProcessRest.Tooltip\"));\r\n\t\tfdDoNotProcessRest = new FormData();\r\n\t\tfdDoNotProcessRest.left = new FormAttachment(middle, 0);\r\n\t\tfdDoNotProcessRest.top = new FormAttachment(wNrErrorsLessThan, margin);\r\n\t\tfdDoNotProcessRest.right = new FormAttachment(100, 0);\r\n\t\twDoNotProcessRest.setLayoutData(fdDoNotProcessRest);\r\n\t\twDoNotProcessRest.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t    fdSuccessOn= new FormData();\r\n\t    fdSuccessOn.left = new FormAttachment(0, margin);\r\n\t    fdSuccessOn.top = new FormAttachment(wDestinationFile, margin);\r\n\t    fdSuccessOn.right = new FormAttachment(100, -margin);\r\n\t    wSuccessOn.setLayoutData(fdSuccessOn);\r\n\t     // ///////////////////////////////////////////////////////////\r\n\t     // / END OF Success ON GROUP\r\n\t     // ///////////////////////////////////////////////////////////\r\n\r\n \t\t\r\n \t\t\n \t\t\n \t\t\n\t\t // fileresult grouping?\n\t     // ////////////////////////\n\t     // START OF LOGGING GROUP///\n\t     // /\n\t    wFileResult = new Group(wAdvancedComp, SWT.SHADOW_NONE);\n\t    props.setLook(wFileResult);\n\t    wFileResult.setText(Messages.getString(\"JobMoveFiles.FileResult.Group.Label\"));\n\n\t    FormLayout fileresultgroupLayout = new FormLayout();\n\t    fileresultgroupLayout.marginWidth = 10;\n\t    fileresultgroupLayout.marginHeight = 10;\n\n\t    wFileResult.setLayout(fileresultgroupLayout);\n\t      \n\t      \n\t  \t//Add file to result\n\t\twlAddFileToResult = new Label(wFileResult, SWT.RIGHT);\n\t\twlAddFileToResult.setText(Messages.getString(\"JobMoveFiles.AddFileToResult.Label\"));\n\t\tprops.setLook(wlAddFileToResult);\n\t\tfdlAddFileToResult = new FormData();\n\t\tfdlAddFileToResult.left = new FormAttachment(0, 0);\n\t\tfdlAddFileToResult.top = new FormAttachment(wSuccessOn, margin);\n\t\tfdlAddFileToResult.right = new FormAttachment(middle, -margin);\n\t\twlAddFileToResult.setLayoutData(fdlAddFileToResult);\n\t\twAddFileToResult = new Button(wFileResult, SWT.CHECK);\n\t\tprops.setLook(wAddFileToResult);\n\t\twAddFileToResult.setToolTipText(Messages.getString(\"JobMoveFiles.AddFileToResult.Tooltip\"));\n\t\tfdAddFileToResult = new FormData();\n\t\tfdAddFileToResult.left = new FormAttachment(middle, 0);\n\t\tfdAddFileToResult.top = new FormAttachment(wSuccessOn, margin);\n\t\tfdAddFileToResult.right = new FormAttachment(100, 0);\n\t\twAddFileToResult.setLayoutData(fdAddFileToResult);\n\t\twAddFileToResult.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t      \n\t      \n\t     fdFileResult = new FormData();\n\t     fdFileResult.left = new FormAttachment(0, margin);\n\t     fdFileResult.top = new FormAttachment(wSuccessOn, margin);\n\t     fdFileResult.right = new FormAttachment(100, -margin);\n\t     wFileResult.setLayoutData(fdFileResult);\n\t     // ///////////////////////////////////////////////////////////\n\t     // / END OF FilesResult GROUP\n\t     // ///////////////////////////////////////////////////////////\n\n\t\t\n \t\t\n \t\t\n \t\t\n\t    fdAdvancedComp = new FormData();\n\t\tfdAdvancedComp.left  = new FormAttachment(0, 0);\n \t\tfdAdvancedComp.top   = new FormAttachment(0, 0);\n \t\tfdAdvancedComp.right = new FormAttachment(100, 0);\n \t\tfdAdvancedComp.bottom= new FormAttachment(100, 0);\n \t\twAdvancedComp.setLayoutData(wAdvancedComp);\n\n \t\twAdvancedComp.layout();\n\t\twAdvancedTab.setControl(wAdvancedComp);\n\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF ADVANCED TAB\n\t\t/////////////////////////////////////////////////////////////\n \t\t\n \t\t\n \t\t\n\t\tfdTabFolder = new FormData();\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\n\t\tfdTabFolder.top   = new FormAttachment(wName, margin);\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\n\t\twTabFolder.setLayoutData(fdTabFolder);\n\t\t\n\t\t\n\n\t\twOK = new Button(shell, SWT.PUSH);\n\t\twOK.setText(Messages.getString(\"System.Button.OK\"));\n\t\twCancel = new Button(shell, SWT.PUSH);\n\t\twCancel.setText(Messages.getString(\"System.Button.Cancel\"));\n\n\t\tBaseStepDialog.positionBottomButtons(shell, new Button[] { wOK, wCancel }, margin, wTabFolder);\n\t\t\n\n\t\t// Add listeners\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\n\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twName.addSelectionListener( lsDef );\n\t\twSourceFileFolder.addSelectionListener( lsDef );\n\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\n\t\tgetData();\n\t\tCheckIncludeSubFolders();\r\n\t\tactiveSuccessCondition();\r\n\t\tsetDateTimeFormat();\r\n\t\tactiveSuccessCondition();\r\n\t\tsetAddDateBeforeExtension();\n\t\twTabFolder.setSelection(0);\n\t\tBaseStepDialog.setSize(shell);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn jobEntry;\n\t}","id":12252,"modified_method":"public JobEntryInterface open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, props.getJobsDialogStyle());\n\t\tprops.setLook(shell);\n\t\tJobDialog.setShellImage(shell, jobEntry);\n\t\t\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = jobEntry.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"JobMoveFiles.Title\"));\n\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Filename line\n\t\twlName=new Label(shell, SWT.RIGHT);\n\t\twlName.setText(Messages.getString(\"JobMoveFiles.Name.Label\"));\n\t\tprops.setLook(wlName);\n\t\tfdlName=new FormData();\n\t\tfdlName.left = new FormAttachment(0, 0);\n\t\tfdlName.right= new FormAttachment(middle, -margin);\n\t\tfdlName.top  = new FormAttachment(0, margin);\n\t\twlName.setLayoutData(fdlName);\n\t\twName=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wName);\n\t\twName.addModifyListener(lsMod);\n\t\tfdName=new FormData();\n\t\tfdName.left = new FormAttachment(middle, 0);\n\t\tfdName.top  = new FormAttachment(0, margin);\n\t\tfdName.right= new FormAttachment(100, 0);\n\t\twName.setLayoutData(fdName);\n\t\t\n\t\t\n\t\t\n\t\t  \n        wTabFolder = new CTabFolder(shell, SWT.BORDER);\n \t\tprops.setLook(wTabFolder, Props.WIDGET_STYLE_TAB);\n \t\t\n \t\t//////////////////////////\n\t\t// START OF GENERAL TAB   ///\n\t\t//////////////////////////\n\t\t\n\t\t\n\t\t\n\t\twGeneralTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twGeneralTab.setText(Messages.getString(\"JobMoveFiles.Tab.General.Label\"));\n\t\t\n\t\twGeneralComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wGeneralComp);\n\n\t\tFormLayout generalLayout = new FormLayout();\n\t\tgeneralLayout.marginWidth  = 3;\n\t\tgeneralLayout.marginHeight = 3;\n\t\twGeneralComp.setLayout(generalLayout);\n\t\t\n\n\t\t// SETTINGS grouping?\n\t\t// ////////////////////////\n\t\t// START OF SETTINGS GROUP\n\t\t// \n\n\t\twSettings = new Group(wGeneralComp, SWT.SHADOW_NONE);\n\t\tprops.setLook(wSettings);\n\t\twSettings.setText(Messages.getString(\"JobMoveFiles.Settings.Label\"));\n\n\t\tFormLayout groupLayout = new FormLayout();\n\t\tgroupLayout.marginWidth = 10;\n\t\tgroupLayout.marginHeight = 10;\n\t\twSettings.setLayout(groupLayout);\n\t\t\n\t\twlIncludeSubfolders = new Label(wSettings, SWT.RIGHT);\n\t\twlIncludeSubfolders.setText(Messages.getString(\"JobMoveFiles.IncludeSubfolders.Label\"));\n\t\tprops.setLook(wlIncludeSubfolders);\n\t\tfdlIncludeSubfolders = new FormData();\n\t\tfdlIncludeSubfolders.left = new FormAttachment(0, 0);\n\t\tfdlIncludeSubfolders.top = new FormAttachment(wName, margin);\n\t\tfdlIncludeSubfolders.right = new FormAttachment(middle, -margin);\n\t\twlIncludeSubfolders.setLayoutData(fdlIncludeSubfolders);\n\t\twIncludeSubfolders = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wIncludeSubfolders);\n\t\twIncludeSubfolders.setToolTipText(Messages.getString(\"JobMoveFiles.IncludeSubfolders.Tooltip\"));\n\t\tfdIncludeSubfolders = new FormData();\n\t\tfdIncludeSubfolders.left = new FormAttachment(middle, 0);\n\t\tfdIncludeSubfolders.top = new FormAttachment(wName, margin);\n\t\tfdIncludeSubfolders.right = new FormAttachment(100, 0);\n\t\twIncludeSubfolders.setLayoutData(fdIncludeSubfolders);\n\t\twIncludeSubfolders.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t\tCheckIncludeSubFolders();\n\t\t\t}\n\t\t});\n\t\t\n\n\t\t\n\t\t// Copy empty folders\n\t\twlMoveEmptyFolders = new Label(wSettings, SWT.RIGHT);\n\t\twlMoveEmptyFolders.setText(Messages.getString(\"JobMoveFiles.MoveEmptyFolders.Label\"));\n\t\tprops.setLook(wlMoveEmptyFolders);\n\t\tfdlMoveEmptyFolders = new FormData();\n\t\tfdlMoveEmptyFolders.left = new FormAttachment(0, 0);\n\t\tfdlMoveEmptyFolders.top = new FormAttachment(wIncludeSubfolders, margin);\n\t\tfdlMoveEmptyFolders.right = new FormAttachment(middle, -margin);\n\t\twlMoveEmptyFolders.setLayoutData(fdlMoveEmptyFolders);\n\t\twMoveEmptyFolders = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wMoveEmptyFolders);\n\t\twMoveEmptyFolders.setToolTipText(Messages.getString(\"JobMoveFiles.MoveEmptyFolders.Tooltip\"));\n\t\tfdMoveEmptyFolders = new FormData();\n\t\tfdMoveEmptyFolders.left = new FormAttachment(middle, 0);\n\t\tfdMoveEmptyFolders.top = new FormAttachment(wIncludeSubfolders, margin);\n\t\tfdMoveEmptyFolders.right = new FormAttachment(100, 0);\n\t\twMoveEmptyFolders.setLayoutData(fdMoveEmptyFolders);\n\t\twMoveEmptyFolders.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\t\r\n\t\t\r\n\t\t\n\t\t// previous\n\t\twlPrevious = new Label(wSettings, SWT.RIGHT);\n\t\twlPrevious.setText(Messages.getString(\"JobMoveFiles.Previous.Label\"));\n\t\tprops.setLook(wlPrevious);\n\t\tfdlPrevious = new FormData();\n\t\tfdlPrevious.left = new FormAttachment(0, 0);\n\t\tfdlPrevious.top = new FormAttachment(wMoveEmptyFolders, margin );\n\t\tfdlPrevious.right = new FormAttachment(middle, -margin);\n\t\twlPrevious.setLayoutData(fdlPrevious);\n\t\twPrevious = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wPrevious);\n\t\twPrevious.setSelection(jobEntry.arg_from_previous);\n\t\twPrevious.setToolTipText(Messages.getString(\"JobMoveFiles.Previous.Tooltip\"));\n\t\tfdPrevious = new FormData();\n\t\tfdPrevious.left = new FormAttachment(middle, 0);\n\t\tfdPrevious.top = new FormAttachment(wMoveEmptyFolders, margin );\n\t\tfdPrevious.right = new FormAttachment(100, 0);\n\t\twPrevious.setLayoutData(fdPrevious);\n\t\twPrevious.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\n\t\t\t\tRefreshArgFromPrevious();\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tfdSettings = new FormData();\n\t\tfdSettings.left = new FormAttachment(0, margin);\n\t\tfdSettings.top = new FormAttachment(wName, margin);\n\t\tfdSettings.right = new FormAttachment(100, -margin);\n\t\twSettings.setLayoutData(fdSettings);\n\t\t\n\t\t// ///////////////////////////////////////////////////////////\n\t\t// / END OF SETTINGS GROUP\n\t\t// ///////////////////////////////////////////////////////////\n\n\t\t// SourceFileFolder line\n\t\twlSourceFileFolder=new Label(wGeneralComp, SWT.RIGHT);\n\t\twlSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.SourceFileFolder.Label\"));\n\t\tprops.setLook(wlSourceFileFolder);\n\t\tfdlSourceFileFolder=new FormData();\n\t\tfdlSourceFileFolder.left = new FormAttachment(0, 0);\n\t\tfdlSourceFileFolder.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdlSourceFileFolder.right= new FormAttachment(middle, -margin);\n\t\twlSourceFileFolder.setLayoutData(fdlSourceFileFolder);\n\n\t\t// Browse Source folders button ...\n\t\twbSourceDirectory=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbSourceDirectory);\n\t\twbSourceDirectory.setText(Messages.getString(\"JobMoveFiles.BrowseFolders.Label\"));\n\t\tfdbSourceDirectory=new FormData();\n\t\tfdbSourceDirectory.right= new FormAttachment(100, 0);\n\t\tfdbSourceDirectory.top  = new FormAttachment(wSettings, margin);\n\t\twbSourceDirectory.setLayoutData(fdbSourceDirectory);\n\t\t\n\t\twbSourceDirectory.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t\t{\n\t\t\t\t\tDirectoryDialog ddialog = new DirectoryDialog(shell, SWT.OPEN);\n\t\t\t\t\tif (wSourceFileFolder.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tddialog.setFilterPath(jobMeta.environmentSubstitute(wSourceFileFolder.getText()) );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t // Calling open() will open and run the dialog.\n\t\t\t        // It will return the selected directory, or\n\t\t\t        // null if user cancels\n\t\t\t        String dir = ddialog.open();\n\t\t\t        if (dir != null) {\n\t\t\t          // Set the text box to the new selection\n\t\t\t        \twSourceFileFolder.setText(dir);\n\t\t\t        }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\t\n\t\t// Browse Source files button ...\n\t\twbSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbSourceFileFolder);\n\t\twbSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.BrowseFiles.Label\"));\n\t\tfdbSourceFileFolder=new FormData();\n\t\tfdbSourceFileFolder.right= new FormAttachment(wbSourceDirectory, -margin);\n\t\tfdbSourceFileFolder.top  = new FormAttachment(wSettings, margin);\n\t\twbSourceFileFolder.setLayoutData(fdbSourceFileFolder);\n\t\t\n\t\t// Browse Destination file add button ...\n\t\twbaSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbaSourceFileFolder);\n\t\twbaSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.FilenameAdd.Button\"));\n\t\tfdbaSourceFileFolder=new FormData();\n\t\tfdbaSourceFileFolder.right= new FormAttachment(wbSourceFileFolder, -margin);\n\t\tfdbaSourceFileFolder.top  = new FormAttachment(wSettings, margin);\n\t\twbaSourceFileFolder.setLayoutData(fdbaSourceFileFolder);\n\n\t\twSourceFileFolder=new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twSourceFileFolder.setToolTipText(Messages.getString(\"JobMoveFiles.SourceFileFolder.Tooltip\"));\n\t\t\n\t\tprops.setLook(wSourceFileFolder);\n\t\twSourceFileFolder.addModifyListener(lsMod);\n\t\tfdSourceFileFolder=new FormData();\n\t\tfdSourceFileFolder.left = new FormAttachment(middle, 0);\n\t\tfdSourceFileFolder.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdSourceFileFolder.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twSourceFileFolder.setLayoutData(fdSourceFileFolder);\n\n\t\t// Whenever something changes, set the tooltip to the expanded version:\n\t\twSourceFileFolder.addModifyListener(new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\twSourceFileFolder.setToolTipText(jobMeta.environmentSubstitute(wSourceFileFolder.getText() ) );\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\twbSourceFileFolder.addSelectionListener\n\t\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\tif (wSourceFileFolder.getText()!=null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wSourceFileFolder.getText()) );\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t{\n\t\t\t\t\twSourceFileFolder.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t);\n\t\t\n\t\t// Destination\n\t\twlDestinationFileFolder = new Label(wGeneralComp, SWT.RIGHT);\n\t\twlDestinationFileFolder.setText(Messages.getString(\"JobMoveFiles.DestinationFileFolder.Label\"));\n\t\tprops.setLook(wlDestinationFileFolder);\n\t\tfdlDestinationFileFolder = new FormData();\n\t\tfdlDestinationFileFolder.left = new FormAttachment(0, 0);\n\t\tfdlDestinationFileFolder.top = new FormAttachment(wSourceFileFolder, margin);\n\t\tfdlDestinationFileFolder.right = new FormAttachment(middle, -margin);\n\t\twlDestinationFileFolder.setLayoutData(fdlDestinationFileFolder);\n\t\t\n\t\t\n\t\t\n\t\t// Browse Destination folders button ...\n\t\twbDestinationDirectory=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbDestinationDirectory);\n\t\twbDestinationDirectory.setText(Messages.getString(\"JobMoveFiles.BrowseFolders.Label\"));\n\t\tfdbDestinationDirectory=new FormData();\n\t\tfdbDestinationDirectory.right= new FormAttachment(100, 0);\n\t\tfdbDestinationDirectory.top  = new FormAttachment(wSourceFileFolder, margin);\n\t\twbDestinationDirectory.setLayoutData(fdbDestinationDirectory);\n\t\t\n\t\t\n\t\twbDestinationDirectory.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t\t{\n\t\t\t\t\tDirectoryDialog ddialog = new DirectoryDialog(shell, SWT.OPEN);\n\t\t\t\t\tif (wDestinationFileFolder.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tddialog.setFilterPath(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()) );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t // Calling open() will open and run the dialog.\n\t\t\t        // It will return the selected directory, or\n\t\t\t        // null if user cancels\n\t\t\t        String dir = ddialog.open();\n\t\t\t        if (dir != null) {\n\t\t\t          // Set the text box to the new selection\n\t\t\t        \twDestinationFileFolder.setText(dir);\n\t\t\t        }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t// Browse Destination file browse button ...\n\t\twbDestinationFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbDestinationFileFolder);\n\t\twbDestinationFileFolder.setText(Messages.getString(\"JobMoveFiles.BrowseFiles.Label\"));\n\t\tfdbDestinationFileFolder=new FormData();\n\t\tfdbDestinationFileFolder.right= new FormAttachment(wbDestinationDirectory, -margin);\n\t\tfdbDestinationFileFolder.top  = new FormAttachment(wSourceFileFolder, margin);\n\t\twbDestinationFileFolder.setLayoutData(fdbDestinationFileFolder);\n\t\t\n\t\t\t\t\n\t\t\n\t\twDestinationFileFolder = new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER); \n\t\twDestinationFileFolder.setToolTipText(Messages.getString(\"JobMoveFiles.DestinationFileFolder.Tooltip\"));\n\t\tprops.setLook(wDestinationFileFolder);\n\t\twDestinationFileFolder.addModifyListener(lsMod);\n\t\tfdDestinationFileFolder = new FormData();\n\t\tfdDestinationFileFolder.left = new FormAttachment(middle, 0);\n\t\tfdDestinationFileFolder.top = new FormAttachment(wSourceFileFolder, margin);\n\t\tfdDestinationFileFolder.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twDestinationFileFolder.setLayoutData(fdDestinationFileFolder);\n\t\t\n\t\twbDestinationFileFolder.addSelectionListener\n\t\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\tif (wDestinationFileFolder.getText()!=null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wDestinationFileFolder.getText()) );\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t{\n\t\t\t\t\twDestinationFileFolder.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\t// Buttons to the right of the screen...\n\t\twbdSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbdSourceFileFolder);\n\t\twbdSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.FilenameDelete.Button\"));\n\t\twbdSourceFileFolder.setToolTipText(Messages.getString(\"JobMoveFiles.FilenameDelete.Tooltip\"));\n\t\tfdbdSourceFileFolder=new FormData();\n\t\tfdbdSourceFileFolder.right = new FormAttachment(100, 0);\n\t\tfdbdSourceFileFolder.top  = new FormAttachment (wDestinationFileFolder, 40);\n\t\twbdSourceFileFolder.setLayoutData(fdbdSourceFileFolder);\n\n\t\twbeSourceFileFolder=new Button(wGeneralComp, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbeSourceFileFolder);\n\t\twbeSourceFileFolder.setText(Messages.getString(\"JobMoveFiles.FilenameEdit.Button\"));\n\t\twbeSourceFileFolder.setToolTipText(Messages.getString(\"JobMoveFiles.FilenameEdit.Tooltip\"));\n\t\tfdbeSourceFileFolder=new FormData();\n\t\tfdbeSourceFileFolder.right = new FormAttachment(100, 0);\n\t\tfdbeSourceFileFolder.left = new FormAttachment(wbdSourceFileFolder, 0, SWT.LEFT);\n\t\tfdbeSourceFileFolder.top  = new FormAttachment (wbdSourceFileFolder, margin);\n\t\twbeSourceFileFolder.setLayoutData(fdbeSourceFileFolder);\n\t\t\n\t\t\n\t\t\n\t\t// Wildcard\n\t\twlWildcard = new Label(wGeneralComp, SWT.RIGHT);\n\t\twlWildcard.setText(Messages.getString(\"JobMoveFiles.Wildcard.Label\"));\n\t\tprops.setLook(wlWildcard);\n\t\tfdlWildcard = new FormData();\n\t\tfdlWildcard.left = new FormAttachment(0, 0);\n\t\tfdlWildcard.top = new FormAttachment(wDestinationFileFolder, margin);\n\t\tfdlWildcard.right = new FormAttachment(middle, -margin);\n\t\twlWildcard.setLayoutData(fdlWildcard);\n\t\t\n\t\twWildcard = new TextVar(jobMeta, wGeneralComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twWildcard.setToolTipText(Messages.getString(\"JobMoveFiles.Wildcard.Tooltip\"));\n\t\tprops.setLook(wWildcard);\n\t\twWildcard.addModifyListener(lsMod);\n\t\tfdWildcard = new FormData();\n\t\tfdWildcard.left = new FormAttachment(middle, 0);\n\t\tfdWildcard.top = new FormAttachment(wDestinationFileFolder, margin);\n\t\tfdWildcard.right= new FormAttachment(wbSourceFileFolder, -55);\n\t\twWildcard.setLayoutData(fdWildcard);\n\n\t\twlFields = new Label(wGeneralComp, SWT.NONE);\n\t\twlFields.setText(Messages.getString(\"JobMoveFiles.Fields.Label\"));\n\t\tprops.setLook(wlFields);\n\t\tfdlFields = new FormData();\n\t\tfdlFields.left = new FormAttachment(0, 0);\n\t\tfdlFields.right= new FormAttachment(middle, -margin);\n\t\tfdlFields.top = new FormAttachment(wWildcard,margin);\n\t\twlFields.setLayoutData(fdlFields);\n\n\t\tint rows = jobEntry.source_filefolder == null\n\t\t\t? 1\n\t\t\t: (jobEntry.source_filefolder.length == 0\n\t\t\t? 0\n\t\t\t: jobEntry.source_filefolder.length);\n\t\tfinal int FieldsRows = rows;\n\n\t\tColumnInfo[] colinf=new ColumnInfo[]\n\t\t\t{\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobMoveFiles.Fields.SourceFileFolder.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobMoveFiles.Fields.DestinationFileFolder.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobMoveFiles.Fields.Wildcard.Label\"), ColumnInfo.COLUMN_TYPE_TEXT,    false ),\n\t\t\t};\n\n\t\tcolinf[0].setUsingVariables(true);\n\t\tcolinf[0].setToolTip(Messages.getString(\"JobMoveFiles.Fields.SourceFileFolder.Tooltip\"));\n\t\tcolinf[1].setUsingVariables(true);\n\t\tcolinf[1].setToolTip(Messages.getString(\"JobMoveFiles.Fields.DestinationFileFolder.Tooltip\"));\n\t\tcolinf[2].setUsingVariables(true);\n\t\tcolinf[2].setToolTip(Messages.getString(\"JobMoveFiles.Fields.Wildcard.Tooltip\"));\n\n\t\twFields = new TableView(jobMeta, wGeneralComp, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, colinf,\tFieldsRows, lsMod, props);\n\n\t\tfdFields = new FormData();\n\t\tfdFields.left = new FormAttachment(0, 0);\n\t\tfdFields.top = new FormAttachment(wlFields, margin);\n\t\tfdFields.right = new FormAttachment(100, -75);\n\t\tfdFields.bottom = new FormAttachment(100, -margin);\n\t\twFields.setLayoutData(fdFields);\n\n\t\tRefreshArgFromPrevious();\n\n\t\t// Add the file to the list of files...\n\t\tSelectionAdapter selA = new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\twFields.add(new String[] { wSourceFileFolder.getText(), wDestinationFileFolder.getText(), wWildcard.getText() } );\n\t\t\t\twSourceFileFolder.setText(\"\");\n\t\t\t\twDestinationFileFolder.setText(\"\");\n\t\t\t\twWildcard.setText(\"\");\n\t\t\t\twFields.removeEmptyRows();\n\t\t\t\twFields.setRowNums();\n\t\t\t\twFields.optWidth(true);\n\t\t\t}\n\t\t};\n\t\twbaSourceFileFolder.addSelectionListener(selA);\n\t\twSourceFileFolder.addSelectionListener(selA);\n\n\t\t// Delete files from the list of files...\n\t\twbdSourceFileFolder.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\tint idx[] = wFields.getSelectionIndices();\n\t\t\t\twFields.remove(idx);\n\t\t\t\twFields.removeEmptyRows();\n\t\t\t\twFields.setRowNums();\n\t\t\t}\n\t\t});\n\n\t\t// Edit the selected file & remove from the list...\n\t\twbeSourceFileFolder.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\tint idx = wFields.getSelectionIndex();\n\t\t\t\tif (idx>=0)\n\t\t\t\t{\n\t\t\t\t\tString string[] = wFields.getItem(idx);\n\t\t\t\t\twSourceFileFolder.setText(string[0]);\n\t\t\t\t\twDestinationFileFolder.setText(string[1]);\n\t\t\t\t\twWildcard.setText(string[2]);\n\t\t\t\t\twFields.remove(idx);\n\t\t\t\t}\n\t\t\t\twFields.removeEmptyRows();\n\t\t\t\twFields.setRowNums();\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\t\n\n\t\tfdGeneralComp=new FormData();\n\t\tfdGeneralComp.left  = new FormAttachment(0, 0);\n\t\tfdGeneralComp.top   = new FormAttachment(0, 0);\n\t\tfdGeneralComp.right = new FormAttachment(100, 0);\n\t\tfdGeneralComp.bottom= new FormAttachment(100, 0);\n\t\twGeneralComp.setLayoutData(fdGeneralComp);\n\t\t\n\t\twGeneralComp.layout();\n\t\twGeneralTab.setControl(wGeneralComp);\n \t\tprops.setLook(wGeneralComp);\n \t\t\n \t\t\n \t\t\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF GENERAL TAB\n\t\t/////////////////////////////////////////////////////////////\n\t\t\r\n \t\t//////////////////////////////////////\r\n\t\t// START OF DESTINATION FILE  TAB   ///\r\n\t\t/////////////////////////////////////\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\twDestinationFileTab=new CTabItem(wTabFolder, SWT.NONE);\r\n\t\twDestinationFileTab.setText(Messages.getString(\"JobMoveFiles.DestinationFileTab.Label\"));\r\n\r\n\t\tFormLayout DestcontentLayout = new FormLayout ();\r\n\t\tDestcontentLayout.marginWidth  = 3;\r\n\t\tDestcontentLayout.marginHeight = 3;\r\n\t\t\r\n\t\twDestinationFileComp = new Composite(wTabFolder, SWT.NONE);\r\n \t\tprops.setLook(wDestinationFileComp);\r\n \t\twDestinationFileComp.setLayout(DestcontentLayout);\r\n \t\t\r\n \t\t // DestinationFile grouping?\r\n\t\t// ////////////////////////\r\n\t\t// START OF DestinationFile GROUP\r\n\t\t// \r\n\r\n\t\twDestinationFile = new Group(wDestinationFileComp, SWT.SHADOW_NONE);\r\n\t\tprops.setLook(wDestinationFile);\r\n\t\twDestinationFile.setText(Messages.getString(\"JobMoveFiles.GroupDestinationFile.Label\"));\r\n\r\n\t\tFormLayout groupLayoutFile = new FormLayout();\r\n\t\tgroupLayoutFile.marginWidth = 10;\r\n\t\tgroupLayoutFile.marginHeight = 10;\r\n\t\twDestinationFile.setLayout(groupLayoutFile);\r\n\t\t\r\n\t\t\r\n\r\n\t\t// Create destination folder/parent folder\r\n\t\twlCreateDestinationFolder = new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlCreateDestinationFolder.setText(Messages.getString(\"JobMoveFiles.CreateDestinationFolder.Label\"));\r\n\t\tprops.setLook(wlCreateDestinationFolder);\r\n\t\tfdlCreateDestinationFolder = new FormData();\r\n\t\tfdlCreateDestinationFolder.left = new FormAttachment(0, 0);\r\n\t\tfdlCreateDestinationFolder.top = new FormAttachment(0, margin);\r\n\t\tfdlCreateDestinationFolder.right = new FormAttachment(middle, -margin);\r\n\t\twlCreateDestinationFolder.setLayoutData(fdlCreateDestinationFolder);\r\n\t\twCreateDestinationFolder = new Button(wDestinationFile, SWT.CHECK);\r\n\t\tprops.setLook(wCreateDestinationFolder);\r\n\t\twCreateDestinationFolder.setToolTipText(Messages.getString(\"JobMoveFiles.CreateDestinationFolder.Tooltip\"));\r\n\t\tfdCreateDestinationFolder = new FormData();\r\n\t\tfdCreateDestinationFolder.left = new FormAttachment(middle, 0);\r\n\t\tfdCreateDestinationFolder.top = new FormAttachment(0, margin);\r\n\t\tfdCreateDestinationFolder.right = new FormAttachment(100, 0);\r\n\t\twCreateDestinationFolder.setLayoutData(fdCreateDestinationFolder);\r\n\t\twCreateDestinationFolder.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Destination is a file?\r\n\t\twlDestinationIsAFile = new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlDestinationIsAFile.setText(Messages.getString(\"JobMoveFiles.DestinationIsAFile.Label\"));\r\n\t\tprops.setLook(wlDestinationIsAFile);\r\n\t\tfdlDestinationIsAFile = new FormData();\r\n\t\tfdlDestinationIsAFile.left = new FormAttachment(0, 0);\r\n\t\tfdlDestinationIsAFile.top = new FormAttachment(wCreateDestinationFolder, margin);\r\n\t\tfdlDestinationIsAFile.right = new FormAttachment(middle, -margin);\r\n\t\twlDestinationIsAFile.setLayoutData(fdlDestinationIsAFile);\r\n\t\twDestinationIsAFile = new Button(wDestinationFile, SWT.CHECK);\r\n\t\tprops.setLook(wDestinationIsAFile);\r\n\t\twDestinationIsAFile.setToolTipText(Messages.getString(\"JobMoveFiles.DestinationIsAFile.Tooltip\"));\r\n\t\tfdDestinationIsAFile = new FormData();\r\n\t\tfdDestinationIsAFile.left = new FormAttachment(middle, 0);\r\n\t\tfdDestinationIsAFile.top = new FormAttachment(wCreateDestinationFolder, margin);\r\n\t\tfdDestinationIsAFile.right = new FormAttachment(100, 0);\r\n\t\twDestinationIsAFile.setLayoutData(fdDestinationIsAFile);\r\n\t\twDestinationIsAFile.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Do not keep folder structure?\r\n\t\twlDoNotKeepFolderStructure=new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlDoNotKeepFolderStructure.setText(Messages.getString(\"JobMoveFiles.DoNotKeepFolderStructure.Label\"));\r\n \t\tprops.setLook(wlDoNotKeepFolderStructure);\r\n\t\tfdlDoNotKeepFolderStructure=new FormData();\r\n\t\tfdlDoNotKeepFolderStructure.left = new FormAttachment(0, 0);\r\n\t\tfdlDoNotKeepFolderStructure.top  = new FormAttachment(wDestinationIsAFile, margin);\r\n\t\tfdlDoNotKeepFolderStructure.right= new FormAttachment(middle, -margin);\r\n\t\twlDoNotKeepFolderStructure.setLayoutData(fdlDoNotKeepFolderStructure);\r\n\t\twDoNotKeepFolderStructure=new Button(wDestinationFile, SWT.CHECK);\r\n \t\tprops.setLook(wDoNotKeepFolderStructure);\r\n \t\twDoNotKeepFolderStructure.setToolTipText(Messages.getString(\"JobMoveFiles.DoNotKeepFolderStructure.Tooltip\"));\r\n\t\tfdDoNotKeepFolderStructure=new FormData();\r\n\t\tfdDoNotKeepFolderStructure.left = new FormAttachment(middle, 0);\r\n\t\tfdDoNotKeepFolderStructure.top  = new FormAttachment(wDestinationIsAFile, margin);\r\n\t\tfdDoNotKeepFolderStructure.right= new FormAttachment(100, 0);\r\n\t\twDoNotKeepFolderStructure.setLayoutData(fdDoNotKeepFolderStructure);\r\n\t\twDoNotKeepFolderStructure.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Create multi-part file?\r\n\t\twlAddDate=new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlAddDate.setText(Messages.getString(\"JobMoveFiles.AddDate.Label\"));\r\n \t\tprops.setLook(wlAddDate);\r\n\t\tfdlAddDate=new FormData();\r\n\t\tfdlAddDate.left = new FormAttachment(0, 0);\r\n\t\tfdlAddDate.top  = new FormAttachment(wDoNotKeepFolderStructure, margin);\r\n\t\tfdlAddDate.right= new FormAttachment(middle, -margin);\r\n\t\twlAddDate.setLayoutData(fdlAddDate);\r\n\t\twAddDate=new Button(wDestinationFile, SWT.CHECK);\r\n \t\tprops.setLook(wAddDate);\r\n \t\twAddDate.setToolTipText(Messages.getString(\"JobMoveFiles.AddDate.Tooltip\"));\r\n\t\tfdAddDate=new FormData();\r\n\t\tfdAddDate.left = new FormAttachment(middle, 0);\r\n\t\tfdAddDate.top  = new FormAttachment(wDoNotKeepFolderStructure, margin);\r\n\t\tfdAddDate.right= new FormAttachment(100, 0);\r\n\t\twAddDate.setLayoutData(fdAddDate);\r\n\t\twAddDate.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t\tsetAddDateBeforeExtension();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\t// Create multi-part file?\r\n\t\twlAddTime=new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlAddTime.setText(Messages.getString(\"JobMoveFiles.AddTime.Label\"));\r\n \t\tprops.setLook(wlAddTime);\r\n\t\tfdlAddTime=new FormData();\r\n\t\tfdlAddTime.left = new FormAttachment(0, 0);\r\n\t\tfdlAddTime.top  = new FormAttachment(wAddDate, margin);\r\n\t\tfdlAddTime.right= new FormAttachment(middle, -margin);\r\n\t\twlAddTime.setLayoutData(fdlAddTime);\r\n\t\twAddTime=new Button(wDestinationFile, SWT.CHECK);\r\n \t\tprops.setLook(wAddTime);\r\n \t\twAddTime.setToolTipText(Messages.getString(\"JobMoveFiles.AddTime.Tooltip\"));\r\n\t\tfdAddTime=new FormData();\r\n\t\tfdAddTime.left = new FormAttachment(middle, 0);\r\n\t\tfdAddTime.top  = new FormAttachment(wAddDate, margin);\r\n\t\tfdAddTime.right= new FormAttachment(100, 0);\r\n\t\twAddTime.setLayoutData(fdAddTime);\r\n\t\twAddTime.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t\tsetAddDateBeforeExtension();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// Specify date time format?\r\n\t\twlSpecifyFormat=new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlSpecifyFormat.setText(Messages.getString(\"JobMoveFiles.SpecifyFormat.Label\"));\r\n\t\tprops.setLook(wlSpecifyFormat);\r\n\t\tfdlSpecifyFormat=new FormData();\r\n\t\tfdlSpecifyFormat.left = new FormAttachment(0, 0);\r\n\t\tfdlSpecifyFormat.top  = new FormAttachment(wAddTime, margin);\r\n\t\tfdlSpecifyFormat.right= new FormAttachment(middle, -margin);\r\n\t\twlSpecifyFormat.setLayoutData(fdlSpecifyFormat);\r\n\t\twSpecifyFormat=new Button(wDestinationFile, SWT.CHECK);\r\n\t\tprops.setLook(wSpecifyFormat);\r\n\t\twSpecifyFormat.setToolTipText(Messages.getString(\"JobMoveFiles.SpecifyFormat.Tooltip\"));\r\n\t    fdSpecifyFormat=new FormData();\r\n\t\tfdSpecifyFormat.left = new FormAttachment(middle, 0);\r\n\t\tfdSpecifyFormat.top  = new FormAttachment(wAddTime, margin);\r\n\t\tfdSpecifyFormat.right= new FormAttachment(100, 0);\r\n\t\twSpecifyFormat.setLayoutData(fdSpecifyFormat);\r\n\t\twSpecifyFormat.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t\tsetDateTimeFormat();\r\n\t\t\t\t\tsetAddDateBeforeExtension();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t\r\n \t\t// DateTimeFormat\r\n\t\twlDateTimeFormat=new Label(wDestinationFile, SWT.RIGHT);\r\n        wlDateTimeFormat.setText(Messages.getString(\"JobMoveFiles.DateTimeFormat.Label\"));\r\n        props.setLook(wlDateTimeFormat);\r\n        fdlDateTimeFormat=new FormData();\r\n        fdlDateTimeFormat.left = new FormAttachment(0, 0);\r\n        fdlDateTimeFormat.top  = new FormAttachment(wSpecifyFormat, margin);\r\n        fdlDateTimeFormat.right= new FormAttachment(middle, -margin);\r\n        wlDateTimeFormat.setLayoutData(fdlDateTimeFormat);\r\n        wDateTimeFormat=new CCombo(wDestinationFile, SWT.BORDER | SWT.READ_ONLY);\r\n        wDateTimeFormat.setEditable(true);\r\n        props.setLook(wDateTimeFormat);\r\n        wDateTimeFormat.addModifyListener(lsMod);\r\n        fdDateTimeFormat=new FormData();\r\n        fdDateTimeFormat.left = new FormAttachment(middle, 0);\r\n        fdDateTimeFormat.top  = new FormAttachment(wSpecifyFormat, margin);\r\n        fdDateTimeFormat.right= new FormAttachment(100, 0);\r\n        wDateTimeFormat.setLayoutData(fdDateTimeFormat);\r\n\t\t//\tPrepare a list of possible DateTimeFormats...\r\n\t\tString dats[] = Const.getDateFormats();\r\n        for (int x=0;x<dats.length;x++) wDateTimeFormat.add(dats[x]);\r\n        \r\n        \r\n\r\n        // Add Date before extension?\r\n        wlAddDateBeforeExtension = new Label(wDestinationFile, SWT.RIGHT);\r\n        wlAddDateBeforeExtension.setText(Messages.getString(\"JobMoveFiles.AddDateBeforeExtension.Label\"));\r\n        props.setLook(wlAddDateBeforeExtension);\r\n        fdlAddDateBeforeExtension = new FormData();\r\n        fdlAddDateBeforeExtension.left = new FormAttachment(0, 0);\r\n        fdlAddDateBeforeExtension.top = new FormAttachment(wDateTimeFormat, margin);\r\n        fdlAddDateBeforeExtension.right = new FormAttachment(middle, -margin);\r\n        wlAddDateBeforeExtension.setLayoutData(fdlAddDateBeforeExtension);\r\n        wAddDateBeforeExtension = new Button(wDestinationFile, SWT.CHECK);\r\n        props.setLook(wAddDateBeforeExtension);\r\n        wAddDateBeforeExtension.setToolTipText(Messages.getString(\"JobMoveFiles.AddDateBeforeExtension.Tooltip\"));\r\n        fdAddDateBeforeExtension = new FormData();\r\n        fdAddDateBeforeExtension.left = new FormAttachment(middle, 0);\r\n        fdAddDateBeforeExtension.top = new FormAttachment(wDateTimeFormat, margin);\r\n        fdAddDateBeforeExtension.right = new FormAttachment(100, 0);\r\n        wAddDateBeforeExtension.setLayoutData(fdAddDateBeforeExtension);\r\n        wAddDateBeforeExtension.addSelectionListener(new SelectionAdapter()\r\n        {\r\n            public void widgetSelected(SelectionEvent e)\r\n            {\r\n                jobEntry.setChanged();\r\n            }\r\n        });\r\n\t\t\r\n        // If File Exists\r\n\t\twlIfFileExists = new Label(wDestinationFile, SWT.RIGHT);\r\n\t\twlIfFileExists.setText(Messages.getString(\"JobMoveFiles.IfFileExists.Label\"));\r\n\t\tprops.setLook(wlIfFileExists);\r\n\t\tfdlIfFileExists = new FormData();\r\n\t\tfdlIfFileExists.left = new FormAttachment(0, 0);\r\n\t\tfdlIfFileExists.right = new FormAttachment(middle, 0);\r\n\t\tfdlIfFileExists.top = new FormAttachment(wAddDateBeforeExtension, margin);\r\n\t\twlIfFileExists.setLayoutData(fdlIfFileExists);\r\n\t\twIfFileExists = new CCombo(wDestinationFile, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t\twIfFileExists.add(Messages.getString(\"JobMoveFiles.Do_Nothing_IfFileExists.Label\"));\r\n\t\twIfFileExists.add(Messages.getString(\"JobMoveFiles.Overwrite_File_IfFileExists.Label\"));\r\n\t\twIfFileExists.add(Messages.getString(\"JobMoveFiles.Unique_Name_IfFileExists.Label\"));\r\n\t\twIfFileExists.add(Messages.getString(\"JobMoveFiles.Delete_Source_File_IfFileExists.Label\"));\r\n\t\twIfFileExists.add(Messages.getString(\"JobMoveFiles.Move_To_Folder_IfFileExists.Label\"));\r\n\t\twIfFileExists.add(Messages.getString(\"JobMoveFiles.Fail_IfFileExists.Label\"));\r\n\t\twIfFileExists.select(0); // +1: starts at -1\r\n\r\n\t\tprops.setLook(wIfFileExists);\r\n\t\tfdIfFileExists= new FormData();\r\n\t\tfdIfFileExists.left = new FormAttachment(middle, 0);\r\n\t\tfdIfFileExists.top = new FormAttachment(wAddDateBeforeExtension, margin);\r\n\t\tfdIfFileExists.right = new FormAttachment(100, 0);\r\n\t\twIfFileExists.setLayoutData(fdIfFileExists);\r\n\r\n\t\tfdIfFileExists = new FormData();\r\n\t\tfdIfFileExists.left = new FormAttachment(middle, 0);\r\n\t\tfdIfFileExists.top = new FormAttachment(wAddDateBeforeExtension, margin);\r\n\t\tfdIfFileExists.right = new FormAttachment(100, 0);\r\n\t\twIfFileExists.setLayoutData(fdIfFileExists);\r\n\t\t\r\n\t\twIfFileExists.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tactiveDestinationFolder();\r\n\t\t\t\tsetMovedDateTimeFormat();\r\n\t\t\t\t//setAddDateBeforeExtension();\r\n\t\t\t\tsetAddMovedDateBeforeExtension();\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\t\r\n\t\t\r\n\t\tfdDestinationFile = new FormData();\r\n\t\tfdDestinationFile.left = new FormAttachment(0, margin);\r\n\t\tfdDestinationFile.top = new FormAttachment(wName, margin);\r\n\t\tfdDestinationFile.right = new FormAttachment(100, -margin);\r\n\t\twDestinationFile.setLayoutData(fdDestinationFile);\r\n\t\t\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\t\t// / END OF DestinationFile GROUP\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\r\n\t\t // MoveTo grouping?\r\n\t\t// ////////////////////////\r\n\t\t// START OF MoveTo GROUP\r\n\t\t// \r\n\r\n\t\twMoveToGroup = new Group(wDestinationFileComp, SWT.SHADOW_NONE);\r\n\t\tprops.setLook(wMoveToGroup);\r\n\t\twMoveToGroup.setText(Messages.getString(\"JobMoveFiles.GroupMoveToGroup.Label\"));\r\n\r\n\t\tFormLayout MovetoLayoutFile = new FormLayout();\r\n\t\tMovetoLayoutFile.marginWidth = 10;\r\n\t\tMovetoLayoutFile.marginHeight = 10;\r\n\t\twMoveToGroup.setLayout(MovetoLayoutFile);\r\n\t\t\r\n\t\t// DestinationFolder line\r\n\t\twlDestinationFolder=new Label(wMoveToGroup, SWT.RIGHT);\r\n\t\twlDestinationFolder.setText(Messages.getString(\"JobMoveFiles.DestinationFolder.Label\"));\r\n \t\tprops.setLook(wlDestinationFolder);\r\n\t\tfdlDestinationFolder=new FormData();\r\n\t\tfdlDestinationFolder.left = new FormAttachment(0, 0);\r\n\t\tfdlDestinationFolder.top  = new FormAttachment(wDestinationFile, margin);\r\n\t\tfdlDestinationFolder.right= new FormAttachment(middle, -margin);\r\n\t\twlDestinationFolder.setLayoutData(fdlDestinationFolder);\r\n\r\n\t\twbDestinationFolder=new Button(wMoveToGroup, SWT.PUSH| SWT.CENTER);\r\n \t\tprops.setLook(wbDestinationFolder);\r\n\t\twbDestinationFolder.setText(Messages.getString(\"System.Button.Browse\"));\r\n\t\tfdbDestinationFolder=new FormData();\r\n\t\tfdbDestinationFolder.right= new FormAttachment(100, 0);\r\n\t\tfdbDestinationFolder.top  = new FormAttachment(wDestinationFile, 0);\r\n\t\twbDestinationFolder.setLayoutData(fdbDestinationFolder);\r\n\r\n\t\twDestinationFolder=new TextVar(jobMeta, wMoveToGroup, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n \t\tprops.setLook(wDestinationFolder);\r\n\t\twDestinationFolder.addModifyListener(lsMod);\r\n\t\tfdDestinationFolder=new FormData();\r\n\t\tfdDestinationFolder.left = new FormAttachment(middle, 0);\r\n\t\tfdDestinationFolder.top  = new FormAttachment(wDestinationFile, margin);\r\n\t\tfdDestinationFolder.right= new FormAttachment(wbDestinationFolder, -margin);\r\n\t\twDestinationFolder.setLayoutData(fdDestinationFolder);\r\n\r\n\t\t// Whenever something changes, set the tooltip to the expanded version:\r\n\t\twDestinationFolder.addModifyListener(new ModifyListener()\r\n\t\t\t{\r\n\t\t\t\tpublic void modifyText(ModifyEvent e)\r\n\t\t\t\t{\r\n\t\t\t\t\twDestinationFolder.setToolTipText(jobMeta.environmentSubstitute( wDestinationFolder.getText() ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\twbDestinationFolder.addSelectionListener\r\n\t\t(\r\n\t\t\tnew SelectionAdapter()\r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t\t{\r\n\t\t\t\t\tDirectoryDialog dialog = new DirectoryDialog(shell, SWT.OPEN);\r\n\t\t\t\t\tif (wDestinationFolder.getText()!=null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdialog.setFilterPath(jobMeta.environmentSubstitute(wDestinationFolder.getText()) );\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tString dir=dialog.open();\r\n\t\t\t\t\tif(dir!=null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twDestinationFolder.setText(dir);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// Create multi-part file?\r\n\t\twlAddMovedDate=new Label(wMoveToGroup, SWT.RIGHT);\r\n\t\twlAddMovedDate.setText(Messages.getString(\"JobMoveFiles.AddMovedDate.Label\"));\r\n \t\tprops.setLook(wlAddMovedDate);\r\n\t\tfdlAddMovedDate=new FormData();\r\n\t\tfdlAddMovedDate.left = new FormAttachment(0, 0);\r\n\t\tfdlAddMovedDate.top  = new FormAttachment(wDestinationFolder, margin);\r\n\t\tfdlAddMovedDate.right= new FormAttachment(middle, -margin);\r\n\t\twlAddMovedDate.setLayoutData(fdlAddMovedDate);\r\n\t\twAddMovedDate=new Button(wMoveToGroup, SWT.CHECK);\r\n \t\tprops.setLook(wAddMovedDate);\r\n \t\twAddMovedDate.setToolTipText(Messages.getString(\"JobMoveFiles.AddMovedDate.Tooltip\"));\r\n\t\tfdAddMovedDate=new FormData();\r\n\t\tfdAddMovedDate.left = new FormAttachment(middle, 0);\r\n\t\tfdAddMovedDate.top  = new FormAttachment(wDestinationFolder, margin);\r\n\t\tfdAddMovedDate.right= new FormAttachment(100, 0);\r\n\t\twAddMovedDate.setLayoutData(fdAddMovedDate);\r\n\t\twAddMovedDate.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t\tsetAddMovedDateBeforeExtension();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\t// Create multi-part file?\r\n\t\twlAddMovedTime=new Label(wMoveToGroup, SWT.RIGHT);\r\n\t\twlAddMovedTime.setText(Messages.getString(\"JobMoveFiles.AddMovedTime.Label\"));\r\n \t\tprops.setLook(wlAddMovedTime);\r\n\t\tfdlAddMovedTime=new FormData();\r\n\t\tfdlAddMovedTime.left = new FormAttachment(0, 0);\r\n\t\tfdlAddMovedTime.top  = new FormAttachment(wAddMovedDate, margin);\r\n\t\tfdlAddMovedTime.right= new FormAttachment(middle, -margin);\r\n\t\twlAddMovedTime.setLayoutData(fdlAddMovedTime);\r\n\t\twAddMovedTime=new Button(wMoveToGroup, SWT.CHECK);\r\n \t\tprops.setLook(wAddMovedTime);\r\n \t\twAddMovedTime.setToolTipText(Messages.getString(\"JobMoveFiles.AddMovedTime.Tooltip\"));\r\n\t\tfdAddMovedTime=new FormData();\r\n\t\tfdAddMovedTime.left = new FormAttachment(middle, 0);\r\n\t\tfdAddMovedTime.top  = new FormAttachment(wAddMovedDate, margin);\r\n\t\tfdAddMovedTime.right= new FormAttachment(100, 0);\r\n\t\twAddMovedTime.setLayoutData(fdAddMovedTime);\r\n\t\twAddMovedTime.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t\tsetAddMovedDateBeforeExtension();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// Specify date time format?\r\n\t\twlSpecifyMoveFormat=new Label(wMoveToGroup, SWT.RIGHT);\r\n\t\twlSpecifyMoveFormat.setText(Messages.getString(\"JobMoveFiles.SpecifyMoveFormat.Label\"));\r\n\t\tprops.setLook(wlSpecifyMoveFormat);\r\n\t\tfdlSpecifyMoveFormat=new FormData();\r\n\t\tfdlSpecifyMoveFormat.left = new FormAttachment(0, 0);\r\n\t\tfdlSpecifyMoveFormat.top  = new FormAttachment(wAddMovedTime, margin);\r\n\t\tfdlSpecifyMoveFormat.right= new FormAttachment(middle, -margin);\r\n\t\twlSpecifyMoveFormat.setLayoutData(fdlSpecifyMoveFormat);\r\n\t\twSpecifyMoveFormat=new Button(wMoveToGroup, SWT.CHECK);\r\n\t\tprops.setLook(wSpecifyMoveFormat);\r\n\t\twSpecifyMoveFormat.setToolTipText(Messages.getString(\"JobMoveFiles.SpecifyMoveFormat.Tooltip\"));\r\n\t    fdSpecifyMoveFormat=new FormData();\r\n\t\tfdSpecifyMoveFormat.left = new FormAttachment(middle, 0);\r\n\t\tfdSpecifyMoveFormat.top  = new FormAttachment(wAddMovedTime, margin);\r\n\t\tfdSpecifyMoveFormat.right= new FormAttachment(100, 0);\r\n\t\twSpecifyMoveFormat.setLayoutData(fdSpecifyMoveFormat);\r\n\t\twSpecifyMoveFormat.addSelectionListener(new SelectionAdapter() \r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \r\n\t\t\t\t{\r\n\t\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\t\tsetMovedDateTimeFormat();\r\n\t\t\t\t\tsetAddMovedDateBeforeExtension();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\r\n\r\n\t\r\n\t\t\r\n\t\t// Moved DateTimeFormat\r\n\t\twlMovedDateTimeFormat=new Label(wMoveToGroup, SWT.RIGHT);\r\n        wlMovedDateTimeFormat.setText(Messages.getString(\"JobMoveFiles.MovedDateTimeFormat.Label\"));\r\n        props.setLook(wlMovedDateTimeFormat);\r\n        fdlMovedDateTimeFormat=new FormData();\r\n        fdlMovedDateTimeFormat.left = new FormAttachment(0, 0);\r\n        fdlMovedDateTimeFormat.top  = new FormAttachment(wSpecifyMoveFormat, margin);\r\n        fdlMovedDateTimeFormat.right= new FormAttachment(middle, -margin);\r\n        wlMovedDateTimeFormat.setLayoutData(fdlMovedDateTimeFormat);\r\n        wMovedDateTimeFormat=new CCombo(wMoveToGroup, SWT.BORDER | SWT.READ_ONLY);\r\n        wMovedDateTimeFormat.setEditable(true);\r\n        props.setLook(wMovedDateTimeFormat);\r\n        wMovedDateTimeFormat.addModifyListener(lsMod);\r\n        fdMovedDateTimeFormat=new FormData();\r\n        fdMovedDateTimeFormat.left = new FormAttachment(middle, 0);\r\n        fdMovedDateTimeFormat.top  = new FormAttachment(wSpecifyMoveFormat, margin);\r\n        fdMovedDateTimeFormat.right= new FormAttachment(100, 0);\r\n        wMovedDateTimeFormat.setLayoutData(fdMovedDateTimeFormat);\r\n\r\n        for (int x=0;x<dats.length;x++) wMovedDateTimeFormat.add(dats[x]);\r\n        \r\n\t\t\r\n        // Add Date before extension?\r\n        wlAddMovedDateBeforeExtension = new Label(wMoveToGroup, SWT.RIGHT);\r\n        wlAddMovedDateBeforeExtension.setText(Messages.getString(\"JobMoveFiles.AddMovedDateBeforeExtension.Label\"));\r\n        props.setLook(wlAddMovedDateBeforeExtension);\r\n        fdlAddMovedDateBeforeExtension = new FormData();\r\n        fdlAddMovedDateBeforeExtension.left = new FormAttachment(0, 0);\r\n        fdlAddMovedDateBeforeExtension.top = new FormAttachment(wMovedDateTimeFormat, margin);\r\n        fdlAddMovedDateBeforeExtension.right = new FormAttachment(middle, -margin);\r\n        wlAddMovedDateBeforeExtension.setLayoutData(fdlAddMovedDateBeforeExtension);\r\n        wAddMovedDateBeforeExtension = new Button(wMoveToGroup, SWT.CHECK);\r\n        props.setLook(wAddMovedDateBeforeExtension);\r\n        wAddMovedDateBeforeExtension.setToolTipText(Messages.getString(\"JobMoveFiles.AddMovedDateBeforeExtension.Tooltip\"));\r\n        fdAddMovedDateBeforeExtension = new FormData();\r\n        fdAddMovedDateBeforeExtension.left = new FormAttachment(middle, 0);\r\n        fdAddMovedDateBeforeExtension.top = new FormAttachment(wMovedDateTimeFormat, margin);\r\n        fdAddMovedDateBeforeExtension.right = new FormAttachment(100, 0);\r\n        wAddMovedDateBeforeExtension.setLayoutData(fdAddMovedDateBeforeExtension);\r\n        wAddMovedDateBeforeExtension.addSelectionListener(new SelectionAdapter()\r\n        {\r\n            public void widgetSelected(SelectionEvent e)\r\n            {\r\n                jobEntry.setChanged();\r\n            }\r\n        });\r\n\r\n    \t// If moved File Exists\r\n\t\twlIfMovedFileExists = new Label(wMoveToGroup, SWT.RIGHT);\r\n\t\twlIfMovedFileExists.setText(Messages.getString(\"JobMoveFiles.IfMovedFileExists.Label\"));\r\n\t\tprops.setLook(wlIfMovedFileExists);\r\n\t\tfdlIfMovedFileExists = new FormData();\r\n\t\tfdlIfMovedFileExists.left = new FormAttachment(0, 0);\r\n\t\tfdlIfMovedFileExists.right = new FormAttachment(middle, 0);\r\n\t\tfdlIfMovedFileExists.top = new FormAttachment(wAddMovedDateBeforeExtension, margin);\r\n\t\twlIfMovedFileExists.setLayoutData(fdlIfMovedFileExists);\r\n\t\twIfMovedFileExists = new CCombo(wMoveToGroup, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t\twIfMovedFileExists.add(Messages.getString(\"JobMoveFiles.Do_Nothing_IfMovedFileExists.Label\"));\r\n\t\twIfMovedFileExists.add(Messages.getString(\"JobMoveFiles.Overwrite_Filename_IffMovedFileExists.Label\"));\r\n\t\twIfMovedFileExists.add(Messages.getString(\"JobMoveFiles.UniqueName_IfMovedFileExists.Label\"));\r\n\t\twIfMovedFileExists.add(Messages.getString(\"JobMoveFiles.Fail_IfMovedFileExists.Label\"));\r\n\t\twIfMovedFileExists.select(0); // +1: starts at -1\r\n\r\n\t\tprops.setLook(wIfMovedFileExists);\r\n\t\tfdIfMovedFileExists= new FormData();\r\n\t\tfdIfMovedFileExists.left = new FormAttachment(middle, 0);\r\n\t\tfdIfMovedFileExists.top = new FormAttachment(wAddMovedDateBeforeExtension, margin);\r\n\t\tfdIfMovedFileExists.right = new FormAttachment(100, 0);\r\n\t\twIfMovedFileExists.setLayoutData(fdIfMovedFileExists);\r\n\r\n\t\tfdIfMovedFileExists = new FormData();\r\n\t\tfdIfMovedFileExists.left = new FormAttachment(middle, 0);\r\n\t\tfdIfMovedFileExists.top = new FormAttachment(wAddMovedDateBeforeExtension, margin);\r\n\t\tfdIfMovedFileExists.right = new FormAttachment(100, 0);\r\n\t\twIfMovedFileExists.setLayoutData(fdIfMovedFileExists);\r\n\r\n\t\t\r\n\t\tfdMoveToGroup = new FormData();\r\n\t\tfdMoveToGroup.left = new FormAttachment(0, margin);\r\n\t\tfdMoveToGroup.top = new FormAttachment(wDestinationFile, margin);\r\n\t\tfdMoveToGroup.right = new FormAttachment(100, -margin);\r\n\t\twMoveToGroup.setLayoutData(fdMoveToGroup);\r\n\t\t\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\t\t// / END OF MoveToGroup GROUP\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\r\n \t\t\r\n \t\t\r\n\r\n\r\n \t\t\r\n\t    fdDestinationFileComp = new FormData();\r\n\t    fdDestinationFileComp.left  = new FormAttachment(0, 0);\r\n\t    fdDestinationFileComp.top   = new FormAttachment(0, 0);\r\n\t    fdDestinationFileComp.right = new FormAttachment(100, 0);\r\n\t    fdDestinationFileComp.bottom= new FormAttachment(100, 0);\r\n\t    wDestinationFileComp.setLayoutData(wDestinationFileComp);\r\n\r\n\t    wDestinationFileComp.layout();\r\n\t\twDestinationFileTab.setControl(wDestinationFileComp);\r\n\r\n\r\n\t\t/////////////////////////////////////////////////////////////\r\n\t\t/// END OF DESTINATION FILETAB\r\n\t\t/////////////////////////////////////////////////////////////\r\n \t\t\r\n \t\t\n \t\t\n        \n \t\t//////////////////////////////////////\n\t\t// START OF ADVANCED  TAB   ///\n\t\t/////////////////////////////////////\n\t\t\n\t\t\n\t\t\n\t\twAdvancedTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twAdvancedTab.setText(Messages.getString(\"JobMoveFiles.Tab.Advanced.Label\"));\n\n\t\tFormLayout contentLayout = new FormLayout ();\n\t\tcontentLayout.marginWidth  = 3;\n\t\tcontentLayout.marginHeight = 3;\n\t\t\n\t\twAdvancedComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wAdvancedComp);\n \t\twAdvancedComp.setLayout(contentLayout);\r\n \t\t\r\n \t\t\r\n \t   \r\n \t\t\r\n\t\t // SuccessOngrouping?\r\n\t     // ////////////////////////\r\n\t     // START OF SUCCESS ON GROUP///\r\n\t     // /\r\n\t    wSuccessOn= new Group(wAdvancedComp, SWT.SHADOW_NONE);\r\n\t    props.setLook(wSuccessOn);\r\n\t    wSuccessOn.setText(Messages.getString(\"JobMoveFiles.SuccessOn.Group.Label\"));\r\n\r\n\t    FormLayout successongroupLayout = new FormLayout();\r\n\t    successongroupLayout.marginWidth = 10;\r\n\t    successongroupLayout.marginHeight = 10;\r\n\r\n\t    wSuccessOn.setLayout(successongroupLayout);\r\n\t    \r\n\r\n\t    //Success Condition\r\n\t  \twlSuccessCondition = new Label(wSuccessOn, SWT.RIGHT);\r\n\t  \twlSuccessCondition.setText(Messages.getString(\"JobMoveFiles.SuccessCondition.Label\"));\r\n\t  \tprops.setLook(wlSuccessCondition);\r\n\t  \tfdlSuccessCondition = new FormData();\r\n\t  \tfdlSuccessCondition.left = new FormAttachment(0, 0);\r\n\t  \tfdlSuccessCondition.right = new FormAttachment(middle, 0);\r\n\t  \tfdlSuccessCondition.top = new FormAttachment(0, margin);\r\n\t  \twlSuccessCondition.setLayoutData(fdlSuccessCondition);\r\n\t  \twSuccessCondition = new CCombo(wSuccessOn, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t  \twSuccessCondition.add(Messages.getString(\"JobMoveFiles.SuccessWhenAllWorksFine.Label\"));\r\n\t  \twSuccessCondition.add(Messages.getString(\"JobMoveFiles.SuccessWhenErrorsLessThan.Label\"));\r\n\t  \twSuccessCondition.select(0); // +1: starts at -1\r\n\t  \t\r\n\t\tprops.setLook(wSuccessCondition);\r\n\t\tfdSuccessCondition= new FormData();\r\n\t\tfdSuccessCondition.left = new FormAttachment(middle, 0);\r\n\t\tfdSuccessCondition.top = new FormAttachment(0, margin);\r\n\t\tfdSuccessCondition.right = new FormAttachment(100, 0);\r\n\t\twSuccessCondition.setLayoutData(fdSuccessCondition);\r\n\t\twSuccessCondition.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tactiveSuccessCondition();\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Success when number of errors less than\r\n\t\twlNrErrorsLessThan= new Label(wSuccessOn, SWT.RIGHT);\r\n\t\twlNrErrorsLessThan.setText(Messages.getString(\"JobMoveFiles.NrErrorsLessThan.Label\"));\r\n\t\tprops.setLook(wlNrErrorsLessThan);\r\n\t\tfdlNrErrorsLessThan= new FormData();\r\n\t\tfdlNrErrorsLessThan.left = new FormAttachment(0, 0);\r\n\t\tfdlNrErrorsLessThan.top = new FormAttachment(wSuccessCondition, margin);\r\n\t\tfdlNrErrorsLessThan.right = new FormAttachment(middle, -margin);\r\n\t\twlNrErrorsLessThan.setLayoutData(fdlNrErrorsLessThan);\r\n\t\t\r\n\t\t\r\n\t\twNrErrorsLessThan= new TextVar(jobMeta,wSuccessOn, SWT.SINGLE | SWT.LEFT | SWT.BORDER, Messages\r\n\t\t\t.getString(\"JobMoveFiles.NrErrorsLessThan.Tooltip\"));\r\n\t\tprops.setLook(wNrErrorsLessThan);\r\n\t\twNrErrorsLessThan.addModifyListener(lsMod);\r\n\t\tfdNrErrorsLessThan= new FormData();\r\n\t\tfdNrErrorsLessThan.left = new FormAttachment(middle, 0);\r\n\t\tfdNrErrorsLessThan.top = new FormAttachment(wSuccessCondition, margin);\r\n\t\tfdNrErrorsLessThan.right = new FormAttachment(100, -margin);\r\n\t\twNrErrorsLessThan.setLayoutData(fdNrErrorsLessThan);\r\n\t\t\r\n\t\t\r\n\r\n\t\t// Do Not process rest of files\r\n\t\twlDoNotProcessRest = new Label(wSuccessOn, SWT.RIGHT);\r\n\t\twlDoNotProcessRest.setText(Messages.getString(\"JobMoveFiles.DoNotProcessRest.Label\"));\r\n\t\tprops.setLook(wlDoNotProcessRest);\r\n\t\tfdlDoNotProcessRest = new FormData();\r\n\t\tfdlDoNotProcessRest.left = new FormAttachment(0, 0);\r\n\t\tfdlDoNotProcessRest.top = new FormAttachment(wNrErrorsLessThan, margin);\r\n\t\tfdlDoNotProcessRest.right = new FormAttachment(middle, -margin);\r\n\t\twlDoNotProcessRest.setLayoutData(fdlDoNotProcessRest);\r\n\t\twDoNotProcessRest = new Button(wSuccessOn, SWT.CHECK);\r\n\t\tprops.setLook(wDoNotProcessRest);\r\n\t\twDoNotProcessRest.setToolTipText(Messages.getString(\"JobMoveFiles.DoNotProcessRest.Tooltip\"));\r\n\t\tfdDoNotProcessRest = new FormData();\r\n\t\tfdDoNotProcessRest.left = new FormAttachment(middle, 0);\r\n\t\tfdDoNotProcessRest.top = new FormAttachment(wNrErrorsLessThan, margin);\r\n\t\tfdDoNotProcessRest.right = new FormAttachment(100, 0);\r\n\t\twDoNotProcessRest.setLayoutData(fdDoNotProcessRest);\r\n\t\twDoNotProcessRest.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t    fdSuccessOn= new FormData();\r\n\t    fdSuccessOn.left = new FormAttachment(0, margin);\r\n\t    fdSuccessOn.top = new FormAttachment(wDestinationFile, margin);\r\n\t    fdSuccessOn.right = new FormAttachment(100, -margin);\r\n\t    wSuccessOn.setLayoutData(fdSuccessOn);\r\n\t     // ///////////////////////////////////////////////////////////\r\n\t     // / END OF Success ON GROUP\r\n\t     // ///////////////////////////////////////////////////////////\r\n\r\n \t\t\r\n \t\t\n \t\t\n \t\t\n\t\t // fileresult grouping?\n\t     // ////////////////////////\n\t     // START OF LOGGING GROUP///\n\t     // /\n\t    wFileResult = new Group(wAdvancedComp, SWT.SHADOW_NONE);\n\t    props.setLook(wFileResult);\n\t    wFileResult.setText(Messages.getString(\"JobMoveFiles.FileResult.Group.Label\"));\n\n\t    FormLayout fileresultgroupLayout = new FormLayout();\n\t    fileresultgroupLayout.marginWidth = 10;\n\t    fileresultgroupLayout.marginHeight = 10;\n\n\t    wFileResult.setLayout(fileresultgroupLayout);\n\t      \n\t      \n\t  \t//Add file to result\n\t\twlAddFileToResult = new Label(wFileResult, SWT.RIGHT);\n\t\twlAddFileToResult.setText(Messages.getString(\"JobMoveFiles.AddFileToResult.Label\"));\n\t\tprops.setLook(wlAddFileToResult);\n\t\tfdlAddFileToResult = new FormData();\n\t\tfdlAddFileToResult.left = new FormAttachment(0, 0);\n\t\tfdlAddFileToResult.top = new FormAttachment(wSuccessOn, margin);\n\t\tfdlAddFileToResult.right = new FormAttachment(middle, -margin);\n\t\twlAddFileToResult.setLayoutData(fdlAddFileToResult);\n\t\twAddFileToResult = new Button(wFileResult, SWT.CHECK);\n\t\tprops.setLook(wAddFileToResult);\n\t\twAddFileToResult.setToolTipText(Messages.getString(\"JobMoveFiles.AddFileToResult.Tooltip\"));\n\t\tfdAddFileToResult = new FormData();\n\t\tfdAddFileToResult.left = new FormAttachment(middle, 0);\n\t\tfdAddFileToResult.top = new FormAttachment(wSuccessOn, margin);\n\t\tfdAddFileToResult.right = new FormAttachment(100, 0);\n\t\twAddFileToResult.setLayoutData(fdAddFileToResult);\n\t\twAddFileToResult.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t      \n\t      \n\t     fdFileResult = new FormData();\n\t     fdFileResult.left = new FormAttachment(0, margin);\n\t     fdFileResult.top = new FormAttachment(wSuccessOn, margin);\n\t     fdFileResult.right = new FormAttachment(100, -margin);\n\t     wFileResult.setLayoutData(fdFileResult);\n\t     // ///////////////////////////////////////////////////////////\n\t     // / END OF FilesResult GROUP\n\t     // ///////////////////////////////////////////////////////////\n\n\t\t\n \t\t\n \t\t\n \t\t\n\t    fdAdvancedComp = new FormData();\n\t\tfdAdvancedComp.left  = new FormAttachment(0, 0);\n \t\tfdAdvancedComp.top   = new FormAttachment(0, 0);\n \t\tfdAdvancedComp.right = new FormAttachment(100, 0);\n \t\tfdAdvancedComp.bottom= new FormAttachment(100, 0);\n \t\twAdvancedComp.setLayoutData(wAdvancedComp);\n\n \t\twAdvancedComp.layout();\n\t\twAdvancedTab.setControl(wAdvancedComp);\n\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF ADVANCED TAB\n\t\t/////////////////////////////////////////////////////////////\n \t\t\n \t\t\n \t\t\n\t\tfdTabFolder = new FormData();\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\n\t\tfdTabFolder.top   = new FormAttachment(wName, margin);\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\n\t\twTabFolder.setLayoutData(fdTabFolder);\n\t\t\n\t\t\n\n\t\twOK = new Button(shell, SWT.PUSH);\n\t\twOK.setText(Messages.getString(\"System.Button.OK\"));\n\t\twCancel = new Button(shell, SWT.PUSH);\n\t\twCancel.setText(Messages.getString(\"System.Button.Cancel\"));\n\n\t\tBaseStepDialog.positionBottomButtons(shell, new Button[] { wOK, wCancel }, margin, wTabFolder);\n\t\t\n\n\t\t// Add listeners\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\n\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twName.addSelectionListener( lsDef );\n\t\twSourceFileFolder.addSelectionListener( lsDef );\n\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\n\t\tgetData();\n\t\tCheckIncludeSubFolders();\r\n\t\tactiveSuccessCondition();\r\n\t\tsetDateTimeFormat();\r\n\t\tactiveSuccessCondition();\r\n\t\t\r\n\t\tactiveDestinationFolder();\r\n\t\tsetMovedDateTimeFormat();\r\n\t\tsetAddDateBeforeExtension();\r\n\t\tsetAddMovedDateBeforeExtension();\n\t\twTabFolder.setSelection(0);\n\t\tBaseStepDialog.setSize(shell);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn jobEntry;\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void ok()\n\t{\n\t\tjobEntry.setName(wName.getText());\n\t\tjobEntry.setMoveEmptyFolders(wMoveEmptyFolders.getSelection());\n\t\tjobEntry.setoverwrite_files(wOverwriteFiles.getSelection());\n\t\tjobEntry.setIncludeSubfolders(wIncludeSubfolders.getSelection());\n\t\tjobEntry.setArgFromPrevious(wPrevious.getSelection());\n\t\tjobEntry.setAddresultfilesname(wAddFileToResult.getSelection());\n\t\tjobEntry.setDestinationIsAFile(wDestinationIsAFile.getSelection());\n\t\tjobEntry.setCreateDestinationFolder(wCreateDestinationFolder.getSelection());\n\t\tjobEntry.setDoNotProcessRest(wDoNotProcessRest.getSelection());\n\t\tjobEntry.setNrErrorsLessThan(wNrErrorsLessThan.getText());\n\t\t\n\t\tif(wSuccessCondition.getSelectionIndex()==1)\r\n\t\t\tjobEntry.setSuccessCondition(\"success_when_errors_less_than\");\r\n\t\telse\r\n\t\t\tjobEntry.setSuccessCondition(\"success_when_all_works_fine\");\t\r\n\t\t\r\n\t\t\r\n\t\tjobEntry.setAddDate(wAddDate.getSelection());\r\n\t\tjobEntry.setAddTime(wAddTime.getSelection());\r\n\t\tjobEntry.setSpecifyFormat(wSpecifyFormat.getSelection());\r\n\t\tjobEntry.setDateTimeFormat(wDateTimeFormat.getText());\r\n\t\tjobEntry.setAddDateBeforeExtension(wAddDateBeforeExtension.getSelection());\r\n\t\tjobEntry.setDoNotKeepFolderStructure(wDoNotKeepFolderStructure.getSelection());\r\n\t\t\r\n\t\t\n\t\t\n\t\tint nritems = wFields.nrNonEmpty();\n\t\tint nr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString arg = wFields.getNonEmpty(i).getText(1);\n\t\t\tif (arg != null && arg.length() != 0)\n\t\t\t\tnr++;\n\t\t}\n\t\tjobEntry.source_filefolder = new String[nr];\n\t\tjobEntry.destination_filefolder = new String[nr];\n\t\tjobEntry.wildcard = new String[nr];\n\t\tnr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString source = wFields.getNonEmpty(i).getText(1);\n\t\t\tString dest = wFields.getNonEmpty(i).getText(2);\n\t\t\tString wild = wFields.getNonEmpty(i).getText(3);\n\t\t\tif (source != null && source.length() != 0)\n\t\t\t{\n\t\t\t\tjobEntry.source_filefolder[nr] = source;\n\t\t\t\tjobEntry.destination_filefolder[nr] = dest;\n\t\t\t\tjobEntry.wildcard[nr] = wild;\n\t\t\t\tnr++;\n\t\t\t}\n\t\t}\n\t\tdispose();\n\t}","id":12253,"modified_method":"private void ok()\n\t{\n\t\tjobEntry.setName(wName.getText());\n\t\tjobEntry.setMoveEmptyFolders(wMoveEmptyFolders.getSelection());\n\t\tjobEntry.setIncludeSubfolders(wIncludeSubfolders.getSelection());\n\t\tjobEntry.setArgFromPrevious(wPrevious.getSelection());\n\t\tjobEntry.setAddresultfilesname(wAddFileToResult.getSelection());\n\t\tjobEntry.setDestinationIsAFile(wDestinationIsAFile.getSelection());\n\t\tjobEntry.setCreateDestinationFolder(wCreateDestinationFolder.getSelection());\n\t\tjobEntry.setDoNotProcessRest(wDoNotProcessRest.getSelection());\n\t\tjobEntry.setNrErrorsLessThan(wNrErrorsLessThan.getText());\n\t\t\n\t\tif(wSuccessCondition.getSelectionIndex()==1)\r\n\t\t\tjobEntry.setSuccessCondition(\"success_when_errors_less_than\");\r\n\t\telse\r\n\t\t\tjobEntry.setSuccessCondition(\"success_when_all_works_fine\");\t\r\n\t\t\r\n\t\tif(wIfFileExists.getSelectionIndex()==1)\r\n\t\t\tjobEntry.setIfFileExists(\"overwrite_file\");\r\n\t\telse if(wIfFileExists.getSelectionIndex()==2)\r\n\t\t\tjobEntry.setIfFileExists(\"unique_name\");\r\n\t\telse if(wIfFileExists.getSelectionIndex()==3)\r\n\t\t\tjobEntry.setIfFileExists(\"delete_file\");\t\r\n\t\telse if(wIfFileExists.getSelectionIndex()==4)\r\n\t\t\tjobEntry.setIfFileExists(\"move_file\");\t\r\n\t\telse if(wIfFileExists.getSelectionIndex()==5)\r\n\t\t\tjobEntry.setIfFileExists(\"fail\");\t\r\n\t\telse\r\n\t\t\tjobEntry.setIfFileExists(\"do_nothing\");\t\r\n\t\t\r\n\t\tjobEntry.setDestinationFolder(wDestinationFolder.getText());\r\n\t\t\r\n\t\t\r\n\t\tif(wIfMovedFileExists.getSelectionIndex()==1)\r\n\t\t\tjobEntry.setIfMovedFileExists(\"overwrite_file\");\r\n\t\telse if(wIfMovedFileExists.getSelectionIndex()==2)\r\n\t\t\tjobEntry.setIfMovedFileExists(\"unique_name\");\t\r\n\t\telse if(wIfMovedFileExists.getSelectionIndex()==3)\r\n\t\t\tjobEntry.setIfMovedFileExists(\"fail\");\t\r\n\t\telse\r\n\t\t\tjobEntry.setIfMovedFileExists(\"do_nothing\");\r\n\t\t\r\n\t\tjobEntry.setDoNotKeepFolderStructure(wDoNotKeepFolderStructure.getSelection());\r\n\t\t\r\n\t\tjobEntry.setAddDate(wAddDate.getSelection());\r\n\t\tjobEntry.setAddTime(wAddTime.getSelection());\r\n\t\tjobEntry.setSpecifyFormat(wSpecifyFormat.getSelection());\r\n\t\tjobEntry.setDateTimeFormat(wDateTimeFormat.getText());\r\n\t\tjobEntry.setAddDateBeforeExtension(wAddDateBeforeExtension.getSelection());\r\n\t\t\r\n\t\t\r\n\t\tjobEntry.setAddMovedDate(wAddMovedDate.getSelection());\r\n\t\tjobEntry.setAddMovedTime(wAddMovedTime.getSelection());\r\n\t\tjobEntry.setSpecifyMoveFormat(wSpecifyMoveFormat.getSelection());\r\n\t\tjobEntry.setMovedDateTimeFormat(wMovedDateTimeFormat.getText());\r\n\t\tjobEntry.setAddMovedDateBeforeExtension(wAddMovedDateBeforeExtension.getSelection());\r\n\t\t\n\t\t\n\t\tint nritems = wFields.nrNonEmpty();\n\t\tint nr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString arg = wFields.getNonEmpty(i).getText(1);\n\t\t\tif (arg != null && arg.length() != 0)\n\t\t\t\tnr++;\n\t\t}\n\t\tjobEntry.source_filefolder = new String[nr];\n\t\tjobEntry.destination_filefolder = new String[nr];\n\t\tjobEntry.wildcard = new String[nr];\n\t\tnr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString source = wFields.getNonEmpty(i).getText(1);\n\t\t\tString dest = wFields.getNonEmpty(i).getText(2);\n\t\t\tString wild = wFields.getNonEmpty(i).getText(3);\n\t\t\tif (source != null && source.length() != 0)\n\t\t\t{\n\t\t\t\tjobEntry.source_filefolder[nr] = source;\n\t\t\t\tjobEntry.destination_filefolder[nr] = dest;\n\t\t\t\tjobEntry.wildcard[nr] = wild;\n\t\t\t\tnr++;\n\t\t\t}\n\t\t}\n\t\tdispose();\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\tif (jobEntry.getName()    != null) wName.setText( jobEntry.getName() );\n\t\twName.selectAll();\n\t\twMoveEmptyFolders.setSelection(jobEntry.move_empty_folders);\n\t\t\n\t\tif (jobEntry.source_filefolder != null)\n\t\t{\n\t\t\tfor (int i = 0; i < jobEntry.source_filefolder.length; i++)\n\t\t\t{\n\t\t\t\tTableItem ti = wFields.table.getItem(i);\n\t\t\t\tif (jobEntry.source_filefolder[i] != null)\n\t\t\t\t\tti.setText(1, jobEntry.source_filefolder[i]);\n\t\t\t\tif (jobEntry.destination_filefolder[i] != null)\n\t\t\t\t\tti.setText(2, jobEntry.destination_filefolder[i]);\n\t\t\t\tif (jobEntry.wildcard[i] != null)\n\t\t\t\t\tti.setText(3, jobEntry.wildcard[i]);\n\t\t\t}\n\t\t\twFields.setRowNums();\n\t\t\twFields.optWidth(true);\n\t\t}\n\t\twPrevious.setSelection(jobEntry.arg_from_previous);\n\t\twOverwriteFiles.setSelection(jobEntry.overwrite_files);\n\t\twIncludeSubfolders.setSelection(jobEntry.include_subfolders);\n\t\twDestinationIsAFile.setSelection(jobEntry.destination_is_a_file);\n\t\twCreateDestinationFolder.setSelection(jobEntry.create_destination_folder);\n\t\twDoNotProcessRest.setSelection(jobEntry.IgnoreRestOfFiles);\n\t\t\n\t\twAddFileToResult.setSelection(jobEntry.add_result_filesname);\n\t\t\n\t\tif (jobEntry.getNrErrorsLessThan()!= null) \r\n\t\t\twNrErrorsLessThan.setText( jobEntry.getNrErrorsLessThan() );\r\n\t\telse\r\n\t\t\twNrErrorsLessThan.setText(\"10\");\r\n\t\t\r\n\t\t\r\n\t\tif(jobEntry.getSuccessCondition()!=null)\r\n\t\t{\r\n\t\t\tif(jobEntry.getSuccessCondition().equals(\"success_when_errors_less_than\"))\r\n\t\t\t\twSuccessCondition.select(1);\r\n\t\t\telse\r\n\t\t\t\twSuccessCondition.select(0);\t\r\n\t\t}else wSuccessCondition.select(0);\r\n\t\t\r\n\t\tif (jobEntry.getDateTimeFormat()!= null) wDateTimeFormat.setText( jobEntry.getDateTimeFormat() );\r\n\t\twSpecifyFormat.setSelection(jobEntry.isSpecifyFormat());\r\n\t\t\r\n\t\twAddDate.setSelection(jobEntry.isAddDate());\r\n\t\twAddTime.setSelection(jobEntry.isAddTime());\r\n\t\t\r\n\t\twAddDateBeforeExtension.setSelection(jobEntry.isAddDateBeforeExtension());\r\n\t\twDoNotKeepFolderStructure.setSelection(jobEntry.isDoNotKeepFolderStructure());\r\n\t\n\t}","id":12254,"modified_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\tif (jobEntry.getName()    != null) wName.setText( jobEntry.getName() );\n\t\twName.selectAll();\n\t\twMoveEmptyFolders.setSelection(jobEntry.move_empty_folders);\n\t\t\n\t\tif (jobEntry.source_filefolder != null)\n\t\t{\n\t\t\tfor (int i = 0; i < jobEntry.source_filefolder.length; i++)\n\t\t\t{\n\t\t\t\tTableItem ti = wFields.table.getItem(i);\n\t\t\t\tif (jobEntry.source_filefolder[i] != null)\n\t\t\t\t\tti.setText(1, jobEntry.source_filefolder[i]);\n\t\t\t\tif (jobEntry.destination_filefolder[i] != null)\n\t\t\t\t\tti.setText(2, jobEntry.destination_filefolder[i]);\n\t\t\t\tif (jobEntry.wildcard[i] != null)\n\t\t\t\t\tti.setText(3, jobEntry.wildcard[i]);\n\t\t\t}\n\t\t\twFields.setRowNums();\n\t\t\twFields.optWidth(true);\n\t\t}\n\t\twPrevious.setSelection(jobEntry.arg_from_previous);\n\t\twIncludeSubfolders.setSelection(jobEntry.include_subfolders);\n\t\twDestinationIsAFile.setSelection(jobEntry.destination_is_a_file);\n\t\twCreateDestinationFolder.setSelection(jobEntry.create_destination_folder);\n\t\twDoNotProcessRest.setSelection(jobEntry.IgnoreRestOfFiles);\n\t\t\n\t\twAddFileToResult.setSelection(jobEntry.add_result_filesname);\n\t\t\n\t\tif (jobEntry.getNrErrorsLessThan()!= null) \r\n\t\t\twNrErrorsLessThan.setText( jobEntry.getNrErrorsLessThan() );\r\n\t\telse\r\n\t\t\twNrErrorsLessThan.setText(\"10\");\r\n\t\t\r\n\t\t\r\n\t\tif(jobEntry.getSuccessCondition()!=null)\r\n\t\t{\r\n\t\t\tif(jobEntry.getSuccessCondition().equals(\"success_when_errors_less_than\"))\r\n\t\t\t\twSuccessCondition.select(1);\r\n\t\t\telse\r\n\t\t\t\twSuccessCondition.select(0);\t\r\n\t\t}else wSuccessCondition.select(0);\r\n\t\t\r\n\t\tif(jobEntry.getIfFileExists()!=null)\r\n\t\t{\r\n\t\t\tif(jobEntry.getIfFileExists().equals(\"overwrite_file\"))\r\n\t\t\t\twIfFileExists.select(1);\r\n\t\t\telse if(jobEntry.getIfFileExists().equals(\"unique_name\"))\r\n\t\t\t\twIfFileExists.select(2);\r\n\t\t\telse if(jobEntry.getIfFileExists().equals(\"delete_file\"))\r\n\t\t\t\twIfFileExists.select(3);\r\n\t\t\telse if(jobEntry.getIfFileExists().equals(\"move_file\"))\r\n\t\t\t\twIfFileExists.select(4);\r\n\t\t\telse if(jobEntry.getIfFileExists().equals(\"fail\"))\r\n\t\t\t\twIfFileExists.select(5);\r\n\t\t\telse wIfFileExists.select(0);\r\n\t\t\t\r\n\t\t}else wIfFileExists.select(0);\r\n\t\t\r\n\t\tif(jobEntry.getDestinationFolder()!=null) wDestinationFolder.setText(jobEntry.getDestinationFolder());\r\n\t\t\r\n\t\t\r\n\t\tif(jobEntry.getIfMovedFileExists()!=null)\r\n\t\t{\r\n\t\t\tif(jobEntry.getIfMovedFileExists().equals(\"overwrite_file\"))\r\n\t\t\t\twIfMovedFileExists.select(1);\r\n\t\t\telse if(jobEntry.getIfMovedFileExists().equals(\"unique_name\"))\r\n\t\t\t\twIfMovedFileExists.select(2);\r\n\t\t\telse if(jobEntry.getIfMovedFileExists().equals(\"fail\"))\r\n\t\t\t\twIfMovedFileExists.select(3);\r\n\t\t\telse wIfMovedFileExists.select(0);\r\n\t\t\t\r\n\t\t}else wIfMovedFileExists.select(0);\r\n\t\twDoNotKeepFolderStructure.setSelection(jobEntry.isDoNotKeepFolderStructure());\r\n\t\twAddDateBeforeExtension.setSelection(jobEntry.isAddDateBeforeExtension());\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\twAddDate.setSelection(jobEntry.isAddDate());\r\n\t\twAddTime.setSelection(jobEntry.isAddTime());\r\n\t\twSpecifyFormat.setSelection(jobEntry.isSpecifyFormat());\r\n\t\tif (jobEntry.getDateTimeFormat()!= null) wDateTimeFormat.setText( jobEntry.getDateTimeFormat() );\r\n\t\t\r\n\t\t\r\n\r\n\t\twAddMovedDate.setSelection(jobEntry.isAddMovedDate());\r\n\t\twAddMovedTime.setSelection(jobEntry.isAddMovedTime());\r\n\t\twSpecifyMoveFormat.setSelection(jobEntry.isSpecifyMoveFormat());\r\n\t\tif (jobEntry.getMovedDateTimeFormat()!= null) wMovedDateTimeFormat.setText( jobEntry.getMovedDateTimeFormat() );\r\n\t\twAddMovedDateBeforeExtension.setSelection(jobEntry.isAddMovedDateBeforeExtension());\n\t}","commit_id":"ca338e5331096ce7d248967c36b1fc59acb043c8","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String[] lineHashes() {\n    return lineHashes;\n  }","id":12255,"modified_method":"public byte[][] lineHashes() {\n    return lineHashes;\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public DefaultInputFile setLineHashes(String[] lineHashes) {\n    this.lineHashes = lineHashes;\n    return this;\n  }","id":12256,"modified_method":"public DefaultInputFile setLineHashes(byte[][] lineHashes) {\n    this.lineHashes = lineHashes;\n    return this;\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public Object get(Value value, Class clazz, CoderContext context) {\n    String moduleKey = value.getString();\n    DeprecatedDefaultInputFile file = new DeprecatedDefaultInputFile(moduleKey, value.getString());\n    file.setBasedir(new File(value.getString()));\n    file.setDeprecatedKey(value.getString());\n    file.setSourceDirAbsolutePath(value.getString());\n    file.setPathRelativeToSourceDir(value.getString());\n    file.setAbsolutePath(value.getString());\n    file.setLanguage(value.getString());\n    file.setType(InputFile.Type.valueOf(value.getString()));\n    file.setStatus(InputFile.Status.valueOf(value.getString()));\n    file.setHash(value.getString());\n    file.setLines(value.getInt());\n    file.setEncoding(value.getString());\n    file.setOriginalLineOffsets(value.getLongArray());\n    file.setLineHashes(value.getStringArray());\n    return file;\n  }","id":12257,"modified_method":"@Override\n  public Object get(Value value, Class clazz, CoderContext context) {\n    String moduleKey = value.getString();\n    DeprecatedDefaultInputFile file = new DeprecatedDefaultInputFile(moduleKey, value.getString());\n    file.setBasedir(new File(value.getString()));\n    file.setDeprecatedKey(value.getString());\n    file.setSourceDirAbsolutePath(value.getString());\n    file.setPathRelativeToSourceDir(value.getString());\n    file.setAbsolutePath(value.getString());\n    file.setLanguage(value.getString());\n    file.setType(InputFile.Type.valueOf(value.getString()));\n    file.setStatus(InputFile.Status.valueOf(value.getString()));\n    file.setHash(value.getString());\n    file.setLines(value.getInt());\n    file.setEncoding(value.getString());\n    file.setOriginalLineOffsets(value.getLongArray());\n    byte[][] lineHashes = new byte[file.lines()][];\n    for (int i = 0; i < file.lines(); i++) {\n      lineHashes[i] = value.getByteArray();\n    }\n    file.setLineHashes(lineHashes);\n    return file;\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void put(Value value, Object object, CoderContext context) {\n    DeprecatedDefaultInputFile f = (DeprecatedDefaultInputFile) object;\n    putUTFOrNull(value, f.moduleKey());\n    putUTFOrNull(value, f.relativePath());\n    value.putString(f.getFileBaseDir().toString());\n    putUTFOrNull(value, f.deprecatedKey());\n    value.putString(f.sourceDirAbsolutePath());\n    putUTFOrNull(value, f.pathRelativeToSourceDir());\n    putUTFOrNull(value, f.absolutePath());\n    value.putString(f.language());\n    value.putString(f.type().name());\n    value.putString(f.status().name());\n    putUTFOrNull(value, f.hash());\n    value.put(f.lines());\n    putUTFOrNull(value, f.encoding());\n    value.putLongArray(f.originalLineOffsets());\n    value.putStringArray(f.lineHashes());\n  }","id":12258,"modified_method":"@Override\n  public void put(Value value, Object object, CoderContext context) {\n    DeprecatedDefaultInputFile f = (DeprecatedDefaultInputFile) object;\n    putUTFOrNull(value, f.moduleKey());\n    putUTFOrNull(value, f.relativePath());\n    value.putString(f.getFileBaseDir().toString());\n    putUTFOrNull(value, f.deprecatedKey());\n    value.putString(f.sourceDirAbsolutePath());\n    putUTFOrNull(value, f.pathRelativeToSourceDir());\n    putUTFOrNull(value, f.absolutePath());\n    value.putString(f.language());\n    value.putString(f.type().name());\n    value.putString(f.status().name());\n    putUTFOrNull(value, f.hash());\n    value.put(f.lines());\n    putUTFOrNull(value, f.encoding());\n    value.putLongArray(f.originalLineOffsets());\n    for (int i = 0; i < f.lines(); i++) {\n      value.putByteArray(f.lineHashes()[i]);\n    }\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Compute hash of a file ignoring line ends differences.\n   * Maximum performance is needed.\n   */\n  Metadata read(File file, Charset encoding) {\n    Reader reader = null;\n    long currentOriginalOffset = 0;\n    List<Long> originalLineOffsets = new ArrayList<Long>();\n    List<String> lineHashes = new ArrayList<String>();\n    StringBuilder currentLineStr = new StringBuilder();\n    int lines = 0;\n    char c = (char) -1;\n    try {\n      MessageDigest globalMd5Digest = DigestUtils.getMd5Digest();\n      globalMd5Digest.reset();\n      reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), encoding));\n      int i = reader.read();\n      boolean afterCR = false;\n      // First offset of first line is always 0\n      originalLineOffsets.add(0L);\n      while (i != -1) {\n        c = (char) i;\n        if (c == BOM) {\n          // Ignore\n          i = reader.read();\n          continue;\n        }\n        currentOriginalOffset++;\n        if (afterCR) {\n          afterCR = false;\n          if (c == LINE_FEED) {\n            originalLineOffsets.set(originalLineOffsets.size() - 1, originalLineOffsets.get(originalLineOffsets.size() - 1) + 1);\n            // Ignore\n            i = reader.read();\n            continue;\n          }\n        }\n        if (c == CARRIAGE_RETURN) {\n          afterCR = true;\n          c = LINE_FEED;\n        }\n        if (c == LINE_FEED) {\n          lines++;\n          originalLineOffsets.add(currentOriginalOffset);\n          lineHashes.add(md5IgnoreWhitespace(currentLineStr));\n          currentLineStr.setLength(0);\n        } else {\n          currentLineStr.append(c);\n        }\n        globalMd5Digest.update(charToBytesUTF(c));\n        i = reader.read();\n      }\n      if (c != (char) -1) {\n        // Last empty line\n        lines++;\n        lineHashes.add(md5IgnoreWhitespace(currentLineStr));\n      }\n      String filehash = Hex.encodeHexString(globalMd5Digest.digest());\n      return new Metadata(lines, filehash, originalLineOffsets, lineHashes.toArray(new String[0]));\n\n    } catch (IOException e) {\n      throw new IllegalStateException(String.format(\"Fail to read file '%s' with encoding '%s'\", file.getAbsolutePath(), encoding), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }","id":12259,"modified_method":"/**\n   * Compute hash of a file ignoring line ends differences.\n   * Maximum performance is needed.\n   */\n  Metadata read(File file, Charset encoding) {\n    Reader reader = null;\n    long currentOriginalOffset = 0;\n    List<Long> originalLineOffsets = new ArrayList<Long>();\n    List<Object> lineHashes = new ArrayList<Object>();\n    StringBuilder currentLineStr = new StringBuilder();\n    int lines = 0;\n    char c = (char) -1;\n    try {\n      MessageDigest globalMd5Digest = DigestUtils.getMd5Digest();\n      globalMd5Digest.reset();\n      reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), encoding));\n      int i = reader.read();\n      boolean afterCR = false;\n      // First offset of first line is always 0\n      originalLineOffsets.add(0L);\n      while (i != -1) {\n        c = (char) i;\n        if (c == BOM) {\n          // Ignore\n          i = reader.read();\n          continue;\n        }\n        currentOriginalOffset++;\n        if (afterCR) {\n          afterCR = false;\n          if (c == LINE_FEED) {\n            originalLineOffsets.set(originalLineOffsets.size() - 1, originalLineOffsets.get(originalLineOffsets.size() - 1) + 1);\n            // Ignore\n            i = reader.read();\n            continue;\n          }\n        }\n        if (c == CARRIAGE_RETURN) {\n          afterCR = true;\n          c = LINE_FEED;\n        }\n        if (c == LINE_FEED) {\n          lines++;\n          originalLineOffsets.add(currentOriginalOffset);\n          lineHashes.add(md5IgnoreWhitespace(currentLineStr));\n          currentLineStr.setLength(0);\n        } else {\n          currentLineStr.append(c);\n        }\n        globalMd5Digest.update(charToBytesUTF(c));\n        i = reader.read();\n      }\n      if (c != (char) -1) {\n        // Last empty line\n        lines++;\n        lineHashes.add(md5IgnoreWhitespace(currentLineStr));\n      }\n      String filehash = Hex.encodeHexString(globalMd5Digest.digest());\n      return new Metadata(lines, filehash, originalLineOffsets, lineHashes.toArray(new byte[0][]));\n\n    } catch (IOException e) {\n      throw new IllegalStateException(String.format(\"Fail to read file '%s' with encoding '%s'\", file.getAbsolutePath(), encoding), e);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private String md5IgnoreWhitespace(StringBuilder currentLineStr) {\n    String reducedLine = StringUtils.replaceChars(currentLineStr.toString(), SPACE_CHARS, \"\");\n    if (reducedLine.isEmpty()) {\n      return \"\";\n    }\n    return DigestUtils.md5Hex(reducedLine);\n  }","id":12260,"modified_method":"private byte[] md5IgnoreWhitespace(StringBuilder currentLineStr) {\n    String reducedLine = StringUtils.replaceChars(currentLineStr.toString(), SPACE_CHARS, \"\");\n    if (reducedLine.isEmpty()) {\n      return null;\n    }\n    return DigestUtils.md5(reducedLine);\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private Metadata(int lines, String hash, List<Long> originalLineOffsets, String[] lineHashes) {\n      this.lines = lines;\n      this.hash = hash;\n      this.originalLineOffsets = Longs.toArray(originalLineOffsets);\n      this.lineHashes = lineHashes;\n    }","id":12261,"modified_method":"private Metadata(int lines, String hash, List<Long> originalLineOffsets, byte[][] lineHashes) {\n      this.lines = lines;\n      this.hash = hash;\n      this.originalLineOffsets = Longs.toArray(originalLineOffsets);\n      this.lineHashes = lineHashes;\n    }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void start_with_bom() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"\\uFEFFfoo\\nbar\\r\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITHOUT_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 9);\n    assertThat(metadata.lineHashes).containsOnly(md5(\"foo\"), md5(\"bar\"), md5(\"baz\"));\n  }","id":12262,"modified_method":"@Test\n  public void start_with_bom() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"\\uFEFFfoo\\nbar\\r\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITHOUT_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 9);\n    assertThat(metadata.lineHashes[0]).containsOnly(md5(\"foo\"));\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"bar\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"baz\"));\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void start_with_newline() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"\\nfoo\\nbar\\r\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_NEW_LINE_FIRST);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 1, 5, 10);\n    assertThat(metadata.lineHashes).containsOnly(\"\", md5(\"foo\"), md5(\"bar\"), md5(\"baz\"));\n  }","id":12263,"modified_method":"@Test\n  public void start_with_newline() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"\\nfoo\\nbar\\r\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_NEW_LINE_FIRST);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 1, 5, 10);\n    assertThat(metadata.lineHashes[0]).isNull();\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"foo\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"bar\"));\n    assertThat(metadata.lineHashes[3]).containsOnly(md5(\"baz\"));\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void mix_of_newlines_with_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\nbar\\r\\nbaz\\n\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITH_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 9, 13);\n    assertThat(metadata.lineHashes).containsOnly(md5(\"foo\"), md5(\"bar\"), md5(\"baz\"), \"\");\n  }","id":12264,"modified_method":"@Test\n  public void mix_of_newlines_with_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\nbar\\r\\nbaz\\n\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITH_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 9, 13);\n    assertThat(metadata.lineHashes[0]).containsOnly(md5(\"foo\"));\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"bar\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"baz\"));\n    assertThat(metadata.lineHashes[3]).isNull();\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void mix_of_newlines_without_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\nbar\\r\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITHOUT_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 9);\n    assertThat(metadata.lineHashes).containsOnly(md5(\"foo\"), md5(\"bar\"), md5(\"baz\"));\n  }","id":12265,"modified_method":"@Test\n  public void mix_of_newlines_without_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\nbar\\r\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITHOUT_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 9);\n    assertThat(metadata.lineHashes[0]).containsOnly(md5(\"foo\"));\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"bar\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"baz\"));\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void non_ascii_utf_8() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"föo\\r\\nbàr\\r\\n\\u1D11Ebaßz\\r\\n\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(NON_ASCII);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 5, 10, 18);\n    assertThat(metadata.lineHashes).containsOnly(md5(\"föo\"), md5(\"bàr\"), md5(\"\\u1D11Ebaßz\"), \"\");\n  }","id":12266,"modified_method":"@Test\n  public void non_ascii_utf_8() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"föo\\r\\nbàr\\r\\n\\u1D11Ebaßz\\r\\n\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(NON_ASCII);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 5, 10, 18);\n    assertThat(metadata.lineHashes[0]).containsOnly(md5(\"föo\"));\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"bàr\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"\\u1D11Ebaßz\"));\n    assertThat(metadata.lineHashes[3]).isNull();\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private static String md5(String input) {\n    return DigestUtils.md5Hex(input);\n  }","id":12267,"modified_method":"private static byte[] md5(String input) {\n    return DigestUtils.md5(input);\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void ignore_whitespace_when_computing_line_hashes() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \" foo\\nb ar\\r\\nbaz \\t\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.lineHashes).containsOnly(md5(\"foo\"), md5(\"bar\"), md5(\"baz\"));\n  }","id":12268,"modified_method":"@Test\n  public void ignore_whitespace_when_computing_line_hashes() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \" foo\\nb ar\\r\\nbaz \\t\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.lineHashes[0]).containsOnly(md5(\"foo\"));\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"bar\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"baz\"));\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void unix_with_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\nbar\\nbaz\\n\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITH_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 8, 12);\n    assertThat(metadata.lineHashes).containsOnly(md5(\"foo\"), md5(\"bar\"), md5(\"baz\"), \"\");\n  }","id":12269,"modified_method":"@Test\n  public void unix_with_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\nbar\\nbaz\\n\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITH_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 8, 12);\n    assertThat(metadata.lineHashes[0]).containsOnly(md5(\"foo\"));\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"bar\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"baz\"));\n    assertThat(metadata.lineHashes[3]).isNull();\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void unix_without_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\nbar\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITHOUT_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 8);\n    assertThat(metadata.lineHashes).containsOnly(md5(\"foo\"), md5(\"bar\"), md5(\"baz\"));\n  }","id":12270,"modified_method":"@Test\n  public void unix_without_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\nbar\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITHOUT_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 4, 8);\n    assertThat(metadata.lineHashes[0]).containsOnly(md5(\"foo\"));\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"bar\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"baz\"));\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void non_ascii_utf_16() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"föo\\r\\nbàr\\r\\n\\u1D11Ebaßz\\r\\n\", Charsets.UTF_16, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_16);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(NON_ASCII);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 5, 10, 18);\n    assertThat(metadata.lineHashes).containsOnly(md5(\"föo\"), md5(\"bàr\"), md5(\"\\u1D11Ebaßz\"), \"\");\n  }","id":12271,"modified_method":"@Test\n  public void non_ascii_utf_16() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"föo\\r\\nbàr\\r\\n\\u1D11Ebaßz\\r\\n\", Charsets.UTF_16, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_16);\n    assertThat(metadata.lines).isEqualTo(4);\n    assertThat(metadata.hash).isEqualTo(NON_ASCII);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 5, 10, 18);\n    assertThat(metadata.lineHashes[0]).containsOnly(md5(\"föo\"));\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"bàr\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"\\u1D11Ebaßz\"));\n    assertThat(metadata.lineHashes[3]).isNull();\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void windows_without_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\r\\nbar\\r\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITHOUT_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 5, 10);\n    assertThat(metadata.lineHashes).containsOnly(md5(\"foo\"), md5(\"bar\"), md5(\"baz\"));\n  }","id":12272,"modified_method":"@Test\n  public void windows_without_latest_eol() throws Exception {\n    File tempFile = temp.newFile();\n    FileUtils.write(tempFile, \"foo\\r\\nbar\\r\\nbaz\", Charsets.UTF_8, true);\n\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(tempFile, Charsets.UTF_8);\n    assertThat(metadata.lines).isEqualTo(3);\n    assertThat(metadata.hash).isEqualTo(EXPECTED_HASH_WITHOUT_LATEST_EOL);\n    assertThat(metadata.originalLineOffsets).containsOnly(0, 5, 10);\n    assertThat(metadata.lineHashes[0]).containsOnly(md5(\"foo\"));\n    assertThat(metadata.lineHashes[1]).containsOnly(md5(\"bar\"));\n    assertThat(metadata.lineHashes[2]).containsOnly(md5(\"baz\"));\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_add_input_file() throws Exception {\n    InputPathCache cache = new InputPathCache(caches);\n    DefaultInputFile fooFile = new DefaultInputFile(\"foo\", \"src/main/java/Foo.java\").setFile(temp.newFile(\"Foo.java\"));\n    cache.put(\"struts\", fooFile);\n    cache.put(\"struts-core\", new DeprecatedDefaultInputFile(\"foo\", \"src/main/java/Bar.java\")\n      .setBasedir(temp.newFolder())\n      .setDeprecatedKey(\"foo\")\n      .setSourceDirAbsolutePath(\"foo\")\n      .setPathRelativeToSourceDir(\"foo\")\n      .setLanguage(\"bla\")\n      .setType(Type.MAIN)\n      .setStatus(Status.ADDED)\n      .setHash(\"xyz\")\n      .setLines(1)\n      .setEncoding(\"UTF-8\")\n      .setOriginalLineOffsets(new long[] {0, 4})\n      .setLineHashes(new String[] {\"foo\", \"bar\"})\n      .setFile(temp.newFile(\"Bar.java\")));\n\n    DefaultInputFile loadedFile = (DefaultInputFile) cache.getFile(\"struts-core\", \"src/main/java/Bar.java\");\n    assertThat(loadedFile.relativePath()).isEqualTo(\"src/main/java/Bar.java\");\n    assertThat(loadedFile.encoding()).isEqualTo(\"UTF-8\");\n    assertThat(loadedFile.originalLineOffsets()).containsOnly(0, 4);\n    assertThat(loadedFile.lineHashes()).containsOnly(\"foo\", \"bar\");\n\n    assertThat(cache.filesByModule(\"struts\")).hasSize(1);\n    assertThat(cache.filesByModule(\"struts-core\")).hasSize(1);\n    assertThat(cache.all()).hasSize(2);\n    for (InputPath inputPath : cache.all()) {\n      assertThat(inputPath.relativePath()).startsWith(\"src/main/java/\");\n    }\n\n    cache.remove(\"struts\", fooFile);\n    assertThat(cache.all()).hasSize(1);\n\n    cache.removeModule(\"struts\");\n    assertThat(cache.filesByModule(\"struts\")).hasSize(0);\n    assertThat(cache.filesByModule(\"struts-core\")).hasSize(1);\n    assertThat(cache.all()).hasSize(1);\n  }","id":12273,"modified_method":"@Test\n  public void should_add_input_file() throws Exception {\n    InputPathCache cache = new InputPathCache(caches);\n    DefaultInputFile fooFile = new DefaultInputFile(\"foo\", \"src/main/java/Foo.java\").setFile(temp.newFile(\"Foo.java\"));\n    cache.put(\"struts\", fooFile);\n    cache.put(\"struts-core\", new DeprecatedDefaultInputFile(\"foo\", \"src/main/java/Bar.java\")\n      .setBasedir(temp.newFolder())\n      .setDeprecatedKey(\"foo\")\n      .setSourceDirAbsolutePath(\"foo\")\n      .setPathRelativeToSourceDir(\"foo\")\n      .setLanguage(\"bla\")\n      .setType(Type.MAIN)\n      .setStatus(Status.ADDED)\n      .setHash(\"xyz\")\n      .setLines(2)\n      .setEncoding(\"UTF-8\")\n      .setOriginalLineOffsets(new long[] {0, 4})\n      .setLineHashes(new byte[][] {DigestUtils.md5(\"foo\"), DigestUtils.md5(\"bar\")})\n      .setFile(temp.newFile(\"Bar.java\")));\n\n    DefaultInputFile loadedFile = (DefaultInputFile) cache.getFile(\"struts-core\", \"src/main/java/Bar.java\");\n    assertThat(loadedFile.relativePath()).isEqualTo(\"src/main/java/Bar.java\");\n    assertThat(loadedFile.encoding()).isEqualTo(\"UTF-8\");\n    assertThat(loadedFile.originalLineOffsets()).containsOnly(0, 4);\n    assertThat(loadedFile.lineHashes()[0]).containsOnly(DigestUtils.md5(\"foo\"));\n    assertThat(loadedFile.lineHashes()[1]).containsOnly(DigestUtils.md5(\"bar\"));\n\n    assertThat(cache.filesByModule(\"struts\")).hasSize(1);\n    assertThat(cache.filesByModule(\"struts-core\")).hasSize(1);\n    assertThat(cache.all()).hasSize(2);\n    for (InputPath inputPath : cache.all()) {\n      assertThat(inputPath.relativePath()).startsWith(\"src/main/java/\");\n    }\n\n    cache.remove(\"struts\", fooFile);\n    assertThat(cache.all()).hasSize(1);\n\n    cache.removeModule(\"struts\");\n    assertThat(cache.filesByModule(\"struts\")).hasSize(0);\n    assertThat(cache.filesByModule(\"struts-core\")).hasSize(1);\n    assertThat(cache.all()).hasSize(1);\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void persist(DbSession session, FileSourceMapper mapper, InputPath inputPath, Map<String, FileSourceDto> fileSourceDtoByFileUuid) {\n    DefaultInputFile inputFile = (DefaultInputFile) inputPath;\n    org.sonar.api.resources.File file = (org.sonar.api.resources.File) resourceCache.get(inputFile.key());\n    String fileUuid = file.getUuid();\n    FileSourceDto previous = fileSourceDtoByFileUuid.get(fileUuid);\n    String newData = getSourceData(inputFile);\n    String newDataHash = newData != null ? DigestUtils.md5Hex(newData) : \"0\";\n    Date now = system2.newDate();\n    if (previous == null) {\n      FileSourceDto newFileSource = new FileSourceDto()\n        .setProjectUuid(projectTree.getRootProject().getUuid())\n        .setFileUuid(fileUuid)\n        .setData(newData)\n        .setDataHash(newDataHash)\n        .setLineHashes(StringUtils.defaultIfEmpty(Joiner.on('\\n').join(inputFile.lineHashes()), null))\n        .setCreatedAt(now.getTime())\n        .setUpdatedAt(now.getTime());\n      mapper.insert(newFileSource);\n      session.commit();\n    } else {\n      if (!newDataHash.equals(previous.getDataHash())) {\n        previous\n          .setData(newData)\n          .setLineHashes(StringUtils.defaultIfEmpty(Joiner.on('\\n').join(inputFile.lineHashes()), null))\n          .setDataHash(newDataHash)\n          .setUpdatedAt(now.getTime());\n        mapper.update(previous);\n        session.commit();\n      }\n    }\n  }","id":12274,"modified_method":"private void persist(DbSession session, FileSourceMapper mapper, InputPath inputPath, Map<String, FileSourceDto> fileSourceDtoByFileUuid) {\n    DefaultInputFile inputFile = (DefaultInputFile) inputPath;\n    org.sonar.api.resources.File file = (org.sonar.api.resources.File) resourceCache.get(inputFile.key());\n    String fileUuid = file.getUuid();\n    FileSourceDto previous = fileSourceDtoByFileUuid.get(fileUuid);\n    String newData = getSourceData(inputFile);\n    String newDataHash = newData != null ? DigestUtils.md5Hex(newData) : \"0\";\n    Date now = system2.newDate();\n    if (previous == null) {\n      FileSourceDto newFileSource = new FileSourceDto()\n        .setProjectUuid(projectTree.getRootProject().getUuid())\n        .setFileUuid(fileUuid)\n        .setData(newData)\n        .setDataHash(newDataHash)\n        .setLineHashes(lineHashesAsMd5Hex(inputFile))\n        .setCreatedAt(now.getTime())\n        .setUpdatedAt(now.getTime());\n      mapper.insert(newFileSource);\n      session.commit();\n    } else {\n      if (!newDataHash.equals(previous.getDataHash())) {\n        previous\n          .setData(newData)\n          .setLineHashes(lineHashesAsMd5Hex(inputFile))\n          .setDataHash(newDataHash)\n          .setUpdatedAt(now.getTime());\n        mapper.update(previous);\n        session.commit();\n      }\n    }\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testPersistEmptyFile() throws Exception {\n    setupData(\"file_sources\");\n    when(system2.newDate()).thenReturn(DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\"));\n\n    String relativePathEmpty = \"src/empty.java\";\n    DefaultInputFile inputFileEmpty = new DefaultInputFile(PROJECT_KEY, relativePathEmpty)\n      .setLines(0)\n      .setLineHashes(new String[] {});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileEmpty));\n\n    mockResourceCache(relativePathEmpty, PROJECT_KEY, \"uuidempty\");\n\n    sourcePersister.persist();\n    checkTables(\"testPersistEmptyFile\", \"file_sources\");\n  }","id":12275,"modified_method":"@Test\n  public void testPersistEmptyFile() throws Exception {\n    setupData(\"file_sources\");\n    when(system2.newDate()).thenReturn(DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\"));\n\n    String relativePathEmpty = \"src/empty.java\";\n    DefaultInputFile inputFileEmpty = new DefaultInputFile(PROJECT_KEY, relativePathEmpty)\n      .setLines(0)\n      .setLineHashes(new byte[][] {});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileEmpty));\n\n    mockResourceCache(relativePathEmpty, PROJECT_KEY, \"uuidempty\");\n\n    sourcePersister.persist();\n    checkTables(\"testPersistEmptyFile\", \"file_sources\");\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testPersistUpdateChanged() throws Exception {\n    setupData(\"file_sources\");\n    Date now = DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\");\n    when(system2.newDate()).thenReturn(now);\n\n    String relativePathSame = \"src/changed.java\";\n    java.io.File sameFile = new java.io.File(basedir, relativePathSame);\n    FileUtils.write(sameFile, \"changed\\ncontent\");\n    DefaultInputFile inputFileNew = new DefaultInputFile(PROJECT_KEY, relativePathSame).setLines(2)\n      .setAbsolutePath(sameFile.getAbsolutePath())\n      .setLineHashes(new String[] {\"foo\", \"bar\"});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileNew));\n\n    mockResourceCache(relativePathSame, PROJECT_KEY, \"uuidsame\");\n\n    sourcePersister.persist();\n\n    FileSourceDto fileSourceDto = new FileSourceDao(getMyBatis()).select(\"uuidsame\");\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(DateUtils.parseDateTime(\"2014-10-10T16:44:02+0200\").getTime());\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getData()).isEqualTo(\n      \",,,,,,,changed\\r\\n,,,,,,,content\\r\\n\");\n    assertThat(fileSourceDto.getLineHashes()).isEqualTo(\"foo\\nbar\");\n    assertThat(fileSourceDto.getDataHash()).isEqualTo(\"54f7fa51128a7ee577a476974c56568c\");\n  }","id":12276,"modified_method":"@Test\n  public void testPersistUpdateChanged() throws Exception {\n    setupData(\"file_sources\");\n    Date now = DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\");\n    when(system2.newDate()).thenReturn(now);\n\n    String relativePathSame = \"src/changed.java\";\n    java.io.File sameFile = new java.io.File(basedir, relativePathSame);\n    FileUtils.write(sameFile, \"changed\\ncontent\");\n    DefaultInputFile inputFileNew = new DefaultInputFile(PROJECT_KEY, relativePathSame).setLines(2)\n      .setAbsolutePath(sameFile.getAbsolutePath())\n      .setLineHashes(new byte[][] {md5(\"changed\"), md5(\"content\")});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileNew));\n\n    mockResourceCache(relativePathSame, PROJECT_KEY, \"uuidsame\");\n\n    sourcePersister.persist();\n\n    FileSourceDto fileSourceDto = new FileSourceDao(getMyBatis()).select(\"uuidsame\");\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(DateUtils.parseDateTime(\"2014-10-10T16:44:02+0200\").getTime());\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getData()).isEqualTo(\n      \",,,,,,,changed\\r\\n,,,,,,,content\\r\\n\");\n    assertThat(fileSourceDto.getLineHashes()).isEqualTo(md5Hex(\"changed\") + \"\\n\" + md5Hex(\"content\"));\n    assertThat(fileSourceDto.getDataHash()).isEqualTo(\"54f7fa51128a7ee577a476974c56568c\");\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testPersistNewFileNoScmNoHighlighting() throws Exception {\n    setupData(\"file_sources\");\n    Date now = DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\");\n    when(system2.newDate()).thenReturn(now);\n\n    String relativePathNew = \"src/new.java\";\n    java.io.File newFile = new java.io.File(basedir, relativePathNew);\n    FileUtils.write(newFile, \"foo\\nbar\\nbiz\");\n    DefaultInputFile inputFileNew = new DefaultInputFile(PROJECT_KEY, relativePathNew)\n      .setLines(3)\n      .setAbsolutePath(newFile.getAbsolutePath())\n      .setLineHashes(new String[] {\"foo\", \"bar\", \"bee\"});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileNew));\n\n    mockResourceCache(relativePathNew, PROJECT_KEY, \"uuidnew\");\n\n    sourcePersister.persist();\n    FileSourceDto fileSourceDto = new FileSourceDao(getMyBatis()).select(\"uuidnew\");\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getData()).isEqualTo(\n      \",,,,,,,foo\\r\\n,,,,,,,bar\\r\\n,,,,,,,biz\\r\\n\");\n    assertThat(fileSourceDto.getLineHashes()).isEqualTo(\"foo\\nbar\\nbee\");\n    assertThat(fileSourceDto.getDataHash()).isEqualTo(\"419c2b162018f6bbeb04fc0500d7852d\");\n\n  }","id":12277,"modified_method":"@Test\n  public void testPersistNewFileNoScmNoHighlighting() throws Exception {\n    setupData(\"file_sources\");\n    Date now = DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\");\n    when(system2.newDate()).thenReturn(now);\n\n    String relativePathNew = \"src/new.java\";\n    java.io.File newFile = new java.io.File(basedir, relativePathNew);\n    FileUtils.write(newFile, \"foo\\nbar\\nbiz\");\n    DefaultInputFile inputFileNew = new DefaultInputFile(PROJECT_KEY, relativePathNew)\n      .setLines(3)\n      .setAbsolutePath(newFile.getAbsolutePath())\n      .setLineHashes(new byte[][] {md5(\"foo\"), md5(\"bar\"), md5(\"biz\")});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileNew));\n\n    mockResourceCache(relativePathNew, PROJECT_KEY, \"uuidnew\");\n\n    sourcePersister.persist();\n    FileSourceDto fileSourceDto = new FileSourceDao(getMyBatis()).select(\"uuidnew\");\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getData()).isEqualTo(\n      \",,,,,,,foo\\r\\n,,,,,,,bar\\r\\n,,,,,,,biz\\r\\n\");\n    assertThat(fileSourceDto.getLineHashes()).isEqualTo(md5Hex(\"foo\") + \"\\n\" + md5Hex(\"bar\") + \"\\n\" + md5Hex(\"biz\"));\n    assertThat(fileSourceDto.getDataHash()).isEqualTo(\"419c2b162018f6bbeb04fc0500d7852d\");\n\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testPersistDontTouchUnchanged() throws Exception {\n    setupData(\"file_sources\");\n    when(system2.newDate()).thenReturn(DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\"));\n\n    String relativePathSame = \"src/same.java\";\n    java.io.File sameFile = new java.io.File(basedir, relativePathSame);\n    FileUtils.write(sameFile, \"unchanged\\ncontent\");\n    DefaultInputFile inputFileNew = new DefaultInputFile(PROJECT_KEY, relativePathSame).setLines(2).setAbsolutePath(sameFile.getAbsolutePath())\n      .setLineHashes(new String[] {\"foo\", \"bar\"});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileNew));\n\n    mockResourceCache(relativePathSame, PROJECT_KEY, \"uuidsame\");\n\n    sourcePersister.persist();\n    checkTables(\"testPersistDontTouchUnchanged\", \"file_sources\");\n  }","id":12278,"modified_method":"@Test\n  public void testPersistDontTouchUnchanged() throws Exception {\n    setupData(\"file_sources\");\n    when(system2.newDate()).thenReturn(DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\"));\n\n    String relativePathSame = \"src/same.java\";\n    java.io.File sameFile = new java.io.File(basedir, relativePathSame);\n    FileUtils.write(sameFile, \"unchanged\\ncontent\");\n    DefaultInputFile inputFileNew = new DefaultInputFile(PROJECT_KEY, relativePathSame).setLines(2).setAbsolutePath(sameFile.getAbsolutePath())\n      .setLineHashes(new byte[][] {md5(\"unchanged\"), md5(\"ncontent\")});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileNew));\n\n    mockResourceCache(relativePathSame, PROJECT_KEY, \"uuidsame\");\n\n    sourcePersister.persist();\n    checkTables(\"testPersistDontTouchUnchanged\", \"file_sources\");\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void testPersistNewFileWithScmAndCoverageAndHighlighting() throws Exception {\n    setupData(\"file_sources\");\n    Date now = DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\");\n    when(system2.newDate()).thenReturn(now);\n\n    String relativePathNew = \"src/new.java\";\n    java.io.File newFile = new java.io.File(basedir, relativePathNew);\n    FileUtils.write(newFile, \"foo\\nbar\\nbiz\");\n    DefaultInputFile inputFileNew = new DefaultInputFile(PROJECT_KEY, relativePathNew)\n      .setLines(3)\n      .setAbsolutePath(newFile.getAbsolutePath())\n      .setOriginalLineOffsets(new long[] {0, 4, 7})\n      .setLineHashes(new String[] {\"foo\", \"bar\", \"bee\"});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileNew));\n\n    mockResourceCache(relativePathNew, PROJECT_KEY, \"uuidnew\");\n\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.SCM_AUTHORS_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.SCM_AUTHORS_BY_LINE, \"1=julien;2=simon;3=julien\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.SCM_LAST_COMMIT_DATETIMES_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.SCM_LAST_COMMIT_DATETIMES_BY_LINE, \"1=2014-10-11T16:44:02+0100;2=2014-10-12T16:44:02+0100;3=2014-10-13T16:44:02+0100\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.SCM_REVISIONS_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.SCM_REVISIONS_BY_LINE, \"1=123;2=234;3=345\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.COVERAGE_LINE_HITS_DATA_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.COVERAGE_LINE_HITS_DATA, \"1=1;3=0\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.CONDITIONS_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.CONDITIONS_BY_LINE, \"1=4\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.COVERED_CONDITIONS_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.COVERED_CONDITIONS_BY_LINE, \"1=2\")));\n\n    SyntaxHighlightingData highlighting = new SyntaxHighlightingDataBuilder()\n      .registerHighlightingRule(0, 3, TypeOfText.ANNOTATION)\n      .registerHighlightingRule(4, 5, TypeOfText.COMMENT)\n      .registerHighlightingRule(7, 16, TypeOfText.CONSTANT)\n      .build();\n    when(componentDataCache.getData(PROJECT_KEY + \":\" + relativePathNew, SnapshotDataTypes.SYNTAX_HIGHLIGHTING))\n      .thenReturn(highlighting);\n\n    sourcePersister.persist();\n\n    FileSourceDto fileSourceDto = new FileSourceDao(getMyBatis()).select(\"uuidnew\");\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getLineHashes()).isEqualTo(\"foo\\nbar\\nbee\");\n    assertThat(fileSourceDto.getData()).isEqualTo(\n      \"123,julien,2014-10-11T16:44:02+0100,1,4,2,\\\"0,3,a\\\",foo\\r\\n\"\n        + \"234,simon,2014-10-12T16:44:02+0100,,,,\\\"0,1,cd\\\",bar\\r\\n\"\n        + \"345,julien,2014-10-13T16:44:02+0100,0,,,\\\"0,9,c\\\",biz\\r\\n\");\n    assertThat(fileSourceDto.getDataHash()).isEqualTo(\"66cf8a9176f59672044663f48a19989c\");\n  }","id":12279,"modified_method":"@Test\n  public void testPersistNewFileWithScmAndCoverageAndHighlighting() throws Exception {\n    setupData(\"file_sources\");\n    Date now = DateUtils.parseDateTime(\"2014-10-29T16:44:02+0100\");\n    when(system2.newDate()).thenReturn(now);\n\n    String relativePathNew = \"src/new.java\";\n    java.io.File newFile = new java.io.File(basedir, relativePathNew);\n    FileUtils.write(newFile, \"foo\\nbar\\nbiz\");\n    DefaultInputFile inputFileNew = new DefaultInputFile(PROJECT_KEY, relativePathNew)\n      .setLines(3)\n      .setAbsolutePath(newFile.getAbsolutePath())\n      .setOriginalLineOffsets(new long[] {0, 4, 7})\n      .setLineHashes(new byte[][] {md5(\"foo\"), md5(\"bar\"), md5(\"biz\")});\n    when(inputPathCache.all()).thenReturn(Arrays.<InputPath>asList(inputFileNew));\n\n    mockResourceCache(relativePathNew, PROJECT_KEY, \"uuidnew\");\n\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.SCM_AUTHORS_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.SCM_AUTHORS_BY_LINE, \"1=julien;2=simon;3=julien\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.SCM_LAST_COMMIT_DATETIMES_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.SCM_LAST_COMMIT_DATETIMES_BY_LINE, \"1=2014-10-11T16:44:02+0100;2=2014-10-12T16:44:02+0100;3=2014-10-13T16:44:02+0100\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.SCM_REVISIONS_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.SCM_REVISIONS_BY_LINE, \"1=123;2=234;3=345\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.COVERAGE_LINE_HITS_DATA_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.COVERAGE_LINE_HITS_DATA, \"1=1;3=0\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.CONDITIONS_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.CONDITIONS_BY_LINE, \"1=4\")));\n    when(measureCache.byMetric(PROJECT_KEY + \":\" + relativePathNew, CoreMetrics.COVERED_CONDITIONS_BY_LINE_KEY))\n      .thenReturn(Arrays.asList(new Measure(CoreMetrics.COVERED_CONDITIONS_BY_LINE, \"1=2\")));\n\n    SyntaxHighlightingData highlighting = new SyntaxHighlightingDataBuilder()\n      .registerHighlightingRule(0, 3, TypeOfText.ANNOTATION)\n      .registerHighlightingRule(4, 5, TypeOfText.COMMENT)\n      .registerHighlightingRule(7, 16, TypeOfText.CONSTANT)\n      .build();\n    when(componentDataCache.getData(PROJECT_KEY + \":\" + relativePathNew, SnapshotDataTypes.SYNTAX_HIGHLIGHTING))\n      .thenReturn(highlighting);\n\n    sourcePersister.persist();\n\n    FileSourceDto fileSourceDto = new FileSourceDao(getMyBatis()).select(\"uuidnew\");\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(now.getTime());\n    assertThat(fileSourceDto.getLineHashes()).isEqualTo(md5Hex(\"foo\") + \"\\n\" + md5Hex(\"bar\") + \"\\n\" + md5Hex(\"biz\"));\n    assertThat(fileSourceDto.getData()).isEqualTo(\n      \"123,julien,2014-10-11T16:44:02+0100,1,4,2,\\\"0,3,a\\\",foo\\r\\n\"\n        + \"234,simon,2014-10-12T16:44:02+0100,,,,\\\"0,1,cd\\\",bar\\r\\n\"\n        + \"345,julien,2014-10-13T16:44:02+0100,0,,,\\\"0,9,c\\\",biz\\r\\n\");\n    assertThat(fileSourceDto.getDataHash()).isEqualTo(\"66cf8a9176f59672044663f48a19989c\");\n  }","commit_id":"e0c4341134b434b0766a6aa97310c53b65acdfc1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n    public Long getSyncObjId() {\n        return _lbService.findById(id).getNetworkId();\n    }","id":12280,"modified_method":"@Override\n    public Long getSyncObjId() {\n    \tLoadBalancer lb = _lbService.findById(id);\n    \tif(lb == null){\n    \t\tthrow new InvalidParameterValueException(\"Unable to find load balancer rule: \" + id);\n    \t}\n        return lb.getNetworkId();\n    }","commit_id":"ca3985541712e597766e4417b20be3da3fee58b0","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public Long getSyncObjId() {\n        return _lbService.findById(id).getNetworkId();\n    }","id":12281,"modified_method":"@Override\n    public Long getSyncObjId() {\n    \tLoadBalancer lb = _lbService.findById(id);\n    \tif(lb == null){\n    \t\tthrow new InvalidParameterValueException(\"Unable to find load balancer rule: \" + id);\n    \t}\n        return lb.getNetworkId();\n    }","commit_id":"ca3985541712e597766e4417b20be3da3fee58b0","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public Long getSyncObjId() {\n        return _lbService.findById(id).getNetworkId();\n    }","id":12282,"modified_method":"@Override\n    public Long getSyncObjId() {\n    \tLoadBalancer lb = _lbService.findById(id);\n    \tif(lb == null){\n    \t\tthrow new InvalidParameterValueException(\"Unable to find load balancer rule: \" + id);\n    \t}\n        return lb.getNetworkId();\n    }","commit_id":"ca3985541712e597766e4417b20be3da3fee58b0","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n\t * @param publicScopePortletRenderOutputCache the publicScopePortletRenderOutputCache to set\n\t */\n    @Autowired\n    @Qualifier(\"org.jasig.portal.portlet.container.cache.PortletCacheControlServiceImpl.publicScopePortletRenderOutputCache\")\n\tpublic void setPublicScopePortletRenderOutputCache(Ehcache publicScopePortletRenderOutputCache) {\n\t\tthis.publicScopePortletRenderOutputCache = publicScopePortletRenderOutputCache;\n\t}","id":12283,"modified_method":"@Autowired\n    @Qualifier(\"org.jasig.portal.portlet.container.cache.PortletCacheControlServiceImpl.publicScopePortletRenderOutputCache\")\n    public void setPublicScopePortletRenderOutputCache(Ehcache publicScopePortletRenderOutputCache) {\n        this.publicScopePortletRenderOutputCache = publicScopePortletRenderOutputCache;\n        this.publicScopePortletRenderOutputCache.getCacheEventNotificationService()\n                .registerListener(publicPortletRenderCacheKeyTracker);\n    }","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic void cachePortletRenderOutput(IPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpRequest, String content,\n\t\t\tCacheControl cacheControl) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n        final int expirationTime = cacheControl.getExpirationTime();\n\t\tCachedPortletData newData = new CachedPortletData();\n\t\tnewData.setExpirationTimeSeconds(expirationTime);\n\t\tnewData.setTimeStored(new Date());\n\t\tnewData.setStringData(content);\n\t\tnewData.setEtag(cacheControl.getETag());\n\t\t\n\t\tif(cacheControl.isPublicScope()) {\n\t\t\tnewData.setCacheConfigurationMaxTTL(new Long(publicScopePortletRenderOutputCache.getCacheConfiguration().getTimeToLiveSeconds()).intValue());\n\t\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters(), RequestContextUtils.getLocale(httpRequest));\n\t\t\tElement publicCacheElement = constructCacheElement(publicCacheKey, newData, publicScopePortletRenderOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.publicScopePortletRenderOutputCache.put(publicCacheElement);\t\t\n\t\t} else {\n\t\t\tnewData.setCacheConfigurationMaxTTL(new Long(privateScopePortletRenderOutputCache.getCacheConfiguration().getTimeToLiveSeconds()).intValue());\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tElement privateCacheElement = constructCacheElement(privateCacheKey, newData, privateScopePortletRenderOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.privateScopePortletRenderOutputCache.put(privateCacheElement);\n\t\t}\n\t}","id":12284,"modified_method":"@Override\n\tpublic void cachePortletRenderOutput(IPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpRequest, String content,\n\t\t\tCacheControl cacheControl) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n        final int expirationTime = cacheControl.getExpirationTime();\n\t\tCachedPortletData newData = new CachedPortletData();\n\t\tnewData.setExpirationTimeSeconds(expirationTime);\n\t\tnewData.setTimeStored(new Date());\n\t\tnewData.setStringData(content);\n\t\tnewData.setEtag(cacheControl.getETag());\n\t\t\n\t\tfinal Locale locale = RequestContextUtils.getLocale(httpRequest);\n        final PublicPortletCacheKey publicCacheKey = new PublicPortletCacheKey(definitionId, portletWindow, locale);\n\t\tif(cacheControl.isPublicScope()) {\n\t\t\tnewData.setCacheConfigurationMaxTTL((int)publicScopePortletRenderOutputCache.getCacheConfiguration().getTimeToLiveSeconds());\n\t\t\tElement publicCacheElement = constructCacheElement(publicCacheKey, newData, publicScopePortletRenderOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.publicScopePortletRenderOutputCache.put(publicCacheElement);\n\t\t\t\n\t\t\tlogger.debug(\"Cached public render data under key {} for {}\", publicCacheKey, portletWindow);\n\t\t} else {\n\t\t    final HttpSession session = httpRequest.getSession();\n\t\t\tnewData.setCacheConfigurationMaxTTL((int)privateScopePortletRenderOutputCache.getCacheConfiguration().getTimeToLiveSeconds());\n            final PrivatePortletCacheKey privateCacheKey = new PrivatePortletCacheKey(session.getId(), portletWindowId, entityId, publicCacheKey);\n\t\t\tElement privateCacheElement = constructCacheElement(privateCacheKey, newData, privateScopePortletRenderOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.privateScopePortletRenderOutputCache.put(privateCacheElement);\n\t\t\t\n\t\t\tlogger.debug(\"Cached private render data under key {} for {}\", privateCacheKey, portletWindow);\n\t\t}\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * @param privateScopePortletResourceOutputCache\n     */\n    @Autowired\n    @Qualifier(\"org.jasig.portal.portlet.container.cache.PortletCacheControlServiceImpl.privateScopePortletResourceOutputCache\")\n    public void setPrivateScopePortletResourceOutputCache(\n    \t\tEhcache privateScopePortletResourceOutputCache) {\n\t\tthis.privateScopePortletResourceOutputCache = privateScopePortletResourceOutputCache;\n\t}","id":12285,"modified_method":"@Autowired\n    @Qualifier(\"org.jasig.portal.portlet.container.cache.PortletCacheControlServiceImpl.privateScopePortletResourceOutputCache\")\n    public void setPrivateScopePortletResourceOutputCache(Ehcache privateScopePortletResourceOutputCache) {\n        this.privateScopePortletResourceOutputCache = privateScopePortletResourceOutputCache;\n        this.privateScopePortletResourceOutputCache.getCacheEventNotificationService()\n                .registerListener(privatePortletResourceCacheKeyTracker);\n    }","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * @param publicScopePortletResourceOutputCache\n     */\n    @Autowired\n    @Qualifier(\"org.jasig.portal.portlet.container.cache.PortletCacheControlServiceImpl.publicScopePortletResourceOutputCache\")\n\tpublic void setPublicScopePortletResourceOutputCache(\n\t\t\tEhcache publicScopePortletResourceOutputCache) {\n\t\tthis.publicScopePortletResourceOutputCache = publicScopePortletResourceOutputCache;\n\t}","id":12286,"modified_method":"@Autowired\n    @Qualifier(\"org.jasig.portal.portlet.container.cache.PortletCacheControlServiceImpl.publicScopePortletResourceOutputCache\")\n    public void setPublicScopePortletResourceOutputCache(Ehcache publicScopePortletResourceOutputCache) {\n        this.publicScopePortletResourceOutputCache = publicScopePortletResourceOutputCache;\n        this.publicScopePortletResourceOutputCache.getCacheEventNotificationService()\n                .registerListener(publicPortletResourceCacheKeyTracker);\n    }","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void cachePortletResourceOutput(IPortletWindowId portletWindowId, HttpServletRequest httpRequest,\n            CachedPortletData cachedPortletData, CacheControl cacheControl) {\n\t    \n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n        final int expirationTime = cacheControl.getExpirationTime();\n        cachedPortletData.setEtag(cacheControl.getETag());\n        cachedPortletData.setExpirationTimeSeconds(expirationTime);\n        cachedPortletData.setTimeStored(new Date());\n\t\t\n\t\tif(cacheControl.isPublicScope()) {\n\t\t    cachedPortletData.setCacheConfigurationMaxTTL(new Long(publicScopePortletResourceOutputCache.getCacheConfiguration().getTimeToLiveSeconds()).intValue());\n\t\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters(), RequestContextUtils.getLocale(httpRequest));\n\t\t\tElement publicCacheElement = constructCacheElement(publicCacheKey, cachedPortletData, publicScopePortletResourceOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.publicScopePortletResourceOutputCache.put(publicCacheElement);\t\t\n\t\t} else {\n\t\t    cachedPortletData.setCacheConfigurationMaxTTL(new Long(privateScopePortletResourceOutputCache.getCacheConfiguration().getTimeToLiveSeconds()).intValue());\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tElement privateCacheElement = constructCacheElement(privateCacheKey, cachedPortletData, privateScopePortletResourceOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.privateScopePortletResourceOutputCache.put(privateCacheElement);\n\t\t}\n\t}","id":12287,"modified_method":"@Override\n    public void cachePortletResourceOutput(IPortletWindowId portletWindowId, HttpServletRequest httpRequest,\n            CachedPortletData cachedPortletData, CacheControl cacheControl) {\n\t    \n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n        final int expirationTime = cacheControl.getExpirationTime();\n        cachedPortletData.setEtag(cacheControl.getETag());\n        cachedPortletData.setExpirationTimeSeconds(expirationTime);\n        cachedPortletData.setTimeStored(new Date());\n        \n        final String resourceId = getResourceId(portletWindowId, httpRequest);\n        \n        //TODO look at cacheability of the resource req/res\n        \n        final Locale locale = RequestContextUtils.getLocale(httpRequest);\n        final PublicPortletCacheKey publicCacheKey = new PublicPortletCacheKey(definitionId, portletWindow, resourceId, locale);\n\t\t\n\t\tif(cacheControl.isPublicScope()) {\n\t\t    cachedPortletData.setCacheConfigurationMaxTTL((int)publicScopePortletResourceOutputCache.getCacheConfiguration().getTimeToLiveSeconds());\n\t\t\tElement publicCacheElement = constructCacheElement(publicCacheKey, cachedPortletData, publicScopePortletResourceOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.publicScopePortletResourceOutputCache.put(publicCacheElement);\n\t\t\t\n\t\t\tlogger.debug(\"Cached public resource data under key {} for {}\", publicCacheKey, portletWindow);\n\t\t} else {\n\t\t    final HttpSession session = httpRequest.getSession();\n\t\t    cachedPortletData.setCacheConfigurationMaxTTL((int)privateScopePortletResourceOutputCache.getCacheConfiguration().getTimeToLiveSeconds());\n            final PrivatePortletCacheKey privateCacheKey = new PrivatePortletCacheKey(session.getId(), portletWindowId, entityId, publicCacheKey);\n\t\t\tElement privateCacheElement = constructCacheElement(privateCacheKey, cachedPortletData, privateScopePortletResourceOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.privateScopePortletResourceOutputCache.put(privateCacheElement);\n\t\t\t\n\t\t\tlogger.debug(\"Cached private resource data under key {} for {}\", privateCacheKey, portletWindow);\n\t\t}\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * @param privateScopePortletRenderOutputCache the privateScopePortletRenderOutputCache to set\n\t */\n    @Autowired\n    @Qualifier(\"org.jasig.portal.portlet.container.cache.PortletCacheControlServiceImpl.privateScopePortletRenderOutputCache\")\n\tpublic void setPrivateScopePortletRenderOutputCache(Ehcache privateScopePortletRenderOutputCache) {\n\t\tthis.privateScopePortletRenderOutputCache = privateScopePortletRenderOutputCache;\n\t}","id":12288,"modified_method":"@Autowired\n    @Qualifier(\"org.jasig.portal.portlet.container.cache.PortletCacheControlServiceImpl.privateScopePortletRenderOutputCache\")\n    public void setPrivateScopePortletRenderOutputCache(Ehcache privateScopePortletRenderOutputCache) {\n        this.privateScopePortletRenderOutputCache = privateScopePortletRenderOutputCache;\n        this.privateScopePortletRenderOutputCache.getCacheEventNotificationService()\n                .registerListener(privatePortletRenderCacheKeyTracker);\n    }","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * @param portletEntityRegistry\n\t */\n\t@Autowired\n\tpublic void setPortletEntityRegistry(\n\t\t\tIPortletEntityRegistry portletEntityRegistry) {\n\t\tthis.portletEntityRegistry = portletEntityRegistry;\n\t}","id":12289,"modified_method":"@Autowired\n\tpublic void setPortletEntityRegistry(\n\t\t\tIPortletEntityRegistry portletEntityRegistry) {\n\t\tthis.portletEntityRegistry = portletEntityRegistry;\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * @param portletDefinitionRegistry\n\t */\n\t@Autowired\n\tpublic void setPortletDefinitionRegistry(\n\t\t\tIPortletDefinitionRegistry portletDefinitionRegistry) {\n\t\tthis.portletDefinitionRegistry = portletDefinitionRegistry;\n\t}","id":12290,"modified_method":"@Autowired\n\tpublic void setPortletDefinitionRegistry(\n\t\t\tIPortletDefinitionRegistry portletDefinitionRegistry) {\n\t\tthis.portletDefinitionRegistry = portletDefinitionRegistry;\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic CacheControl getPortletResourceCacheControl(\n\t\t\tIPortletWindowId portletWindowId, HttpServletRequest httpRequest, HttpServletResponse httpResponse) {\n\t\tMap<IPortletWindowId, CacheControl> map = PortalWebUtils.getMapRequestAttribute(httpRequest, REQUEST_ATTRIBUTE__PORTLET_CACHE_CONTROL_MAP);\n\t\tCacheControl cacheControl = map.get(portletWindowId);\n\t\tif(cacheControl == null) {\n\t\t\tcacheControl = new CacheControlImpl(httpResponse);\n\t\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n\t        if(portletWindow == null) {\n\t        \tlog.warn(\"portletWindowRegistry returned null portletWindow for \" + portletWindowId + \", returning default cacheControl\");\n\t        \treturn cacheControl;\n\t        }\n\t        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n\t        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n\t        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\t\n\t        PortletDefinition portletDefinition = this.portletDefinitionRegistry.getParentPortletDescriptor(definitionId);\n\t        final String cacheScopeValue = portletDefinition.getCacheScope();\n\t        if(MimeResponse.PUBLIC_SCOPE.equalsIgnoreCase(cacheScopeValue)) {\n\t        \tcacheControl.setPublicScope(true);\n\t        }\n\t        cacheControl.setExpirationTime(portletDefinition.getExpirationCache());\n\t        \n\t        // check for CachedPortletData to see if there is an etag to set\n\t        CachedPortletData cachedData = getCachedPortletResourceOutput(portletWindowId, httpRequest);\n\t        if(cachedData != null) {\n\t        \tcacheControl.setETag(cachedData.getEtag());\n\t        }\n\t\t\tmap.put(portletWindowId, cacheControl);\n\t\t}\n\t\treturn cacheControl;\n\t}","id":12291,"modified_method":"@Override\n\tpublic CacheControl getPortletResourceCacheControl(\n\t\t\tIPortletWindowId portletWindowId, HttpServletRequest httpRequest, HttpServletResponse httpResponse) {\n\t\tMap<IPortletWindowId, CacheControl> map = PortalWebUtils.getMapRequestAttribute(httpRequest, REQUEST_ATTRIBUTE__PORTLET_CACHE_CONTROL_MAP);\n\t\tCacheControl cacheControl = map.get(portletWindowId);\n\t\tif(cacheControl == null) {\n\t\t\tcacheControl = new CacheControlImpl(httpResponse);\n\t\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n\t        if(portletWindow == null) {\n\t            logger.warn(\"portletWindowRegistry returned null for {}, returning default cacheControl\", portletWindowId);\n\t        \treturn cacheControl;\n\t        }\n\t        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n\t        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n\t        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\t\n\t        PortletDefinition portletDefinition = this.portletDefinitionRegistry.getParentPortletDescriptor(definitionId);\n\t        final String cacheScopeValue = portletDefinition.getCacheScope();\n\t        if(MimeResponse.PUBLIC_SCOPE.equalsIgnoreCase(cacheScopeValue)) {\n\t        \tcacheControl.setPublicScope(true);\n\t        }\n\t        cacheControl.setExpirationTime(portletDefinition.getExpirationCache());\n\t        \n\t        // check for CachedPortletData to see if there is an etag to set\n\t        CachedPortletData cachedData = getCachedPortletResourceOutput(portletWindowId, httpRequest);\n\t        if(cachedData != null) {\n\t        \tcacheControl.setETag(cachedData.getEtag());\n\t        }\n\t\t\tmap.put(portletWindowId, cacheControl);\n\t\t}\n\t\treturn cacheControl;\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic CachedPortletData getCachedPortletResourceOutput(\n\t\t\tIPortletWindowId portletWindowId, HttpServletRequest httpRequest) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters(), RequestContextUtils.getLocale(httpRequest));\n\t\tElement publicCacheElement = this.publicScopePortletResourceOutputCache.get(publicCacheKey);\t\n\t\tif(publicCacheElement != null) {\n\t\t\tCachedPortletData cachedPortletData = (CachedPortletData) publicCacheElement.getValue();\n\t\t\t// only remove from cache if not using validation method\n\t\t\tif(publicCacheElement.isExpired() && StringUtils.isBlank(cachedPortletData.getEtag())) {\n\t\t\t\tthis.publicScopePortletResourceOutputCache.remove(publicCacheKey);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn cachedPortletData;\n\t\t} else {\n\t\t\t// public cache contained no content, check private\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tElement privateCacheElement = this.privateScopePortletResourceOutputCache.get(privateCacheKey);\n\t\t\tif(privateCacheElement != null) {\n\t\t\t\tCachedPortletData cachedPortletData = (CachedPortletData) privateCacheElement.getValue();\n\t\t\t\tif(privateCacheElement.isExpired() && StringUtils.isBlank(cachedPortletData.getEtag())) {\n\t\t\t\t\tthis.privateScopePortletResourceOutputCache.remove(privateCacheKey);\n\t\t\t\t\treturn null;\n\t\t\t\t} \t\n\t\t\t\treturn cachedPortletData;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}","id":12292,"modified_method":"@Override\n\tpublic CachedPortletData getCachedPortletResourceOutput(\n\t\t\tIPortletWindowId portletWindowId, HttpServletRequest httpRequest) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n        \n        final String resourceId = getResourceId(portletWindowId, httpRequest);\n\t\t\n        final Locale locale = RequestContextUtils.getLocale(httpRequest);\n        final PublicPortletCacheKey publicCacheKey = new PublicPortletCacheKey(definitionId, portletWindow, resourceId, locale);\n\t\tElement publicCacheElement = this.publicScopePortletResourceOutputCache.get(publicCacheKey);\t\n\t\tif(publicCacheElement != null) {\n\t\t\tCachedPortletData cachedPortletData = (CachedPortletData) publicCacheElement.getValue();\n\t\t\t// only remove from cache if not using validation method\n\t\t\tif(publicCacheElement.isExpired() && StringUtils.isBlank(cachedPortletData.getEtag())) {\n\t\t\t\tthis.publicScopePortletResourceOutputCache.remove(publicCacheKey);\n                logger.debug(\"Publicly cached resource output with for key {} is expired\", publicCacheKey);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlogger.debug(\"Returning publicly cached resource output with key {} for {}\", publicCacheKey, portletWindow);\n\t\t\treturn cachedPortletData;\n\t\t} else {\n\t\t\t// public cache contained no content, check private\n\t\t    final PrivatePortletCacheKey privateCacheKey = new PrivatePortletCacheKey(httpRequest.getSession().getId(), portletWindowId, entityId, publicCacheKey);\n\t\t\tElement privateCacheElement = this.privateScopePortletResourceOutputCache.get(privateCacheKey);\n\t\t\tif(privateCacheElement != null) {\n\t\t\t\tCachedPortletData cachedPortletData = (CachedPortletData) privateCacheElement.getValue();\n\t\t\t\tif(privateCacheElement.isExpired() && StringUtils.isBlank(cachedPortletData.getEtag())) {\n\t\t\t\t\tthis.privateScopePortletResourceOutputCache.remove(privateCacheKey);\n                    logger.debug(\"Privately cached resource output with for key {} is expired\", privateCacheKey);\n\t\t\t\t\treturn null;\n\t\t\t\t} \t\n\t\t\t\tlogger.debug(\"Returning privately cached resource output with key {} for {}\", privateCacheKey, portletWindow);\n\t\t\t\treturn cachedPortletData;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlogger.debug(\"No cached resource output exists for portlet window {}\", portletWindow);\n\t\treturn null;\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * @param portletWindowRegistry\n\t */\n\t@Autowired\n\tpublic void setPortletWindowRegistry(\n\t\t\tIPortletWindowRegistry portletWindowRegistry) {\n\t\tthis.portletWindowRegistry = portletWindowRegistry;\n\t}","id":12293,"modified_method":"@Autowired\n\tpublic void setPortletWindowRegistry(\n\t\t\tIPortletWindowRegistry portletWindowRegistry) {\n\t\tthis.portletWindowRegistry = portletWindowRegistry;\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic CachedPortletData getCachedPortletRenderOutput(\n\t\t\tIPortletWindowId portletWindowId, HttpServletRequest httpRequest) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters(), RequestContextUtils.getLocale(httpRequest));\n\t\tElement publicCacheElement = this.publicScopePortletRenderOutputCache.get(publicCacheKey);\n\t\tif(publicCacheElement != null) {\n\t\t\tif(publicCacheElement.isExpired()) {\n\t\t\t\tthis.publicScopePortletRenderOutputCache.remove(publicCacheKey);\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn (CachedPortletData) publicCacheElement.getValue();\n\t\t\t}\n\t\t} else {\n\t\t\t// public cache contained no content, check private\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tElement privateCacheElement = this.privateScopePortletRenderOutputCache.get(privateCacheKey);\n\t\t\tif(privateCacheElement != null) {\n\t\t\t\tif(privateCacheElement.isExpired()) {\n\t\t\t\t\tthis.privateScopePortletRenderOutputCache.remove(privateCacheKey);\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn (CachedPortletData) privateCacheElement.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}","id":12294,"modified_method":"@Override\n\tpublic CachedPortletData getCachedPortletRenderOutput(\n\t\t\tIPortletWindowId portletWindowId, HttpServletRequest httpRequest) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n        final Locale locale = RequestContextUtils.getLocale(httpRequest);\n        final PublicPortletCacheKey publicCacheKey = new PublicPortletCacheKey(definitionId, portletWindow, locale);\n\t\tElement publicCacheElement = this.publicScopePortletRenderOutputCache.get(publicCacheKey);\n\t\tif(publicCacheElement != null) {\n\t\t    CachedPortletData cachedPortletData = (CachedPortletData) publicCacheElement.getValue();\n\t\t    if(publicCacheElement.isExpired() && StringUtils.isBlank(cachedPortletData.getEtag())) {\n\t\t\t\tthis.publicScopePortletRenderOutputCache.remove(publicCacheKey);\n\t\t\t\tlogger.debug(\"Publicly cached render output for key {} is expired\", publicCacheKey);\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t    logger.debug(\"Returning publicly cached render output with key {} for {}\", publicCacheKey, portletWindow);\n\t\t\t\treturn (CachedPortletData) publicCacheElement.getValue();\n\t\t\t}\n\t\t} else {\n\t\t\t// public cache contained no content, check private\n\t\t    final PrivatePortletCacheKey privateCacheKey = new PrivatePortletCacheKey(httpRequest.getSession().getId(), portletWindowId, entityId, publicCacheKey);\n\t\t\tElement privateCacheElement = this.privateScopePortletRenderOutputCache.get(privateCacheKey);\n\t\t\tif(privateCacheElement != null) {\n\t            CachedPortletData cachedPortletData = (CachedPortletData) privateCacheElement.getValue();\n\t            if(privateCacheElement.isExpired() && StringUtils.isBlank(cachedPortletData.getEtag())) {\n\t\t\t\t\tthis.privateScopePortletRenderOutputCache.remove(privateCacheKey);\n\t\t\t\t\tlogger.debug(\"Privately cached render output for key {} is expired\", privateCacheKey);\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t    logger.debug(\"Returning privately cached render output with key {} for {}\", privateCacheKey, portletWindow);\n\t\t\t\t\treturn (CachedPortletData) privateCacheElement.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tlogger.debug(\"No cached render output exists for portlet window {}\", portletWindow);\n\t\treturn null;\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic boolean purgeCachedPortletData(IPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpRequest, CacheControl cacheControl) {\n\t\t\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\tif(cacheControl.isPublicScope()) {\n\t\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters(), RequestContextUtils.getLocale(httpRequest));\n\t\t\tboolean renderPurged = this.publicScopePortletRenderOutputCache.remove(publicCacheKey);\n\t\t\treturn this.publicScopePortletResourceOutputCache.remove(publicCacheKey) || renderPurged;\n\t\t} else {\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tboolean renderPurged = this.privateScopePortletRenderOutputCache.remove(privateCacheKey);\n\t\t\treturn this.privateScopePortletResourceOutputCache.remove(privateCacheKey) || renderPurged;\n\t\t}\n\t}","id":12295,"modified_method":"@Override\n\tpublic boolean purgeCachedPortletData(IPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpRequest) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\n        \n        logger.debug(\"Purging all cached data for {}\", portletWindow);\n        \n        boolean removed = false;\n\n        //Remove all publicly cached render data for the portlet\n        final Set<PublicPortletCacheKey> publicRenderKeys = this.publicPortletRenderCacheKeyTracker.getCacheKeys(definitionId);\n        removed = removed || !publicRenderKeys.isEmpty();\n        this.publicScopePortletRenderOutputCache.removeAll(publicRenderKeys);\n        \n        //Remove all publicly cached resource data for the portlet\n        final Set<PublicPortletCacheKey> publicResourceKeys = this.publicPortletResourceCacheKeyTracker.getCacheKeys(definitionId);\n        removed = removed || !publicResourceKeys.isEmpty();\n        this.publicScopePortletResourceOutputCache.removeAll(publicResourceKeys);\n        \n        final HttpSession session = httpRequest.getSession();\n        \n        //Remove all privately cached render data\n        final Set<PrivatePortletCacheKey> privateRenderKeys = this.privatePortletRenderCacheKeyTracker.getCacheKeys(session, portletWindowId);\n        removed = removed || !privateRenderKeys.isEmpty();\n        this.privateScopePortletRenderOutputCache.removeAll(privateRenderKeys);\n        \n        //Remove all privately cached render data\n        final Set<PrivatePortletCacheKey> privateResourceKeys = this.privatePortletResourceCacheKeyTracker.getCacheKeys(session, portletWindowId);\n        removed = removed || !privateResourceKeys.isEmpty();\n        this.privateScopePortletResourceOutputCache.removeAll(privateResourceKeys);\n\n        //If any keys were found remove them\n        return removed;\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic CacheControl getPortletRenderCacheControl(IPortletWindowId portletWindowId, HttpServletRequest httpRequest) {\n\t\tMap<IPortletWindowId, CacheControl> map = PortalWebUtils.getMapRequestAttribute(httpRequest, REQUEST_ATTRIBUTE__PORTLET_CACHE_CONTROL_MAP);\n\t\tCacheControl cacheControl = map.get(portletWindowId);\n\t\tif(cacheControl == null) {\n\t\t\tcacheControl = new CacheControlImpl();\n\t\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n\t        if(portletWindow == null) {\n\t        \tlog.warn(\"portletWindowRegistry returned null portletWindow for \" + portletWindowId + \", returning default cacheControl\");\n\t        \treturn cacheControl;\n\t        }\n\t        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n\t        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n\t        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\t\n\t        PortletDefinition portletDefinition = this.portletDefinitionRegistry.getParentPortletDescriptor(definitionId);\n\t        final String cacheScopeValue = portletDefinition.getCacheScope();\n\t        if(MimeResponse.PUBLIC_SCOPE.equalsIgnoreCase(cacheScopeValue)) {\n\t        \tcacheControl.setPublicScope(true);\n\t        }\n\t        cacheControl.setExpirationTime(portletDefinition.getExpirationCache());\n\t        \n\t        // check for CachedPortletData to see if there is an etag to set\n\t        CachedPortletData cachedData = getCachedPortletRenderOutput(portletWindowId, httpRequest);\n\t        if(cachedData != null) {\n\t        \tcacheControl.setETag(cachedData.getEtag());\n\t        }\n\t\t\tmap.put(portletWindowId, cacheControl);\n\t\t}\n\t\treturn cacheControl;\n\t}","id":12296,"modified_method":"@Override\n\tpublic CacheControl getPortletRenderCacheControl(IPortletWindowId portletWindowId, HttpServletRequest httpRequest) {\n\t\tMap<IPortletWindowId, CacheControl> map = PortalWebUtils.getMapRequestAttribute(httpRequest, REQUEST_ATTRIBUTE__PORTLET_CACHE_CONTROL_MAP);\n\t\tCacheControl cacheControl = map.get(portletWindowId);\n\t\tif(cacheControl == null) {\n\t\t\tcacheControl = new CacheControlImpl();\n\t\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n\t        if(portletWindow == null) {\n\t        \tlogger.warn(\"portletWindowRegistry returned null for {}, returning default cacheControl\", portletWindowId);\n\t        \treturn cacheControl;\n\t        }\n\t        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n\t        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n\t        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\t\n\t        PortletDefinition portletDefinition = this.portletDefinitionRegistry.getParentPortletDescriptor(definitionId);\n\t        final String cacheScopeValue = portletDefinition.getCacheScope();\n\t        if(MimeResponse.PUBLIC_SCOPE.equalsIgnoreCase(cacheScopeValue)) {\n\t        \tcacheControl.setPublicScope(true);\n\t        }\n\t        cacheControl.setExpirationTime(portletDefinition.getExpirationCache());\n\t        \n\t        // check for CachedPortletData to see if there is an etag to set\n\t        CachedPortletData cachedData = getCachedPortletRenderOutput(portletWindowId, httpRequest);\n\t        if(cachedData != null) {\n\t        \tcacheControl.setETag(cachedData.getEtag());\n\t        }\n\t\t\tmap.put(portletWindowId, cacheControl);\n\t\t}\n\t\treturn cacheControl;\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Test\n\tpublic void testDetermineCacheScopePortletDefinitionPrivate() {\n\t\tMockHttpServletRequest httpRequest = new MockHttpServletRequest();\n\t\tMockPortletWindowId portletWindowId = new MockPortletWindowId(\"123\");\n\t\tMockPortletEntityId portletEntityId = new MockPortletEntityId(\"456\");\n\t\tMockPortletDefinitionId portletDefinitionId = new MockPortletDefinitionId(789);\n\t\t\n\t\tPortletDefinition portletDefinition = mock(PortletDefinition.class);\n\t\twhen(portletDefinition.getCacheScope()).thenReturn(\"private\");\n\t\t\n\t\tPortletCacheControlServiceImpl cacheControlService = new PortletCacheControlServiceImpl();\n\t\tcacheControlService.setPrivateScopePortletRenderOutputCache(privateScopeRenderCache);\n\t\tcacheControlService.setPublicScopePortletRenderOutputCache(publicScopeRenderCache);\n\t\tcacheControlService.setPrivateScopePortletResourceOutputCache(privateScopeResourceCache);\n\t\tcacheControlService.setPublicScopePortletResourceOutputCache(publicScopeResourceCache);\n\t\tfinal IPortletWindowRegistry portletWindowRegistry = mock(IPortletWindowRegistry.class);\n\t\tfinal IPortletWindow portletWindow = mock(IPortletWindow.class);\n\t\tfinal IPortletEntity portletEntity = mock(IPortletEntity.class);\n\t\t\n\t\twhen(portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindow.getPortletEntityId()).thenReturn(portletEntityId);\n\t\twhen(portletEntity.getPortletDefinitionId()).thenReturn(portletDefinitionId);\n\t\t\n\t\tfinal IPortletEntityRegistry portletEntityRegistry = mock(IPortletEntityRegistry.class);\n\t\twhen(portletEntityRegistry.getPortletEntity(httpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\tfinal IPortletDefinitionRegistry portletDefinitionRegistry = mock(IPortletDefinitionRegistry.class);\n\t\twhen(portletDefinitionRegistry.getParentPortletDescriptor(portletDefinitionId)).thenReturn(portletDefinition);\n\n\t\tcacheControlService.setPortletWindowRegistry(portletWindowRegistry);\n\t\tcacheControlService.setPortletDefinitionRegistry(portletDefinitionRegistry);\n\t\tcacheControlService.setPortletEntityRegistry(portletEntityRegistry);\n\t\t\n\t\tCacheControl control = cacheControlService.getPortletRenderCacheControl(portletWindowId, httpRequest);\n\t\tassertFalse(control.isPublicScope());\n\t}","id":12297,"modified_method":"@Test\n\tpublic void testDetermineCacheScopePortletDefinitionPrivate() {\n\t\tMockHttpServletRequest httpRequest = new MockHttpServletRequest();\n\t\tMockPortletWindowId portletWindowId = new MockPortletWindowId(\"123\");\n\t\tMockPortletEntityId portletEntityId = new MockPortletEntityId(\"456\");\n\t\tMockPortletDefinitionId portletDefinitionId = new MockPortletDefinitionId(789);\n\t\t\n\t\tPortletDefinition portletDefinition = mock(PortletDefinition.class);\n\t\twhen(portletDefinition.getCacheScope()).thenReturn(\"private\");\n\t\t\n\t\tPortletCacheControlServiceImpl cacheControlService = new PortletCacheControlServiceImpl();\n\t\tcacheControlService.setPrivateScopePortletRenderOutputCache(privateScopeRenderCache);\n\t\tcacheControlService.setPublicScopePortletRenderOutputCache(publicScopeRenderCache);\n\t\tcacheControlService.setPrivateScopePortletResourceOutputCache(privateScopeResourceCache);\n\t\tcacheControlService.setPublicScopePortletResourceOutputCache(publicScopeResourceCache);\n\t\tfinal IPortletWindowRegistry portletWindowRegistry = mock(IPortletWindowRegistry.class);\n\t\tfinal IPortletWindow portletWindow = mock(IPortletWindow.class);\n\t\tfinal IPortletEntity portletEntity = mock(IPortletEntity.class);\n\t\t\n\t\twhen(portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindow.getPortletEntityId()).thenReturn(portletEntityId);\n        when(portletWindow.getWindowState()).thenReturn(WindowState.NORMAL);\n        when(portletWindow.getPortletMode()).thenReturn(PortletMode.VIEW);\n\t\twhen(portletEntity.getPortletDefinitionId()).thenReturn(portletDefinitionId);\n\t\t\n\t\tfinal IPortletEntityRegistry portletEntityRegistry = mock(IPortletEntityRegistry.class);\n\t\twhen(portletEntityRegistry.getPortletEntity(httpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\tfinal IPortletDefinitionRegistry portletDefinitionRegistry = mock(IPortletDefinitionRegistry.class);\n\t\twhen(portletDefinitionRegistry.getParentPortletDescriptor(portletDefinitionId)).thenReturn(portletDefinition);\n\n\t\tcacheControlService.setPortletWindowRegistry(portletWindowRegistry);\n\t\tcacheControlService.setPortletDefinitionRegistry(portletDefinitionRegistry);\n\t\tcacheControlService.setPortletEntityRegistry(portletEntityRegistry);\n\t\t\n\t\tCacheControl control = cacheControlService.getPortletRenderCacheControl(portletWindowId, httpRequest);\n\t\tassertFalse(control.isPublicScope());\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Test\n\tpublic void testDetermineCacheScopePortletDefinitionPublic() {\n\t\tMockHttpServletRequest httpRequest = new MockHttpServletRequest();\n\t\tMockPortletWindowId portletWindowId = new MockPortletWindowId(\"123\");\n\t\tMockPortletEntityId portletEntityId = new MockPortletEntityId(\"456\");\n\t\tMockPortletDefinitionId portletDefinitionId = new MockPortletDefinitionId(789);\n\t\t\n\t\tPortletDefinition portletDefinition = mock(PortletDefinition.class);\n\t\twhen(portletDefinition.getCacheScope()).thenReturn(MimeResponse.PUBLIC_SCOPE);\n\t\t\n\t\tPortletCacheControlServiceImpl cacheControlService = new PortletCacheControlServiceImpl();\n\t\tcacheControlService.setPrivateScopePortletRenderOutputCache(privateScopeRenderCache);\n\t\tcacheControlService.setPublicScopePortletRenderOutputCache(publicScopeRenderCache);\n\t\tcacheControlService.setPrivateScopePortletResourceOutputCache(privateScopeResourceCache);\n\t\tcacheControlService.setPublicScopePortletResourceOutputCache(publicScopeResourceCache);\n\t\tfinal IPortletWindowRegistry portletWindowRegistry = mock(IPortletWindowRegistry.class);\n\t\tfinal IPortletWindow portletWindow = mock(IPortletWindow.class);\n\t\tfinal IPortletEntity portletEntity = mock(IPortletEntity.class);\n\t\t\n\t\twhen(portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindow.getPortletEntityId()).thenReturn(portletEntityId);\n\t\twhen(portletEntity.getPortletDefinitionId()).thenReturn(portletDefinitionId);\n\t\t\n\t\tfinal IPortletEntityRegistry portletEntityRegistry = mock(IPortletEntityRegistry.class);\n\t\twhen(portletEntityRegistry.getPortletEntity(httpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\tfinal IPortletDefinitionRegistry portletDefinitionRegistry = mock(IPortletDefinitionRegistry.class);\n\t\twhen(portletDefinitionRegistry.getParentPortletDescriptor(portletDefinitionId)).thenReturn(portletDefinition);\n\n\t\tcacheControlService.setPortletWindowRegistry(portletWindowRegistry);\n\t\tcacheControlService.setPortletDefinitionRegistry(portletDefinitionRegistry);\n\t\tcacheControlService.setPortletEntityRegistry(portletEntityRegistry);\n\t\t\n\t\tCacheControl control = cacheControlService.getPortletRenderCacheControl(portletWindowId, httpRequest);\n\t\tassertTrue(control.isPublicScope());\n\t}","id":12298,"modified_method":"@Test\n\tpublic void testDetermineCacheScopePortletDefinitionPublic() {\n\t\tMockHttpServletRequest httpRequest = new MockHttpServletRequest();\n\t\tMockPortletWindowId portletWindowId = new MockPortletWindowId(\"123\");\n\t\tMockPortletEntityId portletEntityId = new MockPortletEntityId(\"456\");\n\t\tMockPortletDefinitionId portletDefinitionId = new MockPortletDefinitionId(789);\n\t\t\n\t\tPortletDefinition portletDefinition = mock(PortletDefinition.class);\n\t\twhen(portletDefinition.getCacheScope()).thenReturn(MimeResponse.PUBLIC_SCOPE);\n\t\t\n\t\tPortletCacheControlServiceImpl cacheControlService = new PortletCacheControlServiceImpl();\n\t\tcacheControlService.setPrivateScopePortletRenderOutputCache(privateScopeRenderCache);\n\t\tcacheControlService.setPublicScopePortletRenderOutputCache(publicScopeRenderCache);\n\t\tcacheControlService.setPrivateScopePortletResourceOutputCache(privateScopeResourceCache);\n\t\tcacheControlService.setPublicScopePortletResourceOutputCache(publicScopeResourceCache);\n\t\tfinal IPortletWindowRegistry portletWindowRegistry = mock(IPortletWindowRegistry.class);\n\t\tfinal IPortletWindow portletWindow = mock(IPortletWindow.class);\n\t\tfinal IPortletEntity portletEntity = mock(IPortletEntity.class);\n\t\t\n\t\twhen(portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindow.getPortletEntityId()).thenReturn(portletEntityId);\n        when(portletWindow.getWindowState()).thenReturn(WindowState.NORMAL);\n        when(portletWindow.getPortletMode()).thenReturn(PortletMode.VIEW);\n\t\twhen(portletEntity.getPortletDefinitionId()).thenReturn(portletDefinitionId);\n\t\t\n\t\tfinal IPortletEntityRegistry portletEntityRegistry = mock(IPortletEntityRegistry.class);\n\t\twhen(portletEntityRegistry.getPortletEntity(httpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\tfinal IPortletDefinitionRegistry portletDefinitionRegistry = mock(IPortletDefinitionRegistry.class);\n\t\twhen(portletDefinitionRegistry.getParentPortletDescriptor(portletDefinitionId)).thenReturn(portletDefinition);\n\n\t\tcacheControlService.setPortletWindowRegistry(portletWindowRegistry);\n\t\tcacheControlService.setPortletDefinitionRegistry(portletDefinitionRegistry);\n\t\tcacheControlService.setPortletEntityRegistry(portletEntityRegistry);\n\t\t\n\t\tCacheControl control = cacheControlService.getPortletRenderCacheControl(portletWindowId, httpRequest);\n\t\tassertTrue(control.isPublicScope());\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Test\n\tpublic void testGetCacheControlDataExistsInPrivateCache() {\n\t\t// mock 2 requests, have to share sessionId for private cache\n\t\tMockHttpSession mockSession = new MockHttpSession();\n\t\tMockHttpServletRequest httpRequest = new MockHttpServletRequest();\n\t\thttpRequest.setSession(mockSession);\n\t\tMockHttpServletRequest nextHttpRequest = new MockHttpServletRequest();\n\t\tnextHttpRequest.setSession(mockSession);\n\t\t\n\t\tMockPortletWindowId portletWindowId = new MockPortletWindowId(\"123\");\n\t\tMockPortletEntityId portletEntityId = new MockPortletEntityId(\"456\");\n\t\tMockPortletDefinitionId portletDefinitionId = new MockPortletDefinitionId(789);\n\t\t\n\t\tPortletDefinition portletDefinition = mock(PortletDefinition.class);\n\t\t// use private cache\n\t\twhen(portletDefinition.getCacheScope()).thenReturn(\"private\");\n\t\twhen(portletDefinition.getExpirationCache()).thenReturn(300);\n\t\t\n\t\tPortletCacheControlServiceImpl cacheControlService = new PortletCacheControlServiceImpl();\n\t\tcacheControlService.setPrivateScopePortletRenderOutputCache(privateScopeRenderCache);\n\t\tcacheControlService.setPublicScopePortletRenderOutputCache(publicScopeRenderCache);\n\t\tcacheControlService.setPrivateScopePortletResourceOutputCache(privateScopeResourceCache);\n\t\tcacheControlService.setPublicScopePortletResourceOutputCache(publicScopeResourceCache);\n\t\t\n\t\tfinal IPortletWindowRegistry portletWindowRegistry = mock(IPortletWindowRegistry.class);\n\t\tfinal IPortletWindow portletWindow = mock(IPortletWindow.class);\n\t\tfinal IPortletEntity portletEntity = mock(IPortletEntity.class);\n\t\t\n\t\twhen(portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindowRegistry.getPortletWindow(nextHttpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindow.getPortletEntityId()).thenReturn(portletEntityId);\n\t\twhen(portletEntity.getPortletDefinitionId()).thenReturn(portletDefinitionId);\n\t\t\n\t\tfinal IPortletEntityRegistry portletEntityRegistry = mock(IPortletEntityRegistry.class);\n\t\twhen(portletEntityRegistry.getPortletEntity(httpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\twhen(portletEntityRegistry.getPortletEntity(nextHttpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\tfinal IPortletDefinitionRegistry portletDefinitionRegistry = mock(IPortletDefinitionRegistry.class);\n\t\twhen(portletDefinitionRegistry.getParentPortletDescriptor(portletDefinitionId)).thenReturn(portletDefinition);\n\t\t\n\t\tcacheControlService.setPortletWindowRegistry(portletWindowRegistry);\n\t\tcacheControlService.setPortletDefinitionRegistry(portletDefinitionRegistry);\n\t\tcacheControlService.setPortletEntityRegistry(portletEntityRegistry);\n\t\t\n\t\tCacheControl control = cacheControlService.getPortletRenderCacheControl(portletWindowId, httpRequest);\n\t\tassertFalse(control.isPublicScope());\n\t\t\n\t\tcontrol.setETag(\"123456\");\n\t\tcacheControlService.cachePortletRenderOutput(portletWindowId, httpRequest, \"<p>Cached content<\/p>\", control);\n\t\t\n\t\t\n\t\t// retrieve cachecontrol again, and return should have etag set\n\t\t// note using 'nextHttpRequest' \n\t\tCacheControl afterCache = cacheControlService.getPortletRenderCacheControl(portletWindowId, nextHttpRequest);\n\t\tAssert.assertEquals(\"123456\", afterCache.getETag());\n\t}","id":12299,"modified_method":"@Test\n\tpublic void testGetCacheControlDataExistsInPrivateCache() {\n\t\t// mock 2 requests, have to share sessionId for private cache\n\t\tMockHttpSession mockSession = new MockHttpSession();\n\t\tMockHttpServletRequest httpRequest = new MockHttpServletRequest();\n\t\thttpRequest.setSession(mockSession);\n\t\tMockHttpServletRequest nextHttpRequest = new MockHttpServletRequest();\n\t\tnextHttpRequest.setSession(mockSession);\n\t\t\n\t\tMockPortletWindowId portletWindowId = new MockPortletWindowId(\"123\");\n\t\tMockPortletEntityId portletEntityId = new MockPortletEntityId(\"456\");\n\t\tMockPortletDefinitionId portletDefinitionId = new MockPortletDefinitionId(789);\n\t\t\n\t\tPortletDefinition portletDefinition = mock(PortletDefinition.class);\n\t\t// use private cache\n\t\twhen(portletDefinition.getCacheScope()).thenReturn(\"private\");\n\t\twhen(portletDefinition.getExpirationCache()).thenReturn(300);\n\t\t\n\t\tPortletCacheControlServiceImpl cacheControlService = new PortletCacheControlServiceImpl();\n\t\tcacheControlService.setPrivateScopePortletRenderOutputCache(privateScopeRenderCache);\n\t\tcacheControlService.setPublicScopePortletRenderOutputCache(publicScopeRenderCache);\n\t\tcacheControlService.setPrivateScopePortletResourceOutputCache(privateScopeResourceCache);\n\t\tcacheControlService.setPublicScopePortletResourceOutputCache(publicScopeResourceCache);\n\t\t\n\t\tfinal IPortletWindowRegistry portletWindowRegistry = mock(IPortletWindowRegistry.class);\n\t\tfinal IPortletWindow portletWindow = mock(IPortletWindow.class);\n\t\tfinal IPortletEntity portletEntity = mock(IPortletEntity.class);\n\t\t\n\t\twhen(portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindowRegistry.getPortletWindow(nextHttpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindow.getPortletEntityId()).thenReturn(portletEntityId);\n        when(portletWindow.getWindowState()).thenReturn(WindowState.NORMAL);\n        when(portletWindow.getPortletMode()).thenReturn(PortletMode.VIEW);\n        when(portletEntity.getPortletDefinitionId()).thenReturn(portletDefinitionId);\n\t\t\n\t\tfinal IPortletEntityRegistry portletEntityRegistry = mock(IPortletEntityRegistry.class);\n\t\twhen(portletEntityRegistry.getPortletEntity(httpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\twhen(portletEntityRegistry.getPortletEntity(nextHttpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\tfinal IPortletDefinitionRegistry portletDefinitionRegistry = mock(IPortletDefinitionRegistry.class);\n\t\twhen(portletDefinitionRegistry.getParentPortletDescriptor(portletDefinitionId)).thenReturn(portletDefinition);\n\t\t\n\t\tcacheControlService.setPortletWindowRegistry(portletWindowRegistry);\n\t\tcacheControlService.setPortletDefinitionRegistry(portletDefinitionRegistry);\n\t\tcacheControlService.setPortletEntityRegistry(portletEntityRegistry);\n\t\t\n\t\tCacheControl control = cacheControlService.getPortletRenderCacheControl(portletWindowId, httpRequest);\n\t\tassertFalse(control.isPublicScope());\n\t\t\n\t\tcontrol.setETag(\"123456\");\n\t\tcacheControlService.cachePortletRenderOutput(portletWindowId, httpRequest, \"<p>Cached content<\/p>\", control);\n\t\t\n\t\t\n\t\t// retrieve cachecontrol again, and return should have etag set\n\t\t// note using 'nextHttpRequest' \n\t\tCacheControl afterCache = cacheControlService.getPortletRenderCacheControl(portletWindowId, nextHttpRequest);\n\t\tAssert.assertEquals(\"123456\", afterCache.getETag());\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Test\n\tpublic void testGetCacheControlDefault() {\n\t\tMockHttpServletRequest httpRequest = new MockHttpServletRequest();\n\t\tMockPortletWindowId portletWindowId = new MockPortletWindowId(\"123\");\n\t\tMockPortletEntityId portletEntityId = new MockPortletEntityId(\"456\");\n\t\tMockPortletDefinitionId portletDefinitionId = new MockPortletDefinitionId(789);\n\t\t\n\t\tPortletDefinition portletDefinition = mock(PortletDefinition.class);\n\t\twhen(portletDefinition.getCacheScope()).thenReturn(null);\n\t\t\n\t\tPortletCacheControlServiceImpl cacheControlService = new PortletCacheControlServiceImpl();\n\t\tcacheControlService.setPrivateScopePortletRenderOutputCache(privateScopeRenderCache);\n\t\tcacheControlService.setPublicScopePortletRenderOutputCache(publicScopeRenderCache);\n\t\tcacheControlService.setPrivateScopePortletResourceOutputCache(privateScopeResourceCache);\n\t\tcacheControlService.setPublicScopePortletResourceOutputCache(publicScopeResourceCache);\n\t\t\n\t\tfinal IPortletWindowRegistry portletWindowRegistry = mock(IPortletWindowRegistry.class);\n\t\tfinal IPortletWindow portletWindow = mock(IPortletWindow.class);\n\t\tfinal IPortletEntity portletEntity = mock(IPortletEntity.class);\n\t\t\n\t\twhen(portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindow.getPortletEntityId()).thenReturn(portletEntityId);\n\t\twhen(portletEntity.getPortletDefinitionId()).thenReturn(portletDefinitionId);\n\t\t\n\t\tfinal IPortletEntityRegistry portletEntityRegistry = mock(IPortletEntityRegistry.class);\n\t\twhen(portletEntityRegistry.getPortletEntity(httpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\tfinal IPortletDefinitionRegistry portletDefinitionRegistry = mock(IPortletDefinitionRegistry.class);\n\t\twhen(portletDefinitionRegistry.getParentPortletDescriptor(portletDefinitionId)).thenReturn(portletDefinition);\n\n\t\tcacheControlService.setPortletWindowRegistry(portletWindowRegistry);\n\t\tcacheControlService.setPortletDefinitionRegistry(portletDefinitionRegistry);\n\t\tcacheControlService.setPortletEntityRegistry(portletEntityRegistry);\n\t\t\n\t\tCacheControl control = cacheControlService.getPortletRenderCacheControl(portletWindowId, httpRequest);\n\t\tassertFalse(control.isPublicScope());\n\t\tassertNull(control.getETag());\n\t}","id":12300,"modified_method":"@Test\n\tpublic void testGetCacheControlDefault() {\n\t\tMockHttpServletRequest httpRequest = new MockHttpServletRequest();\n\t\tMockPortletWindowId portletWindowId = new MockPortletWindowId(\"123\");\n\t\tMockPortletEntityId portletEntityId = new MockPortletEntityId(\"456\");\n\t\tMockPortletDefinitionId portletDefinitionId = new MockPortletDefinitionId(789);\n\t\t\n\t\tPortletDefinition portletDefinition = mock(PortletDefinition.class);\n\t\twhen(portletDefinition.getCacheScope()).thenReturn(null);\n\t\t\n\t\tPortletCacheControlServiceImpl cacheControlService = new PortletCacheControlServiceImpl();\n\t\tcacheControlService.setPrivateScopePortletRenderOutputCache(privateScopeRenderCache);\n\t\tcacheControlService.setPublicScopePortletRenderOutputCache(publicScopeRenderCache);\n\t\tcacheControlService.setPrivateScopePortletResourceOutputCache(privateScopeResourceCache);\n\t\tcacheControlService.setPublicScopePortletResourceOutputCache(publicScopeResourceCache);\n\t\t\n\t\tfinal IPortletWindowRegistry portletWindowRegistry = mock(IPortletWindowRegistry.class);\n\t\tfinal IPortletWindow portletWindow = mock(IPortletWindow.class);\n\t\tfinal IPortletEntity portletEntity = mock(IPortletEntity.class);\n\t\t\n\t\twhen(portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId)).thenReturn(portletWindow);\n\t\twhen(portletWindow.getPortletEntityId()).thenReturn(portletEntityId);\n\t\twhen(portletWindow.getWindowState()).thenReturn(WindowState.NORMAL);\n\t\twhen(portletWindow.getPortletMode()).thenReturn(PortletMode.VIEW);\n\t\twhen(portletEntity.getPortletDefinitionId()).thenReturn(portletDefinitionId);\n\t\t\n\t\tfinal IPortletEntityRegistry portletEntityRegistry = mock(IPortletEntityRegistry.class);\n\t\twhen(portletEntityRegistry.getPortletEntity(httpRequest, portletEntityId)).thenReturn(portletEntity);\n\t\tfinal IPortletDefinitionRegistry portletDefinitionRegistry = mock(IPortletDefinitionRegistry.class);\n\t\twhen(portletDefinitionRegistry.getParentPortletDescriptor(portletDefinitionId)).thenReturn(portletDefinition);\n\n\t\tcacheControlService.setPortletWindowRegistry(portletWindowRegistry);\n\t\tcacheControlService.setPortletDefinitionRegistry(portletDefinitionRegistry);\n\t\tcacheControlService.setPortletEntityRegistry(portletEntityRegistry);\n\t\t\n\t\tCacheControl control = cacheControlService.getPortletRenderCacheControl(portletWindowId, httpRequest);\n\t\tassertFalse(control.isPublicScope());\n\t\tassertNull(control.getETag());\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * PLT 22.1 If the content of a portlet is cached and the portlet is target of request \n     * with an action-type semantic (e.g. an action or event call), the portlet container should discard the cache and\n     * invoke the corresponding request handling methods of the portlet like processAction,or processEvent.\n     * \n     * (non-Javadoc)\n     * @see org.jasig.portal.portlet.rendering.IPortletRenderer#doEvent(org.jasig.portal.portlet.om.IPortletWindowId, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.portlet.Event)\n     */\n    @Override\n    public long doEvent(IPortletWindowId portletWindowId, HttpServletRequest httpServletRequest,\n            HttpServletResponse httpServletResponse, Event event) {\n    \tCacheControl cacheControl = this.portletCacheControlService.getPortletRenderCacheControl(portletWindowId, httpServletRequest);\n    \tthis.portletCacheControlService.purgeCachedPortletData(portletWindowId, httpServletRequest, cacheControl);\n    \t\n        final IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpServletRequest, portletWindowId);\n        \n        httpServletRequest = this.setupPortletRequest(httpServletRequest);\n        httpServletResponse = this.setupPortletResponse(httpServletResponse);\n        \n        //Execute the action, \n        if (this.logger.isDebugEnabled()) {\n            this.logger.debug(\"Executing portlet event for window '\" + portletWindow + \"'\");\n        }\n        \n        final long start = System.currentTimeMillis();\n        try {\n            this.portletContainer.doEvent(portletWindow.getPlutoPortletWindow(), httpServletRequest, httpServletResponse, event);\n        }\n        catch (PortletException pe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing event.\", portletWindow, pe);\n        }\n        catch (PortletContainerException pce) {\n            throw new PortletDispatchException(\"The portlet container threw an exception while executing event on portlet window '\" + portletWindow + \"'.\", portletWindow, pce);\n        }\n        catch (IOException ioe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing event.\", portletWindow, ioe);\n        }\n        \n        final long executionTime = System.currentTimeMillis() - start;\n        final IPortletEntity portletEntity = portletWindow.getPortletEntity();\n        final IPortletDefinition portletDefinition = portletEntity.getPortletDefinition();\n        final String fname = portletDefinition.getFName();\n        final Map<String, List<String>> parameters = this.getParameters(httpServletRequest, portletWindowId, false);\n        this.portalEventFactory.publishPortletEventExecutionEvent(httpServletRequest, this, fname, executionTime, parameters, event.getQName());\n        \n        return executionTime;\n    }","id":12301,"modified_method":"/**\n     * PLT 22.1 If the content of a portlet is cached and the portlet is target of request \n     * with an action-type semantic (e.g. an action or event call), the portlet container should discard the cache and\n     * invoke the corresponding request handling methods of the portlet like processAction,or processEvent.\n     * \n     * (non-Javadoc)\n     * @see org.jasig.portal.portlet.rendering.IPortletRenderer#doEvent(org.jasig.portal.portlet.om.IPortletWindowId, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.portlet.Event)\n     */\n    @Override\n    public long doEvent(IPortletWindowId portletWindowId, HttpServletRequest httpServletRequest,\n            HttpServletResponse httpServletResponse, Event event) {\n    \tthis.portletCacheControlService.purgeCachedPortletData(portletWindowId, httpServletRequest);\n    \t\n        final IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpServletRequest, portletWindowId);\n        \n        httpServletRequest = this.setupPortletRequest(httpServletRequest);\n        httpServletResponse = this.setupPortletResponse(httpServletResponse);\n        \n        //Execute the action, \n        if (this.logger.isDebugEnabled()) {\n            this.logger.debug(\"Executing portlet event for window '\" + portletWindow + \"'\");\n        }\n        \n        final long start = System.currentTimeMillis();\n        try {\n            this.portletContainer.doEvent(portletWindow.getPlutoPortletWindow(), httpServletRequest, httpServletResponse, event);\n        }\n        catch (PortletException pe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing event.\", portletWindow, pe);\n        }\n        catch (PortletContainerException pce) {\n            throw new PortletDispatchException(\"The portlet container threw an exception while executing event on portlet window '\" + portletWindow + \"'.\", portletWindow, pce);\n        }\n        catch (IOException ioe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing event.\", portletWindow, ioe);\n        }\n        \n        final long executionTime = System.currentTimeMillis() - start;\n        final IPortletEntity portletEntity = portletWindow.getPortletEntity();\n        final IPortletDefinition portletDefinition = portletEntity.getPortletDefinition();\n        final String fname = portletDefinition.getFName();\n        final Map<String, List<String>> parameters = this.getParameters(httpServletRequest, portletWindowId, false);\n        this.portalEventFactory.publishPortletEventExecutionEvent(httpServletRequest, this, fname, executionTime, parameters, event.getQName());\n        \n        return executionTime;\n    }","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * PLT 22.1 If the content of a portlet is cached and the portlet is target of request \n     * with an action-type semantic (e.g. an action or event call), the portlet container should discard the cache and\n     * invoke the corresponding request handling methods of the portlet like processAction,or processEvent.\n     * \n\t *  (non-Javadoc)\n     * @see org.jasig.portal.channels.portlet.IPortletRenderer#doAction(org.jasig.portal.portlet.om.IPortletWindowId, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\n     */\n    @Override\n    public long doAction(IPortletWindowId portletWindowId, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n    \tCacheControl cacheControl = this.portletCacheControlService.getPortletRenderCacheControl(portletWindowId, httpServletRequest);\n    \tthis.portletCacheControlService.purgeCachedPortletData(portletWindowId, httpServletRequest, cacheControl);\n    \t\n    \tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpServletRequest, portletWindowId);\n        \n        httpServletRequest = this.setupPortletRequest(httpServletRequest);\n        httpServletResponse = this.setupPortletResponse(httpServletResponse);\n        \n        //Execute the action, \n        if (this.logger.isDebugEnabled()) {\n            this.logger.debug(\"Executing portlet action for window '\" + portletWindow + \"'\");\n        }\n        \n        final long start = System.currentTimeMillis();\n        try {\n            this.portletContainer.doAction(portletWindow.getPlutoPortletWindow(), httpServletRequest, httpServletResponse);\n        }\n        catch (PortletException pe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing action.\", portletWindow, pe);\n        }\n        catch (PortletContainerException pce) {\n            throw new PortletDispatchException(\"The portlet container threw an exception while executing action on portlet window '\" + portletWindow + \"'.\", portletWindow, pce);\n        }\n        catch (IOException ioe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing action.\", portletWindow, ioe);\n        }\n        \n        final long executionTime = System.currentTimeMillis() - start;\n        \n        final IPortletEntity portletEntity = portletWindow.getPortletEntity();\n        final IPortletDefinition portletDefinition = portletEntity.getPortletDefinition();\n        final String fname = portletDefinition.getFName();\n        final Map<String, List<String>> parameters = this.getParameters(httpServletRequest, portletWindowId, false);\n        this.portalEventFactory.publishPortletActionExecutionEvent(httpServletRequest, this, fname, executionTime, parameters);\n        \n        return executionTime;\n    }","id":12302,"modified_method":"/**\n\t * PLT 22.1 If the content of a portlet is cached and the portlet is target of request \n     * with an action-type semantic (e.g. an action or event call), the portlet container should discard the cache and\n     * invoke the corresponding request handling methods of the portlet like processAction,or processEvent.\n     * \n\t *  (non-Javadoc)\n     * @see org.jasig.portal.channels.portlet.IPortletRenderer#doAction(org.jasig.portal.portlet.om.IPortletWindowId, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\n     */\n    @Override\n    public long doAction(IPortletWindowId portletWindowId, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {\n    \tthis.portletCacheControlService.purgeCachedPortletData(portletWindowId, httpServletRequest);\n    \t\n    \tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpServletRequest, portletWindowId);\n        \n        httpServletRequest = this.setupPortletRequest(httpServletRequest);\n        httpServletResponse = this.setupPortletResponse(httpServletResponse);\n        \n        //Execute the action, \n        if (this.logger.isDebugEnabled()) {\n            this.logger.debug(\"Executing portlet action for window '\" + portletWindow + \"'\");\n        }\n        \n        final long start = System.currentTimeMillis();\n        try {\n            this.portletContainer.doAction(portletWindow.getPlutoPortletWindow(), httpServletRequest, httpServletResponse);\n        }\n        catch (PortletException pe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing action.\", portletWindow, pe);\n        }\n        catch (PortletContainerException pce) {\n            throw new PortletDispatchException(\"The portlet container threw an exception while executing action on portlet window '\" + portletWindow + \"'.\", portletWindow, pce);\n        }\n        catch (IOException ioe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing action.\", portletWindow, ioe);\n        }\n        \n        final long executionTime = System.currentTimeMillis() - start;\n        \n        final IPortletEntity portletEntity = portletWindow.getPortletEntity();\n        final IPortletDefinition portletDefinition = portletEntity.getPortletDefinition();\n        final String fname = portletDefinition.getFName();\n        final Map<String, List<String>> parameters = this.getParameters(httpServletRequest, portletWindowId, false);\n        this.portalEventFactory.publishPortletActionExecutionEvent(httpServletRequest, this, fname, executionTime, parameters);\n        \n        return executionTime;\n    }","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * Verify invoking portletRenderer#doAction removes cached content.\n\t * \n\t * @throws PortletContainerException \n\t * @throws IOException \n\t * @throws PortletException \n\t */\n\t@Test\n\tpublic void doActionPurgesCachedContent() throws PortletException, IOException, PortletContainerException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n\t\tDate now = new Date();\n\t\tCacheControlImpl cacheControl = new CacheControlImpl();\n\t\t\n\t\tcacheControl.setETag(\"123456\");\n\t\tcacheControl.setExpirationTime(300);\n\t\tCachedPortletData cachedPortletData = new CachedPortletData();\n\t\tcachedPortletData.setStringData(\"<p>Some content<\/p>\");\n\t\tcachedPortletData.setEtag(\"123456\");\n\t\tcachedPortletData.setExpirationTimeSeconds(cacheControl.getExpirationTime());\n\t\tcachedPortletData.setTimeStored(now);\n\t\t\n\t\tsetupPortletExecutionMocks(request);\n\t\t\n\t\twhen(portletCacheControlService.getPortletRenderCacheControl(portletWindowId, request)).thenReturn(cacheControl);\n\t\twhen(portletCacheControlService.getCachedPortletRenderOutput(portletWindowId, request)).thenReturn(null);\n\t\twhen(portletCacheControlService.shouldOutputBeCached(cacheControl)).thenReturn(true);\n\n\t\tStringWriter writer = new StringWriter();\n\t\t\n\t\t// doAction will trigger purge\n\t\tportletRenderer.doAction(portletWindowId, request, response);\n\t\tverify(portletCacheControlService, times(1)).purgeCachedPortletData(portletWindowId, request, cacheControl);\n\t\tverify(portletContainer, times(1)).doAction(isA(PortletWindow.class), isA(PortletHttpServletRequestWrapper.class), isA(PortletHttpServletResponseWrapper.class));\n\t\t\n\t\tportletRenderer.doRenderMarkup(portletWindowId, request, response, writer);\n\t\t\n\t\tverify(portletContainer, times(1)).doRender(isA(PortletWindow.class), isA(PortletHttpServletRequestWrapper.class), isA(PortletHttpServletResponseWrapper.class));\n\t\t// verify we never enter the other branch of the \"should render cached output\" if statement\n\t\tverify(portletCacheControlService, times(1)).cachePortletRenderOutput(isA(IPortletWindowId.class), isA(HttpServletRequest.class), isA(String.class), isA(CacheControl.class));\n\t\t\n\t}","id":12303,"modified_method":"/**\n\t * Verify invoking portletRenderer#doAction removes cached content.\n\t * \n\t * @throws PortletContainerException \n\t * @throws IOException \n\t * @throws PortletException \n\t */\n\t@Test\n\tpublic void doActionPurgesCachedContent() throws PortletException, IOException, PortletContainerException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n\t\tDate now = new Date();\n\t\tCacheControlImpl cacheControl = new CacheControlImpl();\n\t\t\n\t\tcacheControl.setETag(\"123456\");\n\t\tcacheControl.setExpirationTime(300);\n\t\tCachedPortletData cachedPortletData = new CachedPortletData();\n\t\tcachedPortletData.setStringData(\"<p>Some content<\/p>\");\n\t\tcachedPortletData.setEtag(\"123456\");\n\t\tcachedPortletData.setExpirationTimeSeconds(cacheControl.getExpirationTime());\n\t\tcachedPortletData.setTimeStored(now);\n\t\t\n\t\tsetupPortletExecutionMocks(request);\n\t\t\n\t\twhen(portletCacheControlService.getPortletRenderCacheControl(portletWindowId, request)).thenReturn(cacheControl);\n\t\twhen(portletCacheControlService.getCachedPortletRenderOutput(portletWindowId, request)).thenReturn(null);\n\t\twhen(portletCacheControlService.shouldOutputBeCached(cacheControl)).thenReturn(true);\n\n\t\tStringWriter writer = new StringWriter();\n\t\t\n\t\t// doAction will trigger purge\n\t\tportletRenderer.doAction(portletWindowId, request, response);\n\t\tverify(portletCacheControlService, times(1)).purgeCachedPortletData(portletWindowId, request);\n\t\tverify(portletContainer, times(1)).doAction(isA(PortletWindow.class), isA(PortletHttpServletRequestWrapper.class), isA(PortletHttpServletResponseWrapper.class));\n\t\t\n\t\tportletRenderer.doRenderMarkup(portletWindowId, request, response, writer);\n\t\t\n\t\tverify(portletContainer, times(1)).doRender(isA(PortletWindow.class), isA(PortletHttpServletRequestWrapper.class), isA(PortletHttpServletResponseWrapper.class));\n\t\t// verify we never enter the other branch of the \"should render cached output\" if statement\n\t\tverify(portletCacheControlService, times(1)).cachePortletRenderOutput(isA(IPortletWindowId.class), isA(HttpServletRequest.class), isA(String.class), isA(CacheControl.class));\n\t\t\n\t}","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    public void onApplicationEvent(ApplicationEvent event) {\n        if (event instanceof HttpSessionDestroyedEvent) {\n            final HttpSession session = ((HttpSessionDestroyedEvent)event).getSession();\n            final Map<String, PortletSession> portletSessions = (Map<String, PortletSession>)session.getAttribute(PORTLET_SESSIONS_MAP);\n            if (portletSessions == null) {\n                return;\n            }\n            \n            for (final Map.Entry<String, PortletSession> portletSessionEntry: portletSessions.entrySet()) {\n                final String contextPath = portletSessionEntry.getKey();\n                final PortletSession portletSession = portletSessionEntry.getValue();\n                try {\n                    portletSession.invalidate();\n                }\n                catch (IllegalStateException e) {\n                    this.logger.info(\"PortletSession with id '\" + portletSession.getId() + \"' for context '\" + contextPath + \"' has already been invalidated.\");\n                }\n                catch (Exception e) {\n                    this.logger.warn(\"Failed to invalidate PortletSession with id '\" + portletSession.getId() + \"' for context '\" + contextPath + \"'\", e);\n                }\n            }\n        }\n    }","id":12304,"modified_method":"public void onApplicationEvent(HttpSessionDestroyedEvent event) {\n        final HttpSession session = ((HttpSessionDestroyedEvent)event).getSession();\n        final Map<String, PortletSession> portletSessions = (Map<String, PortletSession>)session.getAttribute(PORTLET_SESSIONS_MAP);\n        if (portletSessions == null) {\n            return;\n        }\n        \n        for (final Map.Entry<String, PortletSession> portletSessionEntry: portletSessions.entrySet()) {\n            final String contextPath = portletSessionEntry.getKey();\n            final PortletSession portletSession = portletSessionEntry.getValue();\n            try {\n                portletSession.invalidate();\n            }\n            catch (IllegalStateException e) {\n                this.logger.info(\"PortletSession with id '\" + portletSession.getId() + \"' for context '\" + contextPath + \"' has already been invalidated.\");\n            }\n            catch (Exception e) {\n                this.logger.warn(\"Failed to invalidate PortletSession with id '\" + portletSession.getId() + \"' for context '\" + contextPath + \"'\", e);\n            }\n        }\n    }","commit_id":"b79aa08cdde0f1e1cc80524e45abec9a8ae32ad6","url":"https://github.com/Jasig/uPortal"},{"original_method":"/** Write element the slow way, as a long.  There is no way to write a\n   *  missing value with this call.  Under rare circumstances this can throw:\n   *  if the long does not fit in a double (value is larger magnitude than\n   *  2^52), AND float values are stored in Vector.  In this case, there is no\n   *  common compatible data representation.\n   *\n   *  */\n  public final long   set( long i, long   l) {return chunkForRow(i).set(i,l);}","id":12305,"modified_method":"/** Write element the VERY slow way, as a long.  There is no way to write a\n   *  missing value with this call.  Under rare circumstances this can throw:\n   *  if the long does not fit in a double (value is larger magnitude than\n   *  2^52), AND float values are stored in Vector.  In this case, there is no\n   *  common compatible data representation.\n   *\n   *  NOTE: For a faster way, but still slow, use the Vec.Writer below.\n   *  */\n  public final long   set( long i, long   l) {\n    Chunk ck = chunkForRow(i);\n    long ret = ck.set(i,l);\n    ck.close(ck.cidx(), null); //slow to do this for every set -> use Writer if writing many values\n    return ret;\n  }","commit_id":"93a8426a8658231b5401f38e04550281c16c386c","url":"https://github.com/h2oai/h2o-2"},{"original_method":"/** Set the element as missing the slow way.  */\n  public final boolean setNA( long i ) { return chunkForRow(i).setNA(i);}","id":12306,"modified_method":"/** Set the element as missing the VERY slow way.  */\n  public final boolean setNA( long i ) {\n    Chunk ck = chunkForRow(i);\n    boolean ret = ck.setNA(i);\n    ck.close(ck.cidx(), null); //slow to do this for every set -> use Writer if writing many values\n    return ret;\n  }","commit_id":"93a8426a8658231b5401f38e04550281c16c386c","url":"https://github.com/h2oai/h2o-2"},{"original_method":"/** Write element the slow way, as a float.  Float.NaN will be treated as\n   *  a set of a missing element.\n   *  */\n  public final float  set( long i, float  f) {return chunkForRow(i).set(i,f);}","id":12307,"modified_method":"/** Write element the VERY slow way, as a float.  Float.NaN will be treated as\n   *  a set of a missing element.\n   *  */\n  public final float  set( long i, float  f) {\n    Chunk ck = chunkForRow(i);\n    float ret = ck.set(i, f);\n    ck.close(ck.cidx(), null); //slow to do this for every set -> use Writer if writing many values\n    return ret;\n  }","commit_id":"93a8426a8658231b5401f38e04550281c16c386c","url":"https://github.com/h2oai/h2o-2"},{"original_method":"/** Write element the slow way, as a double.  Double.NaN will be treated as\n   *  a set of a missing element.\n   *  */\n  public final double set( long i, double d) {return chunkForRow(i).set(i,d);}","id":12308,"modified_method":"/** Write element the VERY slow way, as a double.  Double.NaN will be treated as\n   *  a set of a missing element.\n   *  */\n  public final double set( long i, double d) {\n    Chunk ck = chunkForRow(i);\n    double ret = ck.set(i,d);\n    ck.close(ck.cidx(), null); //slow to do this for every set -> use Writer if writing many values\n    return ret;\n  }","commit_id":"93a8426a8658231b5401f38e04550281c16c386c","url":"https://github.com/h2oai/h2o-2"},{"original_method":"public int doStartTag() throws JspException {\n\t\ttry {\n\t\t\tServletRequest req = getServletRequest();\n\n\t\t\treq.setAttribute(\"liferay-ui:toggle-area:showKey\", _showKey);\n\t\t\treq.setAttribute(\"liferay-ui:toggle-area:hideKey\", _hideKey);\n\t\t\treq.setAttribute(\n\t\t\t\t\t\"liferay-ui:toggle-area:shown\", String.valueOf(_shown));\n\n\t\t\tif (_name == null) {\n\t\t\t\treq.setAttribute(\n\t\t\t\t\t\"liferay-ui:toggle-area:name\", PwdGenerator.getPassword());\n\t\t\t}\n\t\t\telse {\n\t\t\t\treq.setAttribute(\n\t\t\t\t\t\"liferay-ui:toggle-area:name\", _name);\n\t\t\t}\n\n\t\t\tinclude(getStartPage());\n\n\t\t\treturn EVAL_BODY_INCLUDE;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new JspException(e);\n\t\t}\n\t}","id":12309,"modified_method":"public int doStartTag() throws JspException {\n\t\ttry {\n\t\t\tServletRequest req = getServletRequest();\n\n\t\t\treq.setAttribute(\"liferay-ui:toggle-area:id\", _id);\n\t\t\treq.setAttribute(\"liferay-ui:toggle-area:showImage\", _showImage);\n\t\t\treq.setAttribute(\"liferay-ui:toggle-area:hideImage\", _hideImage);\n\t\t\treq.setAttribute(\n\t\t\t\t\"liferay-ui:toggle-area:showMessage\", _showMessage);\n\t\t\treq.setAttribute(\n\t\t\t\t\"liferay-ui:toggle-area:hideMessage\", _hideMessage);\n\t\t\treq.setAttribute(\n\t\t\t\t\"liferay-ui:toggle-area:defaultShowContent\",\n\t\t\t\tString.valueOf(_defaultShowContent));\n\t\t\treq.setAttribute(\"liferay-ui:toggle-area:stateVar\", _stateVar);\n\t\t\treq.setAttribute(\"liferay-ui:toggle-area:align\", _align);\n\n\t\t\tinclude(getStartPage());\n\n\t\t\treturn EVAL_BODY_INCLUDE;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new JspException(e);\n\t\t}\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setHideKey(String hideKey) {\n\t\t_hideKey = hideKey;\n\t}","id":12310,"modified_method":"public void setHideImage(String hideImage) {\n\t\t_hideImage = hideImage;\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setShown(boolean shown) {\n\t\t_shown = shown;\n\t}","id":12311,"modified_method":"public void setDefaultShowContent(boolean defaultShowContent) {\n\t\t_defaultShowContent = defaultShowContent;\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public int doEndTag() throws JspException {\n\t\ttry {\n\t\t\tinclude(getEndPage());\n\n\t\t\treturn EVAL_PAGE;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new JspException(e);\n\t\t}\n\t\tfinally {\n\t\t\t_startPage = null;\n\t\t\t_endPage = null;\n\t\t\t_showKey = null;\n\t\t\t_hideKey = null;\n\t\t\t_shown = false;\n\t\t\t_name = null;\n\t\t}\n\t}","id":12312,"modified_method":"public int doEndTag() throws JspException {\n\t\ttry {\n\t\t\tinclude(getEndPage());\n\n\t\t\treturn EVAL_PAGE;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new JspException(e);\n\t\t}\n\t\tfinally {\n\t\t\t_startPage = null;\n\t\t\t_endPage = null;\n\t\t\t_id = null;\n\t\t\t_showMessage = null;\n\t\t\t_hideMessage = null;\n\t\t\t_defaultShowContent = true;\n\t\t\t_stateVar = null;\n\t\t\t_align = \"left\";\n\t\t}\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setName(String name) {\n\t\t_name = name;\n\t}","id":12313,"modified_method":"public void setId(String id) {\n\t\t_id = id;\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setShowKey(String showKey) {\n\t\t_showKey = showKey;\n\t}","id":12314,"modified_method":"public void setShowImage(String showImage) {\n\t\t_showImage = showImage;\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setOnImage(String onImage) {\n\t\t_onImage = onImage;\n\t}","id":12315,"modified_method":"public void setHideImage(String hideImage) {\n\t\t_hideImage = hideImage;\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void doTag(\n\t\t\tString page, String id, String onImage, String offImage,\n\t\t\tboolean defaultOn, String stateVar, ServletContext ctx,\n\t\t\tHttpServletRequest req, HttpServletResponse res)\n\t\tthrows Exception {\n\n\t\tClassLoader contextClassLoader =\n\t\t\tThread.currentThread().getContextClassLoader();\n\n\t\ttry {\n\t\t\tThread.currentThread().setContextClassLoader(\n\t\t\t\tPortalClassLoaderUtil.getClassLoader());\n\n\t\t\tObject pageWrapper = page;\n\n\t\t\tif (pageWrapper == null) {\n\t\t\t\tpageWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject idWrapper = id;\n\n\t\t\tif (idWrapper == null) {\n\t\t\t\tidWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject onImageWrapper = onImage;\n\n\t\t\tif (onImageWrapper == null) {\n\t\t\t\tonImageWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject offImageWrapper = offImage;\n\n\t\t\tif (offImageWrapper == null) {\n\t\t\t\toffImageWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject stateVarWrapper = stateVar;\n\n\t\t\tif (stateVarWrapper == null) {\n\t\t\t\tstateVarWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tMethodWrapper methodWrapper = new MethodWrapper(\n\t\t\t\t_TAG_CLASS, _TAG_DO_END_METHOD,\n\t\t\t\tnew Object[] {\n\t\t\t\t\tpageWrapper, idWrapper, onImageWrapper, offImageWrapper,\n\t\t\t\t\tnew BooleanWrapper(defaultOn), stateVarWrapper, ctx, req,\n\t\t\t\t\tres\n\t\t\t\t});\n\n\t\t\tMethodInvoker.invoke(methodWrapper);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\n\t\t\tthrow e;\n\t\t}\n\t\tfinally {\n\t\t\tThread.currentThread().setContextClassLoader(contextClassLoader);\n\t\t}\n\t}","id":12316,"modified_method":"public static void doTag(\n\t\t\tString page, String id, String showImage, String hideImage,\n\t\t\tString showMessage, String hideMessage, boolean defaultShowContent,\n\t\t\tString stateVar, ServletContext ctx, HttpServletRequest req,\n\t\t\tHttpServletResponse res)\n\t\tthrows Exception {\n\n\t\tClassLoader contextClassLoader =\n\t\t\tThread.currentThread().getContextClassLoader();\n\n\t\ttry {\n\t\t\tThread.currentThread().setContextClassLoader(\n\t\t\t\tPortalClassLoaderUtil.getClassLoader());\n\n\t\t\tObject pageWrapper = page;\n\n\t\t\tif (pageWrapper == null) {\n\t\t\t\tpageWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject idWrapper = id;\n\n\t\t\tif (idWrapper == null) {\n\t\t\t\tidWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject showImageWrapper = showImage;\n\n\t\t\tif (showImageWrapper == null) {\n\t\t\t\tshowImageWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject hideImageWrapper = hideImage;\n\n\t\t\tif (hideImageWrapper == null) {\n\t\t\t\thideImageWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject showMessageWrapper = showMessage;\n\n\t\t\tif (showMessageWrapper == null) {\n\t\t\t\tshowMessageWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject hideMessageWrapper = hideMessage;\n\n\t\t\tif (hideMessageWrapper == null) {\n\t\t\t\thideMessageWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tObject stateVarWrapper = stateVar;\n\n\t\t\tif (stateVarWrapper == null) {\n\t\t\t\tstateVarWrapper = new NullWrapper(String.class.getName());\n\t\t\t}\n\n\t\t\tMethodWrapper methodWrapper = new MethodWrapper(\n\t\t\t\t_TAG_CLASS, _TAG_DO_END_METHOD,\n\t\t\t\tnew Object[] {\n\t\t\t\t\tpageWrapper, idWrapper, showImageWrapper, hideImageWrapper,\n\t\t\t\t\tshowMessageWrapper, hideMessageWrapper,\n\t\t\t\t\tnew BooleanWrapper(defaultShowContent), stateVarWrapper,\n\t\t\t\t\tctx, req, res\n\t\t\t\t});\n\n\t\t\tMethodInvoker.invoke(methodWrapper);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\n\t\t\tthrow e;\n\t\t}\n\t\tfinally {\n\t\t\tThread.currentThread().setContextClassLoader(contextClassLoader);\n\t\t}\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void doTag(\n\t\t\tString id, String onImage, String offImage, boolean defaultOn,\n\t\t\tString stateVar, ServletContext ctx, HttpServletRequest req,\n\t\t\tHttpServletResponse res)\n\t\tthrows Exception {\n\n\t\tdoTag(_PAGE, id, onImage, offImage, defaultOn, stateVar, ctx, req, res);\n\t}","id":12317,"modified_method":"public static void doTag(\n\t\t\tString id, String showImage, String hideImage, String showMessage,\n\t\t\tString hideMessage, boolean defaultShowContent, String stateVar,\n\t\t\tServletContext ctx, HttpServletRequest req, HttpServletResponse res)\n\t\tthrows Exception {\n\n\t\tdoTag(\n\t\t\t_PAGE, id, showImage, hideImage, showMessage, hideMessage,\n\t\t\tdefaultShowContent, stateVar, ctx, req, res);\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setDefaultOn(boolean defaultOn) {\n\t\t_defaultOn = defaultOn;\n\t}","id":12318,"modified_method":"public void setDefaultShowContent(boolean defaultShowContent) {\n\t\t_defaultShowContent = defaultShowContent;\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public int doEndTag() throws JspException {\n\t\ttry {\n\t\t\tServletContext ctx = getServletContext();\n\t\t\tHttpServletRequest req = getServletRequest();\n\t\t\tStringServletResponse res = getServletResponse();\n\n\t\t\tdoTag(\n\t\t\t\t_id, _onImage, _offImage, _defaultOn, _stateVar, ctx, req, res);\n\n\t\t\tpageContext.getOut().print(res.getString());\n\n\t\t\treturn EVAL_PAGE;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new JspException(e);\n\t\t}\n\t}","id":12319,"modified_method":"public int doEndTag() throws JspException {\n\t\ttry {\n\t\t\tServletContext ctx = getServletContext();\n\t\t\tHttpServletRequest req = getServletRequest();\n\t\t\tStringServletResponse res = getServletResponse();\n\n\t\t\tdoTag(\n\t\t\t\t_id, _showImage, _hideImage, _showMessage, _hideMessage,\n\t\t\t\t_defaultShowContent, _stateVar, ctx, req, res);\n\n\t\t\tpageContext.getOut().print(res.getString());\n\n\t\t\treturn EVAL_PAGE;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new JspException(e);\n\t\t}\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setOffImage(String offImage) {\n\t\t_offImage = offImage;\n\t}","id":12320,"modified_method":"public void setShowImage(String showImage) {\n\t\t_showImage = showImage;\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void doEndTag(\n\t\t\tString page, String id, String onImage, String offImage,\n\t\t\tboolean defaultOn, String stateVar, ServletContext ctx,\n\t\t\tHttpServletRequest req, HttpServletResponse res)\n\t\tthrows JspException {\n\n\t\ttry {\n\t\t\tThemeDisplay themeDisplay =\n\t\t\t\t(ThemeDisplay)req.getAttribute(WebKeys.THEME_DISPLAY);\n\n\t\t\tif (Validator.isNull(onImage)) {\n\t\t\t\tonImage =\n\t\t\t\t\tthemeDisplay.getPathThemeImages() + \"/arrows/01_down.png\";\n\t\t\t}\n\n\t\t\tif (Validator.isNull(offImage)) {\n\t\t\t\toffImage =\n\t\t\t\t\tthemeDisplay.getPathThemeImages() + \"/arrows/01_right.png\";\n\t\t\t}\n\n\t\t\tString defaultStateValue = defaultOn ? StringPool.BLANK : \"none\";\n\t\t\tString defaultImage = defaultOn ? onImage : offImage;\n\n\t\t\tString clickValue = SessionClicks.get(req, id, null);\n\n\t\t\tif (defaultOn) {\n\t\t\t\tif ((clickValue != null) && (clickValue.equals(\"none\"))) {\n\t\t\t\t\tdefaultStateValue = \"none\";\n\t\t\t\t\tdefaultImage = offImage;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefaultStateValue = \"\";\n\t\t\t\t\tdefaultImage = onImage;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ((clickValue == null) || (clickValue.equals(\"none\"))) {\n\t\t\t\t\tdefaultStateValue = \"none\";\n\t\t\t\t\tdefaultImage = offImage;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefaultStateValue = \"\";\n\t\t\t\t\tdefaultImage = onImage;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (stateVar == null) {\n\t\t\t\tstateVar = PwdGenerator.getPassword(PwdGenerator.KEY3, 8);\n\t\t\t}\n\n\t\t\treq.setAttribute(\"liferay-ui:toggle:id\", id);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:onImage\", onImage);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:offImage\", offImage);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:stateVar\", stateVar);\n\t\t\treq.setAttribute(\n\t\t\t\t\"liferay-ui:toggle:defaultStateValue\", defaultStateValue);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:defaultImage\", defaultImage);\n\n\t\t\tRequestDispatcher rd = ctx.getRequestDispatcher(page);\n\n\t\t\trd.include(req, res);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\n\t\t\tthrow new JspException(e);\n\t\t}\n\t}","id":12321,"modified_method":"public static void doEndTag(\n\t\t\tString page, String id, String showImage, String hideImage,\n\t\t\tString showMessage, String hideMessage, boolean defaultShowContent,\n\t\t\tString stateVar, ServletContext ctx, HttpServletRequest req,\n\t\t\tHttpServletResponse res)\n\t\tthrows JspException {\n\n\t\ttry {\n\t\t\tThemeDisplay themeDisplay =\n\t\t\t\t(ThemeDisplay)req.getAttribute(WebKeys.THEME_DISPLAY);\n\n\t\t\tif (Validator.isNull(showImage) && Validator.isNull(showMessage)) {\n\t\t\t\tshowImage =\n\t\t\t\t\tthemeDisplay.getPathThemeImages() + \"/arrows/01_down.png\";\n\t\t\t}\n\n\t\t\tif (Validator.isNull(hideImage) && Validator.isNull(hideImage)) {\n\t\t\t\thideImage =\n\t\t\t\t\tthemeDisplay.getPathThemeImages() + \"/arrows/01_right.png\";\n\t\t\t}\n\n\t\t\tString defaultStateValue =\n\t\t\t\tdefaultShowContent ? StringPool.BLANK : \"none\";\n\t\t\tString defaultImage = defaultShowContent ? hideImage : showImage;\n\t\t\tString defaultMessage =\n\t\t\t\tdefaultShowContent ? hideMessage : showMessage;\n\n\t\t\tString clickValue = SessionClicks.get(req, id, null);\n\n\t\t\tif (defaultShowContent) {\n\t\t\t\tif ((clickValue != null) && (clickValue.equals(\"none\"))) {\n\t\t\t\t\tdefaultStateValue = \"none\";\n\t\t\t\t\tdefaultImage = showImage;\n\t\t\t\t\tdefaultMessage = showMessage;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefaultStateValue = \"\";\n\t\t\t\t\tdefaultImage = hideImage;\n\t\t\t\t\tdefaultMessage = hideMessage;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ((clickValue == null) || (clickValue.equals(\"none\"))) {\n\t\t\t\t\tdefaultStateValue = \"none\";\n\t\t\t\t\tdefaultImage = showImage;\n\t\t\t\t\tdefaultMessage = showMessage;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefaultStateValue = \"\";\n\t\t\t\t\tdefaultImage = hideImage;\n\t\t\t\t\tdefaultMessage = hideMessage;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (stateVar == null) {\n\t\t\t\tstateVar = PwdGenerator.getPassword(PwdGenerator.KEY3, 8);\n\t\t\t}\n\n\t\t\treq.setAttribute(\"liferay-ui:toggle:id\", id);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:showImage\", showImage);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:hideImage\", hideImage);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:showMessage\", showMessage);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:hideMessage\", hideMessage);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:stateVar\", stateVar);\n\t\t\treq.setAttribute(\n\t\t\t\t\"liferay-ui:toggle:defaultStateValue\", defaultStateValue);\n\t\t\treq.setAttribute(\"liferay-ui:toggle:defaultImage\", defaultImage);\n\t\t\treq.setAttribute(\n\t\t\t\t\"liferay-ui:toggle:defaultMessage\", defaultMessage);\n\n\t\t\tRequestDispatcher rd = ctx.getRequestDispatcher(page);\n\n\t\t\trd.include(req, res);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\n\t\t\tthrow new JspException(e);\n\t\t}\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String toggle(\n\t\t\tString id, String onImage, String offImage, boolean defaultOn)\n\t\tthrows Exception {\n\n\t\t_res.recycle();\n\n\t\tToggleTag.doTag(\n\t\t\tid, onImage, offImage, defaultOn, null, _ctx, _req, _res);\n\n\t\treturn _res.getString();\n\t}","id":12322,"modified_method":"public String toggle(\n\t\t\tString id, String showImage, String hideImage, String showMessage,\n\t\t\tString hideMessage, boolean defaultShowContent)\n\t\tthrows Exception {\n\n\t\t_res.recycle();\n\n\t\tToggleTag.doTag(\n\t\t\tid, showImage, hideImage, showMessage, hideMessage,\n\t\t\tdefaultShowContent, null, _ctx, _req, _res);\n\n\t\treturn _res.getString();\n\t}","commit_id":"eee88ed07697daeb54ca6282c71d14385d1838cd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public long getGroupId() {\n\t\treturn _groupId;\n\t}","id":12323,"modified_method":"public long[] getGroupIds() {\n\t\treturn _groupIds;\n\t}","commit_id":"637d082d76240b4b72dd51a4df6f868d7351ddf4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void cleanUp() {\n\t\t_addDisplayPageParameter = false;\n\t\t_addPortletURLs = null;\n\t\t_groupCount = 1;\n\t\t_groupId = 0;\n\t}","id":12324,"modified_method":"@Override\n\tprotected void cleanUp() {\n\t\t_addDisplayPageParameter = false;\n\t\t_allAssetCategoryIds = null;\n\t\t_allAssetTagNames = null;\n\t\t_classNameIds = null;\n\t\t_classTypeIds = null;\n\t\t_groupIds = null;\n\t\t_redirect = null;\n\t}","commit_id":"637d082d76240b4b72dd51a4df6f868d7351ddf4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setGroupId(long groupId) {\n\t\t_groupId = groupId;\n\t}","id":12325,"modified_method":"public void setGroupIds(long[] groupIds) {\n\t\t_groupIds = groupIds;\n\t}","commit_id":"637d082d76240b4b72dd51a4df6f868d7351ddf4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void setAttributes(HttpServletRequest request) {\n\t\trequest.setAttribute(\n\t\t\t\"liferay-ui:asset-add-button:addDisplayPageParameter\",\n\t\t\t_addDisplayPageParameter);\n\t\trequest.setAttribute(\n\t\t\t\"liferay-ui:asset-add-button:addPortletURLs\", _addPortletURLs);\n\t\trequest.setAttribute(\n\t\t\t\"liferay-ui:asset-add-button:groupCount\", _groupCount);\n\t\trequest.setAttribute(\"liferay-ui:asset-add-button:groupId\", _groupId);\n\t}","id":12326,"modified_method":"@Override\n\tprotected void setAttributes(HttpServletRequest request) {\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\trequest.setAttribute(\n\t\t\t\"liferay-ui:asset-add-button:addDisplayPageParameter\",\n\t\t\t_addDisplayPageParameter);\n\t\trequest.setAttribute(\n\t\t\t\"liferay-ui:asset-add-button:allAssetCategoryIds\",\n\t\t\t_allAssetCategoryIds);\n\t\trequest.setAttribute(\n\t\t\t\"liferay-ui:asset-add-button:allAssetTagNames\", _allAssetTagNames);\n\n\t\tlong[] classNameIds = _classNameIds;\n\n\t\tif (classNameIds == null) {\n\t\t\tclassNameIds = AssetRendererFactoryRegistryUtil.getClassNameIds(\n\t\t\t\tthemeDisplay.getCompanyId());\n\t\t}\n\n\t\trequest.setAttribute(\n\t\t\t\"liferay-ui:asset-add-button:classNameIds\", classNameIds);\n\t\trequest.setAttribute(\n\t\t\t\"liferay-ui:asset-add-button:classTypeIds\", _classTypeIds);\n\n\t\tlong[] groupIds = _groupIds;\n\n\t\tif (groupIds == null) {\n\t\t\tgroupIds = new long[] {themeDisplay.getScopeGroupId()};\n\t\t}\n\n\t\trequest.setAttribute(\"liferay-ui:asset-add-button:groupIds\", groupIds);\n\t\trequest.setAttribute(\"liferay-ui:asset-add-button:redirect\", _redirect);\n\t}","commit_id":"637d082d76240b4b72dd51a4df6f868d7351ddf4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/** Event to add an item to the shopping cart. */\n    public static String addToCart(HttpServletRequest request, HttpServletResponse response) {\n        GenericDelegator delegator = (GenericDelegator) request.getAttribute(\"delegator\");\n        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(\"dispatcher\");\n        ShoppingCart cart = getCartObject(request);\n        ShoppingCartHelper cartHelper = new ShoppingCartHelper(delegator, dispatcher, cart);\n        String controlDirective = null;\n        Map result = null;\n        String productId = null;\n        String parentProductId = null;\n        String itemType = null;\n        String itemDescription = null;\n        String productCategoryId = null;\n        String priceStr = null;\n        Double price = null;\n        String quantityStr = null;\n        double quantity = 0;\n        String reservStartStr = null;\n        String reservEndStr = null;\n        java.sql.Timestamp reservStart = null;\n        java.sql.Timestamp reservEnd = null;\n        String reservLengthStr = null;\n        Double reservLength = null;\n        String reservPersonsStr = null;\n        Double reservPersons = null;\n        String shipBeforeStr = null;\n        String shipBeforeDateStr = null;\n        String shipAfterDateStr = null;\n        java.sql.Timestamp shipBeforeDate = null;\n        java.sql.Timestamp shipAfterDate = null;\n\n        // not used right now: Map attributes = null;\n        String catalogId = CatalogWorker.getCurrentCatalogId(request);\n        Locale locale = UtilHttp.getLocale(request);\n        NumberFormat nf = NumberFormat.getNumberInstance(locale);\n\n        // Get the parameters as a MAP, remove the productId and quantity params.\n        Map paramMap = UtilHttp.getCombinedMap(request);\n\n        String itemGroupNumber = (String) paramMap.get(\"itemGroupNumber\");\n\n        // Get shoppingList info if passed\n        String shoppingListId = (String) paramMap.get(\"shoppingListId\");\n        String shoppingListItemSeqId = (String) paramMap.get(\"shoppingListItemSeqId\");\n        if (paramMap.containsKey(\"ADD_PRODUCT_ID\")) {\n            productId = (String) paramMap.remove(\"ADD_PRODUCT_ID\");\n        } else if (paramMap.containsKey(\"add_product_id\")) {\n            productId = (String) paramMap.remove(\"add_product_id\");\n        }\n        if (paramMap.containsKey(\"PRODUCT_ID\")) {\n            parentProductId = (String) paramMap.remove(\"PRODUCT_ID\");\n        } else if (paramMap.containsKey(\"product_id\")) {\n            parentProductId = (String) paramMap.remove(\"product_id\");\n        }\n\n        Debug.logInfo(\"adding item product \" + productId,module);\n        Debug.logInfo(\"adding item parent product \" + parentProductId,module);\n\n        if (paramMap.containsKey(\"ADD_CATEGORY_ID\")) {\n            productCategoryId = (String) paramMap.remove(\"ADD_CATEGORY_ID\");\n        } else if (paramMap.containsKey(\"add_category_id\")) {\n            productCategoryId = (String) paramMap.remove(\"add_category_id\");\n        }\n        if (productCategoryId != null && productCategoryId.length() == 0) {\n            productCategoryId = null;\n        }\n        \n        if (paramMap.containsKey(\"ADD_ITEM_TYPE\")) {\n            itemType = (String) paramMap.remove(\"ADD_ITEM_TYPE\");\n        } else if (paramMap.containsKey(\"add_item_type\")) {\n            itemType = (String) paramMap.remove(\"add_item_type\");\n        }\n\n        if (UtilValidate.isEmpty(productId)) {\n            // before returning error; check make sure we aren't adding a special item type\n            if (UtilValidate.isEmpty(itemType)) {\n                request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource, \"cart.addToCart.noProductInfoPassed\", locale));\n                return \"success\"; // not critical return to same page\n            }\n        } else {\n            try {\n                String pId = ProductWorker.findProductId(delegator, productId);\n                if (pId != null) {\n                    productId = pId;\n                }\n            } catch (Throwable e) {\n                Debug.logWarning(e, module);\n            }\n        }\n\n        // check for an itemDescription\n        if (paramMap.containsKey(\"ADD_ITEM_DESCRIPTION\")) {\n            itemDescription = (String) paramMap.remove(\"ADD_ITEM_DESCRIPTION\");\n        } else if (paramMap.containsKey(\"add_item_description\")) {\n            itemDescription = (String) paramMap.remove(\"add_item_description\");\n        }\n        if (itemDescription != null && itemDescription.length() == 0) {\n            itemDescription = null;\n        }\n\n        // Get the ProductConfigWrapper (it's not null only for configurable items)\n        ProductConfigWrapper configWrapper = null;\n        configWrapper = ProductConfigWorker.getProductConfigWrapper(productId, cart.getCurrency(), request);\n\n        if (configWrapper != null) {\n            // The choices selected by the user are taken from request and set in the wrapper\n            ProductConfigWorker.fillProductConfigWrapper(configWrapper, request);\n            if (!configWrapper.isCompleted()) {\n                // The configuration is not valid\n                request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource, \"cart.addToCart.productConfigurationIsNotValid\", locale));\n                return \"error\";\n            }\n        }\n\n        // get the override price\n        if (paramMap.containsKey(\"PRICE\")) {\n            priceStr = (String) paramMap.remove(\"PRICE\");\n        } else if (paramMap.containsKey(\"price\")) {\n            priceStr = (String) paramMap.remove(\"price\");\n        }\n        if (priceStr == null) {\n            priceStr = \"0\";  // default price is 0\n        }\n\n        // get the renting data\n        if (paramMap.containsKey(\"reservStart\")) {\n            reservStartStr = (String) paramMap.remove(\"reservStart\");\n            if (reservStartStr.length() == 10) // only date provided, no time string?\n                    reservStartStr += \" 00:00:00.000000000\"; // should have format: yyyy-mm-dd hh:mm:ss.fffffffff\n            if (reservStartStr.length() >0) {\n                try {\n                    reservStart = java.sql.Timestamp.valueOf(reservStartStr);\n                } catch (Exception e) {\n                    Debug.logWarning(e,\"Problems parsing Reservation start string: \"\n                                + reservStartStr, module);\n                    reservStart = null;\n                    request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource,\"cart.addToCart.rental.startDate\", locale));\n                    return \"error\";\n                }\n            }\n            else reservStart = null;\n\n            if (paramMap.containsKey(\"reservEnd\")) {\n                reservEndStr = (String) paramMap.remove(\"reservEnd\");\n                if (reservEndStr.length() == 10) // only date provided, no time string?\n                        reservEndStr += \" 00:00:00.000000000\"; // should have format: yyyy-mm-dd hh:mm:ss.fffffffff\n                if (reservEndStr.length() > 0) {\n                    try {\n                        reservEnd = java.sql.Timestamp.valueOf(reservEndStr);\n                    } catch (Exception e) {\n                        Debug.logWarning(e,\"Problems parsing Reservation end string: \" + reservEndStr, module);\n                        reservEnd = null;\n                        request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource,\"cart.addToCart.rental.endDate\", locale));\n                        return \"error\";\n                    }\n                }\n                else reservEnd = null;\n            }\n\n            if (reservStart != null && reservEnd != null)\t{\n            \treservLength = new Double(UtilDateTime.getInterval(reservStart,reservEnd)/86400000);\n            }\n\n\n\n            if (reservStart != null && paramMap.containsKey(\"reservLength\")) {\n                reservLengthStr = (String) paramMap.remove(\"reservLength\");\n                // parse the reservation Length\n                try {\n                    reservLength = new Double(nf.parse(reservLengthStr).doubleValue());\n                } catch (Exception e) {\n                    Debug.logWarning(e,\"Problems parsing reservation length string: \"\n                                    + reservLengthStr, module);\n                    reservLength = new Double(1);\n                    request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource_error,\"OrderReservationLengthShouldBeAPositiveNumber\", locale));\n                    return \"error\";\n                }\n            }\n\n            if (reservStart != null && paramMap.containsKey(\"reservPersons\")) {\n                reservPersonsStr = (String) paramMap.remove(\"reservPersons\");\n                // parse the number of persons\n                try {\n                    reservPersons = new Double(nf.parse(reservPersonsStr).doubleValue());\n                } catch (Exception e) {\n                    Debug.logWarning(e,\"Problems parsing reservation number of persons string: \" + reservPersonsStr, module);\n                    reservPersons = new Double(1);\n                    request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource_error,\"OrderNumberOfPersonsShouldBeOneOrLarger\", locale));\n                    return \"error\";\n                }\n            }\n        }\n\n        // get the quantity\n        if (paramMap.containsKey(\"QUANTITY\")) {\n            quantityStr = (String) paramMap.remove(\"QUANTITY\");\n        } else if (paramMap.containsKey(\"quantity\")) {\n            quantityStr = (String) paramMap.remove(\"quantity\");\n        }\n        if (UtilValidate.isEmpty(quantityStr)) {\n            quantityStr = \"1\";  // default quantity is 1\n        }\n\n        // parse the price\n        try {\n            price = new Double(nf.parse(priceStr).doubleValue());\n        } catch (Exception e) {\n            Debug.logWarning(e, \"Problems parsing price string: \" + priceStr, module);\n            price = null;\n        }\n\n        // parse the quantity\n        try {\n            quantity = nf.parse(quantityStr).doubleValue();\n        } catch (Exception e) {\n            Debug.logWarning(e, \"Problems parsing quantity string: \" + quantityStr, module);\n            quantity = 1;\n        }\n\n        // get the selected amount\n        String selectedAmountStr = \"0.00\";\n        if (paramMap.containsKey(\"ADD_AMOUNT\")) {\n            selectedAmountStr = (String) paramMap.remove(\"ADD_AMOUNT\");\n        } else if (paramMap.containsKey(\"add_amount\")) {\n            selectedAmountStr = (String) paramMap.remove(\"add_amount\");\n        }\n\n        // parse the amount\n        Double amount = null;\n        if (selectedAmountStr != null && selectedAmountStr.length() > 0) {\n            try {\n                amount = new Double(nf.parse(selectedAmountStr).doubleValue());\n            } catch (Exception e) {\n                Debug.logWarning(e, \"Problem parsing amount string: \" + selectedAmountStr, module);\n                amount = null;\n            }\n        }\n\n        // get the ship before date (handles both yyyy-mm-dd input and full timestamp)\n        shipBeforeDateStr = (String) paramMap.remove(\"shipBeforeDate\");\n        if (shipBeforeDateStr != null && shipBeforeDateStr.length() > 0) {\n            if (shipBeforeDateStr.length() == 10) shipBeforeDateStr += \" 00:00:00.000\";\n            try {\n                shipBeforeDate = java.sql.Timestamp.valueOf(shipBeforeDateStr);\n            } catch (IllegalArgumentException e) {\n                Debug.logWarning(e, \"Bad shipBeforeDate input: \" + e.getMessage(), module);\n                shipBeforeDate = null;\n            }\n        }\n\n        // get the ship after date (handles both yyyy-mm-dd input and full timestamp)\n        shipAfterDateStr = (String) paramMap.remove(\"shipAfterDate\");\n        if (shipAfterDateStr != null && shipAfterDateStr.length() > 0) {\n            if (shipAfterDateStr.length() == 10) shipAfterDateStr += \" 00:00:00.000\";\n            try {\n                shipAfterDate = java.sql.Timestamp.valueOf(shipAfterDateStr);\n            } catch (IllegalArgumentException e) {\n                Debug.logWarning(e, \"Bad shipAfterDate input: \" + e.getMessage(), module);\n                shipAfterDate = null;\n            }\n        }\n\n        // check for an add-to cart survey\n        List surveyResponses = null;\n        if (productId != null) {\n            String productStoreId = ProductStoreWorker.getProductStoreId(request);\n            List productSurvey = ProductStoreWorker.getProductSurveys(delegator, productStoreId, productId, \"CART_ADD\", parentProductId);\n            if (productSurvey != null && productSurvey.size() > 0) {\n                // TODO: implement multiple survey per product\n                GenericValue survey = EntityUtil.getFirst(productSurvey);\n                String surveyResponseId = (String) request.getAttribute(\"surveyResponseId\");\n                if (surveyResponseId != null) {\n                    surveyResponses = UtilMisc.toList(surveyResponseId);\n                } else {\n                    Map surveyContext = UtilHttp.getParameterMap(request);\n                    GenericValue userLogin = cart.getUserLogin();\n                    String partyId = null;\n                    if (userLogin != null) {\n                        partyId = userLogin.getString(\"partyId\");\n                    }\n                    String formAction = \"/additemsurvey\";\n                    String nextPage = RequestHandler.getNextPageUri(request.getPathInfo());\n                    if (nextPage != null) {\n                        formAction = formAction + \"/\" + nextPage;\n                    }\n                    ProductStoreSurveyWrapper wrapper = new ProductStoreSurveyWrapper(survey, partyId, surveyContext);\n                    request.setAttribute(\"surveyWrapper\", wrapper);\n                    request.setAttribute(\"surveyAction\", formAction); // will be used as the form action of the survey\n                    return \"survey\";\n                }\n            }\n        }\n        if (surveyResponses != null) {\n            paramMap.put(\"surveyResponses\", surveyResponses);\n        }\n        \n        GenericValue productStore = ProductStoreWorker.getProductStore(request); \n        String addToCartRemoveIncompat = productStore.getString(\"addToCartRemoveIncompat\");\n        String addToCartReplaceUpsell = productStore.getString(\"addToCartReplaceUpsell\");\n        try {\n            if (\"Y\".equals(addToCartRemoveIncompat)) {\n                List productAssocs = null;\n                EntityCondition cond = new EntityConditionList(UtilMisc.toList(\n                        new EntityExpr(new EntityExpr(\"productId\", EntityOperator.EQUALS, productId), EntityOperator.OR, new EntityExpr(\"productIdTo\", EntityOperator.EQUALS, productId)),\n                        new EntityExpr(\"productAssocTypeId\", EntityOperator.EQUALS, \"PRODUCT_INCOMPATABLE\")), EntityOperator.AND);\n                productAssocs = delegator.findByCondition(\"ProductAssoc\", cond, null, null);\n                productAssocs = EntityUtil.filterByDate(productAssocs);\n                List productList = FastList.newInstance();\n                Iterator iter = productAssocs.iterator();\n                while (iter.hasNext()) {\n                    GenericValue productAssoc = (GenericValue) iter.next();\n                    if (productId.equals(productAssoc.getString(\"productId\"))) {\n                        productList.add(productAssoc.getString(\"productIdTo\"));\n                        continue;\n                    }\n                    if (productId.equals(productAssoc.getString(\"productIdTo\"))) {\n                        productList.add(productAssoc.getString(\"productId\"));\n                        continue;\n                    }\n                }    \n                Iterator sciIter = cart.iterator();\n                while (sciIter.hasNext()) {\n                    ShoppingCartItem sci = (ShoppingCartItem) sciIter.next();\n                    if (productList.contains(sci.getProductId())) {\n                        try {\n                            cart.removeCartItem(sci, dispatcher);\n                        } catch (CartItemModifyException e) {\n                            Debug.logError(e.getMessage(), module);\n                        }\n                    }\n                }\n            }\n            if (\"Y\".equals(addToCartReplaceUpsell)) {\n                List productList = null;\n                EntityCondition cond = new EntityConditionList(UtilMisc.toList(\n                        new EntityExpr(\"productIdTo\", EntityOperator.EQUALS, productId),\n                        new EntityExpr(\"productAssocTypeId\", EntityOperator.EQUALS, \"PRODUCT_UPGRADE\")), EntityOperator.AND);\n                List fieldsToSelect = FastList.newInstance();\n                fieldsToSelect.add(\"productId\");\n                productList = delegator.findByCondition(\"ProductAssoc\", cond, fieldsToSelect, null);\n                if (productList != null) {\n                    Iterator sciIter = cart.iterator();\n                    while (sciIter.hasNext()) {\n                        ShoppingCartItem sci = (ShoppingCartItem) sciIter.next();\n                        if (productList.contains(sci.getProductId())) {\n                            try {\n                                cart.removeCartItem(sci, dispatcher);\n                            } catch (CartItemModifyException e) {\n                                Debug.logError(e.getMessage(), module);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (GenericEntityException e) {\n            Debug.logError(e.getMessage(), module);\n        }\n        \n        // Translate the parameters and add to the cart\n        result = cartHelper.addToCart(catalogId, shoppingListId, shoppingListItemSeqId, productId, productCategoryId,\n                itemType, itemDescription, price, amount, quantity, reservStart, reservLength, reservPersons, \n                shipBeforeDate, shipAfterDate, configWrapper, itemGroupNumber, paramMap, parentProductId);\n        controlDirective = processResult(result, request);\n\n        // Determine where to send the browser\n        if (controlDirective.equals(ERROR)) {\n            return \"error\";\n        } else {\n            if (cart.viewCartOnAdd()) {\n                return \"viewcart\";\n            } else {\n                return \"success\";\n            }\n        }\n    }","id":12327,"modified_method":"/** Event to add an item to the shopping cart. */\n    public static String addToCart(HttpServletRequest request, HttpServletResponse response) {\n        GenericDelegator delegator = (GenericDelegator) request.getAttribute(\"delegator\");\n        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(\"dispatcher\");\n        ShoppingCart cart = getCartObject(request);\n        ShoppingCartHelper cartHelper = new ShoppingCartHelper(delegator, dispatcher, cart);\n        String controlDirective = null;\n        Map result = null;\n        String productId = null;\n        String parentProductId = null;\n        String itemType = null;\n        String itemDescription = null;\n        String productCategoryId = null;\n        String priceStr = null;\n        Double price = null;\n        String quantityStr = null;\n        double quantity = 0;\n        String reservStartStr = null;\n        String reservEndStr = null;\n        java.sql.Timestamp reservStart = null;\n        java.sql.Timestamp reservEnd = null;\n        String reservLengthStr = null;\n        Double reservLength = null;\n        String reservPersonsStr = null;\n        Double reservPersons = null;\n        String shipBeforeDateStr = null;\n        String shipAfterDateStr = null;\n        java.sql.Timestamp shipBeforeDate = null;\n        java.sql.Timestamp shipAfterDate = null;\n\n        // not used right now: Map attributes = null;\n        String catalogId = CatalogWorker.getCurrentCatalogId(request);\n        Locale locale = UtilHttp.getLocale(request);\n        NumberFormat nf = NumberFormat.getNumberInstance(locale);\n\n        // Get the parameters as a MAP, remove the productId and quantity params.\n        Map paramMap = UtilHttp.getCombinedMap(request);\n\n        String itemGroupNumber = (String) paramMap.get(\"itemGroupNumber\");\n\n        // Get shoppingList info if passed\n        String shoppingListId = (String) paramMap.get(\"shoppingListId\");\n        String shoppingListItemSeqId = (String) paramMap.get(\"shoppingListItemSeqId\");\n        if (paramMap.containsKey(\"ADD_PRODUCT_ID\")) {\n            productId = (String) paramMap.remove(\"ADD_PRODUCT_ID\");\n        } else if (paramMap.containsKey(\"add_product_id\")) {\n            productId = (String) paramMap.remove(\"add_product_id\");\n        }\n        if (paramMap.containsKey(\"PRODUCT_ID\")) {\n            parentProductId = (String) paramMap.remove(\"PRODUCT_ID\");\n        } else if (paramMap.containsKey(\"product_id\")) {\n            parentProductId = (String) paramMap.remove(\"product_id\");\n        }\n\n        Debug.logInfo(\"adding item product \" + productId,module);\n        Debug.logInfo(\"adding item parent product \" + parentProductId,module);\n\n        if (paramMap.containsKey(\"ADD_CATEGORY_ID\")) {\n            productCategoryId = (String) paramMap.remove(\"ADD_CATEGORY_ID\");\n        } else if (paramMap.containsKey(\"add_category_id\")) {\n            productCategoryId = (String) paramMap.remove(\"add_category_id\");\n        }\n        if (productCategoryId != null && productCategoryId.length() == 0) {\n            productCategoryId = null;\n        }\n        \n        if (paramMap.containsKey(\"ADD_ITEM_TYPE\")) {\n            itemType = (String) paramMap.remove(\"ADD_ITEM_TYPE\");\n        } else if (paramMap.containsKey(\"add_item_type\")) {\n            itemType = (String) paramMap.remove(\"add_item_type\");\n        }\n\n        if (UtilValidate.isEmpty(productId)) {\n            // before returning error; check make sure we aren't adding a special item type\n            if (UtilValidate.isEmpty(itemType)) {\n                request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource, \"cart.addToCart.noProductInfoPassed\", locale));\n                return \"success\"; // not critical return to same page\n            }\n        } else {\n            try {\n                String pId = ProductWorker.findProductId(delegator, productId);\n                if (pId != null) {\n                    productId = pId;\n                }\n            } catch (Throwable e) {\n                Debug.logWarning(e, module);\n            }\n        }\n\n        // check for an itemDescription\n        if (paramMap.containsKey(\"ADD_ITEM_DESCRIPTION\")) {\n            itemDescription = (String) paramMap.remove(\"ADD_ITEM_DESCRIPTION\");\n        } else if (paramMap.containsKey(\"add_item_description\")) {\n            itemDescription = (String) paramMap.remove(\"add_item_description\");\n        }\n        if (itemDescription != null && itemDescription.length() == 0) {\n            itemDescription = null;\n        }\n\n        // Get the ProductConfigWrapper (it's not null only for configurable items)\n        ProductConfigWrapper configWrapper = null;\n        configWrapper = ProductConfigWorker.getProductConfigWrapper(productId, cart.getCurrency(), request);\n\n        if (configWrapper != null) {\n            // The choices selected by the user are taken from request and set in the wrapper\n            ProductConfigWorker.fillProductConfigWrapper(configWrapper, request);\n            if (!configWrapper.isCompleted()) {\n                // The configuration is not valid\n                request.setAttribute(\"product_id\", productId);\n                request.setAttribute(\"_EVENT_MESSAGE_\", UtilProperties.getMessage(resource, \"cart.addToCart.configureProductBeforeAddingToCart\", locale));\n                return \"product\";\n            }\n        }\n        \n        //Check for virtual products\n        if (ProductWorker.isVirtual(delegator, productId)) {\n            request.setAttribute(\"product_id\", productId);\n            request.setAttribute(\"_EVENT_MESSAGE_\", UtilProperties.getMessage(resource, \"cart.addToCart.chooseVariationBeforeAddingToCart\", locale));\n            return \"product\";\n        }\n        \n        // get the override price\n        if (paramMap.containsKey(\"PRICE\")) {\n            priceStr = (String) paramMap.remove(\"PRICE\");\n        } else if (paramMap.containsKey(\"price\")) {\n            priceStr = (String) paramMap.remove(\"price\");\n        }\n        if (priceStr == null) {\n            priceStr = \"0\";  // default price is 0\n        }\n\n        // get the renting data\n        if (\"ASSET_USAGE\".equals(ProductWorker.getProductTypeId(delegator, productId))) {\n            if (paramMap.containsKey(\"reservStart\")) {\n                reservStartStr = (String) paramMap.remove(\"reservStart\");\n                if (reservStartStr.length() == 10) // only date provided, no time string?\n                        reservStartStr += \" 00:00:00.000000000\"; // should have format: yyyy-mm-dd hh:mm:ss.fffffffff\n                if (reservStartStr.length() >0) {\n                    try {\n                        reservStart = java.sql.Timestamp.valueOf(reservStartStr);\n                    } catch (Exception e) {\n                        Debug.logWarning(e,\"Problems parsing Reservation start string: \"\n                                    + reservStartStr, module);\n                        reservStart = null;\n                        request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource,\"cart.addToCart.rental.startDate\", locale));\n                        return \"error\";\n                    }\n                }\n                else reservStart = null;\n            }\n\n            if (paramMap.containsKey(\"reservEnd\")) {\n                reservEndStr = (String) paramMap.remove(\"reservEnd\");\n                if (reservEndStr.length() == 10) // only date provided, no time string?\n                        reservEndStr += \" 00:00:00.000000000\"; // should have format: yyyy-mm-dd hh:mm:ss.fffffffff\n                if (reservEndStr.length() > 0) {\n                    try {\n                        reservEnd = java.sql.Timestamp.valueOf(reservEndStr);\n                    } catch (Exception e) {\n                        Debug.logWarning(e,\"Problems parsing Reservation end string: \" + reservEndStr, module);\n                        reservEnd = null;\n                        request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource,\"cart.addToCart.rental.endDate\", locale));\n                        return \"error\";\n                    }\n                }\n                else reservEnd = null;\n            }\n\n            if (reservStart != null && reservEnd != null) {\n            \treservLength = new Double(UtilDateTime.getInterval(reservStart,reservEnd)/86400000);\n            }\n\n            if (reservStart != null && paramMap.containsKey(\"reservLength\")) {\n                reservLengthStr = (String) paramMap.remove(\"reservLength\");\n                // parse the reservation Length\n                try {\n                    reservLength = new Double(nf.parse(reservLengthStr).doubleValue());\n                } catch (Exception e) {\n                    Debug.logWarning(e,\"Problems parsing reservation length string: \"\n                                    + reservLengthStr, module);\n                    reservLength = new Double(1);\n                    request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource_error,\"OrderReservationLengthShouldBeAPositiveNumber\", locale));\n                    return \"error\";\n                }\n            }\n\n            if (reservStart != null && paramMap.containsKey(\"reservPersons\")) {\n                reservPersonsStr = (String) paramMap.remove(\"reservPersons\");\n                // parse the number of persons\n                try {\n                    reservPersons = new Double(nf.parse(reservPersonsStr).doubleValue());\n                } catch (Exception e) {\n                    Debug.logWarning(e,\"Problems parsing reservation number of persons string: \" + reservPersonsStr, module);\n                    reservPersons = new Double(1);\n                    request.setAttribute(\"_ERROR_MESSAGE_\", UtilProperties.getMessage(resource_error,\"OrderNumberOfPersonsShouldBeOneOrLarger\", locale));\n                    return \"error\";\n                }\n            }\n            \n            //check for valid rental parameters\n            if (UtilValidate.isEmpty(reservStart) && UtilValidate.isEmpty(reservLength) && UtilValidate.isEmpty(reservPersons)) {\n                request.setAttribute(\"product_id\", productId);\n                request.setAttribute(\"_EVENT_MESSAGE_\", UtilProperties.getMessage(resource, \"cart.addToCart.enterBookingInforamtionBeforeAddingToCart\", locale));\n                return \"product\";\n            }\n            \n        }\n\n        // get the quantity\n        if (paramMap.containsKey(\"QUANTITY\")) {\n            quantityStr = (String) paramMap.remove(\"QUANTITY\");\n        } else if (paramMap.containsKey(\"quantity\")) {\n            quantityStr = (String) paramMap.remove(\"quantity\");\n        }\n        if (UtilValidate.isEmpty(quantityStr)) {\n            quantityStr = \"1\";  // default quantity is 1\n        }\n\n        // parse the price\n        try {\n            price = new Double(nf.parse(priceStr).doubleValue());\n        } catch (Exception e) {\n            Debug.logWarning(e, \"Problems parsing price string: \" + priceStr, module);\n            price = null;\n        }\n\n        // parse the quantity\n        try {\n            quantity = nf.parse(quantityStr).doubleValue();\n        } catch (Exception e) {\n            Debug.logWarning(e, \"Problems parsing quantity string: \" + quantityStr, module);\n            quantity = 1;\n        }\n\n        // get the selected amount\n        String selectedAmountStr = \"0.00\";\n        if (paramMap.containsKey(\"ADD_AMOUNT\")) {\n            selectedAmountStr = (String) paramMap.remove(\"ADD_AMOUNT\");\n        } else if (paramMap.containsKey(\"add_amount\")) {\n            selectedAmountStr = (String) paramMap.remove(\"add_amount\");\n        }\n\n        // parse the amount\n        Double amount = null;\n        if (selectedAmountStr != null && selectedAmountStr.length() > 0) {\n            try {\n                amount = new Double(nf.parse(selectedAmountStr).doubleValue());\n            } catch (Exception e) {\n                Debug.logWarning(e, \"Problem parsing amount string: \" + selectedAmountStr, module);\n                amount = null;\n            }\n        }\n\n        // get the ship before date (handles both yyyy-mm-dd input and full timestamp)\n        shipBeforeDateStr = (String) paramMap.remove(\"shipBeforeDate\");\n        if (shipBeforeDateStr != null && shipBeforeDateStr.length() > 0) {\n            if (shipBeforeDateStr.length() == 10) shipBeforeDateStr += \" 00:00:00.000\";\n            try {\n                shipBeforeDate = java.sql.Timestamp.valueOf(shipBeforeDateStr);\n            } catch (IllegalArgumentException e) {\n                Debug.logWarning(e, \"Bad shipBeforeDate input: \" + e.getMessage(), module);\n                shipBeforeDate = null;\n            }\n        }\n\n        // get the ship after date (handles both yyyy-mm-dd input and full timestamp)\n        shipAfterDateStr = (String) paramMap.remove(\"shipAfterDate\");\n        if (shipAfterDateStr != null && shipAfterDateStr.length() > 0) {\n            if (shipAfterDateStr.length() == 10) shipAfterDateStr += \" 00:00:00.000\";\n            try {\n                shipAfterDate = java.sql.Timestamp.valueOf(shipAfterDateStr);\n            } catch (IllegalArgumentException e) {\n                Debug.logWarning(e, \"Bad shipAfterDate input: \" + e.getMessage(), module);\n                shipAfterDate = null;\n            }\n        }\n\n        // check for an add-to cart survey\n        List surveyResponses = null;\n        if (productId != null) {\n            String productStoreId = ProductStoreWorker.getProductStoreId(request);\n            List productSurvey = ProductStoreWorker.getProductSurveys(delegator, productStoreId, productId, \"CART_ADD\", parentProductId);\n            if (productSurvey != null && productSurvey.size() > 0) {\n                // TODO: implement multiple survey per product\n                GenericValue survey = EntityUtil.getFirst(productSurvey);\n                String surveyResponseId = (String) request.getAttribute(\"surveyResponseId\");\n                if (surveyResponseId != null) {\n                    surveyResponses = UtilMisc.toList(surveyResponseId);\n                } else {\n                    Map surveyContext = UtilHttp.getParameterMap(request);\n                    GenericValue userLogin = cart.getUserLogin();\n                    String partyId = null;\n                    if (userLogin != null) {\n                        partyId = userLogin.getString(\"partyId\");\n                    }\n                    String formAction = \"/additemsurvey\";\n                    String nextPage = RequestHandler.getNextPageUri(request.getPathInfo());\n                    if (nextPage != null) {\n                        formAction = formAction + \"/\" + nextPage;\n                    }\n                    ProductStoreSurveyWrapper wrapper = new ProductStoreSurveyWrapper(survey, partyId, surveyContext);\n                    request.setAttribute(\"surveyWrapper\", wrapper);\n                    request.setAttribute(\"surveyAction\", formAction); // will be used as the form action of the survey\n                    return \"survey\";\n                }\n            }\n        }\n        if (surveyResponses != null) {\n            paramMap.put(\"surveyResponses\", surveyResponses);\n        }\n        \n        GenericValue productStore = ProductStoreWorker.getProductStore(request); \n        String addToCartRemoveIncompat = productStore.getString(\"addToCartRemoveIncompat\");\n        String addToCartReplaceUpsell = productStore.getString(\"addToCartReplaceUpsell\");\n        try {\n            if (\"Y\".equals(addToCartRemoveIncompat)) {\n                List productAssocs = null;\n                EntityCondition cond = new EntityConditionList(UtilMisc.toList(\n                        new EntityExpr(new EntityExpr(\"productId\", EntityOperator.EQUALS, productId), EntityOperator.OR, new EntityExpr(\"productIdTo\", EntityOperator.EQUALS, productId)),\n                        new EntityExpr(\"productAssocTypeId\", EntityOperator.EQUALS, \"PRODUCT_INCOMPATABLE\")), EntityOperator.AND);\n                productAssocs = delegator.findByCondition(\"ProductAssoc\", cond, null, null);\n                productAssocs = EntityUtil.filterByDate(productAssocs);\n                List productList = FastList.newInstance();\n                Iterator iter = productAssocs.iterator();\n                while (iter.hasNext()) {\n                    GenericValue productAssoc = (GenericValue) iter.next();\n                    if (productId.equals(productAssoc.getString(\"productId\"))) {\n                        productList.add(productAssoc.getString(\"productIdTo\"));\n                        continue;\n                    }\n                    if (productId.equals(productAssoc.getString(\"productIdTo\"))) {\n                        productList.add(productAssoc.getString(\"productId\"));\n                        continue;\n                    }\n                }    \n                Iterator sciIter = cart.iterator();\n                while (sciIter.hasNext()) {\n                    ShoppingCartItem sci = (ShoppingCartItem) sciIter.next();\n                    if (productList.contains(sci.getProductId())) {\n                        try {\n                            cart.removeCartItem(sci, dispatcher);\n                        } catch (CartItemModifyException e) {\n                            Debug.logError(e.getMessage(), module);\n                        }\n                    }\n                }\n            }\n            if (\"Y\".equals(addToCartReplaceUpsell)) {\n                List productList = null;\n                EntityCondition cond = new EntityConditionList(UtilMisc.toList(\n                        new EntityExpr(\"productIdTo\", EntityOperator.EQUALS, productId),\n                        new EntityExpr(\"productAssocTypeId\", EntityOperator.EQUALS, \"PRODUCT_UPGRADE\")), EntityOperator.AND);\n                List fieldsToSelect = FastList.newInstance();\n                fieldsToSelect.add(\"productId\");\n                productList = delegator.findByCondition(\"ProductAssoc\", cond, fieldsToSelect, null);\n                if (productList != null) {\n                    Iterator sciIter = cart.iterator();\n                    while (sciIter.hasNext()) {\n                        ShoppingCartItem sci = (ShoppingCartItem) sciIter.next();\n                        if (productList.contains(sci.getProductId())) {\n                            try {\n                                cart.removeCartItem(sci, dispatcher);\n                            } catch (CartItemModifyException e) {\n                                Debug.logError(e.getMessage(), module);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (GenericEntityException e) {\n            Debug.logError(e.getMessage(), module);\n        }\n        \n        // Translate the parameters and add to the cart\n        result = cartHelper.addToCart(catalogId, shoppingListId, shoppingListItemSeqId, productId, productCategoryId,\n                itemType, itemDescription, price, amount, quantity, reservStart, reservLength, reservPersons, \n                shipBeforeDate, shipAfterDate, configWrapper, itemGroupNumber, paramMap, parentProductId);\n        controlDirective = processResult(result, request);\n\n        // Determine where to send the browser\n        if (controlDirective.equals(ERROR)) {\n            return \"error\";\n        } else {\n            if (cart.viewCartOnAdd()) {\n                return \"viewcart\";\n            } else {\n                return \"success\";\n            }\n        }\n    }","commit_id":"83b0538d3da97e5a81d2829f6215e4589830b362","url":"https://github.com/apache/ofbiz"},{"original_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 3) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\n\t\t\t\t\t\"Expected 3 parameters, received %d\", parameters.length));\n\t\t}\n\n\t\tif (Validator.isNull(parameters[0]) ||\n\t\t\t!Validator.isNumber(parameters[0].toString()) ||\n\t\t\tValidator.isNull(parameters[1]) ||\n\t\t\t!Validator.isNumber(parameters[1].toString()) ||\n\t\t\tValidator.isNull(parameters[2]) ||\n\t\t\t!Validator.isNumber(parameters[2].toString())) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tdouble value1 = ((Number)parameters[0]).doubleValue();\n\t\tdouble value2 = ((Number)parameters[1]).doubleValue();\n\t\tdouble value3 = ((Number)parameters[2]).doubleValue();\n\n\t\treturn Double.compare(value1, value2) >= 0 &&\n\t\t\tDouble.compare(value1, value3) <= 0;\n\t}","id":12328,"modified_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 3) {\n\t\t\tthrow new IllegalArgumentException(\"Three parameters are expected\");\n\t\t}\n\n\t\tif (!Number.class.isInstance(parameters[0]) ||\n\t\t\t!Number.class.isInstance(parameters[1]) ||\n\t\t\t!Number.class.isInstance(parameters[2])) {\n\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"The parameters should be numbers\");\n\t\t}\n\n\t\tNumber parameter = (Number)parameters[0];\n\n\t\tNumber minParameter = (Number)parameters[1];\n\t\tNumber maxParameter = (Number)parameters[2];\n\n\t\tif ((parameter.doubleValue() >= minParameter.doubleValue()) &&\n\t\t\t(parameter.doubleValue() <= maxParameter.doubleValue())) {\n\n\t\t\treturn Boolean.TRUE;\n\t\t}\n\n\t\treturn Boolean.FALSE;\n\t}","commit_id":"36bf0341fc4879a3b1ddb04e1b655900486a7718","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\n\t\t\t\t\t\"Expected 2 parameters, received %d\", parameters.length));\n\t\t}\n\n\t\tif (Validator.isNull(parameters[0])) {\n\t\t\treturn null;\n\t\t}\n\t\telse if (Validator.isNull(parameters[1])) {\n\t\t\treturn parameters[0];\n\t\t}\n\n\t\tString value1 = parameters[0].toString();\n\t\tString value2 = parameters[1].toString();\n\n\t\treturn value1.concat(value2);\n\t}","id":12329,"modified_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length < 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Two or more parameters are expected\");\n\t\t}\n\n\t\tStringBundler sb = new StringBundler(parameters.length);\n\n\t\tfor (Object parameter : parameters) {\n\t\t\tString string = (String)parameter;\n\n\t\t\tif (Validator.isNull(string)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsb.append(string);\n\t\t}\n\n\t\treturn sb.toString();\n\t}","commit_id":"36bf0341fc4879a3b1ddb04e1b655900486a7718","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\n\t\t\t\t\t\"Expected 2 parameters, received %d\", parameters.length));\n\t\t}\n\n\t\tif (Validator.isNull(parameters[0]) ||\n\t\t\tValidator.isNull(parameters[1])) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tString value1 = StringUtil.toLowerCase(parameters[0].toString());\n\t\tString value2 = StringUtil.toLowerCase(parameters[1].toString());\n\n\t\treturn value1.contains(value2);\n\t}","id":12330,"modified_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 2) {\n\t\t\tthrow new IllegalArgumentException(\"Two parameters are expected\");\n\t\t}\n\n\t\tif ((parameters[0] == null) || (parameters[1] == null)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tString string1 = StringUtil.toLowerCase(parameters[0].toString());\n\t\tString string2 = StringUtil.toLowerCase(parameters[1].toString());\n\n\t\treturn string1.contains(string2);\n\t}","commit_id":"36bf0341fc4879a3b1ddb04e1b655900486a7718","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\n\t\t\t\t\t\"Expected 2 parameters, received %d\", parameters.length));\n\t\t}\n\n\t\tif (Validator.isNull(parameters[0]) ||\n\t\t\tValidator.isNull(parameters[1])) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn parameters[0].equals(parameters[1]);\n\t}","id":12331,"modified_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 2) {\n\t\t\tthrow new IllegalArgumentException(\"Two parameters are expected\");\n\t\t}\n\n\t\tObject parameter1 = parameters[0];\n\t\tObject parameter2 = parameters[1];\n\n\t\tif ((parameter1 == null) || (parameter2 == null)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn parameter1.equals(parameter2);\n\t}","commit_id":"36bf0341fc4879a3b1ddb04e1b655900486a7718","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\n\t\t\t\t\t\"Expected 1 parameters, received %d\", parameters.length));\n\t\t}\n\n\t\treturn Validator.isEmailAddress(parameters[0].toString());\n\t}","id":12332,"modified_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\"One parameter is expected\");\n\t\t}\n\n\t\treturn Validator.isEmailAddress(parameters[0].toString());\n\t}","commit_id":"36bf0341fc4879a3b1ddb04e1b655900486a7718","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\n\t\t\t\t\t\"Expected 1 parameters, received %d\", parameters.length));\n\t\t}\n\n\t\treturn Validator.isUrl(parameters[0].toString());\n\t}","id":12333,"modified_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\"One parameter is expected\");\n\t\t}\n\n\t\treturn Validator.isUrl(parameters[0].toString());\n\t}","commit_id":"36bf0341fc4879a3b1ddb04e1b655900486a7718","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length < 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\n\t\t\t\t\t\"Expected at least 2 parameters, received %d\",\n\t\t\t\t\tparameters.length));\n\t\t}\n\n\t\tdouble max = Double.MIN_VALUE;\n\t\tdouble value = Double.MIN_VALUE;\n\n\t\tfor (int i = 0; i < parameters.length; i++) {\n\t\t\tif (parameters[i] instanceof Number) {\n\t\t\t\tvalue = ((Number)parameters[i]).doubleValue();\n\n\t\t\t\tif (value > max) {\n\t\t\t\t\tmax = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid number\");\n\t\t\t}\n\t\t}\n\n\t\treturn max;\n\t}","id":12334,"modified_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length < 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Two or more parameters are expected\");\n\t\t}\n\n\t\tdouble max = Double.MIN_VALUE;\n\n\t\tfor (Object parameter : parameters) {\n\t\t\tif (!Number.class.isInstance(parameter)) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"The parameters should be numbers\");\n\t\t\t}\n\n\t\t\tdouble parameterDouble = ((Number)parameter).doubleValue();\n\n\t\t\tif (parameterDouble > max) {\n\t\t\t\tmax = parameterDouble;\n\t\t\t}\n\t\t}\n\n\t\treturn max;\n\t}","commit_id":"36bf0341fc4879a3b1ddb04e1b655900486a7718","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length < 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\n\t\t\t\t\t\"Expected at least 2 parameters, received %d\",\n\t\t\t\t\tparameters.length));\n\t\t}\n\n\t\tdouble min = Double.MAX_VALUE;\n\t\tdouble value = Double.MAX_VALUE;\n\n\t\tfor (int i = 0; i < parameters.length; i++) {\n\t\t\tif (parameters[i] instanceof Number) {\n\t\t\t\tvalue = ((Number)parameters[i]).doubleValue();\n\n\t\t\t\tif (value < min) {\n\t\t\t\t\tmin = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid number\");\n\t\t\t}\n\t\t}\n\n\t\treturn min;\n\t}","id":12335,"modified_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length < 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Two or more parameters are expected\");\n\t\t}\n\n\t\tdouble min = Double.MAX_VALUE;\n\n\t\tfor (Object parameter : parameters) {\n\t\t\tif (!Number.class.isInstance(parameter)) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"The parameters should be numbers\");\n\t\t\t}\n\n\t\t\tdouble doubleParameter = ((Number)parameter).doubleValue();\n\n\t\t\tif (doubleParameter < min) {\n\t\t\t\tmin = doubleParameter;\n\t\t\t}\n\t\t}\n\n\t\treturn min;\n\t}","commit_id":"36bf0341fc4879a3b1ddb04e1b655900486a7718","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length < 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tString.format(\n\t\t\t\t\t\"Expected at least 2 parameters, received %d\",\n\t\t\t\t\tparameters.length));\n\t\t}\n\n\t\tdouble sum = 0;\n\n\t\tfor (int i = 0; i < parameters.length; i++) {\n\t\t\tif (parameters[i] instanceof Number) {\n\t\t\t\tsum += ((Number)parameters[i]).doubleValue();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid number\");\n\t\t\t}\n\t\t}\n\n\t\treturn sum;\n\t}","id":12336,"modified_method":"@Override\n\tpublic Object evaluate(Object... parameters) {\n\t\tif (parameters.length < 2) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Two or more parameters are expected\");\n\t\t}\n\n\t\tdouble sum = 0;\n\n\t\tfor (Object parameter : parameters) {\n\t\t\tif (!Number.class.isInstance(parameter)) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"The parameters should be numbers\");\n\t\t\t}\n\n\t\t\tNumber parameterDouble = (Number)parameter;\n\n\t\t\tsum += parameterDouble.doubleValue();\n\t\t}\n\n\t\treturn sum;\n\t}","commit_id":"36bf0341fc4879a3b1ddb04e1b655900486a7718","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void exportReport(String path) {\n\n        String htmlpath = ReportUtils.changeExtension(path, \".html\");\n        String xmlpath = ReportUtils.changeExtension(path, \".xml\");\n        String xlspath = ReportUtils.changeExtension(path, \".xlsx\");\n        try {\n            Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(htmlpath), \"UTF-8\"));\n\n            // FileOutputStream out = new FileOutputStream(htmlpath);\n            out.write(ReportHTML.formatted_Report.toString());\n            out.flush();\n            out.close();\n\n            //xls report\n            FileOutputStream fos = new FileOutputStream(xlspath);\n            ReportXLS.wb.write(fos);\n            fos.close();\n\n            FileOutputStream xmlout = new FileOutputStream(xmlpath);\n            XMLOutputter serializer = new XMLOutputter();\n            serializer.output(ReportXML.xmldoc, xmlout);\n            xmlout.flush();\n            xmlout.close();\n            JOptionPane.showMessageDialog(this, \"Report has been successfully saved!\");\n        } catch (IOException e) {\n            System.err.println(e);\n        }\n    }","id":12337,"modified_method":"private void exportReport(String path, String ext, ReportModule report) {\n\n        String newpath = ReportUtils.changeExtension(path + \"-\" + report.getName(), ext);\n        try {\n            report.save(newpath);\n            JOptionPane.showMessageDialog(this, \"\\n\" + report.getName() + \" report has been successfully saved to: \\n\" + newpath);\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(this, \"\\n\" + report.getName() + \" report has failed to save! \\n Reason:\" + e);\n        }\n    }","commit_id":"86c58ede4bfe54a0c23c05f963ae18e50bfd9b13","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public void setFinishedReportText() {\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n        Date date = new Date();\n        String reportText = \"Report was sucessfully generated at \" + dateFormat.format(date) + \".\";\n        jLabel1.setText(reportText);\n    }","id":12338,"modified_method":"public void setFinishedReportText() {\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n        Date date = new Date();\n        String reportText = \"<html>These reports were generated on \" + dateFormat.format(date) + \". <br><br>\";\n        jLabel1.setText(reportText);\n        final JPanel tpanel = new JPanel(new GridBagLayout());\n\n        SwingUtilities.invokeLater(new Runnable() {\n\n            GridBagConstraints c = new GridBagConstraints();\n\n            @Override\n            public void run() {\n                HashMap<ReportModule, String> reports = rpa.getReports();\n                int cc = 0;\n                for (Map.Entry<ReportModule, String> entry : reports.entrySet()) {\n                    c.fill = GridBagConstraints.HORIZONTAL;\n                    c.weightx = 1;\n                    c.gridwidth = 2;\n                    c.gridx = 0;\n                    c.gridy = cc;\n                    String tempText = entry.getKey().getName() + \" report - \" + entry.getValue() + \"\";\n                    JLabel lb = new JLabel();\n                    lb.setText(tempText);\n                    tpanel.add(lb, c);\n                    tpanel.revalidate();\n                    tpanel.repaint();\n                    \n                    JButton jb = new JButton();\n                    jb.setText(\"View Report\");\n                    c.fill = GridBagConstraints.NONE;\n                    c.weightx = 0.0;\n                    c.gridwidth = 1;\n                    c.gridx = 2;\n                    c.gridy = cc;\n                   final ReportModule rep = entry.getKey();\n                   final String path = entry.getValue();\n                    jb.addActionListener(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                rep.getPreview(path);\n            }\n                    });\n                     tpanel.add(jb, c);\n                    tpanel.revalidate();\n                    tpanel.repaint();\n                    cc++;\n                }\n            }\n        });\n        this.add(tpanel, 0);\n\n    }","commit_id":"86c58ede4bfe54a0c23c05f963ae18e50bfd9b13","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"private void saveReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveReportActionPerformed\n\n    saveReportAction();\n}","id":12339,"modified_method":"private void saveReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveReportActionPerformed\n    HashMap<ReportModule, String> reports = rpa.getReports();\n    saveReportAction(reports);\n\n}","commit_id":"86c58ede4bfe54a0c23c05f963ae18e50bfd9b13","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jFileChooser1 = new javax.swing.JFileChooser();\n        jOptionPane1 = new javax.swing.JOptionPane();\n        jButton1 = new javax.swing.JButton();\n        saveReport = new javax.swing.JButton();\n        jLabel1 = new javax.swing.JLabel();\n\n        jButton1.setText(org.openide.util.NbBundle.getMessage(ReportPanel.class, \"ReportPanel.jButton1.text\")); // NOI18N\n\n        saveReport.setText(org.openide.util.NbBundle.getMessage(ReportPanel.class, \"ReportPanel.saveReport.text\")); // NOI18N\n        saveReport.setActionCommand(org.openide.util.NbBundle.getMessage(ReportPanel.class, \"ReportPanel.saveReport.actionCommand\")); // NOI18N\n        saveReport.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                saveReportActionPerformed(evt);\n            }\n        });\n\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(ReportPanel.class, \"ReportPanel.jLabel1.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jButton1)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)\n                        .addComponent(saveReport)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jButton1)\n                    .addComponent(saveReport))\n                .addContainerGap())\n        );\n\n        getAccessibleContext().setAccessibleName(\"\");\n        getAccessibleContext().setAccessibleParent(this);\n    }","id":12340,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jFileChooser1 = new javax.swing.JFileChooser();\n        jOptionPane1 = new javax.swing.JOptionPane();\n        jPanel1 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        saveReport = new javax.swing.JButton();\n        jButton1 = new javax.swing.JButton();\n\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(ReportPanel.class, \"ReportPanel.jLabel1.text\")); // NOI18N\n        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);\n        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);\n\n        saveReport.setText(org.openide.util.NbBundle.getMessage(ReportPanel.class, \"ReportPanel.saveReport.text\")); // NOI18N\n        saveReport.setActionCommand(org.openide.util.NbBundle.getMessage(ReportPanel.class, \"ReportPanel.saveReport.actionCommand\")); // NOI18N\n        saveReport.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                saveReportActionPerformed(evt);\n            }\n        });\n\n        jButton1.setText(org.openide.util.NbBundle.getMessage(ReportPanel.class, \"ReportPanel.jButton1.text\")); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addComponent(jButton1)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 338, Short.MAX_VALUE)\n                        .addComponent(saveReport))\n                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap(150, Short.MAX_VALUE)\n                .addComponent(jLabel1)\n                .addGap(18, 18, 18)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(saveReport)\n                    .addComponent(jButton1))\n                .addContainerGap())\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap(165, Short.MAX_VALUE)\n                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n\n        getAccessibleContext().setAccessibleName(\"\");\n        getAccessibleContext().setAccessibleParent(this);\n    }","commit_id":"86c58ede4bfe54a0c23c05f963ae18e50bfd9b13","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public void reportGenerate(final ReportConfiguration reportconfig, final ArrayList<String> classList, final String preview, final ReportFilter rr) {\n        try {\n            //Clear any old reports in the string\n            viewReport.setLength(0);\n\n\n            // Generate the reports and create the hashmap\n            final ReportGen report = new ReportGen();\n            //see what reports we need to run and run them\n            //Set progress bar to move while doing this\n            SwingUtilities.invokeLater(new Runnable() {\n\n                @Override\n                public void run() {\n                    rr.progBarStartText();\n                }\n            });\n            SwingUtilities.invokeLater(new Runnable() {\n\n                @Override\n                public void run() {\n                    rr.progBarCount(classList.size());\n                }\n            });\n            //Turn our results into the appropriate xml/html reports\n            //TODO: add a way for users to select what they will run when\n            Thread reportThread = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    \n                    for (String s : classList) {\n                        cc++;\n                        try {\n                            Class reportclass = Class.forName(s);\n                            Object reportObject = reportclass.newInstance();\n                            Class[] argTypes = new Class[] { ReportConfiguration.class};\n                            Method generatereport = reportclass.getDeclaredMethod(\"generateReport\",argTypes);\n                            Object invoke = generatereport.invoke(reportObject,reportconfig);\n                            String path = invoke.toString();\n                            Class[] argTypes2 = new Class[] { String.class};\n                            Method getpreview = reportclass.getMethod(\"getPreview\",argTypes2);\n                            \n                            \n                            if(s == null ? preview == null : s.equals(preview))\n                            {\n                                getpreview.invoke(reportObject,path);\n                            }\n                            \n                        } catch (Exception e) {\n                           \n                        }\n                        rr.progBarSet(cc);\n                    }\n\n//                    StopWatch a = new StopWatch();\n//                    a.start();\n//                    ReportHTML htmlReport = new ReportHTML();\n//                    try {\n//                        String htmlpath = htmlReport.generateReport(reportconfig, rr);\n//                    } catch (ReportModuleException e) {\n//                        Logger.getLogger(ReportHTML.class.getName()).log(Level.WARNING, \"Exception occurred in generating the htmlReport\", e);\n//                    }\n//                    a.stop();\n//                    System.out.println(\"html in milliseconds: \" + a.getElapsedTime());\n//\n//                    StopWatch s = new StopWatch();\n//                    s.start();\n//                    ReportXLS xlsReport = new ReportXLS();\n//                    try {\n//                        xlsReport.generateReport(reportconfig, rr);\n//                    } catch (ReportModuleException e) {\n//                        Logger.getLogger(ReportHTML.class.getName()).log(Level.WARNING, \"Exception occurred in generating the XLS Report\", e);\n//                    }\n//                    s.stop();\n//                    System.out.println(\"xls in milliseconds: \" + s.getElapsedTime());\n//\n//                    StopWatch S = new StopWatch();\n//                    S.start();\n//                    ReportXML xmlReport = new ReportXML();\n//                    try {\n//                        xmlReport.generateReport(reportconfig, rr);\n//                    } catch (ReportModuleException e) {\n//                        Logger.getLogger(ReportHTML.class.getName()).log(Level.WARNING, \"Exception occurred in generating the XML Report\", e);\n//                    }\n//                    S.stop();\n//                    System.out.println(\"xml in milliseconds: \" + S.getElapsedTime());\n                }\n            });\n\n\n            // start our threads\n            reportThread.start();\n\n            // display the window\n\n            // create the popUp window for it\n            if (ReportFilter.cancel == false) {\n\n                final JFrame frame = new JFrame(ACTION_NAME);\n                final JDialog popUpWindow = new JDialog(frame, ACTION_NAME, true); // to make the popUp Window to be modal\n\n\n                // initialize panel with loaded settings   \n\n                //Set the temporary label to let the user know its done and is waiting on the report\n               \n                final ReportPanel panel = new ReportPanel();\n\n\n                panel.setjButton1ActionListener(new ActionListener() {\n\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        popUpWindow.dispose();\n                    }\n                });\n                // add the panel to the popup window\n                popUpWindow.add(panel);\n\n                popUpWindow.setResizable(true);\n                popUpWindow.pack();\n                // set the location of the popUp Window on the center of the screen\n                Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();\n                double w = popUpWindow.getSize().getWidth();\n                double h = popUpWindow.getSize().getHeight();\n                popUpWindow.setLocation((int) ((screenDimension.getWidth() - w) / 2), (int) ((screenDimension.getHeight() - h) / 2));\n\n                reportThread.join(); \n                rr.progBarText();\n                rr.progBarDone();\n                panel.setFinishedReportText();\n                popUpWindow.setVisible(true);\n\n\n\n\n            }\n        } catch (Exception ex) {\n            Log.get(ReportFilterAction.class).log(Level.WARNING, \"Error displaying \" + ACTION_NAME + \" window.\", ex);\n        }\n    }","id":12341,"modified_method":"public void reportGenerate(final ReportConfiguration reportconfig, final ArrayList<String> classList, final String preview, final ReportFilter rr) {\n        try {\n            //Clear any old reports in the string\n            viewReport.setLength(0);\n\n\n            // Generate the reports and create the hashmap\n            final ReportGen report = new ReportGen();\n            //see what reports we need to run and run them\n            //Set progress bar to move while doing this\n            SwingUtilities.invokeLater(new Runnable() {\n\n                @Override\n                public void run() {\n                    rr.progBarStartText();\n                }\n            });\n            SwingUtilities.invokeLater(new Runnable() {\n\n                @Override\n                public void run() {\n                    rr.progBarCount(classList.size());\n                }\n            });\n            //Turn our results into the appropriate xml/html reports\n            //TODO: add a way for users to select what they will run when\n            Thread reportThread = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    reports.clear();\n                    for (String s : classList) {\n                        cc++;\n                        try {\n                            Class reportclass = Class.forName(s);\n                            Object reportObject = reportclass.newInstance();\n                            Class[] argTypes = new Class[] { ReportConfiguration.class};\n                            Method generatereport = reportclass.getDeclaredMethod(\"generateReport\",argTypes);\n                            Object invoke = generatereport.invoke(reportObject,reportconfig);\n                            String path = invoke.toString();\n                            Class[] argTypes2 = new Class[] { String.class};\n                            Method getpreview = reportclass.getMethod(\"getPreview\",argTypes2);\n                            reports.put((ReportModule)reportObject,path);\n                            \n                            if(s == null ? preview == null : s.equals(preview))\n                            {\n                                getpreview.invoke(reportObject,path);\n                            }\n                            \n                        } catch (Exception e) {\n                           \n                        }\n                        rr.progBarSet(cc);\n                    }\n\n//                    StopWatch a = new StopWatch();\n//                    a.start();\n//                    ReportHTML htmlReport = new ReportHTML();\n//                    try {\n//                        String htmlpath = htmlReport.generateReport(reportconfig, rr);\n//                    } catch (ReportModuleException e) {\n//                        Logger.getLogger(ReportHTML.class.getName()).log(Level.WARNING, \"Exception occurred in generating the htmlReport\", e);\n//                    }\n//                    a.stop();\n//                    System.out.println(\"html in milliseconds: \" + a.getElapsedTime());\n//\n//                    StopWatch s = new StopWatch();\n//                    s.start();\n//                    ReportXLS xlsReport = new ReportXLS();\n//                    try {\n//                        xlsReport.generateReport(reportconfig, rr);\n//                    } catch (ReportModuleException e) {\n//                        Logger.getLogger(ReportHTML.class.getName()).log(Level.WARNING, \"Exception occurred in generating the XLS Report\", e);\n//                    }\n//                    s.stop();\n//                    System.out.println(\"xls in milliseconds: \" + s.getElapsedTime());\n//\n//                    StopWatch S = new StopWatch();\n//                    S.start();\n//                    ReportXML xmlReport = new ReportXML();\n//                    try {\n//                        xmlReport.generateReport(reportconfig, rr);\n//                    } catch (ReportModuleException e) {\n//                        Logger.getLogger(ReportHTML.class.getName()).log(Level.WARNING, \"Exception occurred in generating the XML Report\", e);\n//                    }\n//                    S.stop();\n//                    System.out.println(\"xml in milliseconds: \" + S.getElapsedTime());\n                }\n            });\n\n\n            // start our threads\n            reportThread.start();\n\n            // display the window\n\n            // create the popUp window for it\n            if (ReportFilter.cancel == false) {\n\n                final JFrame frame = new JFrame(ACTION_NAME);\n                final JDialog popUpWindow = new JDialog(frame, ACTION_NAME, true); // to make the popUp Window to be modal\n\n\n                // initialize panel with loaded settings   \n\n                //Set the temporary label to let the user know its done and is waiting on the report\n               \n                final ReportPanel panel = new ReportPanel(this);\n\n\n                panel.setjButton1ActionListener(new ActionListener() {\n\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        popUpWindow.dispose();\n                    }\n                });\n                // add the panel to the popup window\n                popUpWindow.add(panel);\n\n                popUpWindow.setResizable(true);\n                popUpWindow.pack();\n                // set the location of the popUp Window on the center of the screen\n                Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();\n                double w = popUpWindow.getSize().getWidth();\n                double h = popUpWindow.getSize().getHeight();\n                popUpWindow.setLocation((int) ((screenDimension.getWidth() - w) / 2), (int) ((screenDimension.getHeight() - h) / 2));\n\n                reportThread.join(); \n                rr.progBarText();\n                rr.progBarDone();\n                panel.setFinishedReportText();\n                popUpWindow.setVisible(true);\n\n\n\n\n            }\n        } catch (Exception ex) {\n            Log.get(ReportFilterAction.class).log(Level.WARNING, \"Error displaying \" + ACTION_NAME + \" window.\", ex);\n        }\n    }","commit_id":"86c58ede4bfe54a0c23c05f963ae18e50bfd9b13","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        saveButton = new javax.swing.JButton();\n        jSplitPane1 = new javax.swing.JSplitPane();\n        mimePanel = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        mimeTable = new javax.swing.JTable();\n        userTypeTextField = new javax.swing.JTextField();\n        addTypeButton = new javax.swing.JButton();\n        removeTypeButton = new javax.swing.JButton();\n        mimeErrLabel = new javax.swing.JLabel();\n        mimeRemoveErrLabel = new javax.swing.JLabel();\n        extensionPanel = new javax.swing.JPanel();\n        userExtTextField = new javax.swing.JTextField();\n        addExtButton = new javax.swing.JButton();\n        jScrollPane3 = new javax.swing.JScrollPane();\n        extTable = new javax.swing.JTable();\n        removeExtButton = new javax.swing.JButton();\n        extHeaderLabel = new javax.swing.JLabel();\n        extErrorLabel = new javax.swing.JLabel();\n        extRemoveErrLabel = new javax.swing.JLabel();\n        saveMsgLabel = new javax.swing.JLabel();\n\n        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/fileextmismatch/save16.png\"))); // NOI18N NON-NLS\n        saveButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.saveButton.text\")); // NOI18N\n        saveButton.setEnabled(false);\n        saveButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                saveButtonActionPerformed(evt);\n            }\n        });\n\n        jSplitPane1.setDividerLocation(430);\n\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.jLabel1.text\")); // NOI18N\n\n        mimeTable.setModel(mimeTableModel);\n        jScrollPane2.setViewportView(mimeTable);\n\n        userTypeTextField.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.userTypeTextField.text\")); // NOI18N\n        userTypeTextField.addFocusListener(new java.awt.event.FocusAdapter() {\n            public void focusGained(java.awt.event.FocusEvent evt) {\n                userTypeTextFieldFocusGained(evt);\n            }\n        });\n\n        addTypeButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.addTypeButton.text\")); // NOI18N\n        addTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                addTypeButtonActionPerformed(evt);\n            }\n        });\n\n        removeTypeButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.removeTypeButton.text\")); // NOI18N\n        removeTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                removeTypeButtonActionPerformed(evt);\n            }\n        });\n\n        mimeErrLabel.setForeground(new java.awt.Color(255, 0, 0));\n        mimeErrLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.mimeErrLabel.text\")); // NOI18N\n\n        mimeRemoveErrLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.mimeRemoveErrLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout mimePanelLayout = new javax.swing.GroupLayout(mimePanel);\n        mimePanel.setLayout(mimePanelLayout);\n        mimePanelLayout.setHorizontalGroup(\n            mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(mimePanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                    .addGroup(mimePanelLayout.createSequentialGroup()\n                        .addGroup(mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel1)\n                            .addGroup(mimePanelLayout.createSequentialGroup()\n                                .addComponent(userTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(addTypeButton))\n                            .addComponent(removeTypeButton))\n                        .addGap(0, 196, Short.MAX_VALUE))\n                    .addComponent(mimeErrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(mimeRemoveErrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        mimePanelLayout.setVerticalGroup(\n            mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(mimePanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(userTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(addTypeButton))\n                .addGap(3, 3, 3)\n                .addComponent(mimeErrLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(removeTypeButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(mimeRemoveErrLabel)\n                .addContainerGap(45, Short.MAX_VALUE))\n        );\n\n        jSplitPane1.setLeftComponent(mimePanel);\n\n        userExtTextField.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.userExtTextField.text\")); // NOI18N\n        userExtTextField.addFocusListener(new java.awt.event.FocusAdapter() {\n            public void focusGained(java.awt.event.FocusEvent evt) {\n                userExtTextFieldFocusGained(evt);\n            }\n        });\n\n        addExtButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.addExtButton.text\")); // NOI18N\n        addExtButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                addExtButtonActionPerformed(evt);\n            }\n        });\n\n        extTable.setModel(extTableModel);\n        jScrollPane3.setViewportView(extTable);\n\n        removeExtButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.removeExtButton.text\")); // NOI18N\n        removeExtButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                removeExtButtonActionPerformed(evt);\n            }\n        });\n\n        extHeaderLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.extHeaderLabel.text\")); // NOI18N\n\n        extErrorLabel.setForeground(new java.awt.Color(255, 0, 0));\n        extErrorLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.extErrorLabel.text\")); // NOI18N\n\n        extRemoveErrLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.extRemoveErrLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout extensionPanelLayout = new javax.swing.GroupLayout(extensionPanel);\n        extensionPanel.setLayout(extensionPanelLayout);\n        extensionPanelLayout.setHorizontalGroup(\n            extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(extensionPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                    .addComponent(extHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(extensionPanelLayout.createSequentialGroup()\n                        .addGroup(extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                            .addComponent(removeExtButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                            .addGroup(extensionPanelLayout.createSequentialGroup()\n                                .addComponent(userExtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(addExtButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                        .addGap(0, 66, Short.MAX_VALUE))\n                    .addComponent(extErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(extRemoveErrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        extensionPanelLayout.setVerticalGroup(\n            extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, extensionPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(extHeaderLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(userExtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(addExtButton))\n                .addGap(2, 2, 2)\n                .addComponent(extErrorLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(removeExtButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(extRemoveErrLabel)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        jSplitPane1.setRightComponent(extensionPanel);\n\n        saveMsgLabel.setForeground(new java.awt.Color(0, 0, 255));\n        saveMsgLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.saveMsgLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jSplitPane1)\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addGap(0, 0, Short.MAX_VALUE)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(saveMsgLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(saveButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(saveMsgLabel)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","id":12342,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jPanel1 = new javax.swing.JPanel();\n        saveButton = new javax.swing.JButton();\n        jSplitPane1 = new javax.swing.JSplitPane();\n        mimePanel = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        mimeTable = new javax.swing.JTable();\n        userTypeTextField = new javax.swing.JTextField();\n        addTypeButton = new javax.swing.JButton();\n        removeTypeButton = new javax.swing.JButton();\n        mimeErrLabel = new javax.swing.JLabel();\n        mimeRemoveErrLabel = new javax.swing.JLabel();\n        extensionPanel = new javax.swing.JPanel();\n        userExtTextField = new javax.swing.JTextField();\n        addExtButton = new javax.swing.JButton();\n        jScrollPane3 = new javax.swing.JScrollPane();\n        extTable = new javax.swing.JTable();\n        removeExtButton = new javax.swing.JButton();\n        extHeaderLabel = new javax.swing.JLabel();\n        extErrorLabel = new javax.swing.JLabel();\n        extRemoveErrLabel = new javax.swing.JLabel();\n        saveMsgLabel = new javax.swing.JLabel();\n\n        jPanel1.setPreferredSize(new java.awt.Dimension(687, 450));\n\n        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/fileextmismatch/save16.png\"))); // NOI18N\n        saveButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.saveButton.text\")); // NOI18N\n        saveButton.setEnabled(false);\n        saveButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                saveButtonActionPerformed(evt);\n            }\n        });\n\n        jSplitPane1.setDividerLocation(430);\n\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.jLabel1.text\")); // NOI18N\n\n        mimeTable.setModel(mimeTableModel);\n        jScrollPane2.setViewportView(mimeTable);\n\n        userTypeTextField.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.userTypeTextField.text\")); // NOI18N\n        userTypeTextField.addFocusListener(new java.awt.event.FocusAdapter() {\n            public void focusGained(java.awt.event.FocusEvent evt) {\n                userTypeTextFieldFocusGained(evt);\n            }\n        });\n\n        addTypeButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.addTypeButton.text\")); // NOI18N\n        addTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                addTypeButtonActionPerformed(evt);\n            }\n        });\n\n        removeTypeButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.removeTypeButton.text\")); // NOI18N\n        removeTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                removeTypeButtonActionPerformed(evt);\n            }\n        });\n\n        mimeErrLabel.setForeground(new java.awt.Color(255, 0, 0));\n        mimeErrLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.mimeErrLabel.text\")); // NOI18N\n\n        mimeRemoveErrLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.mimeRemoveErrLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout mimePanelLayout = new javax.swing.GroupLayout(mimePanel);\n        mimePanel.setLayout(mimePanelLayout);\n        mimePanelLayout.setHorizontalGroup(\n            mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(mimePanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                    .addGroup(mimePanelLayout.createSequentialGroup()\n                        .addGroup(mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel1)\n                            .addGroup(mimePanelLayout.createSequentialGroup()\n                                .addComponent(userTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(addTypeButton))\n                            .addComponent(removeTypeButton))\n                        .addGap(0, 196, Short.MAX_VALUE))\n                    .addComponent(mimeErrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(mimeRemoveErrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        mimePanelLayout.setVerticalGroup(\n            mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(mimePanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(mimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(userTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(addTypeButton))\n                .addGap(3, 3, 3)\n                .addComponent(mimeErrLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(removeTypeButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(mimeRemoveErrLabel)\n                .addContainerGap(47, Short.MAX_VALUE))\n        );\n\n        jSplitPane1.setLeftComponent(mimePanel);\n\n        userExtTextField.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.userExtTextField.text\")); // NOI18N\n        userExtTextField.addFocusListener(new java.awt.event.FocusAdapter() {\n            public void focusGained(java.awt.event.FocusEvent evt) {\n                userExtTextFieldFocusGained(evt);\n            }\n        });\n\n        addExtButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.addExtButton.text\")); // NOI18N\n        addExtButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                addExtButtonActionPerformed(evt);\n            }\n        });\n\n        extTable.setModel(extTableModel);\n        jScrollPane3.setViewportView(extTable);\n\n        removeExtButton.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.removeExtButton.text\")); // NOI18N\n        removeExtButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                removeExtButtonActionPerformed(evt);\n            }\n        });\n\n        extHeaderLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.extHeaderLabel.text\")); // NOI18N\n\n        extErrorLabel.setForeground(new java.awt.Color(255, 0, 0));\n        extErrorLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.extErrorLabel.text\")); // NOI18N\n\n        extRemoveErrLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.extRemoveErrLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout extensionPanelLayout = new javax.swing.GroupLayout(extensionPanel);\n        extensionPanel.setLayout(extensionPanelLayout);\n        extensionPanelLayout.setHorizontalGroup(\n            extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(extensionPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                    .addComponent(extHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(extensionPanelLayout.createSequentialGroup()\n                        .addGroup(extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                            .addComponent(removeExtButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                            .addGroup(extensionPanelLayout.createSequentialGroup()\n                                .addComponent(userExtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(addExtButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                        .addGap(0, 46, Short.MAX_VALUE))\n                    .addComponent(extErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(extRemoveErrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        extensionPanelLayout.setVerticalGroup(\n            extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, extensionPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(extHeaderLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(extensionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(userExtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(addExtButton))\n                .addGap(2, 2, 2)\n                .addComponent(extErrorLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(removeExtButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(extRemoveErrLabel)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        jSplitPane1.setRightComponent(extensionPanel);\n\n        saveMsgLabel.setForeground(new java.awt.Color(0, 0, 255));\n        saveMsgLabel.setText(org.openide.util.NbBundle.getMessage(FileExtMismatchSettingsPanel.class, \"FileExtMismatchSettingsPanel.saveMsgLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n                        .addGap(0, 0, Short.MAX_VALUE)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(saveMsgLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                .addContainerGap())\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(saveButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(saveMsgLabel)\n                .addContainerGap())\n        );\n\n        jScrollPane1.setViewportView(jPanel1);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jScrollPane1)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 8, Short.MAX_VALUE))\n        );\n    }","commit_id":"00548bd71fb68dcb8ba1177b9dcbafb6e7ae47b8","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel2 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jButton3 = new javax.swing.JButton();\n        ingestWarningLabel = new javax.swing.JLabel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        hashSetTable = new HashSetTable();\n        deleteDatabaseButton = new javax.swing.JButton();\n        importDatabaseButton = new javax.swing.JButton();\n        hashDatabasesLabel = new javax.swing.JLabel();\n        nameLabel = new javax.swing.JLabel();\n        hashDbNameLabel = new javax.swing.JLabel();\n        hashDbLocationLabel = new javax.swing.JLabel();\n        locationLabel = new javax.swing.JLabel();\n        typeLabel = new javax.swing.JLabel();\n        hashDbTypeLabel = new javax.swing.JLabel();\n        hashDbIndexStatusLabel = new javax.swing.JLabel();\n        indexLabel = new javax.swing.JLabel();\n        indexButton = new javax.swing.JButton();\n        sendIngestMessagesCheckBox = new javax.swing.JCheckBox();\n        informationLabel = new javax.swing.JLabel();\n        optionsLabel = new javax.swing.JLabel();\n        informationSeparator = new javax.swing.JSeparator();\n        optionsSeparator = new javax.swing.JSeparator();\n        createDatabaseButton = new javax.swing.JButton();\n        indexPathLabelLabel = new javax.swing.JLabel();\n        indexPathLabel = new javax.swing.JLabel();\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel2.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel4.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel6.text\")); // NOI18N\n\n        jButton3.setFont(jButton3.getFont().deriveFont(Font.PLAIN, 14));\n        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jButton3.text\")); // NOI18N\n\n        setMinimumSize(new java.awt.Dimension(700, 500));\n        setPreferredSize(new java.awt.Dimension(700, 500));\n\n        ingestWarningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/warning16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(ingestWarningLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.ingestWarningLabel.text\")); // NOI18N\n\n        hashSetTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        hashSetTable.setShowHorizontalLines(false);\n        hashSetTable.setShowVerticalLines(false);\n        hashSetTable.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyPressed(java.awt.event.KeyEvent evt) {\n                hashSetTableKeyPressed(evt);\n            }\n        });\n        jScrollPane1.setViewportView(hashSetTable);\n\n        deleteDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/delete16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(deleteDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.deleteDatabaseButton.text\")); // NOI18N\n        deleteDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                deleteDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        importDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/import16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(importDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.importDatabaseButton.text\")); // NOI18N\n        importDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                importDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDatabasesLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDatabasesLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.nameLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbNameLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbNameLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbLocationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbLocationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(locationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.locationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(typeLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.typeLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbTypeLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbTypeLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbIndexStatusLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbIndexStatusLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexButton.text\")); // NOI18N\n        indexButton.setEnabled(false);\n        indexButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                indexButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(sendIngestMessagesCheckBox, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.sendIngestMessagesCheckBox.text\")); // NOI18N\n        sendIngestMessagesCheckBox.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                sendIngestMessagesCheckBoxActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(informationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.informationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(optionsLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.optionsLabel.text\")); // NOI18N\n\n        createDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/new16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(createDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.createDatabaseButton.text\")); // NOI18N\n        createDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                createDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexPathLabelLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexPathLabelLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexPathLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexPathLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(informationLabel)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(informationSeparator))\n                                    .addComponent(ingestWarningLabel)\n                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                                        .addGap(10, 10, 10)\n                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addGroup(layout.createSequentialGroup()\n                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                                    .addComponent(locationLabel)\n                                                    .addComponent(indexButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                                    .addComponent(typeLabel)\n                                                    .addComponent(indexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                                    .addComponent(indexPathLabelLabel))\n                                                .addGap(10, 10, 10)\n                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                                    .addComponent(hashDbTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)\n                                                    .addComponent(hashDbLocationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                    .addComponent(indexPathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                    .addComponent(hashDbIndexStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                                            .addGroup(layout.createSequentialGroup()\n                                                .addComponent(nameLabel)\n                                                .addGap(53, 53, 53)\n                                                .addComponent(hashDbNameLabel)\n                                                .addGap(0, 0, Short.MAX_VALUE))))\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(optionsLabel)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(optionsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(23, 23, 23)\n                                .addComponent(sendIngestMessagesCheckBox)\n                                .addGap(0, 0, Short.MAX_VALUE))))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(hashDatabasesLabel)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                                    .addComponent(deleteDatabaseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                                    .addComponent(createDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(importDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                        .addGap(0, 0, Short.MAX_VALUE)))\n                .addGap(24, 24, 24))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(hashDatabasesLabel)\n                .addGap(6, 6, 6)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(informationLabel)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(7, 7, 7)\n                                .addComponent(informationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                        .addGap(7, 7, 7)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(nameLabel)\n                            .addComponent(hashDbNameLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(typeLabel)\n                            .addComponent(hashDbTypeLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(locationLabel)\n                            .addComponent(hashDbLocationLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(indexPathLabelLabel)\n                            .addComponent(indexPathLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(indexLabel)\n                            .addComponent(hashDbIndexStatusLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(indexButton)\n                        .addGap(18, 18, 18)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(optionsLabel)\n                            .addComponent(optionsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(18, 18, 18)\n                        .addComponent(sendIngestMessagesCheckBox)\n                        .addGap(18, 18, 18)\n                        .addComponent(ingestWarningLabel)\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(importDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(createDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(deleteDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n    }","id":12343,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel2 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jButton3 = new javax.swing.JButton();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        jPanel1 = new javax.swing.JPanel();\n        ingestWarningLabel = new javax.swing.JLabel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        hashSetTable = new HashSetTable();\n        deleteDatabaseButton = new javax.swing.JButton();\n        importDatabaseButton = new javax.swing.JButton();\n        hashDatabasesLabel = new javax.swing.JLabel();\n        nameLabel = new javax.swing.JLabel();\n        hashDbNameLabel = new javax.swing.JLabel();\n        hashDbLocationLabel = new javax.swing.JLabel();\n        locationLabel = new javax.swing.JLabel();\n        typeLabel = new javax.swing.JLabel();\n        hashDbTypeLabel = new javax.swing.JLabel();\n        hashDbIndexStatusLabel = new javax.swing.JLabel();\n        indexLabel = new javax.swing.JLabel();\n        indexButton = new javax.swing.JButton();\n        sendIngestMessagesCheckBox = new javax.swing.JCheckBox();\n        informationLabel = new javax.swing.JLabel();\n        optionsLabel = new javax.swing.JLabel();\n        informationSeparator = new javax.swing.JSeparator();\n        optionsSeparator = new javax.swing.JSeparator();\n        createDatabaseButton = new javax.swing.JButton();\n        indexPathLabelLabel = new javax.swing.JLabel();\n        indexPathLabel = new javax.swing.JLabel();\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel2.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel4.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel6.text\")); // NOI18N\n\n        jButton3.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jButton3.text\")); // NOI18N\n\n        setMinimumSize(new java.awt.Dimension(700, 430));\n        setPreferredSize(new java.awt.Dimension(700, 430));\n\n        jPanel1.setPreferredSize(new java.awt.Dimension(671, 430));\n\n        ingestWarningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/warning16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(ingestWarningLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.ingestWarningLabel.text\")); // NOI18N\n\n        hashSetTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        hashSetTable.setShowHorizontalLines(false);\n        hashSetTable.setShowVerticalLines(false);\n        hashSetTable.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyPressed(java.awt.event.KeyEvent evt) {\n                hashSetTableKeyPressed(evt);\n            }\n        });\n        jScrollPane1.setViewportView(hashSetTable);\n\n        deleteDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/delete16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(deleteDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.deleteDatabaseButton.text\")); // NOI18N\n        deleteDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                deleteDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        importDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/import16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(importDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.importDatabaseButton.text\")); // NOI18N\n        importDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                importDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDatabasesLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDatabasesLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.nameLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbNameLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbNameLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbLocationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbLocationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(locationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.locationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(typeLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.typeLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbTypeLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbTypeLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbIndexStatusLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbIndexStatusLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexButton.text\")); // NOI18N\n        indexButton.setEnabled(false);\n        indexButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                indexButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(sendIngestMessagesCheckBox, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.sendIngestMessagesCheckBox.text\")); // NOI18N\n        sendIngestMessagesCheckBox.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                sendIngestMessagesCheckBoxActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(informationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.informationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(optionsLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.optionsLabel.text\")); // NOI18N\n\n        createDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/new16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(createDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.createDatabaseButton.text\")); // NOI18N\n        createDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                createDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexPathLabelLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexPathLabelLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexPathLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexPathLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addComponent(createDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                .addComponent(importDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addGap(10, 10, 10)\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(jPanel1Layout.createSequentialGroup()\n                                        .addComponent(informationLabel)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(informationSeparator))\n                                    .addComponent(ingestWarningLabel)\n                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n                                        .addGap(10, 10, 10)\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                                    .addComponent(locationLabel)\n                                                    .addComponent(indexButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                                    .addComponent(typeLabel)\n                                                    .addComponent(indexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                                    .addComponent(indexPathLabelLabel))\n                                                .addGap(10, 10, 10)\n                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                                    .addComponent(hashDbTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                    .addComponent(hashDbLocationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                    .addComponent(indexPathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                    .addComponent(hashDbIndexStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                                .addComponent(nameLabel)\n                                                .addGap(53, 53, 53)\n                                                .addComponent(hashDbNameLabel)\n                                                .addGap(0, 0, Short.MAX_VALUE))))\n                                    .addGroup(jPanel1Layout.createSequentialGroup()\n                                        .addComponent(optionsLabel)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(optionsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addGap(23, 23, 23)\n                                .addComponent(sendIngestMessagesCheckBox)\n                                .addGap(0, 0, Short.MAX_VALUE))))\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(hashDatabasesLabel)\n                            .addComponent(deleteDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(0, 0, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(hashDatabasesLabel)\n                .addGap(6, 6, 6)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(informationLabel)\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addGap(7, 7, 7)\n                                .addComponent(informationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                        .addGap(7, 7, 7)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(nameLabel)\n                            .addComponent(hashDbNameLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(typeLabel)\n                            .addComponent(hashDbTypeLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(locationLabel)\n                            .addComponent(hashDbLocationLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(indexPathLabelLabel)\n                            .addComponent(indexPathLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(indexLabel)\n                            .addComponent(hashDbIndexStatusLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(indexButton)\n                        .addGap(18, 18, 18)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(optionsLabel)\n                            .addComponent(optionsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(18, 18, 18)\n                        .addComponent(sendIngestMessagesCheckBox)\n                        .addGap(18, 18, 18)\n                        .addComponent(ingestWarningLabel))\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(importDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(createDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(deleteDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(33, Short.MAX_VALUE))\n        );\n\n        jScrollPane2.setViewportView(jPanel1);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","commit_id":"00548bd71fb68dcb8ba1177b9dcbafb6e7ae47b8","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        ingestRunningWarningLabel = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        jSplitPane1 = new javax.swing.JSplitPane();\n        jPanel1 = new javax.swing.JPanel();\n        jLabel2 = new javax.swing.JLabel();\n        typesScrollPane = new javax.swing.JScrollPane();\n        typesList = new javax.swing.JList<>();\n        deleteTypeButton = new javax.swing.JButton();\n        newTypeButton = new javax.swing.JButton();\n        editTypeButton = new javax.swing.JButton();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        signatureList = new javax.swing.JList<>();\n\n        setMaximumSize(new java.awt.Dimension(752, 507));\n        setPreferredSize(new java.awt.Dimension(752, 507));\n\n        ingestRunningWarningLabel.setFont(ingestRunningWarningLabel.getFont().deriveFont(ingestRunningWarningLabel.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        ingestRunningWarningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/filetypeid/warning16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(ingestRunningWarningLabel, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.ingestRunningWarningLabel.text\")); // NOI18N\n\n        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.jLabel3.text\")); // NOI18N\n\n        jScrollPane2.setMinimumSize(new java.awt.Dimension(300, 100));\n\n        jSplitPane1.setMinimumSize(new java.awt.Dimension(558, 285));\n\n        jPanel1.setMinimumSize(new java.awt.Dimension(362, 283));\n\n        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.jLabel2.text\")); // NOI18N\n\n        typesList.setFont(typesList.getFont().deriveFont(typesList.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        typesList.setMaximumSize(new java.awt.Dimension(150, 0));\n        typesList.setMinimumSize(new java.awt.Dimension(150, 0));\n        typesScrollPane.setViewportView(typesList);\n\n        deleteTypeButton.setFont(deleteTypeButton.getFont().deriveFont(deleteTypeButton.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        deleteTypeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/delete16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(deleteTypeButton, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.deleteTypeButton.text\")); // NOI18N\n        deleteTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                deleteTypeButtonActionPerformed(evt);\n            }\n        });\n\n        newTypeButton.setFont(newTypeButton.getFont().deriveFont(newTypeButton.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        newTypeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/add16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(newTypeButton, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.newTypeButton.text\")); // NOI18N\n        newTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                newTypeButtonActionPerformed(evt);\n            }\n        });\n\n        editTypeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/edit16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(editTypeButton, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.editTypeButton.text\")); // NOI18N\n        editTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                editTypeButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addComponent(newTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(editTypeButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(deleteTypeButton))\n                    .addComponent(jLabel2)\n                    .addComponent(typesScrollPane))\n                .addGap(31, 31, 31))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGap(12, 12, 12)\n                .addComponent(jLabel2)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(typesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(newTypeButton)\n                    .addComponent(editTypeButton)\n                    .addComponent(deleteTypeButton))\n                .addContainerGap())\n        );\n\n        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deleteTypeButton, newTypeButton});\n\n        jSplitPane1.setLeftComponent(jPanel1);\n\n        jPanel2.setMinimumSize(new java.awt.Dimension(79, 283));\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.jLabel1.text\")); // NOI18N\n\n        signatureList.setModel(new javax.swing.AbstractListModel<Signature>() {\n            Signature[] signatures = {};\n            public int getSize() { return signatures.length; }\n            public Signature getElementAt(int i) { return signatures[i]; }\n        });\n        signatureList.setMaximumSize(new java.awt.Dimension(32767, 32767));\n        signatureList.setPreferredSize(null);\n        jScrollPane1.setViewportView(signatureList);\n\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n        jPanel2.setLayout(jPanel2Layout);\n        jPanel2Layout.setHorizontalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()\n                .addGap(18, 18, 18)\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel2Layout.createSequentialGroup()\n                        .addComponent(jLabel1)\n                        .addGap(100, 100, 100))\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        jPanel2Layout.setVerticalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)\n                .addGap(40, 40, 40))\n        );\n\n        jSplitPane1.setRightComponent(jPanel2);\n\n        jScrollPane2.setViewportView(jSplitPane1);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(ingestRunningWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)\n                        .addContainerGap())))\n            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(6, 6, 6)\n                .addComponent(jLabel3)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(ingestRunningWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(12, 12, 12))\n        );\n    }","id":12344,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel3 = new javax.swing.JPanel();\n        ingestRunningWarningLabel = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        jSplitPane1 = new javax.swing.JSplitPane();\n        jPanel1 = new javax.swing.JPanel();\n        jLabel2 = new javax.swing.JLabel();\n        typesScrollPane = new javax.swing.JScrollPane();\n        typesList = new javax.swing.JList<>();\n        deleteTypeButton = new javax.swing.JButton();\n        newTypeButton = new javax.swing.JButton();\n        editTypeButton = new javax.swing.JButton();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        signatureList = new javax.swing.JList<>();\n\n        setMaximumSize(null);\n        setPreferredSize(new java.awt.Dimension(752, 507));\n\n        ingestRunningWarningLabel.setFont(ingestRunningWarningLabel.getFont().deriveFont(ingestRunningWarningLabel.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        ingestRunningWarningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/filetypeid/warning16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(ingestRunningWarningLabel, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.ingestRunningWarningLabel.text\")); // NOI18N\n\n        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.jLabel3.text\")); // NOI18N\n\n        jScrollPane2.setMinimumSize(new java.awt.Dimension(300, 100));\n\n        jSplitPane1.setMinimumSize(new java.awt.Dimension(558, 285));\n\n        jPanel1.setMinimumSize(new java.awt.Dimension(362, 283));\n\n        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.jLabel2.text\")); // NOI18N\n\n        typesList.setFont(typesList.getFont().deriveFont(typesList.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        typesList.setMaximumSize(new java.awt.Dimension(150, 0));\n        typesList.setMinimumSize(new java.awt.Dimension(150, 0));\n        typesScrollPane.setViewportView(typesList);\n\n        deleteTypeButton.setFont(deleteTypeButton.getFont().deriveFont(deleteTypeButton.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        deleteTypeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/delete16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(deleteTypeButton, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.deleteTypeButton.text\")); // NOI18N\n        deleteTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                deleteTypeButtonActionPerformed(evt);\n            }\n        });\n\n        newTypeButton.setFont(newTypeButton.getFont().deriveFont(newTypeButton.getFont().getStyle() & ~java.awt.Font.BOLD, 11));\n        newTypeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/add16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(newTypeButton, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.newTypeButton.text\")); // NOI18N\n        newTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                newTypeButtonActionPerformed(evt);\n            }\n        });\n\n        editTypeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/edit16.png\"))); // NOI18N\n        org.openide.awt.Mnemonics.setLocalizedText(editTypeButton, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.editTypeButton.text\")); // NOI18N\n        editTypeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                editTypeButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addComponent(newTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(editTypeButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(deleteTypeButton))\n                    .addComponent(jLabel2)\n                    .addComponent(typesScrollPane))\n                .addGap(31, 31, 31))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGap(12, 12, 12)\n                .addComponent(jLabel2)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(typesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(newTypeButton)\n                    .addComponent(editTypeButton)\n                    .addComponent(deleteTypeButton))\n                .addContainerGap())\n        );\n\n        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deleteTypeButton, newTypeButton});\n\n        jSplitPane1.setLeftComponent(jPanel1);\n\n        jPanel2.setMinimumSize(new java.awt.Dimension(79, 283));\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FileTypeIdGlobalSettingsPanel.class, \"FileTypeIdGlobalSettingsPanel.jLabel1.text\")); // NOI18N\n\n        signatureList.setModel(new javax.swing.AbstractListModel<Signature>() {\n            Signature[] signatures = {};\n            public int getSize() { return signatures.length; }\n            public Signature getElementAt(int i) { return signatures[i]; }\n        });\n        signatureList.setMaximumSize(new java.awt.Dimension(32767, 32767));\n        signatureList.setPreferredSize(null);\n        jScrollPane1.setViewportView(signatureList);\n\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n        jPanel2.setLayout(jPanel2Layout);\n        jPanel2Layout.setHorizontalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()\n                .addGap(18, 18, 18)\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel2Layout.createSequentialGroup()\n                        .addComponent(jLabel1)\n                        .addGap(100, 100, 100))\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        jPanel2Layout.setVerticalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)\n                .addGap(40, 40, 40))\n        );\n\n        jSplitPane1.setRightComponent(jPanel2);\n\n        jScrollPane2.setViewportView(jSplitPane1);\n\n        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);\n        jPanel3.setLayout(jPanel3Layout);\n        jPanel3Layout.setHorizontalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel3Layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(ingestRunningWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        jPanel3Layout.setVerticalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel3Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel3)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(ingestRunningWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGap(0, 0, 0))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGap(0, 0, 0))\n        );\n    }","commit_id":"047a8b78316b442e4ed45d31a0d85d84c3368209","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.blClassifierRef(SNodeOperations.getReference(node, SLinkOperations.findLinkDeclaration(\"jetbrains.mps.baseLanguage.structure.AnonymousClass\", \"classifier\")), this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeParameter\", true)).isNotEmpty()) {\n      this.append(\"<\");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeParameter\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"typeParameter\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"typeParameter\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n      this.append(\">\");\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      this.append(\"(\");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n      this.append(\")\");\n    } else {\n      this.append(\"(\");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"actualArgument\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"actualArgument\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"actualArgument\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n      this.append(\")\");\n    }\n    if ((SLinkOperations.getTarget(node, \"instanceInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isEmpty()) {\n      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, \"classifier\", false), \"jetbrains.mps.baseLanguage.structure.ClassConcept\") && !(SPropertyOperations.getBoolean(SNodeOperations.cast(SLinkOperations.getTarget(node, \"classifier\", false), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"abstractClass\"))) {\n        return;\n      } else {\n        this.append(\" {}\");\n        return;\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    BaseClassConceptTextGen.body(node, this);\n    this.decreaseDepth();\n    this.appendWithIndent(\"}\");\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String unitName = null;\n        try {\n          unitName = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\"), \"virtual_getUnitName_5067982036267369911\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate unit name for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillUnitInfo(this, node, unitName);\n      }\n    }\n  }","id":12345,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.blClassifierRef(SNodeOperations.getReference(node, SLinkOperations.findLinkDeclaration(\"jetbrains.mps.baseLanguage.structure.AnonymousClass\", \"classifier\")), this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeParameter\", true)).isNotEmpty()) {\n      this.append(\"<\");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeParameter\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"typeParameter\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"typeParameter\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n      this.append(\">\");\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      this.append(\"(\");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n      this.append(\")\");\n    } else {\n      this.append(\"(\");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"actualArgument\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"actualArgument\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"actualArgument\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n      this.append(\")\");\n    }\n    if ((SLinkOperations.getTarget(node, \"instanceInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isEmpty()) {\n      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, \"classifier\", false), \"jetbrains.mps.baseLanguage.structure.ClassConcept\") && !(SPropertyOperations.getBoolean(SNodeOperations.cast(SLinkOperations.getTarget(node, \"classifier\", false), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"abstractClass\"))) {\n        return;\n      } else {\n        this.append(\" {}\");\n        return;\n      }\n    }\n    this.append(\" {\");\n    this.appendNewLine();\n    this.increaseDepth();\n    BaseClassConceptTextGen.members(node, this);\n    this.decreaseDepth();\n    this.appendWithIndent(\"}\");\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String unitName = null;\n        try {\n          unitName = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\"), \"virtual_getUnitName_5067982036267369911\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate unit name for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillUnitInfo(this, node, unitName);\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void members(SNode classifier, final SNodeTextGen textGen) {\n    boolean needNewLineBefore = false;\n    for (SNode member : Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(classifier))) {\n      BaseLanguageTextGen.newLine(needNewLineBefore, textGen);\n      TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), member, textGen.getSNode());\n      needNewLineBefore = true;\n    }\n    if ((SLinkOperations.getTarget(SNodeOperations.as(classifier, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"classInitializer\", true) != null)) {\n      BaseLanguageTextGen.newLine(needNewLineBefore, textGen);\n      textGen.appendWithIndent(\"static {\");\n      textGen.increaseDepth();\n      TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(classifier, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"classInitializer\", true), \"statementList\", true), textGen.getSNode());\n      textGen.appendNewLine();\n      textGen.decreaseDepth();\n      textGen.appendWithIndent(\"}\");\n      textGen.appendNewLine();\n    }\n  }","id":12346,"modified_method":"public static void members(SNode classifier, final SNodeTextGen textGen) {\n    if (Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(classifier)).isNotEmpty()) {\n      for (SNode item : Classifier_Behavior.call_members_1465982738252129704(classifier)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n    if ((SLinkOperations.getTarget(SNodeOperations.as(classifier, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"staticInitializer\", true) != null)) {\n      textGen.appendWithIndent(\"static {\");\n      textGen.increaseDepth();\n      TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), SLinkOperations.getTarget(SNodeOperations.cast(classifier, \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), \"staticInitializer\", true), textGen.getSNode());\n      textGen.appendNewLine();\n      textGen.decreaseDepth();\n      textGen.appendWithIndent(\"}\");\n      textGen.appendNewLine();\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public BehaviorDescriptor getDescriptor(String fqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {\n      case 22:\n        return new AssignmentExpression_BehaviorDescriptor();\n      case 38:\n        return new ClassConcept_BehaviorDescriptor();\n      case 120:\n        return new ParameterDeclaration_BehaviorDescriptor();\n      case 149:\n        return new StatementList_BehaviorDescriptor();\n      case 63:\n        return new EqualsExpression_BehaviorDescriptor();\n      case 65:\n        return new ExpressionStatement_BehaviorDescriptor();\n      case 147:\n        return new Statement_BehaviorDescriptor();\n      case 78:\n        return new IfStatement_BehaviorDescriptor();\n      case 82:\n        return new InstanceMethodDeclaration_BehaviorDescriptor();\n      case 84:\n        return new IntegerConstant_BehaviorDescriptor();\n      case 98:\n        return new LocalVariableDeclaration_BehaviorDescriptor();\n      case 99:\n        return new LocalVariableDeclarationStatement_BehaviorDescriptor();\n      case 100:\n        return new LocalVariableReference_BehaviorDescriptor();\n      case 102:\n        return new LongType_BehaviorDescriptor();\n      case 107:\n        return new MinusExpression_BehaviorDescriptor();\n      case 121:\n        return new ParameterReference_BehaviorDescriptor();\n      case 125:\n        return new PlusExpression_BehaviorDescriptor();\n      case 139:\n        return new ReturnStatement_BehaviorDescriptor();\n      case 189:\n        return new VoidType_BehaviorDescriptor();\n      case 150:\n        return new StaticFieldDeclaration_BehaviorDescriptor();\n      case 159:\n        return new SuperConstructorInvocation_BehaviorDescriptor();\n      case 155:\n        return new StringLiteral_BehaviorDescriptor();\n      case 151:\n        return new StaticFieldReference_BehaviorDescriptor();\n      case 145:\n        return new ShortType_BehaviorDescriptor();\n      case 114:\n        return new NullLiteral_BehaviorDescriptor();\n      case 85:\n        return new IntegerType_BehaviorDescriptor();\n      case 68:\n        return new FloatType_BehaviorDescriptor();\n      case 56:\n        return new DoubleType_BehaviorDescriptor();\n      case 37:\n        return new CharType_BehaviorDescriptor();\n      case 33:\n        return new ByteType_BehaviorDescriptor();\n      case 31:\n        return new BooleanType_BehaviorDescriptor();\n      case 19:\n        return new ArrayType_BehaviorDescriptor();\n      case 34:\n        return new CastExpression_BehaviorDescriptor();\n      case 160:\n        return new SuperMethodCall_BehaviorDescriptor();\n      case 112:\n        return new NotEqualsExpression_BehaviorDescriptor();\n      case 190:\n        return new WhileStatement_BehaviorDescriptor();\n      case 122:\n        return new ParenthesizedExpression_BehaviorDescriptor();\n      case 4:\n        return new AndExpression_BehaviorDescriptor();\n      case 119:\n        return new OrExpression_BehaviorDescriptor();\n      case 153:\n        return new StaticMethodCall_BehaviorDescriptor();\n      case 154:\n        return new StaticMethodDeclaration_BehaviorDescriptor();\n      case 83:\n        return new InstanceOfExpression_BehaviorDescriptor();\n      case 113:\n        return new NotExpression_BehaviorDescriptor();\n      case 32:\n        return new BreakStatement_BehaviorDescriptor();\n      case 46:\n        return new ContinueStatement_BehaviorDescriptor();\n      case 29:\n        return new BlockStatement_BehaviorDescriptor();\n      case 58:\n        return new EnumClass_BehaviorDescriptor();\n      case 59:\n        return new EnumConstantDeclaration_BehaviorDescriptor();\n      case 60:\n        return new EnumConstantReference_BehaviorDescriptor();\n      case 109:\n        return new MulExpression_BehaviorDescriptor();\n      case 53:\n        return new DivExpression_BehaviorDescriptor();\n      case 41:\n        return new ClassifierType_BehaviorDescriptor();\n      case 86:\n        return new Interface_BehaviorDescriptor();\n      case 172:\n        return new TypeVariableDeclaration_BehaviorDescriptor();\n      case 173:\n        return new TypeVariableReference_BehaviorDescriptor();\n      case 40:\n        return new ClassifierClassExpression_BehaviorDescriptor();\n      case 72:\n        return new ForeachStatement_BehaviorDescriptor();\n      case 71:\n        return new ForStatement_BehaviorDescriptor();\n      case 73:\n        return new GenericNewExpression_BehaviorDescriptor();\n      case 135:\n        return new PublicVisibility_BehaviorDescriptor();\n      case 131:\n        return new PrivateVisibility_BehaviorDescriptor();\n      case 134:\n        return new ProtectedVisibility_BehaviorDescriptor();\n      case 42:\n        return new ClosureParameterReference_BehaviorDescriptor();\n      case 171:\n        return new TryStatement_BehaviorDescriptor();\n      case 16:\n        return new ArrayCreatorWithInitializer_BehaviorDescriptor();\n      case 21:\n        return new AssertStatement_BehaviorDescriptor();\n      case 167:\n        return new ThisExpression_BehaviorDescriptor();\n      case 164:\n        return new TernaryOperatorExpression_BehaviorDescriptor();\n      case 162:\n        return new SwitchStatement_BehaviorDescriptor();\n      case 161:\n        return new SwitchCase_BehaviorDescriptor();\n      case 170:\n        return new TryCatchStatement_BehaviorDescriptor();\n      case 35:\n        return new CatchClause_BehaviorDescriptor();\n      case 168:\n        return new ThrowStatement_BehaviorDescriptor();\n      case 138:\n        return new RemarkStatement_BehaviorDescriptor();\n      case 163:\n        return new SynchronizedStatement_BehaviorDescriptor();\n      case 10:\n        return new AnonymousClass_BehaviorDescriptor();\n      case 191:\n        return new WildCardType_BehaviorDescriptor();\n      case 105:\n        return new LowerBoundType_BehaviorDescriptor();\n      case 182:\n        return new UpperBoundType_BehaviorDescriptor();\n      case 97:\n        return new LocalStaticMethodCall_BehaviorDescriptor();\n      case 12:\n        return new ArrayAccessExpression_BehaviorDescriptor();\n      case 44:\n        return new CommentedStatementsBlock_BehaviorDescriptor();\n      case 54:\n        return new DoWhileStatement_BehaviorDescriptor();\n      case 185:\n        return new VarType_BehaviorDescriptor();\n      case 166:\n        return new ThisConstructorInvocation_BehaviorDescriptor();\n      case 11:\n        return new AnonymousClassCreator_BehaviorDescriptor();\n      case 15:\n        return new ArrayCreator_BehaviorDescriptor();\n      case 51:\n        return new DimensionExpression_BehaviorDescriptor();\n      case 5:\n        return new Annotation_BehaviorDescriptor();\n      case 9:\n        return new AnnotationMethodDeclaration_BehaviorDescriptor();\n      case 6:\n        return new AnnotationInstance_BehaviorDescriptor();\n      case 7:\n        return new AnnotationInstanceExpression_BehaviorDescriptor();\n      case 8:\n        return new AnnotationInstanceValue_BehaviorDescriptor();\n      case 18:\n        return new ArrayLiteral_BehaviorDescriptor();\n      case 55:\n        return new DotExpression_BehaviorDescriptor();\n      case 67:\n        return new FieldReferenceOperation_BehaviorDescriptor();\n      case 132:\n        return new Property_BehaviorDescriptor();\n      case 49:\n        return new DefaultPropertyImplementation_BehaviorDescriptor();\n      case 133:\n        return new PropertyReference_BehaviorDescriptor();\n      case 47:\n        return new CustomPropertyImplementation_BehaviorDescriptor();\n      case 74:\n        return new GetAccessor_BehaviorDescriptor();\n      case 141:\n        return new SetAccessor_BehaviorDescriptor();\n      case 184:\n        return new ValueParameter_BehaviorDescriptor();\n      case 48:\n        return new DefaultGetAccessor_BehaviorDescriptor();\n      case 50:\n        return new DefaultSetAccessor_BehaviorDescriptor();\n      case 81:\n        return new InstanceMethodCallOperation_BehaviorDescriptor();\n      case 115:\n        return new NullType_BehaviorDescriptor();\n      case 57:\n        return new ElsifClause_BehaviorDescriptor();\n      case 80:\n        return new InstanceInitializer_BehaviorDescriptor();\n      case 17:\n        return new ArrayLengthOperation_BehaviorDescriptor();\n      case 39:\n        return new ClassCreator_BehaviorDescriptor();\n      case 127:\n        return new PostfixIncrementExpression_BehaviorDescriptor();\n      case 126:\n        return new PostfixDecrementExpression_BehaviorDescriptor();\n      case 124:\n        return new PlusAssignmentExpression_BehaviorDescriptor();\n      case 106:\n        return new MinusAssignmentExpression_BehaviorDescriptor();\n      case 186:\n        return new VariableArityType_BehaviorDescriptor();\n      case 152:\n        return new StaticInitializer_BehaviorDescriptor();\n      case 20:\n        return new AsExpression_BehaviorDescriptor();\n      case 183:\n        return new UsingStatement_BehaviorDescriptor();\n      case 62:\n        return new EnumValuesExpression_BehaviorDescriptor();\n      case 28:\n        return new BitwiseXorExpression_BehaviorDescriptor();\n      case 61:\n        return new EnumValueOfExpression_BehaviorDescriptor();\n      case 27:\n        return new BitwiseOrExpression_BehaviorDescriptor();\n      case 25:\n        return new BitwiseAndExpression_BehaviorDescriptor();\n      case 156:\n        return new StringType_BehaviorDescriptor();\n      case 111:\n        return new NPENotEqualsExpression_BehaviorDescriptor();\n      case 110:\n        return new NPEEqualsExpression_BehaviorDescriptor();\n      case 87:\n        return new IsEmptyOperation_BehaviorDescriptor();\n      case 88:\n        return new IsNotEmptyOperation_BehaviorDescriptor();\n      case 158:\n        return new SubstringExpression_BehaviorDescriptor();\n      case 169:\n        return new TrimOperation_BehaviorDescriptor();\n      case 26:\n        return new BitwiseNotExpression_BehaviorDescriptor();\n      case 43:\n        return new CommentedStatement_BehaviorDescriptor();\n      case 129:\n        return new PrefixIncrementExpression_BehaviorDescriptor();\n      case 128:\n        return new PrefixDecrementExpression_BehaviorDescriptor();\n      case 1:\n        return new AbstractUnaryNumberOperation_BehaviorDescriptor();\n      case 23:\n        return new BLBottomType_BehaviorDescriptor();\n      case 24:\n        return new BaseVariableDeclaration_BehaviorDescriptor();\n      case 103:\n        return new LoopLabel_BehaviorDescriptor();\n      case 104:\n        return new LoopLabelReference_BehaviorDescriptor();\n      case 108:\n        return new MulAssignmentExpression_BehaviorDescriptor();\n      case 52:\n        return new DivAssignmentExpression_BehaviorDescriptor();\n      case 136:\n        return new RemAssignmentExpression_BehaviorDescriptor();\n      case 118:\n        return new OrAssignmentExpression_BehaviorDescriptor();\n      case 3:\n        return new AndAssignmentExpression_BehaviorDescriptor();\n      case 192:\n        return new XorAssignmentExpression_BehaviorDescriptor();\n      case 89:\n        return new LeftShiftAssignmentExpression_BehaviorDescriptor();\n      case 140:\n        return new RightShiftAssignmentExpression_BehaviorDescriptor();\n      case 2:\n        return new AdditionalForLoopVariable_BehaviorDescriptor();\n      case 0:\n        return new AbstractClassifierReference_BehaviorDescriptor();\n      case 79:\n        return new ImplicitAnnotationInstanceValue_BehaviorDescriptor();\n      case 130:\n        return new PrimitiveClassExpression_BehaviorDescriptor();\n      case 93:\n        return new LocalInstanceMethodCall_BehaviorDescriptor();\n      case 14:\n        return new ArrayCloneOperation_BehaviorDescriptor();\n      case 180:\n        return new UnresolvedNameReference_BehaviorDescriptor();\n      case 157:\n        return new StubStatementList_BehaviorDescriptor();\n      case 117:\n        return new OperationAssignmentExpression_BehaviorDescriptor();\n      case 64:\n        return new EscapeOperation_BehaviorDescriptor();\n      case 175:\n        return new UndefinedType_BehaviorDescriptor();\n      case 181:\n        return new UnsignedRightShiftAssignmentExpression_BehaviorDescriptor();\n      case 95:\n        return new LocalPropertyReference_BehaviorDescriptor();\n      case 13:\n        return new ArrayClassExpression_BehaviorDescriptor();\n      case 66:\n        return new FieldDeclaration_BehaviorDescriptor();\n      case 45:\n        return new ConstructorDeclaration_BehaviorDescriptor();\n      case 96:\n        return new LocalStaticFieldReference_BehaviorDescriptor();\n      case 123:\n        return new PlaceholderMethodDeclaration_BehaviorDescriptor();\n      case 165:\n        return new TextCommentPart_BehaviorDescriptor();\n      case 148:\n        return new StatementCommentPart_BehaviorDescriptor();\n      case 146:\n        return new SingleLineComment_BehaviorDescriptor();\n      case 92:\n        return new LocalInstanceFieldReference_BehaviorDescriptor();\n      case 142:\n        return new ShiftLeftExpression_BehaviorDescriptor();\n      case 143:\n        return new ShiftRightExpression_BehaviorDescriptor();\n      case 144:\n        return new ShiftRightUnsignedExpression_BehaviorDescriptor();\n      case 137:\n        return new RemExpression_BehaviorDescriptor();\n      case 90:\n        return new LessThanExpression_BehaviorDescriptor();\n      case 91:\n        return new LessThanOrEqualsExpression_BehaviorDescriptor();\n      case 76:\n        return new GreaterThanOrEqualsExpression_BehaviorDescriptor();\n      case 75:\n        return new GreaterThanExpression_BehaviorDescriptor();\n      case 174:\n        return new UnaryMinus_BehaviorDescriptor();\n      case 77:\n        return new HexIntegerLiteral_BehaviorDescriptor();\n      case 101:\n        return new LongLiteral_BehaviorDescriptor();\n      case 70:\n        return new FloatingPointFloatConstant_BehaviorDescriptor();\n      case 69:\n        return new FloatingPointConstant_BehaviorDescriptor();\n      case 30:\n        return new BooleanConstant_BehaviorDescriptor();\n      case 36:\n        return new CharConstant_BehaviorDescriptor();\n      case 116:\n        return new Number_BehaviorDescriptor();\n      case 187:\n        return new VariableDeclaration_BehaviorDescriptor();\n      case 188:\n        return new VariableReference_BehaviorDescriptor();\n      case 94:\n        return new LocalMethodCall_BehaviorDescriptor();\n      case 179:\n        return new UnknownNew_BehaviorDescriptor();\n      case 176:\n        return new UnknownConsCall_BehaviorDescriptor();\n      case 178:\n        return new UnknownLocalCall_BehaviorDescriptor();\n      case 177:\n        return new UnknownDotCall_BehaviorDescriptor();\n      default:\n        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);\n    }\n  }","id":12347,"modified_method":"public BehaviorDescriptor getDescriptor(String fqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {\n      case 22:\n        return new AssignmentExpression_BehaviorDescriptor();\n      case 38:\n        return new ClassConcept_BehaviorDescriptor();\n      case 120:\n        return new ParameterDeclaration_BehaviorDescriptor();\n      case 150:\n        return new StatementList_BehaviorDescriptor();\n      case 63:\n        return new EqualsExpression_BehaviorDescriptor();\n      case 65:\n        return new ExpressionStatement_BehaviorDescriptor();\n      case 148:\n        return new Statement_BehaviorDescriptor();\n      case 78:\n        return new IfStatement_BehaviorDescriptor();\n      case 82:\n        return new InstanceMethodDeclaration_BehaviorDescriptor();\n      case 84:\n        return new IntegerConstant_BehaviorDescriptor();\n      case 98:\n        return new LocalVariableDeclaration_BehaviorDescriptor();\n      case 99:\n        return new LocalVariableDeclarationStatement_BehaviorDescriptor();\n      case 100:\n        return new LocalVariableReference_BehaviorDescriptor();\n      case 102:\n        return new LongType_BehaviorDescriptor();\n      case 107:\n        return new MinusExpression_BehaviorDescriptor();\n      case 121:\n        return new ParameterReference_BehaviorDescriptor();\n      case 126:\n        return new PlusExpression_BehaviorDescriptor();\n      case 140:\n        return new ReturnStatement_BehaviorDescriptor();\n      case 190:\n        return new VoidType_BehaviorDescriptor();\n      case 151:\n        return new StaticFieldDeclaration_BehaviorDescriptor();\n      case 160:\n        return new SuperConstructorInvocation_BehaviorDescriptor();\n      case 156:\n        return new StringLiteral_BehaviorDescriptor();\n      case 152:\n        return new StaticFieldReference_BehaviorDescriptor();\n      case 146:\n        return new ShortType_BehaviorDescriptor();\n      case 114:\n        return new NullLiteral_BehaviorDescriptor();\n      case 85:\n        return new IntegerType_BehaviorDescriptor();\n      case 68:\n        return new FloatType_BehaviorDescriptor();\n      case 56:\n        return new DoubleType_BehaviorDescriptor();\n      case 37:\n        return new CharType_BehaviorDescriptor();\n      case 33:\n        return new ByteType_BehaviorDescriptor();\n      case 31:\n        return new BooleanType_BehaviorDescriptor();\n      case 19:\n        return new ArrayType_BehaviorDescriptor();\n      case 34:\n        return new CastExpression_BehaviorDescriptor();\n      case 161:\n        return new SuperMethodCall_BehaviorDescriptor();\n      case 112:\n        return new NotEqualsExpression_BehaviorDescriptor();\n      case 191:\n        return new WhileStatement_BehaviorDescriptor();\n      case 122:\n        return new ParenthesizedExpression_BehaviorDescriptor();\n      case 4:\n        return new AndExpression_BehaviorDescriptor();\n      case 119:\n        return new OrExpression_BehaviorDescriptor();\n      case 154:\n        return new StaticMethodCall_BehaviorDescriptor();\n      case 155:\n        return new StaticMethodDeclaration_BehaviorDescriptor();\n      case 83:\n        return new InstanceOfExpression_BehaviorDescriptor();\n      case 113:\n        return new NotExpression_BehaviorDescriptor();\n      case 32:\n        return new BreakStatement_BehaviorDescriptor();\n      case 46:\n        return new ContinueStatement_BehaviorDescriptor();\n      case 29:\n        return new BlockStatement_BehaviorDescriptor();\n      case 58:\n        return new EnumClass_BehaviorDescriptor();\n      case 59:\n        return new EnumConstantDeclaration_BehaviorDescriptor();\n      case 60:\n        return new EnumConstantReference_BehaviorDescriptor();\n      case 109:\n        return new MulExpression_BehaviorDescriptor();\n      case 53:\n        return new DivExpression_BehaviorDescriptor();\n      case 41:\n        return new ClassifierType_BehaviorDescriptor();\n      case 86:\n        return new Interface_BehaviorDescriptor();\n      case 173:\n        return new TypeVariableDeclaration_BehaviorDescriptor();\n      case 174:\n        return new TypeVariableReference_BehaviorDescriptor();\n      case 40:\n        return new ClassifierClassExpression_BehaviorDescriptor();\n      case 72:\n        return new ForeachStatement_BehaviorDescriptor();\n      case 71:\n        return new ForStatement_BehaviorDescriptor();\n      case 73:\n        return new GenericNewExpression_BehaviorDescriptor();\n      case 136:\n        return new PublicVisibility_BehaviorDescriptor();\n      case 132:\n        return new PrivateVisibility_BehaviorDescriptor();\n      case 135:\n        return new ProtectedVisibility_BehaviorDescriptor();\n      case 42:\n        return new ClosureParameterReference_BehaviorDescriptor();\n      case 172:\n        return new TryStatement_BehaviorDescriptor();\n      case 16:\n        return new ArrayCreatorWithInitializer_BehaviorDescriptor();\n      case 21:\n        return new AssertStatement_BehaviorDescriptor();\n      case 168:\n        return new ThisExpression_BehaviorDescriptor();\n      case 165:\n        return new TernaryOperatorExpression_BehaviorDescriptor();\n      case 163:\n        return new SwitchStatement_BehaviorDescriptor();\n      case 162:\n        return new SwitchCase_BehaviorDescriptor();\n      case 171:\n        return new TryCatchStatement_BehaviorDescriptor();\n      case 35:\n        return new CatchClause_BehaviorDescriptor();\n      case 169:\n        return new ThrowStatement_BehaviorDescriptor();\n      case 139:\n        return new RemarkStatement_BehaviorDescriptor();\n      case 164:\n        return new SynchronizedStatement_BehaviorDescriptor();\n      case 10:\n        return new AnonymousClass_BehaviorDescriptor();\n      case 192:\n        return new WildCardType_BehaviorDescriptor();\n      case 105:\n        return new LowerBoundType_BehaviorDescriptor();\n      case 183:\n        return new UpperBoundType_BehaviorDescriptor();\n      case 97:\n        return new LocalStaticMethodCall_BehaviorDescriptor();\n      case 12:\n        return new ArrayAccessExpression_BehaviorDescriptor();\n      case 44:\n        return new CommentedStatementsBlock_BehaviorDescriptor();\n      case 54:\n        return new DoWhileStatement_BehaviorDescriptor();\n      case 186:\n        return new VarType_BehaviorDescriptor();\n      case 167:\n        return new ThisConstructorInvocation_BehaviorDescriptor();\n      case 11:\n        return new AnonymousClassCreator_BehaviorDescriptor();\n      case 15:\n        return new ArrayCreator_BehaviorDescriptor();\n      case 51:\n        return new DimensionExpression_BehaviorDescriptor();\n      case 5:\n        return new Annotation_BehaviorDescriptor();\n      case 9:\n        return new AnnotationMethodDeclaration_BehaviorDescriptor();\n      case 6:\n        return new AnnotationInstance_BehaviorDescriptor();\n      case 7:\n        return new AnnotationInstanceExpression_BehaviorDescriptor();\n      case 8:\n        return new AnnotationInstanceValue_BehaviorDescriptor();\n      case 18:\n        return new ArrayLiteral_BehaviorDescriptor();\n      case 55:\n        return new DotExpression_BehaviorDescriptor();\n      case 67:\n        return new FieldReferenceOperation_BehaviorDescriptor();\n      case 133:\n        return new Property_BehaviorDescriptor();\n      case 49:\n        return new DefaultPropertyImplementation_BehaviorDescriptor();\n      case 134:\n        return new PropertyReference_BehaviorDescriptor();\n      case 47:\n        return new CustomPropertyImplementation_BehaviorDescriptor();\n      case 74:\n        return new GetAccessor_BehaviorDescriptor();\n      case 142:\n        return new SetAccessor_BehaviorDescriptor();\n      case 185:\n        return new ValueParameter_BehaviorDescriptor();\n      case 48:\n        return new DefaultGetAccessor_BehaviorDescriptor();\n      case 50:\n        return new DefaultSetAccessor_BehaviorDescriptor();\n      case 81:\n        return new InstanceMethodCallOperation_BehaviorDescriptor();\n      case 115:\n        return new NullType_BehaviorDescriptor();\n      case 57:\n        return new ElsifClause_BehaviorDescriptor();\n      case 80:\n        return new InstanceInitializer_BehaviorDescriptor();\n      case 17:\n        return new ArrayLengthOperation_BehaviorDescriptor();\n      case 39:\n        return new ClassCreator_BehaviorDescriptor();\n      case 128:\n        return new PostfixIncrementExpression_BehaviorDescriptor();\n      case 127:\n        return new PostfixDecrementExpression_BehaviorDescriptor();\n      case 125:\n        return new PlusAssignmentExpression_BehaviorDescriptor();\n      case 106:\n        return new MinusAssignmentExpression_BehaviorDescriptor();\n      case 187:\n        return new VariableArityType_BehaviorDescriptor();\n      case 153:\n        return new StaticInitializer_BehaviorDescriptor();\n      case 20:\n        return new AsExpression_BehaviorDescriptor();\n      case 184:\n        return new UsingStatement_BehaviorDescriptor();\n      case 62:\n        return new EnumValuesExpression_BehaviorDescriptor();\n      case 28:\n        return new BitwiseXorExpression_BehaviorDescriptor();\n      case 61:\n        return new EnumValueOfExpression_BehaviorDescriptor();\n      case 27:\n        return new BitwiseOrExpression_BehaviorDescriptor();\n      case 25:\n        return new BitwiseAndExpression_BehaviorDescriptor();\n      case 157:\n        return new StringType_BehaviorDescriptor();\n      case 111:\n        return new NPENotEqualsExpression_BehaviorDescriptor();\n      case 110:\n        return new NPEEqualsExpression_BehaviorDescriptor();\n      case 87:\n        return new IsEmptyOperation_BehaviorDescriptor();\n      case 88:\n        return new IsNotEmptyOperation_BehaviorDescriptor();\n      case 159:\n        return new SubstringExpression_BehaviorDescriptor();\n      case 170:\n        return new TrimOperation_BehaviorDescriptor();\n      case 26:\n        return new BitwiseNotExpression_BehaviorDescriptor();\n      case 43:\n        return new CommentedStatement_BehaviorDescriptor();\n      case 130:\n        return new PrefixIncrementExpression_BehaviorDescriptor();\n      case 129:\n        return new PrefixDecrementExpression_BehaviorDescriptor();\n      case 1:\n        return new AbstractUnaryNumberOperation_BehaviorDescriptor();\n      case 23:\n        return new BLBottomType_BehaviorDescriptor();\n      case 24:\n        return new BaseVariableDeclaration_BehaviorDescriptor();\n      case 103:\n        return new LoopLabel_BehaviorDescriptor();\n      case 104:\n        return new LoopLabelReference_BehaviorDescriptor();\n      case 108:\n        return new MulAssignmentExpression_BehaviorDescriptor();\n      case 52:\n        return new DivAssignmentExpression_BehaviorDescriptor();\n      case 137:\n        return new RemAssignmentExpression_BehaviorDescriptor();\n      case 118:\n        return new OrAssignmentExpression_BehaviorDescriptor();\n      case 3:\n        return new AndAssignmentExpression_BehaviorDescriptor();\n      case 193:\n        return new XorAssignmentExpression_BehaviorDescriptor();\n      case 89:\n        return new LeftShiftAssignmentExpression_BehaviorDescriptor();\n      case 141:\n        return new RightShiftAssignmentExpression_BehaviorDescriptor();\n      case 2:\n        return new AdditionalForLoopVariable_BehaviorDescriptor();\n      case 0:\n        return new AbstractClassifierReference_BehaviorDescriptor();\n      case 79:\n        return new ImplicitAnnotationInstanceValue_BehaviorDescriptor();\n      case 131:\n        return new PrimitiveClassExpression_BehaviorDescriptor();\n      case 93:\n        return new LocalInstanceMethodCall_BehaviorDescriptor();\n      case 14:\n        return new ArrayCloneOperation_BehaviorDescriptor();\n      case 181:\n        return new UnresolvedNameReference_BehaviorDescriptor();\n      case 158:\n        return new StubStatementList_BehaviorDescriptor();\n      case 117:\n        return new OperationAssignmentExpression_BehaviorDescriptor();\n      case 64:\n        return new EscapeOperation_BehaviorDescriptor();\n      case 176:\n        return new UndefinedType_BehaviorDescriptor();\n      case 182:\n        return new UnsignedRightShiftAssignmentExpression_BehaviorDescriptor();\n      case 95:\n        return new LocalPropertyReference_BehaviorDescriptor();\n      case 13:\n        return new ArrayClassExpression_BehaviorDescriptor();\n      case 66:\n        return new FieldDeclaration_BehaviorDescriptor();\n      case 45:\n        return new ConstructorDeclaration_BehaviorDescriptor();\n      case 96:\n        return new LocalStaticFieldReference_BehaviorDescriptor();\n      case 124:\n        return new PlaceholderMethodDeclaration_BehaviorDescriptor();\n      case 166:\n        return new TextCommentPart_BehaviorDescriptor();\n      case 149:\n        return new StatementCommentPart_BehaviorDescriptor();\n      case 147:\n        return new SingleLineComment_BehaviorDescriptor();\n      case 92:\n        return new LocalInstanceFieldReference_BehaviorDescriptor();\n      case 143:\n        return new ShiftLeftExpression_BehaviorDescriptor();\n      case 144:\n        return new ShiftRightExpression_BehaviorDescriptor();\n      case 145:\n        return new ShiftRightUnsignedExpression_BehaviorDescriptor();\n      case 138:\n        return new RemExpression_BehaviorDescriptor();\n      case 90:\n        return new LessThanExpression_BehaviorDescriptor();\n      case 91:\n        return new LessThanOrEqualsExpression_BehaviorDescriptor();\n      case 76:\n        return new GreaterThanOrEqualsExpression_BehaviorDescriptor();\n      case 75:\n        return new GreaterThanExpression_BehaviorDescriptor();\n      case 175:\n        return new UnaryMinus_BehaviorDescriptor();\n      case 77:\n        return new HexIntegerLiteral_BehaviorDescriptor();\n      case 101:\n        return new LongLiteral_BehaviorDescriptor();\n      case 70:\n        return new FloatingPointFloatConstant_BehaviorDescriptor();\n      case 69:\n        return new FloatingPointConstant_BehaviorDescriptor();\n      case 30:\n        return new BooleanConstant_BehaviorDescriptor();\n      case 36:\n        return new CharConstant_BehaviorDescriptor();\n      case 116:\n        return new Number_BehaviorDescriptor();\n      case 188:\n        return new VariableDeclaration_BehaviorDescriptor();\n      case 189:\n        return new VariableReference_BehaviorDescriptor();\n      case 94:\n        return new LocalMethodCall_BehaviorDescriptor();\n      case 180:\n        return new UnknownNew_BehaviorDescriptor();\n      case 177:\n        return new UnknownConsCall_BehaviorDescriptor();\n      case 179:\n        return new UnknownLocalCall_BehaviorDescriptor();\n      case 178:\n        return new UnknownDotCall_BehaviorDescriptor();\n      case 123:\n        return new PlaceholderMember_BehaviorDescriptor();\n      default:\n        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (Classifier_Behavior.call_isInner_521412098689998677(node) && Classifier_Behavior.call_isStatic_521412098689998668(node)) {\n      this.append(\"static \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"abstractClass\")) {\n      this.append(\"abstract \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    this.append(\"class \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if ((SLinkOperations.getTarget(node, \"superclass\", true) != null)) {\n      this.append(\" extends \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"superclass\", true), this.getSNode());\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n      this.append(\" implements \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"implementedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    BaseClassConceptTextGen.body(node, this);\n    this.decreaseDepth();\n    if ((SLinkOperations.getTarget(node, \"classInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"constructor\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).isEmpty() && (SLinkOperations.getTarget(node, \"instanceInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"property\", true)).isEmpty() && (SLinkOperations.getTarget(node, \"staticInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticInnerClassifiers\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticMethod\", true)).isEmpty()) {\n      this.appendNewLine();\n    }\n    if (!(node.isRoot())) {\n      this.appendWithIndent(\"}\");\n    } else {\n      this.append(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String unitName = null;\n        try {\n          unitName = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\"), \"virtual_getUnitName_5067982036267369911\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate unit name for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillUnitInfo(this, node, unitName);\n      }\n    }\n  }","id":12348,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (Classifier_Behavior.call_isInner_521412098689998677(node) && Classifier_Behavior.call_isStatic_521412098689998668(node)) {\n      this.append(\"static \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"abstractClass\")) {\n      this.append(\"abstract \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    this.append(\"class \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if ((SLinkOperations.getTarget(node, \"superclass\", true) != null)) {\n      this.append(\" extends \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"superclass\", true), this.getSNode());\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n      this.append(\" implements \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"implementedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.appendNewLine();\n    this.increaseDepth();\n    BaseClassConceptTextGen.members(node, this);\n    this.decreaseDepth();\n    if ((SLinkOperations.getTarget(node, \"classInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"constructor\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).isEmpty() && (SLinkOperations.getTarget(node, \"instanceInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"property\", true)).isEmpty() && (SLinkOperations.getTarget(node, \"staticInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticInnerClassifiers\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticMethod\", true)).isEmpty()) {\n      this.appendNewLine();\n    }\n    if (!(node.isRoot())) {\n      this.appendWithIndent(\"}\");\n    } else {\n      this.append(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String unitName = null;\n        try {\n          unitName = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\"), \"virtual_getUnitName_5067982036267369911\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate unit name for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillUnitInfo(this, node, unitName);\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Iterable<SNode> call_members_1465982738252129704(SNode thisNode) {\n    // todo: change on .members \n    List<SNode> members = ListSequence.fromList(new ArrayList<SNode>());\n\n    SNode asClass = SNodeOperations.as(thisNode, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n\n    if ((SLinkOperations.getTarget(asClass, \"instanceInitializer\", true) != null)) {\n      ListSequence.fromList(members).addElement(SLinkOperations.getTarget(asClass, \"instanceInitializer\", true));\n    }\n    ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, \"staticField\", true)));\n    if (ListSequence.fromList(SLinkOperations.getTargets(asClass, \"field\", true)).isNotEmpty()) {\n      ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(asClass, \"field\", true)));\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(asClass, \"constructor\", true)).isNotEmpty()) {\n      ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(asClass, \"constructor\", true)));\n    }\n    ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, \"method\", true)));\n    if (ListSequence.fromList(SLinkOperations.getTargets(asClass, \"staticMethod\", true)).isNotEmpty()) {\n      ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(asClass, \"staticMethod\", true)));\n    }\n    ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, \"staticInnerClassifiers\", true)));\n    if ((SLinkOperations.getTarget(asClass, \"classInitializer\", true) != null)) {\n      ListSequence.fromList(members).addElement(SLinkOperations.getTarget(asClass, \"classInitializer\", true));\n    }\n\n    return members;\n  }","id":12349,"modified_method":"public static Iterable<SNode> call_members_1465982738252129704(SNode thisNode) {\n    // todo: change on .members \n    final List<SNode> members = ListSequence.fromList(new ArrayList<SNode>());\n    _FunctionTypes._void_P2_E0<? super Iterable<SNode>, ? super Boolean> addMembersToResult = new _FunctionTypes._void_P2_E0<Iterable<SNode>, Boolean>() {\n      public void invoke(Iterable<SNode> curMembers, Boolean addWhitespaceAfterEachMember) {\n        for (SNode member : Sequence.fromIterable(curMembers)) {\n          ListSequence.fromList(members).addElement(member);\n          if (addWhitespaceAfterEachMember) {\n            ListSequence.fromList(members).addElement(SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.PlaceholderMember\", null));\n          }\n        }\n        if (Sequence.fromIterable(curMembers).isNotEmpty() && !(addWhitespaceAfterEachMember)) {\n          ListSequence.fromList(members).addElement(SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.PlaceholderMember\", null));\n        }\n      }\n    };\n    _FunctionTypes._void_P1_E0<? super SNode> addMemberToResult = new _FunctionTypes._void_P1_E0<SNode>() {\n      public void invoke(SNode member) {\n        if ((member != null)) {\n          ListSequence.fromList(members).addElement(member);\n          ListSequence.fromList(members).addElement(SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.PlaceholderMember\", null));\n        }\n      }\n    };\n\n    SNode asClass = SNodeOperations.as(thisNode, \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n\n    addMemberToResult.invoke(SLinkOperations.getTarget(asClass, \"instanceInitializer\", true));\n    addMembersToResult.invoke(SLinkOperations.getTargets(thisNode, \"staticField\", true), false);\n    addMembersToResult.invoke(SLinkOperations.getTargets(asClass, \"field\", true), false);\n    addMembersToResult.invoke(SLinkOperations.getTargets(asClass, \"constructor\", true), true);\n    addMembersToResult.invoke(SLinkOperations.getTargets(thisNode, \"method\", true), !(SNodeOperations.isInstanceOf(thisNode, \"jetbrains.mps.baseLanguage.structure.Interface\")));\n    addMembersToResult.invoke(SLinkOperations.getTargets(asClass, \"staticMethod\", true), true);\n    addMembersToResult.invoke(SLinkOperations.getTargets(thisNode, \"staticInnerClassifiers\", true), true);\n    addMemberToResult.invoke(SLinkOperations.getTarget(asClass, \"classInitializer\", true));\n\n    if (ListSequence.fromList(members).count() > 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(members).last(), \"jetbrains.mps.baseLanguage.structure.PlaceholderMember\")) {\n      ListSequence.fromList(members).removeLastElement();\n    }\n\n    return members;\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    SNode declaringClass = SNodeOperations.cast(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    if (!(SNodeOperations.isInstanceOf(declaringClass, \"jetbrains.mps.baseLanguage.structure.EnumClass\"))) {\n      BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    } else {\n      this.indentBuffer();\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    assert declaringClass != null;\n    this.append(SPropertyOperations.getString(declaringClass, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n      {\n        List<SNode> scopeVariables = new ArrayList<SNode>();\n        try {\n          scopeVariables = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"), \"virtual_getScopeVariables_5067982036267369894\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate scope variables for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillScopeInfo(this, node, scopeVariables);\n      }\n    }\n  }","id":12350,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    SNode declaringClass = SNodeOperations.cast(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    BaseLanguageTextGen.annotations(node, this);\n    if (!(SNodeOperations.isInstanceOf(declaringClass, \"jetbrains.mps.baseLanguage.structure.EnumClass\"))) {\n      BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    } else {\n      this.indentBuffer();\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    assert declaringClass != null;\n    this.append(SPropertyOperations.getString(declaringClass, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n      {\n        List<SNode> scopeVariables = new ArrayList<SNode>();\n        try {\n          scopeVariables = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"), \"virtual_getScopeVariables_5067982036267369894\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate scope variables for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillScopeInfo(this, node, scopeVariables);\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void docCommentStart(SNode node, final SNodeTextGen textGen) {\n    textGen.appendNewLine();\n    textGen.indentBuffer();\n    textGen.append(\"/**\");\n\n    textGen.appendNewLine();\n    DocCommentTextGen.javadocIndent(textGen);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"body\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"body\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n\n    if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, node, \"virtual_isTagSectionEmpty_8465538089690623795\", new Object[]{}))) {\n      textGen.appendNewLine();\n      DocCommentTextGen.javadocIndent(textGen);\n    }\n\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"author\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"author\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"since\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"since\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"version\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"version\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"see\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"see\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n  }","id":12351,"modified_method":"public static void docCommentStart(SNode node, final SNodeTextGen textGen) {\n    textGen.indentBuffer();\n    textGen.append(\"/**\");\n\n    textGen.appendNewLine();\n    DocCommentTextGen.javadocIndent(textGen);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"body\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"body\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n\n    if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, node, \"virtual_isTagSectionEmpty_8465538089690623795\", new Object[]{}))) {\n      textGen.appendNewLine();\n      DocCommentTextGen.javadocIndent(textGen);\n    }\n\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"author\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"author\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"since\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"since\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"version\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"version\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"see\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"see\", true)) {\n        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void docCommentEnd(SNode node, final SNodeTextGen textGen) {\n    textGen.appendNewLine();\n    textGen.indentBuffer();\n    textGen.append(\" */\");\n  }","id":12352,"modified_method":"public static void docCommentEnd(SNode node, final SNodeTextGen textGen) {\n    textGen.appendNewLine();\n    textGen.indentBuffer();\n    textGen.append(\" */\");\n    textGen.appendNewLine();\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(node.isRoot())) {\n      this.append(\"static \");\n    }\n    this.appendWithIndent(\"enum \");\n    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    // new \n    if ((SLinkOperations.getTarget(node, \"superclass\", true) != null)) {\n      this.append(\" extends \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"superclass\", true), this.getSNode());\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n      this.append(\" implements \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"implementedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"enumConstant\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"enumConstant\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"enumConstant\", true)).last()) {\n          this.append(\",\");\n        }\n      }\n    }\n    this.append(\";\");\n    this.appendNewLine();\n    BaseClassConceptTextGen.body(node, this);\n    this.decreaseDepth();\n    if (!(node.isRoot())) {\n      this.appendWithIndent(\"}\");\n    } else {\n      this.append(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String unitName = null;\n        try {\n          unitName = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\"), \"virtual_getUnitName_5067982036267369911\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate unit name for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillUnitInfo(this, node, unitName);\n      }\n    }\n  }","id":12353,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(node.isRoot())) {\n      this.append(\"static \");\n    }\n    this.appendWithIndent(\"enum \");\n    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    // new \n    if ((SLinkOperations.getTarget(node, \"superclass\", true) != null)) {\n      this.append(\" extends \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"superclass\", true), this.getSNode());\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n      this.append(\" implements \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"implementedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"enumConstant\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"enumConstant\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"enumConstant\", true)).last()) {\n          this.append(\",\");\n        }\n      }\n    }\n    this.append(\";\");\n    this.appendNewLine();\n    this.appendNewLine();\n    BaseClassConceptTextGen.members(node, this);\n    this.decreaseDepth();\n    if (!(node.isRoot())) {\n      this.appendWithIndent(\"}\");\n    } else {\n      this.append(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String unitName = null;\n        try {\n          unitName = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\"), \"virtual_getUnitName_5067982036267369911\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate unit name for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillUnitInfo(this, node, unitName);\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SPropertyOperations.getBoolean(node, \"isVolatile\")) {\n      this.append(\"volatile \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isTransient\")) {\n      this.append(\"transient \");\n    }\n    BaseLanguageTextGen.variableDeclaration(node, this);\n    this.append(\";\");\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n    }\n  }","id":12354,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))), this.getSNode());\n    }\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SPropertyOperations.getBoolean(node, \"isVolatile\")) {\n      this.append(\"volatile \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isTransient\")) {\n      this.append(\"transient \");\n    }\n    BaseLanguageTextGen.variableDeclaration(node, this);\n    this.append(\";\");\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    this.appendNewLine();\n    this.appendWithIndent(\"{\");\n    this.increaseDepth();\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"statementList\", true), this.getSNode());\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    this.appendNewLine();\n  }","id":12355,"modified_method":"public void doGenerateText(SNode node) {\n    this.appendWithIndent(\"{\");\n    this.increaseDepth();\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"statementList\", true), this.getSNode());\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    this.appendNewLine();\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isAbstract\") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\"))) {\n      this.append(\"abstract \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isSynchronized\")) {\n      this.append(\"synchronized \");\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\") || SPropertyOperations.getBoolean(node, \"isAbstract\")) {\n      this.append(\";\");\n      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\"))) {\n        this.appendNewLine();\n      }\n    } else {\n      this.append(\" {\");\n      this.increaseDepth();\n      if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n      } else {\n        this.appendNewLine();\n        this.appendWithIndent(\"throw new RuntimeException(\\\"NOT IMPLEMENTED\\\");\");\n      }\n      this.decreaseDepth();\n      this.appendNewLine();\n      this.appendWithIndent(\"}\");\n      this.appendNewLine();\n    }\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n      {\n        List<SNode> scopeVariables = new ArrayList<SNode>();\n        try {\n          scopeVariables = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"), \"virtual_getScopeVariables_5067982036267369894\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate scope variables for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillScopeInfo(this, node, scopeVariables);\n      }\n    }\n  }","id":12356,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isAbstract\") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\"))) {\n      this.append(\"abstract \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isSynchronized\")) {\n      this.append(\"synchronized \");\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\") || SPropertyOperations.getBoolean(node, \"isAbstract\")) {\n      this.append(\";\");\n      this.appendNewLine();\n    } else {\n      this.append(\" {\");\n      this.increaseDepth();\n      if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n      } else {\n        this.appendNewLine();\n        this.appendWithIndent(\"throw new RuntimeException(\\\"NOT IMPLEMENTED\\\");\");\n      }\n      this.decreaseDepth();\n      this.appendNewLine();\n      this.appendWithIndent(\"}\");\n      this.appendNewLine();\n    }\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n      {\n        List<SNode> scopeVariables = new ArrayList<SNode>();\n        try {\n          scopeVariables = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"), \"virtual_getScopeVariables_5067982036267369894\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate scope variables for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillScopeInfo(this, node, scopeVariables);\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(node), \"jetbrains.mps.baseLanguage.structure.Interface\")).contains(node))) {\n      this.append(\"static \");\n    }\n    this.append(\"interface \");\n    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).isNotEmpty()) {\n      this.append(\" extends \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"extendedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"staticField\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isNotEmpty()) {\n      BaseLanguageTextGen.newLine(ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isNotEmpty(), this);\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"method\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        }\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"staticInnerClassifiers\", true)).isNotEmpty()) {\n      this.appendNewLine();\n      BaseClassConceptTextGen.innerClassifiers(node, this);\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    if (node.isRoot()) {\n      this.append(\"}\");\n    } else {\n      this.appendWithIndent(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String unitName = null;\n        try {\n          unitName = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\"), \"virtual_getUnitName_5067982036267369911\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate unit name for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillUnitInfo(this, node, unitName);\n      }\n    }\n  }","id":12357,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(node), \"jetbrains.mps.baseLanguage.structure.Interface\")).contains(node))) {\n      this.append(\"static \");\n    }\n    this.append(\"interface \");\n    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).isNotEmpty()) {\n      this.append(\" extends \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"extendedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.appendNewLine();\n    this.increaseDepth();\n    BaseClassConceptTextGen.members(node, this);\n    this.decreaseDepth();\n    if (node.isRoot()) {\n      this.append(\"}\");\n    } else {\n      this.appendWithIndent(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String unitName = null;\n        try {\n          unitName = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\"), \"virtual_getUnitName_5067982036267369911\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate unit name for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillUnitInfo(this, node, unitName);\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    this.append(\"static \");\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"type\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    if ((SLinkOperations.getTarget(node, \"initializer\", true) != null)) {\n      this.append(\" = \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"initializer\", true), this.getSNode());\n    }\n    this.append(\";\");\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n    }\n  }","id":12358,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))), this.getSNode());\n    }\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    this.append(\"static \");\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"type\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    if ((SLinkOperations.getTarget(node, \"initializer\", true) != null)) {\n      this.append(\" = \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"initializer\", true), this.getSNode());\n    }\n    this.append(\";\");\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n      this.append(\"static \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isSynchronized\")) {\n      this.append(\"synchronized \");\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n    } else {\n      this.appendNewLine();\n      this.appendWithIndent(\"throw new RuntimeException(\\\"NOT IMPLEMENTED\\\");\");\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n      {\n        List<SNode> scopeVariables = new ArrayList<SNode>();\n        try {\n          scopeVariables = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"), \"virtual_getScopeVariables_5067982036267369894\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate scope variables for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillScopeInfo(this, node, scopeVariables);\n      }\n    }\n  }","id":12359,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n      this.append(\"static \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isSynchronized\")) {\n      this.append(\"synchronized \");\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n    } else {\n      this.appendNewLine();\n      this.appendWithIndent(\"throw new RuntimeException(\\\"NOT IMPLEMENTED\\\");\");\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      {\n        String traceableProperty = \"\";\n        try {\n          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"), \"virtual_getTraceableProperty_5067982036267369901\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate traceable prorerty for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);\n      }\n      {\n        List<SNode> scopeVariables = new ArrayList<SNode>();\n        try {\n          scopeVariables = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"), \"virtual_getScopeVariables_5067982036267369894\", new Object[]{});\n        } catch (Throwable t) {\n          LOG.error(\"Can't calculate scope variables for a node \" + node + \".\", t);\n        }\n        TraceInfoGenerationUtil.fillScopeInfo(this, node, scopeVariables);\n      }\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ConceptDescriptor getDescriptor(String conceptFqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {\n      case 0:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractClassifierReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"classifier\"});\n      case 1:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractCreator\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 2:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\"}, new String[]{}, new String[]{});\n      case 3:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.IContainer\", \"jetbrains.mps.baseLanguage.structure.IContainsStatementList\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"label\"}, new String[]{});\n      case 4:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{});\n      case 5:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 6:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable\", \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\"}, new String[]{}, new String[]{});\n      case 7:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AndAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 8:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AndExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 9:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Annotation\", \"jetbrains.mps.baseLanguage.structure.Interface\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Interface\"}, new String[]{}, new String[]{});\n      case 10:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnnotationInstance\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{\"annotation\"});\n      case 11:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 12:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{\"key\"});\n      case 13:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"}, new String[]{}, new String[]{});\n      case 14:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnonymousClass\", \"jetbrains.mps.baseLanguage.structure.ClassConcept\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ClassConcept\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IAnonymousClass\", \"jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter\", \"jetbrains.mps.lang.traceable.structure.UnitConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{\"classifier\", \"constructorDeclaration\"});\n      case 15:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator\", \"jetbrains.mps.baseLanguage.structure.AbstractCreator\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractCreator\"}, new String[]{}, new String[]{});\n      case 16:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayAccessExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 17:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayClassExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 18:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayCloneOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{});\n      case 19:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayCreator\", \"jetbrains.mps.baseLanguage.structure.AbstractCreator\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractCreator\"}, new String[]{}, new String[]{});\n      case 20:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer\", \"jetbrains.mps.baseLanguage.structure.AbstractCreator\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractCreator\"}, new String[]{}, new String[]{});\n      case 21:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayLengthOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{});\n      case 22:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 23:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{});\n      case 24:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AsExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 25:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AssertStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 26:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.TypeDerivable\"}, new String[]{}, new String[]{});\n      case 27:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BLBottomType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 28:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 29:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{});\n      case 30:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", \"jetbrains.mps.baseLanguage.structure.HasAnnotation\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.baseLanguage.structure.IStatementListContainer\", \"jetbrains.mps.lang.core.structure.IContainer\", \"jetbrains.mps.baseLanguage.structure.IMethodLike\", \"jetbrains.mps.baseLanguage.structure.TypeAnnotable\", \"jetbrains.mps.lang.traceable.structure.TraceableConcept\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\", \"jetbrains.mps.baseLanguage.structure.ITypeApplicable\"}, new String[]{\"isFinal\", \"isSynchronized\"}, new String[]{});\n      case 31:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseStringOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{});\n      case 32:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\"}, new String[]{}, new String[]{});\n      case 33:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseVariableReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"baseVariableDeclaration\"});\n      case 34:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 35:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 36:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BinaryOperation\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 37:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BitwiseAndExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 38:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BitwiseNotExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 39:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BitwiseOrExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 40:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BitwiseXorExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 41:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BlockStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 42:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BooleanConstant\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 43:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BooleanType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 44:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BreakStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{\"label\"}, new String[]{});\n      case 45:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ByteType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 46:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CastExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 47:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CatchClause\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 48:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CharConstant\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"charConstant\"}, new String[]{});\n      case 49:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CharType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 50:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassConcept\", \"jetbrains.mps.baseLanguage.structure.Classifier\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Classifier\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.lang.traceable.structure.UnitConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"abstractClass\", \"isFinal\", \"isStatic\"}, new String[]{});\n      case 51:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", \"jetbrains.mps.baseLanguage.structure.AbstractCreator\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractCreator\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{\"constructorDeclaration\"});\n      case 52:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Classifier\", \"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", \"jetbrains.mps.baseLanguage.structure.IClassifier\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.HasAnnotation\", \"jetbrains.mps.baseLanguage.structure.IMemberContainer\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", \"jetbrains.mps.baseLanguage.structure.IVisible\", \"jetbrains.mps.lang.core.structure.IContainer\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"nestedName\", \"isDeprecated\", \"nonStatic\"}, new String[]{});\n      case 53:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassifierClassExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"classifier\"});\n      case 54:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassifierMember\", null, true, new String[]{\"jetbrains.mps.baseLanguage.structure.IVisible\", \"jetbrains.mps.baseLanguage.structure.IClassifierMember\"}, new String[]{}, new String[]{});\n      case 55:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IClassifierType\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{\"classifier\"});\n      case 56:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Closure\", \"jetbrains.mps.baseLanguage.structure.ConceptFunction\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ConceptFunction\", \"jetbrains.mps.baseLanguage.structure.Closureoid\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 57:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClosureParameter\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.INamedConcept\", \"jetbrains.mps.lang.core.structure.IResolveInfo\"}, new String[]{}, new String[]{});\n      case 58:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClosureParameterReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"closureParameter\"});\n      case 59:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Closureoid\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 60:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CommentPart\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.ISuppressErrors\"}, new String[]{}, new String[]{});\n      case 61:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CommentedStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 62:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.ILocalVariableElementList\", \"jetbrains.mps.lang.core.structure.ISuppressErrors\"}, new String[]{}, new String[]{});\n      case 63:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ConceptFunction\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IMethodLike\", \"jetbrains.mps.baseLanguage.structure.IStatementListContainer\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 64:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IParameter\"}, new String[]{}, new String[]{});\n      case 65:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\", \"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.lang.core.structure.IResolveInfo\"}, new String[]{\"nestedName\"}, new String[]{});\n      case 66:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{\"constructorDeclaration\"});\n      case 67:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ContextClassifierKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 68:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ContinueStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{\"label\"}, new String[]{});\n      case 69:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation\", \"jetbrains.mps.baseLanguage.structure.PropertyImplementation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PropertyImplementation\"}, new String[]{}, new String[]{});\n      case 70:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DefaultGetAccessor\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 71:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation\", \"jetbrains.mps.baseLanguage.structure.PropertyImplementation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PropertyImplementation\"}, new String[]{}, new String[]{});\n      case 72:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DefaultSetAccessor\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 73:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DimensionExpression\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 74:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DivAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 75:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DivExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 76:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DoWhileStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\"}, new String[]{}, new String[]{});\n      case 77:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DotExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 78:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DoubleType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 79:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ElsifClause\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 80:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumClass\", \"jetbrains.mps.baseLanguage.structure.ClassConcept\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ClassConcept\"}, new String[]{}, new String[]{});\n      case 81:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.HasAnnotation\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{\"constructor\"});\n      case 82:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumConstantReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{\"enumClass\", \"enumConstantDeclaration\"});\n      case 83:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumValueOfExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"enumClass\"});\n      case 84:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumValuesExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"enumClass\"});\n      case 85:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 86:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EscapeOperation\", \"jetbrains.mps.baseLanguage.structure.BaseStringOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseStringOperation\"}, new String[]{}, new String[]{});\n      case 87:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 88:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ExpressionStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.IWrapper\"}, new String[]{}, new String[]{});\n      case 89:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FieldDeclaration\", \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"}, new String[]{\"isVolatile\", \"isTransient\"}, new String[]{});\n      case 90:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{\"fieldDeclaration\"});\n      case 91:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FloatType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 92:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FloatingPointConstant\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 93:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 94:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ForStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"}, new String[]{}, new String[]{});\n      case 95:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ForeachStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"}, new String[]{}, new String[]{});\n      case 96:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.INamedConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 97:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 98:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GetAccessor\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 99:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GreaterThanExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\"}, new String[]{}, new String[]{});\n      case 100:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\"}, new String[]{}, new String[]{});\n      case 101:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.HasAnnotation\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 102:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.HexIntegerLiteral\", \"jetbrains.mps.baseLanguage.structure.IntegerLiteral\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.IntegerLiteral\"}, new String[]{\"value\"}, new String[]{});\n      case 103:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IAnonymousClass\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 104:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", null, true, new String[]{\"jetbrains.mps.lang.core.structure.IDeprecatable\"}, new String[]{\"isDeprecated\"}, new String[]{});\n      case 105:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IClassifier\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 106:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IClassifierMember\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 107:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IClassifierType\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 108:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IContainsStatementList\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 109:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 110:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 111:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IFinalWrapper\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 112:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IGeneric\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 113:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IGenericDeclaration\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 114:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IGenericType\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 115:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IInternalType\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 116:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ILocalDeclaration\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 117:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ILocalReference\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 118:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ILocalVariableElement\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 119:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ILocalVariableElementList\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 120:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IMemberContainer\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 121:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IMethodCall\", null, true, new String[]{\"jetbrains.mps.baseLanguage.structure.TypeDerivable\", \"jetbrains.mps.baseLanguage.structure.TypeAnnotable\"}, new String[]{}, new String[]{\"baseMethodDeclaration\"});\n      case 122:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IMethodLike\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 123:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IOperation\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 124:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IParameter\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 125:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ISkipsReturn\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 126:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IStatementListContainer\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 127:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 128:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IThisExpression\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 129:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ITryCatchStatement\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 130:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ITypeApplicable\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 131:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", null, true, new String[]{\"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{}, new String[]{});\n      case 132:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IVariableAssignment\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 133:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IVariableDeclaration\", null, true, new String[]{\"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{}, new String[]{});\n      case 134:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IVariableReference\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 135:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IVisible\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 136:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IWillBeClassifier\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 137:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IYetUnresolved\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 138:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IfStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IContainsStatementList\"}, new String[]{\"forceOneLine\", \"forceMultiLine\"}, new String[]{});\n      case 139:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue\", \"jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue\"}, new String[]{}, new String[]{});\n      case 140:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 141:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.InstanceInitializer\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.IStatementListContainer\"}, new String[]{}, new String[]{});\n      case 142:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{\"instanceMethodDeclaration\"});\n      case 143:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IGenericDeclaration\", \"jetbrains.mps.baseLanguage.structure.ITypeApplicable\"}, new String[]{\"isAbstract\"}, new String[]{});\n      case 144:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.InstanceOfExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 145:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IntegerConstant\", \"jetbrains.mps.baseLanguage.structure.IntegerLiteral\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.IntegerLiteral\"}, new String[]{\"value\"}, new String[]{});\n      case 146:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IntegerLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 147:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IntegerType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 148:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Interface\", \"jetbrains.mps.baseLanguage.structure.Classifier\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Classifier\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.lang.traceable.structure.UnitConcept\"}, new String[]{}, new String[]{});\n      case 149:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IsEmptyOperation\", \"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\"}, new String[]{}, new String[]{});\n      case 150:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation\", \"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\"}, new String[]{}, new String[]{});\n      case 151:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 152:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LessThanExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\"}, new String[]{}, new String[]{});\n      case 153:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\"}, new String[]{}, new String[]{});\n      case 154:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"fieldDeclaration\"});\n      case 155:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall\", \"jetbrains.mps.baseLanguage.structure.LocalMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.LocalMethodCall\"}, new String[]{}, new String[]{\"instanceMethodDeclaration\"});\n      case 156:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalMethodCall\", \"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\"}, new String[]{}, new String[]{\"method\"});\n      case 157:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalPropertyReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"property\"});\n      case 158:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"staticFieldDeclaration\"});\n      case 159:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall\", \"jetbrains.mps.baseLanguage.structure.LocalMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.LocalMethodCall\"}, new String[]{}, new String[]{\"staticMethodDeclaration\"});\n      case 160:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalToMethodKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 161:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IVariableAssignment\", \"jetbrains.mps.baseLanguage.structure.IVariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.ILocalDeclaration\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 162:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.IWrapper\"}, new String[]{}, new String[]{});\n      case 163:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalVariableReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"localVariableDeclaration\"});\n      case 164:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LongLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 165:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LongType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 166:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LoopLabel\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.LocalToMethodKind\", \"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{}, new String[]{});\n      case 167:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LoopLabelReference\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{\"loopLabel\"});\n      case 168:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LowerBoundType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{});\n      case 169:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\"}, new String[]{}, new String[]{});\n      case 170:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 171:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MinusExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 172:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MulAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 173:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MulExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 174:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NPEEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 175:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 176:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NotEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 177:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NotExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 178:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 179:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NullType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 180:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Number\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 181:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 182:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.OrAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 183:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.OrExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 184:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\", \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IVariableAssignment\"}, new String[]{}, new String[]{});\n      case 185:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ParameterReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"parameterDeclaration\"});\n      case 186:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 187:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"}, new String[]{}, new String[]{});\n      case 188:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 189:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PlusExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 190:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 191:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 192:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 193:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 194:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 195:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrimitiveType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 196:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrivateVisibility\", \"jetbrains.mps.baseLanguage.structure.Visibility\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Visibility\"}, new String[]{}, new String[]{});\n      case 197:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Property\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{\"propertyName\"}, new String[]{});\n      case 198:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PropertyImplementation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 199:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PropertyReference\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{\"property\"});\n      case 200:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ProtectedVisibility\", \"jetbrains.mps.baseLanguage.structure.Visibility\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Visibility\"}, new String[]{}, new String[]{});\n      case 201:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PublicVisibility\", \"jetbrains.mps.baseLanguage.structure.Visibility\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Visibility\"}, new String[]{}, new String[]{});\n      case 202:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.RemAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 203:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.RemExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 204:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.RemarkStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{\"value\"}, new String[]{});\n      case 205:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ReturnStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.TypeDerivable\"}, new String[]{}, new String[]{});\n      case 206:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 207:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SetAccessor\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 208:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ShiftLeftExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 209:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ShiftRightExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 210:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 211:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ShortType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 212:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SingleLineComment\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 213:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.ILocalVariableElement\", \"jetbrains.mps.lang.traceable.structure.TraceableConcept\", \"jetbrains.mps.lang.core.structure.ICanSuppressErrors\"}, new String[]{}, new String[]{});\n      case 214:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StatementCommentPart\", \"jetbrains.mps.baseLanguage.structure.CommentPart\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.CommentPart\"}, new String[]{}, new String[]{});\n      case 215:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StatementList\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.IContainer\", \"jetbrains.mps.baseLanguage.structure.ILocalVariableElementList\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 216:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\", \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.StaticKind\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"}, new String[]{}, new String[]{});\n      case 217:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticFieldReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"classifier\", \"staticFieldDeclaration\"});\n      case 218:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticInitializer\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 219:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 220:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", \"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\"}, new String[]{}, new String[]{\"classConcept\", \"staticMethodDeclaration\"});\n      case 221:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.StaticKind\", \"jetbrains.mps.lang.core.structure.IResolveInfo\"}, new String[]{}, new String[]{});\n      case 222:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\", \"jetbrains.mps.baseLanguage.structure.BaseStringOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseStringOperation\"}, new String[]{}, new String[]{});\n      case 223:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 224:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StringToken\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{\"value\"}, new String[]{});\n      case 225:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StringType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 226:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", \"jetbrains.mps.baseLanguage.structure.StatementList\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.StatementList\"}, new String[]{}, new String[]{});\n      case 227:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SubstringExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 228:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation\", \"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\"}, new String[]{}, new String[]{});\n      case 229:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SuperConstructorKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 230:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SuperMethodCall\", \"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\"}, new String[]{}, new String[]{\"instanceMethodDeclaration\"});\n      case 231:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SuperMethodKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 232:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SwitchCase\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 233:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SwitchStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"label\"}, new String[]{});\n      case 234:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SynchronizedStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 235:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 236:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TextCommentPart\", \"jetbrains.mps.baseLanguage.structure.CommentPart\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.CommentPart\"}, new String[]{\"text\"}, new String[]{});\n      case 237:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation\", \"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\"}, new String[]{}, new String[]{});\n      case 238:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ThisConstructorKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 239:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ThisExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IThisExpression\"}, new String[]{}, new String[]{\"classConcept\"});\n      case 240:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ThrowStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 241:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TrimOperation\", \"jetbrains.mps.baseLanguage.structure.BaseStringOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseStringOperation\"}, new String[]{\"trimKind\"}, new String[]{});\n      case 242:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TryCatchStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IContainsStatementList\", \"jetbrains.mps.baseLanguage.structure.ITryCatchStatement\"}, new String[]{}, new String[]{});\n      case 243:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TryStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IContainsStatementList\", \"jetbrains.mps.baseLanguage.structure.ITryCatchStatement\"}, new String[]{}, new String[]{});\n      case 244:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.IType\"}, new String[]{}, new String[]{});\n      case 245:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TypeAnnotable\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 246:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TypeDerivable\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 247:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IGeneric\"}, new String[]{\"extends\"}, new String[]{});\n      case 248:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TypeVariableReference\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{\"typeVariableDeclaration\"});\n      case 249:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnaryMinus\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 250:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UndefinedType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 251:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownConsCall\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{\"isSuper\"}, new String[]{});\n      case 252:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownDotCall\", \"jetbrains.mps.baseLanguage.structure.UnknownNameRef\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.UnknownNameRef\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{\"callee\"}, new String[]{});\n      case 253:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownLocalCall\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{\"callee\"}, new String[]{});\n      case 254:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownNameRef\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{}, new String[]{});\n      case 255:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownNew\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{\"className\"}, new String[]{});\n      case 256:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnresolvedNameReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"resolveName\"}, new String[]{});\n      case 257:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 258:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UpperBoundType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{});\n      case 259:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UsingStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 260:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ValueParameter\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 261:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VarType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 262:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VariableArityType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 263:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.HasAnnotation\", \"jetbrains.mps.baseLanguage.structure.TypeDerivable\", \"jetbrains.mps.baseLanguage.structure.TypeAnnotable\", \"jetbrains.mps.baseLanguage.structure.IVariableDeclaration\", \"jetbrains.mps.lang.core.structure.IResolveInfo\"}, new String[]{\"isFinal\"}, new String[]{});\n      case 264:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VariableReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.TypeAnnotable\", \"jetbrains.mps.baseLanguage.structure.IVariableReference\", \"jetbrains.mps.baseLanguage.structure.ILocalReference\"}, new String[]{}, new String[]{\"variableDeclaration\"});\n      case 265:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Visibility\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 266:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VoidType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 267:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.WhileStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\"}, new String[]{}, new String[]{});\n      case 268:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.WildCardType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 269:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.XorAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      default:\n        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);\n    }\n  }","id":12360,"modified_method":"public ConceptDescriptor getDescriptor(String conceptFqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {\n      case 0:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractClassifierReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"classifier\"});\n      case 1:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractCreator\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 2:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\"}, new String[]{}, new String[]{});\n      case 3:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.IContainer\", \"jetbrains.mps.baseLanguage.structure.IContainsStatementList\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"label\"}, new String[]{});\n      case 4:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{});\n      case 5:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 6:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable\", \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\"}, new String[]{}, new String[]{});\n      case 7:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AndAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 8:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AndExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 9:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Annotation\", \"jetbrains.mps.baseLanguage.structure.Interface\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Interface\"}, new String[]{}, new String[]{});\n      case 10:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnnotationInstance\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{\"annotation\"});\n      case 11:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 12:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{\"key\"});\n      case 13:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"}, new String[]{}, new String[]{});\n      case 14:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnonymousClass\", \"jetbrains.mps.baseLanguage.structure.ClassConcept\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ClassConcept\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IAnonymousClass\", \"jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter\", \"jetbrains.mps.lang.traceable.structure.UnitConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{\"classifier\", \"constructorDeclaration\"});\n      case 15:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator\", \"jetbrains.mps.baseLanguage.structure.AbstractCreator\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractCreator\"}, new String[]{}, new String[]{});\n      case 16:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayAccessExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 17:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayClassExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 18:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayCloneOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{});\n      case 19:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayCreator\", \"jetbrains.mps.baseLanguage.structure.AbstractCreator\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractCreator\"}, new String[]{}, new String[]{});\n      case 20:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer\", \"jetbrains.mps.baseLanguage.structure.AbstractCreator\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractCreator\"}, new String[]{}, new String[]{});\n      case 21:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayLengthOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{});\n      case 22:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 23:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ArrayType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{});\n      case 24:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AsExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 25:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AssertStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 26:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.AssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.TypeDerivable\"}, new String[]{}, new String[]{});\n      case 27:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BLBottomType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 28:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 29:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{});\n      case 30:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", \"jetbrains.mps.baseLanguage.structure.HasAnnotation\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.baseLanguage.structure.IStatementListContainer\", \"jetbrains.mps.lang.core.structure.IContainer\", \"jetbrains.mps.baseLanguage.structure.IMethodLike\", \"jetbrains.mps.baseLanguage.structure.TypeAnnotable\", \"jetbrains.mps.lang.traceable.structure.TraceableConcept\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\", \"jetbrains.mps.baseLanguage.structure.ITypeApplicable\"}, new String[]{\"isFinal\", \"isSynchronized\"}, new String[]{});\n      case 31:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseStringOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{});\n      case 32:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\"}, new String[]{}, new String[]{});\n      case 33:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BaseVariableReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"baseVariableDeclaration\"});\n      case 34:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 35:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 36:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BinaryOperation\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 37:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BitwiseAndExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 38:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BitwiseNotExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 39:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BitwiseOrExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 40:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BitwiseXorExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 41:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BlockStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 42:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BooleanConstant\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 43:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BooleanType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 44:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.BreakStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{\"label\"}, new String[]{});\n      case 45:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ByteType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 46:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CastExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 47:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CatchClause\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 48:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CharConstant\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"charConstant\"}, new String[]{});\n      case 49:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CharType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 50:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassConcept\", \"jetbrains.mps.baseLanguage.structure.Classifier\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Classifier\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.lang.traceable.structure.UnitConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"abstractClass\", \"isFinal\", \"isStatic\"}, new String[]{});\n      case 51:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", \"jetbrains.mps.baseLanguage.structure.AbstractCreator\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractCreator\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{\"constructorDeclaration\"});\n      case 52:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Classifier\", \"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", \"jetbrains.mps.baseLanguage.structure.IClassifier\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.HasAnnotation\", \"jetbrains.mps.baseLanguage.structure.IMemberContainer\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", \"jetbrains.mps.baseLanguage.structure.IVisible\", \"jetbrains.mps.lang.core.structure.IContainer\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"nestedName\", \"isDeprecated\", \"nonStatic\"}, new String[]{});\n      case 53:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassifierClassExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"classifier\"});\n      case 54:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassifierMember\", null, true, new String[]{\"jetbrains.mps.baseLanguage.structure.IVisible\", \"jetbrains.mps.baseLanguage.structure.IClassifierMember\"}, new String[]{}, new String[]{});\n      case 55:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IClassifierType\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{\"classifier\"});\n      case 56:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Closure\", \"jetbrains.mps.baseLanguage.structure.ConceptFunction\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ConceptFunction\", \"jetbrains.mps.baseLanguage.structure.Closureoid\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 57:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClosureParameter\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.INamedConcept\", \"jetbrains.mps.lang.core.structure.IResolveInfo\"}, new String[]{}, new String[]{});\n      case 58:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ClosureParameterReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"closureParameter\"});\n      case 59:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Closureoid\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 60:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CommentPart\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.ISuppressErrors\"}, new String[]{}, new String[]{});\n      case 61:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CommentedStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 62:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.ILocalVariableElementList\", \"jetbrains.mps.lang.core.structure.ISuppressErrors\"}, new String[]{}, new String[]{});\n      case 63:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ConceptFunction\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IMethodLike\", \"jetbrains.mps.baseLanguage.structure.IStatementListContainer\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 64:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IParameter\"}, new String[]{}, new String[]{});\n      case 65:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\", \"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.lang.core.structure.IResolveInfo\"}, new String[]{\"nestedName\"}, new String[]{});\n      case 66:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{\"constructorDeclaration\"});\n      case 67:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ContextClassifierKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 68:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ContinueStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{\"label\"}, new String[]{});\n      case 69:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation\", \"jetbrains.mps.baseLanguage.structure.PropertyImplementation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PropertyImplementation\"}, new String[]{}, new String[]{});\n      case 70:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DefaultGetAccessor\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 71:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation\", \"jetbrains.mps.baseLanguage.structure.PropertyImplementation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PropertyImplementation\"}, new String[]{}, new String[]{});\n      case 72:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DefaultSetAccessor\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 73:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DimensionExpression\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 74:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DivAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 75:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DivExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 76:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DoWhileStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\"}, new String[]{}, new String[]{});\n      case 77:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DotExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 78:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.DoubleType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 79:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ElsifClause\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 80:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumClass\", \"jetbrains.mps.baseLanguage.structure.ClassConcept\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ClassConcept\"}, new String[]{}, new String[]{});\n      case 81:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.HasAnnotation\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{\"constructor\"});\n      case 82:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumConstantReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{\"enumClass\", \"enumConstantDeclaration\"});\n      case 83:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumValueOfExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"enumClass\"});\n      case 84:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EnumValuesExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"enumClass\"});\n      case 85:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 86:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.EscapeOperation\", \"jetbrains.mps.baseLanguage.structure.BaseStringOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseStringOperation\"}, new String[]{}, new String[]{});\n      case 87:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 88:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ExpressionStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.IWrapper\"}, new String[]{}, new String[]{});\n      case 89:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FieldDeclaration\", \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"}, new String[]{\"isVolatile\", \"isTransient\"}, new String[]{});\n      case 90:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{\"fieldDeclaration\"});\n      case 91:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FloatType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 92:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FloatingPointConstant\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 93:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 94:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ForStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"}, new String[]{}, new String[]{});\n      case 95:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ForeachStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractForStatement\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\"}, new String[]{}, new String[]{});\n      case 96:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GenericDeclaration\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.INamedConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 97:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 98:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GetAccessor\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 99:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GreaterThanExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\"}, new String[]{}, new String[]{});\n      case 100:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\"}, new String[]{}, new String[]{});\n      case 101:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.HasAnnotation\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 102:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.HexIntegerLiteral\", \"jetbrains.mps.baseLanguage.structure.IntegerLiteral\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.IntegerLiteral\"}, new String[]{\"value\"}, new String[]{});\n      case 103:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IAnonymousClass\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 104:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", null, true, new String[]{\"jetbrains.mps.lang.core.structure.IDeprecatable\"}, new String[]{\"isDeprecated\"}, new String[]{});\n      case 105:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IClassifier\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 106:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IClassifierMember\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 107:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IClassifierType\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 108:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IContainsStatementList\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 109:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 110:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 111:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IFinalWrapper\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 112:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IGeneric\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 113:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IGenericDeclaration\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 114:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IGenericType\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 115:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IInternalType\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 116:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ILocalDeclaration\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 117:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ILocalReference\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 118:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ILocalVariableElement\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 119:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ILocalVariableElementList\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 120:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IMemberContainer\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 121:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IMethodCall\", null, true, new String[]{\"jetbrains.mps.baseLanguage.structure.TypeDerivable\", \"jetbrains.mps.baseLanguage.structure.TypeAnnotable\"}, new String[]{}, new String[]{\"baseMethodDeclaration\"});\n      case 122:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IMethodLike\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 123:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IOperation\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 124:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IParameter\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 125:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ISkipsReturn\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 126:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IStatementListContainer\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 127:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 128:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IThisExpression\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 129:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ITryCatchStatement\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 130:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ITypeApplicable\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 131:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", null, true, new String[]{\"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{}, new String[]{});\n      case 132:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IVariableAssignment\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 133:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IVariableDeclaration\", null, true, new String[]{\"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{}, new String[]{});\n      case 134:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IVariableReference\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 135:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IVisible\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 136:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IWillBeClassifier\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 137:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IYetUnresolved\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 138:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IfStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IContainsStatementList\"}, new String[]{\"forceOneLine\", \"forceMultiLine\"}, new String[]{});\n      case 139:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue\", \"jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue\"}, new String[]{}, new String[]{});\n      case 140:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 141:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.InstanceInitializer\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.IStatementListContainer\"}, new String[]{}, new String[]{});\n      case 142:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\"}, new String[]{}, new String[]{\"instanceMethodDeclaration\"});\n      case 143:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IGenericDeclaration\", \"jetbrains.mps.baseLanguage.structure.ITypeApplicable\"}, new String[]{\"isAbstract\"}, new String[]{});\n      case 144:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.InstanceOfExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 145:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IntegerConstant\", \"jetbrains.mps.baseLanguage.structure.IntegerLiteral\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.IntegerLiteral\"}, new String[]{\"value\"}, new String[]{});\n      case 146:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IntegerLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 147:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IntegerType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 148:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Interface\", \"jetbrains.mps.baseLanguage.structure.Classifier\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Classifier\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.lang.traceable.structure.UnitConcept\"}, new String[]{}, new String[]{});\n      case 149:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IsEmptyOperation\", \"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\"}, new String[]{}, new String[]{});\n      case 150:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation\", \"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\"}, new String[]{}, new String[]{});\n      case 151:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 152:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LessThanExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\"}, new String[]{}, new String[]{});\n      case 153:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation\"}, new String[]{}, new String[]{});\n      case 154:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"fieldDeclaration\"});\n      case 155:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall\", \"jetbrains.mps.baseLanguage.structure.LocalMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.LocalMethodCall\"}, new String[]{}, new String[]{\"instanceMethodDeclaration\"});\n      case 156:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalMethodCall\", \"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\"}, new String[]{}, new String[]{\"method\"});\n      case 157:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalPropertyReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{\"property\"});\n      case 158:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"staticFieldDeclaration\"});\n      case 159:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall\", \"jetbrains.mps.baseLanguage.structure.LocalMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.LocalMethodCall\"}, new String[]{}, new String[]{\"staticMethodDeclaration\"});\n      case 160:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalToMethodKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 161:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IVariableAssignment\", \"jetbrains.mps.baseLanguage.structure.IVariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.ILocalDeclaration\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 162:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.IWrapper\"}, new String[]{}, new String[]{});\n      case 163:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LocalVariableReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"localVariableDeclaration\"});\n      case 164:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LongLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 165:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LongType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 166:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LoopLabel\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.LocalToMethodKind\", \"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{}, new String[]{});\n      case 167:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LoopLabelReference\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{\"loopLabel\"});\n      case 168:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.LowerBoundType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{});\n      case 169:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\"}, new String[]{}, new String[]{});\n      case 170:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 171:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MinusExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 172:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MulAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 173:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.MulExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 174:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NPEEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 175:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 176:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NotEqualsExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 177:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NotExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 178:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 179:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.NullType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 180:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Number\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 181:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 182:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.OrAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 183:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.OrExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 184:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\", \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IVariableAssignment\"}, new String[]{}, new String[]{});\n      case 185:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ParameterReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"parameterDeclaration\"});\n      case 186:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 187:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PlaceholderMember\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\"}, new String[]{}, new String[]{});\n      case 188:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"}, new String[]{}, new String[]{});\n      case 189:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 190:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PlusExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 191:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 192:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 193:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 194:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 195:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 196:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrimitiveType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 197:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PrivateVisibility\", \"jetbrains.mps.baseLanguage.structure.Visibility\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Visibility\"}, new String[]{}, new String[]{});\n      case 198:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Property\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{\"propertyName\"}, new String[]{});\n      case 199:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PropertyImplementation\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 200:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PropertyReference\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IOperation\"}, new String[]{}, new String[]{\"property\"});\n      case 201:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ProtectedVisibility\", \"jetbrains.mps.baseLanguage.structure.Visibility\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Visibility\"}, new String[]{}, new String[]{});\n      case 202:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.PublicVisibility\", \"jetbrains.mps.baseLanguage.structure.Visibility\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Visibility\"}, new String[]{}, new String[]{});\n      case 203:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.RemAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 204:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.RemExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryOperation\"}, new String[]{}, new String[]{});\n      case 205:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.RemarkStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{\"value\"}, new String[]{});\n      case 206:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ReturnStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.TypeDerivable\"}, new String[]{}, new String[]{});\n      case 207:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 208:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SetAccessor\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 209:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ShiftLeftExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 210:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ShiftRightExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 211:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression\", \"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation\"}, new String[]{}, new String[]{});\n      case 212:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ShortType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 213:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SingleLineComment\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 214:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.ILocalVariableElement\", \"jetbrains.mps.lang.traceable.structure.TraceableConcept\", \"jetbrains.mps.lang.core.structure.ICanSuppressErrors\"}, new String[]{}, new String[]{});\n      case 215:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StatementCommentPart\", \"jetbrains.mps.baseLanguage.structure.CommentPart\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.CommentPart\"}, new String[]{}, new String[]{});\n      case 216:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StatementList\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.IContainer\", \"jetbrains.mps.baseLanguage.structure.ILocalVariableElementList\", \"jetbrains.mps.lang.traceable.structure.ScopeConcept\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{}, new String[]{});\n      case 217:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\", \"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.StaticKind\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IBLDeprecatable\", \"jetbrains.mps.lang.traceable.structure.TraceableConcept\"}, new String[]{}, new String[]{});\n      case 218:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticFieldReference\", \"jetbrains.mps.baseLanguage.structure.VariableReference\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.VariableReference\"}, new String[]{}, new String[]{\"classifier\", \"staticFieldDeclaration\"});\n      case 219:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticInitializer\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 220:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 221:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", \"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\"}, new String[]{}, new String[]{\"classConcept\", \"staticMethodDeclaration\"});\n      case 222:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.MethodDeclaration\", \"jetbrains.mps.baseLanguage.structure.ClassifierMember\", \"jetbrains.mps.baseLanguage.structure.StaticKind\", \"jetbrains.mps.lang.core.structure.IResolveInfo\"}, new String[]{}, new String[]{});\n      case 223:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StringBooleanOperation\", \"jetbrains.mps.baseLanguage.structure.BaseStringOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseStringOperation\"}, new String[]{}, new String[]{});\n      case 224:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"value\"}, new String[]{});\n      case 225:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StringToken\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{\"value\"}, new String[]{});\n      case 226:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StringType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 227:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.StubStatementList\", \"jetbrains.mps.baseLanguage.structure.StatementList\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.StatementList\"}, new String[]{}, new String[]{});\n      case 228:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SubstringExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 229:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation\", \"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\"}, new String[]{}, new String[]{});\n      case 230:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SuperConstructorKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 231:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SuperMethodCall\", \"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\"}, new String[]{}, new String[]{\"instanceMethodDeclaration\"});\n      case 232:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SuperMethodKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 233:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SwitchCase\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 234:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SwitchStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"label\"}, new String[]{});\n      case 235:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.SynchronizedStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 236:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 237:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TextCommentPart\", \"jetbrains.mps.baseLanguage.structure.CommentPart\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.CommentPart\"}, new String[]{\"text\"}, new String[]{});\n      case 238:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation\", \"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\"}, new String[]{}, new String[]{});\n      case 239:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ThisConstructorKind\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 240:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ThisExpression\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IThisExpression\"}, new String[]{}, new String[]{\"classConcept\"});\n      case 241:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ThrowStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 242:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TrimOperation\", \"jetbrains.mps.baseLanguage.structure.BaseStringOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseStringOperation\"}, new String[]{\"trimKind\"}, new String[]{});\n      case 243:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TryCatchStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IContainsStatementList\", \"jetbrains.mps.baseLanguage.structure.ITryCatchStatement\"}, new String[]{}, new String[]{});\n      case 244:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TryStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IContainsStatementList\", \"jetbrains.mps.baseLanguage.structure.ITryCatchStatement\"}, new String[]{}, new String[]{});\n      case 245:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.lang.core.structure.IType\"}, new String[]{}, new String[]{});\n      case 246:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TypeAnnotable\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 247:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TypeDerivable\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 248:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\", \"jetbrains.mps.baseLanguage.structure.IValidIdentifier\", \"jetbrains.mps.lang.core.structure.IResolveInfo\", \"jetbrains.mps.baseLanguage.structure.IGeneric\"}, new String[]{\"extends\"}, new String[]{});\n      case 249:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.TypeVariableReference\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{\"typeVariableDeclaration\"});\n      case 250:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnaryMinus\", \"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\"}, new String[]{}, new String[]{});\n      case 251:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UndefinedType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 252:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownConsCall\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{\"isSuper\"}, new String[]{});\n      case 253:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownDotCall\", \"jetbrains.mps.baseLanguage.structure.UnknownNameRef\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.UnknownNameRef\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{\"callee\"}, new String[]{});\n      case 254:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownLocalCall\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{\"callee\"}, new String[]{});\n      case 255:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownNameRef\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{}, new String[]{});\n      case 256:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnknownNew\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.IMethodCall\", \"jetbrains.mps.baseLanguage.structure.IYetUnresolved\"}, new String[]{\"className\"}, new String[]{});\n      case 257:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnresolvedNameReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{\"resolveName\"}, new String[]{});\n      case 258:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      case 259:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UpperBoundType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\", \"jetbrains.mps.baseLanguage.structure.IGenericType\"}, new String[]{}, new String[]{});\n      case 260:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.UsingStatement\", \"jetbrains.mps.baseLanguage.structure.Statement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Statement\"}, new String[]{}, new String[]{});\n      case 261:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.ValueParameter\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\"}, new String[]{}, new String[]{});\n      case 262:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VarType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 263:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VariableArityType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 264:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration\", \"jetbrains.mps.baseLanguage.structure.HasAnnotation\", \"jetbrains.mps.baseLanguage.structure.TypeDerivable\", \"jetbrains.mps.baseLanguage.structure.TypeAnnotable\", \"jetbrains.mps.baseLanguage.structure.IVariableDeclaration\", \"jetbrains.mps.lang.core.structure.IResolveInfo\"}, new String[]{\"isFinal\"}, new String[]{});\n      case 265:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VariableReference\", \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Expression\", \"jetbrains.mps.baseLanguage.structure.TypeAnnotable\", \"jetbrains.mps.baseLanguage.structure.IVariableReference\", \"jetbrains.mps.baseLanguage.structure.ILocalReference\"}, new String[]{}, new String[]{\"variableDeclaration\"});\n      case 266:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.Visibility\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 267:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.VoidType\", \"jetbrains.mps.baseLanguage.structure.PrimitiveType\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.PrimitiveType\"}, new String[]{}, new String[]{});\n      case 268:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.WhileStatement\", \"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement\"}, new String[]{}, new String[]{});\n      case 269:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.WildCardType\", \"jetbrains.mps.baseLanguage.structure.Type\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.Type\"}, new String[]{}, new String[]{});\n      case 270:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.baseLanguage.structure.XorAssignmentExpression\", \"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\", false, new String[]{\"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression\"}, new String[]{}, new String[]{});\n      default:\n        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);\n    }\n  }","commit_id":"d0d006c05b8dd418fd3ff35f0d6ebd8e1eb36f4e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private HttpClientParams buildParams(final HttpCollectionSet collectionSet) {\n        HttpClientParams params = new HttpClientParams(DefaultHttpParams.getDefaultParams());\n        params.setVersion(computeVersion(collectionSet.getUriDef()));\n        params.setSoTimeout(Integer.parseInt(ParameterMap.getKeyedString(collectionSet.getParameters(), \"timeout\", DEFAULT_SO_TIMEOUT)));\n        \n        //review the httpclient code, looks like virtual host is checked for null\n        //and if true, sets Host to the connection's host property\n        params.setVirtualHost(collectionSet.getUriDef().getUrl().getVirtualHost());\n        Integer retryCount = ParameterMap.getKeyedInteger(collectionSet.getParameters(), \"retries\", DEFAULT_RETRY_COUNT);\n        params.setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(retryCount, false));\n        \n        params.setParameter(HttpMethodParams.USER_AGENT, determineUserAgent(collectionSet, params));\n\n\n        return params;\n    }","id":12361,"modified_method":"private HttpClientParams buildParams(final HttpCollectionSet collectionSet) {\n        HttpClientParams params = new HttpClientParams(DefaultHttpParams.getDefaultParams());\n        params.setVersion(computeVersion(collectionSet.getUriDef()));\n        params.setSoTimeout(Integer.parseInt(ParameterMap.getKeyedString(collectionSet.getParameters(), \"timeout\", DEFAULT_SO_TIMEOUT)));\n        \n        //review the httpclient code, looks like virtual host is checked for null\n        //and if true, sets Host to the connection's host property\n        params.setVirtualHost(collectionSet.getUriDef().getUrl().getVirtualHost());\n        \n        String key = \"retry\";\n        if (collectionSet.getParameters().containsKey(\"retries\")) {\n            key = \"retries\";\n        }\n        Integer retryCount = ParameterMap.getKeyedInteger(collectionSet.getParameters(), key, DEFAULT_RETRY_COUNT);\n        params.setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(retryCount, false));\n        \n        params.setParameter(HttpMethodParams.USER_AGENT, determineUserAgent(collectionSet, params));\n\n\n        return params;\n    }","commit_id":"bd5b1893bd10d8c89a7dbc7307166b9b297a5d18","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private HttpClientParams buildParams(final HttpCollectionSet collectionSet) {\n        HttpClientParams params = new HttpClientParams(DefaultHttpParams.getDefaultParams());\n        params.setVersion(computeVersion(collectionSet.getUriDef()));\n        params.setSoTimeout(Integer.parseInt(ParameterMap.getKeyedString(collectionSet.getParameters(), \"timeout\", DEFAULT_SO_TIMEOUT)));\n        \n        //review the httpclient code, looks like virtual host is checked for null\n        //and if true, sets Host to the connection's host property\n        params.setVirtualHost(collectionSet.getUriDef().getUrl().getVirtualHost());\n        Integer retryCount = ParameterMap.getKeyedInteger(collectionSet.getParameters(), \"retries\", DEFAULT_RETRY_COUNT);\n        params.setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(retryCount, false));\n        \n        params.setParameter(HttpMethodParams.USER_AGENT, determineUserAgent(collectionSet, params));\n\n\n        return params;\n    }","id":12362,"modified_method":"private HttpClientParams buildParams(final HttpCollectionSet collectionSet) {\n        HttpClientParams params = new HttpClientParams(DefaultHttpParams.getDefaultParams());\n        params.setVersion(computeVersion(collectionSet.getUriDef()));\n        params.setSoTimeout(Integer.parseInt(ParameterMap.getKeyedString(collectionSet.getParameters(), \"timeout\", DEFAULT_SO_TIMEOUT)));\n        \n        //review the httpclient code, looks like virtual host is checked for null\n        //and if true, sets Host to the connection's host property\n        params.setVirtualHost(collectionSet.getUriDef().getUrl().getVirtualHost());\n        \n        String key = \"retry\";\n        if (collectionSet.getParameters().containsKey(\"retries\")) {\n            key = \"retries\";\n        }\n        Integer retryCount = ParameterMap.getKeyedInteger(collectionSet.getParameters(), key, DEFAULT_RETRY_COUNT);\n        params.setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(retryCount, false));\n        \n        params.setParameter(HttpMethodParams.USER_AGENT, determineUserAgent(collectionSet, params));\n\n\n        return params;\n    }","commit_id":"73eca7a3c6f99d8ca37a5e3d41fc78f70bb60a01","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private HttpClientParams buildParams(final HttpCollectionSet collectionSet) {\n        HttpClientParams params = new HttpClientParams(DefaultHttpParams.getDefaultParams());\n        params.setVersion(computeVersion(collectionSet.getUriDef()));\n        params.setSoTimeout(Integer.parseInt(ParameterMap.getKeyedString(collectionSet.getParameters(), \"timeout\", DEFAULT_SO_TIMEOUT)));\n        \n        //review the httpclient code, looks like virtual host is checked for null\n        //and if true, sets Host to the connection's host property\n        params.setVirtualHost(collectionSet.getUriDef().getUrl().getVirtualHost());\n        Integer retryCount = ParameterMap.getKeyedInteger(collectionSet.getParameters(), \"retries\", DEFAULT_RETRY_COUNT);\n        params.setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(retryCount, false));\n        \n        params.setParameter(HttpMethodParams.USER_AGENT, determineUserAgent(collectionSet, params));\n\n\n        return params;\n    }","id":12363,"modified_method":"private HttpClientParams buildParams(final HttpCollectionSet collectionSet) {\n        HttpClientParams params = new HttpClientParams(DefaultHttpParams.getDefaultParams());\n        params.setVersion(computeVersion(collectionSet.getUriDef()));\n        params.setSoTimeout(Integer.parseInt(ParameterMap.getKeyedString(collectionSet.getParameters(), \"timeout\", DEFAULT_SO_TIMEOUT)));\n        \n        //review the httpclient code, looks like virtual host is checked for null\n        //and if true, sets Host to the connection's host property\n        params.setVirtualHost(collectionSet.getUriDef().getUrl().getVirtualHost());\n        \n        String key = \"retry\";\n        if (collectionSet.getParameters().containsKey(\"retries\")) {\n            key = \"retries\";\n        }\n        Integer retryCount = ParameterMap.getKeyedInteger(collectionSet.getParameters(), key, DEFAULT_RETRY_COUNT);\n        params.setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(retryCount, false));\n        \n        params.setParameter(HttpMethodParams.USER_AGENT, determineUserAgent(collectionSet, params));\n\n\n        return params;\n    }","commit_id":"f0a828981ecdc0d23a2fab0c40972871d3333d4b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Inject\n    public ShardSlowLogSearchService(ShardId shardId, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService) {\n        super(shardId, indexSettings);\n\n        this.reformat = componentSettings.getAsBoolean(\"reformat\", true);\n\n        this.queryWarnThreshold = componentSettings.getAsTime(\"threshold.query.warn\", TimeValue.timeValueNanos(-1)).nanos();\n        this.queryInfoThreshold = componentSettings.getAsTime(\"threshold.query.info\", TimeValue.timeValueNanos(-1)).nanos();\n        this.queryDebugThreshold = componentSettings.getAsTime(\"threshold.query.debug\", TimeValue.timeValueNanos(-1)).nanos();\n        this.queryTraceThreshold = componentSettings.getAsTime(\"threshold.query.trace\", TimeValue.timeValueNanos(-1)).nanos();\n\n        this.fetchWarnThreshold = componentSettings.getAsTime(\"threshold.fetch.warn\", TimeValue.timeValueNanos(-1)).nanos();\n        this.fetchInfoThreshold = componentSettings.getAsTime(\"threshold.fetch.info\", TimeValue.timeValueNanos(-1)).nanos();\n        this.fetchDebugThreshold = componentSettings.getAsTime(\"threshold.fetch.debug\", TimeValue.timeValueNanos(-1)).nanos();\n        this.fetchTraceThreshold = componentSettings.getAsTime(\"threshold.fetch.trace\", TimeValue.timeValueNanos(-1)).nanos();\n\n        this.level = componentSettings.get(\"level\", \"TRACE\").toUpperCase(Locale.ROOT);\n\n        this.queryLogger = Loggers.getLogger(logger, \".query\");\n        this.fetchLogger = Loggers.getLogger(logger, \".fetch\");\n\n        queryLogger.setLevel(level);\n        fetchLogger.setLevel(level);\n\n        indexSettingsService.addListener(new ApplySettings());\n    }","id":12364,"modified_method":"@Inject\n    public ShardSlowLogSearchService(ShardId shardId, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService) {\n        super(shardId, indexSettings);\n\n        this.reformat = componentSettings.getAsBoolean(\"reformat\", true);\n\n        this.queryWarnThreshold = parseTimeSetting(\"threshold.query.warn\", -1);\n        this.queryInfoThreshold = parseTimeSetting(\"threshold.query.info\", -1);\n        this.queryDebugThreshold = parseTimeSetting(\"threshold.query.debug\", -1);\n        this.queryTraceThreshold = parseTimeSetting(\"threshold.query.trace\", -1);\n\n        this.fetchWarnThreshold = parseTimeSetting(\"threshold.fetch.warn\", -1);\n        this.fetchInfoThreshold = parseTimeSetting(\"threshold.fetch.info\", -1);\n        this.fetchDebugThreshold = parseTimeSetting(\"threshold.fetch.debug\", -1);\n        this.fetchTraceThreshold = parseTimeSetting(\"threshold.fetch.trace\", -1);\n\n        this.level = componentSettings.get(\"level\", \"TRACE\").toUpperCase(Locale.ROOT);\n\n        this.queryLogger = Loggers.getLogger(logger, \".query\");\n        this.fetchLogger = Loggers.getLogger(logger, \".fetch\");\n\n        queryLogger.setLevel(level);\n        fetchLogger.setLevel(level);\n\n        indexSettingsService.addListener(new ApplySettings());\n    }","commit_id":"10810f00d490fdae35cdcff6f1a132d7c21c4816","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n\tpublic void populateConfigJSONObject(\n\t\tJSONObject jsonObject, Map<String, Object> inputEditorTaglibAttributes,\n\t\tThemeDisplay themeDisplay,\n\t\tLiferayPortletResponse liferayPortletResponse) {\n\n\t\tjsonObject.put(\"allowedContent\", Boolean.TRUE);\n\n\t\tString cssClasses = GetterUtil.getString(\n\t\t\tinputEditorTaglibAttributes.get(\n\t\t\t\t\"liferay-ui:input-editor:cssClasses\"));\n\n\t\tjsonObject.put(\n\t\t\t\"bodyClass\", \"html-editor \" + HtmlUtil.escape(cssClasses));\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tString cssPath = HtmlUtil.escape(themeDisplay.getPathThemeCss());\n\n\t\tjsonArray.put(cssPath + \"/aui.css\");\n\t\tjsonArray.put(cssPath + \"/main.css\");\n\n\t\tjsonObject.put(\"contentsCss\", jsonArray);\n\n\t\tString contentsLanguageDir = getContentsLanguageDir(\n\t\t\tinputEditorTaglibAttributes);\n\n\t\tjsonObject.put(\"contentsLangDirection\",\n\t\t\tHtmlUtil.escapeJS(contentsLanguageDir));\n\n\t\tString contentsLanguageId = getContentsLanguageId(\n\t\t\tinputEditorTaglibAttributes);\n\n\t\tjsonObject.put(\"contentsLanguage\",\n\t\t\tcontentsLanguageId.replace(\"iw_\", \"he_\"));\n\n\t\tjsonObject.put(\"height\", 265);\n\n\t\tString languageId = getLanguageId(themeDisplay);\n\n\t\tjsonObject.put(\"language\", languageId.replace(\"iw_\", \"he_\"));\n\n\t\tboolean resizable = GetterUtil.getBoolean(\n\t\t\t\t(String)inputEditorTaglibAttributes.get(\n\t\t\t\t\t\"liferay-ui:input-editor:resizable\"));\n\n\t\tif (resizable) {\n\t\t\tjsonObject.put(\"resize_dir\", \"vertical\");\n\t\t}\n\n\t\tjsonObject.put(\"resize_enabled\", resizable);\n\n\t\tliferayPortletResponse.getHttpServletResponse()\n\t\t\t.setContentType(ContentTypes.TEXT_JAVASCRIPT);\n\t}","id":12365,"modified_method":"@Override\n\tpublic void populateConfigJSONObject(\n\t\tJSONObject jsonObject, Map<String, Object> inputEditorTaglibAttributes,\n\t\tThemeDisplay themeDisplay,\n\t\tLiferayPortletResponse liferayPortletResponse) {\n\n\t\tjsonObject.put(\"allowedContent\", Boolean.TRUE);\n\n\t\tString cssClasses = GetterUtil.getString(\n\t\t\tinputEditorTaglibAttributes.get(\n\t\t\t\t\"liferay-ui:input-editor:cssClasses\"));\n\n\t\tjsonObject.put(\n\t\t\t\"bodyClass\", \"html-editor \" + HtmlUtil.escape(cssClasses));\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tString cssPath = HtmlUtil.escape(themeDisplay.getPathThemeCss());\n\n\t\tjsonArray.put(cssPath + \"/aui.css\");\n\t\tjsonArray.put(cssPath + \"/main.css\");\n\n\t\tjsonObject.put(\"contentsCss\", jsonArray);\n\n\t\tString contentsLanguageDir = getContentsLanguageDir(\n\t\t\tinputEditorTaglibAttributes);\n\n\t\tjsonObject.put(\n\t\t\t\"contentsLangDirection\", HtmlUtil.escapeJS(contentsLanguageDir));\n\n\t\tString contentsLanguageId = getContentsLanguageId(\n\t\t\tinputEditorTaglibAttributes);\n\n\t\tjsonObject.put(\n\t\t\t\"contentsLanguage\", contentsLanguageId.replace(\"iw_\", \"he_\"));\n\n\t\tjsonObject.put(\"height\", 265);\n\n\t\tString languageId = getLanguageId(themeDisplay);\n\n\t\tjsonObject.put(\"language\", languageId.replace(\"iw_\", \"he_\"));\n\n\t\tboolean resizable = GetterUtil.getBoolean(\n\t\t\t(String)inputEditorTaglibAttributes.get(\n\t\t\t\t\"liferay-ui:input-editor:resizable\"));\n\n\t\tif (resizable) {\n\t\t\tjsonObject.put(\"resize_dir\", \"vertical\");\n\t\t}\n\n\t\tjsonObject.put(\"resize_enabled\", resizable);\n\n\t\tHttpServletResponse response =\n\t\t\tliferayPortletResponse.getHttpServletResponse();\n\n\t\tresponse.setContentType(ContentTypes.TEXT_JAVASCRIPT);\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void populateConfigJSONObject(\n\t\tJSONObject jsonObject, Map<String, Object> inputEditorTaglibAttributes,\n\t\tThemeDisplay themeDisplay,\n\t\tLiferayPortletResponse liferayPortletResponse) {\n\n\t\tsuper.populateConfigJSONObject(\n\t\t\t\tjsonObject, inputEditorTaglibAttributes, themeDisplay,\n\t\t\t\tliferayPortletResponse);\n\n\t\tjsonObject.put(\"allowedContent\", Boolean.TRUE);\n\n\t\tjsonObject.put(\"enterMode\", _CKEDITOR_ENTER_BR);\n\n\t\tjsonObject.put(\n\t\t\t\"extraPlugins\", \"a11yhelpbtn,bbcode,imageselector,wikilink\");\n\n\t\tjsonObject.put(\"filebrowserBrowseUrl\", \"\");\n\n\t\tjsonObject.put(\"filebrowserImageBrowseLinkUrl\", \"\");\n\n\t\tjsonObject.put(\"filebrowserImageBrowseUrl\", \"\");\n\n\t\tjsonObject.put(\"filebrowserImageUploadUrl\", \"\");\n\n\t\tjsonObject.put(\"filebrowserUploadUrl\", \"\");\n\n\t\tjsonObject.put(\"fontSize_sizes\",\n\t\t\t\"10/10px;12/12px;16/16px;18/18px;24/24px;32/32px;48/48px\");\n\n\t\tjsonObject.put(\"format_tags\", \"p;pre\");\n\n\t\tjsonObject.put(\"imagesPath\",\n\t\t\tHtmlUtil.escape(themeDisplay.getPathThemeImages()) +\n\t\t\t\"/message_boards/\");\n\n\t\tjsonObject.put(\"newThreadURL\", MBThreadConstants.NEW_THREAD_URL);\n\n\t\tString removePlugins =\"bidi,div,elementspath,flash,forms,indentblock,\" +\n\t\t\t\"keystrokes,link,maximize,newpage,pagebreak,preview,print,\" +\n\t\t\t\"save,showblocks,templates,video\";\n\n\t\tjsonObject.put(\"removePlugins\", removePlugins);\n\n\t\tString smileyEmoticons = StringUtil.merge(\n\t\t\tBBCodeTranslatorUtil.getEmoticonDescriptions(), \"','\");\n\n\t\tjsonObject.put(\"smiley_descriptions\",\n\t\t\ttoJSONArray(\"['\" + smileyEmoticons + \"']\"));\n\n\t\tString smileyImages = StringUtil.merge(\n\t\t\tBBCodeTranslatorUtil.getEmoticonFiles(), \"','\");\n\n\t\tjsonObject.put(\"smiley_images\",\n\t\t\ttoJSONArray(\"['\" + smileyImages + \"']\"));\n\n\t\tjsonObject.put(\"smiley_path\",\n\t\t\t\tHtmlUtil.escape(themeDisplay.getPathThemeImages()) +\n\t\t\t\t\"/emoticons/\");\n\n\t\tString smileySymbols = StringUtil.merge(\n\t\t\tBBCodeTranslatorUtil.getEmoticonSymbols(), \"','\");\n\n\t\tjsonObject.put(\"smiley_symbols\",\n\t\t\ttoJSONArray(\"['\" + smileySymbols + \"']\"));\n\n\t\tjsonObject.put(\"toolbar_bbcode\",\n\t\t\tgetToolbarsBBCodeJSONArray(inputEditorTaglibAttributes));\n\n\t\tjsonObject.put(\"toolbar_phone\",\n\t\t\tgetToolbarsPhoneJSONArray(inputEditorTaglibAttributes));\n\n\t\tjsonObject.put(\"toolbar_tablet\",\n\t\t\tgetToolbarsTabletJSONArray(inputEditorTaglibAttributes));\n\t}","id":12366,"modified_method":"@Override\n\tpublic void populateConfigJSONObject(\n\t\tJSONObject jsonObject, Map<String, Object> inputEditorTaglibAttributes,\n\t\tThemeDisplay themeDisplay,\n\t\tLiferayPortletResponse liferayPortletResponse) {\n\n\t\tsuper.populateConfigJSONObject(\n\t\t\tjsonObject, inputEditorTaglibAttributes, themeDisplay,\n\t\t\tliferayPortletResponse);\n\n\t\tjsonObject.put(\"allowedContent\", Boolean.TRUE);\n\n\t\tjsonObject.put(\"enterMode\", _CKEDITOR_ENTER_BR);\n\n\t\tjsonObject.put(\n\t\t\t\"extraPlugins\", \"a11yhelpbtn,bbcode,imageselector,wikilink\");\n\n\t\tjsonObject.put(\"filebrowserBrowseUrl\", \"\");\n\n\t\tjsonObject.put(\"filebrowserImageBrowseLinkUrl\", \"\");\n\n\t\tjsonObject.put(\"filebrowserImageBrowseUrl\", \"\");\n\n\t\tjsonObject.put(\"filebrowserImageUploadUrl\", \"\");\n\n\t\tjsonObject.put(\"filebrowserUploadUrl\", \"\");\n\n\t\tjsonObject.put(\n\t\t\t\"fontSize_sizes\",\n\t\t\t\"10/10px;12/12px;16/16px;18/18px;24/24px;32/32px;48/48px\");\n\n\t\tjsonObject.put(\"format_tags\", \"p;pre\");\n\n\t\tjsonObject.put(\n\t\t\t\"imagesPath\",\n\t\t\tHtmlUtil.escape(themeDisplay.getPathThemeImages()) +\n\t\t\t\t\"/message_boards/\");\n\n\t\tjsonObject.put(\"newThreadURL\", MBThreadConstants.NEW_THREAD_URL);\n\n\t\tjsonObject.put(\n\t\t\t\"removePlugins\",\n\t\t\t\"bidi,div,elementspath,flash,forms,indentblock,keystrokes,link,\" +\n\t\t\t\t\"maximize,newpage,pagebreak,preview,print,save,showblocks,\" +\n\t\t\t\t\t\"templates,video\");\n\n\t\tjsonObject.put(\n\t\t\t\"smiley_descriptions\",\n\t\t\ttoJSONArray(BBCodeTranslatorUtil.getEmoticonDescriptions()));\n\t\tjsonObject.put(\n\t\t\t\"smiley_images\",\n\t\t\ttoJSONArray(BBCodeTranslatorUtil.getEmoticonFiles()));\n\t\tjsonObject.put(\n\t\t\t\"smiley_path\",\n\t\t\tHtmlUtil.escape(themeDisplay.getPathThemeImages()) + \"/emoticons/\");\n\t\tjsonObject.put(\n\t\t\t\"smiley_symbols\",\n\t\t\ttoJSONArray(BBCodeTranslatorUtil.getEmoticonSymbols()));\n\n\t\tjsonObject.put(\n\t\t\t\"toolbar_bbcode\",\n\t\t\tgetToolbarsBBCodeJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_phone\",\n\t\t\tgetToolbarsPhoneJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_tablet\",\n\t\t\tgetToolbarsTabletJSONArray(inputEditorTaglibAttributes));\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarsTabletJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', 'Underline', 'Strike']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['JustifyLeft', 'JustifyCenter', \" +\n\t\t\t\"'JustifyRight', 'JustifyBlock']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Styles', 'FontSize']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['ImageSelector']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\treturn jsonArray;\n\t}","id":12367,"modified_method":"protected JSONArray getToolbarsTabletJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', 'Underline', 'Strike']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['JustifyLeft', 'JustifyCenter', 'JustifyRight', \" +\n\t\t\t\t\t\"'JustifyBlock']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Styles', 'FontSize']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['ImageSelector']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarsBBCodeJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', 'Underline', 'Strike']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['TextColor']\"));\n\n\t\tjsonArray.put(toJSONArray(\n\t\t\t\"['JustifyLeft', 'JustifyCenter',\" +\n\t\t\t\"'JustifyRight', 'JustifyBlock']\"));\n\n\t\tjsonArray.put(toJSONArray(\n\t\t\t\"['NumberedList', 'BulletedList', '-', 'Outdent', \" +\n\t\t\t\" 'Indent', '-', 'Blockquote', '-', 'Code']\"));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(toJSONArray(\"['Format', 'Font', 'FontSize']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['ImageSelector', '-', 'Smiley']\"));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(toJSONArray(\"['Cut', 'Copy', 'Paste', '-', \" +\n\t\t\t\"'SelectAll', '-', 'Undo', 'Redo']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\treturn jsonArray;\n\t}","id":12368,"modified_method":"protected JSONArray getToolbarsBBCodeJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', 'Underline', 'Strike']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['TextColor']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['JustifyLeft', 'JustifyCenter', 'JustifyRight', \" +\n\t\t\t\t\t\"'JustifyBlock']\"));\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', \" +\n\t\t\t\t\t\"'-', 'Blockquote', '-', 'Code']\"));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(toJSONArray(\"['Format', 'Font', 'FontSize']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['ImageSelector', '-', 'Smiley']\"));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['Cut', 'Copy', 'Paste', '-', 'SelectAll', '-', 'Undo', \" +\n\t\t\t\t\t\"'Redo']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarSimpleJSONArray(\n\t\t\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\t\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', 'Underline', \" +\n\t\t\t\t\t\"'Strike']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Table', 'ImageSelector']\"));\n\n\t\t\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t\t\t}\n\n\t\t\t\treturn jsonArray;\n\t\t}","id":12369,"modified_method":"protected JSONArray getToolbarSimpleJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', 'Underline', 'Strike']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Table', 'ImageSelector']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarTabletJSONArray(\n\t\t\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\t\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', \" +\n\t\t\t\t\t\"'Underline', 'Strike']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['JustifyLeft', 'JustifyCenter', \" +\n\t\t\t\t\t\"'JustifyRight', 'JustifyBlock']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Styles', 'FontSize']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['ImageSelector']\"));\n\n\t\t\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t\t\t}\n\n\t\t\t\treturn jsonArray;\n\t\t}","id":12370,"modified_method":"protected JSONArray getToolbarTabletJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', 'Underline', 'Strike']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['JustifyLeft', 'JustifyCenter', 'JustifyRight', \" +\n\t\t\t\t\t\"'JustifyBlock']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Styles', 'FontSize']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['ImageSelector']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarLiferayArticleJSONArray(\n\t\t\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\t\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\t\t\tjsonArray.put(toJSONArray(\n\t\t\t\t\t\t\"['Bold', 'Italic', 'Underline', 'Strike', '-', \" +\n\t\t\t\t\t\t\t\t\"'Subscript', 'Superscript', \" +\n\t\t\t\t\t\t\t\t\"'-', 'RemoveFormat']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['TextColor', 'BGColor']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['JustifyLeft', 'JustifyCenter', \" +\n\t\t\t\t\t\"'JustifyRight', 'JustifyBlock']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList', \" +\n\t\t\t\t\t\"'-' ,'Outdent', 'Indent', '-', 'Blockquote']\"));\n\n\t\t\t\tjsonArray.put(\"/\");\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Styles', 'FontSize']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink', 'Anchor']\"));\n\n\t\t\t\tString buttons = \"['Table', '-', 'ImageSelector',\";\n\n\t\t\t\tif (XugglerUtil.isEnabled()) {\n\t\t\t\t\tbuttons +=\" 'Audio', 'Video',\";\n\t\t\t\t}\n\n\t\t\t\tbuttons+= \" 'Flash', '-', 'LiferayPageBreak', '-', \" +\n\t\t\t\t\t\"'Smiley', 'SpecialChar']\";\n\n\t\t\t\tjsonArray.put(toJSONArray(buttons));\n\n\t\t\t\tjsonArray.put(\"/\");\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Cut', 'Copy', 'Paste', '-',\" +\n\t\t\t\t\t\t\"'PasteText', 'PasteFromWord', '-', 'SelectAll' , \" +\n\t\t\t\t\t\t\"'-', 'Undo', 'Redo']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\n\t\t\t\t\t\"['Find', 'Replace', '-', 'SpellChecker', 'Scayt']\"));\n\n\t\t\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t\t\t}\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\t\t\treturn jsonArray;\n\t\t}","id":12371,"modified_method":"protected JSONArray getToolbarLiferayArticleJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['Bold', 'Italic', 'Underline', 'Strike', '-', 'Subscript', \" +\n\t\t\t\t\t\"'Superscript', '-', 'RemoveFormat']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['TextColor', 'BGColor']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['JustifyLeft', 'JustifyCenter', 'JustifyRight', \" +\n\t\t\t\t\t\"'JustifyBlock']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['NumberedList', 'BulletedList', '-' ,'Outdent', 'Indent', \" +\n\t\t\t\t\t\"'-', 'Blockquote']\"));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(toJSONArray(\"['Styles', 'FontSize']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink', 'Anchor']\"));\n\n\t\tString buttons = \"['Table', '-', 'ImageSelector',\";\n\n\t\tif (XugglerUtil.isEnabled()) {\n\t\t\tbuttons +=\" 'Audio', 'Video',\";\n\t\t}\n\n\t\tbuttons+= \" 'Flash', '-', 'LiferayPageBreak', '-', \" +\n\t\t\t\"'Smiley', 'SpecialChar']\";\n\n\t\tjsonArray.put(toJSONArray(buttons));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['Cut', 'Copy', 'Paste', '-', 'PasteText', 'PasteFromWord', \" +\n\t\t\t\t\t\"'-', 'SelectAll' , '-', 'Undo', 'Redo']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\"['Find', 'Replace', '-', 'SpellChecker', 'Scayt']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarEmailJSONArray(\n\t\t\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\t\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', 'Underline', \" +\n\t\t\t\t\t\"'Strike', '-', 'RemoveFormat']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['TextColor', 'BGColor']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['JustifyLeft', 'JustifyCenter', \" +\n\t\t\t\t\t\"'JustifyRight', 'JustifyBlock']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['FontSize']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['ImageSelector']\"));\n\n\t\t\t\tjsonArray.put(\"/\");\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Cut', 'Copy', 'Paste', '-', \" +\n\t\t\t\t\t\t\"'PasteText', 'PasteFromWord', '-', 'SelectAll', \" +\n\t\t\t\t\t\t\"'-', 'Undo', 'Redo' ]\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['SpellChecker', 'Scayt']\"));\n\n\t\t\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t\t\t}\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\t\t\treturn jsonArray;\n\t\t}","id":12372,"modified_method":"protected JSONArray getToolbarEmailJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['Bold', 'Italic', 'Underline', 'Strike', '-', \" +\n\t\t\t\t\t\"'RemoveFormat']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['TextColor', 'BGColor']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['JustifyLeft', 'JustifyCenter', 'JustifyRight', \" +\n\t\t\t\t\t\"'JustifyBlock']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['FontSize']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['ImageSelector']\"));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['Cut', 'Copy', 'Paste', '-', 'PasteText', 'PasteFromWord', \" +\n\t\t\t\t\t\"'-', 'SelectAll', '-', 'Undo', 'Redo' ]\"));\n\n\t\tjsonArray.put(toJSONArray(\"['SpellChecker', 'Scayt']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarEditInPlaceJSONArray(\n\t\t\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\t\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\t\t\tjsonArray.put(toJSONArray(\n\t\t\t\t\t\t\"['Bold', 'Italic', 'Underline', 'Strike', '-', \" +\n\t\t\t\t\t\t\t\t\"'Subscript', 'Superscript', \" +\n\t\t\t\t\t\t\t\t\"'-', 'RemoveFormat']\"));\n\n\t\t\t\tjsonArray.put(\n\t\t\t\t\t\ttoJSONArray(\"['NumberedList', 'BulletedList', \" +\n\t\t\t\t\t\t\"'-', 'Outdent', 'Indent']\"));\n\n\t\t\t\tjsonArray.put(\"/\");\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Styles']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\n\t\t\t\t\t\"['SpellChecker', 'Scayt', '-', 'SpecialChar']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Undo', 'Redo']\"));\n\n\t\t\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t\t\t}\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\t\t\treturn jsonArray;\n\t\t}","id":12373,"modified_method":"protected JSONArray getToolbarEditInPlaceJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['Bold', 'Italic', 'Underline', 'Strike', '-', 'Subscript', \" +\n\t\t\t\t\t\"'Superscript', '-', 'RemoveFormat']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent']\"));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(toJSONArray(\"['Styles']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\"['SpellChecker', 'Scayt', '-', 'SpecialChar']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Undo', 'Redo']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\t\tpublic void populateConfigJSONObject(\n\t\t\t\tJSONObject jsonObject,\n\t\t\t\tMap<String, Object> inputEditorTaglibAttributes,\n\t\t\t\tThemeDisplay themeDisplay,\n\t\t\t\tLiferayPortletResponse liferayPortletResponse) {\n\n\t\t\t\tsuper.populateConfigJSONObject(\n\t\t\t\t\t\tjsonObject, inputEditorTaglibAttributes, themeDisplay,\n\t\t\t\t\t\tliferayPortletResponse);\n\n\t\t\t\tjsonObject.put(\"autoParagraph\", Boolean.FALSE);\n\n\t\t\t\tjsonObject.put(\"autoSaveTimeout\", 3000);\n\n\t\t\t\tString colorSchemeCssClass =\n\t\t\t\t\tthemeDisplay.getColorScheme().getCssClass();\n\n\t\t\t\tString cssClasses = (String)inputEditorTaglibAttributes.get(\n\t\t\t\t\t\"liferay-ui:input-editor:cssClasses\");\n\n\t\t\t\tjsonObject.put(\"bodyClass\", \"html-editor \" +\n\t\t\t\t\t\tHtmlUtil.escape(colorSchemeCssClass) + \" \" +\n\t\t\t\t\t\tHtmlUtil.escape(cssClasses));\n\n\t\t\t\tjsonObject.put(\"closeNoticeTimeout\", 8000);\n\n\t\t\t\tjsonObject.put(\"entities\", Boolean.FALSE);\n\n\t\t\t\tString extraPlugins =\n                    \"a11yhelpbtn,imageselector,lfrpopup,media,scayt,wsc\";\n\n\t\t\t\tboolean inlineEdit = GetterUtil.getBoolean(\n\t\t\t\t\t\t(String)inputEditorTaglibAttributes.get(\n\t\t\t\t\t\t\t\"liferay-ui:input-editor:inlineEdit\"));\n\n\t\t\t\tif (inlineEdit) {\n\t\t\t\t\textraPlugins += \",ajaxsave,restore\";\n\t\t\t\t}\n\n\t\t\t\tjsonObject.put(\"extraPlugins\", extraPlugins);\n\n\t\t\t\tjsonObject.put(\"filebrowserWindowFeatures\", \"title=\" +\n\t\t\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"browse\"));\n\n\t\t\t\tjsonObject.put(\"pasteFromWordRemoveFontStyles\", Boolean.FALSE);\n\n\t\t\t\tjsonObject.put(\"pasteFromWordRemoveStyles\", Boolean.FALSE);\n\n\t\t\t\tjsonObject.put(\"stylesSet\", getStyleFormatsJSONArray());\n\n\t\t\t\tjsonObject.put(\n\t\t\t\t\t\t\"toolbar_editInPlace\",\n\t\t\t\t\t\tgetToolbarEditInPlaceJSONArray(\n\t\t\t\t\t\t\tinputEditorTaglibAttributes));\n\n\t\t\t\tjsonObject.put(\n\t\t\t\t\t\t\"toolbar_email\", getToolbarEmailJSONArray(\n\t\t\t\t\t\t\tinputEditorTaglibAttributes));\n\n\t\t\t\tjsonObject.put(\n\t\t\t\t\t\t\"toolbar_liferay\",\n\t\t\t\t\t\tgetToolbarLiferayJSONArray(\n\t\t\t\t\t\t\tinputEditorTaglibAttributes));\n\n\t\t\t\tjsonObject.put(\n\t\t\t\t\t\t\"toolbar_liferayArticle\",\n\t\t\t\t\t\tgetToolbarLiferayArticleJSONArray(\n\t\t\t\t\t\t\tinputEditorTaglibAttributes));\n\n\t\t\t\tjsonObject.put(\n\t\t\t\t\t\t\"toolbar_phone\", getToolbarPhoneJSONArray(\n\t\t\t\t\t\t\tinputEditorTaglibAttributes));\n\n\t\t\t\tjsonObject.put(\n\t\t\t\t\t\t\"toolbar_simple\",\n\t\t\t\t\t\tgetToolbarSimpleJSONArray(inputEditorTaglibAttributes));\n\n\t\t\t\tjsonObject.put(\n\t\t\t\t\t\t\"toolbar_tablet\",\n\t\t\t\t\t\tgetToolbarTabletJSONArray(inputEditorTaglibAttributes));\n\t\t}","id":12374,"modified_method":"@Override\n\tpublic void populateConfigJSONObject(\n\t\tJSONObject jsonObject, Map<String, Object> inputEditorTaglibAttributes,\n\t\tThemeDisplay themeDisplay,\n\t\tLiferayPortletResponse liferayPortletResponse) {\n\n\t\tsuper.populateConfigJSONObject(\n\t\t\tjsonObject, inputEditorTaglibAttributes, themeDisplay,\n\t\t\tliferayPortletResponse);\n\n\t\tjsonObject.put(\"autoParagraph\", Boolean.FALSE);\n\n\t\tjsonObject.put(\"autoSaveTimeout\", 3000);\n\n\t\tColorScheme colorScheme = themeDisplay.getColorScheme();\n\n\t\tString colorSchemeCssClass = colorScheme.getCssClass();\n\n\t\tString cssClasses = (String)inputEditorTaglibAttributes.get(\n\t\t\t\"liferay-ui:input-editor:cssClasses\");\n\n\t\tjsonObject.put(\n\t\t\t\"bodyClass\", \"html-editor \" + HtmlUtil.escape(colorSchemeCssClass) +\n\t\t\t\t\" \" + HtmlUtil.escape(cssClasses));\n\n\t\tjsonObject.put(\"closeNoticeTimeout\", 8000);\n\n\t\tjsonObject.put(\"entities\", Boolean.FALSE);\n\n\t\tString extraPlugins =\n\t\t\t\"a11yhelpbtn,imageselector,lfrpopup,media,scayt,wsc\";\n\n\t\tboolean inlineEdit = GetterUtil.getBoolean(\n\t\t\t(String)inputEditorTaglibAttributes.get(\n\t\t\t\t\"liferay-ui:input-editor:inlineEdit\"));\n\n\t\tif (inlineEdit) {\n\t\t\textraPlugins += \",ajaxsave,restore\";\n\t\t}\n\n\t\tjsonObject.put(\"extraPlugins\", extraPlugins);\n\n\t\tjsonObject.put(\n\t\t\t\"filebrowserWindowFeatures\",\n\t\t\t\"title=\" + LanguageUtil.get(themeDisplay.getLocale(), \"browse\"));\n\n\t\tjsonObject.put(\"pasteFromWordRemoveFontStyles\", Boolean.FALSE);\n\n\t\tjsonObject.put(\"pasteFromWordRemoveStyles\", Boolean.FALSE);\n\n\t\tjsonObject.put(\"stylesSet\", getStyleFormatsJSONArray());\n\n\t\tjsonObject.put(\n\t\t\t\"toolbar_editInPlace\",\n\t\t\tgetToolbarEditInPlaceJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_email\",\n\t\t\tgetToolbarEmailJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_liferay\",\n\t\t\tgetToolbarLiferayJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_liferayArticle\",\n\t\t\tgetToolbarLiferayArticleJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_phone\",\n\t\t\tgetToolbarPhoneJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_simple\",\n\t\t\tgetToolbarSimpleJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_tablet\",\n\t\t\tgetToolbarTabletJSONArray(inputEditorTaglibAttributes));\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarLiferayJSONArray(\n\t\t\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\t\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\t\t\tjsonArray.put(toJSONArray(\n\t\t\t\t\t\t\"['Bold', 'Italic', 'Underline', 'Strike', '-', \" +\n\t\t\t\t\t\t\t\t\"'Subscript', 'Superscript', \" +\n\t\t\t\t\t\t\t\t\"'-', 'RemoveFormat']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['TextColor', 'BGColor']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['JustifyLeft', 'JustifyCenter', \" +\n\t\t\t\t\t\"'JustifyRight', 'JustifyBlock']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList', \" +\n\t\t\t\t\t\"'-', 'Outdent', 'Indent']\"));\n\n\t\t\t\tjsonArray.put(\"/\");\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Styles', 'FontSize']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink', 'Anchor']\"));\n\n\t\t\t\tString buttons = \"['Table', '-', 'ImageSelector',\";\n\n\t\t\t\tif (XugglerUtil.isEnabled()) {\n\t\t\t\t\tbuttons +=\" 'Audio', 'Video',\";\n\t\t\t\t}\n\n\t\t\t\tbuttons += \" 'Flash', '-', 'Smiley', 'SpecialChar']\";\n\n\t\t\t\tjsonArray.put(toJSONArray(buttons));\n\n\t\t\t\tjsonArray.put(\"/\");\n\n\t\t\t\tboolean inlineEdit = GetterUtil.getBoolean(\n\t\t\t\t\t\t(String)inputEditorTaglibAttributes.get(\n\t\t\t\t\t\t\t\"liferay-ui:input-editor:inlineEdit\"));\n\n\t\t\t\tif (inlineEdit) {\n\t\t\t\t\t\tjsonArray.put(\n\t\t\t\t\t\t\ttoJSONArray(\"['AjaxSave', '-', 'Restore']\"));\n\t\t\t\t}\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['Cut', 'Copy', 'Paste', '-',\" +\n\t\t\t\t\t\t\"'PasteText', 'PasteFromWord', '-', 'SelectAll' , \" +\n\t\t\t\t\t\t\"'-', 'Undo', 'Redo']\"));\n\n\t\t\t\tjsonArray.put(toJSONArray(\n\t\t\t\t\t\"['Find', 'Replace', '-', 'SpellChecker', 'Scayt']\"));\n\n\t\t\t\tif (!inlineEdit && isShowSource(inputEditorTaglibAttributes)) {\n\t\t\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t\t\t}\n\n\t\t\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\t\t\treturn jsonArray;\n\t\t}","id":12375,"modified_method":"protected JSONArray getToolbarLiferayJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['Bold', 'Italic', 'Underline', 'Strike', '-', 'Subscript', \" +\n\t\t\t\t\t\"'Superscript', '-', 'RemoveFormat']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['TextColor', 'BGColor']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['JustifyLeft', 'JustifyCenter', 'JustifyRight', \" +\n\t\t\t\t\t\"'JustifyBlock']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent']\"));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(toJSONArray(\"['Styles', 'FontSize']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink', 'Anchor']\"));\n\n\t\tString buttons = \"['Table', '-', 'ImageSelector',\";\n\n\t\tif (XugglerUtil.isEnabled()) {\n\t\t\tbuttons = buttons.concat(\" 'Audio', 'Video',\");\n\t\t}\n\n\t\tbuttons = buttons.concat(\" 'Flash', '-', 'Smiley', 'SpecialChar']\");\n\n\t\tjsonArray.put(toJSONArray(buttons));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tboolean inlineEdit = GetterUtil.getBoolean(\n\t\t\t(String)inputEditorTaglibAttributes.get(\n\t\t\t\t\"liferay-ui:input-editor:inlineEdit\"));\n\n\t\tif (inlineEdit) {\n\t\t\tjsonArray.put(toJSONArray(\"['AjaxSave', '-', 'Restore']\"));\n\t\t}\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['Cut', 'Copy', 'Paste', '-', 'PasteText', 'PasteFromWord', \" +\n\t\t\t\t\t\"'-', 'SelectAll' , '-', 'Undo', 'Redo']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\"['Find', 'Replace', '-', 'SpellChecker', 'Scayt']\"));\n\n\t\tif (!inlineEdit && isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarsTabletJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList', '-', \" +\n\t\t\t\"'Outdent', 'Indent']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Format']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tif (includeButtonImage(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['ImageSelector']\"));\n\t\t}\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\treturn jsonArray;\n\t}","id":12376,"modified_method":"protected JSONArray getToolbarsTabletJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Format']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tif (includeButtonImage(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['ImageSelector']\"));\n\t\t}\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JSONArray getToolbarsCreoleJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', '-' ,'RemoveFormat']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['NumberedList', 'BulletedList', '-', \" +\n\t\t\t\"'Outdent', 'Indent']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Format']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tString buttons = \"['Table', '-',\";\n\n\t\tif (includeButtonImage(inputEditorTaglibAttributes)) {\n\t\t\tbuttons += \"'ImageSelector', '-', \";\n\t\t}\n\n\t\tbuttons+= \"'HorizontalRule', '-', 'SpecialChar' ]\";\n\n\t\tjsonArray.put(toJSONArray(buttons));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(toJSONArray(\"['Cut', 'Copy', 'Paste', '-', 'PasteText',\" +\n\t\t\t\" 'PasteFromWord', '-', 'SelectAll', '-', 'Undo', 'Redo']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Find','Replace']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\treturn jsonArray;\n\t}","id":12377,"modified_method":"protected JSONArray getToolbarsCreoleJSONArray(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\tjsonArray.put(toJSONArray(\"['Bold', 'Italic', '-' ,'RemoveFormat']\"));\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Format']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Link', 'Unlink']\"));\n\n\t\tString buttons = \"['Table', '-',\";\n\n\t\tif (includeButtonImage(inputEditorTaglibAttributes)) {\n\t\t\tbuttons = buttons.concat(\"'ImageSelector', '-', \");\n\t\t}\n\n\t\tbuttons = buttons.concat(\"'HorizontalRule', '-', 'SpecialChar']\");\n\n\t\tjsonArray.put(toJSONArray(buttons));\n\n\t\tjsonArray.put(\"/\");\n\n\t\tjsonArray.put(\n\t\t\ttoJSONArray(\n\t\t\t\t\"['Cut', 'Copy', 'Paste', '-', 'PasteText', 'PasteFromWord', \" +\n\t\t\t\t\t\"'-', 'SelectAll', '-', 'Undo', 'Redo']\"));\n\n\t\tjsonArray.put(toJSONArray(\"['Find','Replace']\"));\n\n\t\tif (isShowSource(inputEditorTaglibAttributes)) {\n\t\t\tjsonArray.put(toJSONArray(\"['Source']\"));\n\t\t}\n\n\t\tjsonArray.put(toJSONArray(\"['A11YBtn']\"));\n\n\t\treturn jsonArray;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected boolean includeButtonImage(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tMap<String, String> fileBrowserParams =\n\t\t\t\t(Map<String, String>)inputEditorTaglibAttributes.get(\n\t\t\t\t\t\"liferay-ui:input-editor:fileBrowserParams\");\n\n\t\treturn GetterUtil.getLong(\n\t\t\tfileBrowserParams.get(\"wikiPageResourcePrimKey\")) > 0;\n\t}","id":12378,"modified_method":"protected boolean includeButtonImage(\n\t\tMap<String, Object> inputEditorTaglibAttributes) {\n\n\t\tMap<String, String> fileBrowserParams =\n\t\t\t(Map<String, String>)inputEditorTaglibAttributes.get(\n\t\t\t\t\"liferay-ui:input-editor:fileBrowserParams\");\n\n\t\tif (GetterUtil.getLong(\n\t\t\t\tfileBrowserParams.get(\"wikiPageResourcePrimKey\")) > 0) {\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void populateConfigJSONObject(\n\t\tJSONObject jsonObject, Map<String, Object> inputEditorTaglibAttributes,\n\t\tThemeDisplay themeDisplay,\n\t\tLiferayPortletResponse liferayPortletResponse) {\n\n\t\tsuper.populateConfigJSONObject(\n\t\t\t\tjsonObject, inputEditorTaglibAttributes, themeDisplay,\n\t\t\t\tliferayPortletResponse);\n\n\t\tjsonObject.put(\"allowedContent\", \"b strong i hr h1 h2 h3 h4 h5 h6\" +\n\t\t\t\" em ul ol li pre table tr th; img a[*]\");\n\n\t\tMap<String, String> fileBrowserParams =\n\t\t\t\t(Map<String, String>)inputEditorTaglibAttributes.get(\n\t\t\t\t\t\"liferay-ui:input-editor:fileBrowserParams\");\n\n\t\tString attachmentURLPrefix = fileBrowserParams.get(\n\t\t\t\"attachmentURLPrefix\");\n\n\t\tjsonObject.put(\"attachmentURLPrefix\", attachmentURLPrefix);\n\n\t\tjsonObject.put(\"decodeLinks\", Boolean.TRUE);\n\n\t\tjsonObject.put(\"disableObjectResizing\", Boolean.TRUE);\n\n\t\tjsonObject.put(\n            \"extraPlugins\",\n            \"a11yhelpbtn,creole,imageselector,lfrpopup,wikilink\");\n\n\t\tjsonObject.put(\"filebrowserWindowFeatures\", \"title=\" +\n\t\t\tLanguageUtil.get(themeDisplay.getLocale(), \"browse\"));\n\n\t\tjsonObject.put(\"format_tags\", \"p;h1;h2;h3;h4;h5;h6;pre\");\n\n\t\tString removePlugins =\"bidi,colorbutton,colordialog,div,elementspath,\" +\n\t\t\t\"flash,font,forms,indentblock,justify,keystrokes,link,maximize,\" +\n\t\t\t\"newpage,pagebreak,preview,print,save,showblocks,smiley,\" +\n\t\t\t\"stylescombo,templates,video\";\n\n\t\tjsonObject.put(\"removePlugins\", removePlugins);\n\n\t\tjsonObject.put(\"toolbar_creole\", getToolbarsCreoleJSONArray(\n\t\t\tinputEditorTaglibAttributes));\n\n\t\tjsonObject.put(\"toolbar_phone\", getToolbarsPhoneJSONArray(\n\t\t\tinputEditorTaglibAttributes));\n\n\t\tjsonObject.put(\"toolbar_tablet\", getToolbarsTabletJSONArray(\n\t\t\tinputEditorTaglibAttributes));\n\t}","id":12379,"modified_method":"@Override\n\tpublic void populateConfigJSONObject(\n\t\tJSONObject jsonObject, Map<String, Object> inputEditorTaglibAttributes,\n\t\tThemeDisplay themeDisplay,\n\t\tLiferayPortletResponse liferayPortletResponse) {\n\n\t\tsuper.populateConfigJSONObject(\n\t\t\tjsonObject, inputEditorTaglibAttributes, themeDisplay,\n\t\t\tliferayPortletResponse);\n\n\t\tjsonObject.put(\n\t\t\t\"allowedContent\",\n\t\t\t\"b strong i hr h1 h2 h3 h4 h5 h6 em ul ol li pre table tr th; \" +\n\t\t\t\t\"img a[*]\");\n\n\t\tMap<String, String> fileBrowserParams =\n\t\t\t(Map<String, String>)inputEditorTaglibAttributes.get(\n\t\t\t\t\"liferay-ui:input-editor:fileBrowserParams\");\n\n\t\tString attachmentURLPrefix = fileBrowserParams.get(\n\t\t\t\"attachmentURLPrefix\");\n\n\t\tjsonObject.put(\"attachmentURLPrefix\", attachmentURLPrefix);\n\n\t\tjsonObject.put(\"decodeLinks\", Boolean.TRUE);\n\n\t\tjsonObject.put(\"disableObjectResizing\", Boolean.TRUE);\n\n\t\tjsonObject.put(\n\t\t\t\"extraPlugins\",\n\t\t\t\"a11yhelpbtn,creole,imageselector,lfrpopup,wikilink\");\n\n\t\tjsonObject.put(\n\t\t\t\"filebrowserWindowFeatures\",\n\t\t\t\"title=\" + LanguageUtil.get(themeDisplay.getLocale(), \"browse\"));\n\n\t\tjsonObject.put(\"format_tags\", \"p;h1;h2;h3;h4;h5;h6;pre\");\n\n\t\tString removePlugins =\n\t\t\t\"bidi,colorbutton,colordialog,div,elementspath,flash,font,forms,\" +\n\t\t\t\t\"indentblock,justify,keystrokes,link,maximize,newpage,\" +\n\t\t\t\t\t\"pagebreak,preview,print,save,showblocks,smiley,\" +\n\t\t\t\t\t\t\"stylescombo,templates,video\";\n\n\t\tjsonObject.put(\"removePlugins\", removePlugins);\n\n\t\tjsonObject.put(\n\t\t\t\"toolbar_creole\",\n\t\t\tgetToolbarsCreoleJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_phone\",\n\t\t\tgetToolbarsPhoneJSONArray(inputEditorTaglibAttributes));\n\t\tjsonObject.put(\n\t\t\t\"toolbar_tablet\",\n\t\t\tgetToolbarsTabletJSONArray(inputEditorTaglibAttributes));\n\t}","commit_id":"a5f37b816498993bda659a506119ce10dfaed04c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static void processReferencesOut(Map<SNode, SNode> sourceNodesToNewNodes, Set<SReference> allReferences, Set<SReference> referencesRequireResolve) {\n    for (SReference sourceReference : allReferences) {\n      SNode oldSourceNode = sourceReference.getSourceNode();\n      SNode newSourceNode = sourceNodesToNewNodes.get(oldSourceNode);\n\n      SNode oldTargetNode = sourceReference.getTargetNode();\n      SNode newTargetNode = sourceNodesToNewNodes.get(oldTargetNode);\n      SReference newReference;\n      if (newTargetNode != null) {//if our reference points inside our node's subtree\n        newReference = SReference.create(sourceReference.getRole(), newSourceNode, newTargetNode);\n      } else {//otherwise it points out of our node's subtree\n        // prefer resolveInfo over direct reference\n        // todo: ?. Method call is exception - it can't be resolved just by name.\n        if (BaseAdapter.isInstance(newSourceNode, BaseMethodCall.class) && oldTargetNode != null) {\n          newReference = SReference.create(sourceReference.getRole(), newSourceNode, oldTargetNode);\n        } else {\n          String resolveInfo = oldTargetNode == null ? sourceReference.getResolveInfo() : oldTargetNode.getName(); // todo: getRefName()\n          if (resolveInfo != null) {\n            newReference = SReference.create(sourceReference.getRole(), newSourceNode, null, null, resolveInfo);\n            referencesRequireResolve.add(newReference);\n          } else if (oldTargetNode != null) {\n            newReference = SReference.create(sourceReference.getRole(), newSourceNode, oldTargetNode);\n          } else {\n            continue;\n          }\n        }\n      }\n      newSourceNode.addReference(newReference);\n    }\n  }","id":12380,"modified_method":"private static void processReferencesOut(Map<SNode, SNode> sourceNodesToNewNodes, Set<SReference> allReferences, Set<SReference> referencesRequireResolve) {\n    for (SReference sourceReference : allReferences) {\n      SNode oldSourceNode = sourceReference.getSourceNode();\n      SNode newSourceNode = sourceNodesToNewNodes.get(oldSourceNode);\n\n      SNode oldTargetNode = sourceReference.getTargetNode();\n      SNode newTargetNode = sourceNodesToNewNodes.get(oldTargetNode);\n      SReference newReference;\n      if (newTargetNode != null) {//if our reference points inside our node's subtree\n        newReference = SReference.create(sourceReference.getRole(), newSourceNode, newTargetNode);\n      } else {//otherwise it points out of our node's subtree\n        // prefer resolveInfo over direct reference\n        // todo: ?. Method call is exception - it can't be resolved just by name.\n        if (BaseAdapter.isInstance(newSourceNode, BaseMethodCall.class) && oldTargetNode != null) {\n          newReference = SReference.create(sourceReference.getRole(), newSourceNode, oldTargetNode);\n        } else {\n          String resolveInfo = oldTargetNode == null ? sourceReference.getResolveInfo() : oldTargetNode.getName(); // todo: getRefName()\n          if (resolveInfo != null) {\n            newReference = new StaticReference(sourceReference.getRole(), newSourceNode, null, null, resolveInfo);\n            referencesRequireResolve.add(newReference);\n          } else if (oldTargetNode != null) {\n            newReference = SReference.create(sourceReference.getRole(), newSourceNode, oldTargetNode);\n          } else {\n            continue;\n          }\n        }\n      }\n      newSourceNode.addReference(newReference);\n    }\n  }","commit_id":"52f5e186957b49dbaaaf5e72be2a7dd1b640bf1c","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void processReferencesIn(Map<SNode, SNode> sourceNodesToNewNodes, Set<SReference> allReferences) {\n    for (SReference sourceReference : allReferences) {\n      SNode oldSourceNode = sourceReference.getSourceNode();\n      SNode newSourceNode = sourceNodesToNewNodes.get(oldSourceNode);\n\n      SNode oldTargetNode = sourceReference.getTargetNode();\n      SNode newTargetNode = sourceNodesToNewNodes.get(oldTargetNode);\n\n      SReference newReference;\n      if (newTargetNode != null) {//if our reference points inside our node's subtree\n        newReference = SReference.create(sourceReference.getRole(), newSourceNode, newTargetNode);\n      } else {//otherwise it points out of our node's subtree\n        if (oldTargetNode != null) {\n          newReference = SReference.create(sourceReference.getRole(), newSourceNode, oldTargetNode);\n        } else if (sourceReference.getResolveInfo() != null) {\n          newReference = SReference.create(sourceReference.getRole(), newSourceNode, null, null, sourceReference.getResolveInfo());\n        } else {\n          continue;\n        }\n      }\n      newSourceNode.addReference(newReference);\n    }\n  }","id":12381,"modified_method":"private static void processReferencesIn(Map<SNode, SNode> sourceNodesToNewNodes, Set<SReference> allReferences) {\n    for (SReference sourceReference : allReferences) {\n      SNode oldSourceNode = sourceReference.getSourceNode();\n      SNode newSourceNode = sourceNodesToNewNodes.get(oldSourceNode);\n\n      SNode oldTargetNode = sourceReference.getTargetNode();\n      SNode newTargetNode = sourceNodesToNewNodes.get(oldTargetNode);\n\n      SReference newReference;\n      if (newTargetNode != null) {//if our reference points inside our node's subtree\n        newReference = SReference.create(sourceReference.getRole(), newSourceNode, newTargetNode);\n      } else {//otherwise it points out of our node's subtree\n        if (oldTargetNode != null) {\n          newReference = SReference.create(sourceReference.getRole(), newSourceNode, oldTargetNode);\n        } else if (sourceReference.getResolveInfo() != null) {\n          newReference = new StaticReference(sourceReference.getRole(), newSourceNode, null, null, sourceReference.getResolveInfo());\n        } else {\n          continue;\n        }\n      }\n      newSourceNode.addReference(newReference);\n    }\n  }","commit_id":"52f5e186957b49dbaaaf5e72be2a7dd1b640bf1c","url":"https://github.com/JetBrains/MPS"},{"original_method":"SReference createReferenceInModelDoNotAddToSourceNode(SModel model, VisibleModelElements visibleModelElements) {\n    SModelUID importedModelUID = model.getUID();\n    if (myUseUIDs) {\n      if (!myImportedModelInfo.equals(\"-1\")) {\n        importedModelUID = SModelUID.fromString(myImportedModelInfo);\n      }\n    } else if (getImportIndex() > -1) {\n      if (myNotImported) {\n        importedModelUID = visibleModelElements.getModelUID(getImportIndex());\n      } else {\n        importedModelUID = model.getImportedModelUID(getImportIndex());\n      }\n      if (importedModelUID == null) {\n        LOG.error(\"Couldn't create reference from \" + this.getSourceNode().getDebugText() + \" : import for index [\" + getImportIndex() + \"] not found\");\n        return null;\n      }\n    }\n\n    if (this.getExtResolveInfo() == null) {\n      return SReference.create(this.getRole(),\n              this.getSourceNode(),\n              importedModelUID,\n              SNodeId.fromString(this.getTargetId()),\n              this.getResolveInfo());\n    }\n\n    String extResolveInfo = this.getExtResolveInfo();\n    String resolveInfo = ExternalResolver.getHumanFriendlyString(extResolveInfo);\n    SNodeId targetId = ERI2IDConverter.convert(this.getSourceNode(), this.getRole(), extResolveInfo);\n    if (targetId != null) {\n      return SReference.create(this.getRole(),\n              this.getSourceNode(),\n              importedModelUID,\n              targetId,\n              resolveInfo);\n    }\n\n    // couldn't convert\n    if (resolveInfo == null) {\n      resolveInfo = this.getResolveInfo();\n    }\n    return SReference.create(this.getRole(),\n            this.getSourceNode(),\n            importedModelUID,\n            null,\n            resolveInfo);\n  }","id":12382,"modified_method":"SReference createReferenceInModelDoNotAddToSourceNode(SModel model, VisibleModelElements visibleModelElements) {\n    SModelUID importedModelUID = model.getUID();\n    if (myUseUIDs) {\n      if (!myImportedModelInfo.equals(\"-1\")) {\n        importedModelUID = SModelUID.fromString(myImportedModelInfo);\n      }\n    } else if (getImportIndex() > -1) {\n      if (myNotImported) {\n        importedModelUID = visibleModelElements.getModelUID(getImportIndex());\n      } else {\n        importedModelUID = model.getImportedModelUID(getImportIndex());\n      }\n      if (importedModelUID == null) {\n        LOG.error(\"Couldn't create reference from \" + this.getSourceNode().getDebugText() + \" : import for index [\" + getImportIndex() + \"] not found\");\n        return null;\n      }\n    }\n\n    if (this.getExtResolveInfo() == null) {\n      return new StaticReference(this.getRole(),\n              this.getSourceNode(),\n              importedModelUID,\n              SNodeId.fromString(this.getTargetId()),\n              this.getResolveInfo());\n    }\n\n    String extResolveInfo = this.getExtResolveInfo();\n    String resolveInfo = ExternalResolver.getHumanFriendlyString(extResolveInfo);\n    SNodeId targetId = ERI2IDConverter.convert(this.getSourceNode(), this.getRole(), extResolveInfo);\n    if (targetId != null) {\n      return new StaticReference(this.getRole(),\n              this.getSourceNode(),\n              importedModelUID,\n              targetId,\n              resolveInfo);\n    }\n\n    // couldn't convert\n    if (resolveInfo == null) {\n      resolveInfo = this.getResolveInfo();\n    }\n    return new StaticReference(this.getRole(),\n            this.getSourceNode(),\n            importedModelUID,\n            null,\n            resolveInfo);\n  }","commit_id":"52f5e186957b49dbaaaf5e72be2a7dd1b640bf1c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SReference create(String role, SNode sourceNode, SModelUID targetModelUID, SNodeId targetNodeId) {\n    return create(role, sourceNode, targetModelUID, targetNodeId, null);\n  }","id":12383,"modified_method":"public static SReference create(String role, SNode sourceNode, SModelUID targetModelUID, SNodeId targetNodeId) {\n    return new StaticReference(role, sourceNode, targetModelUID, targetNodeId, null);\n  }","commit_id":"52f5e186957b49dbaaaf5e72be2a7dd1b640bf1c","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode cloneInt(SNode inputNode, SModel outputModel, IScope scope, boolean keepOldId) {\n    SNode outputNode = SModelUtil_new.instantiateConceptDeclaration(inputNode.getConceptFqName(), outputModel, scope, false);\n    assert outputNode != null;\n    if (keepOldId) {\n      outputNode.setId(inputNode.getSNodeId());\n    }\n    outputNode.putProperties(inputNode);\n    for (SReference reference : inputNode.getReferences()) {\n      SModelUID targetModelUID = reference.isExternal() ? reference.getTargetModelUID() : outputModel.getUID();\n      if (targetModelUID == null) {\n        LOG.warning(\"broken reference '\" + reference.getRole() + \"' in \" + inputNode.getDebugText(), inputNode);\n      } else {\n        if (reference instanceof StaticReference) {\n          StaticReference reference1 = new StaticReference(reference.getRole(),\n                  outputNode,\n                  targetModelUID,\n                  ((StaticReference) reference).getTargetNodeId(),\n                  reference.getResolveInfo());\n          outputNode.addReference(reference1);\n        } else {\n          LOG.error(\"internal error: can't clone non-static reference '\" + reference.getRole() + \"' in \" + inputNode.getDebugText(), inputNode);\n          LOG.error(\" -- was refernce class : \" + reference.getClass().getName());\n        }\n      }\n    }\n\n    for (SNode child : inputNode.getChildren()) {\n      String role = child.getRole_();\n      assert role != null;\n      outputNode.addChild(role, cloneInt(child, outputModel, scope, keepOldId));\n    }\n    return outputNode;\n  }","id":12384,"modified_method":"private static SNode cloneInt(SNode inputNode, SModel outputModel, IScope scope, boolean keepOldId) {\n    SNode outputNode = SModelUtil_new.instantiateConceptDeclaration(inputNode.getConceptFqName(), outputModel, scope, false);\n    assert outputNode != null;\n    if (keepOldId) {\n      outputNode.setId(inputNode.getSNodeId());\n    }\n    outputNode.putProperties(inputNode);\n    for (SReference reference : inputNode.getReferences()) {\n      SModelUID targetModelUID = reference.isExternal() ? reference.getTargetModelUID() : outputModel.getUID();\n      if (targetModelUID == null) {\n        LOG.warning(\"broken reference '\" + reference.getRole() + \"' in \" + inputNode.getDebugText(), inputNode);\n      } else {\n        if (reference instanceof StaticReference) {\n          StaticReference outputReference = new StaticReference(\n                  reference.getRole(),\n                  outputNode,\n                  targetModelUID,\n                  ((StaticReference) reference).getTargetNodeId(),\n                  reference.getResolveInfo());\n          outputNode.addReference(outputReference);\n        } else if (reference instanceof DynamicReference) {\n          DynamicReference outputReference = new DynamicReference(\n                  reference.getRole(),\n                  outputNode,\n                  targetModelUID,\n                  reference.getResolveInfo());\n          outputNode.addReference(outputReference);\n        } else {\n          LOG.error(\"internal error: can't clone reference '\" + reference.getRole() + \"' in \" + inputNode.getDebugText(), inputNode);\n          LOG.error(\" -- was refernce class : \" + reference.getClass().getName());\n        }\n      }\n    }\n\n    for (SNode child : inputNode.getChildren()) {\n      String role = child.getRole_();\n      assert role != null;\n      outputNode.addChild(role, cloneInt(child, outputModel, scope, keepOldId));\n    }\n    return outputNode;\n  }","commit_id":"53ebbda62657867816c4709bd3f7fe6aab8333c0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void saveReference(Element parentElement, SReference reference, boolean useUIDs, VisibleModelElements visibleModelElements) {\n    assert useUIDs || visibleModelElements != null;\n    SNode node = reference.getSourceNode();\n    Element linkElement = new Element(ModelPersistence.LINK);\n    parentElement.addContent(linkElement);\n    linkElement.setAttribute(ModelPersistence.ROLE, reference.getRole());\n\n    String targetModelInfo = \"\";\n    if (reference.isExternal()) {\n      if (useUIDs) {\n        targetModelInfo = reference.getTargetModelUID().toString() + \"#\";\n      } else {\n        SModelUID targetModelUID = reference.getTargetModelUID();\n        SModel.ImportElement importElement = node.getModel().getImportElement(targetModelUID);\n        if (importElement != null) {\n          int importIndex = importElement.getReferenceID();\n          targetModelInfo = importIndex + \".\";\n        } else {\n          int visibleIndex = visibleModelElements.getVisibleModelIndex(targetModelUID);\n          targetModelInfo = visibleIndex + \"v.\";\n        }\n      }\n    }\n\n    String targetNodeId = (reference instanceof StaticReference) ? ((StaticReference) reference).getTargetNodeId().toString() : \"\";\n    targetNodeId = targetModelInfo + targetNodeId;\n    linkElement.setAttribute(ModelPersistence.TARGET_NODE_ID, targetNodeId);\n    String resolveInfo = reference.getResolveInfo();\n    if (resolveInfo != null) linkElement.setAttribute(ModelPersistence.RESOLVE_INFO, resolveInfo);\n  }","id":12385,"modified_method":"public static void saveReference(Element parentElement, SReference reference, boolean useUIDs, VisibleModelElements visibleModelElements) {\n    assert useUIDs || visibleModelElements != null;\n    SNode node = reference.getSourceNode();\n    Element linkElement = new Element(ModelPersistence.LINK);\n    parentElement.addContent(linkElement);\n    linkElement.setAttribute(ModelPersistence.ROLE, reference.getRole());\n\n    String targetModelInfo = \"\";\n    if (reference.isExternal()) {\n      if (useUIDs) {\n        targetModelInfo = reference.getTargetModelUID().toString() + \"#\";\n      } else {\n        SModelUID targetModelUID = reference.getTargetModelUID();\n        SModel.ImportElement importElement = node.getModel().getImportElement(targetModelUID);\n        if (importElement != null) {\n          int importIndex = importElement.getReferenceID();\n          targetModelInfo = importIndex + \".\";\n        } else {\n          int visibleIndex = visibleModelElements.getVisibleModelIndex(targetModelUID);\n          targetModelInfo = visibleIndex + \"v.\";\n        }\n      }\n    }\n\n    String targetNodeId = (reference instanceof StaticReference) ? ((StaticReference) reference).getTargetNodeId().toString() : \"^\";\n    targetNodeId = targetModelInfo + targetNodeId;\n    linkElement.setAttribute(ModelPersistence.TARGET_NODE_ID, targetNodeId);\n    String resolveInfo = reference.getResolveInfo();\n    if (resolveInfo != null) linkElement.setAttribute(ModelPersistence.RESOLVE_INFO, resolveInfo);\n  }","commit_id":"53ebbda62657867816c4709bd3f7fe6aab8333c0","url":"https://github.com/JetBrains/MPS"},{"original_method":"SReference createReferenceInModelDoNotAddToSourceNode(SModel model, VisibleModelElements visibleModelElements) {\n    SModelUID importedModelUID = model.getUID();\n    if (myUseUIDs) {\n      if (!myImportedModelInfo.equals(\"-1\")) {\n        importedModelUID = SModelUID.fromString(myImportedModelInfo);\n      }\n    } else if (getImportIndex() > -1) {\n      if (myNotImported) {\n        importedModelUID = visibleModelElements.getModelUID(getImportIndex());\n      } else {\n        importedModelUID = model.getImportedModelUID(getImportIndex());\n      }\n      if (importedModelUID == null) {\n        LOG.error(\"couldn't create reference '\" + this.getRole() + \"' from \" + this.getSourceNode().getDebugText() + \" : import for index [\" + getImportIndex() + \"] not found\");\n        return null;\n      }\n    }\n\n    if (this.getTargetId() == null) {\n      LOG.error(\"couldn't create reference '\" + this.getRole() + \"' from \" + this.getSourceNode().getDebugText() + \" : target node id is null\");\n      return null;\n    }\n\n    return SReference.create(this.getRole(),\n            this.getSourceNode(),\n            importedModelUID,\n            SNodeId.fromString(this.getTargetId()),\n            this.getResolveInfo());\n  }","id":12386,"modified_method":"SReference createReferenceInModelDoNotAddToSourceNode(SModel model, VisibleModelElements visibleModelElements) {\n    SModelUID importedModelUID = model.getUID();\n    if (myUseUIDs) {\n      if (!myImportedModelInfo.equals(\"-1\")) {\n        importedModelUID = SModelUID.fromString(myImportedModelInfo);\n      }\n    } else if (getImportIndex() > -1) {\n      if (myNotImported) {\n        importedModelUID = visibleModelElements.getModelUID(getImportIndex());\n      } else {\n        importedModelUID = model.getImportedModelUID(getImportIndex());\n      }\n      if (importedModelUID == null) {\n        LOG.error(\"couldn't create reference '\" + this.getRole() + \"' from \" + this.getSourceNode().getDebugText() + \" : import for index [\" + getImportIndex() + \"] not found\");\n        return null;\n      }\n    }\n\n    if (this.getTargetId() == null) {\n      LOG.error(\"couldn't create reference '\" + this.getRole() + \"' from \" + this.getSourceNode().getDebugText() + \" : target node id is null\");\n      return null;\n    }\n\n//    return SReference.create(this.getRole(),\n//            this.getSourceNode(),\n//            importedModelUID,\n//            SNodeId.fromString(this.getTargetId()),\n//            this.getResolveInfo());\n\n    if (this.getTargetId().equals(\"^\")) {\n      return new DynamicReference(\n              this.getRole(),\n              this.getSourceNode(),\n              importedModelUID,\n              this.getResolveInfo());\n    }\n    return new StaticReference(\n            this.getRole(),\n            this.getSourceNode(),\n            importedModelUID,\n            SNodeId.fromString(this.getTargetId()),\n            this.getResolveInfo());\n  }","commit_id":"53ebbda62657867816c4709bd3f7fe6aab8333c0","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * @param role - genuine role\n   */\n  public static boolean isDynamicResolve(String role, SNode sourceNode) {\n    return false;\n\n//    LinkDeclaration link = new ConceptAndSuperConceptsScope(sourceNode.getConceptDeclarationAdapter()).getMostSpecificLinkDeclarationByRole(role);\n//    if (link == null) {\n//      LOG.error(\"couldn't find link declaration '\" + role + \"' in concept '\" + sourceNode.getConceptFqName() + \"'\", sourceNode);\n//      return false;\n//    }\n//\n//    AbstractConceptDeclaration target = link.getTarget();\n//    if (target == null) {\n//      LOG.error(\"link target is not defined\", link);\n//      return false;\n//    }\n//\n//    return SModelUtil_new.isAssignableConcept(target, IResolveInfo.concept);\n  }","id":12387,"modified_method":"/**\n   * @param role - genuine role\n   */\n  public static boolean isDynamicResolve(String role, SNode sourceNode) {\n//     return false;  // disable dynamic references\n    \n    LinkDeclaration link = new ConceptAndSuperConceptsScope(sourceNode.getConceptDeclarationAdapter()).getMostSpecificLinkDeclarationByRole(role);\n    if (link == null) {\n      LOG.error(\"couldn't find link declaration '\" + role + \"' in concept '\" + sourceNode.getConceptFqName() + \"'\", sourceNode);\n      return false;\n    }\n\n    AbstractConceptDeclaration target = link.getTarget();\n    if (target == null) {\n      LOG.error(\"link target is not defined\", link);\n      return false;\n    }\n\n    return SModelUtil_new.isAssignableConcept(target, IResolveInfo.concept);\n  }","commit_id":"53ebbda62657867816c4709bd3f7fe6aab8333c0","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n\t * Generates and appends html for a single choice into the provided buffer\n\t * \n\t * @param buffer\n\t *            Appending string buffer that will have the generated html appended\n\t * @param choice\n\t *            Choice object\n\t * @param index\n\t *            The index of this option\n\t * @param selected\n\t *            The currently selected string value\n\t */\n\tprotected void appendOptionHtml(AppendingStringBuffer buffer, Object choice, int index,\n\t\t\tString selected)\n\t{\n\t\tObject objectValue = renderer.getDisplayValue(choice);\n\t\tClass objectClass = objectValue == null ? null : objectValue.getClass();\n\t\tfinal String displayValue = getConverter(objectClass).convertToString(objectValue,\n\t\t\t\tgetLocale());\n\t\tbuffer.append(\"\\n<option \");\n\t\tif (isSelected(choice, index, selected))\n\t\t{\n\t\t\tbuffer.append(\"selected=\\\"selected\\\" \");\n\t\t}\n\t\tif (isDisabled(choice, index, selected))\n\t\t{\n\t\t\tbuffer.append(\"disabled=\\\"disabled\\\" \");\n\t\t}\n\t\tbuffer.append(\"value=\\\"\");\n\t\tbuffer.append(Strings.escapeMarkup(renderer.getIdValue(choice, index)));\n\t\tbuffer.append(\"\\\">\");\n\n\t\tString display = displayValue;\n\t\tif (localizeDisplayValues())\n\t\t{\n\t\t\tdisplay = getLocalizer().getString(displayValue, this, displayValue);\n\t\t}\n\t\tCharSequence escaped = display;\n\t\tif (getEscapeModelStrings())\n\t\t{\n\t\t\tescaped = Strings.escapeMarkup(display, false, true);\n\t\t}\n\t\tbuffer.append(escaped);\n\t\tbuffer.append(\"<\/option>\");\n\t}","id":12388,"modified_method":"/**\n\t * Generates and appends html for a single choice into the provided buffer\n\t * \n\t * @param buffer\n\t *            Appending string buffer that will have the generated html appended\n\t * @param choice\n\t *            Choice object\n\t * @param index\n\t *            The index of this option\n\t * @param selected\n\t *            The currently selected string value\n\t */\n\tprotected void appendOptionHtml(AppendingStringBuffer buffer, Object choice, int index,\n\t\t\tString selected)\n\t{\n\t\tObject objectValue = renderer.getDisplayValue(choice);\n\t\tClass objectClass = objectValue == null ? null : objectValue.getClass();\n\t\tString displayValue = \"\";\n\t\tif (objectClass != null && objectClass != String.class)\n\t\t{\n\t\t\tdisplayValue = getConverter(objectClass).convertToString(objectValue, getLocale());\n\t\t}\n\t\telse if (objectValue != null)\n\t\t{\n\t\t\tdisplayValue = objectValue.toString();\n\t\t}\n\t\tbuffer.append(\"\\n<option \");\n\t\tif (isSelected(choice, index, selected))\n\t\t{\n\t\t\tbuffer.append(\"selected=\\\"selected\\\" \");\n\t\t}\n\t\tif (isDisabled(choice, index, selected))\n\t\t{\n\t\t\tbuffer.append(\"disabled=\\\"disabled\\\" \");\n\t\t}\n\t\tbuffer.append(\"value=\\\"\");\n\t\tbuffer.append(Strings.escapeMarkup(renderer.getIdValue(choice, index)));\n\t\tbuffer.append(\"\\\">\");\n\n\t\tString display = displayValue;\n\t\tif (localizeDisplayValues())\n\t\t{\n\t\t\tdisplay = getLocalizer().getString(displayValue, this, displayValue);\n\t\t}\n\t\tCharSequence escaped = display;\n\t\tif (getEscapeModelStrings())\n\t\t{\n\t\t\tescaped = Strings.escapeMarkup(display, false, true);\n\t\t}\n\t\tbuffer.append(escaped);\n\t\tbuffer.append(\"<\/option>\");\n\t}","commit_id":"e75fd69c6c4a7eb1633cdff46a0b7303f2cccf38","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see org.apache.wicket.Component#onComponentTagBody(org.apache.wicket.markup.MarkupStream,\n\t *      org.apache.wicket.markup.ComponentTag)\n\t */\n\tprotected final void onComponentTagBody(final MarkupStream markupStream,\n\t\t\tfinal ComponentTag openTag)\n\t{\n\t\t// Iterate through choices\n\t\tfinal List choices = getChoices();\n\n\t\t// Buffer to hold generated body\n\t\tfinal AppendingStringBuffer buffer = new AppendingStringBuffer(70 * (choices.size() + 1));\n\n\t\t// Value of this choice\n\t\tfinal String selected = getValue();\n\n\t\t// Loop through choices\n\t\tfor (int index = 0; index < choices.size(); index++)\n\t\t{\n\t\t\t// Get next choice\n\t\t\tfinal Object choice = choices.get(index);\n\n\t\t\tObject displayValue = getChoiceRenderer().getDisplayValue(choice);\n\t\t\tClass objectClass = displayValue == null ? null : displayValue.getClass();\n\t\t\t// Get label for choice\n\t\t\tfinal String label = getConverter(objectClass).convertToString(displayValue,\n\t\t\t\t\tgetLocale());\n\n\t\t\t// If there is a display value for the choice, then we know that the\n\t\t\t// choice is automatic in some way. If label is /null/ then we know\n\t\t\t// that the choice is a manually created checkbox tag at some random\n\t\t\t// location in the page markup!\n\t\t\tif (label != null)\n\t\t\t{\n\t\t\t\t// Append option suffix\n\t\t\t\tbuffer.append(getPrefix());\n\n\t\t\t\tString id = getChoiceRenderer().getIdValue(choice, index);\n\t\t\t\tfinal String idAttr = getInputName() + \"_\" + id;\n\n\t\t\t\t// Add checkbox element\n\t\t\t\tbuffer.append(\"<input name=\\\"\").append(getInputName()).append(\"\\\"\").append(\n\t\t\t\t\t\t\" type=\\\"checkbox\\\"\").append(\n\t\t\t\t\t\t(isSelected(choice, index, selected) ? \" checked=\\\"checked\\\"\" : \"\"))\n\t\t\t\t\t\t.append((isEnabled() ? \"\" : \" disabled=\\\"disabled\\\"\")).append(\" value=\\\"\")\n\t\t\t\t\t\t.append(id).append(\"\\\" id=\\\"\").append(idAttr).append(\"\\\"/>\");\n\n\t\t\t\t// Add label for checkbox\n\t\t\t\tString display = label;\n\t\t\t\tif (localizeDisplayValues())\n\t\t\t\t{\n\t\t\t\t\tdisplay = getLocalizer().getString(label, this, label);\n\t\t\t\t}\n\n\t\t\t\tCharSequence escaped;\n\t\t\t\tif (isEscapeLabelMarkup())\n\t\t\t\t{\n\t\t\t\t\tescaped = Strings.escapeMarkup(display, false, true);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tescaped = display;\n\t\t\t\t}\n\n\t\t\t\tbuffer.append(\"<label for=\\\"\");\n\t\t\t\tbuffer.append(idAttr);\n\t\t\t\tbuffer.append(\"\\\">\").append(escaped).append(\"<\/label>\");\n\n\t\t\t\t// Append option suffix\n\t\t\t\tbuffer.append(getSuffix());\n\t\t\t}\n\t\t}\n\n\t\t// Replace body\n\t\treplaceComponentTagBody(markupStream, openTag, buffer);\n\t}","id":12389,"modified_method":"/**\n\t * @see org.apache.wicket.Component#onComponentTagBody(org.apache.wicket.markup.MarkupStream,\n\t *      org.apache.wicket.markup.ComponentTag)\n\t */\n\tprotected final void onComponentTagBody(final MarkupStream markupStream,\n\t\t\tfinal ComponentTag openTag)\n\t{\n\t\t// Iterate through choices\n\t\tfinal List choices = getChoices();\n\n\t\t// Buffer to hold generated body\n\t\tfinal AppendingStringBuffer buffer = new AppendingStringBuffer(70 * (choices.size() + 1));\n\n\t\t// Value of this choice\n\t\tfinal String selected = getValue();\n\n\t\t// Loop through choices\n\t\tfor (int index = 0; index < choices.size(); index++)\n\t\t{\n\t\t\t// Get next choice\n\t\t\tfinal Object choice = choices.get(index);\n\n\t\t\tObject displayValue = getChoiceRenderer().getDisplayValue(choice);\n\t\t\tClass objectClass = displayValue == null ? null : displayValue.getClass();\n\t\t\t// Get label for choice\n\t\t\tString label = \"\";\n\t\t\tif (objectClass != null && objectClass != String.class)\n\t\t\t{\n\t\t\t\tlabel = getConverter(objectClass).convertToString(displayValue, getLocale());\n\t\t\t}\n\t\t\telse if (displayValue != null)\n\t\t\t{\n\t\t\t\tlabel = displayValue.toString();\n\t\t\t}\n\n\t\t\t// If there is a display value for the choice, then we know that the\n\t\t\t// choice is automatic in some way. If label is /null/ then we know\n\t\t\t// that the choice is a manually created checkbox tag at some random\n\t\t\t// location in the page markup!\n\t\t\tif (label != null)\n\t\t\t{\n\t\t\t\t// Append option suffix\n\t\t\t\tbuffer.append(getPrefix());\n\n\t\t\t\tString id = getChoiceRenderer().getIdValue(choice, index);\n\t\t\t\tfinal String idAttr = getInputName() + \"_\" + id;\n\n\t\t\t\t// Add checkbox element\n\t\t\t\tbuffer.append(\"<input name=\\\"\").append(getInputName()).append(\"\\\"\").append(\n\t\t\t\t\t\t\" type=\\\"checkbox\\\"\").append(\n\t\t\t\t\t\t(isSelected(choice, index, selected) ? \" checked=\\\"checked\\\"\" : \"\"))\n\t\t\t\t\t\t.append((isEnabled() ? \"\" : \" disabled=\\\"disabled\\\"\")).append(\" value=\\\"\")\n\t\t\t\t\t\t.append(id).append(\"\\\" id=\\\"\").append(idAttr).append(\"\\\"/>\");\n\n\t\t\t\t// Add label for checkbox\n\t\t\t\tString display = label;\n\t\t\t\tif (localizeDisplayValues())\n\t\t\t\t{\n\t\t\t\t\tdisplay = getLocalizer().getString(label, this, label);\n\t\t\t\t}\n\n\t\t\t\tCharSequence escaped;\n\t\t\t\tif (isEscapeLabelMarkup())\n\t\t\t\t{\n\t\t\t\t\tescaped = Strings.escapeMarkup(display, false, true);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tescaped = display;\n\t\t\t\t}\n\n\t\t\t\tbuffer.append(\"<label for=\\\"\");\n\t\t\t\tbuffer.append(idAttr);\n\t\t\t\tbuffer.append(\"\\\">\").append(escaped).append(\"<\/label>\");\n\n\t\t\t\t// Append option suffix\n\t\t\t\tbuffer.append(getSuffix());\n\t\t\t}\n\t\t}\n\n\t\t// Replace body\n\t\treplaceComponentTagBody(markupStream, openTag, buffer);\n\t}","commit_id":"e75fd69c6c4a7eb1633cdff46a0b7303f2cccf38","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see org.apache.wicket.Component#onComponentTagBody(MarkupStream, ComponentTag)\n\t */\n\tprotected final void onComponentTagBody(final MarkupStream markupStream,\n\t\t\tfinal ComponentTag openTag)\n\t{\n\t\t// Iterate through choices\n\t\tfinal List choices = getChoices();\n\n\t\t// Buffer to hold generated body\n\t\tfinal AppendingStringBuffer buffer = new AppendingStringBuffer((choices.size() + 1) * 70);\n\n\t\t// The selected value\n\t\tfinal String selected = getValue();\n\n\t\t// Loop through choices\n\t\tfor (int index = 0; index < choices.size(); index++)\n\t\t{\n\t\t\t// Get next choice\n\t\t\tfinal Object choice = choices.get(index);\n\n\t\t\tObject displayValue = getChoiceRenderer().getDisplayValue(choice);\n\t\t\tClass objectClass = displayValue == null ? null : displayValue.getClass();\n\t\t\t// Get label for choice\n\t\t\tfinal String label = getConverter(objectClass).convertToString(displayValue,\n\t\t\t\t\tgetLocale());\n\n\t\t\t// If there is a display value for the choice, then we know that the\n\t\t\t// choice is automatic in some way. If label is /null/ then we know\n\t\t\t// that the choice is a manually created radio tag at some random\n\t\t\t// location in the page markup!\n\t\t\tif (label != null)\n\t\t\t{\n\t\t\t\t// Append option suffix\n\t\t\t\tbuffer.append(getPrefix());\n\n\t\t\t\tString id = getChoiceRenderer().getIdValue(choice, index);\n\t\t\t\tfinal String idAttr = getInputName() + \"_\" + id;\n\n\t\t\t\t// Add radio tag\n\t\t\t\tbuffer.append(\"<input name=\\\"\").append(getInputName()).append(\"\\\"\").append(\n\t\t\t\t\t\t\" type=\\\"radio\\\"\").append(\n\t\t\t\t\t\t(isSelected(choice, index, selected) ? \" checked=\\\"checked\\\"\" : \"\"))\n\t\t\t\t\t\t.append((isEnabled() ? \"\" : \" disabled=\\\"disabled\\\"\")).append(\" value=\\\"\")\n\t\t\t\t\t\t.append(id).append(\"\\\" id=\\\"\").append(idAttr).append(\"\\\"\");\n\n\t\t\t\t// Should a roundtrip be made (have onSelectionChanged called)\n\t\t\t\t// when the option is clicked?\n\t\t\t\tif (wantOnSelectionChangedNotifications())\n\t\t\t\t{\n\t\t\t\t\tCharSequence url = urlFor(IOnChangeListener.INTERFACE);\n\n\t\t\t\t\tForm form = (Form)findParent(Form.class);\n\t\t\t\t\tif (form != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tRequestContext rc = RequestContext.get();\n\t\t\t\t\t\tif (rc.isPortletRequest())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// restore url back to real wicket path as its going to be interpreted\n\t\t\t\t\t\t\t// by the form itself\n\t\t\t\t\t\t\turl = ((PortletRequestContext)rc).getLastEncodedPath();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuffer.append(\" onclick=\\\"\").append(form.getJsForInterfaceUrl(url)).append(\n\t\t\t\t\t\t\t\t\";\\\"\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// TODO: following doesn't work with portlets, should be posted to a dynamic\n\t\t\t\t\t\t// hidden form\n\t\t\t\t\t\t// with an ActionURL or something\n\t\t\t\t\t\t// NOTE: do not encode the url as that would give\n\t\t\t\t\t\t// invalid JavaScript\n\t\t\t\t\t\tbuffer.append(\" onclick=\\\"window.location.href='\").append(url)\n\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\t(url.toString().indexOf('?') > -1 ? \"&amp;\" : \"?\") +\n\t\t\t\t\t\t\t\t\t\t\t\tgetInputName()).append(\"=\").append(id).append(\n\t\t\t\t\t\t\t\t\t\t\"';\\\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbuffer.append(\"/>\");\n\n\t\t\t\t// Add label for radio button\n\t\t\t\tString display = label;\n\t\t\t\tif (localizeDisplayValues())\n\t\t\t\t{\n\t\t\t\t\tdisplay = getLocalizer().getString(label, this, label);\n\t\t\t\t}\n\t\t\t\tCharSequence escaped = Strings.escapeMarkup(display, false, true);\n\t\t\t\tbuffer.append(\"<label for=\\\"\").append(idAttr).append(\"\\\">\").append(escaped).append(\n\t\t\t\t\t\t\"<\/label>\");\n\n\t\t\t\t// Append option suffix\n\t\t\t\tbuffer.append(getSuffix());\n\t\t\t}\n\t\t}\n\n\t\t// Replace body\n\t\treplaceComponentTagBody(markupStream, openTag, buffer);\n\t}","id":12390,"modified_method":"/**\n\t * @see org.apache.wicket.Component#onComponentTagBody(MarkupStream, ComponentTag)\n\t */\n\tprotected final void onComponentTagBody(final MarkupStream markupStream,\n\t\t\tfinal ComponentTag openTag)\n\t{\n\t\t// Iterate through choices\n\t\tfinal List choices = getChoices();\n\n\t\t// Buffer to hold generated body\n\t\tfinal AppendingStringBuffer buffer = new AppendingStringBuffer((choices.size() + 1) * 70);\n\n\t\t// The selected value\n\t\tfinal String selected = getValue();\n\n\t\t// Loop through choices\n\t\tfor (int index = 0; index < choices.size(); index++)\n\t\t{\n\t\t\t// Get next choice\n\t\t\tfinal Object choice = choices.get(index);\n\n\t\t\tObject displayValue = getChoiceRenderer().getDisplayValue(choice);\n\t\t\tClass objectClass = displayValue == null ? null : displayValue.getClass();\n\t\t\t// Get label for choice\n\t\t\tString label = \"\";\n\t\t\tif (objectClass != null && objectClass != String.class)\n\t\t\t{\n\t\t\t\tlabel = getConverter(objectClass).convertToString(displayValue, getLocale());\n\t\t\t}\n\t\t\telse if (displayValue != null)\n\t\t\t{\n\t\t\t\tlabel = displayValue.toString();\n\t\t\t}\n\n\t\t\t// If there is a display value for the choice, then we know that the\n\t\t\t// choice is automatic in some way. If label is /null/ then we know\n\t\t\t// that the choice is a manually created radio tag at some random\n\t\t\t// location in the page markup!\n\t\t\tif (label != null)\n\t\t\t{\n\t\t\t\t// Append option suffix\n\t\t\t\tbuffer.append(getPrefix());\n\n\t\t\t\tString id = getChoiceRenderer().getIdValue(choice, index);\n\t\t\t\tfinal String idAttr = getInputName() + \"_\" + id;\n\n\t\t\t\t// Add radio tag\n\t\t\t\tbuffer.append(\"<input name=\\\"\").append(getInputName()).append(\"\\\"\").append(\n\t\t\t\t\t\t\" type=\\\"radio\\\"\").append(\n\t\t\t\t\t\t(isSelected(choice, index, selected) ? \" checked=\\\"checked\\\"\" : \"\"))\n\t\t\t\t\t\t.append((isEnabled() ? \"\" : \" disabled=\\\"disabled\\\"\")).append(\" value=\\\"\")\n\t\t\t\t\t\t.append(id).append(\"\\\" id=\\\"\").append(idAttr).append(\"\\\"\");\n\n\t\t\t\t// Should a roundtrip be made (have onSelectionChanged called)\n\t\t\t\t// when the option is clicked?\n\t\t\t\tif (wantOnSelectionChangedNotifications())\n\t\t\t\t{\n\t\t\t\t\tCharSequence url = urlFor(IOnChangeListener.INTERFACE);\n\n\t\t\t\t\tForm form = (Form)findParent(Form.class);\n\t\t\t\t\tif (form != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tRequestContext rc = RequestContext.get();\n\t\t\t\t\t\tif (rc.isPortletRequest())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// restore url back to real wicket path as its going to be interpreted\n\t\t\t\t\t\t\t// by the form itself\n\t\t\t\t\t\t\turl = ((PortletRequestContext)rc).getLastEncodedPath();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuffer.append(\" onclick=\\\"\").append(form.getJsForInterfaceUrl(url)).append(\n\t\t\t\t\t\t\t\t\";\\\"\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// TODO: following doesn't work with portlets, should be posted to a dynamic\n\t\t\t\t\t\t// hidden form\n\t\t\t\t\t\t// with an ActionURL or something\n\t\t\t\t\t\t// NOTE: do not encode the url as that would give\n\t\t\t\t\t\t// invalid JavaScript\n\t\t\t\t\t\tbuffer.append(\" onclick=\\\"window.location.href='\").append(url)\n\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\t(url.toString().indexOf('?') > -1 ? \"&amp;\" : \"?\") +\n\t\t\t\t\t\t\t\t\t\t\t\tgetInputName()).append(\"=\").append(id).append(\n\t\t\t\t\t\t\t\t\t\t\"';\\\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbuffer.append(\"/>\");\n\n\t\t\t\t// Add label for radio button\n\t\t\t\tString display = label;\n\t\t\t\tif (localizeDisplayValues())\n\t\t\t\t{\n\t\t\t\t\tdisplay = getLocalizer().getString(label, this, label);\n\t\t\t\t}\n\t\t\t\tCharSequence escaped = Strings.escapeMarkup(display, false, true);\n\t\t\t\tbuffer.append(\"<label for=\\\"\").append(idAttr).append(\"\\\">\").append(escaped).append(\n\t\t\t\t\t\t\"<\/label>\");\n\n\t\t\t\t// Append option suffix\n\t\t\t\tbuffer.append(getSuffix());\n\t\t\t}\n\t\t}\n\n\t\t// Replace body\n\t\treplaceComponentTagBody(markupStream, openTag, buffer);\n\t}","commit_id":"e75fd69c6c4a7eb1633cdff46a0b7303f2cccf38","url":"https://github.com/apache/wicket"},{"original_method":"static public Test suite() throws IOException {\n        // the suite made here will all be using the tests from this class\n        MultiConfigSuiteBuilder builder = new MultiConfigSuiteBuilder(TestStopNode.class);\n\n        // build up a project builder for the workload\n        VoltProjectBuilder project = getBuilderForTest();\n        boolean success;\n        //Lets tolerate 3 node failures.\n        m_config = new LocalCluster(\"decimal-default.jar\", 4, 5, 3, BackendTarget.NATIVE_EE_JNI);\n        m_config.setHasLocalServer(true);\n        success = m_config.compile(project);\n        assertTrue(success);\n\n        // add this config to the set of tests to run\n        builder.addServerConfig(m_config);\n        return builder;\n    }","id":12391,"modified_method":"static public Test suite() throws IOException {\n        // the suite made here will all be using the tests from this class\n        MultiConfigSuiteBuilder builder = new MultiConfigSuiteBuilder(TestStopNode.class);\n\n        // build up a project builder for the workload\n        VoltProjectBuilder project = getBuilderForTest();\n        boolean success;\n        //Lets tolerate 3 node failures.\n        if (!MiscUtils.isPro()) {\n            kfactor = 0;\n        }\n        m_config = new LocalCluster(\"decimal-default.jar\", 4, 5, kfactor, BackendTarget.NATIVE_EE_JNI);\n        m_config.setHasLocalServer(true);\n        success = m_config.compile(project);\n        assertTrue(success);\n\n        // add this config to the set of tests to run\n        builder.addServerConfig(m_config);\n        return builder;\n    }","commit_id":"eafb4e8796eae9bdb4904860e6df4aee485da5e0","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testStopNode() throws Exception {\n        Client client = ClientFactory.createClient();\n\n        client.createConnection(\"localhost\", m_config.port(0));\n\n        try {\n            CountDownLatch cdl = new CountDownLatch(1);\n            client.callProcedure(new StopCallBack(cdl, ClientResponse.SUCCESS, 4), \"@StopNode\", 4);\n            cdl.await();\n            waitForHostToBeGone(4);\n            cdl = new CountDownLatch(1);\n            client.callProcedure(new StopCallBack(cdl, ClientResponse.SUCCESS, 3), \"@StopNode\", 3);\n            cdl.await();\n            waitForHostToBeGone(3);\n            cdl = new CountDownLatch(1);\n            client.callProcedure(new StopCallBack(cdl, ClientResponse.SUCCESS, 2), \"@StopNode\", 2);\n            cdl.await();\n            waitForHostToBeGone(2);\n            client.callProcedure(\"@SystemInformation\", \"overview\");\n        } catch (Exception ex) {\n            //We should not get here\n            fail();\n            ex.printStackTrace();\n        }\n        boolean lostConnect = false;\n        try {\n            CountDownLatch cdl = new CountDownLatch(3);\n            //Stop a node that should stay up\n            client.callProcedure(new StopCallBack(cdl, ClientResponse.GRACEFUL_FAILURE, 1), \"@StopNode\", 1);\n            //Stop already stopped node.\n            client.callProcedure(new StopCallBack(cdl, ClientResponse.GRACEFUL_FAILURE, 4), \"@StopNode\", 4);\n            //Stop a node that should stay up\n            client.callProcedure(new StopCallBack(cdl, ClientResponse.GRACEFUL_FAILURE, 0), \"@StopNode\", 0);\n            VoltTable tab = client.callProcedure(\"@SystemInformation\", \"overview\").getResults()[0];\n            cdl.await();\n        } catch (Exception pce) {\n            pce.printStackTrace();\n            lostConnect = pce.getMessage().contains(\"was lost before a response was received\");\n        }\n        //We should never lose contact.\n        assertFalse(lostConnect);\n    }","id":12392,"modified_method":"public void testStopNode() throws Exception {\n        Client client = ClientFactory.createClient();\n\n        client.createConnection(\"localhost\", m_config.port(0));\n\n        try {\n            CountDownLatch cdl = new CountDownLatch(1);\n            byte expectedResponse = (kfactor > 0) ? ClientResponse.SUCCESS : ClientResponse.GRACEFUL_FAILURE;\n            client.callProcedure(new StopCallBack(cdl, expectedResponse, 4), \"@StopNode\", 4);\n            cdl.await();\n            if (expectedResponse == ClientResponse.SUCCESS) {\n                waitForHostToBeGone(4);\n            }\n            cdl = new CountDownLatch(1);\n            client.callProcedure(new StopCallBack(cdl, expectedResponse, 3), \"@StopNode\", 3);\n            cdl.await();\n            if (expectedResponse == ClientResponse.SUCCESS) {\n                waitForHostToBeGone(3);\n            }\n            cdl = new CountDownLatch(1);\n            client.callProcedure(new StopCallBack(cdl, expectedResponse, 2), \"@StopNode\", 2);\n            cdl.await();\n            if (expectedResponse == ClientResponse.SUCCESS) {\n                waitForHostToBeGone(2);\n            }\n            client.callProcedure(\"@SystemInformation\", \"overview\");\n        } catch (Exception ex) {\n            //We should not get here\n            fail();\n            ex.printStackTrace();\n        }\n        boolean lostConnect = false;\n        try {\n            CountDownLatch cdl = new CountDownLatch(3);\n            //Stop a node that should stay up\n            client.callProcedure(new StopCallBack(cdl, ClientResponse.GRACEFUL_FAILURE, 1), \"@StopNode\", 1);\n            //Stop already stopped node.\n            client.callProcedure(new StopCallBack(cdl, ClientResponse.GRACEFUL_FAILURE, 4), \"@StopNode\", 4);\n            //Stop a node that should stay up\n            client.callProcedure(new StopCallBack(cdl, ClientResponse.GRACEFUL_FAILURE, 0), \"@StopNode\", 0);\n            client.callProcedure(\"@SystemInformation\", \"overview\");\n            client.drain();\n            cdl.await();\n        } catch (Exception pce) {\n            pce.printStackTrace();\n            lostConnect = pce.getMessage().contains(\"was lost before a response was received\");\n        }\n        //We should never lose contact.\n        assertFalse(lostConnect);\n    }","commit_id":"eafb4e8796eae9bdb4904860e6df4aee485da5e0","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tList<Long> paths = readPaths( session );\n\t\t\n\t\tNode currentNode = getCurrentNode( session );\n\t\tNode newNode = null;\n\t\tif ( parser.arguments().isEmpty() )\n\t\t{\n\t\t\tthrow new RuntimeException( \"fix this\" );\n\t\t\t// newNode = NodeManager.getManager().getReferenceNode();\n\t\t\t// paths.clear();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString arg = parser.arguments().get( 0 );\n\t\t\tlong newId = currentNode.getId();\n\t\t\tif ( arg.equals( \"..\" )  )\n\t\t\t{\n\t\t\t\tif ( paths.size() > 0 )\n\t\t\t\t{\n\t\t\t\t\tnewId = paths.remove( paths.size() - 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( arg.equals( \".\" ) )\n\t\t\t{\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnewId = Long.parseLong( arg );\n\t\t\t\tif ( newId == currentNode.getId() )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Can't cd to the current node\" );\n\t\t\t\t}\n\t\t\t\tboolean absolute = parser.options().containsKey( \"a\" );\n\t\t\t\tif ( !absolute && !this.nodeIsConnected( currentNode, newId ) )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Node \" + newId +\n\t\t\t\t\t\t\" isn't connected to the current node\" );\n\t\t\t\t}\n\t\t\t\tpaths.add( currentNode.getId() );\n\t\t\t}\n\t\t\tnewNode = this.getNodeById( newId );\n\t\t}\n\t\t\n\t\tsetCurrentNode( session, newNode );\n\t\tsession.set( WORKING_DIR_KEY, this.makePath( paths ) );\n\t\treturn null;\n\t}","id":12393,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tList<Long> paths = readPaths( session );\n\t\t\n\t\tNode currentNode = getCurrentNode( session );\n\t\tNode newNode = null;\n\t\tif ( parser.arguments().isEmpty() )\n\t\t{\n\t\t\tnewNode = getNeoServer().getNeo().getReferenceNode();\n\t\t\tpaths.clear();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString arg = parser.arguments().get( 0 );\n\t\t\tlong newId = currentNode.getId();\n\t\t\tif ( arg.equals( \"..\" )  )\n\t\t\t{\n\t\t\t\tif ( paths.size() > 0 )\n\t\t\t\t{\n\t\t\t\t\tnewId = paths.remove( paths.size() - 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( arg.equals( \".\" ) )\n\t\t\t{\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnewId = Long.parseLong( arg );\n\t\t\t\tif ( newId == currentNode.getId() )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Can't cd to the current node\" );\n\t\t\t\t}\n\t\t\t\tboolean absolute = parser.options().containsKey( \"a\" );\n\t\t\t\tif ( !absolute && !this.nodeIsConnected( currentNode, newId ) )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Node \" + newId +\n\t\t\t\t\t\t\" isn't connected to the current node\" );\n\t\t\t\t}\n\t\t\t\tpaths.add( currentNode.getId() );\n\t\t\t}\n\t\t\tnewNode = this.getNodeById( newId );\n\t\t}\n\t\t\n\t\tsetCurrentNode( session, newNode );\n\t\tsession.set( WORKING_DIR_KEY, this.makePath( paths ) );\n\t\treturn null;\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static List<Long> readPaths( Session session ) throws RemoteException\n\t{\n\t\tList<Long> list = new ArrayList<Long>();\n\t\tString path = ( String ) session.get( WORKING_DIR_KEY );\n\t\tif ( path != null && path.trim().length() > 0 )\n\t\t{\n\t\t\tfor ( String id : path.split( \",\" ) )\n\t\t\t{\n\t\t\t\tlist.add( new Long( id ) );\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","id":12394,"modified_method":"/**\n\t * Reads the session variable specified in {@link #WORKING_DIR_KEY} and\n\t * returns it as a list of node ids.\n\t * @param session the session to read from.\n\t * @return the working directory as a list.\n\t * @throws RemoteException if an RMI error occurs.\n\t */\n\tpublic static List<Long> readPaths( Session session ) throws RemoteException\n\t{\n\t\tList<Long> list = new ArrayList<Long>();\n\t\tString path = ( String ) session.get( WORKING_DIR_KEY );\n\t\tif ( path != null && path.trim().length() > 0 )\n\t\t{\n\t\t\tfor ( String id : path.split( \",\" ) )\n\t\t\t{\n\t\t\t\tlist.add( new Long( id ) );\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Cd()\n\t{\n\t\tthis.addValueType( \"a\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Absolute id, doesn't need to be connected to current node\" ) );\n\t}","id":12395,"modified_method":"/**\n\t * Constructs a new application.\n\t */\n\tpublic Cd()\n\t{\n\t\tthis.addValueType( \"a\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Absolute id, doesn't need to be connected to current node\" ) );\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Ls()\n\t{\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Direction filter for relationships: \" +\n\t\t\tthis.directionAlternatives() ) );\n\t\tthis.addValueType( \"v\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Verbose mode\" ) );\n\t\tthis.addValueType( \"q\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Quiet mode\" ) );\n\t\tthis.addValueType( \"p\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists properties\" ) );\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists relationships\" ) );\n\t\tthis.addValueType( \"f\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Filters property keys/relationship types (regexp string)\" ) );\n\t}","id":12396,"modified_method":"/**\n\t * Constructs a new \"ls\" application.\n\t */\n\tpublic Ls()\n\t{\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Direction filter for relationships: \" +\n\t\t\tthis.directionAlternatives() ) );\n\t\tthis.addValueType( \"v\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Verbose mode\" ) );\n\t\tthis.addValueType( \"q\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Quiet mode\" ) );\n\t\tthis.addValueType( \"p\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists properties\" ) );\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists relationships\" ) );\n\t\tthis.addValueType( \"f\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Filters property keys/relationship types (regexp string)\" ) );\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void displayRelationships( AppCommandParser parser, Node node,\n\t\tOutput out, boolean displayRelationships, boolean verbose, \n\t\tString filter ) throws ShellException, RemoteException\n\t{\n\t\tif ( !displayRelationships )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tString directionFilter = parser.options().get( \"d\" );\n\t\tDirection direction = this.getDirection( directionFilter );\n\t\tboolean displayOutgoing = directionFilter == null ||\n\t\t\tdirection == Direction.OUTGOING;\n\t\tboolean displayIncoming = directionFilter == null ||\n\t\t\tdirection == Direction.INCOMING;\n\t\tPattern filterPattern = filter == null ? null :\n\t\t\tPattern.compile( filter );\n\t\tif ( displayOutgoing )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.OUTGOING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = new StringBuffer( \n\t\t\t\t\tgetDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" --[\" ).append( rel.getType() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append( \"]--> \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getEndNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t\tif ( displayIncoming )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.INCOMING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = \n\t\t\t\t\tnew StringBuffer( getDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" <--[\" ).append( rel.getType() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append(  \"]-- \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getStartNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t}","id":12397,"modified_method":"private void displayRelationships( AppCommandParser parser, Node node,\n\t\tOutput out, boolean displayRelationships, boolean verbose, \n\t\tString filter ) throws ShellException, RemoteException\n\t{\n\t\tif ( !displayRelationships )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tString directionFilter = parser.options().get( \"d\" );\n\t\tDirection direction = this.getDirection( directionFilter );\n\t\tboolean displayOutgoing = directionFilter == null ||\n\t\t\tdirection == Direction.OUTGOING;\n\t\tboolean displayIncoming = directionFilter == null ||\n\t\t\tdirection == Direction.INCOMING;\n\t\tPattern filterPattern = filter == null ? null :\n\t\t\tPattern.compile( filter );\n\t\tif ( displayOutgoing )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.OUTGOING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = new StringBuffer( \n\t\t\t\t\tgetDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" --[\" ).append( rel.getType().name() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append( \"]--> \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getEndNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t\tif ( displayIncoming )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.INCOMING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = \n\t\t\t\t\tnew StringBuffer( getDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" <--[\" ).append( rel.getType() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append(  \"]-- \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getStartNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException\n\t{\n\t\tboolean createNode = parser.options().containsKey( \"c\" );\n\t\tboolean suppliedNode = parser.options().containsKey( \"n\" );\n\t\tNode node = null;\n\t\tif ( createNode )\n\t\t{\n\t\t\tthrow new RuntimeException( \"fix this\" );\n\t\t\t// node = NodeManager.getManager().createNode();\n\t\t}\n\t\telse if ( suppliedNode )\n\t\t{\n\t\t\tnode = getNodeById( Long.parseLong( parser.options().get( \"n\" ) ) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ShellException( \"Must either create node (-c)\" +\n\t\t\t\t\" or supply node id (-n <id>)\" );\n\t\t}\n\t\t\n\t\tif ( parser.options().get( \"t\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException( \"Must supply relationship type \" +\n\t\t\t\t\"(-t <relationship-type-name>)\" );\n\t\t}\n\t\tthrow new RuntimeException( \"fix this \" );\n/*\t\tRelationshipType type = null; this.getRelationshipType(\n\t\t\tparser.options().get( \"t\" ) );\n\t\tDirection direction = this.getDirection( parser.options().get( \"d\" ) );\n\t\tNode startNode = direction == Direction.OUTGOING ?\n\t\t\tthis.getCurrentNode( session ) : node;\n\t\tNode endNode = direction == Direction.OUTGOING ?\n\t\t\tnode : this.getCurrentNode( session );\n\t\tstartNode.createRelationshipTo( endNode, type );\n\t\treturn null;*/\n\t}","id":12398,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException\n\t{\n\t\tboolean createNode = parser.options().containsKey( \"c\" );\n\t\tboolean suppliedNode = parser.options().containsKey( \"n\" );\n\t\tNode node = null;\n\t\tif ( createNode )\n\t\t{\n\t\t\tnode = getNeoServer().getNeo().createNode();\n\t\t}\n\t\telse if ( suppliedNode )\n\t\t{\n\t\t\tnode = getNodeById( Long.parseLong( parser.options().get( \"n\" ) ) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ShellException( \"Must either create node (-c)\" +\n\t\t\t\t\" or supply node id (-n <id>)\" );\n\t\t}\n\t\t\n\t\tif ( parser.options().get( \"t\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException( \"Must supply relationship type \" +\n\t\t\t\t\"(-t <relationship-type-name>)\" );\n\t\t}\n\t\tRelationshipType type = this.getRelationshipType(\n\t\t\tparser.options().get( \"t\" ) );\n\t\tDirection direction = this.getDirection( parser.options().get( \"d\" ) );\n\t\tNode startNode = direction == Direction.OUTGOING ?\n\t\t\tthis.getCurrentNode( session ) : node;\n\t\tNode endNode = direction == Direction.OUTGOING ?\n\t\t\tnode : this.getCurrentNode( session );\n\t\tstartNode.createRelationshipTo( endNode, type );\n\t\treturn null;\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Mkrel()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship type\" ) );\n\t\tthis.addValueType( \"n\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The node id to connect to\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The direction: \" + this.directionAlternatives() + \".\" ) );\n\t\tthis.addValueType( \"c\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Supplied if there should be created a new node\" ) );\n\t}","id":12399,"modified_method":"/**\n\t * Constructs a new application which can create relationships in neo.\n\t */\n\tpublic Mkrel()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship type\" ) );\n\t\tthis.addValueType( \"n\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The node id to connect to\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The direction: \" + this.directionAlternatives() + \".\" ) );\n\t\tthis.addValueType( \"c\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Supplied if there should be created a new node\" ) );\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Mv()\n\t{\n\t\tthis.addValueType( \"o\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"To override if the key already exists\" ) );\n\t}","id":12400,"modified_method":"/**\n\t * Constructs a new \"mv\" application.\n\t */\n\tpublic Mv()\n\t{\n\t\tthis.addValueType( \"o\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"To override if the key already exists\" ) );\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"private NeoShellServer getNeoServer()\n\t{\n\t\treturn ( NeoShellServer ) this.getServer();\n\t}","id":12401,"modified_method":"protected NeoShellServer getNeoServer()\n\t{\n\t\treturn ( NeoShellServer ) this.getServer();\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static String getDisplayNameForNode( Node node )\n\t{\n\t\treturn node != null\n\t\t\t? getDisplayNameForNode( node.getId() )\n\t\t\t: getDisplayNameForNode( (Long) null );\n\t}","id":12402,"modified_method":"/**\n\t * Returns the display name for a {@link Node}.\n\t * @param node the node to get the name-representation for.\n\t * @return the display name for a {@link Node}.\n\t */\n\tpublic static String getDisplayNameForNode( Node node )\n\t{\n\t\treturn node != null\n\t\t\t? getDisplayNameForNode( node.getId() )\n\t\t\t: getDisplayNameForNode( (Long) null );\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected Node getCurrentNode( Session session )\n\t{\n\t\tNumber id = ( Number ) safeGet( session, NODE_KEY );\n\t\tNode node = null;\n\t\tif ( id == null )\n\t\t{\n\t\t\tnode =  this.getNeoServer().getNeo().getReferenceNode();\n\t\t\tsetCurrentNode( session, node );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode = getNeoServer().getNeo().getNodeById( id.intValue() );\n\t\t}\n\t\treturn node;\n\t}","id":12403,"modified_method":"protected Node getCurrentNode( Session session )\n\t{\n\t\treturn getCurrentNode( getNeoServer(), session );\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static String getDisplayNameForNode( Long nodeId )\n\t{\n\t\treturn \"(\" + nodeId + \")\";\n\t}","id":12404,"modified_method":"/**\n\t * Returns the display name for a {@link Node}.\n\t * @param nodeId the node id to get the name-representation for.\n\t * @return the display name for a {@link Node}.\n\t */\n\tpublic static String getDisplayNameForNode( Long nodeId )\n\t{\n\t\treturn \"(\" + nodeId + \")\";\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoService getNeo()\n\t{\n\t\treturn this.neo;\n\t}","id":12405,"modified_method":"/**\n\t * @return the {@link NeoService} instance given in the constructor.\n\t */\n\tpublic NeoService getNeo()\n\t{\n\t\treturn this.neo;\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tpublic Serializable interpretVariable( String key, Serializable value,\n\t\tSession session ) throws RemoteException\n\t{\n\t\tif ( key.equals( AbstractClient.PROMPT_KEY ) )\n\t\t{\n\t\t\treturn this.bashInterpreter.interpret( ( String ) value,\n\t\t\t\tthis, session );\n\t\t}\n\t\treturn value;\n\t}","id":12406,"modified_method":"@Override\n\tpublic Serializable interpretVariable( String key, Serializable value,\n\t\tSession session ) throws RemoteException\n\t{\n\t\tTransaction tx = getNeo().beginTx();\n\t\ttry\n\t\t{\n\t\t\tSerializable result = value;\n\t\t\tif ( key.equals( AbstractClient.PROMPT_KEY ) )\n\t\t\t{\n\t\t\t\tresult = this.bashInterpreter.interpret( ( String ) value,\n\t\t\t\t\tthis, session );\n\t\t\t}\n\t\t\ttx.success();\n\t\t\treturn result;\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttx.finish();\n\t\t}\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoShellServer( NeoService neo ) \n\t\tthrows RemoteException\n\t{\n\t\tsuper();\n\t\tthis.addPackage( Ls.class.getPackage().getName() );\n\t\tthis.neo = neo;\n\t\tthis.bashInterpreter = new BashVariableInterpreter();\n\t\tthis.bashInterpreter.addReplacer( \"W\", new WorkingDirReplacer() );\n\t\tthis.setProperty( AbstractClient.PROMPT_KEY, \"neo-sh \\\\W$ \" );\n\t}","id":12407,"modified_method":"/**\n\t * @param neo the {@link NeoService} instance to use with the shell server.\n\t * @throws RemoteException if an RMI error occurs.\n\t */\n\tpublic NeoShellServer( NeoService neo ) \n\t\tthrows RemoteException\n\t{\n\t\tsuper();\n\t\tthis.addPackage( Ls.class.getPackage().getName() );\n\t\tthis.neo = neo;\n\t\tthis.bashInterpreter = new BashVariableInterpreter();\n\t\tthis.bashInterpreter.addReplacer( \"W\", new WorkingDirReplacer() );\n\t\tthis.setProperty( AbstractClient.PROMPT_KEY, \"neo-sh \\\\W$ \" );\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public String getReplacement( ShellServer server, Session session )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Fix this\" );\n//\t\t\treturn \"\" + NeoApp.getDisplayNameForNode(\n//\t\t\t\tNeoApp.getCurrentNode( session ) );\n\t\t}","id":12408,"modified_method":"public String getReplacement( ShellServer server, Session session )\n\t\t{\n\t\t\treturn \"\" + NeoApp.getDisplayNameForNode(\n\t\t\t\tNeoApp.getCurrentNode( ( NeoShellServer ) server, session ) );\n\t\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException\n\t{\n\t\tString key = parser.arguments().get( 0 );\n\t\tthis.getCurrentNode( session ).removeProperty( key );\n\t\treturn null;\n\t}","id":12409,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session,\n\t\tOutput out ) throws ShellException\n\t{\n\t\ttry\n\t\t{\n\t\t\tString key = parser.arguments().get( 0 );\n\t\t\tif ( this.getCurrentNode( session ).removeProperty( key ) == null )\n\t\t\t{\n\t\t\t\tout.println( \"Property '\" + key + \"' not found\" );\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tcatch ( RemoteException e )\n\t\t{\n\t\t\tthrow new ShellException( e );\n\t\t}\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tif ( parser.options().get( \"r\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException(\n\t\t\t\t\"Must supply relationship id (-r <id>) to delete\" );\n\t\t}\n\t\t\n\t\tNode currentNode = this.getCurrentNode( session );\n\t\tRelationship rel = findRel( currentNode, Long.parseLong(\n\t\t\tparser.options().get( \"r\" ) ) );\n\t\trel.delete();\n\t\tif ( !currentNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tthrow new ShellException( \"It would result in the current node \" +\n\t\t\t\tcurrentNode + \" to be decoupled (no relationships left)\" );\n\t\t}\n\t\tNode otherNode = rel.getOtherNode( currentNode );\n\t\tif ( !otherNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tboolean deleteOtherNodeWhenEmpty =\n\t\t\t\tparser.options().containsKey( \"d\" );\n\t\t\tif ( !deleteOtherNodeWhenEmpty )\n\t\t\t{\n\t\t\t\tthrow new ShellException( \"Since the node \" + \n\t\t\t\t\tgetDisplayNameForNode( otherNode ) +\n\t\t\t\t\t\" would be decoupled after this, you must supply the\" +\n\t\t\t\t\t\" -d (for delete-when-decoupled) so that it may be \" +\n\t\t\t\t\t\"removed\" ); \n\t\t\t}\n\t\t\totherNode.delete();\n\t\t}\n//\t\telse\n//\t\t{\n//\t\t\t if ( !this.hasPathToRefNode( otherNode ) )\n//\t\t\t {\n//\t\t\t\t throw new ShellException( \"It would result in \" + otherNode +\n//\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n//\t\t\t }\n//\t\t\t if ( !this.hasPathToRefNode( currentNode ) )\n//\t\t\t {\n//\t\t\t\t throw new ShellException( \"It would result in \" + currentNode +\n//\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n//\t\t\t }\n//\t\t}\n\t\treturn null;\n\t}","id":12410,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tif ( parser.options().get( \"r\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException(\n\t\t\t\t\"Must supply relationship id (-r <id>) to delete\" );\n\t\t}\n\t\t\n\t\tNode currentNode = this.getCurrentNode( session );\n\t\tRelationship rel = findRel( currentNode, Long.parseLong(\n\t\t\tparser.options().get( \"r\" ) ) );\n\t\trel.delete();\n\t\tif ( !currentNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tthrow new ShellException( \"It would result in the current node \" +\n\t\t\t\tcurrentNode + \" to be decoupled (no relationships left)\" );\n\t\t}\n\t\tNode otherNode = rel.getOtherNode( currentNode );\n\t\tif ( !otherNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tboolean deleteOtherNodeWhenEmpty =\n\t\t\t\tparser.options().containsKey( \"d\" );\n\t\t\tif ( !deleteOtherNodeWhenEmpty )\n\t\t\t{\n\t\t\t\tthrow new ShellException( \"Since the node \" + \n\t\t\t\t\tgetDisplayNameForNode( otherNode ) +\n\t\t\t\t\t\" would be decoupled after this, you must supply the\" +\n\t\t\t\t\t\" -d (for delete-when-decoupled) so that the other node \" +\n\t\t\t\t\t\"(\" + otherNode + \") may be deleted\" ); \n\t\t\t}\n\t\t\totherNode.delete();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t if ( !this.hasPathToRefNode( otherNode ) )\n\t\t\t {\n\t\t\t\t throw new ShellException( \"It would result in \" + otherNode +\n\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n\t\t\t }\n\t\t\t if ( !this.hasPathToRefNode( currentNode ) )\n\t\t\t {\n\t\t\t\t throw new ShellException( \"It would result in \" + currentNode +\n\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n\t\t\t }\n\t\t}\n\t\treturn null;\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Rmrel()\n\t{\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship id.\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Must be supplied if the affected other node gets decoupled \" +\n\t\t\t\"after this operation so that it gets deleted.\" ) );\n\t}","id":12411,"modified_method":"/**\n\t * Constructs a new application which can delete relationships in neo.\n\t */\n\tpublic Rmrel()\n\t{\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship id.\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Must be supplied if the affected other node gets decoupled \" +\n\t\t\t\"after this operation so that it gets deleted.\" ) );\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Set()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Value type, String, Integer, Long, Byte a.s.o.\" ) );\n\t}","id":12412,"modified_method":"/**\n\t * Constructs a new \"set\" application.\n\t */\n\tpublic Set()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Value type, String, Integer, Long, Byte a.s.o.\" ) );\n\t}","commit_id":"26e6eb266491c849af9af11aa3cba0438e3e2ab4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Cd()\n\t{\n\t\tthis.addValueType( \"a\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Absolute id, doesn't need to be connected to current node\" ) );\n\t}","id":12413,"modified_method":"/**\n\t * Constructs a new application.\n\t */\n\tpublic Cd()\n\t{\n\t\tthis.addValueType( \"a\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Absolute id, doesn't need to be connected to current node\" ) );\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tList<Long> paths = readPaths( session );\n\t\t\n\t\tNode currentNode = getCurrentNode( session );\n\t\tNode newNode = null;\n\t\tif ( parser.arguments().isEmpty() )\n\t\t{\n\t\t\tthrow new RuntimeException( \"fix this\" );\n\t\t\t// newNode = NodeManager.getManager().getReferenceNode();\n\t\t\t// paths.clear();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString arg = parser.arguments().get( 0 );\n\t\t\tlong newId = currentNode.getId();\n\t\t\tif ( arg.equals( \"..\" )  )\n\t\t\t{\n\t\t\t\tif ( paths.size() > 0 )\n\t\t\t\t{\n\t\t\t\t\tnewId = paths.remove( paths.size() - 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( arg.equals( \".\" ) )\n\t\t\t{\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnewId = Long.parseLong( arg );\n\t\t\t\tif ( newId == currentNode.getId() )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Can't cd to the current node\" );\n\t\t\t\t}\n\t\t\t\tboolean absolute = parser.options().containsKey( \"a\" );\n\t\t\t\tif ( !absolute && !this.nodeIsConnected( currentNode, newId ) )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Node \" + newId +\n\t\t\t\t\t\t\" isn't connected to the current node\" );\n\t\t\t\t}\n\t\t\t\tpaths.add( currentNode.getId() );\n\t\t\t}\n\t\t\tnewNode = this.getNodeById( newId );\n\t\t}\n\t\t\n\t\tsetCurrentNode( session, newNode );\n\t\tsession.set( WORKING_DIR_KEY, this.makePath( paths ) );\n\t\treturn null;\n\t}","id":12414,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tList<Long> paths = readPaths( session );\n\t\t\n\t\tNode currentNode = getCurrentNode( session );\n\t\tNode newNode = null;\n\t\tif ( parser.arguments().isEmpty() )\n\t\t{\n\t\t\tnewNode = getNeoServer().getNeo().getReferenceNode();\n\t\t\tpaths.clear();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString arg = parser.arguments().get( 0 );\n\t\t\tlong newId = currentNode.getId();\n\t\t\tif ( arg.equals( \"..\" )  )\n\t\t\t{\n\t\t\t\tif ( paths.size() > 0 )\n\t\t\t\t{\n\t\t\t\t\tnewId = paths.remove( paths.size() - 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( arg.equals( \".\" ) )\n\t\t\t{\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnewId = Long.parseLong( arg );\n\t\t\t\tif ( newId == currentNode.getId() )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Can't cd to the current node\" );\n\t\t\t\t}\n\t\t\t\tboolean absolute = parser.options().containsKey( \"a\" );\n\t\t\t\tif ( !absolute && !this.nodeIsConnected( currentNode, newId ) )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Node \" + newId +\n\t\t\t\t\t\t\" isn't connected to the current node\" );\n\t\t\t\t}\n\t\t\t\tpaths.add( currentNode.getId() );\n\t\t\t}\n\t\t\tnewNode = this.getNodeById( newId );\n\t\t}\n\t\t\n\t\tsetCurrentNode( session, newNode );\n\t\tsession.set( WORKING_DIR_KEY, this.makePath( paths ) );\n\t\treturn null;\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static List<Long> readPaths( Session session ) throws RemoteException\n\t{\n\t\tList<Long> list = new ArrayList<Long>();\n\t\tString path = ( String ) session.get( WORKING_DIR_KEY );\n\t\tif ( path != null && path.trim().length() > 0 )\n\t\t{\n\t\t\tfor ( String id : path.split( \",\" ) )\n\t\t\t{\n\t\t\t\tlist.add( new Long( id ) );\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","id":12415,"modified_method":"/**\n\t * Reads the session variable specified in {@link #WORKING_DIR_KEY} and\n\t * returns it as a list of node ids.\n\t * @param session the session to read from.\n\t * @return the working directory as a list.\n\t * @throws RemoteException if an RMI error occurs.\n\t */\n\tpublic static List<Long> readPaths( Session session ) throws RemoteException\n\t{\n\t\tList<Long> list = new ArrayList<Long>();\n\t\tString path = ( String ) session.get( WORKING_DIR_KEY );\n\t\tif ( path != null && path.trim().length() > 0 )\n\t\t{\n\t\t\tfor ( String id : path.split( \",\" ) )\n\t\t\t{\n\t\t\t\tlist.add( new Long( id ) );\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Ls()\n\t{\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Direction filter for relationships: \" +\n\t\t\tthis.directionAlternatives() ) );\n\t\tthis.addValueType( \"v\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Verbose mode\" ) );\n\t\tthis.addValueType( \"q\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Quiet mode\" ) );\n\t\tthis.addValueType( \"p\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists properties\" ) );\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists relationships\" ) );\n\t\tthis.addValueType( \"f\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Filters property keys/relationship types (regexp string)\" ) );\n\t}","id":12416,"modified_method":"/**\n\t * Constructs a new \"ls\" application.\n\t */\n\tpublic Ls()\n\t{\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Direction filter for relationships: \" +\n\t\t\tthis.directionAlternatives() ) );\n\t\tthis.addValueType( \"v\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Verbose mode\" ) );\n\t\tthis.addValueType( \"q\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Quiet mode\" ) );\n\t\tthis.addValueType( \"p\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists properties\" ) );\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists relationships\" ) );\n\t\tthis.addValueType( \"f\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Filters property keys/relationship types (regexp string)\" ) );\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void displayRelationships( AppCommandParser parser, Node node,\n\t\tOutput out, boolean displayRelationships, boolean verbose, \n\t\tString filter ) throws ShellException, RemoteException\n\t{\n\t\tif ( !displayRelationships )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tString directionFilter = parser.options().get( \"d\" );\n\t\tDirection direction = this.getDirection( directionFilter );\n\t\tboolean displayOutgoing = directionFilter == null ||\n\t\t\tdirection == Direction.OUTGOING;\n\t\tboolean displayIncoming = directionFilter == null ||\n\t\t\tdirection == Direction.INCOMING;\n\t\tPattern filterPattern = filter == null ? null :\n\t\t\tPattern.compile( filter );\n\t\tif ( displayOutgoing )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.OUTGOING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = new StringBuffer( \n\t\t\t\t\tgetDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" --[\" ).append( rel.getType() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append( \"]--> \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getEndNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t\tif ( displayIncoming )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.INCOMING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = \n\t\t\t\t\tnew StringBuffer( getDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" <--[\" ).append( rel.getType() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append(  \"]-- \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getStartNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t}","id":12417,"modified_method":"private void displayRelationships( AppCommandParser parser, Node node,\n\t\tOutput out, boolean displayRelationships, boolean verbose, \n\t\tString filter ) throws ShellException, RemoteException\n\t{\n\t\tif ( !displayRelationships )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tString directionFilter = parser.options().get( \"d\" );\n\t\tDirection direction = this.getDirection( directionFilter );\n\t\tboolean displayOutgoing = directionFilter == null ||\n\t\t\tdirection == Direction.OUTGOING;\n\t\tboolean displayIncoming = directionFilter == null ||\n\t\t\tdirection == Direction.INCOMING;\n\t\tPattern filterPattern = filter == null ? null :\n\t\t\tPattern.compile( filter );\n\t\tif ( displayOutgoing )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.OUTGOING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = new StringBuffer( \n\t\t\t\t\tgetDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" --[\" ).append( rel.getType().name() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append( \"]--> \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getEndNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t\tif ( displayIncoming )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.INCOMING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = \n\t\t\t\t\tnew StringBuffer( getDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" <--[\" ).append( rel.getType() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append(  \"]-- \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getStartNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException\n\t{\n\t\tboolean createNode = parser.options().containsKey( \"c\" );\n\t\tboolean suppliedNode = parser.options().containsKey( \"n\" );\n\t\tNode node = null;\n\t\tif ( createNode )\n\t\t{\n\t\t\tthrow new RuntimeException( \"fix this\" );\n\t\t\t// node = NodeManager.getManager().createNode();\n\t\t}\n\t\telse if ( suppliedNode )\n\t\t{\n\t\t\tnode = getNodeById( Long.parseLong( parser.options().get( \"n\" ) ) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ShellException( \"Must either create node (-c)\" +\n\t\t\t\t\" or supply node id (-n <id>)\" );\n\t\t}\n\t\t\n\t\tif ( parser.options().get( \"t\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException( \"Must supply relationship type \" +\n\t\t\t\t\"(-t <relationship-type-name>)\" );\n\t\t}\n\t\tthrow new RuntimeException( \"fix this \" );\n/*\t\tRelationshipType type = null; this.getRelationshipType(\n\t\t\tparser.options().get( \"t\" ) );\n\t\tDirection direction = this.getDirection( parser.options().get( \"d\" ) );\n\t\tNode startNode = direction == Direction.OUTGOING ?\n\t\t\tthis.getCurrentNode( session ) : node;\n\t\tNode endNode = direction == Direction.OUTGOING ?\n\t\t\tnode : this.getCurrentNode( session );\n\t\tstartNode.createRelationshipTo( endNode, type );\n\t\treturn null;*/\n\t}","id":12418,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException\n\t{\n\t\tboolean createNode = parser.options().containsKey( \"c\" );\n\t\tboolean suppliedNode = parser.options().containsKey( \"n\" );\n\t\tNode node = null;\n\t\tif ( createNode )\n\t\t{\n\t\t\tnode = getNeoServer().getNeo().createNode();\n\t\t}\n\t\telse if ( suppliedNode )\n\t\t{\n\t\t\tnode = getNodeById( Long.parseLong( parser.options().get( \"n\" ) ) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ShellException( \"Must either create node (-c)\" +\n\t\t\t\t\" or supply node id (-n <id>)\" );\n\t\t}\n\t\t\n\t\tif ( parser.options().get( \"t\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException( \"Must supply relationship type \" +\n\t\t\t\t\"(-t <relationship-type-name>)\" );\n\t\t}\n\t\tRelationshipType type = this.getRelationshipType(\n\t\t\tparser.options().get( \"t\" ) );\n\t\tDirection direction = this.getDirection( parser.options().get( \"d\" ) );\n\t\tNode startNode = direction == Direction.OUTGOING ?\n\t\t\tthis.getCurrentNode( session ) : node;\n\t\tNode endNode = direction == Direction.OUTGOING ?\n\t\t\tnode : this.getCurrentNode( session );\n\t\tstartNode.createRelationshipTo( endNode, type );\n\t\treturn null;\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Mkrel()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship type\" ) );\n\t\tthis.addValueType( \"n\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The node id to connect to\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The direction: \" + this.directionAlternatives() + \".\" ) );\n\t\tthis.addValueType( \"c\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Supplied if there should be created a new node\" ) );\n\t}","id":12419,"modified_method":"/**\n\t * Constructs a new application which can create relationships in neo.\n\t */\n\tpublic Mkrel()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship type\" ) );\n\t\tthis.addValueType( \"n\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The node id to connect to\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The direction: \" + this.directionAlternatives() + \".\" ) );\n\t\tthis.addValueType( \"c\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Supplied if there should be created a new node\" ) );\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Mv()\n\t{\n\t\tthis.addValueType( \"o\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"To override if the key already exists\" ) );\n\t}","id":12420,"modified_method":"/**\n\t * Constructs a new \"mv\" application.\n\t */\n\tpublic Mv()\n\t{\n\t\tthis.addValueType( \"o\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"To override if the key already exists\" ) );\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"private NeoShellServer getNeoServer()\n\t{\n\t\treturn ( NeoShellServer ) this.getServer();\n\t}","id":12421,"modified_method":"protected NeoShellServer getNeoServer()\n\t{\n\t\treturn ( NeoShellServer ) this.getServer();\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static String getDisplayNameForNode( Long nodeId )\n\t{\n\t\treturn \"(\" + nodeId + \")\";\n\t}","id":12422,"modified_method":"/**\n\t * Returns the display name for a {@link Node}.\n\t * @param nodeId the node id to get the name-representation for.\n\t * @return the display name for a {@link Node}.\n\t */\n\tpublic static String getDisplayNameForNode( Long nodeId )\n\t{\n\t\treturn \"(\" + nodeId + \")\";\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected Node getCurrentNode( Session session )\n\t{\n\t\tNumber id = ( Number ) safeGet( session, NODE_KEY );\n\t\tNode node = null;\n\t\tif ( id == null )\n\t\t{\n\t\t\tnode =  this.getNeoServer().getNeo().getReferenceNode();\n\t\t\tsetCurrentNode( session, node );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode = getNeoServer().getNeo().getNodeById( id.intValue() );\n\t\t}\n\t\treturn node;\n\t}","id":12423,"modified_method":"protected Node getCurrentNode( Session session )\n\t{\n\t\treturn getCurrentNode( getNeoServer(), session );\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static String getDisplayNameForNode( Node node )\n\t{\n\t\treturn node != null\n\t\t\t? getDisplayNameForNode( node.getId() )\n\t\t\t: getDisplayNameForNode( (Long) null );\n\t}","id":12424,"modified_method":"/**\n\t * Returns the display name for a {@link Node}.\n\t * @param node the node to get the name-representation for.\n\t * @return the display name for a {@link Node}.\n\t */\n\tpublic static String getDisplayNameForNode( Node node )\n\t{\n\t\treturn node != null\n\t\t\t? getDisplayNameForNode( node.getId() )\n\t\t\t: getDisplayNameForNode( (Long) null );\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoService getNeo()\n\t{\n\t\treturn this.neo;\n\t}","id":12425,"modified_method":"/**\n\t * @return the {@link NeoService} instance given in the constructor.\n\t */\n\tpublic NeoService getNeo()\n\t{\n\t\treturn this.neo;\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public String getReplacement( ShellServer server, Session session )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Fix this\" );\n//\t\t\treturn \"\" + NeoApp.getDisplayNameForNode(\n//\t\t\t\tNeoApp.getCurrentNode( session ) );\n\t\t}","id":12426,"modified_method":"public String getReplacement( ShellServer server, Session session )\n\t\t{\n\t\t\treturn \"\" + NeoApp.getDisplayNameForNode(\n\t\t\t\tNeoApp.getCurrentNode( ( NeoShellServer ) server, session ) );\n\t\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tpublic Serializable interpretVariable( String key, Serializable value,\n\t\tSession session ) throws RemoteException\n\t{\n\t\tif ( key.equals( AbstractClient.PROMPT_KEY ) )\n\t\t{\n\t\t\treturn this.bashInterpreter.interpret( ( String ) value,\n\t\t\t\tthis, session );\n\t\t}\n\t\treturn value;\n\t}","id":12427,"modified_method":"@Override\n\tpublic Serializable interpretVariable( String key, Serializable value,\n\t\tSession session ) throws RemoteException\n\t{\n\t\tTransaction tx = getNeo().beginTx();\n\t\ttry\n\t\t{\n\t\t\tSerializable result = value;\n\t\t\tif ( key.equals( AbstractClient.PROMPT_KEY ) )\n\t\t\t{\n\t\t\t\tresult = this.bashInterpreter.interpret( ( String ) value,\n\t\t\t\t\tthis, session );\n\t\t\t}\n\t\t\ttx.success();\n\t\t\treturn result;\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttx.finish();\n\t\t}\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoShellServer( NeoService neo ) \n\t\tthrows RemoteException\n\t{\n\t\tsuper();\n\t\tthis.addPackage( Ls.class.getPackage().getName() );\n\t\tthis.neo = neo;\n\t\tthis.bashInterpreter = new BashVariableInterpreter();\n\t\tthis.bashInterpreter.addReplacer( \"W\", new WorkingDirReplacer() );\n\t\tthis.setProperty( AbstractClient.PROMPT_KEY, \"neo-sh \\\\W$ \" );\n\t}","id":12428,"modified_method":"/**\n\t * @param neo the {@link NeoService} instance to use with the shell server.\n\t * @throws RemoteException if an RMI error occurs.\n\t */\n\tpublic NeoShellServer( NeoService neo ) \n\t\tthrows RemoteException\n\t{\n\t\tsuper();\n\t\tthis.addPackage( Ls.class.getPackage().getName() );\n\t\tthis.neo = neo;\n\t\tthis.bashInterpreter = new BashVariableInterpreter();\n\t\tthis.bashInterpreter.addReplacer( \"W\", new WorkingDirReplacer() );\n\t\tthis.setProperty( AbstractClient.PROMPT_KEY, \"neo-sh \\\\W$ \" );\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException\n\t{\n\t\tString key = parser.arguments().get( 0 );\n\t\tthis.getCurrentNode( session ).removeProperty( key );\n\t\treturn null;\n\t}","id":12429,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session,\n\t\tOutput out ) throws ShellException\n\t{\n\t\ttry\n\t\t{\n\t\t\tString key = parser.arguments().get( 0 );\n\t\t\tif ( this.getCurrentNode( session ).removeProperty( key ) == null )\n\t\t\t{\n\t\t\t\tout.println( \"Property '\" + key + \"' not found\" );\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tcatch ( RemoteException e )\n\t\t{\n\t\t\tthrow new ShellException( e );\n\t\t}\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tif ( parser.options().get( \"r\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException(\n\t\t\t\t\"Must supply relationship id (-r <id>) to delete\" );\n\t\t}\n\t\t\n\t\tNode currentNode = this.getCurrentNode( session );\n\t\tRelationship rel = findRel( currentNode, Long.parseLong(\n\t\t\tparser.options().get( \"r\" ) ) );\n\t\trel.delete();\n\t\tif ( !currentNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tthrow new ShellException( \"It would result in the current node \" +\n\t\t\t\tcurrentNode + \" to be decoupled (no relationships left)\" );\n\t\t}\n\t\tNode otherNode = rel.getOtherNode( currentNode );\n\t\tif ( !otherNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tboolean deleteOtherNodeWhenEmpty =\n\t\t\t\tparser.options().containsKey( \"d\" );\n\t\t\tif ( !deleteOtherNodeWhenEmpty )\n\t\t\t{\n\t\t\t\tthrow new ShellException( \"Since the node \" + \n\t\t\t\t\tgetDisplayNameForNode( otherNode ) +\n\t\t\t\t\t\" would be decoupled after this, you must supply the\" +\n\t\t\t\t\t\" -d (for delete-when-decoupled) so that it may be \" +\n\t\t\t\t\t\"removed\" ); \n\t\t\t}\n\t\t\totherNode.delete();\n\t\t}\n//\t\telse\n//\t\t{\n//\t\t\t if ( !this.hasPathToRefNode( otherNode ) )\n//\t\t\t {\n//\t\t\t\t throw new ShellException( \"It would result in \" + otherNode +\n//\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n//\t\t\t }\n//\t\t\t if ( !this.hasPathToRefNode( currentNode ) )\n//\t\t\t {\n//\t\t\t\t throw new ShellException( \"It would result in \" + currentNode +\n//\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n//\t\t\t }\n//\t\t}\n\t\treturn null;\n\t}","id":12430,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tif ( parser.options().get( \"r\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException(\n\t\t\t\t\"Must supply relationship id (-r <id>) to delete\" );\n\t\t}\n\t\t\n\t\tNode currentNode = this.getCurrentNode( session );\n\t\tRelationship rel = findRel( currentNode, Long.parseLong(\n\t\t\tparser.options().get( \"r\" ) ) );\n\t\trel.delete();\n\t\tif ( !currentNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tthrow new ShellException( \"It would result in the current node \" +\n\t\t\t\tcurrentNode + \" to be decoupled (no relationships left)\" );\n\t\t}\n\t\tNode otherNode = rel.getOtherNode( currentNode );\n\t\tif ( !otherNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tboolean deleteOtherNodeWhenEmpty =\n\t\t\t\tparser.options().containsKey( \"d\" );\n\t\t\tif ( !deleteOtherNodeWhenEmpty )\n\t\t\t{\n\t\t\t\tthrow new ShellException( \"Since the node \" + \n\t\t\t\t\tgetDisplayNameForNode( otherNode ) +\n\t\t\t\t\t\" would be decoupled after this, you must supply the\" +\n\t\t\t\t\t\" -d (for delete-when-decoupled) so that the other node \" +\n\t\t\t\t\t\"(\" + otherNode + \") may be deleted\" ); \n\t\t\t}\n\t\t\totherNode.delete();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t if ( !this.hasPathToRefNode( otherNode ) )\n\t\t\t {\n\t\t\t\t throw new ShellException( \"It would result in \" + otherNode +\n\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n\t\t\t }\n\t\t\t if ( !this.hasPathToRefNode( currentNode ) )\n\t\t\t {\n\t\t\t\t throw new ShellException( \"It would result in \" + currentNode +\n\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n\t\t\t }\n\t\t}\n\t\treturn null;\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Rmrel()\n\t{\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship id.\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Must be supplied if the affected other node gets decoupled \" +\n\t\t\t\"after this operation so that it gets deleted.\" ) );\n\t}","id":12431,"modified_method":"/**\n\t * Constructs a new application which can delete relationships in neo.\n\t */\n\tpublic Rmrel()\n\t{\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship id.\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Must be supplied if the affected other node gets decoupled \" +\n\t\t\t\"after this operation so that it gets deleted.\" ) );\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Set()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Value type, String, Integer, Long, Byte a.s.o.\" ) );\n\t}","id":12432,"modified_method":"/**\n\t * Constructs a new \"set\" application.\n\t */\n\tpublic Set()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Value type, String, Integer, Long, Byte a.s.o.\" ) );\n\t}","commit_id":"9fecd21754562b8dd5858ef18664fd197b17de6e","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tList<Long> paths = readPaths( session );\n\t\t\n\t\tNode currentNode = getCurrentNode( session );\n\t\tNode newNode = null;\n\t\tif ( parser.arguments().isEmpty() )\n\t\t{\n\t\t\tthrow new RuntimeException( \"fix this\" );\n\t\t\t// newNode = NodeManager.getManager().getReferenceNode();\n\t\t\t// paths.clear();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString arg = parser.arguments().get( 0 );\n\t\t\tlong newId = currentNode.getId();\n\t\t\tif ( arg.equals( \"..\" )  )\n\t\t\t{\n\t\t\t\tif ( paths.size() > 0 )\n\t\t\t\t{\n\t\t\t\t\tnewId = paths.remove( paths.size() - 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( arg.equals( \".\" ) )\n\t\t\t{\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnewId = Long.parseLong( arg );\n\t\t\t\tif ( newId == currentNode.getId() )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Can't cd to the current node\" );\n\t\t\t\t}\n\t\t\t\tboolean absolute = parser.options().containsKey( \"a\" );\n\t\t\t\tif ( !absolute && !this.nodeIsConnected( currentNode, newId ) )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Node \" + newId +\n\t\t\t\t\t\t\" isn't connected to the current node\" );\n\t\t\t\t}\n\t\t\t\tpaths.add( currentNode.getId() );\n\t\t\t}\n\t\t\tnewNode = this.getNodeById( newId );\n\t\t}\n\t\t\n\t\tsetCurrentNode( session, newNode );\n\t\tsession.set( WORKING_DIR_KEY, this.makePath( paths ) );\n\t\treturn null;\n\t}","id":12433,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tList<Long> paths = readPaths( session );\n\t\t\n\t\tNode currentNode = getCurrentNode( session );\n\t\tNode newNode = null;\n\t\tif ( parser.arguments().isEmpty() )\n\t\t{\n\t\t\tnewNode = getNeoServer().getNeo().getReferenceNode();\n\t\t\tpaths.clear();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString arg = parser.arguments().get( 0 );\n\t\t\tlong newId = currentNode.getId();\n\t\t\tif ( arg.equals( \"..\" )  )\n\t\t\t{\n\t\t\t\tif ( paths.size() > 0 )\n\t\t\t\t{\n\t\t\t\t\tnewId = paths.remove( paths.size() - 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( arg.equals( \".\" ) )\n\t\t\t{\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnewId = Long.parseLong( arg );\n\t\t\t\tif ( newId == currentNode.getId() )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Can't cd to the current node\" );\n\t\t\t\t}\n\t\t\t\tboolean absolute = parser.options().containsKey( \"a\" );\n\t\t\t\tif ( !absolute && !this.nodeIsConnected( currentNode, newId ) )\n\t\t\t\t{\n\t\t\t\t\tthrow new ShellException( \"Node \" + newId +\n\t\t\t\t\t\t\" isn't connected to the current node\" );\n\t\t\t\t}\n\t\t\t\tpaths.add( currentNode.getId() );\n\t\t\t}\n\t\t\tnewNode = this.getNodeById( newId );\n\t\t}\n\t\t\n\t\tsetCurrentNode( session, newNode );\n\t\tsession.set( WORKING_DIR_KEY, this.makePath( paths ) );\n\t\treturn null;\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Cd()\n\t{\n\t\tthis.addValueType( \"a\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Absolute id, doesn't need to be connected to current node\" ) );\n\t}","id":12434,"modified_method":"/**\n\t * Constructs a new application.\n\t */\n\tpublic Cd()\n\t{\n\t\tthis.addValueType( \"a\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Absolute id, doesn't need to be connected to current node\" ) );\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static List<Long> readPaths( Session session ) throws RemoteException\n\t{\n\t\tList<Long> list = new ArrayList<Long>();\n\t\tString path = ( String ) session.get( WORKING_DIR_KEY );\n\t\tif ( path != null && path.trim().length() > 0 )\n\t\t{\n\t\t\tfor ( String id : path.split( \",\" ) )\n\t\t\t{\n\t\t\t\tlist.add( new Long( id ) );\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","id":12435,"modified_method":"/**\n\t * Reads the session variable specified in {@link #WORKING_DIR_KEY} and\n\t * returns it as a list of node ids.\n\t * @param session the session to read from.\n\t * @return the working directory as a list.\n\t * @throws RemoteException if an RMI error occurs.\n\t */\n\tpublic static List<Long> readPaths( Session session ) throws RemoteException\n\t{\n\t\tList<Long> list = new ArrayList<Long>();\n\t\tString path = ( String ) session.get( WORKING_DIR_KEY );\n\t\tif ( path != null && path.trim().length() > 0 )\n\t\t{\n\t\t\tfor ( String id : path.split( \",\" ) )\n\t\t\t{\n\t\t\t\tlist.add( new Long( id ) );\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void displayRelationships( AppCommandParser parser, Node node,\n\t\tOutput out, boolean displayRelationships, boolean verbose, \n\t\tString filter ) throws ShellException, RemoteException\n\t{\n\t\tif ( !displayRelationships )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tString directionFilter = parser.options().get( \"d\" );\n\t\tDirection direction = this.getDirection( directionFilter );\n\t\tboolean displayOutgoing = directionFilter == null ||\n\t\t\tdirection == Direction.OUTGOING;\n\t\tboolean displayIncoming = directionFilter == null ||\n\t\t\tdirection == Direction.INCOMING;\n\t\tPattern filterPattern = filter == null ? null :\n\t\t\tPattern.compile( filter );\n\t\tif ( displayOutgoing )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.OUTGOING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = new StringBuffer( \n\t\t\t\t\tgetDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" --[\" ).append( rel.getType() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append( \"]--> \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getEndNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t\tif ( displayIncoming )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.INCOMING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = \n\t\t\t\t\tnew StringBuffer( getDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" <--[\" ).append( rel.getType() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append(  \"]-- \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getStartNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t}","id":12436,"modified_method":"private void displayRelationships( AppCommandParser parser, Node node,\n\t\tOutput out, boolean displayRelationships, boolean verbose, \n\t\tString filter ) throws ShellException, RemoteException\n\t{\n\t\tif ( !displayRelationships )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tString directionFilter = parser.options().get( \"d\" );\n\t\tDirection direction = this.getDirection( directionFilter );\n\t\tboolean displayOutgoing = directionFilter == null ||\n\t\t\tdirection == Direction.OUTGOING;\n\t\tboolean displayIncoming = directionFilter == null ||\n\t\t\tdirection == Direction.INCOMING;\n\t\tPattern filterPattern = filter == null ? null :\n\t\t\tPattern.compile( filter );\n\t\tif ( displayOutgoing )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.OUTGOING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = new StringBuffer( \n\t\t\t\t\tgetDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" --[\" ).append( rel.getType().name() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append( \"]--> \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getEndNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t\tif ( displayIncoming )\n\t\t{\n\t\t\tfor ( Relationship rel :\n\t\t\t\tnode.getRelationships( Direction.INCOMING ) )\n\t\t\t{\n\t\t\t\tif ( filterPattern != null && !filterPattern.matcher(\n\t\t\t\t\trel.getType().name() ).matches() )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tStringBuffer buf = \n\t\t\t\t\tnew StringBuffer( getDisplayNameForCurrentNode() );\n\t\t\t\tbuf.append( \" <--[\" ).append( rel.getType() );\n\t\t\t\tif ( verbose )\n\t\t\t\t{\n\t\t\t\t\tbuf.append( \", \" ).append( rel.getId() );\n\t\t\t\t}\n\t\t\t\tbuf.append(  \"]-- \" );\n\t\t\t\tbuf.append( getDisplayNameForNode( rel.getStartNode() ) );\n\t\t\t\tout.println( buf );\n\t\t\t}\n\t\t}\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Ls()\n\t{\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Direction filter for relationships: \" +\n\t\t\tthis.directionAlternatives() ) );\n\t\tthis.addValueType( \"v\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Verbose mode\" ) );\n\t\tthis.addValueType( \"q\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Quiet mode\" ) );\n\t\tthis.addValueType( \"p\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists properties\" ) );\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists relationships\" ) );\n\t\tthis.addValueType( \"f\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Filters property keys/relationship types (regexp string)\" ) );\n\t}","id":12437,"modified_method":"/**\n\t * Constructs a new \"ls\" application.\n\t */\n\tpublic Ls()\n\t{\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Direction filter for relationships: \" +\n\t\t\tthis.directionAlternatives() ) );\n\t\tthis.addValueType( \"v\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Verbose mode\" ) );\n\t\tthis.addValueType( \"q\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Quiet mode\" ) );\n\t\tthis.addValueType( \"p\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists properties\" ) );\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Lists relationships\" ) );\n\t\tthis.addValueType( \"f\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Filters property keys/relationship types (regexp string)\" ) );\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Mkrel()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship type\" ) );\n\t\tthis.addValueType( \"n\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The node id to connect to\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The direction: \" + this.directionAlternatives() + \".\" ) );\n\t\tthis.addValueType( \"c\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Supplied if there should be created a new node\" ) );\n\t}","id":12438,"modified_method":"/**\n\t * Constructs a new application which can create relationships in neo.\n\t */\n\tpublic Mkrel()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship type\" ) );\n\t\tthis.addValueType( \"n\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The node id to connect to\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The direction: \" + this.directionAlternatives() + \".\" ) );\n\t\tthis.addValueType( \"c\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Supplied if there should be created a new node\" ) );\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException\n\t{\n\t\tboolean createNode = parser.options().containsKey( \"c\" );\n\t\tboolean suppliedNode = parser.options().containsKey( \"n\" );\n\t\tNode node = null;\n\t\tif ( createNode )\n\t\t{\n\t\t\tthrow new RuntimeException( \"fix this\" );\n\t\t\t// node = NodeManager.getManager().createNode();\n\t\t}\n\t\telse if ( suppliedNode )\n\t\t{\n\t\t\tnode = getNodeById( Long.parseLong( parser.options().get( \"n\" ) ) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ShellException( \"Must either create node (-c)\" +\n\t\t\t\t\" or supply node id (-n <id>)\" );\n\t\t}\n\t\t\n\t\tif ( parser.options().get( \"t\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException( \"Must supply relationship type \" +\n\t\t\t\t\"(-t <relationship-type-name>)\" );\n\t\t}\n\t\tthrow new RuntimeException( \"fix this \" );\n/*\t\tRelationshipType type = null; this.getRelationshipType(\n\t\t\tparser.options().get( \"t\" ) );\n\t\tDirection direction = this.getDirection( parser.options().get( \"d\" ) );\n\t\tNode startNode = direction == Direction.OUTGOING ?\n\t\t\tthis.getCurrentNode( session ) : node;\n\t\tNode endNode = direction == Direction.OUTGOING ?\n\t\t\tnode : this.getCurrentNode( session );\n\t\tstartNode.createRelationshipTo( endNode, type );\n\t\treturn null;*/\n\t}","id":12439,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException\n\t{\n\t\tboolean createNode = parser.options().containsKey( \"c\" );\n\t\tboolean suppliedNode = parser.options().containsKey( \"n\" );\n\t\tNode node = null;\n\t\tif ( createNode )\n\t\t{\n\t\t\tnode = getNeoServer().getNeo().createNode();\n\t\t}\n\t\telse if ( suppliedNode )\n\t\t{\n\t\t\tnode = getNodeById( Long.parseLong( parser.options().get( \"n\" ) ) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ShellException( \"Must either create node (-c)\" +\n\t\t\t\t\" or supply node id (-n <id>)\" );\n\t\t}\n\t\t\n\t\tif ( parser.options().get( \"t\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException( \"Must supply relationship type \" +\n\t\t\t\t\"(-t <relationship-type-name>)\" );\n\t\t}\n\t\tRelationshipType type = this.getRelationshipType(\n\t\t\tparser.options().get( \"t\" ) );\n\t\tDirection direction = this.getDirection( parser.options().get( \"d\" ) );\n\t\tNode startNode = direction == Direction.OUTGOING ?\n\t\t\tthis.getCurrentNode( session ) : node;\n\t\tNode endNode = direction == Direction.OUTGOING ?\n\t\t\tnode : this.getCurrentNode( session );\n\t\tstartNode.createRelationshipTo( endNode, type );\n\t\treturn null;\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Mv()\n\t{\n\t\tthis.addValueType( \"o\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"To override if the key already exists\" ) );\n\t}","id":12440,"modified_method":"/**\n\t * Constructs a new \"mv\" application.\n\t */\n\tpublic Mv()\n\t{\n\t\tthis.addValueType( \"o\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"To override if the key already exists\" ) );\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static String getDisplayNameForNode( Long nodeId )\n\t{\n\t\treturn \"(\" + nodeId + \")\";\n\t}","id":12441,"modified_method":"/**\n\t * Returns the display name for a {@link Node}.\n\t * @param nodeId the node id to get the name-representation for.\n\t * @return the display name for a {@link Node}.\n\t */\n\tpublic static String getDisplayNameForNode( Long nodeId )\n\t{\n\t\treturn \"(\" + nodeId + \")\";\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static String getDisplayNameForNode( Node node )\n\t{\n\t\treturn node != null\n\t\t\t? getDisplayNameForNode( node.getId() )\n\t\t\t: getDisplayNameForNode( (Long) null );\n\t}","id":12442,"modified_method":"/**\n\t * Returns the display name for a {@link Node}.\n\t * @param node the node to get the name-representation for.\n\t * @return the display name for a {@link Node}.\n\t */\n\tpublic static String getDisplayNameForNode( Node node )\n\t{\n\t\treturn node != null\n\t\t\t? getDisplayNameForNode( node.getId() )\n\t\t\t: getDisplayNameForNode( (Long) null );\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected Node getCurrentNode( Session session )\n\t{\n\t\tNumber id = ( Number ) safeGet( session, NODE_KEY );\n\t\tNode node = null;\n\t\tif ( id == null )\n\t\t{\n\t\t\tnode =  this.getNeoServer().getNeo().getReferenceNode();\n\t\t\tsetCurrentNode( session, node );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode = getNeoServer().getNeo().getNodeById( id.intValue() );\n\t\t}\n\t\treturn node;\n\t}","id":12443,"modified_method":"protected Node getCurrentNode( Session session )\n\t{\n\t\treturn getCurrentNode( getNeoServer(), session );\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private NeoShellServer getNeoServer()\n\t{\n\t\treturn ( NeoShellServer ) this.getServer();\n\t}","id":12444,"modified_method":"protected NeoShellServer getNeoServer()\n\t{\n\t\treturn ( NeoShellServer ) this.getServer();\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoService getNeo()\n\t{\n\t\treturn this.neo;\n\t}","id":12445,"modified_method":"/**\n\t * @return the {@link NeoService} instance given in the constructor.\n\t */\n\tpublic NeoService getNeo()\n\t{\n\t\treturn this.neo;\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tpublic Serializable interpretVariable( String key, Serializable value,\n\t\tSession session ) throws RemoteException\n\t{\n\t\tif ( key.equals( AbstractClient.PROMPT_KEY ) )\n\t\t{\n\t\t\treturn this.bashInterpreter.interpret( ( String ) value,\n\t\t\t\tthis, session );\n\t\t}\n\t\treturn value;\n\t}","id":12446,"modified_method":"@Override\n\tpublic Serializable interpretVariable( String key, Serializable value,\n\t\tSession session ) throws RemoteException\n\t{\n\t\tTransaction tx = getNeo().beginTx();\n\t\ttry\n\t\t{\n\t\t\tSerializable result = value;\n\t\t\tif ( key.equals( AbstractClient.PROMPT_KEY ) )\n\t\t\t{\n\t\t\t\tresult = this.bashInterpreter.interpret( ( String ) value,\n\t\t\t\t\tthis, session );\n\t\t\t}\n\t\t\ttx.success();\n\t\t\treturn result;\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttx.finish();\n\t\t}\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoShellServer( NeoService neo ) \n\t\tthrows RemoteException\n\t{\n\t\tsuper();\n\t\tthis.addPackage( Ls.class.getPackage().getName() );\n\t\tthis.neo = neo;\n\t\tthis.bashInterpreter = new BashVariableInterpreter();\n\t\tthis.bashInterpreter.addReplacer( \"W\", new WorkingDirReplacer() );\n\t\tthis.setProperty( AbstractClient.PROMPT_KEY, \"neo-sh \\\\W$ \" );\n\t}","id":12447,"modified_method":"/**\n\t * @param neo the {@link NeoService} instance to use with the shell server.\n\t * @throws RemoteException if an RMI error occurs.\n\t */\n\tpublic NeoShellServer( NeoService neo ) \n\t\tthrows RemoteException\n\t{\n\t\tsuper();\n\t\tthis.addPackage( Ls.class.getPackage().getName() );\n\t\tthis.neo = neo;\n\t\tthis.bashInterpreter = new BashVariableInterpreter();\n\t\tthis.bashInterpreter.addReplacer( \"W\", new WorkingDirReplacer() );\n\t\tthis.setProperty( AbstractClient.PROMPT_KEY, \"neo-sh \\\\W$ \" );\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public String getReplacement( ShellServer server, Session session )\n\t\t{\n\t\t\tthrow new RuntimeException( \"Fix this\" );\n//\t\t\treturn \"\" + NeoApp.getDisplayNameForNode(\n//\t\t\t\tNeoApp.getCurrentNode( session ) );\n\t\t}","id":12448,"modified_method":"public String getReplacement( ShellServer server, Session session )\n\t\t{\n\t\t\treturn \"\" + NeoApp.getDisplayNameForNode(\n\t\t\t\tNeoApp.getCurrentNode( ( NeoShellServer ) server, session ) );\n\t\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException\n\t{\n\t\tString key = parser.arguments().get( 0 );\n\t\tthis.getCurrentNode( session ).removeProperty( key );\n\t\treturn null;\n\t}","id":12449,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session,\n\t\tOutput out ) throws ShellException\n\t{\n\t\ttry\n\t\t{\n\t\t\tString key = parser.arguments().get( 0 );\n\t\t\tif ( this.getCurrentNode( session ).removeProperty( key ) == null )\n\t\t\t{\n\t\t\t\tout.println( \"Property '\" + key + \"' not found\" );\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tcatch ( RemoteException e )\n\t\t{\n\t\t\tthrow new ShellException( e );\n\t\t}\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tif ( parser.options().get( \"r\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException(\n\t\t\t\t\"Must supply relationship id (-r <id>) to delete\" );\n\t\t}\n\t\t\n\t\tNode currentNode = this.getCurrentNode( session );\n\t\tRelationship rel = findRel( currentNode, Long.parseLong(\n\t\t\tparser.options().get( \"r\" ) ) );\n\t\trel.delete();\n\t\tif ( !currentNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tthrow new ShellException( \"It would result in the current node \" +\n\t\t\t\tcurrentNode + \" to be decoupled (no relationships left)\" );\n\t\t}\n\t\tNode otherNode = rel.getOtherNode( currentNode );\n\t\tif ( !otherNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tboolean deleteOtherNodeWhenEmpty =\n\t\t\t\tparser.options().containsKey( \"d\" );\n\t\t\tif ( !deleteOtherNodeWhenEmpty )\n\t\t\t{\n\t\t\t\tthrow new ShellException( \"Since the node \" + \n\t\t\t\t\tgetDisplayNameForNode( otherNode ) +\n\t\t\t\t\t\" would be decoupled after this, you must supply the\" +\n\t\t\t\t\t\" -d (for delete-when-decoupled) so that it may be \" +\n\t\t\t\t\t\"removed\" ); \n\t\t\t}\n\t\t\totherNode.delete();\n\t\t}\n//\t\telse\n//\t\t{\n//\t\t\t if ( !this.hasPathToRefNode( otherNode ) )\n//\t\t\t {\n//\t\t\t\t throw new ShellException( \"It would result in \" + otherNode +\n//\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n//\t\t\t }\n//\t\t\t if ( !this.hasPathToRefNode( currentNode ) )\n//\t\t\t {\n//\t\t\t\t throw new ShellException( \"It would result in \" + currentNode +\n//\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n//\t\t\t }\n//\t\t}\n\t\treturn null;\n\t}","id":12450,"modified_method":"@Override\n\tprotected String exec( AppCommandParser parser, Session session, Output out )\n\t\tthrows ShellException, RemoteException\n\t{\n\t\tif ( parser.options().get( \"r\" ) == null )\n\t\t{\n\t\t\tthrow new ShellException(\n\t\t\t\t\"Must supply relationship id (-r <id>) to delete\" );\n\t\t}\n\t\t\n\t\tNode currentNode = this.getCurrentNode( session );\n\t\tRelationship rel = findRel( currentNode, Long.parseLong(\n\t\t\tparser.options().get( \"r\" ) ) );\n\t\trel.delete();\n\t\tif ( !currentNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tthrow new ShellException( \"It would result in the current node \" +\n\t\t\t\tcurrentNode + \" to be decoupled (no relationships left)\" );\n\t\t}\n\t\tNode otherNode = rel.getOtherNode( currentNode );\n\t\tif ( !otherNode.getRelationships().iterator().hasNext() )\n\t\t{\n\t\t\tboolean deleteOtherNodeWhenEmpty =\n\t\t\t\tparser.options().containsKey( \"d\" );\n\t\t\tif ( !deleteOtherNodeWhenEmpty )\n\t\t\t{\n\t\t\t\tthrow new ShellException( \"Since the node \" + \n\t\t\t\t\tgetDisplayNameForNode( otherNode ) +\n\t\t\t\t\t\" would be decoupled after this, you must supply the\" +\n\t\t\t\t\t\" -d (for delete-when-decoupled) so that the other node \" +\n\t\t\t\t\t\"(\" + otherNode + \") may be deleted\" ); \n\t\t\t}\n\t\t\totherNode.delete();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t if ( !this.hasPathToRefNode( otherNode ) )\n\t\t\t {\n\t\t\t\t throw new ShellException( \"It would result in \" + otherNode +\n\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n\t\t\t }\n\t\t\t if ( !this.hasPathToRefNode( currentNode ) )\n\t\t\t {\n\t\t\t\t throw new ShellException( \"It would result in \" + currentNode +\n\t\t\t\t\t \" to be recursively decoupled with the reference node\" );\n\t\t\t }\n\t\t}\n\t\treturn null;\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Rmrel()\n\t{\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship id.\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Must be supplied if the affected other node gets decoupled \" +\n\t\t\t\"after this operation so that it gets deleted.\" ) );\n\t}","id":12451,"modified_method":"/**\n\t * Constructs a new application which can delete relationships in neo.\n\t */\n\tpublic Rmrel()\n\t{\n\t\tthis.addValueType( \"r\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"The relationship id.\" ) );\n\t\tthis.addValueType( \"d\", new OptionContext( OptionValueType.NONE,\n\t\t\t\"Must be supplied if the affected other node gets decoupled \" +\n\t\t\t\"after this operation so that it gets deleted.\" ) );\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Set()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Value type, String, Integer, Long, Byte a.s.o.\" ) );\n\t}","id":12452,"modified_method":"/**\n\t * Constructs a new \"set\" application.\n\t */\n\tpublic Set()\n\t{\n\t\tthis.addValueType( \"t\", new OptionContext( OptionValueType.MUST,\n\t\t\t\"Value type, String, Integer, Long, Byte a.s.o.\" ) );\n\t}","commit_id":"efc5bb9886f6fae3d504a401f7ab160a3238ae8f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void copyModule(ModuleSpec module) throws IOException {\n        if (copiedModules.contains(module)) {\n            return;\n        }\n        copiedModules.add(module);\n        if (!JDKUtils.isJDKModule(module.getName()) && !JDKUtils.isOracleJDKModule(module.getName())) {\n            Collection<ModuleVersionDetails> versions = getModuleVersions(module.getName(), module.getVersion(), ModuleQuery.Type.ALL, null, null);\n            if (!versions.isEmpty()) {\n                ModuleVersionDetails ver = versions.iterator().next();\n                msg(\"copying.module\", module).newline();\n                for (String suffix : ArtifactContext.userSuffixes) {\n                    ArtifactContext ac = new ArtifactContext(module.getName(), module.getVersion(), suffix);\n                    ArtifactResult srcArchive = getRepositoryManager().getArtifactResult(ac);\n                    if (srcArchive != null) {\n                        copyArtifact(ac, srcArchive.artifact());\n                    }\n                }\n                if (recursive) {\n                    for (ModuleInfo dep : ver.getDependencies()) {\n                        ModuleSpec depModule = new ModuleSpec(dep.getName(), dep.getVersion());\n                        copyModule(depModule);\n                    }\n                }\n            } else {\n                errorMsg(\"module.not.found\", module, getRepositoryManager().getRepositoriesDisplayString());\n            }\n        }\n    }","id":12453,"modified_method":"private void copyModule(ModuleSpec module) throws IOException {\n        if (copiedModules.contains(module)) {\n            return;\n        }\n        copiedModules.add(module);\n        if (!JDKUtils.isJDKModule(module.getName()) && !JDKUtils.isOracleJDKModule(module.getName())) {\n            Collection<ModuleVersionDetails> versions = getModuleVersions(module.getName(), module.getVersion(), ModuleQuery.Type.ALL, null, null);\n            if (!versions.isEmpty()) {\n                ModuleVersionDetails ver = versions.iterator().next();\n                msg(\"copying.module\", module).newline();\n                for (String suffix : ArtifactContext.userSuffixes) {\n                    ArtifactContext ac = new ArtifactContext(module.getName(), module.getVersion(), suffix);\n                    ArtifactResult srcArchive = getRepositoryManager().getArtifactResult(ac);\n                    if (srcArchive != null) {\n                        copyArtifact(ac, srcArchive.artifact());\n                    }\n                }\n                if (recursive) {\n                    for (ModuleInfo dep : ver.getDependencies()) {\n                        ModuleSpec depModule = new ModuleSpec(dep.getName(), dep.getVersion());\n                        copyModule(depModule);\n                    }\n                }\n            } else {\n                String err = getModuleNotFoundErrorMessage(getRepositoryManager(), module.getName(), module.getVersion());\n                errorAppend(err);\n                errorNewline();\n            }\n        }\n    }","commit_id":"ad11720713e606dbaf76d4e5d7b2a6eff40eb1ae","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void run() throws Exception {\n        setSystemProperties();\n        if (!showIncompatible) {\n            binaryMajor = Versions.JVM_BINARY_MAJOR_VERSION;\n            binaryMinor = Versions.JVM_BINARY_MINOR_VERSION;\n        }\n        for (ModuleSpec module : modules) {\n            String name = module.getName();\n            if (!module.isVersioned() && (name.startsWith(\"*\") || name.endsWith(\"*\"))) {\n                Collection<ModuleDetails> modules = getModules(name, queryType, binaryMajor, binaryMinor);\n                if (modules.isEmpty()) {\n                    errorMsg(\"module.not.found\", module, getRepositoryManager().getRepositoriesDisplayString());\n                    continue;\n                }\n                outputModules(module, modules);\n            } else {\n                Collection<ModuleVersionDetails> versions = getModuleVersions(module.getName(), module.getVersion(), queryType, binaryMajor, binaryMinor);\n                if (versions.isEmpty()) {\n                    errorMsg(\"module.not.found\", module, getRepositoryManager().getRepositoriesDisplayString());\n                    continue;\n                }\n                if (module.getVersion() == null || module.getVersion().isEmpty()) {\n                    outputVersions(module, versions);\n                } else {\n                    outputDetails(module, versions.iterator().next());\n                }\n            }\n        }\n    }","id":12454,"modified_method":"@Override\n    public void run() throws Exception {\n        setSystemProperties();\n        if (!showIncompatible) {\n            binaryMajor = Versions.JVM_BINARY_MAJOR_VERSION;\n            binaryMinor = Versions.JVM_BINARY_MINOR_VERSION;\n        }\n        for (ModuleSpec module : modules) {\n            String name = module.getName();\n            if (!module.isVersioned() && (name.startsWith(\"*\") || name.endsWith(\"*\"))) {\n                Collection<ModuleDetails> modules = getModules(name, queryType, binaryMajor, binaryMinor);\n                if (modules.isEmpty()) {\n                    String err = getModuleNotFoundErrorMessage(getRepositoryManager(), module.getName(), module.getVersion());\n                    errorAppend(err);\n                    errorNewline();\n                    continue;\n                }\n                outputModules(module, modules);\n            } else {\n                Collection<ModuleVersionDetails> versions = getModuleVersions(module.getName(), module.getVersion(), queryType, binaryMajor, binaryMinor);\n                if (versions.isEmpty()) {\n                    String err = getModuleNotFoundErrorMessage(getRepositoryManager(), module.getName(), module.getVersion());\n                    errorAppend(err);\n                    errorNewline();\n                    continue;\n                }\n                if (module.getVersion() == null || module.getVersion().isEmpty()) {\n                    outputVersions(module, versions);\n                } else {\n                    outputDetails(module, versions.iterator().next());\n                }\n            }\n        }\n    }","commit_id":"ad11720713e606dbaf76d4e5d7b2a6eff40eb1ae","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void run() throws Exception {\n        setSystemProperties();\n        // First check if all the arguments point to source archives\n        for (ModuleSpec module : modules) {\n            if (module != ModuleSpec.DEFAULT_MODULE && !module.isVersioned()) {\n                if (checkModuleVersionsOrShowSuggestions(getRepositoryManager(), module.getName(), null, ModuleQuery.Type.SRC, null, null) == null) {\n                    return;\n                }\n            }\n        }\n        // If all are correct we unpack them\n        for (ModuleSpec module : modules) {\n            String version = module.getVersion();\n            if (module != ModuleSpec.DEFAULT_MODULE && !module.isVersioned()) {\n                version = checkModuleVersionsOrShowSuggestions(getRepositoryManager(), module.getName(), null, ModuleQuery.Type.SRC, null, null);\n            }\n            ArtifactResult srcArchive = getRepositoryManager().getArtifactResult(new ArtifactContext(module.getName(), version, ArtifactContext.SRC));\n            if (srcArchive == null) {\n                errorMsg(\"module.not.found\", module, getRepositoryManager().getRepositoriesDisplayString());\n                continue;\n            }\n            extractArchive(srcArchive, new File(src));\n        }\n    }","id":12455,"modified_method":"@Override\n    public void run() throws Exception {\n        setSystemProperties();\n        // First check if all the arguments point to source archives\n        for (ModuleSpec module : modules) {\n            if (module != ModuleSpec.DEFAULT_MODULE && !module.isVersioned()) {\n                if (checkModuleVersionsOrShowSuggestions(getRepositoryManager(), module.getName(), null, ModuleQuery.Type.SRC, null, null) == null) {\n                    return;\n                }\n            }\n        }\n        // If all are correct we unpack them\n        for (ModuleSpec module : modules) {\n            String version = module.getVersion();\n            if (module != ModuleSpec.DEFAULT_MODULE && !module.isVersioned()) {\n                version = checkModuleVersionsOrShowSuggestions(getRepositoryManager(), module.getName(), null, ModuleQuery.Type.SRC, null, null);\n            }\n            ArtifactResult srcArchive = getRepositoryManager().getArtifactResult(new ArtifactContext(module.getName(), version, ArtifactContext.SRC));\n            if (srcArchive == null) {\n                String err = getModuleNotFoundErrorMessage(getRepositoryManager(), module.getName(), module.getVersion());\n                errorAppend(err);\n                errorNewline();\n                continue;\n            }\n            extractArchive(srcArchive, new File(src));\n        }\n    }","commit_id":"ad11720713e606dbaf76d4e5d7b2a6eff40eb1ae","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private void checkParams() {\n    if (source.numCols() <= 1)\n      throw new IllegalArgumentException(\"Training data must have at least 2 features (incl. response).\");\n\n    if (hidden == null) throw new IllegalArgumentException(\"There must be at least one hidden layer.\");\n\n    for (int i=0;i<hidden.length;++i) {\n      if (hidden[i]==0)\n        throw new IllegalArgumentException(\"Hidden layer size must be >0.\");\n    }\n\n    //Auto-fill defaults\n    if (hidden_dropout_ratios == null) {\n      hidden_dropout_ratios = new double[hidden.length];\n      if (activation == Activation.TanhWithDropout || activation == Activation.MaxoutWithDropout || activation == Activation.RectifierWithDropout) {\n        if (!quiet_mode) Log.info(\"Automatically setting all hidden dropout ratios to 0.5.\");\n        Arrays.fill(hidden_dropout_ratios, 0.5);\n      }\n    }\n    else if (hidden_dropout_ratios.length != hidden.length) throw new IllegalArgumentException(\"Must have \" + hidden.length + \" hidden layer dropout ratios.\");\n    else if (hidden_dropout_ratios != null) {\n      if (activation != Activation.TanhWithDropout && activation != Activation.MaxoutWithDropout && activation != Activation.RectifierWithDropout) {\n        if (!quiet_mode) Log.info(\"Ignoring hidden_dropout_ratios because a non-Dropout activation function was specified.\");\n      }\n    }\n\n    if (!quiet_mode) {\n      if (adaptive_rate) {\n        Log.info(\"Using automatic learning rate.  Ignoring the following input parameters:\");\n        Log.info(\"  rate, rate_decay, rate_annealing, momentum_start, momentum_ramp, momentum_stable, nesterov_accelerated_gradient.\");\n      } else {\n        Log.info(\"Using manual learning rate.  Ignoring the following input parameters:\");\n        Log.info(\"  rho, epsilon.\");\n      }\n\n      if (initial_weight_distribution == InitialWeightDistribution.UniformAdaptive) {\n        Log.info(\"Ignoring initial_weight_scale for UniformAdaptive weight distribution.\");\n      }\n    }\n\n    if(loss == Loss.Automatic) {\n      if (!classification) {\n        if (!quiet_mode) Log.info(\"Automatically setting loss to MeanSquare for regression.\");\n        loss = Loss.MeanSquare;\n      }\n      else if (autoencoder) {\n        if (!quiet_mode) Log.info(\"Automatically setting loss to MeanSquare for auto-encoder.\");\n        loss = Loss.MeanSquare;\n      }\n      else {\n        if (!quiet_mode) Log.info(\"Automatically setting loss to Cross-Entropy for classification.\");\n        loss = Loss.CrossEntropy;\n      }\n    }\n    if (!classification && loss == Loss.CrossEntropy) throw new IllegalArgumentException(\"Cannot use CrossEntropy loss function for regression.\");\n    if (autoencoder && loss != Loss.MeanSquare) throw new IllegalArgumentException(\"Must use MeanSquare loss function for auto-encoder.\");\n    if (autoencoder && classification) { classification = false; Log.info(\"Using regression mode for auto-encoder.\");}\n\n    // reason for the error message below is that validation might not have the same horizontalized features as the training data (or different order)\n    if (autoencoder && validation != null) throw new UnsupportedOperationException(\"Cannot specify a validation dataset for auto-encoder.\");\n    if (autoencoder && activation == Activation.Maxout) throw new UnsupportedOperationException(\"Maxout activation is not supported for auto-encoder.\");\n\n    // make default job_key and destination_key in case they are missing\n    if (dest() == null) {\n      destination_key = Key.make();\n    }\n    if (self() == null) {\n      job_key = Key.make();\n    }\n    if (UKV.get(self()) == null) {\n      start_time = System.currentTimeMillis();\n      state      = JobState.RUNNING;\n      UKV.put(self(), this);\n      _fakejob = true;\n    }\n    if (!sparse && col_major) {\n      if (!quiet_mode) throw new IllegalArgumentException(\"Cannot use column major storage for non-sparse data handling.\");\n    }\n  }","id":12456,"modified_method":"private void checkParams() {\n    if (source.numCols() <= 1)\n      throw new IllegalArgumentException(\"Training data must have at least 2 features (incl. response).\");\n\n    if (hidden == null) throw new IllegalArgumentException(\"There must be at least one hidden layer.\");\n\n    for (int i=0;i<hidden.length;++i) {\n      if (hidden[i]==0)\n        throw new IllegalArgumentException(\"Hidden layer size must be >0.\");\n    }\n\n    //Auto-fill defaults\n    if (hidden_dropout_ratios == null) {\n      if (activation == Activation.TanhWithDropout || activation == Activation.MaxoutWithDropout || activation == Activation.RectifierWithDropout) {\n        hidden_dropout_ratios = new double[hidden.length];\n        if (!quiet_mode) Log.info(\"Automatically setting all hidden dropout ratios to 0.5.\");\n        Arrays.fill(hidden_dropout_ratios, 0.5);\n      }\n    }\n    else if (hidden_dropout_ratios.length != hidden.length) throw new IllegalArgumentException(\"Must have \" + hidden.length + \" hidden layer dropout ratios.\");\n    else if (activation != Activation.TanhWithDropout && activation != Activation.MaxoutWithDropout && activation != Activation.RectifierWithDropout) {\n      if (!quiet_mode) Log.info(\"Ignoring hidden_dropout_ratios because a non-Dropout activation function was specified.\");\n    }\n\n    if (!quiet_mode) {\n      if (adaptive_rate) {\n        Log.info(\"Using automatic learning rate.  Ignoring the following input parameters:\");\n        Log.info(\"  rate, rate_decay, rate_annealing, momentum_start, momentum_ramp, momentum_stable, nesterov_accelerated_gradient.\");\n      } else {\n        Log.info(\"Using manual learning rate.  Ignoring the following input parameters:\");\n        Log.info(\"  rho, epsilon.\");\n      }\n\n      if (initial_weight_distribution == InitialWeightDistribution.UniformAdaptive) {\n        Log.info(\"Ignoring initial_weight_scale for UniformAdaptive weight distribution.\");\n      }\n    }\n\n    if(loss == Loss.Automatic) {\n      if (!classification) {\n        if (!quiet_mode) Log.info(\"Automatically setting loss to MeanSquare for regression.\");\n        loss = Loss.MeanSquare;\n      }\n      else if (autoencoder) {\n        if (!quiet_mode) Log.info(\"Automatically setting loss to MeanSquare for auto-encoder.\");\n        loss = Loss.MeanSquare;\n      }\n      else {\n        if (!quiet_mode) Log.info(\"Automatically setting loss to Cross-Entropy for classification.\");\n        loss = Loss.CrossEntropy;\n      }\n    }\n    if (!classification && loss == Loss.CrossEntropy) throw new IllegalArgumentException(\"Cannot use CrossEntropy loss function for regression.\");\n    if (autoencoder && loss != Loss.MeanSquare) throw new IllegalArgumentException(\"Must use MeanSquare loss function for auto-encoder.\");\n    if (autoencoder && classification) { classification = false; Log.info(\"Using regression mode for auto-encoder.\");}\n\n    // reason for the error message below is that validation might not have the same horizontalized features as the training data (or different order)\n    if (autoencoder && validation != null) throw new UnsupportedOperationException(\"Cannot specify a validation dataset for auto-encoder.\");\n    if (autoencoder && activation == Activation.Maxout) throw new UnsupportedOperationException(\"Maxout activation is not supported for auto-encoder.\");\n\n    // make default job_key and destination_key in case they are missing\n    if (dest() == null) {\n      destination_key = Key.make();\n    }\n    if (self() == null) {\n      job_key = Key.make();\n    }\n    if (UKV.get(self()) == null) {\n      start_time = System.currentTimeMillis();\n      state      = JobState.RUNNING;\n      UKV.put(self(), this);\n      _fakejob = true;\n    }\n    if (!sparse && col_major) {\n      if (!quiet_mode) throw new IllegalArgumentException(\"Cannot use column major storage for non-sparse data handling.\");\n    }\n  }","commit_id":"b3fd5389173f902d629e59a73e47d6f6da243af0","url":"https://github.com/h2oai/h2o-2"},{"original_method":"@Override protected SB toJavaInit(SB sb, SB fileContextSB) {\n    sb = super.toJavaInit(sb, fileContextSB);\n    JCodeGen.toStaticVar(sb, \"NUMS\", new double[model_info().data_info()._nums], \"Workspace for storing numerical input variables.\");\n    JCodeGen.toStaticVar(sb, \"CATS\", new int[model_info().data_info()._cats], \"Workspace for storing categorical input variables.\");\n    JCodeGen.toStaticVar(sb, \"CATOFFSETS\", model_info().data_info()._catOffsets, \"Workspace for categorical offsets.\");\n    JCodeGen.toStaticVar(sb, \"NORMMUL\", model_info().data_info()._normMul, \"Standardization/Normalization scaling factor for numerical variables.\");\n    JCodeGen.toStaticVar(sb, \"NORMSUB\", model_info().data_info()._normSub, \"Standardization/Normalization offset for numerical variables.\");\n    JCodeGen.toStaticVar(sb, \"NORMRESPMUL\", model_info().data_info()._normRespMul, \"Standardization/Normalization scaling factor for response.\");\n    JCodeGen.toStaticVar(sb, \"NORMRESPSUB\", model_info().data_info()._normRespSub, \"Standardization/Normalization offset for response.\");\n\n    Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(model_info());\n    int[] layers = new int[neurons.length];\n    for (int i=0;i<neurons.length;++i)\n      layers[i] = neurons[i].units;\n    JCodeGen.toStaticVar(sb, \"NEURONS\", layers, \"Number of neurons for each layer.\");\n\n    // activation storage\n    sb.i().p(\"// Storage for neuron activation values.\").nl();\n    sb.i().p(\"public static final float[][] ACTIVATION = new float[][] {\").nl();\n    for (int i=0; i<neurons.length; i++) {\n      String colInfoClazz = \"Activation_\"+i;\n      sb.i(1).p(\"/* \").p(neurons[i].getClass().getSimpleName()).p(\" */ \");\n      sb.p(colInfoClazz).p(\".VALUES\");\n      if (i!=neurons.length-1) sb.p(',');\n      sb.nl();\n      fileContextSB.i().p(\"// Neuron activation values for \").p(neurons[i].getClass().getSimpleName()).p(\" layer\").nl();\n      JCodeGen.toClassWithArray(fileContextSB, null, colInfoClazz, new float[layers[i]]);\n    }\n    sb.i().p(\"};\").nl();\n\n    // biases\n    sb.i().p(\"// Neuron bias values.\").nl();\n    sb.i().p(\"public static final float[][] BIAS = new float[][] {\").nl();\n    for (int i=0; i<neurons.length; i++) {\n      String colInfoClazz = \"Bias_\"+i;\n      sb.i(1).p(\"/* \").p(neurons[i].getClass().getSimpleName()).p(\" */ \");\n      sb.p(colInfoClazz).p(\".VALUES\");\n      if (i!=neurons.length-1) sb.p(',');\n      sb.nl();\n      fileContextSB.i().p(\"// Neuron bias values for \").p(neurons[i].getClass().getSimpleName()).p(\" layer\").nl();\n      float[] bias = i == 0 ? null : new float[model_info().get_biases(i-1).size()];\n      if (i>0) {\n        for (int j=0; j<bias.length; ++j) bias[j] = model_info().get_biases(i-1).get(j);\n      }\n      JCodeGen.toClassWithArray(fileContextSB, null, colInfoClazz, bias);\n    }\n    sb.i().p(\"};\").nl();\n\n    // weights\n    sb.i().p(\"// Connecting weights between neurons.\").nl();\n    sb.i().p(\"public static final float[][] WEIGHT = new float[][] {\").nl();\n    for (int i=0; i<neurons.length; i++) {\n      String colInfoClazz = \"Weight_\"+i;\n      sb.i(1).p(\"/* \").p(neurons[i].getClass().getSimpleName()).p(\" */ \");\n      sb.p(colInfoClazz).p(\".VALUES\");\n      if (i!=neurons.length-1) sb.p(',');\n      sb.nl();\n      if (i > 0) {\n        fileContextSB.i().p(\"// Neuron weights connecting \").\n                p(neurons[i - 1].getClass().getSimpleName()).p(\" and \").\n                p(neurons[i].getClass().getSimpleName()).\n                p(\" layer\").nl();\n      }\n      float[] weights = i == 0 ? null : new float[model_info().get_weights(i-1).rows()*model_info().get_weights(i-1).cols()];\n      if (i>0) {\n        final int rows = model_info().get_weights(i-1).rows();\n        final int cols = model_info().get_weights(i-1).cols();\n        for (int j=0; j<rows; ++j)\n          for (int k=0; k<cols; ++k)\n            weights[j*cols+k] = model_info().get_weights(i-1).get(j,k);\n      }\n      JCodeGen.toClassWithArray(fileContextSB, null, colInfoClazz, weights);\n    }\n    sb.i().p(\"};\").nl();\n\n    return sb;\n  }","id":12457,"modified_method":"@Override protected SB toJavaInit(SB sb, SB fileContextSB) {\n    sb = super.toJavaInit(sb, fileContextSB);\n    if (model_info().data_info()._nums > 0) {\n      JCodeGen.toStaticVar(sb, \"NUMS\", new double[model_info().data_info()._nums], \"Workspace for storing numerical input variables.\");\n      JCodeGen.toStaticVar(sb, \"NORMMUL\", model_info().data_info()._normMul, \"Standardization/Normalization scaling factor for numerical variables.\");\n      JCodeGen.toStaticVar(sb, \"NORMSUB\", model_info().data_info()._normSub, \"Standardization/Normalization offset for numerical variables.\");\n    }\n    if (model_info().data_info()._cats > 0) {\n      JCodeGen.toStaticVar(sb, \"CATS\", new int[model_info().data_info()._cats], \"Workspace for storing categorical input variables.\");\n    }\n    JCodeGen.toStaticVar(sb, \"CATOFFSETS\", model_info().data_info()._catOffsets, \"Workspace for categorical offsets.\");\n    if (model_info().data_info()._normRespMul != null) {\n      JCodeGen.toStaticVar(sb, \"NORMRESPMUL\", model_info().data_info()._normRespMul, \"Standardization/Normalization scaling factor for response.\");\n      JCodeGen.toStaticVar(sb, \"NORMRESPSUB\", model_info().data_info()._normRespSub, \"Standardization/Normalization offset for response.\");\n    }\n    if (get_params().hidden_dropout_ratios != null) {\n      JCodeGen.toStaticVar(sb, \"HIDDEN_DROPOUT_RATIOS\", get_params().hidden_dropout_ratios, \"Hidden layer dropout ratios.\");\n    }\n\n    Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(model_info());\n    int[] layers = new int[neurons.length];\n    for (int i=0;i<neurons.length;++i)\n      layers[i] = neurons[i].units;\n    JCodeGen.toStaticVar(sb, \"NEURONS\", layers, \"Number of neurons for each layer.\");\n\n    // activation storage\n    sb.i().p(\"// Storage for neuron activation values.\").nl();\n    sb.i().p(\"public static final float[][] ACTIVATION = new float[][] {\").nl();\n    for (int i=0; i<neurons.length; i++) {\n      String colInfoClazz = \"Activation_\"+i;\n      sb.i(1).p(\"/* \").p(neurons[i].getClass().getSimpleName()).p(\" */ \");\n      sb.p(colInfoClazz).p(\".VALUES\");\n      if (i!=neurons.length-1) sb.p(',');\n      sb.nl();\n      fileContextSB.i().p(\"// Neuron activation values for \").p(neurons[i].getClass().getSimpleName()).p(\" layer\").nl();\n      JCodeGen.toClassWithArray(fileContextSB, null, colInfoClazz, new float[layers[i]]);\n    }\n    sb.i().p(\"};\").nl();\n\n    // biases\n    sb.i().p(\"// Neuron bias values.\").nl();\n    sb.i().p(\"public static final float[][] BIAS = new float[][] {\").nl();\n    for (int i=0; i<neurons.length; i++) {\n      String colInfoClazz = \"Bias_\"+i;\n      sb.i(1).p(\"/* \").p(neurons[i].getClass().getSimpleName()).p(\" */ \");\n      sb.p(colInfoClazz).p(\".VALUES\");\n      if (i!=neurons.length-1) sb.p(',');\n      sb.nl();\n      fileContextSB.i().p(\"// Neuron bias values for \").p(neurons[i].getClass().getSimpleName()).p(\" layer\").nl();\n      float[] bias = i == 0 ? null : new float[model_info().get_biases(i-1).size()];\n      if (i>0) {\n        for (int j=0; j<bias.length; ++j) bias[j] = model_info().get_biases(i-1).get(j);\n      }\n      JCodeGen.toClassWithArray(fileContextSB, null, colInfoClazz, bias);\n    }\n    sb.i().p(\"};\").nl();\n\n    // weights\n    sb.i().p(\"// Connecting weights between neurons.\").nl();\n    sb.i().p(\"public static final float[][] WEIGHT = new float[][] {\").nl();\n    for (int i=0; i<neurons.length; i++) {\n      String colInfoClazz = \"Weight_\"+i;\n      sb.i(1).p(\"/* \").p(neurons[i].getClass().getSimpleName()).p(\" */ \");\n      sb.p(colInfoClazz).p(\".VALUES\");\n      if (i!=neurons.length-1) sb.p(',');\n      sb.nl();\n      if (i > 0) {\n        fileContextSB.i().p(\"// Neuron weights connecting \").\n                p(neurons[i - 1].getClass().getSimpleName()).p(\" and \").\n                p(neurons[i].getClass().getSimpleName()).\n                p(\" layer\").nl();\n      }\n      float[] weights = i == 0 ? null : new float[model_info().get_weights(i-1).rows()*model_info().get_weights(i-1).cols()];\n      if (i>0) {\n        final int rows = model_info().get_weights(i-1).rows();\n        final int cols = model_info().get_weights(i-1).cols();\n        for (int j=0; j<rows; ++j)\n          for (int k=0; k<cols; ++k)\n            weights[j*cols+k] = model_info().get_weights(i-1).get(j,k);\n      }\n      JCodeGen.toClassWithArray(fileContextSB, null, colInfoClazz, weights);\n    }\n    sb.i().p(\"};\").nl();\n\n    return sb;\n  }","commit_id":"b3fd5389173f902d629e59a73e47d6f6da243af0","url":"https://github.com/h2oai/h2o-2"},{"original_method":"@Override public String toString() {\n      StringBuilder sb = new StringBuilder();\n      if (get_params().diagnostics && !get_params().quiet_mode) {\n        Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(this);\n        sb.append(\"Status of Neuron Layers:\\n\");\n        sb.append(\"#  Units         Type      Dropout    L1       L2    \" + (get_params().adaptive_rate ? \"  Rate (Mean,RMS)   \" : \"  Rate      Momentum\") + \"   Weight (Mean, RMS)      Bias (Mean,RMS)\\n\");\n        final String format = \"%7g\";\n        for (int i=0; i<neurons.length; ++i) {\n          sb.append((i+1) + \" \" + String.format(\"%6d\", neurons[i].units)\n                  + \" \" + String.format(\"%16s\", neurons[i].getClass().getSimpleName()));\n          if (i == 0) {\n            sb.append(\"  \" + Utils.formatPct(neurons[i].params.input_dropout_ratio) + \" \\n\");\n            continue;\n          }\n          else if (i < neurons.length-1) {\n            sb.append(\"  \" + Utils.formatPct(neurons[i].params.hidden_dropout_ratios[i - 1]) + \" \");\n          } else {\n            sb.append(\"          \");\n          }\n          sb.append(\n                  \" \" + String.format(\"%5f\", neurons[i].params.l1)\n                          + \" \" + String.format(\"%5f\", neurons[i].params.l2)\n                          + \" \" + (get_params().adaptive_rate ? (\" (\" + String.format(format, mean_rate[i]) + \", \" + String.format(format, rms_rate[i]) + \")\" )\n                          : (String.format(\"%10g\", neurons[i].rate(get_processed_total())) + \" \" + String.format(\"%5f\", neurons[i].momentum(get_processed_total()))))\n                          + \" (\" + String.format(format, mean_weight[i])\n                          + \", \" + String.format(format, rms_weight[i]) + \")\"\n                          + \" (\" + String.format(format, mean_bias[i])\n                          + \", \" + String.format(format, rms_bias[i]) + \")\\n\");\n        }\n      }\n      return sb.toString();\n    }","id":12458,"modified_method":"@Override public String toString() {\n      StringBuilder sb = new StringBuilder();\n      if (get_params().diagnostics && !get_params().quiet_mode) {\n        Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(this);\n        sb.append(\"Status of Neuron Layers:\\n\");\n        sb.append(\"#  Units         Type      Dropout    L1       L2    \" + (get_params().adaptive_rate ? \"  Rate (Mean,RMS)   \" : \"  Rate      Momentum\") + \"   Weight (Mean, RMS)      Bias (Mean,RMS)\\n\");\n        final String format = \"%7g\";\n        for (int i=0; i<neurons.length; ++i) {\n          sb.append((i+1) + \" \" + String.format(\"%6d\", neurons[i].units)\n                  + \" \" + String.format(\"%16s\", neurons[i].getClass().getSimpleName()));\n          if (i == 0) {\n            sb.append(\"  \" + Utils.formatPct(neurons[i].params.input_dropout_ratio) + \" \\n\");\n            continue;\n          }\n          else if (i < neurons.length-1) {\n            if (neurons[i].params.hidden_dropout_ratios == null)\n              sb.append(\"  \" + Utils.formatPct(0) + \" \");\n            else\n              sb.append(\"  \" + Utils.formatPct(neurons[i].params.hidden_dropout_ratios[i - 1]) + \" \");\n          } else {\n            sb.append(\"          \");\n          }\n          sb.append(\n                  \" \" + String.format(\"%5f\", neurons[i].params.l1)\n                          + \" \" + String.format(\"%5f\", neurons[i].params.l2)\n                          + \" \" + (get_params().adaptive_rate ? (\" (\" + String.format(format, mean_rate[i]) + \", \" + String.format(format, rms_rate[i]) + \")\" )\n                          : (String.format(\"%10g\", neurons[i].rate(get_processed_total())) + \" \" + String.format(\"%5f\", neurons[i].momentum(get_processed_total()))))\n                          + \" (\" + String.format(format, mean_weight[i])\n                          + \", \" + String.format(format, rms_weight[i]) + \")\"\n                          + \" (\" + String.format(format, mean_bias[i])\n                          + \", \" + String.format(format, rms_bias[i]) + \")\\n\");\n        }\n      }\n      return sb.toString();\n    }","commit_id":"b3fd5389173f902d629e59a73e47d6f6da243af0","url":"https://github.com/h2oai/h2o-2"},{"original_method":"@Override protected void toJavaPredictBody( final SB bodySb, final SB classCtxSb, final SB fileCtxSb) {\n    SB model = new SB();\n    bodySb.i().p(\"java.util.Arrays.fill(preds,0f);\").nl();\n    // initialize input layer\n    if (model_info().data_info()._nums > 0) bodySb.i().p(\"java.util.Arrays.fill(NUMS,0f);\").nl();\n    if (model_info().data_info()._cats > 0) bodySb.i().p(\"java.util.Arrays.fill(CATS,0);\").nl();\n    bodySb.i().p(\"int i = 0, ncats = 0;\").nl();\n    final int cats = model_info().data_info()._cats;\n    if (cats > 0) {\n      bodySb.i().p(\"for(; i<\"+cats+\"; ++i) {\").nl();\n      bodySb.i(1).p(\"if (!Double.isNaN(data[i])) {\").nl();\n      bodySb.i(2).p(\"int c = (int) data[i];\").nl();\n      if (model_info().data_info()._useAllFactorLevels)\n        bodySb.i(2).p(\"CATS[ncats++] = c + CATOFFSETS[i];\").nl();\n      else\n        bodySb.i(2).p(\"if (c != 0) CATS[ncats++] = c + CATOFFSETS[i] - 1;\").nl();\n      bodySb.i(1).p(\"}\").nl();\n      bodySb.i().p(\"}\").nl();\n    }\n    bodySb.i().p(\"final int n = data.length;\").nl();\n    bodySb.i().p(\"for(; i<n; ++i) {\").nl();\n    bodySb.i(1).p(\"NUMS[i\"+(cats>0?\"-\"+cats:\"\")+\"] = Double.isNaN(data[i]) ? 0 : \");\n    if (model_info().data_info()._normMul != null) {\n      bodySb.p(\"(data[i] - NORMSUB[i\" + (cats > 0 ? \"-\" + cats : \"\") + \"])*NORMMUL[i\" + (cats > 0 ? \"-\" + cats : \"\") + \"];\").nl();\n    }\n    else {\n      bodySb.i(1).p(\"data[i];\").nl();\n    }\n    bodySb.i(0).p(\"}\").nl();\n    if (model_info().data_info()._cats > 0) {\n      bodySb.i().p(\"for (i=0; i<ncats; ++i) ACTIVATION[0][CATS[i]] = 1f;\").nl();\n    }\n    if (model_info().data_info()._nums > 0) {\n      bodySb.i().p(\"for (i=0; i<NUMS.length; ++i) {\").nl().i(1).p(\"ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0f : (float) NUMS[i];\").nl();\n      bodySb.i().p(\"}\").nl();\n    }\n\n    // make prediction: forward propagation\n    bodySb.i().p(\"for (i=1; i<ACTIVATION.length; ++i) {\").nl();\n    bodySb.i(1).p(\"java.util.Arrays.fill(ACTIVATION[i],0f);\").nl();\n    bodySb.i(1).p(\"for (int r=0; r<ACTIVATION[i].length; ++r) {\").nl();\n    bodySb.i(2).p(\"final int cols = ACTIVATION[i-1].length;\").nl();\n    bodySb.i(2).p(\"for (int c = 0; c < cols; ++c) {\").nl();\n    bodySb.i(3).p(\"ACTIVATION[i][r] += ACTIVATION[i-1][c] * WEIGHT[i][r*cols+c];\").nl();\n    bodySb.i(2).p(\"}\").nl();\n    bodySb.i(2).p(\"ACTIVATION[i][r] += BIAS[i][r];\").nl();\n    bodySb.i(1).p(\"}\").nl();\n    bodySb.i(1).p(\"if (i<ACTIVATION.length-1) {\").nl();\n    bodySb.i(2).p(\"for (int r=0; r<ACTIVATION[i].length; ++r) {\").nl();\n    if (get_params().activation == DeepLearning.Activation.Tanh\n            || get_params().activation == DeepLearning.Activation.TanhWithDropout)\n      bodySb.i(3).p(\"ACTIVATION[i][r] = 1f - 2f / (1f + (float)Math.exp(2*ACTIVATION[i][r]));\").nl();\n    else if (get_params().activation == DeepLearning.Activation.Rectifier\n            || get_params().activation == DeepLearning.Activation.RectifierWithDropout)\n      bodySb.i(3).p(\"ACTIVATION[i][r] = Math.max(0f, ACTIVATION[i][r]);\").nl();\n    else throw new UnsupportedOperationException(\"Maxout POJO scoring is not yet implemented.\");\n    bodySb.i(2).p(\"}\").nl();\n    bodySb.i(1).p(\"}\").nl();\n    if (isClassifier()) {\n      bodySb.i(1).p(\"else {\").nl();\n        // softmax\n        bodySb.i(2).p(\"float max = ACTIVATION[i][0];\").nl();\n        bodySb.i(2).p(\"for (int r = 1; r < ACTIVATION[i].length; r++) {\").nl();\n          bodySb.i(3).p(\"if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];\").nl();\n        bodySb.i(2).p(\"}\").nl();\n        bodySb.i(2).p(\"float scale = 0f;\").nl();\n        bodySb.i(2).p(\"for (int r = 0; r < ACTIVATION[i].length; r++) {\").nl();\n          bodySb.i(3).p(\"ACTIVATION[i][r] = (float) Math.exp(ACTIVATION[i][r] - max);\").nl();\n          bodySb.i(3).p(\"scale += ACTIVATION[i][r];\").nl();\n        bodySb.i(2).p(\"}\").nl();\n        bodySb.i(2).p(\"for (int r = 0; r < ACTIVATION[i].length; r++) {\").nl();\n          bodySb.i(3).p(\"if (Float.isNaN(ACTIVATION[i][r]))\").nl();\n            bodySb.i(4).p(\"throw new RuntimeException(\\\"Numerical instability, predicted NaN.\\\");\").nl();\n          bodySb.i(3).p(\"ACTIVATION[i][r] /= scale;\").nl();\n          bodySb.i(3).p(\"preds[r+1] = ACTIVATION[i][r];\").nl();\n        bodySb.i(2).p(\"}\").nl();\n      bodySb.i(1).p(\"}\").nl();\n      bodySb.i().p(\"}\").nl();\n    } else {\n      bodySb.i().p(\"}\").nl();\n      // regression: set preds[1], FillPreds0 will put it into preds[0]\n      if (model_info().data_info()._normRespMul != null) {\n        bodySb.i().p(\"preds[1] = (float) (ACTIVATION[ACTIVATION.length-1][0] / NORMRESPMUL[0] + NORMRESPSUB[0]);\").nl();\n      }\n      else\n        bodySb.i().p(\"preds[1] = ACTIVATION[ACTIVATION.length-1][0];\").nl();\n      bodySb.i().p(\"if (Float.isNaN(preds[1])) throw new RuntimeException(\\\"Predicted regression target NaN!\\\");\").nl();\n    }\n\n    fileCtxSb.p(model);\n    toJavaUnifyPreds(bodySb);\n    toJavaFillPreds0(bodySb);\n  }","id":12459,"modified_method":"@Override protected void toJavaPredictBody( final SB bodySb, final SB classCtxSb, final SB fileCtxSb) {\n    SB model = new SB();\n    bodySb.i().p(\"java.util.Arrays.fill(preds,0f);\").nl();\n    final int cats = model_info().data_info()._cats;\n    final int nums = model_info().data_info()._nums;\n    // initialize input layer\n    if (nums > 0) bodySb.i().p(\"java.util.Arrays.fill(NUMS,0f);\").nl();\n    if (cats > 0) bodySb.i().p(\"java.util.Arrays.fill(CATS,0);\").nl();\n    bodySb.i().p(\"int i = 0, ncats = 0;\").nl();\n    if (cats > 0) {\n      bodySb.i().p(\"for(; i<\"+cats+\"; ++i) {\").nl();\n      bodySb.i(1).p(\"if (!Double.isNaN(data[i])) {\").nl();\n      bodySb.i(2).p(\"int c = (int) data[i];\").nl();\n      if (model_info().data_info()._useAllFactorLevels)\n        bodySb.i(2).p(\"CATS[ncats++] = c + CATOFFSETS[i];\").nl();\n      else\n        bodySb.i(2).p(\"if (c != 0) CATS[ncats++] = c + CATOFFSETS[i] - 1;\").nl();\n      bodySb.i(1).p(\"}\").nl();\n      bodySb.i().p(\"}\").nl();\n    }\n    if (nums > 0) {\n      bodySb.i().p(\"final int n = data.length;\").nl();\n      bodySb.i().p(\"for(; i<n; ++i) {\").nl();\n        bodySb.i(1).p(\"NUMS[i\" + (cats > 0 ? \"-\" + cats : \"\") + \"] = Double.isNaN(data[i]) ? 0 : \");\n      if (model_info().data_info()._normMul != null) {\n        bodySb.i(1).p(\"(data[i] - NORMSUB[i\" + (cats > 0 ? \"-\" + cats : \"\") + \"])*NORMMUL[i\" + (cats > 0 ? \"-\" + cats : \"\") + \"];\").nl();\n      } else {\n        bodySb.i(1).p(\"data[i];\").nl();\n      }\n      bodySb.i(0).p(\"}\").nl();\n    }\n    if (cats > 0) {\n      bodySb.i().p(\"for (i=0; i<ncats; ++i) ACTIVATION[0][CATS[i]] = 1f;\").nl();\n    }\n    if (nums > 0) {\n      bodySb.i().p(\"for (i=0; i<NUMS.length; ++i) {\").nl();\n        bodySb.i(1).p(\"ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0f : (float) NUMS[i];\").nl();\n      bodySb.i().p(\"}\").nl();\n    }\n\n    // make prediction: forward propagation\n    bodySb.i().p(\"for (i=1; i<ACTIVATION.length; ++i) {\").nl();\n    bodySb.i(1).p(\"java.util.Arrays.fill(ACTIVATION[i],0f);\").nl();\n    bodySb.i(1).p(\"for (int r=0; r<ACTIVATION[i].length; ++r) {\").nl();\n      bodySb.i(2).p(\"final int cols = ACTIVATION[i-1].length;\").nl();\n      bodySb.i(2).p(\"for (int c = 0; c < cols; ++c) {\").nl();\n        bodySb.i(3).p(\"ACTIVATION[i][r] += ACTIVATION[i-1][c] * WEIGHT[i][r*cols+c];\").nl();\n      bodySb.i(2).p(\"}\").nl();\n      bodySb.i(2).p(\"ACTIVATION[i][r] += BIAS[i][r];\").nl();\n    bodySb.i(1).p(\"}\").nl();\n    bodySb.i(1).p(\"if (i<ACTIVATION.length-1) {\").nl();\n      bodySb.i(2).p(\"for (int r=0; r<ACTIVATION[i].length; ++r) {\").nl();\n    if (get_params().activation == DeepLearning.Activation.Tanh\n            || get_params().activation == DeepLearning.Activation.TanhWithDropout)\n        bodySb.i(3).p(\"ACTIVATION[i][r] = 1f - 2f / (1f + (float)Math.exp(2*ACTIVATION[i][r]));\").nl();\n    else if (get_params().activation == DeepLearning.Activation.Rectifier\n            || get_params().activation == DeepLearning.Activation.RectifierWithDropout)\n        bodySb.i(3).p(\"ACTIVATION[i][r] = Math.max(0f, ACTIVATION[i][r]);\").nl();\n    else throw new UnsupportedOperationException(\"Maxout POJO scoring is not yet implemented.\");\n    if (get_params().hidden_dropout_ratios != null)\n        bodySb.i(3).p(\"ACTIVATION[i][r] *= HIDDEN_DROPOUT_RATIOS[i-1];\").nl();\n      bodySb.i(2).p(\"}\").nl();\n    bodySb.i(1).p(\"}\").nl();\n    if (isClassifier()) {\n      bodySb.i(1).p(\"else {\").nl();\n        // softmax\n        bodySb.i(2).p(\"float max = ACTIVATION[i][0];\").nl();\n        bodySb.i(2).p(\"for (int r = 1; r < ACTIVATION[i].length; r++) {\").nl();\n          bodySb.i(3).p(\"if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];\").nl();\n        bodySb.i(2).p(\"}\").nl();\n        bodySb.i(2).p(\"float scale = 0f;\").nl();\n        bodySb.i(2).p(\"for (int r = 0; r < ACTIVATION[i].length; r++) {\").nl();\n          bodySb.i(3).p(\"ACTIVATION[i][r] = (float) Math.exp(ACTIVATION[i][r] - max);\").nl();\n          bodySb.i(3).p(\"scale += ACTIVATION[i][r];\").nl();\n        bodySb.i(2).p(\"}\").nl();\n        bodySb.i(2).p(\"for (int r = 0; r < ACTIVATION[i].length; r++) {\").nl();\n          bodySb.i(3).p(\"if (Float.isNaN(ACTIVATION[i][r]))\").nl();\n            bodySb.i(4).p(\"throw new RuntimeException(\\\"Numerical instability, predicted NaN.\\\");\").nl();\n          bodySb.i(3).p(\"ACTIVATION[i][r] /= scale;\").nl();\n          bodySb.i(3).p(\"preds[r+1] = ACTIVATION[i][r];\").nl();\n        bodySb.i(2).p(\"}\").nl();\n      bodySb.i(1).p(\"}\").nl();\n      bodySb.i().p(\"}\").nl();\n    } else {\n      bodySb.i().p(\"}\").nl();\n      // regression: set preds[1], FillPreds0 will put it into preds[0]\n      if (model_info().data_info()._normRespMul != null) {\n        bodySb.i().p(\"preds[1] = (float) (ACTIVATION[ACTIVATION.length-1][0] / NORMRESPMUL[0] + NORMRESPSUB[0]);\").nl();\n      }\n      else\n        bodySb.i().p(\"preds[1] = ACTIVATION[ACTIVATION.length-1][0];\").nl();\n      bodySb.i().p(\"if (Float.isNaN(preds[1])) throw new RuntimeException(\\\"Predicted regression target NaN!\\\");\").nl();\n    }\n\n    fileCtxSb.p(model);\n    toJavaUnifyPreds(bodySb);\n    toJavaFillPreds0(bodySb);\n  }","commit_id":"b3fd5389173f902d629e59a73e47d6f6da243af0","url":"https://github.com/h2oai/h2o-2"},{"original_method":"public boolean generateHTML(String title, StringBuilder sb) {\n    if (_key == null) {\n      DocGen.HTML.title(sb, \"No model yet\");\n      return true;\n    }\n\n    // optional JFrame creation for visualization of weights\n//    DeepLearningVisualization.visualize(this);\n\n    final String mse_format = \"%g\";\n//    final String cross_entropy_format = \"%2.6f\";\n\n    // stats for training and validation\n    final Errors error = last_scored();\n\n    DocGen.HTML.title(sb, title);\n\n    job().toHTML(sb);\n    final Key val_key = get_params().validation != null ? get_params().validation._key : null;\n    final Key bestModelKey = _actual_best_model_key;\n    sb.append(\"<div class='alert'>Actions: \"\n            + (jobKey != null && UKV.get(jobKey) != null && Job.isRunning(jobKey) ? \"<i class=\\\"icon-stop\\\"><\/i>\" + Cancel.link(jobKey, \"Stop training\") + \", \" : \"\")\n            + Inspect2.link(\"Inspect training data (\" + _dataKey + \")\", _dataKey) + \", \"\n            + (val_key != null ? (Inspect2.link(\"Inspect validation data (\" + val_key + \")\", val_key) + \", \") : \"\")\n            + water.api.Predict.link(_key, \"Score on dataset\") + \", \"\n            + DeepLearning.link(_dataKey, \"Compute new model\", null, responseName(), val_key)\n            + (bestModelKey != null && UKV.get(bestModelKey) != null && bestModelKey != _key ? \", \" + DeepLearningModelView.link(\"Go to best model\", bestModelKey) : \"\")\n            + (((jobKey != null && UKV.get(jobKey) == null)) || UKV.get(jobKey) != null && Job.isEnded(jobKey) ? \", <i class=\\\"icon-play\\\"><\/i>\" + DeepLearning.link(_dataKey, \"Continue training this model\", _key, responseName(), val_key) : \"\")\n            + \"<\/div>\");\n\n    DocGen.HTML.paragraph(sb, \"Model Key: \" + _key);\n    if (jobKey != null) DocGen.HTML.paragraph(sb, \"Job Key: \" + jobKey);\n    if (!get_params().autoencoder)\n      DocGen.HTML.paragraph(sb, \"Model type: \" + (get_params().classification ? \" Classification\" : \" Regression\") + \", predicting: \" + responseName());\n    else\n      DocGen.HTML.paragraph(sb, \"Model type: Auto-Encoder\");\n    DocGen.HTML.paragraph(sb, \"Number of model parameters (weights/biases): \" + String.format(\"%,d\", model_info().size()));\n\n    if (model_info.unstable()) {\n      final String msg = \"Job was aborted due to observed numerical instability (exponential growth).\"\n              + \" Try a bounded activation function or regularization with L1, L2 or max_w2 and/or use a smaller learning rate or faster annealing.\";\n      DocGen.HTML.section(sb, \"=======================================================================================\");\n      DocGen.HTML.section(sb, msg);\n      DocGen.HTML.section(sb, \"=======================================================================================\");\n    }\n\n    DocGen.HTML.title(sb, \"Progress\");\n    // update epoch counter every time the website is displayed\n    epoch_counter = training_rows > 0 ? (float)model_info().get_processed_total()/training_rows : 0;\n    final double progress = get_params().progress();\n\n    if (get_params() != null && get_params().diagnostics) {\n      DocGen.HTML.section(sb, \"Status of Neuron Layers\");\n      sb.append(\"<table class='table table-striped table-bordered table-condensed'>\");\n      sb.append(\"<tr>\");\n      sb.append(\"<th>\").append(\"#\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"Units\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"Type\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"Dropout\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"L1\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"L2\").append(\"<\/th>\");\n      if (get_params().adaptive_rate) {\n        sb.append(\"<th>\").append(\"Rate (Mean, RMS)\").append(\"<\/th>\");\n      } else {\n        sb.append(\"<th>\").append(\"Rate\").append(\"<\/th>\");\n        sb.append(\"<th>\").append(\"Momentum\").append(\"<\/th>\");\n      }\n      sb.append(\"<th>\").append(\"Weight (Mean, RMS)\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"Bias (Mean, RMS)\").append(\"<\/th>\");\n      sb.append(\"<\/tr>\");\n      Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(model_info()); //link the weights to the neurons, for easy access\n      for (int i=0; i<neurons.length; ++i) {\n        sb.append(\"<tr>\");\n        sb.append(\"<td>\").append(\"<b>\").append(i+1).append(\"<\/b>\").append(\"<\/td>\");\n        sb.append(\"<td>\").append(\"<b>\").append(neurons[i].units).append(\"<\/b>\").append(\"<\/td>\");\n        sb.append(\"<td>\").append(neurons[i].getClass().getSimpleName()).append(\"<\/td>\");\n\n        if (i == 0) {\n          sb.append(\"<td>\");\n          sb.append(Utils.formatPct(neurons[i].params.input_dropout_ratio));\n          sb.append(\"<\/td>\");\n          sb.append(\"<td><\/td>\");\n          sb.append(\"<td><\/td>\");\n          sb.append(\"<td><\/td>\");\n          if (!get_params().adaptive_rate) sb.append(\"<td><\/td>\");\n          sb.append(\"<td><\/td>\");\n          sb.append(\"<td><\/td>\");\n          sb.append(\"<\/tr>\");\n          continue;\n        }\n        else if (i < neurons.length-1) {\n          sb.append(\"<td>\");\n          sb.append(Utils.formatPct(neurons[i].params.hidden_dropout_ratios[i - 1]));\n          sb.append(\"<\/td>\");\n        } else {\n          sb.append(\"<td><\/td>\");\n        }\n\n        final String format = \"%g\";\n        sb.append(\"<td>\").append(neurons[i].params.l1).append(\"<\/td>\");\n        sb.append(\"<td>\").append(neurons[i].params.l2).append(\"<\/td>\");\n        if (get_params().adaptive_rate) {\n          sb.append(\"<td>(\").append(String.format(format, model_info.mean_rate[i])).\n                  append(\", \").append(String.format(format, model_info.rms_rate[i])).append(\")<\/td>\");\n        } else {\n          sb.append(\"<td>\").append(String.format(\"%.5g\", neurons[i].rate(error.training_samples))).append(\"<\/td>\");\n          sb.append(\"<td>\").append(String.format(\"%.5f\", neurons[i].momentum(error.training_samples))).append(\"<\/td>\");\n        }\n        sb.append(\"<td>(\").append(String.format(format, model_info.mean_weight[i])).\n                append(\", \").append(String.format(format, model_info.rms_weight[i])).append(\")<\/td>\");\n        sb.append(\"<td>(\").append(String.format(format, model_info.mean_bias[i])).\n                append(\", \").append(String.format(format, model_info.rms_bias[i])).append(\")<\/td>\");\n        sb.append(\"<\/tr>\");\n      }\n      sb.append(\"<\/table>\");\n    }\n\n    if (isClassifier() && !get_params().autoencoder) {\n      DocGen.HTML.section(sb, \"Classification error on training data: \" + Utils.formatPct(error.train_err));\n      if(error.validation) {\n        DocGen.HTML.section(sb, \"Classification error on validation data: \" + Utils.formatPct(error.valid_err));\n      } else if(error.num_folds > 0) {\n        DocGen.HTML.section(sb, \"Classification error on \" + error.num_folds + \"-fold cross-validated training data\"\n                + (_have_cv_results ? \": \" + Utils.formatPct(error.valid_err) : \" is being computed - please reload this page later.\"));\n      }\n    } else {\n      DocGen.HTML.section(sb, \"MSE on training data: \" + String.format(mse_format, error.train_mse));\n      if(error.validation) {\n        DocGen.HTML.section(sb, \"MSE on validation data: \" + String.format(mse_format, error.valid_mse));\n      } else if(error.num_folds > 0) {\n        DocGen.HTML.section(sb, \"MSE on \" + error.num_folds + \"-fold cross-validated training data\"\n                + (_have_cv_results ? \": \" + String.format(mse_format, error.valid_mse) : \" is being computed - please reload this page later.\"));\n      }\n    }\n    DocGen.HTML.paragraph(sb, \"Training samples: \" + String.format(\"%,d\", model_info().get_processed_total()));\n    DocGen.HTML.paragraph(sb, \"Epochs: \" + String.format(\"%.3f\", epoch_counter) + \" / \" + String.format(\"%.3f\", get_params().epochs));\n    int cores = 0; for (H2ONode n : H2O.CLOUD._memary) cores += n._heartbeat._num_cpus;\n    DocGen.HTML.paragraph(sb, \"Number of compute nodes: \" + (model_info.get_params().single_node_mode ? (\"1 (\" + H2O.NUMCPUS + \" threads)\") : (H2O.CLOUD.size() + \" (\" + cores + \" threads)\")));\n    DocGen.HTML.paragraph(sb, \"Training samples per iteration: \" + String.format(\"%,d\", get_params().actual_train_samples_per_iteration));\n    final boolean isEnded = get_params().self() == null || (UKV.get(get_params().self()) != null && Job.isEnded(get_params().self()));\n    final long time_so_far = isEnded ? run_time : run_time + System.currentTimeMillis() - _timeLastScoreEnter;\n    if (time_so_far > 0) {\n      DocGen.HTML.paragraph(sb, \"Training speed: \" + String.format(\"%,d\", model_info().get_processed_total() * 1000 / time_so_far) + \" samples/s\");\n    }\n    DocGen.HTML.paragraph(sb, \"Training time: \" + PrettyPrint.msecs(time_so_far, true));\n    if (progress > 0 && !isEnded)\n      DocGen.HTML.paragraph(sb, \"Estimated time left: \" +PrettyPrint.msecs((long)(time_so_far*(1-progress)/progress), true));\n\n    long score_train = error.score_training_samples;\n    long score_valid = error.score_validation_samples;\n    final boolean fulltrain = score_train==0 || score_train == training_rows;\n    final boolean fullvalid = error.validation && get_params().n_folds == 0 && (score_valid==0 || score_valid == get_params().validation.numRows());\n\n    final String toolarge = \" Confusion matrix not shown here - too large: number of classes (\" + model_info.units[model_info.units.length-1]\n            + \") is greater than the specified limit of \" + get_params().max_confusion_matrix_size + \".\";\n    boolean smallenough = model_info.units[model_info.units.length-1] <= get_params().max_confusion_matrix_size;\n\n    if (!error.validation) {\n      if (_have_cv_results) {\n        RString v_rs = new RString(\"<a href='Inspect2.html?src_key=%$key'>%key<\/a>\");\n        v_rs.replace(\"key\", get_params().source._key);\n        String cmTitle = \"<div class=\\\"alert\\\">Scoring results reported for \" + error.num_folds + \"-fold cross-validated training data \" + v_rs.toString() + \":<\/div>\";\n        sb.append(\"<h5>\" + cmTitle);\n        sb.append(\"<\/h5>\");\n      }\n      else {\n        RString t_rs = new RString(\"<a href='Inspect2.html?src_key=%$key'>%key<\/a>\");\n        t_rs.replace(\"key\", get_params().source._key);\n        String cmTitle = \"<div class=\\\"alert\\\">Scoring results reported on training data \" + t_rs.toString() + (fulltrain ? \"\" : \" (\" + score_train + \" samples)\") + \":<\/div>\";\n        sb.append(\"<h5>\" + cmTitle);\n        sb.append(\"<\/h5>\");\n      }\n    }\n    else {\n      RString v_rs = new RString(\"<a href='Inspect2.html?src_key=%$key'>%key<\/a>\");\n      v_rs.replace(\"key\", get_params().validation._key != null ? get_params().validation._key : \"\");\n      String cmTitle = \"<div class=\\\"alert\\\">Scoring results reported on validation data \" + v_rs.toString() + (fullvalid ? \"\" : \" (\" + score_valid + \" samples)\") + \":<\/div>\";\n      sb.append(\"<h5>\" + cmTitle);\n      sb.append(\"<\/h5>\");\n    }\n\n    if (isClassifier()) {\n      // print AUC\n      if (error.validAUC != null) {\n        error.validAUC.toHTML(sb);\n      }\n      else if (error.trainAUC != null) {\n        error.trainAUC.toHTML(sb);\n      }\n      else {\n        if (error.validation) {\n          if (error.valid_confusion_matrix != null && smallenough) {\n            error.valid_confusion_matrix.toHTML(sb);\n          } else if (smallenough) sb.append(\"<h5>Confusion matrix on validation data is not yet computed.<\/h5>\");\n          else sb.append(toolarge);\n        }\n        else if (_have_cv_results) {\n          if (error.valid_confusion_matrix != null && smallenough) {\n            error.valid_confusion_matrix.toHTML(sb);\n          } else if (smallenough) sb.append(\"<h5>Confusion matrix on \" + error.num_folds + \"-fold cross-validated training data is not yet computed.<\/h5>\");\n          else sb.append(toolarge);\n        }\n        else {\n          if (error.train_confusion_matrix != null && smallenough) {\n            error.train_confusion_matrix.toHTML(sb);\n          } else if (smallenough) sb.append(\"<h5>Confusion matrix on training data is not yet computed.<\/h5>\");\n          else sb.append(toolarge);\n        }\n      }\n    }\n\n    // Hit ratio\n    if (error.valid_hitratio != null) {\n      error.valid_hitratio.toHTML(sb);\n    } else if (error.train_hitratio != null) {\n      error.train_hitratio.toHTML(sb);\n    }\n\n    // Variable importance\n    if (error.variable_importances != null) {\n      error.variable_importances.toHTML(this, sb);\n    }\n\n    printCrossValidationModelsHTML(sb);\n\n    DocGen.HTML.title(sb, \"Scoring history\");\n    if (errors.length > 1) {\n      DocGen.HTML.paragraph(sb, \"Time taken for last scoring and diagnostics: \" + PrettyPrint.msecs(errors[errors.length-1].scoring_time, true));\n      // training\n      {\n        final long pts = fulltrain ? training_rows : score_train;\n        String training = \"Number of training data samples for scoring: \" + (fulltrain ? \"all \" : \"\") + pts;\n        if (pts < 1000 && training_rows >= 1000) training += \" (low, scoring might be inaccurate -> consider increasing this number in the expert mode)\";\n        if (pts > 100000 && errors[errors.length-1].scoring_time > 10000) training += \" (large, scoring can be slow -> consider reducing this number in the expert mode or scoring manually)\";\n        DocGen.HTML.paragraph(sb, training);\n      }\n      // validation\n      if (error.validation) {\n        final long ptsv = fullvalid ? get_params().validation.numRows() : score_valid;\n        String validation = \"Number of validation data samples for scoring: \" + (fullvalid ? \"all \" : \"\") + ptsv;\n        if (ptsv < 1000 && get_params().validation.numRows() >= 1000) validation += \" (low, scoring might be inaccurate -> consider increasing this number in the expert mode)\";\n        if (ptsv > 100000 && errors[errors.length-1].scoring_time > 10000) validation += \" (large, scoring can be slow -> consider reducing this number in the expert mode or scoring manually)\";\n        DocGen.HTML.paragraph(sb, validation);\n      }\n\n      if (isClassifier() && nclasses() != 2 /*binary classifier has its own conflicting D3 object (AUC)*/) {\n        // Plot training error\n        float[] err = new float[errors.length];\n        float[] samples = new float[errors.length];\n        for (int i=0; i<err.length; ++i) {\n          err[i] = (float)errors[i].train_err;\n          samples[i] = errors[i].training_samples;\n        }\n        new D3Plot(samples, err, \"training samples\", \"classification error\",\n                \"classification error on training data\").generate(sb);\n\n        // Plot validation error\n        if (get_params().validation != null) {\n          for (int i=0; i<err.length; ++i) {\n            err[i] = (float)errors[i].valid_err;\n          }\n          new D3Plot(samples, err, \"training samples\", \"classification error\",\n                  \"classification error on validation set\").generate(sb);\n        }\n      }\n      // regression\n      else if (!isClassifier()) {\n        // Plot training MSE\n        float[] err = new float[errors.length-1];\n        float[] samples = new float[errors.length-1];\n        for (int i=0; i<err.length; ++i) {\n          err[i] = (float)errors[i+1].train_mse;\n          samples[i] = errors[i+1].training_samples;\n        }\n        new D3Plot(samples, err, \"training samples\", \"MSE\",\n                \"regression error on training data\").generate(sb);\n\n        // Plot validation MSE\n        if (get_params().validation != null) {\n          for (int i=0; i<err.length; ++i) {\n            err[i] = (float)errors[i+1].valid_mse;\n          }\n          new D3Plot(samples, err, \"training samples\", \"MSE\",\n                  \"regression error on validation data\").generate(sb);\n        }\n      }\n    }\n\n//    String training = \"Number of training set samples for scoring: \" + error.score_training;\n    if (error.validation) {\n//      String validation = \"Number of validation set samples for scoring: \" + error.score_validation;\n    }\n    sb.append(\"<table class='table table-striped table-bordered table-condensed'>\");\n    sb.append(\"<tr>\");\n    sb.append(\"<th>Training Time<\/th>\");\n    sb.append(\"<th>Training Epochs<\/th>\");\n    sb.append(\"<th>Training Samples<\/th>\");\n    if (isClassifier() && !get_params().autoencoder) {\n//      sb.append(\"<th>Training MCE<\/th>\");\n      sb.append(\"<th>Training Error<\/th>\");\n      if (nclasses()==2) sb.append(\"<th>Training AUC<\/th>\");\n    } else {\n      sb.append(\"<th>Training MSE<\/th>\");\n    }\n    if (error.validation) {\n      if (isClassifier()) {\n//      sb.append(\"<th>Validation MCE<\/th>\");\n        sb.append(\"<th>Validation Error<\/th>\");\n        if (nclasses()==2) sb.append(\"<th>Validation AUC<\/th>\");\n      } else {\n        sb.append(\"<th>Validation MSE<\/th>\");\n      }\n    }\n    else if (error.num_folds > 0) {\n      if (isClassifier()) {\n        sb.append(\"<th>Cross-Validation Error<\/th>\");\n        if (nclasses()==2) sb.append(\"<th>Cross-Validation AUC<\/th>\");\n      } else {\n        sb.append(\"<th>Cross-Validation MSE<\/th>\");\n      }\n    }\n    sb.append(\"<\/tr>\");\n    for( int i = errors.length - 1; i >= 0; i-- ) {\n      final Errors e = errors[i];\n      sb.append(\"<tr>\");\n      sb.append(\"<td>\" + PrettyPrint.msecs(e.training_time_ms, true) + \"<\/td>\");\n      sb.append(\"<td>\" + String.format(\"%g\", e.epoch_counter) + \"<\/td>\");\n      sb.append(\"<td>\" + String.format(\"%,d\", e.training_samples) + \"<\/td>\");\n      if (isClassifier() && !get_params().autoencoder) {\n        sb.append(\"<td>\" + Utils.formatPct(e.train_err) + \"<\/td>\");\n        if (nclasses()==2) {\n          if (e.trainAUC != null) sb.append(\"<td>\" + Utils.formatPct(e.trainAUC.AUC()) + \"<\/td>\");\n          else sb.append(\"<td>\" + \"N/A\" + \"<\/td>\");\n        }\n      } else {\n        sb.append(\"<td>\" + String.format(mse_format, e.train_mse) + \"<\/td>\");\n      }\n      if(e.validation) {\n        if (isClassifier()) {\n          sb.append(\"<td>\" + Utils.formatPct(e.valid_err) + \"<\/td>\");\n          if (nclasses()==2) {\n            if (e.validAUC != null) sb.append(\"<td>\" + Utils.formatPct(e.validAUC.AUC()) + \"<\/td>\");\n            else sb.append(\"<td>\" + \"N/A\" + \"<\/td>\");\n          }\n        } else {\n          sb.append(\"<td>\" + String.format(mse_format, e.valid_mse) + \"<\/td>\");\n        }\n      }\n      else if(e.num_folds > 0) {\n        if (i == errors.length - 1 && _have_cv_results) {\n          if (isClassifier()) {\n            sb.append(\"<td>\" + Utils.formatPct(e.valid_err) + \"<\/td>\");\n            if (nclasses() == 2) {\n              if (e.validAUC != null) sb.append(\"<td>\" + Utils.formatPct(e.validAUC.AUC()) + \"<\/td>\");\n              else sb.append(\"<td>\" + \"N/A\" + \"<\/td>\");\n            }\n          } else {\n            sb.append(\"<td>\" + String.format(mse_format, e.valid_mse) + \"<\/td>\");\n          }\n        }\n        else {\n          sb.append(\"<td>N/A<\/td>\");\n          if (nclasses() == 2) sb.append(\"<td>N/A<\/td>\");\n        }\n      }\n      sb.append(\"<\/tr>\");\n    }\n    sb.append(\"<\/table>\");\n    return true;\n  }","id":12460,"modified_method":"public boolean generateHTML(String title, StringBuilder sb) {\n    if (_key == null) {\n      DocGen.HTML.title(sb, \"No model yet\");\n      return true;\n    }\n\n    // optional JFrame creation for visualization of weights\n//    DeepLearningVisualization.visualize(this);\n\n    final String mse_format = \"%g\";\n//    final String cross_entropy_format = \"%2.6f\";\n\n    // stats for training and validation\n    final Errors error = last_scored();\n\n    DocGen.HTML.title(sb, title);\n\n    job().toHTML(sb);\n    final Key val_key = get_params().validation != null ? get_params().validation._key : null;\n    final Key bestModelKey = _actual_best_model_key;\n    sb.append(\"<div class='alert'>Actions: \"\n            + (jobKey != null && UKV.get(jobKey) != null && Job.isRunning(jobKey) ? \"<i class=\\\"icon-stop\\\"><\/i>\" + Cancel.link(jobKey, \"Stop training\") + \", \" : \"\")\n            + Inspect2.link(\"Inspect training data (\" + _dataKey + \")\", _dataKey) + \", \"\n            + (val_key != null ? (Inspect2.link(\"Inspect validation data (\" + val_key + \")\", val_key) + \", \") : \"\")\n            + water.api.Predict.link(_key, \"Score on dataset\") + \", \"\n            + DeepLearning.link(_dataKey, \"Compute new model\", null, responseName(), val_key)\n            + (bestModelKey != null && UKV.get(bestModelKey) != null && bestModelKey != _key ? \", \" + DeepLearningModelView.link(\"Go to best model\", bestModelKey) : \"\")\n            + (((jobKey != null && UKV.get(jobKey) == null)) || UKV.get(jobKey) != null && Job.isEnded(jobKey) ? \", <i class=\\\"icon-play\\\"><\/i>\" + DeepLearning.link(_dataKey, \"Continue training this model\", _key, responseName(), val_key) : \"\")\n            + \"<\/div>\");\n\n    DocGen.HTML.paragraph(sb, \"Model Key: \" + _key);\n    if (jobKey != null) DocGen.HTML.paragraph(sb, \"Job Key: \" + jobKey);\n    if (!get_params().autoencoder)\n      DocGen.HTML.paragraph(sb, \"Model type: \" + (get_params().classification ? \" Classification\" : \" Regression\") + \", predicting: \" + responseName());\n    else\n      DocGen.HTML.paragraph(sb, \"Model type: Auto-Encoder\");\n    DocGen.HTML.paragraph(sb, \"Number of model parameters (weights/biases): \" + String.format(\"%,d\", model_info().size()));\n\n    if (model_info.unstable()) {\n      final String msg = \"Job was aborted due to observed numerical instability (exponential growth).\"\n              + \" Try a bounded activation function or regularization with L1, L2 or max_w2 and/or use a smaller learning rate or faster annealing.\";\n      DocGen.HTML.section(sb, \"=======================================================================================\");\n      DocGen.HTML.section(sb, msg);\n      DocGen.HTML.section(sb, \"=======================================================================================\");\n    }\n\n    DocGen.HTML.title(sb, \"Progress\");\n    // update epoch counter every time the website is displayed\n    epoch_counter = training_rows > 0 ? (float)model_info().get_processed_total()/training_rows : 0;\n    final double progress = get_params().progress();\n\n    if (get_params() != null && get_params().diagnostics) {\n      DocGen.HTML.section(sb, \"Status of Neuron Layers\");\n      sb.append(\"<table class='table table-striped table-bordered table-condensed'>\");\n      sb.append(\"<tr>\");\n      sb.append(\"<th>\").append(\"#\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"Units\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"Type\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"Dropout\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"L1\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"L2\").append(\"<\/th>\");\n      if (get_params().adaptive_rate) {\n        sb.append(\"<th>\").append(\"Rate (Mean, RMS)\").append(\"<\/th>\");\n      } else {\n        sb.append(\"<th>\").append(\"Rate\").append(\"<\/th>\");\n        sb.append(\"<th>\").append(\"Momentum\").append(\"<\/th>\");\n      }\n      sb.append(\"<th>\").append(\"Weight (Mean, RMS)\").append(\"<\/th>\");\n      sb.append(\"<th>\").append(\"Bias (Mean, RMS)\").append(\"<\/th>\");\n      sb.append(\"<\/tr>\");\n      Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(model_info()); //link the weights to the neurons, for easy access\n      for (int i=0; i<neurons.length; ++i) {\n        sb.append(\"<tr>\");\n        sb.append(\"<td>\").append(\"<b>\").append(i+1).append(\"<\/b>\").append(\"<\/td>\");\n        sb.append(\"<td>\").append(\"<b>\").append(neurons[i].units).append(\"<\/b>\").append(\"<\/td>\");\n        sb.append(\"<td>\").append(neurons[i].getClass().getSimpleName()).append(\"<\/td>\");\n\n        if (i == 0) {\n          sb.append(\"<td>\");\n          sb.append(Utils.formatPct(neurons[i].params.input_dropout_ratio));\n          sb.append(\"<\/td>\");\n          sb.append(\"<td><\/td>\");\n          sb.append(\"<td><\/td>\");\n          sb.append(\"<td><\/td>\");\n          if (!get_params().adaptive_rate) sb.append(\"<td><\/td>\");\n          sb.append(\"<td><\/td>\");\n          sb.append(\"<td><\/td>\");\n          sb.append(\"<\/tr>\");\n          continue;\n        }\n        else if (i < neurons.length-1) {\n          sb.append(\"<td>\");\n          if (neurons[i].params.hidden_dropout_ratios == null)\n            sb.append(Utils.formatPct(0));\n          else\n            sb.append(Utils.formatPct(neurons[i].params.hidden_dropout_ratios[i - 1]));\n          sb.append(\"<\/td>\");\n        } else {\n          sb.append(\"<td><\/td>\");\n        }\n\n        final String format = \"%g\";\n        sb.append(\"<td>\").append(neurons[i].params.l1).append(\"<\/td>\");\n        sb.append(\"<td>\").append(neurons[i].params.l2).append(\"<\/td>\");\n        if (get_params().adaptive_rate) {\n          sb.append(\"<td>(\").append(String.format(format, model_info.mean_rate[i])).\n                  append(\", \").append(String.format(format, model_info.rms_rate[i])).append(\")<\/td>\");\n        } else {\n          sb.append(\"<td>\").append(String.format(\"%.5g\", neurons[i].rate(error.training_samples))).append(\"<\/td>\");\n          sb.append(\"<td>\").append(String.format(\"%.5f\", neurons[i].momentum(error.training_samples))).append(\"<\/td>\");\n        }\n        sb.append(\"<td>(\").append(String.format(format, model_info.mean_weight[i])).\n                append(\", \").append(String.format(format, model_info.rms_weight[i])).append(\")<\/td>\");\n        sb.append(\"<td>(\").append(String.format(format, model_info.mean_bias[i])).\n                append(\", \").append(String.format(format, model_info.rms_bias[i])).append(\")<\/td>\");\n        sb.append(\"<\/tr>\");\n      }\n      sb.append(\"<\/table>\");\n    }\n\n    if (isClassifier() && !get_params().autoencoder) {\n      DocGen.HTML.section(sb, \"Classification error on training data: \" + Utils.formatPct(error.train_err));\n      if(error.validation) {\n        DocGen.HTML.section(sb, \"Classification error on validation data: \" + Utils.formatPct(error.valid_err));\n      } else if(error.num_folds > 0) {\n        DocGen.HTML.section(sb, \"Classification error on \" + error.num_folds + \"-fold cross-validated training data\"\n                + (_have_cv_results ? \": \" + Utils.formatPct(error.valid_err) : \" is being computed - please reload this page later.\"));\n      }\n    } else {\n      DocGen.HTML.section(sb, \"MSE on training data: \" + String.format(mse_format, error.train_mse));\n      if(error.validation) {\n        DocGen.HTML.section(sb, \"MSE on validation data: \" + String.format(mse_format, error.valid_mse));\n      } else if(error.num_folds > 0) {\n        DocGen.HTML.section(sb, \"MSE on \" + error.num_folds + \"-fold cross-validated training data\"\n                + (_have_cv_results ? \": \" + String.format(mse_format, error.valid_mse) : \" is being computed - please reload this page later.\"));\n      }\n    }\n    DocGen.HTML.paragraph(sb, \"Training samples: \" + String.format(\"%,d\", model_info().get_processed_total()));\n    DocGen.HTML.paragraph(sb, \"Epochs: \" + String.format(\"%.3f\", epoch_counter) + \" / \" + String.format(\"%.3f\", get_params().epochs));\n    int cores = 0; for (H2ONode n : H2O.CLOUD._memary) cores += n._heartbeat._num_cpus;\n    DocGen.HTML.paragraph(sb, \"Number of compute nodes: \" + (model_info.get_params().single_node_mode ? (\"1 (\" + H2O.NUMCPUS + \" threads)\") : (H2O.CLOUD.size() + \" (\" + cores + \" threads)\")));\n    DocGen.HTML.paragraph(sb, \"Training samples per iteration: \" + String.format(\"%,d\", get_params().actual_train_samples_per_iteration));\n    final boolean isEnded = get_params().self() == null || (UKV.get(get_params().self()) != null && Job.isEnded(get_params().self()));\n    final long time_so_far = isEnded ? run_time : run_time + System.currentTimeMillis() - _timeLastScoreEnter;\n    if (time_so_far > 0) {\n      DocGen.HTML.paragraph(sb, \"Training speed: \" + String.format(\"%,d\", model_info().get_processed_total() * 1000 / time_so_far) + \" samples/s\");\n    }\n    DocGen.HTML.paragraph(sb, \"Training time: \" + PrettyPrint.msecs(time_so_far, true));\n    if (progress > 0 && !isEnded)\n      DocGen.HTML.paragraph(sb, \"Estimated time left: \" +PrettyPrint.msecs((long)(time_so_far*(1-progress)/progress), true));\n\n    long score_train = error.score_training_samples;\n    long score_valid = error.score_validation_samples;\n    final boolean fulltrain = score_train==0 || score_train == training_rows;\n    final boolean fullvalid = error.validation && get_params().n_folds == 0 && (score_valid==0 || score_valid == get_params().validation.numRows());\n\n    final String toolarge = \" Confusion matrix not shown here - too large: number of classes (\" + model_info.units[model_info.units.length-1]\n            + \") is greater than the specified limit of \" + get_params().max_confusion_matrix_size + \".\";\n    boolean smallenough = model_info.units[model_info.units.length-1] <= get_params().max_confusion_matrix_size;\n\n    if (!error.validation) {\n      if (_have_cv_results) {\n        RString v_rs = new RString(\"<a href='Inspect2.html?src_key=%$key'>%key<\/a>\");\n        v_rs.replace(\"key\", get_params().source._key);\n        String cmTitle = \"<div class=\\\"alert\\\">Scoring results reported for \" + error.num_folds + \"-fold cross-validated training data \" + v_rs.toString() + \":<\/div>\";\n        sb.append(\"<h5>\" + cmTitle);\n        sb.append(\"<\/h5>\");\n      }\n      else {\n        RString t_rs = new RString(\"<a href='Inspect2.html?src_key=%$key'>%key<\/a>\");\n        t_rs.replace(\"key\", get_params().source._key);\n        String cmTitle = \"<div class=\\\"alert\\\">Scoring results reported on training data \" + t_rs.toString() + (fulltrain ? \"\" : \" (\" + score_train + \" samples)\") + \":<\/div>\";\n        sb.append(\"<h5>\" + cmTitle);\n        sb.append(\"<\/h5>\");\n      }\n    }\n    else {\n      RString v_rs = new RString(\"<a href='Inspect2.html?src_key=%$key'>%key<\/a>\");\n      v_rs.replace(\"key\", get_params().validation._key != null ? get_params().validation._key : \"\");\n      String cmTitle = \"<div class=\\\"alert\\\">Scoring results reported on validation data \" + v_rs.toString() + (fullvalid ? \"\" : \" (\" + score_valid + \" samples)\") + \":<\/div>\";\n      sb.append(\"<h5>\" + cmTitle);\n      sb.append(\"<\/h5>\");\n    }\n\n    if (isClassifier()) {\n      // print AUC\n      if (error.validAUC != null) {\n        error.validAUC.toHTML(sb);\n      }\n      else if (error.trainAUC != null) {\n        error.trainAUC.toHTML(sb);\n      }\n      else {\n        if (error.validation) {\n          if (error.valid_confusion_matrix != null && smallenough) {\n            error.valid_confusion_matrix.toHTML(sb);\n          } else if (smallenough) sb.append(\"<h5>Confusion matrix on validation data is not yet computed.<\/h5>\");\n          else sb.append(toolarge);\n        }\n        else if (_have_cv_results) {\n          if (error.valid_confusion_matrix != null && smallenough) {\n            error.valid_confusion_matrix.toHTML(sb);\n          } else if (smallenough) sb.append(\"<h5>Confusion matrix on \" + error.num_folds + \"-fold cross-validated training data is not yet computed.<\/h5>\");\n          else sb.append(toolarge);\n        }\n        else {\n          if (error.train_confusion_matrix != null && smallenough) {\n            error.train_confusion_matrix.toHTML(sb);\n          } else if (smallenough) sb.append(\"<h5>Confusion matrix on training data is not yet computed.<\/h5>\");\n          else sb.append(toolarge);\n        }\n      }\n    }\n\n    // Hit ratio\n    if (error.valid_hitratio != null) {\n      error.valid_hitratio.toHTML(sb);\n    } else if (error.train_hitratio != null) {\n      error.train_hitratio.toHTML(sb);\n    }\n\n    // Variable importance\n    if (error.variable_importances != null) {\n      error.variable_importances.toHTML(this, sb);\n    }\n\n    printCrossValidationModelsHTML(sb);\n\n    DocGen.HTML.title(sb, \"Scoring history\");\n    if (errors.length > 1) {\n      DocGen.HTML.paragraph(sb, \"Time taken for last scoring and diagnostics: \" + PrettyPrint.msecs(errors[errors.length-1].scoring_time, true));\n      // training\n      {\n        final long pts = fulltrain ? training_rows : score_train;\n        String training = \"Number of training data samples for scoring: \" + (fulltrain ? \"all \" : \"\") + pts;\n        if (pts < 1000 && training_rows >= 1000) training += \" (low, scoring might be inaccurate -> consider increasing this number in the expert mode)\";\n        if (pts > 100000 && errors[errors.length-1].scoring_time > 10000) training += \" (large, scoring can be slow -> consider reducing this number in the expert mode or scoring manually)\";\n        DocGen.HTML.paragraph(sb, training);\n      }\n      // validation\n      if (error.validation) {\n        final long ptsv = fullvalid ? get_params().validation.numRows() : score_valid;\n        String validation = \"Number of validation data samples for scoring: \" + (fullvalid ? \"all \" : \"\") + ptsv;\n        if (ptsv < 1000 && get_params().validation.numRows() >= 1000) validation += \" (low, scoring might be inaccurate -> consider increasing this number in the expert mode)\";\n        if (ptsv > 100000 && errors[errors.length-1].scoring_time > 10000) validation += \" (large, scoring can be slow -> consider reducing this number in the expert mode or scoring manually)\";\n        DocGen.HTML.paragraph(sb, validation);\n      }\n\n      if (isClassifier() && nclasses() != 2 /*binary classifier has its own conflicting D3 object (AUC)*/) {\n        // Plot training error\n        float[] err = new float[errors.length];\n        float[] samples = new float[errors.length];\n        for (int i=0; i<err.length; ++i) {\n          err[i] = (float)errors[i].train_err;\n          samples[i] = errors[i].training_samples;\n        }\n        new D3Plot(samples, err, \"training samples\", \"classification error\",\n                \"classification error on training data\").generate(sb);\n\n        // Plot validation error\n        if (get_params().validation != null) {\n          for (int i=0; i<err.length; ++i) {\n            err[i] = (float)errors[i].valid_err;\n          }\n          new D3Plot(samples, err, \"training samples\", \"classification error\",\n                  \"classification error on validation set\").generate(sb);\n        }\n      }\n      // regression\n      else if (!isClassifier()) {\n        // Plot training MSE\n        float[] err = new float[errors.length-1];\n        float[] samples = new float[errors.length-1];\n        for (int i=0; i<err.length; ++i) {\n          err[i] = (float)errors[i+1].train_mse;\n          samples[i] = errors[i+1].training_samples;\n        }\n        new D3Plot(samples, err, \"training samples\", \"MSE\",\n                \"regression error on training data\").generate(sb);\n\n        // Plot validation MSE\n        if (get_params().validation != null) {\n          for (int i=0; i<err.length; ++i) {\n            err[i] = (float)errors[i+1].valid_mse;\n          }\n          new D3Plot(samples, err, \"training samples\", \"MSE\",\n                  \"regression error on validation data\").generate(sb);\n        }\n      }\n    }\n\n//    String training = \"Number of training set samples for scoring: \" + error.score_training;\n    if (error.validation) {\n//      String validation = \"Number of validation set samples for scoring: \" + error.score_validation;\n    }\n    sb.append(\"<table class='table table-striped table-bordered table-condensed'>\");\n    sb.append(\"<tr>\");\n    sb.append(\"<th>Training Time<\/th>\");\n    sb.append(\"<th>Training Epochs<\/th>\");\n    sb.append(\"<th>Training Samples<\/th>\");\n    if (isClassifier() && !get_params().autoencoder) {\n//      sb.append(\"<th>Training MCE<\/th>\");\n      sb.append(\"<th>Training Error<\/th>\");\n      if (nclasses()==2) sb.append(\"<th>Training AUC<\/th>\");\n    } else {\n      sb.append(\"<th>Training MSE<\/th>\");\n    }\n    if (error.validation) {\n      if (isClassifier()) {\n//      sb.append(\"<th>Validation MCE<\/th>\");\n        sb.append(\"<th>Validation Error<\/th>\");\n        if (nclasses()==2) sb.append(\"<th>Validation AUC<\/th>\");\n      } else {\n        sb.append(\"<th>Validation MSE<\/th>\");\n      }\n    }\n    else if (error.num_folds > 0) {\n      if (isClassifier()) {\n        sb.append(\"<th>Cross-Validation Error<\/th>\");\n        if (nclasses()==2) sb.append(\"<th>Cross-Validation AUC<\/th>\");\n      } else {\n        sb.append(\"<th>Cross-Validation MSE<\/th>\");\n      }\n    }\n    sb.append(\"<\/tr>\");\n    for( int i = errors.length - 1; i >= 0; i-- ) {\n      final Errors e = errors[i];\n      sb.append(\"<tr>\");\n      sb.append(\"<td>\" + PrettyPrint.msecs(e.training_time_ms, true) + \"<\/td>\");\n      sb.append(\"<td>\" + String.format(\"%g\", e.epoch_counter) + \"<\/td>\");\n      sb.append(\"<td>\" + String.format(\"%,d\", e.training_samples) + \"<\/td>\");\n      if (isClassifier() && !get_params().autoencoder) {\n        sb.append(\"<td>\" + Utils.formatPct(e.train_err) + \"<\/td>\");\n        if (nclasses()==2) {\n          if (e.trainAUC != null) sb.append(\"<td>\" + Utils.formatPct(e.trainAUC.AUC()) + \"<\/td>\");\n          else sb.append(\"<td>\" + \"N/A\" + \"<\/td>\");\n        }\n      } else {\n        sb.append(\"<td>\" + String.format(mse_format, e.train_mse) + \"<\/td>\");\n      }\n      if(e.validation) {\n        if (isClassifier()) {\n          sb.append(\"<td>\" + Utils.formatPct(e.valid_err) + \"<\/td>\");\n          if (nclasses()==2) {\n            if (e.validAUC != null) sb.append(\"<td>\" + Utils.formatPct(e.validAUC.AUC()) + \"<\/td>\");\n            else sb.append(\"<td>\" + \"N/A\" + \"<\/td>\");\n          }\n        } else {\n          sb.append(\"<td>\" + String.format(mse_format, e.valid_mse) + \"<\/td>\");\n        }\n      }\n      else if(e.num_folds > 0) {\n        if (i == errors.length - 1 && _have_cv_results) {\n          if (isClassifier()) {\n            sb.append(\"<td>\" + Utils.formatPct(e.valid_err) + \"<\/td>\");\n            if (nclasses() == 2) {\n              if (e.validAUC != null) sb.append(\"<td>\" + Utils.formatPct(e.validAUC.AUC()) + \"<\/td>\");\n              else sb.append(\"<td>\" + \"N/A\" + \"<\/td>\");\n            }\n          } else {\n            sb.append(\"<td>\" + String.format(mse_format, e.valid_mse) + \"<\/td>\");\n          }\n        }\n        else {\n          sb.append(\"<td>N/A<\/td>\");\n          if (nclasses() == 2) sb.append(\"<td>N/A<\/td>\");\n        }\n      }\n      sb.append(\"<\/tr>\");\n    }\n    sb.append(\"<\/table>\");\n    return true;\n  }","commit_id":"b3fd5389173f902d629e59a73e47d6f6da243af0","url":"https://github.com/h2oai/h2o-2"},{"original_method":"public void afterRun() {\n        Member caller = nodeEngine.getCluster().getMember(getCaller());\n        // todo optimize serialization. maybe you should not do here. or you can check if anyone wants values\n        int eventType = dataOldValue == null ? EntryEvent.TYPE_ADDED : EntryEvent.TYPE_UPDATED;\n        EntryEvent event = new EntryEvent(getNodeEngine().getThisAddress().toString(), caller, eventType, nodeEngine.toObject(dataKey), nodeEngine.toObject(dataOldValue), nodeEngine.toObject(dataValue) );\n        mapService.publishEvent(name, dataKey, event);\n    }","id":12461,"modified_method":"public void afterRun() {\n        int eventType = dataOldValue == null ? EntryEvent.TYPE_ADDED : EntryEvent.TYPE_UPDATED;\n        mapService.publishEvent(getCaller(), name, eventType, dataKey, dataOldValue, dataValue);\n    }","commit_id":"01be12e9e6f3568490549de9f078beecdb01670b","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void afterRun() {\n        Member caller = nodeEngine.getCluster().getMember(getCaller());\n        // todo optimize serialization. maybe you should not do here. or you can check if anyone wants values\n        int eventType = EntryEvent.TYPE_REMOVED;\n        EntryEvent event = new EntryEvent(getNodeEngine().getThisAddress().toString(), caller, eventType, nodeEngine.toObject(dataKey), nodeEngine.toObject(dataOldValue), null );\n        mapService.publishEvent(name, dataKey, event);\n    }","id":12462,"modified_method":"public void afterRun() {\n        int eventType = EntryEvent.TYPE_REMOVED;\n        mapService.publishEvent(getCaller(), name, eventType, dataKey, dataOldValue, null);\n    }","commit_id":"01be12e9e6f3568490549de9f078beecdb01670b","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void afterRun() {\n        Member caller = nodeEngine.getCluster().getMember(getCaller());\n        // todo optimize serialization. maybe you should not do here. or you can check if anyone wants values\n        int eventType = EntryEvent.TYPE_EVICTED;\n        EntryEvent event = new EntryEvent(getNodeEngine().getThisAddress().toString(), caller, eventType, nodeEngine.toObject(dataKey), null, null);\n        mapService.publishEvent(name, dataKey, event);\n    }","id":12463,"modified_method":"public void afterRun() {\n        int eventType = EntryEvent.TYPE_EVICTED;\n        mapService.publishEvent(getCaller(), name, eventType, dataKey, null, dataValue);\n    }","commit_id":"01be12e9e6f3568490549de9f078beecdb01670b","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void publishEvent(String mapName, Data key, EntryEvent event) {\n        Collection<EventRegistration> candidates = nodeEngine.getEventService().getRegistrations(MAP_SERVICE_NAME, mapName);\n        Set<EventRegistration> registrationsWithValue = new HashSet<EventRegistration>();\n        Set<EventRegistration> registrationsWithoutValue = new HashSet<EventRegistration>();\n        for (EventRegistration candidate : candidates) {\n            EntryEventFilter filter = (EntryEventFilter) candidate.getFilter();\n            if (filter.eval(key)) {\n                if (filter.isIncludeValue()) {\n                    registrationsWithValue.add(candidate);\n                } else {\n                    registrationsWithoutValue.add(candidate);\n                }\n            }\n        }\n        nodeEngine.getEventService().publishEvent(MAP_SERVICE_NAME, registrationsWithValue, event);\n        nodeEngine.getEventService().publishEvent(MAP_SERVICE_NAME, registrationsWithoutValue, event.cloneWithoutValues());\n    }","id":12464,"modified_method":"public void publishEvent(Address caller, String mapName, int eventType, Data dataKey, Data dataOldValue, Data dataValue) {\n        Collection<EventRegistration> candidates = nodeEngine.getEventService().getRegistrations(MAP_SERVICE_NAME, mapName);\n        Set<EventRegistration> registrationsWithValue = new HashSet<EventRegistration>();\n        Set<EventRegistration> registrationsWithoutValue = new HashSet<EventRegistration>();\n        for (EventRegistration candidate : candidates) {\n            EntryEventFilter filter = (EntryEventFilter) candidate.getFilter();\n            if (filter.eval(dataKey)) {\n                if (filter.isIncludeValue()) {\n                    registrationsWithValue.add(candidate);\n                } else {\n                    registrationsWithoutValue.add(candidate);\n                }\n            }\n        }\n        if (registrationsWithValue.isEmpty() && registrationsWithoutValue.isEmpty())\n            return;\n\n        String source = nodeEngine.getNode().address.toString();\n        final SerializerRegistry serializerRegistry = nodeEngine.getNode().hazelcastInstance.getSerializerRegistry();\n        Member callerMember = nodeEngine.getClusterService().getMember(caller);\n        EntryEvent event = new DataAwareEntryEvent(callerMember, eventType, source, dataKey, dataValue, dataOldValue, false, serializerRegistry);\n\n        nodeEngine.getEventService().publishEvent(MAP_SERVICE_NAME, registrationsWithValue, event);\n        nodeEngine.getEventService().publishEvent(MAP_SERVICE_NAME, registrationsWithoutValue, event.cloneWithoutValues());\n    }","commit_id":"01be12e9e6f3568490549de9f078beecdb01670b","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public MapService(final NodeEngine nodeEngine) {\n        this.nodeEngine = nodeEngine;\n        this.logger = nodeEngine.getLogger(MapService.class.getName());\n        partitionContainers = new PartitionContainer[nodeEngine.getPartitionCount()];\n        eventRegistrations = new ConcurrentHashMap<ListenerKey, String>();\n        mapsWithTTL = new ConcurrentHashSet<String>();\n    }","id":12465,"modified_method":"public MapService(final NodeEngine nodeEngine) {\n        this.nodeEngine = (NodeEngineImpl) nodeEngine;\n        this.logger = nodeEngine.getLogger(MapService.class.getName());\n        partitionContainers = new PartitionContainer[nodeEngine.getPartitionCount()];\n        eventRegistrations = new ConcurrentHashMap<ListenerKey, String>();\n        mapsWithTTL = new ConcurrentHashSet<String>();\n    }","commit_id":"01be12e9e6f3568490549de9f078beecdb01670b","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Override\n    public void rowCompleted(SnmpRowResult row) {\n        OnmsHwEntity entity = ((EntityPhysicalTableRow) row).getOnmsHwEntity(vendorAttributes, replacementMap);\n        LOG.debug(\"rowCompleted: found entity {}, index: {}, parent: {}\", entity.getEntPhysicalName(), entity.getEntPhysicalIndex(), entity.getEntPhysicalContainedIn());\n        if (entity.getEntPhysicalContainedIn() != null && entity.getEntPhysicalContainedIn() > 0) {\n            for (OnmsHwEntity e : entities) {\n                if (e.getEntPhysicalIndex() == entity.getEntPhysicalContainedIn()) {\n                    LOG.debug(\"rowCompleted: adding child index {} to parent index {}\", entity.getEntPhysicalIndex(), e.getEntPhysicalIndex());\n                    e.addChildEntity(entity);\n                    break;\n                }\n            }\n        }\n        entities.add(entity);\n    }","id":12466,"modified_method":"@Override\n    public void rowCompleted(SnmpRowResult row) {\n        OnmsHwEntity entity = ((EntityPhysicalTableRow) row).getOnmsHwEntity(vendorAttributes, replacementMap);\n        LOG.debug(\"rowCompleted: found entity {}, index: {}, parent: {}\", entity.getEntPhysicalName(), entity.getEntPhysicalIndex(), entity.getEntPhysicalContainedIn());\n        if (entity.getEntPhysicalContainedIn() != null && entity.getEntPhysicalContainedIn() > 0) {\n            OnmsHwEntity parent = getParent(entity.getEntPhysicalContainedIn().intValue());\n            if (parent != null) {\n                LOG.debug(\"rowCompleted: adding child index {} to parent index {}\", entity.getEntPhysicalIndex(), parent.getEntPhysicalIndex());\n                parent.addChildEntity(entity);\n            }\n        }\n        entities.add(entity);\n    }","commit_id":"787bf1c78b5661696e1654a15d6df60b873ff3cf","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void rowCompleted(SnmpRowResult row) {\n        OnmsHwEntity entity = ((EntityPhysicalTableRow) row).getOnmsHwEntity(vendorAttributes, replacementMap);\n        LOG.debug(\"rowCompleted: found entity {}, index: {}, parent: {}\", entity.getEntPhysicalName(), entity.getEntPhysicalIndex(), entity.getEntPhysicalContainedIn());\n        if (entity.getEntPhysicalContainedIn() != null && entity.getEntPhysicalContainedIn() > 0) {\n            for (OnmsHwEntity e : entities) {\n                if (e.getEntPhysicalIndex() == entity.getEntPhysicalContainedIn()) {\n                    LOG.debug(\"rowCompleted: adding child index {} to parent index {}\", entity.getEntPhysicalIndex(), e.getEntPhysicalIndex());\n                    e.addChildEntity(entity);\n                    break;\n                }\n            }\n        }\n        entities.add(entity);\n    }","id":12467,"modified_method":"@Override\n    public void rowCompleted(SnmpRowResult row) {\n        OnmsHwEntity entity = ((EntityPhysicalTableRow) row).getOnmsHwEntity(vendorAttributes, replacementMap);\n        LOG.debug(\"rowCompleted: found entity {}, index: {}, parent: {}\", entity.getEntPhysicalName(), entity.getEntPhysicalIndex(), entity.getEntPhysicalContainedIn());\n        if (entity.getEntPhysicalContainedIn() != null && entity.getEntPhysicalContainedIn() > 0) {\n            OnmsHwEntity parent = getParent(entity.getEntPhysicalContainedIn().intValue());\n            if (parent != null) {\n                LOG.debug(\"rowCompleted: adding child index {} to parent index {}\", entity.getEntPhysicalIndex(), parent.getEntPhysicalIndex());\n                parent.addChildEntity(entity);\n            }\n        }\n        entities.add(entity);\n    }","commit_id":"28243990ba8523ef086f133a8fe1d05b0ecb2eba","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void rowCompleted(SnmpRowResult row) {\n        OnmsHwEntity entity = ((EntityPhysicalTableRow) row).getOnmsHwEntity(vendorAttributes, replacementMap);\n        LOG.debug(\"rowCompleted: found entity {}, index: {}, parent: {}\", entity.getEntPhysicalName(), entity.getEntPhysicalIndex(), entity.getEntPhysicalContainedIn());\n        if (entity.getEntPhysicalContainedIn() != null && entity.getEntPhysicalContainedIn() > 0) {\n            for (OnmsHwEntity e : entities) {\n                if (e.getEntPhysicalIndex() == entity.getEntPhysicalContainedIn()) {\n                    LOG.debug(\"rowCompleted: adding child index {} to parent index {}\", entity.getEntPhysicalIndex(), e.getEntPhysicalIndex());\n                    e.addChildEntity(entity);\n                    break;\n                }\n            }\n        }\n        entities.add(entity);\n    }","id":12468,"modified_method":"@Override\n    public void rowCompleted(SnmpRowResult row) {\n        OnmsHwEntity entity = ((EntityPhysicalTableRow) row).getOnmsHwEntity(vendorAttributes, replacementMap);\n        LOG.debug(\"rowCompleted: found entity {}, index: {}, parent: {}\", entity.getEntPhysicalName(), entity.getEntPhysicalIndex(), entity.getEntPhysicalContainedIn());\n        if (entity.getEntPhysicalContainedIn() != null && entity.getEntPhysicalContainedIn() > 0) {\n            OnmsHwEntity parent = getParent(entity.getEntPhysicalContainedIn().intValue());\n            if (parent != null) {\n                LOG.debug(\"rowCompleted: adding child index {} to parent index {}\", entity.getEntPhysicalIndex(), parent.getEntPhysicalIndex());\n                parent.addChildEntity(entity);\n            }\n        }\n        entities.add(entity);\n    }","commit_id":"76afc091ca5b5e21988c50eabc1401b88e488b6f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Creates new form FileSearchDialog\n     */\n    public FileSearchDialog() {\n        super(new JFrame(NbBundle.getMessage(FileSearchDialog.class, \"FileSearchDialog.frame.title\")),\n                NbBundle.getMessage(FileSearchDialog.class, \"FileSearchDialog.frame.msg\"), true);\n        initComponents();\n\n        setResizable(false);\n        Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();\n        double w = getSize().getWidth();\n        double h = getSize().getHeight();\n        setLocation((int) ((screenDimension.getWidth() - w) / 2), (int) ((screenDimension.getHeight() - h) / 2));\n        this.setLocationRelativeTo(WindowManager.getDefault().getMainWindow());\n        fileSearchPanel1.addListenerToAll(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                dispose();\n            }\n        });\n    }","id":12469,"modified_method":"/**\n     * Creates new form FileSearchDialog\n     */\n    public FileSearchDialog() {\n        super(new JFrame(NbBundle.getMessage(FileSearchDialog.class, \"FileSearchDialog.frame.title\")),\n                NbBundle.getMessage(FileSearchDialog.class, \"FileSearchDialog.frame.msg\"), true);\n        initComponents();\n\n        setResizable(true);\n        Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();\n        double w = getSize().getWidth();\n        double h = getSize().getHeight();\n        setLocation((int) ((screenDimension.getWidth() - w) / 2), (int) ((screenDimension.getHeight() - h) / 2));\n        this.setLocationRelativeTo(WindowManager.getDefault().getMainWindow());\n        fileSearchPanel1.addListenerToAll(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                dispose();\n            }\n        });\n    }","commit_id":"61bd11606119cce3f57c19679f174a1b29db1366","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     */\n    private void customizeComponents() {\n\n        this.setLayout(new BorderLayout());\n\n        JPanel filterPanel = new JPanel();\n        filterPanel.setLayout(new BoxLayout(filterPanel, BoxLayout.Y_AXIS));\n        filterPanel.setBorder(new EmptyBorder(10, 10, 10, 10));\n\n        this.add(filterPanel, BorderLayout.CENTER);\n\n        JLabel label = new JLabel(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.custComp.label.text\"));\n        label.setAlignmentX(Component.LEFT_ALIGNMENT);\n        label.setBorder(new EmptyBorder(0, 0, 10, 0));\n        filterPanel.add(label);\n\n        // Create and add filter areas\n        this.filterAreas.add(new FilterArea(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.filterTitle.name\"), new NameSearchFilter()));\n\n        List<FileSearchFilter> metadataFilters = new ArrayList<FileSearchFilter>();\n        metadataFilters.add(new SizeSearchFilter());\n        metadataFilters.add(new DateSearchFilter());\n        this.filterAreas.add(new FilterArea(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.filterTitle.metadata\"), metadataFilters));\n\n        this.filterAreas.add(new FilterArea(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.filterTitle.knownStatus\"), new KnownStatusSearchFilter()));\n\n        for (FilterArea fa : this.filterAreas) {\n            fa.setMaximumSize(new Dimension(Integer.MAX_VALUE, fa.getMinimumSize().height));\n            fa.setAlignmentX(Component.LEFT_ALIGNMENT);\n            filterPanel.add(fa);\n        }\n\n        // Create and add search button\n        this.searchButton = new JButton(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.searchButton.text\"));\n        this.searchButton.setAlignmentX(Component.LEFT_ALIGNMENT);\n        filterPanel.add(searchButton);\n\n        addListenerToAll(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                search();\n            }\n        });\n    }","id":12470,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     */\n    private void customizeComponents() {\n\n        this.setLayout(new BorderLayout());\n\n        JPanel filterPanel = new JPanel();\n        filterPanel.setLayout(new BoxLayout(filterPanel, BoxLayout.Y_AXIS));\n        filterPanel.setBorder(new EmptyBorder(10, 10, 10, 10));\n\n        this.add(filterPanel, BorderLayout.CENTER);\n\n        JLabel label = new JLabel(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.custComp.label.text\"));\n        label.setAlignmentX(Component.LEFT_ALIGNMENT);\n        label.setBorder(new EmptyBorder(0, 0, 10, 0));\n        filterPanel.add(label);\n\n        // Create and add filter areas\n        this.filterAreas.add(new FilterArea(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.filterTitle.name\"), new NameSearchFilter()));\n\n        List<FileSearchFilter> metadataFilters = new ArrayList<FileSearchFilter>();\n        metadataFilters.add(new SizeSearchFilter());\n        metadataFilters.add(new DateSearchFilter());\n        this.filterAreas.add(new FilterArea(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.filterTitle.metadata\"), metadataFilters));\n\n        this.filterAreas.add(new FilterArea(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.filterTitle.knownStatus\"), new KnownStatusSearchFilter()));\n        this.filterAreas.add(new FilterArea(\"Test mime\", new MimeTypeFilter()));\n\n        for (FilterArea fa : this.filterAreas) {\n            fa.setMaximumSize(new Dimension(Integer.MAX_VALUE, fa.getMinimumSize().height));\n            fa.setAlignmentX(Component.LEFT_ALIGNMENT);\n            filterPanel.add(fa);\n        }\n\n        // Create and add search button\n        this.searchButton = new JButton(NbBundle.getMessage(this.getClass(), \"FileSearchPanel.searchButton.text\"));\n        this.searchButton.setAlignmentX(Component.LEFT_ALIGNMENT);\n        filterPanel.add(searchButton);\n\n        addListenerToAll(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                search();\n            }\n        });\n    }","commit_id":"61bd11606119cce3f57c19679f174a1b29db1366","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 300, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 376, Short.MAX_VALUE)\n        );\n    }","id":12471,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        setPreferredSize(new java.awt.Dimension(300, 450));\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 300, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 376, Short.MAX_VALUE)\n        );\n    }","commit_id":"61bd11606119cce3f57c19679f174a1b29db1366","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jList1 = new javax.swing.JList<String>();\n\n        jList1.setModel(new javax.swing.AbstractListModel() {\n            String[] strings = getMimeTypeArray();\n            public int getSize() { return strings.length; }\n            public Object getElementAt(int i) { return strings[i]; }\n        });\n        jScrollPane1.setViewportView(jList1);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","id":12472,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jList1 = new javax.swing.JList<String>();\n        jLabel1 = new javax.swing.JLabel();\n\n        jList1.setModel(new javax.swing.AbstractListModel() {\n            String[] strings = getMimeTypeArray();\n            public int getSize() { return strings.length; }\n            public Object getElementAt(int i) { return strings[i]; }\n        });\n        jList1.setMinimumSize(new java.awt.Dimension(0, 200));\n        jScrollPane1.setViewportView(jList1);\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MimeTypePanel.class, \"MimeTypePanel.jLabel1.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jLabel1)\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addComponent(jLabel1)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n    }","commit_id":"61bd11606119cce3f57c19679f174a1b29db1366","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"String[] getMimeTypeArray() {\n        Set<String> fileTypesCollated = new HashSet<>();\n        for (MediaType mediaType : mediaTypes) {\n            fileTypesCollated.add(mediaType.toString());\n        }\n\n        FileTypeDetector fileTypeDetector;\n        try {\n            fileTypeDetector = new FileTypeDetector();\n            List<String> userDefinedFileTypes = fileTypeDetector.getUserDefinedTypes();\n            fileTypesCollated.addAll(userDefinedFileTypes);\n\n        } catch (FileTypeDetector.FileTypeDetectorInitException ex) {\n            logger.log(Level.SEVERE, \"Unable to get user defined file types\", ex);\n        }\n\n        List<String> toSort = new ArrayList<>(fileTypesCollated);\n        toSort.sort((String string1, String string2) -> {\n            int result = String.CASE_INSENSITIVE_ORDER.compare(string1, string2);\n            if (result == 0) {\n                result = string1.compareTo(string2);\n            }\n            return result;\n        });\n        String [] mimeTypeArray = new String[toSort.size()];\n        return toSort.toArray(mimeTypeArray);\n    }","id":12473,"modified_method":"private String[] getMimeTypeArray() {\n        Set<String> fileTypesCollated = new HashSet<>();\n        for (MediaType mediaType : mediaTypes) {\n            fileTypesCollated.add(mediaType.toString());\n        }\n\n        FileTypeDetector fileTypeDetector;\n        try {\n            fileTypeDetector = new FileTypeDetector();\n            List<String> userDefinedFileTypes = fileTypeDetector.getUserDefinedTypes();\n            fileTypesCollated.addAll(userDefinedFileTypes);\n\n        } catch (FileTypeDetector.FileTypeDetectorInitException ex) {\n            logger.log(Level.SEVERE, \"Unable to get user defined file types\", ex);\n        }\n\n        List<String> toSort = new ArrayList<>(fileTypesCollated);\n        toSort.sort((String string1, String string2) -> {\n            int result = String.CASE_INSENSITIVE_ORDER.compare(string1, string2);\n            if (result == 0) {\n                result = string1.compareTo(string2);\n            }\n            return result;\n        });\n        String[] mimeTypeArray = new String[toSort.size()];\n        return toSort.toArray(mimeTypeArray);\n    }","commit_id":"61bd11606119cce3f57c19679f174a1b29db1366","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public synchronized void showDraft(UUID draftId) {\n        this.draftId = draftId;\n        session = MageFrame.getSession();\n        MageFrame.addDraft(draftId, this);\n        if (!session.joinDraft(draftId)) {\n            hideDraft();\n        }\n    }","id":12474,"modified_method":"public synchronized void showDraft(UUID draftId) {\n        this.draftId = draftId;\n        session = MageFrame.getSession();\n        MageFrame.addDraft(draftId, this);\n        if (!session.joinDraft(draftId)) {\n            hideDraft();\n        }\n\n        if (isLogging()) {\n            // If we are logging the draft create a file that will contain\n            // the log.\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n            logFilename = \"Draft_\" + sdf.format(new Date()) + \"_\" + draftId + \".txt\";\n            try {\n                Files.write(pathToDraftLog(), \"\".getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n            } catch (IOException ex) {\n                Logger.getLogger(DraftPanel.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        } else {\n            logFilename = null;\n        }\n    }","commit_id":"54c1e4f66c7bece6a4d2d142b1bed2b0c850fa32","url":"https://github.com/magefree/mage"},{"original_method":"public void updateDraft(DraftView draftView) {        \n        if (draftView.getSets().size() != 3){\n            // Random draft\n            this.txtPack1.setText(\"Random Boosters\");\n            this.txtPack2.setText(\"Random Boosters\");\n            this.txtPack3.setText(\"Random Boosters\");\n        }else{\n            this.txtPack1.setText(draftView.getSets().get(0));\n            this.txtPack2.setText(draftView.getSets().get(1));\n            this.txtPack3.setText(draftView.getSets().get(2));\n        }\n        this.chkPack1.setSelected(draftView.getBoosterNum() > 0);\n        this.chkPack2.setSelected(draftView.getBoosterNum() > 1);\n        this.chkPack3.setSelected(draftView.getBoosterNum() > 2);\n        this.txtCardNo.setText(Integer.toString(draftView.getCardNum()));\n\n        int right = draftView.getPlayers().size() / 2;\n        int left = draftView.getPlayers().size() - right;\n        int height = left * 18;\n        lblTableImage.setSize(new Dimension(lblTableImage.getWidth(), height));\n        Image tableImage = ImageHelper.getImageFromResources(draftView.getBoosterNum() == 2 ? \"/draft/table_left.png\":\"/draft/table_right.png\");\n        BufferedImage resizedTable = ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(tableImage, BufferedImage.TYPE_INT_ARGB), lblTableImage.getWidth());\n        lblTableImage.setIcon(new ImageIcon(resizedTable));\n        \n        int count = 0;\n        int numberPlayers = draftView.getPlayers().size();\n        for(String playerName: draftView.getPlayers()) {\n            count++;\n            setPlayerNameToLabel(playerName, count, numberPlayers);\n        }\n    }","id":12475,"modified_method":"public void updateDraft(DraftView draftView) {        \n        if (draftView.getSets().size() != 3){\n            // Random draft\n            this.txtPack1.setText(\"Random Boosters\");\n            this.txtPack2.setText(\"Random Boosters\");\n            this.txtPack3.setText(\"Random Boosters\");\n        }else{\n            this.txtPack1.setText(draftView.getSets().get(0));\n            this.txtPack2.setText(draftView.getSets().get(1));\n            this.txtPack3.setText(draftView.getSets().get(2));\n        }\n        this.chkPack1.setSelected(draftView.getBoosterNum() > 0);\n        this.chkPack2.setSelected(draftView.getBoosterNum() > 1);\n        this.chkPack3.setSelected(draftView.getBoosterNum() > 2);\n        this.txtCardNo.setText(Integer.toString(draftView.getCardNum()));\n\n        packNo = draftView.getBoosterNum();\n        pickNo = draftView.getCardNum();\n\n        int right = draftView.getPlayers().size() / 2;\n        int left = draftView.getPlayers().size() - right;\n        int height = left * 18;\n        lblTableImage.setSize(new Dimension(lblTableImage.getWidth(), height));\n        Image tableImage = ImageHelper.getImageFromResources(draftView.getBoosterNum() == 2 ? \"/draft/table_left.png\":\"/draft/table_right.png\");\n        BufferedImage resizedTable = ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(tableImage, BufferedImage.TYPE_INT_ARGB), lblTableImage.getWidth());\n        lblTableImage.setIcon(new ImageIcon(resizedTable));\n        \n        int count = 0;\n        int numberPlayers = draftView.getPlayers().size();\n        for(String playerName: draftView.getPlayers()) {\n            count++;\n            setPlayerNameToLabel(playerName, count, numberPlayers);\n        }\n    }","commit_id":"54c1e4f66c7bece6a4d2d142b1bed2b0c850fa32","url":"https://github.com/magefree/mage"},{"original_method":"public void loadBooster(DraftPickView draftPickView) {\n        // upper area that shows the picks\n        loadCardsToPickedCardsArea(draftPickView.getPicks());\n\n        this.draftPicks.clearCardEventListeners();\n        this.draftPicks.addCardEventListener(new Listener<Event> () {\n                @Override\n                public void event(Event event) {\n                    if (event.getEventName().equals(\"show-popup-menu\")) {\n                        if (event.getSource() != null) {\n                            // Popup Menu Card\n                            cardIdPopupMenu = ((SimpleCardView)event.getSource()).getId();\n                            popupMenuCardPanel.show(event.getComponent(), event.getxPos(), event.getyPos());\n                        } else {\n                            // Popup Menu area\n                            popupMenuPickedArea.show(event.getComponent(), event.getxPos(), event.getyPos());\n                        }\n                    }\n                }\n            }\n        );\n\n        // lower area that shows the booster\n        draftBooster.loadBooster(CardsViewUtil.convertSimple(draftPickView.getBooster()), bigCard);\n        this.draftBooster.clearCardEventListeners();\n        this.draftBooster.addCardEventListener(\n            new Listener<Event> () {\n                @Override\n                public void event(Event event) {\n                    if (event.getEventName().equals(\"pick-a-card\")) {\n                        SimpleCardView source = (SimpleCardView) event.getSource();\n                        DraftPickView view = session.sendCardPick(draftId, source.getId(), cardsHidden);\n                        if (view != null) {\n                            loadCardsToPickedCardsArea(view.getPicks());\n                            draftBooster.loadBooster(emptyView, bigCard);                            \n                            Plugins.getInstance().getActionCallback().hidePopup();\n                            setMessage(\"Waiting for other players\");\n                        }\n                    }\n                    if (event.getEventName().equals(\"mark-a-card\")) {\n                        SimpleCardView source = (SimpleCardView) event.getSource();\n                        session.sendCardMark(draftId, source.getId());\n                    }\n                }\n            }\n        );\n        setMessage(\"Pick a card\");\n        if (!MageFrame.getInstance().isActive()) {\n            MageTray.getInstance().displayMessage(\"Pick the next card.\");\n            MageTray.getInstance().blink();\n        }\n        countdown.stop();\n        this.timeout = draftPickView.getTimeout();\n        setTimeout(timeout);\n        if (timeout != 0) {\n            countdown.start();\n        }\n    }","id":12476,"modified_method":"public void loadBooster(DraftPickView draftPickView) {\n        logLastPick(draftPickView);\n        // upper area that shows the picks\n        loadCardsToPickedCardsArea(draftPickView.getPicks());\n\n        this.draftPicks.clearCardEventListeners();\n        this.draftPicks.addCardEventListener(new Listener<Event> () {\n                @Override\n                public void event(Event event) {\n                    if (event.getEventName().equals(\"show-popup-menu\")) {\n                        if (event.getSource() != null) {\n                            // Popup Menu Card\n                            cardIdPopupMenu = ((SimpleCardView)event.getSource()).getId();\n                            popupMenuCardPanel.show(event.getComponent(), event.getxPos(), event.getyPos());\n                        } else {\n                            // Popup Menu area\n                            popupMenuPickedArea.show(event.getComponent(), event.getxPos(), event.getyPos());\n                        }\n                    }\n                }\n            }\n        );\n\n        // lower area that shows the booster\n        draftBooster.loadBooster(CardsViewUtil.convertSimple(draftPickView.getBooster()), bigCard);\n        this.draftBooster.clearCardEventListeners();\n        this.draftBooster.addCardEventListener(\n            new Listener<Event> () {\n                @Override\n                public void event(Event event) {\n                    if (event.getEventName().equals(\"pick-a-card\")) {\n                        SimpleCardView source = (SimpleCardView) event.getSource();\n                        DraftPickView view = session.sendCardPick(draftId, source.getId(), cardsHidden);\n                        if (view != null) {\n                            loadCardsToPickedCardsArea(view.getPicks());\n                            draftBooster.loadBooster(emptyView, bigCard);                            \n                            Plugins.getInstance().getActionCallback().hidePopup();\n                            setMessage(\"Waiting for other players\");\n                        }\n                    }\n                    if (event.getEventName().equals(\"mark-a-card\")) {\n                        SimpleCardView source = (SimpleCardView) event.getSource();\n                        session.sendCardMark(draftId, source.getId());\n                    }\n                }\n            }\n        );\n        setMessage(\"Pick a card\");\n        if (!MageFrame.getInstance().isActive()) {\n            MageTray.getInstance().displayMessage(\"Pick the next card.\");\n            MageTray.getInstance().blink();\n        }\n        countdown.stop();\n        this.timeout = draftPickView.getTimeout();\n        setTimeout(timeout);\n        if (timeout != 0) {\n            countdown.start();\n        }\n    }","commit_id":"54c1e4f66c7bece6a4d2d142b1bed2b0c850fa32","url":"https://github.com/magefree/mage"},{"original_method":"private static void loadPhases(Preferences prefs) {\n        load(prefs, dialog.displayBigCardsInHand, KEY_HAND_USE_BIG_CARDS, \"true\", \"true\");\n        load(prefs, dialog.showToolTipsInAnyZone, KEY_SHOW_TOOLTIPS_ANY_ZONE, \"true\");\n        load(prefs, dialog.showCardName, KEY_SHOW_CARD_NAMES, \"true\");\n        load(prefs, dialog.nonLandPermanentsInOnePile, KEY_PERMANENTS_IN_ONE_PILE, \"true\");\n        load(prefs, dialog.showPlayerNamesPermanently, KEY_SHOW_PLAYER_NAMES_PERMANENTLY, \"true\");\n        load(prefs, dialog.showAbilityPickerForced, KEY_SHOW_ABILITY_PICKER_FORCED, \"true\");\n        load(prefs, dialog.cbAllowRequestToShowHandCards, KEY_GAME_ALLOW_REQUEST_SHOW_HAND_CARDS, \"true\");\n        load(prefs, dialog.cbShowStormCounter, KEY_GAME_SHOW_STORM_COUNTER, \"true\");\n        load(prefs, dialog.cbConfirmEmptyManaPool, KEY_GAME_CONFIRM_EMPTY_MANA_POOL, \"true\");\n        load(prefs, dialog.cbAskMoveToGraveOrder, KEY_GAME_ASK_MOVE_TO_GRAVE_ORDER, \"true\");\n\n        load(prefs, dialog.cbGameLogAutoSave, KEY_GAME_LOG_AUTO_SAVE, \"true\");\n\n        load(prefs, dialog.checkBoxUpkeepYou, UPKEEP_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxDrawYou, DRAW_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxMainYou, MAIN_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxBeforeCYou, BEFORE_COMBAT_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxEndOfCYou, END_OF_COMBAT_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxMain2You, MAIN_2_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxEndTurnYou, END_OF_TURN_YOU, \"on\", \"on\");\n\n        load(prefs, dialog.checkBoxUpkeepOthers, UPKEEP_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxDrawOthers, DRAW_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxMainOthers, MAIN_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxBeforeCOthers, BEFORE_COMBAT_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxEndOfCOthers, END_OF_COMBAT_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxMain2Others, MAIN_2_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxEndTurnOthers, END_OF_TURN_OTHERS, \"on\", \"on\");\n\n        load(prefs, dialog.cbStopAttack, KEY_STOP_ATTACK, \"true\", \"true\");\n        load(prefs, dialog.cbStopBlock, KEY_STOP_BLOCK, \"true\", \"true\");\n        load(prefs, dialog.cbStopOnAllMain, KEY_STOP_ALL_MAIN_PHASES, \"true\", \"false\");\n        load(prefs, dialog.cbStopOnAllEnd, KEY_STOP_ALL_END_PHASES, \"true\", \"false\");\n\n    }","id":12477,"modified_method":"private static void loadPhases(Preferences prefs) {\n        load(prefs, dialog.displayBigCardsInHand, KEY_HAND_USE_BIG_CARDS, \"true\", \"true\");\n        load(prefs, dialog.showToolTipsInAnyZone, KEY_SHOW_TOOLTIPS_ANY_ZONE, \"true\");\n        load(prefs, dialog.showCardName, KEY_SHOW_CARD_NAMES, \"true\");\n        load(prefs, dialog.nonLandPermanentsInOnePile, KEY_PERMANENTS_IN_ONE_PILE, \"true\");\n        load(prefs, dialog.showPlayerNamesPermanently, KEY_SHOW_PLAYER_NAMES_PERMANENTLY, \"true\");\n        load(prefs, dialog.showAbilityPickerForced, KEY_SHOW_ABILITY_PICKER_FORCED, \"true\");\n        load(prefs, dialog.cbAllowRequestToShowHandCards, KEY_GAME_ALLOW_REQUEST_SHOW_HAND_CARDS, \"true\");\n        load(prefs, dialog.cbShowStormCounter, KEY_GAME_SHOW_STORM_COUNTER, \"true\");\n        load(prefs, dialog.cbConfirmEmptyManaPool, KEY_GAME_CONFIRM_EMPTY_MANA_POOL, \"true\");\n        load(prefs, dialog.cbAskMoveToGraveOrder, KEY_GAME_ASK_MOVE_TO_GRAVE_ORDER, \"true\");\n\n        load(prefs, dialog.cbGameLogAutoSave, KEY_GAME_LOG_AUTO_SAVE, \"true\");\n        load(prefs, dialog.cbDraftLogAutoSave, KEY_DRAFT_LOG_AUTO_SAVE, \"true\");\n\n        load(prefs, dialog.checkBoxUpkeepYou, UPKEEP_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxDrawYou, DRAW_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxMainYou, MAIN_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxBeforeCYou, BEFORE_COMBAT_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxEndOfCYou, END_OF_COMBAT_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxMain2You, MAIN_2_YOU, \"on\", \"on\");\n        load(prefs, dialog.checkBoxEndTurnYou, END_OF_TURN_YOU, \"on\", \"on\");\n\n        load(prefs, dialog.checkBoxUpkeepOthers, UPKEEP_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxDrawOthers, DRAW_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxMainOthers, MAIN_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxBeforeCOthers, BEFORE_COMBAT_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxEndOfCOthers, END_OF_COMBAT_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxMain2Others, MAIN_2_OTHERS, \"on\", \"on\");\n        load(prefs, dialog.checkBoxEndTurnOthers, END_OF_TURN_OTHERS, \"on\", \"on\");\n\n        load(prefs, dialog.cbStopAttack, KEY_STOP_ATTACK, \"true\", \"true\");\n        load(prefs, dialog.cbStopBlock, KEY_STOP_BLOCK, \"true\", \"true\");\n        load(prefs, dialog.cbStopOnAllMain, KEY_STOP_ALL_MAIN_PHASES, \"true\", \"false\");\n        load(prefs, dialog.cbStopOnAllEnd, KEY_STOP_ALL_END_PHASES, \"true\", \"false\");\n\n    }","commit_id":"54c1e4f66c7bece6a4d2d142b1bed2b0c850fa32","url":"https://github.com/magefree/mage"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        tabsPanel = new javax.swing.JTabbedPane();\n        tabMain = new javax.swing.JPanel();\n        main_card = new javax.swing.JPanel();\n        displayBigCardsInHand = new javax.swing.JCheckBox();\n        showToolTipsInAnyZone = new javax.swing.JCheckBox();\n        showCardName = new javax.swing.JCheckBox();\n        main_game = new javax.swing.JPanel();\n        nonLandPermanentsInOnePile = new javax.swing.JCheckBox();\n        showPlayerNamesPermanently = new javax.swing.JCheckBox();\n        showAbilityPickerForced = new javax.swing.JCheckBox();\n        cbAllowRequestToShowHandCards = new javax.swing.JCheckBox();\n        cbShowStormCounter = new javax.swing.JCheckBox();\n        cbConfirmEmptyManaPool = new javax.swing.JCheckBox();\n        cbAskMoveToGraveOrder = new javax.swing.JCheckBox();\n        main_gamelog = new javax.swing.JPanel();\n        cbGameLogAutoSave = new javax.swing.JCheckBox();\n        tabPhases = new javax.swing.JPanel();\n        jLabelHeadLine = new javax.swing.JLabel();\n        jLabelYourTurn = new javax.swing.JLabel();\n        jLabelOpponentsTurn = new javax.swing.JLabel();\n        jLabelUpkeep = new javax.swing.JLabel();\n        checkBoxUpkeepYou = new javax.swing.JCheckBox();\n        checkBoxUpkeepOthers = new javax.swing.JCheckBox();\n        jLabelDraw = new javax.swing.JLabel();\n        checkBoxDrawYou = new javax.swing.JCheckBox();\n        checkBoxDrawOthers = new javax.swing.JCheckBox();\n        jLabelMain1 = new javax.swing.JLabel();\n        checkBoxMainYou = new javax.swing.JCheckBox();\n        checkBoxMainOthers = new javax.swing.JCheckBox();\n        jLabelBeforeCombat = new javax.swing.JLabel();\n        checkBoxBeforeCYou = new javax.swing.JCheckBox();\n        checkBoxBeforeCOthers = new javax.swing.JCheckBox();\n        jLabelEndofCombat = new javax.swing.JLabel();\n        checkBoxEndOfCYou = new javax.swing.JCheckBox();\n        checkBoxEndOfCOthers = new javax.swing.JCheckBox();\n        jLabelMain2 = new javax.swing.JLabel();\n        checkBoxMain2You = new javax.swing.JCheckBox();\n        checkBoxMain2Others = new javax.swing.JCheckBox();\n        jLabelEndOfTurn = new javax.swing.JLabel();\n        checkBoxEndTurnYou = new javax.swing.JCheckBox();\n        checkBoxEndTurnOthers = new javax.swing.JCheckBox();\n        phases_stopSettings = new javax.swing.JPanel();\n        cbStopAttack = new javax.swing.JCheckBox();\n        cbStopBlock = new javax.swing.JCheckBox();\n        cbStopOnAllMain = new javax.swing.JCheckBox();\n        cbStopOnAllEnd = new javax.swing.JCheckBox();\n        tabImages = new javax.swing.JPanel();\n        panelCardImages = new javax.swing.JPanel();\n        cbUseDefaultImageFolder = new javax.swing.JCheckBox();\n        txtImageFolderPath = new javax.swing.JTextField();\n        btnBrowseImageLocation = new javax.swing.JButton();\n        cbCheckForNewImages = new javax.swing.JCheckBox();\n        cbSaveToZipFiles = new javax.swing.JCheckBox();\n        cbPreferedImageLanguage = new javax.swing.JComboBox<String>();\n        labelPreferedImageLanguage = new javax.swing.JLabel();\n        panelBackgroundImages = new javax.swing.JPanel();\n        cbUseDefaultBackground = new javax.swing.JCheckBox();\n        txtBackgroundImagePath = new javax.swing.JTextField();\n        btnBrowseBackgroundImage = new javax.swing.JButton();\n        txtBattlefieldImagePath = new javax.swing.JTextField();\n        btnBrowseBattlefieldImage = new javax.swing.JButton();\n        cbUseDefaultBattleImage = new javax.swing.JCheckBox();\n        cbUseRandomBattleImage = new javax.swing.JCheckBox();\n        jLabel14 = new javax.swing.JLabel();\n        jLabel15 = new javax.swing.JLabel();\n        tabSounds = new javax.swing.JPanel();\n        sounds_clips = new javax.swing.JPanel();\n        cbEnableGameSounds = new javax.swing.JCheckBox();\n        cbEnableDraftSounds = new javax.swing.JCheckBox();\n        cbEnableSkipButtonsSounds = new javax.swing.JCheckBox();\n        cbEnableOtherSounds = new javax.swing.JCheckBox();\n        sounds_backgroundMusic = new javax.swing.JPanel();\n        cbEnableBattlefieldBGM = new javax.swing.JCheckBox();\n        jLabel16 = new javax.swing.JLabel();\n        txtBattlefieldIBGMPath = new javax.swing.JTextField();\n        btnBattlefieldBGMBrowse = new javax.swing.JButton();\n        tabAvatars = new javax.swing.JPanel();\n        avatarPane = new javax.swing.JScrollPane();\n        avatarPanel = new javax.swing.JPanel();\n        jLabel12 = new javax.swing.JLabel();\n        jPanel10 = new javax.swing.JPanel();\n        jPanel13 = new javax.swing.JPanel();\n        jPanel11 = new javax.swing.JPanel();\n        jPanel12 = new javax.swing.JPanel();\n        jPanel14 = new javax.swing.JPanel();\n        jPanel15 = new javax.swing.JPanel();\n        jLabel13 = new javax.swing.JLabel();\n        jPanel16 = new javax.swing.JPanel();\n        jPanel17 = new javax.swing.JPanel();\n        jPanel18 = new javax.swing.JPanel();\n        jPanel19 = new javax.swing.JPanel();\n        jPanel20 = new javax.swing.JPanel();\n        jPanel21 = new javax.swing.JPanel();\n        tabConnection = new javax.swing.JPanel();\n        lblProxyType = new javax.swing.JLabel();\n        cbProxyType = new javax.swing.JComboBox<ProxyType>();\n        pnlProxySettings = new javax.swing.JPanel();\n        pnlProxy = new javax.swing.JPanel();\n        lblProxyServer = new javax.swing.JLabel();\n        txtProxyServer = new javax.swing.JTextField();\n        lblProxyPort = new javax.swing.JLabel();\n        txtProxyPort = new javax.swing.JTextField();\n        lblProxyUserName = new javax.swing.JLabel();\n        txtProxyUserName = new javax.swing.JTextField();\n        lblProxyPassword = new javax.swing.JLabel();\n        txtPasswordField = new javax.swing.JPasswordField();\n        rememberPswd = new javax.swing.JCheckBox();\n        jLabel11 = new javax.swing.JLabel();\n        connection_servers = new javax.swing.JPanel();\n        lblURLServerList = new javax.swing.JLabel();\n        txtURLServerList = new javax.swing.JTextField();\n        jLabel17 = new javax.swing.JLabel();\n        saveButton = new javax.swing.JButton();\n        exitButton = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n        setTitle(\"Preferences\");\n\n        main_card.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Card\"));\n\n        displayBigCardsInHand.setText(\"Use big images (for high resolution screens)\");\n        displayBigCardsInHand.setToolTipText(\"Changes the size of the cards shown in hand. Switch this option off if you have a small screen size.\");\n        displayBigCardsInHand.setActionCommand(\"\");\n        displayBigCardsInHand.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        displayBigCardsInHand.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                displayBigCardsInHandActionPerformed(evt);\n            }\n        });\n\n        showToolTipsInAnyZone.setSelected(true);\n        showToolTipsInAnyZone.setText(\"Show card tooltips while hovering with the mouse pointer over a card\");\n        showToolTipsInAnyZone.setToolTipText(\"\");\n        showToolTipsInAnyZone.setActionCommand(\"\");\n        showToolTipsInAnyZone.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));\n        showToolTipsInAnyZone.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                showToolTipsInAnyZoneActionPerformed(evt);\n            }\n        });\n\n        showCardName.setSelected(true);\n        showCardName.setText(\"Show card name on card panel\");\n        showCardName.setToolTipText(\"Write the card's name on the card to make the card name more recognizable.\");\n        showCardName.setActionCommand(\"\");\n        showCardName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));\n        showCardName.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                showCardNameActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout main_cardLayout = new javax.swing.GroupLayout(main_card);\n        main_card.setLayout(main_cardLayout);\n        main_cardLayout.setHorizontalGroup(\n            main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_cardLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(main_cardLayout.createSequentialGroup()\n                        .addComponent(displayBigCardsInHand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addContainerGap())\n                    .addGroup(main_cardLayout.createSequentialGroup()\n                        .addGroup(main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(showToolTipsInAnyZone)\n                            .addComponent(showCardName))\n                        .addGap(0, 0, Short.MAX_VALUE))))\n        );\n        main_cardLayout.setVerticalGroup(\n            main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_cardLayout.createSequentialGroup()\n                .addComponent(displayBigCardsInHand)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(showToolTipsInAnyZone)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(showCardName))\n        );\n\n        main_game.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Game\"));\n\n        nonLandPermanentsInOnePile.setSelected(true);\n        nonLandPermanentsInOnePile.setLabel(\"Put non-land permanents in one pile\");\n        nonLandPermanentsInOnePile.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                nonLandPermanentsInOnePileActionPerformed(evt);\n            }\n        });\n\n        showPlayerNamesPermanently.setSelected(true);\n        showPlayerNamesPermanently.setText(\"Show player names on avatar permanently\");\n        showPlayerNamesPermanently.setToolTipText(\"Instead showing the names only if you hover over the avatar with the mouse, the name is shown all the time.\");\n        showPlayerNamesPermanently.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        showPlayerNamesPermanently.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                showPlayerNamesPermanentlyActionPerformed(evt);\n            }\n        });\n\n        showAbilityPickerForced.setSelected(true);\n        showAbilityPickerForced.setText(\"Show ability picker for abilities or spells without costs\");\n        showAbilityPickerForced.setToolTipText(\"This prevents you from accidently activating abilities without other costs than tapping or casting spells with 0 mana costs.\");\n        showAbilityPickerForced.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        showAbilityPickerForced.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                showAbilityPickerForcedActionPerformed(evt);\n            }\n        });\n\n        cbAllowRequestToShowHandCards.setSelected(true);\n        cbAllowRequestToShowHandCards.setText(\"Allow requests from players and spectators to show your hand cards\");\n        cbAllowRequestToShowHandCards.setToolTipText(\"<html>This is the default setting used for your matches. If activated other players or spectators<br>\\nof your match can send a request so you can allow them to see your hand cards.\");\n        cbAllowRequestToShowHandCards.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        cbAllowRequestToShowHandCards.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbAllowRequestToShowHandCardsActionPerformed(evt);\n            }\n        });\n\n        cbShowStormCounter.setSelected(true);\n        cbShowStormCounter.setText(\"Show the number of spell casts during the current turn\");\n        cbShowStormCounter.setToolTipText(\"<html>Adds a little box left to the short keys line with the number<br>\\nof spells already cast during the current turn (storm counter).\");\n        cbShowStormCounter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        cbShowStormCounter.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbShowStormCounterActionPerformed(evt);\n            }\n        });\n\n        cbConfirmEmptyManaPool.setSelected(true);\n        cbConfirmEmptyManaPool.setText(\"Confirm if you want to pass a phase/step but there is still mana in your mana pool\");\n        cbConfirmEmptyManaPool.setToolTipText(\"<html>If activated you get a confirm message if you pass priority while stack is empty<br>\\n and you still have mana in your mana pool.\");\n        cbConfirmEmptyManaPool.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        cbConfirmEmptyManaPool.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbConfirmEmptyManaPoolActionPerformed(evt);\n            }\n        });\n\n        cbAskMoveToGraveOrder.setSelected(true);\n        cbAskMoveToGraveOrder.setText(\"Ask player for setting order cards go to graveyard\");\n        cbAskMoveToGraveOrder.setToolTipText(\"<html>If activated and multiple cards go to the graveyard at the same time<br>\\nthe player is asked to set the order of the cards.\");\n        cbAskMoveToGraveOrder.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        cbAskMoveToGraveOrder.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbAskMoveToGraveOrderActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout main_gameLayout = new javax.swing.GroupLayout(main_game);\n        main_game.setLayout(main_gameLayout);\n        main_gameLayout.setHorizontalGroup(\n            main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_gameLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(cbAllowRequestToShowHandCards, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGroup(main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                        .addComponent(showPlayerNamesPermanently, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(nonLandPermanentsInOnePile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(showAbilityPickerForced, javax.swing.GroupLayout.Alignment.LEADING))\n                    .addComponent(cbShowStormCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(cbConfirmEmptyManaPool, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(cbAskMoveToGraveOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        main_gameLayout.setVerticalGroup(\n            main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_gameLayout.createSequentialGroup()\n                .addComponent(nonLandPermanentsInOnePile)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(showPlayerNamesPermanently)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(showAbilityPickerForced)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbAllowRequestToShowHandCards)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbShowStormCounter)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbConfirmEmptyManaPool)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbAskMoveToGraveOrder)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        nonLandPermanentsInOnePile.getAccessibleContext().setAccessibleName(\"nonLandPermanentsInOnePile\");\n\n        main_gamelog.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Game log\"));\n\n        cbGameLogAutoSave.setSelected(true);\n        cbGameLogAutoSave.setText(\"Auto save game logs     (to \\\"../Mage.Client/gamelogs/\\\" directory)\");\n        cbGameLogAutoSave.setToolTipText(\"The logs of all your games will be saved to the mentioned folder if this option is switched on.\");\n        cbGameLogAutoSave.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbGameLogAutoSaveActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout main_gamelogLayout = new javax.swing.GroupLayout(main_gamelog);\n        main_gamelog.setLayout(main_gamelogLayout);\n        main_gamelogLayout.setHorizontalGroup(\n            main_gamelogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_gamelogLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(cbGameLogAutoSave, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        main_gamelogLayout.setVerticalGroup(\n            main_gamelogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(cbGameLogAutoSave, javax.swing.GroupLayout.Alignment.TRAILING)\n        );\n\n        javax.swing.GroupLayout tabMainLayout = new javax.swing.GroupLayout(tabMain);\n        tabMain.setLayout(tabMainLayout);\n        tabMainLayout.setHorizontalGroup(\n            tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabMainLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(main_card, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(main_game, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(main_gamelog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        tabMainLayout.setVerticalGroup(\n            tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabMainLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(main_card, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(main_game, javax.swing.GroupLayout.PREFERRED_SIZE, 189, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(main_gamelog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n\n        main_card.getAccessibleContext().setAccessibleName(\"Game panel\");\n\n        tabsPanel.addTab(\"Main\", tabMain);\n\n        jLabelHeadLine.setText(\"Choose phases your game will stop on:\");\n\n        jLabelYourTurn.setText(\"Your turn\");\n\n        jLabelOpponentsTurn.setText(\"Opponent(s) turn\");\n\n        jLabelUpkeep.setText(\"Upkeep:\");\n\n        jLabelDraw.setText(\"Draw:\");\n\n        jLabelMain1.setText(\"Main:\");\n\n        jLabelBeforeCombat.setText(\"Before combat:\");\n\n        jLabelEndofCombat.setText(\"End of combat:\");\n\n        jLabelMain2.setText(\"Main 2:\");\n\n        jLabelEndOfTurn.setText(\"End of turn:\");\n\n        phases_stopSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Stop settings\"));\n        phases_stopSettings.setLayout(new java.awt.GridLayout(4, 1));\n\n        cbStopAttack.setSelected(true);\n        cbStopAttack.setText(\"Stop on declare attackers step if you skip steps (F4/F5/F7) and attackers are available\");\n        cbStopAttack.setToolTipText(\"If you use F4, F5 or F7 to skip steps, you stop on declare attackers step if attackers are available. If this option is not activated, you also skip the declare attackers step with this actions. F9 does always skip the declare attackers step.\");\n        cbStopAttack.setActionCommand(\"\");\n        cbStopAttack.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbStopAttackActionPerformed(evt);\n            }\n        });\n        phases_stopSettings.add(cbStopAttack);\n\n        cbStopBlock.setText(\"Stop on your declare blockers step also if no blockers available\");\n        cbStopBlock.setToolTipText(\"Also if you have no blockers to declare, the game stops at the declare blockers step.\");\n        cbStopBlock.setActionCommand(\"\");\n        cbStopBlock.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbStopBlockActionPerformed(evt);\n            }\n        });\n        phases_stopSettings.add(cbStopBlock);\n\n        cbStopOnAllMain.setText(\"Skip with F7 to next main phase (if not activated skip always to your next main phase)\");\n        cbStopOnAllMain.setToolTipText(\"If activated F7 skips to next main phases (regardless of the active players).\");\n        cbStopOnAllMain.setActionCommand(\"\");\n        cbStopOnAllMain.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbStopOnAllMainActionPerformed(evt);\n            }\n        });\n        phases_stopSettings.add(cbStopOnAllMain);\n\n        cbStopOnAllEnd.setText(\"Skip with F5 to next end step (if not activated only to end steps of opponents)\");\n        cbStopOnAllEnd.setToolTipText(\"If activated - F5 skips to the next end step (regardless of the current player)\");\n        cbStopOnAllEnd.setActionCommand(\"\");\n        cbStopOnAllEnd.setPreferredSize(new java.awt.Dimension(300, 25));\n        cbStopOnAllEnd.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbStopOnAllEndActionPerformed(evt);\n            }\n        });\n        phases_stopSettings.add(cbStopOnAllEnd);\n\n        javax.swing.GroupLayout tabPhasesLayout = new javax.swing.GroupLayout(tabPhases);\n        tabPhases.setLayout(tabPhasesLayout);\n        tabPhasesLayout.setHorizontalGroup(\n            tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabPhasesLayout.createSequentialGroup()\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                .addGap(20, 20, 20)\n                                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addComponent(jLabelUpkeep)\n                                            .addComponent(jLabelBeforeCombat)\n                                            .addComponent(jLabelEndofCombat)\n                                            .addComponent(jLabelMain2)\n                                            .addComponent(jLabelEndOfTurn))\n                                        .addGap(77, 77, 77)\n                                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                                .addGap(2, 2, 2)\n                                                .addComponent(jLabelYourTurn)\n                                                .addGap(32, 32, 32)\n                                                .addComponent(jLabelOpponentsTurn))\n                                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                                .addGap(13, 13, 13)\n                                                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                                    .addComponent(checkBoxDrawYou)\n                                                    .addComponent(checkBoxUpkeepYou)\n                                                    .addComponent(checkBoxMainYou)\n                                                    .addComponent(checkBoxBeforeCYou)\n                                                    .addComponent(checkBoxEndOfCYou)\n                                                    .addComponent(checkBoxMain2You)\n                                                    .addComponent(checkBoxEndTurnYou))\n                                                .addGap(78, 78, 78)\n                                                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                                    .addComponent(checkBoxUpkeepOthers)\n                                                    .addComponent(checkBoxBeforeCOthers)\n                                                    .addComponent(checkBoxMainOthers)\n                                                    .addComponent(checkBoxEndOfCOthers)\n                                                    .addComponent(checkBoxDrawOthers)\n                                                    .addComponent(checkBoxMain2Others)\n                                                    .addComponent(checkBoxEndTurnOthers)))))\n                                    .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                                        .addComponent(jLabelMain1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                        .addComponent(jLabelDraw, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))\n                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                .addContainerGap()\n                                .addComponent(jLabelHeadLine)))\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(phases_stopSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        tabPhasesLayout.setVerticalGroup(\n            tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabPhasesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addComponent(jLabelOpponentsTurn)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(checkBoxUpkeepOthers))\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                .addComponent(jLabelHeadLine)\n                                .addGap(20, 20, 20))\n                            .addComponent(jLabelYourTurn))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(checkBoxUpkeepYou)\n                            .addComponent(jLabelUpkeep))))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLabelDraw)\n                    .addComponent(checkBoxDrawYou)\n                    .addComponent(checkBoxDrawOthers))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLabelMain1)\n                    .addComponent(checkBoxMainYou)\n                    .addComponent(checkBoxMainOthers))\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabelBeforeCombat, javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(checkBoxBeforeCYou, javax.swing.GroupLayout.Alignment.TRAILING)))\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addGap(6, 6, 6)\n                        .addComponent(checkBoxBeforeCOthers)))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLabelEndofCombat)\n                    .addComponent(checkBoxEndOfCYou)\n                    .addComponent(checkBoxEndOfCOthers))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLabelMain2)\n                    .addComponent(checkBoxMain2You)\n                    .addComponent(checkBoxMain2Others))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(checkBoxEndTurnYou)\n                    .addComponent(jLabelEndOfTurn)\n                    .addComponent(checkBoxEndTurnOthers))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(phases_stopSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(13, Short.MAX_VALUE))\n        );\n\n        tabsPanel.addTab(\"Phases\", tabPhases);\n\n        panelCardImages.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Card images:\"));\n\n        cbUseDefaultImageFolder.setText(\"Use default location to save images\");\n        cbUseDefaultImageFolder.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbUseDefaultImageFolderActionPerformed(evt);\n            }\n        });\n\n        txtImageFolderPath.setToolTipText(\"The selected image will be used as background picture. You have to restart MAGE to view a changed background image.\");\n\n        btnBrowseImageLocation.setText(\"Browse...\");\n        btnBrowseImageLocation.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBrowseImageLocationActionPerformed(evt);\n            }\n        });\n\n        cbCheckForNewImages.setText(\"Check for new images on startup\");\n        cbCheckForNewImages.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbCheckForNewImagesActionPerformed(evt);\n            }\n        });\n\n        cbSaveToZipFiles.setText(\"Store images in zip files\");\n        cbSaveToZipFiles.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbSaveToZipFilesActionPerformed(evt);\n            }\n        });\n\n        cbPreferedImageLanguage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" }));\n\n        labelPreferedImageLanguage.setText(\"Prefered image language:\");\n        labelPreferedImageLanguage.setFocusable(false);\n\n        javax.swing.GroupLayout panelCardImagesLayout = new javax.swing.GroupLayout(panelCardImages);\n        panelCardImages.setLayout(panelCardImagesLayout);\n        panelCardImagesLayout.setHorizontalGroup(\n            panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(panelCardImagesLayout.createSequentialGroup()\n                .addGap(24, 24, 24)\n                .addComponent(txtImageFolderPath)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(btnBrowseImageLocation))\n            .addGroup(panelCardImagesLayout.createSequentialGroup()\n                .addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(cbUseDefaultImageFolder)\n                    .addComponent(cbCheckForNewImages)\n                    .addGroup(panelCardImagesLayout.createSequentialGroup()\n                        .addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelCardImagesLayout.createSequentialGroup()\n                                .addContainerGap()\n                                .addComponent(labelPreferedImageLanguage))\n                            .addComponent(cbSaveToZipFiles, javax.swing.GroupLayout.Alignment.LEADING))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(cbPreferedImageLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addGap(0, 0, Short.MAX_VALUE))\n        );\n        panelCardImagesLayout.setVerticalGroup(\n            panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(panelCardImagesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(cbUseDefaultImageFolder)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtImageFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(btnBrowseImageLocation))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cbCheckForNewImages)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbSaveToZipFiles)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(cbPreferedImageLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(labelPreferedImageLanguage))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        panelBackgroundImages.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Background images setting:\"));\n\n        cbUseDefaultBackground.setText(\"Use default image\");\n        cbUseDefaultBackground.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbUseDefaultBackgroundActionPerformed(evt);\n            }\n        });\n\n        txtBackgroundImagePath.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtBackgroundImagePathActionPerformed(evt);\n            }\n        });\n\n        btnBrowseBackgroundImage.setText(\"Browse...\");\n        btnBrowseBackgroundImage.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBrowseBackgroundImageActionPerformed(evt);\n            }\n        });\n\n        txtBattlefieldImagePath.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtBattlefieldImagePathActionPerformed(evt);\n            }\n        });\n\n        btnBrowseBattlefieldImage.setText(\"Browse...\");\n        btnBrowseBattlefieldImage.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBrowseBattlefieldImageActionPerformed(evt);\n            }\n        });\n\n        cbUseDefaultBattleImage.setText(\"Use default battlefield image\");\n        cbUseDefaultBattleImage.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbUseDefaultBattleImageActionPerformed(evt);\n            }\n        });\n\n        cbUseRandomBattleImage.setText(\"Select random battlefield image\");\n        cbUseRandomBattleImage.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbUseRandomBattleImageActionPerformed(evt);\n            }\n        });\n\n        jLabel14.setText(\"Background:\");\n\n        jLabel15.setText(\"Battlefield:\");\n\n        javax.swing.GroupLayout panelBackgroundImagesLayout = new javax.swing.GroupLayout(panelBackgroundImages);\n        panelBackgroundImages.setLayout(panelBackgroundImagesLayout);\n        panelBackgroundImagesLayout.setHorizontalGroup(\n            panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                        .addGap(19, 19, 19)\n                        .addComponent(jLabel14))\n                    .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                        .addGap(25, 25, 25)\n                        .addComponent(jLabel15)))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                        .addComponent(txtBattlefieldImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(btnBrowseBattlefieldImage))\n                    .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                        .addComponent(txtBackgroundImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(btnBrowseBackgroundImage)))\n                .addGap(0, 0, Short.MAX_VALUE))\n            .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(cbUseRandomBattleImage)\n                    .addComponent(cbUseDefaultBattleImage)\n                    .addComponent(cbUseDefaultBackground))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        panelBackgroundImagesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtBackgroundImagePath, txtBattlefieldImagePath});\n\n        panelBackgroundImagesLayout.setVerticalGroup(\n            panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(cbUseDefaultBackground)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtBackgroundImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(btnBrowseBackgroundImage)\n                    .addComponent(jLabel14))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cbUseDefaultBattleImage)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cbUseRandomBattleImage)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtBattlefieldImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(btnBrowseBattlefieldImage)\n                    .addComponent(jLabel15)))\n        );\n\n        javax.swing.GroupLayout tabImagesLayout = new javax.swing.GroupLayout(tabImages);\n        tabImages.setLayout(tabImagesLayout);\n        tabImagesLayout.setHorizontalGroup(\n            tabImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabImagesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(panelCardImages, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(panelBackgroundImages, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        tabImagesLayout.setVerticalGroup(\n            tabImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabImagesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(panelCardImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(panelBackgroundImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        tabsPanel.addTab(\"Images\", tabImages);\n\n        sounds_clips.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Clips\"));\n        sounds_clips.setLayout(new java.awt.GridLayout(4, 0));\n\n        cbEnableGameSounds.setText(\"Enable game sounds\");\n        cbEnableGameSounds.setToolTipText(\"Sounds that will be played for certain actions (e.g. play land, attack, etc.) during the game.\");\n        cbEnableGameSounds.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableGameSoundsActionPerformed(evt);\n            }\n        });\n        sounds_clips.add(cbEnableGameSounds);\n\n        cbEnableDraftSounds.setText(\"Enable draft sounds\");\n        cbEnableDraftSounds.setToolTipText(\"Sounds that will be played during drafting for card picking or warining if time runs out.\");\n        cbEnableDraftSounds.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableDraftSoundsActionPerformed(evt);\n            }\n        });\n        sounds_clips.add(cbEnableDraftSounds);\n\n        cbEnableSkipButtonsSounds.setText(\"Enable skip button sounds\");\n        cbEnableSkipButtonsSounds.setToolTipText(\"Sounds that will be played if a priority skip action (F4/F5/F7/F9) or cancel skip action (F3) is used.\");\n        cbEnableSkipButtonsSounds.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableSkipButtonsSoundsActionPerformed(evt);\n            }\n        });\n        sounds_clips.add(cbEnableSkipButtonsSounds);\n\n        cbEnableOtherSounds.setText(\"Enable other sounds\");\n        cbEnableOtherSounds.setToolTipText(\"Sounds that will be played for actions outside of games (e.g. whisper, player joins your game, player submits a deck ...).\");\n        cbEnableOtherSounds.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableOtherSoundsActionPerformed(evt);\n            }\n        });\n        sounds_clips.add(cbEnableOtherSounds);\n\n        sounds_backgroundMusic.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Music\"));\n\n        cbEnableBattlefieldBGM.setText(\"Play music during match\");\n        cbEnableBattlefieldBGM.setToolTipText(\"During your matches music will be played from the seleced folder.\");\n        cbEnableBattlefieldBGM.setActionCommand(\"Play automatically during matches\");\n        cbEnableBattlefieldBGM.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableBattlefieldBGMActionPerformed(evt);\n            }\n        });\n\n        jLabel16.setText(\"Playing from folder:\");\n        jLabel16.setToolTipText(\"\");\n\n        txtBattlefieldIBGMPath.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtBattlefieldIBGMPathActionPerformed(evt);\n            }\n        });\n\n        btnBattlefieldBGMBrowse.setText(\"Browse...\");\n        btnBattlefieldBGMBrowse.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBattlefieldBGMBrowseActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout sounds_backgroundMusicLayout = new javax.swing.GroupLayout(sounds_backgroundMusic);\n        sounds_backgroundMusic.setLayout(sounds_backgroundMusicLayout);\n        sounds_backgroundMusicLayout.setHorizontalGroup(\n            sounds_backgroundMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(sounds_backgroundMusicLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel16)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(txtBattlefieldIBGMPath)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(btnBattlefieldBGMBrowse))\n            .addGroup(sounds_backgroundMusicLayout.createSequentialGroup()\n                .addComponent(cbEnableBattlefieldBGM)\n                .addGap(0, 0, Short.MAX_VALUE))\n        );\n        sounds_backgroundMusicLayout.setVerticalGroup(\n            sounds_backgroundMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(sounds_backgroundMusicLayout.createSequentialGroup()\n                .addComponent(cbEnableBattlefieldBGM)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(sounds_backgroundMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtBattlefieldIBGMPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(btnBattlefieldBGMBrowse)\n                    .addComponent(jLabel16)))\n        );\n\n        javax.swing.GroupLayout tabSoundsLayout = new javax.swing.GroupLayout(tabSounds);\n        tabSounds.setLayout(tabSoundsLayout);\n        tabSoundsLayout.setHorizontalGroup(\n            tabSoundsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabSoundsLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabSoundsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(sounds_clips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(sounds_backgroundMusic, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        tabSoundsLayout.setVerticalGroup(\n            tabSoundsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabSoundsLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(sounds_clips, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(sounds_backgroundMusic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        sounds_clips.getAccessibleContext().setAccessibleDescription(\"\");\n\n        tabsPanel.addTab(\"Sounds\", tabSounds);\n\n        jLabel12.setFont(new java.awt.Font(\"Tahoma\", 1, 11)); // NOI18N\n        jLabel12.setText(\"Choose your avatar:\");\n\n        jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);\n        jPanel10.setLayout(jPanel10Layout);\n        jPanel10Layout.setHorizontalGroup(\n            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel10Layout.setVerticalGroup(\n            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);\n        jPanel13.setLayout(jPanel13Layout);\n        jPanel13Layout.setHorizontalGroup(\n            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel13Layout.setVerticalGroup(\n            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);\n        jPanel11.setLayout(jPanel11Layout);\n        jPanel11Layout.setHorizontalGroup(\n            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel11Layout.setVerticalGroup(\n            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);\n        jPanel12.setLayout(jPanel12Layout);\n        jPanel12Layout.setHorizontalGroup(\n            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel12Layout.setVerticalGroup(\n            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);\n        jPanel14.setLayout(jPanel14Layout);\n        jPanel14Layout.setHorizontalGroup(\n            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel14Layout.setVerticalGroup(\n            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);\n        jPanel15.setLayout(jPanel15Layout);\n        jPanel15Layout.setHorizontalGroup(\n            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel15Layout.setVerticalGroup(\n            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jLabel13.setFont(new java.awt.Font(\"Tahoma\", 1, 11)); // NOI18N\n        jLabel13.setText(\"New avatars:\");\n\n        jPanel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);\n        jPanel16.setLayout(jPanel16Layout);\n        jPanel16Layout.setHorizontalGroup(\n            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel16Layout.setVerticalGroup(\n            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);\n        jPanel17.setLayout(jPanel17Layout);\n        jPanel17Layout.setHorizontalGroup(\n            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel17Layout.setVerticalGroup(\n            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);\n        jPanel18.setLayout(jPanel18Layout);\n        jPanel18Layout.setHorizontalGroup(\n            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel18Layout.setVerticalGroup(\n            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel19.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);\n        jPanel19.setLayout(jPanel19Layout);\n        jPanel19Layout.setHorizontalGroup(\n            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel19Layout.setVerticalGroup(\n            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel20.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);\n        jPanel20.setLayout(jPanel20Layout);\n        jPanel20Layout.setHorizontalGroup(\n            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel20Layout.setVerticalGroup(\n            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);\n        jPanel21.setLayout(jPanel21Layout);\n        jPanel21Layout.setHorizontalGroup(\n            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel21Layout.setVerticalGroup(\n            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        javax.swing.GroupLayout avatarPanelLayout = new javax.swing.GroupLayout(avatarPanel);\n        avatarPanel.setLayout(avatarPanelLayout);\n        avatarPanelLayout.setHorizontalGroup(\n            avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(avatarPanelLayout.createSequentialGroup()\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(avatarPanelLayout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(jLabel12))\n                    .addGroup(avatarPanelLayout.createSequentialGroup()\n                        .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(avatarPanelLayout.createSequentialGroup()\n                                .addGap(30, 30, 30)\n                                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(jPanel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                .addGap(33, 33, 33)\n                                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                            .addGroup(avatarPanelLayout.createSequentialGroup()\n                                .addContainerGap()\n                                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(avatarPanelLayout.createSequentialGroup()\n                                        .addGap(20, 20, 20)\n                                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addGap(33, 33, 33)\n                                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                    .addComponent(jLabel13))))\n                        .addGap(32, 32, 32)\n                        .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        avatarPanelLayout.setVerticalGroup(\n            avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(avatarPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel12)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(26, 26, 26)\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(23, 23, 23)\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addGroup(avatarPanelLayout.createSequentialGroup()\n                        .addComponent(jLabel13)\n                        .addGap(18, 18, 18)\n                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(25, 25, 25))\n        );\n\n        avatarPane.setViewportView(avatarPanel);\n\n        javax.swing.GroupLayout tabAvatarsLayout = new javax.swing.GroupLayout(tabAvatars);\n        tabAvatars.setLayout(tabAvatarsLayout);\n        tabAvatarsLayout.setHorizontalGroup(\n            tabAvatarsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(avatarPane, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)\n        );\n        tabAvatarsLayout.setVerticalGroup(\n            tabAvatarsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(avatarPane, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)\n        );\n\n        tabsPanel.addTab(\"Avatars\", tabAvatars);\n\n        lblProxyType.setText(\"Proxy:\");\n\n        cbProxyType.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbProxyTypeActionPerformed(evt);\n            }\n        });\n\n        pnlProxySettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        lblProxyServer.setText(\"Server:\");\n\n        lblProxyPort.setText(\"Port:\");\n\n        txtProxyPort.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                txtProxyPortkeyTyped(evt);\n            }\n        });\n\n        lblProxyUserName.setText(\"User Name:\");\n\n        lblProxyPassword.setText(\"Password:\");\n\n        txtPasswordField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtPasswordFieldActionPerformed(evt);\n            }\n        });\n\n        rememberPswd.setText(\"Remember Password\");\n        rememberPswd.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rememberPswdActionPerformed(evt);\n            }\n        });\n\n        jLabel11.setFont(new java.awt.Font(\"Tahoma\", 2, 10)); // NOI18N\n        jLabel11.setText(\"Note: password won't be encrypted!\");\n\n        javax.swing.GroupLayout pnlProxyLayout = new javax.swing.GroupLayout(pnlProxy);\n        pnlProxy.setLayout(pnlProxyLayout);\n        pnlProxyLayout.setHorizontalGroup(\n            pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlProxyLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(pnlProxyLayout.createSequentialGroup()\n                        .addComponent(rememberPswd)\n                        .addGap(47, 47, 47)\n                        .addComponent(jLabel11)\n                        .addGap(34, 34, 34))\n                    .addGroup(pnlProxyLayout.createSequentialGroup()\n                        .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(lblProxyPort)\n                            .addComponent(lblProxyPassword)\n                            .addComponent(lblProxyServer)\n                            .addComponent(lblProxyUserName))\n                        .addGap(19, 19, 19)\n                        .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(txtProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                                .addComponent(txtPasswordField, javax.swing.GroupLayout.Alignment.LEADING)\n                                .addComponent(txtProxyUserName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addComponent(txtProxyServer))\n                        .addContainerGap())))\n        );\n        pnlProxyLayout.setVerticalGroup(\n            pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlProxyLayout.createSequentialGroup()\n                .addGap(6, 6, 6)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtProxyServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(lblProxyServer))\n                .addGap(8, 8, 8)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(lblProxyPort)\n                    .addComponent(txtProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtProxyUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(lblProxyUserName))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(lblProxyPassword))\n                .addGap(18, 18, 18)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(rememberPswd)\n                    .addComponent(jLabel11))\n                .addContainerGap(25, Short.MAX_VALUE))\n        );\n\n        javax.swing.GroupLayout pnlProxySettingsLayout = new javax.swing.GroupLayout(pnlProxySettings);\n        pnlProxySettings.setLayout(pnlProxySettingsLayout);\n        pnlProxySettingsLayout.setHorizontalGroup(\n            pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlProxySettingsLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(pnlProxy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n        pnlProxySettingsLayout.setVerticalGroup(\n            pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlProxySettingsLayout.createSequentialGroup()\n                .addComponent(pnlProxy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n\n        connection_servers.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Servers\"));\n\n        lblURLServerList.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        lblURLServerList.setText(\"URL server list:\");\n        lblURLServerList.setToolTipText(\"\");\n        lblURLServerList.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);\n        lblURLServerList.setPreferredSize(new java.awt.Dimension(110, 16));\n        lblURLServerList.setVerticalTextPosition(javax.swing.SwingConstants.TOP);\n\n        txtURLServerList.setToolTipText(\"The URL XMage tries to read a server list from.\");\n        txtURLServerList.setPreferredSize(new java.awt.Dimension(300, 22));\n\n        jLabel17.setFont(new java.awt.Font(\"Tahoma\", 2, 10)); // NOI18N\n        jLabel17.setText(\"e.g.: http://XMage.de/files/server-list.txt\");\n\n        javax.swing.GroupLayout connection_serversLayout = new javax.swing.GroupLayout(connection_servers);\n        connection_servers.setLayout(connection_serversLayout);\n        connection_serversLayout.setHorizontalGroup(\n            connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(connection_serversLayout.createSequentialGroup()\n                .addGroup(connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(connection_serversLayout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(lblURLServerList, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(txtURLServerList, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGroup(connection_serversLayout.createSequentialGroup()\n                        .addGap(141, 141, 141)\n                        .addComponent(jLabel17)))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        connection_serversLayout.setVerticalGroup(\n            connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(connection_serversLayout.createSequentialGroup()\n                .addGroup(connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                    .addComponent(lblURLServerList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(txtURLServerList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel17))\n        );\n\n        javax.swing.GroupLayout tabConnectionLayout = new javax.swing.GroupLayout(tabConnection);\n        tabConnection.setLayout(tabConnectionLayout);\n        tabConnectionLayout.setHorizontalGroup(\n            tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabConnectionLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(tabConnectionLayout.createSequentialGroup()\n                        .addComponent(lblProxyType)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(cbProxyType, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(pnlProxySettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(connection_servers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        tabConnectionLayout.setVerticalGroup(\n            tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabConnectionLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(connection_servers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(lblProxyType)\n                    .addComponent(cbProxyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addComponent(pnlProxySettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(54, Short.MAX_VALUE))\n        );\n\n        pnlProxySettings.getAccessibleContext().setAccessibleDescription(\"\");\n\n        tabsPanel.addTab(\"Connection\", tabConnection);\n\n        saveButton.setLabel(\"Save\");\n        saveButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);\n        saveButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                saveButtonActionPerformed(evt);\n            }\n        });\n\n        exitButton.setLabel(\"Exit\");\n        exitButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);\n        exitButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                exitButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(saveButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n            .addComponent(tabsPanel)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(tabsPanel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(exitButton)\n                    .addComponent(saveButton))\n                .addContainerGap())\n        );\n\n        pack();\n    }","id":12478,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        tabsPanel = new javax.swing.JTabbedPane();\n        tabMain = new javax.swing.JPanel();\n        main_card = new javax.swing.JPanel();\n        displayBigCardsInHand = new javax.swing.JCheckBox();\n        showToolTipsInAnyZone = new javax.swing.JCheckBox();\n        showCardName = new javax.swing.JCheckBox();\n        main_game = new javax.swing.JPanel();\n        nonLandPermanentsInOnePile = new javax.swing.JCheckBox();\n        showPlayerNamesPermanently = new javax.swing.JCheckBox();\n        showAbilityPickerForced = new javax.swing.JCheckBox();\n        cbAllowRequestToShowHandCards = new javax.swing.JCheckBox();\n        cbShowStormCounter = new javax.swing.JCheckBox();\n        cbConfirmEmptyManaPool = new javax.swing.JCheckBox();\n        cbAskMoveToGraveOrder = new javax.swing.JCheckBox();\n        main_gamelog = new javax.swing.JPanel();\n        cbGameLogAutoSave = new javax.swing.JCheckBox();\n        cbDraftLogAutoSave = new javax.swing.JCheckBox();\n        tabPhases = new javax.swing.JPanel();\n        jLabelHeadLine = new javax.swing.JLabel();\n        jLabelYourTurn = new javax.swing.JLabel();\n        jLabelOpponentsTurn = new javax.swing.JLabel();\n        jLabelUpkeep = new javax.swing.JLabel();\n        checkBoxUpkeepYou = new javax.swing.JCheckBox();\n        checkBoxUpkeepOthers = new javax.swing.JCheckBox();\n        jLabelDraw = new javax.swing.JLabel();\n        checkBoxDrawYou = new javax.swing.JCheckBox();\n        checkBoxDrawOthers = new javax.swing.JCheckBox();\n        jLabelMain1 = new javax.swing.JLabel();\n        checkBoxMainYou = new javax.swing.JCheckBox();\n        checkBoxMainOthers = new javax.swing.JCheckBox();\n        jLabelBeforeCombat = new javax.swing.JLabel();\n        checkBoxBeforeCYou = new javax.swing.JCheckBox();\n        checkBoxBeforeCOthers = new javax.swing.JCheckBox();\n        jLabelEndofCombat = new javax.swing.JLabel();\n        checkBoxEndOfCYou = new javax.swing.JCheckBox();\n        checkBoxEndOfCOthers = new javax.swing.JCheckBox();\n        jLabelMain2 = new javax.swing.JLabel();\n        checkBoxMain2You = new javax.swing.JCheckBox();\n        checkBoxMain2Others = new javax.swing.JCheckBox();\n        jLabelEndOfTurn = new javax.swing.JLabel();\n        checkBoxEndTurnYou = new javax.swing.JCheckBox();\n        checkBoxEndTurnOthers = new javax.swing.JCheckBox();\n        phases_stopSettings = new javax.swing.JPanel();\n        cbStopAttack = new javax.swing.JCheckBox();\n        cbStopBlock = new javax.swing.JCheckBox();\n        cbStopOnAllMain = new javax.swing.JCheckBox();\n        cbStopOnAllEnd = new javax.swing.JCheckBox();\n        tabImages = new javax.swing.JPanel();\n        panelCardImages = new javax.swing.JPanel();\n        cbUseDefaultImageFolder = new javax.swing.JCheckBox();\n        txtImageFolderPath = new javax.swing.JTextField();\n        btnBrowseImageLocation = new javax.swing.JButton();\n        cbCheckForNewImages = new javax.swing.JCheckBox();\n        cbSaveToZipFiles = new javax.swing.JCheckBox();\n        cbPreferedImageLanguage = new javax.swing.JComboBox<String>();\n        labelPreferedImageLanguage = new javax.swing.JLabel();\n        panelBackgroundImages = new javax.swing.JPanel();\n        cbUseDefaultBackground = new javax.swing.JCheckBox();\n        txtBackgroundImagePath = new javax.swing.JTextField();\n        btnBrowseBackgroundImage = new javax.swing.JButton();\n        txtBattlefieldImagePath = new javax.swing.JTextField();\n        btnBrowseBattlefieldImage = new javax.swing.JButton();\n        cbUseDefaultBattleImage = new javax.swing.JCheckBox();\n        cbUseRandomBattleImage = new javax.swing.JCheckBox();\n        jLabel14 = new javax.swing.JLabel();\n        jLabel15 = new javax.swing.JLabel();\n        tabSounds = new javax.swing.JPanel();\n        sounds_clips = new javax.swing.JPanel();\n        cbEnableGameSounds = new javax.swing.JCheckBox();\n        cbEnableDraftSounds = new javax.swing.JCheckBox();\n        cbEnableSkipButtonsSounds = new javax.swing.JCheckBox();\n        cbEnableOtherSounds = new javax.swing.JCheckBox();\n        sounds_backgroundMusic = new javax.swing.JPanel();\n        cbEnableBattlefieldBGM = new javax.swing.JCheckBox();\n        jLabel16 = new javax.swing.JLabel();\n        txtBattlefieldIBGMPath = new javax.swing.JTextField();\n        btnBattlefieldBGMBrowse = new javax.swing.JButton();\n        tabAvatars = new javax.swing.JPanel();\n        avatarPane = new javax.swing.JScrollPane();\n        avatarPanel = new javax.swing.JPanel();\n        jLabel12 = new javax.swing.JLabel();\n        jPanel10 = new javax.swing.JPanel();\n        jPanel13 = new javax.swing.JPanel();\n        jPanel11 = new javax.swing.JPanel();\n        jPanel12 = new javax.swing.JPanel();\n        jPanel14 = new javax.swing.JPanel();\n        jPanel15 = new javax.swing.JPanel();\n        jLabel13 = new javax.swing.JLabel();\n        jPanel16 = new javax.swing.JPanel();\n        jPanel17 = new javax.swing.JPanel();\n        jPanel18 = new javax.swing.JPanel();\n        jPanel19 = new javax.swing.JPanel();\n        jPanel20 = new javax.swing.JPanel();\n        jPanel21 = new javax.swing.JPanel();\n        tabConnection = new javax.swing.JPanel();\n        lblProxyType = new javax.swing.JLabel();\n        cbProxyType = new javax.swing.JComboBox<ProxyType>();\n        pnlProxySettings = new javax.swing.JPanel();\n        pnlProxy = new javax.swing.JPanel();\n        lblProxyServer = new javax.swing.JLabel();\n        txtProxyServer = new javax.swing.JTextField();\n        lblProxyPort = new javax.swing.JLabel();\n        txtProxyPort = new javax.swing.JTextField();\n        lblProxyUserName = new javax.swing.JLabel();\n        txtProxyUserName = new javax.swing.JTextField();\n        lblProxyPassword = new javax.swing.JLabel();\n        txtPasswordField = new javax.swing.JPasswordField();\n        rememberPswd = new javax.swing.JCheckBox();\n        jLabel11 = new javax.swing.JLabel();\n        connection_servers = new javax.swing.JPanel();\n        lblURLServerList = new javax.swing.JLabel();\n        txtURLServerList = new javax.swing.JTextField();\n        jLabel17 = new javax.swing.JLabel();\n        saveButton = new javax.swing.JButton();\n        exitButton = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n        setTitle(\"Preferences\");\n\n        main_card.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Card\"));\n\n        displayBigCardsInHand.setText(\"Use big images (for high resolution screens)\");\n        displayBigCardsInHand.setToolTipText(\"Changes the size of the cards shown in hand. Switch this option off if you have a small screen size.\");\n        displayBigCardsInHand.setActionCommand(\"\");\n        displayBigCardsInHand.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        displayBigCardsInHand.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                displayBigCardsInHandActionPerformed(evt);\n            }\n        });\n\n        showToolTipsInAnyZone.setSelected(true);\n        showToolTipsInAnyZone.setText(\"Show card tooltips while hovering with the mouse pointer over a card\");\n        showToolTipsInAnyZone.setToolTipText(\"\");\n        showToolTipsInAnyZone.setActionCommand(\"\");\n        showToolTipsInAnyZone.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));\n        showToolTipsInAnyZone.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                showToolTipsInAnyZoneActionPerformed(evt);\n            }\n        });\n\n        showCardName.setSelected(true);\n        showCardName.setText(\"Show card name on card panel\");\n        showCardName.setToolTipText(\"Write the card's name on the card to make the card name more recognizable.\");\n        showCardName.setActionCommand(\"\");\n        showCardName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));\n        showCardName.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                showCardNameActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout main_cardLayout = new javax.swing.GroupLayout(main_card);\n        main_card.setLayout(main_cardLayout);\n        main_cardLayout.setHorizontalGroup(\n            main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_cardLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(main_cardLayout.createSequentialGroup()\n                        .addComponent(displayBigCardsInHand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addContainerGap())\n                    .addGroup(main_cardLayout.createSequentialGroup()\n                        .addGroup(main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(showToolTipsInAnyZone)\n                            .addComponent(showCardName))\n                        .addGap(0, 0, Short.MAX_VALUE))))\n        );\n        main_cardLayout.setVerticalGroup(\n            main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_cardLayout.createSequentialGroup()\n                .addComponent(displayBigCardsInHand)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(showToolTipsInAnyZone)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(showCardName))\n        );\n\n        main_game.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Game\"));\n\n        nonLandPermanentsInOnePile.setSelected(true);\n        nonLandPermanentsInOnePile.setLabel(\"Put non-land permanents in one pile\");\n        nonLandPermanentsInOnePile.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                nonLandPermanentsInOnePileActionPerformed(evt);\n            }\n        });\n\n        showPlayerNamesPermanently.setSelected(true);\n        showPlayerNamesPermanently.setText(\"Show player names on avatar permanently\");\n        showPlayerNamesPermanently.setToolTipText(\"Instead showing the names only if you hover over the avatar with the mouse, the name is shown all the time.\");\n        showPlayerNamesPermanently.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        showPlayerNamesPermanently.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                showPlayerNamesPermanentlyActionPerformed(evt);\n            }\n        });\n\n        showAbilityPickerForced.setSelected(true);\n        showAbilityPickerForced.setText(\"Show ability picker for abilities or spells without costs\");\n        showAbilityPickerForced.setToolTipText(\"This prevents you from accidently activating abilities without other costs than tapping or casting spells with 0 mana costs.\");\n        showAbilityPickerForced.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        showAbilityPickerForced.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                showAbilityPickerForcedActionPerformed(evt);\n            }\n        });\n\n        cbAllowRequestToShowHandCards.setSelected(true);\n        cbAllowRequestToShowHandCards.setText(\"Allow requests from players and spectators to show your hand cards\");\n        cbAllowRequestToShowHandCards.setToolTipText(\"<html>This is the default setting used for your matches. If activated other players or spectators<br>\\nof your match can send a request so you can allow them to see your hand cards.\");\n        cbAllowRequestToShowHandCards.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        cbAllowRequestToShowHandCards.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbAllowRequestToShowHandCardsActionPerformed(evt);\n            }\n        });\n\n        cbShowStormCounter.setSelected(true);\n        cbShowStormCounter.setText(\"Show the number of spell casts during the current turn\");\n        cbShowStormCounter.setToolTipText(\"<html>Adds a little box left to the short keys line with the number<br>\\nof spells already cast during the current turn (storm counter).\");\n        cbShowStormCounter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        cbShowStormCounter.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbShowStormCounterActionPerformed(evt);\n            }\n        });\n\n        cbConfirmEmptyManaPool.setSelected(true);\n        cbConfirmEmptyManaPool.setText(\"Confirm if you want to pass a phase/step but there is still mana in your mana pool\");\n        cbConfirmEmptyManaPool.setToolTipText(\"<html>If activated you get a confirm message if you pass priority while stack is empty<br>\\n and you still have mana in your mana pool.\");\n        cbConfirmEmptyManaPool.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        cbConfirmEmptyManaPool.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbConfirmEmptyManaPoolActionPerformed(evt);\n            }\n        });\n\n        cbAskMoveToGraveOrder.setSelected(true);\n        cbAskMoveToGraveOrder.setText(\"Ask player for setting order cards go to graveyard\");\n        cbAskMoveToGraveOrder.setToolTipText(\"<html>If activated and multiple cards go to the graveyard at the same time<br>\\nthe player is asked to set the order of the cards.\");\n        cbAskMoveToGraveOrder.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        cbAskMoveToGraveOrder.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbAskMoveToGraveOrderActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout main_gameLayout = new javax.swing.GroupLayout(main_game);\n        main_game.setLayout(main_gameLayout);\n        main_gameLayout.setHorizontalGroup(\n            main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_gameLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(cbAllowRequestToShowHandCards, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGroup(main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                        .addComponent(showPlayerNamesPermanently, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(nonLandPermanentsInOnePile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(showAbilityPickerForced, javax.swing.GroupLayout.Alignment.LEADING))\n                    .addComponent(cbShowStormCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(cbConfirmEmptyManaPool, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(cbAskMoveToGraveOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        main_gameLayout.setVerticalGroup(\n            main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_gameLayout.createSequentialGroup()\n                .addComponent(nonLandPermanentsInOnePile)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(showPlayerNamesPermanently)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(showAbilityPickerForced)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbAllowRequestToShowHandCards)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbShowStormCounter)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbConfirmEmptyManaPool)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbAskMoveToGraveOrder)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        nonLandPermanentsInOnePile.getAccessibleContext().setAccessibleName(\"nonLandPermanentsInOnePile\");\n\n        main_gamelog.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Game log\"));\n\n        cbGameLogAutoSave.setSelected(true);\n        cbGameLogAutoSave.setText(\"Auto save game logs     (to \\\"../Mage.Client/gamelogs/\\\" directory)\");\n        cbGameLogAutoSave.setToolTipText(\"The logs of all your games will be saved to the mentioned folder if this option is switched on.\");\n        cbGameLogAutoSave.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbGameLogAutoSaveActionPerformed(evt);\n            }\n        });\n\n        cbDraftLogAutoSave.setSelected(true);\n        cbDraftLogAutoSave.setText(\"Auto save draft logs     (to \\\"../Mage.Client/gamelogs/\\\" directory)\");\n        cbDraftLogAutoSave.setToolTipText(\"The logs of all your games will be saved to the mentioned folder if this option is switched on.\");\n        cbDraftLogAutoSave.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbDraftLogAutoSaveActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout main_gamelogLayout = new javax.swing.GroupLayout(main_gamelog);\n        main_gamelog.setLayout(main_gamelogLayout);\n        main_gamelogLayout.setHorizontalGroup(\n            main_gamelogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_gamelogLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(main_gamelogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(cbGameLogAutoSave, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(cbDraftLogAutoSave, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        main_gamelogLayout.setVerticalGroup(\n            main_gamelogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(main_gamelogLayout.createSequentialGroup()\n                .addComponent(cbGameLogAutoSave)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbDraftLogAutoSave))\n        );\n\n        javax.swing.GroupLayout tabMainLayout = new javax.swing.GroupLayout(tabMain);\n        tabMain.setLayout(tabMainLayout);\n        tabMainLayout.setHorizontalGroup(\n            tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabMainLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(main_card, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(main_game, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(main_gamelog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        tabMainLayout.setVerticalGroup(\n            tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabMainLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(main_card, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(main_game, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(main_gamelog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n\n        main_card.getAccessibleContext().setAccessibleName(\"Game panel\");\n\n        tabsPanel.addTab(\"Main\", tabMain);\n\n        jLabelHeadLine.setText(\"Choose phases your game will stop on:\");\n\n        jLabelYourTurn.setText(\"Your turn\");\n\n        jLabelOpponentsTurn.setText(\"Opponent(s) turn\");\n\n        jLabelUpkeep.setText(\"Upkeep:\");\n\n        jLabelDraw.setText(\"Draw:\");\n\n        jLabelMain1.setText(\"Main:\");\n\n        jLabelBeforeCombat.setText(\"Before combat:\");\n\n        jLabelEndofCombat.setText(\"End of combat:\");\n\n        jLabelMain2.setText(\"Main 2:\");\n\n        jLabelEndOfTurn.setText(\"End of turn:\");\n\n        phases_stopSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Stop settings\"));\n        phases_stopSettings.setLayout(new java.awt.GridLayout(4, 1));\n\n        cbStopAttack.setSelected(true);\n        cbStopAttack.setText(\"Stop on declare attackers step if you skip steps (F4/F5/F7) and attackers are available\");\n        cbStopAttack.setToolTipText(\"If you use F4, F5 or F7 to skip steps, you stop on declare attackers step if attackers are available. If this option is not activated, you also skip the declare attackers step with this actions. F9 does always skip the declare attackers step.\");\n        cbStopAttack.setActionCommand(\"\");\n        cbStopAttack.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbStopAttackActionPerformed(evt);\n            }\n        });\n        phases_stopSettings.add(cbStopAttack);\n\n        cbStopBlock.setText(\"Stop on your declare blockers step also if no blockers available\");\n        cbStopBlock.setToolTipText(\"Also if you have no blockers to declare, the game stops at the declare blockers step.\");\n        cbStopBlock.setActionCommand(\"\");\n        cbStopBlock.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbStopBlockActionPerformed(evt);\n            }\n        });\n        phases_stopSettings.add(cbStopBlock);\n\n        cbStopOnAllMain.setText(\"Skip with F7 to next main phase (if not activated skip always to your next main phase)\");\n        cbStopOnAllMain.setToolTipText(\"If activated F7 skips to next main phases (regardless of the active players).\");\n        cbStopOnAllMain.setActionCommand(\"\");\n        cbStopOnAllMain.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbStopOnAllMainActionPerformed(evt);\n            }\n        });\n        phases_stopSettings.add(cbStopOnAllMain);\n\n        cbStopOnAllEnd.setText(\"Skip with F5 to next end step (if not activated only to end steps of opponents)\");\n        cbStopOnAllEnd.setToolTipText(\"If activated - F5 skips to the next end step (regardless of the current player)\");\n        cbStopOnAllEnd.setActionCommand(\"\");\n        cbStopOnAllEnd.setPreferredSize(new java.awt.Dimension(300, 25));\n        cbStopOnAllEnd.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbStopOnAllEndActionPerformed(evt);\n            }\n        });\n        phases_stopSettings.add(cbStopOnAllEnd);\n\n        javax.swing.GroupLayout tabPhasesLayout = new javax.swing.GroupLayout(tabPhases);\n        tabPhases.setLayout(tabPhasesLayout);\n        tabPhasesLayout.setHorizontalGroup(\n            tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabPhasesLayout.createSequentialGroup()\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                .addGap(20, 20, 20)\n                                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addComponent(jLabelUpkeep)\n                                            .addComponent(jLabelBeforeCombat)\n                                            .addComponent(jLabelEndofCombat)\n                                            .addComponent(jLabelMain2)\n                                            .addComponent(jLabelEndOfTurn))\n                                        .addGap(77, 77, 77)\n                                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                                .addGap(2, 2, 2)\n                                                .addComponent(jLabelYourTurn)\n                                                .addGap(32, 32, 32)\n                                                .addComponent(jLabelOpponentsTurn))\n                                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                                .addGap(13, 13, 13)\n                                                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                                    .addComponent(checkBoxDrawYou)\n                                                    .addComponent(checkBoxUpkeepYou)\n                                                    .addComponent(checkBoxMainYou)\n                                                    .addComponent(checkBoxBeforeCYou)\n                                                    .addComponent(checkBoxEndOfCYou)\n                                                    .addComponent(checkBoxMain2You)\n                                                    .addComponent(checkBoxEndTurnYou))\n                                                .addGap(78, 78, 78)\n                                                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                                    .addComponent(checkBoxUpkeepOthers)\n                                                    .addComponent(checkBoxBeforeCOthers)\n                                                    .addComponent(checkBoxMainOthers)\n                                                    .addComponent(checkBoxEndOfCOthers)\n                                                    .addComponent(checkBoxDrawOthers)\n                                                    .addComponent(checkBoxMain2Others)\n                                                    .addComponent(checkBoxEndTurnOthers)))))\n                                    .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                                        .addComponent(jLabelMain1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                        .addComponent(jLabelDraw, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))\n                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                .addContainerGap()\n                                .addComponent(jLabelHeadLine)))\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(phases_stopSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        tabPhasesLayout.setVerticalGroup(\n            tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabPhasesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addComponent(jLabelOpponentsTurn)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(checkBoxUpkeepOthers))\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addGroup(tabPhasesLayout.createSequentialGroup()\n                                .addComponent(jLabelHeadLine)\n                                .addGap(20, 20, 20))\n                            .addComponent(jLabelYourTurn))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(checkBoxUpkeepYou)\n                            .addComponent(jLabelUpkeep))))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLabelDraw)\n                    .addComponent(checkBoxDrawYou)\n                    .addComponent(checkBoxDrawOthers))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLabelMain1)\n                    .addComponent(checkBoxMainYou)\n                    .addComponent(checkBoxMainOthers))\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabelBeforeCombat, javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(checkBoxBeforeCYou, javax.swing.GroupLayout.Alignment.TRAILING)))\n                    .addGroup(tabPhasesLayout.createSequentialGroup()\n                        .addGap(6, 6, 6)\n                        .addComponent(checkBoxBeforeCOthers)))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLabelEndofCombat)\n                    .addComponent(checkBoxEndOfCYou)\n                    .addComponent(checkBoxEndOfCOthers))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLabelMain2)\n                    .addComponent(checkBoxMain2You)\n                    .addComponent(checkBoxMain2Others))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(checkBoxEndTurnYou)\n                    .addComponent(jLabelEndOfTurn)\n                    .addComponent(checkBoxEndTurnOthers))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(phases_stopSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(45, Short.MAX_VALUE))\n        );\n\n        tabsPanel.addTab(\"Phases\", tabPhases);\n\n        panelCardImages.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Card images:\"));\n\n        cbUseDefaultImageFolder.setText(\"Use default location to save images\");\n        cbUseDefaultImageFolder.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbUseDefaultImageFolderActionPerformed(evt);\n            }\n        });\n\n        txtImageFolderPath.setToolTipText(\"The selected image will be used as background picture. You have to restart MAGE to view a changed background image.\");\n\n        btnBrowseImageLocation.setText(\"Browse...\");\n        btnBrowseImageLocation.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBrowseImageLocationActionPerformed(evt);\n            }\n        });\n\n        cbCheckForNewImages.setText(\"Check for new images on startup\");\n        cbCheckForNewImages.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbCheckForNewImagesActionPerformed(evt);\n            }\n        });\n\n        cbSaveToZipFiles.setText(\"Store images in zip files\");\n        cbSaveToZipFiles.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbSaveToZipFilesActionPerformed(evt);\n            }\n        });\n\n        cbPreferedImageLanguage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" }));\n\n        labelPreferedImageLanguage.setText(\"Prefered image language:\");\n        labelPreferedImageLanguage.setFocusable(false);\n\n        javax.swing.GroupLayout panelCardImagesLayout = new javax.swing.GroupLayout(panelCardImages);\n        panelCardImages.setLayout(panelCardImagesLayout);\n        panelCardImagesLayout.setHorizontalGroup(\n            panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(panelCardImagesLayout.createSequentialGroup()\n                .addGap(24, 24, 24)\n                .addComponent(txtImageFolderPath)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(btnBrowseImageLocation))\n            .addGroup(panelCardImagesLayout.createSequentialGroup()\n                .addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(cbUseDefaultImageFolder)\n                    .addComponent(cbCheckForNewImages)\n                    .addGroup(panelCardImagesLayout.createSequentialGroup()\n                        .addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelCardImagesLayout.createSequentialGroup()\n                                .addContainerGap()\n                                .addComponent(labelPreferedImageLanguage))\n                            .addComponent(cbSaveToZipFiles, javax.swing.GroupLayout.Alignment.LEADING))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(cbPreferedImageLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addGap(0, 0, Short.MAX_VALUE))\n        );\n        panelCardImagesLayout.setVerticalGroup(\n            panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(panelCardImagesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(cbUseDefaultImageFolder)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtImageFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(btnBrowseImageLocation))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cbCheckForNewImages)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(cbSaveToZipFiles)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(cbPreferedImageLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(labelPreferedImageLanguage))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        panelBackgroundImages.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Background images setting:\"));\n\n        cbUseDefaultBackground.setText(\"Use default image\");\n        cbUseDefaultBackground.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbUseDefaultBackgroundActionPerformed(evt);\n            }\n        });\n\n        txtBackgroundImagePath.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtBackgroundImagePathActionPerformed(evt);\n            }\n        });\n\n        btnBrowseBackgroundImage.setText(\"Browse...\");\n        btnBrowseBackgroundImage.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBrowseBackgroundImageActionPerformed(evt);\n            }\n        });\n\n        txtBattlefieldImagePath.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtBattlefieldImagePathActionPerformed(evt);\n            }\n        });\n\n        btnBrowseBattlefieldImage.setText(\"Browse...\");\n        btnBrowseBattlefieldImage.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBrowseBattlefieldImageActionPerformed(evt);\n            }\n        });\n\n        cbUseDefaultBattleImage.setText(\"Use default battlefield image\");\n        cbUseDefaultBattleImage.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbUseDefaultBattleImageActionPerformed(evt);\n            }\n        });\n\n        cbUseRandomBattleImage.setText(\"Select random battlefield image\");\n        cbUseRandomBattleImage.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbUseRandomBattleImageActionPerformed(evt);\n            }\n        });\n\n        jLabel14.setText(\"Background:\");\n\n        jLabel15.setText(\"Battlefield:\");\n\n        javax.swing.GroupLayout panelBackgroundImagesLayout = new javax.swing.GroupLayout(panelBackgroundImages);\n        panelBackgroundImages.setLayout(panelBackgroundImagesLayout);\n        panelBackgroundImagesLayout.setHorizontalGroup(\n            panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                        .addGap(19, 19, 19)\n                        .addComponent(jLabel14))\n                    .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                        .addGap(25, 25, 25)\n                        .addComponent(jLabel15)))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                        .addComponent(txtBattlefieldImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(btnBrowseBattlefieldImage))\n                    .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                        .addComponent(txtBackgroundImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(btnBrowseBackgroundImage)))\n                .addGap(0, 0, Short.MAX_VALUE))\n            .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(cbUseRandomBattleImage)\n                    .addComponent(cbUseDefaultBattleImage)\n                    .addComponent(cbUseDefaultBackground))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        panelBackgroundImagesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtBackgroundImagePath, txtBattlefieldImagePath});\n\n        panelBackgroundImagesLayout.setVerticalGroup(\n            panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(panelBackgroundImagesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(cbUseDefaultBackground)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtBackgroundImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(btnBrowseBackgroundImage)\n                    .addComponent(jLabel14))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cbUseDefaultBattleImage)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cbUseRandomBattleImage)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtBattlefieldImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(btnBrowseBattlefieldImage)\n                    .addComponent(jLabel15)))\n        );\n\n        javax.swing.GroupLayout tabImagesLayout = new javax.swing.GroupLayout(tabImages);\n        tabImages.setLayout(tabImagesLayout);\n        tabImagesLayout.setHorizontalGroup(\n            tabImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabImagesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(panelCardImages, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(panelBackgroundImages, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        tabImagesLayout.setVerticalGroup(\n            tabImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabImagesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(panelCardImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(panelBackgroundImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        tabsPanel.addTab(\"Images\", tabImages);\n\n        sounds_clips.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Clips\"));\n        sounds_clips.setLayout(new java.awt.GridLayout(4, 0));\n\n        cbEnableGameSounds.setText(\"Enable game sounds\");\n        cbEnableGameSounds.setToolTipText(\"Sounds that will be played for certain actions (e.g. play land, attack, etc.) during the game.\");\n        cbEnableGameSounds.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableGameSoundsActionPerformed(evt);\n            }\n        });\n        sounds_clips.add(cbEnableGameSounds);\n\n        cbEnableDraftSounds.setText(\"Enable draft sounds\");\n        cbEnableDraftSounds.setToolTipText(\"Sounds that will be played during drafting for card picking or warining if time runs out.\");\n        cbEnableDraftSounds.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableDraftSoundsActionPerformed(evt);\n            }\n        });\n        sounds_clips.add(cbEnableDraftSounds);\n\n        cbEnableSkipButtonsSounds.setText(\"Enable skip button sounds\");\n        cbEnableSkipButtonsSounds.setToolTipText(\"Sounds that will be played if a priority skip action (F4/F5/F7/F9) or cancel skip action (F3) is used.\");\n        cbEnableSkipButtonsSounds.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableSkipButtonsSoundsActionPerformed(evt);\n            }\n        });\n        sounds_clips.add(cbEnableSkipButtonsSounds);\n\n        cbEnableOtherSounds.setText(\"Enable other sounds\");\n        cbEnableOtherSounds.setToolTipText(\"Sounds that will be played for actions outside of games (e.g. whisper, player joins your game, player submits a deck ...).\");\n        cbEnableOtherSounds.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableOtherSoundsActionPerformed(evt);\n            }\n        });\n        sounds_clips.add(cbEnableOtherSounds);\n\n        sounds_backgroundMusic.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Music\"));\n\n        cbEnableBattlefieldBGM.setText(\"Play music during match\");\n        cbEnableBattlefieldBGM.setToolTipText(\"During your matches music will be played from the seleced folder.\");\n        cbEnableBattlefieldBGM.setActionCommand(\"Play automatically during matches\");\n        cbEnableBattlefieldBGM.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbEnableBattlefieldBGMActionPerformed(evt);\n            }\n        });\n\n        jLabel16.setText(\"Playing from folder:\");\n        jLabel16.setToolTipText(\"\");\n\n        txtBattlefieldIBGMPath.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtBattlefieldIBGMPathActionPerformed(evt);\n            }\n        });\n\n        btnBattlefieldBGMBrowse.setText(\"Browse...\");\n        btnBattlefieldBGMBrowse.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnBattlefieldBGMBrowseActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout sounds_backgroundMusicLayout = new javax.swing.GroupLayout(sounds_backgroundMusic);\n        sounds_backgroundMusic.setLayout(sounds_backgroundMusicLayout);\n        sounds_backgroundMusicLayout.setHorizontalGroup(\n            sounds_backgroundMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(sounds_backgroundMusicLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel16)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(txtBattlefieldIBGMPath)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(btnBattlefieldBGMBrowse))\n            .addGroup(sounds_backgroundMusicLayout.createSequentialGroup()\n                .addComponent(cbEnableBattlefieldBGM)\n                .addGap(0, 0, Short.MAX_VALUE))\n        );\n        sounds_backgroundMusicLayout.setVerticalGroup(\n            sounds_backgroundMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(sounds_backgroundMusicLayout.createSequentialGroup()\n                .addComponent(cbEnableBattlefieldBGM)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(sounds_backgroundMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtBattlefieldIBGMPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(btnBattlefieldBGMBrowse)\n                    .addComponent(jLabel16)))\n        );\n\n        javax.swing.GroupLayout tabSoundsLayout = new javax.swing.GroupLayout(tabSounds);\n        tabSounds.setLayout(tabSoundsLayout);\n        tabSoundsLayout.setHorizontalGroup(\n            tabSoundsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabSoundsLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabSoundsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(sounds_clips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(sounds_backgroundMusic, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        tabSoundsLayout.setVerticalGroup(\n            tabSoundsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabSoundsLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(sounds_clips, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(sounds_backgroundMusic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        sounds_clips.getAccessibleContext().setAccessibleDescription(\"\");\n\n        tabsPanel.addTab(\"Sounds\", tabSounds);\n\n        jLabel12.setFont(new java.awt.Font(\"Tahoma\", 1, 11)); // NOI18N\n        jLabel12.setText(\"Choose your avatar:\");\n\n        jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);\n        jPanel10.setLayout(jPanel10Layout);\n        jPanel10Layout.setHorizontalGroup(\n            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel10Layout.setVerticalGroup(\n            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);\n        jPanel13.setLayout(jPanel13Layout);\n        jPanel13Layout.setHorizontalGroup(\n            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel13Layout.setVerticalGroup(\n            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);\n        jPanel11.setLayout(jPanel11Layout);\n        jPanel11Layout.setHorizontalGroup(\n            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel11Layout.setVerticalGroup(\n            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);\n        jPanel12.setLayout(jPanel12Layout);\n        jPanel12Layout.setHorizontalGroup(\n            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel12Layout.setVerticalGroup(\n            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);\n        jPanel14.setLayout(jPanel14Layout);\n        jPanel14Layout.setHorizontalGroup(\n            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel14Layout.setVerticalGroup(\n            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);\n        jPanel15.setLayout(jPanel15Layout);\n        jPanel15Layout.setHorizontalGroup(\n            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel15Layout.setVerticalGroup(\n            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jLabel13.setFont(new java.awt.Font(\"Tahoma\", 1, 11)); // NOI18N\n        jLabel13.setText(\"New avatars:\");\n\n        jPanel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);\n        jPanel16.setLayout(jPanel16Layout);\n        jPanel16Layout.setHorizontalGroup(\n            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel16Layout.setVerticalGroup(\n            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);\n        jPanel17.setLayout(jPanel17Layout);\n        jPanel17Layout.setHorizontalGroup(\n            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel17Layout.setVerticalGroup(\n            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);\n        jPanel18.setLayout(jPanel18Layout);\n        jPanel18Layout.setHorizontalGroup(\n            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel18Layout.setVerticalGroup(\n            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel19.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);\n        jPanel19.setLayout(jPanel19Layout);\n        jPanel19Layout.setHorizontalGroup(\n            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel19Layout.setVerticalGroup(\n            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel20.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);\n        jPanel20.setLayout(jPanel20Layout);\n        jPanel20Layout.setHorizontalGroup(\n            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel20Layout.setVerticalGroup(\n            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        jPanel21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));\n\n        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);\n        jPanel21.setLayout(jPanel21Layout);\n        jPanel21Layout.setHorizontalGroup(\n            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n        jPanel21Layout.setVerticalGroup(\n            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 100, Short.MAX_VALUE)\n        );\n\n        javax.swing.GroupLayout avatarPanelLayout = new javax.swing.GroupLayout(avatarPanel);\n        avatarPanel.setLayout(avatarPanelLayout);\n        avatarPanelLayout.setHorizontalGroup(\n            avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(avatarPanelLayout.createSequentialGroup()\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(avatarPanelLayout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(jLabel12))\n                    .addGroup(avatarPanelLayout.createSequentialGroup()\n                        .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(avatarPanelLayout.createSequentialGroup()\n                                .addGap(30, 30, 30)\n                                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(jPanel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                .addGap(33, 33, 33)\n                                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                            .addGroup(avatarPanelLayout.createSequentialGroup()\n                                .addContainerGap()\n                                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(avatarPanelLayout.createSequentialGroup()\n                                        .addGap(20, 20, 20)\n                                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addGap(33, 33, 33)\n                                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                    .addComponent(jLabel13))))\n                        .addGap(32, 32, 32)\n                        .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        avatarPanelLayout.setVerticalGroup(\n            avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(avatarPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel12)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(26, 26, 26)\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(23, 23, 23)\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(avatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addGroup(avatarPanelLayout.createSequentialGroup()\n                        .addComponent(jLabel13)\n                        .addGap(18, 18, 18)\n                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(25, 25, 25))\n        );\n\n        avatarPane.setViewportView(avatarPanel);\n\n        javax.swing.GroupLayout tabAvatarsLayout = new javax.swing.GroupLayout(tabAvatars);\n        tabAvatars.setLayout(tabAvatarsLayout);\n        tabAvatarsLayout.setHorizontalGroup(\n            tabAvatarsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(avatarPane, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)\n        );\n        tabAvatarsLayout.setVerticalGroup(\n            tabAvatarsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(avatarPane, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)\n        );\n\n        tabsPanel.addTab(\"Avatars\", tabAvatars);\n\n        lblProxyType.setText(\"Proxy:\");\n\n        cbProxyType.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cbProxyTypeActionPerformed(evt);\n            }\n        });\n\n        pnlProxySettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        lblProxyServer.setText(\"Server:\");\n\n        lblProxyPort.setText(\"Port:\");\n\n        txtProxyPort.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                txtProxyPortkeyTyped(evt);\n            }\n        });\n\n        lblProxyUserName.setText(\"User Name:\");\n\n        lblProxyPassword.setText(\"Password:\");\n\n        txtPasswordField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txtPasswordFieldActionPerformed(evt);\n            }\n        });\n\n        rememberPswd.setText(\"Remember Password\");\n        rememberPswd.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                rememberPswdActionPerformed(evt);\n            }\n        });\n\n        jLabel11.setFont(new java.awt.Font(\"Tahoma\", 2, 10)); // NOI18N\n        jLabel11.setText(\"Note: password won't be encrypted!\");\n\n        javax.swing.GroupLayout pnlProxyLayout = new javax.swing.GroupLayout(pnlProxy);\n        pnlProxy.setLayout(pnlProxyLayout);\n        pnlProxyLayout.setHorizontalGroup(\n            pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlProxyLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(pnlProxyLayout.createSequentialGroup()\n                        .addComponent(rememberPswd)\n                        .addGap(47, 47, 47)\n                        .addComponent(jLabel11)\n                        .addGap(34, 34, 34))\n                    .addGroup(pnlProxyLayout.createSequentialGroup()\n                        .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(lblProxyPort)\n                            .addComponent(lblProxyPassword)\n                            .addComponent(lblProxyServer)\n                            .addComponent(lblProxyUserName))\n                        .addGap(19, 19, 19)\n                        .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(txtProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                                .addComponent(txtPasswordField, javax.swing.GroupLayout.Alignment.LEADING)\n                                .addComponent(txtProxyUserName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addComponent(txtProxyServer))\n                        .addContainerGap())))\n        );\n        pnlProxyLayout.setVerticalGroup(\n            pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlProxyLayout.createSequentialGroup()\n                .addGap(6, 6, 6)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtProxyServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(lblProxyServer))\n                .addGap(8, 8, 8)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(lblProxyPort)\n                    .addComponent(txtProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtProxyUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(lblProxyUserName))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(txtPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(lblProxyPassword))\n                .addGap(18, 18, 18)\n                .addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(rememberPswd)\n                    .addComponent(jLabel11))\n                .addContainerGap(25, Short.MAX_VALUE))\n        );\n\n        javax.swing.GroupLayout pnlProxySettingsLayout = new javax.swing.GroupLayout(pnlProxySettings);\n        pnlProxySettings.setLayout(pnlProxySettingsLayout);\n        pnlProxySettingsLayout.setHorizontalGroup(\n            pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlProxySettingsLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(pnlProxy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n        pnlProxySettingsLayout.setVerticalGroup(\n            pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlProxySettingsLayout.createSequentialGroup()\n                .addComponent(pnlProxy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n\n        connection_servers.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), \"Servers\"));\n\n        lblURLServerList.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n        lblURLServerList.setText(\"URL server list:\");\n        lblURLServerList.setToolTipText(\"\");\n        lblURLServerList.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);\n        lblURLServerList.setPreferredSize(new java.awt.Dimension(110, 16));\n        lblURLServerList.setVerticalTextPosition(javax.swing.SwingConstants.TOP);\n\n        txtURLServerList.setToolTipText(\"The URL XMage tries to read a server list from.\");\n        txtURLServerList.setPreferredSize(new java.awt.Dimension(300, 22));\n\n        jLabel17.setFont(new java.awt.Font(\"Tahoma\", 2, 10)); // NOI18N\n        jLabel17.setText(\"e.g.: http://XMage.de/files/server-list.txt\");\n\n        javax.swing.GroupLayout connection_serversLayout = new javax.swing.GroupLayout(connection_servers);\n        connection_servers.setLayout(connection_serversLayout);\n        connection_serversLayout.setHorizontalGroup(\n            connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(connection_serversLayout.createSequentialGroup()\n                .addGroup(connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(connection_serversLayout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(lblURLServerList, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(txtURLServerList, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGroup(connection_serversLayout.createSequentialGroup()\n                        .addGap(141, 141, 141)\n                        .addComponent(jLabel17)))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        connection_serversLayout.setVerticalGroup(\n            connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(connection_serversLayout.createSequentialGroup()\n                .addGroup(connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                    .addComponent(lblURLServerList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(txtURLServerList, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel17))\n        );\n\n        javax.swing.GroupLayout tabConnectionLayout = new javax.swing.GroupLayout(tabConnection);\n        tabConnection.setLayout(tabConnectionLayout);\n        tabConnectionLayout.setHorizontalGroup(\n            tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabConnectionLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(tabConnectionLayout.createSequentialGroup()\n                        .addComponent(lblProxyType)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(cbProxyType, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(pnlProxySettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(connection_servers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        tabConnectionLayout.setVerticalGroup(\n            tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(tabConnectionLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(connection_servers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(lblProxyType)\n                    .addComponent(cbProxyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addComponent(pnlProxySettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(90, Short.MAX_VALUE))\n        );\n\n        pnlProxySettings.getAccessibleContext().setAccessibleDescription(\"\");\n\n        tabsPanel.addTab(\"Connection\", tabConnection);\n\n        saveButton.setLabel(\"Save\");\n        saveButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);\n        saveButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                saveButtonActionPerformed(evt);\n            }\n        });\n\n        exitButton.setLabel(\"Exit\");\n        exitButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);\n        exitButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                exitButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(saveButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n            .addComponent(tabsPanel)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(tabsPanel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(exitButton)\n                    .addComponent(saveButton))\n                .addContainerGap())\n        );\n\n        pack();\n    }","commit_id":"54c1e4f66c7bece6a4d2d142b1bed2b0c850fa32","url":"https://github.com/magefree/mage"},{"original_method":"private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed\n        Preferences prefs = MageFrame.getPreferences();\n\n        // main\n        save(prefs, dialog.displayBigCardsInHand, KEY_HAND_USE_BIG_CARDS, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.showToolTipsInAnyZone, KEY_SHOW_TOOLTIPS_ANY_ZONE, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.showCardName, KEY_SHOW_CARD_NAMES, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.nonLandPermanentsInOnePile, KEY_PERMANENTS_IN_ONE_PILE, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.showPlayerNamesPermanently, KEY_SHOW_PLAYER_NAMES_PERMANENTLY, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.showAbilityPickerForced, KEY_SHOW_ABILITY_PICKER_FORCED, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbAllowRequestToShowHandCards, KEY_GAME_ALLOW_REQUEST_SHOW_HAND_CARDS, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbShowStormCounter, KEY_GAME_SHOW_STORM_COUNTER, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbConfirmEmptyManaPool, KEY_GAME_CONFIRM_EMPTY_MANA_POOL, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbAskMoveToGraveOrder, KEY_GAME_ASK_MOVE_TO_GRAVE_ORDER, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbGameLogAutoSave, KEY_GAME_LOG_AUTO_SAVE, \"true\", \"false\", UPDATE_CACHE_POLICY);\n\n        // Phases\n        save(prefs, dialog.checkBoxUpkeepYou, UPKEEP_YOU);\n        save(prefs, dialog.checkBoxDrawYou, DRAW_YOU);\n        save(prefs, dialog.checkBoxMainYou, MAIN_YOU);\n        save(prefs, dialog.checkBoxBeforeCYou, BEFORE_COMBAT_YOU);\n        save(prefs, dialog.checkBoxEndOfCYou, END_OF_COMBAT_YOU);\n        save(prefs, dialog.checkBoxMain2You, MAIN_2_YOU);\n        save(prefs, dialog.checkBoxEndTurnYou, END_OF_TURN_YOU);\n\n        save(prefs, dialog.checkBoxUpkeepOthers, UPKEEP_OTHERS);\n        save(prefs, dialog.checkBoxDrawOthers, DRAW_OTHERS);\n        save(prefs, dialog.checkBoxMainOthers, MAIN_OTHERS);\n        save(prefs, dialog.checkBoxBeforeCOthers, BEFORE_COMBAT_OTHERS);\n        save(prefs, dialog.checkBoxEndOfCOthers, END_OF_COMBAT_OTHERS);\n        save(prefs, dialog.checkBoxMain2Others, MAIN_2_OTHERS);\n        save(prefs, dialog.checkBoxEndTurnOthers, END_OF_TURN_OTHERS);\n\n        save(prefs, dialog.cbStopAttack, KEY_STOP_ATTACK, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbStopBlock, KEY_STOP_BLOCK, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbStopOnAllMain, KEY_STOP_ALL_MAIN_PHASES, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbStopOnAllEnd, KEY_STOP_ALL_END_PHASES, \"true\", \"false\", UPDATE_CACHE_POLICY);\n\n        // images\n        save(prefs, dialog.cbUseDefaultImageFolder, KEY_CARD_IMAGES_USE_DEFAULT, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        saveImagesPath(prefs);\n        save(prefs, dialog.cbCheckForNewImages, KEY_CARD_IMAGES_CHECK, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbSaveToZipFiles, KEY_CARD_IMAGES_SAVE_TO_ZIP, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbPreferedImageLanguage, KEY_CARD_IMAGES_PREF_LANGUAGE);\n\n        save(prefs, dialog.cbUseDefaultBackground, KEY_BACKGROUND_IMAGE_DEFAULT, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbUseDefaultBattleImage, KEY_BATTLEFIELD_IMAGE_DEFAULT, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbUseRandomBattleImage, KEY_BATTLEFIELD_IMAGE_RANDOM, \"true\", \"false\", UPDATE_CACHE_POLICY);\n\n        // sounds\n        save(prefs, dialog.cbEnableGameSounds, KEY_SOUNDS_GAME_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbEnableDraftSounds, KEY_SOUNDS_DRAFT_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbEnableSkipButtonsSounds, KEY_SOUNDS_SKIP_BUTTONS_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbEnableOtherSounds, KEY_SOUNDS_OTHER_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbEnableBattlefieldBGM, KEY_SOUNDS_MATCH_MUSIC_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        saveSoundPath(prefs);\n\n        // connection\n        save(prefs, dialog.cbProxyType, KEY_PROXY_TYPE);\n        save(prefs, dialog.txtProxyServer, KEY_PROXY_ADDRESS);\n        save(prefs, dialog.txtProxyPort, KEY_PROXY_PORT);\n        save(prefs, dialog.txtProxyUserName, KEY_PROXY_USERNAME);\n        save(prefs, dialog.rememberPswd, KEY_PROXY_REMEMBER, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        if (dialog.rememberPswd.isSelected()) {\n            char[] input = txtPasswordField.getPassword();\n            prefs.put(KEY_PROXY_PSWD, new String(input));\n        }\n        save(prefs, dialog.txtURLServerList, KEY_CONNECTION_URL_SERVER_LIST);\n\n        // Avatar\n        if (available_avatars.contains(selectedAvatarId)) {\n            prefs.put(KEY_AVATAR, String.valueOf(selectedAvatarId));\n            updateCache(KEY_AVATAR, String.valueOf(selectedAvatarId));\n        }\n\n        try {\n            MageFrame.getSession().updatePreferencesForServer(getUserData());\n\n            prefs.flush();\n        } catch (BackingStoreException ex) {\n            ex.printStackTrace();\n            JOptionPane.showMessageDialog(null, \"Error: couldn't save preferences. Please try once again.\");\n        }\n\n        dialog.setVisible(false);\n    }","id":12479,"modified_method":"private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed\n        Preferences prefs = MageFrame.getPreferences();\n\n        // main\n        save(prefs, dialog.displayBigCardsInHand, KEY_HAND_USE_BIG_CARDS, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.showToolTipsInAnyZone, KEY_SHOW_TOOLTIPS_ANY_ZONE, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.showCardName, KEY_SHOW_CARD_NAMES, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.nonLandPermanentsInOnePile, KEY_PERMANENTS_IN_ONE_PILE, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.showPlayerNamesPermanently, KEY_SHOW_PLAYER_NAMES_PERMANENTLY, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.showAbilityPickerForced, KEY_SHOW_ABILITY_PICKER_FORCED, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbAllowRequestToShowHandCards, KEY_GAME_ALLOW_REQUEST_SHOW_HAND_CARDS, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbShowStormCounter, KEY_GAME_SHOW_STORM_COUNTER, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbConfirmEmptyManaPool, KEY_GAME_CONFIRM_EMPTY_MANA_POOL, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbAskMoveToGraveOrder, KEY_GAME_ASK_MOVE_TO_GRAVE_ORDER, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbGameLogAutoSave, KEY_GAME_LOG_AUTO_SAVE, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbDraftLogAutoSave, KEY_DRAFT_LOG_AUTO_SAVE, \"true\", \"false\", UPDATE_CACHE_POLICY);\n\n        // Phases\n        save(prefs, dialog.checkBoxUpkeepYou, UPKEEP_YOU);\n        save(prefs, dialog.checkBoxDrawYou, DRAW_YOU);\n        save(prefs, dialog.checkBoxMainYou, MAIN_YOU);\n        save(prefs, dialog.checkBoxBeforeCYou, BEFORE_COMBAT_YOU);\n        save(prefs, dialog.checkBoxEndOfCYou, END_OF_COMBAT_YOU);\n        save(prefs, dialog.checkBoxMain2You, MAIN_2_YOU);\n        save(prefs, dialog.checkBoxEndTurnYou, END_OF_TURN_YOU);\n\n        save(prefs, dialog.checkBoxUpkeepOthers, UPKEEP_OTHERS);\n        save(prefs, dialog.checkBoxDrawOthers, DRAW_OTHERS);\n        save(prefs, dialog.checkBoxMainOthers, MAIN_OTHERS);\n        save(prefs, dialog.checkBoxBeforeCOthers, BEFORE_COMBAT_OTHERS);\n        save(prefs, dialog.checkBoxEndOfCOthers, END_OF_COMBAT_OTHERS);\n        save(prefs, dialog.checkBoxMain2Others, MAIN_2_OTHERS);\n        save(prefs, dialog.checkBoxEndTurnOthers, END_OF_TURN_OTHERS);\n\n        save(prefs, dialog.cbStopAttack, KEY_STOP_ATTACK, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbStopBlock, KEY_STOP_BLOCK, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbStopOnAllMain, KEY_STOP_ALL_MAIN_PHASES, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbStopOnAllEnd, KEY_STOP_ALL_END_PHASES, \"true\", \"false\", UPDATE_CACHE_POLICY);\n\n        // images\n        save(prefs, dialog.cbUseDefaultImageFolder, KEY_CARD_IMAGES_USE_DEFAULT, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        saveImagesPath(prefs);\n        save(prefs, dialog.cbCheckForNewImages, KEY_CARD_IMAGES_CHECK, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbSaveToZipFiles, KEY_CARD_IMAGES_SAVE_TO_ZIP, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbPreferedImageLanguage, KEY_CARD_IMAGES_PREF_LANGUAGE);\n\n        save(prefs, dialog.cbUseDefaultBackground, KEY_BACKGROUND_IMAGE_DEFAULT, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbUseDefaultBattleImage, KEY_BATTLEFIELD_IMAGE_DEFAULT, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbUseRandomBattleImage, KEY_BATTLEFIELD_IMAGE_RANDOM, \"true\", \"false\", UPDATE_CACHE_POLICY);\n\n        // sounds\n        save(prefs, dialog.cbEnableGameSounds, KEY_SOUNDS_GAME_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbEnableDraftSounds, KEY_SOUNDS_DRAFT_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbEnableSkipButtonsSounds, KEY_SOUNDS_SKIP_BUTTONS_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbEnableOtherSounds, KEY_SOUNDS_OTHER_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        save(prefs, dialog.cbEnableBattlefieldBGM, KEY_SOUNDS_MATCH_MUSIC_ON, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        saveSoundPath(prefs);\n\n        // connection\n        save(prefs, dialog.cbProxyType, KEY_PROXY_TYPE);\n        save(prefs, dialog.txtProxyServer, KEY_PROXY_ADDRESS);\n        save(prefs, dialog.txtProxyPort, KEY_PROXY_PORT);\n        save(prefs, dialog.txtProxyUserName, KEY_PROXY_USERNAME);\n        save(prefs, dialog.rememberPswd, KEY_PROXY_REMEMBER, \"true\", \"false\", UPDATE_CACHE_POLICY);\n        if (dialog.rememberPswd.isSelected()) {\n            char[] input = txtPasswordField.getPassword();\n            prefs.put(KEY_PROXY_PSWD, new String(input));\n        }\n        save(prefs, dialog.txtURLServerList, KEY_CONNECTION_URL_SERVER_LIST);\n\n        // Avatar\n        if (available_avatars.contains(selectedAvatarId)) {\n            prefs.put(KEY_AVATAR, String.valueOf(selectedAvatarId));\n            updateCache(KEY_AVATAR, String.valueOf(selectedAvatarId));\n        }\n\n        try {\n            MageFrame.getSession().updatePreferencesForServer(getUserData());\n\n            prefs.flush();\n        } catch (BackingStoreException ex) {\n            ex.printStackTrace();\n            JOptionPane.showMessageDialog(null, \"Error: couldn't save preferences. Please try once again.\");\n        }\n\n        dialog.setVisible(false);\n    }","commit_id":"54c1e4f66c7bece6a4d2d142b1bed2b0c850fa32","url":"https://github.com/magefree/mage"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel1 = new javax.swing.JLabel();\n\n        addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent evt) {\n                closeDialog(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TimelineProgressDialog.class, \"TimelineProgressDialog.jLabel1.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(51, 51, 51)\n                .addComponent(jLabel1)\n                .addContainerGap(131, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(37, 37, 37)\n                .addComponent(jLabel1)\n                .addContainerGap(64, Short.MAX_VALUE))\n        );\n\n        pack();\n    }","id":12480,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel1 = new javax.swing.JLabel();\n        progressBar = new javax.swing.JProgressBar();\n\n        addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent evt) {\n                closeDialog(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TimelineProgressDialog.class, \"TimelineProgressDialog.jLabel1.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jLabel1)\n                        .addGap(0, 0, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(17, 17, 17)\n                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jLabel1)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        pack();\n    }","commit_id":"db89cc5d439a00e4f161a6d16cadc9ee667a1e52","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Creates new form TimelineProgressDialog\n     */\n    public TimelineProgressDialog(java.awt.Frame parent, boolean modal) {\n        super(parent, modal);\n        initComponents();\n        \n        setLocationRelativeTo(null);\n        //set icon the same as main app\n        setIconImage(WindowManager.getDefault().getMainWindow().getIconImage());\n\n        // Close the dialog when Esc is pressed\n        String cancelName = \"cancel\";\n        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\n        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);\n        ActionMap actionMap = getRootPane().getActionMap();\n        actionMap.put(cancelName, new AbstractAction() {\n            public void actionPerformed(ActionEvent e) {\n                doClose(RET_CANCEL);\n            }\n        });\n    }","id":12481,"modified_method":"/**\n     * Creates new form TimelineProgressDialog\n     */\n    public TimelineProgressDialog(java.awt.Frame parent, boolean modal) {\n        super(parent, modal);\n        initComponents();\n        \n        setLocationRelativeTo(null);\n        //set icon the same as main app\n        setIconImage(WindowManager.getDefault().getMainWindow().getIconImage());\n        \n        progressBar.setIndeterminate(true);\n\n        // Close the dialog when Esc is pressed\n        String cancelName = \"cancel\";\n        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\n        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);\n        ActionMap actionMap = getRootPane().getActionMap();\n        actionMap.put(cancelName, new AbstractAction() {\n            public void actionPerformed(ActionEvent e) {\n                doClose(RET_CANCEL);\n            }\n        });\n    }","commit_id":"db89cc5d439a00e4f161a6d16cadc9ee667a1e52","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public void renderXML (DocumentHandler out) throws PortalException\n  {\n    String fullName = (String)staticData.getPerson().getFullName();\n    Document doc = new org.apache.xerces.dom.DocumentImpl();\n\n    // Create <login-status> element\n    Element loginStatusElement = doc.createElement(\"login-status\");\n\n    if (bSecurityError)\n    {\n      // Create <error> element under <login-status>\n      Element errorElement = doc.createElement(\"error\");\n      loginStatusElement.appendChild(errorElement);\n    }\n    else if (bAuthorizationAttemptFailed && !bAuthenticated)\n    {\n      // Create <failure> element under <login-status>\n      Element failureElement = doc.createElement(\"failure\");\n      failureElement.setAttribute(\"attemptedUserName\", attemptedUserName);\n      loginStatusElement.appendChild(failureElement);\n    }\n    else if (fullName != null)\n    {\n      // Create <full-name> element under <header>\n      Element fullNameElement = doc.createElement(\"full-name\");\n      fullNameElement.appendChild(doc.createTextNode(fullName));\n      loginStatusElement.appendChild(fullNameElement);\n    }\n\n    doc.appendChild(loginStatusElement);\n\n    Hashtable params = new Hashtable(2);\n    params.put(\"baseActionURL\", runtimeData.getBaseActionURL());\n    if (fullName != null && fullName.equals(\"Guest\"))\n      params.put(\"guest\", \"true\");\n\n    try\n    {\n      XSLT.transform(doc, new URL(UtilitiesBean.fixURI(sslLocation)), out, params, runtimeData.getBrowserInfo());\n    }\n    catch (Exception e)\n    {\n      throw new GeneralRenderingException(e.getMessage());\n    }\n  }","id":12482,"modified_method":"public void renderXML (DocumentHandler out) throws PortalException\n  {\n    String fullName = (String)staticData.getPerson().getFullName();\n    Document doc = new org.apache.xerces.dom.DocumentImpl();\n\n    // Create <login-status> element\n    Element loginStatusElement = doc.createElement(\"login-status\");\n\n    if (bSecurityError)\n    {\n      // Create <error> element under <login-status>\n      Element errorElement = doc.createElement(\"error\");\n      loginStatusElement.appendChild(errorElement);\n    }\n    else if (bAuthorizationAttemptFailed && !bAuthenticated)\n    {\n      // Create <failure> element under <login-status>\n      Element failureElement = doc.createElement(\"failure\");\n      failureElement.setAttribute(\"attemptedUserName\", attemptedUserName);\n      loginStatusElement.appendChild(failureElement);\n    }\n    else if (fullName != null)\n    {\n      // Create <full-name> element under <header>\n      Element fullNameElement = doc.createElement(\"full-name\");\n      fullNameElement.appendChild(doc.createTextNode(fullName));\n      loginStatusElement.appendChild(fullNameElement);\n    }\n\n    doc.appendChild(loginStatusElement);\n    \n    try\n    {\n      XSLT xslt = new XSLT();\n      xslt.setXML(doc);\n      xslt.setSSL(sslLocation, runtimeData.getBrowserInfo());\n      xslt.setTarget(out);\n      xslt.setStylesheetParameter(\"baseActionURL\", runtimeData.getBaseActionURL());\n      if (fullName != null && fullName.equals(\"Guest\"))\n        xslt.setStylesheetParameter(\"guest\", \"true\");            \n      xslt.transform();\n    }\n    catch (Exception e)\n    {\n      throw new GeneralRenderingException(e.getMessage());\n    }\n  }","commit_id":"e592382bfc9e343093a872d437c889956d2b25e8","url":"https://github.com/Jasig/uPortal"},{"original_method":"private void localRenderXML(DocumentHandler out) {\n        // note: this method should be made very robust. Optimally, it should\n        // not rely on XSLT to do the job. That means that mime-type dependent\n        // output should be generated directly within the method.\n        // For now, we'll just do it the usual way.\n\n\n        // XML of the following type is generated:\n        // <error code=\"$errorID\">\n        //  <message>$message<\/messag>\n        //  <channel>\n        //   <id>$channelID<\/id>\n        //   <name>$channelName<\/name>\n        //  <\/channel>\n        //  <exception code=\"N\">\n        //   <resource><uri/><description/><\/resource>\n        //   <timeout value=\"N\"/>\n        //  <\/exception>\n        // <\/error>\n        //\n        // Note that only two exceptions have detailed elements associated with them.\n        // In the future, if the information within exceptions is expanded, it should be\n        // placed into this XML for the CError UI to give user a proper feedback.\n\n        Document doc = new org.apache.xerces.dom.DocumentImpl();\n        Element errorEl=doc.createElement(\"error\");\n        errorEl.setAttribute(\"code\",Integer.toString(errorID));\n        if(str_message!=null) {\n            Element messageEl=doc.createElement(\"message\");\n            messageEl.appendChild(doc.createTextNode(str_message));\n            errorEl.appendChild(messageEl);\n        }\n\n        if(str_channelID!=null) {\n            Element channelEl=doc.createElement(\"channel\");\n            Element idEl=doc.createElement(\"id\");\n            idEl.appendChild(doc.createTextNode(str_channelID));\n            channelEl.appendChild(idEl);\n\n            // determine channel name\n            if(portcs!=null) {\n                String chName=(portcs.getUserLayoutManager()).getNodeName(str_channelID);\n                if(chName!=null) {\n                    Element nameEl=doc.createElement(\"name\");\n                    nameEl.appendChild(doc.createTextNode(chName));\n                    channelEl.appendChild(nameEl);\n                }\n                errorEl.appendChild(channelEl);\n            }\n        }\n\n        // if the exception has been generated\n        if(channelException!=null) {\n            Element excEl=doc.createElement(\"exception\");\n            String m;\n            if((m=channelException.getMessage())!=null) {\n                Element emEl=doc.createElement(\"message\");\n                emEl.appendChild(doc.createTextNode(m));\n                excEl.appendChild(emEl);\n            }\n\n            Element stEl=doc.createElement(\"stack\");\n            java.io.StringWriter sw=new java.io.StringWriter();\n            channelException.printStackTrace(new java.io.PrintWriter(sw));\n            sw.flush();\n            stEl.appendChild(doc.createTextNode(sw.toString()));\n            excEl.appendChild(stEl);\n\n\n            if(channelException instanceof PortalException) {\n                PortalException pe=(PortalException) channelException;\n                // the Error channel has been invoked as a result of some other\n                // channel throwing a PortalException.\n\n                // determine which type of an exception is it\n                excEl.setAttribute(\"code\",Integer.toString(pe.getExceptionCode()));\n\n                // now specific cases for exceptions containing additional information\n                if(pe instanceof ResourceMissingException) {\n                    ResourceMissingException rme=(ResourceMissingException) pe;\n                    Element resourceEl=doc.createElement(\"resource\");\n                    Element uriEl=doc.createElement(\"uri\");\n                    uriEl.appendChild(doc.createTextNode(rme.getResourceURI()));\n                    resourceEl.appendChild(uriEl);\n                    Element descriptionEl=doc.createElement(\"description\");\n                    descriptionEl.appendChild(doc.createTextNode(rme.getResourceDescription()));\n                    resourceEl.appendChild(descriptionEl);\n                    excEl.appendChild(resourceEl);\n                } else if(pe instanceof InternalTimeoutException) {\n                    Long v=((InternalTimeoutException)pe).getTimeoutValue();\n                    if(v!=null) {\n                        Element timeoutEl=doc.createElement(\"timeout\");\n                        timeoutEl.setAttribute(\"value\",v.toString());\n                    }\n                }\n            } else {\n                // runtime exception generated by the channel\n                excEl.setAttribute(\"code\",\"-1\");\n            }\n            errorEl.appendChild(excEl);\n        }\n        doc.appendChild(errorEl);\n\n        // figure out if we allow for refresh/reload\n        String allowRef=\"true\";\n        String allowRel=\"true\";\n        if(str_channelID==null) {\n            allowRel=allowRef=\"false\";\n        } else {\n            if(channelException!=null && (channelException instanceof PortalException)) {\n                if(errorID==SET_STATIC_DATA_EXCEPTION || !((PortalException)channelException).allowRefresh())\n                    allowRef=\"false\";\n                if(!((PortalException)channelException).allowReinstantiation())\n                    allowRel=\"false\";\n            }\n        }\n\n        // debug block\n        try {\n            java.io.StringWriter outString = new java.io.StringWriter ();\n            org.apache.xml.serialize.OutputFormat format=new org.apache.xml.serialize.OutputFormat();\n            format.setOmitXMLDeclaration(true);\n            format.setIndenting(true);\n            org.apache.xml.serialize.XMLSerializer xsl = new org.apache.xml.serialize.XMLSerializer (outString,format);\n            xsl.serialize (doc);\n            LogService.instance().log(LogService.DEBUG,outString.toString());\n        } catch (Exception e) {\n            LogService.instance().log(LogService.DEBUG,e);\n        }\n        // end of debug block\n\n        try {\n            Hashtable stylesheetParams = new Hashtable(4);\n            stylesheetParams.put(\"baseActionURL\", runtimeData.getBaseActionURL());\n            stylesheetParams.put(\"showStackTrace\", new Boolean(showStackTrace).toString());\n            stylesheetParams.put(\"allowRefresh\", allowRef);\n            stylesheetParams.put(\"allowReinstantiation\", allowRel);\n            XSLT.transform(doc, new URL(sslLocation), out, stylesheetParams, runtimeData.getBrowserInfo());\n            \n/*            XSLTInputSource xmlSource = new XSLTInputSource (doc);\n            XSLTInputSource xslSource = set.getStylesheet(portcs.getHttpServletRequest());\n            if(xslSource==null) {\n                // some meaningful error-tolerant output should be generated here.\n                LogService.instance().log(LogService.ERROR,\"CError::renderXML() : unable to locate a stylesheet\");\n            } else {\n                XSLTResultTarget xmlResult = new XSLTResultTarget(out);\n                XSLTProcessor processor = XSLTProcessorFactory.getProcessor (new org.apache.xalan.xpath.xdom.XercesLiaison ());\n                if(runtimeData!=null) {\n                    processor.setStylesheetParam(\"baseActionURL\", processor.createXString (runtimeData.getBaseActionURL()));\n                    processor.setStylesheetParam(\"showStackTrace\", processor.createXString ((new Boolean(showStackTrace)).toString()));\n                    processor.setStylesheetParam(\"allowRefresh\", processor.createXString (allowRef));\n                    processor.setStylesheetParam(\"allowReinstantiation\", processor.createXString (allowRel));\n                }\n\n                processor.process (xmlSource, xslSource, xmlResult);\n            }\n */\n        } catch (Exception e) { \n            LogService.instance().log(LogService.ERROR,\"CError::renderXML() : things are bad. Error channel threw: \"+e); \n        }\n    }","id":12483,"modified_method":"private void localRenderXML(DocumentHandler out) {\n        // note: this method should be made very robust. Optimally, it should\n        // not rely on XSLT to do the job. That means that mime-type dependent\n        // output should be generated directly within the method.\n        // For now, we'll just do it the usual way.\n\n\n        // XML of the following type is generated:\n        // <error code=\"$errorID\">\n        //  <message>$message<\/messag>\n        //  <channel>\n        //   <id>$channelID<\/id>\n        //   <name>$channelName<\/name>\n        //  <\/channel>\n        //  <exception code=\"N\">\n        //   <resource><uri/><description/><\/resource>\n        //   <timeout value=\"N\"/>\n        //  <\/exception>\n        // <\/error>\n        //\n        // Note that only two exceptions have detailed elements associated with them.\n        // In the future, if the information within exceptions is expanded, it should be\n        // placed into this XML for the CError UI to give user a proper feedback.\n\n        Document doc = new org.apache.xerces.dom.DocumentImpl();\n        Element errorEl=doc.createElement(\"error\");\n        errorEl.setAttribute(\"code\",Integer.toString(errorID));\n        if(str_message!=null) {\n            Element messageEl=doc.createElement(\"message\");\n            messageEl.appendChild(doc.createTextNode(str_message));\n            errorEl.appendChild(messageEl);\n        }\n\n        if(str_channelID!=null) {\n            Element channelEl=doc.createElement(\"channel\");\n            Element idEl=doc.createElement(\"id\");\n            idEl.appendChild(doc.createTextNode(str_channelID));\n            channelEl.appendChild(idEl);\n\n            // determine channel name\n            if(portcs!=null) {\n                String chName=(portcs.getUserLayoutManager()).getNodeName(str_channelID);\n                if(chName!=null) {\n                    Element nameEl=doc.createElement(\"name\");\n                    nameEl.appendChild(doc.createTextNode(chName));\n                    channelEl.appendChild(nameEl);\n                }\n                errorEl.appendChild(channelEl);\n            }\n        }\n\n        // if the exception has been generated\n        if(channelException!=null) {\n            Element excEl=doc.createElement(\"exception\");\n            String m;\n            if((m=channelException.getMessage())!=null) {\n                Element emEl=doc.createElement(\"message\");\n                emEl.appendChild(doc.createTextNode(m));\n                excEl.appendChild(emEl);\n            }\n\n            Element stEl=doc.createElement(\"stack\");\n            java.io.StringWriter sw=new java.io.StringWriter();\n            channelException.printStackTrace(new java.io.PrintWriter(sw));\n            sw.flush();\n            stEl.appendChild(doc.createTextNode(sw.toString()));\n            excEl.appendChild(stEl);\n\n\n            if(channelException instanceof PortalException) {\n                PortalException pe=(PortalException) channelException;\n                // the Error channel has been invoked as a result of some other\n                // channel throwing a PortalException.\n\n                // determine which type of an exception is it\n                excEl.setAttribute(\"code\",Integer.toString(pe.getExceptionCode()));\n\n                // now specific cases for exceptions containing additional information\n                if(pe instanceof ResourceMissingException) {\n                    ResourceMissingException rme=(ResourceMissingException) pe;\n                    Element resourceEl=doc.createElement(\"resource\");\n                    Element uriEl=doc.createElement(\"uri\");\n                    uriEl.appendChild(doc.createTextNode(rme.getResourceURI()));\n                    resourceEl.appendChild(uriEl);\n                    Element descriptionEl=doc.createElement(\"description\");\n                    descriptionEl.appendChild(doc.createTextNode(rme.getResourceDescription()));\n                    resourceEl.appendChild(descriptionEl);\n                    excEl.appendChild(resourceEl);\n                } else if(pe instanceof InternalTimeoutException) {\n                    Long v=((InternalTimeoutException)pe).getTimeoutValue();\n                    if(v!=null) {\n                        Element timeoutEl=doc.createElement(\"timeout\");\n                        timeoutEl.setAttribute(\"value\",v.toString());\n                    }\n                }\n            } else {\n                // runtime exception generated by the channel\n                excEl.setAttribute(\"code\",\"-1\");\n            }\n            errorEl.appendChild(excEl);\n        }\n        doc.appendChild(errorEl);\n\n        // figure out if we allow for refresh/reload\n        String allowRef=\"true\";\n        String allowRel=\"true\";\n        if(str_channelID==null) {\n            allowRel=allowRef=\"false\";\n        } else {\n            if(channelException!=null && (channelException instanceof PortalException)) {\n                if(errorID==SET_STATIC_DATA_EXCEPTION || !((PortalException)channelException).allowRefresh())\n                    allowRef=\"false\";\n                if(!((PortalException)channelException).allowReinstantiation())\n                    allowRel=\"false\";\n            }\n        }\n\n        // debug block\n        try {\n            java.io.StringWriter outString = new java.io.StringWriter ();\n            org.apache.xml.serialize.OutputFormat format=new org.apache.xml.serialize.OutputFormat();\n            format.setOmitXMLDeclaration(true);\n            format.setIndenting(true);\n            org.apache.xml.serialize.XMLSerializer xsl = new org.apache.xml.serialize.XMLSerializer (outString,format);\n            xsl.serialize (doc);\n            LogService.instance().log(LogService.DEBUG,outString.toString());\n        } catch (Exception e) {\n            LogService.instance().log(LogService.DEBUG,e);\n        }\n        // end of debug block\n\n        try {\n            XSLT xslt = new XSLT();\n            xslt.setXML(doc);\n            xslt.setSSL(sslLocation, runtimeData.getBrowserInfo());\n            xslt.setTarget(out);\n            xslt.setStylesheetParameter(\"baseActionURL\", runtimeData.getBaseActionURL());\n            xslt.setStylesheetParameter(\"showStackTrace\", String.valueOf(showStackTrace));\n            xslt.setStylesheetParameter(\"allowRefresh\", allowRef);\n            xslt.setStylesheetParameter(\"allowReinstantiation\", allowRel);\n            xslt.transform();\n        } catch (Exception e) { \n            LogService.instance().log(LogService.ERROR, \"CError::renderXML() : Things are bad. Error channel threw: \" + e); \n        }\n    }","commit_id":"735a63f6a9cd01098b0c5068b360f2b61baaf228","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n   * Output channel content to the portal\n   * @param out a sax document handler\n   */\n  public void renderXML (DocumentHandler out)\n  {\n    try\n    {\n      StringBuffer sb = new StringBuffer(1024);\n      sb.append(\"<?xml version='1.0'?>\\n\");\n      sb.append(\"<content>\\n\");\n      sb.append(\"  <image src=\\\"\" + staticData.getParameter (\"img-uri\") + \"\\\" \");\n\n      if (exists (sImageWidth))\n        sb.append(\"         width=\\\"\" + sImageWidth + \"\\\" \");\n\n      if (exists (sImageHeight))\n        sb.append(\"         height=\\\"\" + sImageHeight + \"\\\" \");\n\n      if (exists (sImageBorder))\n        sb.append(\"         border=\\\"\" + sImageBorder + \"\\\"\");\n\n      if (exists (sImageLink))\n        sb.append(\"         link=\\\"\" + sImageLink + \"\\\"\");\n\n      sb.append(\"  />\\n\");\n\n      if (exists (sCaption))\n        sb.append(\"  <caption>\" + sCaption + \"<\/caption>\\n\");\n\n      if (exists (sSubCaption))\n        sb.append(\"  <subcaption>\" + sSubCaption + \"<\/subcaption>\\n\");\n\n      sb.append(\"<\/content>\\n\");\n\n      Hashtable params = new Hashtable(1);\n      params.put(\"baseActionURL\", runtimeData.getBaseActionURL());\n\n      try\n      {\n        XSLT.transform(sb.toString(), new URL(UtilitiesBean.fixURI(sslLocation)), out, params, runtimeData.getBrowserInfo());\n      }\n      catch (Exception e)\n      {\n        throw new GeneralRenderingException(e.getMessage());\n      }\n    }\n    catch (Exception e)\n    {\n      LogService.instance().log (LogService.ERROR, e);\n    }\n  }","id":12484,"modified_method":"/**\n   * Output channel content to the portal\n   * @param out a sax document handler\n   * @throws org.jasig.portal.PortalException\n   */\n  public void renderXML (DocumentHandler out) throws PortalException\n  {\n    StringBuffer sb = new StringBuffer(1024);\n    sb.append(\"<?xml version='1.0'?>\\n\");\n    sb.append(\"<content>\\n\");\n    sb.append(\"  <image src=\\\"\" + sImageUri + \"\\\" \");\n\n    if (exists (sImageWidth))\n      sb.append(\"         width=\\\"\" + sImageWidth + \"\\\" \");\n\n    if (exists (sImageHeight))\n      sb.append(\"         height=\\\"\" + sImageHeight + \"\\\" \");\n\n    if (exists (sImageBorder))\n      sb.append(\"         border=\\\"\" + sImageBorder + \"\\\"\");\n\n    if (exists (sImageLink))\n      sb.append(\"         link=\\\"\" + sImageLink + \"\\\"\");\n\n    sb.append(\"  />\\n\");\n\n    if (exists (sCaption))\n      sb.append(\"  <caption>\" + sCaption + \"<\/caption>\\n\");\n\n    if (exists (sSubCaption))\n      sb.append(\"  <subcaption>\" + sSubCaption + \"<\/subcaption>\\n\");\n\n    sb.append(\"<\/content>\\n\");\n\n    XSLT xslt = new XSLT();\n    xslt.setXML(sb.toString());\n    xslt.setSSL(sslLocation, runtimeData.getBrowserInfo());\n    xslt.setTarget(out);\n    xslt.setStylesheetParameter(\"baseActionURL\", runtimeData.getBaseActionURL());\n    xslt.transform();\n    System.out.println(sb.toString());\n  }","commit_id":"7af02115db0b6474f3079abb05e6446f6eeb404b","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n   * Receive static channel data from the portal\n   * @param sd static channel data\n   */\n  public void setStaticData (ChannelStaticData sd)\n  {\n    sImageWidth = sd.getParameter (\"img-width\");\n    sImageHeight = sd.getParameter (\"img-height\");\n    sImageBorder = sd.getParameter (\"img-border\");\n    sImageLink = sd.getParameter (\"img-link\");\n    sCaption = sd.getParameter (\"caption\");\n    sSubCaption = sd.getParameter (\"subcaption\");\n  }","id":12485,"modified_method":"/**\n   * Receive static channel data from the portal\n   * @param sd static channel data\n   */\n  public void setStaticData (ChannelStaticData sd)\n  {\n    sImageUri = sd.getParameter (\"img-uri\");\n    sImageWidth = sd.getParameter (\"img-width\");\n    sImageHeight = sd.getParameter (\"img-height\");\n    sImageBorder = sd.getParameter (\"img-border\");\n    sImageLink = sd.getParameter (\"img-link\");\n    sCaption = sd.getParameter (\"caption\");\n    sSubCaption = sd.getParameter (\"subcaption\");\n  }","commit_id":"7af02115db0b6474f3079abb05e6446f6eeb404b","url":"https://github.com/Jasig/uPortal"},{"original_method":"protected void initStrutsAction(\n\t\t\tString servletContextName, ClassLoader portletClassLoader,\n\t\t\tString strutsActionPath, String strutsActionClassName)\n\t\tthrows Exception {\n\n\t\tRegistry registry = RegistryUtil.getRegistry();\n\t\tMap<Object, ServiceRegistration<?>> serviceRegistrations =\n\t\t\tgetServiceRegistrations(servletContextName);\n\n\t\tObject strutsActionObject = InstanceFactory.newInstance(\n\t\t\tportletClassLoader, strutsActionClassName);\n\n\t\tMap<String, Object> properties = new HashMap<String, Object>();\n\n\t\tproperties.put(\"path\", strutsActionPath);\n\n\t\tServiceRegistration<?> serviceRegistration = null;\n\n\t\tif (strutsActionObject instanceof StrutsAction) {\n\t\t\tStrutsAction strutsAction =\n\t\t\t\t(StrutsAction)ProxyUtil.newProxyInstance(\n\t\t\t\t\tportletClassLoader, new Class[] {StrutsAction.class},\n\t\t\t\t\tnew ClassLoaderBeanHandler(\n\t\t\t\t\t\tstrutsActionObject, portletClassLoader));\n\n\t\t\tserviceRegistration = registry.registerService(\n\t\t\t\tStrutsAction.class, strutsAction, properties);\n\t\t}\n\t\telse {\n\t\t\tStrutsPortletAction strutsPortletAction =\n\t\t\t\t(StrutsPortletAction)ProxyUtil.newProxyInstance(\n\t\t\t\t\tportletClassLoader, new Class[] {StrutsPortletAction.class},\n\t\t\t\t\tnew ClassLoaderBeanHandler(\n\t\t\t\t\t\tstrutsActionObject, portletClassLoader));\n\n\t\t\tserviceRegistration = registry.registerService(\n\t\t\t\tStrutsPortletAction.class, strutsPortletAction, properties);\n\t\t}\n\n\t\tserviceRegistrations.put(strutsActionClassName, serviceRegistration);\n\t}","id":12486,"modified_method":"protected void initStrutsAction(\n\t\t\tString servletContextName, ClassLoader portletClassLoader,\n\t\t\tString strutsActionPath, String strutsActionClassName)\n\t\tthrows Exception {\n\n\t\tObject strutsActionObject = InstanceFactory.newInstance(\n\t\t\tportletClassLoader, strutsActionClassName);\n\n\t\tif (strutsActionObject instanceof StrutsAction) {\n\t\t\tStrutsAction strutsAction =\n\t\t\t\t(StrutsAction)ProxyUtil.newProxyInstance(\n\t\t\t\t\tportletClassLoader, new Class[] {StrutsAction.class},\n\t\t\t\t\tnew ClassLoaderBeanHandler(\n\t\t\t\t\t\tstrutsActionObject, portletClassLoader));\n\n\t\t\tregisterService(\n\t\t\t\tservletContextName, strutsActionClassName, StrutsAction.class,\n\t\t\t\tstrutsAction, \"path\", strutsActionPath);\n\t\t}\n\t\telse {\n\t\t\tStrutsPortletAction strutsPortletAction =\n\t\t\t\t(StrutsPortletAction)ProxyUtil.newProxyInstance(\n\t\t\t\t\tportletClassLoader, new Class[] {StrutsPortletAction.class},\n\t\t\t\t\tnew ClassLoaderBeanHandler(\n\t\t\t\t\t\tstrutsActionObject, portletClassLoader));\n\n\t\t\tregisterService(\n\t\t\t\tservletContextName, strutsActionClassName,\n\t\t\t\tStrutsPortletAction.class, strutsPortletAction,\n\t\t\t\t\"path\", strutsActionPath);\n\t\t}\n\t}","commit_id":"4b5956d99777f47d325f572027877f59b0f93316","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void initPortalProperties(\n\t\t\tString servletContextName, ClassLoader portletClassLoader,\n\t\t\tProperties portalProperties, Properties unfilteredPortalProperties)\n\t\tthrows Exception {\n\n\t\tRegistry registry = RegistryUtil.getRegistry();\n\t\tMap<Object, ServiceRegistration<?>> serviceRegistrations =\n\t\t\tgetServiceRegistrations(servletContextName);\n\n\t\tPropsUtil.addProperties(portalProperties);\n\n\t\tif (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) {\n\t\t\t_log.debug(\n\t\t\t\t\"Portlet locales \" + portalProperties.getProperty(LOCALES));\n\t\t\t_log.debug(\"Merged locales \" + PropsUtil.get(LOCALES));\n\t\t\t_log.debug(\n\t\t\t\t\"Merged locales array length \" +\n\t\t\t\t\tPropsUtil.getArray(LOCALES).length);\n\t\t}\n\n\t\tfor (String key : _PROPS_VALUES_OBSOLETE) {\n\t\t\tif (_log.isInfoEnabled() && portalProperties.contains(key)) {\n\t\t\t\t_log.info(\"Portal property \\\"\" + key + \"\\\" is obsolete\");\n\t\t\t}\n\t\t}\n\n\t\tresetPortalProperties(servletContextName, portalProperties, true);\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.ASSET_PUBLISHER_ASSET_ENTRY_QUERY_PROCESSORS)) {\n\n\t\t\tString[] assetQueryProcessorClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.ASSET_PUBLISHER_ASSET_ENTRY_QUERY_PROCESSORS));\n\n\t\t\tfor (String assetQueryProcessorClassName :\n\t\t\t\t\tassetQueryProcessorClassNames) {\n\n\t\t\t\tAssetEntryQueryProcessor assetQueryProcessor =\n\t\t\t\t\t(AssetEntryQueryProcessor)newInstance(\n\t\t\t\t\t\tportletClassLoader, AssetEntryQueryProcessor.class,\n\t\t\t\t\t\tassetQueryProcessorClassName);\n\n\t\t\t\tAssetPublisherUtil.registerAssetQueryProcessor(\n\t\t\t\t\tassetQueryProcessorClassName, assetQueryProcessor);\n\n\t\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t\t_log.debug(\n\t\t\t\t\t\t\"Registered asset query processor \" +\n\t\t\t\t\t\t\tassetQueryProcessorClassName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.AUTH_PUBLIC_PATHS)) {\n\t\t\tinitAuthPublicPaths(servletContextName, portalProperties);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) {\n\t\t\tString authTokenClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.AUTH_TOKEN_IMPL);\n\n\t\t\tAuthToken authToken = (AuthToken)newInstance(\n\t\t\t\tportletClassLoader, AuthToken.class, authTokenClassName);\n\n\t\t\tServiceRegistration<AuthToken> serviceRegistration =\n\t\t\t\tregistry.registerService(authTokenClassName, authToken);\n\n\t\t\tserviceRegistrations.put(authTokenClassName, serviceRegistration);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) {\n\t\t\tString captchaClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.CAPTCHA_ENGINE_IMPL);\n\n\t\t\tCaptcha captcha = (Captcha)newInstance(\n\t\t\t\tportletClassLoader, Captcha.class, captchaClassName);\n\n\t\t\tCaptchaImpl captchaImpl = null;\n\n\t\t\tCaptcha currentCaptcha = CaptchaUtil.getCaptcha();\n\n\t\t\tif (currentCaptcha instanceof DoPrivilegedBean) {\n\t\t\t\tDoPrivilegedBean doPrivilegedBean =\n\t\t\t\t\t(DoPrivilegedBean)currentCaptcha;\n\n\t\t\t\tcaptchaImpl = (CaptchaImpl)doPrivilegedBean.getActualBean();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcaptchaImpl = (CaptchaImpl)currentCaptcha;\n\t\t\t}\n\n\t\t\tcaptchaImpl.setCaptcha(captcha);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) {\n\n\t\t\tString controlPanelEntryClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS);\n\n\t\t\tControlPanelEntry controlPanelEntry =\n\t\t\t\t(ControlPanelEntry)newInstance(\n\t\t\t\t\tportletClassLoader, ControlPanelEntry.class,\n\t\t\t\t\tcontrolPanelEntryClassName);\n\n\t\t\tDefaultControlPanelEntryFactory.setInstance(controlPanelEntry);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) {\n\t\t\tString[] dlProcessorClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.DL_FILE_ENTRY_PROCESSORS));\n\n\t\t\tDLFileEntryProcessorContainer dlFileEntryProcessorContainer =\n\t\t\t\tnew DLFileEntryProcessorContainer();\n\n\t\t\t_dlFileEntryProcessorContainerMap.put(\n\t\t\t\tservletContextName, dlFileEntryProcessorContainer);\n\n\t\t\tfor (String dlProcessorClassName : dlProcessorClassNames) {\n\t\t\t\tDLProcessor dlProcessor = (DLProcessor)newInstance(\n\t\t\t\t\tportletClassLoader, DLProcessor.class,\n\t\t\t\t\tdlProcessorClassName);\n\n\t\t\t\tdlFileEntryProcessorContainer.registerDLProcessor(dlProcessor);\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) {\n\t\t\tString[] dlRepositoryClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(PropsKeys.DL_REPOSITORY_IMPL));\n\n\t\t\tDLRepositoryContainer dlRepositoryContainer =\n\t\t\t\tnew DLRepositoryContainer();\n\n\t\t\t_dlRepositoryContainerMap.put(\n\t\t\t\tservletContextName, dlRepositoryContainer);\n\n\t\t\tfor (String dlRepositoryClassName : dlRepositoryClassNames) {\n\t\t\t\tExternalRepositoryFactory externalRepositoryFactory =\n\t\t\t\t\tnew ExternalRepositoryFactoryImpl(\n\t\t\t\t\t\tdlRepositoryClassName, portletClassLoader);\n\n\t\t\t\tdlRepositoryContainer.registerRepositoryFactory(\n\t\t\t\t\tdlRepositoryClassName, externalRepositoryFactory);\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) {\n\t\t\tString antivirusScannerClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.DL_STORE_ANTIVIRUS_IMPL);\n\n\t\t\tAntivirusScanner antivirusScanner = (AntivirusScanner)newInstance(\n\t\t\t\tportletClassLoader, AntivirusScanner.class,\n\t\t\t\tantivirusScannerClassName);\n\n\t\t\tAntivirusScannerWrapper antivirusScannerWrapper =\n\t\t\t\t(AntivirusScannerWrapper)\n\t\t\t\t\tAntivirusScannerUtil.getAntivirusScanner();\n\n\t\t\tantivirusScannerWrapper.setAntivirusScanner(antivirusScanner);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) {\n\t\t\tString storeClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.DL_STORE_IMPL);\n\n\t\t\tStore store = (Store)newInstance(\n\t\t\t\tportletClassLoader, Store.class, storeClassName);\n\n\t\t\tStoreFactory.setInstance(store);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) {\n\n\t\t\tString attributesTransformerClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL);\n\n\t\t\tAttributesTransformer attributesTransformer =\n\t\t\t\t(AttributesTransformer)newInstance(\n\t\t\t\t\tportletClassLoader, AttributesTransformer.class,\n\t\t\t\t\tattributesTransformerClassName);\n\n\t\t\tServiceRegistration<AttributesTransformer> serviceRegistration =\n\t\t\t\tregistry.registerService(\n\t\t\t\t\tAttributesTransformer.class, attributesTransformer);\n\n\t\t\tserviceRegistrations.put(\n\t\t\t\tattributesTransformerClassName, serviceRegistration);\n\t\t}\n\n\t\tif (portalProperties.containsKey(LOCK_LISTENERS)) {\n\t\t\tLockListenerContainer lockListenerContainer =\n\t\t\t\t_lockListenerContainerMap.get(servletContextName);\n\n\t\t\tif (lockListenerContainer == null) {\n\t\t\t\tlockListenerContainer = new LockListenerContainer();\n\n\t\t\t\t_lockListenerContainerMap.put(\n\t\t\t\t\tservletContextName, lockListenerContainer);\n\t\t\t}\n\n\t\t\tString[] lockListenerClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(LOCK_LISTENERS));\n\n\t\t\tfor (String lockListenerClassName : lockListenerClassNames) {\n\t\t\t\tLockListener lockListener = (LockListener)newInstance(\n\t\t\t\t\tportletClassLoader, LockListener.class,\n\t\t\t\t\tlockListenerClassName);\n\n\t\t\t\tlockListenerContainer.registerLockListener(lockListener);\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) {\n\t\t\tString mailHookClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.MAIL_HOOK_IMPL);\n\n\t\t\tcom.liferay.mail.util.Hook mailHook =\n\t\t\t\t(com.liferay.mail.util.Hook)newInstance(\n\t\t\t\t\tportletClassLoader, com.liferay.mail.util.Hook.class,\n\t\t\t\t\tmailHookClassName);\n\n\t\t\tcom.liferay.mail.util.HookFactory.setInstance(mailHook);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) {\n\n\t\t\tString organizationMembershipPolicyClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS);\n\n\t\t\tOrganizationMembershipPolicyFactoryImpl\n\t\t\t\torganizationMembershipPolicyFactoryImpl =\n\t\t\t\t\t(OrganizationMembershipPolicyFactoryImpl)\n\t\t\t\t\t\tOrganizationMembershipPolicyFactoryUtil.\n\t\t\t\t\t\t\tgetOrganizationMembershipPolicyFactory();\n\n\t\t\tOrganizationMembershipPolicy organizationMembershipPolicy =\n\t\t\t\t(OrganizationMembershipPolicy)newInstance(\n\t\t\t\t\tportletClassLoader, OrganizationMembershipPolicy.class,\n\t\t\t\t\torganizationMembershipPolicyClassName);\n\n\t\t\torganizationMembershipPolicyFactoryImpl.\n\t\t\t\tsetOrganizationMembershipPolicy(organizationMembershipPolicy);\n\n\t\t\tif (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {\n\t\t\t\torganizationMembershipPolicy.verifyPolicy();\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) {\n\t\t\tString roleMembershipPolicyClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_ROLES);\n\n\t\t\tRoleMembershipPolicyFactoryImpl roleMembershipPolicyFactoryImpl =\n\t\t\t\t(RoleMembershipPolicyFactoryImpl)\n\t\t\t\t\tRoleMembershipPolicyFactoryUtil.\n\t\t\t\t\t\tgetRoleMembershipPolicyFactory();\n\n\t\t\tRoleMembershipPolicy roleMembershipPolicy =\n\t\t\t\t(RoleMembershipPolicy)newInstance(\n\t\t\t\t\tportletClassLoader, RoleMembershipPolicy.class,\n\t\t\t\t\troleMembershipPolicyClassName);\n\n\t\t\troleMembershipPolicyFactoryImpl.setRoleMembershipPolicy(\n\t\t\t\troleMembershipPolicy);\n\n\t\t\tif (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {\n\t\t\t\troleMembershipPolicy.verifyPolicy();\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) {\n\t\t\tString siteMembershipPolicyClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_SITES);\n\n\t\t\tSiteMembershipPolicyFactoryImpl siteMembershipPolicyFactoryImpl =\n\t\t\t\t(SiteMembershipPolicyFactoryImpl)\n\t\t\t\t\tSiteMembershipPolicyFactoryUtil.\n\t\t\t\t\t\tgetSiteMembershipPolicyFactory();\n\n\t\t\tSiteMembershipPolicy siteMembershipPolicy =\n\t\t\t\t(SiteMembershipPolicy)newInstance(\n\t\t\t\t\tportletClassLoader, SiteMembershipPolicy.class,\n\t\t\t\t\tsiteMembershipPolicyClassName);\n\n\t\t\tsiteMembershipPolicyFactoryImpl.setSiteMembershipPolicy(\n\t\t\t\tsiteMembershipPolicy);\n\n\t\t\tif (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {\n\t\t\t\tsiteMembershipPolicy.verifyPolicy();\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) {\n\n\t\t\tString userGroupMembershipPolicyClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_USER_GROUPS);\n\n\t\t\tUserGroupMembershipPolicyFactoryImpl\n\t\t\t\tuserGroupMembershipPolicyFactoryImpl =\n\t\t\t\t\t(UserGroupMembershipPolicyFactoryImpl)\n\t\t\t\t\t\tUserGroupMembershipPolicyFactoryUtil.\n\t\t\t\t\t\t\tgetUserGroupMembershipPolicyFactory();\n\n\t\t\tUserGroupMembershipPolicy userGroupMembershipPolicy =\n\t\t\t\t(UserGroupMembershipPolicy)newInstance(\n\t\t\t\t\tportletClassLoader, UserGroupMembershipPolicy.class,\n\t\t\t\t\tuserGroupMembershipPolicyClassName);\n\n\t\t\tuserGroupMembershipPolicyFactoryImpl.setUserGroupMembershipPolicy(\n\t\t\t\tuserGroupMembershipPolicy);\n\n\t\t\tif (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {\n\t\t\t\tuserGroupMembershipPolicy.verifyPolicy();\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) {\n\t\t\tString toolkitClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.PASSWORDS_TOOLKIT);\n\n\t\t\tToolkit toolkit = (Toolkit)newInstance(\n\t\t\t\tportletClassLoader, Toolkit.class, toolkitClassName);\n\n\t\t\tToolkitWrapper toolkitWrapper =\n\t\t\t\t(ToolkitWrapper)PwdToolkitUtil.getToolkit();\n\n\t\t\ttoolkitWrapper.setToolkit(toolkit);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) {\n\t\t\tString phoneNumberFormatClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.PHONE_NUMBER_FORMAT_IMPL);\n\n\t\t\tPhoneNumberFormat phoneNumberFormat =\n\t\t\t\t(PhoneNumberFormat)newInstance(\n\t\t\t\t\tportletClassLoader, PhoneNumberFormat.class,\n\t\t\t\t\tphoneNumberFormatClassName);\n\n\t\t\tPhoneNumberFormatWrapper phoneNumberFormatWrapper =\n\t\t\t\t(PhoneNumberFormatWrapper)\n\t\t\t\t\tPhoneNumberFormatUtil.getPhoneNumberFormat();\n\n\t\t\tphoneNumberFormatWrapper.setPhoneNumberFormat(phoneNumberFormat);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.SANITIZER_IMPL)) {\n\t\t\tString[] sanitizerClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(PropsKeys.SANITIZER_IMPL));\n\n\t\t\tSanitizerContainer sanitizerContainer = new SanitizerContainer();\n\n\t\t\t_sanitizerContainerMap.put(servletContextName, sanitizerContainer);\n\n\t\t\tfor (String sanitizerClassName : sanitizerClassNames) {\n\t\t\t\tSanitizer sanitizer = (Sanitizer)newInstance(\n\t\t\t\t\tportletClassLoader, Sanitizer.class, sanitizerClassName);\n\n\t\t\t\tsanitizerContainer.registerSanitizer(sanitizer);\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) {\n\n\t\t\tString emailAddressGeneratorClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.USERS_EMAIL_ADDRESS_GENERATOR);\n\n\t\t\tEmailAddressGenerator emailAddressGenerator =\n\t\t\t\t(EmailAddressGenerator)newInstance(\n\t\t\t\t\tportletClassLoader, EmailAddressGenerator.class,\n\t\t\t\t\temailAddressGeneratorClassName);\n\n\t\t\tServiceRegistration<EmailAddressGenerator> serviceRegistration =\n\t\t\t\tregistry.registerService(\n\t\t\t\t\tEmailAddressGenerator.class, emailAddressGenerator);\n\n\t\t\tserviceRegistrations.put(\n\t\t\t\temailAddressGeneratorClassName, serviceRegistration);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) {\n\n\t\t\tString emailAddressValidatorClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR);\n\n\t\t\tEmailAddressValidator emailAddressValidator =\n\t\t\t\t(EmailAddressValidator)newInstance(\n\t\t\t\t\tportletClassLoader, EmailAddressValidator.class,\n\t\t\t\t\temailAddressValidatorClassName);\n\n\t\t\tServiceRegistration<EmailAddressValidator> serviceRegistration =\n\t\t\t\tregistry.registerService(\n\t\t\t\t\tEmailAddressValidator.class, emailAddressValidator);\n\n\t\t\tserviceRegistrations.put(\n\t\t\t\temailAddressValidatorClassName, serviceRegistration);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) {\n\t\t\tString fullNameGeneratorClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.USERS_FULL_NAME_GENERATOR);\n\n\t\t\tFullNameGenerator fullNameGenerator =\n\t\t\t\t(FullNameGenerator)newInstance(\n\t\t\t\t\tportletClassLoader, FullNameGenerator.class,\n\t\t\t\t\tfullNameGeneratorClassName);\n\n\t\t\tServiceRegistration<FullNameGenerator> serviceRegistration =\n\t\t\t\tregistry.registerService(\n\t\t\t\t\tFullNameGenerator.class, fullNameGenerator);\n\n\t\t\tserviceRegistrations.put(\n\t\t\t\tfullNameGeneratorClassName, serviceRegistration);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) {\n\t\t\tString fullNameValidatorClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.USERS_FULL_NAME_VALIDATOR);\n\n\t\t\tFullNameValidator fullNameValidator =\n\t\t\t\t(FullNameValidator)newInstance(\n\t\t\t\t\tportletClassLoader, FullNameValidator.class,\n\t\t\t\t\tfullNameValidatorClassName);\n\n\t\t\tServiceRegistration<FullNameValidator> serviceRegistration =\n\t\t\t\tregistry.registerService(\n\t\t\t\t\tFullNameValidator.class, fullNameValidator);\n\n\t\t\tserviceRegistrations.put(\n\t\t\t\tfullNameValidatorClassName, serviceRegistration);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.USERS_SCREEN_NAME_GENERATOR)) {\n\n\t\t\tString screenNameGeneratorClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.USERS_SCREEN_NAME_GENERATOR);\n\n\t\t\tScreenNameGenerator screenNameGenerator =\n\t\t\t\t(ScreenNameGenerator)newInstance(\n\t\t\t\t\tportletClassLoader, ScreenNameGenerator.class,\n\t\t\t\t\tscreenNameGeneratorClassName);\n\n\t\t\tServiceRegistration<ScreenNameGenerator> serviceRegistration =\n\t\t\t\tregistry.registerService(\n\t\t\t\t\tScreenNameGenerator.class, screenNameGenerator);\n\n\t\t\tserviceRegistrations.put(\n\t\t\t\tscreenNameGeneratorClassName, serviceRegistration);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.USERS_SCREEN_NAME_VALIDATOR)) {\n\n\t\t\tString screenNameValidatorClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.USERS_SCREEN_NAME_VALIDATOR);\n\n\t\t\tScreenNameValidator screenNameValidator =\n\t\t\t\t(ScreenNameValidator)newInstance(\n\t\t\t\t\tportletClassLoader, ScreenNameValidator.class,\n\t\t\t\t\tscreenNameValidatorClassName);\n\n\t\t\tServiceRegistration<ScreenNameValidator> serviceRegistration =\n\t\t\t\tregistry.registerService(\n\t\t\t\t\tScreenNameValidator.class, screenNameValidator);\n\n\t\t\tserviceRegistrations.put(\n\t\t\t\tscreenNameValidatorClassName, serviceRegistration);\n\t\t}\n\n\t\tSet<String> liferayFilterClassNames =\n\t\t\tLiferayFilterTracker.getClassNames();\n\n\t\tfor (String liferayFilterClassName : liferayFilterClassNames) {\n\t\t\tif (!portalProperties.containsKey(liferayFilterClassName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tboolean filterEnabled = GetterUtil.getBoolean(\n\t\t\t\tportalProperties.getProperty(liferayFilterClassName));\n\n\t\t\tSet<LiferayFilter> liferayFilters =\n\t\t\t\tLiferayFilterTracker.getLiferayFilters(liferayFilterClassName);\n\n\t\t\tfor (LiferayFilter liferayFilter : liferayFilters) {\n\t\t\t\tliferayFilter.setFilterEnabled(filterEnabled);\n\t\t\t}\n\t\t}\n\n\t\tif (unfilteredPortalProperties.containsKey(\n\t\t\t\tPropsKeys.RELEASE_INFO_BUILD_NUMBER) ||\n\t\t\tunfilteredPortalProperties.containsKey(\n\t\t\t\tPropsKeys.UPGRADE_PROCESSES)) {\n\n\t\t\tupdateRelease(\n\t\t\t\tservletContextName, portletClassLoader,\n\t\t\t\tunfilteredPortalProperties);\n\t\t}\n\t}","id":12487,"modified_method":"protected void initPortalProperties(\n\t\t\tString servletContextName, ClassLoader portletClassLoader,\n\t\t\tProperties portalProperties, Properties unfilteredPortalProperties)\n\t\tthrows Exception {\n\n\t\tRegistry registry = RegistryUtil.getRegistry();\n\t\tMap<Object, ServiceRegistration<?>> serviceRegistrations =\n\t\t\tgetServiceRegistrations(servletContextName);\n\n\t\tPropsUtil.addProperties(portalProperties);\n\n\t\tif (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) {\n\t\t\t_log.debug(\n\t\t\t\t\"Portlet locales \" + portalProperties.getProperty(LOCALES));\n\t\t\t_log.debug(\"Merged locales \" + PropsUtil.get(LOCALES));\n\t\t\t_log.debug(\n\t\t\t\t\"Merged locales array length \" +\n\t\t\t\t\tPropsUtil.getArray(LOCALES).length);\n\t\t}\n\n\t\tfor (String key : _PROPS_VALUES_OBSOLETE) {\n\t\t\tif (_log.isInfoEnabled() && portalProperties.contains(key)) {\n\t\t\t\t_log.info(\"Portal property \\\"\" + key + \"\\\" is obsolete\");\n\t\t\t}\n\t\t}\n\n\t\tresetPortalProperties(servletContextName, portalProperties, true);\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.ASSET_PUBLISHER_ASSET_ENTRY_QUERY_PROCESSORS)) {\n\n\t\t\tString[] assetQueryProcessorClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.ASSET_PUBLISHER_ASSET_ENTRY_QUERY_PROCESSORS));\n\n\t\t\tfor (String assetQueryProcessorClassName :\n\t\t\t\t\tassetQueryProcessorClassNames) {\n\n\t\t\t\tAssetEntryQueryProcessor assetQueryProcessor =\n\t\t\t\t\t(AssetEntryQueryProcessor)newInstance(\n\t\t\t\t\t\tportletClassLoader, AssetEntryQueryProcessor.class,\n\t\t\t\t\t\tassetQueryProcessorClassName);\n\n\t\t\t\tAssetPublisherUtil.registerAssetQueryProcessor(\n\t\t\t\t\tassetQueryProcessorClassName, assetQueryProcessor);\n\n\t\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t\t_log.debug(\n\t\t\t\t\t\t\"Registered asset query processor \" +\n\t\t\t\t\t\t\tassetQueryProcessorClassName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.AUTH_PUBLIC_PATHS)) {\n\t\t\tinitAuthPublicPaths(servletContextName, portalProperties);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) {\n\t\t\tString authTokenClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.AUTH_TOKEN_IMPL);\n\n\t\t\tAuthToken authToken = (AuthToken)newInstance(\n\t\t\t\tportletClassLoader, AuthToken.class, authTokenClassName);\n\n\t\t\tServiceRegistration<AuthToken> serviceRegistration =\n\t\t\t\tregistry.registerService(authTokenClassName, authToken);\n\n\t\t\tserviceRegistrations.put(authTokenClassName, serviceRegistration);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) {\n\t\t\tString captchaClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.CAPTCHA_ENGINE_IMPL);\n\n\t\t\tCaptcha captcha = (Captcha)newInstance(\n\t\t\t\tportletClassLoader, Captcha.class, captchaClassName);\n\n\t\t\tCaptchaImpl captchaImpl = null;\n\n\t\t\tCaptcha currentCaptcha = CaptchaUtil.getCaptcha();\n\n\t\t\tif (currentCaptcha instanceof DoPrivilegedBean) {\n\t\t\t\tDoPrivilegedBean doPrivilegedBean =\n\t\t\t\t\t(DoPrivilegedBean)currentCaptcha;\n\n\t\t\t\tcaptchaImpl = (CaptchaImpl)doPrivilegedBean.getActualBean();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcaptchaImpl = (CaptchaImpl)currentCaptcha;\n\t\t\t}\n\n\t\t\tcaptchaImpl.setCaptcha(captcha);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) {\n\n\t\t\tString controlPanelEntryClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS);\n\n\t\t\tControlPanelEntry controlPanelEntry =\n\t\t\t\t(ControlPanelEntry)newInstance(\n\t\t\t\t\tportletClassLoader, ControlPanelEntry.class,\n\t\t\t\t\tcontrolPanelEntryClassName);\n\n\t\t\tDefaultControlPanelEntryFactory.setInstance(controlPanelEntry);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) {\n\t\t\tString[] dlProcessorClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.DL_FILE_ENTRY_PROCESSORS));\n\n\t\t\tDLFileEntryProcessorContainer dlFileEntryProcessorContainer =\n\t\t\t\tnew DLFileEntryProcessorContainer();\n\n\t\t\t_dlFileEntryProcessorContainerMap.put(\n\t\t\t\tservletContextName, dlFileEntryProcessorContainer);\n\n\t\t\tfor (String dlProcessorClassName : dlProcessorClassNames) {\n\t\t\t\tDLProcessor dlProcessor = (DLProcessor)newInstance(\n\t\t\t\t\tportletClassLoader, DLProcessor.class,\n\t\t\t\t\tdlProcessorClassName);\n\n\t\t\t\tdlFileEntryProcessorContainer.registerDLProcessor(dlProcessor);\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) {\n\t\t\tString[] dlRepositoryClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(PropsKeys.DL_REPOSITORY_IMPL));\n\n\t\t\tDLRepositoryContainer dlRepositoryContainer =\n\t\t\t\tnew DLRepositoryContainer();\n\n\t\t\t_dlRepositoryContainerMap.put(\n\t\t\t\tservletContextName, dlRepositoryContainer);\n\n\t\t\tfor (String dlRepositoryClassName : dlRepositoryClassNames) {\n\t\t\t\tExternalRepositoryFactory externalRepositoryFactory =\n\t\t\t\t\tnew ExternalRepositoryFactoryImpl(\n\t\t\t\t\t\tdlRepositoryClassName, portletClassLoader);\n\n\t\t\t\tdlRepositoryContainer.registerRepositoryFactory(\n\t\t\t\t\tdlRepositoryClassName, externalRepositoryFactory);\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) {\n\t\t\tString antivirusScannerClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.DL_STORE_ANTIVIRUS_IMPL);\n\n\t\t\tAntivirusScanner antivirusScanner = (AntivirusScanner)newInstance(\n\t\t\t\tportletClassLoader, AntivirusScanner.class,\n\t\t\t\tantivirusScannerClassName);\n\n\t\t\tAntivirusScannerWrapper antivirusScannerWrapper =\n\t\t\t\t(AntivirusScannerWrapper)\n\t\t\t\t\tAntivirusScannerUtil.getAntivirusScanner();\n\n\t\t\tantivirusScannerWrapper.setAntivirusScanner(antivirusScanner);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) {\n\t\t\tString storeClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.DL_STORE_IMPL);\n\n\t\t\tStore store = (Store)newInstance(\n\t\t\t\tportletClassLoader, Store.class, storeClassName);\n\n\t\t\tStoreFactory.setInstance(store);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) {\n\n\t\t\tString attributesTransformerClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL);\n\n\t\t\tAttributesTransformer attributesTransformer =\n\t\t\t\t(AttributesTransformer)newInstance(\n\t\t\t\t\tportletClassLoader, AttributesTransformer.class,\n\t\t\t\t\tattributesTransformerClassName);\n\n\t\t\tregisterService(\n\t\t\t\tservletContextName, attributesTransformerClassName,\n\t\t\t\tAttributesTransformer.class, attributesTransformer);\n\t\t}\n\n\t\tif (portalProperties.containsKey(LOCK_LISTENERS)) {\n\t\t\tLockListenerContainer lockListenerContainer =\n\t\t\t\t_lockListenerContainerMap.get(servletContextName);\n\n\t\t\tif (lockListenerContainer == null) {\n\t\t\t\tlockListenerContainer = new LockListenerContainer();\n\n\t\t\t\t_lockListenerContainerMap.put(\n\t\t\t\t\tservletContextName, lockListenerContainer);\n\t\t\t}\n\n\t\t\tString[] lockListenerClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(LOCK_LISTENERS));\n\n\t\t\tfor (String lockListenerClassName : lockListenerClassNames) {\n\t\t\t\tLockListener lockListener = (LockListener)newInstance(\n\t\t\t\t\tportletClassLoader, LockListener.class,\n\t\t\t\t\tlockListenerClassName);\n\n\t\t\t\tlockListenerContainer.registerLockListener(lockListener);\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) {\n\t\t\tString mailHookClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.MAIL_HOOK_IMPL);\n\n\t\t\tcom.liferay.mail.util.Hook mailHook =\n\t\t\t\t(com.liferay.mail.util.Hook)newInstance(\n\t\t\t\t\tportletClassLoader, com.liferay.mail.util.Hook.class,\n\t\t\t\t\tmailHookClassName);\n\n\t\t\tcom.liferay.mail.util.HookFactory.setInstance(mailHook);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) {\n\n\t\t\tString organizationMembershipPolicyClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS);\n\n\t\t\tOrganizationMembershipPolicyFactoryImpl\n\t\t\t\torganizationMembershipPolicyFactoryImpl =\n\t\t\t\t\t(OrganizationMembershipPolicyFactoryImpl)\n\t\t\t\t\t\tOrganizationMembershipPolicyFactoryUtil.\n\t\t\t\t\t\t\tgetOrganizationMembershipPolicyFactory();\n\n\t\t\tOrganizationMembershipPolicy organizationMembershipPolicy =\n\t\t\t\t(OrganizationMembershipPolicy)newInstance(\n\t\t\t\t\tportletClassLoader, OrganizationMembershipPolicy.class,\n\t\t\t\t\torganizationMembershipPolicyClassName);\n\n\t\t\torganizationMembershipPolicyFactoryImpl.\n\t\t\t\tsetOrganizationMembershipPolicy(organizationMembershipPolicy);\n\n\t\t\tif (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {\n\t\t\t\torganizationMembershipPolicy.verifyPolicy();\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) {\n\t\t\tString roleMembershipPolicyClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_ROLES);\n\n\t\t\tRoleMembershipPolicyFactoryImpl roleMembershipPolicyFactoryImpl =\n\t\t\t\t(RoleMembershipPolicyFactoryImpl)\n\t\t\t\t\tRoleMembershipPolicyFactoryUtil.\n\t\t\t\t\t\tgetRoleMembershipPolicyFactory();\n\n\t\t\tRoleMembershipPolicy roleMembershipPolicy =\n\t\t\t\t(RoleMembershipPolicy)newInstance(\n\t\t\t\t\tportletClassLoader, RoleMembershipPolicy.class,\n\t\t\t\t\troleMembershipPolicyClassName);\n\n\t\t\troleMembershipPolicyFactoryImpl.setRoleMembershipPolicy(\n\t\t\t\troleMembershipPolicy);\n\n\t\t\tif (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {\n\t\t\t\troleMembershipPolicy.verifyPolicy();\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) {\n\t\t\tString siteMembershipPolicyClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_SITES);\n\n\t\t\tSiteMembershipPolicyFactoryImpl siteMembershipPolicyFactoryImpl =\n\t\t\t\t(SiteMembershipPolicyFactoryImpl)\n\t\t\t\t\tSiteMembershipPolicyFactoryUtil.\n\t\t\t\t\t\tgetSiteMembershipPolicyFactory();\n\n\t\t\tSiteMembershipPolicy siteMembershipPolicy =\n\t\t\t\t(SiteMembershipPolicy)newInstance(\n\t\t\t\t\tportletClassLoader, SiteMembershipPolicy.class,\n\t\t\t\t\tsiteMembershipPolicyClassName);\n\n\t\t\tsiteMembershipPolicyFactoryImpl.setSiteMembershipPolicy(\n\t\t\t\tsiteMembershipPolicy);\n\n\t\t\tif (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {\n\t\t\t\tsiteMembershipPolicy.verifyPolicy();\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) {\n\n\t\t\tString userGroupMembershipPolicyClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.MEMBERSHIP_POLICY_USER_GROUPS);\n\n\t\t\tUserGroupMembershipPolicyFactoryImpl\n\t\t\t\tuserGroupMembershipPolicyFactoryImpl =\n\t\t\t\t\t(UserGroupMembershipPolicyFactoryImpl)\n\t\t\t\t\t\tUserGroupMembershipPolicyFactoryUtil.\n\t\t\t\t\t\t\tgetUserGroupMembershipPolicyFactory();\n\n\t\t\tUserGroupMembershipPolicy userGroupMembershipPolicy =\n\t\t\t\t(UserGroupMembershipPolicy)newInstance(\n\t\t\t\t\tportletClassLoader, UserGroupMembershipPolicy.class,\n\t\t\t\t\tuserGroupMembershipPolicyClassName);\n\n\t\t\tuserGroupMembershipPolicyFactoryImpl.setUserGroupMembershipPolicy(\n\t\t\t\tuserGroupMembershipPolicy);\n\n\t\t\tif (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {\n\t\t\t\tuserGroupMembershipPolicy.verifyPolicy();\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) {\n\t\t\tString toolkitClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.PASSWORDS_TOOLKIT);\n\n\t\t\tToolkit toolkit = (Toolkit)newInstance(\n\t\t\t\tportletClassLoader, Toolkit.class, toolkitClassName);\n\n\t\t\tToolkitWrapper toolkitWrapper =\n\t\t\t\t(ToolkitWrapper)PwdToolkitUtil.getToolkit();\n\n\t\t\ttoolkitWrapper.setToolkit(toolkit);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) {\n\t\t\tString phoneNumberFormatClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.PHONE_NUMBER_FORMAT_IMPL);\n\n\t\t\tPhoneNumberFormat phoneNumberFormat =\n\t\t\t\t(PhoneNumberFormat)newInstance(\n\t\t\t\t\tportletClassLoader, PhoneNumberFormat.class,\n\t\t\t\t\tphoneNumberFormatClassName);\n\n\t\t\tPhoneNumberFormatWrapper phoneNumberFormatWrapper =\n\t\t\t\t(PhoneNumberFormatWrapper)\n\t\t\t\t\tPhoneNumberFormatUtil.getPhoneNumberFormat();\n\n\t\t\tphoneNumberFormatWrapper.setPhoneNumberFormat(phoneNumberFormat);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.SANITIZER_IMPL)) {\n\t\t\tString[] sanitizerClassNames = StringUtil.split(\n\t\t\t\tportalProperties.getProperty(PropsKeys.SANITIZER_IMPL));\n\n\t\t\tSanitizerContainer sanitizerContainer = new SanitizerContainer();\n\n\t\t\t_sanitizerContainerMap.put(servletContextName, sanitizerContainer);\n\n\t\t\tfor (String sanitizerClassName : sanitizerClassNames) {\n\t\t\t\tSanitizer sanitizer = (Sanitizer)newInstance(\n\t\t\t\t\tportletClassLoader, Sanitizer.class, sanitizerClassName);\n\n\t\t\t\tsanitizerContainer.registerSanitizer(sanitizer);\n\t\t\t}\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) {\n\n\t\t\tString emailAddressGeneratorClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.USERS_EMAIL_ADDRESS_GENERATOR);\n\n\t\t\tEmailAddressGenerator emailAddressGenerator =\n\t\t\t\t(EmailAddressGenerator)newInstance(\n\t\t\t\t\tportletClassLoader, EmailAddressGenerator.class,\n\t\t\t\t\temailAddressGeneratorClassName);\n\n\t\t\tregisterService(\n\t\t\t\tservletContextName, emailAddressGeneratorClassName,\n\t\t\t\tEmailAddressGenerator.class, emailAddressGenerator);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) {\n\n\t\t\tString emailAddressValidatorClassName =\n\t\t\t\tportalProperties.getProperty(\n\t\t\t\t\tPropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR);\n\n\t\t\tEmailAddressValidator emailAddressValidator =\n\t\t\t\t(EmailAddressValidator)newInstance(\n\t\t\t\t\tportletClassLoader, EmailAddressValidator.class,\n\t\t\t\t\temailAddressValidatorClassName);\n\n\t\t\tregisterService(\n\t\t\t\tservletContextName, emailAddressValidatorClassName,\n\t\t\t\tEmailAddressValidator.class, emailAddressValidator);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) {\n\t\t\tString fullNameGeneratorClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.USERS_FULL_NAME_GENERATOR);\n\n\t\t\tFullNameGenerator fullNameGenerator =\n\t\t\t\t(FullNameGenerator)newInstance(\n\t\t\t\t\tportletClassLoader, FullNameGenerator.class,\n\t\t\t\t\tfullNameGeneratorClassName);\n\n\t\t\tregisterService(\n\t\t\t\tservletContextName, fullNameGeneratorClassName,\n\t\t\t\tFullNameGenerator.class, fullNameGenerator);\n\t\t}\n\n\t\tif (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) {\n\t\t\tString fullNameValidatorClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.USERS_FULL_NAME_VALIDATOR);\n\n\t\t\tFullNameValidator fullNameValidator =\n\t\t\t\t(FullNameValidator)newInstance(\n\t\t\t\t\tportletClassLoader, FullNameValidator.class,\n\t\t\t\t\tfullNameValidatorClassName);\n\n\t\t\tregisterService(\n\t\t\t\tservletContextName, fullNameValidatorClassName,\n\t\t\t\tFullNameValidator.class, fullNameValidator);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.USERS_SCREEN_NAME_GENERATOR)) {\n\n\t\t\tString screenNameGeneratorClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.USERS_SCREEN_NAME_GENERATOR);\n\n\t\t\tScreenNameGenerator screenNameGenerator =\n\t\t\t\t(ScreenNameGenerator)newInstance(\n\t\t\t\t\tportletClassLoader, ScreenNameGenerator.class,\n\t\t\t\t\tscreenNameGeneratorClassName);\n\n\t\t\tregisterService(\n\t\t\t\tservletContextName, screenNameGeneratorClassName,\n\t\t\t\tScreenNameGenerator.class, screenNameGenerator);\n\t\t}\n\n\t\tif (portalProperties.containsKey(\n\t\t\t\tPropsKeys.USERS_SCREEN_NAME_VALIDATOR)) {\n\n\t\t\tString screenNameValidatorClassName = portalProperties.getProperty(\n\t\t\t\tPropsKeys.USERS_SCREEN_NAME_VALIDATOR);\n\n\t\t\tScreenNameValidator screenNameValidator =\n\t\t\t\t(ScreenNameValidator)newInstance(\n\t\t\t\t\tportletClassLoader, ScreenNameValidator.class,\n\t\t\t\t\tscreenNameValidatorClassName);\n\n\t\t\tregisterService(\n\t\t\t\tservletContextName, screenNameValidatorClassName,\n\t\t\t\tScreenNameValidator.class, screenNameValidator);\n\t\t}\n\n\t\tSet<String> liferayFilterClassNames =\n\t\t\tLiferayFilterTracker.getClassNames();\n\n\t\tfor (String liferayFilterClassName : liferayFilterClassNames) {\n\t\t\tif (!portalProperties.containsKey(liferayFilterClassName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tboolean filterEnabled = GetterUtil.getBoolean(\n\t\t\t\tportalProperties.getProperty(liferayFilterClassName));\n\n\t\t\tSet<LiferayFilter> liferayFilters =\n\t\t\t\tLiferayFilterTracker.getLiferayFilters(liferayFilterClassName);\n\n\t\t\tfor (LiferayFilter liferayFilter : liferayFilters) {\n\t\t\t\tliferayFilter.setFilterEnabled(filterEnabled);\n\t\t\t}\n\t\t}\n\n\t\tif (unfilteredPortalProperties.containsKey(\n\t\t\t\tPropsKeys.RELEASE_INFO_BUILD_NUMBER) ||\n\t\t\tunfilteredPortalProperties.containsKey(\n\t\t\t\tPropsKeys.UPGRADE_PROCESSES)) {\n\n\t\t\tupdateRelease(\n\t\t\t\tservletContextName, portletClassLoader,\n\t\t\t\tunfilteredPortalProperties);\n\t\t}\n\t}","commit_id":"4b5956d99777f47d325f572027877f59b0f93316","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void start() {\n        for (AckReader reader : m_ackReaders) {\n            reader.start();\n        }\n    }","id":12488,"modified_method":"public void start() {\n        log().info(\"start: Starting \"+m_ackReaders.size()+\" readers...\");\n        for (AckReader reader : m_ackReaders) {\n            log().debug(\"start: Starting reader: \"+reader);\n            reader.start();\n        }\n        log().info(\"start: readers started.\");\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@EventHandler(uei=EventConstants.ACKNOWLEDGE_EVENT_UEI)\n    public void handleAckEvent(Event event) {\n        OnmsAcknowledgment ack;\n        \n        try {\n            ack = new OnmsAcknowledgment(event);\n            m_ackService.processAck(ack);\n        } catch (ParseException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }","id":12489,"modified_method":"/**\n     * Handles the event driven access to acknowledging <code>OnmsAcknowledgable<\/code>s.  The acknowledgment event\n     * contains 4 parameters: \n     *     ackUser: The user acknowledging the <code>OnmsAcknowledgable<\/code>\n     *     ackAction: ack, unack, esc, clear\n     *     ackType: <code>AckType<\/code. representing either an <code>OnmsAlarm<\/code>, <code>OnmsNotification<\/code>, etc.\n     *     refId: The ID of the <code>OnmsAcknowledgable<\/code>\n     * @param event\n     */\n    @EventHandler(uei=EventConstants.ACKNOWLEDGE_EVENT_UEI)\n    public void handleAckEvent(Event event) {\n        \n        log().info(\"handleAckEvent: Received acknowledgment event: \"+event);\n        \n        OnmsAcknowledgment ack;\n        \n        try {\n            ack = new OnmsAcknowledgment(event);\n            m_ackService.processAck(ack);\n        } catch (ParseException e) {\n            log().error(\"handleAckEvent: unable to process acknowledgment event: \"+event+\"\\t\"+e);\n        }\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processAcks(Collection<OnmsAcknowledgment> acks) {\n        for (OnmsAcknowledgment ack : acks) {\n            processAck(ack);\n        }\n    }","id":12490,"modified_method":"public void processAcks(Collection<OnmsAcknowledgment> acks) {\n        log().info(\"processAcks: Processing \"+acks.size()+\" acknowledgements...\");\n        for (OnmsAcknowledgment ack : acks) {\n            processAck(ack);\n        }\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processAck(OnmsAcknowledgment ack) {\n        \n        List<Acknowledgeable> ackables = m_ackDao.findAcknowledgables(ack);\n        \n        if (ackables == null || ackables.size() < 1) {\n            throw new IllegalStateException(\"No acknowlegables in the database for ack: \"+ack);\n        }\n        \n        for (Acknowledgeable ackable : ackables) {\n            switch (ack.getAckAction()) {\n            case ACKNOWLEDGE:\n                ackable.acknowledge(ack.getAckUser());\n                break;\n            case UNACKNOWLEDGE:\n                ackable.unacknowledge(ack.getAckUser());\n            case CLEAR:\n                ackable.clear(ack.getAckUser());\n                break;\n            case ESCALATE:\n                ackable.escalate(ack.getAckUser());\n            default:\n                break;\n            }\n            \n            m_ackDao.updateAckable(ackable);\n            m_ackDao.save(ack);\n            m_ackDao.flush();\n        }\n    }","id":12491,"modified_method":"public void processAck(OnmsAcknowledgment ack) {\n        log().debug(\"processAck: Searching DB for acknowledgables for ack: \"+ack);\n        List<Acknowledgeable> ackables = m_ackDao.findAcknowledgables(ack);\n        \n        if (ackables == null || ackables.size() < 1) {\n            log().debug(\"processAck: No acknowledgables found.\");\n            throw new IllegalStateException(\"No acknowlegables in the database for ack: \"+ack);\n        }\n\n        log().debug(\"processAck: Found \"+ackables.size()+\". Acknowledging...\");\n        for (Acknowledgeable ackable : ackables) {\n            switch (ack.getAckAction()) {\n            case ACKNOWLEDGE:\n                log().debug(\"processAck: Acknowledging ackable: \"+ackable);\n                ackable.acknowledge(ack.getAckUser());\n                break;\n            case UNACKNOWLEDGE:\n                log().debug(\"processAck: Unacknowledging ackable: \"+ackable);\n                ackable.unacknowledge(ack.getAckUser());\n            case CLEAR:\n                log().debug(\"processAck: Clearing ackable: \"+ackable);\n                ackable.clear(ack.getAckUser());\n                break;\n            case ESCALATE:\n                log().debug(\"processAck: Escalating ackable: \"+ackable);\n                ackable.escalate(ack.getAckUser());\n            default:\n                break;\n            }\n            \n            m_ackDao.updateAckable(ackable);\n            m_ackDao.save(ack);\n            m_ackDao.flush();\n        }\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean unAcknowledgmentMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getUnackExpression();\n        return matcher(messageText, expression);\n    }","id":12492,"modified_method":"public Boolean unAcknowledgmentMatch(List<String> messageText) {\n        String expression = getConfig().getUnackExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean acknowledgmentMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getAckExpression();\n        return matcher(messageText, expression);\n    }","id":12493,"modified_method":"public Boolean acknowledgmentMatch(List<String> messageText) {\n        String expression = getConfig().getAckExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean clearMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getClearExpression();\n        return matcher(messageText, expression);\n    }","id":12494,"modified_method":"public Boolean clearMatch(List<String> messageText) {\n        String expression = getConfig().getClearExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean escalationMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getEscalateExpression();\n        return matcher(messageText, expression);\n    }","id":12495,"modified_method":"public Boolean escalationMatch(List<String> messageText) {\n        String expression = getConfig().getEscalateExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void scheduleReads() {\n        \n        if (m_schedule == null) {\n            m_schedule = ReaderSchedule.createSchedule();\n        }\n        \n        m_executor.scheduleWithFixedDelay(MailAckProcessor.getInstance(), m_schedule.getInitialDelay(), \n                                          m_schedule.getInterval(), m_schedule.getUnit());\n    }","id":12496,"modified_method":"protected void scheduleReads() {\n        log().debug(\"scheduleReads: attempting to acquire lock...\");\n        \n        ReaderSchedule schedule = ReaderSchedule.createSchedule();\n        \n        synchronized (m_lock) {\n            log().debug(\"scheduleReads: acquired lock, creating schedule...\");\n            \n            m_executor.scheduleWithFixedDelay(getMailAckProcessor(), schedule.getInitialDelay(), \n                                              schedule.getInterval(), schedule.getUnit());\n            \n        }\n        \n        log().debug(\"scheduleReads: exited lock, schedule updated.\");\n        log().debug(\"scheduleReads: schedule is:\" +\n        \t\t    \" attempts remaining: \"+schedule.getAttemptsRemaining()+\n        \t\t    \"; initial delay: \"+schedule.getInitialDelay()+\n        \t\t    \"; interval: \"+schedule.getInterval()+\n        \t\t    \"; unit: \"+schedule.getUnit());\n        \n        log().debug(\"scheduleReads: executor details:\"+\n                    \" active count: \"+m_executor.getActiveCount()+\n                    \"; completed task count: \"+m_executor.getCompletedTaskCount()+\n                    \"; task count: \"+m_executor.getTaskCount()+\n                    \"; queue size: \"+m_executor.getQueue().size());\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n    }","id":12497,"modified_method":"public void afterPropertiesSet() throws Exception {\n        boolean state = (m_executor != null && m_mailAckProcessor != null);\n        Assert.state(state, \"Dependency injection failed; one or more fields are null.\");\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void pause() {\n        unScheduleReads();\n    }","id":12498,"modified_method":"public void pause() {\n        log().info(\"pause: Pausing reader...\");\n        unScheduleReads();\n        log().info(\"pause: Reader paused.\");\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void start() {\n        scheduleReads();\n    }","id":12499,"modified_method":"public void start() {\n        log().info(\"start: Starting reader...\");\n        scheduleReads();\n        log().info(\"start: Reader started.\");\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void stop() {\n        unScheduleReads();\n    }","id":12500,"modified_method":"public void stop() {\n        log().info(\"stop: Stopping reader...\");\n        unScheduleReads();\n        log().info(\"stop: Reader stopped.\");\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setExecutor(PausibleScheduledThreadPoolExecutor executor) {\n        m_executor = executor;\n    }","id":12501,"modified_method":"public void setExecutor(PausibleScheduledThreadPoolExecutor executor) {\n        synchronized (m_lock) {\n            m_executor = executor;\n        }\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void resume() {\n        scheduleReads();\n    }","id":12502,"modified_method":"public void resume() {\n        log().info(\"resume: Resuming reader...\");\n        scheduleReads();\n        log().info(\"resume: Reader resumed.\");\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private SendmailMessage createAckMessage(String gmailAccount, String noticeId, String body) {\n        SendmailMessage sendMsg = new SendmailMessage();\n        sendMsg.setTo(gmailAccount+\"@gmail.com\");\n        sendMsg.setFrom(gmailAccount+\"@gmail.com\");\n        sendMsg.setSubject(\"re:Notice #\"+noticeId+\":\");\n        sendMsg.setBody(body);\n        return sendMsg;\n    }","id":12503,"modified_method":"private SendmailMessage createAckMessage(String gmailAccount, String noticeId, String body) {\n        SendmailMessage sendMsg = new SendmailMessage();\n        sendMsg.setTo(gmailAccount+\"@gmail.com\");\n        sendMsg.setFrom(gmailAccount+\"@gmail.com\");\n        sendMsg.setSubject(\"Re: Notice #\"+noticeId+\":\");\n        sendMsg.setBody(body);\n        return sendMsg;\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This test requires that 4 emails can be read from a Google account.  The mails should be\n     * in this order:\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type clear\n     * \n     * The test has been updated to now include sending an email message to a gmail account.  Just correct\n     * the account details for your own local testing.\n     * \n     * @throws JavaMailerException \n     * \n     */\n    @Test\n    @Ignore\n    public void integration() throws JavaMailerException {\n        \n        String gmailAccount = \"foo\";\n        String gmailPassword = \"bar\";\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"2\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"3\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"4\", \"clear\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        //this is bad mojo\n        String readmailConfig = m_daemon.getConfigDao().getConfig().getReadmailConfig();\n        Assert.assertNotNull(readmailConfig);\n        ReadmailConfig config = m_jmDao.getReadMailConfig(readmailConfig);\n        updateConfigWithGoogleReadConfiguration(config, gmailAccount, gmailPassword);\n        \n        List<Message> msgs = MailAckProcessor.getInstance().retrieveAckMessages();\n        \n        List<OnmsAcknowledgment> acks = MailAckProcessor.getInstance().createAcks(msgs);\n        \n        Assert.assertNotNull(acks);\n        Assert.assertEquals(4, acks.size());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(0).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(0).getAckAction());\n        Assert.assertEquals(Integer.valueOf(1), acks.get(0).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(0).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(1).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(1).getAckAction());\n        Assert.assertEquals(Integer.valueOf(2), acks.get(1).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(1).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(2).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(2).getAckAction());\n        Assert.assertEquals(Integer.valueOf(3), acks.get(2).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(2).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(3).getAckType());\n        Assert.assertEquals(AckAction.CLEAR, acks.get(3).getAckAction());\n        Assert.assertEquals(Integer.valueOf(4), acks.get(3).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(3).getAckUser());\n    }","id":12504,"modified_method":"/**\n     * This test requires that 4 emails can be read from a Google account.  The mails should be\n     * in this order:\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type clear\n     * \n     * The test has been updated to now include sending an email message to a gmail account.  Just correct\n     * the account details for your own local testing.\n     * \n     * @throws JavaMailerException \n     * \n     */\n    @Test\n    @Ignore\n    public void testIntegration() throws JavaMailerException {\n        \n        String gmailAccount = getUser();\n        String gmailPassword = getPassword();\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"2\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"3\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"4\", \"clear\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        //this is bad mojo\n        String readmailConfig = m_daemon.getConfigDao().getConfig().getReadmailConfig();\n        Assert.assertNotNull(readmailConfig);\n        ReadmailConfig config = m_jmDao.getReadMailConfig(readmailConfig);\n        updateConfigWithGoogleReadConfiguration(config, gmailAccount, gmailPassword);\n        \n        List<Message> msgs = MailAckProcessor.getInstance().retrieveAckMessages();\n        \n        List<OnmsAcknowledgment> acks = MailAckProcessor.getInstance().createAcks(msgs);\n        \n        Assert.assertNotNull(acks);\n        Assert.assertEquals(4, acks.size());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(0).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(0).getAckAction());\n        Assert.assertEquals(Integer.valueOf(1), acks.get(0).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(0).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(1).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(1).getAckAction());\n        Assert.assertEquals(Integer.valueOf(2), acks.get(1).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(1).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(2).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(2).getAckAction());\n        Assert.assertEquals(Integer.valueOf(3), acks.get(2).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(2).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(3).getAckType());\n        Assert.assertEquals(AckAction.CLEAR, acks.get(3).getAckAction());\n        Assert.assertEquals(Integer.valueOf(4), acks.get(3).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(3).getAckUser());\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Ignore\n    public void findAndProcessAcks() {\n        fail(\"Not yet implemented\");\n    }","id":12505,"modified_method":"@Test\n    @Ignore\n    public void findAndProcessAcks() throws InterruptedException {\n        JavaMailAckReaderImpl reader = new JavaMailAckReaderImpl();\n        PausibleScheduledThreadPoolExecutor executor = new PausibleScheduledThreadPoolExecutor(1);\n        reader.setMailAckProcessor(m_processor);\n        Future<?> f = executor.schedule(m_processor, 5, TimeUnit.SECONDS);\n        reader.setExecutor(executor);\n        m_processor.setJmConfigDao(new JmCnfDao());\n        m_processor.setAckService(m_ackService);\n        m_processor.setAckdConfigDao(createAckdConfigDao());\n        reader.setStatus(1);\n        //Thread.sleep(20000);\n        while (!f.isDone()) {\n            Thread.sleep(10);\n        }\n        Assert.assertTrue(f.isDone());\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void verifyWiring() {\n        Assert.assertNotNull(m_daemon);\n        Assert.assertNotNull(m_jmDao);\n        Assert.assertNotNull(m_processor);\n    }","id":12506,"modified_method":"@Test\n    public void verifyWiring() {\n        Assert.assertNotNull(m_ackService);\n        Assert.assertNotNull(m_daemon);\n        Assert.assertNotNull(m_jmDao);\n        Assert.assertNotNull(m_processor);\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * @return log4j Category\n     */\n    protected Category log() {\n        return ThreadCategory.getInstance(getClass());\n    }","id":12507,"modified_method":"/**\n     * @return log4j Category\n     */\n    protected static Category log() {\n        return ThreadCategory.getInstance();\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Finalizer to be sure and close with the appropriate mode\n     * any open folders\n     */\n    @Override\n    protected void finalize() throws Throwable {\n        if (m_messages != null && !m_messages.isEmpty() && m_messages.get(0).getFolder() != null && m_messages.get(0).getFolder().isOpen()) {\n            m_messages.get(0).getFolder().close(m_deleteOnClose);\n        }\n        super.finalize();\n        \n    }","id":12508,"modified_method":"/**\n     * Finalizer to be sure and close with the appropriate mode\n     * any open folders\n     */\n    @Override\n    protected void finalize() throws Throwable {\n        log().debug(\"finalize: cleaning up mail folder an store connections...\");\n        if (m_messages != null && !m_messages.isEmpty() && m_messages.get(0).getFolder() != null && m_messages.get(0).getFolder().isOpen()) {\n            m_messages.get(0).getFolder().close(m_deleteOnClose);\n        }\n        \n        if (m_store.isConnected()) {\n            m_store.close();\n        }\n        \n        super.finalize();\n        log().debug(\"finalize: Mail folder and store connections closed.\");\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Attempts to reteive the string portion of a message... tries to handle\n     * multipart messages as well.  This seems to be working so far with my tests\n     * but could use some tweaking later as more types of mail servers are used\n     * with this feature.\n     * \n     * @param msg\n     * @return The text portion of an email with each line being an element of the list.\n     * @throws MessagingException\n     * @throws IOException\n     */\n    public static List<String> getText(Message msg) throws MessagingException, IOException {\n        List<String> lines = new ArrayList<String>();\n        \n        String content = null;\n        if (msg.isMimeType(\"text/*\")) {\n            try {\n                content = (String)msg.getContent();\n            } catch (ClassCastException cce) {\n                Object c = msg.getContent();\n                if (c instanceof MimeMultipart) {\n                    for (int cnt = 0; cnt < ((MimeMultipart)c).getCount(); cnt++) {\n                        BodyPart bp = ((MimeMultipart)c).getBodyPart(cnt);\n                        if (bp.isMimeType(\"text/*\")) {\n                            content = (String)bp.getContent();\n                            break;\n                        }\n                    }\n                }\n            }\n            return string2Lines(content);\n        }\n        \n        return lines;\n    }","id":12509,"modified_method":"/**\n     * Attempts to reteive the string portion of a message... tries to handle\n     * multipart messages as well.  This seems to be working so far with my tests\n     * but could use some tweaking later as more types of mail servers are used\n     * with this feature.\n     * \n     * @param msg\n     * @return The text portion of an email with each line being an element of the list.\n     * @throws MessagingException\n     * @throws IOException\n     */\n    public static List<String> getText(Message msg) throws MessagingException, IOException {\n        \n        Object content = null;\n        String text = null;\n        \n        log().debug(\"getText: getting text of message from MimeType: text/*\");\n\n        try {\n            text = (String)msg.getContent();\n\n        } catch (ClassCastException cce) {\n            content = msg.getContent();\n\n            if (content instanceof MimeMultipart) {\n\n                log().debug(\"getText: content is MimeMultipart, checking for text from each part...\");\n\n                for (int cnt = 0; cnt < ((MimeMultipart)content).getCount(); cnt++) {\n                    BodyPart bp = ((MimeMultipart)content).getBodyPart(cnt);\n                    if (bp.isMimeType(\"text/*\")) {\n                        text = (String)bp.getContent();\n                        log().debug(\"getText: found text MIME type: \"+text);\n                        break;\n                    }\n                }\n                log().debug(\"getText: did not find text within MimeMultipart message.\");\n            }\n        }\n        return string2Lines(text);\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<Message> retrieveMessages() throws JavaMailerException {\n        Message[] msgs;\n        Folder mailFolder = null;\n        \n        try {\n            Store store = m_session.getStore(m_config.getReadmailHost().getReadmailProtocol().getTransport());\n            store.connect(m_config.getReadmailHost().getHost(), (int)m_config.getReadmailHost().getPort(), m_config.getUserAuth().getUserName(), m_config.getUserAuth().getPassword());\n            mailFolder = store.getFolder(m_config.getMailFolder());\n            mailFolder.open(Folder.READ_WRITE);\n            msgs = mailFolder.getMessages();\n        } catch (NoSuchProviderException e) {\n            throw new JavaMailerException(\"No provider matching:\"+m_config.getReadmailHost().getReadmailProtocol().getTransport()+\" from config:\"+m_config.getName(), e);\n        } catch (MessagingException e) {\n            throw new JavaMailerException(\"Problem reading messages from configured mail store\", e);\n        }\n        \n        return new ArrayList<Message>(Arrays.asList(msgs));\n    }","id":12510,"modified_method":"public List<Message> retrieveMessages() throws JavaMailerException {\n        Message[] msgs;\n        Folder mailFolder = null;\n        \n        try {\n            m_store = m_session.getStore(m_config.getReadmailHost().getReadmailProtocol().getTransport());\n            m_store.connect(m_config.getReadmailHost().getHost(), (int)m_config.getReadmailHost().getPort(), m_config.getUserAuth().getUserName(), m_config.getUserAuth().getPassword());\n            mailFolder = m_store.getFolder(m_config.getMailFolder());\n            mailFolder.open(Folder.READ_WRITE);\n            msgs = mailFolder.getMessages();\n        } catch (NoSuchProviderException e) {\n            throw new JavaMailerException(\"No provider matching:\"+m_config.getReadmailHost().getReadmailProtocol().getTransport()+\" from config:\"+m_config.getName(), e);\n        } catch (MessagingException e) {\n            throw new JavaMailerException(\"Problem reading messages from configured mail store\", e);\n        }\n        \n        return new ArrayList<Message>(Arrays.asList(msgs));\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This un-ignore this test with a proper gmail account\n     * @throws JavaMailerException\n     * @throws MessagingException\n     * @throws InterruptedException\n     */\n    @Test\n    @Ignore\n    public void testReadMessagesWithSearchTerm() throws JavaMailerException, MessagingException, InterruptedException {\n        \n        String gmailAccount = \"foo\";\n        String gmailPassword = \"bar\";\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        String term1 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term2 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term3 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", term1, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        sendMsg = createAckMessage(gmailAccount, \"2\", term2, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n\n        sendMsg = createAckMessage(gmailAccount, \"3\", term3, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        JavaReadMailer readMailer = createGoogleReadMailer(gmailAccount, gmailPassword);\n        \n        //See if search finds all 3 messages\n        SearchTerm st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        List<Message> msgs = null;\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertEquals(3, msgs.size());\n        \n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        \n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        //Should find only term1 and term2 messages\n        Assert.assertNotNull(msgs);\n        Assert.assertEquals(2, msgs.size());\n\n        //Now cleanup\n        //Delete the term1 and term2 messages\n        for (Message msg : msgs) {\n            msg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Find and delete the term3 messages\n        st = new SubjectTerm(\"*.\"+term3+\" #.*\");\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertNotNull(msgs);\n        Assert.assertTrue(msgs.size() >= 1);\n        for (Message eventMsg : msgs) {\n            eventMsg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Make sure they're all gone\n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        Assert.assertTrue(msgs.isEmpty());\n        \n    }","id":12511,"modified_method":"/**\n     * Un-ignore this test with a proper gmail account\n     * @throws JavaMailerException\n     * @throws MessagingException\n     * @throws InterruptedException\n     */\n    @Test\n    @Ignore\n    public void testReadMessagesWithSearchTerm() throws JavaMailerException, MessagingException, InterruptedException {\n        \n        String gmailAccount = getUser();\n        String gmailPassword = getPassword();\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        String term1 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term2 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term3 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", term1, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        sendMsg = createAckMessage(gmailAccount, \"2\", term2, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n\n        sendMsg = createAckMessage(gmailAccount, \"3\", term3, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        JavaReadMailer readMailer = createGoogleReadMailer(gmailAccount, gmailPassword);\n        \n        //See if search finds all 3 messages\n        SearchTerm st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        List<Message> msgs = null;\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertEquals(3, msgs.size());\n        \n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        \n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        //Should find only term1 and term2 messages\n        Assert.assertNotNull(msgs);\n        Assert.assertEquals(2, msgs.size());\n\n        //Now cleanup\n        //Delete the term1 and term2 messages\n        for (Message msg : msgs) {\n            msg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Find and delete the term3 messages\n        st = new SubjectTerm(\"*.\"+term3+\" #.*\");\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertNotNull(msgs);\n        Assert.assertTrue(msgs.size() >= 1);\n        for (Message eventMsg : msgs) {\n            eventMsg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Make sure they're all gone\n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        Assert.assertTrue(msgs.isEmpty());\n        \n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized static MailAckProcessor getInstance() {\n        return m_instance;\n    }","id":12512,"modified_method":"public static MailAckProcessor getInstance() {\n        synchronized (m_lock) {\n            return m_instance;\n        }\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private String createLog(Message msg) {\n        StringBuilder bldr = new StringBuilder();\n        Enumeration<Header> allHeaders;\n        try {\n            allHeaders = msg.getAllHeaders();\n        } catch (MessagingException e) {\n            return null;\n        }\n        while (allHeaders.hasMoreElements()) {\n            Header header = allHeaders.nextElement();\n            String name = header.getName();\n            String value = header.getValue();\n            bldr.append(name);\n            bldr.append(\":\");\n            bldr.append(value);\n            bldr.append(\"\\n\");\n        }\n        return bldr.toString();\n    }","id":12513,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private String createLog(Message msg) {\n        StringBuilder bldr = new StringBuilder();\n        Enumeration<Header> allHeaders;\n        try {\n            allHeaders = msg.getAllHeaders();\n        } catch (MessagingException e) {\n            return null;\n        }\n        while (allHeaders.hasMoreElements()) {\n            Header header = allHeaders.nextElement();\n            String name = header.getName();\n            String value = header.getValue();\n            bldr.append(name);\n            bldr.append(\":\");\n            bldr.append(value);\n            bldr.append(\"\\n\");\n        }\n        return StringUtils.truncate(bldr.toString(), LOG_FIELD_WIDTH);\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void setAckdConfigDao(AckdConfigurationDao configDao) {\n        m_daemonConfigDao = configDao;\n    }","id":12514,"modified_method":"public void setAckdConfigDao(AckdConfigurationDao configDao) {\n        synchronized (m_lock) {\n            m_daemonConfigDao = configDao;\n        }\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected static Integer detectId(final String subject, final String expression) {\n        Integer id = null;\n\n        //TODO: force opennms config '~' style regex attribute identity because this is the only way for this to work\n        String ackExpression = null;\n        \n        if (expression.startsWith(\"~\")) {\n            ackExpression = expression.substring(1);\n        } else {\n            ackExpression = expression;\n        }\n        Pattern pattern = Pattern.compile(ackExpression);\n        Matcher matcher = pattern.matcher(subject);\n\n        if (matcher.matches() && matcher.groupCount() > 0) {\n            id = Integer.valueOf(matcher.group(1));\n        }\n\n        return id;\n    }","id":12515,"modified_method":"protected static Integer detectId(final String subject, final String expression) {\n        log().debug(\"detectId: Detecting aknowledgable ID from subject: \"+subject+\" using expression: \"+expression);\n        Integer id = null;\n\n        //TODO: force opennms config '~' style regex attribute identity because this is the only way for this to work\n        String ackExpression = null;\n        \n        if (expression.startsWith(\"~\")) {\n            ackExpression = expression.substring(1);\n        } else {\n            ackExpression = expression;\n        }\n        Pattern pattern = Pattern.compile(ackExpression);\n        Matcher matcher = pattern.matcher(subject);\n\n        if (matcher.matches() && matcher.groupCount() > 0) {\n            id = Integer.valueOf(matcher.group(1));\n            log().debug(\"detectId: found acknowledgable ID: \"+id);\n        } else {\n            log().debug(\"detectId: no acknowledgable ID found.\");\n        }\n\n        return id;\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void run() {\n        findAndProcessAcks();\n    }","id":12516,"modified_method":"public void run() {\n        try {\n            log().info(\"run: Processing mail acknowledgments (opposed to femail acks ;)...\" );\n            findAndProcessAcks();\n            log().info(\"run: Finished processing mail acknowledgments.\" );\n        } catch (Exception e) {\n            log().debug(\"run: threw exception: \"+e);\n        } finally {\n            log().debug(\"run: method completed.\");\n        }\n        \n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        m_instance = this;\n    }","id":12517,"modified_method":"public void afterPropertiesSet() throws Exception {\n        log().debug(\"afterPropertiesSet: \");\n        m_instance = this;\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void setAckService(AckService ackService) {\n        m_ackService = ackService;\n    }","id":12518,"modified_method":"public void setAckService(AckService ackService) {\n        synchronized (m_lock) {\n            m_ackService = ackService;\n        }\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected List<OnmsAcknowledgment> createAcks(List<Message> msgs) {\n        List<OnmsAcknowledgment> acks = null;\n        \n        if (msgs != null && msgs.size() > 0) {\n            acks = new ArrayList<OnmsAcknowledgment>();\n            for (Message msg : msgs) {\n                try {\n                    Integer id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getNotifyidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.NOTIFICATION);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        continue;\n                    }\n                    id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getAlarmidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.ALARM);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        continue;\n                    }\n                    \n                } catch (MessagingException e) {\n                    //FIXME: do something audit like here\n                    e.printStackTrace();\n                    continue;\n                } catch (IOException e) {\n                    // FIXME: ditto\n                    e.printStackTrace();\n                    continue;\n                }\n            }\n        }\n        return acks;\n    }","id":12519,"modified_method":"/**\n     * Creates <code>OnmsAcknowledgment<\/code>s for each notification reply email message determined\n     * to have an acknowledgment action.\n     */\n    protected List<OnmsAcknowledgment> createAcks(List<Message> msgs) {\n        \n        log().info(\"createAcks: Detecting and possibly creating acknowledgments from \"+msgs.size()+\" messages...\");\n        List<OnmsAcknowledgment> acks = null;\n        \n        if (msgs != null && msgs.size() > 0) {\n            acks = new ArrayList<OnmsAcknowledgment>();\n            \n            Iterator<Message> it = msgs.iterator();\n            while (it.hasNext()) {\n                Message msg = (Message) it.next();\n                try {\n                    \n                    log().debug(\"createAcks: detecting acks in message: \"+msg.getSubject());\n                    Integer id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getNotifyidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.NOTIFICATION);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        log().debug(\"createAcks: found notification acknowledgment: \"+ack);\n                        continue;\n                    }\n                    \n                    id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getAlarmidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.ALARM);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        log().debug(\"createAcks: found alarm acknowledgment.\"+ack);\n                        continue;\n                    }\n                    \n                } catch (MessagingException e) {\n                    log().error(\"createAcks: messaging error: \"+e);\n                } catch (IOException e) {\n                    log().error(\"createAcks: IO problem: \"+e);\n                }\n            }\n        } else {\n            log().debug(\"createAcks: No messages for acknowledgment processing.\");\n        }\n        \n        log().info(\"createAcks: Completed detecting and possibly creating acknowledgments.  Created \"+\n                   (acks == null? 0 : acks.size())+\" acknowledgments.\");\n        return acks;\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected AckAction determineAckAction(Message msg) throws IOException, MessagingException {\n        \n        List<String> messageText = JavaReadMailer.getText(msg);\n        \n        AckAction action = AckAction.UNSPECIFIED;\n        if (messageText != null && messageText.size() > 0) {\n            \n            if (m_daemonConfigDao.acknowledgmentMatch(messageText)) {\n                action = AckAction.ACKNOWLEDGE;\n            } else if (m_daemonConfigDao.clearMatch(messageText)) {\n                action = AckAction.CLEAR;\n            } else if (m_daemonConfigDao.escalationMatch(messageText)) {\n                action = AckAction.ESCALATE;\n            } else if (m_daemonConfigDao.unAcknowledgmentMatch(messageText)) {\n                action = AckAction.UNACKNOWLEDGE;\n            } else {\n                action = AckAction.UNSPECIFIED;\n            }\n            \n        } else {\n            //TODO something smart\n        }\n        return action;\n    }","id":12520,"modified_method":"protected static AckAction determineAckAction(Message msg) throws IOException, MessagingException {\n        log().info(\"determineAckAcktion: evaluating message looking for user specified acktion...\");\n        \n        List<String> messageText = JavaReadMailer.getText(msg);\n        \n        AckAction action = AckAction.UNSPECIFIED;\n        if (messageText != null && messageText.size() > 0) {\n            \n            log().debug(\"determineAction: message text: \"+messageText);\n            \n            if (m_daemonConfigDao.acknowledgmentMatch(messageText)) {\n                action = AckAction.ACKNOWLEDGE;\n            } else if (m_daemonConfigDao.clearMatch(messageText)) {\n                action = AckAction.CLEAR;\n            } else if (m_daemonConfigDao.escalationMatch(messageText)) {\n                action = AckAction.ESCALATE;\n            } else if (m_daemonConfigDao.unAcknowledgmentMatch(messageText)) {\n                action = AckAction.UNACKNOWLEDGE;\n            } else {\n                action = AckAction.UNSPECIFIED;\n            }\n            \n        } else {\n            String concern = \"determineAckAction: a reply message to a notification has no text to evaluate.  \" +\n            \t\t\"No action can be determined.\";\n            log().warn(concern);\n            throw new MessagingException(concern);\n        }\n        log().info(\"determineAckAcktion: evaluated message, \"+action+\" action determined from message.\");\n        return action;\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected List<Message> retrieveAckMessages() throws JavaMailerException {\n        ReadmailConfig config = m_jmConfigDao.getReadMailConfig(m_daemonConfigDao.getConfig().getReadmailConfig());\n        \n        //TODO: make flag for folder open mode\n        //TODO: Make sure configuration supports flag for deleting acknowledgments\n        JavaReadMailer readMailer = new JavaReadMailer(config, true);\n\n        String notifRe = m_daemonConfigDao.getConfig().getNotifyidMatchExpression();\n        notifRe = notifRe.startsWith(\"~\") ? notifRe.substring(1) : notifRe;\n        \n        String alarmRe = m_daemonConfigDao.getConfig().getAlarmidMatchExpression();\n        alarmRe = alarmRe.startsWith(\"~\") ? alarmRe.substring(1) : alarmRe;\n        \n        List<Message> msgs = readMailer.retrieveMessages();\n        for (Iterator<Message> iterator = msgs.iterator(); iterator.hasNext();) {\n            Message msg = iterator.next();\n            \n            try {\n                String subject = msg.getSubject();\n                if (!(subject.matches(notifRe) || subject.matches(alarmRe))) {\n                    iterator.remove();\n                } else {\n                    //delete this non-ack message because the acks will get deleted later and the config\n                    //indicates delete all mail from mailbox\n                    if (config.isDeleteAllMail()) {\n                        msg.setFlag(Flag.DELETED, true);\n                    }\n                }\n            } catch (MessagingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n        return msgs;\n    }","id":12521,"modified_method":"protected List<Message> retrieveAckMessages() throws JavaMailerException {\n        log().debug(\"retrieveAckMessages: Retrieving messages...\");\n        \n        ReadmailConfig config = m_jmConfigDao.getReadMailConfig(m_daemonConfigDao.getConfig().getReadmailConfig());\n        \n        \n        log().debug(\"retrieveAckMessages: creating JavaReadMailer with config: \" +\n        \t\t\"host: \" + config.getReadmailHost().getHost() + \n        \t\t\" port: \" + config.getReadmailHost().getPort() +\n        \t\t\" ssl: \" + config.getReadmailHost().getReadmailProtocol().getSslEnable() +\n        \t\t\" transport: \" + config.getReadmailHost().getReadmailProtocol().getTransport() +\n        \t\t\" user: \"+config.getUserAuth().getUserName() +\n        \t\t\" password: \"+config.getUserAuth().getPassword());\n        \n        //TODO: make flag for folder open mode\n        //TODO: Make sure configuration supports flag for deleting acknowledgments\n        JavaReadMailer readMailer = new JavaReadMailer(config, true);\n\n        String notifRe = m_daemonConfigDao.getConfig().getNotifyidMatchExpression();\n        notifRe = notifRe.startsWith(\"~\") ? notifRe.substring(1) : notifRe;\n        \n        String alarmRe = m_daemonConfigDao.getConfig().getAlarmidMatchExpression();\n        alarmRe = alarmRe.startsWith(\"~\") ? alarmRe.substring(1) : alarmRe;\n        \n        List<Message> msgs = readMailer.retrieveMessages();\n        log().info(\"retrieveAckMessages: Iterating \"+msgs.size()+\" messages with notifRe: \"+notifRe+\"and alarmRe: \"+alarmRe);\n        \n        for (Iterator<Message> iterator = msgs.iterator(); iterator.hasNext();) {\n            Message msg = iterator.next();\n            try {\n                String subject = msg.getSubject();\n                \n                log().debug(\"retrieveAckMessages: comparing subject: \"+subject);\n                if (!(subject.matches(notifRe) || subject.matches(alarmRe))) {\n                    \n                    log().debug(\"retrieveAckMessages: Subject doesn't match either Re.\");\n                    iterator.remove();\n                } else {\n                    //TODO: this just looks wrong\n                    //delete this non-ack message because the acks will get deleted later and the config\n                    //indicates delete all mail from mailbox\n                    log().debug(\"retrieveAckMessages: Subject matched, setting deleted flag\");\n                    if (config.isDeleteAllMail()) {\n                        msg.setFlag(Flag.DELETED, true);\n                    }\n                }\n            } catch (Throwable t) {\n                log().error(\"retrieveAckMessages: Problem processing message: \"+t);\n            }\n        }\n        return msgs;\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void findAndProcessAcks() {\n        \n        Collection<OnmsAcknowledgment> acks;\n\n        try {\n            List<Message> msgs = retrieveAckMessages();  //TODO: need a read *new* messages feature\n            acks = createAcks(msgs);\n            m_ackService.processAcks(acks);\n        } catch (JavaMailerException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }","id":12522,"modified_method":"/**\n     * Retrieve the messages in the configured mail folder, searches for notification replies,\n     * and creates and processes the acknowledgments.\n     */\n    protected void findAndProcessAcks() {\n        \n        log().debug(\"findAndProcessAcks: checking for acknowledgments...\");\n        Collection<OnmsAcknowledgment> acks;\n\n        try {\n            List<Message> msgs = retrieveAckMessages();  //TODO: need a read *new* messages feature\n            acks = createAcks(msgs);\n            \n            if (acks != null) {\n                log().debug(\"findAndProcessAcks: Found \"+acks.size()+\" acks.  Processing...\");\n                m_ackService.processAcks(acks);\n                log().debug(\"findAndProcessAcks: acks processed.\");\n            }\n        } catch (JavaMailerException e) {\n            log().error(\"findAndProcessAcks: Exception thrown in JavaMail: \"+e);\n            e.printStackTrace();\n        }\n        \n        log().debug(\"findAndProcessAcks: completed checking for and processing acknowledgments.\");\n    }","commit_id":"0b4816088e460e4d1756fb7e6289597a9310bd20","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@EventHandler(uei=EventConstants.ACKNOWLEDGE_EVENT_UEI)\n    public void handleAckEvent(Event event) {\n        OnmsAcknowledgment ack;\n        \n        try {\n            ack = new OnmsAcknowledgment(event);\n            m_ackService.processAck(ack);\n        } catch (ParseException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }","id":12523,"modified_method":"/**\n     * Handles the event driven access to acknowledging <code>OnmsAcknowledgable<\/code>s.  The acknowledgment event\n     * contains 4 parameters: \n     *     ackUser: The user acknowledging the <code>OnmsAcknowledgable<\/code>\n     *     ackAction: ack, unack, esc, clear\n     *     ackType: <code>AckType<\/code. representing either an <code>OnmsAlarm<\/code>, <code>OnmsNotification<\/code>, etc.\n     *     refId: The ID of the <code>OnmsAcknowledgable<\/code>\n     * @param event\n     */\n    @EventHandler(uei=EventConstants.ACKNOWLEDGE_EVENT_UEI)\n    public void handleAckEvent(Event event) {\n        \n        log().info(\"handleAckEvent: Received acknowledgment event: \"+event);\n        \n        OnmsAcknowledgment ack;\n        \n        try {\n            ack = new OnmsAcknowledgment(event);\n            m_ackService.processAck(ack);\n        } catch (ParseException e) {\n            log().error(\"handleAckEvent: unable to process acknowledgment event: \"+event+\"\\t\"+e);\n        }\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void start() {\n        for (AckReader reader : m_ackReaders) {\n            reader.start();\n        }\n    }","id":12524,"modified_method":"public void start() {\n        log().info(\"start: Starting \"+m_ackReaders.size()+\" readers...\");\n        for (AckReader reader : m_ackReaders) {\n            log().debug(\"start: Starting reader: \"+reader);\n            reader.start();\n        }\n        log().info(\"start: readers started.\");\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processAck(OnmsAcknowledgment ack) {\n        \n        List<Acknowledgeable> ackables = m_ackDao.findAcknowledgables(ack);\n        \n        if (ackables == null || ackables.size() < 1) {\n            throw new IllegalStateException(\"No acknowlegables in the database for ack: \"+ack);\n        }\n        \n        for (Acknowledgeable ackable : ackables) {\n            switch (ack.getAckAction()) {\n            case ACKNOWLEDGE:\n                ackable.acknowledge(ack.getAckUser());\n                break;\n            case UNACKNOWLEDGE:\n                ackable.unacknowledge(ack.getAckUser());\n            case CLEAR:\n                ackable.clear(ack.getAckUser());\n                break;\n            case ESCALATE:\n                ackable.escalate(ack.getAckUser());\n            default:\n                break;\n            }\n            \n            m_ackDao.updateAckable(ackable);\n            m_ackDao.save(ack);\n            m_ackDao.flush();\n        }\n    }","id":12525,"modified_method":"public void processAck(OnmsAcknowledgment ack) {\n        log().debug(\"processAck: Searching DB for acknowledgables for ack: \"+ack);\n        List<Acknowledgeable> ackables = m_ackDao.findAcknowledgables(ack);\n        \n        if (ackables == null || ackables.size() < 1) {\n            log().debug(\"processAck: No acknowledgables found.\");\n            throw new IllegalStateException(\"No acknowlegables in the database for ack: \"+ack);\n        }\n\n        log().debug(\"processAck: Found \"+ackables.size()+\". Acknowledging...\");\n        for (Acknowledgeable ackable : ackables) {\n            switch (ack.getAckAction()) {\n            case ACKNOWLEDGE:\n                log().debug(\"processAck: Acknowledging ackable: \"+ackable);\n                ackable.acknowledge(ack.getAckUser());\n                break;\n            case UNACKNOWLEDGE:\n                log().debug(\"processAck: Unacknowledging ackable: \"+ackable);\n                ackable.unacknowledge(ack.getAckUser());\n            case CLEAR:\n                log().debug(\"processAck: Clearing ackable: \"+ackable);\n                ackable.clear(ack.getAckUser());\n                break;\n            case ESCALATE:\n                log().debug(\"processAck: Escalating ackable: \"+ackable);\n                ackable.escalate(ack.getAckUser());\n            default:\n                break;\n            }\n            \n            m_ackDao.updateAckable(ackable);\n            m_ackDao.save(ack);\n            m_ackDao.flush();\n        }\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processAcks(Collection<OnmsAcknowledgment> acks) {\n        for (OnmsAcknowledgment ack : acks) {\n            processAck(ack);\n        }\n    }","id":12526,"modified_method":"public void processAcks(Collection<OnmsAcknowledgment> acks) {\n        log().info(\"processAcks: Processing \"+acks.size()+\" acknowledgements...\");\n        for (OnmsAcknowledgment ack : acks) {\n            processAck(ack);\n        }\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean escalationMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getEscalateExpression();\n        return matcher(messageText, expression);\n    }","id":12527,"modified_method":"public Boolean escalationMatch(List<String> messageText) {\n        String expression = getConfig().getEscalateExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean acknowledgmentMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getAckExpression();\n        return matcher(messageText, expression);\n    }","id":12528,"modified_method":"public Boolean acknowledgmentMatch(List<String> messageText) {\n        String expression = getConfig().getAckExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean clearMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getClearExpression();\n        return matcher(messageText, expression);\n    }","id":12529,"modified_method":"public Boolean clearMatch(List<String> messageText) {\n        String expression = getConfig().getClearExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean unAcknowledgmentMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getUnackExpression();\n        return matcher(messageText, expression);\n    }","id":12530,"modified_method":"public Boolean unAcknowledgmentMatch(List<String> messageText) {\n        String expression = getConfig().getUnackExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void scheduleReads() {\n        \n        if (m_schedule == null) {\n            m_schedule = ReaderSchedule.createSchedule();\n        }\n        \n        m_executor.scheduleWithFixedDelay(MailAckProcessor.getInstance(), m_schedule.getInitialDelay(), \n                                          m_schedule.getInterval(), m_schedule.getUnit());\n    }","id":12531,"modified_method":"protected void scheduleReads() {\n        log().debug(\"scheduleReads: attempting to acquire lock...\");\n        \n        ReaderSchedule schedule = ReaderSchedule.createSchedule();\n        \n        synchronized (m_lock) {\n            log().debug(\"scheduleReads: acquired lock, creating schedule...\");\n            \n            m_executor.scheduleWithFixedDelay(getMailAckProcessor(), schedule.getInitialDelay(), \n                                              schedule.getInterval(), schedule.getUnit());\n            \n        }\n        \n        log().debug(\"scheduleReads: exited lock, schedule updated.\");\n        log().debug(\"scheduleReads: schedule is:\" +\n        \t\t    \" attempts remaining: \"+schedule.getAttemptsRemaining()+\n        \t\t    \"; initial delay: \"+schedule.getInitialDelay()+\n        \t\t    \"; interval: \"+schedule.getInterval()+\n        \t\t    \"; unit: \"+schedule.getUnit());\n        \n        log().debug(\"scheduleReads: executor details:\"+\n                    \" active count: \"+m_executor.getActiveCount()+\n                    \"; completed task count: \"+m_executor.getCompletedTaskCount()+\n                    \"; task count: \"+m_executor.getTaskCount()+\n                    \"; queue size: \"+m_executor.getQueue().size());\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void pause() {\n        unScheduleReads();\n    }","id":12532,"modified_method":"public void pause() {\n        log().info(\"pause: Pausing reader...\");\n        unScheduleReads();\n        log().info(\"pause: Reader paused.\");\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n    }","id":12533,"modified_method":"public void afterPropertiesSet() throws Exception {\n        boolean state = (m_executor != null && m_mailAckProcessor != null);\n        Assert.state(state, \"Dependency injection failed; one or more fields are null.\");\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setExecutor(PausibleScheduledThreadPoolExecutor executor) {\n        m_executor = executor;\n    }","id":12534,"modified_method":"public void setExecutor(PausibleScheduledThreadPoolExecutor executor) {\n        synchronized (m_lock) {\n            m_executor = executor;\n        }\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void start() {\n        scheduleReads();\n    }","id":12535,"modified_method":"public void start() {\n        log().info(\"start: Starting reader...\");\n        scheduleReads();\n        log().info(\"start: Reader started.\");\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void stop() {\n        unScheduleReads();\n    }","id":12536,"modified_method":"public void stop() {\n        log().info(\"stop: Stopping reader...\");\n        unScheduleReads();\n        log().info(\"stop: Reader stopped.\");\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void resume() {\n        scheduleReads();\n    }","id":12537,"modified_method":"public void resume() {\n        log().info(\"resume: Resuming reader...\");\n        scheduleReads();\n        log().info(\"resume: Reader resumed.\");\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void verifyWiring() {\n        Assert.assertNotNull(m_daemon);\n        Assert.assertNotNull(m_jmDao);\n        Assert.assertNotNull(m_processor);\n    }","id":12538,"modified_method":"@Test\n    public void verifyWiring() {\n        Assert.assertNotNull(m_ackService);\n        Assert.assertNotNull(m_daemon);\n        Assert.assertNotNull(m_jmDao);\n        Assert.assertNotNull(m_processor);\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This test requires that 4 emails can be read from a Google account.  The mails should be\n     * in this order:\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type clear\n     * \n     * The test has been updated to now include sending an email message to a gmail account.  Just correct\n     * the account details for your own local testing.\n     * \n     * @throws JavaMailerException \n     * \n     */\n    @Test\n    @Ignore\n    public void integration() throws JavaMailerException {\n        \n        String gmailAccount = \"foo\";\n        String gmailPassword = \"bar\";\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"2\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"3\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"4\", \"clear\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        //this is bad mojo\n        String readmailConfig = m_daemon.getConfigDao().getConfig().getReadmailConfig();\n        Assert.assertNotNull(readmailConfig);\n        ReadmailConfig config = m_jmDao.getReadMailConfig(readmailConfig);\n        updateConfigWithGoogleReadConfiguration(config, gmailAccount, gmailPassword);\n        \n        List<Message> msgs = MailAckProcessor.getInstance().retrieveAckMessages();\n        \n        List<OnmsAcknowledgment> acks = MailAckProcessor.getInstance().createAcks(msgs);\n        \n        Assert.assertNotNull(acks);\n        Assert.assertEquals(4, acks.size());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(0).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(0).getAckAction());\n        Assert.assertEquals(Integer.valueOf(1), acks.get(0).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(0).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(1).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(1).getAckAction());\n        Assert.assertEquals(Integer.valueOf(2), acks.get(1).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(1).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(2).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(2).getAckAction());\n        Assert.assertEquals(Integer.valueOf(3), acks.get(2).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(2).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(3).getAckType());\n        Assert.assertEquals(AckAction.CLEAR, acks.get(3).getAckAction());\n        Assert.assertEquals(Integer.valueOf(4), acks.get(3).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(3).getAckUser());\n    }","id":12539,"modified_method":"/**\n     * This test requires that 4 emails can be read from a Google account.  The mails should be\n     * in this order:\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type clear\n     * \n     * The test has been updated to now include sending an email message to a gmail account.  Just correct\n     * the account details for your own local testing.\n     * \n     * @throws JavaMailerException \n     * \n     */\n    @Test\n    @Ignore\n    public void testIntegration() throws JavaMailerException {\n        \n        String gmailAccount = getUser();\n        String gmailPassword = getPassword();\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"2\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"3\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"4\", \"clear\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        //this is bad mojo\n        String readmailConfig = m_daemon.getConfigDao().getConfig().getReadmailConfig();\n        Assert.assertNotNull(readmailConfig);\n        ReadmailConfig config = m_jmDao.getReadMailConfig(readmailConfig);\n        updateConfigWithGoogleReadConfiguration(config, gmailAccount, gmailPassword);\n        \n        List<Message> msgs = MailAckProcessor.getInstance().retrieveAckMessages();\n        \n        List<OnmsAcknowledgment> acks = MailAckProcessor.getInstance().createAcks(msgs);\n        \n        Assert.assertNotNull(acks);\n        Assert.assertEquals(4, acks.size());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(0).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(0).getAckAction());\n        Assert.assertEquals(Integer.valueOf(1), acks.get(0).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(0).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(1).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(1).getAckAction());\n        Assert.assertEquals(Integer.valueOf(2), acks.get(1).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(1).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(2).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(2).getAckAction());\n        Assert.assertEquals(Integer.valueOf(3), acks.get(2).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(2).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(3).getAckType());\n        Assert.assertEquals(AckAction.CLEAR, acks.get(3).getAckAction());\n        Assert.assertEquals(Integer.valueOf(4), acks.get(3).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(3).getAckUser());\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private SendmailMessage createAckMessage(String gmailAccount, String noticeId, String body) {\n        SendmailMessage sendMsg = new SendmailMessage();\n        sendMsg.setTo(gmailAccount+\"@gmail.com\");\n        sendMsg.setFrom(gmailAccount+\"@gmail.com\");\n        sendMsg.setSubject(\"re:Notice #\"+noticeId+\":\");\n        sendMsg.setBody(body);\n        return sendMsg;\n    }","id":12540,"modified_method":"private SendmailMessage createAckMessage(String gmailAccount, String noticeId, String body) {\n        SendmailMessage sendMsg = new SendmailMessage();\n        sendMsg.setTo(gmailAccount+\"@gmail.com\");\n        sendMsg.setFrom(gmailAccount+\"@gmail.com\");\n        sendMsg.setSubject(\"Re: Notice #\"+noticeId+\":\");\n        sendMsg.setBody(body);\n        return sendMsg;\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Ignore\n    public void findAndProcessAcks() {\n        fail(\"Not yet implemented\");\n    }","id":12541,"modified_method":"@Test\n    @Ignore\n    public void findAndProcessAcks() throws InterruptedException {\n        JavaMailAckReaderImpl reader = new JavaMailAckReaderImpl();\n        PausibleScheduledThreadPoolExecutor executor = new PausibleScheduledThreadPoolExecutor(1);\n        reader.setMailAckProcessor(m_processor);\n        Future<?> f = executor.schedule(m_processor, 5, TimeUnit.SECONDS);\n        reader.setExecutor(executor);\n        m_processor.setJmConfigDao(new JmCnfDao());\n        m_processor.setAckService(m_ackService);\n        m_processor.setAckdConfigDao(createAckdConfigDao());\n        reader.setStatus(1);\n        //Thread.sleep(20000);\n        while (!f.isDone()) {\n            Thread.sleep(10);\n        }\n        Assert.assertTrue(f.isDone());\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * @return log4j Category\n     */\n    protected Category log() {\n        return ThreadCategory.getInstance(getClass());\n    }","id":12542,"modified_method":"/**\n     * @return log4j Category\n     */\n    protected static Category log() {\n        return ThreadCategory.getInstance();\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<Message> retrieveMessages() throws JavaMailerException {\n        Message[] msgs;\n        Folder mailFolder = null;\n        \n        try {\n            Store store = m_session.getStore(m_config.getReadmailHost().getReadmailProtocol().getTransport());\n            store.connect(m_config.getReadmailHost().getHost(), (int)m_config.getReadmailHost().getPort(), m_config.getUserAuth().getUserName(), m_config.getUserAuth().getPassword());\n            mailFolder = store.getFolder(m_config.getMailFolder());\n            mailFolder.open(Folder.READ_WRITE);\n            msgs = mailFolder.getMessages();\n        } catch (NoSuchProviderException e) {\n            throw new JavaMailerException(\"No provider matching:\"+m_config.getReadmailHost().getReadmailProtocol().getTransport()+\" from config:\"+m_config.getName(), e);\n        } catch (MessagingException e) {\n            throw new JavaMailerException(\"Problem reading messages from configured mail store\", e);\n        }\n        \n        return new ArrayList<Message>(Arrays.asList(msgs));\n    }","id":12543,"modified_method":"public List<Message> retrieveMessages() throws JavaMailerException {\n        Message[] msgs;\n        Folder mailFolder = null;\n        \n        try {\n            m_store = m_session.getStore(m_config.getReadmailHost().getReadmailProtocol().getTransport());\n            m_store.connect(m_config.getReadmailHost().getHost(), (int)m_config.getReadmailHost().getPort(), m_config.getUserAuth().getUserName(), m_config.getUserAuth().getPassword());\n            mailFolder = m_store.getFolder(m_config.getMailFolder());\n            mailFolder.open(Folder.READ_WRITE);\n            msgs = mailFolder.getMessages();\n        } catch (NoSuchProviderException e) {\n            throw new JavaMailerException(\"No provider matching:\"+m_config.getReadmailHost().getReadmailProtocol().getTransport()+\" from config:\"+m_config.getName(), e);\n        } catch (MessagingException e) {\n            throw new JavaMailerException(\"Problem reading messages from configured mail store\", e);\n        }\n        \n        return new ArrayList<Message>(Arrays.asList(msgs));\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Attempts to reteive the string portion of a message... tries to handle\n     * multipart messages as well.  This seems to be working so far with my tests\n     * but could use some tweaking later as more types of mail servers are used\n     * with this feature.\n     * \n     * @param msg\n     * @return The text portion of an email with each line being an element of the list.\n     * @throws MessagingException\n     * @throws IOException\n     */\n    public static List<String> getText(Message msg) throws MessagingException, IOException {\n        List<String> lines = new ArrayList<String>();\n        \n        String content = null;\n        if (msg.isMimeType(\"text/*\")) {\n            try {\n                content = (String)msg.getContent();\n            } catch (ClassCastException cce) {\n                Object c = msg.getContent();\n                if (c instanceof MimeMultipart) {\n                    for (int cnt = 0; cnt < ((MimeMultipart)c).getCount(); cnt++) {\n                        BodyPart bp = ((MimeMultipart)c).getBodyPart(cnt);\n                        if (bp.isMimeType(\"text/*\")) {\n                            content = (String)bp.getContent();\n                            break;\n                        }\n                    }\n                }\n            }\n            return string2Lines(content);\n        }\n        \n        return lines;\n    }","id":12544,"modified_method":"/**\n     * Attempts to reteive the string portion of a message... tries to handle\n     * multipart messages as well.  This seems to be working so far with my tests\n     * but could use some tweaking later as more types of mail servers are used\n     * with this feature.\n     * \n     * @param msg\n     * @return The text portion of an email with each line being an element of the list.\n     * @throws MessagingException\n     * @throws IOException\n     */\n    public static List<String> getText(Message msg) throws MessagingException, IOException {\n        \n        Object content = null;\n        String text = null;\n        \n        log().debug(\"getText: getting text of message from MimeType: text/*\");\n\n        try {\n            text = (String)msg.getContent();\n\n        } catch (ClassCastException cce) {\n            content = msg.getContent();\n\n            if (content instanceof MimeMultipart) {\n\n                log().debug(\"getText: content is MimeMultipart, checking for text from each part...\");\n\n                for (int cnt = 0; cnt < ((MimeMultipart)content).getCount(); cnt++) {\n                    BodyPart bp = ((MimeMultipart)content).getBodyPart(cnt);\n                    if (bp.isMimeType(\"text/*\")) {\n                        text = (String)bp.getContent();\n                        log().debug(\"getText: found text MIME type: \"+text);\n                        break;\n                    }\n                }\n                log().debug(\"getText: did not find text within MimeMultipart message.\");\n            }\n        }\n        return string2Lines(text);\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Finalizer to be sure and close with the appropriate mode\n     * any open folders\n     */\n    @Override\n    protected void finalize() throws Throwable {\n        if (m_messages != null && !m_messages.isEmpty() && m_messages.get(0).getFolder() != null && m_messages.get(0).getFolder().isOpen()) {\n            m_messages.get(0).getFolder().close(m_deleteOnClose);\n        }\n        super.finalize();\n        \n    }","id":12545,"modified_method":"/**\n     * Finalizer to be sure and close with the appropriate mode\n     * any open folders\n     */\n    @Override\n    protected void finalize() throws Throwable {\n        log().debug(\"finalize: cleaning up mail folder an store connections...\");\n        if (m_messages != null && !m_messages.isEmpty() && m_messages.get(0).getFolder() != null && m_messages.get(0).getFolder().isOpen()) {\n            m_messages.get(0).getFolder().close(m_deleteOnClose);\n        }\n        \n        if (m_store.isConnected()) {\n            m_store.close();\n        }\n        \n        super.finalize();\n        log().debug(\"finalize: Mail folder and store connections closed.\");\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This un-ignore this test with a proper gmail account\n     * @throws JavaMailerException\n     * @throws MessagingException\n     * @throws InterruptedException\n     */\n    @Test\n    @Ignore\n    public void testReadMessagesWithSearchTerm() throws JavaMailerException, MessagingException, InterruptedException {\n        \n        String gmailAccount = \"foo\";\n        String gmailPassword = \"bar\";\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        String term1 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term2 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term3 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", term1, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        sendMsg = createAckMessage(gmailAccount, \"2\", term2, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n\n        sendMsg = createAckMessage(gmailAccount, \"3\", term3, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        JavaReadMailer readMailer = createGoogleReadMailer(gmailAccount, gmailPassword);\n        \n        //See if search finds all 3 messages\n        SearchTerm st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        List<Message> msgs = null;\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertEquals(3, msgs.size());\n        \n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        \n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        //Should find only term1 and term2 messages\n        Assert.assertNotNull(msgs);\n        Assert.assertEquals(2, msgs.size());\n\n        //Now cleanup\n        //Delete the term1 and term2 messages\n        for (Message msg : msgs) {\n            msg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Find and delete the term3 messages\n        st = new SubjectTerm(\"*.\"+term3+\" #.*\");\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertNotNull(msgs);\n        Assert.assertTrue(msgs.size() >= 1);\n        for (Message eventMsg : msgs) {\n            eventMsg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Make sure they're all gone\n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        Assert.assertTrue(msgs.isEmpty());\n        \n    }","id":12546,"modified_method":"/**\n     * Un-ignore this test with a proper gmail account\n     * @throws JavaMailerException\n     * @throws MessagingException\n     * @throws InterruptedException\n     */\n    @Test\n    @Ignore\n    public void testReadMessagesWithSearchTerm() throws JavaMailerException, MessagingException, InterruptedException {\n        \n        String gmailAccount = getUser();\n        String gmailPassword = getPassword();\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        String term1 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term2 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term3 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", term1, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        sendMsg = createAckMessage(gmailAccount, \"2\", term2, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n\n        sendMsg = createAckMessage(gmailAccount, \"3\", term3, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        JavaReadMailer readMailer = createGoogleReadMailer(gmailAccount, gmailPassword);\n        \n        //See if search finds all 3 messages\n        SearchTerm st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        List<Message> msgs = null;\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertEquals(3, msgs.size());\n        \n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        \n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        //Should find only term1 and term2 messages\n        Assert.assertNotNull(msgs);\n        Assert.assertEquals(2, msgs.size());\n\n        //Now cleanup\n        //Delete the term1 and term2 messages\n        for (Message msg : msgs) {\n            msg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Find and delete the term3 messages\n        st = new SubjectTerm(\"*.\"+term3+\" #.*\");\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertNotNull(msgs);\n        Assert.assertTrue(msgs.size() >= 1);\n        for (Message eventMsg : msgs) {\n            eventMsg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Make sure they're all gone\n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        Assert.assertTrue(msgs.isEmpty());\n        \n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        m_instance = this;\n    }","id":12547,"modified_method":"public void afterPropertiesSet() throws Exception {\n        log().debug(\"afterPropertiesSet: \");\n        m_instance = this;\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected List<Message> retrieveAckMessages() throws JavaMailerException {\n        ReadmailConfig config = m_jmConfigDao.getReadMailConfig(m_daemonConfigDao.getConfig().getReadmailConfig());\n        \n        //TODO: make flag for folder open mode\n        //TODO: Make sure configuration supports flag for deleting acknowledgments\n        JavaReadMailer readMailer = new JavaReadMailer(config, true);\n\n        String notifRe = m_daemonConfigDao.getConfig().getNotifyidMatchExpression();\n        notifRe = notifRe.startsWith(\"~\") ? notifRe.substring(1) : notifRe;\n        \n        String alarmRe = m_daemonConfigDao.getConfig().getAlarmidMatchExpression();\n        alarmRe = alarmRe.startsWith(\"~\") ? alarmRe.substring(1) : alarmRe;\n        \n        List<Message> msgs = readMailer.retrieveMessages();\n        for (Iterator<Message> iterator = msgs.iterator(); iterator.hasNext();) {\n            Message msg = iterator.next();\n            \n            try {\n                String subject = msg.getSubject();\n                if (!(subject.matches(notifRe) || subject.matches(alarmRe))) {\n                    iterator.remove();\n                } else {\n                    //delete this non-ack message because the acks will get deleted later and the config\n                    //indicates delete all mail from mailbox\n                    if (config.isDeleteAllMail()) {\n                        msg.setFlag(Flag.DELETED, true);\n                    }\n                }\n            } catch (MessagingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n        return msgs;\n    }","id":12548,"modified_method":"protected List<Message> retrieveAckMessages() throws JavaMailerException {\n        log().debug(\"retrieveAckMessages: Retrieving messages...\");\n        \n        ReadmailConfig config = m_jmConfigDao.getReadMailConfig(m_daemonConfigDao.getConfig().getReadmailConfig());\n        \n        \n        log().debug(\"retrieveAckMessages: creating JavaReadMailer with config: \" +\n        \t\t\"host: \" + config.getReadmailHost().getHost() + \n        \t\t\" port: \" + config.getReadmailHost().getPort() +\n        \t\t\" ssl: \" + config.getReadmailHost().getReadmailProtocol().getSslEnable() +\n        \t\t\" transport: \" + config.getReadmailHost().getReadmailProtocol().getTransport() +\n        \t\t\" user: \"+config.getUserAuth().getUserName() +\n        \t\t\" password: \"+config.getUserAuth().getPassword());\n        \n        //TODO: make flag for folder open mode\n        //TODO: Make sure configuration supports flag for deleting acknowledgments\n        JavaReadMailer readMailer = new JavaReadMailer(config, true);\n\n        String notifRe = m_daemonConfigDao.getConfig().getNotifyidMatchExpression();\n        notifRe = notifRe.startsWith(\"~\") ? notifRe.substring(1) : notifRe;\n        \n        String alarmRe = m_daemonConfigDao.getConfig().getAlarmidMatchExpression();\n        alarmRe = alarmRe.startsWith(\"~\") ? alarmRe.substring(1) : alarmRe;\n        \n        List<Message> msgs = readMailer.retrieveMessages();\n        log().info(\"retrieveAckMessages: Iterating \"+msgs.size()+\" messages with notifRe: \"+notifRe+\"and alarmRe: \"+alarmRe);\n        \n        for (Iterator<Message> iterator = msgs.iterator(); iterator.hasNext();) {\n            Message msg = iterator.next();\n            try {\n                String subject = msg.getSubject();\n                \n                log().debug(\"retrieveAckMessages: comparing subject: \"+subject);\n                if (!(subject.matches(notifRe) || subject.matches(alarmRe))) {\n                    \n                    log().debug(\"retrieveAckMessages: Subject doesn't match either Re.\");\n                    iterator.remove();\n                } else {\n                    //TODO: this just looks wrong\n                    //delete this non-ack message because the acks will get deleted later and the config\n                    //indicates delete all mail from mailbox\n                    log().debug(\"retrieveAckMessages: Subject matched, setting deleted flag\");\n                    if (config.isDeleteAllMail()) {\n                        msg.setFlag(Flag.DELETED, true);\n                    }\n                }\n            } catch (Throwable t) {\n                log().error(\"retrieveAckMessages: Problem processing message: \"+t);\n            }\n        }\n        return msgs;\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void setAckService(AckService ackService) {\n        m_ackService = ackService;\n    }","id":12549,"modified_method":"public void setAckService(AckService ackService) {\n        synchronized (m_lock) {\n            m_ackService = ackService;\n        }\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected static Integer detectId(final String subject, final String expression) {\n        Integer id = null;\n\n        //TODO: force opennms config '~' style regex attribute identity because this is the only way for this to work\n        String ackExpression = null;\n        \n        if (expression.startsWith(\"~\")) {\n            ackExpression = expression.substring(1);\n        } else {\n            ackExpression = expression;\n        }\n        Pattern pattern = Pattern.compile(ackExpression);\n        Matcher matcher = pattern.matcher(subject);\n\n        if (matcher.matches() && matcher.groupCount() > 0) {\n            id = Integer.valueOf(matcher.group(1));\n        }\n\n        return id;\n    }","id":12550,"modified_method":"protected static Integer detectId(final String subject, final String expression) {\n        log().debug(\"detectId: Detecting aknowledgable ID from subject: \"+subject+\" using expression: \"+expression);\n        Integer id = null;\n\n        //TODO: force opennms config '~' style regex attribute identity because this is the only way for this to work\n        String ackExpression = null;\n        \n        if (expression.startsWith(\"~\")) {\n            ackExpression = expression.substring(1);\n        } else {\n            ackExpression = expression;\n        }\n        Pattern pattern = Pattern.compile(ackExpression);\n        Matcher matcher = pattern.matcher(subject);\n\n        if (matcher.matches() && matcher.groupCount() > 0) {\n            id = Integer.valueOf(matcher.group(1));\n            log().debug(\"detectId: found acknowledgable ID: \"+id);\n        } else {\n            log().debug(\"detectId: no acknowledgable ID found.\");\n        }\n\n        return id;\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void findAndProcessAcks() {\n        \n        Collection<OnmsAcknowledgment> acks;\n\n        try {\n            List<Message> msgs = retrieveAckMessages();  //TODO: need a read *new* messages feature\n            acks = createAcks(msgs);\n            m_ackService.processAcks(acks);\n        } catch (JavaMailerException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }","id":12551,"modified_method":"/**\n     * Retrieve the messages in the configured mail folder, searches for notification replies,\n     * and creates and processes the acknowledgments.\n     */\n    protected void findAndProcessAcks() {\n        \n        log().debug(\"findAndProcessAcks: checking for acknowledgments...\");\n        Collection<OnmsAcknowledgment> acks;\n\n        try {\n            List<Message> msgs = retrieveAckMessages();  //TODO: need a read *new* messages feature\n            acks = createAcks(msgs);\n            \n            if (acks != null) {\n                log().debug(\"findAndProcessAcks: Found \"+acks.size()+\" acks.  Processing...\");\n                m_ackService.processAcks(acks);\n                log().debug(\"findAndProcessAcks: acks processed.\");\n            }\n        } catch (JavaMailerException e) {\n            log().error(\"findAndProcessAcks: Exception thrown in JavaMail: \"+e);\n            e.printStackTrace();\n        }\n        \n        log().debug(\"findAndProcessAcks: completed checking for and processing acknowledgments.\");\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void run() {\n        findAndProcessAcks();\n    }","id":12552,"modified_method":"public void run() {\n        try {\n            log().info(\"run: Processing mail acknowledgments (opposed to femail acks ;)...\" );\n            findAndProcessAcks();\n            log().info(\"run: Finished processing mail acknowledgments.\" );\n        } catch (Exception e) {\n            log().debug(\"run: threw exception: \"+e);\n        } finally {\n            log().debug(\"run: method completed.\");\n        }\n        \n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected List<OnmsAcknowledgment> createAcks(List<Message> msgs) {\n        List<OnmsAcknowledgment> acks = null;\n        \n        if (msgs != null && msgs.size() > 0) {\n            acks = new ArrayList<OnmsAcknowledgment>();\n            for (Message msg : msgs) {\n                try {\n                    Integer id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getNotifyidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.NOTIFICATION);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        continue;\n                    }\n                    id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getAlarmidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.ALARM);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        continue;\n                    }\n                    \n                } catch (MessagingException e) {\n                    //FIXME: do something audit like here\n                    e.printStackTrace();\n                    continue;\n                } catch (IOException e) {\n                    // FIXME: ditto\n                    e.printStackTrace();\n                    continue;\n                }\n            }\n        }\n        return acks;\n    }","id":12553,"modified_method":"/**\n     * Creates <code>OnmsAcknowledgment<\/code>s for each notification reply email message determined\n     * to have an acknowledgment action.\n     */\n    protected List<OnmsAcknowledgment> createAcks(List<Message> msgs) {\n        \n        log().info(\"createAcks: Detecting and possibly creating acknowledgments from \"+msgs.size()+\" messages...\");\n        List<OnmsAcknowledgment> acks = null;\n        \n        if (msgs != null && msgs.size() > 0) {\n            acks = new ArrayList<OnmsAcknowledgment>();\n            \n            Iterator<Message> it = msgs.iterator();\n            while (it.hasNext()) {\n                Message msg = (Message) it.next();\n                try {\n                    \n                    log().debug(\"createAcks: detecting acks in message: \"+msg.getSubject());\n                    Integer id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getNotifyidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.NOTIFICATION);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        log().debug(\"createAcks: found notification acknowledgment: \"+ack);\n                        continue;\n                    }\n                    \n                    id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getAlarmidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.ALARM);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        log().debug(\"createAcks: found alarm acknowledgment.\"+ack);\n                        continue;\n                    }\n                    \n                } catch (MessagingException e) {\n                    log().error(\"createAcks: messaging error: \"+e);\n                } catch (IOException e) {\n                    log().error(\"createAcks: IO problem: \"+e);\n                }\n            }\n        } else {\n            log().debug(\"createAcks: No messages for acknowledgment processing.\");\n        }\n        \n        log().info(\"createAcks: Completed detecting and possibly creating acknowledgments.  Created \"+\n                   (acks == null? 0 : acks.size())+\" acknowledgments.\");\n        return acks;\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected AckAction determineAckAction(Message msg) throws IOException, MessagingException {\n        \n        List<String> messageText = JavaReadMailer.getText(msg);\n        \n        AckAction action = AckAction.UNSPECIFIED;\n        if (messageText != null && messageText.size() > 0) {\n            \n            if (m_daemonConfigDao.acknowledgmentMatch(messageText)) {\n                action = AckAction.ACKNOWLEDGE;\n            } else if (m_daemonConfigDao.clearMatch(messageText)) {\n                action = AckAction.CLEAR;\n            } else if (m_daemonConfigDao.escalationMatch(messageText)) {\n                action = AckAction.ESCALATE;\n            } else if (m_daemonConfigDao.unAcknowledgmentMatch(messageText)) {\n                action = AckAction.UNACKNOWLEDGE;\n            } else {\n                action = AckAction.UNSPECIFIED;\n            }\n            \n        } else {\n            //TODO something smart\n        }\n        return action;\n    }","id":12554,"modified_method":"protected static AckAction determineAckAction(Message msg) throws IOException, MessagingException {\n        log().info(\"determineAckAcktion: evaluating message looking for user specified acktion...\");\n        \n        List<String> messageText = JavaReadMailer.getText(msg);\n        \n        AckAction action = AckAction.UNSPECIFIED;\n        if (messageText != null && messageText.size() > 0) {\n            \n            log().debug(\"determineAction: message text: \"+messageText);\n            \n            if (m_daemonConfigDao.acknowledgmentMatch(messageText)) {\n                action = AckAction.ACKNOWLEDGE;\n            } else if (m_daemonConfigDao.clearMatch(messageText)) {\n                action = AckAction.CLEAR;\n            } else if (m_daemonConfigDao.escalationMatch(messageText)) {\n                action = AckAction.ESCALATE;\n            } else if (m_daemonConfigDao.unAcknowledgmentMatch(messageText)) {\n                action = AckAction.UNACKNOWLEDGE;\n            } else {\n                action = AckAction.UNSPECIFIED;\n            }\n            \n        } else {\n            String concern = \"determineAckAction: a reply message to a notification has no text to evaluate.  \" +\n            \t\t\"No action can be determined.\";\n            log().warn(concern);\n            throw new MessagingException(concern);\n        }\n        log().info(\"determineAckAcktion: evaluated message, \"+action+\" action determined from message.\");\n        return action;\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private String createLog(Message msg) {\n        StringBuilder bldr = new StringBuilder();\n        Enumeration<Header> allHeaders;\n        try {\n            allHeaders = msg.getAllHeaders();\n        } catch (MessagingException e) {\n            return null;\n        }\n        while (allHeaders.hasMoreElements()) {\n            Header header = allHeaders.nextElement();\n            String name = header.getName();\n            String value = header.getValue();\n            bldr.append(name);\n            bldr.append(\":\");\n            bldr.append(value);\n            bldr.append(\"\\n\");\n        }\n        return bldr.toString();\n    }","id":12555,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private String createLog(Message msg) {\n        StringBuilder bldr = new StringBuilder();\n        Enumeration<Header> allHeaders;\n        try {\n            allHeaders = msg.getAllHeaders();\n        } catch (MessagingException e) {\n            return null;\n        }\n        while (allHeaders.hasMoreElements()) {\n            Header header = allHeaders.nextElement();\n            String name = header.getName();\n            String value = header.getValue();\n            bldr.append(name);\n            bldr.append(\":\");\n            bldr.append(value);\n            bldr.append(\"\\n\");\n        }\n        return StringUtils.truncate(bldr.toString(), LOG_FIELD_WIDTH);\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized static MailAckProcessor getInstance() {\n        return m_instance;\n    }","id":12556,"modified_method":"public static MailAckProcessor getInstance() {\n        synchronized (m_lock) {\n            return m_instance;\n        }\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void setAckdConfigDao(AckdConfigurationDao configDao) {\n        m_daemonConfigDao = configDao;\n    }","id":12557,"modified_method":"public void setAckdConfigDao(AckdConfigurationDao configDao) {\n        synchronized (m_lock) {\n            m_daemonConfigDao = configDao;\n        }\n    }","commit_id":"c7ba8d6fdf92f665d54e09ba272384ff6d95d8e0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@EventHandler(uei=EventConstants.ACKNOWLEDGE_EVENT_UEI)\n    public void handleAckEvent(Event event) {\n        OnmsAcknowledgment ack;\n        \n        try {\n            ack = new OnmsAcknowledgment(event);\n            m_ackService.processAck(ack);\n        } catch (ParseException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }","id":12558,"modified_method":"/**\n     * Handles the event driven access to acknowledging <code>OnmsAcknowledgable<\/code>s.  The acknowledgment event\n     * contains 4 parameters: \n     *     ackUser: The user acknowledging the <code>OnmsAcknowledgable<\/code>\n     *     ackAction: ack, unack, esc, clear\n     *     ackType: <code>AckType<\/code. representing either an <code>OnmsAlarm<\/code>, <code>OnmsNotification<\/code>, etc.\n     *     refId: The ID of the <code>OnmsAcknowledgable<\/code>\n     * @param event\n     */\n    @EventHandler(uei=EventConstants.ACKNOWLEDGE_EVENT_UEI)\n    public void handleAckEvent(Event event) {\n        \n        log().info(\"handleAckEvent: Received acknowledgment event: \"+event);\n        \n        OnmsAcknowledgment ack;\n        \n        try {\n            ack = new OnmsAcknowledgment(event);\n            m_ackService.processAck(ack);\n        } catch (ParseException e) {\n            log().error(\"handleAckEvent: unable to process acknowledgment event: \"+event+\"\\t\"+e);\n        }\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void start() {\n        for (AckReader reader : m_ackReaders) {\n            reader.start();\n        }\n    }","id":12559,"modified_method":"public void start() {\n        log().info(\"start: Starting \"+m_ackReaders.size()+\" readers...\");\n        for (AckReader reader : m_ackReaders) {\n            log().debug(\"start: Starting reader: \"+reader);\n            reader.start();\n        }\n        log().info(\"start: readers started.\");\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processAck(OnmsAcknowledgment ack) {\n        \n        List<Acknowledgeable> ackables = m_ackDao.findAcknowledgables(ack);\n        \n        if (ackables == null || ackables.size() < 1) {\n            throw new IllegalStateException(\"No acknowlegables in the database for ack: \"+ack);\n        }\n        \n        for (Acknowledgeable ackable : ackables) {\n            switch (ack.getAckAction()) {\n            case ACKNOWLEDGE:\n                ackable.acknowledge(ack.getAckUser());\n                break;\n            case UNACKNOWLEDGE:\n                ackable.unacknowledge(ack.getAckUser());\n            case CLEAR:\n                ackable.clear(ack.getAckUser());\n                break;\n            case ESCALATE:\n                ackable.escalate(ack.getAckUser());\n            default:\n                break;\n            }\n            \n            m_ackDao.updateAckable(ackable);\n            m_ackDao.save(ack);\n            m_ackDao.flush();\n        }\n    }","id":12560,"modified_method":"public void processAck(OnmsAcknowledgment ack) {\n        log().debug(\"processAck: Searching DB for acknowledgables for ack: \"+ack);\n        List<Acknowledgeable> ackables = m_ackDao.findAcknowledgables(ack);\n        \n        if (ackables == null || ackables.size() < 1) {\n            log().debug(\"processAck: No acknowledgables found.\");\n            throw new IllegalStateException(\"No acknowlegables in the database for ack: \"+ack);\n        }\n\n        log().debug(\"processAck: Found \"+ackables.size()+\". Acknowledging...\");\n        for (Acknowledgeable ackable : ackables) {\n            switch (ack.getAckAction()) {\n            case ACKNOWLEDGE:\n                log().debug(\"processAck: Acknowledging ackable: \"+ackable);\n                ackable.acknowledge(ack.getAckUser());\n                break;\n            case UNACKNOWLEDGE:\n                log().debug(\"processAck: Unacknowledging ackable: \"+ackable);\n                ackable.unacknowledge(ack.getAckUser());\n            case CLEAR:\n                log().debug(\"processAck: Clearing ackable: \"+ackable);\n                ackable.clear(ack.getAckUser());\n                break;\n            case ESCALATE:\n                log().debug(\"processAck: Escalating ackable: \"+ackable);\n                ackable.escalate(ack.getAckUser());\n            default:\n                break;\n            }\n            \n            m_ackDao.updateAckable(ackable);\n            m_ackDao.save(ack);\n            m_ackDao.flush();\n        }\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processAcks(Collection<OnmsAcknowledgment> acks) {\n        for (OnmsAcknowledgment ack : acks) {\n            processAck(ack);\n        }\n    }","id":12561,"modified_method":"public void processAcks(Collection<OnmsAcknowledgment> acks) {\n        log().info(\"processAcks: Processing \"+acks.size()+\" acknowledgements...\");\n        for (OnmsAcknowledgment ack : acks) {\n            processAck(ack);\n        }\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean clearMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getClearExpression();\n        return matcher(messageText, expression);\n    }","id":12562,"modified_method":"public Boolean clearMatch(List<String> messageText) {\n        String expression = getConfig().getClearExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean acknowledgmentMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getAckExpression();\n        return matcher(messageText, expression);\n    }","id":12563,"modified_method":"public Boolean acknowledgmentMatch(List<String> messageText) {\n        String expression = getConfig().getAckExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean unAcknowledgmentMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getUnackExpression();\n        return matcher(messageText, expression);\n    }","id":12564,"modified_method":"public Boolean unAcknowledgmentMatch(List<String> messageText) {\n        String expression = getConfig().getUnackExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Boolean escalationMatch(List<String> messageText) {\n        String expression = getContainer().getObject().getEscalateExpression();\n        return matcher(messageText, expression);\n    }","id":12565,"modified_method":"public Boolean escalationMatch(List<String> messageText) {\n        String expression = getConfig().getEscalateExpression();\n        return matcher(messageText, expression);\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void resume() {\n        scheduleReads();\n    }","id":12566,"modified_method":"public void resume() {\n        log().info(\"resume: Resuming reader...\");\n        scheduleReads();\n        log().info(\"resume: Reader resumed.\");\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n    }","id":12567,"modified_method":"public void afterPropertiesSet() throws Exception {\n        boolean state = (m_executor != null && m_mailAckProcessor != null);\n        Assert.state(state, \"Dependency injection failed; one or more fields are null.\");\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void pause() {\n        unScheduleReads();\n    }","id":12568,"modified_method":"public void pause() {\n        log().info(\"pause: Pausing reader...\");\n        unScheduleReads();\n        log().info(\"pause: Reader paused.\");\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setExecutor(PausibleScheduledThreadPoolExecutor executor) {\n        m_executor = executor;\n    }","id":12569,"modified_method":"public void setExecutor(PausibleScheduledThreadPoolExecutor executor) {\n        synchronized (m_lock) {\n            m_executor = executor;\n        }\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void stop() {\n        unScheduleReads();\n    }","id":12570,"modified_method":"public void stop() {\n        log().info(\"stop: Stopping reader...\");\n        unScheduleReads();\n        log().info(\"stop: Reader stopped.\");\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void scheduleReads() {\n        \n        if (m_schedule == null) {\n            m_schedule = ReaderSchedule.createSchedule();\n        }\n        \n        m_executor.scheduleWithFixedDelay(MailAckProcessor.getInstance(), m_schedule.getInitialDelay(), \n                                          m_schedule.getInterval(), m_schedule.getUnit());\n    }","id":12571,"modified_method":"protected void scheduleReads() {\n        log().debug(\"scheduleReads: attempting to acquire lock...\");\n        \n        ReaderSchedule schedule = ReaderSchedule.createSchedule();\n        \n        synchronized (m_lock) {\n            log().debug(\"scheduleReads: acquired lock, creating schedule...\");\n            \n            m_executor.scheduleWithFixedDelay(getMailAckProcessor(), schedule.getInitialDelay(), \n                                              schedule.getInterval(), schedule.getUnit());\n            \n        }\n        \n        log().debug(\"scheduleReads: exited lock, schedule updated.\");\n        log().debug(\"scheduleReads: schedule is:\" +\n        \t\t    \" attempts remaining: \"+schedule.getAttemptsRemaining()+\n        \t\t    \"; initial delay: \"+schedule.getInitialDelay()+\n        \t\t    \"; interval: \"+schedule.getInterval()+\n        \t\t    \"; unit: \"+schedule.getUnit());\n        \n        log().debug(\"scheduleReads: executor details:\"+\n                    \" active count: \"+m_executor.getActiveCount()+\n                    \"; completed task count: \"+m_executor.getCompletedTaskCount()+\n                    \"; task count: \"+m_executor.getTaskCount()+\n                    \"; queue size: \"+m_executor.getQueue().size());\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void start() {\n        scheduleReads();\n    }","id":12572,"modified_method":"public void start() {\n        log().info(\"start: Starting reader...\");\n        scheduleReads();\n        log().info(\"start: Reader started.\");\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private SendmailMessage createAckMessage(String gmailAccount, String noticeId, String body) {\n        SendmailMessage sendMsg = new SendmailMessage();\n        sendMsg.setTo(gmailAccount+\"@gmail.com\");\n        sendMsg.setFrom(gmailAccount+\"@gmail.com\");\n        sendMsg.setSubject(\"re:Notice #\"+noticeId+\":\");\n        sendMsg.setBody(body);\n        return sendMsg;\n    }","id":12573,"modified_method":"private SendmailMessage createAckMessage(String gmailAccount, String noticeId, String body) {\n        SendmailMessage sendMsg = new SendmailMessage();\n        sendMsg.setTo(gmailAccount+\"@gmail.com\");\n        sendMsg.setFrom(gmailAccount+\"@gmail.com\");\n        sendMsg.setSubject(\"Re: Notice #\"+noticeId+\":\");\n        sendMsg.setBody(body);\n        return sendMsg;\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void verifyWiring() {\n        Assert.assertNotNull(m_daemon);\n        Assert.assertNotNull(m_jmDao);\n        Assert.assertNotNull(m_processor);\n    }","id":12574,"modified_method":"@Test\n    public void verifyWiring() {\n        Assert.assertNotNull(m_ackService);\n        Assert.assertNotNull(m_daemon);\n        Assert.assertNotNull(m_jmDao);\n        Assert.assertNotNull(m_processor);\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Ignore\n    public void findAndProcessAcks() {\n        fail(\"Not yet implemented\");\n    }","id":12575,"modified_method":"@Test\n    @Ignore\n    public void findAndProcessAcks() throws InterruptedException {\n        JavaMailAckReaderImpl reader = new JavaMailAckReaderImpl();\n        PausibleScheduledThreadPoolExecutor executor = new PausibleScheduledThreadPoolExecutor(1);\n        reader.setMailAckProcessor(m_processor);\n        Future<?> f = executor.schedule(m_processor, 5, TimeUnit.SECONDS);\n        reader.setExecutor(executor);\n        m_processor.setJmConfigDao(new JmCnfDao());\n        m_processor.setAckService(m_ackService);\n        m_processor.setAckdConfigDao(createAckdConfigDao());\n        reader.setStatus(1);\n        //Thread.sleep(20000);\n        while (!f.isDone()) {\n            Thread.sleep(10);\n        }\n        Assert.assertTrue(f.isDone());\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This test requires that 4 emails can be read from a Google account.  The mails should be\n     * in this order:\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type clear\n     * \n     * The test has been updated to now include sending an email message to a gmail account.  Just correct\n     * the account details for your own local testing.\n     * \n     * @throws JavaMailerException \n     * \n     */\n    @Test\n    @Ignore\n    public void integration() throws JavaMailerException {\n        \n        String gmailAccount = \"foo\";\n        String gmailPassword = \"bar\";\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"2\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"3\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"4\", \"clear\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        //this is bad mojo\n        String readmailConfig = m_daemon.getConfigDao().getConfig().getReadmailConfig();\n        Assert.assertNotNull(readmailConfig);\n        ReadmailConfig config = m_jmDao.getReadMailConfig(readmailConfig);\n        updateConfigWithGoogleReadConfiguration(config, gmailAccount, gmailPassword);\n        \n        List<Message> msgs = MailAckProcessor.getInstance().retrieveAckMessages();\n        \n        List<OnmsAcknowledgment> acks = MailAckProcessor.getInstance().createAcks(msgs);\n        \n        Assert.assertNotNull(acks);\n        Assert.assertEquals(4, acks.size());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(0).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(0).getAckAction());\n        Assert.assertEquals(Integer.valueOf(1), acks.get(0).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(0).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(1).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(1).getAckAction());\n        Assert.assertEquals(Integer.valueOf(2), acks.get(1).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(1).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(2).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(2).getAckAction());\n        Assert.assertEquals(Integer.valueOf(3), acks.get(2).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(2).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(3).getAckType());\n        Assert.assertEquals(AckAction.CLEAR, acks.get(3).getAckAction());\n        Assert.assertEquals(Integer.valueOf(4), acks.get(3).getRefId());\n        Assert.assertEquals(\"foo@gmail.com\", acks.get(3).getAckUser());\n    }","id":12576,"modified_method":"/**\n     * This test requires that 4 emails can be read from a Google account.  The mails should be\n     * in this order:\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type ack\n     * Subject matching ackd-configuration expression of action type clear\n     * \n     * The test has been updated to now include sending an email message to a gmail account.  Just correct\n     * the account details for your own local testing.\n     * \n     * @throws JavaMailerException \n     * \n     */\n    @Test\n    @Ignore\n    public void testIntegration() throws JavaMailerException {\n        \n        String gmailAccount = getUser();\n        String gmailPassword = getPassword();\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"2\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"3\", \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        sendMsg = createAckMessage(gmailAccount, \"4\", \"clear\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        //this is bad mojo\n        String readmailConfig = m_daemon.getConfigDao().getConfig().getReadmailConfig();\n        Assert.assertNotNull(readmailConfig);\n        ReadmailConfig config = m_jmDao.getReadMailConfig(readmailConfig);\n        updateConfigWithGoogleReadConfiguration(config, gmailAccount, gmailPassword);\n        \n        List<Message> msgs = MailAckProcessor.getInstance().retrieveAckMessages();\n        \n        List<OnmsAcknowledgment> acks = MailAckProcessor.getInstance().createAcks(msgs);\n        \n        Assert.assertNotNull(acks);\n        Assert.assertEquals(4, acks.size());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(0).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(0).getAckAction());\n        Assert.assertEquals(Integer.valueOf(1), acks.get(0).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(0).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(1).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(1).getAckAction());\n        Assert.assertEquals(Integer.valueOf(2), acks.get(1).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(1).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(2).getAckType());\n        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(2).getAckAction());\n        Assert.assertEquals(Integer.valueOf(3), acks.get(2).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(2).getAckUser());\n        \n        Assert.assertEquals(AckType.NOTIFICATION, acks.get(3).getAckType());\n        Assert.assertEquals(AckAction.CLEAR, acks.get(3).getAckAction());\n        Assert.assertEquals(Integer.valueOf(4), acks.get(3).getRefId());\n        Assert.assertEquals(getUser()+\"@gmail.com\", acks.get(3).getAckUser());\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * @return log4j Category\n     */\n    protected Category log() {\n        return ThreadCategory.getInstance(getClass());\n    }","id":12577,"modified_method":"/**\n     * @return log4j Category\n     */\n    protected static Category log() {\n        return ThreadCategory.getInstance();\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Attempts to reteive the string portion of a message... tries to handle\n     * multipart messages as well.  This seems to be working so far with my tests\n     * but could use some tweaking later as more types of mail servers are used\n     * with this feature.\n     * \n     * @param msg\n     * @return The text portion of an email with each line being an element of the list.\n     * @throws MessagingException\n     * @throws IOException\n     */\n    public static List<String> getText(Message msg) throws MessagingException, IOException {\n        List<String> lines = new ArrayList<String>();\n        \n        String content = null;\n        if (msg.isMimeType(\"text/*\")) {\n            try {\n                content = (String)msg.getContent();\n            } catch (ClassCastException cce) {\n                Object c = msg.getContent();\n                if (c instanceof MimeMultipart) {\n                    for (int cnt = 0; cnt < ((MimeMultipart)c).getCount(); cnt++) {\n                        BodyPart bp = ((MimeMultipart)c).getBodyPart(cnt);\n                        if (bp.isMimeType(\"text/*\")) {\n                            content = (String)bp.getContent();\n                            break;\n                        }\n                    }\n                }\n            }\n            return string2Lines(content);\n        }\n        \n        return lines;\n    }","id":12578,"modified_method":"/**\n     * Attempts to reteive the string portion of a message... tries to handle\n     * multipart messages as well.  This seems to be working so far with my tests\n     * but could use some tweaking later as more types of mail servers are used\n     * with this feature.\n     * \n     * @param msg\n     * @return The text portion of an email with each line being an element of the list.\n     * @throws MessagingException\n     * @throws IOException\n     */\n    public static List<String> getText(Message msg) throws MessagingException, IOException {\n        \n        Object content = null;\n        String text = null;\n        \n        log().debug(\"getText: getting text of message from MimeType: text/*\");\n\n        try {\n            text = (String)msg.getContent();\n\n        } catch (ClassCastException cce) {\n            content = msg.getContent();\n\n            if (content instanceof MimeMultipart) {\n\n                log().debug(\"getText: content is MimeMultipart, checking for text from each part...\");\n\n                for (int cnt = 0; cnt < ((MimeMultipart)content).getCount(); cnt++) {\n                    BodyPart bp = ((MimeMultipart)content).getBodyPart(cnt);\n                    if (bp.isMimeType(\"text/*\")) {\n                        text = (String)bp.getContent();\n                        log().debug(\"getText: found text MIME type: \"+text);\n                        break;\n                    }\n                }\n                log().debug(\"getText: did not find text within MimeMultipart message.\");\n            }\n        }\n        return string2Lines(text);\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Finalizer to be sure and close with the appropriate mode\n     * any open folders\n     */\n    @Override\n    protected void finalize() throws Throwable {\n        if (m_messages != null && !m_messages.isEmpty() && m_messages.get(0).getFolder() != null && m_messages.get(0).getFolder().isOpen()) {\n            m_messages.get(0).getFolder().close(m_deleteOnClose);\n        }\n        super.finalize();\n        \n    }","id":12579,"modified_method":"/**\n     * Finalizer to be sure and close with the appropriate mode\n     * any open folders\n     */\n    @Override\n    protected void finalize() throws Throwable {\n        log().debug(\"finalize: cleaning up mail folder an store connections...\");\n        if (m_messages != null && !m_messages.isEmpty() && m_messages.get(0).getFolder() != null && m_messages.get(0).getFolder().isOpen()) {\n            m_messages.get(0).getFolder().close(m_deleteOnClose);\n        }\n        \n        if (m_store.isConnected()) {\n            m_store.close();\n        }\n        \n        super.finalize();\n        log().debug(\"finalize: Mail folder and store connections closed.\");\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<Message> retrieveMessages() throws JavaMailerException {\n        Message[] msgs;\n        Folder mailFolder = null;\n        \n        try {\n            Store store = m_session.getStore(m_config.getReadmailHost().getReadmailProtocol().getTransport());\n            store.connect(m_config.getReadmailHost().getHost(), (int)m_config.getReadmailHost().getPort(), m_config.getUserAuth().getUserName(), m_config.getUserAuth().getPassword());\n            mailFolder = store.getFolder(m_config.getMailFolder());\n            mailFolder.open(Folder.READ_WRITE);\n            msgs = mailFolder.getMessages();\n        } catch (NoSuchProviderException e) {\n            throw new JavaMailerException(\"No provider matching:\"+m_config.getReadmailHost().getReadmailProtocol().getTransport()+\" from config:\"+m_config.getName(), e);\n        } catch (MessagingException e) {\n            throw new JavaMailerException(\"Problem reading messages from configured mail store\", e);\n        }\n        \n        return new ArrayList<Message>(Arrays.asList(msgs));\n    }","id":12580,"modified_method":"public List<Message> retrieveMessages() throws JavaMailerException {\n        Message[] msgs;\n        Folder mailFolder = null;\n        \n        try {\n            m_store = m_session.getStore(m_config.getReadmailHost().getReadmailProtocol().getTransport());\n            m_store.connect(m_config.getReadmailHost().getHost(), (int)m_config.getReadmailHost().getPort(), m_config.getUserAuth().getUserName(), m_config.getUserAuth().getPassword());\n            mailFolder = m_store.getFolder(m_config.getMailFolder());\n            mailFolder.open(Folder.READ_WRITE);\n            msgs = mailFolder.getMessages();\n        } catch (NoSuchProviderException e) {\n            throw new JavaMailerException(\"No provider matching:\"+m_config.getReadmailHost().getReadmailProtocol().getTransport()+\" from config:\"+m_config.getName(), e);\n        } catch (MessagingException e) {\n            throw new JavaMailerException(\"Problem reading messages from configured mail store\", e);\n        }\n        \n        return new ArrayList<Message>(Arrays.asList(msgs));\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This un-ignore this test with a proper gmail account\n     * @throws JavaMailerException\n     * @throws MessagingException\n     * @throws InterruptedException\n     */\n    @Test\n    @Ignore\n    public void testReadMessagesWithSearchTerm() throws JavaMailerException, MessagingException, InterruptedException {\n        \n        String gmailAccount = \"foo\";\n        String gmailPassword = \"bar\";\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        String term1 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term2 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term3 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", term1, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        sendMsg = createAckMessage(gmailAccount, \"2\", term2, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n\n        sendMsg = createAckMessage(gmailAccount, \"3\", term3, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        JavaReadMailer readMailer = createGoogleReadMailer(gmailAccount, gmailPassword);\n        \n        //See if search finds all 3 messages\n        SearchTerm st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        List<Message> msgs = null;\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertEquals(3, msgs.size());\n        \n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        \n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        //Should find only term1 and term2 messages\n        Assert.assertNotNull(msgs);\n        Assert.assertEquals(2, msgs.size());\n\n        //Now cleanup\n        //Delete the term1 and term2 messages\n        for (Message msg : msgs) {\n            msg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Find and delete the term3 messages\n        st = new SubjectTerm(\"*.\"+term3+\" #.*\");\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertNotNull(msgs);\n        Assert.assertTrue(msgs.size() >= 1);\n        for (Message eventMsg : msgs) {\n            eventMsg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Make sure they're all gone\n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        Assert.assertTrue(msgs.isEmpty());\n        \n    }","id":12581,"modified_method":"/**\n     * Un-ignore this test with a proper gmail account\n     * @throws JavaMailerException\n     * @throws MessagingException\n     * @throws InterruptedException\n     */\n    @Test\n    @Ignore\n    public void testReadMessagesWithSearchTerm() throws JavaMailerException, MessagingException, InterruptedException {\n        \n        String gmailAccount = getUser();\n        String gmailPassword = getPassword();\n        \n        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);\n        \n        String term1 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term2 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        String term3 = String.valueOf(Calendar.getInstance().getTimeInMillis());\n        Thread.sleep(2);\n        \n        SendmailMessage sendMsg = createAckMessage(gmailAccount, \"1\", term1, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        sendMsg = createAckMessage(gmailAccount, \"2\", term2, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n\n        sendMsg = createAckMessage(gmailAccount, \"3\", term3, \"ack\");\n        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));\n        sendMailer.send();\n        \n        JavaReadMailer readMailer = createGoogleReadMailer(gmailAccount, gmailPassword);\n        \n        //See if search finds all 3 messages\n        SearchTerm st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        List<Message> msgs = null;\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertEquals(3, msgs.size());\n        \n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        \n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        //Should find only term1 and term2 messages\n        Assert.assertNotNull(msgs);\n        Assert.assertEquals(2, msgs.size());\n\n        //Now cleanup\n        //Delete the term1 and term2 messages\n        for (Message msg : msgs) {\n            msg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Find and delete the term3 messages\n        st = new SubjectTerm(\"*.\"+term3+\" #.*\");\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        \n        Assert.assertNotNull(msgs);\n        Assert.assertTrue(msgs.size() >= 1);\n        for (Message eventMsg : msgs) {\n            eventMsg.setFlag(Flag.DELETED, true);\n        }\n        \n        //Make sure they're all gone\n        st = new OrTerm(new SubjectTerm(\".*\"+term1+\" #.*\"), new SubjectTerm(\".*\"+term2+\" #.*\"));\n        st = new OrTerm(st, new SubjectTerm(\"*.\"+term3+\" #.*\"));\n\n        try {\n            msgs = readMailer.retrieveMessages(st);\n        } catch (JavaMailerException e) {\n            e.printStackTrace();\n        }\n        Assert.assertTrue(msgs.isEmpty());\n        \n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void findAndProcessAcks() {\n        \n        Collection<OnmsAcknowledgment> acks;\n\n        try {\n            List<Message> msgs = retrieveAckMessages();  //TODO: need a read *new* messages feature\n            acks = createAcks(msgs);\n            m_ackService.processAcks(acks);\n        } catch (JavaMailerException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }","id":12582,"modified_method":"/**\n     * Retrieve the messages in the configured mail folder, searches for notification replies,\n     * and creates and processes the acknowledgments.\n     */\n    protected void findAndProcessAcks() {\n        \n        log().debug(\"findAndProcessAcks: checking for acknowledgments...\");\n        Collection<OnmsAcknowledgment> acks;\n\n        try {\n            List<Message> msgs = retrieveAckMessages();  //TODO: need a read *new* messages feature\n            acks = createAcks(msgs);\n            \n            if (acks != null) {\n                log().debug(\"findAndProcessAcks: Found \"+acks.size()+\" acks.  Processing...\");\n                m_ackService.processAcks(acks);\n                log().debug(\"findAndProcessAcks: acks processed.\");\n            }\n        } catch (JavaMailerException e) {\n            log().error(\"findAndProcessAcks: Exception thrown in JavaMail: \"+e);\n            e.printStackTrace();\n        }\n        \n        log().debug(\"findAndProcessAcks: completed checking for and processing acknowledgments.\");\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void run() {\n        findAndProcessAcks();\n    }","id":12583,"modified_method":"public void run() {\n        try {\n            log().info(\"run: Processing mail acknowledgments (opposed to femail acks ;)...\" );\n            findAndProcessAcks();\n            log().info(\"run: Finished processing mail acknowledgments.\" );\n        } catch (Exception e) {\n            log().debug(\"run: threw exception: \"+e);\n        } finally {\n            log().debug(\"run: method completed.\");\n        }\n        \n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void afterPropertiesSet() throws Exception {\n        m_instance = this;\n    }","id":12584,"modified_method":"public void afterPropertiesSet() throws Exception {\n        log().debug(\"afterPropertiesSet: \");\n        m_instance = this;\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected List<OnmsAcknowledgment> createAcks(List<Message> msgs) {\n        List<OnmsAcknowledgment> acks = null;\n        \n        if (msgs != null && msgs.size() > 0) {\n            acks = new ArrayList<OnmsAcknowledgment>();\n            for (Message msg : msgs) {\n                try {\n                    Integer id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getNotifyidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.NOTIFICATION);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        continue;\n                    }\n                    id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getAlarmidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.ALARM);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        continue;\n                    }\n                    \n                } catch (MessagingException e) {\n                    //FIXME: do something audit like here\n                    e.printStackTrace();\n                    continue;\n                } catch (IOException e) {\n                    // FIXME: ditto\n                    e.printStackTrace();\n                    continue;\n                }\n            }\n        }\n        return acks;\n    }","id":12585,"modified_method":"/**\n     * Creates <code>OnmsAcknowledgment<\/code>s for each notification reply email message determined\n     * to have an acknowledgment action.\n     */\n    protected List<OnmsAcknowledgment> createAcks(List<Message> msgs) {\n        \n        log().info(\"createAcks: Detecting and possibly creating acknowledgments from \"+msgs.size()+\" messages...\");\n        List<OnmsAcknowledgment> acks = null;\n        \n        if (msgs != null && msgs.size() > 0) {\n            acks = new ArrayList<OnmsAcknowledgment>();\n            \n            Iterator<Message> it = msgs.iterator();\n            while (it.hasNext()) {\n                Message msg = (Message) it.next();\n                try {\n                    \n                    log().debug(\"createAcks: detecting acks in message: \"+msg.getSubject());\n                    Integer id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getNotifyidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.NOTIFICATION);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        log().debug(\"createAcks: found notification acknowledgment: \"+ack);\n                        continue;\n                    }\n                    \n                    id = detectId(msg.getSubject(), m_daemonConfigDao.getConfig().getAlarmidMatchExpression());\n                    \n                    if (id != null) {\n                        final OnmsAcknowledgment ack = createAcknowledgment(msg, id);\n                        ack.setAckType(AckType.ALARM);\n                        ack.setLog(createLog(msg));\n                        acks.add(ack);\n                        msg.setFlag(Flag.DELETED, true);\n                        log().debug(\"createAcks: found alarm acknowledgment.\"+ack);\n                        continue;\n                    }\n                    \n                } catch (MessagingException e) {\n                    log().error(\"createAcks: messaging error: \"+e);\n                } catch (IOException e) {\n                    log().error(\"createAcks: IO problem: \"+e);\n                }\n            }\n        } else {\n            log().debug(\"createAcks: No messages for acknowledgment processing.\");\n        }\n        \n        log().info(\"createAcks: Completed detecting and possibly creating acknowledgments.  Created \"+\n                   (acks == null? 0 : acks.size())+\" acknowledgments.\");\n        return acks;\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private String createLog(Message msg) {\n        StringBuilder bldr = new StringBuilder();\n        Enumeration<Header> allHeaders;\n        try {\n            allHeaders = msg.getAllHeaders();\n        } catch (MessagingException e) {\n            return null;\n        }\n        while (allHeaders.hasMoreElements()) {\n            Header header = allHeaders.nextElement();\n            String name = header.getName();\n            String value = header.getValue();\n            bldr.append(name);\n            bldr.append(\":\");\n            bldr.append(value);\n            bldr.append(\"\\n\");\n        }\n        return bldr.toString();\n    }","id":12586,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private String createLog(Message msg) {\n        StringBuilder bldr = new StringBuilder();\n        Enumeration<Header> allHeaders;\n        try {\n            allHeaders = msg.getAllHeaders();\n        } catch (MessagingException e) {\n            return null;\n        }\n        while (allHeaders.hasMoreElements()) {\n            Header header = allHeaders.nextElement();\n            String name = header.getName();\n            String value = header.getValue();\n            bldr.append(name);\n            bldr.append(\":\");\n            bldr.append(value);\n            bldr.append(\"\\n\");\n        }\n        return StringUtils.truncate(bldr.toString(), LOG_FIELD_WIDTH);\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected List<Message> retrieveAckMessages() throws JavaMailerException {\n        ReadmailConfig config = m_jmConfigDao.getReadMailConfig(m_daemonConfigDao.getConfig().getReadmailConfig());\n        \n        //TODO: make flag for folder open mode\n        //TODO: Make sure configuration supports flag for deleting acknowledgments\n        JavaReadMailer readMailer = new JavaReadMailer(config, true);\n\n        String notifRe = m_daemonConfigDao.getConfig().getNotifyidMatchExpression();\n        notifRe = notifRe.startsWith(\"~\") ? notifRe.substring(1) : notifRe;\n        \n        String alarmRe = m_daemonConfigDao.getConfig().getAlarmidMatchExpression();\n        alarmRe = alarmRe.startsWith(\"~\") ? alarmRe.substring(1) : alarmRe;\n        \n        List<Message> msgs = readMailer.retrieveMessages();\n        for (Iterator<Message> iterator = msgs.iterator(); iterator.hasNext();) {\n            Message msg = iterator.next();\n            \n            try {\n                String subject = msg.getSubject();\n                if (!(subject.matches(notifRe) || subject.matches(alarmRe))) {\n                    iterator.remove();\n                } else {\n                    //delete this non-ack message because the acks will get deleted later and the config\n                    //indicates delete all mail from mailbox\n                    if (config.isDeleteAllMail()) {\n                        msg.setFlag(Flag.DELETED, true);\n                    }\n                }\n            } catch (MessagingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n        return msgs;\n    }","id":12587,"modified_method":"protected List<Message> retrieveAckMessages() throws JavaMailerException {\n        log().debug(\"retrieveAckMessages: Retrieving messages...\");\n        \n        ReadmailConfig config = m_jmConfigDao.getReadMailConfig(m_daemonConfigDao.getConfig().getReadmailConfig());\n        \n        \n        log().debug(\"retrieveAckMessages: creating JavaReadMailer with config: \" +\n        \t\t\"host: \" + config.getReadmailHost().getHost() + \n        \t\t\" port: \" + config.getReadmailHost().getPort() +\n        \t\t\" ssl: \" + config.getReadmailHost().getReadmailProtocol().getSslEnable() +\n        \t\t\" transport: \" + config.getReadmailHost().getReadmailProtocol().getTransport() +\n        \t\t\" user: \"+config.getUserAuth().getUserName() +\n        \t\t\" password: \"+config.getUserAuth().getPassword());\n        \n        //TODO: make flag for folder open mode\n        //TODO: Make sure configuration supports flag for deleting acknowledgments\n        JavaReadMailer readMailer = new JavaReadMailer(config, true);\n\n        String notifRe = m_daemonConfigDao.getConfig().getNotifyidMatchExpression();\n        notifRe = notifRe.startsWith(\"~\") ? notifRe.substring(1) : notifRe;\n        \n        String alarmRe = m_daemonConfigDao.getConfig().getAlarmidMatchExpression();\n        alarmRe = alarmRe.startsWith(\"~\") ? alarmRe.substring(1) : alarmRe;\n        \n        List<Message> msgs = readMailer.retrieveMessages();\n        log().info(\"retrieveAckMessages: Iterating \"+msgs.size()+\" messages with notifRe: \"+notifRe+\"and alarmRe: \"+alarmRe);\n        \n        for (Iterator<Message> iterator = msgs.iterator(); iterator.hasNext();) {\n            Message msg = iterator.next();\n            try {\n                String subject = msg.getSubject();\n                \n                log().debug(\"retrieveAckMessages: comparing subject: \"+subject);\n                if (!(subject.matches(notifRe) || subject.matches(alarmRe))) {\n                    \n                    log().debug(\"retrieveAckMessages: Subject doesn't match either Re.\");\n                    iterator.remove();\n                } else {\n                    //TODO: this just looks wrong\n                    //delete this non-ack message because the acks will get deleted later and the config\n                    //indicates delete all mail from mailbox\n                    log().debug(\"retrieveAckMessages: Subject matched, setting deleted flag\");\n                    if (config.isDeleteAllMail()) {\n                        msg.setFlag(Flag.DELETED, true);\n                    }\n                }\n            } catch (Throwable t) {\n                log().error(\"retrieveAckMessages: Problem processing message: \"+t);\n            }\n        }\n        return msgs;\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected AckAction determineAckAction(Message msg) throws IOException, MessagingException {\n        \n        List<String> messageText = JavaReadMailer.getText(msg);\n        \n        AckAction action = AckAction.UNSPECIFIED;\n        if (messageText != null && messageText.size() > 0) {\n            \n            if (m_daemonConfigDao.acknowledgmentMatch(messageText)) {\n                action = AckAction.ACKNOWLEDGE;\n            } else if (m_daemonConfigDao.clearMatch(messageText)) {\n                action = AckAction.CLEAR;\n            } else if (m_daemonConfigDao.escalationMatch(messageText)) {\n                action = AckAction.ESCALATE;\n            } else if (m_daemonConfigDao.unAcknowledgmentMatch(messageText)) {\n                action = AckAction.UNACKNOWLEDGE;\n            } else {\n                action = AckAction.UNSPECIFIED;\n            }\n            \n        } else {\n            //TODO something smart\n        }\n        return action;\n    }","id":12588,"modified_method":"protected static AckAction determineAckAction(Message msg) throws IOException, MessagingException {\n        log().info(\"determineAckAcktion: evaluating message looking for user specified acktion...\");\n        \n        List<String> messageText = JavaReadMailer.getText(msg);\n        \n        AckAction action = AckAction.UNSPECIFIED;\n        if (messageText != null && messageText.size() > 0) {\n            \n            log().debug(\"determineAction: message text: \"+messageText);\n            \n            if (m_daemonConfigDao.acknowledgmentMatch(messageText)) {\n                action = AckAction.ACKNOWLEDGE;\n            } else if (m_daemonConfigDao.clearMatch(messageText)) {\n                action = AckAction.CLEAR;\n            } else if (m_daemonConfigDao.escalationMatch(messageText)) {\n                action = AckAction.ESCALATE;\n            } else if (m_daemonConfigDao.unAcknowledgmentMatch(messageText)) {\n                action = AckAction.UNACKNOWLEDGE;\n            } else {\n                action = AckAction.UNSPECIFIED;\n            }\n            \n        } else {\n            String concern = \"determineAckAction: a reply message to a notification has no text to evaluate.  \" +\n            \t\t\"No action can be determined.\";\n            log().warn(concern);\n            throw new MessagingException(concern);\n        }\n        log().info(\"determineAckAcktion: evaluated message, \"+action+\" action determined from message.\");\n        return action;\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized static MailAckProcessor getInstance() {\n        return m_instance;\n    }","id":12589,"modified_method":"public static MailAckProcessor getInstance() {\n        synchronized (m_lock) {\n            return m_instance;\n        }\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void setAckdConfigDao(AckdConfigurationDao configDao) {\n        m_daemonConfigDao = configDao;\n    }","id":12590,"modified_method":"public void setAckdConfigDao(AckdConfigurationDao configDao) {\n        synchronized (m_lock) {\n            m_daemonConfigDao = configDao;\n        }\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected static Integer detectId(final String subject, final String expression) {\n        Integer id = null;\n\n        //TODO: force opennms config '~' style regex attribute identity because this is the only way for this to work\n        String ackExpression = null;\n        \n        if (expression.startsWith(\"~\")) {\n            ackExpression = expression.substring(1);\n        } else {\n            ackExpression = expression;\n        }\n        Pattern pattern = Pattern.compile(ackExpression);\n        Matcher matcher = pattern.matcher(subject);\n\n        if (matcher.matches() && matcher.groupCount() > 0) {\n            id = Integer.valueOf(matcher.group(1));\n        }\n\n        return id;\n    }","id":12591,"modified_method":"protected static Integer detectId(final String subject, final String expression) {\n        log().debug(\"detectId: Detecting aknowledgable ID from subject: \"+subject+\" using expression: \"+expression);\n        Integer id = null;\n\n        //TODO: force opennms config '~' style regex attribute identity because this is the only way for this to work\n        String ackExpression = null;\n        \n        if (expression.startsWith(\"~\")) {\n            ackExpression = expression.substring(1);\n        } else {\n            ackExpression = expression;\n        }\n        Pattern pattern = Pattern.compile(ackExpression);\n        Matcher matcher = pattern.matcher(subject);\n\n        if (matcher.matches() && matcher.groupCount() > 0) {\n            id = Integer.valueOf(matcher.group(1));\n            log().debug(\"detectId: found acknowledgable ID: \"+id);\n        } else {\n            log().debug(\"detectId: no acknowledgable ID found.\");\n        }\n\n        return id;\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public synchronized void setAckService(AckService ackService) {\n        m_ackService = ackService;\n    }","id":12592,"modified_method":"public void setAckService(AckService ackService) {\n        synchronized (m_lock) {\n            m_ackService = ackService;\n        }\n    }","commit_id":"8faf8c8dbae9fba75835548e3501014eb999dac8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Package up and send the payload to the router for delivery\n     *\n     * @param tag unused - no end-to-end crypto\n     * @param tags unused - no end-to-end crypto\n     * @param key unused - no end-to-end crypto\n     * @param newKey unused - no end-to-end crypto\n     */\n    public void sendMessage(I2PSessionImpl session, Destination dest, long nonce, byte[] payload, SessionTag tag,\n                            SessionKey key, Set tags, SessionKey newKey, long expires) throws I2PSessionException {\n        SendMessageMessage msg;\n        if (expires > 0) {\n            msg = new SendMessageExpiresMessage();\n            ((SendMessageExpiresMessage)msg).setExpiration(new Date(expires));\n        } else\n            msg = new SendMessageMessage();\n        msg.setDestination(dest);\n        msg.setSessionId(session.getSessionId());\n        msg.setNonce(nonce);\n        Payload data = createPayload(dest, payload, tag, key, tags, newKey);\n        msg.setPayload(data);\n        session.sendMessage(msg);\n        updateBps(payload.length);\n    }","id":12593,"modified_method":"/**\n     * Package up and send the payload to the router for delivery\n     *\n     * @param tag unused - no end-to-end crypto\n     * @param tags unused - no end-to-end crypto\n     * @param key unused - no end-to-end crypto\n     * @param newKey unused - no end-to-end crypto\n     */\n    public void sendMessage(I2PSessionImpl session, Destination dest, long nonce, byte[] payload, SessionTag tag,\n                            SessionKey key, Set tags, SessionKey newKey, long expires) throws I2PSessionException {\n        if (!updateBps(payload.length, expires))\n            // drop the message... send fail notification?\n            return;\n        SendMessageMessage msg;\n        if (expires > 0) {\n            msg = new SendMessageExpiresMessage();\n            ((SendMessageExpiresMessage)msg).setExpiration(new Date(expires));\n        } else\n            msg = new SendMessageMessage();\n        msg.setDestination(dest);\n        msg.setSessionId(session.getSessionId());\n        msg.setNonce(nonce);\n        Payload data = createPayload(dest, payload, tag, key, tags, newKey);\n        msg.setPayload(data);\n        session.sendMessage(msg);\n    }","commit_id":"532c9d3fc59a649b51fdbee158001478e63f2c81","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private void updateBps(int len) {\n        long now = _context.clock().now();\n        float period = ((float)now-_sendPeriodBeginTime)/1000f;\n        if (period >= 1f) {\n            // first term decays on slow transmission\n            _sendBps = (int)(((float)0.9f * (float)_sendBps) + ((float)0.1f*((float)_sendPeriodBytes)/period));\n            _sendPeriodBytes = len;\n            _sendPeriodBeginTime = now;\n            _context.statManager().addRateData(\"client.sendBpsRaw\", _sendBps, 0);\n        } else {\n            _sendPeriodBytes += len;\n        }\n    }","id":12594,"modified_method":"/**\n     *  Super-simple bandwidth throttler.\n     *  We only calculate on a one-second basis, so large messages\n     *  (compared to the one-second limit) may exceed the limits.\n     *  Tuned for streaming, may not work well for large datagrams.\n     *\n     *  This does poorly with low rate limits since it doesn't credit\n     *  bandwidth across two periods. So the limit is rounded up,\n     *  and the min limit is set to 2x the typ size, above.\n     *\n     *  Blocking so this could be very bad for retransmissions,\n     *  as it could clog StreamingTimer.\n     *  Waits are somewhat \"fair\" using ReentrantLock.\n     *  While out-of-order transmission is acceptable, fairness\n     *  reduces the chance of starvation. ReentrantLock does not\n     *  guarantee in-order execution due to thread priority issues,\n     *  so out-of-order may still occur. But shouldn't happen within\n     *  the same thread anyway... Also note that small messages may\n     *  go ahead of large ones that are waiting for the next window.\n     *  Also, threads waiting a second time go to the back of the line.\n     *\n     *  Since this is at the I2CP layer, it includes streaming overhead,\n     *  streaming acks and retransmissions,\n     *  gzip overhead (or \"underhead\" for compression),\n     *  repliable datagram overhead, etc.\n     *  However, it does not, of course, include the substantial overhead\n     *  imposed by the router for the leaseset, tags, encryption,\n     *  and fixed-size tunnel messages.\n     *\n     *  @param expires if > 0, an expiration date\n     *  @return true if we should send the message, false to drop it\n     */\n    private boolean updateBps(int len, long expires) {\n        if (_maxBytesPerSecond <= 0)\n            return true;\n        //synchronized(this) {\n        _lock.lock();\n        try {\n            int waitCount = 0;\n            while (true) {\n                long now = _context.clock().now();\n                if (waitCount > 0 && expires > 0 && expires < now) {\n                    // just say no to bufferbloat... drop the message right here\n                    _context.statManager().addRateData(\"client.sendDropped\", len, 0);\n                    if (_log.shouldLog(Log.WARN))\n                        _log.warn(\"Dropping \" + len + \" byte msg expired in queue\");\n                    return false;\n                }\n\n                long period = now - _sendPeriodBeginTime;\n                if (period >= 2000) {\n                    // start new period, always let it through no matter how big\n                    _sendPeriodBytes = len;\n                    _sendPeriodBeginTime = now;\n                    if (_log.shouldLog(Log.DEBUG))\n                        _log.debug(\"New period after idle, \" + len + \" bytes\");\n                    return true;\n                }\n\n                if (period >= 1000) {\n                    // start new period\n                    // Allow burst within 2 sec, only advance window by 1 sec, and\n                    // every other second give credit for unused bytes in previous period\n                    if (_sendPeriodBytes > 0 && ((_sendPeriodBeginTime / 1000) & 0x01) == 0)\n                        _sendPeriodBytes += len - _maxBytesPerSecond;\n                    else\n                        _sendPeriodBytes = len;\n                    _sendPeriodBeginTime += 1000;\n                    if (_log.shouldLog(Log.DEBUG))\n                        _log.debug(\"New period, \" + len + \" bytes\");\n                    return true;\n                }\n\n                if (_sendPeriodBytes + len <= _maxBytesPerSecond) {\n                    // still bytes available in this period\n                    _sendPeriodBytes += len;\n                    if (_log.shouldLog(Log.DEBUG))\n                        _log.debug(\"Sending \" + len + \", Elapsed \" + period + \"ms, total \" + _sendPeriodBytes + \" bytes\");\n                    return true;\n                }\n\n                if (waitCount >= 2) {\n                    // just say no to bufferbloat... drop the message right here\n                    _context.statManager().addRateData(\"client.sendDropped\", len, 0);\n                    if (_log.shouldLog(Log.WARN))\n                        _log.warn(\"Dropping \" + len + \" byte msg after waiting \" + waitCount + \" times\");\n                    return false;\n                }\n\n                // wait until next period\n                _context.statManager().addRateData(\"client.sendThrottled\", ++waitCount, 0);\n                if (_log.shouldLog(Log.DEBUG))\n                    _log.debug(\"Throttled \" + len + \" bytes, wait #\" + waitCount + ' ' + (1000 - period) + \"ms\" /*, new Exception()*/);\n                try {\n                    //this.wait(1000 - period);\n                    _lock.newCondition().await(1000 - period, TimeUnit.MILLISECONDS);\n                } catch (InterruptedException ie) {}\n            }\n        } finally {\n            _lock.unlock();\n        }\n    }","commit_id":"532c9d3fc59a649b51fdbee158001478e63f2c81","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"public I2CPMessageProducer(I2PAppContext context) {\n        _context = context;\n        context.statManager().createRateStat(\"client.sendBpsRaw\", \"How fast we pump out I2CP data messages\", \"ClientMessages\", new long[] { 60*1000, 5*60*1000, 10*60*1000, 60*60*1000 });\n    }","id":12595,"modified_method":"public I2CPMessageProducer(I2PAppContext context) {\n        _context = context;\n        _log = context.logManager().getLog(I2CPMessageProducer.class);\n        _lock = new ReentrantLock(true);\n        context.statManager().createRateStat(\"client.sendThrottled\", \"Times waited for bandwidth\", \"ClientMessages\", new long[] { 60*1000 });\n        context.statManager().createRateStat(\"client.sendDropped\", \"Length of msg dropped waiting for bandwidth\", \"ClientMessages\", new long[] { 60*1000 });\n    }","commit_id":"532c9d3fc59a649b51fdbee158001478e63f2c81","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/** \n     * Send all the messages that a client needs to send to a router to establish\n     * a new session.  \n     */\n    public void connect(I2PSessionImpl session) throws I2PSessionException {\n        CreateSessionMessage msg = new CreateSessionMessage();\n        SessionConfig cfg = new SessionConfig(session.getMyDestination());\n        cfg.setOptions(session.getOptions());\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"config created\");\n        try {\n            cfg.signSessionConfig(session.getPrivateKey());\n        } catch (DataFormatException dfe) {\n            throw new I2PSessionException(\"Unable to sign the session config\", dfe);\n        }\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"config signed\");\n        msg.setSessionConfig(cfg);\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"config loaded into message\");\n        session.sendMessage(msg);\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"config message sent\");\n    }","id":12596,"modified_method":"/** \n     * Send all the messages that a client needs to send to a router to establish\n     * a new session.  \n     */\n    public void connect(I2PSessionImpl session) throws I2PSessionException {\n        updateBandwidth(session);\n        CreateSessionMessage msg = new CreateSessionMessage();\n        SessionConfig cfg = new SessionConfig(session.getMyDestination());\n        cfg.setOptions(session.getOptions());\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"config created\");\n        try {\n            cfg.signSessionConfig(session.getPrivateKey());\n        } catch (DataFormatException dfe) {\n            throw new I2PSessionException(\"Unable to sign the session config\", dfe);\n        }\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"config signed\");\n        msg.setSessionConfig(cfg);\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"config loaded into message\");\n        session.sendMessage(msg);\n        if (_log.shouldLog(Log.DEBUG)) _log.debug(\"config message sent\");\n    }","commit_id":"532c9d3fc59a649b51fdbee158001478e63f2c81","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private Properties filter(Properties options) {\n        Properties rv = new Properties();\n        for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {\n            String key = (String) iter.next();\n            String val = options.getProperty(key);\n            if (key.startsWith(\"java\") ||\n                key.startsWith(\"user\") ||\n                key.startsWith(\"os\") ||\n                key.startsWith(\"sun\") ||\n                key.startsWith(\"file\") ||\n                key.startsWith(\"line\") ||\n                key.startsWith(\"wrapper\")) {\n                if (_log.shouldLog(Log.DEBUG)) _log.debug(\"Skipping property: \" + key);\n            } else if ((key.length() > 255) || (val.length() > 255)) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(getPrefix() + \"Not passing on property [\"\n                              + key\n                              + \"] in the session configuration as the value is too long (max = 255): \"\n                              + val);\n            } else {\n                rv.setProperty(key, val);\n            }\n        }\n        return rv;\n    }","id":12597,"modified_method":"/** save some memory, don't pass along the pointless properties */\n    private Properties filter(Properties options) {\n        Properties rv = new Properties();\n        for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {\n            String key = (String) iter.next();\n            if (key.startsWith(\"java.\") ||\n                key.startsWith(\"user.\") ||\n                key.startsWith(\"os.\") ||\n                key.startsWith(\"sun.\") ||\n                key.startsWith(\"file.\") ||\n                key.equals(\"line.separator\") ||\n                key.equals(\"path.separator\") ||\n                key.equals(\"prng.buffers\") ||\n                key.equals(\"router.trustedUpdateKeys\") ||\n                key.startsWith(\"router.update\") ||\n                key.startsWith(\"routerconsole.\") ||\n                key.startsWith(\"time.\") ||\n                key.startsWith(\"stat.\") ||\n                key.startsWith(\"gnu.\") ||  // gnu JVM\n                key.startsWith(\"net.i2p.router.web.\") ||  // console nonces\n                key.startsWith(\"wrapper.\")) {\n                if (_log.shouldLog(Log.DEBUG)) _log.debug(\"Skipping property: \" + key);\n                continue;\n            }\n            String val = options.getProperty(key);\n            if ((key.length() > 255) || (val.length() > 255)) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(getPrefix() + \"Not passing on property [\"\n                              + key\n                              + \"] in the session configuration as the value is too long (max = 255): \"\n                              + val);\n            } else {\n                rv.setProperty(key, val);\n            }\n        }\n        return rv;\n    }","commit_id":"532c9d3fc59a649b51fdbee158001478e63f2c81","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\r\n     * Checks if a given address (hostname or IP) is *not* a local address\r\n     *\r\n     * @param address Address to check\r\n     * @return boolean, true if address is public, false if address is private \r\n     */\r\n    public static boolean isNotLocal(String address) {\r\n\r\n        assert (address != null);\r\n        \r\n        // check local ip addresses\r\n        if ((address.equals(\"localhost\")) ||\r\n            (address.startsWith(\"127\")) ||\r\n            (address.startsWith(\"192.168\")) ||\r\n            (address.startsWith(\"10.\")) ||\r\n            (address.startsWith(\"169.254\")) ||\r\n            //172.16.0.0�172.31.255.255 (I think this is faster than a regex)\r\n            (address.startsWith(\"172.16\")) || (address.startsWith(\"172.17\")) || (address.startsWith(\"172.18\")) || (address.startsWith(\"172.19\")) || (address.startsWith(\"172.20\")) || (address.startsWith(\"172.21\")) || (address.startsWith(\"172.22\")) || (address.startsWith(\"172.23\")) || (address.startsWith(\"172.24\")) || (address.startsWith(\"172.25\")) || (address.startsWith(\"172.26\")) || (address.startsWith(\"172.27\")) || (address.startsWith(\"172.28\")) || (address.startsWith(\"172.29\")) || (address.startsWith(\"172.30\")) || (address.startsWith(\"172.31\"))\r\n           ) return false;\r\n        \r\n        // make a dns resolve if a hostname is given and check again\r\n        final InetAddress clientAddress = httpc.dnsResolve(address);\r\n        if (clientAddress != null) {\r\n            if ((clientAddress.isAnyLocalAddress()) || (clientAddress.isLoopbackAddress())) return false;\r\n            if (address.charAt(0) > '9') address = clientAddress.getHostAddress();\r\n        }\r\n        \r\n        // finally check if there are other local IP adresses that are not in the standard IP range\r\n        for (int i = 0; i < localAddresses.length; i++) {\r\n            if (localAddresses[i].equals(clientAddress)) return false;\r\n        }\r\n        \r\n        // the address must be a global address\r\n        return true;\r\n    }","id":12598,"modified_method":"/**\r\n     * Checks if a given address (hostname or IP) is *not* a local address\r\n     *\r\n     * @param address Address to check\r\n     * @return boolean, true if address is public, false if address is private \r\n     */\r\n    public static boolean isNotLocal(String address) {\r\n\r\n        assert (address != null);\r\n        \r\n        // check local ip addresses\r\n        if (address.equals(\"localhost\")   ||\r\n            address.startsWith(\"127\")     ||\r\n            address.startsWith(\"192.168\") ||\r\n            address.startsWith(\"10.\")     ||\r\n            address.startsWith(\"169.254\") ||\r\n            // 172.16.0.0�172.31.255.255 (I think this is faster than a regex)\r\n            (address.startsWith(\"172.\") && ( \r\n             address.startsWith(\"172.16.\") || address.startsWith(\"172.17.\") ||\r\n             address.startsWith(\"172.18.\") || address.startsWith(\"172.19.\") ||\r\n             address.startsWith(\"172.20.\") || address.startsWith(\"172.21.\") ||\r\n             address.startsWith(\"172.22.\") || address.startsWith(\"172.23.\") ||\r\n             address.startsWith(\"172.24.\") || address.startsWith(\"172.25.\") ||\r\n             address.startsWith(\"172.26.\") || address.startsWith(\"172.27.\") ||\r\n             address.startsWith(\"172.28.\") || address.startsWith(\"172.29.\") ||\r\n             address.startsWith(\"172.30.\") || address.startsWith(\"172.31.\")\r\n            ))\r\n           ) return false;\r\n        \r\n        // make a dns resolve if a hostname is given and check again\r\n        final InetAddress clientAddress = httpc.dnsResolve(address);\r\n        if (clientAddress != null) {\r\n            if ((clientAddress.isAnyLocalAddress()) || (clientAddress.isLoopbackAddress())) return false;\r\n            if (address.charAt(0) > '9') address = clientAddress.getHostAddress();\r\n        }\r\n        \r\n        // finally check if there are other local IP adresses that are not in the standard IP range\r\n        for (int i = 0; i < localAddresses.length; i++) {\r\n            if (localAddresses[i].equals(clientAddress)) return false;\r\n        }\r\n        \r\n        // the address must be a global address\r\n        return true;\r\n    }","commit_id":"05d0464377d3676761f60cac5ee58830f03c60bc","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"@Test\n    public void testGracefulShutdown() throws Exception {\n        int size = 50000;\n        TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(4);\n        final Config config = new Config();\n\n        HazelcastInstance h1 = nodeFactory.newHazelcastInstance(config);\n        IMap m1 = h1.getMap(MAP_NAME);\n        for (int i = 0; i < size; i++) {\n            m1.put(i, i);\n        }\n\n        HazelcastInstance h2 = nodeFactory.newHazelcastInstance(config);\n        IMap m2 = h2.getMap(MAP_NAME);\n        h1.shutdown();\n        assertEquals(size, m2.size());\n\n        HazelcastInstance h3 = nodeFactory.newHazelcastInstance(config);\n        IMap m3 = h3.getMap(MAP_NAME);\n        h2.shutdown();\n        assertEquals(size, m3.size());\n\n        HazelcastInstance h4 = nodeFactory.newHazelcastInstance(config);\n        IMap m4 = h4.getMap(MAP_NAME);\n        h3.shutdown();\n        assertEquals(size, m4.size());\n    }","id":12599,"modified_method":"@Test\n    public void testGracefulShutdown() throws Exception {\n        int size = 50000;\n        TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(4);\n        final Config config = new Config();\n\n        HazelcastInstance h1 = nodeFactory.newHazelcastInstance(config);\n        IMap<Integer, Integer> m1 = h1.getMap(MAP_NAME);\n        for (int i = 0; i < size; i++) {\n            m1.put(i, i);\n        }\n\n        HazelcastInstance h2 = nodeFactory.newHazelcastInstance(config);\n        IMap m2 = h2.getMap(MAP_NAME);\n        shutdownAndWait(h1);\n        waitForMigrationAndCheckSize(size, h2, m2);\n\n        HazelcastInstance h3 = nodeFactory.newHazelcastInstance(config);\n        IMap m3 = h3.getMap(MAP_NAME);\n        shutdownAndWait(h2);\n        waitForMigrationAndCheckSize(size, h3, m3);\n\n        HazelcastInstance h4 = nodeFactory.newHazelcastInstance(config);\n        IMap m4 = h4.getMap(MAP_NAME);\n        shutdownAndWait(h3);\n        waitForMigrationAndCheckSize(size, h4, m4);\n    }","commit_id":"ea12b4b235249b184b7894e70c3288895164c73e","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void testBackupMigrationAndRecovery(int nodeCount, int backupCount, int mapSize) throws Exception {\n        TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(nodeCount);\n        final String name = MAP_NAME;\n        final Config config = new Config();\n        config.setProperty(GroupProperties.PROP_PARTITION_BACKUP_SYNC_INTERVAL, \"1\");\n        config.getMapConfig(name).setBackupCount(backupCount).setStatisticsEnabled(true);\n\n        final HazelcastInstance[] instances = new HazelcastInstance[nodeCount];\n\n        HazelcastInstance hz = nodeFactory.newHazelcastInstance(config);\n        instances[0] = hz;\n        IMap map1 = hz.getMap(name);\n        for (int i = 0; i < mapSize; i++) {\n            map1.put(i, \"value\" + i);\n        }\n        checkMapSizes(mapSize, backupCount, instances);\n\n        for (int i = 1; i < nodeCount; i++) {\n            instances[i] = nodeFactory.newHazelcastInstance(config);\n            checkMapSizes(mapSize, backupCount, instances);\n        }\n\n        final Random rand = new Random();\n        for (int i = 1; i < nodeCount; i++) {\n            int ix;\n            do {\n                ix = rand.nextInt(nodeCount);\n            } while (instances[ix] == null);\n\n            TestUtil.terminateInstance(instances[ix]);\n            instances[ix] = null;\n            checkMapSizes(mapSize, backupCount, instances);\n\n        }\n\n    }","id":12600,"modified_method":"private void testBackupMigrationAndRecovery(int nodeCount, int backupCount, int mapSize) throws Exception {\n        TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(nodeCount);\n        final String name = MAP_NAME;\n        final Config config = new Config();\n        config.setProperty(GroupProperties.PROP_PARTITION_BACKUP_SYNC_INTERVAL, \"1\");\n        config.getMapConfig(name).setBackupCount(backupCount).setStatisticsEnabled(true);\n\n        final HazelcastInstance[] instances = new HazelcastInstance[nodeCount];\n\n        HazelcastInstance hz = nodeFactory.newHazelcastInstance(config);\n        instances[0] = hz;\n        IMap<Integer, String> map1 = hz.getMap(name);\n        for (int i = 0; i < mapSize; i++) {\n            map1.put(i, \"value\" + i);\n        }\n        checkMapSizes(mapSize, backupCount, instances);\n\n        for (int i = 1; i < nodeCount; i++) {\n            instances[i] = nodeFactory.newHazelcastInstance(config);\n            checkMapSizes(mapSize, backupCount, instances);\n        }\n\n        final Random rand = new Random();\n        for (int i = 1; i < nodeCount; i++) {\n            int ix;\n            do {\n                ix = rand.nextInt(nodeCount);\n            } while (instances[ix] == null);\n\n            TestUtil.terminateInstance(instances[ix]);\n            instances[ix] = null;\n            checkMapSizes(mapSize, backupCount, instances);\n\n        }\n\n    }","commit_id":"ea12b4b235249b184b7894e70c3288895164c73e","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testGracefulShutdown2() throws Exception {\n        Config config = new Config();\n        config.getMapConfig(MAP_NAME).setBackupCount(2);\n\n        TestHazelcastInstanceFactory f = createHazelcastInstanceFactory(6);\n        final HazelcastInstance hz = f.newHazelcastInstance(config);\n\n        final IMap<Object, Object> map = hz.getMap(MAP_NAME);\n        final int size = 50000;\n        for (int i = 0; i < size; i++) {\n            map.put(i, i);\n        }\n\n        final HazelcastInstance hz2 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map2 = hz2.getMap(MAP_NAME);\n\n        assertEquals(size, map2.size());\n\n        final HazelcastInstance hz3 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map3 = hz3.getMap(MAP_NAME);\n\n        final HazelcastInstance hz4 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map4 = hz4.getMap(MAP_NAME);\n\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n\n        final HazelcastInstance hz5 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map5 = hz5.getMap(MAP_NAME);\n\n        final HazelcastInstance hz6 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map6 = hz6.getMap(MAP_NAME);\n\n        assertEquals(size, map5.size());\n        assertEquals(size, map6.size());\n\n        hz.shutdown();\n        hz2.shutdown();\n\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n        assertEquals(size, map5.size());\n        assertEquals(size, map6.size());\n\n        hz3.shutdown();\n        hz4.shutdown();\n\n        assertEquals(size, map5.size());\n        assertEquals(size, map6.size());\n    }","id":12601,"modified_method":"@Test\n    public void testGracefulShutdown2() throws Exception {\n        Config config = new Config();\n\n        config.getMapConfig(MAP_NAME).setBackupCount(2);\n\n        TestHazelcastInstanceFactory f = createHazelcastInstanceFactory(6);\n        final HazelcastInstance hz = f.newHazelcastInstance(config);\n\n        final IMap<Integer, Integer> map = hz.getMap(MAP_NAME);\n        final int size = 50000;\n        for (int i = 0; i < size; i++) {\n            map.put(i, i);\n        }\n\n        final HazelcastInstance hz2 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map2 = hz2.getMap(MAP_NAME);\n\n        waitForMigrationAndCheckSize(size, hz2, map2);\n\n        final HazelcastInstance hz3 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map3 = hz3.getMap(MAP_NAME);\n\n        final HazelcastInstance hz4 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map4 = hz4.getMap(MAP_NAME);\n\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n\n        final HazelcastInstance hz5 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map5 = hz5.getMap(MAP_NAME);\n\n        final HazelcastInstance hz6 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map6 = hz6.getMap(MAP_NAME);\n\n        waitForMigrationAndCheckSize(size, hz5, map5);\n        waitForMigrationAndCheckSize(size, hz6, map6);\n\n        shutdownAndWait(hz);\n        shutdownAndWait(hz2);\n\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n        waitForMigrationAndCheckSize(size, hz5, map5);\n        waitForMigrationAndCheckSize(size, hz6, map6);\n\n        shutdownAndWait(hz3);\n        shutdownAndWait(hz4);\n\n        waitForMigrationAndCheckSize(size, hz5, map5);\n        waitForMigrationAndCheckSize(size, hz6, map6);\n    }","commit_id":"ea12b4b235249b184b7894e70c3288895164c73e","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testGracefulShutdown3() throws Exception {\n        Config config = new Config();\n        config.getMapConfig(MAP_NAME).setBackupCount(1);\n\n        TestHazelcastInstanceFactory f = createHazelcastInstanceFactory(6);\n        final HazelcastInstance hz = f.newHazelcastInstance(config);\n\n        final IMap<Object, Object> map = hz.getMap(MAP_NAME);\n        final int size = 50000;\n        for (int i = 0; i < size; i++) {\n            map.put(i, i);\n        }\n\n        final HazelcastInstance hz2 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map2 = hz2.getMap(MAP_NAME);\n\n        final HazelcastInstance hz3 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map3 = hz3.getMap(MAP_NAME);\n\n        final HazelcastInstance hz4 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map4 = hz4.getMap(MAP_NAME);\n\n        final HazelcastInstance hz5 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map5 = hz5.getMap(MAP_NAME);\n\n        final HazelcastInstance hz6 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map6 = hz6.getMap(MAP_NAME);\n\n        assertEquals(size, map2.size());\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n        assertEquals(size, map5.size());\n        assertEquals(size, map6.size());\n\n        hz6.shutdown();\n        assertEquals(size, map.size());\n        assertEquals(size, map2.size());\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n        assertEquals(size, map5.size());\n\n        hz2.shutdown();\n        assertEquals(size, map.size());\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n        assertEquals(size, map5.size());\n\n        hz5.shutdown();\n        assertEquals(size, map.size());\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n\n        hz3.shutdown();\n        assertEquals(size, map.size());\n        assertEquals(size, map4.size());\n\n        hz4.shutdown();\n        assertEquals(size, map.size());\n    }","id":12602,"modified_method":"@Test\n    public void testGracefulShutdown3() throws Exception {\n        Config config = new Config();\n        config.getMapConfig(MAP_NAME).setBackupCount(1);\n\n        TestHazelcastInstanceFactory f = createHazelcastInstanceFactory(6);\n        final HazelcastInstance hz = f.newHazelcastInstance(config);\n\n        final IMap<Integer, Integer> map = hz.getMap(MAP_NAME);\n        final int size = 50000;\n        for (int i = 0; i < size; i++) {\n            map.put(i, i);\n        }\n\n        final HazelcastInstance hz2 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map2 = hz2.getMap(MAP_NAME);\n\n        final HazelcastInstance hz3 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map3 = hz3.getMap(MAP_NAME);\n\n        final HazelcastInstance hz4 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map4 = hz4.getMap(MAP_NAME);\n\n        final HazelcastInstance hz5 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map5 = hz5.getMap(MAP_NAME);\n\n        final HazelcastInstance hz6 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map6 = hz6.getMap(MAP_NAME);\n\n        waitForMigrationAndCheckSize(size, hz2, map2);\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n        waitForMigrationAndCheckSize(size, hz5, map5);\n        waitForMigrationAndCheckSize(size, hz6, map6);\n\n        shutdownAndWait(hz6);\n        waitForMigrationAndCheckSize(size, hz, map);\n        waitForMigrationAndCheckSize(size, hz2, map2);\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n        waitForMigrationAndCheckSize(size, hz5, map5);\n\n        shutdownAndWait(hz2);\n        waitForMigrationAndCheckSize(size, hz, map);\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n        waitForMigrationAndCheckSize(size, hz5, map5);\n\n        shutdownAndWait(hz5);\n        waitForMigrationAndCheckSize(size, hz, map);\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n\n        shutdownAndWait(hz3);\n        waitForMigrationAndCheckSize(size, hz, map);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n\n        shutdownAndWait(hz4);\n        waitForMigrationAndCheckSize(size, hz, map);\n    }","commit_id":"ea12b4b235249b184b7894e70c3288895164c73e","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/**\n     * Test for issue #259.\n     */\n    @Test\n    public void testBackupPutWhenOwnerNodeDead() throws InterruptedException {\n        final TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(2);\n\n        final String name = MAP_NAME;\n\n        final HazelcastInstance hz = nodeFactory.newHazelcastInstance();\n        final HazelcastInstance hz2 = nodeFactory.newHazelcastInstance();\n        final IMap<Object, Object> map = hz2.getMap(name);\n\n        final int size = 100000;\n        final byte[] data = new byte[250];\n        final int threads = 100;\n        final int l = size / threads;\n        final CountDownLatch latch = new CountDownLatch(threads);\n        ExecutorService ex = Executors.newFixedThreadPool(threads);\n\n        new Thread() {\n            public void run() {\n                while (hz.getMap(name).size() < size / 2) {\n                    try {\n                        sleep(5);\n                    } catch (InterruptedException ignored) {\n                        return;\n                    }\n                }\n                TestUtil.terminateInstance(hz);\n            }\n        }.start();\n\n        for (int i = 0; i < threads; i++) {\n            final int n = i;\n            ex.execute(new Runnable() {\n                public void run() {\n                    for (int j = (n * l); j < (n + 1) * l; j++) {\n                        map.put(j, data);\n                        try {\n                            Thread.sleep(1);\n                        } catch (InterruptedException ignored) {\n                            return;\n                        }\n                    }\n                    latch.countDown();\n                }\n            });\n        }\n\n        try {\n            assertTrue(latch.await(5, TimeUnit.MINUTES));\n            assertEquals(\"Data lost!\", size, map.size());\n        } finally {\n            ex.shutdownNow();\n        }\n    }","id":12603,"modified_method":"/**\n     * Test for issue #259.\n     */\n    @Test\n    public void testBackupPutWhenOwnerNodeDead() throws InterruptedException {\n        final TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(2);\n\n        final String name = MAP_NAME;\n\n        final HazelcastInstance hz = nodeFactory.newHazelcastInstance();\n        final HazelcastInstance hz2 = nodeFactory.newHazelcastInstance();\n        final IMap<Integer, byte[]> map = hz2.getMap(name);\n\n        final int size = 100000;\n        final byte[] data = new byte[250];\n        final int threads = 100;\n        final int l = size / threads;\n        final CountDownLatch latch = new CountDownLatch(threads);\n        ExecutorService ex = Executors.newFixedThreadPool(threads);\n\n        new Thread() {\n            public void run() {\n                while (hz.getMap(name).size() < size / 2) {\n                    try {\n                        sleep(5);\n                    } catch (InterruptedException ignored) {\n                        return;\n                    }\n                }\n                TestUtil.terminateInstance(hz);\n            }\n        }.start();\n\n        for (int i = 0; i < threads; i++) {\n            final int n = i;\n            ex.execute(new Runnable() {\n                public void run() {\n                    for (int j = (n * l); j < (n + 1) * l; j++) {\n                        map.put(j, data);\n                        try {\n                            Thread.sleep(1);\n                        } catch (InterruptedException ignored) {\n                            return;\n                        }\n                    }\n                    latch.countDown();\n                }\n            });\n        }\n\n        try {\n            assertTrue(latch.await(5, TimeUnit.MINUTES));\n            assertEquals(\"Data lost!\", size, map.size());\n        } finally {\n            ex.shutdownNow();\n        }\n    }","commit_id":"7ad068e1bedbccc07c7f99ee892837bcb3368444","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/**\n     * Test for issue #259.\n     */\n    @Test\n    public void testBackupRemoveWhenOwnerNodeDead() throws InterruptedException {\n        final TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(2);\n\n        final String name = MAP_NAME;\n\n        final HazelcastInstance hz = nodeFactory.newHazelcastInstance();\n        final HazelcastInstance hz2 = nodeFactory.newHazelcastInstance();\n        final IMap<Object, Object> map = hz2.getMap(name);\n\n        final int size = 100000;\n        final int threads = 100;\n        ExecutorService ex = Executors.newFixedThreadPool(threads);\n        final int loadCount = 10;\n        final CountDownLatch loadLatch = new CountDownLatch(loadCount);\n\n        // initial load\n        for (int i = 0; i < loadCount; i++) {\n            final int n = i;\n            ex.execute(new Runnable() {\n                public void run() {\n                    int chunk = size / loadCount;\n                    for (int j = (n * chunk); j < (n + 1) * chunk; j++) {\n                        map.put(j, j);\n                    }\n                    loadLatch.countDown();\n                }\n            });\n        }\n        loadLatch.await();\n\n        new Thread() {\n            public void run() {\n                while (hz.getMap(name).size() > size / 2) {\n                    try {\n                        sleep(5);\n                    } catch (InterruptedException ignored) {\n                        return;\n                    }\n                }\n                TestUtil.terminateInstance(hz);\n            }\n        }.start();\n\n        final int chunk = size / threads;\n        final CountDownLatch latch = new CountDownLatch(threads);\n        for (int i = 0; i < threads; i++) {\n            final int n = i;\n            ex.execute(new Runnable() {\n                public void run() {\n                    for (int j = (n * chunk); j < (n + 1) * chunk; j++) {\n                        map.remove(j);\n                        try {\n                            Thread.sleep(1);\n                        } catch (InterruptedException ignored) {\n                        }\n                    }\n                    latch.countDown();\n                }\n            });\n        }\n\n        try {\n            assertTrue(latch.await(5, TimeUnit.MINUTES));\n            assertEquals(\"Remove failed!\", 0, map.size());\n        } finally {\n            ex.shutdown();\n        }\n    }","id":12604,"modified_method":"/**\n     * Test for issue #259.\n     */\n    @Test\n    public void testBackupRemoveWhenOwnerNodeDead() throws InterruptedException {\n        final TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(2);\n\n        final String name = MAP_NAME;\n\n        final HazelcastInstance hz = nodeFactory.newHazelcastInstance();\n        final HazelcastInstance hz2 = nodeFactory.newHazelcastInstance();\n        final IMap<Integer, Integer> map = hz2.getMap(name);\n\n        final int size = 100000;\n        final int threads = 100;\n        ExecutorService ex = Executors.newFixedThreadPool(threads);\n        final int loadCount = 10;\n        final CountDownLatch loadLatch = new CountDownLatch(loadCount);\n\n        // initial load\n        for (int i = 0; i < loadCount; i++) {\n            final int n = i;\n            ex.execute(new Runnable() {\n                public void run() {\n                    int chunk = size / loadCount;\n                    for (int j = (n * chunk); j < (n + 1) * chunk; j++) {\n                        map.put(j, j);\n                    }\n                    loadLatch.countDown();\n                }\n            });\n        }\n        loadLatch.await();\n\n        new Thread() {\n            public void run() {\n                while (hz.getMap(name).size() > size / 2) {\n                    try {\n                        sleep(5);\n                    } catch (InterruptedException ignored) {\n                        return;\n                    }\n                }\n                TestUtil.terminateInstance(hz);\n            }\n        }.start();\n\n        final int chunk = size / threads;\n        final CountDownLatch latch = new CountDownLatch(threads);\n        for (int i = 0; i < threads; i++) {\n            final int n = i;\n            ex.execute(new Runnable() {\n                public void run() {\n                    for (int j = (n * chunk); j < (n + 1) * chunk; j++) {\n                        map.remove(j);\n                        try {\n                            Thread.sleep(1);\n                        } catch (InterruptedException ignored) {\n                        }\n                    }\n                    latch.countDown();\n                }\n            });\n        }\n\n        try {\n            assertTrue(latch.await(5, TimeUnit.MINUTES));\n            assertEquals(\"Remove failed!\", 0, map.size());\n        } finally {\n            ex.shutdown();\n        }\n    }","commit_id":"7ad068e1bedbccc07c7f99ee892837bcb3368444","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testGracefulShutdown3() throws Exception {\n        Config config = new Config();\n        config.getMapConfig(MAP_NAME).setBackupCount(1);\n\n        TestHazelcastInstanceFactory f = createHazelcastInstanceFactory(6);\n        final HazelcastInstance hz = f.newHazelcastInstance(config);\n\n        final IMap<Object, Object> map = hz.getMap(MAP_NAME);\n        final int size = 50000;\n        for (int i = 0; i < size; i++) {\n            map.put(i, i);\n        }\n\n        final HazelcastInstance hz2 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map2 = hz2.getMap(MAP_NAME);\n\n        final HazelcastInstance hz3 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map3 = hz3.getMap(MAP_NAME);\n\n        final HazelcastInstance hz4 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map4 = hz4.getMap(MAP_NAME);\n\n        final HazelcastInstance hz5 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map5 = hz5.getMap(MAP_NAME);\n\n        final HazelcastInstance hz6 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map6 = hz6.getMap(MAP_NAME);\n\n        assertEquals(size, map2.size());\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n        assertEquals(size, map5.size());\n        assertEquals(size, map6.size());\n\n        hz6.shutdown();\n        assertEquals(size, map.size());\n        assertEquals(size, map2.size());\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n        assertEquals(size, map5.size());\n\n        hz2.shutdown();\n        assertEquals(size, map.size());\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n        assertEquals(size, map5.size());\n\n        hz5.shutdown();\n        assertEquals(size, map.size());\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n\n        hz3.shutdown();\n        assertEquals(size, map.size());\n        assertEquals(size, map4.size());\n\n        hz4.shutdown();\n        assertEquals(size, map.size());\n    }","id":12605,"modified_method":"@Test\n    public void testGracefulShutdown3() throws Exception {\n        Config config = new Config();\n        config.getMapConfig(MAP_NAME).setBackupCount(1);\n\n        TestHazelcastInstanceFactory f = createHazelcastInstanceFactory(6);\n        final HazelcastInstance hz = f.newHazelcastInstance(config);\n\n        final IMap<Integer, Integer> map = hz.getMap(MAP_NAME);\n        final int size = 50000;\n        for (int i = 0; i < size; i++) {\n            map.put(i, i);\n        }\n\n        final HazelcastInstance hz2 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map2 = hz2.getMap(MAP_NAME);\n\n        final HazelcastInstance hz3 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map3 = hz3.getMap(MAP_NAME);\n\n        final HazelcastInstance hz4 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map4 = hz4.getMap(MAP_NAME);\n\n        final HazelcastInstance hz5 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map5 = hz5.getMap(MAP_NAME);\n\n        final HazelcastInstance hz6 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map6 = hz6.getMap(MAP_NAME);\n\n        waitForMigrationAndCheckSize(size, hz2, map2);\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n        waitForMigrationAndCheckSize(size, hz5, map5);\n        waitForMigrationAndCheckSize(size, hz6, map6);\n\n        shutdownAndWait(hz6);\n        waitForMigrationAndCheckSize(size, hz, map);\n        waitForMigrationAndCheckSize(size, hz2, map2);\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n        waitForMigrationAndCheckSize(size, hz5, map5);\n\n        shutdownAndWait(hz2);\n        waitForMigrationAndCheckSize(size, hz, map);\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n        waitForMigrationAndCheckSize(size, hz5, map5);\n\n        shutdownAndWait(hz5);\n        waitForMigrationAndCheckSize(size, hz, map);\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n\n        shutdownAndWait(hz3);\n        waitForMigrationAndCheckSize(size, hz, map);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n\n        shutdownAndWait(hz4);\n        waitForMigrationAndCheckSize(size, hz, map);\n    }","commit_id":"7ad068e1bedbccc07c7f99ee892837bcb3368444","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void testBackupMigrationAndRecovery(int nodeCount, int backupCount, int mapSize) throws Exception {\n        TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(nodeCount);\n        final String name = MAP_NAME;\n        final Config config = new Config();\n        config.setProperty(GroupProperties.PROP_PARTITION_BACKUP_SYNC_INTERVAL, \"1\");\n        config.getMapConfig(name).setBackupCount(backupCount).setStatisticsEnabled(true);\n\n        final HazelcastInstance[] instances = new HazelcastInstance[nodeCount];\n\n        HazelcastInstance hz = nodeFactory.newHazelcastInstance(config);\n        instances[0] = hz;\n        IMap map1 = hz.getMap(name);\n        for (int i = 0; i < mapSize; i++) {\n            map1.put(i, \"value\" + i);\n        }\n        checkMapSizes(mapSize, backupCount, instances);\n\n        for (int i = 1; i < nodeCount; i++) {\n            instances[i] = nodeFactory.newHazelcastInstance(config);\n            checkMapSizes(mapSize, backupCount, instances);\n        }\n\n        final Random rand = new Random();\n        for (int i = 1; i < nodeCount; i++) {\n            int ix;\n            do {\n                ix = rand.nextInt(nodeCount);\n            } while (instances[ix] == null);\n\n            TestUtil.terminateInstance(instances[ix]);\n            instances[ix] = null;\n            checkMapSizes(mapSize, backupCount, instances);\n\n        }\n\n    }","id":12606,"modified_method":"private void testBackupMigrationAndRecovery(int nodeCount, int backupCount, int mapSize) throws Exception {\n        TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(nodeCount);\n        final String name = MAP_NAME;\n        final Config config = new Config();\n        config.setProperty(GroupProperties.PROP_PARTITION_BACKUP_SYNC_INTERVAL, \"1\");\n        config.getMapConfig(name).setBackupCount(backupCount).setStatisticsEnabled(true);\n\n        final HazelcastInstance[] instances = new HazelcastInstance[nodeCount];\n\n        HazelcastInstance hz = nodeFactory.newHazelcastInstance(config);\n        instances[0] = hz;\n        IMap<Integer, String> map1 = hz.getMap(name);\n        for (int i = 0; i < mapSize; i++) {\n            map1.put(i, \"value\" + i);\n        }\n        checkMapSizes(mapSize, backupCount, instances);\n\n        for (int i = 1; i < nodeCount; i++) {\n            instances[i] = nodeFactory.newHazelcastInstance(config);\n            checkMapSizes(mapSize, backupCount, instances);\n        }\n\n        final Random rand = new Random();\n        for (int i = 1; i < nodeCount; i++) {\n            int ix;\n            do {\n                ix = rand.nextInt(nodeCount);\n            } while (instances[ix] == null);\n\n            TestUtil.terminateInstance(instances[ix]);\n            instances[ix] = null;\n            checkMapSizes(mapSize, backupCount, instances);\n\n        }\n    }","commit_id":"7ad068e1bedbccc07c7f99ee892837bcb3368444","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/**\n     * Tests data safety when multiple nodes start and a non-master node is shutdown\n     * immediately after start and doing a partition based operation.\n     */\n    @Test\n    public void testGracefulShutdown_Issue2804() {\n        Config config = new Config();\n        config.setProperty(GroupProperties.PROP_PARTITION_COUNT, \"1111\");\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n\n        HazelcastInstance h1 = factory.newHazelcastInstance(config);\n        HazelcastInstance h2 = factory.newHazelcastInstance(config);\n\n        Object key = \"key\";\n        Object value = \"value\";\n\n        IMap<Object, Object> map = h1.getMap(MAP_NAME);\n        map.put(key, value);\n\n        h2.shutdown();\n        Assert.assertEquals(value, map.get(key));\n    }","id":12607,"modified_method":"/**\n     * Tests data safety when multiple nodes start and a non-master node is shutdown\n     * immediately after start and doing a partition based operation.\n     */\n    @Test\n    public void testGracefulShutdown_Issue2804() {\n        Config config = new Config();\n        config.setProperty(GroupProperties.PROP_PARTITION_COUNT, \"1111\");\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n\n        HazelcastInstance h1 = factory.newHazelcastInstance(config);\n        HazelcastInstance h2 = factory.newHazelcastInstance(config);\n\n        String key = \"key\";\n        String value = \"value\";\n\n        IMap<String, String> map = h1.getMap(MAP_NAME);\n        map.put(key, value);\n\n        h2.shutdown();\n        Assert.assertEquals(value, map.get(key));\n    }","commit_id":"7ad068e1bedbccc07c7f99ee892837bcb3368444","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testGracefulShutdown2() throws Exception {\n        Config config = new Config();\n        config.getMapConfig(MAP_NAME).setBackupCount(2);\n\n        TestHazelcastInstanceFactory f = createHazelcastInstanceFactory(6);\n        final HazelcastInstance hz = f.newHazelcastInstance(config);\n\n        final IMap<Object, Object> map = hz.getMap(MAP_NAME);\n        final int size = 50000;\n        for (int i = 0; i < size; i++) {\n            map.put(i, i);\n        }\n\n        final HazelcastInstance hz2 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map2 = hz2.getMap(MAP_NAME);\n\n        assertEquals(size, map2.size());\n\n        final HazelcastInstance hz3 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map3 = hz3.getMap(MAP_NAME);\n\n        final HazelcastInstance hz4 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map4 = hz4.getMap(MAP_NAME);\n\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n\n        final HazelcastInstance hz5 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map5 = hz5.getMap(MAP_NAME);\n\n        final HazelcastInstance hz6 = f.newHazelcastInstance(config);\n        final IMap<Object, Object> map6 = hz6.getMap(MAP_NAME);\n\n        assertEquals(size, map5.size());\n        assertEquals(size, map6.size());\n\n        hz.shutdown();\n        hz2.shutdown();\n\n        assertEquals(size, map3.size());\n        assertEquals(size, map4.size());\n        assertEquals(size, map5.size());\n        assertEquals(size, map6.size());\n\n        hz3.shutdown();\n        hz4.shutdown();\n\n        assertEquals(size, map5.size());\n        assertEquals(size, map6.size());\n    }","id":12608,"modified_method":"@Test\n    public void testGracefulShutdown2() throws Exception {\n        Config config = new Config();\n\n        config.getMapConfig(MAP_NAME).setBackupCount(2);\n\n        TestHazelcastInstanceFactory f = createHazelcastInstanceFactory(6);\n        final HazelcastInstance hz = f.newHazelcastInstance(config);\n\n        final IMap<Integer, Integer> map = hz.getMap(MAP_NAME);\n        final int size = 50000;\n        for (int i = 0; i < size; i++) {\n            map.put(i, i);\n        }\n\n        final HazelcastInstance hz2 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map2 = hz2.getMap(MAP_NAME);\n\n        waitForMigrationAndCheckSize(size, hz2, map2);\n\n        final HazelcastInstance hz3 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map3 = hz3.getMap(MAP_NAME);\n\n        final HazelcastInstance hz4 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map4 = hz4.getMap(MAP_NAME);\n\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n\n        final HazelcastInstance hz5 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map5 = hz5.getMap(MAP_NAME);\n\n        final HazelcastInstance hz6 = f.newHazelcastInstance(config);\n        final IMap<Integer, Integer> map6 = hz6.getMap(MAP_NAME);\n\n        waitForMigrationAndCheckSize(size, hz5, map5);\n        waitForMigrationAndCheckSize(size, hz6, map6);\n\n        shutdownAndWait(hz);\n        shutdownAndWait(hz2);\n\n        waitForMigrationAndCheckSize(size, hz3, map3);\n        waitForMigrationAndCheckSize(size, hz4, map4);\n        waitForMigrationAndCheckSize(size, hz5, map5);\n        waitForMigrationAndCheckSize(size, hz6, map6);\n\n        shutdownAndWait(hz3);\n        shutdownAndWait(hz4);\n\n        waitForMigrationAndCheckSize(size, hz5, map5);\n        waitForMigrationAndCheckSize(size, hz6, map6);\n    }","commit_id":"7ad068e1bedbccc07c7f99ee892837bcb3368444","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testGracefulShutdown() throws Exception {\n        int size = 50000;\n        TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(4);\n        final Config config = new Config();\n\n        HazelcastInstance h1 = nodeFactory.newHazelcastInstance(config);\n        IMap m1 = h1.getMap(MAP_NAME);\n        for (int i = 0; i < size; i++) {\n            m1.put(i, i);\n        }\n\n        HazelcastInstance h2 = nodeFactory.newHazelcastInstance(config);\n        IMap m2 = h2.getMap(MAP_NAME);\n        h1.shutdown();\n        assertEquals(size, m2.size());\n\n        HazelcastInstance h3 = nodeFactory.newHazelcastInstance(config);\n        IMap m3 = h3.getMap(MAP_NAME);\n        h2.shutdown();\n        assertEquals(size, m3.size());\n\n        HazelcastInstance h4 = nodeFactory.newHazelcastInstance(config);\n        IMap m4 = h4.getMap(MAP_NAME);\n        h3.shutdown();\n        assertEquals(size, m4.size());\n    }","id":12609,"modified_method":"@Test\n    public void testGracefulShutdown() throws Exception {\n        int size = 50000;\n        TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(4);\n        final Config config = new Config();\n\n        HazelcastInstance h1 = nodeFactory.newHazelcastInstance(config);\n        IMap<Integer, Integer> m1 = h1.getMap(MAP_NAME);\n        for (int i = 0; i < size; i++) {\n            m1.put(i, i);\n        }\n\n        HazelcastInstance h2 = nodeFactory.newHazelcastInstance(config);\n        IMap<Integer, Integer> m2 = h2.getMap(MAP_NAME);\n        shutdownAndWait(h1);\n        waitForMigrationAndCheckSize(size, h2, m2);\n\n        HazelcastInstance h3 = nodeFactory.newHazelcastInstance(config);\n        IMap<Integer, Integer> m3 = h3.getMap(MAP_NAME);\n        shutdownAndWait(h2);\n        waitForMigrationAndCheckSize(size, h3, m3);\n\n        HazelcastInstance h4 = nodeFactory.newHazelcastInstance(config);\n        IMap<Integer, Integer> m4 = h4.getMap(MAP_NAME);\n        shutdownAndWait(h3);\n        waitForMigrationAndCheckSize(size, h4, m4);\n    }","commit_id":"7ad068e1bedbccc07c7f99ee892837bcb3368444","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/**\n     *\n     * \n     */\n    protected void mergeHelper(String [] names) {               \n        int count = names.length;\n\n        //List<MergeApplication> channels = new ArrayList<MergeApplication>();\n        MergeApplication[] channels = new MergeApplication[count];\n        try{\n            // Create a semaphore and take all its permits\n            Semaphore semaphore = new Semaphore(count);\n            semaphore.acquire(count);\n\n            // Create activation threads that will block on the semaphore\n            for(int i = 0;i < count;i++){               \n                channels[i] = new MergeApplication(names[i],semaphore,false);                    \n                // Release one ticket at a time to allow the thread to start\n                // working\n                channels[i].start();\n                semaphore.release(1);\n                //sleep at least a second and max second and a half\n                sleepRandom(1000,1500);\n            }\n\n            // Make sure everyone is in sync\n            if(isMuxChannelUsed()){\n                blockUntilViewsReceived(channels, getMuxFactoryCount(), 60000);\n            }else{\n                blockUntilViewsReceived(channels, 60000);\n            }\n\n            // Sleep to ensure the threads get all the semaphore tickets\n            Util.sleep(2000);\n            \n            int split = count/2;\n            \n            for (int i = 0; i < split; i++) {              \n                DISCARD discard=(DISCARD)((JChannel)channels[i].getChannel()).getProtocolStack().findProtocol(\"DISCARD\");               \n                for(int j=split;j<count;j++){\n                    discard.addIgnoreMember(channels[j].getLocalAddress());\n                }                   \n            }\n            \n            for (int i = count-1; i >= split; i--) {              \n                DISCARD discard=(DISCARD)((JChannel)channels[i].getChannel()).getProtocolStack().findProtocol(\"DISCARD\");               \n                for(int j=0;j<split;j++){\n                    discard.addIgnoreMember(channels[j].getLocalAddress());\n                }                   \n            }\n                                        \n            System.out.println(\"Waiting for split to be detected...\");\n            Util.sleep(20*1000);\n            \n            System.out.println(\"Waiting for merging to kick in....\");\n            \n            for (int i = 0; i < count; i++) {              \n                ((JChannel)channels[i].getChannel()).getProtocolStack().removeProtocol(\"DISCARD\");                                     \n            }            \n                       \n            //Either merge properly or time out...\n            if(isMuxChannelUsed()){\n                blockUntilViewsReceived(channels, getMuxFactoryCount(), 60000);\n            }else{\n                blockUntilViewsReceived(channels, 60000);\n            }\n\n            // Re-acquire the semaphore tickets; when we have them all\n            // we know the threads are done\n            boolean acquired = semaphore.tryAcquire(count, 20, TimeUnit.SECONDS);\n            if(!acquired){\n                log.warn(\"Most likely a bug, analyse the stack below:\");\n                log.warn(Util.dumpThreads());\n            }                 \n            Util.sleep(1000);\n        }catch(Exception ex){\n            log.warn(\"Exception encountered during test\", ex);\n            fail(ex.getLocalizedMessage());\n        }finally{\n            \n            for(MergeApplication channel:channels){\n                channel.cleanup();\n                Util.sleep(2000);\n            }\n            \n            for(MergeApplication channel:channels){                \n                checkEventStateTransferSequence(channel);\n            }\n        }\n    }","id":12610,"modified_method":"/**\n     *\n     * \n     */\n    protected void mergeHelper(String [] names) {               \n        int count = names.length;\n\n        //List<MergeApplication> channels = new ArrayList<MergeApplication>();\n        MergeApplication[] channels = new MergeApplication[count];\n        try{\n            // Create a semaphore and take all its permits\n            Semaphore semaphore = new Semaphore(count);\n            semaphore.acquire(count);\n\n            // Create activation threads that will block on the semaphore\n            for(int i = 0;i < count;i++){               \n                channels[i] = new MergeApplication(names[i],semaphore,false);                    \n                // Release one ticket at a time to allow the thread to start\n                // working\n                channels[i].start();\n                semaphore.release(1);\n                //sleep at least a second and max second and a half\n                sleepRandom(1000,1500);\n            }\n\n            // Make sure everyone is in sync\n            \n            blockUntilViewsReceived(channels, 60000);\n            \n\n            // Sleep to ensure the threads get all the semaphore tickets\n            Util.sleep(2000);\n            \n            int split = count/2;\n            \n            for (int i = 0; i < split; i++) {              \n                DISCARD discard=(DISCARD)((JChannel)channels[i].getChannel()).getProtocolStack().findProtocol(\"DISCARD\");               \n                for(int j=split;j<count;j++){\n                    discard.addIgnoreMember(channels[j].getLocalAddress());\n                }                   \n            }\n            \n            for (int i = count-1; i >= split; i--) {              \n                DISCARD discard=(DISCARD)((JChannel)channels[i].getChannel()).getProtocolStack().findProtocol(\"DISCARD\");               \n                for(int j=0;j<split;j++){\n                    discard.addIgnoreMember(channels[j].getLocalAddress());\n                }                   \n            }\n                                        \n            System.out.println(\"Waiting for split to be detected...\");\n            Util.sleep(20*1000);\n            \n            System.out.println(\"Waiting for merging to kick in....\");\n            \n            for (int i = 0; i < count; i++) {              \n                ((JChannel)channels[i].getChannel()).getProtocolStack().removeProtocol(\"DISCARD\");                                     \n            }            \n                       \n            //Either merge properly or time out...\n            blockUntilViewsReceived(channels, 60000);\n            \n\n            // Re-acquire the semaphore tickets; when we have them all\n            // we know the threads are done\n            boolean acquired = semaphore.tryAcquire(count, 20, TimeUnit.SECONDS);\n            if(!acquired){\n                log.warn(\"Most likely a bug, analyse the stack below:\");\n                log.warn(Util.dumpThreads());\n            }                 \n            Util.sleep(1000);\n        }catch(Exception ex){\n            log.warn(\"Exception encountered during test\", ex);\n            fail(ex.getLocalizedMessage());\n        }finally{\n            \n            for(MergeApplication channel:channels){\n                channel.cleanup();\n                Util.sleep(2000);\n            }\n            \n            for(MergeApplication channel:channels){                \n                checkEventStateTransferSequence(channel);\n            }\n        }\n    }","commit_id":"f104fb9299f9730ce4f1a049acd57efbe08859c2","url":"https://github.com/belaban/JGroups"},{"original_method":"@AfterClass\n    protected void terminate() throws Exception {\n        if(isMuxChannelUsed()) {\n            for(int i=0; i < muxFactory.length; i++) {\n                muxFactory[i].destroy();\n            }\n        }\n\n        if(router != null) {\n            router.stop();\n            Util.sleep(100);\n        }\n\n        if(shouldCompareThreadCount()) {\n            // at the moment Thread.activeCount() is called it might count in threads that are just being\n            // excluded from active count. Therefore we include a slight delay of 20 msec\n\n            Util.sleep(20);\n            int current_active_threads=Thread.activeCount();\n\n            String msg=\"\";\n            if(active_threads != current_active_threads) {\n                System.out.println(before_threads);\n                System.out.println(\"active threads after (\" + current_active_threads + \"):\\n\" + Util.activeThreads());\n                msg=\"active threads:\\n\" + Util.dumpThreads();\n            }\n            assert active_threads == current_active_threads : msg;\n        }\n    }","id":12611,"modified_method":"@AfterClass\n    protected void terminate() throws Exception {\n        if(router != null) {\n            router.stop();\n            Util.sleep(100);\n        }\n\n        if(shouldCompareThreadCount()) {\n            // at the moment Thread.activeCount() is called it might count in threads that are just being\n            // excluded from active count. Therefore we include a slight delay of 20 msec\n\n            Util.sleep(20);\n            int current_active_threads=Thread.activeCount();\n\n            String msg=\"\";\n            if(active_threads != current_active_threads) {\n                System.out.println(before_threads);\n                System.out.println(\"active threads after (\" + current_active_threads + \"):\\n\" + Util.activeThreads());\n                msg=\"active threads:\\n\" + Util.dumpThreads();\n            }\n            assert active_threads == current_active_threads : msg;\n        }\n    }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"protected JChannel createChannel(boolean unique) throws Exception {\n        return createChannel(\"A\", null, unique, 1);\n    }","id":12612,"modified_method":"protected JChannel createChannel(boolean unique) throws Exception {\n        return createChannel(unique, 1);\n    }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"private void muteLocalAddress(JChannel c) {\n            ProtocolStack stack=c.getProtocolStack();\n            Protocol gms=stack.findProtocol(GMS.class);\n            if(gms != null) {\n                ((GMS)gms).setPrintLocalAddress(false);\n            }\n        }","id":12613,"modified_method":"private void muteLocalAddress(Channel c) {\n            ProtocolStack stack=c.getProtocolStack();\n            Protocol gms=stack.findProtocol(GMS.class);\n            if(gms != null) {\n                ((GMS)gms).setPrintLocalAddress(false);\n            }\n        }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"public Channel createChannel(String id) throws Exception {\n            return createChannel(id, null, false, 1);\n        }","id":12614,"modified_method":"public JChannel createChannel() throws Exception {\n            return createChannel(channel_conf, useBlocking());\n        }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"private void makeUnique(JChannel channel, int num) throws Exception {\n            ProtocolStack stack=channel.getProtocolStack();\n            Protocol transport=stack.getTransport();\n            if(transport instanceof UDP) {\n                String mcast_addr=ResourceManager.getNextMulticastAddress();\n                short mcast_port=ResourceManager.getNextMulticastPort(InetAddress.getByName(bind_addr));\n                ((UDP)transport).setMulticastAddress(mcast_addr);\n                ((UDP)transport).setMulticastPort(mcast_port);\n            }\n            else if(transport instanceof BasicTCP) {\n                List<Short> ports=ResourceManager.getNextTcpPorts(InetAddress.getByName(bind_addr), num);\n                ((TP)transport).setBindPort(ports.get(0));\n                ((TP)transport).setPortRange(num);\n\n                Protocol ping=stack.findProtocol(TCPPING.class);\n                if(ping == null)\n                    throw new IllegalStateException(\"TCP stack must consist of TCP:TCPPING - other config are not supported\");\n\n                List<String> initial_hosts=new LinkedList<String>();\n                for(short port: ports) {\n                    initial_hosts.add(bind_addr + \"[\" + port + \"]\");\n                }\n                String tmp=Util.printListWithDelimiter(initial_hosts, \",\");\n                ((TCPPING)ping).setInitialHosts(tmp);\n            }\n            else {\n                throw new IllegalStateException(\"Only UDP and TCP are supported as transport protocols\");\n            }\n        }","id":12615,"modified_method":"private void makeUnique(Channel channel, int num) throws Exception {\n            ProtocolStack stack=channel.getProtocolStack();\n            Protocol transport=stack.getTransport();\n            if(transport instanceof UDP) {\n                String mcast_addr=ResourceManager.getNextMulticastAddress();\n                short mcast_port=ResourceManager.getNextMulticastPort(InetAddress.getByName(bind_addr));\n                ((UDP)transport).setMulticastAddress(mcast_addr);\n                ((UDP)transport).setMulticastPort(mcast_port);\n            }\n            else if(transport instanceof BasicTCP) {\n                List<Short> ports=ResourceManager.getNextTcpPorts(InetAddress.getByName(bind_addr), num);\n                ((TP)transport).setBindPort(ports.get(0));\n                ((TP)transport).setPortRange(num);\n\n                Protocol ping=stack.findProtocol(TCPPING.class);\n                if(ping == null)\n                    throw new IllegalStateException(\"TCP stack must consist of TCP:TCPPING - other config are not supported\");\n\n                List<String> initial_hosts=new LinkedList<String>();\n                for(short port: ports) {\n                    initial_hosts.add(bind_addr + \"[\" + port + \"]\");\n                }\n                String tmp=Util.printListWithDelimiter(initial_hosts, \",\");\n                ((TCPPING)ping).setInitialHosts(tmp);\n            }\n            else {\n                throw new IllegalStateException(\"Only UDP and TCP are supported as transport protocols\");\n            }\n        }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"protected JChannel createChannel() throws Exception {\n        return createChannel(\"A\");\n    }","id":12616,"modified_method":"protected JChannel createChannel() throws Exception {\n        return new DefaultChannelTestFactory().createChannel();\n    }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"protected JChannel createChannel(boolean unique, int num) throws Exception {\n        return createChannel(\"A\", null, unique, num);\n    }","id":12617,"modified_method":"/**\n     * Creates a channel and modifies the configuration such that no other channel will able to join this\n     * one even if they have the same cluster name (if unique = true). This is done by modifying mcast_addr and mcast_port with UDP,\n     * and by changing TCP.start_port, TCP.port_range and TCPPING.initial_hosts with TCP. Mainly used to\n     * run TestNG tests concurrently. Note that MuxChannels are not currently supported.\n     * @param num The number of channels we will create. Only important (for port_range) with TCP, ignored by UDP\n     * @return\n     * @throws Exception\n     */\n    protected JChannel createChannel(boolean unique, int num) throws Exception {\n        return (JChannel)new DefaultChannelTestFactory().createChannel(unique, num);\n    }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"protected PushChannelApplicationWithSemaphore(String name,\n                                                      Semaphore semaphore,\n                                                      boolean useDispatcher) throws Exception {\n            this(name, new DefaultChannelTestFactory(), semaphore, useDispatcher);\n        }","id":12618,"modified_method":"public PushChannelApplicationWithSemaphore(String name,\n                                                   Semaphore semaphore,\n                                                   boolean useDispatcher) throws Exception {\n            super(name, useDispatcher);\n            this.semaphore=semaphore;\n        }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"public ChannelApplication(String name) throws Exception {\n            ChannelTestBase.this.createChannel(name);\n        }","id":12619,"modified_method":"/**\n         * Creates a unconnected channel and assigns a name to it.\n         * @param name    name of this channel\n         * @throws ChannelException\n         */\n        public ChannelApplication(String name) throws Exception {\n            this.name=name;\n            channel=createChannel();\n        }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"public PushChannelApplication(String name, boolean useDispatcher) throws Exception {\n            this(name, new DefaultChannelTestFactory(), useDispatcher);\n        }","id":12620,"modified_method":"public PushChannelApplication(String name,  boolean useDispatcher) throws Exception {\n            super(name);\n            events=Collections.synchronizedList(new LinkedList<Object>());\n            if(useDispatcher) {\n                dispatcher=new RpcDispatcher(channel, this, this, this);\n            }\n            else {\n                channel.setReceiver(this);\n            }\n        }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"public Channel createChannel(String id, String props, boolean unique, int num) throws Exception {\n            JChannel c=createChannel(id, props);\n            if(unique && !isMuxChannelUsed()) {\n                makeUnique(c, num);\n            }\n            muteLocalAddress(c);\n            return c;\n        }","id":12621,"modified_method":"public Channel createChannel(boolean unique, int num) throws Exception {\n            JChannel c=createChannel(channel_conf, useBlocking());\n            if(unique) {\n                makeUnique(c, num);\n            }\n            muteLocalAddress(c);\n            return c;\n        }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Tests the case where (members A and B) member B is shunned, excluded by A , then closes and reopens the channel.\n     * After B has rejoined, it invokes an RPC and it should get valid return values from both A and B.\n     * @throws Exception\n     */\n    @Test\n    public void testTwoMembersShun() throws Exception {\n        View view;\n        c1=createChannel();\n        c1.setOpt(Channel.AUTO_GETSTATE, false);\n        c1.addChannelListener(new BelasChannelListener(\"C1\"));\n        c2=createChannel();\n        c2.setOpt(Channel.AUTO_GETSTATE, false);\n        c2.addChannelListener(new BelasChannelListener(\"C2\"));\n        disp1=new RpcDispatcher(c1, null, new BelasReceiver(\"C1\"), this);\n        disp2=new RpcDispatcher(c2, null, new BelasReceiver(\"C2\"), this);\n        c1.connect(\"demo\");\n        c2.connect(\"demo\");\n        Assert.assertEquals(2, c1.getView().size());\n        \n        RspList rsps=disp2.callRemoteMethods(null, \"getCurrentTime\", null, (Class[])null, GroupRequest.GET_ALL, 10000);\n        System.out.println(\">> rsps:\\n\" + rsps);\n        Assert.assertEquals(2, rsps.size());\n\n        ProtocolStack stack=c1.getProtocolStack();\n        stack.removeProtocol(\"VERIFY_SUSPECT\");\n        Protocol transport=stack.getTransport();\n        System.out.println(\">> suspecting C2:\");\n        transport.up(new Event(Event.SUSPECT, c2.getLocalAddress()));\n\n        System.out.println(\">> shunning C2:\");\n        if(c2 instanceof MuxChannel) {\n            ((MuxChannel)c2).getChannel().up(new Event(Event.EXIT));\n        }\n        else {\n            c2.up(new Event(Event.EXIT));\n        }\n\n        Util.sleep(1000); // give the closer thread time to close the channel\n        System.out.println(\"waiting for C2 to come back\");\n        int count=1;\n        while(true) {\n            view=c2.getView();\n            // System.out.println(\"<< C2.view: \" + view);\n            if((view != null && view.size() >= 2) || count >= 10)\n                break;\n            count++;\n            Util.sleep(1000);\n        }\n        view=c2.getView();\n        System.out.println(\">>> view is \" + view + \" <<<< (should have 2 members)\");\n        Assert.assertEquals(2, view.size());\n\n        Util.sleep(1000);\n        System.out.println(\"invoking RPC on shunned member\");\n        rsps=disp2.callRemoteMethods(null, \"getCurrentTime\", null, (Class[])null, GroupRequest.GET_ALL, 10000);\n        System.out.println(\">> rsps:\\n\" + rsps);\n        Assert.assertEquals(2, rsps.size());\n        for(Map.Entry<Address, Rsp> entry: rsps.entrySet()) {\n            Rsp rsp=entry.getValue();\n            assertFalse(rsp.wasSuspected());\n            assertTrue(rsp.wasReceived());\n        }\n\n        c1.setReceiver(null);\n        c2.setReceiver(null);\n        c1.clearChannelListeners();\n        c2.clearChannelListeners();\n    }","id":12622,"modified_method":"/**\n     * Tests the case where (members A and B) member B is shunned, excluded by A , then closes and reopens the channel.\n     * After B has rejoined, it invokes an RPC and it should get valid return values from both A and B.\n     * @throws Exception\n     */\n    @Test\n    public void testTwoMembersShun() throws Exception {\n        View view;\n        c1=createChannel();\n        c1.setOpt(Channel.AUTO_GETSTATE, false);\n        c1.addChannelListener(new BelasChannelListener(\"C1\"));\n        c2=createChannel();\n        c2.setOpt(Channel.AUTO_GETSTATE, false);\n        c2.addChannelListener(new BelasChannelListener(\"C2\"));\n        disp1=new RpcDispatcher(c1, null, new BelasReceiver(\"C1\"), this);\n        disp2=new RpcDispatcher(c2, null, new BelasReceiver(\"C2\"), this);\n        c1.connect(\"demo\");\n        c2.connect(\"demo\");\n        Assert.assertEquals(2, c1.getView().size());\n        \n        RspList rsps=disp2.callRemoteMethods(null, \"getCurrentTime\", null, (Class[])null, GroupRequest.GET_ALL, 10000);\n        System.out.println(\">> rsps:\\n\" + rsps);\n        Assert.assertEquals(2, rsps.size());\n\n        ProtocolStack stack=c1.getProtocolStack();\n        stack.removeProtocol(\"VERIFY_SUSPECT\");\n        Protocol transport=stack.getTransport();\n        System.out.println(\">> suspecting C2:\");\n        transport.up(new Event(Event.SUSPECT, c2.getLocalAddress()));\n\n        System.out.println(\">> shunning C2:\");\n\n        c2.up(new Event(Event.EXIT));\n\n        Util.sleep(1000); // give the closer thread time to close the channel\n        System.out.println(\"waiting for C2 to come back\");\n        int count=1;\n        while(true) {\n            view=c2.getView();\n            // System.out.println(\"<< C2.view: \" + view);\n            if((view != null && view.size() >= 2) || count >= 10)\n                break;\n            count++;\n            Util.sleep(1000);\n        }\n        view=c2.getView();\n        System.out.println(\">>> view is \" + view + \" <<<< (should have 2 members)\");\n        Assert.assertEquals(2, view.size());\n\n        Util.sleep(1000);\n        System.out.println(\"invoking RPC on shunned member\");\n        rsps=disp2.callRemoteMethods(null, \"getCurrentTime\", null, (Class[])null, GroupRequest.GET_ALL, 10000);\n        System.out.println(\">> rsps:\\n\" + rsps);\n        Assert.assertEquals(2, rsps.size());\n        for(Map.Entry<Address, Rsp> entry: rsps.entrySet()) {\n            Rsp rsp=entry.getValue();\n            assertFalse(rsp.wasSuspected());\n            assertTrue(rsp.wasReceived());\n        }\n\n        c1.setReceiver(null);\n        c2.setReceiver(null);\n        c1.clearChannelListeners();\n        c2.clearChannelListeners();\n    }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"protected void connectAndShun(int shunChannelIndex, boolean useDispatcher) {\n        String[] names = null;\n\n        // mux applications on top of same channel have to have unique name\n        if(isMuxChannelUsed()){\n            names = createMuxApplicationNames(1);\n        }else{\n            names = new String[] { \"A\", \"B\", \"C\", \"D\" };\n        }\n\n        int count = names.length;\n\n        ShunChannel[] channels = new ShunChannel[count];\n        try{\n            // Create a semaphore and take all its permits\n            Semaphore semaphore = new Semaphore(count);\n            semaphore.acquire(count);\n\n            // Create activation threads that will block on the semaphore\n            for(int i = 0;i < count;i++){               \n               channels[i] = new ShunChannel(names[i],\n                                             semaphore,\n                                             useDispatcher);  \n                              \n\n               JChannel c = (JChannel) channels[i].getChannel();\n               if(c instanceof MuxChannel){\n                   c = ((MuxChannel)c).getChannel();\n               }\n               c.addChannelListener(new MyChannelListener(channels));\n               // Release one ticket at a time to allow the thread to start\n               // working\n               channels[i].start();                 \n               semaphore.release(1);\n               //sleep at least a second and max second and a half\n               Util.sleep(2000);                                                                                                          \n            }           \n\n            // block until we all have a valid view         \n            if(isMuxChannelUsed()){\n                blockUntilViewsReceived(channels, getMuxFactoryCount(), 60000);\n            }else{\n                blockUntilViewsReceived(channels, 60000);\n            }\n            \n            ShunChannel shun = channels[shunChannelIndex];\n            log.info(\"Start shun attempt\");\n            addDiscardProtocol((JChannel)shun.getChannel());               \n            \n            //allow shunning to kick in\n            Util.sleep(20000);\n            \n            //and then block until we all have a valid view  \n            // or fail with timeout\n            if(isMuxChannelUsed()){\n                blockUntilViewsReceived(channels, getMuxFactoryCount(), 60000);\n            }else{\n                blockUntilViewsReceived(channels, 60000);\n            }\n            \n        }catch(Exception ex){\n            log.warn(\"Exception encountered during test\", ex);\n            assert false : ex.getLocalizedMessage();\n        }finally{\n            for(ShunChannel channel:channels){\n                channel.cleanup();\n                Util.sleep(2000); \n            }\n            \n            /* we sometimes have double BLOCK events for tcp stack\n             * TODO investigate why\n            for(ShunChannel channel:channels){\n                if(useBlocking() && channel.getChannel().flushSupported()){\n                    checkEventStateTransferSequence(channel);\n                }\n            }*/\n        }\n    }","id":12623,"modified_method":"protected void connectAndShun(int shunChannelIndex, boolean useDispatcher) {\n        String[] names = null;\n\n\n        names = new String[] { \"A\", \"B\", \"C\", \"D\" };\n\n        int count = names.length;\n\n        ShunChannel[] channels = new ShunChannel[count];\n        try{\n            // Create a semaphore and take all its permits\n            Semaphore semaphore = new Semaphore(count);\n            semaphore.acquire(count);\n\n            // Create activation threads that will block on the semaphore\n            for(int i = 0;i < count;i++){               \n               channels[i] = new ShunChannel(names[i],\n                                             semaphore,\n                                             useDispatcher);  \n                              \n\n               JChannel c = (JChannel) channels[i].getChannel();\n               c.addChannelListener(new MyChannelListener(channels));\n               // Release one ticket at a time to allow the thread to start\n               // working\n               channels[i].start();                 \n               semaphore.release(1);\n               //sleep at least a second and max second and a half\n               Util.sleep(2000);                                                                                                          \n            }           \n\n            // block until we all have a valid view         \n\n            blockUntilViewsReceived(channels, 60000);\n\n            ShunChannel shun = channels[shunChannelIndex];\n            log.info(\"Start shun attempt\");\n            addDiscardProtocol((JChannel)shun.getChannel());               \n            \n            //allow shunning to kick in\n            Util.sleep(20000);\n            \n            //and then block until we all have a valid view or fail with timeout\n            blockUntilViewsReceived(channels, 60000);\n\n        }catch(Exception ex){\n            log.warn(\"Exception encountered during test\", ex);\n            assert false : ex.getLocalizedMessage();\n        }finally{\n            for(ShunChannel channel:channels){\n                channel.cleanup();\n                Util.sleep(2000); \n            }\n            \n            /* we sometimes have double BLOCK events for tcp stack\n             * TODO investigate why\n            for(ShunChannel channel:channels){\n                if(useBlocking() && channel.getChannel().flushSupported()){\n                    checkEventStateTransferSequence(channel);\n                }\n            }*/\n        }\n    }","commit_id":"aad8b947a3544c3fae3fa9c91f30cb7c0c311b1a","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     *\n     * \n     */\n    protected void mergeHelper(String [] names) {               \n        int count = names.length;\n\n        //List<MergeApplication> channels = new ArrayList<MergeApplication>();\n        MergeApplication[] channels = new MergeApplication[count];\n        try{\n            // Create a semaphore and take all its permits\n            Semaphore semaphore = new Semaphore(count);\n            semaphore.acquire(count);\n\n            // Create activation threads that will block on the semaphore\n            for(int i = 0;i < count;i++){               \n                channels[i] = new MergeApplication(names[i],semaphore,false);                    \n                // Release one ticket at a time to allow the thread to start\n                // working\n                channels[i].start();\n                semaphore.release(1);\n                //sleep at least a second and max second and a half\n                sleepRandom(1000,1500);\n            }\n\n            // Make sure everyone is in sync\n            if(isMuxChannelUsed()){\n                blockUntilViewsReceived(channels, getMuxFactoryCount(), 60000);\n            }else{\n                blockUntilViewsReceived(channels, 60000);\n            }\n\n            // Sleep to ensure the threads get all the semaphore tickets\n            Util.sleep(2000);\n            \n            int split = count/2;\n            \n            for (int i = 0; i < split; i++) {              \n                DISCARD discard=(DISCARD)((JChannel)channels[i].getChannel()).getProtocolStack().findProtocol(\"DISCARD\");               \n                for(int j=split;j<count;j++){\n                    discard.addIgnoreMember(channels[j].getLocalAddress());\n                }                   \n            }\n            \n            for (int i = count-1; i >= split; i--) {              \n                DISCARD discard=(DISCARD)((JChannel)channels[i].getChannel()).getProtocolStack().findProtocol(\"DISCARD\");               \n                for(int j=0;j<split;j++){\n                    discard.addIgnoreMember(channels[j].getLocalAddress());\n                }                   \n            }\n                                        \n            System.out.println(\"Waiting for split to be detected...\");\n            Util.sleep(20*1000);\n            \n            System.out.println(\"Waiting for merging to kick in....\");\n            \n            for (int i = 0; i < count; i++) {              \n                ((JChannel)channels[i].getChannel()).getProtocolStack().removeProtocol(\"DISCARD\");                                     \n            }            \n                       \n            //Either merge properly or time out...\n            if(isMuxChannelUsed()){\n                blockUntilViewsReceived(channels, getMuxFactoryCount(), 60000);\n            }else{\n                blockUntilViewsReceived(channels, 60000);\n            }\n\n            // Re-acquire the semaphore tickets; when we have them all\n            // we know the threads are done\n            boolean acquired = semaphore.tryAcquire(count, 20, TimeUnit.SECONDS);\n            if(!acquired){\n                log.warn(\"Most likely a bug, analyse the stack below:\");\n                log.warn(Util.dumpThreads());\n            }                 \n            Util.sleep(1000);\n        }catch(Exception ex){\n            log.warn(\"Exception encountered during test\", ex);\n            fail(ex.getLocalizedMessage());\n        }finally{\n            \n            for(MergeApplication channel:channels){\n                channel.cleanup();\n                Util.sleep(2000);\n            }\n            \n            for(MergeApplication channel:channels){                \n                checkEventStateTransferSequence(channel);\n            }\n        }\n    }","id":12624,"modified_method":"/**\n     *\n     * \n     */\n    protected void mergeHelper(String [] names) {               \n        int count = names.length;\n\n        //List<MergeApplication> channels = new ArrayList<MergeApplication>();\n        MergeApplication[] channels = new MergeApplication[count];\n        try{\n            // Create a semaphore and take all its permits\n            Semaphore semaphore = new Semaphore(count);\n            semaphore.acquire(count);\n\n            // Create activation threads that will block on the semaphore\n            for(int i = 0;i < count;i++){               \n                channels[i] = new MergeApplication(names[i],semaphore,false);                    \n                // Release one ticket at a time to allow the thread to start\n                // working\n                channels[i].start();\n                semaphore.release(1);\n                //sleep at least a second and max second and a half\n                sleepRandom(1000,1500);\n            }\n\n            // Make sure everyone is in sync\n            \n            blockUntilViewsReceived(channels, 60000);\n            \n\n            // Sleep to ensure the threads get all the semaphore tickets\n            Util.sleep(2000);\n            \n            int split = count/2;\n            \n            for (int i = 0; i < split; i++) {              \n                DISCARD discard=(DISCARD)((JChannel)channels[i].getChannel()).getProtocolStack().findProtocol(\"DISCARD\");               \n                for(int j=split;j<count;j++){\n                    discard.addIgnoreMember(channels[j].getLocalAddress());\n                }                   \n            }\n            \n            for (int i = count-1; i >= split; i--) {              \n                DISCARD discard=(DISCARD)((JChannel)channels[i].getChannel()).getProtocolStack().findProtocol(\"DISCARD\");               \n                for(int j=0;j<split;j++){\n                    discard.addIgnoreMember(channels[j].getLocalAddress());\n                }                   \n            }\n                                        \n            System.out.println(\"Waiting for split to be detected...\");\n            Util.sleep(20*1000);\n            \n            System.out.println(\"Waiting for merging to kick in....\");\n            \n            for (int i = 0; i < count; i++) {              \n                ((JChannel)channels[i].getChannel()).getProtocolStack().removeProtocol(\"DISCARD\");                                     \n            }            \n                       \n            //Either merge properly or time out...\n            blockUntilViewsReceived(channels, 60000);\n            \n\n            // Re-acquire the semaphore tickets; when we have them all\n            // we know the threads are done\n            boolean acquired = semaphore.tryAcquire(count, 20, TimeUnit.SECONDS);\n            if(!acquired){\n                log.warn(\"Most likely a bug, analyse the stack below:\");\n                log.warn(Util.dumpThreads());\n            }                 \n            Util.sleep(1000);\n        }catch(Exception ex){\n            log.warn(\"Exception encountered during test\", ex);\n            fail(ex.getLocalizedMessage());\n        }finally{\n            \n            for(MergeApplication channel:channels){\n                channel.cleanup();\n                Util.sleep(2000);\n            }\n            \n            for(MergeApplication channel:channels){                \n                checkEventStateTransferSequence(channel);\n            }\n        }\n    }","commit_id":"5110dbc002cc85230a638a8514911e1fca191497","url":"https://github.com/belaban/JGroups"},{"original_method":"private void muteLocalAddress(JChannel c) {\n            ProtocolStack stack=c.getProtocolStack();\n            Protocol gms=stack.findProtocol(GMS.class);\n            if(gms != null) {\n                ((GMS)gms).setPrintLocalAddress(false);\n            }\n        }","id":12625,"modified_method":"private void muteLocalAddress(Channel c) {\n            ProtocolStack stack=c.getProtocolStack();\n            Protocol gms=stack.findProtocol(GMS.class);\n            if(gms != null) {\n                ((GMS)gms).setPrintLocalAddress(false);\n            }\n        }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"private void makeUnique(JChannel channel, int num) throws Exception {\n            ProtocolStack stack=channel.getProtocolStack();\n            Protocol transport=stack.getTransport();\n            if(transport instanceof UDP) {\n                String mcast_addr=ResourceManager.getNextMulticastAddress();\n                short mcast_port=ResourceManager.getNextMulticastPort(InetAddress.getByName(bind_addr));\n                ((UDP)transport).setMulticastAddress(mcast_addr);\n                ((UDP)transport).setMulticastPort(mcast_port);\n            }\n            else if(transport instanceof BasicTCP) {\n                List<Short> ports=ResourceManager.getNextTcpPorts(InetAddress.getByName(bind_addr), num);\n                ((TP)transport).setBindPort(ports.get(0));\n                ((TP)transport).setPortRange(num);\n\n                Protocol ping=stack.findProtocol(TCPPING.class);\n                if(ping == null)\n                    throw new IllegalStateException(\"TCP stack must consist of TCP:TCPPING - other config are not supported\");\n\n                List<String> initial_hosts=new LinkedList<String>();\n                for(short port: ports) {\n                    initial_hosts.add(bind_addr + \"[\" + port + \"]\");\n                }\n                String tmp=Util.printListWithDelimiter(initial_hosts, \",\");\n                ((TCPPING)ping).setInitialHosts(tmp);\n            }\n            else {\n                throw new IllegalStateException(\"Only UDP and TCP are supported as transport protocols\");\n            }\n        }","id":12626,"modified_method":"private void makeUnique(Channel channel, int num) throws Exception {\n            ProtocolStack stack=channel.getProtocolStack();\n            Protocol transport=stack.getTransport();\n            if(transport instanceof UDP) {\n                String mcast_addr=ResourceManager.getNextMulticastAddress();\n                short mcast_port=ResourceManager.getNextMulticastPort(InetAddress.getByName(bind_addr));\n                ((UDP)transport).setMulticastAddress(mcast_addr);\n                ((UDP)transport).setMulticastPort(mcast_port);\n            }\n            else if(transport instanceof BasicTCP) {\n                List<Short> ports=ResourceManager.getNextTcpPorts(InetAddress.getByName(bind_addr), num);\n                ((TP)transport).setBindPort(ports.get(0));\n                ((TP)transport).setPortRange(num);\n\n                Protocol ping=stack.findProtocol(TCPPING.class);\n                if(ping == null)\n                    throw new IllegalStateException(\"TCP stack must consist of TCP:TCPPING - other config are not supported\");\n\n                List<String> initial_hosts=new LinkedList<String>();\n                for(short port: ports) {\n                    initial_hosts.add(bind_addr + \"[\" + port + \"]\");\n                }\n                String tmp=Util.printListWithDelimiter(initial_hosts, \",\");\n                ((TCPPING)ping).setInitialHosts(tmp);\n            }\n            else {\n                throw new IllegalStateException(\"Only UDP and TCP are supported as transport protocols\");\n            }\n        }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"public Channel createChannel(String id, String props, boolean unique, int num) throws Exception {\n            JChannel c=createChannel(id, props);\n            if(unique && !isMuxChannelUsed()) {\n                makeUnique(c, num);\n            }\n            muteLocalAddress(c);\n            return c;\n        }","id":12627,"modified_method":"public Channel createChannel(boolean unique, int num) throws Exception {\n            JChannel c=createChannel(channel_conf, useBlocking());\n            if(unique) {\n                makeUnique(c, num);\n            }\n            muteLocalAddress(c);\n            return c;\n        }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"public PushChannelApplication(String name, boolean useDispatcher) throws Exception {\n            this(name, new DefaultChannelTestFactory(), useDispatcher);\n        }","id":12628,"modified_method":"public PushChannelApplication(String name,  boolean useDispatcher) throws Exception {\n            super(name);\n            events=Collections.synchronizedList(new LinkedList<Object>());\n            if(useDispatcher) {\n                dispatcher=new RpcDispatcher(channel, this, this, this);\n            }\n            else {\n                channel.setReceiver(this);\n            }\n        }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"protected JChannel createChannel(boolean unique, int num) throws Exception {\n        return createChannel(\"A\", null, unique, num);\n    }","id":12629,"modified_method":"/**\n     * Creates a channel and modifies the configuration such that no other channel will able to join this\n     * one even if they have the same cluster name (if unique = true). This is done by modifying mcast_addr and mcast_port with UDP,\n     * and by changing TCP.start_port, TCP.port_range and TCPPING.initial_hosts with TCP. Mainly used to\n     * run TestNG tests concurrently. Note that MuxChannels are not currently supported.\n     * @param num The number of channels we will create. Only important (for port_range) with TCP, ignored by UDP\n     * @return\n     * @throws Exception\n     */\n    protected JChannel createChannel(boolean unique, int num) throws Exception {\n        return (JChannel)new DefaultChannelTestFactory().createChannel(unique, num);\n    }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"protected JChannel createChannel() throws Exception {\n        return createChannel(\"A\");\n    }","id":12630,"modified_method":"protected JChannel createChannel() throws Exception {\n        return new DefaultChannelTestFactory().createChannel();\n    }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"protected JChannel createChannel(boolean unique) throws Exception {\n        return createChannel(\"A\", null, unique, 1);\n    }","id":12631,"modified_method":"protected JChannel createChannel(boolean unique) throws Exception {\n        return createChannel(unique, 1);\n    }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"protected PushChannelApplicationWithSemaphore(String name,\n                                                      Semaphore semaphore,\n                                                      boolean useDispatcher) throws Exception {\n            this(name, new DefaultChannelTestFactory(), semaphore, useDispatcher);\n        }","id":12632,"modified_method":"public PushChannelApplicationWithSemaphore(String name,\n                                                   Semaphore semaphore,\n                                                   boolean useDispatcher) throws Exception {\n            super(name, useDispatcher);\n            this.semaphore=semaphore;\n        }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"public ChannelApplication(String name) throws Exception {\n            ChannelTestBase.this.createChannel(name);\n        }","id":12633,"modified_method":"/**\n         * Creates a unconnected channel and assigns a name to it.\n         * @param name    name of this channel\n         * @throws ChannelException\n         */\n        public ChannelApplication(String name) throws Exception {\n            this.name=name;\n            channel=createChannel();\n        }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"public Channel createChannel(String id) throws Exception {\n            return createChannel(id, null, false, 1);\n        }","id":12634,"modified_method":"public JChannel createChannel() throws Exception {\n            return createChannel(channel_conf, useBlocking());\n        }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"@AfterClass\n    protected void terminate() throws Exception {\n        if(isMuxChannelUsed()) {\n            for(int i=0; i < muxFactory.length; i++) {\n                muxFactory[i].destroy();\n            }\n        }\n\n        if(router != null) {\n            router.stop();\n            Util.sleep(100);\n        }\n\n        if(shouldCompareThreadCount()) {\n            // at the moment Thread.activeCount() is called it might count in threads that are just being\n            // excluded from active count. Therefore we include a slight delay of 20 msec\n\n            Util.sleep(20);\n            int current_active_threads=Thread.activeCount();\n\n            String msg=\"\";\n            if(active_threads != current_active_threads) {\n                System.out.println(before_threads);\n                System.out.println(\"active threads after (\" + current_active_threads + \"):\\n\" + Util.activeThreads());\n                msg=\"active threads:\\n\" + Util.dumpThreads();\n            }\n            assert active_threads == current_active_threads : msg;\n        }\n    }","id":12635,"modified_method":"@AfterClass\n    protected void terminate() throws Exception {\n        if(router != null) {\n            router.stop();\n            Util.sleep(100);\n        }\n\n        if(shouldCompareThreadCount()) {\n            // at the moment Thread.activeCount() is called it might count in threads that are just being\n            // excluded from active count. Therefore we include a slight delay of 20 msec\n\n            Util.sleep(20);\n            int current_active_threads=Thread.activeCount();\n\n            String msg=\"\";\n            if(active_threads != current_active_threads) {\n                System.out.println(before_threads);\n                System.out.println(\"active threads after (\" + current_active_threads + \"):\\n\" + Util.activeThreads());\n                msg=\"active threads:\\n\" + Util.dumpThreads();\n            }\n            assert active_threads == current_active_threads : msg;\n        }\n    }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"protected void connectAndShun(int shunChannelIndex, boolean useDispatcher) {\n        String[] names = null;\n\n        // mux applications on top of same channel have to have unique name\n        if(isMuxChannelUsed()){\n            names = createMuxApplicationNames(1);\n        }else{\n            names = new String[] { \"A\", \"B\", \"C\", \"D\" };\n        }\n\n        int count = names.length;\n\n        ShunChannel[] channels = new ShunChannel[count];\n        try{\n            // Create a semaphore and take all its permits\n            Semaphore semaphore = new Semaphore(count);\n            semaphore.acquire(count);\n\n            // Create activation threads that will block on the semaphore\n            for(int i = 0;i < count;i++){               \n               channels[i] = new ShunChannel(names[i],\n                                             semaphore,\n                                             useDispatcher);  \n                              \n\n               JChannel c = (JChannel) channels[i].getChannel();\n               if(c instanceof MuxChannel){\n                   c = ((MuxChannel)c).getChannel();\n               }\n               c.addChannelListener(new MyChannelListener(channels));\n               // Release one ticket at a time to allow the thread to start\n               // working\n               channels[i].start();                 \n               semaphore.release(1);\n               //sleep at least a second and max second and a half\n               Util.sleep(2000);                                                                                                          \n            }           \n\n            // block until we all have a valid view         \n            if(isMuxChannelUsed()){\n                blockUntilViewsReceived(channels, getMuxFactoryCount(), 60000);\n            }else{\n                blockUntilViewsReceived(channels, 60000);\n            }\n            \n            ShunChannel shun = channels[shunChannelIndex];\n            log.info(\"Start shun attempt\");\n            addDiscardProtocol((JChannel)shun.getChannel());               \n            \n            //allow shunning to kick in\n            Util.sleep(20000);\n            \n            //and then block until we all have a valid view  \n            // or fail with timeout\n            if(isMuxChannelUsed()){\n                blockUntilViewsReceived(channels, getMuxFactoryCount(), 60000);\n            }else{\n                blockUntilViewsReceived(channels, 60000);\n            }\n            \n        }catch(Exception ex){\n            log.warn(\"Exception encountered during test\", ex);\n            assert false : ex.getLocalizedMessage();\n        }finally{\n            for(ShunChannel channel:channels){\n                channel.cleanup();\n                Util.sleep(2000); \n            }\n            \n            /* we sometimes have double BLOCK events for tcp stack\n             * TODO investigate why\n            for(ShunChannel channel:channels){\n                if(useBlocking() && channel.getChannel().flushSupported()){\n                    checkEventStateTransferSequence(channel);\n                }\n            }*/\n        }\n    }","id":12636,"modified_method":"protected void connectAndShun(int shunChannelIndex, boolean useDispatcher) {\n        String[] names = null;\n\n\n        names = new String[] { \"A\", \"B\", \"C\", \"D\" };\n\n        int count = names.length;\n\n        ShunChannel[] channels = new ShunChannel[count];\n        try{\n            // Create a semaphore and take all its permits\n            Semaphore semaphore = new Semaphore(count);\n            semaphore.acquire(count);\n\n            // Create activation threads that will block on the semaphore\n            for(int i = 0;i < count;i++){               \n               channels[i] = new ShunChannel(names[i],\n                                             semaphore,\n                                             useDispatcher);  \n                              \n\n               JChannel c = (JChannel) channels[i].getChannel();\n               c.addChannelListener(new MyChannelListener(channels));\n               // Release one ticket at a time to allow the thread to start\n               // working\n               channels[i].start();                 \n               semaphore.release(1);\n               //sleep at least a second and max second and a half\n               Util.sleep(2000);                                                                                                          \n            }           \n\n            // block until we all have a valid view         \n\n            blockUntilViewsReceived(channels, 60000);\n\n            ShunChannel shun = channels[shunChannelIndex];\n            log.info(\"Start shun attempt\");\n            addDiscardProtocol((JChannel)shun.getChannel());               \n            \n            //allow shunning to kick in\n            Util.sleep(20000);\n            \n            //and then block until we all have a valid view or fail with timeout\n            blockUntilViewsReceived(channels, 60000);\n\n        }catch(Exception ex){\n            log.warn(\"Exception encountered during test\", ex);\n            assert false : ex.getLocalizedMessage();\n        }finally{\n            for(ShunChannel channel:channels){\n                channel.cleanup();\n                Util.sleep(2000); \n            }\n            \n            /* we sometimes have double BLOCK events for tcp stack\n             * TODO investigate why\n            for(ShunChannel channel:channels){\n                if(useBlocking() && channel.getChannel().flushSupported()){\n                    checkEventStateTransferSequence(channel);\n                }\n            }*/\n        }\n    }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Tests the case where (members A and B) member B is shunned, excluded by A , then closes and reopens the channel.\n     * After B has rejoined, it invokes an RPC and it should get valid return values from both A and B.\n     * @throws Exception\n     */\n    @Test\n    public void testTwoMembersShun() throws Exception {\n        View view;\n        c1=createChannel();\n        c1.setOpt(Channel.AUTO_GETSTATE, false);\n        c1.addChannelListener(new BelasChannelListener(\"C1\"));\n        c2=createChannel();\n        c2.setOpt(Channel.AUTO_GETSTATE, false);\n        c2.addChannelListener(new BelasChannelListener(\"C2\"));\n        disp1=new RpcDispatcher(c1, null, new BelasReceiver(\"C1\"), this);\n        disp2=new RpcDispatcher(c2, null, new BelasReceiver(\"C2\"), this);\n        c1.connect(\"demo\");\n        c2.connect(\"demo\");\n        Assert.assertEquals(2, c1.getView().size());\n        \n        RspList rsps=disp2.callRemoteMethods(null, \"getCurrentTime\", null, (Class[])null, GroupRequest.GET_ALL, 10000);\n        System.out.println(\">> rsps:\\n\" + rsps);\n        Assert.assertEquals(2, rsps.size());\n\n        ProtocolStack stack=c1.getProtocolStack();\n        stack.removeProtocol(\"VERIFY_SUSPECT\");\n        Protocol transport=stack.getTransport();\n        System.out.println(\">> suspecting C2:\");\n        transport.up(new Event(Event.SUSPECT, c2.getLocalAddress()));\n\n        System.out.println(\">> shunning C2:\");\n        if(c2 instanceof MuxChannel) {\n            ((MuxChannel)c2).getChannel().up(new Event(Event.EXIT));\n        }\n        else {\n            c2.up(new Event(Event.EXIT));\n        }\n\n        Util.sleep(1000); // give the closer thread time to close the channel\n        System.out.println(\"waiting for C2 to come back\");\n        int count=1;\n        while(true) {\n            view=c2.getView();\n            // System.out.println(\"<< C2.view: \" + view);\n            if((view != null && view.size() >= 2) || count >= 10)\n                break;\n            count++;\n            Util.sleep(1000);\n        }\n        view=c2.getView();\n        System.out.println(\">>> view is \" + view + \" <<<< (should have 2 members)\");\n        Assert.assertEquals(2, view.size());\n\n        Util.sleep(1000);\n        System.out.println(\"invoking RPC on shunned member\");\n        rsps=disp2.callRemoteMethods(null, \"getCurrentTime\", null, (Class[])null, GroupRequest.GET_ALL, 10000);\n        System.out.println(\">> rsps:\\n\" + rsps);\n        Assert.assertEquals(2, rsps.size());\n        for(Map.Entry<Address, Rsp> entry: rsps.entrySet()) {\n            Rsp rsp=entry.getValue();\n            assertFalse(rsp.wasSuspected());\n            assertTrue(rsp.wasReceived());\n        }\n\n        c1.setReceiver(null);\n        c2.setReceiver(null);\n        c1.clearChannelListeners();\n        c2.clearChannelListeners();\n    }","id":12637,"modified_method":"/**\n     * Tests the case where (members A and B) member B is shunned, excluded by A , then closes and reopens the channel.\n     * After B has rejoined, it invokes an RPC and it should get valid return values from both A and B.\n     * @throws Exception\n     */\n    @Test\n    public void testTwoMembersShun() throws Exception {\n        View view;\n        c1=createChannel();\n        c1.setOpt(Channel.AUTO_GETSTATE, false);\n        c1.addChannelListener(new BelasChannelListener(\"C1\"));\n        c2=createChannel();\n        c2.setOpt(Channel.AUTO_GETSTATE, false);\n        c2.addChannelListener(new BelasChannelListener(\"C2\"));\n        disp1=new RpcDispatcher(c1, null, new BelasReceiver(\"C1\"), this);\n        disp2=new RpcDispatcher(c2, null, new BelasReceiver(\"C2\"), this);\n        c1.connect(\"demo\");\n        c2.connect(\"demo\");\n        Assert.assertEquals(2, c1.getView().size());\n        \n        RspList rsps=disp2.callRemoteMethods(null, \"getCurrentTime\", null, (Class[])null, GroupRequest.GET_ALL, 10000);\n        System.out.println(\">> rsps:\\n\" + rsps);\n        Assert.assertEquals(2, rsps.size());\n\n        ProtocolStack stack=c1.getProtocolStack();\n        stack.removeProtocol(\"VERIFY_SUSPECT\");\n        Protocol transport=stack.getTransport();\n        System.out.println(\">> suspecting C2:\");\n        transport.up(new Event(Event.SUSPECT, c2.getLocalAddress()));\n\n        System.out.println(\">> shunning C2:\");\n\n        c2.up(new Event(Event.EXIT));\n\n        Util.sleep(1000); // give the closer thread time to close the channel\n        System.out.println(\"waiting for C2 to come back\");\n        int count=1;\n        while(true) {\n            view=c2.getView();\n            // System.out.println(\"<< C2.view: \" + view);\n            if((view != null && view.size() >= 2) || count >= 10)\n                break;\n            count++;\n            Util.sleep(1000);\n        }\n        view=c2.getView();\n        System.out.println(\">>> view is \" + view + \" <<<< (should have 2 members)\");\n        Assert.assertEquals(2, view.size());\n\n        Util.sleep(1000);\n        System.out.println(\"invoking RPC on shunned member\");\n        rsps=disp2.callRemoteMethods(null, \"getCurrentTime\", null, (Class[])null, GroupRequest.GET_ALL, 10000);\n        System.out.println(\">> rsps:\\n\" + rsps);\n        Assert.assertEquals(2, rsps.size());\n        for(Map.Entry<Address, Rsp> entry: rsps.entrySet()) {\n            Rsp rsp=entry.getValue();\n            assertFalse(rsp.wasSuspected());\n            assertTrue(rsp.wasReceived());\n        }\n\n        c1.setReceiver(null);\n        c2.setReceiver(null);\n        c1.clearChannelListeners();\n        c2.clearChannelListeners();\n    }","commit_id":"48185765398ce3ae13df6ebab084e7171e8fe24b","url":"https://github.com/belaban/JGroups"},{"original_method":"protected void populateModel(ModelNode operation, ModelNode model) {\n        final ModelNode config = operation.get(Constants.CONTAINER_CONFIG);\n\n        model.get(Constants.CONTAINER_CONFIG).set(config);\n        model.get(Constants.CONNECTOR).setEmptyObject();\n        model.get(Constants.VIRTUAL_SERVER).setEmptyObject();\n    }","id":12638,"modified_method":"protected void populateModel(ModelNode operation, ModelNode model) {\n\n        ModelNode ourContainerConfig = new ModelNode();\n\n        ModelNode ourStaticResources = DefaultStaticResources.getDefaultStaticResource();\n        ourContainerConfig.get(Constants.STATIC_RESOURCES).set(ourStaticResources);\n        ModelNode ourJspConfig = DefaultJspConfig.getDefaultStaticResource();\n        ourContainerConfig.get(Constants.JSP_CONFIGURATION).set(ourJspConfig);\n\n        final ModelNode opConfig = operation.get(Constants.CONTAINER_CONFIG);\n        if (opConfig.hasDefined(Constants.STATIC_RESOURCES)) {\n            for (Property prop : opConfig.get(Constants.STATIC_RESOURCES).asPropertyList()) {\n                ModelNode val = DefaultStaticResources.getDefaultIfUndefined(prop.getName(), prop.getValue());\n                ourStaticResources.get(prop.getName()).set(val);\n            }\n        }\n        if (opConfig.hasDefined(Constants.JSP_CONFIGURATION)) {\n            for (Property prop : opConfig.get(Constants.JSP_CONFIGURATION).asPropertyList()) {\n                ModelNode val = DefaultStaticResources.getDefaultIfUndefined(prop.getName(), prop.getValue());\n                ourStaticResources.get(prop.getName()).set(val);\n            }\n        }\n        if (opConfig.hasDefined(Constants.MIME_MAPPING)) {\n            ourContainerConfig.get(Constants.MIME_MAPPING).set(opConfig.get(Constants.MIME_MAPPING));\n        }\n        if (opConfig.hasDefined(Constants.WELCOME_FILE)) {\n            ourContainerConfig.get(Constants.WELCOME_FILE).set(opConfig.get(Constants.WELCOME_FILE));\n        }\n\n        model.get(Constants.CONTAINER_CONFIG).set(ourContainerConfig);\n\n        model.get(Constants.CONNECTOR).setEmptyObject();\n        model.get(Constants.VIRTUAL_SERVER).setEmptyObject();\n    }","commit_id":"aff6145e0731c15267f00c9f709236abf05ccb7f","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void writeContainerConfig(XMLExtendedStreamWriter writer, ModelNode config) throws XMLStreamException {\n        writer.writeStartElement(Element.CONTAINER_CONFIG.getLocalName());\n        if(config.hasDefined(STATIC_RESOURCES)) {\n            writeStaticResources(writer, config.get(STATIC_RESOURCES));\n        }\n        if(config.hasDefined(JSP_CONFIGURATION)) {\n            writeJSPConfiguration(writer, config.get(JSP_CONFIGURATION));\n        }\n        if(config.hasDefined(MIME_MAPPING)) {\n            for(final Property entry : config.get(MIME_MAPPING).asPropertyList()) {\n                writer.writeEmptyElement(Element.MIME_MAPPING.getLocalName());\n                writer.writeAttribute(Attribute.NAME.getLocalName(), entry.getName());\n                writer.writeAttribute(Attribute.VALUE.getLocalName(), entry.getValue().asString());\n            }\n        }\n        if(config.hasDefined(WELCOME_FILE)) {\n            for(final ModelNode file : config.get(WELCOME_FILE).asList()) {\n                writer.writeStartElement(Element.WELCOME_FILE.getLocalName());\n                writer.writeCharacters(file.asString());\n                writer.writeEndElement();\n            }\n        }\n        writer.writeEndElement();\n    }","id":12639,"modified_method":"private void writeContainerConfig(XMLExtendedStreamWriter writer, ModelNode config) throws XMLStreamException {\n        boolean containerConfigStartWritten = false;\n        if(config.hasDefined(STATIC_RESOURCES)) {\n            containerConfigStartWritten = writeStaticResources(writer, config.get(STATIC_RESOURCES));\n        }\n        if(config.hasDefined(JSP_CONFIGURATION)) {\n            containerConfigStartWritten = containerConfigStartWritten || writeJSPConfiguration(writer, config.get(JSP_CONFIGURATION), containerConfigStartWritten);\n        }\n        if(config.hasDefined(MIME_MAPPING)) {\n            if (!containerConfigStartWritten) {\n                writer.writeStartElement(Element.CONTAINER_CONFIG.getLocalName());\n                containerConfigStartWritten = true;\n            }\n            for(final Property entry : config.get(MIME_MAPPING).asPropertyList()) {\n                writer.writeEmptyElement(Element.MIME_MAPPING.getLocalName());\n                writer.writeAttribute(Attribute.NAME.getLocalName(), entry.getName());\n                writer.writeAttribute(Attribute.VALUE.getLocalName(), entry.getValue().asString());\n            }\n        }\n        if(config.hasDefined(WELCOME_FILE)) {\n            if (!containerConfigStartWritten) {\n                writer.writeStartElement(Element.CONTAINER_CONFIG.getLocalName());\n                containerConfigStartWritten = true;\n            }\n            for(final ModelNode file : config.get(WELCOME_FILE).asList()) {\n                writer.writeStartElement(Element.WELCOME_FILE.getLocalName());\n                writer.writeCharacters(file.asString());\n                writer.writeEndElement();\n            }\n        }\n        if (containerConfigStartWritten) {\n            writer.writeEndElement();\n        }\n    }","commit_id":"aff6145e0731c15267f00c9f709236abf05ccb7f","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void writeJSPConfiguration(XMLExtendedStreamWriter writer, ModelNode jsp) throws XMLStreamException {\n        writer.writeStartElement(Element.JSP_CONFIGURATION.getLocalName());\n\n        writeAttribute(writer, Attribute.DEVELOPMENT.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.KEEP_GENERATED.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.TRIM_SPACES.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.TAG_POOLING.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.MAPPED_FILE.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.CHECK_INTERVAL.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.MODIFIFICATION_TEST_INTERVAL.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.RECOMPILE_ON_FAIL.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.SMAP.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.DUMP_SMAP.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.GENERATE_STRINGS_AS_CHAR_ARRAYS.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.ERROR_ON_USE_BEAN_INVALID_CLASS_ATTRIBUTE.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.SCRATCH_DIR.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.SOURCE_VM.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.TARGET_VM.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.JAVA_ENCODING.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.X_POWERED_BY.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.DISPLAY_SOURCE_FRAGMENT.getLocalName(), jsp);\n        writeAttribute(writer, Attribute.DISABLED.getLocalName(), jsp);\n        writer.writeEndElement();\n    }","id":12640,"modified_method":"private boolean writeJSPConfiguration(XMLExtendedStreamWriter writer, ModelNode jsp, boolean containerConfigStartWritten) throws XMLStreamException {\n\n        boolean startWritten = writeJspConfigAttribute(writer, Attribute.DEVELOPMENT.getLocalName(), jsp, false, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.KEEP_GENERATED.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.TRIM_SPACES.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.TAG_POOLING.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.MAPPED_FILE.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.CHECK_INTERVAL.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.MODIFIFICATION_TEST_INTERVAL.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.RECOMPILE_ON_FAIL.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.SMAP.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.DUMP_SMAP.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.GENERATE_STRINGS_AS_CHAR_ARRAYS.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.ERROR_ON_USE_BEAN_INVALID_CLASS_ATTRIBUTE.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.SCRATCH_DIR.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.SOURCE_VM.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.TARGET_VM.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.JAVA_ENCODING.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.X_POWERED_BY.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.DISPLAY_SOURCE_FRAGMENT.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n        startWritten = startWritten || writeJspConfigAttribute(writer, Attribute.DISABLED.getLocalName(), jsp, startWritten, containerConfigStartWritten);\n\n        if (startWritten) {\n            writer.writeEndElement();\n        }\n\n        return startWritten;\n    }","commit_id":"aff6145e0731c15267f00c9f709236abf05ccb7f","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void writeStaticResources(XMLExtendedStreamWriter writer, ModelNode config) throws XMLStreamException {\n        writer.writeStartElement(Element.STATIC_RESOURCES.getLocalName());\n\n        writeAttribute(writer, Attribute.LISTINGS.getLocalName(), config);\n        writeAttribute(writer, Attribute.SENDFILE.getLocalName(), config);\n        writeAttribute(writer, Attribute.FILE_ENCONDING.getLocalName(), config);\n        writeAttribute(writer, Attribute.READ_ONLY.getLocalName(), config);\n        writeAttribute(writer, Attribute.WEBDAV.getLocalName(), config);\n        writeAttribute(writer, Attribute.SECRET.getLocalName(), config);\n        writeAttribute(writer, Attribute.MAX_DEPTH.getLocalName(), config);\n        writeAttribute(writer, Attribute.DISABLED.getLocalName(), config);\n\n        writer.writeEndElement();\n    }","id":12641,"modified_method":"private boolean writeStaticResources(XMLExtendedStreamWriter writer, ModelNode config) throws XMLStreamException {\n\n        boolean startWritten = writeStaticResourceAttribute(writer, Attribute.LISTINGS.getLocalName(), config, false);\n        startWritten = startWritten || writeStaticResourceAttribute(writer, Attribute.SENDFILE.getLocalName(), config, startWritten);\n        startWritten = startWritten || writeStaticResourceAttribute(writer, Attribute.FILE_ENCONDING.getLocalName(), config, startWritten);\n        startWritten = startWritten || writeStaticResourceAttribute(writer, Attribute.READ_ONLY.getLocalName(), config, startWritten);\n        startWritten = startWritten || writeStaticResourceAttribute(writer, Attribute.WEBDAV.getLocalName(), config, startWritten);\n        startWritten = startWritten || writeStaticResourceAttribute(writer, Attribute.SECRET.getLocalName(), config, startWritten);\n        startWritten = startWritten || writeStaticResourceAttribute(writer, Attribute.MAX_DEPTH.getLocalName(), config, startWritten);\n        startWritten = startWritten || writeStaticResourceAttribute(writer, Attribute.DISABLED.getLocalName(), config, startWritten);\n\n        if (startWritten) {\n            writer.writeEndElement();\n        }\n        return startWritten;\n    }","commit_id":"aff6145e0731c15267f00c9f709236abf05ccb7f","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        config = new FilterConfigHelper(filterConfig).getFilterConfig(DEFAULT_CONFIG);\n        LOG.info(\"Initializing filter using config \" + config);\n        handlerFactory = new ApiValidatorHandlerFactory(configurationService, configurationRoot, config, metricsService);\n        URL xsdURL = getClass().getResource(\"/META-INF/schema/config/validator-configuration.xsd\");\n        configurationService.subscribeTo(filterConfig.getFilterName(), config, xsdURL, handlerFactory, ValidatorConfiguration.class);\n    }","id":12642,"modified_method":"@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        LOG.trace(\"API Validator filter initializing...\");\n        configFileName = new FilterConfigHelper(filterConfig).getFilterConfig(DEFAULT_CONFIG);\n\n        LOG.info(\"Initializing API Validator filter using config \" + configFileName);\n        handlerFactory = new ApiValidatorHandlerFactory(configurationService, configurationRoot, configFileName, metricsService);\n        URL xsdURL = getClass().getResource(SCHEMA_FILE_NAME);\n        configurationService.subscribeTo(filterConfig.getFilterName(), configFileName, xsdURL, handlerFactory, ValidatorConfiguration.class);\n\n        LOG.trace(\"API Validator filter initialized\");\n    }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        ApiValidatorHandler handler = handlerFactory.newHandler();\n        if (handler != null) {\n            handler.setFilterChain(chain);\n        } else {\n            LOG.error(\"Unable to build API validator handler\");\n        }\n        new FilterLogicHandlerDelegate(request, response, chain).doFilter(handler);\n    }","id":12643,"modified_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        ApiValidatorHandler handler = handlerFactory.buildHandler();\n        if (handler == null) {\n            LOG.error(\"API Validator filter has not yet initialized... Please check your configuration files and your artifacts directory.\");\n            ((HttpServletResponse) response).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n        } else {\n            handler.setFilterChain(chain);\n            handler.handleRequest((HttpServletRequest) request, (HttpServletResponse) response);\n        }\n    }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void destroy() {\n        configurationService.unsubscribeFrom(config, handlerFactory);\n    }","id":12644,"modified_method":"@Override\n    public void destroy() {\n        configurationService.unsubscribeFrom(configFileName, handlerFactory);\n    }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public FilterDirector handleRequest(HttpServletRequest request, ReadableHttpServletResponse response) {\n        final FilterDirector myDirector = new FilterDirectorImpl();\n        myDirector.setFilterAction(FilterAction.PASS);\n        MutableHttpServletRequest mutableRequest = MutableHttpServletRequest.wrap(request);\n        List<HeaderValue> roles = mutableRequest.getPreferredHeaderValues(OpenStackServiceHeader.ROLES.toString(), new HeaderValueImpl(\"\"));\n        Result lastValidatorResult = null;\n        boolean isValid = false;\n        myDirector.setFilterAction(FilterAction.RETURN);\n\n        try {\n            matchedRoles.clear();\n            List<ValidatorInfo> matchedValidators = getValidatorsForRole(roles);\n            if (!matchedValidators.isEmpty()) {\n                for (ValidatorInfo validatorInfo : matchedValidators) {\n\n                    Validator validator = validatorInfo.getValidator();\n                    if (validator == null) {\n                        LOG.warn(\"Validator not available for request:\", validatorInfo.getUri());\n                        myDirector.setResponseStatusCode(HttpServletResponse.SC_BAD_GATEWAY);\n                    } else {\n                        lastValidatorResult = validator.validate(request, response, chain);\n                        isValid = lastValidatorResult.valid();\n                        myDirector.setResponseStatusCode(response.getStatus());\n                        if (isValid) {\n                            break;\n                        }\n                    }\n                }\n\n                if (!isValid) {\n                    if (mbcsInvalidRequests != null) {\n                        for (String s : matchedRoles) {\n                            mbcsInvalidRequests.mark(s);\n                        }\n                    }\n                    if (multiRoleMatch) {\n                        sendMultiMatchErrorResponse(lastValidatorResult, myDirector, response);\n                    }\n                }\n            } else {\n                myDirector.setResponseStatusCode(HttpServletResponse.SC_FORBIDDEN);\n                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n            }\n            //TODO: Look back into this to see if we can avoid catching throwable\n        } catch (Throwable t) {\n            LOG.error(\"Error processing validation\", t);\n            myDirector.setResponseStatusCode(HttpServletResponse.SC_BAD_GATEWAY);\n        }\n\n        return myDirector;\n    }","id":12645,"modified_method":"public void handleRequest(HttpServletRequest request, HttpServletResponse response) {\n        HttpServletRequestWrapper wrappedRequest = new HttpServletRequestWrapper(request);\n        List<String> roles = wrappedRequest.getPreferredSplittableHeaders(OpenStackServiceHeader.ROLES.toString());\n        if (roles.isEmpty()) {\n            roles = Collections.singletonList(\"\");\n        }\n        Result lastValidatorResult = null;\n        boolean isValid = false;\n\n        try {\n            matchedRoles.clear();\n            List<ValidatorInfo> matchedValidators = getValidatorsForRole(roles);\n            if (!matchedValidators.isEmpty()) {\n                for (ValidatorInfo validatorInfo : matchedValidators) {\n\n                    Validator validator = validatorInfo.getValidator();\n                    if (validator == null) {\n                        LOG.warn(\"Validator not available for request: {}\", validatorInfo.getUri());\n                        response.setStatus(HttpServletResponse.SC_BAD_GATEWAY);\n                    } else {\n                        lastValidatorResult = validator.validate(wrappedRequest, response, chain);\n                        isValid = lastValidatorResult.valid();\n                        response.setStatus(response.getStatus());\n                        if (isValid) {\n                            break;\n                        }\n                    }\n                }\n\n                if (!isValid) {\n                    if (mbcsInvalidRequests != null) {\n                        for (String s : matchedRoles) {\n                            mbcsInvalidRequests.mark(s);\n                        }\n                    }\n                    if (multiRoleMatch) {\n                        sendMultiMatchErrorResponse(lastValidatorResult, response);\n                    }\n                }\n            } else {\n                response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n                response.sendError(HttpServletResponse.SC_FORBIDDEN);\n            }\n            //TODO: Look back into this to see if we can avoid catching throwable\n        } catch (Throwable t) {\n            LOG.error(\"Error processing validation\", t);\n            response.setStatus(HttpServletResponse.SC_BAD_GATEWAY);\n        }\n    }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"protected List<ValidatorInfo> getValidatorsForRole(List<? extends HeaderValue> listRoles) {\n        List<ValidatorInfo> validatorList = new ArrayList<>();\n        Set<String> roles = getRolesAsSet(listRoles);\n\n        for (ValidatorInfo validator : validators) {\n            for (String validatorRoles : validator.getRoles()) {\n                if (roles.contains(validatorRoles)) {\n                    validatorList.add(validator); // TODO Can the same validator be added multiple times?\n                    matchedRoles.add(validatorRoles);\n                }\n            }\n        }\n\n        if (appendDefaultValidator(validatorList)) {\n            matchedRoles.addAll(roles);\n        }\n\n        return !multiRoleMatch && !validatorList.isEmpty() ? validatorList.subList(0, 1) : validatorList;\n    }","id":12646,"modified_method":"protected List<ValidatorInfo> getValidatorsForRole(List<String> listRoles) {\n        List<ValidatorInfo> validatorList = new ArrayList<>();\n        Set<String> roles = new HashSet<>(listRoles);\n\n        for (ValidatorInfo validator : validators) {\n            for (String validatorRoles : validator.getRoles()) {\n                if (roles.contains(validatorRoles)) {\n                    validatorList.add(validator); // TODO Can the same validator be added multiple times?\n                    matchedRoles.add(validatorRoles);\n                }\n            }\n        }\n\n        if (appendDefaultValidator(validatorList)) {\n            matchedRoles.addAll(roles);\n        }\n\n        return !multiRoleMatch && !validatorList.isEmpty() ? validatorList.subList(0, 1) : validatorList;\n    }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"private void sendMultiMatchErrorResponse(Result result, final FilterDirector myDirector, HttpServletResponse response) {\n        try {\n            ErrorResult error = getErrorResult(result);\n            if (error != null && !delegatingMode) {\n                myDirector.setResponseStatusCode(error.code());\n                response.sendError(error.code(), error.message());\n            }\n        } catch (Throwable t) {\n\n            LOG.error(\"Some error\", t);\n            myDirector.setResponseStatusCode(HttpServletResponse.SC_BAD_GATEWAY);\n        }\n    }","id":12647,"modified_method":"private void sendMultiMatchErrorResponse(Result result, HttpServletResponse response) {\n        try {\n            ErrorResult error = getErrorResult(result);\n            if (error != null && !delegatingMode) {\n                response.setStatus(error.code());\n                response.sendError(error.code(), error.message());\n            }\n        } catch (Throwable t) {\n            LOG.error(\"Some error\", t);\n            response.setStatus(HttpServletResponse.SC_BAD_GATEWAY);\n        }\n    }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"void initialize() {\n        synchronized (lock) {\n            if (initialized || validatorConfiguration == null) {\n                return;\n            }\n\n            ValidatorConfigurator validatorConfigurator = new ValidatorConfigurator(validatorConfiguration, configRoot, config);\n\n            multiRoleMatch = validatorConfiguration.isMultiRoleMatch();\n\n            defaultValidator = validatorConfigurator.getDefaultValidator();\n            validators = validatorConfigurator.getValidators();\n            delegatingMode = validatorConfiguration.getDelegating() != null;\n\n            for (ValidatorInfo validator : validators) {\n                LOG.debug(\"Adding listener for {} : {}\", validator.getName(), validator.getUri());\n                addListener(validator.getUri());\n            }\n\n            initialized = true;\n        }\n    }","id":12648,"modified_method":"private void initialize() {\n        synchronized (wadlLock) {\n            if (initialized || validatorConfiguration == null) {\n                return;\n            }\n\n            ValidatorConfigurator validatorConfigurator = new ValidatorConfigurator(validatorConfiguration, configRoot, config);\n\n            multiRoleMatch = validatorConfiguration.isMultiRoleMatch();\n\n            defaultValidator = validatorConfigurator.getDefaultValidator();\n            validators = validatorConfigurator.getValidators();\n            delegatingMode = validatorConfiguration.getDelegating() != null;\n\n            for (ValidatorInfo validator : validators) {\n                LOG.debug(\"Adding listener for {} : {}\", validator.getName(), validator.getUri());\n                addListener(validator.getUri());\n            }\n\n            initialized = true;\n        }\n    }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    protected ApiValidatorHandler buildHandler() {\n        initialize();\n        if (!initialized || !this.isInitialized()) {\n            return null;\n        }\n        return new ApiValidatorHandler(defaultValidator, validators, multiRoleMatch, delegatingMode, metricsService);\n    }","id":12649,"modified_method":"public ApiValidatorHandler buildHandler() {\n        synchronized (configLock) {\n            initialize();\n            if (!initialized) {\n                return null;\n            }\n            return new ApiValidatorHandler(defaultValidator, validators, multiRoleMatch, delegatingMode, metricsService);\n        }\n    }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n        public void configurationUpdated(ConfigurationResource config) {\n            LOG.info(\"WADL file changed: \" + config.name());\n\n            synchronized (lock) {\n                if (validators == null) {\n                    return;\n                }\n                boolean found = false;\n                boolean loadedWADL = true;\n\n                for (ValidatorInfo info : validators) {\n                    LOG.debug(\"Checking config for validator: {}\", info.getName());\n                    if (info.getUri() != null && getNormalizedPath(info.getUri()).equals(config.name())) {\n                        if (loadedWADL) {\n                            LOG.debug(\"REINIT validator: {}\", info.getName());\n                            loadedWADL = info.reinitValidator();\n                        } else {\n                            LOG.debug(\"REINIT validator: {}\", info.getName());\n                            info.reinitValidator();\n                        }\n                        found = true;\n                    }\n                }\n\n                if (!found) {\n                    LOG.debug(\"Didn't match a particular config, so reinit *all* the validators\");\n                    // If we couldn't match the particular config... be safe and clear\n                    // all of the validators\n                    for (ValidatorInfo info : validators) {\n                        LOG.debug(\"REINIT valdiator: {}\", info.getName());\n                        info.reinitValidator();\n                    }\n                }\n                if (!loadedWADL) {\n                    isInitialized = false;\n                } else {\n                    isInitialized = true;\n                }\n            }\n        }","id":12650,"modified_method":"@Override\n        public void configurationUpdated(ConfigurationResource config) {\n            LOG.info(\"WADL file changed: \" + config.name());\n\n            synchronized (wadlLock) {\n                if (validators == null) {\n                    return;\n                }\n                boolean found = false;\n                boolean loadedWADL = true;\n\n                for (ValidatorInfo info : validators) {\n                    LOG.debug(\"Checking config for validator: {}\", info.getName());\n                    if (info.getUri() != null && getNormalizedPath(info.getUri()).equals(config.name())) {\n                        if (loadedWADL) {\n                            LOG.debug(\"REINIT validator: {}\", info.getName());\n                            loadedWADL = info.reinitValidator();\n                        } else {\n                            LOG.debug(\"REINIT validator: {}\", info.getName());\n                            info.reinitValidator();\n                        }\n                        found = true;\n                    }\n                }\n\n                if (!found) {\n                    LOG.debug(\"Didn't match a particular config, so reinit *all* the validators\");\n                    // If we couldn't match the particular config... be safe and clear\n                    // all of the validators\n                    for (ValidatorInfo info : validators) {\n                        LOG.debug(\"REINIT valdiator: {}\", info.getName());\n                        info.reinitValidator();\n                    }\n                }\n                if (!loadedWADL) {\n                    isInitialized = false;\n                } else {\n                    isInitialized = true;\n                }\n            }\n        }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"private void unsubscribeAll() {\n        synchronized (lock) {\n            initialized = false;\n            if (validators == null) {\n                return;\n            }\n\n            for (ValidatorInfo info : validators) {\n                if (StringUtilities.isNotBlank(info.getUri())) {\n                    configurationService.unsubscribeFrom(info.getUri(), wadlListener);\n                }\n                if (info.getValidator() != null) {\n                    LOG.debug(\"DESTROYING VALIDATOR: {}\", info.getName());\n                    info.getValidator().destroy();\n                }\n            }\n        }\n    }","id":12651,"modified_method":"private void unsubscribeAll() {\n        synchronized (wadlLock) {\n            initialized = false;\n            if (validators == null) {\n                return;\n            }\n\n            for (ValidatorInfo info : validators) {\n                if (StringUtilities.isNotBlank(info.getUri())) {\n                    configurationService.unsubscribeFrom(info.getUri(), wadlListener);\n                }\n                if (info.getValidator() != null) {\n                    LOG.debug(\"DESTROYING VALIDATOR: {}\", info.getName());\n                    info.getValidator().destroy();\n                }\n            }\n        }\n    }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Test\n        public void shouldRetainValidatorOrderWhenMultiMatchAndHasDefaultRole() {\n            List<HeaderValue> roles = new ArrayList<HeaderValue>();\n            roles.add(new HeaderValueImpl(\"role1\"));\n            roles.add(new HeaderValueImpl(\"role2\"));\n            roles.add(new HeaderValueImpl(\"defaultrole\"));\n\n            List<ValidatorInfo> validators = new ArrayList<ValidatorInfo>();\n            validators.add(role1ValidatorInfo);\n            validators.add(defaultValidatorInfo);\n            validators.add(role2ValidatorInfo);\n\n            instance = new ApiValidatorHandler(defaultValidatorInfo, validators, true, false, null);\n\n            List<ValidatorInfo> validatorsForRole = instance.getValidatorsForRole(roles);\n\n            assertEquals(validatorsForRole.get(0), role1ValidatorInfo);\n            assertEquals(validatorsForRole.get(1), defaultValidatorInfo);\n            assertEquals(validatorsForRole.get(2), role2ValidatorInfo);\n        }","id":12652,"modified_method":"@Test\n        public void shouldRetainValidatorOrderWhenMultiMatchAndHasDefaultRole() {\n            List<String> roles = Arrays.asList(\"role1\", \"role2\", \"defaultrole\");\n\n            List<ValidatorInfo> validators = new ArrayList<ValidatorInfo>();\n            validators.add(role1ValidatorInfo);\n            validators.add(defaultValidatorInfo);\n            validators.add(role2ValidatorInfo);\n\n            instance = new ApiValidatorHandler(defaultValidatorInfo, validators, true, false, null);\n\n            List<ValidatorInfo> validatorsForRole = instance.getValidatorsForRole(roles);\n\n            assertEquals(validatorsForRole.get(0), role1ValidatorInfo);\n            assertEquals(validatorsForRole.get(1), defaultValidatorInfo);\n            assertEquals(validatorsForRole.get(2), role2ValidatorInfo);\n        }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Test\n        public void shouldAddDefaultValidatorAsLeastPriorityWhenMultiMatch() {\n            List<HeaderValue> roles = new ArrayList<HeaderValue>();\n            roles.add(new HeaderValueImpl(\"role1\"));\n\n            List<ValidatorInfo> validators = new ArrayList<ValidatorInfo>();\n            validators.add(role1ValidatorInfo);\n            validators.add(role2ValidatorInfo);\n\n            instance = new ApiValidatorHandler(defaultValidatorInfo, validators, true, false, null);\n            List<ValidatorInfo> validatorsForRole = instance.getValidatorsForRole(roles);\n            assertEquals(validatorsForRole.get(0), defaultValidatorInfo);\n            assertEquals(validatorsForRole.get(1), role1ValidatorInfo);\n        }","id":12653,"modified_method":"@Test\n        public void shouldAddDefaultValidatorAsLeastPriorityWhenMultiMatch() {\n            List<String> roles = Collections.singletonList(\"role1\");\n\n            List<ValidatorInfo> validators = new ArrayList<ValidatorInfo>();\n            validators.add(role1ValidatorInfo);\n            validators.add(role2ValidatorInfo);\n\n            instance = new ApiValidatorHandler(defaultValidatorInfo, validators, true, false, null);\n            List<ValidatorInfo> validatorsForRole = instance.getValidatorsForRole(roles);\n            assertEquals(validatorsForRole.get(0), defaultValidatorInfo);\n            assertEquals(validatorsForRole.get(1), role1ValidatorInfo);\n        }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Test\n        public void shouldHandleNullValidators() {\n            List<HeaderValue> roles = new ArrayList<HeaderValue>();\n            roles.add(new HeaderValueImpl(\"nullValidator\"));\n\n            when(request.getPreferredHeaderValues(eq(OpenStackServiceHeader.ROLES.toString()), any(HeaderValueImpl.class))).thenReturn(roles);\n            FilterDirector director = instance.handleRequest(request, response);\n            verify(nullValidatorInfo).getValidator();\n            assertEquals(HttpServletResponse.SC_BAD_GATEWAY, director.getResponseStatusCode());\n        }","id":12654,"modified_method":"@Test\n        public void shouldHandleNullValidators() {\n            request.addHeader(OpenStackServiceHeader.ROLES.toString(), \"nullValidator\");\n\n            instance.handleRequest(request, response);\n            verify(nullValidatorInfo).getValidator();\n            assertEquals(HttpServletResponse.SC_BAD_GATEWAY, response.getStatus());\n        }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Test\n        public void shouldHandleExceptionsInValidators() {\n            List<HeaderValue> roles = new ArrayList<HeaderValue>();\n            roles.add(new HeaderValueImpl(\"blowupValidator\"));\n            when(request.getPreferredHeaderValues(eq(OpenStackServiceHeader.ROLES.toString()), any(HeaderValueImpl.class))).thenReturn(roles);\n\n            FilterDirector director = instance.handleRequest(request, response);\n            verify(blowupValidator).validate(request, response, chain);\n            assertEquals(HttpServletResponse.SC_BAD_GATEWAY, director.getResponseStatusCode());\n        }","id":12655,"modified_method":"@Test\n        public void shouldHandleExceptionsInValidators() {\n            request.addHeader(OpenStackServiceHeader.ROLES.toString(), \"blowupValidator\");\n\n            instance.handleRequest(request, response);\n            verify(blowupValidator).validate(any(HttpServletRequestWrapper.class), eq(response), eq(chain));\n            assertEquals(HttpServletResponse.SC_BAD_GATEWAY, response.getStatus());\n        }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Before\n        public void setup() {\n            chain = mock(FilterChain.class);\n            request = mock(MutableHttpServletRequest.class);\n            response = mock(MutableHttpServletResponse.class);\n\n            defaultValidator = mock(Validator.class);\n            defaultValidatorInfo = new ValidatorInfo(Arrays.asList(\"defaultrole\"), \"defaultwadl\", null, null);\n            defaultValidatorInfo.setValidator(defaultValidator);\n\n            role1Validator = mock(Validator.class);\n            role1ValidatorInfo = new ValidatorInfo(Arrays.asList(\"role1\"), \"role1wadl\", null, null);\n            role1ValidatorInfo.setValidator(role1Validator);\n\n            role2Validator = mock(Validator.class);\n            role2ValidatorInfo = new ValidatorInfo(Arrays.asList(\"role2\"), \"role2wadl\", null, null);\n            role2ValidatorInfo.setValidator(role2Validator);\n\n            nullValidatorInfo = mock(ValidatorInfo.class);\n            when(nullValidatorInfo.getRoles()).thenReturn(Arrays.asList(\"nullValidator\"));\n            when(nullValidatorInfo.getValidator()).thenReturn(null);\n\n            blowupValidator = mock(Validator.class);\n            when(blowupValidator.validate(request, response, chain)).thenThrow(new RuntimeException(\"Test\"));\n            blowupValidatorInfo = new ValidatorInfo(Arrays.asList(\"blowupValidator\"), \"blowupWadl\", null, null);\n            blowupValidatorInfo.setValidator(blowupValidator);\n\n            List<ValidatorInfo> validators = new ArrayList<ValidatorInfo>();\n            validators.add(defaultValidatorInfo);\n            validators.add(role1ValidatorInfo);\n            validators.add(role2ValidatorInfo);\n            validators.add(nullValidatorInfo);\n            validators.add(blowupValidatorInfo);\n\n            instance = new ApiValidatorHandler(defaultValidatorInfo, validators, false, false, null);\n            instance.setFilterChain(chain);\n\n            when(request.getRequestURI()).thenReturn(\"/path/to/resource\");\n\n        }","id":12656,"modified_method":"@Before\n        public void setup() {\n            chain = mock(FilterChain.class);\n            request = new MockHttpServletRequest();\n            response = new MockHttpServletResponse();\n\n            defaultValidator = mock(Validator.class);\n            defaultValidatorInfo = new ValidatorInfo(Arrays.asList(\"defaultrole\"), \"defaultwadl\", null, null);\n            defaultValidatorInfo.setValidator(defaultValidator);\n\n            role1Validator = mock(Validator.class);\n            role1ValidatorInfo = new ValidatorInfo(Arrays.asList(\"role1\"), \"role1wadl\", null, null);\n            role1ValidatorInfo.setValidator(role1Validator);\n\n            role2Validator = mock(Validator.class);\n            role2ValidatorInfo = new ValidatorInfo(Arrays.asList(\"role2\"), \"role2wadl\", null, null);\n            role2ValidatorInfo.setValidator(role2Validator);\n\n            nullValidatorInfo = mock(ValidatorInfo.class);\n            when(nullValidatorInfo.getRoles()).thenReturn(Arrays.asList(\"nullValidator\"));\n            when(nullValidatorInfo.getValidator()).thenReturn(null);\n\n            blowupValidator = mock(Validator.class);\n            when(blowupValidator.validate(request, response, chain)).thenThrow(new RuntimeException(\"Test\"));\n            blowupValidatorInfo = new ValidatorInfo(Arrays.asList(\"blowupValidator\"), \"blowupWadl\", null, null);\n            blowupValidatorInfo.setValidator(blowupValidator);\n\n            List<ValidatorInfo> validators = new ArrayList<ValidatorInfo>();\n            validators.add(defaultValidatorInfo);\n            validators.add(role1ValidatorInfo);\n            validators.add(role2ValidatorInfo);\n            validators.add(nullValidatorInfo);\n            validators.add(blowupValidatorInfo);\n\n            instance = new ApiValidatorHandler(defaultValidatorInfo, validators, false, false, null);\n            instance.setFilterChain(chain);\n\n            request.setRequestURI(\"/path/to/resource\");\n        }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Test\n        public void shouldCallDefaultValidatorWhenNoRoleMatch() {\n\n            instance.handleRequest(request, response);\n            verify(defaultValidator).validate(request, response, chain);\n        }","id":12657,"modified_method":"@Test\n        public void shouldCallDefaultValidatorWhenNoRoleMatch() {\n            instance.handleRequest(request, response);\n            verify(defaultValidator).validate(any(HttpServletRequestWrapper.class), eq(response), eq(chain));\n        }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Test\n        public void shouldCallValidatorForRole() {\n            List<HeaderValue> roles = new ArrayList<HeaderValue>();\n            roles.add(new HeaderValueImpl(\"junk;q=0.9,role1;q=0.1,stuff;=0.8\"));\n\n            when(request.getPreferredHeaderValues(eq(OpenStackServiceHeader.ROLES.toString()), any(HeaderValueImpl.class))).thenReturn(roles);\n            instance.handleRequest(request, response);\n            verify(role1Validator).validate(request, response, chain);\n        }","id":12658,"modified_method":"@Test\n        public void shouldCallValidatorForRole() {\n            request.addHeader(OpenStackServiceHeader.ROLES.toString(), \"junk;q=0.8,role1;q=0.9,bbq;q=0.9,stuff;q=0.7\");\n\n            instance.handleRequest(request, response);\n            verify(role1Validator).validate(any(HttpServletRequestWrapper.class), eq(response), eq(chain));\n        }","commit_id":"49e548e00390b5ed2f6d657bdb2376cc0b7c60fe","url":"https://github.com/rackerlabs/repose"},{"original_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAcknowledgmentCollection getAcks() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAcknowledgment.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsAcknowledgment.class);\n\n        return new OnmsAcknowledgmentCollection(m_ackDao.findMatching(getDistinctIdCriteria(OnmsAcknowledgment.class, criteria)));\n    }","id":12659,"modified_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAcknowledgmentCollection getAcks() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAcknowledgment.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsAcknowledgment.class);\n\n        return new OnmsAcknowledgmentCollection(m_ackDao.findMatching(getDistinctIdCriteria(OnmsAcknowledgment.class, criteria)));\n    }","commit_id":"3da730590b5f351f7b8ce8cd59548e1a7a5551d6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAlarmCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAlarm.class);\n\n    \tsetLimitOffset(params, criteria);\n        addOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsAlarm.class);\n\n        return new OnmsAlarmCollection(m_alarmDao.findMatching(getDistinctIdCriteria(OnmsAlarm.class, criteria)));\n    }","id":12660,"modified_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAlarmCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAlarm.class);\n\n    \tsetLimitOffset(params, criteria);\n        addOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsAlarm.class);\n    \tcriteria.setFetchMode(\"firstEvent\", FetchMode.JOIN);\n        criteria.setFetchMode(\"lastEvent\", FetchMode.JOIN);\n        return new OnmsAlarmCollection(m_alarmDao.findMatching(getDistinctIdCriteria(OnmsAlarm.class, criteria)));\n    }","commit_id":"3da730590b5f351f7b8ce8cd59548e1a7a5551d6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private OnmsCriteria getQueryFilters() {\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\n        OnmsCriteria criteria = new OnmsCriteria(OnmsNode.class);\n\n    \tsetLimitOffset(params, criteria, LIMIT);\n        addOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsNode.class);\n\n    \tcriteria.createAlias(\"snmpInterfaces\", \"snmpInterface\", CriteriaSpecification.LEFT_JOIN);\n        criteria.createAlias(\"ipInterfaces\", \"ipInterface\", CriteriaSpecification.LEFT_JOIN);\n        return getDistinctIdCriteria(OnmsNode.class, criteria);\n    }","id":12661,"modified_method":"private OnmsCriteria getQueryFilters() {\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\n        OnmsCriteria criteria = new OnmsCriteria(OnmsNode.class);\n\n    \tsetLimitOffset(params, criteria, LIMIT);\n        addOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsNode.class);\n\n    \tcriteria.createAlias(\"snmpInterfaces\", \"snmpInterface\", CriteriaSpecification.LEFT_JOIN);\n        criteria.createAlias(\"ipInterfaces\", \"ipInterface\", CriteriaSpecification.LEFT_JOIN);\n        return getDistinctIdCriteria(OnmsNode.class, criteria);\n    }","commit_id":"3da730590b5f351f7b8ce8cd59548e1a7a5551d6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsNotificationCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsNotification.class);\n\n    \tsetLimitOffset(params, criteria, 10);\n    \taddOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsNotification.class);\n\n        return new OnmsNotificationCollection(m_notifDao.findMatching(getDistinctIdCriteria(OnmsNotification.class,criteria)));\n    }","id":12662,"modified_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsNotificationCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsNotification.class);\n\n    \tsetLimitOffset(params, criteria, 10);\n    \taddOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsNotification.class);\n\n        return new OnmsNotificationCollection(m_notifDao.findMatching(getDistinctIdCriteria(OnmsNotification.class,criteria)));\n    }","commit_id":"3da730590b5f351f7b8ce8cd59548e1a7a5551d6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private OnmsCriteria getQueryFilters() {\r\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\r\n        OnmsCriteria criteria = new OnmsCriteria(OnmsMap.class);\r\n\r\n    \tsetLimitOffset(params, criteria, LIMIT);\r\n    \taddOrdering(params, criteria);\r\n    \taddFiltersToCriteria(params, criteria, OnmsMap.class);\r\n\r\n        return getDistinctIdCriteria(OnmsMap.class, criteria);\r\n    }","id":12663,"modified_method":"private OnmsCriteria getQueryFilters() {\r\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\r\n        OnmsCriteria criteria = new OnmsCriteria(OnmsMap.class);\r\n\r\n    \tsetLimitOffset(params, criteria, LIMIT);\r\n    \taddOrdering(params, criteria, false);\r\n    \taddFiltersToCriteria(params, criteria, OnmsMap.class);\r\n\r\n        return getDistinctIdCriteria(OnmsMap.class, criteria);\r\n    }","commit_id":"3da730590b5f351f7b8ce8cd59548e1a7a5551d6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Does ordering processing; pulled out to a separate method for visual clarity.  Configures ordering as defined in addFiltersToCriteria\n\t * @param params - set of values to look in for the \"order\" and \"orderBy\" values\n\t * @param criteria - the criteria object which will be updated with ordering configuration\n\t */\n\tprotected void addOrdering(MultivaluedMap<java.lang.String, java.lang.String> params, OnmsCriteria criteria) {\n\t    if(params.containsKey(\"orderBy\")) {\n\t\t\tString orderBy=params.getFirst(\"orderBy\");\n\t\t\tparams.remove(\"orderBy\");\n\t\t\tboolean orderAsc=true;\n\t\t\tif(params.containsKey(\"order\")) {\n\t\t\t\tif(\"desc\".equalsIgnoreCase(params.getFirst(\"order\"))) {\n\t\t\t\t\torderAsc=false;\n\t\t\t\t}\n\t\t\t\tparams.remove(\"order\");\n\t\t\t}\n\t\t\tOrder o;\n\t\t\tif(orderAsc) {\n\t\t\t    o = Order.asc(orderBy);\n\t\t\t} else {\n\t\t\t\to = Order.desc(orderBy);\n\t\t\t}\n\t\t\t// criteria.addOrder(o);\n\t\t\tm_ordering.add(o);\n\t\t}\n\t}","id":12664,"modified_method":"/**\n\t * Does ordering processing; pulled out to a separate method for visual clarity.  Configures ordering as defined in addFiltersToCriteria\n\t * @param params - set of values to look in for the \"order\" and \"orderBy\" values\n\t * @param criteria - the criteria object which will be updated with ordering configuration\n\t */\n    protected void addOrdering(MultivaluedMap<java.lang.String, java.lang.String> params, OnmsCriteria criteria) {\n        addOrdering(params, criteria, true);\n    }","commit_id":"3da730590b5f351f7b8ce8cd59548e1a7a5551d6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n    @Transactional\n    public OnmsOutageCollection getOutages() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsOutage.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsOutage.class);\n\n    \treturn new OnmsOutageCollection(m_outageDao.findMatching(getDistinctIdCriteria(OnmsOutage.class, criteria)));\n    }","id":12665,"modified_method":"@GET\n    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n    @Transactional\n    public OnmsOutageCollection getOutages() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsOutage.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsOutage.class);\n\n    \treturn new OnmsOutageCollection(m_outageDao.findMatching(getDistinctIdCriteria(OnmsOutage.class, criteria)));\n    }","commit_id":"3da730590b5f351f7b8ce8cd59548e1a7a5551d6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAcknowledgmentCollection getAcks() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAcknowledgment.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsAcknowledgment.class);\n\n        return new OnmsAcknowledgmentCollection(m_ackDao.findMatching(getDistinctIdCriteria(OnmsAcknowledgment.class, criteria)));\n    }","id":12666,"modified_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAcknowledgmentCollection getAcks() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAcknowledgment.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsAcknowledgment.class);\n\n        return new OnmsAcknowledgmentCollection(m_ackDao.findMatching(getDistinctIdCriteria(OnmsAcknowledgment.class, criteria)));\n    }","commit_id":"b1d02ddbfbea534d6fad9a31000f05937d8b689c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAlarmCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAlarm.class);\n\n    \tsetLimitOffset(params, criteria);\n        addOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsAlarm.class);\n\n        return new OnmsAlarmCollection(m_alarmDao.findMatching(getDistinctIdCriteria(OnmsAlarm.class, criteria)));\n    }","id":12667,"modified_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAlarmCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAlarm.class);\n\n    \tsetLimitOffset(params, criteria);\n        addOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsAlarm.class);\n    \tcriteria.setFetchMode(\"firstEvent\", FetchMode.JOIN);\n        criteria.setFetchMode(\"lastEvent\", FetchMode.JOIN);\n        return new OnmsAlarmCollection(m_alarmDao.findMatching(getDistinctIdCriteria(OnmsAlarm.class, criteria)));\n    }","commit_id":"b1d02ddbfbea534d6fad9a31000f05937d8b689c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private OnmsCriteria getQueryFilters() {\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\n        OnmsCriteria criteria = new OnmsCriteria(OnmsNode.class);\n\n    \tsetLimitOffset(params, criteria, LIMIT);\n        addOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsNode.class);\n\n    \tcriteria.createAlias(\"snmpInterfaces\", \"snmpInterface\", CriteriaSpecification.LEFT_JOIN);\n        criteria.createAlias(\"ipInterfaces\", \"ipInterface\", CriteriaSpecification.LEFT_JOIN);\n        return getDistinctIdCriteria(OnmsNode.class, criteria);\n    }","id":12668,"modified_method":"private OnmsCriteria getQueryFilters() {\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\n        OnmsCriteria criteria = new OnmsCriteria(OnmsNode.class);\n\n    \tsetLimitOffset(params, criteria, LIMIT);\n        addOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsNode.class);\n\n    \tcriteria.createAlias(\"snmpInterfaces\", \"snmpInterface\", CriteriaSpecification.LEFT_JOIN);\n        criteria.createAlias(\"ipInterfaces\", \"ipInterface\", CriteriaSpecification.LEFT_JOIN);\n        return getDistinctIdCriteria(OnmsNode.class, criteria);\n    }","commit_id":"b1d02ddbfbea534d6fad9a31000f05937d8b689c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsNotificationCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsNotification.class);\n\n    \tsetLimitOffset(params, criteria, 10);\n    \taddOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsNotification.class);\n\n        return new OnmsNotificationCollection(m_notifDao.findMatching(getDistinctIdCriteria(OnmsNotification.class,criteria)));\n    }","id":12669,"modified_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsNotificationCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsNotification.class);\n\n    \tsetLimitOffset(params, criteria, 10);\n    \taddOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsNotification.class);\n\n        return new OnmsNotificationCollection(m_notifDao.findMatching(getDistinctIdCriteria(OnmsNotification.class,criteria)));\n    }","commit_id":"b1d02ddbfbea534d6fad9a31000f05937d8b689c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private OnmsCriteria getQueryFilters() {\r\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\r\n        OnmsCriteria criteria = new OnmsCriteria(OnmsMap.class);\r\n\r\n    \tsetLimitOffset(params, criteria, LIMIT);\r\n    \taddOrdering(params, criteria);\r\n    \taddFiltersToCriteria(params, criteria, OnmsMap.class);\r\n\r\n        return getDistinctIdCriteria(OnmsMap.class, criteria);\r\n    }","id":12670,"modified_method":"private OnmsCriteria getQueryFilters() {\r\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\r\n        OnmsCriteria criteria = new OnmsCriteria(OnmsMap.class);\r\n\r\n    \tsetLimitOffset(params, criteria, LIMIT);\r\n    \taddOrdering(params, criteria, false);\r\n    \taddFiltersToCriteria(params, criteria, OnmsMap.class);\r\n\r\n        return getDistinctIdCriteria(OnmsMap.class, criteria);\r\n    }","commit_id":"b1d02ddbfbea534d6fad9a31000f05937d8b689c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Does ordering processing; pulled out to a separate method for visual clarity.  Configures ordering as defined in addFiltersToCriteria\n\t * @param params - set of values to look in for the \"order\" and \"orderBy\" values\n\t * @param criteria - the criteria object which will be updated with ordering configuration\n\t */\n\tprotected void addOrdering(MultivaluedMap<java.lang.String, java.lang.String> params, OnmsCriteria criteria) {\n\t    if(params.containsKey(\"orderBy\")) {\n\t\t\tString orderBy=params.getFirst(\"orderBy\");\n\t\t\tparams.remove(\"orderBy\");\n\t\t\tboolean orderAsc=true;\n\t\t\tif(params.containsKey(\"order\")) {\n\t\t\t\tif(\"desc\".equalsIgnoreCase(params.getFirst(\"order\"))) {\n\t\t\t\t\torderAsc=false;\n\t\t\t\t}\n\t\t\t\tparams.remove(\"order\");\n\t\t\t}\n\t\t\tOrder o;\n\t\t\tif(orderAsc) {\n\t\t\t    o = Order.asc(orderBy);\n\t\t\t} else {\n\t\t\t\to = Order.desc(orderBy);\n\t\t\t}\n\t\t\t// criteria.addOrder(o);\n\t\t\tm_ordering.add(o);\n\t\t}\n\t}","id":12671,"modified_method":"/**\n\t * Does ordering processing; pulled out to a separate method for visual clarity.  Configures ordering as defined in addFiltersToCriteria\n\t * @param params - set of values to look in for the \"order\" and \"orderBy\" values\n\t * @param criteria - the criteria object which will be updated with ordering configuration\n\t */\n    protected void addOrdering(MultivaluedMap<java.lang.String, java.lang.String> params, OnmsCriteria criteria) {\n        addOrdering(params, criteria, true);\n    }","commit_id":"b1d02ddbfbea534d6fad9a31000f05937d8b689c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n    @Transactional\n    public OnmsOutageCollection getOutages() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsOutage.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsOutage.class);\n\n    \treturn new OnmsOutageCollection(m_outageDao.findMatching(getDistinctIdCriteria(OnmsOutage.class, criteria)));\n    }","id":12672,"modified_method":"@GET\n    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n    @Transactional\n    public OnmsOutageCollection getOutages() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsOutage.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsOutage.class);\n\n    \treturn new OnmsOutageCollection(m_outageDao.findMatching(getDistinctIdCriteria(OnmsOutage.class, criteria)));\n    }","commit_id":"b1d02ddbfbea534d6fad9a31000f05937d8b689c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAcknowledgmentCollection getAcks() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAcknowledgment.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsAcknowledgment.class);\n\n        return new OnmsAcknowledgmentCollection(m_ackDao.findMatching(getDistinctIdCriteria(OnmsAcknowledgment.class, criteria)));\n    }","id":12673,"modified_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAcknowledgmentCollection getAcks() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAcknowledgment.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsAcknowledgment.class);\n\n        return new OnmsAcknowledgmentCollection(m_ackDao.findMatching(getDistinctIdCriteria(OnmsAcknowledgment.class, criteria)));\n    }","commit_id":"9d5755d9f8160665380b2b7730b19da4704442c4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAlarmCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAlarm.class);\n\n    \tsetLimitOffset(params, criteria);\n        addOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsAlarm.class);\n\n        return new OnmsAlarmCollection(m_alarmDao.findMatching(getDistinctIdCriteria(OnmsAlarm.class, criteria)));\n    }","id":12674,"modified_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsAlarmCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsAlarm.class);\n\n    \tsetLimitOffset(params, criteria);\n        addOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsAlarm.class);\n    \tcriteria.setFetchMode(\"firstEvent\", FetchMode.JOIN);\n        criteria.setFetchMode(\"lastEvent\", FetchMode.JOIN);\n        return new OnmsAlarmCollection(m_alarmDao.findMatching(getDistinctIdCriteria(OnmsAlarm.class, criteria)));\n    }","commit_id":"9d5755d9f8160665380b2b7730b19da4704442c4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private OnmsCriteria getQueryFilters() {\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\n        OnmsCriteria criteria = new OnmsCriteria(OnmsNode.class);\n\n    \tsetLimitOffset(params, criteria, LIMIT);\n        addOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsNode.class);\n\n    \tcriteria.createAlias(\"snmpInterfaces\", \"snmpInterface\", CriteriaSpecification.LEFT_JOIN);\n        criteria.createAlias(\"ipInterfaces\", \"ipInterface\", CriteriaSpecification.LEFT_JOIN);\n        return getDistinctIdCriteria(OnmsNode.class, criteria);\n    }","id":12675,"modified_method":"private OnmsCriteria getQueryFilters() {\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\n        OnmsCriteria criteria = new OnmsCriteria(OnmsNode.class);\n\n    \tsetLimitOffset(params, criteria, LIMIT);\n        addOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsNode.class);\n\n    \tcriteria.createAlias(\"snmpInterfaces\", \"snmpInterface\", CriteriaSpecification.LEFT_JOIN);\n        criteria.createAlias(\"ipInterfaces\", \"ipInterface\", CriteriaSpecification.LEFT_JOIN);\n        return getDistinctIdCriteria(OnmsNode.class, criteria);\n    }","commit_id":"9d5755d9f8160665380b2b7730b19da4704442c4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsNotificationCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsNotification.class);\n\n    \tsetLimitOffset(params, criteria, 10);\n    \taddOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsNotification.class);\n\n        return new OnmsNotificationCollection(m_notifDao.findMatching(getDistinctIdCriteria(OnmsNotification.class,criteria)));\n    }","id":12676,"modified_method":"@GET\n    @Produces(\"text/xml\")\n    @Transactional\n    public OnmsNotificationCollection getNotifications() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsNotification.class);\n\n    \tsetLimitOffset(params, criteria, 10);\n    \taddOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsNotification.class);\n\n        return new OnmsNotificationCollection(m_notifDao.findMatching(getDistinctIdCriteria(OnmsNotification.class,criteria)));\n    }","commit_id":"9d5755d9f8160665380b2b7730b19da4704442c4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private OnmsCriteria getQueryFilters() {\r\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\r\n        OnmsCriteria criteria = new OnmsCriteria(OnmsMap.class);\r\n\r\n    \tsetLimitOffset(params, criteria, LIMIT);\r\n    \taddOrdering(params, criteria);\r\n    \taddFiltersToCriteria(params, criteria, OnmsMap.class);\r\n\r\n        return getDistinctIdCriteria(OnmsMap.class, criteria);\r\n    }","id":12677,"modified_method":"private OnmsCriteria getQueryFilters() {\r\n        MultivaluedMap<String,String> params = m_uriInfo.getQueryParameters();\r\n        OnmsCriteria criteria = new OnmsCriteria(OnmsMap.class);\r\n\r\n    \tsetLimitOffset(params, criteria, LIMIT);\r\n    \taddOrdering(params, criteria, false);\r\n    \taddFiltersToCriteria(params, criteria, OnmsMap.class);\r\n\r\n        return getDistinctIdCriteria(OnmsMap.class, criteria);\r\n    }","commit_id":"9d5755d9f8160665380b2b7730b19da4704442c4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n\t * Does ordering processing; pulled out to a separate method for visual clarity.  Configures ordering as defined in addFiltersToCriteria\n\t * @param params - set of values to look in for the \"order\" and \"orderBy\" values\n\t * @param criteria - the criteria object which will be updated with ordering configuration\n\t */\n\tprotected void addOrdering(MultivaluedMap<java.lang.String, java.lang.String> params, OnmsCriteria criteria) {\n\t    if(params.containsKey(\"orderBy\")) {\n\t\t\tString orderBy=params.getFirst(\"orderBy\");\n\t\t\tparams.remove(\"orderBy\");\n\t\t\tboolean orderAsc=true;\n\t\t\tif(params.containsKey(\"order\")) {\n\t\t\t\tif(\"desc\".equalsIgnoreCase(params.getFirst(\"order\"))) {\n\t\t\t\t\torderAsc=false;\n\t\t\t\t}\n\t\t\t\tparams.remove(\"order\");\n\t\t\t}\n\t\t\tOrder o;\n\t\t\tif(orderAsc) {\n\t\t\t    o = Order.asc(orderBy);\n\t\t\t} else {\n\t\t\t\to = Order.desc(orderBy);\n\t\t\t}\n\t\t\t// criteria.addOrder(o);\n\t\t\tm_ordering.add(o);\n\t\t}\n\t}","id":12678,"modified_method":"/**\n\t * Does ordering processing; pulled out to a separate method for visual clarity.  Configures ordering as defined in addFiltersToCriteria\n\t * @param params - set of values to look in for the \"order\" and \"orderBy\" values\n\t * @param criteria - the criteria object which will be updated with ordering configuration\n\t */\n    protected void addOrdering(MultivaluedMap<java.lang.String, java.lang.String> params, OnmsCriteria criteria) {\n        addOrdering(params, criteria, true);\n    }","commit_id":"9d5755d9f8160665380b2b7730b19da4704442c4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@GET\n    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n    @Transactional\n    public OnmsOutageCollection getOutages() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsOutage.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria);\n    \taddFiltersToCriteria(params, criteria, OnmsOutage.class);\n\n    \treturn new OnmsOutageCollection(m_outageDao.findMatching(getDistinctIdCriteria(OnmsOutage.class, criteria)));\n    }","id":12679,"modified_method":"@GET\n    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n    @Transactional\n    public OnmsOutageCollection getOutages() {\n    \tMultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();\n\t\tOnmsCriteria criteria=new OnmsCriteria(OnmsOutage.class);\n\n    \tsetLimitOffset(params, criteria);\n    \taddOrdering(params, criteria, false);\n    \taddFiltersToCriteria(params, criteria, OnmsOutage.class);\n\n    \treturn new OnmsOutageCollection(m_outageDao.findMatching(getDistinctIdCriteria(OnmsOutage.class, criteria)));\n    }","commit_id":"9d5755d9f8160665380b2b7730b19da4704442c4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void isWhiteboardEnabled(String userid) {\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\tmessage.put(\"enabled\", roomManager.getRoom(getMeetingId()).isWhiteboardEnabled());\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.DIRECT, userid, \"WhiteboardIsWhiteboardEnabledReply\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12680,"modified_method":"public void isWhiteboardEnabled(String userid) {\r\n\t\tString meetingID = getMeetingId();\r\n\t\tif (rooms.containsKey(meetingID)) {\r\n\t\t\tWhiteboardRoom room = rooms.get(meetingID);\r\n\t\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\t\tmessage.put(\"enabled\", room.isWhiteboardEnabled());\r\n\t\t\tClientMessage m = new ClientMessage(ClientMessage.DIRECT, userid, \"WhiteboardIsWhiteboardEnabledReply\", message);\r\n\t\t\tconnInvokerService.sendMessage(m);\r\n\t\t}\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void setActivePresentation(String presentationID, int numPages) {\r\n\t\tWhiteboardRoom room = roomManager.getRoom(getMeetingId());\r\n\t\tif (room.presentationExists(presentationID)) {\r\n\t\t\troom.setActivePresentation(presentationID);\r\n\t\t} else {\r\n\t\t\troom.addPresentation(presentationID, numPages);\r\n\t\t}\r\n\t\t\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\tmessage.put(\"presentationID\", presentationID);\r\n\t\tmessage.put(\"numberOfPages\", numPages);\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getMeetingId(), \"WhiteboardChangePresentationCommand\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12681,"modified_method":"public void setActivePresentation(String presentationID, int numPages) {\r\n\t\tString meetingID = getMeetingId();\r\n\r\n\t\tif (rooms.containsKey(meetingID)) {\t\t\r\n\t\t\tWhiteboardRoom room = rooms.get(meetingID);\r\n\t\t\tif (room.presentationExists(presentationID)) {\r\n\t\t\t\troom.setActivePresentation(presentationID);\r\n\t\t\t} else {\r\n\t\t\t\troom.addPresentation(presentationID, numPages);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\t\tmessage.put(\"presentationID\", presentationID);\r\n\t\t\tmessage.put(\"numberOfPages\", numPages);\r\n\t\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getMeetingId(), \"WhiteboardChangePresentationCommand\", message);\r\n\t\t\tconnInvokerService.sendMessage(m);\r\n\t\t}\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"@Override\r\n\tpublic void appStop(IScope scope) {\r\n\t\tlog.debug(\"***** \" + APP + \" [ \" + \" appStop [ \" + scope.getName() + \"] *********\");\r\n\t\troomManager.removeRoom(getMeetingId());\r\n\t}","id":12682,"modified_method":"@Override\r\n\tpublic void appStop(IScope scope) {\r\n\t\tlog.debug(\"***** \" + APP + \" [ \" + \" appStop [ \" + scope.getName() + \"] *********\");\r\n\t\trooms.clear();\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"@Override\r\n\tpublic boolean appStart(IScope scope) {\r\n\t\tlog.debug(\"***** \" + APP + \" [ \" + \" appStart [ \" + scope.getName() + \"] *********\");\r\n\t\treturn true;\r\n\t}","id":12683,"modified_method":"@Override\r\n\tpublic boolean appStart(IScope scope) {\r\n\t\trooms = new ConcurrentHashMap<String, WhiteboardRoom>();\r\n\t\tlog.debug(\"***** \" + APP + \" [ \" + \" appStart [ \" + scope.getName() + \"] *********\");\r\n\t\treturn true;\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"@Override\r\n\tpublic boolean roomStart(IScope scope) {\r\n\t\troomManager.addRoom(scope.getName());\r\n    \treturn true;\r\n\t}","id":12684,"modified_method":"@Override\r\n\tpublic boolean roomStart(IScope scope) {\r\n\t\tString meetingID = scope.getName();\r\n\t\t// Set the recording to false here. We don't have the information yet as\r\n\t\t// the recorded info is passed from the client on the connect.\r\n\t\tWhiteboardRoom newRoom = new WhiteboardRoom(meetingID, false);\r\n\t\trooms.put(meetingID, newRoom);\r\n\r\n    return true;\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"@Override\r\n\tpublic void roomStop(IScope scope) {\r\n\t\troomManager.removeRoom(scope.getName());\r\n\t}","id":12685,"modified_method":"@Override\r\n\tpublic void roomStop(IScope scope) {\r\n\t\trooms.remove(scope.getName());\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void changePage(int pageNum) {\r\n\t\tPresentation pres = roomManager.getRoom(getMeetingId()).getActivePresentation();\r\n\t\tpres.setActivePage(pageNum);\r\n\t\t\t\t\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\tmessage.put(\"pageNum\", pageNum);\r\n\t\tmessage.put(\"numAnnotations\", pres.getActivePage().getNumShapesOnPage());\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getMeetingId(), \"WhiteboardChangePageCommand\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12686,"modified_method":"public void changePage(int pageNum) {\r\n\t\tString meetingID = getMeetingId();\r\n\t\tif (rooms.containsKey(meetingID)) {\r\n\t\t\tWhiteboardRoom room = rooms.get(meetingID);\r\n\t\t\r\n\t\t\tPresentation pres = room.getActivePresentation();\r\n\t\t\tpres.setActivePage(pageNum);\r\n\t\t\t\r\n\t\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\t\tmessage.put(\"pageNum\", pageNum);\r\n\t\t\tmessage.put(\"numAnnotations\", pres.getActivePage().getNumShapesOnPage());\r\n\t\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, meetingID, \"WhiteboardChangePageCommand\", message);\r\n\t\t\tconnInvokerService.sendMessage(m);\r\n\r\n\t\t}\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void clear() {\r\n\t\troomManager.getRoom(getMeetingId()).clear();\r\n\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getMeetingId(), \"WhiteboardClearCommand\", message);\r\n\t\tconnInvokerService.sendMessage(m);\t\t\r\n\t}","id":12687,"modified_method":"public void clear() {\r\n\t\tString meetingID = getMeetingId();\r\n\t\tif (rooms.containsKey(meetingID)) {\r\n\t\t\tWhiteboardRoom room = rooms.get(meetingID);\r\n\t\t\troom.clear();\r\n\r\n\t\t\tif (room.isRecorded()) {\r\n\t\t\t\trecordingService.clearPage(meetingID, room.getPresentationID(), room.getPageNumber());\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, meetingID, \"WhiteboardClearCommand\", message);\r\n\t\t\tconnInvokerService.sendMessage(m);\t\t\r\n\t\t\r\n\t\t}\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void sendAnnotation(Annotation annotation) {\t\r\n\t\tString status = annotation.getStatus();\r\n\r\n\t\tif (\"textCreated\".equals(status)) {\r\n\t\t\troomManager.getRoom(getMeetingId()).addAnnotation(annotation);\r\n\t\t} else if (PENCIL_TYPE.equals(annotation.getType()) && \"DRAW_START\".equals(status)) {\r\n\t\t\troomManager.getRoom(getMeetingId()).addAnnotation(annotation);\r\n\t\t} else if (\"DRAW_END\".equals(status) && (RECTANGLE_TYPE.equals(annotation.getType()) \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t|| ELLIPSE_TYPE.equals(annotation.getType())\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t|| TRIANGLE_TYPE.equals(annotation.getType())\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t|| LINE_TYPE.equals(annotation.getType()))) {\t\t\t\t\r\n\t\t\troomManager.getRoom(getMeetingId()).addAnnotation(annotation);\r\n\t\t} else {\r\n\t\t\tif (\"text\".equals(annotation.getType())) {\r\n\t\t\t\troomManager.getRoom(getMeetingId()).modifyText(annotation);\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getMeetingId(), \"WhiteboardNewAnnotationCommand\", annotation.getAnnotation());\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12688,"modified_method":"public void sendAnnotation(Annotation annotation) {\t\r\n\t\tString meetingID = getMeetingId();\r\n\t\tif (rooms.containsKey(meetingID)) {\r\n\t\t\tWhiteboardRoom room = rooms.get(meetingID);\r\n\t\t\r\n\t\t\tString status = annotation.getStatus();\r\n\r\n\t\t\tif (\"textCreated\".equals(status)) {\r\n\t\t\t\troom.addAnnotation(annotation);\r\n\t\t\t\tif (room.isRecorded()) {\r\n\t\t\t\t\trecordingService.addAnnotation(meetingID, annotation, room.getPresentationID(), room.getPageNumber());\r\n\t\t\t\t}\r\n\t\t\t} else if (PENCIL_TYPE.equals(annotation.getType()) && \"DRAW_START\".equals(status)) {\r\n\t\t\t\troom.addAnnotation(annotation);\r\n\t\t\t\tif (room.isRecorded()) {\r\n\t\t\t\t\trecordingService.addAnnotation(meetingID, annotation, room.getPresentationID(), room.getPageNumber());\r\n\t\t\t\t}\r\n\t\t\t} else if (\"DRAW_END\".equals(status) && (RECTANGLE_TYPE.equals(annotation.getType()) \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t|| ELLIPSE_TYPE.equals(annotation.getType())\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t|| TRIANGLE_TYPE.equals(annotation.getType())\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t|| LINE_TYPE.equals(annotation.getType()))) {\t\t\t\t\r\n\t\t\t\troom.addAnnotation(annotation);\r\n\t\t\t\tif (room.isRecorded()) {\r\n\t\t\t\t\trecordingService.addAnnotation(meetingID, annotation, room.getPresentationID(), room.getPageNumber());\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (\"text\".equals(annotation.getType())) {\r\n\t\t\t\t\troom.modifyText(annotation);\t\r\n\t\t\t\t\tif (room.isRecorded()) {\r\n\t\t\t\t\t\trecordingService.modifyText(meetingID, annotation, room.getPresentationID(), room.getPageNumber());\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, meetingID, \"WhiteboardNewAnnotationCommand\", annotation.getAnnotation());\r\n\t\t\tconnInvokerService.sendMessage(m);\r\n\r\n\t\t}\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void sendAnnotationHistory(String userid, String presentationID, Integer pageNumber) {\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\tList<Annotation> annotations = roomManager.getRoom(getMeetingId()).getAnnotations(presentationID, pageNumber);\r\n\t\tmessage.put(\"count\", new Integer(annotations.size()));\r\n\t\t\r\n\t\t/** extract annotation into a Map */\r\n\t\tList<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\r\n\t\tfor (Annotation v : annotations) {\r\n\t\t\ta.add(v.getAnnotation());\r\n\t\t}\r\n\t\t\r\n\t\tmessage.put(\"presentationID\", presentationID);\r\n\t\tmessage.put(\"pageNumber\", pageNumber);\r\n\t\tmessage.put(\"annotations\", a);\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.DIRECT, userid, \"WhiteboardRequestAnnotationHistoryReply\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12689,"modified_method":"public void sendAnnotationHistory(String userid, String presentationID, Integer pageNumber) {\r\n\t\tString meetingID = getMeetingId();\r\n\t\tif (rooms.containsKey(meetingID)) {\r\n\t\t\tWhiteboardRoom room = rooms.get(meetingID);\r\n\r\n\t\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\t\tList<Annotation> annotations = room.getAnnotations(presentationID, pageNumber);\r\n\t\t\tmessage.put(\"count\", new Integer(annotations.size()));\r\n\t\t\t\r\n\t\t\t/** extract annotation into a Map */\r\n\t\t\tList<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\r\n\t\t\tfor (Annotation v : annotations) {\r\n\t\t\t\ta.add(v.getAnnotation());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmessage.put(\"presentationID\", presentationID);\r\n\t\t\tmessage.put(\"pageNumber\", pageNumber);\r\n\t\t\tmessage.put(\"annotations\", a);\r\n\t\t\tClientMessage m = new ClientMessage(ClientMessage.DIRECT, userid, \"WhiteboardRequestAnnotationHistoryReply\", message);\r\n\t\t\tconnInvokerService.sendMessage(m);\r\n\r\n\t\t}\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void enableWhiteboard(boolean enabled) {\r\n\t\troomManager.getRoom(getMeetingId()).setWhiteboardEnabled(enabled);\r\n\t\t\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\tmessage.put(\"enabled\", roomManager.getRoom(getMeetingId()).isWhiteboardEnabled());\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getMeetingId(), \"WhiteboardEnableWhiteboardCommand\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12690,"modified_method":"public void enableWhiteboard(boolean enabled) {\r\n\t\tString meetingID = getMeetingId();\r\n\t\tif (rooms.containsKey(meetingID)) {\r\n\t\t\tWhiteboardRoom room = rooms.get(meetingID);\r\n\t\t\troom.setWhiteboardEnabled(enabled);\r\n\t\t\r\n\t\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\t\tmessage.put(\"enabled\", room.isWhiteboardEnabled());\r\n\t\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, meetingID, \"WhiteboardEnableWhiteboardCommand\", message);\r\n\t\t\tconnInvokerService.sendMessage(m);\r\n\t\t}\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"@Override\r\n\tpublic boolean roomConnect(IConnection connection, Object[] params) {\r\n\t\tlog.debug(\"WHITEBOARD - getting record parameters\");\r\n\t\tif (getBbbSession().getRecord()){\r\n\t\t\tlog.debug(\"WHITEBOARD - recording : true\");\r\n\t\t\tWhiteboardEventRecorder recorder = new WhiteboardEventRecorder(getMeetingId(), recorderApplication);\r\n\t\t\troomManager.getRoom(getMeetingId()).addRoomListener(recorder);\r\n\t\t\tlog.debug(\"event session is \" + getMeetingId());\r\n\t\t}\r\n    \treturn true;\r\n\t}","id":12691,"modified_method":"@Override\r\n\tpublic boolean roomConnect(IConnection connection, Object[] params) {\r\n\t\tboolean record = getBbbSession().getRecord();\r\n\t\tif (record) {\r\n\t\t\tString meetingID = connection.getScope().getName();\r\n\t\t\tif (rooms.containsKey(meetingID)) {\r\n\t\t\t\tWhiteboardRoom wbMeeting = rooms.get(meetingID);\r\n\t\t\t\twbMeeting.record(record);\r\n\t\t\t}\r\n\t\t}\r\n    \treturn true;\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void undo() {\r\n\t\troomManager.getRoom(getMeetingId()).undo();\r\n\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getMeetingId(), \"WhiteboardUndoCommand\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12692,"modified_method":"public void undo() {\r\n\t\tString meetingID = getMeetingId();\r\n\t\tif (rooms.containsKey(meetingID)) {\r\n\t\t\tWhiteboardRoom room = rooms.get(meetingID);\r\n\t\t\troom.undo();\r\n\r\n\t\t\tif (room.isRecorded()) {\r\n\t\t\t\trecordingService.undoWBGraphic(meetingID, room.getPresentationID(), room.getPageNumber());\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, meetingID, \"WhiteboardUndoCommand\", message);\r\n\t\t\tconnInvokerService.sendMessage(m);\r\n\t\t}\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public WhiteboardRoom(String id){\r\n\t\tthis.id = id;\r\n\t\tthis.presentations = new ArrayList<Presentation>();\r\n\t\tlisteners = new ConcurrentHashMap<String, IWhiteboardRoomListener>();\r\n\t\tuidGen = new UIDGenerator();\r\n\t}","id":12693,"modified_method":"public WhiteboardRoom(String id, boolean record){\r\n\t\tthis.record = record;\r\n\t\tthis.id = id;\r\n\t\tthis.presentations = new ArrayList<Presentation>();\r\n\t\tlisteners = new ConcurrentHashMap<String, IWhiteboardRoomListener>();\r\n\t\tuidGen = new UIDGenerator();\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void toggleGrid() {\r\n\t\tlog.info(\"WhiteboardApplication - Toggling grid mode\");\r\n\t\tapplication.toggleGrid();\r\n\t}","id":12694,"modified_method":"public void toggleGrid() {\r\n\t\tlog.info(\"WhiteboardApplication - Toggling grid mode\");\r\n\t\t//application.toggleGrid();\r\n\t}","commit_id":"f7baed395a74779faa153c8984c6f3b9ad7b00e6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void doUpdateSiteVisitsObjects(Session session, Collection<SiteVisits> objects, Map<UniqueVisitsKey, Integer> map) {\n\t\tif(objects == null) return;\n\t\tIterator<SiteVisits> i = objects.iterator();\n\t\twhile(i.hasNext()){\n\t\t\tSiteVisits eUpdate = i.next();\n\t\t\tCriteria c = session.createCriteria(SiteVisitsImpl.class);\n\t\t\tc.add(Expression.eq(\"siteId\", eUpdate.getSiteId()));\n\t\t\tc.add(Expression.eq(\"date\", eUpdate.getDate()));\n\t\t\tSiteVisits eExisting = null;\n\t\t\ttry{\n\t\t\t\teExisting = (SiteVisits) c.uniqueResult();\n\t\t\t}catch(Exception ex){\n\t\t\t\tLOG.debug(\"More than 1 result when unique result expected.\", ex);\n\t\t\t\teExisting = (SiteVisits) c.list().get(0);\n\t\t\t}\n\t\t\tif(eExisting == null){\n\t\t\t\teExisting = eUpdate;\n\t\t\t}else{\n\t\t\t\teExisting.setTotalVisits(eExisting.getTotalVisits() + eUpdate.getTotalVisits());\n\t\t\t}\n\t\t\tInteger mapUV = map.get(new UniqueVisitsKey(eExisting.getSiteId(), eExisting.getDate()));\n\t\t\teExisting.setTotalUnique(mapUV == null? 1 : mapUV.longValue());\n\n\t\t\tsession.saveOrUpdate(eExisting);\n\t\t}\n\t}","id":12695,"modified_method":"private void doUpdateSiteVisitsObjects(Session session, Collection<SiteVisits> objects, Map<UniqueVisitsKey, Integer> map) {\n\t\tif(objects == null) return;\n\t\tIterator<SiteVisits> i = objects.iterator();\n\t\twhile(i.hasNext()){\n\t\t\tSiteVisits eUpdate = i.next();\n\t\t\tCriteria c = session.createCriteria(SiteVisitsImpl.class);\n\t\t\tc.add(Expression.eq(\"siteId\", eUpdate.getSiteId()));\n\t\t\tc.add(Expression.eq(\"date\", eUpdate.getDate()));\n\t\t\tSiteVisits eExisting = null;\n\t\t\ttry{\n\t\t\t\teExisting = (SiteVisits) c.uniqueResult();\n\t\t\t}catch(Exception ex){\n\t\t\t\tLOG.debug(\"More than 1 result when unique result expected.\", ex);\n\t\t\t\teExisting = (SiteVisits) c.list().get(0);\n\t\t\t}\n\t\t\tif(eExisting == null){\n\t\t\t\teExisting = eUpdate;\n\t\t\t}else{\n\t\t\t\teExisting.setTotalVisits(eExisting.getTotalVisits() + eUpdate.getTotalVisits());\n\t\t\t}\n\t\t\tInteger mapUV = map.get(new UniqueVisitsKey(eExisting.getSiteId(), eExisting.getDate()));\n\t\t\teExisting.setTotalUnique(mapUV == null? 1 : mapUV.longValue());\n\n\t\t\tString eExistingSiteId = eExisting.getSiteId();\n\t\t\tif ((eExistingSiteId!=null) && (eExistingSiteId.trim().length()>0))\n\t\t\t\t\tsession.saveOrUpdate(eExisting);\n\t\t}\n\t}","commit_id":"e71cd72bcae33ebf7f6ed13eb455fd52e66187e7","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private void doUpdateEventStatObjects(Session session, Collection<EventStat> objects) {\n\t\tif(objects == null) return;\n\t\tIterator<EventStat> i = objects.iterator();\n\t\twhile(i.hasNext()){\n\t\t\tEventStat eUpdate = i.next();\n\t\t\tCriteria c = session.createCriteria(EventStatImpl.class);\n\t\t\tc.add(Expression.eq(\"siteId\", eUpdate.getSiteId()));\n\t\t\tc.add(Expression.eq(\"eventId\", eUpdate.getEventId()));\n\t\t\tc.add(Expression.eq(\"userId\", eUpdate.getUserId()));\n\t\t\tc.add(Expression.eq(\"date\", eUpdate.getDate()));\n\t\t\tEventStat eExisting = null;\n\t\t\ttry{\n\t\t\t\teExisting = (EventStat) c.uniqueResult();\n\t\t\t}catch(Exception ex){\n\t\t\t\tLOG.debug(\"More than 1 result when unique result expected.\", ex);\n\t\t\t\teExisting = (EventStat) c.list().get(0);\n\t\t\t}\n\t\t\tif(eExisting == null) \n\t\t\t\teExisting = eUpdate;\n\t\t\telse\n\t\t\t\teExisting.setCount(eExisting.getCount() + eUpdate.getCount());\n\n\t\t\tsession.saveOrUpdate(eExisting);\n\t\t}\n\t}","id":12696,"modified_method":"private void doUpdateEventStatObjects(Session session, Collection<EventStat> objects) {\n\t\tif(objects == null) return;\n\t\tIterator<EventStat> i = objects.iterator();\n\t\twhile(i.hasNext()){\n\t\t\tEventStat eUpdate = i.next();\n\t\t\tCriteria c = session.createCriteria(EventStatImpl.class);\n\t\t\tc.add(Expression.eq(\"siteId\", eUpdate.getSiteId()));\n\t\t\tc.add(Expression.eq(\"eventId\", eUpdate.getEventId()));\n\t\t\tc.add(Expression.eq(\"userId\", eUpdate.getUserId()));\n\t\t\tc.add(Expression.eq(\"date\", eUpdate.getDate()));\n\t\t\tEventStat eExisting = null;\n\t\t\ttry{\n\t\t\t\teExisting = (EventStat) c.uniqueResult();\n\t\t\t}catch(Exception ex){\n\t\t\t\tLOG.debug(\"More than 1 result when unique result expected.\", ex);\n\t\t\t\teExisting = (EventStat) c.list().get(0);\n\t\t\t}\n\t\t\tif(eExisting == null) \n\t\t\t\teExisting = eUpdate;\n\t\t\telse\n\t\t\t\teExisting.setCount(eExisting.getCount() + eUpdate.getCount());\n\n\t\t\tString eExistingSiteId = eExisting.getSiteId();\n\t\t\tif ((eExistingSiteId!=null) && (eExistingSiteId.trim().length()>0))\n\t\t\t\t\tsession.saveOrUpdate(eExisting);\n\t\t}\n\t}","commit_id":"e71cd72bcae33ebf7f6ed13eb455fd52e66187e7","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private String parseSiteId(Event e){\n\t\tString eventId = e.getEvent();\n\t\tString eventRef = e.getResource();\n\t\t\n\t\ttry{\n\t\t\tif(eventId.equals(StatsManager.SITEVISIT_EVENTID)) {\n\t\t\t\t\n\t\t\t\t// presence (site visit) syntax (/presence/SITE_ID-presence)\n\t\t\t\tString[] parts = eventRef.split(\"/\");\n\t\t\t\tif(parts[2].endsWith(PRESENCE_SUFFIX))\n\t\t\t\t\treturn parts[2].substring(0, parts[2].length() - PRESENCE_SUFFIX_LENGTH);\n\t\t\t\telse\n\t\t\t\t\treturn null;\t\n\t\t\t\t\n\t\t\t}else {\n\n\t\t\t\t// use <eventParserTip>\n\t\t\t\tToolInfo toolInfo = eventIdToolMap.get(eventId);\n\t\t\t\tEventParserTip parserTip = toolInfo.getEventParserTip();\n\t\t\t\tif(parserTip != null && parserTip.getFor().equals(StatsManager.PARSERTIP_FOR_CONTEXTID)) {\n\t\t\t\t\tint index = Integer.parseInt(parserTip.getIndex());\n\t\t\t\t\treturn eventRef.split(parserTip.getSeparator())[index];\n\t\t\t\t\t\n\t\t\t\t}else {\n\t\t\t\t\t// try with most common syntax (/abc/cde/SITE_ID/...)\n\t\t\t\t\treturn eventRef.split(\"/\")[3];\n\t\t\t\t}\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tLOG.warn(\"Unable to parse contextId from event: \" + eventId + \" | \" + eventRef, ex);\n\t\t}\n\t\treturn null;\n\t}","id":12697,"modified_method":"private String parseSiteId(Event e){\n\t\tString eventId = e.getEvent();\n\t\tString eventRef = e.getResource();\n\t\t\n\t\ttry{\n\t\t\tif(eventId.equals(StatsManager.SITEVISIT_EVENTID)) {\n\t\t\t\t\n\t\t\t\t// presence (site visit) syntax (/presence/SITE_ID-presence)\n\t\t\t\tString[] parts = eventRef.split(\"/\");\n\t\t\t\tif(parts[2].endsWith(PRESENCE_SUFFIX))\n\t\t\t\t\treturn parts[2].substring(0, parts[2].length() - PRESENCE_SUFFIX_LENGTH);\n\t\t\t\telse\n\t\t\t\t\treturn null;\t\n\t\t\t\t\n\t\t\t}else {\n\n\t\t\t\t// use <eventParserTip>\n\t\t\t\tToolInfo toolInfo = eventIdToolMap.get(eventId);\n\t\t\t\tEventParserTip parserTip = toolInfo.getEventParserTip();\n\t\t\t\tif(parserTip != null && parserTip.getFor().equals(StatsManager.PARSERTIP_FOR_CONTEXTID)) {\n\t\t\t\t\tif (eventRef!=null){\n\t\t\t\t\t\tint index = Integer.parseInt(parserTip.getIndex());\n\t\t\t\t\t\treturn eventRef.split(parserTip.getSeparator())[index];\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}else {\n\t\t\t\t\t// try with most common syntax (/abc/cde/SITE_ID/...)\n\t\t\t\t\treturn eventRef.split(\"/\")[3];\n\t\t\t\t}\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tLOG.warn(\"Unable to parse contextId from event: \" + eventId + \" | \" + eventRef, ex);\n\t\t}\n\t\treturn null;\n\t}","commit_id":"e71cd72bcae33ebf7f6ed13eb455fd52e66187e7","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private void doUpdateSiteActivityObjects(Session session, Collection<SiteActivity> objects) {\n\t\tif(objects == null) return;\n\t\tIterator<SiteActivity> i = objects.iterator();\n\t\twhile(i.hasNext()){\n\t\t\tSiteActivity eUpdate = i.next();\n\t\t\tCriteria c = session.createCriteria(SiteActivityImpl.class);\n\t\t\tc.add(Expression.eq(\"siteId\", eUpdate.getSiteId()));\n\t\t\tc.add(Expression.eq(\"eventId\", eUpdate.getEventId()));\n\t\t\tc.add(Expression.eq(\"date\", eUpdate.getDate()));\n\t\t\tSiteActivity eExisting = null;\n\t\t\ttry{\n\t\t\t\teExisting = (SiteActivity) c.uniqueResult();\n\t\t\t}catch(Exception ex){\n\t\t\t\tLOG.debug(\"More than 1 result when unique result expected.\", ex);\n\t\t\t\teExisting = (SiteActivity) c.list().get(0);\n\t\t\t}\n\t\t\tif(eExisting == null) \n\t\t\t\teExisting = eUpdate;\n\t\t\telse\n\t\t\t\teExisting.setCount(eExisting.getCount() + eUpdate.getCount());\n\n\t\t\tsession.saveOrUpdate(eExisting);\n\t\t}\n\t}","id":12698,"modified_method":"private void doUpdateSiteActivityObjects(Session session, Collection<SiteActivity> objects) {\n\t\tif(objects == null) return;\n\t\tIterator<SiteActivity> i = objects.iterator();\n\t\twhile(i.hasNext()){\n\t\t\tSiteActivity eUpdate = i.next();\n\t\t\tCriteria c = session.createCriteria(SiteActivityImpl.class);\n\t\t\tc.add(Expression.eq(\"siteId\", eUpdate.getSiteId()));\n\t\t\tc.add(Expression.eq(\"eventId\", eUpdate.getEventId()));\n\t\t\tc.add(Expression.eq(\"date\", eUpdate.getDate()));\n\t\t\tSiteActivity eExisting = null;\n\t\t\ttry{\n\t\t\t\teExisting = (SiteActivity) c.uniqueResult();\n\t\t\t}catch(Exception ex){\n\t\t\t\tLOG.debug(\"More than 1 result when unique result expected.\", ex);\n\t\t\t\teExisting = (SiteActivity) c.list().get(0);\n\t\t\t}\n\t\t\tif(eExisting == null) \n\t\t\t\teExisting = eUpdate;\n\t\t\telse\n\t\t\t\teExisting.setCount(eExisting.getCount() + eUpdate.getCount());\n\n\t\t\tString eExistingSiteId = eExisting.getSiteId();\n\t\t\tif ((eExistingSiteId!=null) && (eExistingSiteId.trim().length()>0))\n\t\t\t\t\tsession.saveOrUpdate(eExisting);\n\t\t}\n\t}","commit_id":"e71cd72bcae33ebf7f6ed13eb455fd52e66187e7","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private void doUpdateResourceStatObjects(Session session, Collection<ResourceStat> objects) {\n\t\tif(objects == null) return;\n\t\tIterator<ResourceStat> i = objects.iterator();\n\t\twhile(i.hasNext()){\n\t\t\tResourceStat eUpdate = i.next();\n\t\t\tCriteria c = session.createCriteria(ResourceStatImpl.class);\n\t\t\tc.add(Expression.eq(\"siteId\", eUpdate.getSiteId()));\n\t\t\tc.add(Expression.eq(\"resourceRef\", eUpdate.getResourceRef()));\n\t\t\tc.add(Expression.eq(\"resourceAction\", eUpdate.getResourceAction()));\n\t\t\tc.add(Expression.eq(\"userId\", eUpdate.getUserId()));\n\t\t\tc.add(Expression.eq(\"date\", eUpdate.getDate()));\n\t\t\tResourceStat eExisting = null;\n\t\t\ttry{\n\t\t\t\teExisting = (ResourceStat) c.uniqueResult();\n\t\t\t}catch(Exception ex){\n\t\t\t\tLOG.debug(\"More than 1 result when unique result expected.\", ex);\n\t\t\t\teExisting = (ResourceStat) c.list().get(0);\n\t\t\t}\n\t\t\tif(eExisting == null) \n\t\t\t\teExisting = eUpdate;\n\t\t\telse\n\t\t\t\teExisting.setCount(eExisting.getCount() + eUpdate.getCount());\n\n\t\t\tsession.saveOrUpdate(eExisting);\n\t\t}\n\t}","id":12699,"modified_method":"private void doUpdateResourceStatObjects(Session session, Collection<ResourceStat> objects) {\n\t\tif(objects == null) return;\n\t\tIterator<ResourceStat> i = objects.iterator();\n\t\twhile(i.hasNext()){\n\t\t\tResourceStat eUpdate = i.next();\n\t\t\tCriteria c = session.createCriteria(ResourceStatImpl.class);\n\t\t\tc.add(Expression.eq(\"siteId\", eUpdate.getSiteId()));\n\t\t\tc.add(Expression.eq(\"resourceRef\", eUpdate.getResourceRef()));\n\t\t\tc.add(Expression.eq(\"resourceAction\", eUpdate.getResourceAction()));\n\t\t\tc.add(Expression.eq(\"userId\", eUpdate.getUserId()));\n\t\t\tc.add(Expression.eq(\"date\", eUpdate.getDate()));\n\t\t\tResourceStat eExisting = null;\n\t\t\ttry{\n\t\t\t\teExisting = (ResourceStat) c.uniqueResult();\n\t\t\t}catch(Exception ex){\n\t\t\t\tLOG.debug(\"More than 1 result when unique result expected.\", ex);\n\t\t\t\teExisting = (ResourceStat) c.list().get(0);\n\t\t\t}\n\t\t\tif(eExisting == null) \n\t\t\t\teExisting = eUpdate;\n\t\t\telse\n\t\t\t\teExisting.setCount(eExisting.getCount() + eUpdate.getCount());\n\n\t\t\tString eExistingSiteId = eExisting.getSiteId();\n\t\t\tif ((eExistingSiteId!=null) && (eExistingSiteId.trim().length()>0))\n\t\t\t\t\tsession.saveOrUpdate(eExisting);\n\t\t}\n\t}","commit_id":"e71cd72bcae33ebf7f6ed13eb455fd52e66187e7","url":"https://github.com/sakaiproject/sakai"},{"original_method":"static void registerTransformers200(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PATH_DATASOURCE);\n        builder.getAttributeBuilder()\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(new ModelNode(false)), CONNECTABLE)\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, false, new ModelNode(true)), STATISTICS_ENABLED)\n                .addRejectCheck(new RejectAttributeChecker.DefaultRejectAttributeChecker() {\n\n                    @Override\n                    public String getRejectionLogMessage(Map<String, ModelNode> attributes) {\n                        return ConnectorLogger.ROOT_LOGGER.rejectAttributesMustBeTrue(attributes.keySet());\n                    }\n\n                    @Override\n                    protected boolean rejectAttribute(PathAddress address, String attributeName, ModelNode attributeValue,\n                                                      TransformationContext context) {\n                        //This will not get called if it was discarded, so reject if it is undefined (default==false) or if defined and != 'true'\n                        return !attributeValue.isDefined() || !attributeValue.asString().equals(\"true\");\n                    }\n                }, STATISTICS_ENABLED)\n                .setDiscard(DiscardAttributeChecker.UNDEFINED, TRACKING)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, TRACKING)\n                .end()\n                //We're rejecting operations when statistics-enabled=false, so let it through in the enable/disable ops which do not use that attribute\n                .addOperationTransformationOverride(DATASOURCE_ENABLE.getName())\n                .end()\n                .addOperationTransformationOverride(DATASOURCE_DISABLE.getName())\n                .end();\n    }","id":12700,"modified_method":"static void registerTransformers200(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PATH_DATASOURCE);\n        builder.getAttributeBuilder()\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(new ModelNode(false)), CONNECTABLE)\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, false, new ModelNode(true)), STATISTICS_ENABLED)\n                .addRejectCheck(new RejectAttributeChecker.DefaultRejectAttributeChecker() {\n\n                    @Override\n                    public String getRejectionLogMessage(Map<String, ModelNode> attributes) {\n                        return ConnectorLogger.ROOT_LOGGER.rejectAttributesMustBeTrue(attributes.keySet());\n                    }\n\n                    @Override\n                    protected boolean rejectAttribute(PathAddress address, String attributeName, ModelNode attributeValue,\n                                                      TransformationContext context) {\n                        //This will not get called if it was discarded, so reject if it is undefined (default==false) or if defined and != 'true'\n                        return !attributeValue.isDefined() || !attributeValue.asString().equals(\"true\");\n                    }\n                }, STATISTICS_ENABLED)\n                .setDiscard(new DiscardAttributeChecker.DefaultDiscardAttributeChecker() {\n                    @Override\n                    protected boolean isValueDiscardable(PathAddress address, String attributeName, ModelNode attributeValue, TransformationContext context) {\n                        return attributeValue.equals(new ModelNode(false));\n                    }\n                }, TRACKING)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, TRACKING).end()\n                //We're rejecting operations when statistics-enabled=false, so let it through in the enable/disable ops which do not use that attribute\n                .addOperationTransformationOverride(DATASOURCE_ENABLE.getName())\n                .end()\n                .addOperationTransformationOverride(DATASOURCE_DISABLE.getName())\n                .end();\n    }","commit_id":"6861caff243e7ed1ce7b9f2aa491489c45415b43","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Tests transformation of model from latest version into one passed into modelVersion parameter.\n     *\n     * @throws Exception\n     */\n    private void testTransformer(String subsystemXml, ModelTestControllerVersion controllerVersion, final ModelVersion modelVersion) throws Exception {\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n                .setSubsystemXmlResource(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, controllerVersion, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + controllerVersion.getMavenGavVersion())\n                .addMavenResourceURL(\"org.jboss.ironjacamar:ironjacamar-spec-api:1.1.4.Final\")\n                .addMavenResourceURL(\"org.jboss.ironjacamar:ironjacamar-common-api:1.1.4.Final\")\n                .setExtensionClassName(\"org.jboss.as.connector.subsystems.datasources.DataSourcesExtension\")\n                .excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class))\n                .configureReverseControllerCheck(AdditionalInitialization.MANAGEMENT, new ModelFixer() {\n                    @Override\n                    public ModelNode fixModel(ModelNode modelNode) {\n                        //Replace the value used in the xml\n                        modelNode.get(Constants.XA_DATASOURCE, \"complexXaDs_Pool\").remove(Constants.JTA.getName());\n                        //These two are true in the original model but get removed by the transformers, so they default to false. Set them to true\n                        modelNode.get(Constants.XA_DATASOURCE, \"complexXaDs_Pool\", Constants.STATISTICS_ENABLED.getName()).set(true);\n                        modelNode.get(Constants.DATA_SOURCE, \"complexDs_Pool\", Constants.STATISTICS_ENABLED.getName()).set(true);\n                        return modelNode;\n\n                    }\n                });\n\n        KernelServices mainServices = builder.build();\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        Assert.assertTrue(legacyServices.isSuccessfulBoot());\n        Assert.assertNotNull(legacyServices);\n\n        checkSubsystemModelTransformation(mainServices, modelVersion, new ModelFixer() {\n\n            @Override\n            public ModelNode fixModel(ModelNode modelNode) {\n                Assert.assertTrue(modelNode.get(Constants.XA_DATASOURCE).get(\"complexXaDs_Pool\").get(Constants.JTA.getName()).asBoolean());\n                //Replace the value used in the xml\n                modelNode.get(Constants.XA_DATASOURCE, \"complexXaDs_Pool\").remove(Constants.JTA.getName());\n                //modelNode.get(Constants.DATA_SOURCE, \"complexDs_Pool\").get(Constants.STATISTICS_ENABLED.getName()).set(false);\n                //modelNode.get(Constants.XA_DATASOURCE, \"complexXaDs_Pool\").get(Constants.STATISTICS_ENABLED.getName()).set(false);\n                return modelNode;\n\n            }\n        });\n    }","id":12701,"modified_method":"/**\n     * Tests transformation of model from latest version into one passed into modelVersion parameter.\n     *\n     * @throws Exception\n     */\n    private void testTransformer(String subsystemXml, ModelTestControllerVersion controllerVersion, final ModelVersion modelVersion) throws Exception {\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n\n\n        // Add legacy subsystems\n        LegacyKernelServicesInitializer initializer =builder.createLegacyKernelServicesBuilder(null, controllerVersion, modelVersion);\n        if (controllerVersion.equals(ModelTestControllerVersion.WILDFLY_8_0_0_FINAL)) {\n            initializer.addMavenResourceURL(\"org.wildfly:wildfly-connector:\" + controllerVersion.getMavenGavVersion());\n        } else {\n            initializer.addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + controllerVersion.getMavenGavVersion());\n        }\n        initializer.addMavenResourceURL(\"org.jboss.ironjacamar:ironjacamar-spec-api:1.1.4.Final\")\n                .addMavenResourceURL(\"org.jboss.ironjacamar:ironjacamar-common-api:1.1.4.Final\")\n\n                .setExtensionClassName(\"org.jboss.as.connector.subsystems.datasources.DataSourcesExtension\")\n                .excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class));\n\n        KernelServices mainServices = builder.build();\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        Assert.assertTrue(legacyServices.isSuccessfulBoot());\n        Assert.assertNotNull(legacyServices);\n        List<ModelNode> ops = builder.parseXmlResource(subsystemXml);\n        PathAddress subsystemAddress = PathAddress.pathAddress(DataSourcesSubsystemRootDefinition.PATH_SUBSYSTEM);\n\n        ModelTestUtils.checkFailedTransformedBootOperations(mainServices, modelVersion, ops, new FailedOperationTransformationConfig()\n                        .addFailedAttribute(subsystemAddress.append(DataSourceDefinition.PATH_DATASOURCE), FAILED_TRANSFORMER_2_0_0)\n                        .addFailedAttribute(subsystemAddress.append(XaDataSourceDefinition.PATH_XA_DATASOURCE), FAILED_TRANSFORMER_2_0_0)\n        );\n    }","commit_id":"6861caff243e7ed1ce7b9f2aa491489c45415b43","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void registerTransformers(SubsystemRegistration subsystem) {\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n        ResourceTransformationDescriptionBuilder sessionBuilder = builder.addChildResource(MAIL_SESSION_PATH);\n        sessionBuilder.addChildResource(PathElement.pathElement(SERVER_TYPE))\n                .getAttributeBuilder().setDiscard(DiscardAttributeChecker.ALWAYS, TLS)\n                .end();\n        sessionBuilder.discardChildResource(CUSTOM_SERVER_PATH);\n        TransformationDescription.Tools.register(builder.build(), subsystem, ModelVersion.create(1, 1, 0));\n    }","id":12702,"modified_method":"private void registerTransformers(SubsystemRegistration subsystem) {\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n        ResourceTransformationDescriptionBuilder sessionBuilder = builder.addChildResource(MAIL_SESSION_PATH);\n        sessionBuilder.addChildResource(PathElement.pathElement(SERVER_TYPE))\n                .getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.DEFINED, TLS)\n                .setDiscard(DiscardAttributeChecker.UNDEFINED, TLS)\n                .end();\n        sessionBuilder.discardChildResource(CUSTOM_SERVER_PATH);\n        TransformationDescription.Tools.register(builder.build(), subsystem, ModelVersion.create(1, 1, 0));\n    }","commit_id":"ba754561e65b4ca174d70865df5c2a4087ff262d","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void testTransformers110(String mavenVersion) throws Exception {\n        ModelVersion modelVersion = ModelVersion.create(1, 1, 0);\n        KernelServicesBuilder builder = createKernelServicesBuilder(null)\n                .setSubsystemXml(getSubsystemXml());\n\n        //which is why we need to include the jboss-as-controller artifact.\n        builder.createLegacyKernelServicesBuilder(null, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-mail:\" + mavenVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-controller:\" + mavenVersion)\n                .addParentFirstClassPattern(\"org.jboss.as.controller.*\");\n\n        KernelServices mainServices = builder.build();\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n        Assert.assertTrue(mainServices.getLegacyServices(modelVersion).isSuccessfulBoot());\n        checkSubsystemModelTransformation(mainServices, modelVersion);\n    }","id":12703,"modified_method":"private void testTransformers110(String mavenVersion) throws Exception {\n        ModelVersion modelVersion = ModelVersion.create(1, 1, 0);\n        KernelServicesBuilder builder = createKernelServicesBuilder(null);\n          //      .setSubsystemXml(getSubsystemXml());\n\n        //which is why we need to include the jboss-as-controller artifact.\n        builder.createLegacyKernelServicesBuilder(null, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-mail:\" + mavenVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-controller:\" + mavenVersion)\n                .addParentFirstClassPattern(\"org.jboss.as.controller.*\");\n\n        KernelServices mainServices = builder.build();\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n        Assert.assertTrue(mainServices.getLegacyServices(modelVersion).isSuccessfulBoot());\n        //checkSubsystemModelTransformation(mainServices, modelVersion);\n        ModelTestUtils.checkFailedTransformedBootOperations(mainServices, modelVersion, parse(getSubsystemXml(\"subsystem_1_1_expressions.xml\")),\n                new FailedOperationTransformationConfig()\n                        .addFailedAttribute(SUBSYSTEM_PATH.append(MailExtension.MAIL_SESSION_PATH).append(PathElement.pathElement(SERVER_TYPE)),\n                                                        new FailedOperationTransformationConfig.NewAttributesConfig(MailServerDefinition.TLS))\n        );\n    }","commit_id":"ba754561e65b4ca174d70865df5c2a4087ff262d","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void testPennPrint() {\n    // a Label with a null value should print as \"\" not null.\n    Tree t = Tree.valueOf(\"( (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNP Valdez) (NNS Principles))) (. ?)))\",\n            new LabeledScoredTreeReaderFactory(new TreeNormalizer()));\n    assertNull(\"Root of tree should have null label if none in String\", t.label().value());\n    String answer = \"( (SBARQ\\n\" +\n            \"    (WHNP (WP What))\\n\" +\n            \"    (SQ (VBP are)\\n\" +\n            \"      (NP (DT the) (NNP Valdez) (NNS Principles)))\\n\" +\n            \"    (. ?)))\\n\";\n    assertEquals(answer, t.pennString());\n  }","id":12704,"modified_method":"public void testPennPrint() {\n    // a Label with a null value should print as \"\" not null.\n    Tree t = Tree.valueOf(\"( (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNP Valdez) (NNS Principles))) (. ?)))\",\n            new LabeledScoredTreeReaderFactory(new TreeNormalizer()));\n    assertNull(\"Root of tree should have null label if none in String\", t.label().value());\n\n    StringWriter writer = new StringWriter();\n    PrintWriter wrapped = new PrintWriter(writer);\n    wrapped.println(\"( (SBARQ\");\n    wrapped.println(\"    (WHNP (WP What))\");\n    wrapped.println(\"    (SQ (VBP are)\");\n    wrapped.println(\"      (NP (DT the) (NNP Valdez) (NNS Principles)))\");\n    wrapped.println(\"    (. ?)))\");\n    wrapped.close();\n    String answer = writer.toString();\n\n    // String answer = (\"( (SBARQ\" + System.lineSeparator() +\n    //                  \"    (WHNP (WP What))\" + System.lineSeparator() +\n    //                  \"    (SQ (VBP are)\" + System.lineSeparator() +\n    //                  \"      (NP (DT the) (NNP Valdez) (NNS Principles)))\" + System.lineSeparator() +\n    //                  \"    (. ?)))\" + System.lineSeparator());\n    assertEquals(answer, t.pennString());\n  }","commit_id":"73f54a11a3ef7702d24af93160508b98ec5e313b","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"protected String getText(Label label) {\n    return ((label instanceof HasWord) ? \n            ((HasWord) label).word() : label.value());\n  }","id":12705,"modified_method":"protected String getText(Label label) {\n    if (label instanceof HasWord) {\n      String word = ((HasWord) label).word();\n      if (word != null) {\n        return word;\n      }\n    }\n    return label.value();\n  }","commit_id":"73f54a11a3ef7702d24af93160508b98ec5e313b","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"protected String getText(Label label) {\n    return ((label instanceof HasWord) ? \n            ((HasWord) label).word() : label.value());\n  }","id":12706,"modified_method":"protected String getText(Label label) {\n    if (label instanceof HasWord) {\n      String word = ((HasWord) label).word();\n      if (word != null) {\n        return word;\n      }\n    }\n    return label.value();\n  }","commit_id":"81c76df17daae22a957ca27edd38be61738d3e14","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"protected String getText(Label label) {\n    return ((label instanceof HasWord) ? \n            ((HasWord) label).word() : label.value());\n  }","id":12707,"modified_method":"protected String getText(Label label) {\n    if (label instanceof HasWord) {\n      String word = ((HasWord) label).word();\n      if (word != null) {\n        return word;\n      }\n    }\n    return label.value();\n  }","commit_id":"110376897ddfb87a0e5c6ab6a19dd0b72de81512","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void testPennPrint() {\n    // a Label with a null value should print as \"\" not null.\n    Tree t = Tree.valueOf(\"( (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNP Valdez) (NNS Principles))) (. ?)))\",\n            new LabeledScoredTreeReaderFactory(new TreeNormalizer()));\n    assertNull(\"Root of tree should have null label if none in String\", t.label().value());\n    String answer = \"( (SBARQ\\n\" +\n            \"    (WHNP (WP What))\\n\" +\n            \"    (SQ (VBP are)\\n\" +\n            \"      (NP (DT the) (NNP Valdez) (NNS Principles)))\\n\" +\n            \"    (. ?)))\\n\";\n    assertEquals(answer, t.pennString());\n  }","id":12708,"modified_method":"public void testPennPrint() {\n    // a Label with a null value should print as \"\" not null.\n    Tree t = Tree.valueOf(\"( (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNP Valdez) (NNS Principles))) (. ?)))\",\n            new LabeledScoredTreeReaderFactory(new TreeNormalizer()));\n    assertNull(\"Root of tree should have null label if none in String\", t.label().value());\n\n    StringWriter writer = new StringWriter();\n    PrintWriter wrapped = new PrintWriter(writer);\n    wrapped.println(\"( (SBARQ\");\n    wrapped.println(\"    (WHNP (WP What))\");\n    wrapped.println(\"    (SQ (VBP are)\");\n    wrapped.println(\"      (NP (DT the) (NNP Valdez) (NNS Principles)))\");\n    wrapped.println(\"    (. ?)))\");\n    wrapped.close();\n    String answer = writer.toString();\n\n    // String answer = (\"( (SBARQ\" + System.lineSeparator() +\n    //                  \"    (WHNP (WP What))\" + System.lineSeparator() +\n    //                  \"    (SQ (VBP are)\" + System.lineSeparator() +\n    //                  \"      (NP (DT the) (NNP Valdez) (NNS Principles)))\" + System.lineSeparator() +\n    //                  \"    (. ?)))\" + System.lineSeparator());\n    assertEquals(answer, t.pennString());\n  }","commit_id":"dd30f014eca685b0fe3d588f628e8cf2d70e47fa","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"protected String getText(Label label) {\n    return ((label instanceof HasWord) ? \n            ((HasWord) label).word() : label.value());\n  }","id":12709,"modified_method":"protected String getText(Label label) {\n    if (label instanceof HasWord) {\n      String word = ((HasWord) label).word();\n      if (word != null) {\n        return word;\n      }\n    }\n    return label.value();\n  }","commit_id":"dd30f014eca685b0fe3d588f628e8cf2d70e47fa","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode node = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(node.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            // TODO remove - let other validation steps pick this up\r\n            if (hasAnnotation(cNode, ImmutableASTTransformation.MY_TYPE)) {\r\n                addError(MY_TYPE_NAME + \" class '\" + cNode.getName() + \"' can't also be \" + ImmutableASTTransformation.MY_TYPE_NAME, parent);\r\n            }\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            if (!hasAnnotation(cNode, TupleConstructorASTTransformation.MY_TYPE)) {\r\n                createConstructor(cNode, false, true, false, false, false, false, new ArrayList<String>());\r\n            }\r\n            if (!hasAnnotation(cNode, EqualsAndHashCodeASTTransformation.MY_TYPE)) {\r\n                createHashCode(cNode, false, false, false, new ArrayList<String>());\r\n                createEquals(cNode, false, false, true, new ArrayList<String>());\r\n            }\r\n            if (!hasAnnotation(cNode, ToStringASTTransformation.MY_TYPE)) {\r\n                toStringInit(cNode, ConstantExpression.FALSE);\r\n                createToString(cNode, false, false, new ArrayList<String>());\r\n            }\r\n        }\r\n    }","id":12710,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            // TODO remove - let other validation steps pick this up\r\n            if (hasAnnotation(cNode, ImmutableASTTransformation.MY_TYPE)) {\r\n                addError(MY_TYPE_NAME + \" class '\" + cNode.getName() + \"' can't also be \" + ImmutableASTTransformation.MY_TYPE_NAME, parent);\r\n            }\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<String> includes = tokenize((String) getMemberValue(anno, \"includes\"));\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            if (!hasAnnotation(cNode, TupleConstructorASTTransformation.MY_TYPE)) {\r\n                createConstructor(cNode, false, true, false, false, false, false, excludes, includes);\r\n            }\r\n            if (!hasAnnotation(cNode, EqualsAndHashCodeASTTransformation.MY_TYPE)) {\r\n                createHashCode(cNode, false, false, false, excludes, includes);\r\n                createEquals(cNode, false, false, true, excludes, includes);\r\n            }\r\n            if (!hasAnnotation(cNode, ToStringASTTransformation.MY_TYPE)) {\r\n                toStringInit(cNode, ConstantExpression.FALSE);\r\n                createToString(cNode, false, false, excludes, includes);\r\n            }\r\n        }\r\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean callSuper = memberHasValue(anno, \"callSuper\", true);\r\n            boolean useCanEqual = !memberHasValue(anno, \"useCanEqual\", false);\r\n            if (callSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: callSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            createHashCode(cNode, false, includeFields, callSuper, excludes);\r\n            createEquals(cNode, includeFields, callSuper, useCanEqual, excludes);\r\n        }\r\n    }","id":12711,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean callSuper = memberHasValue(anno, \"callSuper\", true);\r\n            boolean useCanEqual = !memberHasValue(anno, \"useCanEqual\", false);\r\n            if (callSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: callSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<String> includes = tokenize((String) getMemberValue(anno, \"includes\"));\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createHashCode(cNode, false, includeFields, callSuper, excludes, includes);\r\n            createEquals(cNode, includeFields, callSuper, useCanEqual, excludes, includes);\r\n        }\r\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"public static void createHashCode(ClassNode cNode, boolean cacheResult, boolean includeFields, boolean callSuper, List<String> excludes) {\r\n        // make a public method if none exists otherwise try a private method with leading underscore\r\n        boolean hasExistingHashCode = hasDeclaredMethod(cNode, \"hashCode\", 0);\r\n        if (hasExistingHashCode && hasDeclaredMethod(cNode, \"_hashCode\", 0)) return;\r\n\r\n        final BlockStatement body = new BlockStatement();\r\n        // TODO use pList and fList\r\n        if (cacheResult) {\r\n            final FieldNode hashField = cNode.addField(\"$hash$code\", ACC_PRIVATE | ACC_SYNTHETIC, ClassHelper.int_TYPE, null);\r\n            final Expression hash = new VariableExpression(hashField);\r\n            body.addStatement(new IfStatement(\r\n                    isZeroExpr(hash),\r\n                    calculateHashStatements(cNode, hash, includeFields, callSuper, excludes),\r\n                    new EmptyStatement()\r\n            ));\r\n            body.addStatement(new ReturnStatement(hash));\r\n        } else {\r\n            body.addStatement(calculateHashStatements(cNode, null, includeFields, callSuper, excludes));\r\n        }\r\n\r\n        cNode.addMethod(new MethodNode(hasExistingHashCode ? \"_hashCode\" : \"hashCode\", hasExistingHashCode ? ACC_PRIVATE : ACC_PUBLIC,\r\n                ClassHelper.int_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, body));\r\n    }","id":12712,"modified_method":"public static void createHashCode(ClassNode cNode, boolean cacheResult, boolean includeFields, boolean callSuper, List<String> excludes, List<String> includes) {\r\n        // make a public method if none exists otherwise try a private method with leading underscore\r\n        boolean hasExistingHashCode = hasDeclaredMethod(cNode, \"hashCode\", 0);\r\n        if (hasExistingHashCode && hasDeclaredMethod(cNode, \"_hashCode\", 0)) return;\r\n\r\n        final BlockStatement body = new BlockStatement();\r\n        // TODO use pList and fList\r\n        if (cacheResult) {\r\n            final FieldNode hashField = cNode.addField(\"$hash$code\", ACC_PRIVATE | ACC_SYNTHETIC, ClassHelper.int_TYPE, null);\r\n            final Expression hash = new VariableExpression(hashField);\r\n            body.addStatement(new IfStatement(\r\n                    isZeroExpr(hash),\r\n                    calculateHashStatements(cNode, hash, includeFields, callSuper, excludes, includes),\r\n                    new EmptyStatement()\r\n            ));\r\n            body.addStatement(new ReturnStatement(hash));\r\n        } else {\r\n            body.addStatement(calculateHashStatements(cNode, null, includeFields, callSuper, excludes, includes));\r\n        }\r\n\r\n        cNode.addMethod(new MethodNode(hasExistingHashCode ? \"_hashCode\" : \"hashCode\", hasExistingHashCode ? ACC_PRIVATE : ACC_PUBLIC,\r\n                ClassHelper.int_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, body));\r\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"public static void createEquals(ClassNode cNode, boolean includeFields, boolean callSuper, boolean useCanEqual, List<String> excludes) {\r\n        if (useCanEqual) createCanEqual(cNode);\r\n        // make a public method if none exists otherwise try a private method with leading underscore\r\n        boolean hasExistingEquals = hasDeclaredMethod(cNode, \"equals\", 1);\r\n        if (hasExistingEquals && hasDeclaredMethod(cNode, \"_equals\", 1)) return;\r\n\r\n        final BlockStatement body = new BlockStatement();\r\n        VariableExpression other = new VariableExpression(\"other\");\r\n\r\n        // some short circuit cases for efficiency\r\n        body.addStatement(returnFalseIfNull(other));\r\n        body.addStatement(returnTrueIfIdentical(VariableExpression.THIS_EXPRESSION, other));\r\n\r\n        if (useCanEqual) {\r\n            body.addStatement(returnFalseIfNotInstanceof(cNode, other));\r\n            body.addStatement(new IfStatement(\r\n                    new BooleanExpression(new MethodCallExpression(other, \"canEqual\", VariableExpression.THIS_EXPRESSION)),\r\n                    new EmptyStatement(),\r\n                    new ReturnStatement(ConstantExpression.FALSE)\r\n            ));\r\n        } else {\r\n            body.addStatement(returnFalseIfWrongType(cNode, other));\r\n        }\r\n//        body.addStatement(new ExpressionStatement(new BinaryExpression(other, ASSIGN, new CastExpression(cNode, other))));\r\n\r\n        List<PropertyNode> pList = getInstanceProperties(cNode);\r\n        for (PropertyNode pNode : pList) {\r\n            if (excludes.contains(pNode.getName()) || pNode.getName().contains(\"$\")) continue;\r\n            body.addStatement(returnFalseIfPropertyNotEqual(pNode, other));\r\n        }\r\n        List<FieldNode> fList = new ArrayList<FieldNode>();\r\n        if (includeFields) {\r\n            fList.addAll(getInstanceNonPropertyFields(cNode));\r\n        }\r\n        for (FieldNode fNode : fList) {\r\n            if (excludes.contains(fNode.getName()) || fNode.getName().contains(\"$\")) continue;\r\n            body.addStatement(returnFalseIfFieldNotEqual(fNode, other));\r\n        }\r\n        if (callSuper) {\r\n            body.addStatement(new IfStatement(\r\n                    isTrueExpr(new MethodCallExpression(VariableExpression.SUPER_EXPRESSION, \"equals\", other)),\r\n                    new EmptyStatement(),\r\n                    new ReturnStatement(ConstantExpression.FALSE)\r\n            ));\r\n        }\r\n\r\n        // default\r\n        body.addStatement(new ReturnStatement(ConstantExpression.TRUE));\r\n\r\n        Parameter[] params = {new Parameter(OBJECT_TYPE, other.getName())};\r\n        cNode.addMethod(new MethodNode(hasExistingEquals ? \"_equals\" : \"equals\", hasExistingEquals ? ACC_PRIVATE : ACC_PUBLIC,\r\n                ClassHelper.boolean_TYPE, params, ClassNode.EMPTY_ARRAY, body));\r\n    }","id":12713,"modified_method":"public static void createEquals(ClassNode cNode, boolean includeFields, boolean callSuper, boolean useCanEqual, List<String> excludes, List<String> includes) {\r\n        if (useCanEqual) createCanEqual(cNode);\r\n        // make a public method if none exists otherwise try a private method with leading underscore\r\n        boolean hasExistingEquals = hasDeclaredMethod(cNode, \"equals\", 1);\r\n        if (hasExistingEquals && hasDeclaredMethod(cNode, \"_equals\", 1)) return;\r\n\r\n        final BlockStatement body = new BlockStatement();\r\n        VariableExpression other = new VariableExpression(\"other\");\r\n\r\n        // some short circuit cases for efficiency\r\n        body.addStatement(returnFalseIfNull(other));\r\n        body.addStatement(returnTrueIfIdentical(VariableExpression.THIS_EXPRESSION, other));\r\n\r\n        if (useCanEqual) {\r\n            body.addStatement(returnFalseIfNotInstanceof(cNode, other));\r\n            body.addStatement(new IfStatement(\r\n                    new BooleanExpression(new MethodCallExpression(other, \"canEqual\", VariableExpression.THIS_EXPRESSION)),\r\n                    new EmptyStatement(),\r\n                    new ReturnStatement(ConstantExpression.FALSE)\r\n            ));\r\n        } else {\r\n            body.addStatement(returnFalseIfWrongType(cNode, other));\r\n        }\r\n//        body.addStatement(new ExpressionStatement(new BinaryExpression(other, ASSIGN, new CastExpression(cNode, other))));\r\n\r\n        List<PropertyNode> pList = getInstanceProperties(cNode);\r\n        for (PropertyNode pNode : pList) {\r\n            if (shouldSkip(pNode.getName(), excludes, includes)) continue;\r\n            body.addStatement(returnFalseIfPropertyNotEqual(pNode, other));\r\n        }\r\n        List<FieldNode> fList = new ArrayList<FieldNode>();\r\n        if (includeFields) {\r\n            fList.addAll(getInstanceNonPropertyFields(cNode));\r\n        }\r\n        for (FieldNode fNode : fList) {\r\n            if (shouldSkip(fNode.getName(), excludes, includes)) continue;\r\n            body.addStatement(returnFalseIfFieldNotEqual(fNode, other));\r\n        }\r\n        if (callSuper) {\r\n            body.addStatement(new IfStatement(\r\n                    isTrueExpr(new MethodCallExpression(VariableExpression.SUPER_EXPRESSION, \"equals\", other)),\r\n                    new EmptyStatement(),\r\n                    new ReturnStatement(ConstantExpression.FALSE)\r\n            ));\r\n        }\r\n\r\n        // default\r\n        body.addStatement(new ReturnStatement(ConstantExpression.TRUE));\r\n\r\n        Parameter[] params = {new Parameter(OBJECT_TYPE, other.getName())};\r\n        cNode.addMethod(new MethodNode(hasExistingEquals ? \"_equals\" : \"equals\", hasExistingEquals ? ACC_PRIVATE : ACC_PUBLIC,\r\n                ClassHelper.boolean_TYPE, params, ClassNode.EMPTY_ARRAY, body));\r\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"private static Statement calculateHashStatements(ClassNode cNode, Expression hash, boolean includeFields, boolean callSuper, List<String> excludes) {\r\n        final List<PropertyNode> pList = getInstanceProperties(cNode);\r\n        final List<FieldNode> fList = new ArrayList<FieldNode>();\r\n        if (includeFields) {\r\n            fList.addAll(getInstanceNonPropertyFields(cNode));\r\n        }\r\n        final BlockStatement body = new BlockStatement();\r\n        // def _result = HashCodeHelper.initHash()\r\n        final Expression result = new VariableExpression(\"_result\");\r\n        final Expression init = new StaticMethodCallExpression(HASHUTIL_TYPE, \"initHash\", MethodCallExpression.NO_ARGUMENTS);\r\n        body.addStatement(new ExpressionStatement(new DeclarationExpression(result, ASSIGN, init)));\r\n\r\n        for (PropertyNode pNode : pList) {\r\n            if (excludes.contains(pNode.getName()) || pNode.getName().contains(\"$\")) continue;\r\n            // _result = HashCodeHelper.updateHash(_result, getProperty())\r\n            String getterName = \"get\" + Verifier.capitalize(pNode.getName());\r\n            Expression getter = new MethodCallExpression(VariableExpression.THIS_EXPRESSION, getterName, MethodCallExpression.NO_ARGUMENTS);\r\n            final Expression args = new TupleExpression(result, getter);\r\n            final Expression current = new StaticMethodCallExpression(HASHUTIL_TYPE, \"updateHash\", args);\r\n            body.addStatement(assignStatement(result, current));\r\n\r\n        }\r\n        for (FieldNode fNode : fList) {\r\n            if (excludes.contains(fNode.getName()) || fNode.getName().contains(\"$\")) continue;\r\n            // _result = HashCodeHelper.updateHash(_result, field)\r\n            final Expression fieldExpr = new VariableExpression(fNode);\r\n            final Expression args = new TupleExpression(result, fieldExpr);\r\n            final Expression current = new StaticMethodCallExpression(HASHUTIL_TYPE, \"updateHash\", args);\r\n            body.addStatement(assignStatement(result, current));\r\n        }\r\n        if (callSuper) {\r\n            // _result = HashCodeHelper.updateHash(_result, super.hashCode())\r\n            final Expression args = new TupleExpression(result, new MethodCallExpression(VariableExpression.SUPER_EXPRESSION, \"hashCode\", MethodCallExpression.NO_ARGUMENTS));\r\n            final Expression current = new StaticMethodCallExpression(HASHUTIL_TYPE, \"updateHash\", args);\r\n            body.addStatement(assignStatement(result, current));\r\n        }\r\n        // $hash$code = _result\r\n        if (hash != null) {\r\n            body.addStatement(assignStatement(hash, result));\r\n        } else {\r\n            body.addStatement(new ReturnStatement(result));\r\n        }\r\n        return body;\r\n    }","id":12714,"modified_method":"private static Statement calculateHashStatements(ClassNode cNode, Expression hash, boolean includeFields, boolean callSuper, List<String> excludes, List<String> includes) {\r\n        final List<PropertyNode> pList = getInstanceProperties(cNode);\r\n        final List<FieldNode> fList = new ArrayList<FieldNode>();\r\n        if (includeFields) {\r\n            fList.addAll(getInstanceNonPropertyFields(cNode));\r\n        }\r\n        final BlockStatement body = new BlockStatement();\r\n        // def _result = HashCodeHelper.initHash()\r\n        final Expression result = new VariableExpression(\"_result\");\r\n        final Expression init = new StaticMethodCallExpression(HASHUTIL_TYPE, \"initHash\", MethodCallExpression.NO_ARGUMENTS);\r\n        body.addStatement(new ExpressionStatement(new DeclarationExpression(result, ASSIGN, init)));\r\n\r\n        for (PropertyNode pNode : pList) {\r\n            if (shouldSkip(pNode.getName(), excludes, includes)) continue;\r\n            // _result = HashCodeHelper.updateHash(_result, getProperty())\r\n            String getterName = \"get\" + Verifier.capitalize(pNode.getName());\r\n            Expression getter = new MethodCallExpression(VariableExpression.THIS_EXPRESSION, getterName, MethodCallExpression.NO_ARGUMENTS);\r\n            final Expression args = new TupleExpression(result, getter);\r\n            final Expression current = new StaticMethodCallExpression(HASHUTIL_TYPE, \"updateHash\", args);\r\n            body.addStatement(assignStatement(result, current));\r\n\r\n        }\r\n        for (FieldNode fNode : fList) {\r\n            if (shouldSkip(fNode.getName(), excludes, includes)) continue;\r\n            // _result = HashCodeHelper.updateHash(_result, field)\r\n            final Expression fieldExpr = new VariableExpression(fNode);\r\n            final Expression args = new TupleExpression(result, fieldExpr);\r\n            final Expression current = new StaticMethodCallExpression(HASHUTIL_TYPE, \"updateHash\", args);\r\n            body.addStatement(assignStatement(result, current));\r\n        }\r\n        if (callSuper) {\r\n            // _result = HashCodeHelper.updateHash(_result, super.hashCode())\r\n            final Expression args = new TupleExpression(result, new MethodCallExpression(VariableExpression.SUPER_EXPRESSION, \"hashCode\", MethodCallExpression.NO_ARGUMENTS));\r\n            final Expression current = new StaticMethodCallExpression(HASHUTIL_TYPE, \"updateHash\", args);\r\n            body.addStatement(assignStatement(result, current));\r\n        }\r\n        // $hash$code = _result\r\n        if (hash != null) {\r\n            body.addStatement(assignStatement(hash, result));\r\n        } else {\r\n            body.addStatement(new ReturnStatement(result));\r\n        }\r\n        return body;\r\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\n        init(nodes, source);\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\n        AnnotationNode node = (AnnotationNode) nodes[0];\n        // temporarily have weaker check which allows for old Deprecated Annotation\n//        if (!MY_TYPE.equals(node.getClassNode())) return;\n        if (!node.getClassNode().getName().endsWith(\".Immutable\")) return;\n        List<PropertyNode> newProperties = new ArrayList<PropertyNode>();\n\n        if (parent instanceof ClassNode) {\n            ClassNode cNode = (ClassNode) parent;\n            String cName = cNode.getName();\n            checkNotInterface(cNode, MY_TYPE_NAME);\n            makeClassFinal(cNode);\n\n            final List<PropertyNode> pList = getInstanceProperties(cNode);\n            for (PropertyNode pNode : pList) {\n                adjustPropertyForImmutability(pNode, newProperties);\n            }\n            for (PropertyNode pNode : newProperties) {\n                cNode.getProperties().remove(pNode);\n                addProperty(cNode, pNode);\n            }\n            final List<FieldNode> fList = cNode.getFields();\n            for (FieldNode fNode : fList) {\n                ensureNotPublic(cName, fNode);\n            }\n            createConstructors(cNode);\n            createHashCode(cNode, true, false, false, new ArrayList<String>());\n            createEquals(cNode, false, false, false, new ArrayList<String>());\n            createToString(cNode, false, false, new ArrayList<String>());\n        }\n    }","id":12715,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\n        init(nodes, source);\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\n        AnnotationNode node = (AnnotationNode) nodes[0];\n        // temporarily have weaker check which allows for old Deprecated Annotation\n//        if (!MY_TYPE.equals(node.getClassNode())) return;\n        if (!node.getClassNode().getName().endsWith(\".Immutable\")) return;\n        List<PropertyNode> newProperties = new ArrayList<PropertyNode>();\n\n        if (parent instanceof ClassNode) {\n            ClassNode cNode = (ClassNode) parent;\n            String cName = cNode.getName();\n            checkNotInterface(cNode, MY_TYPE_NAME);\n            makeClassFinal(cNode);\n\n            final List<PropertyNode> pList = getInstanceProperties(cNode);\n            for (PropertyNode pNode : pList) {\n                adjustPropertyForImmutability(pNode, newProperties);\n            }\n            for (PropertyNode pNode : newProperties) {\n                cNode.getProperties().remove(pNode);\n                addProperty(cNode, pNode);\n            }\n            final List<FieldNode> fList = cNode.getFields();\n            for (FieldNode fNode : fList) {\n                ensureNotPublic(cName, fNode);\n            }\n            createConstructors(cNode);\n            createHashCode(cNode, true, false, false, null, null);\n            createEquals(cNode, false, false, false, null, null);\n            createToString(cNode, false, false, null, null);\n        }\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeSuper = memberHasValue(anno, \"includeSuper\", true);\r\n            if (includeSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: includeSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeNames = memberHasValue(anno, \"includeNames\", true);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            toStringInit(cNode, new ConstantExpression(includeNames));\r\n            createToString(cNode, includeSuper, includeFields, excludes);\r\n        }\r\n    }","id":12716,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeSuper = memberHasValue(anno, \"includeSuper\", true);\r\n            if (includeSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: includeSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeNames = memberHasValue(anno, \"includeNames\", true);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<String> includes = tokenize((String) getMemberValue(anno, \"includes\"));\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            toStringInit(cNode, new ConstantExpression(includeNames));\r\n            createToString(cNode, includeSuper, includeFields, excludes, includes);\r\n        }\r\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"public static void createToString(ClassNode cNode, boolean includeSuper, boolean includeFields, List<String> excludes) {\r\n        // make a public method if none exists otherwise try a private method with leading underscore\r\n        boolean hasExistingToString = hasDeclaredMethod(cNode, \"toString\", 0);\r\n        if (hasExistingToString && hasDeclaredMethod(cNode, \"_toString\", 0)) return;\r\n\r\n        final BlockStatement body = new BlockStatement();\r\n        // def _result = new StringBuffer()\r\n        final Expression result = new VariableExpression(\"_result\");\r\n        final Expression init = new ConstructorCallExpression(STRINGBUFFER_TYPE, MethodCallExpression.NO_ARGUMENTS);\r\n        body.addStatement(new ExpressionStatement(new DeclarationExpression(result, ASSIGN, init)));\r\n\r\n        body.addStatement(append(result, new ConstantExpression(cNode.getName())));\r\n        body.addStatement(append(result, new ConstantExpression(\"(\")));\r\n        boolean first = true;\r\n        List<PropertyNode> pList = getInstanceProperties(cNode);\r\n        for (PropertyNode pNode : pList) {\r\n            if (excludes.contains(pNode.getName()) || pNode.getName().contains(\"$\")) continue;\r\n            first = appendPrefix(cNode, body, result, first, pNode.getName());\r\n            String getterName = \"get\" + Verifier.capitalize(pNode.getName());\r\n            Expression getter = new MethodCallExpression(VariableExpression.THIS_EXPRESSION, getterName, MethodCallExpression.NO_ARGUMENTS);\r\n            body.addStatement(append(result, new StaticMethodCallExpression(INVOKER_TYPE, \"toString\", getter)));\r\n        }\r\n        List<FieldNode> fList = new ArrayList<FieldNode>();\r\n        if (includeFields) {\r\n            fList.addAll(getInstanceNonPropertyFields(cNode));\r\n        }\r\n        for (FieldNode fNode : fList) {\r\n            if (excludes.contains(fNode.getName()) || fNode.getName().contains(\"$\")) continue;\r\n            first = appendPrefix(cNode, body, result, first, fNode.getName());\r\n            body.addStatement(append(result, new StaticMethodCallExpression(INVOKER_TYPE, \"toString\", new VariableExpression(fNode))));\r\n        }\r\n        if (includeSuper) {\r\n            appendPrefix(cNode, body, result, first, \"super\");\r\n            // not through MOP to avoid infinite recursion\r\n            body.addStatement(append(result, new MethodCallExpression(VariableExpression.SUPER_EXPRESSION, \"toString\", MethodCallExpression.NO_ARGUMENTS)));\r\n        }\r\n        body.addStatement(append(result, new ConstantExpression(\")\")));\r\n        body.addStatement(new ReturnStatement(new MethodCallExpression(result, \"toString\", MethodCallExpression.NO_ARGUMENTS)));\r\n        cNode.addMethod(new MethodNode(hasExistingToString ? \"_toString\" : \"toString\", hasExistingToString ? ACC_PRIVATE : ACC_PUBLIC,\r\n                ClassHelper.STRING_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, body));\r\n    }","id":12717,"modified_method":"public static void createToString(ClassNode cNode, boolean includeSuper, boolean includeFields, List<String> excludes, List<String> includes) {\r\n        // make a public method if none exists otherwise try a private method with leading underscore\r\n        boolean hasExistingToString = hasDeclaredMethod(cNode, \"toString\", 0);\r\n        if (hasExistingToString && hasDeclaredMethod(cNode, \"_toString\", 0)) return;\r\n\r\n        final BlockStatement body = new BlockStatement();\r\n        // def _result = new StringBuffer()\r\n        final Expression result = new VariableExpression(\"_result\");\r\n        final Expression init = new ConstructorCallExpression(STRINGBUFFER_TYPE, MethodCallExpression.NO_ARGUMENTS);\r\n        body.addStatement(new ExpressionStatement(new DeclarationExpression(result, ASSIGN, init)));\r\n\r\n        body.addStatement(append(result, new ConstantExpression(cNode.getName())));\r\n        body.addStatement(append(result, new ConstantExpression(\"(\")));\r\n        boolean first = true;\r\n        List<PropertyNode> pList = getInstanceProperties(cNode);\r\n        for (PropertyNode pNode : pList) {\r\n            if (shouldSkip(pNode.getName(), excludes, includes)) continue;\r\n            first = appendPrefix(cNode, body, result, first, pNode.getName());\r\n            String getterName = \"get\" + Verifier.capitalize(pNode.getName());\r\n            Expression getter = new MethodCallExpression(VariableExpression.THIS_EXPRESSION, getterName, MethodCallExpression.NO_ARGUMENTS);\r\n            body.addStatement(append(result, new StaticMethodCallExpression(INVOKER_TYPE, \"toString\", getter)));\r\n        }\r\n        List<FieldNode> fList = new ArrayList<FieldNode>();\r\n        if (includeFields) {\r\n            fList.addAll(getInstanceNonPropertyFields(cNode));\r\n        }\r\n        for (FieldNode fNode : fList) {\r\n            if (shouldSkip(fNode.getName(), excludes, includes)) continue;\r\n            first = appendPrefix(cNode, body, result, first, fNode.getName());\r\n            body.addStatement(append(result, new StaticMethodCallExpression(INVOKER_TYPE, \"toString\", new VariableExpression(fNode))));\r\n        }\r\n        if (includeSuper) {\r\n            appendPrefix(cNode, body, result, first, \"super\");\r\n            // not through MOP to avoid infinite recursion\r\n            body.addStatement(append(result, new MethodCallExpression(VariableExpression.SUPER_EXPRESSION, \"toString\", MethodCallExpression.NO_ARGUMENTS)));\r\n        }\r\n        body.addStatement(append(result, new ConstantExpression(\")\")));\r\n        body.addStatement(new ReturnStatement(new MethodCallExpression(result, \"toString\", MethodCallExpression.NO_ARGUMENTS)));\r\n        cNode.addMethod(new MethodNode(hasExistingToString ? \"_toString\" : \"toString\", hasExistingToString ? ACC_PRIVATE : ACC_PUBLIC,\r\n                ClassHelper.STRING_TYPE, Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, body));\r\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            boolean includeProperties = !memberHasValue(anno, \"includeProperties\", false);\r\n            boolean includeSuperFields = memberHasValue(anno, \"includeSuperFields\", true);\r\n            boolean includeSuperProperties = memberHasValue(anno, \"includeSuperProperties\", true);\r\n            boolean callSuper = memberHasValue(anno, \"callSuper\", true);\r\n            boolean force = memberHasValue(anno, \"force\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            createConstructor(cNode, includeFields, includeProperties, includeSuperFields, includeSuperProperties, callSuper, force, excludes);\r\n        }\r\n    }","id":12718,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            boolean includeProperties = !memberHasValue(anno, \"includeProperties\", false);\r\n            boolean includeSuperFields = memberHasValue(anno, \"includeSuperFields\", true);\r\n            boolean includeSuperProperties = memberHasValue(anno, \"includeSuperProperties\", true);\r\n            boolean callSuper = memberHasValue(anno, \"callSuper\", true);\r\n            boolean force = memberHasValue(anno, \"force\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<String> includes = tokenize((String) getMemberValue(anno, \"includes\"));\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createConstructor(cNode, includeFields, includeProperties, includeSuperFields, includeSuperProperties, callSuper, force, excludes, includes);\r\n        }\r\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"public static void createConstructor(ClassNode cNode, boolean includeFields, boolean includeProperties, boolean includeSuperFields, boolean includeSuperProperties, boolean callSuper, boolean force, List<String> excludes) {\r\n        // no processing if existing constructors found\r\n        List<ConstructorNode> constructors = cNode.getDeclaredConstructors();\r\n        if (constructors.size() > 1 && !force) return;\r\n        boolean foundEmpty = constructors.size() == 1 && constructors.get(0).getFirstStatement() == null;\r\n        if (constructors.size() == 1 && !foundEmpty && !force) return;\r\n        // HACK: JavaStubGenerator could have snuck in a constructor we don't want\r\n        if (foundEmpty) constructors.remove(0);\r\n\r\n        List<FieldNode> superList = new ArrayList<FieldNode>();\r\n        if (includeSuperProperties) {\r\n            superList.addAll(getSuperPropertyFields(cNode.getSuperClass()));\r\n        }\r\n        if (includeSuperFields) {\r\n            superList.addAll(getSuperNonPropertyFields(cNode.getSuperClass()));\r\n        }\r\n\r\n        List<FieldNode> list = new ArrayList<FieldNode>();\r\n        if (includeProperties) {\r\n            list.addAll(getInstancePropertyFields(cNode));\r\n        }\r\n        if (includeFields) {\r\n            list.addAll(getInstanceNonPropertyFields(cNode));\r\n        }\r\n\r\n        final List<Parameter> params = new ArrayList<Parameter>();\r\n        final List<Expression> superParams = new ArrayList<Expression>();\r\n        final BlockStatement body = new BlockStatement();\r\n        for (FieldNode fNode : superList) {\r\n            String name = fNode.getName();\r\n            if (excludes.contains(name) || name.contains(\"$\")) continue;\r\n            params.add(createParam(fNode, name));\r\n            if (callSuper) {\r\n                superParams.add(new VariableExpression(name));\r\n            } else {\r\n                body.addStatement(assignStatement(new PropertyExpression(VariableExpression.THIS_EXPRESSION, name), new VariableExpression(name)));\r\n            }\r\n        }\r\n        if (callSuper) {\r\n            body.addStatement(new ExpressionStatement(new ConstructorCallExpression(ClassNode.SUPER, new ArgumentListExpression(superParams))));\r\n        }\r\n        for (FieldNode fNode : list) {\r\n            String name = fNode.getName();\r\n            if (excludes.contains(name) || name.contains(\"$\")) continue;\r\n            params.add(createParam(fNode, name));\r\n            body.addStatement(assignStatement(new PropertyExpression(VariableExpression.THIS_EXPRESSION, name), new VariableExpression(name)));\r\n        }\r\n        cNode.addConstructor(new ConstructorNode(ACC_PUBLIC, params.toArray(new Parameter[params.size()]), ClassNode.EMPTY_ARRAY, body));\r\n    }","id":12719,"modified_method":"public static void createConstructor(ClassNode cNode, boolean includeFields, boolean includeProperties, boolean includeSuperFields, boolean includeSuperProperties, boolean callSuper, boolean force, List<String> excludes, List<String> includes) {\r\n        // no processing if existing constructors found\r\n        List<ConstructorNode> constructors = cNode.getDeclaredConstructors();\r\n        if (constructors.size() > 1 && !force) return;\r\n        boolean foundEmpty = constructors.size() == 1 && constructors.get(0).getFirstStatement() == null;\r\n        if (constructors.size() == 1 && !foundEmpty && !force) return;\r\n        // HACK: JavaStubGenerator could have snuck in a constructor we don't want\r\n        if (foundEmpty) constructors.remove(0);\r\n\r\n        List<FieldNode> superList = new ArrayList<FieldNode>();\r\n        if (includeSuperProperties) {\r\n            superList.addAll(getSuperPropertyFields(cNode.getSuperClass()));\r\n        }\r\n        if (includeSuperFields) {\r\n            superList.addAll(getSuperNonPropertyFields(cNode.getSuperClass()));\r\n        }\r\n\r\n        List<FieldNode> list = new ArrayList<FieldNode>();\r\n        if (includeProperties) {\r\n            list.addAll(getInstancePropertyFields(cNode));\r\n        }\r\n        if (includeFields) {\r\n            list.addAll(getInstanceNonPropertyFields(cNode));\r\n        }\r\n\r\n        final List<Parameter> params = new ArrayList<Parameter>();\r\n        final List<Expression> superParams = new ArrayList<Expression>();\r\n        final BlockStatement body = new BlockStatement();\r\n        for (FieldNode fNode : superList) {\r\n            String name = fNode.getName();\r\n            if (shouldSkip(name, excludes, includes)) continue;\r\n            params.add(createParam(fNode, name));\r\n            if (callSuper) {\r\n                superParams.add(new VariableExpression(name));\r\n            } else {\r\n                body.addStatement(assignStatement(new PropertyExpression(VariableExpression.THIS_EXPRESSION, name), new VariableExpression(name)));\r\n            }\r\n        }\r\n        if (callSuper) {\r\n            body.addStatement(new ExpressionStatement(new ConstructorCallExpression(ClassNode.SUPER, new ArgumentListExpression(superParams))));\r\n        }\r\n        for (FieldNode fNode : list) {\r\n            String name = fNode.getName();\r\n            if (shouldSkip(name, excludes, includes)) continue;\r\n            params.add(createParam(fNode, name));\r\n            body.addStatement(assignStatement(new PropertyExpression(VariableExpression.THIS_EXPRESSION, name), new VariableExpression(name)));\r\n        }\r\n        cNode.addConstructor(new ConstructorNode(ACC_PUBLIC, params.toArray(new Parameter[params.size()]), ClassNode.EMPTY_ARRAY, body));\r\n    }","commit_id":"9428a852a98925ed5bf8a5f6b99bfad136054210","url":"https://github.com/apache/groovy"},{"original_method":"/**\n   * Decode a String value.\n   */\n  public static String decodeString(PositionedByteRange src) {\n    final byte header = src.get();\n    if (header == NULL || header == DESCENDING.apply(NULL))\n      return null;\n    assert header == TEXT || header == DESCENDING.apply(TEXT);\n    Order ord = header == TEXT ? ASCENDING : DESCENDING;\n    byte[] a = src.getBytes();\n    final int offset = src.getOffset(), start = src.getPosition();\n    final byte terminator = ord.apply(TERM);\n    int i = offset + start;\n    for (; a[i] != terminator; i++)\n      ;\n    src.setPosition(i - offset + 1); // advance position to TERM + 1\n    if (DESCENDING == ord) {\n      // make a copy so that we don't disturb encoded value with ord.\n      byte[] copy = new byte[i - offset - 1];\n      System.arraycopy(a, offset + start, copy, 0, copy.length);\n      ord.apply(copy);\n      return new String(copy, UTF8);\n    } else {\n      return new String(a, offset + start, i - offset - 1, UTF8);\n    }\n  }","id":12720,"modified_method":"/**\n   * Decode a String value.\n   */\n  public static String decodeString(PositionedByteRange src) {\n    final byte header = src.get();\n    if (header == NULL || header == DESCENDING.apply(NULL))\n      return null;\n    assert header == TEXT || header == DESCENDING.apply(TEXT);\n    Order ord = header == TEXT ? ASCENDING : DESCENDING;\n    byte[] a = src.getBytes();\n    final int offset = src.getOffset(), start = src.getPosition();\n    final byte terminator = ord.apply(TERM);\n    int rawStartPos = offset + start, rawTermPos = rawStartPos;\n    for (; a[rawTermPos] != terminator; rawTermPos++)\n      ;\n    src.setPosition(rawTermPos - offset + 1); // advance position to TERM + 1\n    if (DESCENDING == ord) {\n      // make a copy so that we don't disturb encoded value with ord.\n      byte[] copy = new byte[rawTermPos - rawStartPos];\n      System.arraycopy(a, rawStartPos, copy, 0, copy.length);\n      ord.apply(copy);\n      return new String(copy, UTF8);\n    } else {\n      return new String(a, rawStartPos, rawTermPos - rawStartPos, UTF8);\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Fill gaps in Numeric encoding testing.\n   */\n  @Test\n  public void testNumericOther() {\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < BD_VALS.length; i++) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        byte[] a = new byte[BD_LENGTHS[i] + 2];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, BD_LENGTHS[i]);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          BD_LENGTHS[i], OrderedBytes.encodeNumeric(buf1, BD_VALS[i], ord));\n        assertEquals(\"Surprising serialized length.\", BD_LENGTHS[i], buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", BD_LENGTHS[i], OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", BD_LENGTHS[i], buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        BigDecimal decoded = OrderedBytes.decodeNumericAsBigDecimal(buf1);\n        if (null == BD_VALS[i]) {\n          assertEquals(BD_VALS[i], decoded);\n        } else {\n          assertEquals(\"Deserialization failed.\", 0, BD_VALS[i].compareTo(decoded));\n        }\n        assertEquals(\"Did not consume enough bytes.\", BD_LENGTHS[i], buf1.getPosition());\n      }\n    }\n  }","id":12721,"modified_method":"/**\n   * Fill gaps in Numeric encoding testing.\n   */\n  @Test\n  public void testNumericOther() {\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < BD_VALS.length; i++) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        byte[] a = new byte[BD_LENGTHS[i] + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, BD_LENGTHS[i] + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          BD_LENGTHS[i], OrderedBytes.encodeNumeric(buf1, BD_VALS[i], ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", BD_LENGTHS[i], buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", BD_LENGTHS[i], OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", BD_LENGTHS[i], buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        BigDecimal decoded = OrderedBytes.decodeNumericAsBigDecimal(buf1);\n        if (null == BD_VALS[i]) {\n          assertEquals(BD_VALS[i], decoded);\n        } else {\n          assertEquals(\"Deserialization failed.\", 0, BD_VALS[i].compareTo(decoded));\n        }\n        assertEquals(\"Did not consume enough bytes.\", BD_LENGTHS[i], buf1.getPosition() - 1);\n      }\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Test string encoding.\n   */\n  @Test\n  public void testString() {\n    String[] vals = { \"foo\", \"baaaar\", \"bazz\" };\n    int expectedLengths[] = { 5, 8, 6 };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        byte[] a = new byte[expectedLengths[i] + 2];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, expectedLengths[i]);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          expectedLengths[i], OrderedBytes.encodeString(buf1, vals[i], ord));\n        assertEquals(\"Surprising serialized length.\", expectedLengths[i], buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", expectedLengths[i], OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", expectedLengths[i], buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        assertEquals(\"Deserialization failed.\", vals[i], OrderedBytes.decodeString(buf1));\n        assertEquals(\"Did not consume enough bytes.\", expectedLengths[i], buf1.getPosition());\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        encoded[i] = new byte[expectedLengths[i]];\n        OrderedBytes.encodeString(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      String[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        String decoded = OrderedBytes.decodeString(pbr);\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n          sortedVals[i], decoded);\n      }\n    }\n  }","id":12722,"modified_method":"/**\n   * Test string encoding.\n   */\n  @Test\n  public void testString() {\n    String[] vals = { \"foo\", \"baaaar\", \"bazz\" };\n    int expectedLengths[] = { 5, 8, 6 };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        byte[] a = new byte[expectedLengths[i] + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, expectedLengths[i] + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          expectedLengths[i], OrderedBytes.encodeString(buf1, vals[i], ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", expectedLengths[i], buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", expectedLengths[i], OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", expectedLengths[i], buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        assertEquals(\"Deserialization failed.\", vals[i], OrderedBytes.decodeString(buf1));\n        assertEquals(\"Did not consume enough bytes.\", expectedLengths[i], buf1.getPosition() - 1);\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        encoded[i] = new byte[expectedLengths[i]];\n        OrderedBytes.encodeString(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      String[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        String decoded = OrderedBytes.decodeString(pbr);\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n          sortedVals[i], decoded);\n      }\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Test real encoding. Example input values come from reference wiki page.\n   */\n  @Test\n  public void testNumericReal() {\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < D_VALS.length; i++) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        byte[] a = new byte[D_LENGTHS[i] + 2];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, D_LENGTHS[i]);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          D_LENGTHS[i], OrderedBytes.encodeNumeric(buf1, D_VALS[i], ord));\n        assertEquals(\"Surprising serialized length.\", D_LENGTHS[i], buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", D_LENGTHS[i], OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", D_LENGTHS[i], buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        assertEquals(\"Deserialization failed.\",\n          D_VALS[i].doubleValue(), OrderedBytes.decodeNumericAsDouble(buf1), MIN_EPSILON);\n        assertEquals(\"Did not consume enough bytes.\", D_LENGTHS[i], buf1.getPosition());\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[D_VALS.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < D_VALS.length; i++) {\n        encoded[i] = new byte[D_LENGTHS[i]];\n        OrderedBytes.encodeNumeric(pbr.set(encoded[i]), D_VALS[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Double[] sortedVals = Arrays.copyOf(D_VALS, D_VALS.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        double decoded = OrderedBytes.decodeNumericAsDouble(pbr);\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            sortedVals[i].doubleValue(), decoded, MIN_EPSILON);\n      }\n    }\n  }","id":12723,"modified_method":"/**\n   * Test real encoding. Example input values come from reference wiki page.\n   */\n  @Test\n  public void testNumericReal() {\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < D_VALS.length; i++) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        byte[] a = new byte[D_LENGTHS[i] + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, D_LENGTHS[i] + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          D_LENGTHS[i], OrderedBytes.encodeNumeric(buf1, D_VALS[i], ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", D_LENGTHS[i], buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", D_LENGTHS[i], OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", D_LENGTHS[i], buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        assertEquals(\"Deserialization failed.\",\n          D_VALS[i].doubleValue(), OrderedBytes.decodeNumericAsDouble(buf1), MIN_EPSILON);\n        assertEquals(\"Did not consume enough bytes.\", D_LENGTHS[i], buf1.getPosition() - 1);\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[D_VALS.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < D_VALS.length; i++) {\n        encoded[i] = new byte[D_LENGTHS[i]];\n        OrderedBytes.encodeNumeric(pbr.set(encoded[i]), D_VALS[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Double[] sortedVals = Arrays.copyOf(D_VALS, D_VALS.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        double decoded = OrderedBytes.decodeNumericAsDouble(pbr);\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            sortedVals[i].doubleValue(), decoded, MIN_EPSILON);\n      }\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Test float32 encoding.\n   */\n  @Test\n  public void testFloat32() {\n    Float[] vals =\n      { Float.MIN_VALUE, Float.MIN_VALUE + 1.0f, 0.0f, Float.MAX_VALUE / 2.0f, Float.MAX_VALUE };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        byte[] a = new byte[5 + 2];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, 5);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          5, OrderedBytes.encodeFloat32(buf1, vals[i], ord));\n        assertEquals(\"Surprising serialized length.\", 5, buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", 5, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", 5, buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        assertEquals(\"Deserialization failed.\",\n          Float.floatToIntBits(vals[i].floatValue()),\n          Float.floatToIntBits(OrderedBytes.decodeFloat32(buf1)));\n        assertEquals(\"Did not consume enough bytes.\", 5, buf1.getPosition());\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][5];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        OrderedBytes.encodeFloat32(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Float[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        float decoded = OrderedBytes.decodeFloat32(pbr.set(encoded[i]));\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            Float.floatToIntBits(sortedVals[i].floatValue()),\n            Float.floatToIntBits(decoded));\n      }\n    }\n  }","id":12724,"modified_method":"/**\n   * Test float32 encoding.\n   */\n  @Test\n  public void testFloat32() {\n    Float[] vals =\n      { Float.MIN_VALUE, Float.MIN_VALUE + 1.0f, 0.0f, Float.MAX_VALUE / 2.0f, Float.MAX_VALUE };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        byte[] a = new byte[5 + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, 5 + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          5, OrderedBytes.encodeFloat32(buf1, vals[i], ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", 5, buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", 5, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", 5, buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        assertEquals(\"Deserialization failed.\",\n          Float.floatToIntBits(vals[i].floatValue()),\n          Float.floatToIntBits(OrderedBytes.decodeFloat32(buf1)));\n        assertEquals(\"Did not consume enough bytes.\", 5, buf1.getPosition() - 1);\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][5];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        OrderedBytes.encodeFloat32(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Float[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        float decoded = OrderedBytes.decodeFloat32(pbr.set(encoded[i]));\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            Float.floatToIntBits(sortedVals[i].floatValue()),\n            Float.floatToIntBits(decoded));\n      }\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Test BlobVar encoding.\n   */\n  @Test\n  public void testBlobVar() {\n    byte[][] vals =\n        { \"\".getBytes(), \"foo\".getBytes(), \"foobarbazbub\".getBytes(),\n          { (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa,\n            (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa },\n          { (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55,\n            (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55 },\n          \"1\".getBytes(), \"22\".getBytes(), \"333\".getBytes(), \"4444\".getBytes(),\n          \"55555\".getBytes(), \"666666\".getBytes(), \"7777777\".getBytes(), \"88888888\".getBytes()\n        };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (byte[] val : vals) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        int expectedLen = OrderedBytes.blobVarEncodedLength(val.length);\n        byte[] a = new byte[expectedLen + 2];\n        PositionedByteRange buf1 =\n            new SimplePositionedByteRange(a, 1, expectedLen);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          expectedLen, OrderedBytes.encodeBlobVar(buf1, val, ord));\n        assertEquals(\"Surprising serialized length.\", expectedLen, buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", expectedLen, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", expectedLen, buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        assertArrayEquals(\"Deserialization failed.\", val, OrderedBytes.decodeBlobVar(buf1));\n        assertEquals(\"Did not consume enough bytes.\", expectedLen, buf1.getPosition());\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        encoded[i] = new byte[OrderedBytes.blobVarEncodedLength(vals[i].length)];\n        OrderedBytes.encodeBlobVar(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      byte[][] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals, Bytes.BYTES_COMPARATOR);\n      else Arrays.sort(sortedVals, Collections.reverseOrder(Bytes.BYTES_COMPARATOR));\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        byte[] decoded = OrderedBytes.decodeBlobVar(pbr);\n        assertArrayEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n          sortedVals[i], decoded);\n      }\n    }\n  }","id":12725,"modified_method":"/**\n   * Test BlobVar encoding.\n   */\n  @Test\n  public void testBlobVar() {\n    byte[][] vals =\n        { \"\".getBytes(), \"foo\".getBytes(), \"foobarbazbub\".getBytes(),\n          { (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa,\n            (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa },\n          { (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55,\n            (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55 },\n          \"1\".getBytes(), \"22\".getBytes(), \"333\".getBytes(), \"4444\".getBytes(),\n          \"55555\".getBytes(), \"666666\".getBytes(), \"7777777\".getBytes(), \"88888888\".getBytes()\n        };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (byte[] val : vals) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        int expectedLen = OrderedBytes.blobVarEncodedLength(val.length);\n        byte[] a = new byte[expectedLen + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, expectedLen + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          expectedLen, OrderedBytes.encodeBlobVar(buf1, val, ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", expectedLen, buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", expectedLen, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", expectedLen, buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        assertArrayEquals(\"Deserialization failed.\", val, OrderedBytes.decodeBlobVar(buf1));\n        assertEquals(\"Did not consume enough bytes.\", expectedLen, buf1.getPosition() - 1);\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        encoded[i] = new byte[OrderedBytes.blobVarEncodedLength(vals[i].length)];\n        OrderedBytes.encodeBlobVar(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      byte[][] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals, Bytes.BYTES_COMPARATOR);\n      else Arrays.sort(sortedVals, Collections.reverseOrder(Bytes.BYTES_COMPARATOR));\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        byte[] decoded = OrderedBytes.decodeBlobVar(pbr);\n        assertArrayEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n          sortedVals[i], decoded);\n      }\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Test BlobCopy encoding.\n   */\n  @Test\n  public void testBlobCopy() {\n    byte[][] vals =\n      { \"\".getBytes(), \"foo\".getBytes(), \"foobarbazbub\".getBytes(),\n        { (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa,\n          (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa },\n        { (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55,\n          (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55 },\n      };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (byte[] val : vals) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        int expectedLen = val.length + (Order.ASCENDING == ord ? 1 : 2);\n        byte[] a = new byte[expectedLen + 2];\n        PositionedByteRange buf1 =\n            new SimplePositionedByteRange(a, 1, expectedLen);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          expectedLen, OrderedBytes.encodeBlobCopy(buf1, val, ord));\n        assertEquals(\"Surprising serialized length.\", expectedLen, buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", expectedLen, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", expectedLen, buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        assertArrayEquals(\"Deserialization failed.\", val, OrderedBytes.decodeBlobCopy(buf1));\n        assertEquals(\"Did not consume enough bytes.\", expectedLen, buf1.getPosition());\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        encoded[i] = new byte[vals[i].length + (Order.ASCENDING == ord ? 1 : 2)];\n        OrderedBytes.encodeBlobCopy(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      byte[][] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals, Bytes.BYTES_COMPARATOR);\n      else Arrays.sort(sortedVals, Collections.reverseOrder(Bytes.BYTES_COMPARATOR));\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        byte[] decoded = OrderedBytes.decodeBlobCopy(pbr);\n        assertArrayEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n          sortedVals[i], decoded);\n      }\n    }\n\n    /*\n     * assert byte[] segments are serialized correctly.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[] a = new byte[3 + (Order.ASCENDING == ord ? 1 : 2) + 2];\n      PositionedByteRange buf =\n          new SimplePositionedByteRange(a, 1, 3 + (Order.ASCENDING == ord ? 1 : 2));\n      OrderedBytes.encodeBlobCopy(buf, \"foobarbaz\".getBytes(), 3, 3, ord);\n      buf.setPosition(0);\n      assertArrayEquals(\"bar\".getBytes(), OrderedBytes.decodeBlobCopy(buf));\n    }\n  }","id":12726,"modified_method":"/**\n   * Test BlobCopy encoding.\n   */\n  @Test\n  public void testBlobCopy() {\n    byte[][] vals =\n      { \"\".getBytes(), \"foo\".getBytes(), \"foobarbazbub\".getBytes(),\n        { (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa,\n          (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa, (byte) 0xaa },\n        { (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55,\n          (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55, (byte) 0x55 },\n      };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (byte[] val : vals) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        int expectedLen = val.length + (Order.ASCENDING == ord ? 1 : 2);\n        byte[] a = new byte[expectedLen + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, expectedLen + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          expectedLen, OrderedBytes.encodeBlobCopy(buf1, val, ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", expectedLen, buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", expectedLen, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", expectedLen, buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        assertArrayEquals(\"Deserialization failed.\", val, OrderedBytes.decodeBlobCopy(buf1));\n        assertEquals(\"Did not consume enough bytes.\", expectedLen, buf1.getPosition() - 1);\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        encoded[i] = new byte[vals[i].length + (Order.ASCENDING == ord ? 1 : 2)];\n        OrderedBytes.encodeBlobCopy(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      byte[][] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals, Bytes.BYTES_COMPARATOR);\n      else Arrays.sort(sortedVals, Collections.reverseOrder(Bytes.BYTES_COMPARATOR));\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        byte[] decoded = OrderedBytes.decodeBlobCopy(pbr);\n        assertArrayEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n          sortedVals[i], decoded);\n      }\n    }\n\n    /*\n     * assert byte[] segments are serialized correctly.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[] a = new byte[3 + (Order.ASCENDING == ord ? 1 : 2) + 2];\n      PositionedByteRange buf =\n          new SimplePositionedByteRange(a, 1, 3 + (Order.ASCENDING == ord ? 1 : 2));\n      OrderedBytes.encodeBlobCopy(buf, \"foobarbaz\".getBytes(), 3, 3, ord);\n      buf.setPosition(0);\n      assertArrayEquals(\"bar\".getBytes(), OrderedBytes.decodeBlobCopy(buf));\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Test integer encoding. Example input values come from reference wiki\n   * page.\n   */\n  @Test\n  public void testNumericInt() {\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < I_VALS.length; i++) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        byte[] a = new byte[I_LENGTHS[i] + 2];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, I_LENGTHS[i]);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          I_LENGTHS[i], OrderedBytes.encodeNumeric(buf1, I_VALS[i], ord));\n        assertEquals(\"Surprising serialized length.\", I_LENGTHS[i], buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", I_LENGTHS[i], OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", I_LENGTHS[i], buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        assertEquals(\"Deserialization failed.\",\n          I_VALS[i].longValue(), OrderedBytes.decodeNumericAsLong(buf1));\n        assertEquals(\"Did not consume enough bytes.\", I_LENGTHS[i], buf1.getPosition());\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[I_VALS.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < I_VALS.length; i++) {\n        encoded[i] = new byte[I_LENGTHS[i]];\n        OrderedBytes.encodeNumeric(pbr.set(encoded[i]), I_VALS[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Long[] sortedVals = Arrays.copyOf(I_VALS, I_VALS.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        long decoded = OrderedBytes.decodeNumericAsLong(pbr);\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n          sortedVals[i].longValue(), decoded);\n      }\n    }\n  }","id":12727,"modified_method":"/**\n   * Test integer encoding. Example input values come from reference wiki\n   * page.\n   */\n  @Test\n  public void testNumericInt() {\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < I_VALS.length; i++) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        byte[] a = new byte[I_LENGTHS[i] + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, I_LENGTHS[i] + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          I_LENGTHS[i], OrderedBytes.encodeNumeric(buf1, I_VALS[i], ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", I_LENGTHS[i], buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", I_LENGTHS[i], OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", I_LENGTHS[i], buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        assertEquals(\"Deserialization failed.\",\n          I_VALS[i].longValue(), OrderedBytes.decodeNumericAsLong(buf1));\n        assertEquals(\"Did not consume enough bytes.\", I_LENGTHS[i], buf1.getPosition() - 1);\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[I_VALS.length][];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < I_VALS.length; i++) {\n        encoded[i] = new byte[I_LENGTHS[i]];\n        OrderedBytes.encodeNumeric(pbr.set(encoded[i]), I_VALS[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Long[] sortedVals = Arrays.copyOf(I_VALS, I_VALS.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        pbr.set(encoded[i]);\n        long decoded = OrderedBytes.decodeNumericAsLong(pbr);\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n          sortedVals[i].longValue(), decoded);\n      }\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Test int32 encoding.\n   */\n  @Test\n  public void testInt32() {\n    Integer[] vals =\n      { Integer.MIN_VALUE, Integer.MIN_VALUE / 2, 0, Integer.MAX_VALUE / 2, Integer.MAX_VALUE };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        byte[] a = new byte[5 + 2];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, 5);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          5, OrderedBytes.encodeInt32(buf1, vals[i], ord));\n        assertEquals(\"Surprising serialized length.\", 5, buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", 5, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", 5, buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        assertEquals(\"Deserialization failed.\",\n          vals[i].intValue(), OrderedBytes.decodeInt32(buf1));\n        assertEquals(\"Did not consume enough bytes.\", 5, buf1.getPosition());\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][5];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        OrderedBytes.encodeInt32(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Integer[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        int decoded = OrderedBytes.decodeInt32(pbr.set(encoded[i]));\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            sortedVals[i].intValue(), decoded);\n      }\n    }\n  }","id":12728,"modified_method":"/**\n   * Test int32 encoding.\n   */\n  @Test\n  public void testInt32() {\n    Integer[] vals =\n      { Integer.MIN_VALUE, Integer.MIN_VALUE / 2, 0, Integer.MAX_VALUE / 2, Integer.MAX_VALUE };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        byte[] a = new byte[5 + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, 5 + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          5, OrderedBytes.encodeInt32(buf1, vals[i], ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", 5, buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", 5, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", 5, buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        assertEquals(\"Deserialization failed.\",\n          vals[i].intValue(), OrderedBytes.decodeInt32(buf1));\n        assertEquals(\"Did not consume enough bytes.\", 5, buf1.getPosition() - 1);\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][5];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        OrderedBytes.encodeInt32(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Integer[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        int decoded = OrderedBytes.decodeInt32(pbr.set(encoded[i]));\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            sortedVals[i].intValue(), decoded);\n      }\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Test int64 encoding.\n   */\n  @Test\n  public void testInt64() {\n    Long[] vals = { Long.MIN_VALUE, Long.MIN_VALUE / 2, 0L, Long.MAX_VALUE / 2, Long.MAX_VALUE };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        byte[] a = new byte[9 + 2];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, 9);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          9, OrderedBytes.encodeInt64(buf1, vals[i], ord));\n        assertEquals(\"Surprising serialized length.\", 9, buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", 9, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", 9, buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        assertEquals(\"Deserialization failed.\",\n          vals[i].longValue(), OrderedBytes.decodeInt64(buf1));\n        assertEquals(\"Did not consume enough bytes.\", 9, buf1.getPosition());\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][9];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        OrderedBytes.encodeInt64(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Long[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        long decoded = OrderedBytes.decodeInt64(pbr.set(encoded[i]));\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            sortedVals[i].longValue(), decoded);\n      }\n    }\n  }","id":12729,"modified_method":"/**\n   * Test int64 encoding.\n   */\n  @Test\n  public void testInt64() {\n    Long[] vals = { Long.MIN_VALUE, Long.MIN_VALUE / 2, 0L, Long.MAX_VALUE / 2, Long.MAX_VALUE };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        byte[] a = new byte[9 + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, 9 + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          9, OrderedBytes.encodeInt64(buf1, vals[i], ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", 9, buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", 9, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", 9, buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        assertEquals(\"Deserialization failed.\",\n          vals[i].longValue(), OrderedBytes.decodeInt64(buf1));\n        assertEquals(\"Did not consume enough bytes.\", 9, buf1.getPosition() - 1);\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][9];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        OrderedBytes.encodeInt64(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Long[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        long decoded = OrderedBytes.decodeInt64(pbr.set(encoded[i]));\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            sortedVals[i].longValue(), decoded);\n      }\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Test float64 encoding.\n   */\n  @Test\n  public void testFloat64() {\n    Double[] vals =\n      { Double.MIN_VALUE, Double.MIN_VALUE + 1.0, 0.0, Double.MAX_VALUE / 2.0, Double.MAX_VALUE };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 2-bytes larger than necessary and place our range over the center.\n        byte[] a = new byte[9 + 2];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, 9);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          9, OrderedBytes.encodeFloat64(buf1, vals[i], ord));\n        assertEquals(\"Surprising serialized length.\", 9, buf1.getPosition());\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(0);\n        assertEquals(\"Surprising return value.\", 9, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", 9, buf1.getPosition());\n\n        // verify decode\n        buf1.setPosition(0);\n        assertEquals(\"Deserialization failed.\",\n          Double.doubleToLongBits(vals[i].doubleValue()),\n          Double.doubleToLongBits(OrderedBytes.decodeFloat64(buf1)));\n        assertEquals(\"Did not consume enough bytes.\", 9, buf1.getPosition());\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][9];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        OrderedBytes.encodeFloat64(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Double[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        double decoded = OrderedBytes.decodeFloat64(pbr.set(encoded[i]));\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            Double.doubleToLongBits(sortedVals[i].doubleValue()),\n            Double.doubleToLongBits(decoded));\n      }\n    }\n  }","id":12730,"modified_method":"/**\n   * Test float64 encoding.\n   */\n  @Test\n  public void testFloat64() {\n    Double[] vals =\n      { Double.MIN_VALUE, Double.MIN_VALUE + 1.0, 0.0, Double.MAX_VALUE / 2.0, Double.MAX_VALUE };\n\n    /*\n     * assert encoded values match decoded values. encode into target buffer\n     * starting at an offset to detect over/underflow conditions.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      for (int i = 0; i < vals.length; i++) {\n        // allocate a buffer 3-bytes larger than necessary to detect over/underflow\n        byte[] a = new byte[9 + 3];\n        PositionedByteRange buf1 = new SimplePositionedByteRange(a, 1, 9 + 1);\n        buf1.setPosition(1);\n\n        // verify encode\n        assertEquals(\"Surprising return value.\",\n          9, OrderedBytes.encodeFloat64(buf1, vals[i], ord));\n        assertEquals(\"Broken test: serialization did not consume entire buffer.\",\n          buf1.getLength(), buf1.getPosition());\n        assertEquals(\"Surprising serialized length.\", 9, buf1.getPosition() - 1);\n        assertEquals(\"Buffer underflow.\", 0, a[0]);\n        assertEquals(\"Buffer underflow.\", 0, a[1]);\n        assertEquals(\"Buffer overflow.\", 0, a[a.length - 1]);\n\n        // verify skip\n        buf1.setPosition(1);\n        assertEquals(\"Surprising return value.\", 9, OrderedBytes.skip(buf1));\n        assertEquals(\"Did not skip enough bytes.\", 9, buf1.getPosition() - 1);\n\n        // verify decode\n        buf1.setPosition(1);\n        assertEquals(\"Deserialization failed.\",\n          Double.doubleToLongBits(vals[i].doubleValue()),\n          Double.doubleToLongBits(OrderedBytes.decodeFloat64(buf1)));\n        assertEquals(\"Did not consume enough bytes.\", 9, buf1.getPosition() - 1);\n      }\n    }\n\n    /*\n     * assert natural sort order is preserved by the codec.\n     */\n    for (Order ord : new Order[] { Order.ASCENDING, Order.DESCENDING }) {\n      byte[][] encoded = new byte[vals.length][9];\n      PositionedByteRange pbr = new SimplePositionedByteRange();\n      for (int i = 0; i < vals.length; i++) {\n        OrderedBytes.encodeFloat64(pbr.set(encoded[i]), vals[i], ord);\n      }\n\n      Arrays.sort(encoded, Bytes.BYTES_COMPARATOR);\n      Double[] sortedVals = Arrays.copyOf(vals, vals.length);\n      if (ord == Order.ASCENDING) Arrays.sort(sortedVals);\n      else Arrays.sort(sortedVals, Collections.reverseOrder());\n\n      for (int i = 0; i < sortedVals.length; i++) {\n        double decoded = OrderedBytes.decodeFloat64(pbr.set(encoded[i]));\n        assertEquals(\n          String.format(\n            \"Encoded representations do not preserve natural order: <%s>, <%s>, %s\",\n            sortedVals[i], decoded, ord),\n            Double.doubleToLongBits(sortedVals[i].doubleValue()),\n            Double.doubleToLongBits(decoded));\n      }\n    }\n  }","commit_id":"d0be32394774c5c9c57070fc104821e5155aa88f","url":"https://github.com/apache/hbase"},{"original_method":"/**\n\t * Concrete subclasses can override this to provide custom lookup behaviour\n\t * for <code>CrossReference<\/code>. This implementation delegates to the\n\t * injected LinkingService\n\t * \n\t * @return a list of <code>ICompletionProposal<\/code> matching the given\n\t *         assignment\n\t */\n\tprotected List<? extends ICompletionProposal> lookupCrossReference(CrossReference crossReference, EObject model,\n\t\t\tint offset) {\n\t\t\n\t\tList<ICompletionProposal> completionProposalList = new ArrayList<ICompletionProposal>();\n\n\t\tif (linkingService != null) {\n\t\t\tEObject semanticModel = NodeUtil.getNearestSemanticObject((AbstractNode) model);\n\t\t\tList<Pair<String, URI>> candidates = linkingService.getLinkCandidates(semanticModel, crossReference, \"\");\n\t\t\tfor (Pair<String, URI> candidate : candidates)\n\t\t\t\tcompletionProposalList.add(createCompletionProposal(candidate.getFirstElement(), offset));\n\t\t}\n\n\t\treturn completionProposalList;\n\t}","id":12731,"modified_method":"/**\n\t * Concrete subclasses can override this to provide custom lookup behaviour\n\t * for <code>CrossReference<\/code>. This implementation delegates to the\n\t * injected LinkingService\n\t * \n\t * @return a list of <code>ICompletionProposal<\/code> matching the given\n\t *         assignment\n\t */\n\tprotected List<? extends ICompletionProposal> lookupCrossReference(CrossReference crossReference, EObject model,\n\t\t\tint offset) {\n\t\t\n\t\tList<ICompletionProposal> completionProposalList = new ArrayList<ICompletionProposal>();\n\n\t\tif (linkingService != null) {\n\t\t\tEObject semanticModel = model instanceof AbstractNode ? NodeUtil.getNearestSemanticObject((AbstractNode) model) : model;\n\t\t\tList<Pair<String, URI>> candidates = linkingService.getLinkCandidates(semanticModel, crossReference, \"\");\n\t\t\tfor (Pair<String, URI> candidate : candidates) {\n\t\t\t\tcompletionProposalList.add(createCompletionProposal(candidate.getFirstElement(), offset));\n\t\t\t}\n\t\t}\n\n\t\treturn completionProposalList;\n\t}","commit_id":"b718fa96ce01401bef03b39142f7664a5e9b81ef","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * Concrete subclasses can override this to provide a more meaningful and sophisticated behaviour\n\t * whenever a list of ICompletionProposal's should be computed for simple <code>LexerRule<\/code> call's.\n\t * \n\t * This implementation returns one <code>ICompletionProposal<\/code> with a displayString composed\n\t * of the name of the containing rule plus the featurename of an optional assignment and at the end the name \n\t * of the given LexerRule. (e.i. ParserRuleName+AssignmentFeatureName+LexerRuleName)\n\t * \n\t * @param lexerRule the 'called' LexerRule instance\n\t * @param ruleCall the ruleCall for the provided lexerRule\n\t * @param offset an offset within the document for which completions should be computed\n\t * @return a computed list of <code>ICompletionProposal<\/code> for the given <code>LexerRule<\/code>\n\t */\n\tprotected List<? extends ICompletionProposal> doCompleteLexerRuleRuleCall(LexerRule lexerRule,RuleCall ruleCall, int offset) {\n\t\tParserRule containingParserRule = GrammarUtil.containingParserRule(ruleCall);\n\t\tAssignment containingAssignment = GrammarUtil.containingAssignment(ruleCall);\n\t\tString defaultDisplayString = containingParserRule.getName()\n\t\t\t\t+ (null != containingAssignment ? firstLetterCapitalized(containingAssignment.getFeature()) : \"\")\n\t\t\t\t+ lexerRule.getName();\n\t\treturn Collections.singletonList(createCompletionProposal(defaultDisplayString, offset));\n\t}","id":12732,"modified_method":"/**\n\t * Concrete subclasses can override this to provide a more meaningful and sophisticated behaviour\n\t * whenever a list of ICompletionProposal's should be computed for simple <code>LexerRule<\/code> call's.\n\t * \n\t * This implementation returns one <code>ICompletionProposal<\/code> with a displayString composed\n\t * of the name of the containing rule plus the featurename of an optional assignment and at the end the name \n\t * of the given LexerRule (e.i. ParserRuleName+AssignmentFeatureName+LexerRuleName) or {@link #getDefaultIntegerValue()} \n\t * if its <i>INT<\/i> based LexerRule.\n\t * \n\t * @param lexerRule the 'called' LexerRule instance\n\t * @param ruleCall the ruleCall for the provided lexerRule\n\t * @param offset an offset within the document for which completions should be computed\n\t * @return a computed list of <code>ICompletionProposal<\/code> for the given <code>LexerRule<\/code>\n\t */\n\tprotected List<? extends ICompletionProposal> doCompleteLexerRuleRuleCall(LexerRule lexerRule,RuleCall ruleCall, int offset) {\n\t\tParserRule containingParserRule = GrammarUtil.containingParserRule(ruleCall);\n\t\tAssignment containingAssignment = GrammarUtil.containingAssignment(ruleCall);\n\t\t\n\t\tString defaultDisplayString = containingParserRule.getName() + \n\t\t\t(null != containingAssignment ? firstLetterCapitalized(containingAssignment.getFeature()) : \"\") + lexerRule.getName();\n\t\t\n\t\tif (LEXER_RULE_INT.equalsIgnoreCase(lexerRule.getName())) {\n\t\t\tdefaultDisplayString=String.valueOf(getDefaultIntegerValue());\n\t\t} else if (LEXER_RULE_STRING.equalsIgnoreCase(lexerRule.getName())) {\n\t\t\tdefaultDisplayString=\"\\\"\"+defaultDisplayString+\"\\\"\";\n\t\t} \n\t\t\n\t\treturn Collections.singletonList(createCompletionProposal(defaultDisplayString, offset));\n\t}","commit_id":"b718fa96ce01401bef03b39142f7664a5e9b81ef","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void handleReflectionException(Exception ex) {\n\t\tif (ex instanceof NoSuchMethodException) {\n\t\t\tthrow new IllegalStateException(\"Method not found: \" + ex.getMessage());\n\t\t}\n\t\tif (ex instanceof IllegalAccessException) {\n\t\t\tthrow new IllegalStateException(\"Could not access method: \" + ex.getMessage());\n\t\t}\n\t\tif (ex instanceof InvocationTargetException) {\n\t\t\trethrowRuntimeException(((InvocationTargetException) ex).getTargetException());\n\t\t}\n\t\tif (ex instanceof RuntimeException) {\n\t\t\tthrow (RuntimeException) ex;\n\t\t}\n\t\thandleUnexpectedException(ex);\n\t}","id":12733,"modified_method":"private void handleReflectionException(Exception ex) {\n\t\tif (ex instanceof NoSuchMethodException) {\n\t\t\tthrow new IllegalStateException(\"Method not found: \" + ex.getMessage());\n\t\t}\n\t\tif (ex instanceof IllegalAccessException) {\n\t\t\tthrow new IllegalStateException(\"Could not access method: \" + ex.getMessage());\n\t\t}\n\t\tif (ex instanceof InvocationTargetException) {\n\t\t\trethrowRuntimeException(((InvocationTargetException) ex).getTargetException());\n\t\t}\n\t\tif (ex instanceof RuntimeException) {\n\t\t\tthrow (RuntimeException) ex;\n\t\t}\n\t\thandleUnexpectedException(ex);\n\t}","commit_id":"b718fa96ce01401bef03b39142f7664a5e9b81ef","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * computes the possible grammar elements following the one at the given\n\t * offset and calls the respective methods on the proposal provider.\n\t */\n\tpublic ICompletionProposal[] computeCompletionProposals(ITextViewer viewer, final int offset) {\n\t\tif (proposalProvider != null) {\n\t\t\tIDocument document = viewer.getDocument();\n\t\t\tif (document instanceof XtextDocument) {\n\n\t\t\t\tXtextDocument xtextDocument = (XtextDocument) document;\n\n\t\t\t\tCompositeNode rootNode = xtextDocument.readOnly(new UnitOfWork<CompositeNode>() {\n\t\t\t\t\tpublic CompositeNode exec(XtextResource resource) throws Exception {\n\t\t\t\t\t\tIParseResult parseResult = resource.getParseResult();\n\t\t\t\t\t\tAssert.isNotNull(parseResult);\n\t\t\t\t\t\treturn parseResult.getRootNode();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tAssert.isNotNull(rootNode);\n\n\t\t\t\t// last COMPLETE node element with associated grammar element\n\t\t\t\tAbstractNode lastCompleteNode = ParseTreeUtil.getLastCompleteNodeByOffset(rootNode, offset);\n\t\t\t\t// node at CURRENT cursor pos. with or without grammar element\n\t\t\t\tLeafNode currentLeafNode = (LeafNode) ParseTreeUtil.getCurrentNodeByOffset(rootNode, offset);\n\t\t\t\t// get associated grammar element\n\t\t\t\tAbstractElement grammarElement = ParseTreeUtil.getGrammarElementFromNode(lastCompleteNode);\n\n\t\t\t\tString prefix = viewer.getTextWidget().getText(currentLeafNode.getOffset(), offset);\n\n\t\t\t\tList<ICompletionProposal> completionProposalList = new ArrayList<ICompletionProposal>();\n\n\t\t\t\tSet<AbstractElement> calculatePossibleElementSet = calculatePossibleElementSet(lastCompleteNode,\n\t\t\t\t\t\tgrammarElement);\n\t\t\t\tfor (Iterator<AbstractElement> iterator = calculatePossibleElementSet.iterator(); iterator.hasNext();) {\n\t\t\t\t\tAbstractElement nextElement = iterator.next();\n\n\t\t\t\t\tList<EObject> resolvedElementOrRuleList = resolveElement(nextElement);\n\n\t\t\t\t\tcollectCompletionProposalList(resolvedElementOrRuleList, completionProposalList, xtextDocument,\n\t\t\t\t\t\t\tcurrentLeafNode, prefix, offset);\n\t\t\t\t}\n\n\t\t\t\tif (completionProposalList != null) {\n\t\t\t\t\tList<? extends ICompletionProposal> sortAndFilter = proposalProvider\n\t\t\t\t\t\t\t.sortAndFilter(completionProposalList);\n\t\t\t\t\treturn (ICompletionProposal[]) sortAndFilter.toArray(new ICompletionProposal[] {});\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":12734,"modified_method":"/**\n\t * computes the possible grammar elements following the one at the given\n\t * offset and calls the respective methods on the proposal provider.\n\t */\n\tpublic ICompletionProposal[] computeCompletionProposals(ITextViewer viewer, final int offset) {\n\t\tif (proposalProvider != null) {\n\t\t\tIDocument document = viewer.getDocument();\n\t\t\tif (document instanceof XtextDocument) {\n\n\t\t\t\tXtextDocument xtextDocument = (XtextDocument) document;\n\n\t\t\t\tCompositeNode rootNode = xtextDocument.readOnly(new UnitOfWork<CompositeNode>() {\n\t\t\t\t\tpublic CompositeNode exec(XtextResource resource) throws Exception {\n\t\t\t\t\t\tIParseResult parseResult = resource.getParseResult();\n\t\t\t\t\t\tAssert.isNotNull(parseResult);\n\t\t\t\t\t\treturn parseResult.getRootNode();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tAssert.isNotNull(rootNode);\n\n\t\t\t\t\n\t\t\t\t// last COMPLETE node element with associated grammar element\n\t\t\t\tAbstractNode lastCompleteNode = ParseTreeUtil.getLastCompleteNodeByOffset(rootNode, offset);\n\t\t\t\t// node at CURRENT cursor pos. with or without grammar element\n\t\t\t\tLeafNode currentLeafNode = (LeafNode) ParseTreeUtil.getCurrentNodeByOffset(rootNode, offset);\n\t\t\t\t// get associated grammar element\n\t\t\t\tAbstractElement grammarElement = ParseTreeUtil.getGrammarElementFromNode(lastCompleteNode);\n\n\t\t\t\tString prefix = viewer.getTextWidget().getCharCount()>0 ?\n\t\t\t\t\tviewer.getTextWidget().getText(currentLeafNode.getOffset(), offset<viewer.getTextWidget().getCharCount()?offset : \n\t\t\t\t\tviewer.getTextWidget().getCharCount()-1) : \"\";\n\n\t\t\t\tList<ICompletionProposal> completionProposalList = new ArrayList<ICompletionProposal>();\n\n\t\t\t\tSet<AbstractElement> calculatePossibleElementSet = calculatePossibleElementSet(lastCompleteNode,\n\t\t\t\t\t\tgrammarElement);\n\t\t\t\tfor (Iterator<AbstractElement> iterator = calculatePossibleElementSet.iterator(); iterator.hasNext();) {\n\t\t\t\t\tAbstractElement nextElement = iterator.next();\n\n\t\t\t\t\tList<EObject> resolvedElementOrRuleList = resolveElement(nextElement);\n\n\t\t\t\t\tcollectCompletionProposalList(resolvedElementOrRuleList, completionProposalList, xtextDocument,\n\t\t\t\t\t\t\tcurrentLeafNode, prefix, offset);\n\t\t\t\t}\n\n\t\t\t\tif (completionProposalList != null) {\n\t\t\t\t\tList<? extends ICompletionProposal> sortAndFilter = proposalProvider\n\t\t\t\t\t\t\t.sortAndFilter(completionProposalList);\n\t\t\t\t\treturn (ICompletionProposal[]) sortAndFilter.toArray(new ICompletionProposal[] {});\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"b718fa96ce01401bef03b39142f7664a5e9b81ef","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void handleUnexpectedException(Throwable ex) {\n\t\tIllegalStateException isex = new IllegalStateException(\"Unexpected exception thrown\");\n\t\tisex.initCause(ex);\n\t\tthrow isex;\n\t}","id":12735,"modified_method":"private void handleUnexpectedException(Throwable ex) {\n\t\tIllegalStateException isex = new IllegalStateException(\"Unexpected exception thrown\");\n\t\tisex.initCause(ex);\n\t\tthrow isex;\n\t}","commit_id":"b718fa96ce01401bef03b39142f7664a5e9b81ef","url":"https://github.com/eclipse/xtext"},{"original_method":"private void collectCompletionProposalList(List<EObject> resolvedElementOrRuleList,\n\t\t\tList<ICompletionProposal> completionProposalList, IDocument document, LeafNode currentLeafNode,\n\t\t\tString prefix, final int offset) {\n\t\tfor (Iterator<EObject> elementOrRuleIterator = resolvedElementOrRuleList.iterator(); elementOrRuleIterator\n\t\t\t\t.hasNext();) {\n\t\t\tEObject abstractElement = elementOrRuleIterator.next();\n\n\t\t\tif (abstractElement instanceof Keyword) {\n\t\t\t\tcompletionProposalList.addAll(proposalProvider.completeKeyword((Keyword) abstractElement,\n\t\t\t\t\t\tcurrentLeafNode, prefix, document, offset));\n\t\t\t}\n\t\t\telse if (abstractElement instanceof Assignment) {\n\n\t\t\t\tAssignment assignment = (Assignment) abstractElement;\n\n\t\t\t\tParserRule parserRule = GrammarUtil.containingParserRule(assignment);\n\n\t\t\t\tEObject model = ((CompositeNode) currentLeafNode.eContainer()).getElement();\n\t\t\t\t\n\t\t\t\tMethod method = findMethod(proposalProvider.getClass(), \"complete\"\n\t\t\t\t\t\t+ firstLetterCapitalized(parserRule.getName())\n\t\t\t\t\t\t+ firstLetterCapitalized(assignment.getFeature()), Assignment.class, null==model.getClass() ? EObject.class : model.getClass(),\n\t\t\t\t\t\tString.class, document.getClass(), int.class);\n\n\t\t\t\tCollection<? extends ICompletionProposal> assignmentProposalList = invokeMethod(method,\n\t\t\t\t\t\tproposalProvider, assignment, model, prefix, document, offset);\n\n\t\t\t\tif (null != assignmentProposalList) {\n\t\t\t\t\tcompletionProposalList.addAll(assignmentProposalList);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse if (abstractElement instanceof RuleCall) {\n\n\t\t\t\tEObject model = ((CompositeNode) currentLeafNode.eContainer()).getElement();\n\t\t\t\t\n\t\t\t\tList<? extends ICompletionProposal> ruleCallProposalList = this.proposalProvider.completeRuleCall(\n\t\t\t\t\t\t(RuleCall) abstractElement, model, prefix, document, offset);\n\n\t\t\t\tif (null != ruleCallProposalList) {\n\t\t\t\t\tcompletionProposalList.addAll(ruleCallProposalList);\n\t\t\t\t}\n\n\t\t\t\tAbstractRule calledRule = GrammarUtil.calledRule((RuleCall) abstractElement);\n\n\t\t\t\tif (calledRule.getType() != null) {\n\n\t\t\t\t\tTypeRef typeRef = calledRule.getType();\n\n\t\t\t\t\tMethod method = findMethod(proposalProvider.getClass(), \"complete\"\n\t\t\t\t\t\t\t+ firstLetterCapitalized(typeRef.getAlias()) + firstLetterCapitalized(typeRef.getName()),\n\t\t\t\t\t\t\tRuleCall.class, null==model.getClass() ? EObject.class : model.getClass(), String.class, document.getClass(), int.class);\n\n\t\t\t\t\tCollection<? extends ICompletionProposal> proposalList = invokeMethod(method, proposalProvider,\n\t\t\t\t\t\t\tabstractElement, model, prefix, document, offset);\n\n\t\t\t\t\tif (null != proposalList) {\n\t\t\t\t\t\tcompletionProposalList.addAll(proposalList);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":12736,"modified_method":"private void collectCompletionProposalList(List<EObject> resolvedElementOrRuleList,\n\t\t\tList<ICompletionProposal> completionProposalList, IDocument document, LeafNode currentLeafNode,\n\t\t\tString prefix, final int offset) {\n\t\tfor (Iterator<EObject> elementOrRuleIterator = resolvedElementOrRuleList.iterator(); elementOrRuleIterator\n\t\t\t\t.hasNext();) {\n\t\t\tEObject abstractElement = elementOrRuleIterator.next();\n\n\t\t\tif (abstractElement instanceof Keyword) {\n\t\t\t\tcompletionProposalList.addAll(proposalProvider.completeKeyword((Keyword) abstractElement,\n\t\t\t\t\t\tcurrentLeafNode, prefix, document, offset));\n\t\t\t}\n\t\t\telse if (abstractElement instanceof Assignment) {\n\n\t\t\t\tAssignment assignment = (Assignment) abstractElement;\n\n\t\t\t\tParserRule parserRule = GrammarUtil.containingParserRule(assignment);\n\n\t\t\t\tEObject model = null==((CompositeNode) currentLeafNode.eContainer()).getElement() ? \n\t\t\t\t\t\tcurrentLeafNode.eContainer()\n\t\t\t\t\t\t: ((CompositeNode) currentLeafNode.eContainer()).getElement();\n\t\t\t\t\n\t\t\t\tMethod method = findMethod(proposalProvider.getClass(), \"complete\"\n\t\t\t\t\t\t+ firstLetterCapitalized(parserRule.getName())\n\t\t\t\t\t\t+ firstLetterCapitalized(assignment.getFeature()), Assignment.class, model.getClass(),String.class, document.getClass(), int.class);\n\n\t\t\t\tCollection<? extends ICompletionProposal> assignmentProposalList = null==method ? \n\t\t\t\t\t\tnull :\n\t\t\t\t\t\tinvokeMethod(method,proposalProvider, assignment, model, prefix, document, offset);\n\n\t\t\t\tif (null != assignmentProposalList) {\n\t\t\t\t\tcompletionProposalList.addAll(assignmentProposalList);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse if (abstractElement instanceof RuleCall) {\n\n\t\t\t\tEObject model = null==((CompositeNode) currentLeafNode.eContainer()).getElement() ? \n\t\t\t\t\t\tcurrentLeafNode.eContainer()\n\t\t\t\t\t\t: ((CompositeNode) currentLeafNode.eContainer()).getElement();\n\t\t\t\t\n\t\t\t\tList<? extends ICompletionProposal> ruleCallProposalList = this.proposalProvider.completeRuleCall(\n\t\t\t\t\t\t(RuleCall) abstractElement, model, prefix, document, offset);\n\n\t\t\t\tif (null != ruleCallProposalList) {\n\t\t\t\t\tcompletionProposalList.addAll(ruleCallProposalList);\n\t\t\t\t}\n\n\t\t\t\tAbstractRule calledRule = GrammarUtil.calledRule((RuleCall) abstractElement);\n\n\t\t\t\tif (calledRule.getType() != null) {\n\n\t\t\t\t\tTypeRef typeRef = calledRule.getType();\n\n\t\t\t\t\tMethod method = findMethod(proposalProvider.getClass(), \"complete\"\n\t\t\t\t\t\t\t+ firstLetterCapitalized(typeRef.getAlias()) + firstLetterCapitalized(typeRef.getName()),\n\t\t\t\t\t\t\tRuleCall.class, model.getClass(), String.class, document.getClass(), int.class);\n\n\t\t\t\t\tCollection<? extends ICompletionProposal> proposalList = null==method ? \n\t\t\t\t\t\t\tnull :\n\t\t\t\t\t\t\tinvokeMethod(method, proposalProvider, abstractElement, model, prefix, document, offset);\n\n\t\t\t\t\tif (null != proposalList) {\n\t\t\t\t\t\tcompletionProposalList.addAll(proposalList);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"b718fa96ce01401bef03b39142f7664a5e9b81ef","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * Concrete subclasses can override this to provide custom lookup behaviour\n\t * for <code>CrossReference<\/code>. This implementation delegates to the\n\t * injected LinkingService\n\t * \n\t * @return a list of <code>ICompletionProposal<\/code> matching the given\n\t *         assignment\n\t */\n\tprotected List<? extends ICompletionProposal> lookupCrossReference(CrossReference crossReference, EObject model,\n\t\t\tint offset) {\n\t\t\n\t\tList<ICompletionProposal> completionProposalList = new ArrayList<ICompletionProposal>();\n\n\t\tif (linkingService != null) {\n\t\t\tEObject semanticModel = NodeUtil.getNearestSemanticObject((AbstractNode) model);\n\t\t\tList<Pair<String, URI>> candidates = linkingService.getLinkCandidates(semanticModel, crossReference, \"\");\n\t\t\tfor (Pair<String, URI> candidate : candidates)\n\t\t\t\tcompletionProposalList.add(createCompletionProposal(candidate.getFirstElement(), offset));\n\t\t}\n\n\t\treturn completionProposalList;\n\t}","id":12737,"modified_method":"/**\n\t * Concrete subclasses can override this to provide custom lookup behaviour\n\t * for <code>CrossReference<\/code>. This implementation delegates to the\n\t * injected LinkingService\n\t * \n\t * @return a list of <code>ICompletionProposal<\/code> matching the given\n\t *         assignment\n\t */\n\tprotected List<? extends ICompletionProposal> lookupCrossReference(CrossReference crossReference, EObject model,\n\t\t\tint offset) {\n\t\t\n\t\tList<ICompletionProposal> completionProposalList = new ArrayList<ICompletionProposal>();\n\n\t\tif (linkingService != null) {\n\t\t\tEObject semanticModel = model instanceof AbstractNode ? NodeUtil.getNearestSemanticObject((AbstractNode) model) : model;\n\t\t\tList<Pair<String, URI>> candidates = linkingService.getLinkCandidates(semanticModel, crossReference, \"\");\n\t\t\tfor (Pair<String, URI> candidate : candidates) {\n\t\t\t\tcompletionProposalList.add(createCompletionProposal(candidate.getFirstElement(), offset));\n\t\t\t}\n\t\t}\n\n\t\treturn completionProposalList;\n\t}","commit_id":"838da85fc2143aa0d681f0fcdeaf22a8718f1dfd","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * Concrete subclasses can override this to provide a more meaningful and sophisticated behaviour\n\t * whenever a list of ICompletionProposal's should be computed for simple <code>LexerRule<\/code> call's.\n\t * \n\t * This implementation returns one <code>ICompletionProposal<\/code> with a displayString composed\n\t * of the name of the containing rule plus the featurename of an optional assignment and at the end the name \n\t * of the given LexerRule. (e.i. ParserRuleName+AssignmentFeatureName+LexerRuleName)\n\t * \n\t * @param lexerRule the 'called' LexerRule instance\n\t * @param ruleCall the ruleCall for the provided lexerRule\n\t * @param offset an offset within the document for which completions should be computed\n\t * @return a computed list of <code>ICompletionProposal<\/code> for the given <code>LexerRule<\/code>\n\t */\n\tprotected List<? extends ICompletionProposal> doCompleteLexerRuleRuleCall(LexerRule lexerRule,RuleCall ruleCall, int offset) {\n\t\tParserRule containingParserRule = GrammarUtil.containingParserRule(ruleCall);\n\t\tAssignment containingAssignment = GrammarUtil.containingAssignment(ruleCall);\n\t\tString defaultDisplayString = containingParserRule.getName()\n\t\t\t\t+ (null != containingAssignment ? firstLetterCapitalized(containingAssignment.getFeature()) : \"\")\n\t\t\t\t+ lexerRule.getName();\n\t\treturn Collections.singletonList(createCompletionProposal(defaultDisplayString, offset));\n\t}","id":12738,"modified_method":"/**\n\t * Concrete subclasses can override this to provide a more meaningful and sophisticated behaviour\n\t * whenever a list of ICompletionProposal's should be computed for simple <code>LexerRule<\/code> call's.\n\t * \n\t * This implementation returns one <code>ICompletionProposal<\/code> with a displayString composed\n\t * of the name of the containing rule plus the featurename of an optional assignment and at the end the name \n\t * of the given LexerRule (e.i. ParserRuleName+AssignmentFeatureName+LexerRuleName) or {@link #getDefaultIntegerValue()} \n\t * if its <i>INT<\/i> based LexerRule.\n\t * \n\t * @param lexerRule the 'called' LexerRule instance\n\t * @param ruleCall the ruleCall for the provided lexerRule\n\t * @param offset an offset within the document for which completions should be computed\n\t * @return a computed list of <code>ICompletionProposal<\/code> for the given <code>LexerRule<\/code>\n\t */\n\tprotected List<? extends ICompletionProposal> doCompleteLexerRuleRuleCall(LexerRule lexerRule,RuleCall ruleCall, int offset) {\n\t\tParserRule containingParserRule = GrammarUtil.containingParserRule(ruleCall);\n\t\tAssignment containingAssignment = GrammarUtil.containingAssignment(ruleCall);\n\t\t\n\t\tString defaultDisplayString = containingParserRule.getName() + \n\t\t\t(null != containingAssignment ? firstLetterCapitalized(containingAssignment.getFeature()) : \"\") + lexerRule.getName();\n\t\t\n\t\tif (LEXER_RULE_INT.equalsIgnoreCase(lexerRule.getName())) {\n\t\t\tdefaultDisplayString=String.valueOf(getDefaultIntegerValue());\n\t\t} else if (LEXER_RULE_STRING.equalsIgnoreCase(lexerRule.getName())) {\n\t\t\tdefaultDisplayString=\"\\\"\"+defaultDisplayString+\"\\\"\";\n\t\t} \n\t\t\n\t\treturn Collections.singletonList(createCompletionProposal(defaultDisplayString, offset));\n\t}","commit_id":"838da85fc2143aa0d681f0fcdeaf22a8718f1dfd","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * computes the possible grammar elements following the one at the given\n\t * offset and calls the respective methods on the proposal provider.\n\t */\n\tpublic ICompletionProposal[] computeCompletionProposals(ITextViewer viewer, final int offset) {\n\t\tif (proposalProvider != null) {\n\t\t\tIDocument document = viewer.getDocument();\n\t\t\tif (document instanceof XtextDocument) {\n\n\t\t\t\tXtextDocument xtextDocument = (XtextDocument) document;\n\n\t\t\t\tCompositeNode rootNode = xtextDocument.readOnly(new UnitOfWork<CompositeNode>() {\n\t\t\t\t\tpublic CompositeNode exec(XtextResource resource) throws Exception {\n\t\t\t\t\t\tIParseResult parseResult = resource.getParseResult();\n\t\t\t\t\t\tAssert.isNotNull(parseResult);\n\t\t\t\t\t\treturn parseResult.getRootNode();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tAssert.isNotNull(rootNode);\n\n\t\t\t\t// last COMPLETE node element with associated grammar element\n\t\t\t\tAbstractNode lastCompleteNode = ParseTreeUtil.getLastCompleteNodeByOffset(rootNode, offset);\n\t\t\t\t// node at CURRENT cursor pos. with or without grammar element\n\t\t\t\tLeafNode currentLeafNode = (LeafNode) ParseTreeUtil.getCurrentNodeByOffset(rootNode, offset);\n\t\t\t\t// get associated grammar element\n\t\t\t\tAbstractElement grammarElement = ParseTreeUtil.getGrammarElementFromNode(lastCompleteNode);\n\n\t\t\t\tString prefix = viewer.getTextWidget().getText(currentLeafNode.getOffset(), offset);\n\n\t\t\t\tList<ICompletionProposal> completionProposalList = new ArrayList<ICompletionProposal>();\n\n\t\t\t\tSet<AbstractElement> calculatePossibleElementSet = calculatePossibleElementSet(lastCompleteNode,\n\t\t\t\t\t\tgrammarElement);\n\t\t\t\tfor (Iterator<AbstractElement> iterator = calculatePossibleElementSet.iterator(); iterator.hasNext();) {\n\t\t\t\t\tAbstractElement nextElement = iterator.next();\n\n\t\t\t\t\tList<EObject> resolvedElementOrRuleList = resolveElement(nextElement);\n\n\t\t\t\t\tcollectCompletionProposalList(resolvedElementOrRuleList, completionProposalList, xtextDocument,\n\t\t\t\t\t\t\tcurrentLeafNode, prefix, offset);\n\t\t\t\t}\n\n\t\t\t\tif (completionProposalList != null) {\n\t\t\t\t\tList<? extends ICompletionProposal> sortAndFilter = proposalProvider\n\t\t\t\t\t\t\t.sortAndFilter(completionProposalList);\n\t\t\t\t\treturn (ICompletionProposal[]) sortAndFilter.toArray(new ICompletionProposal[] {});\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":12739,"modified_method":"/**\n\t * computes the possible grammar elements following the one at the given\n\t * offset and calls the respective methods on the proposal provider.\n\t */\n\tpublic ICompletionProposal[] computeCompletionProposals(ITextViewer viewer, final int offset) {\n\t\tif (proposalProvider != null) {\n\t\t\tIDocument document = viewer.getDocument();\n\t\t\tif (document instanceof XtextDocument) {\n\n\t\t\t\tXtextDocument xtextDocument = (XtextDocument) document;\n\n\t\t\t\tCompositeNode rootNode = xtextDocument.readOnly(new UnitOfWork<CompositeNode>() {\n\t\t\t\t\tpublic CompositeNode exec(XtextResource resource) throws Exception {\n\t\t\t\t\t\tIParseResult parseResult = resource.getParseResult();\n\t\t\t\t\t\tAssert.isNotNull(parseResult);\n\t\t\t\t\t\treturn parseResult.getRootNode();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tAssert.isNotNull(rootNode);\n\n\t\t\t\t\n\t\t\t\t// last COMPLETE node element with associated grammar element\n\t\t\t\tAbstractNode lastCompleteNode = ParseTreeUtil.getLastCompleteNodeByOffset(rootNode, offset);\n\t\t\t\t// node at CURRENT cursor pos. with or without grammar element\n\t\t\t\tLeafNode currentLeafNode = (LeafNode) ParseTreeUtil.getCurrentNodeByOffset(rootNode, offset);\n\t\t\t\t// get associated grammar element\n\t\t\t\tAbstractElement grammarElement = ParseTreeUtil.getGrammarElementFromNode(lastCompleteNode);\n\n\t\t\t\tString prefix = viewer.getTextWidget().getCharCount()>0 ?\n\t\t\t\t\tviewer.getTextWidget().getText(currentLeafNode.getOffset(), offset<viewer.getTextWidget().getCharCount()?offset : \n\t\t\t\t\tviewer.getTextWidget().getCharCount()-1) : \"\";\n\n\t\t\t\tList<ICompletionProposal> completionProposalList = new ArrayList<ICompletionProposal>();\n\n\t\t\t\tSet<AbstractElement> calculatePossibleElementSet = calculatePossibleElementSet(lastCompleteNode,\n\t\t\t\t\t\tgrammarElement);\n\t\t\t\tfor (Iterator<AbstractElement> iterator = calculatePossibleElementSet.iterator(); iterator.hasNext();) {\n\t\t\t\t\tAbstractElement nextElement = iterator.next();\n\n\t\t\t\t\tList<EObject> resolvedElementOrRuleList = resolveElement(nextElement);\n\n\t\t\t\t\tcollectCompletionProposalList(resolvedElementOrRuleList, completionProposalList, xtextDocument,\n\t\t\t\t\t\t\tcurrentLeafNode, prefix, offset);\n\t\t\t\t}\n\n\t\t\t\tif (completionProposalList != null) {\n\t\t\t\t\tList<? extends ICompletionProposal> sortAndFilter = proposalProvider\n\t\t\t\t\t\t\t.sortAndFilter(completionProposalList);\n\t\t\t\t\treturn (ICompletionProposal[]) sortAndFilter.toArray(new ICompletionProposal[] {});\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"838da85fc2143aa0d681f0fcdeaf22a8718f1dfd","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void handleUnexpectedException(Throwable ex) {\n\t\tIllegalStateException isex = new IllegalStateException(\"Unexpected exception thrown\");\n\t\tisex.initCause(ex);\n\t\tthrow isex;\n\t}","id":12740,"modified_method":"private void handleUnexpectedException(Throwable ex) {\n\t\tIllegalStateException isex = new IllegalStateException(\"Unexpected exception thrown\");\n\t\tisex.initCause(ex);\n\t\tthrow isex;\n\t}","commit_id":"838da85fc2143aa0d681f0fcdeaf22a8718f1dfd","url":"https://github.com/eclipse/xtext"},{"original_method":"private void collectCompletionProposalList(List<EObject> resolvedElementOrRuleList,\n\t\t\tList<ICompletionProposal> completionProposalList, IDocument document, LeafNode currentLeafNode,\n\t\t\tString prefix, final int offset) {\n\t\tfor (Iterator<EObject> elementOrRuleIterator = resolvedElementOrRuleList.iterator(); elementOrRuleIterator\n\t\t\t\t.hasNext();) {\n\t\t\tEObject abstractElement = elementOrRuleIterator.next();\n\n\t\t\tif (abstractElement instanceof Keyword) {\n\t\t\t\tcompletionProposalList.addAll(proposalProvider.completeKeyword((Keyword) abstractElement,\n\t\t\t\t\t\tcurrentLeafNode, prefix, document, offset));\n\t\t\t}\n\t\t\telse if (abstractElement instanceof Assignment) {\n\n\t\t\t\tAssignment assignment = (Assignment) abstractElement;\n\n\t\t\t\tParserRule parserRule = GrammarUtil.containingParserRule(assignment);\n\n\t\t\t\tEObject model = ((CompositeNode) currentLeafNode.eContainer()).getElement();\n\t\t\t\t\n\t\t\t\tMethod method = findMethod(proposalProvider.getClass(), \"complete\"\n\t\t\t\t\t\t+ firstLetterCapitalized(parserRule.getName())\n\t\t\t\t\t\t+ firstLetterCapitalized(assignment.getFeature()), Assignment.class, null==model.getClass() ? EObject.class : model.getClass(),\n\t\t\t\t\t\tString.class, document.getClass(), int.class);\n\n\t\t\t\tCollection<? extends ICompletionProposal> assignmentProposalList = invokeMethod(method,\n\t\t\t\t\t\tproposalProvider, assignment, model, prefix, document, offset);\n\n\t\t\t\tif (null != assignmentProposalList) {\n\t\t\t\t\tcompletionProposalList.addAll(assignmentProposalList);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse if (abstractElement instanceof RuleCall) {\n\n\t\t\t\tEObject model = ((CompositeNode) currentLeafNode.eContainer()).getElement();\n\t\t\t\t\n\t\t\t\tList<? extends ICompletionProposal> ruleCallProposalList = this.proposalProvider.completeRuleCall(\n\t\t\t\t\t\t(RuleCall) abstractElement, model, prefix, document, offset);\n\n\t\t\t\tif (null != ruleCallProposalList) {\n\t\t\t\t\tcompletionProposalList.addAll(ruleCallProposalList);\n\t\t\t\t}\n\n\t\t\t\tAbstractRule calledRule = GrammarUtil.calledRule((RuleCall) abstractElement);\n\n\t\t\t\tif (calledRule.getType() != null) {\n\n\t\t\t\t\tTypeRef typeRef = calledRule.getType();\n\n\t\t\t\t\tMethod method = findMethod(proposalProvider.getClass(), \"complete\"\n\t\t\t\t\t\t\t+ firstLetterCapitalized(typeRef.getAlias()) + firstLetterCapitalized(typeRef.getName()),\n\t\t\t\t\t\t\tRuleCall.class, null==model.getClass() ? EObject.class : model.getClass(), String.class, document.getClass(), int.class);\n\n\t\t\t\t\tCollection<? extends ICompletionProposal> proposalList = invokeMethod(method, proposalProvider,\n\t\t\t\t\t\t\tabstractElement, model, prefix, document, offset);\n\n\t\t\t\t\tif (null != proposalList) {\n\t\t\t\t\t\tcompletionProposalList.addAll(proposalList);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":12741,"modified_method":"private void collectCompletionProposalList(List<EObject> resolvedElementOrRuleList,\n\t\t\tList<ICompletionProposal> completionProposalList, IDocument document, LeafNode currentLeafNode,\n\t\t\tString prefix, final int offset) {\n\t\tfor (Iterator<EObject> elementOrRuleIterator = resolvedElementOrRuleList.iterator(); elementOrRuleIterator\n\t\t\t\t.hasNext();) {\n\t\t\tEObject abstractElement = elementOrRuleIterator.next();\n\n\t\t\tif (abstractElement instanceof Keyword) {\n\t\t\t\tcompletionProposalList.addAll(proposalProvider.completeKeyword((Keyword) abstractElement,\n\t\t\t\t\t\tcurrentLeafNode, prefix, document, offset));\n\t\t\t}\n\t\t\telse if (abstractElement instanceof Assignment) {\n\n\t\t\t\tAssignment assignment = (Assignment) abstractElement;\n\n\t\t\t\tParserRule parserRule = GrammarUtil.containingParserRule(assignment);\n\n\t\t\t\tEObject model = null==((CompositeNode) currentLeafNode.eContainer()).getElement() ? \n\t\t\t\t\t\tcurrentLeafNode.eContainer()\n\t\t\t\t\t\t: ((CompositeNode) currentLeafNode.eContainer()).getElement();\n\t\t\t\t\n\t\t\t\tMethod method = findMethod(proposalProvider.getClass(), \"complete\"\n\t\t\t\t\t\t+ firstLetterCapitalized(parserRule.getName())\n\t\t\t\t\t\t+ firstLetterCapitalized(assignment.getFeature()), Assignment.class, model.getClass(),String.class, document.getClass(), int.class);\n\n\t\t\t\tCollection<? extends ICompletionProposal> assignmentProposalList = null==method ? \n\t\t\t\t\t\tnull :\n\t\t\t\t\t\tinvokeMethod(method,proposalProvider, assignment, model, prefix, document, offset);\n\n\t\t\t\tif (null != assignmentProposalList) {\n\t\t\t\t\tcompletionProposalList.addAll(assignmentProposalList);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse if (abstractElement instanceof RuleCall) {\n\n\t\t\t\tEObject model = null==((CompositeNode) currentLeafNode.eContainer()).getElement() ? \n\t\t\t\t\t\tcurrentLeafNode.eContainer()\n\t\t\t\t\t\t: ((CompositeNode) currentLeafNode.eContainer()).getElement();\n\t\t\t\t\n\t\t\t\tList<? extends ICompletionProposal> ruleCallProposalList = this.proposalProvider.completeRuleCall(\n\t\t\t\t\t\t(RuleCall) abstractElement, model, prefix, document, offset);\n\n\t\t\t\tif (null != ruleCallProposalList) {\n\t\t\t\t\tcompletionProposalList.addAll(ruleCallProposalList);\n\t\t\t\t}\n\n\t\t\t\tAbstractRule calledRule = GrammarUtil.calledRule((RuleCall) abstractElement);\n\n\t\t\t\tif (calledRule.getType() != null) {\n\n\t\t\t\t\tTypeRef typeRef = calledRule.getType();\n\n\t\t\t\t\tMethod method = findMethod(proposalProvider.getClass(), \"complete\"\n\t\t\t\t\t\t\t+ firstLetterCapitalized(typeRef.getAlias()) + firstLetterCapitalized(typeRef.getName()),\n\t\t\t\t\t\t\tRuleCall.class, model.getClass(), String.class, document.getClass(), int.class);\n\n\t\t\t\t\tCollection<? extends ICompletionProposal> proposalList = null==method ? \n\t\t\t\t\t\t\tnull :\n\t\t\t\t\t\t\tinvokeMethod(method, proposalProvider, abstractElement, model, prefix, document, offset);\n\n\t\t\t\t\tif (null != proposalList) {\n\t\t\t\t\t\tcompletionProposalList.addAll(proposalList);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"838da85fc2143aa0d681f0fcdeaf22a8718f1dfd","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void handleReflectionException(Exception ex) {\n\t\tif (ex instanceof NoSuchMethodException) {\n\t\t\tthrow new IllegalStateException(\"Method not found: \" + ex.getMessage());\n\t\t}\n\t\tif (ex instanceof IllegalAccessException) {\n\t\t\tthrow new IllegalStateException(\"Could not access method: \" + ex.getMessage());\n\t\t}\n\t\tif (ex instanceof InvocationTargetException) {\n\t\t\trethrowRuntimeException(((InvocationTargetException) ex).getTargetException());\n\t\t}\n\t\tif (ex instanceof RuntimeException) {\n\t\t\tthrow (RuntimeException) ex;\n\t\t}\n\t\thandleUnexpectedException(ex);\n\t}","id":12742,"modified_method":"private void handleReflectionException(Exception ex) {\n\t\tif (ex instanceof NoSuchMethodException) {\n\t\t\tthrow new IllegalStateException(\"Method not found: \" + ex.getMessage());\n\t\t}\n\t\tif (ex instanceof IllegalAccessException) {\n\t\t\tthrow new IllegalStateException(\"Could not access method: \" + ex.getMessage());\n\t\t}\n\t\tif (ex instanceof InvocationTargetException) {\n\t\t\trethrowRuntimeException(((InvocationTargetException) ex).getTargetException());\n\t\t}\n\t\tif (ex instanceof RuntimeException) {\n\t\t\tthrow (RuntimeException) ex;\n\t\t}\n\t\thandleUnexpectedException(ex);\n\t}","commit_id":"838da85fc2143aa0d681f0fcdeaf22a8718f1dfd","url":"https://github.com/eclipse/xtext"},{"original_method":"public void fillComponents(UIContainer tofill, ViewParameters viewparams,\n\t\t\tComponentChecker checker) {\n\t\tValidationAccount va = null;\n\t\tif (viewparams instanceof ValidationViewParams) {\n\t\t\t//get the bean\n\t\t\tValidationViewParams vvp = (ValidationViewParams) viewparams;\n\t\t\tif (vvp.tokenId == null || \"\".equals(vvp.tokenId)) {\n\t\t\t\ttml.addMessage(new TargettedMessage(\"msg.noCode\", new Object[]{}, TargettedMessage.SEVERITY_ERROR));\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlog.debug(\"getting token: \" + vvp.tokenId);\n\t\t\tva = validationLogic.getVaLidationAcountBytoken(vvp.tokenId);\n\t\t\tif (va == null) {\n\t\t\t\tObject[] args = new Object[]{ vvp.tokenId};\n\t\t\t\ttml.addMessage(new TargettedMessage(\"msg.noSuchValidation\", args, TargettedMessage.SEVERITY_ERROR));\n\t\t\t\treturn;\n\t\t\t} else if (ValidationAccount.STATUS_CONFIRMED.equals((va.getStatus()))) {\n\t\t\t\tObject[] args = new Object[]{ vvp.tokenId};\n\t\t\t\ttml.addMessage(new TargettedMessage(\"msg.alreadyValidated\", args, TargettedMessage.SEVERITY_ERROR));\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t//with no VP we need to exit\n\t\t\ttml.addMessage(new TargettedMessage(\"msg.noCode\", new Object[]{}, TargettedMessage.SEVERITY_ERROR));\n\t\t\treturn;\n\t\t}\n\n\t\t\n\n\t\ttry {\n\t\t\tUser u = userDirectoryService.getUser(EntityReference.getIdFromRef(va.getUserId()));\n\t\t\t\n\t\t\tUIOutput.make(tofill, \"email\", u.getEmail());\n\n\t\t\t//user who added this person\n\t\t\tUser addedBy = u.getCreatedBy();\n\t\t\t\n\t\t\t//we need some values to fill in\n\t\t\tObject[] args = new Object[]{\n\t\t\t\t\tserverConfigurationService.getString(\"ui.service\", \"Sakai\"),\n\t\t\t\t\taddedBy.getDisplayName(),\n\t\t\t\t\taddedBy.getEmail()\n\t\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\tUIMessage.make(tofill, \"welcome1\", \"validate.welcome1\", args);\n\t\t\tUIMessage.make(tofill, \"welcome\", \"validate.welcome\", args);\n\t\t\tUIMessage.make(tofill, \"validate.imnew\", \"validate.imnew\", args);\n\t\t\t\n\t\t\t//we need to know what sites their a member of:\n\t\t\tSet<String> groups = authzGroupService.getAuthzGroupsIsAllowed(EntityReference.getIdFromRef(va.getUserId()), \"site.visit\", null);\n\t\t\tIterator<String> git = groups.iterator();\n\t\t\t//UIBranchContainer list = UIBranchContainer.make(tofill, \"sites:\");\n\t\t\twhile (git.hasNext()) {\n\t\t\t\tString groupRef = git.next();\n\t\t\t\tString groupId = EntityReference.getIdFromRef(groupRef);\n\t\t\t\tlog.debug(\"groupId is \" + groupId);\n\t\t\t\ttry {\n\t\t\t\t\tSite s = siteService.getSite(groupId);\n\t\t\t\t\tUIBranchContainer list =  UIBranchContainer.make(tofill, \"siteListItem:\", groupId);\n\t\t\t\t\tUIOutput.make(list, \"siteName\", s.getTitle());\n\t\t\t\t} catch (IdUnusedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t//details form\n\t\t\tUIForm detailsForm = UIForm.make(tofill, \"setDetailsForm\");\n\t\t\t\n\t\t\tUIMessage.make(detailsForm, \"claim\", \"validate.claim\", args);\n\t\t\tString otp =  \"accountValidationLocator.\" + va.getId();\n\t\t\t\n\t\t\tUIOutput.make(detailsForm, \"eid\", u.getDisplayId());\n\t\t\tUIInput.make(detailsForm, \"firstName\", otp + \".firstName\", u.getFirstName());\n\t\t\tUIInput.make(detailsForm, \"surName\", otp + \".surname\", u.getLastName());\n\t\t\n\t\t\tUIBranchContainer row1 = UIBranchContainer.make(detailsForm, \"passrow1:\");\n\t\t\tUIInput.make(row1, \"password1\", otp + \".password\");\n\t\t\t\n\t\t\tlog.debug(\"account status: \" + va.getAccountStatus());\t\n\t\t\t\n\t\t\tif (ValidationAccount.ACCOUNT_STATUS_NEW == va.getAccountStatus() || ValidationAccount.ACCOUNT_STATUS_LEGACY_NOPASS == va.getAccountStatus()\n\t\t\t\t\t|| ValidationAccount.ACCOUNT_STATUS_PASSWORD_RESET == va.getAccountStatus()) {\n\t\t\t\tlog.debug(\"this is a new account render the second password box\");\n\t\t\t\tUIBranchContainer row2 = UIBranchContainer.make(detailsForm, \"passrow2:\");\n\t\t\t\tUIInput.make(row2, \"password2\", otp + \".password2\");\n\t\t\t}\n\t\t\t\n\t\t\tUICommand.make(detailsForm, \"addDetailsSub\", UIMessage.make(\"submit.new.account\"), \"accountValidationLocator.validateAccount\");\n\t\t\tdetailsForm.parameters.add(new UIELBinding(otp + \".userId\", va.getUserId()));\n\n\t\t\t//the claim form\n\t\t\tUIMessage.make(tofill, \"validate.alreadyhave\",  \"validate.alreadyhave\", args);\n\t\t\tUIForm claimForm = UIForm.make(tofill, \"claimAccountForm\");\n\t\t\t\n\t\t\tUIMessage.make(claimForm, \"validate.loginexisting\",  \"validate.loginexisting\", args);\n\t\t\tUIInput.make(claimForm, \"userName\", \"claimLocator.new_1.userEid\");\n\t\t\tUIInput.make(claimForm, \"password\", \"claimLocator.new_1.password1\");\n\t\t\tUICommand.make(claimForm, \"submitClaim\", UIMessage.make(\"submit.login\"), \"claimLocator.claimAccount\");\n\t\t\tclaimForm.parameters.add(new UIELBinding(\"claimLocator.new_1.validationToken\", va.getValidationToken()));\n\n\n\t\t} catch (UserNotDefinedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\n\t\t}\n\n\n\n\t}","id":12743,"modified_method":"public void fillComponents(UIContainer tofill, ViewParameters viewparams,\n\t\t\tComponentChecker checker) {\n\t\tValidationAccount va = null;\n\t\tif (viewparams instanceof ValidationViewParams) {\n\t\t\t//get the bean\n\t\t\tValidationViewParams vvp = (ValidationViewParams) viewparams;\n\t\t\tif (vvp.tokenId == null || \"\".equals(vvp.tokenId)) {\n\t\t\t\ttml.addMessage(new TargettedMessage(\"msg.noCode\", new Object[]{}, TargettedMessage.SEVERITY_ERROR));\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlog.debug(\"getting token: \" + vvp.tokenId);\n\t\t\tva = validationLogic.getVaLidationAcountBytoken(vvp.tokenId);\n\t\t\tif (va == null) {\n\t\t\t\tObject[] args = new Object[]{ vvp.tokenId};\n\t\t\t\ttml.addMessage(new TargettedMessage(\"msg.noSuchValidation\", args, TargettedMessage.SEVERITY_ERROR));\n\t\t\t\treturn;\n\t\t\t} else if (ValidationAccount.STATUS_CONFIRMED.equals((va.getStatus()))) {\n\t\t\t\tObject[] args = new Object[]{ vvp.tokenId};\n\t\t\t\ttml.addMessage(new TargettedMessage(\"msg.alreadyValidated\", args, TargettedMessage.SEVERITY_ERROR));\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t//with no VP we need to exit\n\t\t\ttml.addMessage(new TargettedMessage(\"msg.noCode\", new Object[]{}, TargettedMessage.SEVERITY_ERROR));\n\t\t\treturn;\n\t\t}\n\n\t\t\n\n\t\ttry {\n\t\t\tUser u = userDirectoryService.getUser(EntityReference.getIdFromRef(va.getUserId()));\n\t\t\t\n\t\t\tUIOutput.make(tofill, \"email\", u.getEmail());\n\n\t\t\t//user who added this person\n\t\t\tUser addedBy = u.getCreatedBy();\n\t\t\t\n\t\t\t//we need some values to fill in\n\t\t\tObject[] args = new Object[]{\n\t\t\t\t\tserverConfigurationService.getString(\"ui.service\", \"Sakai\"),\n\t\t\t\t\taddedBy.getDisplayName(),\n\t\t\t\t\taddedBy.getEmail()\n\t\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\t//is this a password reset?\n\t\t\tboolean isReset = false;\n\t\t\tif (va.getAccountStatus() == ValidationAccount.ACCOUNT_STATUS_PASSWORD_RESET) {\n\t\t\t\tisReset = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (!isReset) {\n\t\t\t\tUIMessage.make(tofill, \"welcome1\", \"validate.welcome1\", args);\n\t\t\t\tUIMessage.make(tofill, \"welcome\", \"validate.welcome\", args);\n\t\t\t\tUIMessage.make(tofill, \"validate.imnew\", \"validate.imnew\", args);\n\t\t\t\t//merge form\n\t\t\t\tUIMessage.make(tofill, \"validate.alreadyhave\",  \"validate.alreadyhave\", args);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tUIMessage.make(tofill, \"welcome1\", \"validate.welcome1.reset\", args);\n\t\t\t\tUIMessage.make(tofill, \"welcome\", \"validate.welcome.reset\", args);\n\t\t\t\tUIMessage.make(tofill, \"validate.imnew\", \"validate.oneaccount\", args);\n\t\t\t\t\n\t\t\t\t//merge form\n\t\t\t\tUIMessage.make(tofill, \"validate.alreadyhave\",  \"validate.alreadyhave.reset\", args);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t//we need to know what sites their a member of:\n\t\t\tSet<String> groups = authzGroupService.getAuthzGroupsIsAllowed(EntityReference.getIdFromRef(va.getUserId()), \"site.visit\", null);\n\t\t\tIterator<String> git = groups.iterator();\n\t\t\t//UIBranchContainer list = UIBranchContainer.make(tofill, \"sites:\");\n\t\t\twhile (git.hasNext()) {\n\t\t\t\tString groupRef = git.next();\n\t\t\t\tString groupId = EntityReference.getIdFromRef(groupRef);\n\t\t\t\tlog.debug(\"groupId is \" + groupId);\n\t\t\t\ttry {\n\t\t\t\t\tSite s = siteService.getSite(groupId);\n\t\t\t\t\tUIBranchContainer list =  UIBranchContainer.make(tofill, \"siteListItem:\", groupId);\n\t\t\t\t\tUIOutput.make(list, \"siteName\", s.getTitle());\n\t\t\t\t} catch (IdUnusedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t//details form\n\t\t\tUIForm detailsForm = UIForm.make(tofill, \"setDetailsForm\");\n\t\t\t\n\t\t\tif (isReset) {\n\t\t\t\tUIMessage.make(detailsForm, \"claim\", \"validate.reset\", args);\n\t\t\t\tUICommand.make(detailsForm, \"addDetailsSub\", UIMessage.make(\"submit.new.reset\"), \"accountValidationLocator.validateAccount\");\n\t\t\t} else {\n\t\t\t\tUIMessage.make(detailsForm, \"claim\", \"validate.claim\", args);\n\t\t\t\tUICommand.make(detailsForm, \"addDetailsSub\", UIMessage.make(\"submit.new.account\"), \"accountValidationLocator.validateAccount\");\n\t\t\t}\n\t\t\t\n\t\t\tString otp =  \"accountValidationLocator.\" + va.getId();\n\t\t\t\n\t\t\tUIOutput.make(detailsForm, \"eid\", u.getDisplayId());\n\t\t\tUIInput.make(detailsForm, \"firstName\", otp + \".firstName\", u.getFirstName());\n\t\t\tUIInput.make(detailsForm, \"surName\", otp + \".surname\", u.getLastName());\n\t\t\n\t\t\tUIBranchContainer row1 = UIBranchContainer.make(detailsForm, \"passrow1:\");\n\t\t\tUIInput.make(row1, \"password1\", otp + \".password\");\n\t\t\t\n\t\t\tlog.debug(\"account status: \" + va.getAccountStatus());\t\n\t\t\t\n\t\t\tif (ValidationAccount.ACCOUNT_STATUS_NEW == va.getAccountStatus() || ValidationAccount.ACCOUNT_STATUS_LEGACY_NOPASS == va.getAccountStatus()\n\t\t\t\t\t|| ValidationAccount.ACCOUNT_STATUS_PASSWORD_RESET == va.getAccountStatus()) {\n\t\t\t\tlog.debug(\"this is a new account render the second password box\");\n\t\t\t\tUIBranchContainer row2 = UIBranchContainer.make(detailsForm, \"passrow2:\");\n\t\t\t\tUIInput.make(row2, \"password2\", otp + \".password2\");\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tdetailsForm.parameters.add(new UIELBinding(otp + \".userId\", va.getUserId()));\n\n\t\t\t//the claim form\n\t\t\t\n\t\t\tUIForm claimForm = UIForm.make(tofill, \"claimAccountForm\");\n\t\t\t\n\t\t\tif (!isReset) {\n\t\t\t\tUIMessage.make(claimForm, \"validate.loginexisting\",  \"validate.loginexisting\", args);\n\t\t\t} else {\n\t\t\t\tUIMessage.make(claimForm, \"validate.loginexisting\",  \"validate.loginexisting.reset\", args);\n\t\t\t}\n\t\t\tUIInput.make(claimForm, \"userName\", \"claimLocator.new_1.userEid\");\n\t\t\tUIInput.make(claimForm, \"password\", \"claimLocator.new_1.password1\");\n\t\t\tUICommand.make(claimForm, \"submitClaim\", UIMessage.make(\"submit.login\"), \"claimLocator.claimAccount\");\n\t\t\tclaimForm.parameters.add(new UIELBinding(\"claimLocator.new_1.validationToken\", va.getValidationToken()));\n\n\n\t\t} catch (UserNotDefinedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\n\t\t}\n\n\n\n\t}","commit_id":"ee24a9a54bf58e8c2a2bca75cf321fafb1003878","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private List<ConfigItem> generateConfig(LoadBalancerConfigCommand cmd) {\n        LinkedList<ConfigItem> cfg = new LinkedList<>();\n\n        String routerIp = cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);\n        LoadBalancerConfigurator cfgtr = new HAProxyConfigurator();\n        String[][] rules = cfgtr.generateFwRules(cmd);\n\n        String[] addRules = rules[LoadBalancerConfigurator.ADD];\n        String[] removeRules = rules[LoadBalancerConfigurator.REMOVE];\n        String[] statRules = rules[LoadBalancerConfigurator.STATS];\n\n        String args = \"\";\n        StringBuilder sb = new StringBuilder();\n        if (addRules.length > 0) {\n            for (int i = 0; i < addRules.length; i++) {\n                sb.append(addRules[i]).append(',');\n            }\n            args += \" -a \" + sb.toString();\n        }\n\n        sb = new StringBuilder();\n        if (removeRules.length > 0) {\n            for (int i = 0; i < removeRules.length; i++) {\n                sb.append(removeRules[i]).append(',');\n            }\n\n            args += \" -d \" + sb.toString();\n        }\n\n        sb = new StringBuilder();\n        if (statRules.length > 0) {\n            for (int i = 0; i < statRules.length; i++) {\n                sb.append(statRules[i]).append(',');\n            }\n\n            args += \" -s \" + sb.toString();\n        }\n\n        if (cmd.getVpcId() == null) {\n            args = \" -i \" + routerIp + args;\n            cfg.add(new ConfigItem(VRScripts.LB, args));\n        } else {\n            args = \" -i \" + cmd.getNic().getIp() + args;\n            cfg.add(new ConfigItem(VRScripts.VPC_LB, args));\n        }\n\n        return cfg;\n    }","id":12744,"modified_method":"private List<ConfigItem> generateConfig(LoadBalancerConfigCommand cmd) {\n        LinkedList<ConfigItem> cfg = new LinkedList<>();\n\n        String routerIp = cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);\n        LoadBalancerConfigurator cfgtr = new HAProxyConfigurator();\n\n        String[] config = cfgtr.generateConfiguration(cmd);\n        String tmpCfgFileContents = \"\";\n        for (int i = 0; i < config.length; i++) {\n            tmpCfgFileContents += config[i];\n            tmpCfgFileContents += \"\\n\";\n        }\n\n        String tmpCfgFilePath = \"/etc/haproxy/\";\n        String tmpCfgFileName = \"haproxy.cfg.new\";\n        cfg.add(new ConfigItem(tmpCfgFilePath, tmpCfgFileName, tmpCfgFileContents));\n\n        String[][] rules = cfgtr.generateFwRules(cmd);\n\n        String[] addRules = rules[LoadBalancerConfigurator.ADD];\n        String[] removeRules = rules[LoadBalancerConfigurator.REMOVE];\n        String[] statRules = rules[LoadBalancerConfigurator.STATS];\n\n        String args = \"\";\n        StringBuilder sb = new StringBuilder();\n        if (addRules.length > 0) {\n            for (int i = 0; i < addRules.length; i++) {\n                sb.append(addRules[i]).append(',');\n            }\n            args += \" -a \" + sb.toString();\n        }\n\n        sb = new StringBuilder();\n        if (removeRules.length > 0) {\n            for (int i = 0; i < removeRules.length; i++) {\n                sb.append(removeRules[i]).append(',');\n            }\n\n            args += \" -d \" + sb.toString();\n        }\n\n        sb = new StringBuilder();\n        if (statRules.length > 0) {\n            for (int i = 0; i < statRules.length; i++) {\n                sb.append(statRules[i]).append(',');\n            }\n\n            args += \" -s \" + sb.toString();\n        }\n\n        if (cmd.getVpcId() == null) {\n            args = \" -i \" + routerIp + args;\n            cfg.add(new ConfigItem(VRScripts.LB, args));\n        } else {\n            args = \" -i \" + cmd.getNic().getIp() + args;\n            cfg.add(new ConfigItem(VRScripts.VPC_LB, args));\n        }\n\n        return cfg;\n    }","commit_id":"711b3083701e8b9852714e1817a022f039bf3235","url":"https://github.com/apache/cloudstack"},{"original_method":"public ConfigItem(String script, String args) {\n            this.script = script;\n            this.args = args;\n        }","id":12745,"modified_method":"public ConfigItem(String script, String args) {\n            this.script = script;\n            this.args = args;\n            this.isFile = false;\n        }","commit_id":"711b3083701e8b9852714e1817a022f039bf3235","url":"https://github.com/apache/cloudstack"},{"original_method":"public Answer executeRequest(final NetworkElementCommand cmd) {\n        try {\n            ExecutionResult rc = _vrDeployer.prepareCommand(cmd);\n            if (!rc.isSuccess()) {\n                s_logger.error(\"Failed to prepare VR command due to \" + rc.getDetails());\n                return new Answer(cmd, false, rc.getDetails());\n            }\n\n            if (cmd instanceof SetPortForwardingRulesVpcCommand) {\n                return execute((SetPortForwardingRulesVpcCommand)cmd);\n            } else if (cmd instanceof SetPortForwardingRulesCommand) {\n                return execute((SetPortForwardingRulesCommand)cmd);\n            } else if (cmd instanceof SetStaticRouteCommand) {\n                return execute((SetStaticRouteCommand)cmd);\n            } else if (cmd instanceof SetStaticNatRulesCommand) {\n                return execute((SetStaticNatRulesCommand)cmd);\n            } else if (cmd instanceof LoadBalancerConfigCommand) {\n                return execute((LoadBalancerConfigCommand)cmd);\n            } else if (cmd instanceof SavePasswordCommand) {\n                return execute((SavePasswordCommand)cmd);\n            } else if (cmd instanceof DhcpEntryCommand) {\n                return execute((DhcpEntryCommand)cmd);\n            } else if (cmd instanceof CreateIpAliasCommand) {\n                return execute((CreateIpAliasCommand)cmd);\n            } else if (cmd instanceof DnsMasqConfigCommand) {\n                return execute((DnsMasqConfigCommand)cmd);\n            } else if (cmd instanceof DeleteIpAliasCommand) {\n                return execute((DeleteIpAliasCommand)cmd);\n            } else if (cmd instanceof VmDataCommand) {\n                return execute((VmDataCommand)cmd);\n            } else if (cmd instanceof CheckRouterCommand) {\n                return execute((CheckRouterCommand)cmd);\n            } else if (cmd instanceof SetFirewallRulesCommand) {\n                return execute((SetFirewallRulesCommand)cmd);\n            } else if (cmd instanceof BumpUpPriorityCommand) {\n                return execute((BumpUpPriorityCommand)cmd);\n            } else if (cmd instanceof RemoteAccessVpnCfgCommand) {\n                return execute((RemoteAccessVpnCfgCommand)cmd);\n            } else if (cmd instanceof VpnUsersCfgCommand) {\n                return execute((VpnUsersCfgCommand)cmd);\n            } else if (cmd instanceof GetDomRVersionCmd) {\n                return execute((GetDomRVersionCmd)cmd);\n            } else if (cmd instanceof Site2SiteVpnCfgCommand) {\n                return execute((Site2SiteVpnCfgCommand)cmd);\n            } else if (cmd instanceof CheckS2SVpnConnectionsCommand) {\n                return execute((CheckS2SVpnConnectionsCommand)cmd);\n            } else if (cmd instanceof SetMonitorServiceCommand) {\n                return execute((SetMonitorServiceCommand)cmd);\n            } else if (cmd instanceof SetupGuestNetworkCommand) {\n                return execute((SetupGuestNetworkCommand)cmd);\n            } else if (cmd instanceof SetNetworkACLCommand) {\n                return execute((SetNetworkACLCommand)cmd);\n            } else if (cmd instanceof SetSourceNatCommand) {\n                return execute((SetSourceNatCommand)cmd);\n            } else if (cmd instanceof IpAssocVpcCommand) {\n                return execute((IpAssocVpcCommand)cmd);\n            } else if (cmd instanceof IpAssocCommand) {\n                return execute((IpAssocCommand)cmd);\n            } else {\n                return Answer.createUnsupportedCommandAnswer(cmd);\n            }\n        } catch (final IllegalArgumentException e) {\n            return new Answer(cmd, false, e.getMessage());\n        } finally {\n            ExecutionResult rc = _vrDeployer.cleanupCommand(cmd);\n            if (!rc.isSuccess()) {\n                s_logger.error(\"Failed to cleanup VR command due to \" + rc.getDetails());\n            }\n        }\n    }","id":12746,"modified_method":"public Answer executeRequest(final NetworkElementCommand cmd) {\n        try {\n            ExecutionResult rc = _vrDeployer.prepareCommand(cmd);\n            if (!rc.isSuccess()) {\n                s_logger.error(\"Failed to prepare VR command due to \" + rc.getDetails());\n                return new Answer(cmd, false, rc.getDetails());\n            }\n\n            if (cmd.isQuery()) {\n                return executeQueryCommand(cmd);\n            }\n\n            List<ConfigItem> cfg;\n            if (cmd instanceof SetPortForwardingRulesVpcCommand) {\n                cfg = generateConfig((SetPortForwardingRulesVpcCommand)cmd);\n            } else if (cmd instanceof SetPortForwardingRulesCommand) {\n                cfg = generateConfig((SetPortForwardingRulesCommand)cmd);\n            } else if (cmd instanceof SetStaticRouteCommand) {\n                cfg = generateConfig((SetStaticRouteCommand)cmd);\n            } else if (cmd instanceof SetStaticNatRulesCommand) {\n                cfg = generateConfig((SetStaticNatRulesCommand)cmd);\n            } else if (cmd instanceof LoadBalancerConfigCommand) {\n                cfg = generateConfig((LoadBalancerConfigCommand)cmd);\n            } else if (cmd instanceof SavePasswordCommand) {\n                cfg = generateConfig((SavePasswordCommand)cmd);\n            } else if (cmd instanceof DhcpEntryCommand) {\n                cfg = generateConfig((DhcpEntryCommand)cmd);\n            } else if (cmd instanceof CreateIpAliasCommand) {\n                cfg = generateConfig((CreateIpAliasCommand)cmd);\n            } else if (cmd instanceof DnsMasqConfigCommand) {\n                cfg = generateConfig((DnsMasqConfigCommand)cmd);\n            } else if (cmd instanceof DeleteIpAliasCommand) {\n                cfg = generateConfig((DeleteIpAliasCommand)cmd);\n            } else if (cmd instanceof VmDataCommand) {\n                cfg = generateConfig((VmDataCommand)cmd);\n            } else if (cmd instanceof SetFirewallRulesCommand) {\n                cfg = generateConfig((SetFirewallRulesCommand)cmd);\n            } else if (cmd instanceof BumpUpPriorityCommand) {\n                cfg = generateConfig((BumpUpPriorityCommand)cmd);\n            } else if (cmd instanceof RemoteAccessVpnCfgCommand) {\n                cfg = generateConfig((RemoteAccessVpnCfgCommand)cmd);\n            } else if (cmd instanceof VpnUsersCfgCommand) {\n                cfg = generateConfig((VpnUsersCfgCommand)cmd);\n            } else if (cmd instanceof Site2SiteVpnCfgCommand) {\n                cfg = generateConfig((Site2SiteVpnCfgCommand)cmd);\n            } else if (cmd instanceof SetMonitorServiceCommand) {\n                cfg = generateConfig((SetMonitorServiceCommand)cmd);\n            } else if (cmd instanceof SetupGuestNetworkCommand) {\n                cfg = generateConfig((SetupGuestNetworkCommand)cmd);\n            } else if (cmd instanceof SetNetworkACLCommand) {\n                cfg = generateConfig((SetNetworkACLCommand)cmd);\n            } else if (cmd instanceof SetSourceNatCommand) {\n                cfg = generateConfig((SetSourceNatCommand)cmd);\n            } else if (cmd instanceof IpAssocCommand) {\n                cfg = generateConfig((IpAssocCommand)cmd);\n            } else {\n                return Answer.createUnsupportedCommandAnswer(cmd);\n            }\n\n            return applyConfig(cmd, cfg);\n        } catch (final IllegalArgumentException e) {\n            return new Answer(cmd, false, e.getMessage());\n        } finally {\n            ExecutionResult rc = _vrDeployer.cleanupCommand(cmd);\n            if (!rc.isSuccess()) {\n                s_logger.error(\"Failed to cleanup VR command due to \" + rc.getDetails());\n            }\n        }\n    }","commit_id":"711b3083701e8b9852714e1817a022f039bf3235","url":"https://github.com/apache/cloudstack"},{"original_method":"private Answer execute(SetNetworkACLCommand cmd) {\n        List<ConfigItem> cfg = generateConfig(cmd);\n        return applyConfig(cmd, cfg);\n    }","id":12747,"modified_method":"private Answer executeQueryCommand(NetworkElementCommand cmd) {\n        if (cmd instanceof CheckRouterCommand) {\n            return execute((CheckRouterCommand)cmd);\n        } else if (cmd instanceof GetDomRVersionCmd) {\n            return execute((GetDomRVersionCmd)cmd);\n        } else if (cmd instanceof CheckS2SVpnConnectionsCommand) {\n            return execute((CheckS2SVpnConnectionsCommand)cmd);\n        } else {\n            s_logger.error(\"Unknown query command in VirtualRoutingResource!\");\n            return Answer.createUnsupportedCommandAnswer(cmd);\n        }\n    }","commit_id":"711b3083701e8b9852714e1817a022f039bf3235","url":"https://github.com/apache/cloudstack"},{"original_method":"private Answer applyConfig(NetworkElementCommand cmd, List<ConfigItem> cfg) {\n        int answersCount = cmd.getAnswersCount();\n        assert (cfg.size() <= answersCount) : \"Why there are more commands than answers?\";\n\n        if (cfg.size() == 1 && answersCount == 1) {\n            ConfigItem c = cfg.get(0);\n            ExecutionResult result = _vrDeployer.executeInVR(cmd.getRouterAccessIp(), c.getScript(), c.getArgs());\n            return new Answer(cmd, result.isSuccess(), result.getDetails());\n        }\n\n        ExecutionResult[] results = new ExecutionResult[answersCount];\n        String[] resultsString = new String[answersCount];\n        boolean finalResult = true;\n        int i = 0, j;\n        for (ConfigItem c : cfg) {\n            results[i] = _vrDeployer.executeInVR(cmd.getRouterAccessIp(), c.getScript(), c.getArgs());\n            if (c.getInfo() != null) {\n                if (results[i].isSuccess()) {\n                    results[i].setDetails(c.getInfo() + \" - success: \" + results[i].getDetails());\n                } else {\n                    results[i].setDetails(c.getInfo() + \" - failed: \" + results[i].getDetails());\n                }\n            }\n            i ++;\n        }\n        i = 0; j = 0;\n        while (j < answersCount) {\n            resultsString[j] = results[i].getDetails();\n            if (!results[i].isSuccess()) {\n                finalResult = false;\n            }\n            // Fill the resultsString with the last result of execution, mostly in 1:n\n            if (i < cfg.size() - 1) {\n                i ++;\n            }\n            j ++;\n        }\n        return new GroupAnswer(cmd, finalResult, answersCount, resultsString);\n    }","id":12748,"modified_method":"private Answer applyConfig(NetworkElementCommand cmd, List<ConfigItem> cfg) {\n        int answersCount = cmd.getAnswersCount();\n\n        // Use the last answer as final answer\n        if (answersCount == 1) {\n            ExecutionResult result = new ExecutionResult(false, \"Not executed\");\n            for (ConfigItem c : cfg) {\n                result = applyConfigToVR(cmd, c);\n                if (!result.isSuccess()) {\n                    break;\n                }\n            }\n            return new Answer(cmd, result.isSuccess(), result.getDetails());\n        }\n\n        ExecutionResult[] results = new ExecutionResult[answersCount];\n        String[] resultsString = new String[answersCount];\n        boolean finalResult = true;\n        int i = 0, j;\n        for (ConfigItem c : cfg) {\n            results[i] = applyConfigToVR(cmd, c);\n            if (c.getInfo() != null) {\n                if (results[i].isSuccess()) {\n                    results[i].setDetails(c.getInfo() + \" - success: \" + results[i].getDetails());\n                } else {\n                    results[i].setDetails(c.getInfo() + \" - failed: \" + results[i].getDetails());\n                }\n            }\n            i ++;\n        }\n        i = 0; j = 0;\n        while (j < answersCount) {\n            resultsString[j] = results[i].getDetails();\n            if (!results[i].isSuccess()) {\n                finalResult = false;\n            }\n            // Fill the resultsString with the last result of execution, mostly in 1:n\n            if (i < cfg.size() - 1) {\n                i ++;\n            }\n            j ++;\n        }\n        return new GroupAnswer(cmd, finalResult, answersCount, resultsString);\n    }","commit_id":"711b3083701e8b9852714e1817a022f039bf3235","url":"https://github.com/apache/cloudstack"},{"original_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Outstanding Notifications\");\n        feed.setDescription(\"Outstanding Notifications\");\n        feed.setLink(getUrlBase() + \"notification/browse?acktype=unack\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            NotificationModel model = new NotificationModel();\n            Notification[] notifications = model.getOutstandingNotices();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (Notification notification : notifications) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                entry.setTitle(notification.getTextMessage());\n                entry.setLink(getUrlBase() + \"notification/detail.jsp?notice=\" + notification.getId());\n                entry.setPublishedDate(notification.getTimeSent());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get current outages\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","id":12749,"modified_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Notifications\");\n        feed.setDescription(\"Notifications\");\n        feed.setLink(getUrlBase() + \"notification/browse\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            NotificationModel model = new NotificationModel();\n            Notification[] notifications = model.allNotifications();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (Notification notification : notifications) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                if (notification.getTimeReplied() == null) {\n                    entry.setTitle(sanitizeTitle(notification.getTextMessage()));\n                } else {\n                    entry.setTitle(sanitizeTitle(notification.getTextMessage()) + \" (acknowledged)\");\n                }\n                entry.setLink(getUrlBase() + \"notification/detail.jsp?notice=\" + notification.getId());\n                entry.setPublishedDate(notification.getTimeSent());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get outstanding notifications\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","commit_id":"a9dc87bc9294591a1f79348da936e1ffabe4677c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Nodes with Outages\");\n        feed.setDescription(\"OpenNMS Nodes with Outages\");\n        feed.setLink(getUrlBase() + \"outage/current.jsp\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            OutageModel model = new OutageModel();    \n            OutageSummary[] summaries = model.getCurrentOutageSummaries();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (OutageSummary summary : summaries) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                entry.setTitle(\"outage: \" + summary.getNodeLabel());\n                entry.setLink(getUrlBase() + \"element/node.jsp?node=\" + summary.getNodeId());\n                entry.setPublishedDate(summary.getTimeDown());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get current outages\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","id":12750,"modified_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Nodes with Outages\");\n        feed.setDescription(\"OpenNMS Nodes with Outages\");\n        feed.setLink(getUrlBase() + \"outage/current.jsp\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            OutageModel model = new OutageModel();    \n            OutageSummary[] summaries = model.getAllOutageSummaries();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (OutageSummary summary : summaries) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                if (summary.getTimeUp() == null) {\n                    entry.setTitle(\"outage: \" + sanitizeTitle(summary.getNodeLabel()));\n                } else {\n                    entry.setTitle(\"outage: \" + sanitizeTitle(summary.getNodeLabel()) + \" (resolved)\");\n                }\n                entry.setLink(getUrlBase() + \"element/node.jsp?node=\" + summary.getNodeId());\n                entry.setPublishedDate(summary.getTimeDown());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get current outages\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","commit_id":"a9dc87bc9294591a1f79348da936e1ffabe4677c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Outstanding Notifications\");\n        feed.setDescription(\"Outstanding Notifications\");\n        feed.setLink(getUrlBase() + \"notification/browse?acktype=unack\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            NotificationModel model = new NotificationModel();\n            Notification[] notifications = model.getOutstandingNotices();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (Notification notification : notifications) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                entry.setTitle(notification.getTextMessage());\n                entry.setLink(getUrlBase() + \"notification/detail.jsp?notice=\" + notification.getId());\n                entry.setPublishedDate(notification.getTimeSent());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get current outages\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","id":12751,"modified_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Notifications\");\n        feed.setDescription(\"Notifications\");\n        feed.setLink(getUrlBase() + \"notification/browse\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            NotificationModel model = new NotificationModel();\n            Notification[] notifications = model.allNotifications();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (Notification notification : notifications) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                if (notification.getTimeReplied() == null) {\n                    entry.setTitle(sanitizeTitle(notification.getTextMessage()));\n                } else {\n                    entry.setTitle(sanitizeTitle(notification.getTextMessage()) + \" (acknowledged)\");\n                }\n                entry.setLink(getUrlBase() + \"notification/detail.jsp?notice=\" + notification.getId());\n                entry.setPublishedDate(notification.getTimeSent());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get outstanding notifications\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","commit_id":"23fcf71f0332a33bdd3d7436067f97b0b1f9b0ba","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Nodes with Outages\");\n        feed.setDescription(\"OpenNMS Nodes with Outages\");\n        feed.setLink(getUrlBase() + \"outage/current.jsp\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            OutageModel model = new OutageModel();    \n            OutageSummary[] summaries = model.getCurrentOutageSummaries();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (OutageSummary summary : summaries) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                entry.setTitle(\"outage: \" + summary.getNodeLabel());\n                entry.setLink(getUrlBase() + \"element/node.jsp?node=\" + summary.getNodeId());\n                entry.setPublishedDate(summary.getTimeDown());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get current outages\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","id":12752,"modified_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Nodes with Outages\");\n        feed.setDescription(\"OpenNMS Nodes with Outages\");\n        feed.setLink(getUrlBase() + \"outage/current.jsp\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            OutageModel model = new OutageModel();    \n            OutageSummary[] summaries = model.getAllOutageSummaries();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (OutageSummary summary : summaries) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                if (summary.getTimeUp() == null) {\n                    entry.setTitle(\"outage: \" + sanitizeTitle(summary.getNodeLabel()));\n                } else {\n                    entry.setTitle(\"outage: \" + sanitizeTitle(summary.getNodeLabel()) + \" (resolved)\");\n                }\n                entry.setLink(getUrlBase() + \"element/node.jsp?node=\" + summary.getNodeId());\n                entry.setPublishedDate(summary.getTimeDown());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get current outages\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","commit_id":"23fcf71f0332a33bdd3d7436067f97b0b1f9b0ba","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Outstanding Notifications\");\n        feed.setDescription(\"Outstanding Notifications\");\n        feed.setLink(getUrlBase() + \"notification/browse?acktype=unack\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            NotificationModel model = new NotificationModel();\n            Notification[] notifications = model.getOutstandingNotices();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (Notification notification : notifications) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                entry.setTitle(notification.getTextMessage());\n                entry.setLink(getUrlBase() + \"notification/detail.jsp?notice=\" + notification.getId());\n                entry.setPublishedDate(notification.getTimeSent());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get current outages\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","id":12753,"modified_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Notifications\");\n        feed.setDescription(\"Notifications\");\n        feed.setLink(getUrlBase() + \"notification/browse\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            NotificationModel model = new NotificationModel();\n            Notification[] notifications = model.allNotifications();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (Notification notification : notifications) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                if (notification.getTimeReplied() == null) {\n                    entry.setTitle(sanitizeTitle(notification.getTextMessage()));\n                } else {\n                    entry.setTitle(sanitizeTitle(notification.getTextMessage()) + \" (acknowledged)\");\n                }\n                entry.setLink(getUrlBase() + \"notification/detail.jsp?notice=\" + notification.getId());\n                entry.setPublishedDate(notification.getTimeSent());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get outstanding notifications\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","commit_id":"e9ab3903ab4ab91f1a496113775d72c87c060a8e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Nodes with Outages\");\n        feed.setDescription(\"OpenNMS Nodes with Outages\");\n        feed.setLink(getUrlBase() + \"outage/current.jsp\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            OutageModel model = new OutageModel();    \n            OutageSummary[] summaries = model.getCurrentOutageSummaries();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (OutageSummary summary : summaries) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                entry.setTitle(\"outage: \" + summary.getNodeLabel());\n                entry.setLink(getUrlBase() + \"element/node.jsp?node=\" + summary.getNodeId());\n                entry.setPublishedDate(summary.getTimeDown());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get current outages\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","id":12754,"modified_method":"public SyndFeed getFeed() {\n        SyndFeed feed = new SyndFeedImpl();\n\n        feed.setTitle(\"Nodes with Outages\");\n        feed.setDescription(\"OpenNMS Nodes with Outages\");\n        feed.setLink(getUrlBase() + \"outage/current.jsp\");\n\n        ArrayList<SyndEntry> entries = new ArrayList<SyndEntry>();\n\n        try {\n            OutageModel model = new OutageModel();    \n            OutageSummary[] summaries = model.getAllOutageSummaries();\n\n            SyndEntry entry;\n            \n            int count = 0;\n            for (OutageSummary summary : summaries) {\n                if (count++ == this.getMaxEntries()) {\n                    break;\n                }\n                entry = new SyndEntryImpl();\n                if (summary.getTimeUp() == null) {\n                    entry.setTitle(\"outage: \" + sanitizeTitle(summary.getNodeLabel()));\n                } else {\n                    entry.setTitle(\"outage: \" + sanitizeTitle(summary.getNodeLabel()) + \" (resolved)\");\n                }\n                entry.setLink(getUrlBase() + \"element/node.jsp?node=\" + summary.getNodeId());\n                entry.setPublishedDate(summary.getTimeDown());\n                \n                entries.add(entry);\n            }\n        } catch (SQLException e) {\n            log().warn(\"unable to get current outages\", e);\n        }\n        \n        feed.setEntries(entries);\n        return feed;\n    }","commit_id":"e9ab3903ab4ab91f1a496113775d72c87c060a8e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void createDataFormatConfigurationSource(String packageName, DataFormatModel model, String overrideDataFormatName) throws MojoFailureException {\n        final JavaClassSource javaClass = Roaster.create(JavaClassSource.class);\n\n        int pos = model.getJavaType().lastIndexOf(\".\");\n        String name = model.getJavaType().substring(pos + 1);\n        name = name.replace(\"DataFormat\", \"DataFormatConfiguration\");\n        javaClass.setPackage(packageName).setName(name);\n\n        String doc = \"Generated by camel-package-maven-plugin - do not edit this file!\";\n        if (!Strings.isBlank(model.getDescription())) {\n            doc = model.getDescription() + \"\\n\\n\" + doc;\n        }\n        javaClass.getJavaDoc().setFullText(doc);\n\n        String prefix = \"camel.dataformat.\" + (overrideDataFormatName != null ? overrideDataFormatName : model.getName());\n        // make sure prefix is in lower case\n        prefix = prefix.toLowerCase(Locale.US);\n        javaClass.addAnnotation(\"org.springframework.boot.context.properties.ConfigurationProperties\").setStringValue(\"prefix\", prefix);\n\n        for (DataFormatOptionModel option : model.getDataFormatOptions()) {\n            // skip option with name id in data format as we do not need that\n            if (\"id\".equals(option.getName())) {\n                continue;\n            }\n            String type = option.getJavaType();\n            type = getSimpleJavaType(type);\n\n            PropertySource<JavaClassSource> prop = javaClass.addProperty(type, option.getName());\n            if (\"true\".equals(option.getDeprecated())) {\n                prop.getField().addAnnotation(Deprecated.class);\n                prop.getAccessor().addAnnotation(Deprecated.class);\n                prop.getMutator().addAnnotation(Deprecated.class);\n                // DeprecatedConfigurationProperty must be on getter when deprecated\n                prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);\n            }\n            if (!Strings.isBlank(option.getDescription())) {\n                prop.getField().getJavaDoc().setFullText(option.getDescription());\n            }\n            if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                    prop.getField().setStringInitializer(option.getDefaultValue());\n                } else if (\"integer\".equals(option.getType()) || \"boolean\".equals(option.getType())) {\n                    String value = option.getDefaultValue();\n                    if (\"long\".equals(option.getJavaType()) && !value.toUpperCase().endsWith(\"L\")) {\n                        value = value + \"L\";\n                    }\n                    prop.getField().setLiteralInitializer(value);\n                } else if (!Strings.isBlank(option.getEnumValues())) {\n                    String enumShortName = type.substring(type.lastIndexOf(\".\") + 1);\n                    prop.getField().setLiteralInitializer(enumShortName + \".\" + option.getDefaultValue());\n                    javaClass.addImport(model.getJavaType());\n                }\n            }\n        }\n\n        sortImports(javaClass);\n\n        String fileName = packageName.replaceAll(\"\\\\.\", \"\\\\/\") + \"/\" + name + \".java\";\n\n        writeSourceIfChanged(javaClass, fileName);\n    }","id":12755,"modified_method":"private void createDataFormatConfigurationSource(String packageName, DataFormatModel model, String overrideDataFormatName) throws MojoFailureException {\n        final JavaClassSource javaClass = Roaster.create(JavaClassSource.class);\n\n        int pos = model.getJavaType().lastIndexOf(\".\");\n        String name = model.getJavaType().substring(pos + 1);\n        name = name.replace(\"DataFormat\", \"DataFormatConfiguration\");\n        javaClass.setPackage(packageName).setName(name);\n\n        String doc = \"Generated by camel-package-maven-plugin - do not edit this file!\";\n        if (!Strings.isBlank(model.getDescription())) {\n            doc = model.getDescription() + \"\\n\\n\" + doc;\n        }\n        javaClass.getJavaDoc().setFullText(doc);\n\n        String prefix = \"camel.dataformat.\" + (overrideDataFormatName != null ? overrideDataFormatName : model.getName());\n        // make sure prefix is in lower case\n        prefix = prefix.toLowerCase(Locale.US);\n        javaClass.addAnnotation(\"org.springframework.boot.context.properties.ConfigurationProperties\").setStringValue(\"prefix\", prefix);\n\n        for (DataFormatOptionModel option : model.getDataFormatOptions()) {\n            // skip option with name id in data format as we do not need that\n            if (\"id\".equals(option.getName())) {\n                continue;\n            }\n            String type = option.getJavaType();\n            type = getSimpleJavaType(type);\n\n            PropertySource<JavaClassSource> prop = javaClass.addProperty(type, option.getName());\n            if (\"true\".equals(option.getDeprecated())) {\n                prop.getField().addAnnotation(Deprecated.class);\n                prop.getAccessor().addAnnotation(Deprecated.class);\n                prop.getMutator().addAnnotation(Deprecated.class);\n                // DeprecatedConfigurationProperty must be on getter when deprecated\n                prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);\n            }\n            if (!Strings.isBlank(option.getDescription())) {\n                prop.getField().getJavaDoc().setFullText(option.getDescription());\n            }\n            if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                    prop.getField().setStringInitializer(option.getDefaultValue());\n                } else if (\"integer\".equals(option.getType()) || \"boolean\".equals(option.getType())) {\n                    prop.getField().setLiteralInitializer(option.getDefaultValue());\n                } else if (!Strings.isBlank(option.getEnumValues())) {\n                    String enumShortName = type.substring(type.lastIndexOf(\".\") + 1);\n                    prop.getField().setLiteralInitializer(enumShortName + \".\" + option.getDefaultValue());\n                    javaClass.addImport(model.getJavaType());\n                }\n            }\n        }\n\n        sortImports(javaClass);\n\n        String fileName = packageName.replaceAll(\"\\\\.\", \"\\\\/\") + \"/\" + name + \".java\";\n\n        writeSourceIfChanged(javaClass, fileName);\n    }","commit_id":"76f7914ad8dfff15676d833ca148b9fb955ed84a","url":"https://github.com/apache/camel"},{"original_method":"private void createComponentConfigurationSource(String packageName, ComponentModel model, String overrideComponentName) throws MojoFailureException {\n        final JavaClassSource javaClass = Roaster.create(JavaClassSource.class);\n\n        int pos = model.getJavaType().lastIndexOf(\".\");\n        String name = model.getJavaType().substring(pos + 1);\n        name = name.replace(\"Component\", \"ComponentConfiguration\");\n        javaClass.setPackage(packageName).setName(name);\n\n        String doc = \"Generated by camel-package-maven-plugin - do not edit this file!\";\n        if (!Strings.isBlank(model.getDescription())) {\n            doc = model.getDescription() + \"\\n\\n\" + doc;\n        }\n        javaClass.getJavaDoc().setFullText(doc);\n\n        String prefix = \"camel.component.\" + (overrideComponentName != null ? overrideComponentName : model.getScheme());\n        // make sure prefix is in lower case\n        prefix = prefix.toLowerCase(Locale.US);\n        javaClass.addAnnotation(\"org.springframework.boot.context.properties.ConfigurationProperties\").setStringValue(\"prefix\", prefix);\n\n        Set<JavaClassSource> nestedTypes = new HashSet<>();\n        for (ComponentOptionModel option : model.getComponentOptions()) {\n\n            if (skipComponentOption(model, option)) {\n                // some component options should be skipped\n                continue;\n            }\n\n            String type = option.getJavaType();\n            type = getSimpleJavaType(type);\n\n            // generate inner class for non-primitive options\n            if (isNestedProperty(type, nestedTypes)) {\n                type = option.getShortJavaType() + INNER_TYPE_SUFFIX;\n            }\n\n            PropertySource<JavaClassSource> prop = javaClass.addProperty(type, option.getName());\n            if (!(type.endsWith(INNER_TYPE_SUFFIX) || !(type.indexOf('[') == -1) || EXCLUDE_INNER_PATTERN.matcher(type).matches() || !Strings.isBlank(option.getEnumValues()))) {\n                // add nested configuration annotation for complex properties\n                prop.getField().addAnnotation(NestedConfigurationProperty.class);\n            }\n            if (\"true\".equals(option.getDeprecated())) {\n                prop.getField().addAnnotation(Deprecated.class);\n                prop.getAccessor().addAnnotation(Deprecated.class);\n                prop.getMutator().addAnnotation(Deprecated.class);\n                // DeprecatedConfigurationProperty must be on getter when deprecated\n                prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);\n            }\n            if (!Strings.isBlank(option.getDescription())) {\n                prop.getField().getJavaDoc().setFullText(option.getDescription());\n            }\n            if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getJavaType())) {\n                    prop.getField().setStringInitializer(option.getDefaultValue());\n                } else if (\"integer\".equals(option.getType()) || \"boolean\".equals(option.getType())) {\n                    String value = option.getDefaultValue();\n                    if (\"long\".equals(option.getJavaType()) && !value.toUpperCase().endsWith(\"L\")) {\n                        value = value + \"L\";\n                    }\n                    prop.getField().setLiteralInitializer(value);\n                } else if (!Strings.isBlank(option.getEnumValues())) {\n                    String enumShortName = type.substring(type.lastIndexOf(\".\") + 1);\n                    prop.getField().setLiteralInitializer(enumShortName + \".\" + option.getDefaultValue());\n                    javaClass.addImport(model.getJavaType());\n                }\n            }\n        }\n\n        // add inner classes for nested AutoConfiguration options\n        ClassLoader projectClassLoader = getProjectClassLoader();\n        for (JavaClassSource nestedType : nestedTypes) {\n\n            final JavaClassSource innerClass = javaClass.addNestedType(\"public static class \" + nestedType.getName() + INNER_TYPE_SUFFIX);\n            // add source class name as a static field\n            innerClass.addField()\n                .setPublic()\n                .setStatic(true)\n                .setFinal(true)\n                .setType(Class.class)\n                .setName(\"CAMEL_NESTED_CLASS\")\n                .setLiteralInitializer(nestedType.getCanonicalName() + \".class\");\n\n            // parse option type\n            for (ResolvedProperty resolvedProperty : getProperties(nestedType)) {\n\n                String optionType = resolvedProperty.propertyType;\n                PropertySource<JavaClassSource> sourceProp = resolvedProperty.propertySource;\n\n                Type<JavaClassSource> propType = sourceProp.getType();\n                final PropertySource<JavaClassSource> prop = innerClass.addProperty(optionType, sourceProp.getName());\n\n                boolean anEnum;\n                Class optionClass;\n                if (!propType.isArray()) {\n                    optionClass = loadClass(projectClassLoader, optionType);\n                    anEnum = optionClass.isEnum();\n                } else {\n                    optionClass = null;\n                    anEnum = false;\n                }\n\n                // add nested configuration annotation for complex properties\n                if (!EXCLUDE_INNER_PATTERN.matcher(optionType).matches() && !propType.isArray() && !anEnum) {\n                    prop.getField().addAnnotation(NestedConfigurationProperty.class);\n                }\n                if (sourceProp.hasAnnotation(Deprecated.class)) {\n                    prop.getField().addAnnotation(Deprecated.class);\n                    prop.getAccessor().addAnnotation(Deprecated.class);\n                    prop.getMutator().addAnnotation(Deprecated.class);\n                    // DeprecatedConfigurationProperty must be on getter when deprecated\n                    prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);\n                }\n\n                String description = null;\n                final MethodSource<JavaClassSource> mutator = sourceProp.getMutator();\n                if (mutator.hasJavaDoc()) {\n                    description = mutator.getJavaDoc().getFullText();\n                } else if (sourceProp.hasField()) {\n                    description = sourceProp.getField().getJavaDoc().getFullText();\n                }\n                if (!Strings.isBlank(description)) {\n                    prop.getField().getJavaDoc().setFullText(description);\n                }\n\n                String defaultValue = null;\n                if (sourceProp.hasAnnotation(UriParam.class)) {\n                    defaultValue = sourceProp.getAnnotation(UriParam.class).getStringValue(\"defaultValue\");\n                } else if (sourceProp.hasAnnotation(UriPath.class)) {\n                    defaultValue = sourceProp.getAnnotation(UriPath.class).getStringValue(\"defaultValue\");\n                }\n                if (!Strings.isBlank(defaultValue)) {\n                    if (\"java.lang.String\".equals(optionType)) {\n                        prop.getField().setStringInitializer(defaultValue);\n                    } else if (\"integer\".equals(optionType) || \"boolean\".equals(optionType)) {\n                        prop.getField().setLiteralInitializer(defaultValue);\n                    } else if (anEnum) {\n                        String enumShortName = optionClass.getSimpleName();\n                        prop.getField().setLiteralInitializer(enumShortName + \".\" + defaultValue);\n                        javaClass.addImport(model.getJavaType());\n                    }\n                }\n            }\n        }\n\n        sortImports(javaClass);\n\n        String fileName = packageName.replaceAll(\"\\\\.\", \"\\\\/\") + \"/\" + name + \".java\";\n\n        writeSourceIfChanged(javaClass, fileName);\n    }","id":12756,"modified_method":"private void createComponentConfigurationSource(String packageName, ComponentModel model, String overrideComponentName) throws MojoFailureException {\n        final JavaClassSource javaClass = Roaster.create(JavaClassSource.class);\n\n        int pos = model.getJavaType().lastIndexOf(\".\");\n        String name = model.getJavaType().substring(pos + 1);\n        name = name.replace(\"Component\", \"ComponentConfiguration\");\n        javaClass.setPackage(packageName).setName(name);\n\n        String doc = \"Generated by camel-package-maven-plugin - do not edit this file!\";\n        if (!Strings.isBlank(model.getDescription())) {\n            doc = model.getDescription() + \"\\n\\n\" + doc;\n        }\n        javaClass.getJavaDoc().setFullText(doc);\n\n        String prefix = \"camel.component.\" + (overrideComponentName != null ? overrideComponentName : model.getScheme());\n        // make sure prefix is in lower case\n        prefix = prefix.toLowerCase(Locale.US);\n        javaClass.addAnnotation(\"org.springframework.boot.context.properties.ConfigurationProperties\").setStringValue(\"prefix\", prefix);\n\n        Set<JavaClassSource> nestedTypes = new HashSet<>();\n        for (ComponentOptionModel option : model.getComponentOptions()) {\n\n            if (skipComponentOption(model, option)) {\n                // some component options should be skipped\n                continue;\n            }\n\n            String type = option.getJavaType();\n\n            // generate inner class for non-primitive options\n            type = getSimpleJavaType(type);\n            JavaClassSource javaClassSource = readJavaType(type);\n            if (isNestedProperty(nestedTypes, javaClassSource)) {\n                type = option.getShortJavaType() + INNER_TYPE_SUFFIX;\n            }\n\n            PropertySource<JavaClassSource> prop = javaClass.addProperty(type, option.getName());\n            if (!type.endsWith(INNER_TYPE_SUFFIX)\n                && type.indexOf('[') == -1\n                && !EXCLUDE_INNER_PATTERN.matcher(type).matches()\n                && Strings.isBlank(option.getEnumValues())\n                && (javaClassSource == null || (javaClassSource.isClass() && !javaClassSource.isAbstract()))) {\n                // add nested configuration annotation for complex properties\n                prop.getField().addAnnotation(NestedConfigurationProperty.class);\n            }\n            if (\"true\".equals(option.getDeprecated())) {\n                prop.getField().addAnnotation(Deprecated.class);\n                prop.getAccessor().addAnnotation(Deprecated.class);\n                prop.getMutator().addAnnotation(Deprecated.class);\n                // DeprecatedConfigurationProperty must be on getter when deprecated\n                prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);\n            }\n            if (!Strings.isBlank(option.getDescription())) {\n                prop.getField().getJavaDoc().setFullText(option.getDescription());\n            }\n            if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getJavaType())) {\n                    prop.getField().setStringInitializer(option.getDefaultValue());\n                } else if (\"integer\".equals(option.getType()) || \"boolean\".equals(option.getType())) {\n                    prop.getField().setLiteralInitializer(option.getDefaultValue());\n                } else if (!Strings.isBlank(option.getEnumValues())) {\n                    String enumShortName = type.substring(type.lastIndexOf(\".\") + 1);\n                    prop.getField().setLiteralInitializer(enumShortName + \".\" + option.getDefaultValue());\n                    javaClass.addImport(model.getJavaType());\n                }\n            }\n        }\n\n        // add inner classes for nested AutoConfiguration options\n        ClassLoader projectClassLoader = getProjectClassLoader();\n        for (JavaClassSource nestedType : nestedTypes) {\n\n            final JavaClassSource innerClass = javaClass.addNestedType(\"public static class \" + nestedType.getName() + INNER_TYPE_SUFFIX);\n            // add source class name as a static field\n            innerClass.addField()\n                .setPublic()\n                .setStatic(true)\n                .setFinal(true)\n                .setType(Class.class)\n                .setName(\"CAMEL_NESTED_CLASS\")\n                .setLiteralInitializer(nestedType.getCanonicalName() + \".class\");\n\n            // parse option type\n            for (ResolvedProperty resolvedProperty : getProperties(nestedType)) {\n\n                String optionType = resolvedProperty.propertyType;\n                PropertySource<JavaClassSource> sourceProp = resolvedProperty.propertySource;\n\n                Type<JavaClassSource> propType = sourceProp.getType();\n                final PropertySource<JavaClassSource> prop = innerClass.addProperty(optionType, sourceProp.getName());\n\n                boolean anEnum;\n                Class optionClass;\n                if (!propType.isArray()) {\n                    optionClass = loadClass(projectClassLoader, optionType);\n                    anEnum = optionClass.isEnum();\n                } else {\n                    optionClass = null;\n                    anEnum = false;\n                }\n\n                // add nested configuration annotation for complex properties\n                if (!EXCLUDE_INNER_PATTERN.matcher(optionType).matches()\n                    && !propType.isArray()\n                    && !anEnum\n                    && optionClass != null\n                    && !optionClass.isInterface()\n                    && !optionClass.isAnnotation()\n                    && !Modifier.isAbstract(optionClass.getModifiers())) {\n                    prop.getField().addAnnotation(NestedConfigurationProperty.class);\n                }\n                if (sourceProp.hasAnnotation(Deprecated.class)) {\n                    prop.getField().addAnnotation(Deprecated.class);\n                    prop.getAccessor().addAnnotation(Deprecated.class);\n                    prop.getMutator().addAnnotation(Deprecated.class);\n                    // DeprecatedConfigurationProperty must be on getter when deprecated\n                    prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);\n                }\n\n                String description = null;\n                final MethodSource<JavaClassSource> mutator = sourceProp.getMutator();\n                if (mutator.hasJavaDoc()) {\n                    description = mutator.getJavaDoc().getFullText();\n                } else if (sourceProp.hasField()) {\n                    description = sourceProp.getField().getJavaDoc().getFullText();\n                }\n                if (!Strings.isBlank(description)) {\n                    prop.getField().getJavaDoc().setFullText(description);\n                }\n\n                String defaultValue = null;\n                if (sourceProp.hasAnnotation(UriParam.class)) {\n                    defaultValue = sourceProp.getAnnotation(UriParam.class).getStringValue(\"defaultValue\");\n                } else if (sourceProp.hasAnnotation(UriPath.class)) {\n                    defaultValue = sourceProp.getAnnotation(UriPath.class).getStringValue(\"defaultValue\");\n                }\n                if (!Strings.isBlank(defaultValue)) {\n                    if (\"java.lang.String\".equals(optionType)) {\n                        prop.getField().setStringInitializer(defaultValue);\n                    } else if (\"integer\".equals(optionType) || \"boolean\".equals(optionType)) {\n                        prop.getField().setLiteralInitializer(defaultValue);\n                    } else if (anEnum) {\n                        String enumShortName = optionClass.getSimpleName();\n                        prop.getField().setLiteralInitializer(enumShortName + \".\" + defaultValue);\n                        javaClass.addImport(model.getJavaType());\n                    }\n                }\n            }\n        }\n\n        sortImports(javaClass);\n\n        String fileName = packageName.replaceAll(\"\\\\.\", \"\\\\/\") + \"/\" + name + \".java\";\n\n        writeSourceIfChanged(javaClass, fileName);\n    }","commit_id":"76f7914ad8dfff15676d833ca148b9fb955ed84a","url":"https://github.com/apache/camel"},{"original_method":"private void createLanguageConfigurationSource(String packageName, LanguageModel model, String overrideLanguageName) throws MojoFailureException {\n        final JavaClassSource javaClass = Roaster.create(JavaClassSource.class);\n\n        int pos = model.getJavaType().lastIndexOf(\".\");\n        String name = model.getJavaType().substring(pos + 1);\n        name = name.replace(\"Language\", \"LanguageConfiguration\");\n        javaClass.setPackage(packageName).setName(name);\n\n        String doc = \"Generated by camel-package-maven-plugin - do not edit this file!\";\n        if (!Strings.isBlank(model.getDescription())) {\n            doc = model.getDescription() + \"\\n\\n\" + doc;\n        }\n        javaClass.getJavaDoc().setFullText(doc);\n\n        String prefix = \"camel.language.\" + (overrideLanguageName != null ? overrideLanguageName : model.getName());\n        // make sure prefix is in lower case\n        prefix = prefix.toLowerCase(Locale.US);\n        javaClass.addAnnotation(\"org.springframework.boot.context.properties.ConfigurationProperties\").setStringValue(\"prefix\", prefix);\n\n        for (LanguageOptionModel option : model.getLanguageOptions()) {\n            // skip option with name id, or expression in language as we do not need that and skip resultType as they are not global options\n            if (\"id\".equals(option.getName()) || \"expression\".equals(option.getName()) || \"resultType\".equals(option.getName())) {\n                continue;\n            }\n            // CHECKSTYLE:OFF\n            if (\"bean\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"bean\".equals(option.getName()) || \"ref\".equals(option.getName()) || \"method\".equals(option.getName()) || \"beanType\".equals(option.getName())) {\n                    continue;\n                }\n            } else if (\"tokenize\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"token\".equals(option.getName()) || \"endToken\".equals(option.getName()) || \"inheritNamespaceTagName\".equals(option.getName())\n                        || \"headerName\".equals(option.getName()) || \"regex\".equals(option.getName()) || \"xml\".equals(option.getName())\n                        || \"includeTokens\".equals(option.getName()) || \"group\".equals(option.getName()) || \"skipFirst\".equals(option.getName())) {\n                    continue;\n                }\n            } else if (\"xtokenize\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"headerName\".equals(option.getName()) || \"group\".equals(option.getName())) {\n                    continue;\n                }\n            } else if (\"xpath\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"headerName\".equals(option.getName())) {\n                    continue;\n                }\n            } else if (\"xquery\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"headerName\".equals(option.getName())) {\n                    continue;\n                }\n            }\n            // CHECKSTYLE:ON\n            String type = option.getJavaType();\n            type = getSimpleJavaType(type);\n\n            PropertySource<JavaClassSource> prop = javaClass.addProperty(type, option.getName());\n            if (\"true\".equals(option.getDeprecated())) {\n                prop.getField().addAnnotation(Deprecated.class);\n                prop.getAccessor().addAnnotation(Deprecated.class);\n                prop.getMutator().addAnnotation(Deprecated.class);\n                // DeprecatedConfigurationProperty must be on getter when deprecated\n                prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);\n            }\n            if (!Strings.isBlank(option.getDescription())) {\n                prop.getField().getJavaDoc().setFullText(option.getDescription());\n            }\n            if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                    prop.getField().setStringInitializer(option.getDefaultValue());\n                } else if (\"integer\".equals(option.getType()) || \"boolean\".equals(option.getType())) {\n                    String value = option.getDefaultValue();\n                    if (\"long\".equals(option.getJavaType()) && !value.toUpperCase().endsWith(\"L\")) {\n                        value = value + \"L\";\n                    }\n                    prop.getField().setLiteralInitializer(value);\n                } else if (!Strings.isBlank(option.getEnumValues())) {\n                    String enumShortName = type.substring(type.lastIndexOf(\".\") + 1);\n                    prop.getField().setLiteralInitializer(enumShortName + \".\" + option.getDefaultValue());\n                    javaClass.addImport(model.getJavaType());\n                }\n            }\n        }\n\n        sortImports(javaClass);\n\n        String fileName = packageName.replaceAll(\"\\\\.\", \"\\\\/\") + \"/\" + name + \".java\";\n\n        writeSourceIfChanged(javaClass, fileName);\n    }","id":12757,"modified_method":"private void createLanguageConfigurationSource(String packageName, LanguageModel model, String overrideLanguageName) throws MojoFailureException {\n        final JavaClassSource javaClass = Roaster.create(JavaClassSource.class);\n\n        int pos = model.getJavaType().lastIndexOf(\".\");\n        String name = model.getJavaType().substring(pos + 1);\n        name = name.replace(\"Language\", \"LanguageConfiguration\");\n        javaClass.setPackage(packageName).setName(name);\n\n        String doc = \"Generated by camel-package-maven-plugin - do not edit this file!\";\n        if (!Strings.isBlank(model.getDescription())) {\n            doc = model.getDescription() + \"\\n\\n\" + doc;\n        }\n        javaClass.getJavaDoc().setFullText(doc);\n\n        String prefix = \"camel.language.\" + (overrideLanguageName != null ? overrideLanguageName : model.getName());\n        // make sure prefix is in lower case\n        prefix = prefix.toLowerCase(Locale.US);\n        javaClass.addAnnotation(\"org.springframework.boot.context.properties.ConfigurationProperties\").setStringValue(\"prefix\", prefix);\n\n        for (LanguageOptionModel option : model.getLanguageOptions()) {\n            // skip option with name id, or expression in language as we do not need that and skip resultType as they are not global options\n            if (\"id\".equals(option.getName()) || \"expression\".equals(option.getName()) || \"resultType\".equals(option.getName())) {\n                continue;\n            }\n            // CHECKSTYLE:OFF\n            if (\"bean\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"bean\".equals(option.getName()) || \"ref\".equals(option.getName()) || \"method\".equals(option.getName()) || \"beanType\".equals(option.getName())) {\n                    continue;\n                }\n            } else if (\"tokenize\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"token\".equals(option.getName()) || \"endToken\".equals(option.getName()) || \"inheritNamespaceTagName\".equals(option.getName())\n                        || \"headerName\".equals(option.getName()) || \"regex\".equals(option.getName()) || \"xml\".equals(option.getName())\n                        || \"includeTokens\".equals(option.getName()) || \"group\".equals(option.getName()) || \"skipFirst\".equals(option.getName())) {\n                    continue;\n                }\n            } else if (\"xtokenize\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"headerName\".equals(option.getName()) || \"group\".equals(option.getName())) {\n                    continue;\n                }\n            } else if (\"xpath\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"headerName\".equals(option.getName())) {\n                    continue;\n                }\n            } else if (\"xquery\".equals(model.getName())) {\n                // and skip following as they are not global options\n                if (\"headerName\".equals(option.getName())) {\n                    continue;\n                }\n            }\n            // CHECKSTYLE:ON\n            String type = option.getJavaType();\n            type = getSimpleJavaType(type);\n\n            PropertySource<JavaClassSource> prop = javaClass.addProperty(type, option.getName());\n            if (\"true\".equals(option.getDeprecated())) {\n                prop.getField().addAnnotation(Deprecated.class);\n                prop.getAccessor().addAnnotation(Deprecated.class);\n                prop.getMutator().addAnnotation(Deprecated.class);\n                // DeprecatedConfigurationProperty must be on getter when deprecated\n                prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);\n            }\n            if (!Strings.isBlank(option.getDescription())) {\n                prop.getField().getJavaDoc().setFullText(option.getDescription());\n            }\n            if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                    prop.getField().setStringInitializer(option.getDefaultValue());\n                } else if (\"integer\".equals(option.getType()) || \"boolean\".equals(option.getType())) {\n                    prop.getField().setLiteralInitializer(option.getDefaultValue());\n                } else if (!Strings.isBlank(option.getEnumValues())) {\n                    String enumShortName = type.substring(type.lastIndexOf(\".\") + 1);\n                    prop.getField().setLiteralInitializer(enumShortName + \".\" + option.getDefaultValue());\n                    javaClass.addImport(model.getJavaType());\n                }\n            }\n        }\n\n        sortImports(javaClass);\n\n        String fileName = packageName.replaceAll(\"\\\\.\", \"\\\\/\") + \"/\" + name + \".java\";\n\n        writeSourceIfChanged(javaClass, fileName);\n    }","commit_id":"76f7914ad8dfff15676d833ca148b9fb955ed84a","url":"https://github.com/apache/camel"},{"original_method":"private boolean isNestedProperty(String type, Set<JavaClassSource> nestedTypes) {\n        JavaClassSource nestedType = readJavaType(type);\n        if (nestedType != null) {\n            // nested type MUST have some properties of it's own, besides those from super class\n            if (!nestedType.isAbstract() && !nestedType.getProperties().isEmpty()) {\n                nestedTypes.add(nestedType);\n            } else {\n                nestedType = null;\n            }\n        }\n        return nestedType != null;\n    }","id":12758,"modified_method":"private boolean isNestedProperty(Set<JavaClassSource> nestedTypes, JavaClassSource type) {\n        if (type != null) {\n            // nested type MUST have some properties of it's own, besides those from super class\n            if (type.isClass() && !type.isEnum() && !type.isAbstract() && !type.getProperties().isEmpty()) {\n                nestedTypes.add(type);\n            } else {\n                type = null;\n            }\n        }\n        return type != null;\n    }","commit_id":"76f7914ad8dfff15676d833ca148b9fb955ed84a","url":"https://github.com/apache/camel"},{"original_method":"@Override\n\tpublic void restoreNodeFromTrash(long userId, WikiNode node)\n\t\tthrows PortalException, SystemException {\n\n\t\tnode.setName(TrashUtil.getOriginalTitle(node.getName()));\n\n\t\twikiNodePersistence.update(node);\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.getEntry(\n\t\t\tWikiNode.class.getName(), node.getNodeId());\n\n\t\tupdateStatus(\n\t\t\tuserId, node, trashEntry.getStatus(), new ServiceContext());\n\n\t\t// Pages\n\n\t\trestoreDependentFromTrash(node.getNodeId());\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.deleteEntry(trashEntry);\n\t}","id":12759,"modified_method":"@Override\n\tpublic void restoreNodeFromTrash(long userId, WikiNode node)\n\t\tthrows PortalException, SystemException {\n\n\t\tnode.setName(TrashUtil.getOriginalTitle(node.getName()));\n\n\t\twikiNodePersistence.update(node);\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.getEntry(\n\t\t\tWikiNode.class.getName(), node.getNodeId());\n\n\t\tupdateStatus(\n\t\t\tuserId, node, trashEntry.getStatus(), new ServiceContext());\n\n\t\t// Pages\n\n\t\trestoreDependentFromTrash(node.getNodeId(), trashEntry.getEntryId());\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.deleteEntry(trashEntry);\n\t}","commit_id":"3b94fe0e7202eb2887c59b997aaa9a0559d9917b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic WikiNode moveNodeToTrash(long userId, WikiNode node)\n\t\tthrows PortalException, SystemException {\n\n\t\tint oldStatus = node.getStatus();\n\n\t\tnode = updateStatus(\n\t\t\tuserId, node, WorkflowConstants.STATUS_IN_TRASH,\n\t\t\tnew ServiceContext());\n\n\t\t// Trash\n\n\t\tUnicodeProperties typeSettingsProperties = new UnicodeProperties();\n\n\t\ttypeSettingsProperties.put(\"title\", node.getName());\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.addTrashEntry(\n\t\t\tuserId, node.getGroupId(), WikiNode.class.getName(),\n\t\t\tnode.getNodeId(), node.getUuid(), null, oldStatus, null,\n\t\t\ttypeSettingsProperties);\n\n\t\tnode.setName(TrashUtil.getTrashTitle(trashEntry.getEntryId()));\n\n\t\twikiNodePersistence.update(node);\n\n\t\t// Pages\n\n\t\tmoveDependentToTrash(node.getNodeId());\n\n\t\treturn node;\n\t}","id":12760,"modified_method":"@Override\n\tpublic WikiNode moveNodeToTrash(long userId, WikiNode node)\n\t\tthrows PortalException, SystemException {\n\n\t\tint oldStatus = node.getStatus();\n\n\t\tnode = updateStatus(\n\t\t\tuserId, node, WorkflowConstants.STATUS_IN_TRASH,\n\t\t\tnew ServiceContext());\n\n\t\t// Trash\n\n\t\tUnicodeProperties typeSettingsProperties = new UnicodeProperties();\n\n\t\ttypeSettingsProperties.put(\"title\", node.getName());\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.addTrashEntry(\n\t\t\tuserId, node.getGroupId(), WikiNode.class.getName(),\n\t\t\tnode.getNodeId(), node.getUuid(), null, oldStatus, null,\n\t\t\ttypeSettingsProperties);\n\n\t\tnode.setName(TrashUtil.getTrashTitle(trashEntry.getEntryId()));\n\n\t\twikiNodePersistence.update(node);\n\n\t\t// Pages\n\n\t\tmoveDependentToTrash(node.getNodeId(), trashEntry.getEntryId());\n\n\t\treturn node;\n\t}","commit_id":"3b94fe0e7202eb2887c59b997aaa9a0559d9917b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void restoreDependentFromTrash(long nodeId)\n\t\tthrows PortalException, SystemException {\n\n\t\tList<WikiPage> pages = wikiPagePersistence.findByNodeId(nodeId);\n\n\t\tfor (WikiPage page : pages) {\n\n\t\t\t// Asset\n\n\t\t\tif (page.getStatus() == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tWikiPage.class.getName(), page.getResourcePrimKey(),\n\t\t\t\t\ttrue);\n\t\t\t}\n\n\t\t\t// Index\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tWikiPage.class);\n\n\t\t\tindexer.reindex(page);\n\t\t}\n\t}","id":12761,"modified_method":"protected void restoreDependentFromTrash(long nodeId, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tList<WikiPage> pages = wikiPagePersistence.findByNodeId(nodeId);\n\n\t\tfor (WikiPage page : pages) {\n\t\t\tTrashEntry trashEntry = trashEntryLocalService.fetchEntry(\n\t\t\t\tWikiPage.class.getName(), page.getResourcePrimKey());\n\n\t\t\tif (trashEntry != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tTrashVersion trashVersion =\n\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\ttrashEntryId, WikiPage.class.getName(), page.getPageId());\n\n\t\t\tint oldStatus = WorkflowConstants.STATUS_APPROVED;\n\n\t\t\tif (trashVersion != null) {\n\t\t\t\toldStatus = trashVersion.getStatus();\n\t\t\t}\n\n\t\t\t// Page versions\n\n\t\t\tList<WikiPage> pageVersions = wikiPagePersistence.findByR_N(\n\t\t\t\tpage.getResourcePrimKey(), page.getNodeId());\n\n\t\t\tfor (WikiPage curPageVersion : pageVersions) {\n\n\t\t\t\t// Version\n\n\t\t\t\ttrashVersion = trashVersionLocalService.fetchVersion(\n\t\t\t\t\ttrashEntryId, WikiPage.class.getName(),\n\t\t\t\t\tcurPageVersion.getPageId());\n\n\t\t\t\tint curPageVersionOldStatus = WorkflowConstants.STATUS_APPROVED;\n\n\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\tcurPageVersionOldStatus = trashVersion.getStatus();\n\t\t\t\t}\n\n\t\t\t\tcurPageVersion.setStatus(curPageVersionOldStatus);\n\n\t\t\t\twikiPagePersistence.update(curPageVersion);\n\n\t\t\t\t// Trash\n\n\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Asset\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tWikiPage.class.getName(), page.getResourcePrimKey(), true);\n\t\t\t}\n\n\t\t\t// Index\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tWikiPage.class);\n\n\t\t\tindexer.reindex(page);\n\t\t}\n\t}","commit_id":"3b94fe0e7202eb2887c59b997aaa9a0559d9917b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void moveDependentToTrash(long nodeId)\n\t\tthrows PortalException, SystemException {\n\n\t\tList<WikiPage> pages = wikiPagePersistence.findByNodeId(nodeId);\n\n\t\tfor (WikiPage page : pages) {\n\n\t\t\tint oldStatus = page.getStatus();\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tWikiPage.class.getName(), page.getResourcePrimKey(),\n\t\t\t\t\tfalse);\n\t\t\t}\n\n\t\t\t// Index\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tWikiPage.class);\n\n\t\t\tindexer.reindex(page);\n\n\t\t\t// Cache\n\n\t\t\tif (WikiCacheThreadLocal.isClearCache()) {\n\t\t\t\tWikiCacheUtil.clearCache(page.getNodeId());\n\t\t\t}\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\tpage.setStatus(WorkflowConstants.STATUS_DRAFT);\n\n\t\t\t\twikiPagePersistence.update(page);\n\n\t\t\t\tworkflowInstanceLinkLocalService.deleteWorkflowInstanceLink(\n\t\t\t\t\tpage.getCompanyId(), page.getGroupId(),\n\t\t\t\t\tWikiPage.class.getName(), page.getResourcePrimKey());\n\t\t\t}\n\t\t}\n\t}","id":12762,"modified_method":"protected void moveDependentToTrash(long nodeId, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tList<WikiPage> pages = wikiPagePersistence.findByNodeId(nodeId);\n\n\t\tfor (WikiPage page : pages) {\n\t\t\tint oldStatus = page.getStatus();\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Page versions\n\n\t\t\tList<WikiPage> pageVersions = wikiPagePersistence.findByR_N(\n\t\t\t\tpage.getResourcePrimKey(), page.getNodeId());\n\n\t\t\tfor (WikiPage curPageVersion : pageVersions) {\n\n\t\t\t\t// Version\n\n\t\t\t\tint curPageVersionOldStatus = curPageVersion.getStatus();\n\n\t\t\t\tcurPageVersion.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\twikiPagePersistence.update(curPageVersion);\n\n\t\t\t\t// Trash\n\n\t\t\t\tint status = curPageVersionOldStatus;\n\n\t\t\t\tif (curPageVersionOldStatus ==\n\t\t\t\t\t\tWorkflowConstants.STATUS_PENDING) {\n\n\t\t\t\t\tstatus = WorkflowConstants.STATUS_DRAFT;\n\t\t\t\t}\n\n\t\t\t\tif (curPageVersionOldStatus !=\n\t\t\t\t\t\tWorkflowConstants.STATUS_APPROVED) {\n\n\t\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\t\ttrashEntryId, WikiPage.class.getName(),\n\t\t\t\t\t\tcurPageVersion.getPageId(), status);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tWikiPage.class.getName(), page.getResourcePrimKey(), false);\n\t\t\t}\n\n\t\t\t// Index\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tWikiPage.class);\n\n\t\t\tindexer.reindex(page);\n\n\t\t\t// Cache\n\n\t\t\tif (WikiCacheThreadLocal.isClearCache()) {\n\t\t\t\tWikiCacheUtil.clearCache(page.getNodeId());\n\t\t\t}\n\n\t\t\t// Workflow\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\tworkflowInstanceLinkLocalService.deleteWorkflowInstanceLink(\n\t\t\t\t\tpage.getCompanyId(), page.getGroupId(),\n\t\t\t\t\tWikiPage.class.getName(), page.getResourcePrimKey());\n\t\t\t}\n\t\t}\n\t}","commit_id":"3b94fe0e7202eb2887c59b997aaa9a0559d9917b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void restoreCategoryFromTrash(long userId, long categoryId)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Category\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.getEntry(\n\t\t\tMBCategory.class.getName(), categoryId);\n\n\t\tMBCategory category = updateStatus(\n\t\t\tuserId, categoryId, WorkflowConstants.STATUS_APPROVED);\n\n\t\t// Categories and threads\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tList<Object> categoriesAndThreads = getCategoriesAndThreads(\n\t\t\tcategory.getGroupId(), categoryId);\n\n\t\trestoreDependentFromTrash(user, categoriesAndThreads);\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.deleteEntry(trashEntry.getEntryId());\n\t}","id":12763,"modified_method":"@Override\n\tpublic void restoreCategoryFromTrash(long userId, long categoryId)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Category\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.getEntry(\n\t\t\tMBCategory.class.getName(), categoryId);\n\n\t\tMBCategory category = updateStatus(\n\t\t\tuserId, categoryId, WorkflowConstants.STATUS_APPROVED);\n\n\t\t// Categories and threads\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tList<Object> categoriesAndThreads = getCategoriesAndThreads(\n\t\t\tcategory.getGroupId(), categoryId);\n\n\t\trestoreDependentFromTrash(\n\t\t\tuser, categoriesAndThreads, trashEntry.getEntryId());\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.deleteEntry(trashEntry.getEntryId());\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic MBCategory moveCategoryToTrash(long userId, long categoryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tMBCategory category = updateStatus(\n\t\t\tuserId, categoryId, WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.addTrashEntry(\n\t\t\tuserId, category.getGroupId(), MBCategory.class.getName(),\n\t\t\tcategoryId, category.getUuid(), null,\n\t\t\tWorkflowConstants.STATUS_APPROVED, null, null);\n\n\t\t// Categories and threads\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tList<Object> categoriesAndThreads = getCategoriesAndThreads(\n\t\t\tcategory.getGroupId(), categoryId);\n\n\t\tmoveDependentsToTrash(user, categoriesAndThreads);\n\n\t\treturn category;\n\t}","id":12764,"modified_method":"@Override\n\tpublic MBCategory moveCategoryToTrash(long userId, long categoryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tMBCategory category = updateStatus(\n\t\t\tuserId, categoryId, WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t// Trash\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.addTrashEntry(\n\t\t\tuserId, category.getGroupId(), MBCategory.class.getName(),\n\t\t\tcategoryId, category.getUuid(), null,\n\t\t\tWorkflowConstants.STATUS_APPROVED, null, null);\n\n\t\t// Categories and threads\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\tList<Object> categoriesAndThreads = getCategoriesAndThreads(\n\t\t\tcategory.getGroupId(), categoryId);\n\n\t\tmoveDependentsToTrash(\n\t\t\tuser, categoriesAndThreads, trashEntry.getEntryId());\n\n\t\treturn category;\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void moveDependentsToTrash(\n\t\t\tUser user, List<Object> categoriesAndThreads)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : categoriesAndThreads) {\n\t\t\tif (object instanceof MBThread) {\n\t\t\t\tMBThread thread = (MBThread)object;\n\n\t\t\t\tif (thread.getStatus() == WorkflowConstants.STATUS_IN_TRASH) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tmbThreadLocalService.moveDependentsToTrash(\n\t\t\t\t\tuser.getUserId(), thread.getThreadId());\n\n\t\t\t\t// Indexer\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tMBThread.class);\n\n\t\t\t\tindexer.reindex(thread);\n\t\t\t}\n\t\t\telse if (object instanceof MBCategory) {\n\t\t\t\tMBCategory category = (MBCategory)object;\n\n\t\t\t\tif (category.isInTrash()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tmoveDependentsToTrash(\n\t\t\t\t\tuser,\n\t\t\t\t\tgetCategoriesAndThreads(\n\t\t\t\t\t\tcategory.getGroupId(), category.getCategoryId()));\n\t\t\t}\n\t\t}\n\t}","id":12765,"modified_method":"protected void moveDependentsToTrash(\n\t\t\tUser user, List<Object> categoriesAndThreads, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : categoriesAndThreads) {\n\t\t\tif (object instanceof MBThread) {\n\t\t\t\tMBThread thread = (MBThread)object;\n\n\t\t\t\tint oldStatus = thread.getStatus();\n\n\t\t\t\tif (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthread.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\tmbThreadPersistence.update(thread);\n\n\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\ttrashEntryId, MBThread.class.getName(),\n\t\t\t\t\tthread.getThreadId(), oldStatus);\n\n\t\t\t\tmbThreadLocalService.moveDependentsToTrash(\n\t\t\t\t\tuser.getUserId(), thread.getThreadId(), trashEntryId);\n\n\t\t\t\t// Indexer\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tMBThread.class);\n\n\t\t\t\tindexer.reindex(thread);\n\t\t\t}\n\t\t\telse if (object instanceof MBCategory) {\n\t\t\t\tMBCategory category = (MBCategory)object;\n\n\t\t\t\tif (category.isInTrash()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tint oldStatus = category.getStatus();\n\n\t\t\t\tcategory.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\tmbCategoryPersistence.update(category);\n\n\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\ttrashEntryId, MBCategory.class.getName(),\n\t\t\t\t\tcategory.getCategoryId(), oldStatus);\n\n\t\t\t\tmoveDependentsToTrash(\n\t\t\t\t\tuser,\n\t\t\t\t\tgetCategoriesAndThreads(\n\t\t\t\t\t\tcategory.getGroupId(), category.getCategoryId()),\n\t\t\t\t\ttrashEntryId);\n\t\t\t}\n\t\t}\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic MBCategory moveCategoryFromTrash(\n\t\t\tlong userId, long categoryId, long newCategoryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tMBCategory category = mbCategoryPersistence.findByPrimaryKey(\n\t\t\tcategoryId);\n\n\t\tif (category.isInTrash()) {\n\t\t\trestoreCategoryFromTrash(userId, categoryId);\n\t\t}\n\t\telse {\n\t\t\tupdateStatus(userId, categoryId, category.getStatus());\n\t\t}\n\n\t\treturn moveCategory(categoryId, newCategoryId, false);\n\t}","id":12766,"modified_method":"@Override\n\tpublic MBCategory moveCategoryFromTrash(\n\t\t\tlong userId, long categoryId, long newCategoryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tMBCategory category = mbCategoryPersistence.findByPrimaryKey(\n\t\t\tcategoryId);\n\n\t\ttry {\n\t\t\ttrashEntryLocalService.getEntry(\n\t\t\t\tMBCategory.class.getName(), categoryId);\n\n\t\t\trestoreCategoryFromTrash(userId, categoryId);\n\t\t}\n\t\tcatch (NoSuchEntryException nsee) {\n\t\t\tupdateStatus(userId, categoryId, category.getStatus());\n\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tList<Object> categoriesAndThreads = getCategoriesAndThreads(\n\t\t\t\tcategory.getGroupId(), categoryId);\n\n\t\t\tTrashEntry trashEntry = category.getTrashEntry();\n\n\t\t\trestoreDependentFromTrash(\n\t\t\t\tuser, categoriesAndThreads, trashEntry.getEntryId());\n\t\t}\n\n\t\treturn moveCategory(categoryId, newCategoryId, false);\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void restoreDependentFromTrash(\n\t\t\tUser user, List<Object> categoriesAndThreads)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : categoriesAndThreads) {\n\t\t\tif (object instanceof MBThread) {\n\t\t\t\tMBThread thread = (MBThread)object;\n\n\t\t\t\tif (thread.getStatus() == WorkflowConstants.STATUS_IN_TRASH) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tmbThreadLocalService.restoreDependentsFromTrash(\n\t\t\t\t\tuser.getUserId(), thread.getThreadId());\n\n\t\t\t\t// Indexer\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tMBThread.class);\n\n\t\t\t\tindexer.reindex(thread);\n\t\t\t}\n\t\t\telse if (object instanceof MBCategory) {\n\t\t\t\tMBCategory category = (MBCategory)object;\n\n\t\t\t\tif (category.isInTrash()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\trestoreDependentFromTrash(\n\t\t\t\t\tuser,\n\t\t\t\t\tgetCategoriesAndThreads(\n\t\t\t\t\t\tcategory.getGroupId(), category.getCategoryId()));\n\t\t\t}\n\t\t}\n\t}","id":12767,"modified_method":"protected void restoreDependentFromTrash(\n\t\t\tUser user, List<Object> categoriesAndThreads, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : categoriesAndThreads) {\n\t\t\tif (object instanceof MBThread) {\n\t\t\t\tMBThread thread = (MBThread)object;\n\n\t\t\t\tTrashEntry trashEntry = trashEntryLocalService.fetchEntry(\n\t\t\t\t\tMBThread.class.getName(), thread.getThreadId());\n\n\t\t\t\tif (trashEntry != null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tTrashVersion trashVersion =\n\t\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\t\ttrashEntryId, MBThread.class.getName(),\n\t\t\t\t\t\tthread.getThreadId());\n\n\t\t\t\tthread.setStatus(trashVersion.getStatus());\n\n\t\t\t\tmbThreadPersistence.update(thread);\n\n\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\n\t\t\t\tmbThreadLocalService.restoreDependentsFromTrash(\n\t\t\t\t\tuser.getUserId(), thread.getThreadId(), trashEntryId);\n\n\t\t\t\t// Indexer\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tMBThread.class);\n\n\t\t\t\tindexer.reindex(thread);\n\t\t\t}\n\t\t\telse if (object instanceof MBCategory) {\n\t\t\t\tMBCategory category = (MBCategory)object;\n\n\t\t\t\tTrashEntry trashEntry = trashEntryLocalService.fetchEntry(\n\t\t\t\t\tMBCategory.class.getName(), category.getCategoryId());\n\n\t\t\t\tif (trashEntry != null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tTrashVersion trashVersion =\n\t\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\t\ttrashEntryId, MBCategory.class.getName(),\n\t\t\t\t\t\tcategory.getCategoryId());\n\n\t\t\t\tcategory.setStatus(trashVersion.getStatus());\n\n\t\t\t\tmbCategoryPersistence.update(category);\n\n\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\n\t\t\t\trestoreDependentFromTrash(\n\t\t\t\t\tuser,\n\t\t\t\t\tgetCategoriesAndThreads(\n\t\t\t\t\t\tcategory.getGroupId(), category.getCategoryId()),\n\t\t\t\t\ttrashEntryId);\n\t\t\t}\n\t\t}\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic MBThread moveThreadFromTrash(\n\t\t\tlong userId, long categoryId, long threadId)\n\t\tthrows PortalException, SystemException {\n\n\t\tMBThread thread = mbThreadPersistence.findByPrimaryKey(threadId);\n\n\t\tif (thread.isInTrash()) {\n\t\t\trestoreThreadFromTrash(userId, threadId);\n\t\t}\n\t\telse {\n\t\t\tupdateStatus(userId, threadId, thread.getStatus());\n\n\t\t\trestoreDependentsFromTrash(thread.getGroupId(), threadId);\n\t\t}\n\n\t\treturn moveThread(thread.getGroupId(), categoryId, threadId);\n\t}","id":12768,"modified_method":"@Override\n\tpublic MBThread moveThreadFromTrash(\n\t\t\tlong userId, long categoryId, long threadId)\n\t\tthrows PortalException, SystemException {\n\n\t\tMBThread thread = mbThreadPersistence.findByPrimaryKey(threadId);\n\n\t\ttry {\n\t\t\ttrashEntryLocalService.getEntry(MBThread.class.getName(), threadId);\n\n\t\t\trestoreThreadFromTrash(userId, threadId);\n\t\t}\n\t\tcatch (NoSuchEntryException nsee) {\n\t\t\tupdateStatus(userId, threadId, thread.getStatus());\n\n\t\t\tTrashEntry trashEntry = thread.getTrashEntry();\n\n\t\t\trestoreDependentsFromTrash(\n\t\t\t\tthread.getGroupId(), threadId, trashEntry.getEntryId());\n\t\t}\n\n\t\treturn moveThread(thread.getGroupId(), categoryId, threadId);\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void moveDependentsToTrash(long groupId, long threadId)\n\t\tthrows PortalException, SystemException {\n\n\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\tList<MBMessage> messages = mbMessageLocalService.getThreadMessages(\n\t\t\tthreadId, WorkflowConstants.STATUS_ANY);\n\n\t\tfor (MBMessage message : messages) {\n\t\t\tif (message.isDiscussion()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuserIds.add(message.getUserId());\n\n\t\t\t// Asset\n\n\t\t\tif (message.getStatus() == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId(), false);\n\t\t\t}\n\n\t\t\t// Indexer\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tMBMessage.class);\n\n\t\t\tindexer.reindex(message);\n\n\t\t\t// Workflow\n\n\t\t\tif (message.getStatus() == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\tmessage.setStatus(WorkflowConstants.STATUS_DRAFT);\n\n\t\t\t\tmbMessagePersistence.update(message);\n\n\t\t\t\tworkflowInstanceLinkLocalService.deleteWorkflowInstanceLink(\n\t\t\t\t\tmessage.getCompanyId(), message.getGroupId(),\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId());\n\t\t\t}\n\t\t}\n\n\t\t// Statistics\n\n\t\tfor (long userId : userIds) {\n\t\t\tmbStatsUserLocalService.updateStatsUser(groupId, userId);\n\t\t}\n\t}","id":12769,"modified_method":"@Override\n\tpublic void moveDependentsToTrash(\n\t\t\tlong groupId, long threadId, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\tList<MBMessage> messages = mbMessageLocalService.getThreadMessages(\n\t\t\tthreadId, WorkflowConstants.STATUS_ANY);\n\n\t\tfor (MBMessage message : messages) {\n\t\t\tif (message.isDiscussion()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tint oldStatus = message.getStatus();\n\n\t\t\tmessage.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\tmbMessagePersistence.update(message);\n\n\t\t\tuserIds.add(message.getUserId());\n\n\t\t\t// Asset\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId(), false);\n\t\t\t}\n\n\t\t\t// Trash\n\n\t\t\tint status = oldStatus;\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\tstatus = WorkflowConstants.STATUS_DRAFT;\n\t\t\t}\n\n\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\ttrashEntryId, MBMessage.class.getName(), message.getMessageId(),\n\t\t\t\tstatus);\n\n\t\t\t// Indexer\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tMBMessage.class);\n\n\t\t\tindexer.reindex(message);\n\n\t\t\t// Workflow\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\tworkflowInstanceLinkLocalService.deleteWorkflowInstanceLink(\n\t\t\t\t\tmessage.getCompanyId(), message.getGroupId(),\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId());\n\t\t\t}\n\t\t}\n\n\t\t// Statistics\n\n\t\tfor (long userId : userIds) {\n\t\t\tmbStatsUserLocalService.updateStatsUser(groupId, userId);\n\t\t}\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic MBThread moveThreadToTrash(long userId, MBThread thread)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (thread.getCategoryId() ==\n\t\t\t\tMBCategoryConstants.DISCUSSION_CATEGORY_ID) {\n\n\t\t\treturn thread;\n\t\t}\n\n\t\tint oldStatus = thread.getStatus();\n\n\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\tthread.setStatus(WorkflowConstants.STATUS_DRAFT);\n\n\t\t\tmbThreadPersistence.update(thread);\n\t\t}\n\n\t\tthread = updateStatus(\n\t\t\tuserId, thread.getThreadId(), WorkflowConstants.STATUS_IN_TRASH);\n\n\t\tmoveDependentsToTrash(thread.getGroupId(), thread.getThreadId());\n\n\t\t// Social\n\n\t\tMBMessage message = mbMessageLocalService.getMBMessage(\n\t\t\tthread.getRootMessageId());\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"rootMessageId\", thread.getRootMessageId());\n\t\textraDataJSONObject.put(\"title\", message.getSubject());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, thread.getGroupId(), MBThread.class.getName(),\n\t\t\tthread.getThreadId(), SocialActivityConstants.TYPE_MOVE_TO_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.addTrashEntry(\n\t\t\tuserId, thread.getGroupId(), MBThread.class.getName(),\n\t\t\tthread.getThreadId(), thread.getUuid(), null, oldStatus, null,\n\t\t\tnull);\n\n\t\treturn thread;\n\t}","id":12770,"modified_method":"@Override\n\tpublic MBThread moveThreadToTrash(long userId, MBThread thread)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (thread.getCategoryId() ==\n\t\t\t\tMBCategoryConstants.DISCUSSION_CATEGORY_ID) {\n\n\t\t\treturn thread;\n\t\t}\n\n\t\tint oldStatus = thread.getStatus();\n\n\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\tthread.setStatus(WorkflowConstants.STATUS_DRAFT);\n\n\t\t\tmbThreadPersistence.update(thread);\n\t\t}\n\n\t\tthread = updateStatus(\n\t\t\tuserId, thread.getThreadId(), WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t// Social\n\n\t\tMBMessage message = mbMessageLocalService.getMBMessage(\n\t\t\tthread.getRootMessageId());\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"rootMessageId\", thread.getRootMessageId());\n\t\textraDataJSONObject.put(\"title\", message.getSubject());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, thread.getGroupId(), MBThread.class.getName(),\n\t\t\tthread.getThreadId(), SocialActivityConstants.TYPE_MOVE_TO_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\n\t\t// Trash\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.addTrashEntry(\n\t\t\tuserId, thread.getGroupId(), MBThread.class.getName(),\n\t\t\tthread.getThreadId(), thread.getUuid(), null, oldStatus, null,\n\t\t\tnull);\n\n\t\tmoveDependentsToTrash(\n\t\t\tthread.getGroupId(), thread.getThreadId(), trashEntry.getEntryId());\n\n\t\treturn thread;\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void restoreThreadFromTrash(long userId, long threadId)\n\t\tthrows PortalException, SystemException {\n\n\t\tMBThread thread = getThread(threadId);\n\n\t\tif (thread.getCategoryId() ==\n\t\t\t\tMBCategoryConstants.DISCUSSION_CATEGORY_ID) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.getEntry(\n\t\t\tMBThread.class.getName(), threadId);\n\n\t\tupdateStatus(userId, threadId, trashEntry.getStatus());\n\n\t\trestoreDependentsFromTrash(thread.getGroupId(), threadId);\n\n\t\t// Social\n\n\t\tMBMessage message = mbMessageLocalService.getMBMessage(\n\t\t\tthread.getRootMessageId());\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"rootMessageId\", thread.getRootMessageId());\n\t\textraDataJSONObject.put(\"title\", message.getSubject());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, thread.getGroupId(), MBThread.class.getName(),\n\t\t\tthread.getThreadId(),\n\t\t\tSocialActivityConstants.TYPE_RESTORE_FROM_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.deleteEntry(MBThread.class.getName(), threadId);\n\t}","id":12771,"modified_method":"@Override\n\tpublic void restoreThreadFromTrash(long userId, long threadId)\n\t\tthrows PortalException, SystemException {\n\n\t\tMBThread thread = getThread(threadId);\n\n\t\tif (thread.getCategoryId() ==\n\t\t\t\tMBCategoryConstants.DISCUSSION_CATEGORY_ID) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.getEntry(\n\t\t\tMBThread.class.getName(), threadId);\n\n\t\tupdateStatus(userId, threadId, trashEntry.getStatus());\n\n\t\trestoreDependentsFromTrash(\n\t\t\tthread.getGroupId(), threadId, trashEntry.getEntryId());\n\n\t\t// Social\n\n\t\tMBMessage message = mbMessageLocalService.getMBMessage(\n\t\t\tthread.getRootMessageId());\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"rootMessageId\", thread.getRootMessageId());\n\t\textraDataJSONObject.put(\"title\", message.getSubject());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, thread.getGroupId(), MBThread.class.getName(),\n\t\t\tthread.getThreadId(),\n\t\t\tSocialActivityConstants.TYPE_RESTORE_FROM_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.deleteEntry(MBThread.class.getName(), threadId);\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void restoreDependentsFromTrash(long groupId, long threadId)\n\t\tthrows PortalException, SystemException {\n\n\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\tList<MBMessage> messages = mbMessageLocalService.getThreadMessages(\n\t\t\tthreadId, WorkflowConstants.STATUS_ANY);\n\n\t\tfor (MBMessage message : messages) {\n\t\t\tif (message.isDiscussion()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuserIds.add(message.getUserId());\n\n\t\t\t// Asset\n\n\t\t\tif (message.getStatus() == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId(), true);\n\t\t\t}\n\n\t\t\t// Indexer\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tMBMessage.class);\n\n\t\t\tindexer.reindex(message);\n\t\t}\n\n\t\t// Statistics\n\n\t\tfor (long userId : userIds) {\n\t\t\tmbStatsUserLocalService.updateStatsUser(groupId, userId);\n\t\t}\n\t}","id":12772,"modified_method":"@Override\n\tpublic void restoreDependentsFromTrash(\n\t\t\tlong groupId, long threadId, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tSet<Long> userIds = new HashSet<Long>();\n\n\t\tList<MBMessage> messages = mbMessageLocalService.getThreadMessages(\n\t\t\tthreadId, WorkflowConstants.STATUS_ANY);\n\n\t\tfor (MBMessage message : messages) {\n\t\t\tif (message.isDiscussion()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tTrashVersion trashVersion = trashVersionLocalService.fetchVersion(\n\t\t\t\ttrashEntryId, MBMessage.class.getName(),\n\t\t\t\tmessage.getMessageId());\n\n\t\t\tint oldStatus = trashVersion.getStatus();\n\n\t\t\tmessage.setStatus(oldStatus);\n\n\t\t\tmbMessagePersistence.update(message);\n\n\t\t\tuserIds.add(message.getUserId());\n\n\t\t\t// Asset\n\n\t\t\tif (oldStatus == WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tMBMessage.class.getName(), message.getMessageId(), true);\n\t\t\t}\n\n\t\t\t// Trash\n\n\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\n\t\t\t// Indexer\n\n\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\tMBMessage.class);\n\n\t\t\tindexer.reindex(message);\n\t\t}\n\n\t\t// Statistics\n\n\t\tfor (long userId : userIds) {\n\t\t\tmbStatsUserLocalService.updateStatsUser(groupId, userId);\n\t\t}\n\t}","commit_id":"1d28e8f8b3539f97270fcdd84b7a720d976afc42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Folder doMoveFolderToTrash(long userId, Folder folder)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Folder\n\n\t\tDLFolder dlFolder = dlFolderLocalService.updateStatus(\n\t\t\tuserId, folder.getFolderId(), WorkflowConstants.STATUS_IN_TRASH,\n\t\t\tnew HashMap<String, Serializable>(), new ServiceContext());\n\n\t\t// File rank\n\n\t\tdlFileRankLocalService.disableFileRanksByFolderId(folder.getFolderId());\n\n\t\t// Trash\n\n\t\tUnicodeProperties typeSettingsProperties = new UnicodeProperties();\n\n\t\ttypeSettingsProperties.put(\"title\", dlFolder.getName());\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.addTrashEntry(\n\t\t\tuserId, dlFolder.getGroupId(), DLFolderConstants.getClassName(),\n\t\t\tdlFolder.getFolderId(), dlFolder.getUuid(), null,\n\t\t\tWorkflowConstants.STATUS_APPROVED, null, typeSettingsProperties);\n\n\t\tdlFolder.setName(TrashUtil.getTrashTitle(trashEntry.getEntryId()));\n\n\t\tdlFolderPersistence.update(dlFolder);\n\n\t\t// Folders, file entries, and file shortcuts\n\n\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\tdlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null, false,\n\t\t\t\tqueryDefinition);\n\n\t\tdlAppHelperLocalService.moveDependentsToTrash(\n\t\t\tfoldersAndFileEntriesAndFileShortcuts);\n\n\t\t// Sync\n\n\t\tregisterDLSyncEventCallback(\n\t\t\tDLSyncConstants.EVENT_MOVE_TO_TRASH, folder);\n\n\t\t// Social\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"title\", folder.getName());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, folder.getGroupId(), DLFolderConstants.getClassName(),\n\t\t\tfolder.getFolderId(), SocialActivityConstants.TYPE_MOVE_TO_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\n\t\treturn new LiferayFolder(dlFolder);\n\t}","id":12773,"modified_method":"protected Folder doMoveFolderToTrash(long userId, Folder folder)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Folder\n\n\t\tDLFolder dlFolder = dlFolderLocalService.updateStatus(\n\t\t\tuserId, folder.getFolderId(), WorkflowConstants.STATUS_IN_TRASH,\n\t\t\tnew HashMap<String, Serializable>(), new ServiceContext());\n\n\t\t// File rank\n\n\t\tdlFileRankLocalService.disableFileRanksByFolderId(folder.getFolderId());\n\n\t\t// Trash\n\n\t\tUnicodeProperties typeSettingsProperties = new UnicodeProperties();\n\n\t\ttypeSettingsProperties.put(\"title\", dlFolder.getName());\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.addTrashEntry(\n\t\t\tuserId, dlFolder.getGroupId(), DLFolderConstants.getClassName(),\n\t\t\tdlFolder.getFolderId(), dlFolder.getUuid(), null,\n\t\t\tWorkflowConstants.STATUS_APPROVED, null, typeSettingsProperties);\n\n\t\tdlFolder.setName(TrashUtil.getTrashTitle(trashEntry.getEntryId()));\n\n\t\tdlFolderPersistence.update(dlFolder);\n\n\t\t// Folders, file entries, and file shortcuts\n\n\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\tdlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null, false,\n\t\t\t\tqueryDefinition);\n\n\t\tdlAppHelperLocalService.moveDependentsToTrash(\n\t\t\tfoldersAndFileEntriesAndFileShortcuts, trashEntry.getEntryId());\n\n\t\t// Sync\n\n\t\tregisterDLSyncEventCallback(\n\t\t\tDLSyncConstants.EVENT_MOVE_TO_TRASH, folder);\n\n\t\t// Social\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"title\", folder.getName());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, folder.getGroupId(), DLFolderConstants.getClassName(),\n\t\t\tfolder.getFolderId(), SocialActivityConstants.TYPE_MOVE_TO_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\n\t\treturn new LiferayFolder(dlFolder);\n\t}","commit_id":"b1affe037ed8e22cd4116bf3d186f6b9b5f2bbb2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void moveDependentsToTrash(List<Object> dlFileEntriesAndDLFolders)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : dlFileEntriesAndDLFolders) {\n\t\t\tif (object instanceof DLFileEntry) {\n\t\t\t\tDLFileEntry dlFileEntry = (DLFileEntry)object;\n\n\t\t\t\tList<DLFileVersion> dlFileVersions =\n\t\t\t\t\tdlFileVersionLocalService.getFileVersions(\n\t\t\t\t\t\tdlFileEntry.getFileEntryId(),\n\t\t\t\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\t\t\tdlFileVersions = ListUtil.copy(dlFileVersions);\n\n\t\t\t\tCollections.sort(\n\t\t\t\t\tdlFileVersions, new FileVersionVersionComparator());\n\n\t\t\t\t// File shortcut\n\n\t\t\t\tdlFileShortcutLocalService.disableFileShortcuts(\n\t\t\t\t\tdlFileEntry.getFileEntryId());\n\n\t\t\t\t// Asset\n\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tDLFileEntryConstants.getClassName(),\n\t\t\t\t\tdlFileEntry.getFileEntryId(), false);\n\n\t\t\t\t// Index\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\tindexer.reindex(dlFileEntry);\n\n\t\t\t\t// Workflow\n\n\t\t\t\tfor (DLFileVersion dlFileVersion : dlFileVersions) {\n\t\t\t\t\tif (!dlFileVersion.isPending()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tdlFileVersion.setStatus(WorkflowConstants.STATUS_DRAFT);\n\n\t\t\t\t\tdlFileVersionPersistence.update(dlFileVersion);\n\n\t\t\t\t\tworkflowInstanceLinkLocalService.deleteWorkflowInstanceLink(\n\t\t\t\t\t\tdlFileVersion.getCompanyId(),\n\t\t\t\t\t\tdlFileVersion.getGroupId(),\n\t\t\t\t\t\tDLFileEntryConstants.getClassName(),\n\t\t\t\t\t\tdlFileVersion.getFileVersionId());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (object instanceof DLFolder) {\n\t\t\t\tDLFolder dlFolder = (DLFolder)object;\n\n\t\t\t\tif (dlFolder.isInTrash()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Folders, file entries, and file shortcuts\n\n\t\t\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\t\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\t\t\tdlFolderLocalService.\n\t\t\t\t\t\tgetFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null,\n\t\t\t\t\t\t\tfalse, queryDefinition);\n\n\t\t\t\tmoveDependentsToTrash(foldersAndFileEntriesAndFileShortcuts);\n\n\t\t\t\t// Asset\n\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tDLFolderConstants.getClassName(), dlFolder.getFolderId(),\n\t\t\t\t\tfalse);\n\n\t\t\t\t// Index\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tDLFolder.class);\n\n\t\t\t\tindexer.reindex(dlFolder);\n\t\t\t}\n\t\t}\n\t}","id":12774,"modified_method":"@Override\n\tpublic void moveDependentsToTrash(\n\t\t\tList<Object> dlFileEntriesAndDLFolders, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : dlFileEntriesAndDLFolders) {\n\t\t\tif (object instanceof DLFileEntry) {\n\n\t\t\t\t// File entry\n\n\t\t\t\tDLFileEntry dlFileEntry = (DLFileEntry)object;\n\n\t\t\t\tif (dlFileEntry.isInTrash()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// File shortcut\n\n\t\t\t\tdlFileShortcutLocalService.disableFileShortcuts(\n\t\t\t\t\tdlFileEntry.getFileEntryId());\n\n\t\t\t\t// File Versions\n\n\t\t\t\tList<DLFileVersion> dlFileVersions =\n\t\t\t\t\tdlFileVersionLocalService.getFileVersions(\n\t\t\t\t\t\tdlFileEntry.getFileEntryId(),\n\t\t\t\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\t\t\tfor (DLFileVersion dlFileVersion : dlFileVersions) {\n\n\t\t\t\t\t// File version\n\n\t\t\t\t\tint oldStatus = dlFileVersion.getStatus();\n\n\t\t\t\t\tdlFileVersion.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\t\tdlFileVersionPersistence.update(dlFileVersion);\n\n\t\t\t\t\t// Trash\n\n\t\t\t\t\tint status = oldStatus;\n\n\t\t\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\t\t\tstatus = WorkflowConstants.STATUS_DRAFT;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (oldStatus != WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\t\t\ttrashEntryId, DLFileVersion.class.getName(),\n\t\t\t\t\t\t\tdlFileVersion.getFileVersionId(), status);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workflow\n\n\t\t\t\t\tif (oldStatus == WorkflowConstants.STATUS_PENDING) {\n\t\t\t\t\t\tworkflowInstanceLinkLocalService.\n\t\t\t\t\t\t\tdeleteWorkflowInstanceLink(\n\t\t\t\t\t\t\t\tdlFileVersion.getCompanyId(),\n\t\t\t\t\t\t\t\tdlFileVersion.getGroupId(),\n\t\t\t\t\t\t\t\tDLFileEntryConstants.getClassName(),\n\t\t\t\t\t\t\t\tdlFileVersion.getFileVersionId());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Asset\n\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tDLFileEntryConstants.getClassName(),\n\t\t\t\t\tdlFileEntry.getFileEntryId(), false);\n\n\t\t\t\t// Index\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\tindexer.reindex(dlFileEntry);\n\t\t\t}\n\t\t\telse if (object instanceof DLFolder) {\n\n\t\t\t\t// Folder\n\n\t\t\t\tDLFolder dlFolder = (DLFolder)object;\n\n\t\t\t\tif (dlFolder.isInTrash()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tint oldStatus = dlFolder.getStatus();\n\n\t\t\t\tdlFolder.setStatus(WorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\tdlFolderPersistence.update(dlFolder);\n\n\t\t\t\t// Trash\n\n\t\t\t\tif (oldStatus != WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\t\ttrashVersionLocalService.addTrashVersion(\n\t\t\t\t\t\ttrashEntryId, DLFolder.class.getName(),\n\t\t\t\t\t\tdlFolder.getFolderId(), oldStatus);\n\t\t\t\t}\n\n\t\t\t\t// Folders, file entries, and file shortcuts\n\n\t\t\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\t\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\t\t\tdlFolderLocalService.\n\t\t\t\t\t\tgetFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null,\n\t\t\t\t\t\t\tfalse, queryDefinition);\n\n\t\t\t\tmoveDependentsToTrash(\n\t\t\t\t\tfoldersAndFileEntriesAndFileShortcuts, trashEntryId);\n\n\t\t\t\t// Asset\n\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tDLFolderConstants.getClassName(), dlFolder.getFolderId(),\n\t\t\t\t\tfalse);\n\n\t\t\t\t// Index\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tDLFolder.class);\n\n\t\t\t\tindexer.reindex(dlFolder);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b1affe037ed8e22cd4116bf3d186f6b9b5f2bbb2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected FileEntry doMoveFileEntryFromTrash(\n\t\t\tlong userId, FileEntry fileEntry, long newFolderId,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tList<DLFileVersion> dlFileVersions =\n\t\t\tdlFileVersionLocalService.getFileVersions(\n\t\t\t\tfileEntry.getFileEntryId(), WorkflowConstants.STATUS_ANY);\n\n\t\tdlFileVersions = ListUtil.sort(\n\t\t\tdlFileVersions, new FileVersionVersionComparator());\n\n\t\tif (fileEntry.isInTrash()) {\n\t\t\trestoreFileEntryFromTrash(userId, fileEntry);\n\n\t\t\tfileEntry = dlAppLocalService.moveFileEntry(\n\t\t\t\tuserId, fileEntry.getFileEntryId(), newFolderId,\n\t\t\t\tserviceContext);\n\n\t\t\tif (DLAppHelperThreadLocal.isEnabled()) {\n\t\t\t\tdlFileRankLocalService.enableFileRanks(\n\t\t\t\t\tfileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\treturn fileEntry;\n\t\t}\n\n\t\tFileVersion fileVersion = new LiferayFileVersion(dlFileVersions.get(0));\n\n\t\tdlFileEntryLocalService.updateStatus(\n\t\t\tuserId, fileVersion.getFileVersionId(), fileVersion.getStatus(),\n\t\t\tnew HashMap<String, Serializable>(), serviceContext);\n\n\t\tif (DLAppHelperThreadLocal.isEnabled()) {\n\n\t\t\t// File rank\n\n\t\t\tdlFileRankLocalService.enableFileRanks(fileEntry.getFileEntryId());\n\n\t\t\t// File shortcut\n\n\t\t\tdlFileShortcutLocalService.enableFileShortcuts(\n\t\t\t\tfileEntry.getFileEntryId());\n\t\t}\n\n\t\t// App helper\n\n\t\tfileEntry = dlAppService.moveFileEntry(\n\t\t\tfileEntry.getFileEntryId(), newFolderId, serviceContext);\n\n\t\t// Sync\n\n\t\tregisterDLSyncEventCallback(\n\t\t\tDLSyncConstants.EVENT_RESTORE_FROM_TRASH, fileEntry);\n\n\t\t// Social\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"title\", fileEntry.getTitle());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, fileEntry.getGroupId(), DLFileEntryConstants.getClassName(),\n\t\t\tfileEntry.getFileEntryId(),\n\t\t\tSocialActivityConstants.TYPE_RESTORE_FROM_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\n\t\treturn fileEntry;\n\t}","id":12775,"modified_method":"protected FileEntry doMoveFileEntryFromTrash(\n\t\t\tlong userId, FileEntry fileEntry, long newFolderId,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// File entry\n\n\t\tDLFileEntry dlFileEntry = (DLFileEntry)fileEntry.getModel();\n\n\t\tTrashEntry trashEntry = dlFileEntry.getTrashEntry();\n\n\t\tif (trashEntry.isTrashEntry(\n\t\t\t\tDLFileEntry.class, dlFileEntry.getFileEntryId())) {\n\n\t\t\trestoreFileEntryFromTrash(userId, fileEntry);\n\n\t\t\tfileEntry = dlAppLocalService.moveFileEntry(\n\t\t\t\tuserId, fileEntry.getFileEntryId(), newFolderId,\n\t\t\t\tserviceContext);\n\n\t\t\tif (DLAppHelperThreadLocal.isEnabled()) {\n\t\t\t\tdlFileRankLocalService.enableFileRanks(\n\t\t\t\t\tfileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\treturn fileEntry;\n\t\t}\n\n\t\tList<DLFileVersion> dlFileVersions =\n\t\t\tdlFileVersionLocalService.getFileVersions(\n\t\t\t\tfileEntry.getFileEntryId(), WorkflowConstants.STATUS_IN_TRASH);\n\n\t\tdlFileVersions = ListUtil.sort(\n\t\t\tdlFileVersions, new FileVersionVersionComparator());\n\n\t\tFileVersion fileVersion = new LiferayFileVersion(dlFileVersions.get(0));\n\n\t\tTrashVersion trashVersion = trashVersionLocalService.fetchVersion(\n\t\t\ttrashEntry.getEntryId(), DLFileVersion.class.getName(),\n\t\t\tfileVersion.getFileVersionId());\n\n\t\tint oldStatus = WorkflowConstants.STATUS_APPROVED;\n\n\t\tif (trashVersion != null) {\n\t\t\toldStatus = trashVersion.getStatus();\n\t\t}\n\n\t\tdlFileEntryLocalService.updateStatus(\n\t\t\tuserId, fileVersion.getFileVersionId(), oldStatus,\n\t\t\tnew HashMap<String, Serializable>(), serviceContext);\n\n\t\t// File versions\n\n\t\tfor (DLFileVersion dlFileVersion : dlFileVersions) {\n\n\t\t\t// File version\n\n\t\t\ttrashVersion = trashVersionLocalService.fetchVersion(\n\t\t\t\ttrashEntry.getEntryId(), DLFileVersion.class.getName(),\n\t\t\t\tdlFileVersion.getFileVersionId());\n\n\t\t\toldStatus = WorkflowConstants.STATUS_APPROVED;\n\n\t\t\tif (trashVersion != null) {\n\t\t\t\toldStatus = trashVersion.getStatus();\n\t\t\t}\n\n\t\t\tdlFileVersion.setStatus(oldStatus);\n\n\t\t\tdlFileVersionPersistence.update(dlFileVersion);\n\n\t\t\t// Trash\n\n\t\t\tif (trashVersion != null) {\n\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\t\t\t}\n\t\t}\n\n\t\tif (DLAppHelperThreadLocal.isEnabled()) {\n\n\t\t\t// File rank\n\n\t\t\tdlFileRankLocalService.enableFileRanks(fileEntry.getFileEntryId());\n\n\t\t\t// File shortcut\n\n\t\t\tdlFileShortcutLocalService.enableFileShortcuts(\n\t\t\t\tfileEntry.getFileEntryId());\n\t\t}\n\n\t\t// App helper\n\n\t\tfileEntry = dlAppService.moveFileEntry(\n\t\t\tfileEntry.getFileEntryId(), newFolderId, serviceContext);\n\n\t\t// Sync\n\n\t\tregisterDLSyncEventCallback(\n\t\t\tDLSyncConstants.EVENT_RESTORE_FROM_TRASH, fileEntry);\n\n\t\t// Social\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"title\", fileEntry.getTitle());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, fileEntry.getGroupId(), DLFileEntryConstants.getClassName(),\n\t\t\tfileEntry.getFileEntryId(),\n\t\t\tSocialActivityConstants.TYPE_RESTORE_FROM_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\n\t\treturn fileEntry;\n\t}","commit_id":"b1affe037ed8e22cd4116bf3d186f6b9b5f2bbb2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Folder doMoveFolderFromTrash(\n\t\t\tlong userId, Folder folder, long parentFolderId,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFolder dlFolder = (DLFolder)folder.getModel();\n\n\t\tif (dlFolder.isInTrash()) {\n\t\t\trestoreFolderFromTrash(userId, folder);\n\t\t}\n\t\telse {\n\n\t\t\t// Folder\n\n\t\t\tdlFolderLocalService.updateStatus(\n\t\t\t\tuserId, folder.getFolderId(), WorkflowConstants.STATUS_APPROVED,\n\t\t\t\tnew HashMap<String, Serializable>(), new ServiceContext());\n\n\t\t\t// File rank\n\n\t\t\tdlFileRankLocalService.enableFileRanksByFolderId(\n\t\t\t\tfolder.getFolderId());\n\n\t\t\t// Folders, file entries, and file shortcuts\n\n\t\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\t\tdlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null, false,\n\t\t\t\t\tqueryDefinition);\n\n\t\t\tdlAppHelperLocalService.restoreDependentsFromTrash(\n\t\t\t\tfoldersAndFileEntriesAndFileShortcuts);\n\n\t\t\t// Sync\n\n\t\t\tregisterDLSyncEventCallback(\n\t\t\t\tDLSyncConstants.EVENT_RESTORE_FROM_TRASH, folder);\n\n\t\t\t// Social\n\n\t\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\t\textraDataJSONObject.put(\"title\", folder.getName());\n\n\t\t\tsocialActivityLocalService.addActivity(\n\t\t\t\tuserId, folder.getGroupId(), DLFolderConstants.class.getName(),\n\t\t\t\tfolder.getFolderId(),\n\t\t\t\tSocialActivityConstants.TYPE_RESTORE_FROM_TRASH,\n\t\t\t\textraDataJSONObject.toString(), 0);\n\t\t}\n\n\t\treturn dlAppLocalService.moveFolder(\n\t\t\tuserId, folder.getFolderId(), parentFolderId, serviceContext);\n\t}","id":12776,"modified_method":"protected Folder doMoveFolderFromTrash(\n\t\t\tlong userId, Folder folder, long parentFolderId,\n\t\t\tServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFolder dlFolder = (DLFolder)folder.getModel();\n\n\t\tTrashEntry trashEntry = dlFolder.getTrashEntry();\n\n\t\tif (trashEntry.isTrashEntry(DLFolder.class, dlFolder.getFolderId())) {\n\t\t\trestoreFolderFromTrash(userId, folder);\n\t\t}\n\t\telse {\n\n\t\t\t// Folder\n\n\t\t\tTrashVersion trashVersion =\n\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\ttrashEntry.getEntryId(), DLFolder.class.getName(),\n\t\t\t\t\tdlFolder.getFolderId());\n\n\t\t\tint status = WorkflowConstants.STATUS_APPROVED;\n\n\t\t\tif (trashVersion != null) {\n\t\t\t\tstatus = trashVersion.getStatus();\n\t\t\t}\n\n\t\t\tdlFolderLocalService.updateStatus(\n\t\t\t\tuserId, folder.getFolderId(), status,\n\t\t\t\tnew HashMap<String, Serializable>(), new ServiceContext());\n\n\t\t\t// File rank\n\n\t\t\tdlFileRankLocalService.enableFileRanksByFolderId(\n\t\t\t\tfolder.getFolderId());\n\n\t\t\t// Trash\n\n\t\t\tif (trashVersion != null) {\n\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\t\t\t}\n\n\t\t\t// Folders, file entries, and file shortcuts\n\n\t\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\t\tWorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\t\tdlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null, false,\n\t\t\t\t\tqueryDefinition);\n\n\t\t\tdlAppHelperLocalService.restoreDependentsFromTrash(\n\t\t\t\tfoldersAndFileEntriesAndFileShortcuts, trashEntry.getEntryId());\n\n\t\t\t// Sync\n\n\t\t\tregisterDLSyncEventCallback(\n\t\t\t\tDLSyncConstants.EVENT_RESTORE_FROM_TRASH, folder);\n\n\t\t\t// Social\n\n\t\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\t\textraDataJSONObject.put(\"title\", folder.getName());\n\n\t\t\tsocialActivityLocalService.addActivity(\n\t\t\t\tuserId, folder.getGroupId(), DLFolderConstants.class.getName(),\n\t\t\t\tfolder.getFolderId(),\n\t\t\t\tSocialActivityConstants.TYPE_RESTORE_FROM_TRASH,\n\t\t\t\textraDataJSONObject.toString(), 0);\n\t\t}\n\n\t\treturn dlAppLocalService.moveFolder(\n\t\t\tuserId, folder.getFolderId(), parentFolderId, serviceContext);\n\t}","commit_id":"b1affe037ed8e22cd4116bf3d186f6b9b5f2bbb2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void restoreFolderFromTrash(long userId, Folder folder)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Folder\n\n\t\tDLFolder dlFolder = (DLFolder)folder.getModel();\n\n\t\tdlFolder.setName(TrashUtil.getOriginalTitle(dlFolder.getName()));\n\n\t\tdlFolderPersistence.update(dlFolder);\n\n\t\tdlFolderLocalService.updateStatus(\n\t\t\tuserId, folder.getFolderId(), WorkflowConstants.STATUS_APPROVED,\n\t\t\tnew HashMap<String, Serializable>(), new ServiceContext());\n\n\t\t// File rank\n\n\t\tdlFileRankLocalService.enableFileRanksByFolderId(folder.getFolderId());\n\n\t\t// Folders, file entries, and file shortcuts\n\n\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\tdlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null, false,\n\t\t\t\tqueryDefinition);\n\n\t\tdlAppHelperLocalService.restoreDependentsFromTrash(\n\t\t\tfoldersAndFileEntriesAndFileShortcuts);\n\n\t\t// Sync\n\n\t\tregisterDLSyncEventCallback(\n\t\t\tDLSyncConstants.EVENT_RESTORE_FROM_TRASH, folder);\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.deleteEntry(\n\t\t\tDLFolderConstants.getClassName(), dlFolder.getFolderId());\n\n\t\t// Social\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"title\", folder.getName());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, folder.getGroupId(), DLFolderConstants.getClassName(),\n\t\t\tfolder.getFolderId(),\n\t\t\tSocialActivityConstants.TYPE_RESTORE_FROM_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\t}","id":12777,"modified_method":"@Override\n\tpublic void restoreFolderFromTrash(long userId, Folder folder)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Folder\n\n\t\tDLFolder dlFolder = (DLFolder)folder.getModel();\n\n\t\tdlFolder.setName(TrashUtil.getOriginalTitle(dlFolder.getName()));\n\n\t\tdlFolderPersistence.update(dlFolder);\n\n\t\tTrashEntry trashEntry = trashEntryLocalService.getEntry(\n\t\t\tDLFolder.class.getName(), dlFolder.getFolderId());\n\n\t\tdlFolderLocalService.updateStatus(\n\t\t\tuserId, folder.getFolderId(), trashEntry.getStatus(),\n\t\t\tnew HashMap<String, Serializable>(), new ServiceContext());\n\n\t\t// File rank\n\n\t\tdlFileRankLocalService.enableFileRanksByFolderId(folder.getFolderId());\n\n\t\t// Folders, file entries, and file shortcuts\n\n\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\tWorkflowConstants.STATUS_IN_TRASH);\n\n\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\tdlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null, false,\n\t\t\t\tqueryDefinition);\n\n\t\tdlAppHelperLocalService.restoreDependentsFromTrash(\n\t\t\tfoldersAndFileEntriesAndFileShortcuts, trashEntry.getEntryId());\n\n\t\t// Sync\n\n\t\tregisterDLSyncEventCallback(\n\t\t\tDLSyncConstants.EVENT_RESTORE_FROM_TRASH, folder);\n\n\t\t// Trash\n\n\t\ttrashEntryLocalService.deleteEntry(trashEntry.getEntryId());\n\n\t\t// Social\n\n\t\tJSONObject extraDataJSONObject = JSONFactoryUtil.createJSONObject();\n\n\t\textraDataJSONObject.put(\"title\", folder.getName());\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, folder.getGroupId(), DLFolderConstants.getClassName(),\n\t\t\tfolder.getFolderId(),\n\t\t\tSocialActivityConstants.TYPE_RESTORE_FROM_TRASH,\n\t\t\textraDataJSONObject.toString(), 0);\n\t}","commit_id":"b1affe037ed8e22cd4116bf3d186f6b9b5f2bbb2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void restoreDependentsFromTrash(\n\t\t\tList<Object> dlFileEntriesAndDLFolders)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : dlFileEntriesAndDLFolders) {\n\t\t\tif (object instanceof DLFileEntry) {\n\t\t\t\tDLFileEntry dlFileEntry = (DLFileEntry)object;\n\n\t\t\t\tList<DLFileVersion> dlFileVersions =\n\t\t\t\t\tdlFileVersionLocalService.getFileVersions(\n\t\t\t\t\t\tdlFileEntry.getFileEntryId(),\n\t\t\t\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\t\t\tdlFileVersions = ListUtil.copy(dlFileVersions);\n\n\t\t\t\tCollections.sort(\n\t\t\t\t\tdlFileVersions, new FileVersionVersionComparator());\n\n\t\t\t\tDLFileVersion latestDlFileVersion = dlFileVersions.get(0);\n\n\t\t\t\tif (latestDlFileVersion.getStatus() ==\n\t\t\t\t\t\tWorkflowConstants.STATUS_IN_TRASH) {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// File shortcut\n\n\t\t\t\tdlFileShortcutLocalService.enableFileShortcuts(\n\t\t\t\t\tdlFileEntry.getFileEntryId());\n\n\t\t\t\t// Asset\n\n\t\t\t\tif (latestDlFileVersion.isApproved()) {\n\t\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\t\tDLFileEntryConstants.getClassName(),\n\t\t\t\t\t\tdlFileEntry.getFileEntryId(), true);\n\t\t\t\t}\n\n\t\t\t\t// Index\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\tindexer.reindex(dlFileEntry);\n\t\t\t}\n\t\t\telse if (object instanceof DLFolder) {\n\t\t\t\tDLFolder dlFolder = (DLFolder)object;\n\n\t\t\t\tif (dlFolder.isInTrash()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Folders, file entries, and file shortcuts\n\n\t\t\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\t\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\t\t\tdlFolderLocalService.\n\t\t\t\t\t\tgetFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null,\n\t\t\t\t\t\t\tfalse, queryDefinition);\n\n\t\t\t\trestoreDependentsFromTrash(\n\t\t\t\t\tfoldersAndFileEntriesAndFileShortcuts);\n\n\t\t\t\t// Asset\n\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tDLFolderConstants.getClassName(), dlFolder.getFolderId(),\n\t\t\t\t\ttrue);\n\n\t\t\t\t// Index\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tDLFolder.class);\n\n\t\t\t\tindexer.reindex(dlFolder);\n\t\t\t}\n\t\t}\n\t}","id":12778,"modified_method":"@Override\n\tpublic void restoreDependentsFromTrash(\n\t\t\tList<Object> dlFileEntriesAndDLFolders, long trashEntryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfor (Object object : dlFileEntriesAndDLFolders) {\n\t\t\tif (object instanceof DLFileEntry) {\n\n\t\t\t\t// File entry\n\n\t\t\t\tDLFileEntry dlFileEntry = (DLFileEntry)object;\n\n\t\t\t\tTrashEntry trashEntry = trashEntryLocalService.fetchEntry(\n\t\t\t\t\tDLFileEntry.class.getName(), dlFileEntry.getFileEntryId());\n\n\t\t\t\tif (trashEntry != null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// File versions\n\n\t\t\t\tList<DLFileVersion> dlFileVersions =\n\t\t\t\t\tdlFileVersionLocalService.getFileVersions(\n\t\t\t\t\t\tdlFileEntry.getFileEntryId(),\n\t\t\t\t\t\tWorkflowConstants.STATUS_IN_TRASH);\n\n\t\t\t\tfor (DLFileVersion dlFileVersion : dlFileVersions) {\n\t\t\t\t\tTrashVersion trashVersion =\n\t\t\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\t\t\ttrashEntryId, DLFileVersion.class.getName(),\n\t\t\t\t\t\t\tdlFileVersion.getFileVersionId());\n\n\t\t\t\t\tint oldStatus = WorkflowConstants.STATUS_APPROVED;\n\n\t\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\t\toldStatus = trashVersion.getStatus();\n\t\t\t\t\t}\n\n\t\t\t\t\tdlFileVersion.setStatus(oldStatus);\n\n\t\t\t\t\tdlFileVersionPersistence.update(dlFileVersion);\n\n\t\t\t\t\t// Trash\n\n\t\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\t\ttrashVersionLocalService.deleteTrashVersion(\n\t\t\t\t\t\t\ttrashVersion);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// File shortcut\n\n\t\t\t\tdlFileShortcutLocalService.enableFileShortcuts(\n\t\t\t\t\tdlFileEntry.getFileEntryId());\n\n\t\t\t\t// Asset\n\n\t\t\t\tDLFileVersion latestDlFileVersion =\n\t\t\t\t\tdlFileEntry.getLatestFileVersion(false);\n\n\t\t\t\tif (latestDlFileVersion.isApproved()) {\n\t\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\t\tDLFileEntryConstants.getClassName(),\n\t\t\t\t\t\tdlFileEntry.getFileEntryId(), true);\n\t\t\t\t}\n\n\t\t\t\t// Index\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\tindexer.reindex(dlFileEntry);\n\t\t\t}\n\t\t\telse if (object instanceof DLFolder) {\n\n\t\t\t\t// Folder\n\n\t\t\t\tDLFolder dlFolder = (DLFolder)object;\n\n\t\t\t\tTrashEntry trashEntry = trashEntryLocalService.fetchEntry(\n\t\t\t\t\tDLFolder.class.getName(), dlFolder.getFolderId());\n\n\t\t\t\tif (trashEntry != null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tTrashVersion trashVersion =\n\t\t\t\t\ttrashVersionLocalService.fetchVersion(\n\t\t\t\t\t\ttrashEntryId, DLFolder.class.getName(),\n\t\t\t\t\t\tdlFolder.getFolderId());\n\n\t\t\t\tint oldStatus = WorkflowConstants.STATUS_APPROVED;\n\n\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\toldStatus = trashVersion.getStatus();\n\t\t\t\t}\n\n\t\t\t\tdlFolder.setStatus(oldStatus);\n\n\t\t\t\tdlFolderPersistence.update(dlFolder);\n\n\t\t\t\t// Folders, file entries, and file shortcuts\n\n\t\t\t\tQueryDefinition queryDefinition = new QueryDefinition(\n\t\t\t\t\tWorkflowConstants.STATUS_ANY);\n\n\t\t\t\tList<Object> foldersAndFileEntriesAndFileShortcuts =\n\t\t\t\t\tdlFolderLocalService.\n\t\t\t\t\t\tgetFoldersAndFileEntriesAndFileShortcuts(\n\t\t\t\t\t\t\tdlFolder.getGroupId(), dlFolder.getFolderId(), null,\n\t\t\t\t\t\t\tfalse, queryDefinition);\n\n\t\t\t\trestoreDependentsFromTrash(\n\t\t\t\t\tfoldersAndFileEntriesAndFileShortcuts, trashEntryId);\n\n\t\t\t\t// Trash\n\n\t\t\t\tif (trashVersion != null) {\n\t\t\t\t\ttrashVersionLocalService.deleteTrashVersion(trashVersion);\n\t\t\t\t}\n\n\t\t\t\t// Asset\n\n\t\t\t\tassetEntryLocalService.updateVisible(\n\t\t\t\t\tDLFolderConstants.getClassName(), dlFolder.getFolderId(),\n\t\t\t\t\ttrue);\n\n\t\t\t\t// Index\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tDLFolder.class);\n\n\t\t\t\tindexer.reindex(dlFolder);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b1affe037ed8e22cd4116bf3d186f6b9b5f2bbb2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * @see org.opencms.configuration.I_CmsConfigurationParameterHandler#getConfiguration()\n     */\n    public ExtendedProperties getConfiguration() {\n\n        // this configuration does not support parameters\n        if (OpenCms.getLog(this).isDebugEnabled()) {\n            OpenCms.getLog(this).debug(\"getConfiguration() called on \" + this);\n        }\n        return null;\n    }","id":12779,"modified_method":"/**\n     * @see org.opencms.configuration.I_CmsConfigurationParameterHandler#getConfiguration()\n     */\n    public ExtendedProperties getConfiguration() {\n\n        // TODO: should be immutable\n        return m_configuration;\n    }","commit_id":"a939d87ed591486540388b131b3888daf786a81b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.configuration.I_CmsConfigurationParameterHandler#addConfigurationParameter(java.lang.String, java.lang.String)\n     */\n    public void addConfigurationParameter(String paramName, String paramValue) {\n\n        // this configuration does not support parameters \n        if (OpenCms.getLog(this).isDebugEnabled()) {\n            OpenCms.getLog(this).debug(\n                \"addConfigurationParameter(\" + paramName + \", \" + paramValue + \") called on \" + this);\n        }\n    }","id":12780,"modified_method":"/**\n     * @see org.opencms.configuration.I_CmsConfigurationParameterHandler#addConfigurationParameter(java.lang.String, java.lang.String)\n     */\n    public void addConfigurationParameter(String paramName, String paramValue) {\n\n        m_configuration.addProperty(paramName, paramValue);\n    }","commit_id":"a939d87ed591486540388b131b3888daf786a81b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * The constructor does not perform any operation.<p>\n     */\n    public CmsDefaultPasswordHandler() {\n        // empty\n    }","id":12781,"modified_method":"/**\n     * The constructor does not perform any operation.<p>\n     */\n    public CmsDefaultPasswordHandler() {\n        \n        m_configuration = new ExtendedProperties();\n    }","commit_id":"a939d87ed591486540388b131b3888daf786a81b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Imports a single user.<p>\n     * @param name user name\n     * @param description user description\n     * @param flags user flags\n     * @param password user password \n     * @param firstname firstname of the user\n     * @param lastname lastname of the user\n     * @param email user email\n     * @param address user address \n     * @param type user type\n     * @param userInfo user info\n     * @param userGroups user groups\n     * \n     * @throws CmsException in case something goes wrong\n     */\n    protected void importUser(String name, String description, String flags, String password, String firstname, String lastname, String email, String address, String type, Hashtable userInfo, Vector userGroups) throws CmsException {\n     \n        if (!\"com.opencms.legacy.CmsLegacyPasswordHandler\".equals(OpenCms.getPasswordHandler().getClass().getName())) {\n            password = convertDigestEncoding(password);\n        }\n        super.importUser(name, description, flags, password, firstname, lastname, email, address, type, userInfo, userGroups);\n    }","id":12782,"modified_method":"/**\n     * Imports a single user.<p>\n     * @param name user name\n     * @param description user description\n     * @param flags user flags\n     * @param password user password \n     * @param firstname firstname of the user\n     * @param lastname lastname of the user\n     * @param email user email\n     * @param address user address \n     * @param type user type\n     * @param userInfo user info\n     * @param userGroups user groups\n     * \n     * @throws CmsException in case something goes wrong\n     */\n    protected void importUser(String name, String description, String flags, String password, String firstname, String lastname, String email, String address, String type, Hashtable userInfo, Vector userGroups) throws CmsException {\n     \n        boolean convert = false;\n        \n        ExtendedProperties config = OpenCms.getPasswordHandler().getConfiguration();\n        if (config != null && config.containsKey(I_CmsPasswordHandler.C_CONVERT_DIGEST_ENCODING)) {\n            convert = config.getBoolean(I_CmsPasswordHandler.C_CONVERT_DIGEST_ENCODING);\n        } \n            \n        if (convert) {\n            password = convertDigestEncoding(password);\n        }\n\n        super.importUser(name, description, flags, password, firstname, lastname, email, address, type, userInfo, userGroups);\n    }","commit_id":"a939d87ed591486540388b131b3888daf786a81b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Imports a single user.<p>\n     * @param name user name\n     * @param description user description\n     * @param flags user flags\n     * @param password user password \n     * @param firstname firstname of the user\n     * @param lastname lastname of the user\n     * @param email user email\n     * @param address user address \n     * @param type user type\n     * @param userInfo user info\n     * @param userGroups user groups\n     * \n     * @throws CmsException in case something goes wrong\n     */\n    protected void importUser(String name, String description, String flags, String password, String firstname, String lastname, String email, String address, String type, Hashtable userInfo, Vector userGroups) throws CmsException {\n     \n        if (!\"com.opencms.legacy.CmsLegacyPasswordHandler\".equals(OpenCms.getPasswordHandler().getClass().getName())) {\n            password = convertDigestEncoding(password);\n        }\n        super.importUser(name, description, flags, password, firstname, lastname, email, address, type, userInfo, userGroups);\n    }","id":12783,"modified_method":"/**\n     * Imports a single user.<p>\n     * @param name user name\n     * @param description user description\n     * @param flags user flags\n     * @param password user password \n     * @param firstname firstname of the user\n     * @param lastname lastname of the user\n     * @param email user email\n     * @param address user address \n     * @param type user type\n     * @param userInfo user info\n     * @param userGroups user groups\n     * \n     * @throws CmsException in case something goes wrong\n     */\n    protected void importUser(String name, String description, String flags, String password, String firstname, String lastname, String email, String address, String type, Hashtable userInfo, Vector userGroups) throws CmsException {\n     \n        boolean convert = false;\n        \n        ExtendedProperties config = OpenCms.getPasswordHandler().getConfiguration();\n        if (config != null && config.containsKey(I_CmsPasswordHandler.C_CONVERT_DIGEST_ENCODING)) {\n            convert = config.getBoolean(I_CmsPasswordHandler.C_CONVERT_DIGEST_ENCODING);\n        } \n            \n        if (convert) {\n            password = convertDigestEncoding(password);\n        }\n\n        super.importUser(name, description, flags, password, firstname, lastname, email, address, type, userInfo, userGroups);\n    }","commit_id":"a939d87ed591486540388b131b3888daf786a81b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Imports a single user.<p>\n     * @param name user name\n     * @param description user description\n     * @param flags user flags\n     * @param password user password \n     * @param firstname firstname of the user\n     * @param lastname lastname of the user\n     * @param email user email\n     * @param address user address \n     * @param type user type\n     * @param userInfo user info\n     * @param userGroups user groups\n     * \n     * @throws CmsException in case something goes wrong\n     */\n    protected void importUser(String name, String description, String flags, String password, String firstname, String lastname, String email, String address, String type, Hashtable userInfo, Vector userGroups) throws CmsException {\n     \n        if (!\"com.opencms.legacy.CmsLegacyPasswordHandler\".equals(OpenCms.getPasswordHandler().getClass().getName())) {\n            password = convertDigestEncoding(password);\n        }\n        super.importUser(name, description, flags, password, firstname, lastname, email, address, type, userInfo, userGroups);\n    }","id":12784,"modified_method":"/**\n     * Imports a single user.<p>\n     * @param name user name\n     * @param description user description\n     * @param flags user flags\n     * @param password user password \n     * @param firstname firstname of the user\n     * @param lastname lastname of the user\n     * @param email user email\n     * @param address user address \n     * @param type user type\n     * @param userInfo user info\n     * @param userGroups user groups\n     * \n     * @throws CmsException in case something goes wrong\n     */\n    protected void importUser(String name, String description, String flags, String password, String firstname, String lastname, String email, String address, String type, Hashtable userInfo, Vector userGroups) throws CmsException {\n        \n        boolean convert = false;\n        \n        ExtendedProperties config = OpenCms.getPasswordHandler().getConfiguration();\n        if (config != null && config.containsKey(I_CmsPasswordHandler.C_CONVERT_DIGEST_ENCODING)) {\n            convert = config.getBoolean(I_CmsPasswordHandler.C_CONVERT_DIGEST_ENCODING);\n        } \n            \n        if (convert) {\n            password = convertDigestEncoding(password);\n        }\n        \n        super.importUser(name, description, flags, password, firstname, lastname, email, address, type, userInfo, userGroups);\n    }","commit_id":"a939d87ed591486540388b131b3888daf786a81b","url":"https://github.com/alkacon/opencms-core"},{"original_method":"@Override\n    public void refresh() {\n        resetContainer();\n\n        // get all host systems\n        List<OnmsNode> hostSystems = m_nodeDao.findAllByVarCharAssetColumn(\"vmwareManagedEntityType\", \"HostSystem\");\n        if (hostSystems.isEmpty()) {\n            LOG.info(\"refresh: No host systems with defined VMware assets fields found!\");\n        }\n        for (OnmsNode hostSystem : hostSystems) {\n            addHostSystem(hostSystem);\n        }\n\n        // get all virtual machines\n        List<OnmsNode> virtualMachines = m_nodeDao.findAllByVarCharAssetColumn(\"vmwareManagedEntityType\", \"VirtualMachine\");\n        if (virtualMachines.isEmpty()) {\n            LOG.info(\"refresh: No virtual machines with defined VMware assets fields found!\");\n        }\n        for (OnmsNode virtualMachine : virtualMachines) {\n            addVirtualMachine(virtualMachine);\n        }\n    }","id":12785,"modified_method":"@Override\n    public void refresh() {\n        resetContainer();\n\n        getEntities(\"HostSystem\").stream().forEach(e -> addHostSystem(e));\n        getEntities(\"VirtualMachine\").stream().forEach(e -> addVirtualMachine(e));\n    }","commit_id":"611c57c20ebb10e0fef10f5ff29f43ddd5305d2d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private AbstractVertex createDatastoreVertex(String vertexId, String vertexName) {\n        if (containsVertexId(vertexId)) {\n            return (AbstractVertex) getVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId);\n        }\n        AbstractVertex vertex = new AbstractVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId, vertexName);\n        vertex.setIconKey(Icons.DATASTORE);\n        return vertex;\n    }","id":12786,"modified_method":"private AbstractVertex createDatastoreVertex(String vertexId, String vertexName) {\n        return createEntityVertex(vertexId, vertexName, Icons.DATASTORE);\n    }","commit_id":"611c57c20ebb10e0fef10f5ff29f43ddd5305d2d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private AbstractVertex createDatacenterVertex(String vertexId, String vertexName) {\n        if (containsVertexId(vertexId)) {\n            return (AbstractVertex) getVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId);\n        }\n        AbstractVertex datacenterVertex = new AbstractVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId, vertexName);\n        datacenterVertex.setIconKey(Icons.DATACENTER);\n        return datacenterVertex;\n    }","id":12787,"modified_method":"private AbstractVertex createDatacenterVertex(String vertexId, String vertexName) {\n        return createEntityVertex(vertexId, vertexName, Icons.DATACENTER);\n    }","commit_id":"611c57c20ebb10e0fef10f5ff29f43ddd5305d2d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private AbstractVertex createHostSystemVertex(String vertexId, String vertexName, String primaryInterface, int id, String powerState) {\n        if (containsVertexId(vertexId)) {\n            return (AbstractVertex) getVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId);\n        }\n\n        String icon = \"vmware.HOSTSYSTEM_ICON_UNKNOWN\";\n\n        if (\"poweredOn\".equals(powerState)) {\n            icon = \"vmware.HOSTSYSTEM_ICON_ON\";\n        } else if (\"poweredOff\".equals(powerState)) {\n            icon = \"vmware.HOSTSYSTEM_ICON_OFF\";\n        } else if (\"standBy\".equals(powerState)) {\n            icon = \"vmware.HOSTSYSTEM_ICON_STANDBY\";\n        }\n\n        AbstractVertex vertex = new AbstractVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId, vertexName);\n        vertex.setIconKey(icon);\n        vertex.setIpAddress(primaryInterface);\n        vertex.setNodeID(id);\n        return vertex;\n    }","id":12788,"modified_method":"private AbstractVertex createHostSystemVertex(String vertexId, String vertexName, String primaryInterface, int id, String powerState) {\n        AbstractVertex vertex;\n        if (\"poweredOn\".equals(powerState)) {\n            vertex = createEntityVertex(vertexId, vertexName, Icons.HOSTSYSTEM_ON);\n        } else if (\"poweredOff\".equals(powerState)) {\n            vertex = createEntityVertex(vertexId, vertexName, Icons.HOSTSYSTEM_OFF);\n        } else if (\"standBy\".equals(powerState)) {\n            vertex = createEntityVertex(vertexId, vertexName, Icons.HOSTSYSTEM_STANDBY);\n        } else {\n            vertex = createEntityVertex(vertexId, vertexName, Icons.HOSTSYSTEM_UNKNOWN);\n        }\n        vertex.setIpAddress(primaryInterface);\n        vertex.setNodeID(id);\n        return vertex;\n    }","commit_id":"611c57c20ebb10e0fef10f5ff29f43ddd5305d2d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private AbstractVertex createVirtualMachineVertex(String vertexId, String vertexName, String primaryInterface, int id, String powerState) {\n        if (containsVertexId(vertexId)) {\n            return (AbstractVertex) getVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId);\n        }\n        String icon = \"vmware.VIRTUALMACHINE_ICON_UNKNOWN\";\n        if (\"poweredOn\".equals(powerState)) {\n            icon = \"vmware.VIRTUALMACHINE_ICON_ON\";\n        } else if (\"poweredOff\".equals(powerState)) {\n            icon = \"vmware.VIRTUALMACHINE_ICON_OFF\";\n        } else if (\"suspended\".equals(powerState)) {\n            icon = \"vmware.VIRTUALMACHINE_ICON_SUSPENDED\";\n        }\n\n        AbstractVertex vertex = new AbstractVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId, vertexName);\n        vertex.setIconKey(icon);\n        vertex.setIpAddress(primaryInterface);\n        vertex.setNodeID(id);\n        return vertex;\n    }","id":12789,"modified_method":"private AbstractVertex createVirtualMachineVertex(String vertexId, String vertexName, String primaryInterface, int id, String powerState) {\n        AbstractVertex vertex;\n        if (\"poweredOn\".equals(powerState)) {\n            vertex = createEntityVertex(vertexId, vertexName, Icons.VIRTUAL_MACHINE_ON);\n        } else if (\"poweredOff\".equals(powerState)) {\n            vertex = createEntityVertex(vertexId, vertexName, Icons.VIRTUAL_MACHINE_OFF);\n        } else if (\"suspended\".equals(powerState)) {\n            vertex = createEntityVertex(vertexId, vertexName, Icons.VIRTUAL_MACHINE_SUSPENDED);\n        } else {\n            vertex = createEntityVertex(vertexId, vertexName, Icons.VIRTUAL_MACHINE_UNKNOWN);\n        }\n        vertex.setIpAddress(primaryInterface);\n        vertex.setNodeID(id);\n        return vertex;\n    }","commit_id":"611c57c20ebb10e0fef10f5ff29f43ddd5305d2d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public Defaults getDefaults() {\n        return new Defaults()\n                .withCriteria(() -> {\n                    if (getVertices().isEmpty()) {\n                        return Lists.newArrayList();\n                    }\n                    return Lists.newArrayList(new DefaultVertexHopCriteria(getVertices().get(0)));\n                });\n    }","id":12790,"modified_method":"@Override\n    public Defaults getDefaults() {\n        return new Defaults()\n                .withCriteria(() -> {\n                    if (getVertices().isEmpty()) {\n                        return Lists.newArrayList();\n                    }\n                    return getVertices().stream().filter(e -> Icons.DATACENTER.equals(e.getIconKey())).map(DefaultVertexHopCriteria::new).collect(Collectors.toList());\n                });\n    }","commit_id":"611c57c20ebb10e0fef10f5ff29f43ddd5305d2d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void addHostSystem(OnmsNode hostSystem) {\n        String vmwareManagementServer = hostSystem.getAssetRecord().getVmwareManagementServer().trim();\n        String vmwareManagedObjectId = hostSystem.getAssetRecord().getVmwareManagedObjectId().trim();\n        String vmwareTopologyInfo = hostSystem.getAssetRecord().getVmwareTopologyInfo().trim();\n        String vmwareState = hostSystem.getAssetRecord().getVmwareState().trim();\n        String datacenterName = \"Datacenter (\" + vmwareManagementServer + \")\";\n        String datacenterMoId = null;\n\n        ArrayList<String> networks = new ArrayList<String>();\n        ArrayList<String> datastores = new ArrayList<String>();\n\n        HashMap<String, String> moIdToName = new HashMap<String, String>();\n\n        String[] entities = vmwareTopologyInfo.split(SPLIT_REGEXP);\n\n        for (String entityAndName : entities) {\n            String[] splitBySlash = entityAndName.split(\"/\");\n            String entityId = splitBySlash[0];\n\n            String entityName = \"unknown\";\n\n            if (splitBySlash.length > 1) {\n                try {\n                    entityName = new String(URLDecoder.decode(splitBySlash[1], \"UTF-8\"));\n                } catch (UnsupportedEncodingException e) {\n                    LOG.error(e.getMessage(), e);\n                }\n            }\n\n            String entityType = entityId.split(\"-\")[0];\n\n            if (\"network\".equals(entityType)) {\n                networks.add(entityId);\n            }\n\n            if (\"datastore\".equals(entityType)) {\n                datastores.add(entityId);\n            }\n\n            if (\"datacenter\".equals(entityType)) {\n                datacenterMoId = entityId;\n            }\n\n            moIdToName.put(entityId, entityName);\n        }\n\n        if (datacenterMoId != null) {\n            datacenterName = moIdToName.get(datacenterMoId) + \" (\" + vmwareManagementServer + \")\";\n        }\n\n        AbstractVertex datacenterVertex = createDatacenterVertex(vmwareManagementServer, datacenterName);\n        addVertices(datacenterVertex);\n\n        String primaryInterface = \"unknown\";\n\n        // get the primary interface ip address\n        OnmsIpInterface ipInterface = m_ipInterfaceDao.findPrimaryInterfaceByNodeId(hostSystem.getId());\n\n        if (ipInterface != null) {\n            primaryInterface = ipInterface.getIpHostName();\n        }\n\n        AbstractVertex hostSystemVertex = createHostSystemVertex(vmwareManagementServer + \"/\" + vmwareManagedObjectId, hostSystem.getLabel(), primaryInterface, hostSystem.getId(), vmwareState);\n        addVertices(hostSystemVertex);\n\n        // set the parent vertex\n        if (!hostSystemVertex.equals(datacenterVertex)) {\n            connectVertices(hostSystemVertex, datacenterVertex);\n        }\n\n        for (String network : networks) {\n            AbstractVertex networkVertex = createNetworkVertex(vmwareManagementServer + \"/\" + network, moIdToName.get(network));\n            addVertices(networkVertex);\n            connectVertices(vmwareManagementServer + \"/\" + vmwareManagedObjectId + \"->\" + network, hostSystemVertex, networkVertex, getEdgeNamespace());\n        }\n        for (String datastore : datastores) {\n            AbstractVertex datastoreVertex = createDatastoreVertex(vmwareManagementServer + \"/\" + datastore, moIdToName.get(datastore));\n            addVertices(datastoreVertex);\n            connectVertices(vmwareManagementServer + \"/\" + vmwareManagedObjectId + \"->\" + datastore, hostSystemVertex, datastoreVertex, getEdgeNamespace());\n        }\n    }","id":12791,"modified_method":"private void addHostSystem(OnmsNode hostSystem) {\n        String vmwareManagementServer = hostSystem.getAssetRecord().getVmwareManagementServer().trim();\n        String vmwareManagedObjectId = hostSystem.getAssetRecord().getVmwareManagedObjectId().trim();\n        String vmwareState = hostSystem.getAssetRecord().getVmwareState().trim();\n        String primaryInterface = \"unknown\";\n        OnmsIpInterface ipInterface = m_ipInterfaceDao.findPrimaryInterfaceByNodeId(hostSystem.getId());\n\n        if (ipInterface != null) {\n            primaryInterface = ipInterface.getIpHostName();\n        }\n\n        AbstractVertex hostSystemVertex = createHostSystemVertex(\n                vmwareManagementServer + \"/\" + vmwareManagedObjectId,\n                hostSystem.getLabel(),\n                primaryInterface,\n                hostSystem.getId(),\n                vmwareState\n        );\n\n        addVertices(hostSystemVertex);\n\n        Map<String, ParsedEntity> parsedEntities = parseNodeAssets(hostSystem);\n\n        String datacenterName = parsedEntities.values().stream().filter(e -> \"datacenter\".equals(e.getEntityType())).findFirst().map(e -> parsedEntities.get(e.getEntityId()).getEntityName() + \" (\" + vmwareManagementServer + \")\").orElse(\"Datacenter (\" + vmwareManagementServer + \")\");\n\n        AbstractVertex datacenterVertex = createDatacenterVertex(vmwareManagementServer, datacenterName);\n        addVertices(datacenterVertex);\n\n        if (!hostSystemVertex.equals(datacenterVertex)) {\n            connectVertices(hostSystemVertex, datacenterVertex);\n        }\n\n        parsedEntities.values().stream().filter(e -> \"network\".equals(e.getEntityType())).forEach(\n                e -> {\n                    AbstractVertex networkVertex = createNetworkVertex(vmwareManagementServer + \"/\" + e.getEntityId(), parsedEntities.get(e.getEntityId()).getEntityName());\n                    addVertices(networkVertex);\n\n                    connectVertices(\n                            vmwareManagementServer + \"/\" + vmwareManagedObjectId + \"->\" + e.getEntityId(),\n                            hostSystemVertex,\n                            networkVertex,\n                            getEdgeNamespace()\n                    );\n                }\n        );\n\n        parsedEntities.values().stream().filter(e -> \"datastore\".equals(e.getEntityType())).forEach(\n                e -> {\n                    AbstractVertex datastoreVertex = createDatastoreVertex(vmwareManagementServer + \"/\" + e.getEntityId(), parsedEntities.get(e.getEntityId()).getEntityName());\n                    addVertices(datastoreVertex);\n\n                    connectVertices(\n                            vmwareManagementServer + \"/\" + vmwareManagedObjectId + \"->\" + e.getEntityId(),\n                            hostSystemVertex,\n                            datastoreVertex,\n                            getEdgeNamespace()\n                    );\n                }\n        );\n    }","commit_id":"611c57c20ebb10e0fef10f5ff29f43ddd5305d2d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void addVirtualMachine(OnmsNode virtualMachine) {\n        String vmwareManagementServer = virtualMachine.getAssetRecord().getVmwareManagementServer().trim();\n        String vmwareManagedObjectId = virtualMachine.getAssetRecord().getVmwareManagedObjectId().trim();\n        String vmwareTopologyInfo = virtualMachine.getAssetRecord().getVmwareTopologyInfo().trim();\n        String vmwareState = virtualMachine.getAssetRecord().getVmwareState().trim();\n        String datacenterName = \"Datacenter (\" + vmwareManagementServer + \")\";\n\n        String datacenterMoId = null;\n        String vmwareHostSystemId = null;\n\n        ArrayList<String> networks = new ArrayList<String>();\n        ArrayList<String> datastores = new ArrayList<String>();\n\n        HashMap<String, String> moIdToName = new HashMap<String, String>();\n\n        String[] entities = vmwareTopologyInfo.split(SPLIT_REGEXP);\n\n        for (String entityAndName : entities) {\n            String[] splitBySlash = entityAndName.split(\"/\");\n            String entityId = splitBySlash[0];\n\n            String entityName = \"unknown\";\n\n            if (splitBySlash.length > 1) {\n                try {\n                    entityName = new String(URLDecoder.decode(splitBySlash[1], \"UTF-8\"));\n                } catch (UnsupportedEncodingException e) {\n                    LOG.error(e.getMessage(), e);\n                }\n            }\n\n            String entityType = entityId.split(\"-\")[0];\n\n            if (\"network\".equals(entityType)) {\n                networks.add(entityId);\n            }\n\n            if (\"datastore\".equals(entityType)) {\n                datastores.add(entityId);\n            }\n\n            if (\"datacenter\".equals(entityType)) {\n                datacenterMoId = entityId;\n            }\n\n            if (\"host\".equals(entityType)) {\n                vmwareHostSystemId = entityId;\n            }\n\n            moIdToName.put(entityId, entityName);\n        }\n\n        if (datacenterMoId != null) {\n            datacenterName = moIdToName.get(datacenterMoId) + \" (\" + vmwareManagementServer + \")\";\n        }\n\n        if (vmwareHostSystemId == null) {\n            LOG.warn(\"Cannot find host system id for virtual machine {}/{}\", vmwareManagementServer, vmwareManagedObjectId);\n        }\n\n        AbstractVertex datacenterVertex = createDatacenterVertex(vmwareManagementServer, datacenterName);\n        addVertices(datacenterVertex);\n\n        String primaryInterface = \"unknown\";\n        OnmsIpInterface ipInterface = m_ipInterfaceDao.findPrimaryInterfaceByNodeId(virtualMachine.getId());\n        if (ipInterface != null) {\n            primaryInterface = ipInterface.getIpHostName();\n        }\n\n        AbstractVertex virtualMachineVertex = createVirtualMachineVertex(vmwareManagementServer + \"/\" + vmwareManagedObjectId, virtualMachine.getLabel(), primaryInterface, virtualMachine.getId(), vmwareState);\n        addVertices(virtualMachineVertex);\n\n        AbstractVertex hostSystemVertex = createHostSystemVertex(vmwareManagementServer + \"/\" + vmwareHostSystemId, moIdToName.get(vmwareHostSystemId) + \" (not in database)\", \"\", -1, \"hostSystemVertex\");\n        addVertices(hostSystemVertex);\n\n        connectVertices(vmwareManagementServer + \"/\" + vmwareManagedObjectId + \"->\" + vmwareManagementServer + \"/\" + vmwareHostSystemId, virtualMachineVertex, getVertex(getVertexNamespace(), vmwareManagementServer + \"/\" + vmwareHostSystemId), getEdgeNamespace());\n    }","id":12792,"modified_method":"private void addVirtualMachine(OnmsNode virtualMachine) {\n        String vmwareManagementServer = virtualMachine.getAssetRecord().getVmwareManagementServer().trim();\n        String vmwareManagedObjectId = virtualMachine.getAssetRecord().getVmwareManagedObjectId().trim();\n        String vmwareState = virtualMachine.getAssetRecord().getVmwareState().trim();\n        String primaryInterface = \"unknown\";\n        OnmsIpInterface ipInterface = m_ipInterfaceDao.findPrimaryInterfaceByNodeId(virtualMachine.getId());\n\n        if (ipInterface != null) {\n            primaryInterface = ipInterface.getIpHostName();\n        }\n\n        Map<String, ParsedEntity> parsedEntities = parseNodeAssets(virtualMachine);\n\n        String vmwareHostSystemId = parsedEntities.values().stream().filter(e -> \"host\".equals(e.getEntityType())).findFirst().map(e -> e.getEntityId()).orElse(null);\n\n        if (vmwareHostSystemId == null) {\n            LOG.warn(\"Cannot find host system id for virtual machine {}/{}\", vmwareManagementServer, vmwareManagedObjectId);\n        }\n\n        AbstractVertex virtualMachineVertex = createVirtualMachineVertex(vmwareManagementServer + \"/\" + vmwareManagedObjectId, virtualMachine.getLabel(), primaryInterface, virtualMachine.getId(), vmwareState);\n        addVertices(virtualMachineVertex);\n\n        if (!containsVertexId(vmwareManagementServer + \"/\" + vmwareHostSystemId)) {\n            LOG.warn(\"Cannot find associated vertex for host system {}/{}\", vmwareManagementServer, vmwareHostSystemId);\n        }\n\n        connectVertices(\n                vmwareManagementServer + \"/\" + vmwareManagedObjectId + \"->\" + vmwareManagementServer + \"/\" + vmwareHostSystemId,\n                virtualMachineVertex,\n                getVertex(getVertexNamespace(), vmwareManagementServer + \"/\" + vmwareHostSystemId),\n                getEdgeNamespace()\n        );\n    }","commit_id":"611c57c20ebb10e0fef10f5ff29f43ddd5305d2d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private AbstractVertex createNetworkVertex(String vertexId, String vertexName) {\n        if (containsVertexId(vertexId)) {\n            return (AbstractVertex) getVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId);\n        }\n        AbstractVertex vertex = new AbstractVertex(TOPOLOGY_NAMESPACE_VMWARE, vertexId, vertexName);\n        vertex.setIconKey(Icons.NETWORK);\n        vertex.setLabel(vertexName);\n        return vertex;\n    }","id":12793,"modified_method":"private AbstractVertex createNetworkVertex(String vertexId, String vertexName) {\n        return createEntityVertex(vertexId, vertexName, Icons.NETWORK);\n    }","commit_id":"611c57c20ebb10e0fef10f5ff29f43ddd5305d2d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void set(final String name, final int... values) {\n    final JvmIntAnnotationValue newValue = TypesFactory.eINSTANCE.createJvmIntAnnotationValue();\n    JvmOperation _findOperation = this.findOperation(name);\n    newValue.setOperation(_findOperation);\n    EList<Integer> _values = newValue.getValues();\n    _values.addAll(((Collection<? extends Integer>)Conversions.doWrapArray(values)));\n  }","id":12794,"modified_method":"public void set(final String name, final int... values) {\n    final JvmIntAnnotationValue newValue = TypesFactory.eINSTANCE.createJvmIntAnnotationValue();\n    boolean _notEquals = ObjectExtensions.operator_notEquals(name, null);\n    if (_notEquals) {\n      JvmOperation _findOperation = this.findOperation(name);\n      newValue.setOperation(_findOperation);\n    }\n    EList<Integer> _values = newValue.getValues();\n    _values.addAll(((Collection<? extends Integer>)Conversions.doWrapArray(values)));\n    JvmAnnotationReference _delegate = this.getDelegate();\n    EList<JvmAnnotationValue> _values_1 = _delegate.getValues();\n    _values_1.add(newValue);\n  }","commit_id":"55e59524090d4c9e0a441ac000e5669f86b39cdb","url":"https://github.com/eclipse/xtext"},{"original_method":"public void set(final String name, final String... values) {\n    final JvmStringAnnotationValue newValue = TypesFactory.eINSTANCE.createJvmStringAnnotationValue();\n    JvmOperation _findOperation = this.findOperation(name);\n    newValue.setOperation(_findOperation);\n    EList<String> _values = newValue.getValues();\n    CollectionExtensions.<String>addAll(_values, values);\n  }","id":12795,"modified_method":"public void set(final String name, final String... values) {\n    final JvmStringAnnotationValue newValue = TypesFactory.eINSTANCE.createJvmStringAnnotationValue();\n    boolean _notEquals = ObjectExtensions.operator_notEquals(name, null);\n    if (_notEquals) {\n      JvmOperation _findOperation = this.findOperation(name);\n      newValue.setOperation(_findOperation);\n    }\n    EList<String> _values = newValue.getValues();\n    CollectionExtensions.<String>addAll(_values, values);\n    JvmAnnotationReference _delegate = this.getDelegate();\n    EList<JvmAnnotationValue> _values_1 = _delegate.getValues();\n    _values_1.add(newValue);\n  }","commit_id":"55e59524090d4c9e0a441ac000e5669f86b39cdb","url":"https://github.com/eclipse/xtext"},{"original_method":"public void set(final String name, final boolean... values) {\n    final JvmBooleanAnnotationValue newValue = TypesFactory.eINSTANCE.createJvmBooleanAnnotationValue();\n    JvmOperation _findOperation = this.findOperation(name);\n    newValue.setOperation(_findOperation);\n    EList<Boolean> _values = newValue.getValues();\n    _values.addAll(((Collection<? extends Boolean>)Conversions.doWrapArray(values)));\n  }","id":12796,"modified_method":"public void set(final String name, final boolean... values) {\n    final JvmBooleanAnnotationValue newValue = TypesFactory.eINSTANCE.createJvmBooleanAnnotationValue();\n    boolean _notEquals = ObjectExtensions.operator_notEquals(name, null);\n    if (_notEquals) {\n      JvmOperation _findOperation = this.findOperation(name);\n      newValue.setOperation(_findOperation);\n    }\n    EList<Boolean> _values = newValue.getValues();\n    _values.addAll(((Collection<? extends Boolean>)Conversions.doWrapArray(values)));\n    JvmAnnotationReference _delegate = this.getDelegate();\n    EList<JvmAnnotationValue> _values_1 = _delegate.getValues();\n    _values_1.add(newValue);\n  }","commit_id":"55e59524090d4c9e0a441ac000e5669f86b39cdb","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew BlogsEntryExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tBlogsEntry.class, actionableDynamicQuery.performCount());\n\t}","id":12797,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew BlogsEntryExportActionableDynamicQuery(portletDataContext);\n\n\t\tactionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery entryExportActionableDynamicQuery =\n\t\t\tnew BookmarksEntryExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tBookmarksEntry.class,\n\t\t\tentryExportActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery folderExportActionableDynamicQuery =\n\t\t\tnew BookmarksFolderExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tBookmarksFolder.class,\n\t\t\tfolderExportActionableDynamicQuery.performCount());\n\t}","id":12798,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery entryExportActionableDynamicQuery =\n\t\t\tnew BookmarksEntryExportActionableDynamicQuery(portletDataContext);\n\n\t\tentryExportActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery folderExportActionableDynamicQuery =\n\t\t\tnew BookmarksFolderExportActionableDynamicQuery(portletDataContext);\n\n\t\tfolderExportActionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew DDLRecordSetExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tDDLRecordSet.class, actionableDynamicQuery.performCount());\n\t}","id":12799,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew DDLRecordSetExportActionableDynamicQuery(portletDataContext);\n\n\t\tactionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected ActionableDynamicQuery getFolderActionableDynamicQuery(\n\t\t\tfinal PortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\treturn new DLFolderExportActionableDynamicQuery(portletDataContext) {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object)\n\t\t\t\tthrows PortalException, SystemException {\n\n\t\t\t\tDLFolder dlFolder = (DLFolder)object;\n\n\t\t\t\tFolder folder = DLAppLocalServiceUtil.getFolder(\n\t\t\t\t\tdlFolder.getFolderId());\n\n\t\t\t\tStagedModelDataHandlerUtil.exportStagedModel(\n\t\t\t\t\tportletDataContext, folder);\n\t\t\t}\n\n\t\t};\n\t}","id":12800,"modified_method":"protected ActionableDynamicQuery getFolderActionableDynamicQuery(\n\t\t\tfinal PortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\treturn new DLFolderExportActionableDynamicQuery(portletDataContext) {\n\n\t\t\t@Override\n\t\t\tprotected String getManifestSummaryKey() {\n\t\t\t\treturn Folder.class.getName();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object)\n\t\t\t\tthrows PortalException, SystemException {\n\n\t\t\t\tDLFolder dlFolder = (DLFolder)object;\n\n\t\t\t\tFolder folder = DLAppLocalServiceUtil.getFolder(\n\t\t\t\t\tdlFolder.getFolderId());\n\n\t\t\t\tStagedModelDataHandlerUtil.exportStagedModel(\n\t\t\t\t\tportletDataContext, folder);\n\t\t\t}\n\n\t\t};\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tfinal PortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery dlFileShortcutActionableDynamicQuery =\n\t\t\tgetDLFileShortcutActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tDLFileShortcut.class,\n\t\t\tdlFileShortcutActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery fileEntryActionableDynamicQuery =\n\t\t\tgetFileEntryActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tFileEntry.class, fileEntryActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tFolder.class, folderActionableDynamicQuery.performCount());\n\t}","id":12801,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tfinal PortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery dlFileShortcutActionableDynamicQuery =\n\t\t\tgetDLFileShortcutActionableDynamicQuery(portletDataContext);\n\n\t\tdlFileShortcutActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery fileEntryActionableDynamicQuery =\n\t\t\tgetFileEntryActionableDynamicQuery(portletDataContext);\n\n\t\tfileEntryActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\tfolderActionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected ActionableDynamicQuery getFileEntryActionableDynamicQuery(\n\t\t\tfinal PortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\treturn new DLFileEntryExportActionableDynamicQuery(portletDataContext) {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object)\n\t\t\t\tthrows PortalException, SystemException {\n\n\t\t\t\tDLFileEntry dlFileEntry = (DLFileEntry)object;\n\n\t\t\t\tFileEntry fileEntry = DLAppLocalServiceUtil.getFileEntry(\n\t\t\t\t\tdlFileEntry.getFileEntryId());\n\n\t\t\t\tStagedModelDataHandlerUtil.exportStagedModel(\n\t\t\t\t\tportletDataContext, fileEntry);\n\t\t\t}\n\n\t\t};\n\t}","id":12802,"modified_method":"protected ActionableDynamicQuery getFileEntryActionableDynamicQuery(\n\t\t\tfinal PortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\treturn new DLFileEntryExportActionableDynamicQuery(portletDataContext) {\n\n\t\t\t@Override\n\t\t\tprotected String getManifestSummaryKey() {\n\t\t\t\treturn FileEntry.class.getName();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object)\n\t\t\t\tthrows PortalException, SystemException {\n\n\t\t\t\tDLFileEntry dlFileEntry = (DLFileEntry)object;\n\n\t\t\t\tFileEntry fileEntry = DLAppLocalServiceUtil.getFileEntry(\n\t\t\t\t\tdlFileEntry.getFileEntryId());\n\n\t\t\t\tStagedModelDataHandlerUtil.exportStagedModel(\n\t\t\t\t\tportletDataContext, fileEntry);\n\t\t\t}\n\n\t\t};\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery articleActionableDynamicQuery =\n\t\t\tgetArticleActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tJournalArticle.class, articleActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery feedActionableDynamicQuery =\n\t\t\tnew JournalFeedExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tJournalFeed.class, feedActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tJournalFolder.class, folderActionableDynamicQuery.performCount());\n\t}","id":12803,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery articleActionableDynamicQuery =\n\t\t\tgetArticleActionableDynamicQuery(portletDataContext);\n\n\t\tarticleActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery feedActionableDynamicQuery =\n\t\t\tnew JournalFeedExportActionableDynamicQuery(portletDataContext);\n\n\t\tfeedActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\tfolderActionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery banActionableDynamicQuery =\n\t\t\tnew MBBanExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBBan.class, banActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery categoryActionableDynamicQuery =\n\t\t\tnew MBCategoryExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBCategory.class, categoryActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery messageActionableDynamicQuery =\n\t\t\tnew MBMessageExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBMessage.class, messageActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery threadFlagActionableDynamicQuery =\n\t\t\tnew MBThreadFlagExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBThreadFlag.class,\n\t\t\tthreadFlagActionableDynamicQuery.performCount());\n\t}","id":12804,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery banActionableDynamicQuery =\n\t\t\tnew MBBanExportActionableDynamicQuery(portletDataContext);\n\n\t\tbanActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery categoryActionableDynamicQuery =\n\t\t\tnew MBCategoryExportActionableDynamicQuery(portletDataContext);\n\n\t\tcategoryActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery messageActionableDynamicQuery =\n\t\t\tnew MBMessageExportActionableDynamicQuery(portletDataContext);\n\n\t\tmessageActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery threadFlagActionableDynamicQuery =\n\t\t\tnew MBThreadFlagExportActionableDynamicQuery(portletDataContext);\n\n\t\tthreadFlagActionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery actionsActionableDynamicQuery =\n\t\t\tnew MDRActionExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMDRAction.class, actionsActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery rulesActionableDynamicQuery =\n\t\t\tnew MDRRuleExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMDRRule.class, rulesActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery ruleGroupsActionableDynamicQuery =\n\t\t\tnew MDRRuleGroupExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMDRRuleGroup.class,\n\t\t\truleGroupsActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery ruleGroupInstancesActionableDynamicQuery =\n\t\t\tnew MDRRuleGroupInstanceExportActionableDynamicQuery(\n\t\t\t\tportletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMDRRuleGroupInstance.class,\n\t\t\truleGroupInstancesActionableDynamicQuery.performCount());\n\t}","id":12805,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery actionsActionableDynamicQuery =\n\t\t\tnew MDRActionExportActionableDynamicQuery(portletDataContext);\n\n\t\tactionsActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery rulesActionableDynamicQuery =\n\t\t\tnew MDRRuleExportActionableDynamicQuery(portletDataContext);\n\n\t\trulesActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery ruleGroupsActionableDynamicQuery =\n\t\t\tnew MDRRuleGroupExportActionableDynamicQuery(portletDataContext);\n\n\t\truleGroupsActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery ruleGroupInstancesActionableDynamicQuery =\n\t\t\tnew MDRRuleGroupInstanceExportActionableDynamicQuery(\n\t\t\t\tportletDataContext);\n\n\t\truleGroupInstancesActionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery choiceActionableDynamicQuery =\n\t\t\tnew PollsChoiceExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tPollsChoice.class, choiceActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery questionActionableDynamicQuery =\n\t\t\tnew PollsQuestionExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tPollsQuestion.class, questionActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery voteActionableDynamicQuery =\n\t\t\tnew PollsVoteExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tPollsVote.class, voteActionableDynamicQuery.performCount());\n\t}","id":12806,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery choiceActionableDynamicQuery =\n\t\t\tnew PollsChoiceExportActionableDynamicQuery(portletDataContext);\n\n\t\tchoiceActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery questionActionableDynamicQuery =\n\t\t\tnew PollsQuestionExportActionableDynamicQuery(portletDataContext);\n\n\t\tquestionActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery voteActionableDynamicQuery =\n\t\t\tnew PollsVoteExportActionableDynamicQuery(portletDataContext);\n\n\t\tvoteActionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew UserGroupExportActionableDynamicQuery(portletDataContext);\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tUserGroup.class, actionableDynamicQuery.performCount());\n\t}","id":12807,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew UserGroupExportActionableDynamicQuery(portletDataContext);\n\n\t\tactionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew OrganizationExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tOrganization.class, actionableDynamicQuery.performCount());\n\t}","id":12808,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew OrganizationExportActionableDynamicQuery(portletDataContext);\n\n\t\tactionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery nodeActionableDynamicQuery =\n\t\t\tnew WikiNodeExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tWikiNode.class, nodeActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery pageExportActionableDynamicQuery =\n\t\t\tgetPageActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tWikiPage.class, pageExportActionableDynamicQuery.performCount());\n\t}","id":12809,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery nodeActionableDynamicQuery =\n\t\t\tnew WikiNodeExportActionableDynamicQuery(portletDataContext);\n\n\t\tnodeActionableDynamicQuery.performCount();\n\n\t\tActionableDynamicQuery pageExportActionableDynamicQuery =\n\t\t\tgetPageActionableDynamicQuery(portletDataContext);\n\n\t\tpageExportActionableDynamicQuery.performCount();\n\t}","commit_id":"b8af25e0ee23ca134ef107160136cfe4a32e6f1b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * We put all our processing in the encodeChildren method\n     * @param context\n     * @param component\n     * @throws IOException\n     */\n    public void encodeChildren(FacesContext context, UIComponent component)\n      throws IOException\n    {\n\t    if (!component.isRendered())\n\t    {\n\t\t  return;\n\t    }\n\n\t    if ((context == null) || (component == null)) {\n\t    \treturn;\n\t    }\n\t\tUIData data = (UIData) component;\n\t\t\t\n\t\tValueBinding msgsBinding = component.getValueBinding(\"value\");\n\t\tList msgBeanList = (List)msgsBinding.getValue(context);\n\t\n\t\tResponseWriter writer = context.getResponseWriter();\n\t\tIterator kids = null;\n\t\tIterator grandkids = null;\n\t\t\n\t\tString initialHeight = (String) data.getAttributes().get(\"initialHeight\");\n\t\tif(initialHeight == null){\n\t\t\tinitialHeight = \"150px\";\n\t\t}\n\t\tint initHeight = Integer.parseInt(initialHeight.substring(0, initialHeight.length() - 2));\n\t\tString colLock = (String) data.getAttributes().get(\"colLock\");\n\t\tif(colLock == null){\n\t\t\tcolLock = \"1\";\n\t\t}\n\t\tint columnLock = Integer.parseInt(colLock);\n\t\n\t\t// Iterate over the rows of data that are provided\n\t\tint processed = 0;\n\t\tint rowIndex = data.getFirst() - 1;\n\t\tint rows = data.getRows();\n\t\tint rowStyle = 0;\n\t\t\n\t\twriter.startElement(\"div\", data);\n\t\twriter.writeAttribute(\"id\", \"contents\", null);\n\t\t\n\t\twriter.startElement(\"div\", data);\n\t\twriter.writeAttribute(\"id\", \"q3\", null);\n\t\t\n\t\twriter.startElement(\"div\", data);\n\t\twriter.writeAttribute(\"style\", \"height:\" + (initHeight - 15) + \"px;\",null);\n\t\t\n\t\twriter.startElement(\"table\", data);\n\t\twriter.writeAttribute(\"cellpadding\", \"0\", null);\n\t\twriter.writeAttribute(\"cellspacing\", \"0\", null);\n\t\t\n\t\twriter.startElement(\"tbody\", data);\n\t\t\n\t\twhile (true) {\n\t\t\t// Select the current row\n\t\t\tdata.setRowIndex(++rowIndex);\n\t\t\tif (!data.isRowAvailable()) {\n\t\t\t\tbreak; // Scrolled past the last row\n\t\t\t}\n\t\t\t\n\t\t\twriter.startElement(\"tr\", data);\n\t\t\t// Iterate through the childrens\n\t\t\tkids = getColumns(data);\n\t\t\tint count = 0;\n\t\t\t//get only the columns from the start of the data to where the colLock is\n\t\t\twhile (kids.hasNext() && count < columnLock){\n\t\t\t\t//get column\n\t\t\t\tUIColumn column = (UIColumn) kids.next();\n\t\t\t\t\n\t\t\t\t//begin rendering cell\n\t\t\t\twriter.startElement(\"td\", data);\n\t\t\t\t\n\t\t\t\t//render the contents of this cell by iterating over\n\t\t\t\t//the kids of our kids\n\t\t\t\tIterator oKids = getChildren(column);\n\t\t\t\tfor(; oKids.hasNext();){\n\t\t\t          UIComponent oKid = (UIComponent)oKids.next();  \n\t\t\t          encodeRecursive(context,oKid);\n\t\t\t        }\n\t\t\t\t//column.encodeBegin(context);\n\t\t\t\t//column.encodeChildren(context);\n\t\t\t\t//column.encodeEnd(context);\n\t\t\t\t//writer.writeText(column.toString(), null);\n\t\t\t\t\t\t\t\t\n\t\t\t\t//Render the ending of this cell\n\t\t\t\twriter.endElement(\"td\");\n\t\t\t\twriter.writeText(\"\\n\", null);\n\t\t\t\t\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t//render the ending of this row\n\t\t\twriter.endElement(\"tr\");\n\t\t\twriter.writeText(\"\\n\", null);\n\t\t}\n\n\t\twriter.endElement(\"tbody\");\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\twriter.endElement(\"table\");\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\twriter.endElement(\"div\");\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\twriter.endElement(\"div\"); //end <div id=\"q3\">\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\t//render the body of the data\n\t\twriter.startElement(\"div\", data);\n\t\twriter.writeAttribute(\"id\", \"q4\", null);\n\t\t\n\t\twriter.startElement(\"div\", data);\n\t\twriter.writeAttribute(\"style\", \"height:\" + initHeight + \"px;\", null);\n\t\t\n\t\twriter.startElement(\"table\",data);\n\t\twriter.writeAttribute(\"cellpadding\", \"0\", null);\n\t\twriter.writeAttribute(\"cellspacing\", \"0\", null);\n\t\t\n\t\twriter.startElement(\"tbody\", data);\n\t\t\n\t\trowIndex = data.getFirst() - 1;\n\t\trows = data.getRows();\n\t\trowStyle = 0;\n\t\twhile (true) {\n\t\t\t// Select the current row\n\t\t\tdata.setRowIndex(++rowIndex);\n\t\t\tif (!data.isRowAvailable()) {\n\t\t\t\tbreak; // Scrolled past the last row\n\t\t\t}\n\t\t\t\n\t\t\twriter.startElement(\"tr\", data);\n\t\t\t// Iterate through the childrens\n\t\t\tkids = getColumns(data);\n\t\t\tint count = 0;\n\t\t\t//get only the columns from the start of the data to where the colLock is\n\t\t\twhile (kids.hasNext()){\n\t\t\t\t//get column\n\t\t\t\tUIColumn column = (UIColumn) kids.next();\n\t\t\t\tif(count >= columnLock){\n\t\t\t\t\n\t\t\t\t\t//begin rendering cell\n\t\t\t\t\twriter.startElement(\"td\", data);\n\t\t\t\t\t\n\t\t\t\t\t//render the contents of this cell by iterating over\n\t\t\t\t\t//the kids of our kids\n\t\t\t\t\tIterator oKids = getChildren(column);\n\t\t\t\t\tfor(; oKids.hasNext();){\n\t\t\t\t          UIComponent oKid = (UIComponent)oKids.next();  \n\t\t\t\t          encodeRecursive(context,oKid);\n\t\t\t\t        }\n\t\t\t\t\t//writer.writeText(column.toString(), null);\n\t\t\t\t\t\n\t\t\t\t\t//Render the ending of this cell\n\t\t\t\t\twriter.endElement(\"td\");\n\t\t\t\t\twriter.writeText(\"\\n\", null);\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t//render the ending of this row\n\t\t\twriter.endElement(\"tr\");\n\t\t\twriter.writeText(\"\\n\", null);\n\t\t}\n\t\t\n\t\twriter.endElement(\"tbody\");\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\twriter.endElement(\"table\");\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\twriter.endElement(\"div\");\n\t\twriter.endElement(\"div\");  //end <div id=\"q4\">\n\t\t\n\t\twriter.endElement(\"div\");  //end <div id=\"content\">\n\t\t\n\t\t// Clean up after ourselves\n\t\tdata.setRowIndex(-1);\n\t\t\n\t\t\n\t}","id":12810,"modified_method":"/**\n     * We put all our processing in the encodeChildren method\n     * @param context\n     * @param component\n     * @throws IOException\n     */\n    public void encodeChildren(FacesContext context, UIComponent component)\n      throws IOException\n    {\n\t    if (!component.isRendered())\n\t    {\n\t\t  return;\n\t    }\n\n\t    if ((context == null) || (component == null)) {\n\t    \treturn;\n\t    }\n\t\tUIData data = (UIData) component;\n\t\t\t\n\t\tValueBinding msgsBinding = component.getValueBinding(\"value\");\n\t\tList msgBeanList = (List)msgsBinding.getValue(context);\n\t\n\t\tResponseWriter writer = context.getResponseWriter();\n\t\tIterator kids = null;\n\t\tIterator grandkids = null;\n\t\t\n\t\tString initialHeight = (String) data.getAttributes().get(\"initialHeight\");\n\t\tif(initialHeight == null){\n\t\t\tinitialHeight = \"150px\";\n\t\t}\n\t\tint initHeight = Integer.parseInt(initialHeight.substring(0, initialHeight.length() - 2));\n\t\tString colLock = (String) data.getAttributes().get(\"colLock\");\n\t\tif(colLock == null){\n\t\t\tcolLock = \"1\";\n\t\t}\n\t\tint columnLock = Integer.parseInt(colLock);\n\t\t\n\t\t//get total column count\n\t\tint totalCount = 0;\n\t\tIterator columns = getColumns(data);\n\t\twhile(columns.hasNext())\n\t\t{\n\t\t\tcolumns.next();\n\t\t\ttotalCount++;\n\t\t}\n\t\n\t\t// Iterate over the rows of data that are provided\n\t\tint processed = 0;\n\t\tint rowIndex = data.getFirst() - 1;\n\t\tint rows = data.getRows();\n\t\tint rowStyle = 0;\n\t\t\n\t\twriter.startElement(\"div\", data);\n\t\twriter.writeAttribute(\"id\", \"contents\", null);\n\t\t\n\t\twriter.startElement(\"div\", data);\n\t\twriter.writeAttribute(\"id\", \"q3\", null);\n\t\t\n\t\twriter.startElement(\"div\", data);\n\t\tif(totalCount <= columnLock){\n\t\t\twriter.writeAttribute(\"style\", \"overflow:auto;height:\" + (initHeight - 15) + \"px;\",null);\n\t\t} else {\n\t\t\twriter.writeAttribute(\"style\", \"height:\" + (initHeight - 15) + \"px;\",null);\n\t\t}\n\t\t\n\t\twriter.startElement(\"table\", data);\n\t\twriter.writeAttribute(\"cellpadding\", \"0\", null);\n\t\twriter.writeAttribute(\"cellspacing\", \"0\", null);\n\t\t\n\t\twriter.startElement(\"tbody\", data);\n\t\t\n\t\twhile (true) {\n\t\t\t// Select the current row\n\t\t\tdata.setRowIndex(++rowIndex);\n\t\t\tif (!data.isRowAvailable()) {\n\t\t\t\tbreak; // Scrolled past the last row\n\t\t\t}\n\t\t\t\n\t\t\twriter.startElement(\"tr\", data);\n\t\t\t// Iterate through the childrens\n\t\t\tkids = getColumns(data);\n\t\t\tint count = 0;\n\t\t\t//get only the columns from the start of the data to where the colLock is\n\t\t\twhile (kids.hasNext() && count < columnLock){\n\t\t\t\t//get column\n\t\t\t\tUIColumn column = (UIColumn) kids.next();\n\t\t\t\t\n\t\t\t\t//begin rendering cell\n\t\t\t\twriter.startElement(\"td\", data);\n\t\t\t\t\n\t\t\t\t//render the contents of this cell by iterating over\n\t\t\t\t//the kids of our kids\n\t\t\t\tIterator oKids = getChildren(column);\n\t\t\t\tfor(; oKids.hasNext();){\n\t\t\t          UIComponent oKid = (UIComponent)oKids.next();  \n\t\t\t          encodeRecursive(context,oKid);\n\t\t\t        }\n\t\t\t\t\t\t\t\t\n\t\t\t\t//Render the ending of this cell\n\t\t\t\twriter.endElement(\"td\");\n\t\t\t\twriter.writeText(\"\\n\", null);\n\t\t\t\t\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t//render the ending of this row\n\t\t\twriter.endElement(\"tr\");\n\t\t\twriter.writeText(\"\\n\", null);\n\t\t}\n\n\t\twriter.endElement(\"tbody\");\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\twriter.endElement(\"table\");\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\twriter.endElement(\"div\");\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\twriter.endElement(\"div\"); //end <div id=\"q3\">\n\t\twriter.writeText(\"\\n\", null);\n\t\t\n\t\t//render the body of the data if we have any left over from the lock\n\t\tif(totalCount > columnLock)\n\t\t{\n\t\t\t\t\n\t\t\twriter.startElement(\"div\", data);\n\t\t\twriter.writeAttribute(\"id\", \"q4\", null);\n\t\t\t\n\t\t\twriter.startElement(\"div\", data);\n\t\t\twriter.writeAttribute(\"style\", \"height:\" + initHeight + \"px;\", null);\n\t\t\t\n\t\t\twriter.startElement(\"table\",data);\n\t\t\twriter.writeAttribute(\"cellpadding\", \"0\", null);\n\t\t\twriter.writeAttribute(\"cellspacing\", \"0\", null);\n\t\t\t\n\t\t\twriter.startElement(\"tbody\", data);\n\t\t\t\n\t\t\trowIndex = data.getFirst() - 1;\n\t\t\trows = data.getRows();\n\t\t\trowStyle = 0;\n\t\t\twhile (true) {\n\t\t\t\t// Select the current row\n\t\t\t\tdata.setRowIndex(++rowIndex);\n\t\t\t\tif (!data.isRowAvailable()) {\n\t\t\t\t\tbreak; // Scrolled past the last row\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twriter.startElement(\"tr\", data);\n\t\t\t\t// Iterate through the childrens\n\t\t\t\tkids = getColumns(data);\n\t\t\t\tint count = 0;\n\t\t\t\t//get only the columns from the start of the data to where the colLock is\n\t\t\t\twhile (kids.hasNext()){\n\t\t\t\t\t//get column\n\t\t\t\t\tUIColumn column = (UIColumn) kids.next();\n\t\t\t\t\tif(count >= columnLock){\n\t\t\t\t\t\n\t\t\t\t\t\t//begin rendering cell\n\t\t\t\t\t\twriter.startElement(\"td\", data);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//render the contents of this cell by iterating over\n\t\t\t\t\t\t//the kids of our kids\n\t\t\t\t\t\tIterator oKids = getChildren(column);\n\t\t\t\t\t\tfor(; oKids.hasNext();){\n\t\t\t\t\t          UIComponent oKid = (UIComponent)oKids.next();  \n\t\t\t\t\t          encodeRecursive(context,oKid);\n\t\t\t\t\t        }\n\t\t\t\t\t\t//writer.writeText(column.toString(), null);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Render the ending of this cell\n\t\t\t\t\t\twriter.endElement(\"td\");\n\t\t\t\t\t\twriter.writeText(\"\\n\", null);\n\t\t\t\t\t}\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\t//render the ending of this row\n\t\t\t\twriter.endElement(\"tr\");\n\t\t\t\twriter.writeText(\"\\n\", null);\n\t\t\t}\n\t\t\t\n\t\t\twriter.endElement(\"tbody\");\n\t\t\twriter.writeText(\"\\n\", null);\n\t\t\t\n\t\t\twriter.endElement(\"table\");\n\t\t\twriter.writeText(\"\\n\", null);\n\t\t\t\n\t\t\twriter.endElement(\"div\");\n\t\t\twriter.endElement(\"div\");  //end <div id=\"q4\">\n\t\t\n\t\t} //end IF totalCount > columnLock\n\t\t\n\t\twriter.endElement(\"div\");  //end <div id=\"content\">\n\t\t\n\t\t// Clean up after ourselves\n\t\tdata.setRowIndex(-1);\n\t\t\n\t\t\n\t}","commit_id":"f74a8c0ed762d7dae7bc96e3706dd797de8155c8","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public Object getValueAt(int row, int column) {\n      if (column == 0) {\n        SNode script = ListSequence.fromList(myScripts).getElement(row);\n        return mySelectedScriptIds.contains(script.getId());\n      }\n      if (column == 1) {\n        return \"  \" + SPropertyOperations.getString(ListSequence.fromList(myScripts).getElement(row), \"title\");\n      }\n      if (column == 2) {\n        String cat = SPropertyOperations.getString_def(ListSequence.fromList(myScripts).getElement(row), \"type\", \"enhancement\");\n        return (cat != null ?\n          \" \" + cat :\n          \"\"\n        );\n      }\n      String build = SPropertyOperations.getString(ListSequence.fromList(myScripts).getElement(row), \"toBuild\");\n      return (build != null ?\n        \" \" + build :\n        \"\"\n      );\n    }","id":12811,"modified_method":"public Object getValueAt(int row, int column) {\n      SNode sn = ListSequence.fromList(myScripts).getElement(row);\n      if (column == 0) {\n        SNode script = sn;\n        return mySelectedScriptIds.contains(script.getId());\n      }\n      if (column == 1) {\n        return \"  \" + SPropertyOperations.getString(sn, \"title\");\n      }\n      if (column == 2) {\n        if (SPropertyOperations.hasValue(sn, \"type\", \"migration\", \"enhancement\")) {\n          return SPropertyOperations.getString_def(sn, \"type\", \"enhancement\") + \" (\" + SPropertyOperations.getString(sn, \"toBuild\") + \")\";\n        } else {\n          return SPropertyOperations.getString_def(sn, \"type\", \"enhancement\");\n        }\n      }\n      if (column == 3) {\n        return SNodeOperations.getModel(sn).getModelDescriptor().getModule().getModuleFqName();\n      }\n      return null;\n    }","commit_id":"c48cf9586e2bd911b539955b0174a749018a3dfc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public MyTableModel() {\n      super(new String[]{\"\", \"script\", \"category\", \"migrate to\"}, ListSequence.fromList(myScripts).count());\n    }","id":12812,"modified_method":"public MyTableModel() {\n      super(new String[]{\"\", \"script\", \"category\", \"language\"}, ListSequence.fromList(myScripts).count());\n    }","commit_id":"c48cf9586e2bd911b539955b0174a749018a3dfc","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void init() {\n    JComponent contentPane = ((JComponent) getContentPane());\n    contentPane.setLayout(new BorderLayout());\n    contentPane.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));\n    contentPane.registerKeyboardAction(new AbstractAction(\"Dispose dialog\") {\n      public void actionPerformed(ActionEvent e) {\n        setVisible(false);\n      }\n    }, KeyStroke.getKeyStroke(\"ESCAPE\"), JComponent.WHEN_IN_FOCUSED_WINDOW);\n    JPanel panel = new JPanel(new BorderLayout());\n    contentPane.add(panel, BorderLayout.CENTER);\n    RunMigrationScriptsDialog.MySortingTableModel tm = new RunMigrationScriptsDialog.MySortingTableModel();\n    myTable = new JBTable(tm);\n    tm.install(myTable);\n    TableColumnModel columnModel = myTable.getColumnModel();\n    columnModel.getColumn(0).setMaxWidth(20);\n    columnModel.getColumn(0).setResizable(false);\n    columnModel.getColumn(1).setMinWidth(440);\n    panel.add(ScrollPaneFactory.createScrollPane(myTable), BorderLayout.CENTER);\n    JPanel buttonsFlow = new JPanel();\n    myCheckButton = new JButton(\"Check\");\n    myUnCheckButton = new JButton(\"UnCheck\");\n    myRunCheckedButton = new JButton(\"Run Checked\");\n    myOpenSelectedButton = new JButton(\"Open Selected\");\n    JButton closeButton = new JButton(\"Close\");\n    buttonsFlow.add(myCheckButton);\n    buttonsFlow.add(myUnCheckButton);\n    buttonsFlow.add(myRunCheckedButton);\n    buttonsFlow.add(myOpenSelectedButton);\n    buttonsFlow.add(closeButton);\n    myCheckButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        int[] ints = myTable.getSelectedRows();\n        for (int i : ints) {\n          myTable.setValueAt(true, i, 0);\n        }\n      }\n    });\n    myUnCheckButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        int[] ints = myTable.getSelectedRows();\n        for (int i : ints) {\n          myTable.setValueAt(false, i, 0);\n        }\n      }\n    });\n    myRunCheckedButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        myRunChecked = true;\n        RunMigrationScriptsDialog.this.setVisible(false);\n      }\n    });\n    myOpenSelectedButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        myOpenSelected = true;\n        RunMigrationScriptsDialog.this.setVisible(false);\n      }\n    });\n    closeButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        RunMigrationScriptsDialog.this.setVisible(false);\n      }\n    });\n    JPanel buttons = new JPanel(new BorderLayout());\n    buttons.setBorder(BorderFactory.createEmptyBorder(4, 0, 0, 0));\n    buttons.add(buttonsFlow, BorderLayout.EAST);\n    panel.add(buttons, BorderLayout.SOUTH);\n    myTable.getModel().addTableModelListener(new TableModelListener() {\n      public void tableChanged(TableModelEvent e) {\n        RunMigrationScriptsDialog.this.updateButtons();\n      }\n    });\n    myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n      public void valueChanged(ListSelectionEvent e) {\n        RunMigrationScriptsDialog.this.updateButtons();\n      }\n    });\n    updateButtons();\n  }","id":12813,"modified_method":"private void init() {\n    JComponent contentPane = ((JComponent) getContentPane());\n    contentPane.setLayout(new BorderLayout());\n    contentPane.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));\n    contentPane.registerKeyboardAction(new AbstractAction(\"Dispose dialog\") {\n      public void actionPerformed(ActionEvent e) {\n        setVisible(false);\n      }\n    }, KeyStroke.getKeyStroke(\"ESCAPE\"), JComponent.WHEN_IN_FOCUSED_WINDOW);\n    JPanel panel = new JPanel(new BorderLayout());\n    contentPane.add(panel, BorderLayout.CENTER);\n    RunMigrationScriptsDialog.MySortingTableModel tm = new RunMigrationScriptsDialog.MySortingTableModel();\n    myTable = new JBTable(tm);\n    tm.install(myTable);\n    TableColumnModel columnModel = myTable.getColumnModel();\n    columnModel.getColumn(0).setMaxWidth(20);\n    columnModel.getColumn(0).setResizable(false);\n    columnModel.getColumn(1).setMinWidth(300);\n    columnModel.getColumn(2).setMinWidth(120);\n    panel.add(ScrollPaneFactory.createScrollPane(myTable), BorderLayout.CENTER);\n    JPanel buttonsFlow = new JPanel();\n    myCheckButton = new JButton(\"Check\");\n    myUnCheckButton = new JButton(\"UnCheck\");\n    myRunCheckedButton = new JButton(\"Run Checked\");\n    myOpenSelectedButton = new JButton(\"Open Selected\");\n    JButton closeButton = new JButton(\"Close\");\n    buttonsFlow.add(myCheckButton);\n    buttonsFlow.add(myUnCheckButton);\n    buttonsFlow.add(myRunCheckedButton);\n    buttonsFlow.add(myOpenSelectedButton);\n    buttonsFlow.add(closeButton);\n    myCheckButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        int[] ints = myTable.getSelectedRows();\n        for (int i : ints) {\n          myTable.setValueAt(true, i, 0);\n        }\n      }\n    });\n    myUnCheckButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        int[] ints = myTable.getSelectedRows();\n        for (int i : ints) {\n          myTable.setValueAt(false, i, 0);\n        }\n      }\n    });\n    myRunCheckedButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        myRunChecked = true;\n        RunMigrationScriptsDialog.this.setVisible(false);\n      }\n    });\n    myOpenSelectedButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        myOpenSelected = true;\n        RunMigrationScriptsDialog.this.setVisible(false);\n      }\n    });\n    closeButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        RunMigrationScriptsDialog.this.setVisible(false);\n      }\n    });\n    JPanel buttons = new JPanel(new BorderLayout());\n    buttons.setBorder(BorderFactory.createEmptyBorder(4, 0, 0, 0));\n    buttons.add(buttonsFlow, BorderLayout.EAST);\n    panel.add(buttons, BorderLayout.SOUTH);\n    myTable.getModel().addTableModelListener(new TableModelListener() {\n      public void tableChanged(TableModelEvent e) {\n        RunMigrationScriptsDialog.this.updateButtons();\n      }\n    });\n    myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n      public void valueChanged(ListSelectionEvent e) {\n        RunMigrationScriptsDialog.this.updateButtons();\n      }\n    });\n    updateButtons();\n  }","commit_id":"c48cf9586e2bd911b539955b0174a749018a3dfc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public RunMigrationScriptsDialog(Frame owner, List<SNode> scripts, Set<String> selectedScriptIds) throws HeadlessException {\n    super(owner, \"Migration Scripts\", true);\n    myScripts = scripts;\n    mySelectedScriptIds = selectedScriptIds;\n    init();\n    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    setSize(700, 500);\n  }","id":12814,"modified_method":"public RunMigrationScriptsDialog(Frame owner, List<SNode> scripts, Set<String> selectedScriptIds) throws HeadlessException {\n    super(owner, \"Migration Scripts\", true);\n    myScripts = scripts;\n    mySelectedScriptIds = selectedScriptIds;\n    init();\n    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    setSize(750, 600);\n  }","commit_id":"c48cf9586e2bd911b539955b0174a749018a3dfc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public RunMigrationScripts_Action(List<SNode> scripts_par, boolean selectionOnly_par) {\n    super(\"More...\", \"\", ICON);\n    this.scripts = scripts_par;\n    this.selectionOnly = selectionOnly_par;\n    this.setIsAlwaysVisible(false);\n    this.setExecuteOutsideCommand(false);\n  }","id":12815,"modified_method":"public RunMigrationScripts_Action(List<SNode> scripts_par, boolean selectionOnly_par) {\n    super(\"All Scripts...\", \"\", ICON);\n    this.scripts = scripts_par;\n    this.selectionOnly = selectionOnly_par;\n    this.setIsAlwaysVisible(false);\n    this.setExecuteOutsideCommand(false);\n  }","commit_id":"c48cf9586e2bd911b539955b0174a749018a3dfc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void populateByBuildGroup(List<SNode> migrationScripts, BaseGroup ownerGroup, boolean applyToSelection) {\n    Map<String, List<SNode>> byBuild = new HashMap<String, List<SNode>>();\n    for (SNode migrationScript : migrationScripts) {\n      String build = SPropertyOperations.getString(migrationScript, \"toBuild\");\n      if (build == null) {\n        build = \"<unspecified>\";\n      }\n      if (!(byBuild.containsKey(build))) {\n        byBuild.put(build, new ArrayList<SNode>());\n      }\n      ListSequence.fromList(byBuild.get(build)).addElement(migrationScript);\n    }\n    Set<String> sorted = new TreeSet<String>(byBuild.keySet());\n    for (String build : sorted) {\n      BaseGroup categoryGroup = new BaseGroup(\"migrate from b.\" + build, \"\");\n      for (SNode script : byBuild.get(build)) {\n        categoryGroup.add(new RunMigrationScriptAction(script, ScriptsActionGroupHelper.makeScriptActionName(SPropertyOperations.getString_def(script, \"type\", \"enhancement\"), SPropertyOperations.getString(script, \"title\"), null), applyToSelection));\n      }\n      categoryGroup.setPopup(true);\n      ownerGroup.add(categoryGroup);\n    }\n  }","id":12816,"modified_method":"public static void populateByBuildGroup(List<SNode> migrationScripts, BaseGroup ownerGroup, boolean applyToSelection) {\n    Map<String, List<SNode>> byBuild = new HashMap<String, List<SNode>>();\n    for (SNode migrationScript : migrationScripts) {\n      String build = SPropertyOperations.getString(migrationScript, \"toBuild\");\n      if (build == null) {\n        build = \"<unspecified>\";\n      }\n      if (!(byBuild.containsKey(build))) {\n        byBuild.put(build, new ArrayList<SNode>());\n      }\n      ListSequence.fromList(byBuild.get(build)).addElement(migrationScript);\n    }\n    Set<String> sorted = new TreeSet<String>(byBuild.keySet());\n    for (String build : sorted) {\n      BaseGroup categoryGroup = new BaseGroup(\"migrate to \" + build, \"\");\n      for (SNode script : byBuild.get(build)) {\n        categoryGroup.add(new RunMigrationScriptAction(script, ScriptsActionGroupHelper.makeScriptActionName(SPropertyOperations.getString_def(script, \"type\", \"enhancement\"), SPropertyOperations.getString(script, \"title\"), null), applyToSelection));\n      }\n      categoryGroup.setPopup(true);\n      ownerGroup.add(categoryGroup);\n    }\n  }","commit_id":"c48cf9586e2bd911b539955b0174a749018a3dfc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void populateByCategoryGroup(List<SNode> migrationScripts, BaseGroup ownerGroup, boolean applyToSelection) {\n    Map<String, List<SNode>> byCategory = new HashMap<String, List<SNode>>();\n    for (SNode migrationScript : migrationScripts) {\n      String cat = SPropertyOperations.getString_def(migrationScript, \"type\", \"enhancement\");\n      if (cat == null) {\n        cat = \"<uncategorized>\";\n      }\n      if (!(byCategory.containsKey(cat))) {\n        byCategory.put(cat, new ArrayList<SNode>());\n      }\n      ListSequence.fromList(byCategory.get(cat)).addElement(migrationScript);\n    }\n    Set<String> sorted = new TreeSet<String>(new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        if (\"<uncategorized>\".equals(o1)) {\n          return 1;\n        }\n        if (\"<uncategorized>\".equals(o2)) {\n          return -1;\n        }\n        return o1.compareTo(o2);\n      }\n    });\n    sorted.addAll(byCategory.keySet());\n    for (String cat : sorted) {\n      BaseGroup categoryGroup = new BaseGroup(cat, \"\");\n      for (SNode script : byCategory.get(cat)) {\n        categoryGroup.add(new RunMigrationScriptAction(script, ScriptsActionGroupHelper.makeScriptActionName(null, SPropertyOperations.getString(script, \"title\"), SPropertyOperations.getString(script, \"toBuild\")), applyToSelection));\n      }\n      categoryGroup.setPopup(true);\n      ownerGroup.add(categoryGroup);\n    }\n  }","id":12817,"modified_method":"public static void populateByCategoryGroup(List<SNode> migrationScripts, BaseGroup ownerGroup, boolean applyToSelection) {\n    Map<String, List<SNode>> byCategory = new HashMap<String, List<SNode>>();\n    for (SNode migrationScript : migrationScripts) {\n      String cat = NameUtil.pluralize(NameUtil.capitalize(SPropertyOperations.getString_def(migrationScript, \"type\", \"enhancement\")));\n      if (cat == null) {\n        cat = \"<uncategorized>\";\n      }\n      if (!(byCategory.containsKey(cat))) {\n        byCategory.put(cat, new ArrayList<SNode>());\n      }\n      ListSequence.fromList(byCategory.get(cat)).addElement(migrationScript);\n    }\n    Set<String> sorted = new TreeSet<String>(new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        if (\"<uncategorized>\".equals(o1)) {\n          return 1;\n        }\n        if (\"<uncategorized>\".equals(o2)) {\n          return -1;\n        }\n        return o1.compareTo(o2);\n      }\n    });\n    sorted.addAll(byCategory.keySet());\n    for (String cat : sorted) {\n      BaseGroup categoryGroup = new BaseGroup(cat, \"\");\n      for (SNode script : byCategory.get(cat)) {\n        categoryGroup.add(new RunMigrationScriptAction(script, ScriptsActionGroupHelper.makeScriptActionName(null, SPropertyOperations.getString(script, \"title\"), SPropertyOperations.getString(script, \"toBuild\")), applyToSelection));\n      }\n      categoryGroup.setPopup(true);\n      ownerGroup.add(categoryGroup);\n    }\n  }","commit_id":"c48cf9586e2bd911b539955b0174a749018a3dfc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String makeScriptActionName(String category, String title, String build) {\n    StringBuilder sb = new StringBuilder();\n    if (category != null) {\n      sb.append(category).append(\": \");\n    }\n    sb.append(title);\n    if (build != null) {\n      sb.append(\" [migrate from b.\").append(build).append(\"]\");\n    }\n    return sb.toString();\n  }","id":12818,"modified_method":"public static String makeScriptActionName(String category, String title, String build) {\n    StringBuilder sb = new StringBuilder();\n    if (category != null) {\n      sb.append(category).append(\": \");\n    }\n    sb.append(title);\n    if (build != null) {\n      sb.append(\" [migrate to \").append(build).append(\"]\");\n    }\n    return sb.toString();\n  }","commit_id":"c48cf9586e2bd911b539955b0174a749018a3dfc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      ScriptsGlobally_ActionGroup.this.removeAll();\n      event.getPresentation().setVisible(true);\n      Project project = event.getData(MPSDataKeys.PROJECT);\n      if (project == null) {\n        event.getPresentation().setEnabled(false);\n        return;\n      }\n      event.getPresentation().setEnabled(true);\n      // \n      ScriptsMenuBuilder menuBuilder = new ScriptsMenuBuilder(false);\n      ScriptsGlobally_ActionGroup.this.add(menuBuilder.create_ByCategoryPopup());\n      ScriptsGlobally_ActionGroup.this.add(menuBuilder.create_ByBuildPopup());\n      ScriptsGlobally_ActionGroup.this.add(menuBuilder.create_ByLanguagePopup());\n      // \n      ScriptsGlobally_ActionGroup.this.addParameterizedAction(new RunMigrationScripts_Action(menuBuilder.getAllScripts(), false), PluginId.getId(\"jetbrains.mps.lang.script\"), menuBuilder.getAllScripts(), false);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","id":12819,"modified_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      ScriptsGlobally_ActionGroup.this.removeAll();\n      event.getPresentation().setVisible(true);\n      Project project = event.getData(MPSDataKeys.PROJECT);\n      if (project == null) {\n        event.getPresentation().setEnabled(false);\n        return;\n      }\n      event.getPresentation().setEnabled(true);\n      // \n      ScriptsMenuBuilder menuBuilder = new ScriptsMenuBuilder(false);\n      BaseGroup catGroup = menuBuilder.create_ByCategoryPopup();\n      for (AnAction a : catGroup.getChildren(null)) {\n        ScriptsGlobally_ActionGroup.this.add(a);\n      }\n      ScriptsGlobally_ActionGroup.this.addParameterizedAction(new RunMigrationScripts_Action(menuBuilder.getAllScripts(), false), PluginId.getId(\"jetbrains.mps.lang.script\"), menuBuilder.getAllScripts(), false);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","commit_id":"c48cf9586e2bd911b539955b0174a749018a3dfc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      ScriptsForSelection_ActionGroup.this.removeAll();\n      event.getPresentation().setVisible(true);\n      IOperationContext context = event.getData(MPSDataKeys.OPERATION_CONTEXT);\n      if (context == null || context.getProject() == null) {\n        event.getPresentation().setEnabled(false);\n        return;\n      }\n      event.getPresentation().setEnabled(true);\n      // \n      ScriptsMenuBuilder menuBuilder = new ScriptsMenuBuilder(true);\n      ScriptsForSelection_ActionGroup.this.add(menuBuilder.create_ByCategoryPopup());\n      ScriptsForSelection_ActionGroup.this.add(menuBuilder.create_ByBuildPopup());\n      ScriptsForSelection_ActionGroup.this.add(menuBuilder.create_ByLanguagePopup());\n      // \n      ScriptsForSelection_ActionGroup.this.addParameterizedAction(new RunMigrationScripts_Action(menuBuilder.getAllScripts(), true), PluginId.getId(\"jetbrains.mps.lang.script\"), menuBuilder.getAllScripts(), true);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","id":12820,"modified_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      ScriptsForSelection_ActionGroup.this.removeAll();\n      event.getPresentation().setVisible(true);\n      IOperationContext context = event.getData(MPSDataKeys.OPERATION_CONTEXT);\n      if (context == null || context.getProject() == null) {\n        event.getPresentation().setEnabled(false);\n        return;\n      }\n      event.getPresentation().setEnabled(true);\n\n      ScriptsMenuBuilder menuBuilder = new ScriptsMenuBuilder(true);\n      BaseGroup catGroup = menuBuilder.create_ByCategoryPopup();\n      for (AnAction a : catGroup.getChildren(null)) {\n        ScriptsForSelection_ActionGroup.this.add(a);\n      }\n      ScriptsForSelection_ActionGroup.this.addParameterizedAction(new RunMigrationScripts_Action(menuBuilder.getAllScripts(), true), PluginId.getId(\"jetbrains.mps.lang.script\"), menuBuilder.getAllScripts(), true);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","commit_id":"151e8ec20e623b03489d5068781dd0023e79ec59","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      ScriptsForSelection_ActionGroup.this.removeAll();\n      event.getPresentation().setVisible(true);\n      IOperationContext context = event.getData(MPSDataKeys.OPERATION_CONTEXT);\n      if (context == null || context.getProject() == null) {\n        event.getPresentation().setEnabled(false);\n        return;\n      }\n      event.getPresentation().setEnabled(true);\n      // \n      ScriptsMenuBuilder menuBuilder = new ScriptsMenuBuilder(true);\n      ScriptsForSelection_ActionGroup.this.add(menuBuilder.create_ByCategoryPopup());\n      ScriptsForSelection_ActionGroup.this.add(menuBuilder.create_ByBuildPopup());\n      ScriptsForSelection_ActionGroup.this.add(menuBuilder.create_ByLanguagePopup());\n      // \n      ScriptsForSelection_ActionGroup.this.addParameterizedAction(new RunMigrationScripts_Action(menuBuilder.getAllScripts(), true), PluginId.getId(\"jetbrains.mps.lang.script\"), menuBuilder.getAllScripts(), true);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","id":12821,"modified_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      ScriptsForSelection_ActionGroup.this.removeAll();\n      event.getPresentation().setVisible(true);\n      IOperationContext context = event.getData(MPSDataKeys.OPERATION_CONTEXT);\n      if (context == null || context.getProject() == null) {\n        event.getPresentation().setEnabled(false);\n        return;\n      }\n      event.getPresentation().setEnabled(true);\n\n      ScriptsMenuBuilder menuBuilder = new ScriptsMenuBuilder(true);\n      BaseGroup catGroup = menuBuilder.create_ByCategoryPopup();\n      for (AnAction a : catGroup.getChildren(null)) {\n        ScriptsForSelection_ActionGroup.this.add(a);\n      }\n      ScriptsForSelection_ActionGroup.this.addParameterizedAction(new RunMigrationScripts_Action(menuBuilder.getAllScripts(), true), PluginId.getId(\"jetbrains.mps.lang.script\"), menuBuilder.getAllScripts(), true);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","commit_id":"de341c5ba0a948e5107fcac33d00f716997e7604","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void assertOrderedSearchHits(SearchResponse searchResponse, String... ids) {\n        String shardStatus = formatShardStatus(searchResponse);\n        assertThat(\"Expected different hit count. \" + shardStatus, searchResponse.getHits().hits().length, equalTo(ids.length));\n        for (int i=0; i<ids.length; i++) {\n            SearchHit hit = searchResponse.getHits().hits()[i];\n            assertThat(\"Expected id: \" + hit.getId() + \" at position \" + i + \" but wasn't.\" + shardStatus, hit.getId(), equalTo(ids[i]));\n        }\n    }","id":12822,"modified_method":"public static void assertOrderedSearchHits(SearchResponse searchResponse, String... ids) {\n        String shardStatus = formatShardStatus(searchResponse);\n        assertThat(\"Expected different hit count. \" + shardStatus, searchResponse.getHits().hits().length, equalTo(ids.length));\n        for (int i=0; i<ids.length; i++) {\n            SearchHit hit = searchResponse.getHits().hits()[i];\n            assertThat(\"Expected id: \" + ids[i] + \" at position \" + i + \" but wasn't.\" + shardStatus, hit.getId(), equalTo(ids[i]));\n        }\n    }","commit_id":"5396d8e1498dca2904764f75f04c6977a6adb9bf","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void distanceScriptTests() throws Exception {\n        try {\n            client().admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // ignore\n        }\n\n        double source_lat = 32.798;\n        double source_long = -117.151;\n        double target_lat = 32.81;\n        double target_long = -117.21;\n\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n        client().admin().indices().prepareCreate(\"test\").addMapping(\"type1\", mapping).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"TestPosition\")\n                .startObject(\"location\").field(\"lat\", source_lat).field(\"lon\", source_long).endObject()\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse1 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].arcDistance(\" + target_lat + \",\" + target_long + \")\").execute().actionGet();\n        Double resultDistance1 = searchResponse1.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultDistance1, equalTo(GeoDistance.ARC.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.MILES)));\n\n        SearchResponse searchResponse2 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].distance(\" + target_lat + \",\" + target_long + \")\").execute().actionGet();\n        Double resultDistance2 = searchResponse2.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultDistance2, equalTo(GeoDistance.PLANE.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.MILES)));\n\n        SearchResponse searchResponse3 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].arcDistanceInKm(\" + target_lat + \",\" + target_long + \")\").execute().actionGet();\n        Double resultArcDistance3 = searchResponse3.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultArcDistance3, equalTo(GeoDistance.ARC.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.KILOMETERS)));\n\n        SearchResponse searchResponse4 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].distanceInKm(\" + target_lat + \",\" + target_long + \")\").execute().actionGet();\n        Double resultDistance4 = searchResponse4.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultDistance4, equalTo(GeoDistance.PLANE.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.KILOMETERS)));\n\n        SearchResponse searchResponse5 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].arcDistanceInKm(\" + (target_lat) + \",\" + (target_long + 360) + \")\").execute().actionGet();\n        Double resultArcDistance5 = searchResponse5.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultArcDistance5, equalTo(GeoDistance.ARC.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.KILOMETERS)));\n\n        SearchResponse searchResponse6 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].arcDistanceInKm(\" + (target_lat + 360) + \",\" + (target_long) + \")\").execute().actionGet();\n        Double resultArcDistance6 = searchResponse6.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultArcDistance6, equalTo(GeoDistance.ARC.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.KILOMETERS)));\n    }","id":12823,"modified_method":"@Test\n    public void distanceScriptTests() throws Exception {\n        double source_lat = 32.798;\n        double source_long = -117.151;\n        double target_lat = 32.81;\n        double target_long = -117.21;\n\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n        client().admin().indices().prepareCreate(\"test\").addMapping(\"type1\", mapping).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"TestPosition\")\n                .startObject(\"location\").field(\"lat\", source_lat).field(\"lon\", source_long).endObject()\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse1 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].arcDistance(\" + target_lat + \",\" + target_long + \")\").execute().actionGet();\n        Double resultDistance1 = searchResponse1.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultDistance1, equalTo(GeoDistance.ARC.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.MILES)));\n\n        SearchResponse searchResponse2 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].distance(\" + target_lat + \",\" + target_long + \")\").execute().actionGet();\n        Double resultDistance2 = searchResponse2.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultDistance2, equalTo(GeoDistance.PLANE.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.MILES)));\n\n        SearchResponse searchResponse3 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].arcDistanceInKm(\" + target_lat + \",\" + target_long + \")\").execute().actionGet();\n        Double resultArcDistance3 = searchResponse3.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultArcDistance3, equalTo(GeoDistance.ARC.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.KILOMETERS)));\n\n        SearchResponse searchResponse4 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].distanceInKm(\" + target_lat + \",\" + target_long + \")\").execute().actionGet();\n        Double resultDistance4 = searchResponse4.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultDistance4, equalTo(GeoDistance.PLANE.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.KILOMETERS)));\n\n        SearchResponse searchResponse5 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].arcDistanceInKm(\" + (target_lat) + \",\" + (target_long + 360) + \")\").execute().actionGet();\n        Double resultArcDistance5 = searchResponse5.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultArcDistance5, equalTo(GeoDistance.ARC.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.KILOMETERS)));\n\n        SearchResponse searchResponse6 = client().prepareSearch().addField(\"_source\").addScriptField(\"distance\", \"doc['location'].arcDistanceInKm(\" + (target_lat + 360) + \",\" + (target_long) + \")\").execute().actionGet();\n        Double resultArcDistance6 = searchResponse6.getHits().getHits()[0].getFields().get(\"distance\").getValue();\n        assertThat(resultArcDistance6, equalTo(GeoDistance.ARC.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.KILOMETERS)));\n    }","commit_id":"5396d8e1498dca2904764f75f04c6977a6adb9bf","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void simpleDistanceTests() throws Exception {\n        try {\n            client().admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // ignore\n        }\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n        client().admin().indices().prepareCreate(\"test\").addMapping(\"type1\", mapping).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"New York\")\n                .startObject(\"location\").field(\"lat\", 40.7143528).field(\"lon\", -74.0059731).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 5.286 km\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Times Square\")\n                .startObject(\"location\").field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 0.4621 km\n        client().prepareIndex(\"test\", \"type1\", \"3\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Tribeca\")\n                .startObject(\"location\").field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 1.055 km\n        client().prepareIndex(\"test\", \"type1\", \"4\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Wall Street\")\n                .startObject(\"location\").field(\"lat\", 40.7051157).field(\"lon\", -74.0088305).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 1.258 km\n        client().prepareIndex(\"test\", \"type1\", \"5\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Soho\")\n                .startObject(\"location\").field(\"lat\", 40.7247222).field(\"lon\", -74).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 2.029 km\n        client().prepareIndex(\"test\", \"type1\", \"6\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Greenwich Village\")\n                .startObject(\"location\").field(\"lat\", 40.731033).field(\"lon\", -73.9962255).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 8.572 km\n        client().prepareIndex(\"test\", \"type1\", \"7\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Brooklyn\")\n                .startObject(\"location\").field(\"lat\", 40.65).field(\"lon\", -73.95).endObject()\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n\n        // now with a PLANE type\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").geoDistance(GeoDistance.PLANE).point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n\n        // factor type is really too small for this resolution\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"2km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"2km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"1.242mi\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"1.242mi\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"1.0km\").to(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2);\n        assertThat(searchResponse.getHits().hits().length, equalTo(2));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"1.0km\").to(\"2.0km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2);\n        assertThat(searchResponse.getHits().hits().length, equalTo(2));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").to(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 3);\n        assertThat(searchResponse.getHits().hits().length, equalTo(3));\n\n        // SORTING\n\n        searchResponse = client().prepareSearch().setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"location\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 7);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"4\", \"5\", \"6\", \"2\", \"7\");\n\n        searchResponse = client().prepareSearch().setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"location\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 7);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"7\", \"2\", \"6\", \"5\", \"4\", \"3\", \"1\");\n    }","id":12824,"modified_method":"@Test\n    public void simpleDistanceTests() throws Exception {\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n        client().admin().indices().prepareCreate(\"test\").addMapping(\"type1\", mapping).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"New York\")\n                .startObject(\"location\").field(\"lat\", 40.7143528).field(\"lon\", -74.0059731).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 5.286 km\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Times Square\")\n                .startObject(\"location\").field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 0.4621 km\n        client().prepareIndex(\"test\", \"type1\", \"3\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Tribeca\")\n                .startObject(\"location\").field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 1.055 km\n        client().prepareIndex(\"test\", \"type1\", \"4\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Wall Street\")\n                .startObject(\"location\").field(\"lat\", 40.7051157).field(\"lon\", -74.0088305).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 1.258 km\n        client().prepareIndex(\"test\", \"type1\", \"5\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Soho\")\n                .startObject(\"location\").field(\"lat\", 40.7247222).field(\"lon\", -74).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 2.029 km\n        client().prepareIndex(\"test\", \"type1\", \"6\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Greenwich Village\")\n                .startObject(\"location\").field(\"lat\", 40.731033).field(\"lon\", -73.9962255).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 8.572 km\n        client().prepareIndex(\"test\", \"type1\", \"7\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Brooklyn\")\n                .startObject(\"location\").field(\"lat\", 40.65).field(\"lon\", -73.95).endObject()\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n\n        // now with a PLANE type\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").geoDistance(GeoDistance.PLANE).point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n\n        // factor type is really too small for this resolution\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"2km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"2km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"1.242mi\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"1.242mi\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"1.0km\").to(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2);\n        assertThat(searchResponse.getHits().hits().length, equalTo(2));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"1.0km\").to(\"2.0km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2);\n        assertThat(searchResponse.getHits().hits().length, equalTo(2));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").to(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 3);\n        assertThat(searchResponse.getHits().hits().length, equalTo(3));\n\n        // SORTING\n\n        searchResponse = client().prepareSearch().setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"location\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 7);\n        assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"4\", \"5\", \"6\", \"2\", \"7\");\n\n        searchResponse = client().prepareSearch().setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"location\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 7);\n        assertOrderedSearchHits(searchResponse, \"7\", \"2\", \"6\", \"5\", \"4\", \"3\", \"1\");\n    }","commit_id":"5396d8e1498dca2904764f75f04c6977a6adb9bf","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    // Regression bug: https://github.com/elasticsearch/elasticsearch/issues/2851\n    public void testDistanceSortingWithMissingGeoPoint() throws Exception {\n        client().admin().indices().prepareDelete().execute().actionGet();\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"locations\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"type1\", mapping)\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth(\"test\").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Times Square\", \"Tribeca\")\n                .startArray(\"locations\")\n                        // to NY: 5.286 km\n                .startObject().field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject()\n                        // to NY: 0.4621 km\n                .startObject().field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Wall Street\", \"Soho\")\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        // Order: Asc\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 2);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"1\", \"2\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n\n        // Order: Desc\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        // Doc with missing geo point is first, is consistent with 0.20.x\n        assertHitCount(searchResponse, 2);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"2\", \"1\");        \n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n    }","id":12825,"modified_method":"@Test\n    // Regression bug: https://github.com/elasticsearch/elasticsearch/issues/2851\n    public void testDistanceSortingWithMissingGeoPoint() throws Exception {\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"locations\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"type1\", mapping)\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth(\"test\").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Times Square\", \"Tribeca\")\n                .startArray(\"locations\")\n                        // to NY: 5.286 km\n                .startObject().field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject()\n                        // to NY: 0.4621 km\n                .startObject().field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Wall Street\", \"Soho\")\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        // Order: Asc\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 2);\n        assertOrderedSearchHits(searchResponse, \"1\", \"2\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n\n        // Order: Desc\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        // Doc with missing geo point is first, is consistent with 0.20.x\n        assertHitCount(searchResponse, 2);\n        assertOrderedSearchHits(searchResponse, \"2\", \"1\");        \n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n    }","commit_id":"5396d8e1498dca2904764f75f04c6977a6adb9bf","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testDistanceSortingMVFields() throws Exception {\n        client().admin().indices().prepareDelete().execute().actionGet();\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"locations\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"type1\", mapping)\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth(\"test\").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"New York\")\n                .startObject(\"locations\").field(\"lat\", 40.7143528).field(\"lon\", -74.0059731).endObject()\n                .endObject()).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Times Square\", \"Tribeca\")\n                .startArray(\"locations\")\n                        // to NY: 5.286 km\n                .startObject().field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject()\n                        // to NY: 0.4621 km\n                .startObject().field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"3\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Wall Street\", \"Soho\")\n                .startArray(\"locations\")\n                        // to NY: 1.055 km\n                .startObject().field(\"lat\", 40.7051157).field(\"lon\", -74.0088305).endObject()\n                        // to NY: 1.258 km\n                .startObject().field(\"lat\", 40.7247222).field(\"lon\", -74).endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n\n        client().prepareIndex(\"test\", \"type1\", \"4\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Greenwich Village\", \"Brooklyn\")\n                .startArray(\"locations\")\n                        // to NY: 2.029 km\n                .startObject().field(\"lat\", 40.731033).field(\"lon\", -73.9962255).endObject()\n                        // to NY: 8.572 km\n                .startObject().field(\"lat\", 40.65).field(\"lon\", -73.95).endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        // Order: Asc\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"1\", \"2\", \"3\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.055d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(2.029d, 0.01d));\n\n        // Order: Asc, Mode: max\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.ASC).sortMode(\"max\"))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"2\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.258d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n\n        // Order: Desc\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"4\", \"2\", \"3\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.258d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        // Order: Desc, Mode: min\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.DESC).sortMode(\"min\"))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"4\", \"3\", \"2\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(2.029d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.055d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"2\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.157d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(2.874d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(5.301d, 0.01d));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"4\", \"2\", \"3\", \"1\");        \n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(5.301d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(2.874d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.157d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        try {\n            client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                    .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).sortMode(\"sum\"))\n                    .execute().actionGet();\n            fail(\"Expected error\");\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.shardFailures()[0].status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n    }","id":12826,"modified_method":"@Test\n    public void testDistanceSortingMVFields() throws Exception {\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"locations\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"type1\", mapping)\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth(\"test\").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"New York\")\n                .startObject(\"locations\").field(\"lat\", 40.7143528).field(\"lon\", -74.0059731).endObject()\n                .endObject()).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Times Square\", \"Tribeca\")\n                .startArray(\"locations\")\n                        // to NY: 5.286 km\n                .startObject().field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject()\n                        // to NY: 0.4621 km\n                .startObject().field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"3\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Wall Street\", \"Soho\")\n                .startArray(\"locations\")\n                        // to NY: 1.055 km\n                .startObject().field(\"lat\", 40.7051157).field(\"lon\", -74.0088305).endObject()\n                        // to NY: 1.258 km\n                .startObject().field(\"lat\", 40.7247222).field(\"lon\", -74).endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n\n        client().prepareIndex(\"test\", \"type1\", \"4\").setSource(jsonBuilder().startObject()\n                .field(\"names\", \"Greenwich Village\", \"Brooklyn\")\n                .startArray(\"locations\")\n                        // to NY: 2.029 km\n                .startObject().field(\"lat\", 40.731033).field(\"lon\", -73.9962255).endObject()\n                        // to NY: 8.572 km\n                .startObject().field(\"lat\", 40.65).field(\"lon\", -73.95).endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        // Order: Asc\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"1\", \"2\", \"3\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.055d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(2.029d, 0.01d));\n\n        // Order: Asc, Mode: max\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.ASC).sortMode(\"max\"))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"2\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.258d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n\n        // Order: Desc\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"4\", \"2\", \"3\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.258d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        // Order: Desc, Mode: min\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).order(SortOrder.DESC).sortMode(\"min\"))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"4\", \"3\", \"2\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(2.029d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.055d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"2\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.157d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(2.874d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(5.301d, 0.01d));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"4\", \"2\", \"3\", \"1\");        \n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(5.301d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(2.874d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.157d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        try {\n            client().prepareSearch(\"test\").setQuery(matchAllQuery())\n                    .addSort(SortBuilders.geoDistanceSort(\"locations\").point(40.7143528, -74.0059731).sortMode(\"sum\"))\n                    .execute().actionGet();\n            fail(\"Expected error\");\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.shardFailures()[0].status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n    }","commit_id":"5396d8e1498dca2904764f75f04c6977a6adb9bf","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testDistanceSortingNestedFields() throws Exception {\n        client().admin().indices().prepareDelete().execute().actionGet();\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"company\")\n                .startObject(\"properties\")\n                .startObject(\"name\").field(\"type\", \"string\").endObject()\n                .startObject(\"branches\")\n                    .field(\"type\", \"nested\")\n                    .startObject(\"properties\")\n                        .startObject(\"name\").field(\"type\", \"string\").endObject()\n                        .startObject(\"location\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject()\n                    .endObject()\n                .endObject()\n                .endObject()\n                .endObject().endObject().string();\n\n        client().admin().indices().prepareCreate(\"companies\")\n                .setSettings(settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"company\", mapping)\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth(\"companies\").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"companies\", \"company\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"company 1\")\n                .startArray(\"branches\")\n                    .startObject()\n                        .field(\"name\", \"New York\")\n                        .startObject(\"location\").field(\"lat\", 40.7143528).field(\"lon\", -74.0059731).endObject()\n                    .endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n        client().prepareIndex(\"companies\", \"company\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"company 2\")\n                .startArray(\"branches\")\n                    .startObject()\n                        .field(\"name\", \"Times Square\")\n                        .startObject(\"location\").field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject() // to NY: 5.286 km\n                    .endObject()\n                    .startObject()\n                        .field(\"name\", \"Tribeca\")\n                        .startObject(\"location\").field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject() // to NY: 0.4621 km\n                    .endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n        client().prepareIndex(\"companies\", \"company\", \"3\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"company 3\")\n                .startArray(\"branches\")\n                    .startObject()\n                        .field(\"name\", \"Wall Street\")\n                        .startObject(\"location\").field(\"lat\", 40.7051157).field(\"lon\", -74.0088305).endObject() // to NY: 1.055 km\n                    .endObject()\n                    .startObject()\n                        .field(\"name\", \"Soho\")\n                        .startObject(\"location\").field(\"lat\", 40.7247222).field(\"lon\", -74).endObject() // to NY: 1.258 km\n                    .endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n\n        client().prepareIndex(\"companies\", \"company\", \"4\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"company 4\")\n                .startArray(\"branches\")\n                    .startObject()\n                        .field(\"name\", \"Greenwich Village\")\n                        .startObject(\"location\").field(\"lat\", 40.731033).field(\"lon\", -73.9962255).endObject() // to NY: 2.029 km\n                    .endObject()\n                    .startObject()\n                        .field(\"name\", \"Brooklyn\")\n                        .startObject(\"location\").field(\"lat\", 40.65).field(\"lon\", -73.95).endObject() // to NY: 8.572 km\n                    .endObject()\n                .endArray()\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        // Order: Asc\n        SearchResponse searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"1\", \"2\", \"3\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.055d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(2.029d, 0.01d));\n\n        // Order: Asc, Mode: max\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).order(SortOrder.ASC).sortMode(\"max\"))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"2\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.258d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n\n        // Order: Desc\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"4\", \"2\", \"3\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.258d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        // Order: Desc, Mode: min\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).order(SortOrder.DESC).sortMode(\"min\"))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"4\", \"3\", \"2\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(2.029d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.055d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"2\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.157d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(2.874d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(5.301d, 0.01d));\n\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(\n                    SortBuilders.geoDistanceSort(\"branches.location\").setNestedPath(\"branches\")\n                            .point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.DESC)\n                )\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"4\", \"2\", \"3\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(5.301d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(2.874d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.157d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(\n                        SortBuilders.geoDistanceSort(\"branches.location\").setNestedFilter(termFilter(\"branches.name\", \"brooklyn\"))\n                                .point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.ASC)\n                )\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        ElasticsearchAssertions.assertOrderedSearchHits(searchResponse, \"4\", \"1\", \"2\", \"3\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n\n        try {\n            client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                    .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).sortMode(\"sum\"))\n                    .execute().actionGet();\n            fail(\"Expected error\");\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.shardFailures()[0].status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n    }","id":12827,"modified_method":"@Test\n    public void testDistanceSortingNestedFields() throws Exception {\n        client().admin().indices().prepareDelete().execute().actionGet();\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"company\")\n                .startObject(\"properties\")\n                .startObject(\"name\").field(\"type\", \"string\").endObject()\n                .startObject(\"branches\")\n                    .field(\"type\", \"nested\")\n                    .startObject(\"properties\")\n                        .startObject(\"name\").field(\"type\", \"string\").endObject()\n                        .startObject(\"location\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject()\n                    .endObject()\n                .endObject()\n                .endObject()\n                .endObject().endObject().string();\n\n        client().admin().indices().prepareCreate(\"companies\")\n                .setSettings(settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"company\", mapping)\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth(\"companies\").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        indexRandom(\"companies\", true, \n        client().prepareIndex(\"companies\", \"company\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"company 1\")\n                .startArray(\"branches\")\n                    .startObject()\n                        .field(\"name\", \"New York\")\n                        .startObject(\"location\").field(\"lat\", 40.7143528).field(\"lon\", -74.0059731).endObject()\n                    .endObject()\n                .endArray()\n                .endObject()),\n        client().prepareIndex(\"companies\", \"company\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"company 2\")\n                .startArray(\"branches\")\n                    .startObject()\n                        .field(\"name\", \"Times Square\")\n                        .startObject(\"location\").field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject() // to NY: 5.286 km\n                    .endObject()\n                    .startObject()\n                        .field(\"name\", \"Tribeca\")\n                        .startObject(\"location\").field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject() // to NY: 0.4621 km\n                    .endObject()\n                .endArray()\n                .endObject()),\n        client().prepareIndex(\"companies\", \"company\", \"3\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"company 3\")\n                .startArray(\"branches\")\n                    .startObject()\n                        .field(\"name\", \"Wall Street\")\n                        .startObject(\"location\").field(\"lat\", 40.7051157).field(\"lon\", -74.0088305).endObject() // to NY: 1.055 km\n                    .endObject()\n                    .startObject()\n                        .field(\"name\", \"Soho\")\n                        .startObject(\"location\").field(\"lat\", 40.7247222).field(\"lon\", -74).endObject() // to NY: 1.258 km\n                    .endObject()\n                .endArray()\n                .endObject()),\n        client().prepareIndex(\"companies\", \"company\", \"4\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"company 4\")\n                .startArray(\"branches\")\n                    .startObject()\n                        .field(\"name\", \"Greenwich Village\")\n                        .startObject(\"location\").field(\"lat\", 40.731033).field(\"lon\", -73.9962255).endObject() // to NY: 2.029 km\n                    .endObject()\n                    .startObject()\n                        .field(\"name\", \"Brooklyn\")\n                        .startObject(\"location\").field(\"lat\", 40.65).field(\"lon\", -73.95).endObject() // to NY: 8.572 km\n                    .endObject()\n                .endArray()\n                .endObject()));\n\n        // Order: Asc\n        SearchResponse searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"1\", \"2\", \"3\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.055d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(2.029d, 0.01d));\n\n        // Order: Asc, Mode: max\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).order(SortOrder.ASC).sortMode(\"max\"))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"2\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.258d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n\n        // Order: Desc\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"4\", \"2\", \"3\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(5.286d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.258d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        // Order: Desc, Mode: min\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).order(SortOrder.DESC).sortMode(\"min\"))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"4\", \"3\", \"2\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(2.029d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.055d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(0.4621d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"2\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), equalTo(0d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(1.157d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(2.874d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), closeTo(5.301d, 0.01d));\n\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(\n                    SortBuilders.geoDistanceSort(\"branches.location\").setNestedPath(\"branches\")\n                            .point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.DESC)\n                )\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 4);\n        assertOrderedSearchHits(searchResponse, \"4\", \"2\", \"3\", \"1\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(5.301d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(2.874d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), closeTo(1.157d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(0d));\n\n        searchResponse = client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                .addSort(\n                        SortBuilders.geoDistanceSort(\"branches.location\").setNestedFilter(termFilter(\"branches.name\", \"brooklyn\"))\n                                .point(40.7143528, -74.0059731).sortMode(\"avg\").order(SortOrder.ASC)\n                )\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertFirstHit(searchResponse, hasId(\"4\"));\n        assertSearchHits(searchResponse, \"1\", \"2\", \"3\", \"4\");\n        assertThat(((Number) searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(), closeTo(8.572d, 0.01d));\n        assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n        assertThat(((Number) searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n        assertThat(((Number) searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(), equalTo(Double.MAX_VALUE));\n\n        try {\n            client().prepareSearch(\"companies\").setQuery(matchAllQuery())\n                    .addSort(SortBuilders.geoDistanceSort(\"branches.location\").point(40.7143528, -74.0059731).sortMode(\"sum\"))\n                    .execute().actionGet();\n            fail(\"Expected error\");\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.shardFailures()[0].status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n    }","commit_id":"5396d8e1498dca2904764f75f04c6977a6adb9bf","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public void copy(int slot, int rootDoc) throws IOException {\n            if (rootDoc == 0 || rootDocuments == null || innerDocuments == null) {\n                return;\n            }\n\n            int prevRootDoc = rootDocuments.prevSetBit(rootDoc - 1);\n            int nestedDoc = innerDocuments.nextSetBit(prevRootDoc + 1);\n            if (nestedDoc >= rootDoc || nestedDoc == -1) {\n                copyMissing(wrappedComparator, slot);\n                return;\n            }\n\n            int counter = 1;\n            wrappedComparator.copy(slot, nestedDoc);\n            nestedDoc = innerDocuments.nextSetBit(nestedDoc + 1);\n            while (nestedDoc > prevRootDoc && nestedDoc < rootDoc) {\n                wrappedComparator.add(slot, nestedDoc);\n                nestedDoc = innerDocuments.nextSetBit(nestedDoc + 1);\n                counter++;\n            }\n            wrappedComparator.divide(slot, counter);\n        }","id":12828,"modified_method":"@Override\n        public void copy(int slot, int rootDoc) throws IOException {\n            if (rootDoc == 0 || rootDocuments == null || innerDocuments == null) {\n                copyMissing(wrappedComparator, slot);\n                return;\n            }\n\n            int prevRootDoc = rootDocuments.prevSetBit(rootDoc - 1);\n            int nestedDoc = innerDocuments.nextSetBit(prevRootDoc + 1);\n            if (nestedDoc >= rootDoc || nestedDoc == -1) {\n                copyMissing(wrappedComparator, slot);\n                return;\n            }\n\n            int counter = 1;\n            wrappedComparator.copy(slot, nestedDoc);\n            nestedDoc = innerDocuments.nextSetBit(nestedDoc + 1);\n            while (nestedDoc > prevRootDoc && nestedDoc < rootDoc) {\n                wrappedComparator.add(slot, nestedDoc);\n                nestedDoc = innerDocuments.nextSetBit(nestedDoc + 1);\n                counter++;\n            }\n            wrappedComparator.divide(slot, counter);\n        }","commit_id":"5396d8e1498dca2904764f75f04c6977a6adb9bf","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testCommonTermsQuery() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"type1\", \"field1\", \"type=string,analyzer=whitespace\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1)).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field1\", \"the quick brown fox\").execute().actionGet();\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(\"field1\", \"the quick lazy huge brown fox jumps over the tree\").execute().actionGet();\n        client().prepareIndex(\"test\", \"type1\", \"3\").setSource(\"field1\", \"quick lazy huge brown\", \"field2\", \"the quick lazy huge brown fox jumps over the tree\").setRefresh(true).execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the quick brown\").cutoffFrequency(3).lowFreqOperator(Operator.OR)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"3\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the quick brown\").cutoffFrequency(3).lowFreqOperator(Operator.AND)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n\n        // Default\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the quick brown\").cutoffFrequency(3)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"3\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the huge fox\").lowFreqMinimumShouldMatch(\"2\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"2\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the lazy fox brown\").cutoffFrequency(1).highFreqMinimumShouldMatch(\"3\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the lazy fox brown\").cutoffFrequency(1).highFreqMinimumShouldMatch(\"4\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"2\"));\n\n        searchResponse = client().prepareSearch().setQuery(\"{ \\\"common\\\" : { \\\"field1\\\" : { \\\"query\\\" : \\\"the lazy fox brown\\\", \\\"cutoff_frequency\\\" : 1, \\\"minimum_should_match\\\" : { \\\"high_freq\\\" : 4 } } } }\").execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"2\"));\n\n        // Default\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the lazy fox brown\").cutoffFrequency(1)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"2\"));\n\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the quick brown\").cutoffFrequency(3).analyzer(\"standard\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        // standard drops \"the\" since its a stopword\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"3\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"2\"));\n\n        // try the same with match query\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field1\", \"the quick brown\").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field1\", \"the quick brown\").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.OR)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"3\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field1\", \"the quick brown\").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND).analyzer(\"standard\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        // standard drops \"the\" since its a stopword\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"3\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"2\"));\n\n        // try the same with multi match query\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.multiMatchQuery(\"the quick brown\", \"field1\", \"field2\").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"3\")); // better score due to different query stats\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"2\"));\n    }","id":12829,"modified_method":"@Test\n    public void testCommonTermsQuery() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"type1\", \"field1\", \"type=string,analyzer=whitespace\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1)).execute().actionGet();\n        indexRandom(\"test\", true, \n                client().prepareIndex(\"test\", \"type1\", \"3\").setSource(\"field1\", \"quick lazy huge brown pidgin\", \"field2\", \"the quick lazy huge brown fox jumps over the tree\"),\n                client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field1\", \"the quick brown fox\"),\n                client().prepareIndex(\"test\", \"type1\", \"2\").setSource(\"field1\", \"the quick lazy huge brown fox jumps over the tree\")\n        );\n\n        SearchResponse searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the quick brown\").cutoffFrequency(3).lowFreqOperator(Operator.OR)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"3\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the quick brown\").cutoffFrequency(3).lowFreqOperator(Operator.AND)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n\n        // Default\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the quick brown\").cutoffFrequency(3)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"3\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the huge fox\").lowFreqMinimumShouldMatch(\"2\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"2\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the lazy fox brown\").cutoffFrequency(1).highFreqMinimumShouldMatch(\"3\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the lazy fox brown\").cutoffFrequency(1).highFreqMinimumShouldMatch(\"4\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"2\"));\n\n        searchResponse = client().prepareSearch().setQuery(\"{ \\\"common\\\" : { \\\"field1\\\" : { \\\"query\\\" : \\\"the lazy fox brown\\\", \\\"cutoff_frequency\\\" : 1, \\\"minimum_should_match\\\" : { \\\"high_freq\\\" : 4 } } } }\").execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"2\"));\n\n        // Default\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the lazy fox brown\").cutoffFrequency(1)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"2\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.commonTerms(\"field1\", \"the quick brown\").cutoffFrequency(3).analyzer(\"standard\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        // standard drops \"the\" since its a stopword\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"3\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"2\"));\n\n        // try the same with match query\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field1\", \"the quick brown\").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field1\", \"the quick brown\").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.OR)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"2\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"3\"));\n\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field1\", \"the quick brown\").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND).analyzer(\"standard\")).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        // standard drops \"the\" since its a stopword\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"3\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"2\"));\n\n        // try the same with multi match query\n        searchResponse = client().prepareSearch().setQuery(QueryBuilders.multiMatchQuery(\"the quick brown\", \"field1\", \"field2\").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(3l));\n        assertThat(searchResponse.getHits().getHits()[0].getId(), equalTo(\"3\")); // better score due to different query stats\n        assertThat(searchResponse.getHits().getHits()[1].getId(), equalTo(\"1\"));\n        assertThat(searchResponse.getHits().getHits()[2].getId(), equalTo(\"2\"));\n    }","commit_id":"bd466fe39de25e193dc87cdb83147ca8e598aa82","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void typeFilterTests(String index) throws Exception {\n        client().admin().indices().prepareCreate(\"test\").setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1))\n                .addMapping(\"type1\", jsonBuilder().startObject().startObject(\"type1\")\n                        .startObject(\"_type\").field(\"index\", index).endObject()\n                        .endObject().endObject())\n                .addMapping(\"type2\", jsonBuilder().startObject().startObject(\"type2\")\n                        .startObject(\"_type\").field(\"index\", index).endObject()\n                        .endObject().endObject())\n                .execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field1\", \"value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"type2\", \"1\").setSource(\"field1\", \"value1\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(\"field1\", \"value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"type2\", \"2\").setSource(\"field1\", \"value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"type2\", \"3\").setSource(\"field1\", \"value1\").execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        assertThat(client().prepareCount().setQuery(filteredQuery(matchAllQuery(), typeFilter(\"type1\"))).execute().actionGet().getCount(), equalTo(2l));\n        assertThat(client().prepareCount().setQuery(filteredQuery(matchAllQuery(), typeFilter(\"type2\"))).execute().actionGet().getCount(), equalTo(3l));\n\n        assertThat(client().prepareCount().setTypes(\"type1\").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(2l));\n        assertThat(client().prepareCount().setTypes(\"type2\").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(3l));\n\n        assertThat(client().prepareCount().setTypes(\"type1\", \"type2\").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(5l));\n    }","id":12830,"modified_method":"private void typeFilterTests(String index) throws Exception {\n        client().admin().indices().prepareCreate(\"test\").setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1))\n                .addMapping(\"type1\", jsonBuilder().startObject().startObject(\"type1\")\n                        .startObject(\"_type\").field(\"index\", index).endObject()\n                        .endObject().endObject())\n                .addMapping(\"type2\", jsonBuilder().startObject().startObject(\"type2\")\n                        .startObject(\"_type\").field(\"index\", index).endObject()\n                        .endObject().endObject())\n                .execute().actionGet();\n        indexRandom(\"test\", true, \n            client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field1\", \"value1\"),\n            client().prepareIndex(\"test\", \"type2\", \"1\").setSource(\"field1\", \"value1\"),\n            client().prepareIndex(\"test\", \"type1\", \"2\").setSource(\"field1\", \"value1\"),\n            client().prepareIndex(\"test\", \"type2\", \"2\").setSource(\"field1\", \"value1\"),\n            client().prepareIndex(\"test\", \"type2\", \"3\").setSource(\"field1\", \"value1\"));\n\n        assertThat(client().prepareCount().setQuery(filteredQuery(matchAllQuery(), typeFilter(\"type1\"))).execute().actionGet().getCount(), equalTo(2l));\n        assertThat(client().prepareCount().setQuery(filteredQuery(matchAllQuery(), typeFilter(\"type2\"))).execute().actionGet().getCount(), equalTo(3l));\n\n        assertThat(client().prepareCount().setTypes(\"type1\").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(2l));\n        assertThat(client().prepareCount().setTypes(\"type2\").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(3l));\n\n        assertThat(client().prepareCount().setTypes(\"type1\", \"type2\").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(5l));\n    }","commit_id":"bd466fe39de25e193dc87cdb83147ca8e598aa82","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testOmitTermFreqsAndPositions() throws Exception {\n        // backwards compat test!\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"type1\", \"field1\", \"type=string,omit_term_freq_and_positions=true\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1)).get();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field1\", \"quick brown fox\", \"field2\", \"quick brown fox\").get();\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(\"field1\", \"quick lazy huge brown fox\", \"field2\", \"quick lazy huge brown fox\").setRefresh(true).get();\n\n\n        SearchResponse searchResponse = client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field2\", \"quick brown\").type(MatchQueryBuilder.Type.PHRASE).slop(0)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        try {\n            client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field1\", \"quick brown\").type(MatchQueryBuilder.Type.PHRASE).slop(0)).execute().actionGet();\n        } catch (SearchPhaseExecutionException e) {\n            assertTrue(e.getMessage().endsWith(\"IllegalStateException[field \\\"field1\\\" was indexed without position data; cannot run PhraseQuery (term=quick)]; }\"));\n        }\n    }","id":12831,"modified_method":"@Test\n    public void testOmitTermFreqsAndPositions() throws Exception {\n        // backwards compat test!\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"type1\", \"field1\", \"type=string,omit_term_freq_and_positions=true\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1)).get();\n\n        indexRandom(\"test\", true, \n                client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"field1\", \"quick brown fox\", \"field2\", \"quick brown fox\"),\n                client().prepareIndex(\"test\", \"type1\", \"2\").setSource(\"field1\", \"quick lazy huge brown fox\", \"field2\", \"quick lazy huge brown fox\"));\n\n\n        SearchResponse searchResponse = client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field2\", \"quick brown\").type(MatchQueryBuilder.Type.PHRASE).slop(0)).execute().actionGet();\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        try {\n            client().prepareSearch().setQuery(QueryBuilders.matchQuery(\"field1\", \"quick brown\").type(MatchQueryBuilder.Type.PHRASE).slop(0)).execute().actionGet();\n        } catch (SearchPhaseExecutionException e) {\n            assertTrue(e.getMessage().endsWith(\"IllegalStateException[field \\\"field1\\\" was indexed without position data; cannot run PhraseQuery (term=quick)]; }\"));\n        }\n    }","commit_id":"bd466fe39de25e193dc87cdb83147ca8e598aa82","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void simpleDistanceTests() throws Exception {\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n        client().admin().indices().prepareCreate(\"test\").addMapping(\"type1\", mapping).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"New York\")\n                .startObject(\"location\").field(\"lat\", 40.7143528).field(\"lon\", -74.0059731).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 5.286 km\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Times Square\")\n                .startObject(\"location\").field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 0.4621 km\n        client().prepareIndex(\"test\", \"type1\", \"3\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Tribeca\")\n                .startObject(\"location\").field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 1.055 km\n        client().prepareIndex(\"test\", \"type1\", \"4\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Wall Street\")\n                .startObject(\"location\").field(\"lat\", 40.7051157).field(\"lon\", -74.0088305).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 1.258 km\n        client().prepareIndex(\"test\", \"type1\", \"5\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Soho\")\n                .startObject(\"location\").field(\"lat\", 40.7247222).field(\"lon\", -74).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 2.029 km\n        client().prepareIndex(\"test\", \"type1\", \"6\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Greenwich Village\")\n                .startObject(\"location\").field(\"lat\", 40.731033).field(\"lon\", -73.9962255).endObject()\n                .endObject()).execute().actionGet();\n\n        // to NY: 8.572 km\n        client().prepareIndex(\"test\", \"type1\", \"7\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Brooklyn\")\n                .startObject(\"location\").field(\"lat\", 40.65).field(\"lon\", -73.95).endObject()\n                .endObject()).execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n\n        // now with a PLANE type\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").geoDistance(GeoDistance.PLANE).point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n\n        // factor type is really too small for this resolution\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"2km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"2km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"1.242mi\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"1.242mi\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"1.0km\").to(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2);\n        assertThat(searchResponse.getHits().hits().length, equalTo(2));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"1.0km\").to(\"2.0km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2);\n        assertThat(searchResponse.getHits().hits().length, equalTo(2));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").to(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 3);\n        assertThat(searchResponse.getHits().hits().length, equalTo(3));\n\n        // SORTING\n\n        searchResponse = client().prepareSearch().setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"location\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 7);\n        assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"4\", \"5\", \"6\", \"2\", \"7\");\n\n        searchResponse = client().prepareSearch().setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"location\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 7);\n        assertOrderedSearchHits(searchResponse, \"7\", \"2\", \"6\", \"5\", \"4\", \"3\", \"1\");\n    }","id":12832,"modified_method":"@Test\n    public void simpleDistanceTests() throws Exception {\n        String mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\").field(\"type\", \"geo_point\").field(\"lat_lon\", true).endObject().endObject()\n                .endObject().endObject().string();\n        client().admin().indices().prepareCreate(\"test\").addMapping(\"type1\", mapping).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        indexRandom(\"test\", true, \n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"New York\")\n                .startObject(\"location\").field(\"lat\", 40.7143528).field(\"lon\", -74.0059731).endObject()\n                .endObject()),\n        // to NY: 5.286 km\n        client().prepareIndex(\"test\", \"type1\", \"2\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Times Square\")\n                .startObject(\"location\").field(\"lat\", 40.759011).field(\"lon\", -73.9844722).endObject()\n                .endObject()),\n        // to NY: 0.4621 km\n        client().prepareIndex(\"test\", \"type1\", \"3\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Tribeca\")\n                .startObject(\"location\").field(\"lat\", 40.718266).field(\"lon\", -74.007819).endObject()\n                .endObject()),\n        // to NY: 1.055 km\n        client().prepareIndex(\"test\", \"type1\", \"4\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Wall Street\")\n                .startObject(\"location\").field(\"lat\", 40.7051157).field(\"lon\", -74.0088305).endObject()\n                .endObject()),\n        // to NY: 1.258 km\n        client().prepareIndex(\"test\", \"type1\", \"5\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Soho\")\n                .startObject(\"location\").field(\"lat\", 40.7247222).field(\"lon\", -74).endObject()\n                .endObject()),\n        // to NY: 2.029 km\n        client().prepareIndex(\"test\", \"type1\", \"6\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Greenwich Village\")\n                .startObject(\"location\").field(\"lat\", 40.731033).field(\"lon\", -73.9962255).endObject()\n                .endObject()),\n        // to NY: 8.572 km\n        client().prepareIndex(\"test\", \"type1\", \"7\").setSource(jsonBuilder().startObject()\n                .field(\"name\", \"Brooklyn\")\n                .startObject(\"location\").field(\"lat\", 40.65).field(\"lon\", -73.95).endObject()\n                .endObject()));\n\n        SearchResponse searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n\n        // now with a PLANE type\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"3km\").geoDistance(GeoDistance.PLANE).point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 5);\n        assertThat(searchResponse.getHits().hits().length, equalTo(5));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\"), equalTo(\"6\")));\n        }\n\n        // factor type is really too small for this resolution\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"2km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"2km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"1.242mi\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceFilter(\"location\").distance(\"1.242mi\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"1\"), equalTo(\"3\"), equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"1.0km\").to(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2);\n        assertThat(searchResponse.getHits().hits().length, equalTo(2));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"4\"), equalTo(\"5\")));\n        }\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"1.0km\").to(\"2.0km\").point(40.7143528, -74.0059731).optimizeBbox(\"indexed\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2);\n        assertThat(searchResponse.getHits().hits().length, equalTo(2));\n        for (SearchHit hit : searchResponse.getHits()) {\n            assertThat(hit.id(), anyOf(equalTo(\"4\"), equalTo(\"5\")));\n        }\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").to(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 4);\n        assertThat(searchResponse.getHits().hits().length, equalTo(4));\n\n        searchResponse = client().prepareSearch() // from NY\n                .setQuery(filteredQuery(matchAllQuery(), geoDistanceRangeFilter(\"location\").from(\"2.0km\").point(40.7143528, -74.0059731)))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 3);\n        assertThat(searchResponse.getHits().hits().length, equalTo(3));\n\n        // SORTING\n\n        searchResponse = client().prepareSearch().setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"location\").point(40.7143528, -74.0059731).order(SortOrder.ASC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 7);\n        assertOrderedSearchHits(searchResponse, \"1\", \"3\", \"4\", \"5\", \"6\", \"2\", \"7\");\n\n        searchResponse = client().prepareSearch().setQuery(matchAllQuery())\n                .addSort(SortBuilders.geoDistanceSort(\"location\").point(40.7143528, -74.0059731).order(SortOrder.DESC))\n                .execute().actionGet();\n\n        assertHitCount(searchResponse, 7);\n        assertOrderedSearchHits(searchResponse, \"7\", \"2\", \"6\", \"5\", \"4\", \"3\", \"1\");\n    }","commit_id":"da9aef60f4a5da720ed3f9d96b2d7e28c2125cd3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void initializeState(String scriptName) {\n        // The directory where scripts are cached.\n        this.scriptCacheDir = new File(settings.getProjectWorkDir(), \"scriptCache\");\n        this.console = GrailsConsole.getInstance();\n        // Add the remaining JARs (from 'grailsHome', the app, and\n        // the plugins) to the root loader.\n\n        boolean skipPlugins = scriptName != null && (\"UninstallPlugin\".equals(scriptName) || \"InstallPlugin\".equals(scriptName));\n\n        console.updateStatus(\"Configuring classpath\");\n        ClasspathConfigurer configurer = new ClasspathConfigurer(pluginPathSupport, settings, skipPlugins);\n        this.classLoader = configurer.configuredClassLoader();\n        initializeLogging();\n    }","id":12833,"modified_method":"private void initializeState(String scriptName) {\n        // The directory where scripts are cached.\n        this.scriptCacheDir = new File(settings.getProjectWorkDir(), \"scriptCache\");\n        this.console = GrailsConsole.getInstance();\n        // Add the remaining JARs (from 'grailsHome', the app, and\n        // the plugins) to the root loader.\n\n        boolean skipPlugins = scriptName != null && (\"UninstallPlugin\".equals(scriptName) || \"InstallPlugin\".equals(scriptName));\n\n        console.updateStatus(\"Configuring classpath\");\n        ClasspathConfigurer configurer = new ClasspathConfigurer(pluginPathSupport, settings, skipPlugins);\n        if(\"DependencyReport\".equals(scriptName)) {\n            configurer.setExitOnResolveError(false);\n        }\n        this.classLoader = configurer.configuredClassLoader();\n        initializeLogging();\n    }","commit_id":"d5e4872cca2b296f1549ecc1cc0bc851dd908ea4","url":"https://github.com/grails/grails-core"},{"original_method":"private X509Certificate getCert(Crypto crypto) throws Exception {\n        String alias = (String)getProperty(SecurityConstants.STS_TOKEN_USERNAME);\n        if (alias == null) {\n            alias = crypto.getDefaultX509Identifier();\n        }\n        if (alias == null) {\n            throw new Fault(\"No alias specified for retrieving PublicKey\", LOG);\n        }\n        CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n        cryptoType.setAlias(alias);\n        return crypto.getX509Certificates(cryptoType)[0];\n    }","id":12834,"modified_method":"private X509Certificate getCert(Crypto crypto) throws Exception {\n        String alias = (String)getProperty(SecurityConstants.STS_TOKEN_USERNAME);\n        if (alias == null) {\n            alias = crypto.getDefaultX509Identifier();\n        }\n        if (alias == null) {\n            throw new Fault(\"No alias specified for retrieving PublicKey\", LOG);\n        }\n        CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n        cryptoType.setAlias(alias);\n        \n        X509Certificate certs[] = crypto.getX509Certificates(cryptoType);\n        if (certs == null || certs.length == 0) {\n            throw new Fault(\"Could not get X509Certificate for alias \" + alias, LOG);\n        }\n        return certs[0];\n    }","commit_id":"3c2a97a926baa894d9eea469e0c174fda1b5d006","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Get a SubjectBean object.\n     */\n    public SubjectBean getSubject(\n        TokenProviderParameters providerParameters, Document doc, byte[] secret\n    ) {\n        TokenRequirements tokenRequirements = providerParameters.getTokenRequirements();\n        KeyRequirements keyRequirements = providerParameters.getKeyRequirements();\n        STSPropertiesMBean stsProperties = providerParameters.getStsProperties();\n\n        String tokenType = tokenRequirements.getTokenType();\n        String keyType = keyRequirements.getKeyType();\n        String confirmationMethod = getSubjectConfirmationMethod(tokenType, keyType);\n        \n        Principal principal = null;\n        ReceivedToken receivedToken = null;\n        //[TODO] ActAs support\n        //TokenValidator in IssueOperation has validated the ReceivedToken\n        //if validation was successful, the principal was set in ReceivedToken \n        if (providerParameters.getTokenRequirements().getOnBehalfOf() != null) {\n            receivedToken = providerParameters.getTokenRequirements().getOnBehalfOf();    \n            if (receivedToken.getState().equals(STATE.VALID)) {\n                principal = receivedToken.getPrincipal();\n            }\n        } else if (providerParameters.getTokenRequirements().getValidateTarget() != null) {\n            receivedToken = providerParameters.getTokenRequirements().getValidateTarget();\n            if (receivedToken.getState().equals(STATE.VALID)) {\n                principal = receivedToken.getPrincipal();\n            }\n        } else {\n            principal = providerParameters.getPrincipal();\n        }\n        \n        if (principal == null) {\n            LOG.fine(\"Error in getting principal\");\n            throw new STSException(\"Error in getting principal\", STSException.REQUEST_FAILED);\n        }\n        \n        SubjectBean subjectBean = \n            new SubjectBean(principal.getName(), subjectNameQualifier, confirmationMethod);\n        LOG.fine(\"Creating new subject with principal name: \" + principal.getName());\n        if (subjectNameIDFormat != null && subjectNameIDFormat.length() > 0) {\n            subjectBean.setSubjectNameIDFormat(subjectNameIDFormat);\n        }\n        \n        if (STSConstants.SYMMETRIC_KEY_KEYTYPE.equals(keyType)) {\n            Crypto crypto = stsProperties.getEncryptionCrypto();\n            CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n            EncryptionProperties encryptionProperties = providerParameters.getEncryptionProperties();\n            String encryptionName = encryptionProperties.getEncryptionName();\n            if (encryptionName == null) {\n                // Fall back on the STS encryption name\n                encryptionName = stsProperties.getEncryptionUsername();\n            }\n            if (encryptionName == null) {\n                LOG.fine(\"No encryption Name is configured for Symmetric KeyType\");\n                throw new STSException(\"No Encryption Name is configured\", STSException.REQUEST_FAILED);\n            }\n            cryptoType.setAlias(encryptionName);\n            try {\n                X509Certificate certificate = crypto.getX509Certificates(cryptoType)[0];\n                KeyInfoBean keyInfo = \n                    createKeyInfo(certificate, secret, doc, encryptionProperties, crypto);\n                subjectBean.setKeyInfo(keyInfo);\n            } catch (WSSecurityException ex) {\n                LOG.log(Level.WARNING, \"\", ex);\n                throw new STSException(ex.getMessage(), ex);\n            }\n        } else if (STSConstants.PUBLIC_KEY_KEYTYPE.equals(keyType)) {\n            ReceivedKey receivedKey = keyRequirements.getReceivedKey();\n            KeyInfoBean keyInfo = createKeyInfo(receivedKey.getX509Cert(), receivedKey.getPublicKey());\n            subjectBean.setKeyInfo(keyInfo);\n        }\n        \n        return subjectBean;\n    }","id":12835,"modified_method":"/**\n     * Get a SubjectBean object.\n     */\n    public SubjectBean getSubject(\n        TokenProviderParameters providerParameters, Document doc, byte[] secret\n    ) {\n        TokenRequirements tokenRequirements = providerParameters.getTokenRequirements();\n        KeyRequirements keyRequirements = providerParameters.getKeyRequirements();\n        STSPropertiesMBean stsProperties = providerParameters.getStsProperties();\n\n        String tokenType = tokenRequirements.getTokenType();\n        String keyType = keyRequirements.getKeyType();\n        String confirmationMethod = getSubjectConfirmationMethod(tokenType, keyType);\n        \n        Principal principal = null;\n        ReceivedToken receivedToken = null;\n        //[TODO] ActAs support\n        //TokenValidator in IssueOperation has validated the ReceivedToken\n        //if validation was successful, the principal was set in ReceivedToken \n        if (providerParameters.getTokenRequirements().getOnBehalfOf() != null) {\n            receivedToken = providerParameters.getTokenRequirements().getOnBehalfOf();    \n            if (receivedToken.getState().equals(STATE.VALID)) {\n                principal = receivedToken.getPrincipal();\n            }\n        } else if (providerParameters.getTokenRequirements().getValidateTarget() != null) {\n            receivedToken = providerParameters.getTokenRequirements().getValidateTarget();\n            if (receivedToken.getState().equals(STATE.VALID)) {\n                principal = receivedToken.getPrincipal();\n            }\n        } else {\n            principal = providerParameters.getPrincipal();\n        }\n        \n        if (principal == null) {\n            LOG.fine(\"Error in getting principal\");\n            throw new STSException(\"Error in getting principal\", STSException.REQUEST_FAILED);\n        }\n        \n        SubjectBean subjectBean = \n            new SubjectBean(principal.getName(), subjectNameQualifier, confirmationMethod);\n        LOG.fine(\"Creating new subject with principal name: \" + principal.getName());\n        if (subjectNameIDFormat != null && subjectNameIDFormat.length() > 0) {\n            subjectBean.setSubjectNameIDFormat(subjectNameIDFormat);\n        }\n        \n        if (STSConstants.SYMMETRIC_KEY_KEYTYPE.equals(keyType)) {\n            Crypto crypto = stsProperties.getEncryptionCrypto();\n            CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n            EncryptionProperties encryptionProperties = providerParameters.getEncryptionProperties();\n            String encryptionName = encryptionProperties.getEncryptionName();\n            if (encryptionName == null) {\n                // Fall back on the STS encryption name\n                encryptionName = stsProperties.getEncryptionUsername();\n            }\n            if (encryptionName == null) {\n                LOG.fine(\"No encryption Name is configured for Symmetric KeyType\");\n                throw new STSException(\"No Encryption Name is configured\", STSException.REQUEST_FAILED);\n            }\n            cryptoType.setAlias(encryptionName);\n            try {\n                X509Certificate[] certs = crypto.getX509Certificates(cryptoType);\n                if (certs == null || certs.length <= 0) {\n                    new STSException(\"Encryption certificate is not found for alias: \" + encryptionName,\n                                     STSException.REQUEST_FAILED);\n                }\n                KeyInfoBean keyInfo = \n                    createKeyInfo(certs[0], secret, doc, encryptionProperties, crypto);\n                subjectBean.setKeyInfo(keyInfo);\n            } catch (WSSecurityException ex) {\n                LOG.log(Level.WARNING, \"\", ex);\n                throw new STSException(ex.getMessage(), ex);\n            }\n        } else if (STSConstants.PUBLIC_KEY_KEYTYPE.equals(keyType)) {\n            ReceivedKey receivedKey = keyRequirements.getReceivedKey();\n            KeyInfoBean keyInfo = createKeyInfo(receivedKey.getX509Cert(), receivedKey.getPublicKey());\n            subjectBean.setKeyInfo(keyInfo);\n        }\n        \n        return subjectBean;\n    }","commit_id":"d99659bbd619488a3224f210c49a652c1053b3b1","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Get a SubjectBean object.\n     */\n    public SubjectBean getSubject(\n        TokenProviderParameters providerParameters, Document doc, byte[] secret\n    ) {\n        TokenRequirements tokenRequirements = providerParameters.getTokenRequirements();\n        KeyRequirements keyRequirements = providerParameters.getKeyRequirements();\n        STSPropertiesMBean stsProperties = providerParameters.getStsProperties();\n\n        String tokenType = tokenRequirements.getTokenType();\n        String keyType = keyRequirements.getKeyType();\n        String confirmationMethod = getSubjectConfirmationMethod(tokenType, keyType);\n        \n        Principal principal = null;\n        ReceivedToken receivedToken = null;\n        //[TODO] ActAs support\n        //TokenValidator in IssueOperation has validated the ReceivedToken\n        //if validation was successful, the principal was set in ReceivedToken \n        if (providerParameters.getTokenRequirements().getOnBehalfOf() != null) {\n            receivedToken = providerParameters.getTokenRequirements().getOnBehalfOf();    \n            if (receivedToken.getState().equals(STATE.VALID)) {\n                principal = receivedToken.getPrincipal();\n            }\n        } else if (providerParameters.getTokenRequirements().getValidateTarget() != null) {\n            receivedToken = providerParameters.getTokenRequirements().getValidateTarget();\n            if (receivedToken.getState().equals(STATE.VALID)) {\n                principal = receivedToken.getPrincipal();\n            }\n        } else {\n            principal = providerParameters.getPrincipal();\n        }\n        \n        if (principal == null) {\n            LOG.fine(\"Error in getting principal\");\n            throw new STSException(\"Error in getting principal\", STSException.REQUEST_FAILED);\n        }\n        \n        SubjectBean subjectBean = \n            new SubjectBean(principal.getName(), subjectNameQualifier, confirmationMethod);\n        LOG.fine(\"Creating new subject with principal name: \" + principal.getName());\n        if (subjectNameIDFormat != null && subjectNameIDFormat.length() > 0) {\n            subjectBean.setSubjectNameIDFormat(subjectNameIDFormat);\n        }\n        \n        if (STSConstants.SYMMETRIC_KEY_KEYTYPE.equals(keyType)) {\n            Crypto crypto = stsProperties.getEncryptionCrypto();\n            CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n            EncryptionProperties encryptionProperties = providerParameters.getEncryptionProperties();\n            String encryptionName = encryptionProperties.getEncryptionName();\n            if (encryptionName == null) {\n                // Fall back on the STS encryption name\n                encryptionName = stsProperties.getEncryptionUsername();\n            }\n            if (encryptionName == null) {\n                LOG.fine(\"No encryption Name is configured for Symmetric KeyType\");\n                throw new STSException(\"No Encryption Name is configured\", STSException.REQUEST_FAILED);\n            }\n            cryptoType.setAlias(encryptionName);\n            try {\n                X509Certificate certificate = crypto.getX509Certificates(cryptoType)[0];\n                KeyInfoBean keyInfo = \n                    createKeyInfo(certificate, secret, doc, encryptionProperties, crypto);\n                subjectBean.setKeyInfo(keyInfo);\n            } catch (WSSecurityException ex) {\n                LOG.log(Level.WARNING, \"\", ex);\n                throw new STSException(ex.getMessage(), ex);\n            }\n        } else if (STSConstants.PUBLIC_KEY_KEYTYPE.equals(keyType)) {\n            ReceivedKey receivedKey = keyRequirements.getReceivedKey();\n            KeyInfoBean keyInfo = createKeyInfo(receivedKey.getX509Cert(), receivedKey.getPublicKey());\n            subjectBean.setKeyInfo(keyInfo);\n        }\n        \n        return subjectBean;\n    }","id":12836,"modified_method":"/**\n     * Get a SubjectBean object.\n     */\n    public SubjectBean getSubject(\n        TokenProviderParameters providerParameters, Document doc, byte[] secret\n    ) {\n        TokenRequirements tokenRequirements = providerParameters.getTokenRequirements();\n        KeyRequirements keyRequirements = providerParameters.getKeyRequirements();\n        STSPropertiesMBean stsProperties = providerParameters.getStsProperties();\n\n        String tokenType = tokenRequirements.getTokenType();\n        String keyType = keyRequirements.getKeyType();\n        String confirmationMethod = getSubjectConfirmationMethod(tokenType, keyType);\n        \n        Principal principal = null;\n        ReceivedToken receivedToken = null;\n        //[TODO] ActAs support\n        //TokenValidator in IssueOperation has validated the ReceivedToken\n        //if validation was successful, the principal was set in ReceivedToken \n        if (providerParameters.getTokenRequirements().getOnBehalfOf() != null) {\n            receivedToken = providerParameters.getTokenRequirements().getOnBehalfOf();    \n            if (receivedToken.getState().equals(STATE.VALID)) {\n                principal = receivedToken.getPrincipal();\n            }\n        } else if (providerParameters.getTokenRequirements().getValidateTarget() != null) {\n            receivedToken = providerParameters.getTokenRequirements().getValidateTarget();\n            if (receivedToken.getState().equals(STATE.VALID)) {\n                principal = receivedToken.getPrincipal();\n            }\n        } else {\n            principal = providerParameters.getPrincipal();\n        }\n        \n        if (principal == null) {\n            LOG.fine(\"Error in getting principal\");\n            throw new STSException(\"Error in getting principal\", STSException.REQUEST_FAILED);\n        }\n        \n        SubjectBean subjectBean = \n            new SubjectBean(principal.getName(), subjectNameQualifier, confirmationMethod);\n        LOG.fine(\"Creating new subject with principal name: \" + principal.getName());\n        if (subjectNameIDFormat != null && subjectNameIDFormat.length() > 0) {\n            subjectBean.setSubjectNameIDFormat(subjectNameIDFormat);\n        }\n        \n        if (STSConstants.SYMMETRIC_KEY_KEYTYPE.equals(keyType)) {\n            Crypto crypto = stsProperties.getEncryptionCrypto();\n            CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n            EncryptionProperties encryptionProperties = providerParameters.getEncryptionProperties();\n            String encryptionName = encryptionProperties.getEncryptionName();\n            if (encryptionName == null) {\n                // Fall back on the STS encryption name\n                encryptionName = stsProperties.getEncryptionUsername();\n            }\n            if (encryptionName == null) {\n                LOG.fine(\"No encryption Name is configured for Symmetric KeyType\");\n                throw new STSException(\"No Encryption Name is configured\", STSException.REQUEST_FAILED);\n            }\n            cryptoType.setAlias(encryptionName);\n            try {\n                X509Certificate[] certs = crypto.getX509Certificates(cryptoType);\n                if (certs == null || certs.length <= 0) {\n                    new STSException(\"Encryption certificate is not found for alias: \" + encryptionName,\n                                     STSException.REQUEST_FAILED);\n                }\n                KeyInfoBean keyInfo = \n                    createKeyInfo(certs[0], secret, doc, encryptionProperties, crypto);\n                subjectBean.setKeyInfo(keyInfo);\n            } catch (WSSecurityException ex) {\n                LOG.log(Level.WARNING, \"\", ex);\n                throw new STSException(ex.getMessage(), ex);\n            }\n        } else if (STSConstants.PUBLIC_KEY_KEYTYPE.equals(keyType)) {\n            ReceivedKey receivedKey = keyRequirements.getReceivedKey();\n            KeyInfoBean keyInfo = createKeyInfo(receivedKey.getX509Cert(), receivedKey.getPublicKey());\n            subjectBean.setKeyInfo(keyInfo);\n        }\n        \n        return subjectBean;\n    }","commit_id":"0a95718186dce28d7be6bd2367de9f9fa072a33b","url":"https://github.com/apache/cxf"},{"original_method":"private static String chompLeadingDot(String str) {\n        if (str.startsWith(\".\")) {\n            return str.substring(1);\n        } else {\n            return str;\n        }\n    }","id":12837,"modified_method":"private static String chompLeadingDot(String str) {\n        if (str.startsWith(\".\")) {\n            return str.substring(1);\n        }\n        return str;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * IANA-defined infrastructure top-level domain. Leading dots are\n     * ignored if present. The search is case-sensitive.\n     * @param iTld the parameter to check for infrastructure TLD status\n     * @return true if the parameter is an infrastructure TLD\n     */\n    public boolean isValidInfrastructureTld(String iTld) {\n        return Arrays.binarySearch(INFRASTRUCTURE_TLDS, chompLeadingDot(iTld.toLowerCase(Locale.ENGLISH))) >= 0;\n    }","id":12838,"modified_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * IANA-defined infrastructure top-level domain. Leading dots are\n     * ignored if present. The search is case-insensitive.\n     * @param iTld the parameter to check for infrastructure TLD status, not null\n     * @return true if the parameter is an infrastructure TLD\n     */\n    public boolean isValidInfrastructureTld(String iTld) {\n        final String key = chompLeadingDot(unicodeToASCII(iTld).toLowerCase(Locale.ENGLISH));\n        return arrayContains(INFRASTRUCTURE_TLDS, key);\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns the singleton instance of this validator,\n     *  with local validation as required.\n     * @param allowLocal Should local addresses be considered valid?\n     * @return the singleton instance of this validator\n     */\n    public static DomainValidator getInstance(boolean allowLocal) {\n       if (allowLocal) {\n          return DOMAIN_VALIDATOR_WITH_LOCAL;\n       }\n       return DOMAIN_VALIDATOR;\n    }","id":12839,"modified_method":"/**\n     * Returns the singleton instance of this validator,\n     *  with local validation as required.\n     * @param allowLocal Should local addresses be considered valid?\n     * @return the singleton instance of this validator\n     */\n    public static synchronized DomainValidator getInstance(boolean allowLocal) {\n        inUse = true;\n        if (allowLocal) {\n            return DOMAIN_VALIDATOR_WITH_LOCAL;\n        }\n        return DOMAIN_VALIDATOR;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * IANA-defined top-level domain. Leading dots are ignored if present.\n     * The search is case-sensitive.\n     * @param tld the parameter to check for TLD status\n     * @return true if the parameter is a TLD\n     */\n    public boolean isValidTld(String tld) {\n        if (allowLocal && isValidLocalTld(tld)) {\n           return true;\n        }\n        return isValidInfrastructureTld(tld)\n                || isValidGenericTld(tld)\n                || isValidIdnTld(tld)\n                || isValidCountryCodeTld(tld);\n    }","id":12840,"modified_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * IANA-defined top-level domain. Leading dots are ignored if present.\n     * The search is case-insensitive.\n     * @param tld the parameter to check for TLD status, not null\n     * @return true if the parameter is a TLD\n     */\n    public boolean isValidTld(String tld) {\n        tld = unicodeToASCII(tld);\n        if (allowLocal && isValidLocalTld(tld)) {\n            return true;\n        }\n        return isValidInfrastructureTld(tld)\n                || isValidGenericTld(tld)\n                || isValidCountryCodeTld(tld);\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the specified <code>String<\/code> parses\n     * as a valid domain name with a recognized top-level domain.\n     * The parsing is case-sensitive.\n     * @param domain the parameter to check for domain name syntax\n     * @return true if the parameter is a valid domain name\n     */\n    @Override\n    public boolean isValid(String domain) {\n        String[] groups = domainRegex.match(domain);\n        if (groups != null && groups.length > 0) {\n            return isValidTld(groups[0]);\n        } else if (allowLocal) {\n            if (hostnameRegex.isValid(domain)) {\n               return true;\n            }\n        }\n        return false;\n    }","id":12841,"modified_method":"/**\n     * Returns true if the specified <code>String<\/code> parses\n     * as a valid domain name with a recognized top-level domain.\n     * The parsing is case-insensitive.\n     * @param domain the parameter to check for domain name syntax\n     * @return true if the parameter is a valid domain name\n     */\n    @Override\n    public boolean isValid(String domain) {\n        if (domain == null) {\n            return false;\n        }\n        domain = unicodeToASCII(domain);\n        // hosts must be equally reachable via punycode and Unicode\n        // Unicode is never shorter than punycode, so check punycode\n        // if domain did not convert, then it will be caught by ASCII\n        // checks in the regexes below\n        if (domain.length() > MAX_DOMAIN_LENGTH) {\n            return false;\n        }\n        String[] groups = domainRegex.match(domain);\n        if (groups != null && groups.length > 0) {\n            return isValidTld(groups[0]);\n        }\n        return allowLocal && hostnameRegex.isValid(domain);\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns the singleton instance of this validator. It\n     *  will not consider local addresses as valid.\n     * @return the singleton instance of this validator\n     */\n    public static DomainValidator getInstance() {\n        return DOMAIN_VALIDATOR;\n    }","id":12842,"modified_method":"/**\n     * Returns the singleton instance of this validator. It\n     *  will not consider local addresses as valid.\n     * @return the singleton instance of this validator\n     */\n    public static synchronized DomainValidator getInstance() {\n        inUse = true;\n        return DOMAIN_VALIDATOR;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * IANA-defined country code top-level domain. Leading dots are\n     * ignored if present. The search is case-sensitive.\n     * @param ccTld the parameter to check for country code TLD status\n     * @return true if the parameter is a country code TLD\n     */\n    public boolean isValidCountryCodeTld(String ccTld) {\n        return Arrays.binarySearch(COUNTRY_CODE_TLDS, chompLeadingDot(ccTld.toLowerCase(Locale.ENGLISH))) >= 0;\n    }","id":12843,"modified_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * IANA-defined country code top-level domain. Leading dots are\n     * ignored if present. The search is case-insensitive.\n     * @param ccTld the parameter to check for country code TLD status, not null\n     * @return true if the parameter is a country code TLD\n     */\n    public boolean isValidCountryCodeTld(String ccTld) {\n        final String key = chompLeadingDot(unicodeToASCII(ccTld).toLowerCase(Locale.ENGLISH));\n        return (arrayContains(COUNTRY_CODE_TLDS, key) || arrayContains(countryCodeTLDsPlus, key))\n                && !arrayContains(countryCodeTLDsMinus, key);\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * IANA-defined generic top-level domain. Leading dots are ignored\n     * if present. The search is case-sensitive.\n     * @param gTld the parameter to check for generic TLD status\n     * @return true if the parameter is a generic TLD\n     */\n    public boolean isValidGenericTld(String gTld) {\n        return Arrays.binarySearch(GENERIC_TLDS, chompLeadingDot(gTld.toLowerCase(Locale.ENGLISH))) >= 0;\n    }","id":12844,"modified_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * IANA-defined generic top-level domain. Leading dots are ignored\n     * if present. The search is case-insensitive.\n     * @param gTld the parameter to check for generic TLD status, not null\n     * @return true if the parameter is a generic TLD\n     */\n    public boolean isValidGenericTld(String gTld) {\n        final String key = chompLeadingDot(unicodeToASCII(gTld).toLowerCase(Locale.ENGLISH));\n        return (arrayContains(GENERIC_TLDS, key) || arrayContains(genericTLDsPlus, key))\n                && !arrayContains(genericTLDsMinus, key);\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * widely used \"local\" domains (localhost or localdomain). Leading dots are\n     *  ignored if present. The search is case-sensitive.\n     * @param iTld the parameter to check for local TLD status\n     * @return true if the parameter is an local TLD\n     */\n    public boolean isValidLocalTld(String iTld) {\n        return Arrays.binarySearch(LOCAL_TLDS, chompLeadingDot(iTld.toLowerCase(Locale.ENGLISH))) >= 0;\n    }","id":12845,"modified_method":"/**\n     * Returns true if the specified <code>String<\/code> matches any\n     * widely used \"local\" domains (localhost or localdomain). Leading dots are\n     * ignored if present. The search is case-insensitive.\n     * @param lTld the parameter to check for local TLD status, not null\n     * @return true if the parameter is an local TLD\n     */\n    public boolean isValidLocalTld(String lTld) {\n        final String key = chompLeadingDot(unicodeToASCII(lTld).toLowerCase(Locale.ENGLISH));\n        return arrayContains(LOCAL_TLDS, key);\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the user component of an email address is valid.\n     *\n     * @param user being validated\n     * @return true if the user name is valid.\n     */\n    protected boolean isValidUser(String user) {\n        return USER_PATTERN.matcher(user).matches();\n    }","id":12846,"modified_method":"/**\n     * Returns true if the user component of an email address is valid.\n     *\n     * @param user being validated\n     * @return true if the user name is valid.\n     */\n    protected boolean isValidUser(String user) {\n\n        if (user == null || user.length() > MAX_USERNAME_LEN) {\n            return false;\n        }\n\n        return USER_PATTERN.matcher(user).matches();\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * <p>Checks if a field has a valid e-mail address.<\/p>\n     *\n     * @param email The value validation is being performed on.  A <code>null<\/code>\n     *              value is considered invalid.\n     * @return true if the email address is valid.\n     */\n    @Override\n    public boolean isValid(String email) {\n        if (email == null) {\n            return false;\n        }\n\n        Matcher asciiMatcher = MATCH_ASCII_PATTERN.matcher(email);\n        if (!asciiMatcher.matches()) {\n            setErrorMessage(tr(\"E-mail address contains non-ascii characters\"));\n            setFix(email.replaceAll(\"[^\\\\p{ASCII}]+\", \"\"));\n            return false;\n        }\n\n        // Check the whole email address structure\n        Matcher emailMatcher = EMAIL_PATTERN.matcher(email);\n        if (!emailMatcher.matches()) {\n            setErrorMessage(tr(\"E-mail address is invalid\"));\n            return false;\n        }\n\n        if (email.endsWith(\".\")) {\n            setErrorMessage(tr(\"E-mail address is invalid\"));\n            return false;\n        }\n\n        String username = emailMatcher.group(1);\n        if (!isValidUser(username)) {\n            setErrorMessage(tr(\"E-mail address contains an invalid username: {0}\", username));\n            return false;\n        }\n\n        String domain = emailMatcher.group(2);\n        if (!isValidDomain(domain)) {\n            setErrorMessage(tr(\"E-mail address contains an invalid domain: {0}\", domain));\n            return false;\n        }\n\n        return true;\n    }","id":12847,"modified_method":"/**\n     * <p>Checks if a field has a valid e-mail address.<\/p>\n     *\n     * @param email The value validation is being performed on.  A <code>null<\/code>\n     *              value is considered invalid.\n     * @return true if the email address is valid.\n     */\n    @Override\n    public boolean isValid(String email) {\n        if (email == null) {\n            return false;\n        }\n\n        if (email.endsWith(\".\")) { // check this first - it's cheap!\n            setErrorMessage(tr(\"E-mail address is invalid\"));\n            return false;\n        }\n\n        // Check the whole email address structure\n        Matcher emailMatcher = EMAIL_PATTERN.matcher(email);\n        if (!emailMatcher.matches()) {\n            setErrorMessage(tr(\"E-mail address is invalid\"));\n            return false;\n        }\n\n        String username = emailMatcher.group(1);\n        if (!isValidUser(username)) {\n            setErrorMessage(tr(\"E-mail address contains an invalid username: {0}\", username));\n            return false;\n        }\n\n        String domain = emailMatcher.group(2);\n        if (!isValidDomain(domain)) {\n            setErrorMessage(tr(\"E-mail address contains an invalid domain: {0}\", domain));\n            return false;\n        }\n\n        return true;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the domain component of an email address is valid.\n     *\n     * @param domain being validated.\n     * @return true if the email address's domain is valid.\n     */\n    protected boolean isValidDomain(String domain) {\n        // see if domain is an IP address in brackets\n        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);\n\n        if (ipDomainMatcher.matches()) {\n            InetAddressValidator inetAddressValidator =\n                    InetAddressValidator.getInstance();\n            return inetAddressValidator.isValid(ipDomainMatcher.group(1));\n        } else {\n            // Domain is symbolic name\n            DomainValidator domainValidator =\n                    DomainValidator.getInstance(allowLocal);\n            return domainValidator.isValid(domain) ||\n                    domainValidator.isValidTld(domain);\n        }\n    }","id":12848,"modified_method":"/**\n     * Returns true if the domain component of an email address is valid.\n     *\n     * @param domain being validated, may be in IDN format\n     * @return true if the email address's domain is valid.\n     */\n    protected boolean isValidDomain(String domain) {\n        // see if domain is an IP address in brackets\n        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);\n\n        if (ipDomainMatcher.matches()) {\n            InetAddressValidator inetAddressValidator =\n                    InetAddressValidator.getInstance();\n            return inetAddressValidator.isValid(ipDomainMatcher.group(1));\n        }\n        // Domain is symbolic name\n        DomainValidator domainValidator =\n                DomainValidator.getInstance(allowLocal);\n        if (allowTld) {\n            return domainValidator.isValid(domain) || (!domain.startsWith(\".\") && domainValidator.isValidTld(domain));\n        } else {\n            return domainValidator.isValid(domain);\n        }\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns the Singleton instance of this validator,\n     *  with local validation as required.\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     * @return singleton instance of this validator\n     */\n    public static EmailValidator getInstance(boolean allowLocal) {\n        if (allowLocal) {\n           return EMAIL_VALIDATOR_WITH_LOCAL;\n        }\n        return EMAIL_VALIDATOR;\n    }","id":12849,"modified_method":"/**\n     * Returns the Singleton instance of this validator,\n     *  with local validation as required.\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     * @return singleton instance of this validator\n     */\n    public static EmailValidator getInstance(boolean allowLocal) {\n        return getInstance(allowLocal, false);\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Protected constructor for subclasses to use.\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     */\n    protected EmailValidator(boolean allowLocal) {\n        super();\n        this.allowLocal = allowLocal;\n    }","id":12850,"modified_method":"/**\n     * Protected constructor for subclasses to use.\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     */\n    protected EmailValidator(boolean allowLocal) {\n        super();\n        this.allowLocal = allowLocal;\n        this.allowTld = false;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Validates an IPv4 address. Returns true if valid.\n     * @param inet4Address the IPv4 address to validate\n     * @return true if the argument contains a valid IPv4 address\n     */\n    public boolean isValidInet4Address(String inet4Address) {\n        // verify that address conforms to generic IPv4 format\n        String[] groups = ipv4Validator.match(inet4Address);\n\n        if (groups == null) return false;\n\n        // verify that address subgroups are legal\n        for (int i = 0; i <= 3; i++) {\n            String ipSegment = groups[i];\n            if (ipSegment == null || ipSegment.isEmpty()) {\n                return false;\n            }\n\n            int iIpSegment = 0;\n\n            try {\n                iIpSegment = Integer.parseInt(ipSegment);\n            } catch (NumberFormatException e) {\n                return false;\n            }\n\n            if (iIpSegment > 255) {\n                return false;\n            }\n\n        }\n\n        return true;\n    }","id":12851,"modified_method":"/**\n     * Validates an IPv4 address. Returns true if valid.\n     * @param inet4Address the IPv4 address to validate\n     * @return true if the argument contains a valid IPv4 address\n     */\n    public boolean isValidInet4Address(String inet4Address) {\n        // verify that address conforms to generic IPv4 format\n        String[] groups = ipv4Validator.match(inet4Address);\n\n        if (groups == null) {\n            return false;\n        }\n\n        // verify that address subgroups are legal\n        for (String ipSegment : groups) {\n            if (ipSegment == null || ipSegment.isEmpty()) {\n                return false;\n            }\n\n            int iIpSegment = 0;\n\n            try {\n                iIpSegment = Integer.parseInt(ipSegment);\n            } catch (NumberFormatException e) {\n                return false;\n            }\n\n            if (iIpSegment > IPV4_MAX_OCTET_VALUE) {\n                return false;\n            }\n\n            if (ipSegment.length() > 1 && ipSegment.startsWith(\"0\")) {\n                return false;\n            }\n\n        }\n\n        return true;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Checks if the specified string is a valid IP address.\n     * @param inetAddress the string to validate\n     * @return true if the string validates as an IP address\n     */\n    @Override\n    public boolean isValid(String inetAddress) {\n        return isValidInet4Address(inetAddress);\n    }","id":12852,"modified_method":"/**\n     * Checks if the specified string is a valid IP address.\n     * @param inetAddress the string to validate\n     * @return true if the string validates as an IP address\n     */\n    @Override\n    public boolean isValid(String inetAddress) {\n        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Tests whether the given flag is off.  If the flag is not a power of 2\n     * (ie. 3) this tests whether the combination of flags is off.\n     *\n     * @param flag Flag value to check.\n     *\n     * @return whether the specified flag value is off.\n     */\n    private boolean isOff(long flag) {\n        return (this.options & flag) == 0;\n    }","id":12853,"modified_method":"/**\n     * Tests whether the given flag is off.  If the flag is not a power of 2\n     * (ie. 3) this tests whether the combination of flags is off.\n     *\n     * @param flag Flag value to check.\n     *\n     * @return whether the specified flag value is off.\n     */\n    private boolean isOff(long flag) {\n        return (options & flag) == 0;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the path is valid.  A <code>null<\/code> value is considered invalid.\n     * @param path Path value to validate.\n     * @return true if path is valid.\n     */\n    protected boolean isValidPath(String path) {\n        if (path == null) {\n            return false;\n        }\n\n        if (!PATH_PATTERN.matcher(path).matches()) {\n            return false;\n        }\n\n        int slash2Count = countToken(\"//\", path);\n        if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {\n            return false;\n        }\n\n        int slashCount = countToken(\"/\", path);\n        int dot2Count = countToken(\"..\", path);\n        if (dot2Count > 0) {\n            if ((slashCount - slash2Count - 1) <= dot2Count) {\n                return false;\n            }\n        }\n\n        return true;\n    }","id":12854,"modified_method":"/**\n     * Returns true if the path is valid.  A <code>null<\/code> value is considered invalid.\n     * @param path Path value to validate.\n     * @return true if path is valid.\n     */\n    protected boolean isValidPath(String path) {\n        if (path == null) {\n            return false;\n        }\n\n        if (!PATH_PATTERN.matcher(path).matches()) {\n            return false;\n        }\n\n        try {\n            URI uri = new URI(null, null, path, null);\n            String norm = uri.normalize().getPath();\n            if (norm.startsWith(\"/../\") // Trying to go via the parent dir\n             || norm.equals(\"/..\")) {   // Trying to go to the parent dir\n                return false;\n            }\n        } catch (URISyntaxException e) {\n            return false;\n        }\n\n        int slash2Count = countToken(\"//\", path);\n        if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {\n            return false;\n        }\n\n        return true;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Tests whether the given flag is on.  If the flag is not a power of 2\n     * (ie. 3) this tests whether the combination of flags is on.\n     *\n     * @param flag Flag value to check.\n     *\n     * @return whether the specified flag value is on.\n     */\n    private boolean isOn(long flag) {\n        return (this.options & flag) > 0;\n    }","id":12855,"modified_method":"/**\n     * Tests whether the given flag is on.  If the flag is not a power of 2\n     * (ie. 3) this tests whether the combination of flags is on.\n     *\n     * @param flag Flag value to check.\n     *\n     * @return whether the specified flag value is on.\n     */\n    private boolean isOn(long flag) {\n        return (options & flag) > 0;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns true if the authority is properly formatted.  An authority is the combination\n     * of hostname and port.  A <code>null<\/code> authority value is considered invalid.\n     * @param authority Authority value to validate.\n     * @return true if authority (hostname and port) is valid.\n     */\n    protected boolean isValidAuthority(String authority) {\n        if (authority == null) {\n            return false;\n        }\n\n        // check manual authority validation if specified\n        if (authorityValidator != null) {\n            if (authorityValidator.isValid(authority)) {\n                return true;\n            }\n        }\n\n        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authority);\n        if (!authorityMatcher.matches()) {\n            return false;\n        }\n\n        String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);\n        // check if authority is hostname or IP address:\n        // try a hostname first since that's much more likely\n        DomainValidator domainValidator = DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));\n        if (!domainValidator.isValid(hostLocation)) {\n            // try an IP address\n            InetAddressValidator inetAddressValidator =\n                InetAddressValidator.getInstance();\n            if (!inetAddressValidator.isValid(hostLocation)) {\n                // isn't either one, so the URL is invalid\n                return false;\n            }\n        }\n\n        String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);\n        if (port != null) {\n            if (!PORT_PATTERN.matcher(port).matches()) {\n                return false;\n            }\n        }\n\n        String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);\n        if (extra != null && !extra.trim().isEmpty()) {\n            return false;\n        }\n\n        return true;\n    }","id":12856,"modified_method":"/**\n     * Returns true if the authority is properly formatted.  An authority is the combination\n     * of hostname and port.  A <code>null<\/code> authority value is considered invalid.\n     * Note: this implementation validates the domain unless a RegexValidator was provided.\n     * If a RegexValidator was supplied and it matches, then the authority is regarded\n     * as valid with no further checks, otherwise the method checks against the\n     * AUTHORITY_PATTERN and the DomainValidator (ALLOW_LOCAL_URLS)\n     * @param authority Authority value to validate, alllows IDN\n     * @return true if authority (hostname and port) is valid.\n     */\n    protected boolean isValidAuthority(String authority) {\n        if (authority == null) {\n            return false;\n        }\n\n        // check manual authority validation if specified\n        if (authorityValidator != null && authorityValidator.isValid(authority)) {\n            return true;\n        }\n        // convert to ASCII if possible\n        final String authorityASCII = DomainValidator.unicodeToASCII(authority);\n\n        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);\n        if (!authorityMatcher.matches()) {\n            return false;\n        }\n\n        // We have to process IPV6 separately because that is parsed in a different group\n        String ipv6 = authorityMatcher.group(PARSE_AUTHORITY_IPV6);\n        if (ipv6 != null) {\n            InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();\n                if (!inetAddressValidator.isValidInet6Address(ipv6)) {\n                    return false;\n                }\n        } else {\n            String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);\n            // check if authority is hostname or IP address:\n            // try a hostname first since that's much more likely\n            DomainValidator domainValidator = DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));\n            if (!domainValidator.isValid(hostLocation)) {\n                // try an IPv4 address\n                InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();\n                if (!inetAddressValidator.isValidInet4Address(hostLocation)) {\n                    // isn't IPv4, so the URL is invalid\n                    return false;\n                }\n            }\n        }\n\n        String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);\n        if (extra != null && !extra.trim().isEmpty()) {\n            return false;\n        }\n\n        return true;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * <p>Checks if a field has a valid url address.<\/p>\n     *\n     * @param value The value validation is being performed on.  A <code>null<\/code>\n     * value is considered invalid.\n     * @return true if the url is valid.\n     */\n    @Override\n    public boolean isValid(String value) {\n        if (value == null) {\n            return false;\n        }\n\n        if (!ASCII_PATTERN.matcher(value).matches()) {\n            setErrorMessage(tr(\"URL contains non-ascii characters\"));\n            setFix(value.replaceAll(\"[^\\\\p{ASCII}]+\", \"\"));\n            return false;\n        }\n\n        // Check the whole url address structure\n        Matcher urlMatcher = URL_PATTERN.matcher(value);\n        if (!urlMatcher.matches()) {\n            setErrorMessage(tr(\"URL is invalid\"));\n            return false;\n        }\n\n        String scheme = urlMatcher.group(PARSE_URL_SCHEME);\n        if (!isValidScheme(scheme)) {\n            setErrorMessage(tr(\"URL contains an invalid protocol: {0}\", scheme));\n            return false;\n        }\n\n        String authority = urlMatcher.group(PARSE_URL_AUTHORITY);\n        if (\"file\".equals(scheme) && \"\".equals(authority)) {\n           // Special case - file: allows an empty authority\n        } else {\n           // Validate the authority\n           if (!isValidAuthority(authority)) {\n               setErrorMessage(tr(\"URL contains an invalid authority: {0}\", authority));\n               return false;\n            }\n        }\n\n        String path = urlMatcher.group(PARSE_URL_PATH);\n        if (!isValidPath(path)) {\n            setErrorMessage(tr(\"URL contains an invalid path: {0}\", path));\n            return false;\n        }\n\n        String query = urlMatcher.group(PARSE_URL_QUERY);\n        if (!isValidQuery(query)) {\n            setErrorMessage(tr(\"URL contains an invalid query: {0}\", query));\n            return false;\n        }\n\n        String fragment = urlMatcher.group(PARSE_URL_FRAGMENT);\n        if (!isValidFragment(fragment)) {\n            setErrorMessage(tr(\"URL contains an invalid fragment: {0}\", fragment));\n            return false;\n        }\n\n        return true;\n    }","id":12857,"modified_method":"/**\n     * <p>Checks if a field has a valid url address.<\/p>\n     *\n     * Note that the method calls #isValidAuthority()\n     * which checks that the domain is valid.\n     *\n     * @param value The value validation is being performed on.  A <code>null<\/code>\n     * value is considered invalid.\n     * @return true if the url is valid.\n     */\n    @Override\n    public boolean isValid(String value) {\n        if (value == null) {\n            return false;\n        }\n\n        // Check the whole url address structure\n        Matcher urlMatcher = URL_PATTERN.matcher(value);\n        if (!urlMatcher.matches()) {\n            setErrorMessage(tr(\"URL is invalid\"));\n            return false;\n        }\n\n        String scheme = urlMatcher.group(PARSE_URL_SCHEME);\n        if (!isValidScheme(scheme)) {\n            setErrorMessage(tr(\"URL contains an invalid protocol: {0}\", scheme));\n            return false;\n        }\n\n        String authority = urlMatcher.group(PARSE_URL_AUTHORITY);\n        if (\"file\".equals(scheme)) { // Special case - file: allows an empty authority\n            if (!\"\".equals(authority)) {\n                if (authority.contains(\":\")) { // but cannot allow trailing :\n                    setErrorMessage(tr(\"URL contains an invalid authority: {0}\", authority));\n                    return false;\n                }\n            }\n            // drop through to continue validation\n        } else { // not file:\n            // Validate the authority\n            if (!isValidAuthority(authority)) {\n                setErrorMessage(tr(\"URL contains an invalid authority: {0}\", authority));\n                return false;\n            }\n        }\n\n        String path = urlMatcher.group(PARSE_URL_PATH);\n        if (!isValidPath(path)) {\n            setErrorMessage(tr(\"URL contains an invalid path: {0}\", path));\n            return false;\n        }\n\n        String query = urlMatcher.group(PARSE_URL_QUERY);\n        if (!isValidQuery(query)) {\n            setErrorMessage(tr(\"URL contains an invalid query: {0}\", query));\n            return false;\n        }\n\n        String fragment = urlMatcher.group(PARSE_URL_FRAGMENT);\n        if (!isValidFragment(fragment)) {\n            setErrorMessage(tr(\"URL contains an invalid fragment: {0}\", fragment));\n            return false;\n        }\n\n        return true;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Validate scheme. If schemes[] was initialized to a non null,\n     * then only those scheme's are allowed.  Note this is slightly different\n     * than for the constructor.\n     * @param scheme The scheme to validate.  A <code>null<\/code> value is considered\n     * invalid.\n     * @return true if valid.\n     */\n    protected boolean isValidScheme(String scheme) {\n        if (scheme == null) {\n            return false;\n        }\n\n        if (!SCHEME_PATTERN.matcher(scheme).matches()) {\n            return false;\n        }\n\n        if (isOff(ALLOW_ALL_SCHEMES)) {\n\n            if (!this.allowedSchemes.contains(scheme)) {\n                return false;\n            }\n        }\n\n        return true;\n    }","id":12858,"modified_method":"/**\n     * Validate scheme. If schemes[] was initialized to a non null,\n     * then only those schemes are allowed.\n     * Otherwise the default schemes are \"http\", \"https\", \"ftp\".\n     * Matching is case-blind.\n     * @param scheme The scheme to validate.  A <code>null<\/code> value is considered\n     * invalid.\n     * @return true if valid.\n     */\n    protected boolean isValidScheme(String scheme) {\n        if (scheme == null) {\n            return false;\n        }\n\n        // TODO could be removed if external schemes were checked in the ctor before being stored\n        if (!SCHEME_PATTERN.matcher(scheme).matches()) {\n            return false;\n        }\n\n        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {\n            return false;\n        }\n\n        return true;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Customizable constructor. Validation behavior is modifed by passing in options.\n     * @param schemes the set of valid schemes\n     * @param authorityValidator Regular expression validator used to validate the authority part\n     * @param options Validation options. Set using the public constants of this class.\n     * To set multiple options, simply add them together:\n     * <p><code>ALLOW_2_SLASHES + NO_FRAGMENTS<\/code><\/p>\n     * enables both of those options.\n     */\n    public UrlValidator(String[] schemes, RegexValidator authorityValidator, long options) {\n        this.options = options;\n\n        if (isOn(ALLOW_ALL_SCHEMES)) {\n            this.allowedSchemes = Collections.emptySet();\n        } else {\n            if (schemes == null) {\n                schemes = DEFAULT_SCHEMES;\n            }\n            this.allowedSchemes = new HashSet<>();\n            this.allowedSchemes.addAll(Arrays.asList(schemes));\n        }\n\n        this.authorityValidator = authorityValidator;\n\n    }","id":12859,"modified_method":"/**\n     * Customizable constructor. Validation behavior is modifed by passing in options.\n     * @param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.\n     * @param authorityValidator Regular expression validator used to validate the authority part\n     * @param options Validation options. Set using the public constants of this class.\n     * To set multiple options, simply add them together:\n     * <p><code>ALLOW_2_SLASHES + NO_FRAGMENTS<\/code><\/p>\n     * enables both of those options.\n     */\n    public UrlValidator(String[] schemes, RegexValidator authorityValidator, long options) {\n        this.options = options;\n\n        if (isOn(ALLOW_ALL_SCHEMES)) {\n            allowedSchemes = Collections.emptySet();\n        } else {\n            if (schemes == null) {\n                schemes = DEFAULT_SCHEMES;\n            }\n            allowedSchemes = new HashSet<>(schemes.length);\n            for (int i = 0; i < schemes.length; i++) {\n                allowedSchemes.add(schemes[i].toLowerCase(Locale.ENGLISH));\n            }\n        }\n\n        this.authorityValidator = authorityValidator;\n    }","commit_id":"0a8977019cfb20b6cce84627c09ec28ee26bf65e","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n\t * Gets whether a resource for a given set of criteria exists.\n\t * \n\t * @param scope\n\t *            This argument will be used to get the class loader for loading the package\n\t *            resource, and to determine what package it is in. Typically this is the class in\n\t *            which you call this method\n\t * @param path\n\t *            The path to the resource\n\t * @param locale\n\t *            The locale of the resource\n\t * @param style\n\t *            The style of the resource (see {@link org.apache.wicket.Session})\n\t * @param variation\n\t *            The component's variation (of the style)\n\t * @return true if a resource could be loaded, false otherwise\n\t */\n\tpublic static boolean exists(final Class<?> scope, final String path, final Locale locale,\n\t\tfinal String style, final String variation)\n\t{\n\t\tString absolutePath = Packages.absolutePath(scope, path);\n\t\treturn Application.get().getResourceSettings().getResourceStreamLocator().locate(scope,\n\t\t\tabsolutePath, style, variation, locale, null) != null;\n\t}","id":12860,"modified_method":"/**\n\t * Gets whether a resource for a given set of criteria exists.\n\t * \n\t * @param scope\n\t *            This argument will be used to get the class loader for loading the package\n\t *            resource, and to determine what package it is in. Typically this is the class in\n\t *            which you call this method\n\t * @param path\n\t *            The path to the resource\n\t * @param locale\n\t *            The locale of the resource\n\t * @param style\n\t *            The style of the resource (see {@link org.apache.wicket.Session})\n\t * @param variation\n\t *            The component's variation (of the style)\n\t * @return true if a resource could be loaded, false otherwise\n\t */\n\tpublic static boolean exists(final Class<?> scope, final String path, final Locale locale,\n\t\tfinal String style, final String variation)\n\t{\n\t\tString absolutePath = Packages.absolutePath(scope, path);\n\t\treturn ThreadContext.getApplication()\n\t\t\t.getResourceSettings()\n\t\t\t.getResourceStreamLocator()\n\t\t\t.locate(scope, absolutePath, style, variation, locale, null) != null;\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see org.apache.wicket.request.resource.IResource#respond(org.apache.wicket.request.resource.IResource.Attributes)\n\t */\n\tpublic void respond(Attributes attributes)\n\t{\n\t\t// Locate resource\n\t\tIResourceStream resourceStream = Application.get()\n\t\t\t.getResourceSettings()\n\t\t\t.getResourceStreamLocator()\n\t\t\t.locate(getScope(), absolutePath, style, variation, locale, null);\n\n\t\tif (resourceStream == null)\n\t\t{\n\t\t\tString msg = \"Unable to find package resource [path = \" + absolutePath + \", style = \" +\n\t\t\t\tstyle + \", variation = \" + variation + \", locale = \" + locale + \"]\";\n\t\t\tlog.warn(msg);\n\n\t\t\tif (RequestCycle.get().getResponse() instanceof WebResponse)\n\t\t\t{\n\t\t\t\tRequestCycle.get().replaceAllRequestHandlers(\n\t\t\t\t\tnew ErrorCodeResponseHandler(HttpServletResponse.SC_NOT_FOUND, msg));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tRequestCycle.get().replaceAllRequestHandlers(new AbortRequestHandler());\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tnew ResourceStreamResource(resourceStream).respond(attributes);\n\t}","id":12861,"modified_method":"/**\n\t * @see org.apache.wicket.request.resource.IResource#respond(org.apache.wicket.request.resource.IResource.Attributes)\n\t */\n\tpublic void respond(Attributes attributes)\n\t{\n\t\t// Locate resource\n\t\tIResourceStream resourceStream = ThreadContext.getApplication()\n\t\t\t.getResourceSettings()\n\t\t\t.getResourceStreamLocator()\n\t\t\t.locate(getScope(), absolutePath, style, variation, locale, null);\n\n\t\tif (resourceStream == null)\n\t\t{\n\t\t\tString msg = \"Unable to find package resource [path = \" + absolutePath + \", style = \" +\n\t\t\t\tstyle + \", variation = \" + variation + \", locale = \" + locale + \"]\";\n\t\t\tlog.warn(msg);\n\n\t\t\tif (RequestCycle.get().getResponse() instanceof WebResponse)\n\t\t\t{\n\t\t\t\tRequestCycle.get().replaceAllRequestHandlers(\n\t\t\t\t\tnew ErrorCodeResponseHandler(HttpServletResponse.SC_NOT_FOUND, msg));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tRequestCycle.get().replaceAllRequestHandlers(new AbortRequestHandler());\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tnew ResourceStreamResource(resourceStream).respond(attributes);\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @param scope\n\t * @param path\n\t * @return\n\t */\n\tprivate boolean accept(Class<?> scope, String path)\n\t{\n\t\tIPackageResourceGuard guard = Application.get()\n\t\t\t.getResourceSettings()\n\t\t\t.getPackageResourceGuard();\n\n\t\treturn guard.accept(scope, path);\n\t}","id":12862,"modified_method":"/**\n\t * \n\t * @param scope\n\t * @param path\n\t * @return\n\t */\n\tprivate boolean accept(Class<?> scope, String path)\n\t{\n\t\tIPackageResourceGuard guard = ThreadContext.getApplication()\n\t\t\t.getResourceSettings()\n\t\t\t.getPackageResourceGuard();\n\n\t\treturn guard.accept(scope, path);\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"private UrlAttributes testResource(IResourceStreamLocator locator, Locale locale, String style,\n\t\tString variation)\n\t{\n\t\tString absolutePath = Packages.absolutePath(getScope(), getName());\n\t\tif (locator.locate(getScope(), absolutePath, style, variation, locale, null, true) != null)\n\t\t{\n\t\t\treturn new UrlAttributes(locale, style, variation);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}","id":12863,"modified_method":"/**\n\t * \n\t * @param locator\n\t * @param locale\n\t * @param style\n\t * @param variation\n\t * @return\n\t */\n\tprivate UrlAttributes testResource(final IResourceStreamLocator locator, final Locale locale,\n\t\tfinal String style, final String variation)\n\t{\n\t\tString absolutePath = Packages.absolutePath(getScope(), getName());\n\n\t\tif (locator.locate(getScope(), absolutePath, style, variation, locale, null, true) != null)\n\t\t{\n\t\t\treturn new UrlAttributes(locale, style, variation);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"public PackageResourceReference(Class<?> scope, String name)\n\t{\n\t\tsuper(scope, name);\n\t}","id":12864,"modified_method":"/**\n\t * Construct.\n\t * \n\t * @param scope\n\t * @param name\n\t */\n\tpublic PackageResourceReference(final Class<?> scope, final String name)\n\t{\n\t\tsuper(scope, name);\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n\tpublic UrlAttributes getUrlAttributes()\n\t{\n\t\tLocale locale = getLocale() != null ? getLocale() : Session.get().getLocale();\n\t\tString style = getStyle() != null ? getStyle() : Session.get().getStyle();\n\t\tString variation = getVariation();\n\n\t\tUrlAttributes key = new UrlAttributes(locale, style, variation);\n\n\t\tif (urlAttributesCacheMap == null)\n\t\t{\n\t\t\turlAttributesCacheMap = new ConcurrentHashMap<UrlAttributes, UrlAttributes>();\n\t\t}\n\t\tUrlAttributes value = urlAttributesCacheMap.get(key);\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = getUrlAttributes(locale, style, variation);\n\t\t\turlAttributesCacheMap.put(key, value);\n\t\t}\n\n\t\treturn value;\n\t}","id":12865,"modified_method":"/**\n\t * @see org.apache.wicket.request.resource.ResourceReference#getUrlAttributes()\n\t */\n\t@Override\n\tpublic UrlAttributes getUrlAttributes()\n\t{\n\t\tLocale locale = getLocale() != null ? getLocale() : Session.get().getLocale();\n\t\tString style = getStyle() != null ? getStyle() : Session.get().getStyle();\n\t\tString variation = getVariation();\n\n\t\tif (urlAttributesCacheMap == null)\n\t\t{\n\t\t\turlAttributesCacheMap = Generics.newConcurrentHashMap();\n\t\t}\n\n\t\tUrlAttributes key = new UrlAttributes(locale, style, variation);\n\t\tUrlAttributes value = urlAttributesCacheMap.get(key);\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = getUrlAttributes(locale, style, variation);\n\t\t\turlAttributesCacheMap.put(key, value);\n\t\t}\n\n\t\treturn value;\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"public PackageResourceReference(Class<?> scope, String name, Locale locale, String style,\n\t\tString variation)\n\t{\n\t\tsuper(scope, name, locale, style, variation);\n\t}","id":12866,"modified_method":"/**\n\t * Construct.\n\t * \n\t * @param scope\n\t * @param name\n\t * @param locale\n\t * @param style\n\t * @param variation\n\t */\n\tpublic PackageResourceReference(final Class<?> scope, final String name, final Locale locale,\n\t\tfinal String style, String variation)\n\t{\n\t\tsuper(scope, name, locale, style, variation);\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n\tpublic IResource getResource()\n\t{\n\t\treturn new PackageResource(getScope(), getName(), getLocale(), getStyle(), getVariation());\n\t}","id":12867,"modified_method":"/**\n\t * @see org.apache.wicket.request.resource.ResourceReference#getResource()\n\t */\n\t@Override\n\tpublic IResource getResource()\n\t{\n\t\treturn new PackageResource(getScope(), getName(), getLocale(), getStyle(), getVariation());\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"public PackageResourceReference(String name)\n\t{\n\t\tsuper(name);\n\t}","id":12868,"modified_method":"/**\n\t * Construct.\n\t * \n\t * @param name\n\t */\n\tpublic PackageResourceReference(final String name)\n\t{\n\t\tsuper(name);\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"private UrlAttributes getUrlAttributes(Locale locale, String style, String variation)\n\t{\n\t\tIResourceStreamLocator locator = Application.get()\n\t\t\t.getResourceSettings()\n\t\t\t.getResourceStreamLocator();\n\n\t\tUrlAttributes res;\n\n\t\tres = testResource(locator, locale, style, variation);\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, locale, style, null);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, locale, null, variation);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, null, style, variation);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, locale, null, null);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, null, style, null);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, null, null, variation);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = new UrlAttributes(null, null, null);\n\t\t}\n\t\treturn res;\n\t}","id":12869,"modified_method":"/**\n\t * \n\t * @param locale\n\t * @param style\n\t * @param variation\n\t * @return\n\t */\n\tprivate UrlAttributes getUrlAttributes(final Locale locale, final String style,\n\t\tfinal String variation)\n\t{\n\t\tIResourceStreamLocator locator = ThreadContext.getApplication()\n\t\t\t.getResourceSettings()\n\t\t\t.getResourceStreamLocator();\n\n\t\tUrlAttributes res = testResource(locator, locale, style, variation);\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, locale, style, null);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, locale, null, variation);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, null, style, variation);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, locale, null, null);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, null, style, null);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = testResource(locator, null, null, variation);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = new UrlAttributes(null, null, null);\n\t\t}\n\t\treturn res;\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @return variation\n\t */\n\tpublic String getVariation()\n\t{\n\t\treturn variation;\n\t}","id":12870,"modified_method":"/**\n\t * @return variation\n\t */\n\tpublic String getVariation()\n\t{\n\t\treturn data.getVariation();\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n\t@Override\n\tpublic boolean equals(Object obj)\n\t{\n\t\tif (this == obj)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif (obj instanceof ResourceReference == false)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tResourceReference that = (ResourceReference)obj;\n\t\treturn Objects.equal(scope, that.scope) && //\n\t\t\tObjects.equal(name, that.name) && //\n\t\t\tObjects.equal(locale, that.locale) && //\n\t\t\tObjects.equal(style, that.style) && //\n\t\t\tObjects.equal(variation, that.variation);\n\t}","id":12871,"modified_method":"/**\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n\t@Override\n\tpublic boolean equals(Object obj)\n\t{\n\t\tif (this == obj)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif (obj instanceof ResourceReference == false)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tResourceReference that = (ResourceReference)obj;\n\t\treturn Objects.equal(data, that.data);\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @return name\n\t */\n\tpublic String getName()\n\t{\n\t\treturn name;\n\t}","id":12872,"modified_method":"/**\n\t * @return name\n\t */\n\tpublic String getName()\n\t{\n\t\treturn data.getName();\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @return style\n\t */\n\tpublic String getStyle()\n\t{\n\t\treturn style;\n\t}","id":12873,"modified_method":"/**\n\t * @return style\n\t */\n\tpublic String getStyle()\n\t{\n\t\treturn data.getStyle();\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Creates new {@link ResourceReference} instance.\n\t * \n\t * @param scope\n\t *            mandatory parameter\n\t * @param name\n\t *            mandatory parameter\n\t * @param locale\n\t * @param style\n\t * @param variation\n\t */\n\tpublic ResourceReference(Class<?> scope, String name, Locale locale, String style,\n\t\tString variation)\n\t{\n\t\tArgs.notNull(scope, \"scope\");\n\t\tArgs.notNull(name, \"name\");\n\n\t\tthis.scope = scope.getName();\n\t\tthis.name = name;\n\t\tthis.locale = locale;\n\t\tthis.style = style;\n\t\tthis.variation = variation;\n\t}","id":12874,"modified_method":"/**\n\t * Creates new {@link ResourceReference} instance.\n\t * \n\t * @param scope\n\t *            mandatory parameter\n\t * @param name\n\t *            mandatory parameter\n\t * @param locale\n\t * @param style\n\t * @param variation\n\t */\n\tpublic ResourceReference(Class<?> scope, String name, Locale locale, String style,\n\t\tString variation)\n\t{\n\t\tArgs.notNull(scope, \"scope\");\n\t\tArgs.notNull(name, \"name\");\n\n\t\tdata = new Key(scope.getName(), name, locale, style, variation);\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n\t\tpublic int hashCode()\n\t\t{\n\t\t\treturn Objects.hashCode(getLocale(), getStyle(), getVariation());\n\t\t}","id":12875,"modified_method":"/**\n\t\t * @see java.lang.Object#hashCode()\n\t\t */\n\t\t@Override\n\t\tpublic int hashCode()\n\t\t{\n\t\t\treturn Objects.hashCode(getLocale(), getStyle(), getVariation());\n\t\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see java.lang.Object#hashCode()\n\t */\n\t@Override\n\tpublic int hashCode()\n\t{\n\t\treturn Objects.hashCode(scope, name, locale, style, variation);\n\t}","id":12876,"modified_method":"/**\n\t * @see java.lang.Object#hashCode()\n\t */\n\t@Override\n\tpublic int hashCode()\n\t{\n\t\treturn data.hashCode();\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @return locale\n\t */\n\tpublic Locale getLocale()\n\t{\n\t\treturn locale;\n\t}","id":12877,"modified_method":"/**\n\t * @return locale\n\t */\n\tpublic Locale getLocale()\n\t{\n\t\treturn data.getLocale();\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n\t\tpublic boolean equals(Object obj)\n\t\t{\n\t\t\tif (this == obj)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (obj instanceof UrlAttributes == false)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tUrlAttributes that = (UrlAttributes)obj;\n\t\t\treturn Objects.equal(getLocale(), that.getLocale()) &&\n\t\t\t\tObjects.equal(getStyle(), that.getStyle()) &&\n\t\t\t\tObjects.equal(getVariation(), that.getVariation());\n\t\t}","id":12878,"modified_method":"/**\n\t\t * @see java.lang.Object#equals(java.lang.Object)\n\t\t */\n\t\t@Override\n\t\tpublic boolean equals(Object obj)\n\t\t{\n\t\t\tif (this == obj)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (obj instanceof UrlAttributes == false)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tUrlAttributes that = (UrlAttributes)obj;\n\t\t\treturn Objects.equal(getLocale(), that.getLocale()) &&\n\t\t\t\tObjects.equal(getStyle(), that.getStyle()) &&\n\t\t\t\tObjects.equal(getVariation(), that.getVariation());\n\t\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @return scope\n\t */\n\tpublic Class<?> getScope()\n\t{\n\t\treturn WicketObjects.resolveClass(scope);\n\t}","id":12879,"modified_method":"/**\n\t * @return scope\n\t */\n\tpublic Class<?> getScope()\n\t{\n\t\treturn WicketObjects.resolveClass(data.getScope());\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Creates a default resource reference in case no registry entry and it was requested to create\n\t * one.\n\t * <p>\n\t * A {@link PackageResourceReference} will be created by default\n\t * \n\t * @param scope\n\t * @param name\n\t * @param locale\n\t * @param style\n\t * @param variation\n\t * @return The RR created or null if not successful\n\t */\n\tprotected ResourceReference createDefaultResourceReference(final Class<?> scope,\n\t\tfinal String name, final Locale locale, final String style, final String variation)\n\t{\n\t\tif (PackageResource.exists(scope, name, locale, style, variation))\n\t\t{\n\t\t\treturn new PackageResourceReference(scope, name, locale, style, variation);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}","id":12880,"modified_method":"/**\n\t * Creates a default resource reference in case no registry entry and it was requested to create\n\t * one.\n\t * <p>\n\t * A {@link PackageResourceReference} will be created by default\n\t * \n\t * @param key\n\t * @return The RR created or null if not successful\n\t */\n\tprotected ResourceReference createDefaultResourceReference(final Key key)\n\t{\n\t\tif (PackageResource.exists(key.getScopeClass(), key.getName(), key.getLocale(),\n\t\t\tkey.getStyle(), key.getVariation()))\n\t\t{\n\t\t\treturn new PackageResourceReference(key);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Creates a default resource reference and registers it.\n\t * \n\t * @param scope\n\t * @param name\n\t * @param locale\n\t * @param style\n\t * @param variation\n\t * @return The default resource created\n\t */\n\tprivate ResourceReference addDefaultResourceReference(Class<?> scope, String name,\n\t\tLocale locale, String style, String variation)\n\t{\n\t\t// Can be subclassed to create other than PackagedResourceReference\n\t\tResourceReference reference = createDefaultResourceReference(scope, name, locale, style,\n\t\t\tvariation);\n\n\t\tif (reference != null)\n\t\t{\n\t\t\t// number of RRs which can be auto-added is restricted (cache size). Remove entries, and\n\t\t\t// unregister excessive ones, if needed.\n\t\t\tenforceAutoAddedCacheSize(getAutoAddedCapacity());\n\n\t\t\t// Register the new RR\n\t\t\tKey key = _registerResourceReference(reference);\n\n\t\t\t// Add it to the auto-added list\n\t\t\tif (autoAddedQueue != null)\n\t\t\t{\n\t\t\t\tautoAddedQueue.add(key);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlog.warn(\"Asked to auto-create a ResourceReference, but ResourceReferenceRegistry.createDefaultResourceReference() return null. \" +\n\t\t\t\t\" [scope: \" +\n\t\t\t\tscope.getName() +\n\t\t\t\t\"; name: \" +\n\t\t\t\tname +\n\t\t\t\t\"; locale: \" +\n\t\t\t\tlocale +\n\t\t\t\t\"; style: \" + style + \"; variation: \" + variation + \"]\");\n\t\t}\n\t\treturn reference;\n\t}","id":12881,"modified_method":"/**\n\t * Creates a default resource reference and registers it.\n\t * \n\t * @param key\n\t * @return The default resource created\n\t */\n\tprivate ResourceReference addDefaultResourceReference(final Key key)\n\t{\n\t\t// Can be subclassed to create other than PackagedResourceReference\n\t\tResourceReference reference = createDefaultResourceReference(key);\n\n\t\tif (reference != null)\n\t\t{\n\t\t\t// number of RRs which can be auto-added is restricted (cache size). Remove entries, and\n\t\t\t// unregister excessive ones, if needed.\n\t\t\tenforceAutoAddedCacheSize(getAutoAddedCapacity());\n\n\t\t\t// Register the new RR\n\t\t\t_registerResourceReference(reference);\n\n\t\t\t// Add it to the auto-added list\n\t\t\tif (autoAddedQueue != null)\n\t\t\t{\n\t\t\t\tautoAddedQueue.add(key);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlog.warn(\"Asked to auto-create a ResourceReference, but ResourceReferenceRegistry.createDefaultResourceReference() return null. \" +\n\t\t\t\t\" [\" + key.toString() + \"]\");\n\t\t}\n\t\treturn reference;\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Registers the given {@link ResourceReference}.\n\t * <p>\n\t * {@link ResourceReference#canBeRegistered()} must return <code>true<\/code>. Else, the resource\n\t * reference will not be registered.\n\t * \n\t * @param reference\n\t * @return True, if the resource was registered successfully or has been registered previously\n\t *         already.\n\t */\n\tprivate final Key _registerResourceReference(final ResourceReference reference)\n\t{\n\t\tArgs.notNull(reference, \"reference\");\n\n\t\tif (reference.canBeRegistered())\n\t\t{\n\t\t\tKey key = new Key(reference);\n\t\t\tif (map.containsKey(key) == false)\n\t\t\t{\n\t\t\t\tmap.put(key, reference);\n\t\t\t}\n\n\t\t\treturn key;\n\t\t}\n\n\t\tlog.warn(\"Resource reference not added to registry. reference.canBeRegistered() == false\");\n\t\treturn null;\n\t}","id":12882,"modified_method":"/**\n\t * Registers the given {@link ResourceReference}.\n\t * <p>\n\t * {@link ResourceReference#canBeRegistered()} must return <code>true<\/code>. Else, the resource\n\t * reference will not be registered.\n\t * \n\t * @param reference\n\t * @return True, if the resource was registered successfully or has been registered previously\n\t *         already.\n\t */\n\tprivate final Key _registerResourceReference(final ResourceReference reference)\n\t{\n\t\tArgs.notNull(reference, \"reference\");\n\n\t\tif (reference.canBeRegistered())\n\t\t{\n\t\t\tKey key = reference.getKey();\n\t\t\tif (map.containsKey(key) == false)\n\t\t\t{\n\t\t\t\tmap.put(key, reference);\n\t\t\t}\n\n\t\t\treturn key;\n\t\t}\n\n\t\tlog.warn(\"Resource reference not added to registry. reference.canBeRegistered() == false\");\n\t\treturn null;\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Get a resource reference matching the parameters from the registry or if not found and\n\t * requested, create an default resource reference and add it to the registry.\n\t * <p>\n\t * Part of the search is scanning the class (scope) and it's superclass for static\n\t * ResourceReference fields. Found fields get registered automatically (but are different from\n\t * auto-generated ResourceReferences).\n\t * \n\t * @see #createDefaultResourceReference(Class, String, Locale, String, String)\n\t * @see ClassScanner\n\t * \n\t * @param scope\n\t *            The scope of resource reference (e.g. the Component's class)\n\t * @param name\n\t *            The name of resource reference (e.g. filename)\n\t * @param locale\n\t *            see Component\n\t * @param style\n\t *            see Component\n\t * @param variation\n\t *            see Component\n\t * @param strict\n\t *            If true, \"weaker\" combination of scope, name, locale etc. are not tested\n\t * @param createIfNotFound\n\t *            If true a default resource reference is created if no entry can be found in the\n\t *            registry. The newly created resource reference will be added to the registry.\n\t * @return Either the resource reference found in the registry or, if requested, a resource\n\t *         reference automatically created based on the parameters provided. The automatically\n\t *         created resource reference will automatically be added to the registry.\n\t */\n\tpublic final ResourceReference getResourceReference(final Class<?> scope, final String name,\n\t\tfinal Locale locale, final String style, final String variation, final boolean strict,\n\t\tfinal boolean createIfNotFound)\n\t{\n\t\tResourceReference resource = _getResourceReference(scope, name, locale, style, variation,\n\t\t\tstrict);\n\n\t\t// Nothing found so far?\n\t\tif (resource == null)\n\t\t{\n\t\t\t// Scan the class (scope) and it's super classes for static fields containing resource\n\t\t\t// references. Such resources are registered as normal resource reference (not\n\t\t\t// auto-added).\n\t\t\tif (scanner.scanClass(scope) > 0)\n\t\t\t{\n\t\t\t\t// At least one new resource reference got registered => Search the registry again\n\t\t\t\tresource = _getResourceReference(scope, name, locale, style, variation, strict);\n\t\t\t}\n\n\t\t\t// Still nothing found => Shall a new reference be auto-created?\n\t\t\tif ((resource == null) && createIfNotFound)\n\t\t\t{\n\t\t\t\tresource = addDefaultResourceReference(scope, name, locale, style, variation);\n\t\t\t}\n\t\t}\n\n\t\treturn resource;\n\t}","id":12883,"modified_method":"/**\n\t * Get a resource reference matching the parameters from the registry or if not found and\n\t * requested, create an default resource reference and add it to the registry.\n\t * <p>\n\t * Part of the search is scanning the class (scope) and it's superclass for static\n\t * ResourceReference fields. Found fields get registered automatically (but are different from\n\t * auto-generated ResourceReferences).\n\t * \n\t * @see #createDefaultResourceReference(Class, String, Locale, String, String)\n\t * @see ClassScanner\n\t * \n\t * @param scope\n\t *            The scope of resource reference (e.g. the Component's class)\n\t * @param name\n\t *            The name of resource reference (e.g. filename)\n\t * @param locale\n\t *            see Component\n\t * @param style\n\t *            see Component\n\t * @param variation\n\t *            see Component\n\t * @param strict\n\t *            If true, \"weaker\" combination of scope, name, locale etc. are not tested\n\t * @param createIfNotFound\n\t *            If true a default resource reference is created if no entry can be found in the\n\t *            registry. The newly created resource reference will be added to the registry.\n\t * @return Either the resource reference found in the registry or, if requested, a resource\n\t *         reference automatically created based on the parameters provided. The automatically\n\t *         created resource reference will automatically be added to the registry.\n\t */\n\tpublic final ResourceReference getResourceReference(final Class<?> scope, final String name,\n\t\tfinal Locale locale, final String style, final String variation, final boolean strict,\n\t\tfinal boolean createIfNotFound)\n\t{\n\t\treturn getResourceReference(new Key(scope.getName(), name, locale, style, variation),\n\t\t\tstrict, createIfNotFound);\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Get a resource reference matching the parameters from the registry.\n\t * \n\t * @param scope\n\t *            The scope of resource reference (e.g. the Component's class)\n\t * @param name\n\t *            The name of resource reference (e.g. filename)\n\t * @param locale\n\t *            see Component\n\t * @param style\n\t *            see Component\n\t * @param variation\n\t *            see Component\n\t * @param strict\n\t *            If true, \"weaker\" combination of scope, name, locale etc. are not tested\n\t * @return Either the resource reference found in the registry or null if not found\n\t */\n\tprivate final ResourceReference _getResourceReference(final Class<?> scope, final String name,\n\t\tfinal Locale locale, final String style, final String variation, final boolean strict)\n\t{\n\t\t// Create a registry key containing all of the relevant attributes\n\t\tKey key = new Key(scope.getName(), name, locale, style, variation);\n\n\t\t// Get resource reference matching exactly the attrs provided\n\t\tResourceReference res = map.get(key);\n\t\tif ((res != null) || strict)\n\t\t{\n\t\t\treturn res;\n\t\t}\n\n\t\tres = _getResourceReference(scope, name, locale, style, null, true);\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, locale, null, variation, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, locale, null, null, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, null, style, variation, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, null, style, null, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, null, null, variation, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, null, null, null, true);\n\t\t}\n\t\treturn res;\n\t}","id":12884,"modified_method":"/**\n\t * Get a resource reference matching the parameters from the registry.\n\t * \n\t * @param scope\n\t *            The scope of resource reference (e.g. the Component's class)\n\t * @param name\n\t *            The name of resource reference (e.g. filename)\n\t * @param locale\n\t *            see Component\n\t * @param style\n\t *            see Component\n\t * @param variation\n\t *            see Component\n\t * @param strict\n\t *            If true, \"weaker\" combination of scope, name, locale etc. are not tested\n\t * @return Either the resource reference found in the registry or null if not found\n\t */\n\tprivate final ResourceReference _getResourceReference(final String scope, final String name,\n\t\tfinal Locale locale, final String style, final String variation, final boolean strict)\n\t{\n\t\t// Create a registry key containing all of the relevant attributes\n\t\tKey key = new Key(scope, name, locale, style, variation);\n\n\t\t// Get resource reference matching exactly the attrs provided\n\t\tResourceReference res = map.get(key);\n\t\tif ((res != null) || strict)\n\t\t{\n\t\t\treturn res;\n\t\t}\n\n\t\tres = _getResourceReference(scope, name, locale, style, null, true);\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, locale, null, variation, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, locale, null, null, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, null, style, variation, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, null, style, null, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, null, null, variation, true);\n\t\t}\n\t\tif (res == null)\n\t\t{\n\t\t\tres = _getResourceReference(scope, name, null, null, null, true);\n\t\t}\n\t\treturn res;\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Unregisters the given {@link ResourceReference}.\n\t * \n\t * @param reference\n\t * @return Null, if the registry did not contain an entry for the resource reference.\n\t */\n\tpublic final ResourceReference unregisterResourceReference(final ResourceReference reference)\n\t{\n\t\tArgs.notNull(reference, \"reference\");\n\n\t\tKey key = new Key(reference);\n\n\t\t// remove from registry\n\t\tResourceReference removed = map.remove(key);\n\n\t\t// remove from auto-added list, in case the RR was auto-added\n\t\tif (autoAddedQueue != null)\n\t\t{\n\t\t\tautoAddedQueue.remove(key);\n\t\t}\n\n\t\treturn removed;\n\t}","id":12885,"modified_method":"/**\n\t * Unregisters the given {@link ResourceReference}.\n\t * \n\t * @param reference\n\t * @return Null, if the registry did not contain an entry for the resource reference.\n\t */\n\tpublic final ResourceReference unregisterResourceReference(final ResourceReference reference)\n\t{\n\t\tArgs.notNull(reference, \"reference\");\n\n\t\tKey key = reference.getKey();\n\n\t\t// remove from registry\n\t\tResourceReference removed = map.remove(key);\n\n\t\t// remove from auto-added list, in case the RR was auto-added\n\t\tif (autoAddedQueue != null)\n\t\t{\n\t\t\tautoAddedQueue.remove(key);\n\t\t}\n\n\t\treturn removed;\n\t}","commit_id":"b918d0020275dd0caf2c8ea28d94f5e5e91798c0","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof CompleteUfsFileOptions)) {\n      return false;\n    }\n    CompleteUfsFileOptions that = (CompleteUfsFileOptions) o;\n    return Objects.equal(mOwner, that.mOwner)\n        && Objects.equal(mGroup, that.mGroup)\n        && Objects.equal(mMode, that.mMode);\n  }","id":12886,"modified_method":"@Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof CompleteUfsFileOptions)) {\n      return false;\n    }\n    CompleteUfsFileOptions that = (CompleteUfsFileOptions) o;\n    return Objects.equal(mPermission, that.mPermission);\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * @return Thrift representation of the options\n   */\n  public CompleteUfsFileTOptions toThrift() {\n    CompleteUfsFileTOptions options = new CompleteUfsFileTOptions();\n    if (hasGroup()) {\n      options.setGroup(mGroup);\n    }\n    if (hasOwner()) {\n      options.setOwner(mOwner);\n    }\n    if (hasMode()) {\n      options.setMode(mMode);\n    }\n    return options;\n  }","id":12887,"modified_method":"/**\n   * @return Thrift representation of the options\n   */\n  public CompleteUfsFileTOptions toThrift() {\n    CompleteUfsFileTOptions options = new CompleteUfsFileTOptions();\n    if (!mPermission.getOwner().isEmpty()) {\n      options.setOwner(mPermission.getOwner());\n    }\n    if (!mPermission.getGroup().isEmpty()) {\n      options.setGroup(mPermission.getGroup());\n    }\n    short mode = mPermission.getMode().toShort();\n    if (mode != Constants.INVALID_MODE) {\n      options.setMode(mode);\n    }\n    return options;\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public String toString() {\n    return Objects.toStringHelper(this).toString();\n  }","id":12888,"modified_method":"@Override\n  public String toString() {\n    return Objects.toStringHelper(this)\n        .add(\"permission\", mPermission)\n        .toString();\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"private CompleteUfsFileOptions() throws IOException {\n    Permission perm = Permission.defaults();\n    // Set owner and group from user login module, apply default file UMask.\n    perm.setOwnerFromLoginModule(ClientContext.getConf()).applyFileUMask(ClientContext.getConf());\n    // TODO(chaomin): set permission based on the alluxio file. Not needed for now since the\n    // file is always created with default permission.\n\n    mOwner = perm.getOwner();\n    mGroup = perm.getGroup();\n    mMode = perm.getMode().toShort();\n  }","id":12889,"modified_method":"private CompleteUfsFileOptions() throws IOException {\n    mPermission = Permission.defaults();\n    // Set owner and group from user login module, apply default file UMask.\n    mPermission.setOwnerFromLoginModule(ClientContext.getConf()).applyFileUMask(\n        ClientContext.getConf());\n    // TODO(chaomin): set permission based on the alluxio file. Not needed for now since the\n    // file is always created with default permission.\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public int hashCode() {\n    return 0;\n  }","id":12890,"modified_method":"@Override\n  public int hashCode() {\n    return Objects.hashCode(mPermission);\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * @return the default {@link CompleteUfsFileOptions}\n   * @throws IOException if failed to set owner from login module\n   */\n  public static CompleteUfsFileOptions defaults() throws IOException {\n    return new CompleteUfsFileOptions();\n  }","id":12891,"modified_method":"/**\n   * Creates a default {@link CompleteUfsFileOptions} with owner, group from login module and\n   * default file mode.\n   *\n   * @return the default {@link CompleteUfsFileOptions}\n   * @throws IOException if failed to set owner from login module\n   */\n  public static CompleteUfsFileOptions defaults() throws IOException {\n    return new CompleteUfsFileOptions();\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that building an {@link CompleteUfsFileOptions} with the defaults works.\n   */\n  @Test\n  public void defaultsTest() throws IOException {\n    ClientContext.getConf().set(Constants.SECURITY_AUTHENTICATION_TYPE, \"SIMPLE\");\n    ClientContext.getConf().set(Constants.SECURITY_LOGIN_USERNAME, \"foo\");\n    // Use IdentityOwnerGroupMapping to map owner \"foo\" to group \"foo\".\n    ClientContext.getConf().set(Constants.SECURITY_GROUP_MAPPING,\n        IdentityUserGroupsMapping.class.getName());\n\n    CompleteUfsFileOptions options = CompleteUfsFileOptions.defaults();\n\n    Permission expectedPs =\n        Permission.defaults().applyFileUMask(ClientContext.getConf());\n\n    Assert.assertEquals(\"foo\", options.getOwner());\n    Assert.assertEquals(\"foo\", options.getGroup());\n    Assert.assertEquals(expectedPs.getMode().toShort(), options.getMode());\n    ClientTestUtils.resetClientContext();\n  }","id":12892,"modified_method":"/**\n   * Tests that building an {@link CompleteUfsFileOptions} with the defaults works.\n   */\n  @Test\n  public void defaultsTest() throws IOException {\n    ClientContext.getConf().set(Constants.SECURITY_AUTHENTICATION_TYPE,\n        AuthType.SIMPLE.getAuthName());\n    ClientContext.getConf().set(Constants.SECURITY_LOGIN_USERNAME, \"foo\");\n    // Use IdentityOwnerGroupMapping to map owner \"foo\" to group \"foo\".\n    ClientContext.getConf().set(Constants.SECURITY_GROUP_MAPPING,\n        IdentityUserGroupsMapping.class.getName());\n\n    CompleteUfsFileOptions options = CompleteUfsFileOptions.defaults();\n\n    Permission expectedPs =\n        Permission.defaults().applyFileUMask(ClientContext.getConf());\n\n    Assert.assertEquals(\"foo\", options.getPermission().getOwner());\n    Assert.assertEquals(\"foo\", options.getPermission().getGroup());\n    Assert.assertEquals(expectedPs.getMode(), options.getPermission().getMode());\n    ClientTestUtils.resetClientContext();\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests conversion to thrift representation.\n   */\n  @Test\n  public void toThriftTest() throws IOException {\n    CompleteUfsFileOptions options = CompleteUfsFileOptions.defaults();\n    String owner = \"test-owner\";\n    String group = \"test-group\";\n    short mode = Constants.DEFAULT_FILE_SYSTEM_MODE;\n\n    options.setOwner(owner);\n    options.setGroup(group);\n    options.setMode(mode);\n\n    CompleteUfsFileTOptions thriftOptions = options.toThrift();\n    Assert.assertEquals(owner, thriftOptions.getOwner());\n    Assert.assertEquals(group, thriftOptions.getGroup());\n    Assert.assertEquals(mode, thriftOptions.getMode());\n  }","id":12893,"modified_method":"/**\n   * Tests conversion to thrift representation.\n   */\n  @Test\n  public void toThriftTest() throws IOException {\n    CompleteUfsFileOptions options = CompleteUfsFileOptions.defaults();\n    String owner = \"test-owner\";\n    String group = \"test-group\";\n    short mode = Constants.DEFAULT_FILE_SYSTEM_MODE;\n\n    options.setPermission(new Permission(owner, group, mode));\n\n    CompleteUfsFileTOptions thriftOptions = options.toThrift();\n    Assert.assertEquals(owner, thriftOptions.getOwner());\n    Assert.assertEquals(group, thriftOptions.getGroup());\n    Assert.assertEquals(mode, thriftOptions.getMode());\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests getting and setting fields.\n   */\n  @Test\n  public void fieldsTest() throws IOException {\n    CompleteUfsFileOptions options = CompleteUfsFileOptions.defaults();\n    String owner = \"test-owner\";\n    String group = \"test-group\";\n    short mode = Constants.DEFAULT_FILE_SYSTEM_MODE;\n    options.setOwner(owner);\n    options.setGroup(group);\n    options.setMode(mode);\n\n    Assert.assertEquals(owner, options.getOwner());\n    Assert.assertEquals(group, options.getGroup());\n    Assert.assertEquals(mode, options.getMode());\n  }","id":12894,"modified_method":"/**\n   * Tests getting and setting fields.\n   */\n  @Test\n  public void fieldsTest() throws IOException {\n    CompleteUfsFileOptions options = CompleteUfsFileOptions.defaults();\n    String owner = \"test-owner\";\n    String group = \"test-group\";\n    short mode = Constants.DEFAULT_FILE_SYSTEM_MODE;\n    options.setPermission(new Permission(owner, group, mode));\n\n    Assert.assertEquals(owner, options.getPermission().getOwner());\n    Assert.assertEquals(group, options.getPermission().getGroup());\n    Assert.assertEquals(mode, options.getPermission().getMode().toShort());\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests for building an {@link CreateOptions} with a security enabled\n   * configuration.\n   */\n  @Test\n  public void securityEnabledTest() throws IOException {\n    Configuration conf = new Configuration();\n    conf.set(Constants.SECURITY_AUTHENTICATION_TYPE, \"SIMPLE\");\n    conf.set(Constants.SECURITY_LOGIN_USERNAME, \"foo\");\n    // Use IdentityUserGroupMapping to map user \"foo\" to group \"foo\".\n    conf.set(Constants.SECURITY_GROUP_MAPPING, IdentityUserGroupsMapping.class.getName());\n\n    CreateOptions options = new CreateOptions(conf);\n\n    Permission expectedPs = Permission.defaults().applyFileUMask(conf);\n\n    // Verify that the owner and group are not.\n    Assert.assertEquals(\"\", options.getPermission().getOwner());\n    Assert.assertEquals(\"\", options.getPermission().getGroup());\n    Assert.assertEquals(expectedPs.getMode().toShort(),\n        options.getPermission().getMode().toShort());\n  }","id":12895,"modified_method":"/**\n   * Tests for building an {@link CreateOptions} with a security enabled\n   * configuration.\n   */\n  @Test\n  public void securityEnabledTest() throws IOException {\n    Configuration conf = new Configuration();\n    conf.set(Constants.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName());\n    conf.set(Constants.SECURITY_LOGIN_USERNAME, \"foo\");\n    // Use IdentityUserGroupMapping to map user \"foo\" to group \"foo\".\n    conf.set(Constants.SECURITY_GROUP_MAPPING, IdentityUserGroupsMapping.class.getName());\n\n    CreateOptions options = new CreateOptions(conf);\n\n    Permission expectedPs = Permission.defaults().applyFileUMask(conf);\n\n    // Verify that the owner and group are not.\n    Assert.assertEquals(\"\", options.getPermission().getOwner());\n    Assert.assertEquals(\"\", options.getPermission().getGroup());\n    Assert.assertEquals(expectedPs.getMode().toShort(),\n        options.getPermission().getMode().toShort());\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"private CreateUfsFileOptions() throws IOException {\n    Permission perm = Permission.defaults();\n    // Set owner and group from user login module, apply default file UMask.\n    perm.setOwnerFromLoginModule(ClientContext.getConf()).applyFileUMask(ClientContext.getConf());\n    // TODO(chaomin): set permission based on the alluxio file. Not needed for now since the\n    // file is always created with default permission.\n\n    mOwner = perm.getOwner();\n    mGroup = perm.getGroup();\n    mMode = perm.getMode().toShort();\n  }","id":12896,"modified_method":"private CreateUfsFileOptions() throws IOException {\n    mPermission = Permission.defaults();\n    // Set owner and group from user login module, apply default file UMask.\n    mPermission.setOwnerFromLoginModule(ClientContext.getConf()).applyFileUMask(\n        ClientContext.getConf());\n    // TODO(chaomin): set permission based on the alluxio file. Not needed for now since the\n    // file is always created with default permission.\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof CreateUfsFileOptions)) {\n      return false;\n    }\n    CreateUfsFileOptions that = (CreateUfsFileOptions) o;\n    return Objects.equal(mOwner, that.mOwner)\n        && Objects.equal(mGroup, that.mGroup)\n        && Objects.equal(mMode, that.mMode);\n  }","id":12897,"modified_method":"@Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof CreateUfsFileOptions)) {\n      return false;\n    }\n    CreateUfsFileOptions that = (CreateUfsFileOptions) o;\n    return Objects.equal(mPermission, that.mPermission);\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public int hashCode() {\n    return 0;\n  }","id":12898,"modified_method":"@Override\n  public int hashCode() {\n    return Objects.hashCode(mPermission);\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * @return the default {@link CreateUfsFileOptions}\n   * @throws IOException if failed to set owner from login module\n   */\n  public static CreateUfsFileOptions defaults() throws IOException {\n    return new CreateUfsFileOptions();\n  }","id":12899,"modified_method":"/**\n   * Creates a default {@link CreateUfsFileOptions} with owner, group from login module and\n   * default file mode.\n   *\n   * @return the default {@link CreateUfsFileOptions}\n   * @throws IOException if failed to set owner from login module\n   */\n  public static CreateUfsFileOptions defaults() throws IOException {\n    return new CreateUfsFileOptions();\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public String toString() {\n    return Objects.toStringHelper(this).toString();\n  }","id":12900,"modified_method":"@Override\n  public String toString() {\n    return Objects.toStringHelper(this)\n        .add(\"permission\", mPermission)\n        .toString();\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * @return Thrift representation of the options\n   */\n  public CreateUfsFileTOptions toThrift() {\n    CreateUfsFileTOptions options = new CreateUfsFileTOptions();\n    if (hasOwner()) {\n      options.setOwner(mOwner);\n    }\n    if (hasGroup()) {\n      options.setGroup(mGroup);\n    }\n    if (hasMode()) {\n      options.setMode(mMode);\n    }\n    return options;\n  }","id":12901,"modified_method":"/**\n   * @return Thrift representation of the options\n   */\n  public CreateUfsFileTOptions toThrift() {\n    CreateUfsFileTOptions options = new CreateUfsFileTOptions();\n    if (!mPermission.getOwner().isEmpty()) {\n      options.setOwner(mPermission.getOwner());\n    }\n    if (!mPermission.getGroup().isEmpty()) {\n      options.setGroup(mPermission.getGroup());\n    }\n    short mode = mPermission.getMode().toShort();\n    if (mode != Constants.INVALID_MODE) {\n      options.setMode(mode);\n    }\n    return options;\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests conversion to thrift representation.\n   */\n  @Test\n  public void toThriftTest() throws IOException {\n    CreateUfsFileOptions options = CreateUfsFileOptions.defaults();\n    String owner = \"test-owner\";\n    String group = \"test-group\";\n    short mode = Constants.DEFAULT_FILE_SYSTEM_MODE;\n\n    options.setOwner(owner);\n    options.setGroup(group);\n    options.setMode(mode);\n\n    CreateUfsFileTOptions thriftOptions = options.toThrift();\n    Assert.assertEquals(owner, thriftOptions.getOwner());\n    Assert.assertEquals(group, thriftOptions.getGroup());\n    Assert.assertEquals(mode, thriftOptions.getMode());\n  }","id":12902,"modified_method":"/**\n   * Tests conversion to thrift representation.\n   */\n  @Test\n  public void toThriftTest() throws IOException {\n    CreateUfsFileOptions options = CreateUfsFileOptions.defaults();\n    String owner = \"test-owner\";\n    String group = \"test-group\";\n    short mode = Constants.DEFAULT_FILE_SYSTEM_MODE;\n\n    options.setPermission(new Permission(owner, group, mode));\n\n    CreateUfsFileTOptions thriftOptions = options.toThrift();\n    Assert.assertEquals(owner, thriftOptions.getOwner());\n    Assert.assertEquals(group, thriftOptions.getGroup());\n    Assert.assertEquals(mode, thriftOptions.getMode());\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests getting and setting fields.\n   */\n  @Test\n  public void fieldsTest() throws IOException {\n    CreateUfsFileOptions options = CreateUfsFileOptions.defaults();\n    String owner = \"test-owner\";\n    String group = \"test-group\";\n    short mode = Constants.DEFAULT_FILE_SYSTEM_MODE;\n    options.setOwner(owner);\n    options.setGroup(group);\n    options.setMode(mode);\n\n    Assert.assertEquals(owner, options.getOwner());\n    Assert.assertEquals(group, options.getGroup());\n    Assert.assertEquals(mode, options.getMode());\n  }","id":12903,"modified_method":"/**\n   * Tests getting and setting fields.\n   */\n  @Test\n  public void fieldsTest() throws IOException {\n    CreateUfsFileOptions options = CreateUfsFileOptions.defaults();\n    String owner = \"test-owner\";\n    String group = \"test-group\";\n    short mode = Constants.DEFAULT_FILE_SYSTEM_MODE;\n    options.setPermission(new Permission(owner, group, mode));\n\n    Assert.assertEquals(owner, options.getPermission().getOwner());\n    Assert.assertEquals(group, options.getPermission().getGroup());\n    Assert.assertEquals(mode, options.getPermission().getMode().toShort());\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that building an {@link CreateUfsFileOptions} with the defaults works.\n   */\n  @Test\n  public void defaultsTest() throws IOException {\n    ClientContext.getConf().set(Constants.SECURITY_AUTHENTICATION_TYPE, \"SIMPLE\");\n    ClientContext.getConf().set(Constants.SECURITY_LOGIN_USERNAME, \"foo\");\n    // Use IdentityOwnerGroupMapping to map owner \"foo\" to group \"foo\".\n    ClientContext.getConf().set(Constants.SECURITY_GROUP_MAPPING,\n        IdentityUserGroupsMapping.class.getName());\n\n    CreateUfsFileOptions options = CreateUfsFileOptions.defaults();\n\n    Permission expectedPs =\n        Permission.defaults().applyFileUMask(ClientContext.getConf());\n\n    Assert.assertEquals(\"foo\", options.getOwner());\n    Assert.assertEquals(\"foo\", options.getGroup());\n    Assert.assertEquals(expectedPs.getMode().toShort(), options.getMode());\n    ClientTestUtils.resetClientContext();\n  }","id":12904,"modified_method":"/**\n   * Tests that building an {@link CreateUfsFileOptions} with the defaults works.\n   */\n  @Test\n  public void defaultsTest() throws IOException {\n    ClientContext.getConf().set(Constants.SECURITY_AUTHENTICATION_TYPE,\n        AuthType.SIMPLE.getAuthName());\n    ClientContext.getConf().set(Constants.SECURITY_LOGIN_USERNAME, \"foo\");\n    // Use IdentityOwnerGroupMapping to map owner \"foo\" to group \"foo\".\n    ClientContext.getConf().set(Constants.SECURITY_GROUP_MAPPING,\n        IdentityUserGroupsMapping.class.getName());\n\n    CreateUfsFileOptions options = CreateUfsFileOptions.defaults();\n\n    Permission expectedPs =\n        Permission.defaults().applyFileUMask(ClientContext.getConf());\n\n    Assert.assertEquals(\"foo\", options.getPermission().getOwner());\n    Assert.assertEquals(\"foo\", options.getPermission().getGroup());\n    Assert.assertEquals(expectedPs.getMode(), options.getPermission().getMode());\n    ClientTestUtils.resetClientContext();\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Creates a new file output stream.\n   *\n   * @param path the file path\n   * @param options the client options\n   * @throws IOException if an I/O error occurs\n   */\n  public FileOutStream(AlluxioURI path, OutStreamOptions options) throws IOException {\n    mUri = Preconditions.checkNotNull(path);\n    mNonce = IdUtils.getRandomNonNegativeLong();\n    mBlockSize = options.getBlockSizeBytes();\n    mAlluxioStorageType = options.getAlluxioStorageType();\n    mUnderStorageType = options.getUnderStorageType();\n    mContext = FileSystemContext.INSTANCE;\n    mPreviousBlockOutStreams = new LinkedList<>();\n    mUfsDelegation = ClientContext.getConf().getBoolean(Constants.USER_UFS_DELEGATION_ENABLED);\n    if (mUnderStorageType.isSyncPersist()) {\n      if (mUfsDelegation) {\n        updateUfsPath();\n        mFileSystemWorkerClient = mContext.createWorkerClient();\n        try {\n          Permission perm = options.getPermission();\n          mUfsFileId =\n              mFileSystemWorkerClient.createUfsFile(new AlluxioURI(mUfsPath),\n                  CreateUfsFileOptions.defaults().setOwner(perm.getOwner())\n                      .setGroup(perm.getGroup()).setMode(perm.getMode().toShort()));\n        } catch (AlluxioException e) {\n          mFileSystemWorkerClient.close();\n          throw new IOException(e);\n        }\n        mUnderStorageOutputStream =\n            new UnderFileSystemFileOutStream(mFileSystemWorkerClient.getWorkerDataServerAddress(),\n                mUfsFileId);\n      } else {\n        updateUfsPath();\n        String tmpPath = PathUtils.temporaryFileName(mNonce, mUfsPath);\n        UnderFileSystem ufs = UnderFileSystem.get(tmpPath, ClientContext.getConf());\n        // TODO(jiri): Implement collection of temporary files left behind by dead clients.\n        CreateOptions createOptions = new CreateOptions().setPermission(options.getPermission());\n        mUnderStorageOutputStream = ufs.create(tmpPath, createOptions);\n\n        // Set delegation related vars to null as we are not using worker delegation for ufs ops\n        mFileSystemWorkerClient = null;\n        mUfsFileId = null;\n      }\n    } else {\n      mUfsPath = null;\n      mUnderStorageOutputStream = null;\n      mFileSystemWorkerClient = null;\n      mUfsFileId = null;\n    }\n    mClosed = false;\n    mCanceled = false;\n    mShouldCacheCurrentBlock = mAlluxioStorageType.isStore();\n    mBytesWritten = 0;\n    mLocationPolicy = Preconditions.checkNotNull(options.getLocationPolicy(),\n        PreconditionMessage.FILE_WRITE_LOCATION_POLICY_UNSPECIFIED);\n  }","id":12905,"modified_method":"/**\n   * Creates a new file output stream.\n   *\n   * @param path the file path\n   * @param options the client options\n   * @throws IOException if an I/O error occurs\n   */\n  public FileOutStream(AlluxioURI path, OutStreamOptions options) throws IOException {\n    mUri = Preconditions.checkNotNull(path);\n    mNonce = IdUtils.getRandomNonNegativeLong();\n    mBlockSize = options.getBlockSizeBytes();\n    mAlluxioStorageType = options.getAlluxioStorageType();\n    mUnderStorageType = options.getUnderStorageType();\n    mContext = FileSystemContext.INSTANCE;\n    mPreviousBlockOutStreams = new LinkedList<>();\n    mUfsDelegation = ClientContext.getConf().getBoolean(Constants.USER_UFS_DELEGATION_ENABLED);\n    if (mUnderStorageType.isSyncPersist()) {\n      if (mUfsDelegation) {\n        updateUfsPath();\n        mFileSystemWorkerClient = mContext.createWorkerClient();\n        try {\n          Permission perm = options.getPermission();\n          mUfsFileId =\n              mFileSystemWorkerClient.createUfsFile(new AlluxioURI(mUfsPath),\n                  CreateUfsFileOptions.defaults().setPermission(perm));\n        } catch (AlluxioException e) {\n          mFileSystemWorkerClient.close();\n          throw new IOException(e);\n        }\n        mUnderStorageOutputStream =\n            new UnderFileSystemFileOutStream(mFileSystemWorkerClient.getWorkerDataServerAddress(),\n                mUfsFileId);\n      } else {\n        updateUfsPath();\n        String tmpPath = PathUtils.temporaryFileName(mNonce, mUfsPath);\n        UnderFileSystem ufs = UnderFileSystem.get(tmpPath, ClientContext.getConf());\n        // TODO(jiri): Implement collection of temporary files left behind by dead clients.\n        CreateOptions createOptions = new CreateOptions().setPermission(options.getPermission());\n        mUnderStorageOutputStream = ufs.create(tmpPath, createOptions);\n\n        // Set delegation related vars to null as we are not using worker delegation for ufs ops\n        mFileSystemWorkerClient = null;\n        mUfsFileId = null;\n      }\n    } else {\n      mUfsPath = null;\n      mUnderStorageOutputStream = null;\n      mFileSystemWorkerClient = null;\n      mUfsFileId = null;\n    }\n    mClosed = false;\n    mCanceled = false;\n    mShouldCacheCurrentBlock = mAlluxioStorageType.isStore();\n    mBytesWritten = 0;\n    mLocationPolicy = Preconditions.checkNotNull(options.getLocationPolicy(),\n        PreconditionMessage.FILE_WRITE_LOCATION_POLICY_UNSPECIFIED);\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests for building an {@link MkdirsOptions} with a security enabled\n   * configuration.\n   */\n  @Test\n  public void securityEnabledTest() throws IOException {\n    Configuration conf = new Configuration();\n    conf.set(Constants.SECURITY_AUTHENTICATION_TYPE, \"SIMPLE\");\n    conf.set(Constants.SECURITY_LOGIN_USERNAME, \"foo\");\n    // Use IdentityUserGroupMapping to map user \"foo\" to group \"foo\".\n    conf.set(Constants.SECURITY_GROUP_MAPPING, IdentityUserGroupsMapping.class.getName());\n\n    MkdirsOptions options = new MkdirsOptions(conf);\n\n    Permission expectedPs = Permission.defaults().applyDirectoryUMask(conf);\n\n    // Verify the default createParent is true.\n    Assert.assertTrue(options.getCreateParent());\n    // Verify that the owner and group are not.\n    Assert.assertEquals(\"\", options.getPermission().getOwner());\n    Assert.assertEquals(\"\", options.getPermission().getGroup());\n    Assert.assertEquals(expectedPs.getMode().toShort(),\n        options.getPermission().getMode().toShort());\n  }","id":12906,"modified_method":"/**\n   * Tests for building an {@link MkdirsOptions} with a security enabled\n   * configuration.\n   */\n  @Test\n  public void securityEnabledTest() throws IOException {\n    Configuration conf = new Configuration();\n    conf.set(Constants.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName());\n    conf.set(Constants.SECURITY_LOGIN_USERNAME, \"foo\");\n    // Use IdentityUserGroupMapping to map user \"foo\" to group \"foo\".\n    conf.set(Constants.SECURITY_GROUP_MAPPING, IdentityUserGroupsMapping.class.getName());\n\n    MkdirsOptions options = new MkdirsOptions(conf);\n\n    Permission expectedPs = Permission.defaults().applyDirectoryUMask(conf);\n\n    // Verify the default createParent is true.\n    Assert.assertTrue(options.getCreateParent());\n    // Verify that the owner and group are not.\n    Assert.assertEquals(\"\", options.getPermission().getOwner());\n    Assert.assertEquals(\"\", options.getPermission().getGroup());\n    Assert.assertEquals(expectedPs.getMode().toShort(),\n        options.getPermission().getMode().toShort());\n  }","commit_id":"d24ad7beac0914aecbbfc67c427e59bf65712104","url":"https://github.com/amplab/tachyon"},{"original_method":"private void readPreferences(Preferences tmpPrefs) {\n        Map<String, Setting> loaded;\n        Map<String, Setting> orig = Main.pref.getAllSettings();\n        Map<String, Setting> defaults = tmpPrefs.getAllDefaults();\n        orig.remove(\"osm-server.password\");\n        defaults.remove(\"osm-server.password\");\n        if (tmpPrefs != Main.pref) {\n            loaded = tmpPrefs.getAllSettings();\n        } else {\n            loaded = orig;\n        }\n        prepareData(loaded, orig, defaults);\n    }","id":12907,"modified_method":"private void readPreferences(Preferences tmpPrefs) {\n        Map<String, Setting> loaded;\n        Map<String, Setting> orig = Main.pref.getAllSettings();\n        Map<String, Setting> defaults = tmpPrefs.getAllDefaults();\n        orig.remove(\"osm-server.password\");\n        defaults.remove(\"osm-server.password\");\n        if (tmpPrefs != Main.pref) {\n            loaded = tmpPrefs.getAllSettings();\n            // plugins preference keys may be changed directly later, after plugins are downloaded\n            // so we do not want to show it in the table as \"changed\" now\n            loaded.put(\"plugins\", orig.get(\"plugins\"));\n        } else {\n            loaded = orig;\n        }\n        prepareData(loaded, orig, defaults);\n    }","commit_id":"08a46d9f6057e53875f7719bb392eb0d6d7610df","url":"https://github.com/openstreetmap/josm"},{"original_method":"private void processPluginInstallElement(Element elem) {\n            String install = elem.getAttribute(\"install\");\n            String uninstall = elem.getAttribute(\"remove\");\n            String delete = elem.getAttribute(\"delete\");\n            log(\"PLUGIN: install %s, remove %s, delete %s\", install, uninstall, delete);\n            pluginOperation(install, uninstall, delete);\n        }","id":12908,"modified_method":"private void processPluginInstallElement(Element elem) {\n            String install = elem.getAttribute(\"install\");\n            String uninstall = elem.getAttribute(\"remove\");\n            String delete = elem.getAttribute(\"delete\");\n            pluginOperation(install, uninstall, delete);\n        }","commit_id":"08a46d9f6057e53875f7719bb392eb0d6d7610df","url":"https://github.com/openstreetmap/josm"},{"original_method":"public static void pluginOperation(String install, String uninstall, String delete)  {\n        final List<String> installList = Arrays.asList(install.toLowerCase().split(\";\"));\n        final List<String> removeList = Arrays.asList(uninstall.toLowerCase().split(\";\"));\n        final List<String> deleteList = Arrays.asList(delete.toLowerCase().split(\";\"));\n\n        final ReadLocalPluginInformationTask task = new ReadLocalPluginInformationTask();\n        Runnable r = new Runnable() {\n            public void run() {\n                if (task.isCanceled()) return;\n                synchronized (CustomConfigurator.class) { \n                try { // proceed only after ll other tasks were finished\n                    while (busy) CustomConfigurator.class.wait();\n                } catch (InterruptedException ex) { }\n                        \n                SwingUtilities.invokeLater(new Runnable() {\n                    public void run() {\n                        List<PluginInformation> availablePlugins = task.getAvailablePlugins();\n                        List<PluginInformation> toInstallPlugins = new ArrayList<PluginInformation>();\n                        List<PluginInformation> toRemovePlugins = new ArrayList<PluginInformation>();\n                        List<PluginInformation> toDeletePlugins = new ArrayList<PluginInformation>();\n                        for (PluginInformation pi: availablePlugins) {\n                            //System.out.print(pi.name+\";\");\n                            String name = pi.name.toLowerCase();\n                            if (installList.contains(name)) toInstallPlugins.add(pi);\n                            if (removeList.contains(name)) toRemovePlugins.add(pi);\n                            if (deleteList.contains(name)) toDeletePlugins.add(pi);\n                        }\n                        if (!installList.isEmpty()) {\n                            PluginDownloadTask pluginDownloadTask = new PluginDownloadTask(Main.parent, toInstallPlugins, tr (\"Installing plugins\"));\n                            Main.worker.submit(pluginDownloadTask);\n                        }\n                            Collection<String> pls = new ArrayList<String>(Main.pref.getCollection(\"plugins\"));\n                            for (PluginInformation pi: toInstallPlugins) {\n                                if (!pls.contains(pi.name)) pls.add(pi.name);\n                            }\n                            for (PluginInformation pi: toRemovePlugins) {\n                                pls.remove(pi.name);\n                            }\n                            for (PluginInformation pi: toDeletePlugins) {\n                                pls.remove(pi.name);\n                                new File(Main.pref.getPluginsDirectory(),pi.name+\".jar\").deleteOnExit();\n                            }\n                            Main.pref.putCollection(\"plugins\",pls);\n                        }\n                });\n            }\n            }\n\n        };\n        Main.worker.submit(task);\n        Main.worker.submit(r);\n    }","id":12909,"modified_method":"public static void pluginOperation(String install, String uninstall, String delete)  {\n        final List<String> installList = new ArrayList<String>();\n        final List<String> removeList = new ArrayList<String>();\n        final List<String> deleteList = new ArrayList<String>();\n        Collections.addAll(installList, install.toLowerCase().split(\";\"));\n        Collections.addAll(removeList, uninstall.toLowerCase().split(\";\"));\n        Collections.addAll(deleteList, delete.toLowerCase().split(\";\"));\n        installList.remove(\"\");removeList.remove(\"\");deleteList.remove(\"\");\n        \n        if (!installList.isEmpty()) {\n            log(\"Plugins install: \"+installList);\n        }\n        if (!removeList.isEmpty()) {\n            log(\"Plugins turn off: \"+removeList);\n        }\n        if (!deleteList.isEmpty()) {\n            log(\"Plugins delete: \"+deleteList);\n        }\n\n        final ReadLocalPluginInformationTask task = new ReadLocalPluginInformationTask();\n        Runnable r = new Runnable() {\n            public void run() {\n                if (task.isCanceled()) return;\n                synchronized (CustomConfigurator.class) { \n                try { // proceed only after all other tasks were finished\n                    while (busy) CustomConfigurator.class.wait();\n                } catch (InterruptedException ex) { }\n                        \n                SwingUtilities.invokeLater(new Runnable() {\n                    public void run() {\n                        List<PluginInformation> availablePlugins = task.getAvailablePlugins();\n                        List<PluginInformation> toInstallPlugins = new ArrayList<PluginInformation>();\n                        List<PluginInformation> toRemovePlugins = new ArrayList<PluginInformation>();\n                        List<PluginInformation> toDeletePlugins = new ArrayList<PluginInformation>();\n                        for (PluginInformation pi: availablePlugins) {\n                            //System.out.print(pi.name+\";\");\n                            String name = pi.name.toLowerCase();\n                            if (installList.contains(name)) toInstallPlugins.add(pi);\n                            if (removeList.contains(name)) toRemovePlugins.add(pi);\n                            if (deleteList.contains(name)) toDeletePlugins.add(pi);\n                        }\n                        if (!installList.isEmpty()) {\n                            PluginDownloadTask pluginDownloadTask = new PluginDownloadTask(Main.parent, toInstallPlugins, tr (\"Installing plugins\"));\n                            Main.worker.submit(pluginDownloadTask);\n                        }\n                            Collection<String> pls = new ArrayList<String>(Main.pref.getCollection(\"plugins\"));\n                            for (PluginInformation pi: toInstallPlugins) {\n                                if (!pls.contains(pi.name)) pls.add(pi.name);\n                            }\n                            for (PluginInformation pi: toRemovePlugins) {\n                                pls.remove(pi.name);\n                            }\n                            for (PluginInformation pi: toDeletePlugins) {\n                                pls.remove(pi.name);\n                                new File(Main.pref.getPluginsDirectory(),pi.name+\".jar\").deleteOnExit();\n                            }\n                            System.out.println(pls);\n                            Main.pref.putCollection(\"plugins\",pls);\n                        }\n                });\n            }\n            }\n\n        };\n        Main.worker.submit(task);\n        Main.worker.submit(r);\n    }","commit_id":"08a46d9f6057e53875f7719bb392eb0d6d7610df","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Test\n    public void testRepeatedDeploy() throws Exception {\n\n        ServerDeploymentHelper server = new ServerDeploymentHelper(managementClient.getControllerClient());\n        String runtimeName = server.deploy(V100_JAR, deployer.getDeployment(V100_JAR));\n        try {\n            Bundle bundleA = FrameworkUtils.getBundles(context, V100_JAR, null)[0];\n            Assert.assertEquals(V100_JAR, bundleA.getSymbolicName());\n\n            runtimeName = server.deploy(V100_JAR, deployer.getDeployment(V100_JAR));\n            Bundle bundleB = FrameworkUtils.getBundles(context, V100_JAR, null)[0];\n            Assert.assertSame(bundleA, bundleB);\n        } finally {\n            server.undeploy(runtimeName);\n        }\n    }","id":12910,"modified_method":"@Test\n    public void testRepeatedDeploy() throws Exception {\n        ServerDeploymentHelper server = new ServerDeploymentHelper(managementClient.getControllerClient());\n        String runtimeName = server.deploy(V100_JAR, deployer.getDeployment(V100_JAR));\n        try {\n            Bundle bundleA = FrameworkUtils.getBundles(context, V100_JAR, null)[0];\n            Assert.assertEquals(V100_JAR, bundleA.getSymbolicName());\n            try {\n                server.deploy(V100_JAR, deployer.getDeployment(V100_JAR));\n                Assert.fail(\"ServerDeploymentException expected\");\n            } catch (ServerDeploymentException e) {\n                // expected\n            }\n        } finally {\n            server.undeploy(runtimeName);\n        }\n    }","commit_id":"cf89d818e96b95df4cd6fb004169d4a2ba5eda0f","url":"https://github.com/wildfly/wildfly"},{"original_method":"public String deploy(String runtimeName, InputStream input) throws ServerDeploymentException {\n        ServerDeploymentActionResult actionResult;\n        try {\n            DeploymentPlanBuilder builder = deploymentManager.newDeploymentPlan();\n            builder = builder.add(runtimeName, input).andDeploy();\n            DeploymentPlan plan = builder.build();\n            DeploymentAction action = builder.getLastAction();\n            Future<ServerDeploymentPlanResult> future = deploymentManager.execute(plan);\n            ServerDeploymentPlanResult planResult = future.get();\n            actionResult = planResult.getDeploymentActionResult(action.getId());\n        } catch (Exception ex) {\n            throw new ServerDeploymentException(ex);\n        }\n        if (actionResult.getDeploymentException() != null)\n            throw new ServerDeploymentException(actionResult);\n        return runtimeName;\n    }","id":12911,"modified_method":"public String deploy(String runtimeName, InputStream input) throws ServerDeploymentException {\n        ServerDeploymentPlanResult planResult;\n        List<DeploymentAction> actions = new ArrayList<DeploymentAction>();\n        try {\n            DeploymentPlanBuilder builder = deploymentManager.newDeploymentPlan();\n            AddDeploymentPlanBuilder addBuilder = builder.add(runtimeName, input);\n            actions.add(addBuilder.getLastAction());\n            builder = addBuilder.andDeploy();\n            actions.add(builder.getLastAction());\n            DeploymentPlan plan = builder.build();\n            Future<ServerDeploymentPlanResult> future = deploymentManager.execute(plan);\n            planResult = future.get();\n        } catch (Exception ex) {\n            throw new ServerDeploymentException(ex);\n        }\n        for (DeploymentAction action : actions) {\n            ServerDeploymentActionResult actionResult = planResult.getDeploymentActionResult(action.getId());\n            if (actionResult.getDeploymentException() != null)\n                throw new ServerDeploymentException(actionResult);\n        }\n        return runtimeName;\n    }","commit_id":"cf89d818e96b95df4cd6fb004169d4a2ba5eda0f","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void undeploy(String runtimeName) throws ServerDeploymentException {\n        ServerDeploymentActionResult actionResult;\n        try {\n            DeploymentPlanBuilder builder = deploymentManager.newDeploymentPlan();\n            builder = builder.undeploy(runtimeName).andRemoveUndeployed();\n            DeploymentPlan plan = builder.build();\n            DeploymentAction action = builder.getLastAction();\n            Future<ServerDeploymentPlanResult> future = deploymentManager.execute(plan);\n            ServerDeploymentPlanResult planResult = future.get();\n            actionResult = planResult.getDeploymentActionResult(action.getId());\n        } catch (Exception ex) {\n            throw new ServerDeploymentException(ex);\n        }\n        if (actionResult.getDeploymentException() != null)\n            throw new ServerDeploymentException(actionResult);\n    }","id":12912,"modified_method":"public void undeploy(String runtimeName) throws ServerDeploymentException {\n        ServerDeploymentPlanResult planResult;\n        List<DeploymentAction> actions = new ArrayList<DeploymentAction>();\n        try {\n            DeploymentPlanBuilder builder = deploymentManager.newDeploymentPlan();\n            UndeployDeploymentPlanBuilder undeployBuilder = builder.undeploy(runtimeName);\n            actions.add(undeployBuilder.getLastAction());\n            builder = undeployBuilder.andRemoveUndeployed();\n            actions.add(builder.getLastAction());\n            DeploymentPlan plan = builder.build();\n            Future<ServerDeploymentPlanResult> future = deploymentManager.execute(plan);\n            planResult = future.get();\n        } catch (Exception ex) {\n            throw new ServerDeploymentException(ex);\n        }\n        for (DeploymentAction action : actions) {\n            ServerDeploymentActionResult actionResult = planResult.getDeploymentActionResult(action.getId());\n            if (actionResult.getDeploymentException() != null)\n                throw new ServerDeploymentException(actionResult);\n        }\n    }","commit_id":"cf89d818e96b95df4cd6fb004169d4a2ba5eda0f","url":"https://github.com/wildfly/wildfly"},{"original_method":"public String replace(String runtimeName, String replaceName, InputStream input, boolean removeUndeployed) throws ServerDeploymentException {\n        ServerDeploymentActionResult actionResult;\n        try {\n            DeploymentPlanBuilder builder = deploymentManager.newDeploymentPlan();\n            builder = builder.add(runtimeName, input).andReplace(replaceName);\n            if (removeUndeployed) {\n                builder = ((ReplaceDeploymentPlanBuilder)builder).andRemoveUndeployed();\n            }\n            DeploymentPlan plan = builder.build();\n            DeploymentAction action = builder.getLastAction();\n            Future<ServerDeploymentPlanResult> future = deploymentManager.execute(plan);\n            ServerDeploymentPlanResult planResult = future.get();\n            actionResult = planResult.getDeploymentActionResult(action.getId());\n        } catch (Exception ex) {\n            throw new ServerDeploymentException(ex);\n        }\n        if (actionResult.getDeploymentException() != null)\n            throw new ServerDeploymentException(actionResult);\n        return runtimeName;\n    }","id":12913,"modified_method":"public String replace(String runtimeName, String replaceName, InputStream input, boolean removeUndeployed) throws ServerDeploymentException {\n        ServerDeploymentPlanResult planResult;\n        List<DeploymentAction> actions = new ArrayList<DeploymentAction>();\n        try {\n            DeploymentPlanBuilder builder = deploymentManager.newDeploymentPlan();\n            AddDeploymentPlanBuilder addBuilder = builder.add(runtimeName, input);\n            actions.add(addBuilder.getLastAction());\n            ReplaceDeploymentPlanBuilder replaceBuilder = addBuilder.andReplace(replaceName);\n            actions.add(replaceBuilder.getLastAction());\n            if (removeUndeployed) {\n                builder = replaceBuilder.andRemoveUndeployed();\n                actions.add(builder.getLastAction());\n            } else {\n                builder = replaceBuilder;\n            }\n            DeploymentPlan plan = builder.build();\n            Future<ServerDeploymentPlanResult> future = deploymentManager.execute(plan);\n            planResult = future.get();\n        } catch (Exception ex) {\n            throw new ServerDeploymentException(ex);\n        }\n        for (DeploymentAction action : actions) {\n            ServerDeploymentActionResult actionResult = planResult.getDeploymentActionResult(action.getId());\n            if (actionResult.getDeploymentException() != null)\n                throw new ServerDeploymentException(actionResult);\n        }\n        return runtimeName;\n    }","commit_id":"cf89d818e96b95df4cd6fb004169d4a2ba5eda0f","url":"https://github.com/wildfly/wildfly"},{"original_method":"private ServerDeploymentActionResult getActionResult(UUID actionId, ModelNode actionResultNode) {\n        ServerDeploymentActionResult actionResult = null;\n        String outcome = actionResultNode.get(\"outcome\").asString();\n        if (\"cancelled\".equals(outcome)) {\n            actionResult = new SimpleServerDeploymentActionResult(actionId, Result.NOT_EXECUTED);\n        } else if (\"failed\".equals(outcome)) {\n            Exception e = actionResultNode.hasDefined(\"failure-description\") ? new Exception(actionResultNode.get(\"failure-description\").toString()) : null;\n            if (actionResultNode.hasDefined(\"rolled-back\") && actionResultNode.get(\"rolled-back\").asBoolean()) {\n                if (e == null) {\n                    actionResult = new SimpleServerDeploymentActionResult(actionId, Result.ROLLED_BACK);\n                } else {\n                    actionResult = new SimpleServerDeploymentActionResult(actionId, Result.ROLLED_BACK, e);\n                }\n            } else {\n                actionResult = new SimpleServerDeploymentActionResult(actionId, e);\n            }\n        } else {\n            actionResult = new SimpleServerDeploymentActionResult(actionId, Result.EXECUTED);\n        }\n        // FIXME deal with shutdown possibilities\n        return actionResult;\n    }","id":12914,"modified_method":"private ServerDeploymentActionResult getActionResult(UUID actionId, ModelNode actionResultNode) {\n        ServerDeploymentActionResult actionResult = null;\n        String outcome = actionResultNode.hasDefined(\"outcome\") ? actionResultNode.get(\"outcome\").asString() : null;\n        if (outcome == null || \"cancelled\".equals(outcome)) {\n            actionResult = new SimpleServerDeploymentActionResult(actionId, Result.NOT_EXECUTED);\n        } else if (\"failed\".equals(outcome)) {\n            Exception e = actionResultNode.hasDefined(\"failure-description\") ? new Exception(actionResultNode.get(\"failure-description\").toString()) : null;\n            if (actionResultNode.hasDefined(\"rolled-back\") && actionResultNode.get(\"rolled-back\").asBoolean()) {\n                if (e == null) {\n                    actionResult = new SimpleServerDeploymentActionResult(actionId, Result.ROLLED_BACK);\n                } else {\n                    actionResult = new SimpleServerDeploymentActionResult(actionId, Result.ROLLED_BACK, e);\n                }\n            } else {\n                actionResult = new SimpleServerDeploymentActionResult(actionId, e);\n            }\n        } else {\n            actionResult = new SimpleServerDeploymentActionResult(actionId, Result.EXECUTED);\n        }\n        // FIXME deal with shutdown possibilities\n        return actionResult;\n    }","commit_id":"cf89d818e96b95df4cd6fb004169d4a2ba5eda0f","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n\t * Parse submitted data from a bucket.\n\t * Note that if this is application/x-www-form-urlencoded, it will come out as\n\t * params, whereas if it is multipart/form-data it will be separated into buckets.\n\t */\n\tprivate void parseMultiPartData() throws IOException {\n\t\tif(data == null) return;\n\t\tString ctype = (String) this.headers.get(\"content-type\");\n\t\tif (ctype == null) return;\n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Uploaded content-type: \"+ctype);\n\t\tString[] ctypeparts = ctype.split(\";\");\n\t\tif(ctypeparts[0].equalsIgnoreCase(\"application/x-www-form-urlencoded\")) {\n\t\t\t// Completely different encoding, but easy to handle\n\t\t\tif(data.size() > 1024*1024)\n\t\t\t\tthrow new IOException(\"Too big\");\n\t\t\tbyte[] buf = BucketTools.toByteArray(data);\n\t\t\tString s = new String(buf, \"us-ascii\");\n\t\t\tparseRequestParameters(s, true, true);\n\t\t}\n\t\tif (!ctypeparts[0].trim().equalsIgnoreCase(\"multipart/form-data\") || (ctypeparts.length < 2)) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tString boundary = null;\n\t\tfor (int i = 0; i < ctypeparts.length; i++) {\n\t\t\tString[] subparts = ctypeparts[i].split(\"=\");\n\t\t\tif ((subparts.length == 2) && subparts[0].trim().equalsIgnoreCase(\"boundary\")) {\n\t\t\t\tboundary = subparts[1];\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((boundary == null) || (boundary.length() == 0)) return;\n\t\tif (boundary.charAt(0) == '\"') boundary = boundary.substring(1);\n\t\tif (boundary.charAt(boundary.length() - 1) == '\"')\n\t\t\tboundary = boundary.substring(0, boundary.length() - 1);\n\t\t\n\t\tboundary = \"--\"+boundary;\n\t\t\n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Boundary is: \"+boundary);\n\t\t\n\t\tInputStream is = this.data.getInputStream();\n\t\tBufferedInputStream bis = new BufferedInputStream(is, 32768);\n\t\tLineReadingInputStream lis = new LineReadingInputStream(bis);\n\t\t\n\t\tString line;\n\t\tline = lis.readLine(100, 100, false); // really it's US-ASCII, but ISO-8859-1 is close enough.\n\t\twhile ((bis.available() > 0) && !line.equals(boundary)) {\n\t\t\tline = lis.readLine(100, 100, false);\n\t\t}\n\t\t\n\t\tboundary  = \"\\r\\n\"+boundary;\n\t\t\n\t\tBucket filedata = null;\n\t\tString name = null;\n\t\tString filename = null;\n\t\tString contentType = null;\n\t\t\n\t\twhile(bis.available() > 0) {\n\t\t\tname = null;\n\t\t\tfilename = null;\n\t\t\tcontentType = null;\n\t\t\t// chomp headers\n\t\t\twhile( (line = lis.readLine(200, 200, true)) /* should be UTF-8 as we told the browser to send UTF-8 */ != null) {\n\t\t\t\tif (line.length() == 0) break;\n\t\t\t\t\n\t\t\t\tString[] lineparts = line.split(\":\");\n\t\t\t\tif (lineparts == null || lineparts.length == 0) continue;\n\t\t\t\tString hdrname = lineparts[0].trim();\n\t\t\t\t\n\t\t\t\tif (hdrname.equalsIgnoreCase(\"Content-Disposition\")) {\n\t\t\t\t\tif (lineparts.length < 2) continue;\n\t\t\t\t\tString[] valueparts = lineparts[1].split(\";\");\n\t\t\t\t\t\n\t\t\t\t\tfor (int i = 0; i < valueparts.length; i++) {\n\t\t\t\t\t\tString[] subparts = valueparts[i].split(\"=\");\n\t\t\t\t\t\tif (subparts.length != 2) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tString fieldname = subparts[0].trim();\n\t\t\t\t\t\tString value = subparts[1].trim();\n\t\t\t\t\t\tif (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")) {\n\t\t\t\t\t\t\tvalue = value.substring(1, value.length() - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (fieldname.equalsIgnoreCase(\"name\")) {\n\t\t\t\t\t\t\tname = value;\n\t\t\t\t\t\t} else if (fieldname.equalsIgnoreCase(\"filename\")) {\n\t\t\t\t\t\t\tfilename = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (hdrname.equalsIgnoreCase(\"Content-Type\")) {\n\t\t\t\t\tcontentType = lineparts[1].trim();\n\t\t\t\t\tif(Logger.shouldLog(Logger.MINOR, this)) Logger.minor(this, \"Parsed type: \"+contentType);\n\t\t\t\t} else {\n\t\t\t\t\t// Do nothing, irrelevant header\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (name == null) continue;\n\t\t\t\n\t\t\t// we should be at the data now. Start reading it in, checking for the\n\t\t\t// boundary string\n\t\t\t\n\t\t\t// we can only give an upper bound for the size of the bucket\n\t\t\tfiledata = this.bucketfactory.makeBucket(bis.available());\n\t\t\tOutputStream bucketos = filedata.getOutputStream();\n\t\t\tOutputStream bbos = new BufferedOutputStream(bucketos, 32768);\n\t\t\t// buffer characters that match the boundary so far\n\t\t\t// FIXME use whatever charset was used\n\t\t\tbyte[] bbound = boundary.getBytes(\"UTF-8\"); // ISO-8859-1? boundary should be in US-ASCII\n\t\t\tint offset = 0;\n\t\t\twhile ((bis.available() > 0) && (offset < bbound.length)) {\n\t\t\t\tbyte b = (byte)bis.read();\n\t\t\t\t\n\t\t\t\tif (b == bbound[offset]) {\n\t\t\t\t\toffset++;\n\t\t\t\t} else if ((b != bbound[offset]) && (offset > 0)) {\n\t\t\t\t\t// offset bytes matched, but no more\n\t\t\t\t\t// write the bytes that matched, then the non-matching byte\n\t\t\t\t\tbbos.write(bbound, 0, offset);\n\t\t\t\t\tbbos.write((int) b & 0xff);\n\t\t\t\t\toffset = 0;\n\t\t\t\t} else {\n\t\t\t\t\tbbos.write((int) b & 0xff);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tbbos.close();\n\t\t\t\n\t\t\tparts.put(name, filedata);\n\t\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\tLogger.minor(this, \"Name = \"+name+\" length = \"+filedata.size()+\" filename = \"+filename);\n\t\t\tif (filename != null) {\n\t\t\t\tuploadedFiles.put(name, new HTTPUploadedFileImpl(filename, contentType, filedata));\n\t\t\t}\n\t\t}\n\t\t\n\t\tbis.close();\n\t}","id":12915,"modified_method":"/**\n\t * Parse submitted data from a bucket.\n\t * Note that if this is application/x-www-form-urlencoded, it will come out as\n\t * params, whereas if it is multipart/form-data it will be separated into buckets.\n\t */\n\tprivate void parseMultiPartData() throws IOException {\n\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tif(data == null) return;\n\t\tString ctype = (String) this.headers.get(\"content-type\");\n\t\tif (ctype == null) return;\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Uploaded content-type: \"+ctype);\n\t\tString[] ctypeparts = ctype.split(\";\");\n\t\tif(ctypeparts[0].equalsIgnoreCase(\"application/x-www-form-urlencoded\")) {\n\t\t\t// Completely different encoding, but easy to handle\n\t\t\tif(data.size() > 1024*1024)\n\t\t\t\tthrow new IOException(\"Too big\");\n\t\t\tbyte[] buf = BucketTools.toByteArray(data);\n\t\t\tString s = new String(buf, \"us-ascii\");\n\t\t\tparseRequestParameters(s, true, true);\n\t\t}\n\t\tif (!ctypeparts[0].trim().equalsIgnoreCase(\"multipart/form-data\") || (ctypeparts.length < 2)) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tString boundary = null;\n\t\tfor (int i = 0; i < ctypeparts.length; i++) {\n\t\t\tString[] subparts = ctypeparts[i].split(\"=\");\n\t\t\tif ((subparts.length == 2) && subparts[0].trim().equalsIgnoreCase(\"boundary\")) {\n\t\t\t\tboundary = subparts[1];\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((boundary == null) || (boundary.length() == 0)) return;\n\t\tif (boundary.charAt(0) == '\"') boundary = boundary.substring(1);\n\t\tif (boundary.charAt(boundary.length() - 1) == '\"')\n\t\t\tboundary = boundary.substring(0, boundary.length() - 1);\n\t\t\n\t\tboundary = \"--\"+boundary;\n\t\t\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Boundary is: \"+boundary);\n\t\t\n\t\tInputStream is = this.data.getInputStream();\n\t\tBufferedInputStream bis = new BufferedInputStream(is, 32768);\n\t\tLineReadingInputStream lis = new LineReadingInputStream(bis);\n\t\t\n\t\tString line;\n\t\tline = lis.readLine(100, 100, false); // really it's US-ASCII, but ISO-8859-1 is close enough.\n\t\twhile ((bis.available() > 0) && !line.equals(boundary)) {\n\t\t\tline = lis.readLine(100, 100, false);\n\t\t}\n\t\t\n\t\tboundary  = \"\\r\\n\"+boundary;\n\t\t\n\t\tBucket filedata = null;\n\t\tString name = null;\n\t\tString filename = null;\n\t\tString contentType = null;\n\t\t\n\t\twhile(bis.available() > 0) {\n\t\t\tname = null;\n\t\t\tfilename = null;\n\t\t\tcontentType = null;\n\t\t\t// chomp headers\n\t\t\twhile( (line = lis.readLine(200, 200, true)) /* should be UTF-8 as we told the browser to send UTF-8 */ != null) {\n\t\t\t\tif (line.length() == 0) break;\n\t\t\t\t\n\t\t\t\tString[] lineparts = line.split(\":\");\n\t\t\t\tif (lineparts == null || lineparts.length == 0) continue;\n\t\t\t\tString hdrname = lineparts[0].trim();\n\t\t\t\t\n\t\t\t\tif (hdrname.equalsIgnoreCase(\"Content-Disposition\")) {\n\t\t\t\t\tif (lineparts.length < 2) continue;\n\t\t\t\t\tString[] valueparts = lineparts[1].split(\";\");\n\t\t\t\t\t\n\t\t\t\t\tfor (int i = 0; i < valueparts.length; i++) {\n\t\t\t\t\t\tString[] subparts = valueparts[i].split(\"=\");\n\t\t\t\t\t\tif (subparts.length != 2) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tString fieldname = subparts[0].trim();\n\t\t\t\t\t\tString value = subparts[1].trim();\n\t\t\t\t\t\tif (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")) {\n\t\t\t\t\t\t\tvalue = value.substring(1, value.length() - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (fieldname.equalsIgnoreCase(\"name\")) {\n\t\t\t\t\t\t\tname = value;\n\t\t\t\t\t\t} else if (fieldname.equalsIgnoreCase(\"filename\")) {\n\t\t\t\t\t\t\tfilename = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (hdrname.equalsIgnoreCase(\"Content-Type\")) {\n\t\t\t\t\tcontentType = lineparts[1].trim();\n\t\t\t\t\tif(Logger.shouldLog(Logger.MINOR, this)) Logger.minor(this, \"Parsed type: \"+contentType);\n\t\t\t\t} else {\n\t\t\t\t\t// Do nothing, irrelevant header\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (name == null) continue;\n\t\t\t\n\t\t\t// we should be at the data now. Start reading it in, checking for the\n\t\t\t// boundary string\n\t\t\t\n\t\t\t// we can only give an upper bound for the size of the bucket\n\t\t\tfiledata = this.bucketfactory.makeBucket(bis.available());\n\t\t\tOutputStream bucketos = filedata.getOutputStream();\n\t\t\tOutputStream bbos = new BufferedOutputStream(bucketos, 32768);\n\t\t\t// buffer characters that match the boundary so far\n\t\t\t// FIXME use whatever charset was used\n\t\t\tbyte[] bbound = boundary.getBytes(\"UTF-8\"); // ISO-8859-1? boundary should be in US-ASCII\n\t\t\tint offset = 0;\n\t\t\twhile ((bis.available() > 0) && (offset < bbound.length)) {\n\t\t\t\tbyte b = (byte)bis.read();\n\t\t\t\t\n\t\t\t\tif (b == bbound[offset]) {\n\t\t\t\t\toffset++;\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Matched \"+offset+\" of \"+bbound.length+\" : \"+b);\n\t\t\t\t} else if ((b != bbound[offset]) && (offset > 0)) {\n\t\t\t\t\t// offset bytes matched, but no more\n\t\t\t\t\t// write the bytes that matched, then the non-matching byte\n\t\t\t\t\tbbos.write(bbound, 0, offset);\n\t\t\t\t\tbbos.write((int) b & 0xff);\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Partial match: \"+offset+\" of \"+bbound.length+\" matched, no more because b = \"+b);\n\t\t\t\t\toffset = 0;\n\t\t\t\t} else {\n\t\t\t\t\tbbos.write((int) b & 0xff);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tbbos.close();\n\t\t\t\n\t\t\tparts.put(name, filedata);\n\t\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\tLogger.minor(this, \"Name = \"+name+\" length = \"+filedata.size()+\" filename = \"+filename);\n\t\t\tif (filename != null) {\n\t\t\t\tuploadedFiles.put(name, new HTTPUploadedFileImpl(filename, contentType, filedata));\n\t\t\t}\n\t\t}\n\t\t\n\t\tbis.close();\n\t}","commit_id":"481f6e3ac749efdf72c23679ba595f3de0ad2924","url":"https://github.com/freenet/fred"},{"original_method":"public void add(RandomGrabArrayItem req) {\n\t\tif(req.isCancelled()) {\n\t\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\tLogger.minor(this, \"Is finished already: \"+req);\n\t\t\treturn;\n\t\t}\n\t\treq.setParentGrabArray(this);\n\t\tsynchronized(this) {\n\t\t\tif(contents.contains(req)) return;\n\t\t\tcontents.add(req);\n\t\t\tif(index >= reqs.length) {\n\t\t\t\tRandomGrabArrayItem[] r = new RandomGrabArrayItem[reqs.length*2];\n\t\t\t\tSystem.arraycopy(reqs, 0, r, 0, reqs.length);\n\t\t\t\treqs = r;\n\t\t\t}\n\t\t\treqs[index++] = req;\n\t\t}\n\t}","id":12916,"modified_method":"public void add(RandomGrabArrayItem req) {\n\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tif(req.isCancelled()) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Is finished already: \"+req);\n\t\t\treturn;\n\t\t}\n\t\treq.setParentGrabArray(this);\n\t\tsynchronized(this) {\n\t\t\tif(contents.contains(req)) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Already contains \"+req+\" : \"+this+\" size now \"+index);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcontents.add(req);\n\t\t\tif(index >= reqs.length) {\n\t\t\t\tRandomGrabArrayItem[] r = new RandomGrabArrayItem[reqs.length*2];\n\t\t\t\tSystem.arraycopy(reqs, 0, r, 0, reqs.length);\n\t\t\t\treqs = r;\n\t\t\t}\n\t\t\treqs[index++] = req;\n\t\t\tif(logMINOR) Logger.minor(this, \"Added: \"+req+\" to \"+this+\" size now \"+index);\n\t\t}\n\t}","commit_id":"c1809f9d040682ec75bab90abd5a54f0a11d9899","url":"https://github.com/freenet/fred"},{"original_method":"/**\n\t * Add directly to a RandomGrabArrayWithClient under us. */\n\tpublic synchronized void add(Object client, RandomGrabArrayItem item) {\n\t\tRandomGrabArrayWithClient rga;\n\t\tif(!grabArraysByClient.containsKey(client)) {\n\t\t\trga = new RandomGrabArrayWithClient(client, rand);\n\t\t\tRemoveRandomWithClient[] newArrays = new RemoveRandomWithClient[grabArrays.length+1];\n\t\t\tSystem.arraycopy(grabArrays, 0, newArrays, 0, grabArrays.length);\n\t\t\tnewArrays[grabArrays.length] = rga;\n\t\t\tgrabArrays = newArrays;\n\t\t\tgrabArraysByClient.put(client, rga);\n\t\t} else {\n\t\t\trga = (RandomGrabArrayWithClient) grabArraysByClient.get(client);\n\t\t}\n\t\trga.add(item);\n\t}","id":12917,"modified_method":"/**\n\t * Add directly to a RandomGrabArrayWithClient under us. */\n\tpublic synchronized void add(Object client, RandomGrabArrayItem item) {\n\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tRandomGrabArrayWithClient rga;\n\t\tif(!grabArraysByClient.containsKey(client)) {\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Adding new RGAWithClient for \"+client+\" on \"+this+\" for \"+item);\n\t\t\trga = new RandomGrabArrayWithClient(client, rand);\n\t\t\tRemoveRandomWithClient[] newArrays = new RemoveRandomWithClient[grabArrays.length+1];\n\t\t\tSystem.arraycopy(grabArrays, 0, newArrays, 0, grabArrays.length);\n\t\t\tnewArrays[grabArrays.length] = rga;\n\t\t\tgrabArrays = newArrays;\n\t\t\tgrabArraysByClient.put(client, rga);\n\t\t} else {\n\t\t\trga = (RandomGrabArrayWithClient) grabArraysByClient.get(client);\n\t\t}\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Adding \"+item+\" to RGA \"+rga+\" for \"+client);\n\t\trga.add(item);\n\t}","commit_id":"c1809f9d040682ec75bab90abd5a54f0a11d9899","url":"https://github.com/freenet/fred"},{"original_method":"/** Start the insert.\n\t * @param earlyEncode If true, try to find the final URI as quickly as possible, and insert the upper\n\t * layers as soon as we can, rather than waiting for the lower layers. The default behaviour is safer,\n\t * because an attacker can usually only identify the datastream once he has the top block, or once you\n\t * have announced the key.\n\t * @param restart If true, restart the insert even though it has completed before.\n\t * @param container The database. If the insert is persistent, this must be non-null, and we must be \n\t * running on the database thread. This is true for all methods taking a container parameter.\n\t * @param context Contains some useful transient fields such as the schedulers.\n\t * @throws InsertException If the insert cannot be started for some reason.\n\t */\n\tpublic boolean start(boolean earlyEncode, boolean restart, ObjectContainer container, ClientContext context) throws InsertException {\n\t\tif(persistent())\n\t\t\tcontainer.activate(client, 1);\n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Starting \"+this);\n\t\ttry {\n\t\t\tthis.targetURI.checkInsertURI();\n\t\t\t\n\t\t\tif(data == null)\n\t\t\t\tthrow new InsertException(InsertException.BUCKET_ERROR, \"No data to insert\", null);\n\t\t\t\n\t\t\tboolean cancel = false;\n\t\t\tsynchronized(this) {\n\t\t\t\tif(restart) {\n\t\t\t\t\tif(currentState != null && !finished) return false;\n\t\t\t\t\tfinished = false;\n\t\t\t\t}\n\t\t\t\tif(startedStarting) return false;\n\t\t\t\tstartedStarting = true;\n\t\t\t\tif(currentState != null) return false;\n\t\t\t\tcancel = this.cancelled;\n\t\t\t\tif(!cancel) {\n\t\t\t\t\tif(!binaryBlob) {\n\t\t\t\t\t\tClientMetadata meta = cm;\n\t\t\t\t\t\tif(meta != null) meta = persistent() ? meta.clone() : meta; \n\t\t\t\t\t\tcurrentState =\n\t\t\t\t\t\t\tnew SingleFileInserter(this, this, new InsertBlock(data, meta, persistent() ? targetURI.clone() : targetURI), isMetadata, ctx, \n\t\t\t\t\t\t\t\t\tfalse, getCHKOnly, false, null, null, false, targetFilename, earlyEncode);\n\t\t\t\t\t} else\n\t\t\t\t\t\tcurrentState =\n\t\t\t\t\t\t\tnew BinaryBlobInserter(data, this, null, false, priorityClass, ctx, context, container);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cancel) {\n\t\t\t\tonFailure(new InsertException(InsertException.CANCELLED), null, container, context);\n\t\t\t\toldProgress = null;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tsynchronized(this) {\n\t\t\t\tcancel = cancelled;\n\t\t\t}\n\t\t\tif(cancel) {\n\t\t\t\tonFailure(new InsertException(InsertException.CANCELLED), null, container, context);\n\t\t\t\toldProgress = null;\n\t\t\t\tif(persistent())\n\t\t\t\t\tcontainer.store(this);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\tLogger.minor(this, \"Starting insert: \"+currentState);\n\t\t\tif(currentState instanceof SingleFileInserter)\n\t\t\t\t((SingleFileInserter)currentState).start(oldProgress, container, context);\n\t\t\telse\n\t\t\t\tcurrentState.schedule(container, context);\n\t\t\tsynchronized(this) {\n\t\t\t\toldProgress = null;\n\t\t\t\tcancel = cancelled;\n\t\t\t}\n\t\t\tif(persistent()) {\n\t\t\t\tcontainer.store(this);\n\t\t\t\t// It has scheduled, we can safely deactivate it now, so it won't hang around in memory.\n\t\t\t\tcontainer.deactivate(currentState, 1);\n\t\t\t}\n\t\t\tif(cancel) {\n\t\t\t\tonFailure(new InsertException(InsertException.CANCELLED), null, container, context);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (InsertException e) {\n\t\t\tLogger.error(this, \"Failed to start insert: \"+e, e);\n\t\t\tsynchronized(this) {\n\t\t\t\tfinished = true;\n\t\t\t\toldProgress = null;\n\t\t\t\tcurrentState = null;\n\t\t\t}\n\t\t\tif(persistent())\n\t\t\t\tcontainer.store(this);\n\t\t\t// notify the client that the insert could not even be started\n\t\t\tif (this.client!=null) {\n\t\t\t\tthis.client.onFailure(e, this, container);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tLogger.error(this, \"Failed to start insert: \"+e, e);\n\t\t\tsynchronized(this) {\n\t\t\t\tfinished = true;\n\t\t\t\toldProgress = null;\n\t\t\t\tcurrentState = null;\n\t\t\t}\n\t\t\tif(persistent())\n\t\t\t\tcontainer.store(this);\n\t\t\t// notify the client that the insert could not even be started\n\t\t\tif (this.client!=null) {\n\t\t\t\tthis.client.onFailure(new InsertException(InsertException.BUCKET_ERROR, e, null), this, container);\n\t\t\t}\n\t\t} catch (BinaryBlobFormatException e) {\n\t\t\tLogger.error(this, \"Failed to start insert: \"+e, e);\n\t\t\tsynchronized(this) {\n\t\t\t\tfinished = true;\n\t\t\t\toldProgress = null;\n\t\t\t\tcurrentState = null;\n\t\t\t}\n\t\t\tif(persistent())\n\t\t\t\tcontainer.store(this);\n\t\t\t// notify the client that the insert could not even be started\n\t\t\tif (this.client!=null) {\n\t\t\t\tthis.client.onFailure(new InsertException(InsertException.BINARY_BLOB_FORMAT_ERROR, e, null), this, container);\n\t\t\t}\n\t\t} \n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Started \"+this);\n\t\treturn true;\n\t}","id":12918,"modified_method":"/** Start the insert.\n\t * @param earlyEncode If true, try to find the final URI as quickly as possible, and insert the upper\n\t * layers as soon as we can, rather than waiting for the lower layers. The default behaviour is safer,\n\t * because an attacker can usually only identify the datastream once he has the top block, or once you\n\t * have announced the key.\n\t * @param restart If true, restart the insert even though it has completed before.\n\t * @param container The database. If the insert is persistent, this must be non-null, and we must be \n\t * running on the database thread. This is true for all methods taking a container parameter.\n\t * @param context Contains some useful transient fields such as the schedulers.\n\t * @throws InsertException If the insert cannot be started for some reason.\n\t */\n\tpublic boolean start(boolean earlyEncode, boolean restart, ObjectContainer container, ClientContext context) throws InsertException {\n\t\tif(persistent())\n\t\t\tcontainer.activate(client, 1);\n\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Starting \"+this);\n\t\ttry {\n\t\t\tthis.targetURI.checkInsertURI();\n\t\t\t\n\t\t\tif(data == null)\n\t\t\t\tthrow new InsertException(InsertException.BUCKET_ERROR, \"No data to insert\", null);\n\t\t\t\n\t\t\tboolean cancel = false;\n\t\t\tsynchronized(this) {\n\t\t\t\tif(restart) {\n\t\t\t\t\tif(currentState != null && !finished) {\n\t\t\t\t\t\tif(logMINOR) Logger.minor(this, \"Can't restart, not finished and currentState != null : \"+currentState);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tfinished = false;\n\t\t\t\t}\n\t\t\t\tif(startedStarting) {\n\t\t\t\t\tif(logMINOR) Logger.minor(this, \"Can't \"+(restart?\"restart\":\"start\")+\" : startedStarting = true\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tstartedStarting = true;\n\t\t\t\tif(currentState != null) {\n\t\t\t\t\tif(logMINOR) Logger.minor(this, \"Can't \"+(restart?\"restart\":\"start\")+\" : currentState != null : \"+currentState);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tcancel = this.cancelled;\n\t\t\t\tif(!cancel) {\n\t\t\t\t\tif(!binaryBlob) {\n\t\t\t\t\t\tClientMetadata meta = cm;\n\t\t\t\t\t\tif(meta != null) meta = persistent() ? meta.clone() : meta; \n\t\t\t\t\t\tcurrentState =\n\t\t\t\t\t\t\tnew SingleFileInserter(this, this, new InsertBlock(data, meta, persistent() ? targetURI.clone() : targetURI), isMetadata, ctx, \n\t\t\t\t\t\t\t\t\tfalse, getCHKOnly, false, null, null, false, targetFilename, earlyEncode);\n\t\t\t\t\t} else\n\t\t\t\t\t\tcurrentState =\n\t\t\t\t\t\t\tnew BinaryBlobInserter(data, this, null, false, priorityClass, ctx, context, container);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cancel) {\n\t\t\t\tonFailure(new InsertException(InsertException.CANCELLED), null, container, context);\n\t\t\t\toldProgress = null;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tsynchronized(this) {\n\t\t\t\tcancel = cancelled;\n\t\t\t}\n\t\t\tif(cancel) {\n\t\t\t\tonFailure(new InsertException(InsertException.CANCELLED), null, container, context);\n\t\t\t\toldProgress = null;\n\t\t\t\tif(persistent())\n\t\t\t\t\tcontainer.store(this);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\tLogger.minor(this, \"Starting insert: \"+currentState);\n\t\t\tif(currentState instanceof SingleFileInserter)\n\t\t\t\t((SingleFileInserter)currentState).start(oldProgress, container, context);\n\t\t\telse\n\t\t\t\tcurrentState.schedule(container, context);\n\t\t\tsynchronized(this) {\n\t\t\t\toldProgress = null;\n\t\t\t\tcancel = cancelled;\n\t\t\t}\n\t\t\tif(persistent()) {\n\t\t\t\tcontainer.store(this);\n\t\t\t\t// It has scheduled, we can safely deactivate it now, so it won't hang around in memory.\n\t\t\t\tcontainer.deactivate(currentState, 1);\n\t\t\t}\n\t\t\tif(cancel) {\n\t\t\t\tonFailure(new InsertException(InsertException.CANCELLED), null, container, context);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (InsertException e) {\n\t\t\tLogger.error(this, \"Failed to start insert: \"+e, e);\n\t\t\tsynchronized(this) {\n\t\t\t\tfinished = true;\n\t\t\t\toldProgress = null;\n\t\t\t\tcurrentState = null;\n\t\t\t}\n\t\t\tif(persistent())\n\t\t\t\tcontainer.store(this);\n\t\t\t// notify the client that the insert could not even be started\n\t\t\tif (this.client!=null) {\n\t\t\t\tthis.client.onFailure(e, this, container);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tLogger.error(this, \"Failed to start insert: \"+e, e);\n\t\t\tsynchronized(this) {\n\t\t\t\tfinished = true;\n\t\t\t\toldProgress = null;\n\t\t\t\tcurrentState = null;\n\t\t\t}\n\t\t\tif(persistent())\n\t\t\t\tcontainer.store(this);\n\t\t\t// notify the client that the insert could not even be started\n\t\t\tif (this.client!=null) {\n\t\t\t\tthis.client.onFailure(new InsertException(InsertException.BUCKET_ERROR, e, null), this, container);\n\t\t\t}\n\t\t} catch (BinaryBlobFormatException e) {\n\t\t\tLogger.error(this, \"Failed to start insert: \"+e, e);\n\t\t\tsynchronized(this) {\n\t\t\t\tfinished = true;\n\t\t\t\toldProgress = null;\n\t\t\t\tcurrentState = null;\n\t\t\t}\n\t\t\tif(persistent())\n\t\t\t\tcontainer.store(this);\n\t\t\t// notify the client that the insert could not even be started\n\t\t\tif (this.client!=null) {\n\t\t\t\tthis.client.onFailure(new InsertException(InsertException.BINARY_BLOB_FORMAT_ERROR, e, null), this, container);\n\t\t\t}\n\t\t} \n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Started \"+this);\n\t\treturn true;\n\t}","commit_id":"ff1e3cef607377128c07af594f56d661f688eacb","url":"https://github.com/freenet/fred"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    public void execute(NewOperationContext context, ModelNode operation) {\n        final BoundedOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseBoundedThreadPoolOperationParameters(operation);\n\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        //Apply to the model\n        final ModelNode model = context.readModelForUpdate(PathAddress.EMPTY_ADDRESS);\n        model.get(NAME).set(name);\n        if (params.getThreadFactory() != null) {\n            model.get(THREAD_FACTORY).set(params.getThreadFactory());\n        }\n        if (params.getProperties() != null && params.getProperties().asList().size() > 0) {\n            model.get(PROPERTIES).set(params.getProperties());\n        }\n        if (params.getMaxThreads() != null) {\n            model.get(MAX_THREADS).set(operation.get(MAX_THREADS));\n        }\n        if (params.getKeepAliveTime() != null) {\n            model.get(KEEPALIVE_TIME).set(operation.get(KEEPALIVE_TIME));\n        }\n\n        model.get(BLOCKING).set(params.isBlocking());\n        if (params.getHandoffExecutor() != null) {\n            model.get(HANDOFF_EXECUTOR).set(params.getHandoffExecutor());\n        }\n        model.get(ALLOW_CORE_TIMEOUT).set(params.isAllowCoreTimeout());\n        if (params.getQueueLength() != null) {\n            model.get(QUEUE_LENGTH).set(operation.get(QUEUE_LENGTH));\n        }\n\n        if (params.getCoreThreads() != null) {\n            model.get(CORE_THREADS).set(operation.get(CORE_THREADS));\n        }\n\n        if (context.getType() == NewOperationContext.Type.SERVER) {\n            context.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) {\n                    final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n                    ServiceTarget target = context.getServiceTarget();\n                    final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n                    final BoundedQueueThreadPoolService service = new BoundedQueueThreadPoolService(\n                            params.getCoreThreads().getScaledCount(),\n                            params.getMaxThreads().getScaledCount(),\n                            params.getQueueLength().getScaledCount(),\n                            params.isBlocking(),\n                            params.getKeepAliveTime(),\n                            params.isAllowCoreTimeout());\n\n                    //TODO add the handoffExceutor injection\n\n                    final ServiceBuilder<Executor> serviceBuilder = target.addService(serviceName, service);\n                    ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n                    serviceBuilder.addListener(verificationHandler);\n                    serviceBuilder.install();\n\n                    context.addStep(verificationHandler, NewOperationContext.Stage.VERIFY);\n\n                    if (context.completeStep() == NewOperationContext.ResultAction.ROLLBACK) {\n                        context.removeService(serviceName);\n                    }\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":12919,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    public void execute(NewOperationContext context, ModelNode operation) throws OperationFailedException {\n        final BoundedOperationParameters params = ThreadsSubsystemThreadPoolOperationUtils.parseBoundedThreadPoolOperationParameters(operation);\n\n        final PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n        final String name = address.getLastElement().getValue();\n\n        //Apply to the model\n        final ModelNode model = context.readModelForUpdate(PathAddress.EMPTY_ADDRESS);\n        model.get(NAME).set(name);\n        if (params.getThreadFactory() != null) {\n            model.get(THREAD_FACTORY).set(params.getThreadFactory());\n        }\n        if (params.getProperties() != null && params.getProperties().asList().size() > 0) {\n            model.get(PROPERTIES).set(params.getProperties());\n        }\n        if (params.getMaxThreads() != null) {\n            model.get(MAX_THREADS).set(operation.get(MAX_THREADS));\n        }\n\n        if (params.getKeepAliveTime() != null) {\n            model.get(KEEPALIVE_TIME).set(operation.get(KEEPALIVE_TIME));\n        }\n\n        model.get(BLOCKING).set(params.isBlocking());\n        if (params.getHandoffExecutor() != null) {\n            model.get(HANDOFF_EXECUTOR).set(params.getHandoffExecutor());\n        }\n        model.get(ALLOW_CORE_TIMEOUT).set(params.isAllowCoreTimeout());\n        if (params.getQueueLength() != null) {\n            model.get(QUEUE_LENGTH).set(operation.get(QUEUE_LENGTH));\n        } else {\n            throw new OperationFailedException(new ModelNode().set(\"Parameter \" + QUEUE_LENGTH + \" may not be null \"));\n        }\n\n        if (params.getCoreThreads() != null) {\n            model.get(CORE_THREADS).set(operation.get(CORE_THREADS));\n        }\n\n        if (context.getType() == NewOperationContext.Type.SERVER) {\n            context.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) {\n                    final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n                    ServiceTarget target = context.getServiceTarget();\n                    final int coreThreads =  params.getCoreThreads() == null ? params.getMaxThreads().getScaledCount() : params.getCoreThreads().getScaledCount();\n                    final ServiceName serviceName = ThreadsServices.executorName(params.getName());\n                    final BoundedQueueThreadPoolService service = new BoundedQueueThreadPoolService(\n                            coreThreads,\n                            params.getMaxThreads().getScaledCount(),\n                            params.getQueueLength().getScaledCount(),\n                            params.isBlocking(),\n                            params.getKeepAliveTime(),\n                            params.isAllowCoreTimeout());\n\n                    //TODO add the handoffExceutor injection\n\n                    final ServiceBuilder<Executor> serviceBuilder = target.addService(serviceName, service);\n                    ThreadsSubsystemThreadPoolOperationUtils.addThreadFactoryDependency(params.getThreadFactory(), serviceName, serviceBuilder, service.getThreadFactoryInjector(), target, params.getName() + \"-threads\");\n                    serviceBuilder.addListener(verificationHandler);\n                    serviceBuilder.install();\n\n                    context.addStep(verificationHandler, NewOperationContext.Stage.VERIFY);\n\n                    if (context.completeStep() == NewOperationContext.ResultAction.ROLLBACK) {\n                        context.removeService(serviceName);\n                    }\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"public synchronized void start(final StartContext context) throws StartException {\n        executor = new QueueExecutor(coreThreads, maxThreads, keepAlive.getDuration(), keepAlive.getUnit(), queueLength, threadFactoryValue.getValue(), blocking, handoffExecutorValue.getOptionalValue());\n        executor.setAllowCoreThreadTimeout(allowCoreTimeout);\n        value = JBossExecutors.protectedBlockingExecutor(executor);\n    }","id":12920,"modified_method":"public synchronized void start(final StartContext context) throws StartException {\n        final TimeSpec keepAliveSpec = keepAlive;\n        long keepAliveTime = keepAliveSpec == null ? Long.MAX_VALUE : keepAliveSpec.getUnit().toNanos(keepAliveSpec.getDuration());\n        executor = new QueueExecutor(coreThreads, maxThreads, keepAliveTime, TimeUnit.NANOSECONDS, queueLength, threadFactoryValue.getValue(), blocking, handoffExecutorValue.getOptionalValue());\n        executor.setAllowCoreThreadTimeout(allowCoreTimeout);\n        value = JBossExecutors.protectedBlockingExecutor(executor);\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"public synchronized void start(final StartContext context) throws StartException {\n        final TimeSpec keepAliveSpec = keepAlive;\n        long keepAlive = keepAliveSpec == null ? Long.MAX_VALUE : keepAliveSpec.getDuration();\n        executor = new QueuelessExecutor(threadFactoryValue.getValue(), JBossExecutors.directExecutor(), handoffExecutorValue.getOptionalValue(), keepAlive);\n        executor.setMaxThreads(maxThreads);\n        executor.setBlocking(blocking);\n        value = JBossExecutors.protectedExecutorService(executor);\n    }","id":12921,"modified_method":"public synchronized void start(final StartContext context) throws StartException {\n        final TimeSpec keepAliveSpec = keepAlive;\n        long keepAlive = keepAliveSpec == null ? Long.MAX_VALUE : keepAliveSpec.getUnit().toMillis(keepAliveSpec.getDuration());\n        executor = new QueuelessExecutor(threadFactoryValue.getValue(), JBossExecutors.directExecutor(), handoffExecutorValue.getOptionalValue(), keepAlive);\n        executor.setMaxThreads(maxThreads);\n        executor.setBlocking(blocking);\n        value = JBossExecutors.protectedExecutorService(executor);\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSeveralQueuelessThreadPools() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<queueless-thread-pool name=\\\"test-poolA\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/queueless-thread-pool>\"\n                + \"<queueless-thread-pool name=\\\"test-poolB\\\">\" + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/queueless-thread-pool>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"queueless-thread-pool\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-poolA\", threadFactory.require(\"test-poolA\").require(\"name\").asString());\n        assertEquals(\"test-poolB\", threadFactory.require(\"test-poolB\").require(\"name\").asString());\n    }","id":12922,"modified_method":"@Test\n    public void testSeveralQueuelessThreadPools() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<queueless-thread-pool name=\\\"test-poolA\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/queueless-thread-pool>\"\n                + \"<queueless-thread-pool name=\\\"test-poolB\\\">\" + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/queueless-thread-pool>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"queueless-thread-pool\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-poolA\", threadFactory.require(\"test-poolA\").require(\"name\").asString());\n        assertEquals(\"test-poolB\", threadFactory.require(\"test-poolB\").require(\"name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSimpleThreadFactory() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<thread-factory name=\\\"test-factory\\\"/>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"thread-factory\");\n        assertEquals(1, threadFactory.keys().size());\n        assertEquals(\"test-factory\", threadFactory.require(\"test-factory\").require(\"name\").asString());\n    }","id":12923,"modified_method":"@Test\n    public void testSimpleThreadFactory() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<thread-factory name=\\\"test-factory\\\"/>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"thread-factory\");\n        assertEquals(1, threadFactory.keys().size());\n        assertEquals(\"test-factory\", threadFactory.require(\"test-factory\").require(\"name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSeveralBoundedQueueThreadPools() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<bounded-queue-thread-pool name=\\\"test-poolA\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"   <queue-length count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/bounded-queue-thread-pool>\" + \"<bounded-queue-thread-pool name=\\\"test-poolB\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"   <queue-length count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/bounded-queue-thread-pool>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"bounded-queue-thread-pool\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-poolA\", threadFactory.require(\"test-poolA\").require(\"name\").asString());\n        assertEquals(\"test-poolB\", threadFactory.require(\"test-poolB\").require(\"name\").asString());\n    }","id":12924,"modified_method":"@Test\n    public void testSeveralBoundedQueueThreadPools() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<bounded-queue-thread-pool name=\\\"test-poolA\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"   <queue-length count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/bounded-queue-thread-pool>\" + \"<bounded-queue-thread-pool name=\\\"test-poolB\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"   <queue-length count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/bounded-queue-thread-pool>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"bounded-queue-thread-pool\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-poolA\", threadFactory.require(\"test-poolA\").require(\"name\").asString());\n        assertEquals(\"test-poolB\", threadFactory.require(\"test-poolB\").require(\"name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSeveralUnboundedQueueThreadPools() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<unbounded-queue-thread-pool name=\\\"test-poolA\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/unbounded-queue-thread-pool>\"\n                + \"<unbounded-queue-thread-pool name=\\\"test-poolB\\\">\" + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/unbounded-queue-thread-pool>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"unbounded-queue-thread-pool\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-poolA\", threadFactory.require(\"test-poolA\").require(\"name\").asString());\n        assertEquals(\"test-poolB\", threadFactory.require(\"test-poolB\").require(\"name\").asString());\n    }","id":12925,"modified_method":"@Test\n    public void testSeveralUnboundedQueueThreadPools() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<unbounded-queue-thread-pool name=\\\"test-poolA\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/unbounded-queue-thread-pool>\"\n                + \"<unbounded-queue-thread-pool name=\\\"test-poolB\\\">\" + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/unbounded-queue-thread-pool>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"unbounded-queue-thread-pool\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-poolA\", threadFactory.require(\"test-poolA\").require(\"name\").asString());\n        assertEquals(\"test-poolB\", threadFactory.require(\"test-poolB\").require(\"name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testFullUnboundedQueueThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<unbounded-queue-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"100\\\" per-cpu=\\\"5\\\"/>\" + \"   <keepalive-time time=\\\"1000\\\" unit=\\\"MILLISECONDS\\\"/>\"\n                + \"   <thread-factory name=\\\"test-factory\\\"/>\" + \"   <properties>\"\n                + \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\" + \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\"\n                + \"   <\/properties>\" + \"<\/unbounded-queue-thread-pool>\");\n\n        TestResultHandler handler = new TestResultHandler();\n        controller.executeForResult(updates.get(0));\n        controller.execute(OperationBuilder.Factory.create(updates.get(1)).build(), handler);\n\n        checkFullUnboundedThreadPool();\n    }","id":12926,"modified_method":"@Test\n    public void testFullUnboundedQueueThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\n                \"<thread-factory name=\\\"test-factory\\\"/>\" +\n                \"<unbounded-queue-thread-pool name=\\\"test-pool\\\">\" +\n                \"   <max-threads count=\\\"100\\\" per-cpu=\\\"5\\\"/>\" +\n                \"   <keepalive-time time=\\\"1000\\\" unit=\\\"MILLISECONDS\\\"/>\" +\n                \"   <thread-factory name=\\\"test-factory\\\"/>\" +\n                \"   <properties>\" +\n                \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\" +\n                \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\" +\n                \"   <\/properties>\" +\n                \"<\/unbounded-queue-thread-pool>\");\n\n        executeForResult(updates.get(0));\n        executeForResult(updates.get(1));\n        executeForResult(updates.get(2));\n\n        checkFullUnboundedThreadPool();\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSimpleThreadFactoryInvalidPriorityValue() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<thread-factory name=\\\"test-factory\\\" priority=\\\"12\\\"/>\");\n        assertEquals(2, updates.size());\n        controller.executeForResult(updates.get(0));\n        try {\n            controller.executeForResult(updates.get(1));\n            fail(\"Expected failure for invalid priority\");\n        } catch (OperationFailedException e) {\n        }\n    }","id":12927,"modified_method":"@Test\n    public void testSimpleThreadFactoryInvalidPriorityValue() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<thread-factory name=\\\"test-factory\\\" priority=\\\"12\\\"/>\");\n        assertEquals(2, updates.size());\n        executeForResult(updates.get(0));\n        try {\n            executeForResult(updates.get(1));\n            fail(\"Expected failure for invalid priority\");\n        } catch (OperationFailedException e) {\n        }\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSimpleQueuelessThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<queueless-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/queueless-thread-pool>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadPool = subsystem.require(\"queueless-thread-pool\");\n        assertEquals(1, threadPool.keys().size());\n        assertEquals(\"test-pool\", threadPool.require(\"test-pool\").require(\"name\").asString());\n    }","id":12928,"modified_method":"@Test\n    public void testSimpleQueuelessThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<queueless-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/queueless-thread-pool>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadPool = subsystem.require(\"queueless-thread-pool\");\n        assertEquals(1, threadPool.keys().size());\n        assertEquals(\"test-pool\", threadPool.require(\"test-pool\").require(\"name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSimpleScheduledThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<scheduled-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/scheduled-thread-pool>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadPool = subsystem.require(\"scheduled-thread-pool\");\n        assertEquals(1, threadPool.keys().size());\n        assertEquals(\"test-pool\", threadPool.require(\"test-pool\").require(\"name\").asString());\n    }","id":12929,"modified_method":"@Test\n    public void testSimpleScheduledThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<scheduled-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/scheduled-thread-pool>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadPool = subsystem.require(\"scheduled-thread-pool\");\n        assertEquals(1, threadPool.keys().size());\n        assertEquals(\"test-pool\", threadPool.require(\"test-pool\").require(\"name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testGetModelDescription() throws Exception {\n        ModelNode operation = createOperation(READ_RESOURCE_DESCRIPTION_OPERATION, \"profile\", \"test\");\n        operation.get(RECURSIVE).set(true);\n        operation.get(OPERATIONS).set(true);\n        ModelNode result = controller.executeForResult(operation);\n\n        ModelNode threadsDescription = result.get(CHILDREN, SUBSYSTEM, MODEL_DESCRIPTION, THREADS);\n        assertTrue(threadsDescription.isDefined());\n\n        ModelNode threadFactoryDescription = threadsDescription.get(CHILDREN, THREAD_FACTORY, MODEL_DESCRIPTION, \"*\");\n        assertEquals(ModelType.STRING, threadFactoryDescription.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, threadFactoryDescription.require(ATTRIBUTES).require(GROUP_NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, threadFactoryDescription.require(ATTRIBUTES).require(THREAD_NAME_PATTERN).require(TYPE)\n                .asType());\n        assertEquals(ModelType.INT, threadFactoryDescription.require(ATTRIBUTES).require(PRIORITY).require(TYPE).asType());\n        assertEquals(ModelType.OBJECT, threadFactoryDescription.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());\n\n        ModelNode boundedQueueThreadPoolDesc = threadsDescription.get(CHILDREN, BOUNDED_QUEUE_THREAD_POOL, MODEL_DESCRIPTION,\n                \"*\");\n        assertEquals(ModelType.STRING, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(TYPE)\n                .asType());\n        assertEquals(\n                ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(CORE_THREADS).require(TYPE)\n                .asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(CORE_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(CORE_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(QUEUE_LENGTH).require(TYPE)\n                .asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(QUEUE_LENGTH).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(QUEUE_LENGTH).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(TYPE)\n                .asType());\n        assertEquals(ModelType.LONG, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE)\n                .require(TIME).require(TYPE).asType());\n        assertEquals(ModelType.STRING,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BOOLEAN, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(BLOCKING).require(TYPE).asType());\n        assertEquals(ModelType.BOOLEAN, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(ALLOW_CORE_TIMEOUT)\n                .require(TYPE).asType());\n        assertEquals(ModelType.STRING, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(HANDOFF_EXECUTOR).require(TYPE)\n                .asType());\n\n        ModelNode queueLessThreadPoolDesc = threadsDescription.get(CHILDREN, QUEUELESS_THREAD_POOL, MODEL_DESCRIPTION, \"*\");\n        assertEquals(ModelType.STRING, queueLessThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, queueLessThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, queueLessThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());\n        assertEquals(\n                ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.LONG, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE)\n                .require(TIME).require(TYPE).asType());\n        assertEquals(ModelType.STRING,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BOOLEAN, queueLessThreadPoolDesc.require(ATTRIBUTES).require(BLOCKING).require(TYPE).asType());\n        assertEquals(ModelType.STRING, queueLessThreadPoolDesc.require(ATTRIBUTES).require(HANDOFF_EXECUTOR).require(TYPE)\n                .asType());\n\n        ModelNode scheduledThreadPoolDesc = threadsDescription.get(CHILDREN, SCHEDULED_THREAD_POOL, MODEL_DESCRIPTION, \"*\");\n        assertEquals(ModelType.STRING, scheduledThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, scheduledThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, scheduledThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());\n        assertEquals(\n                ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.LONG, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE)\n                .require(TIME).require(TYPE).asType());\n        assertEquals(ModelType.STRING,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT)\n                        .require(TYPE).asType());\n\n        ModelNode unboundedThreadPoolDesc = threadsDescription.get(CHILDREN, UNBOUNDED_QUEUE_THREAD_POOL, MODEL_DESCRIPTION,\n                \"*\");\n        assertEquals(ModelType.STRING, unboundedThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, unboundedThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, unboundedThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());\n        assertEquals(\n                ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.LONG, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE)\n                .require(TIME).require(TYPE).asType());\n        assertEquals(ModelType.STRING,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT)\n                        .require(TYPE).asType());\n\n    }","id":12930,"modified_method":"@Test\n    public void testGetModelDescription() throws Exception {\n        ModelNode operation = createOperation(READ_RESOURCE_DESCRIPTION_OPERATION, \"profile\", \"test\");\n        operation.get(RECURSIVE).set(true);\n        operation.get(OPERATIONS).set(true);\n        ModelNode result = executeForResult(operation);\n\n        ModelNode threadsDescription = result.get(CHILDREN, SUBSYSTEM, MODEL_DESCRIPTION, THREADS);\n        assertTrue(threadsDescription.isDefined());\n\n        ModelNode threadFactoryDescription = threadsDescription.get(CHILDREN, THREAD_FACTORY, MODEL_DESCRIPTION, \"*\");\n        assertEquals(ModelType.STRING, threadFactoryDescription.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, threadFactoryDescription.require(ATTRIBUTES).require(GROUP_NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, threadFactoryDescription.require(ATTRIBUTES).require(THREAD_NAME_PATTERN).require(TYPE)\n                .asType());\n        assertEquals(ModelType.INT, threadFactoryDescription.require(ATTRIBUTES).require(PRIORITY).require(TYPE).asType());\n        assertEquals(ModelType.OBJECT, threadFactoryDescription.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());\n\n        ModelNode boundedQueueThreadPoolDesc = threadsDescription.get(CHILDREN, BOUNDED_QUEUE_THREAD_POOL, MODEL_DESCRIPTION,\n                \"*\");\n        assertEquals(ModelType.STRING, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(TYPE)\n                .asType());\n        assertEquals(\n                ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(CORE_THREADS).require(TYPE)\n                .asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(CORE_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(CORE_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(QUEUE_LENGTH).require(TYPE)\n                .asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(QUEUE_LENGTH).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(QUEUE_LENGTH).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.OBJECT, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(TYPE)\n                .asType());\n        assertEquals(ModelType.LONG, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE)\n                .require(TIME).require(TYPE).asType());\n        assertEquals(ModelType.STRING,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BOOLEAN, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(BLOCKING).require(TYPE).asType());\n        assertEquals(ModelType.BOOLEAN, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(ALLOW_CORE_TIMEOUT)\n                .require(TYPE).asType());\n        assertEquals(ModelType.STRING, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(HANDOFF_EXECUTOR).require(TYPE)\n                .asType());\n\n        ModelNode queueLessThreadPoolDesc = threadsDescription.get(CHILDREN, QUEUELESS_THREAD_POOL, MODEL_DESCRIPTION, \"*\");\n        assertEquals(ModelType.STRING, queueLessThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, queueLessThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, queueLessThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());\n        assertEquals(\n                ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.LONG, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE)\n                .require(TIME).require(TYPE).asType());\n        assertEquals(ModelType.STRING,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BOOLEAN, queueLessThreadPoolDesc.require(ATTRIBUTES).require(BLOCKING).require(TYPE).asType());\n        assertEquals(ModelType.STRING, queueLessThreadPoolDesc.require(ATTRIBUTES).require(HANDOFF_EXECUTOR).require(TYPE)\n                .asType());\n\n        ModelNode scheduledThreadPoolDesc = threadsDescription.get(CHILDREN, SCHEDULED_THREAD_POOL, MODEL_DESCRIPTION, \"*\");\n        assertEquals(ModelType.STRING, scheduledThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, scheduledThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, scheduledThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());\n        assertEquals(\n                ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.LONG, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE)\n                .require(TIME).require(TYPE).asType());\n        assertEquals(ModelType.STRING,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT)\n                        .require(TYPE).asType());\n\n        ModelNode unboundedThreadPoolDesc = threadsDescription.get(CHILDREN, UNBOUNDED_QUEUE_THREAD_POOL, MODEL_DESCRIPTION,\n                \"*\");\n        assertEquals(ModelType.STRING, unboundedThreadPoolDesc.require(ATTRIBUTES).require(NAME).require(TYPE).asType());\n        assertEquals(ModelType.STRING, unboundedThreadPoolDesc.require(ATTRIBUTES).require(THREAD_FACTORY).require(TYPE)\n                .asType());\n        assertEquals(ModelType.OBJECT, unboundedThreadPoolDesc.require(ATTRIBUTES).require(PROPERTIES).require(TYPE).asType());\n        assertEquals(\n                ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(COUNT)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.BIG_DECIMAL,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(MAX_THREADS).require(VALUE_TYPE).require(PER_CPU)\n                        .require(TYPE).asType());\n        assertEquals(ModelType.LONG, boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE)\n                .require(TIME).require(TYPE).asType());\n        assertEquals(ModelType.STRING,\n                boundedQueueThreadPoolDesc.require(ATTRIBUTES).require(KEEPALIVE_TIME).require(VALUE_TYPE).require(UNIT)\n                        .require(TYPE).asType());\n\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSeveralScheduledThreadPools() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<scheduled-thread-pool name=\\\"test-poolA\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/scheduled-thread-pool>\"\n                + \"<scheduled-thread-pool name=\\\"test-poolB\\\">\" + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/scheduled-thread-pool>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"scheduled-thread-pool\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-poolA\", threadFactory.require(\"test-poolA\").require(\"name\").asString());\n        assertEquals(\"test-poolB\", threadFactory.require(\"test-poolB\").require(\"name\").asString());\n    }","id":12931,"modified_method":"@Test\n    public void testSeveralScheduledThreadPools() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<scheduled-thread-pool name=\\\"test-poolA\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/scheduled-thread-pool>\"\n                + \"<scheduled-thread-pool name=\\\"test-poolB\\\">\" + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/scheduled-thread-pool>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"scheduled-thread-pool\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-poolA\", threadFactory.require(\"test-poolA\").require(\"name\").asString());\n        assertEquals(\"test-poolB\", threadFactory.require(\"test-poolB\").require(\"name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testFullThreadFactory() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<thread-factory name=\\\"test-factory\\\"\" + \"   group-name=\\\"test-group\\\"\"\n                + \"   thread-name-pattern=\\\"test-pattern\\\"\" + \"   priority=\\\"5\\\">\" + \"   <properties>\"\n                + \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\" + \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\"\n                + \"   <\/properties>\" + \"<\/thread-factory>\");\n\n        TestResultHandler handler = new TestResultHandler();\n        controller.executeForResult(updates.get(0));\n        controller.execute(OperationBuilder.Factory.create(updates.get(1)).build(), handler);\n\n        checkFullTreadFactory();\n    }","id":12932,"modified_method":"@Test\n    public void testFullThreadFactory() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<thread-factory name=\\\"test-factory\\\"\" + \"   group-name=\\\"test-group\\\"\"\n                + \"   thread-name-pattern=\\\"test-pattern\\\"\" + \"   priority=\\\"5\\\">\" + \"   <properties>\"\n                + \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\" + \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\"\n                + \"   <\/properties>\" + \"<\/thread-factory>\");\n\n        executeForResult(updates.get(0));\n        controller.execute(updates.get(1), null, null, null);\n\n        checkFullTreadFactory();\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testFullQueuelessThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<queueless-thread-pool name=\\\"test-pool\\\" blocking=\\\"true\\\">\"\n                + \"   <max-threads count=\\\"100\\\" per-cpu=\\\"5\\\"/>\" + \"   <keepalive-time time=\\\"1000\\\" unit=\\\"MILLISECONDS\\\"/>\"\n                + \"   <thread-factory name=\\\"test-factory\\\"/>\" + \"   <handoff-executor name=\\\"other\\\"/>\" + \"   <properties>\"\n                + \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\" + \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\"\n                + \"   <\/properties>\" + \"<\/queueless-thread-pool>\");\n\n        TestResultHandler handler = new TestResultHandler();\n        controller.executeForResult(updates.get(0));\n        controller.execute(OperationBuilder.Factory.create(updates.get(1)).build(), handler);\n\n        checkFullQueuelessThreadPool();\n\n    }","id":12933,"modified_method":"@Test\n    public void testFullQueuelessThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\n                \"<thread-factory name=\\\"test-factory\\\"/>\" +\n                \"<queueless-thread-pool name=\\\"test-pool\\\" blocking=\\\"true\\\">\" +\n                \"   <max-threads count=\\\"100\\\" per-cpu=\\\"5\\\"/>\" +\n                \"   <keepalive-time time=\\\"1000\\\" unit=\\\"MILLISECONDS\\\"/>\" +\n                \"   <thread-factory name=\\\"test-factory\\\"/>\" +\n                \"   <handoff-executor name=\\\"other\\\"/>\" +\n                \"   <properties>\" +\n                \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\" +\n                \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\" +\n                \"   <\/properties>\" +\n                \"<\/queueless-thread-pool>\");\n\n        executeForResult(updates.get(0));\n        executeForResult(updates.get(1));\n        executeForResult(updates.get(2));\n\n        checkFullQueuelessThreadPool();\n\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSimpleBoundedQueueThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<bounded-queue-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"   <queue-length count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/bounded-queue-thread-pool>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadPool = subsystem.require(\"bounded-queue-thread-pool\");\n        assertEquals(1, threadPool.keys().size());\n        assertEquals(\"test-pool\", threadPool.require(\"test-pool\").require(\"name\").asString());\n    }","id":12934,"modified_method":"@Test\n    public void testSimpleBoundedQueueThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<bounded-queue-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"   <queue-length count=\\\"1\\\" per-cpu=\\\"2\\\"/>\"\n                + \"<\/bounded-queue-thread-pool>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadPool = subsystem.require(\"bounded-queue-thread-pool\");\n        assertEquals(1, threadPool.keys().size());\n        assertEquals(\"test-pool\", threadPool.require(\"test-pool\").require(\"name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSimpleUnboundedQueueThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<unbounded-queue-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/unbounded-queue-thread-pool>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadPool = subsystem.require(\"unbounded-queue-thread-pool\");\n        assertEquals(1, threadPool.keys().size());\n        assertEquals(\"test-pool\", threadPool.require(\"test-pool\").require(\"name\").asString());\n    }","id":12935,"modified_method":"@Test\n    public void testSimpleUnboundedQueueThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<unbounded-queue-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"1\\\" per-cpu=\\\"2\\\"/>\" + \"<\/unbounded-queue-thread-pool>\");\n        assertEquals(2, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadPool = subsystem.require(\"unbounded-queue-thread-pool\");\n        assertEquals(1, threadPool.keys().size());\n        assertEquals(\"test-pool\", threadPool.require(\"test-pool\").require(\"name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testSeveralThreadFactories() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<thread-factory name=\\\"test-factory\\\" group-name=\\\"A\\\"/>\"\n                + \"<thread-factory name=\\\"test-factory1\\\" group-name=\\\"B\\\"/>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                controller.executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"thread-factory\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-factory\", threadFactory.require(\"test-factory\").require(\"name\").asString());\n        assertEquals(\"A\", threadFactory.require(\"test-factory\").require(\"group-name\").asString());\n        assertEquals(\"test-factory1\", threadFactory.require(\"test-factory1\").require(\"name\").asString());\n        assertEquals(\"B\", threadFactory.require(\"test-factory1\").require(\"group-name\").asString());\n    }","id":12936,"modified_method":"@Test\n    public void testSeveralThreadFactories() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<thread-factory name=\\\"test-factory\\\" group-name=\\\"A\\\"/>\"\n                + \"<thread-factory name=\\\"test-factory1\\\" group-name=\\\"B\\\"/>\");\n        assertEquals(3, updates.size());\n        for (ModelNode update : updates) {\n            try {\n                executeForResult(update);\n            } catch (OperationFailedException e) {\n                throw new RuntimeException(e.getFailureDescription().toString());\n            }\n        }\n\n        ModelNode subsystem = model.require(\"profile\").require(\"test\").require(\"subsystem\").require(\"threads\");\n        ModelNode threadFactory = subsystem.require(\"thread-factory\");\n        assertEquals(2, threadFactory.keys().size());\n        assertEquals(\"test-factory\", threadFactory.require(\"test-factory\").require(\"name\").asString());\n        assertEquals(\"A\", threadFactory.require(\"test-factory\").require(\"group-name\").asString());\n        assertEquals(\"test-factory1\", threadFactory.require(\"test-factory1\").require(\"name\").asString());\n        assertEquals(\"B\", threadFactory.require(\"test-factory1\").require(\"group-name\").asString());\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testFullBoundedQueueThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<bounded-queue-thread-pool name=\\\"test-pool\\\" blocking=\\\"true\\\" allow-core-timeout=\\\"true\\\">\"\n                + \"   <core-threads count=\\\"200\\\" per-cpu=\\\"15\\\"/>\"\n                + \"   <max-threads count=\\\"100\\\" per-cpu=\\\"5\\\"/>\"\n                + \"   <queue-length count=\\\"300\\\" per-cpu=\\\"25\\\"/>\"\n                + \"   <keepalive-time time=\\\"1000\\\" unit=\\\"MILLISECONDS\\\"/>\"\n                + \"   <thread-factory name=\\\"test-factory\\\"/>\"\n                + \"   <handoff-executor name=\\\"other\\\"/>\"\n                + \"   <properties>\"\n                + \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\"\n                + \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\"\n                + \"   <\/properties>\" + \"<\/bounded-queue-thread-pool>\");\n\n        TestResultHandler handler = new TestResultHandler();\n        controller.executeForResult(updates.get(0));\n        controller.execute(OperationBuilder.Factory.create(updates.get(1)).build(), handler);\n\n        checkFullBoundedQueueThreadPool();\n    }","id":12937,"modified_method":"@Test\n    public void testFullBoundedQueueThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\n                \"<thread-factory name=\\\"test-factory\\\"/>\" +\n                \"<bounded-queue-thread-pool name=\\\"test-pool\\\" blocking=\\\"true\\\" allow-core-timeout=\\\"true\\\">\" +\n                \"   <core-threads count=\\\"200\\\" per-cpu=\\\"15\\\"/>\" +\n                \"   <max-threads count=\\\"100\\\" per-cpu=\\\"5\\\"/>\" +\n                \"   <queue-length count=\\\"300\\\" per-cpu=\\\"25\\\"/>\" +\n                \"   <keepalive-time time=\\\"1000\\\" unit=\\\"MILLISECONDS\\\"/>\" +\n                \"   <thread-factory name=\\\"test-factory\\\"/>\" +\n                \"   <handoff-executor name=\\\"other\\\"/>\" +\n                \"   <properties>\" +\n                \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\" +\n                \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\" +\n                \"   <\/properties>\" +\n                \"<\/bounded-queue-thread-pool>\");\n\n        executeForResult(updates.get(0));\n        executeForResult(updates.get(1));\n        executeForResult(updates.get(2));\n\n        checkFullBoundedQueueThreadPool();\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testFullScheduledThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\"<scheduled-thread-pool name=\\\"test-pool\\\">\"\n                + \"   <max-threads count=\\\"100\\\" per-cpu=\\\"5\\\"/>\" + \"   <keepalive-time time=\\\"1000\\\" unit=\\\"MILLISECONDS\\\"/>\"\n                + \"   <thread-factory name=\\\"test-factory\\\"/>\" + \"   <properties>\"\n                + \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\" + \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\"\n                + \"   <\/properties>\" + \"<\/scheduled-thread-pool>\");\n\n        TestResultHandler handler = new TestResultHandler();\n        controller.executeForResult(updates.get(0));\n        controller.execute(OperationBuilder.Factory.create(updates.get(1)).build(), handler);\n\n        checkFullScheduledThreadPool();\n    }","id":12938,"modified_method":"@Test\n    public void testFullScheduledThreadPool() throws Exception {\n        List<ModelNode> updates = createSubSystem(\n                \"<thread-factory name=\\\"test-factory\\\"/>\" +\n                \"<scheduled-thread-pool name=\\\"test-pool\\\">\" +\n                \"   <max-threads count=\\\"100\\\" per-cpu=\\\"5\\\"/>\" +\n                \"   <keepalive-time time=\\\"1000\\\" unit=\\\"MILLISECONDS\\\"/>\" +\n                \"   <thread-factory name=\\\"test-factory\\\"/>\" +\n                \"   <properties>\" +\n                \"      <property name=\\\"propA\\\" value=\\\"valueA\\\"/>\" +\n                \"      <property name=\\\"propB\\\" value=\\\"valueB\\\"/>\" +\n                \"   <\/properties>\" +\n                \"<\/scheduled-thread-pool>\");\n\n        executeForResult(updates.get(0));\n        executeForResult(updates.get(1));\n        executeForResult(updates.get(2));\n\n        checkFullScheduledThreadPool();\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"public synchronized void start(final StartContext context) throws StartException {\n        executor = new JBossThreadPoolExecutor(maxThreads, maxThreads, keepAlive.getDuration(), keepAlive.getUnit(), new LinkedBlockingQueue<Runnable>(), threadFactoryValue.getValue());\n        value = JBossExecutors.protectedExecutorService(executor);\n    }","id":12939,"modified_method":"public synchronized void start(final StartContext context) throws StartException {\n        final TimeSpec keepAliveSpec = keepAlive;\n        long keepAliveTime = keepAliveSpec == null ? Long.MAX_VALUE : keepAliveSpec.getUnit().toNanos(keepAliveSpec.getDuration());\n        executor = new JBossThreadPoolExecutor(maxThreads, maxThreads, keepAliveTime, TimeUnit.NANOSECONDS, new LinkedBlockingQueue<Runnable>(), threadFactoryValue.getValue());\n        value = JBossExecutors.protectedExecutorService(executor);\n    }","commit_id":"a7dfa7c7915352537584fe8bf0816c4befc8372d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n\tpublic void processAction(\n\t\t\tPortletConfig portletConfig, ActionRequest actionRequest,\n\t\t\tActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tString tabs2 = ParamUtil.getString(actionRequest, \"tabs2\");\n\n\t\tif (tabs2.equals(\"display-settings\")) {\n\t\t\tvalidateDisplaySettings(actionRequest);\n\t\t}\n\t\telse if (tabs2.equals(\"email-from\")) {\n\t\t\tvalidateEmailFrom(actionRequest);\n\t\t}\n\t\telse if (tabs2.equals(\"page-added-email\")) {\n\t\t\tvalidateEmailPageAdded(actionRequest);\n\t\t}\n\t\telse if (tabs2.equals(\"page-updated-email\")) {\n\t\t\tvalidateEmailPageUpdated(actionRequest);\n\t\t}\n\n\t\tsuper.processAction(portletConfig, actionRequest, actionResponse);\n\t}","id":12940,"modified_method":"@Override\n\tpublic void processAction(\n\t\t\tPortletConfig portletConfig, ActionRequest actionRequest,\n\t\t\tActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tvalidateDisplaySettings(actionRequest);\n\t\tvalidateEmailFrom(actionRequest);\n\t\tvalidateEmailPageAdded(actionRequest);\n\t\tvalidateEmailPageUpdated(actionRequest);\n\n\t\tsuper.processAction(portletConfig, actionRequest, actionResponse);\n\t}","commit_id":"bbc893e1e78714960f7536136511aa847f3eed9a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailPageAdded(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailPageAddedSubject = getParameter(\n\t\t\tactionRequest, \"emailPageAddedSubject\");\n\t\tString emailPageAddedBody = getParameter(\n\t\t\tactionRequest, \"emailPageAddedBody\");\n\n\t\tif (Validator.isNull(emailPageAddedSubject)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailPageAddedSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailPageAddedBody)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailPageAddedBody\");\n\t\t}\n\t}","id":12941,"modified_method":"protected void validateEmailPageAdded(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailPageAddedEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailPageAddedEnabled\"));\n\t\tString emailPageAddedSubject = getParameter(\n\t\t\tactionRequest, \"emailPageAddedSubject\");\n\t\tString emailPageAddedBody = getParameter(\n\t\t\tactionRequest, \"emailPageAddedBody\");\n\n\t\tif (emailPageAddedEnabled) {\n\t\t\tif (Validator.isNull(emailPageAddedSubject)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailPageAddedSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailPageAddedBody)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailPageAddedBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"bbc893e1e78714960f7536136511aa847f3eed9a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailPageUpdated(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailPageUpdatedSubject = getParameter(\n\t\t\tactionRequest, \"emailPageUpdatedSubject\");\n\t\tString emailPageUpdatedBody = getParameter(\n\t\t\tactionRequest, \"emailPageUpdatedBody\");\n\n\t\tif (Validator.isNull(emailPageUpdatedSubject)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailPageUpdatedSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailPageUpdatedBody)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailPageUpdatedBody\");\n\t\t}\n\t}","id":12942,"modified_method":"protected void validateEmailPageUpdated(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailPageUpdatedEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailPageUpdatedEnabled\"));\n\t\tString emailPageUpdatedSubject = getParameter(\n\t\t\tactionRequest, \"emailPageUpdatedSubject\");\n\t\tString emailPageUpdatedBody = getParameter(\n\t\t\tactionRequest, \"emailPageUpdatedBody\");\n\n\t\tif (emailPageUpdatedEnabled) {\n\t\t\tif (Validator.isNull(emailPageUpdatedSubject)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailPageUpdatedSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailPageUpdatedBody)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailPageUpdatedBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"bbc893e1e78714960f7536136511aa847f3eed9a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailArticleUpdated(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailArticleUpdatedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleUpdatedSubject\");\n\t\tString emailArticleUpdatedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleUpdatedBody\");\n\n\t\tif (Validator.isNull(emailArticleUpdatedSubject)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailArticleUpdatedSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailArticleUpdatedBody)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailArticleUpdatedBody\");\n\t\t}\n\t}","id":12943,"modified_method":"protected void validateEmailArticleUpdated(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailArticleUpdatedEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailArticleUpdatedEnabled\"));\n\t\tString emailArticleUpdatedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleUpdatedSubject\");\n\t\tString emailArticleUpdatedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleUpdatedBody\");\n\n\t\tif (emailArticleUpdatedEnabled) {\n\t\t\tif (Validator.isNull(emailArticleUpdatedSubject)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailArticleUpdatedSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailArticleUpdatedBody)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailArticleUpdatedBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"dc276ae63fe32af26d775eab057d0841a59fe76a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailArticleReview(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailArticleReviewSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleReviewSubject\");\n\t\tString emailArticleReviewBody = getParameter(\n\t\t\tactionRequest, \"emailArticleReviewBody\");\n\n\t\tif (Validator.isNull(emailArticleReviewSubject)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailArticleReviewSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailArticleReviewBody)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailArticleReviewBody\");\n\t\t}\n\t}","id":12944,"modified_method":"protected void validateEmailArticleReview(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailArticleReviewEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailArticleReviewEnabled\"));\n\t\tString emailArticleReviewSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleReviewSubject\");\n\t\tString emailArticleReviewBody = getParameter(\n\t\t\tactionRequest, \"emailArticleReviewBody\");\n\n\t\tif (emailArticleReviewEnabled) {\n\t\t\tif (Validator.isNull(emailArticleReviewSubject)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailArticleReviewSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailArticleReviewBody)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailArticleReviewBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"dc276ae63fe32af26d775eab057d0841a59fe76a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void processAction(\n\t\t\tPortletConfig portletConfig, ActionRequest actionRequest,\n\t\t\tActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tString tabs2 = ParamUtil.getString(actionRequest, \"tabs2\");\n\n\t\tif (tabs2.equals(\"email-from\")) {\n\t\t\tvalidateEmailFrom(actionRequest);\n\t\t}\n\t\telse if (tabs2.equals(\"web-content-added-email\")) {\n\t\t\tvalidateEmailArticleAdded(actionRequest);\n\t\t}\n\t\telse if (tabs2.equals(\"web-content-approval-denied-email\")) {\n\t\t\tvalidateEmailArticleApprovalDenied(actionRequest);\n\t\t}\n\t\telse if (tabs2.equals(\"web-content-approval-granted-email\")) {\n\t\t\tvalidateEmailArticleApprovalGranted(actionRequest);\n\t\t}\n\t\telse if (tabs2.equals(\"web-content-approval-requested-email\")) {\n\t\t\tvalidateEmailArticleApprovalRequested(actionRequest);\n\t\t}\n\t\telse if (tabs2.equals(\"web-content-review-email\")) {\n\t\t\tvalidateEmailArticleReview(actionRequest);\n\t\t}\n\t\telse if (tabs2.equals(\"web-content-updated-email\")) {\n\t\t\tvalidateEmailArticleUpdated(actionRequest);\n\t\t}\n\n\t\tsuper.processAction(portletConfig, actionRequest, actionResponse);\n\t}","id":12945,"modified_method":"@Override\n\tpublic void processAction(\n\t\t\tPortletConfig portletConfig, ActionRequest actionRequest,\n\t\t\tActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tvalidateEmailFrom(actionRequest);\n\t\tvalidateEmailArticleAdded(actionRequest);\n\t\tvalidateEmailArticleApprovalDenied(actionRequest);\n\t\tvalidateEmailArticleApprovalGranted(actionRequest);\n\t\tvalidateEmailArticleApprovalRequested(actionRequest);\n\t\tvalidateEmailArticleReview(actionRequest);\n\t\tvalidateEmailArticleUpdated(actionRequest);\n\n\t\tsuper.processAction(portletConfig, actionRequest, actionResponse);\n\t}","commit_id":"dc276ae63fe32af26d775eab057d0841a59fe76a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailArticleApprovalDenied(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailArticleApprovalDeniedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalDeniedSubject\");\n\t\tString emailArticleApprovalDeniedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalDeniedBody\");\n\n\t\tif (Validator.isNull(emailArticleApprovalDeniedSubject)) {\n\t\t\tSessionErrors.add(\n\t\t\t\tactionRequest, \"emailArticleApprovalDeniedSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailArticleApprovalDeniedBody)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailArticleApprovalDeniedBody\");\n\t\t}\n\t}","id":12946,"modified_method":"protected void validateEmailArticleApprovalDenied(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailArticleApprovalDeniedEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailArticleApprovalDeniedEnabled\"));\n\t\tString emailArticleApprovalDeniedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalDeniedSubject\");\n\t\tString emailArticleApprovalDeniedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalDeniedBody\");\n\n\t\tif (emailArticleApprovalDeniedEnabled) {\n\t\t\tif (Validator.isNull(emailArticleApprovalDeniedSubject)) {\n\t\t\t\tSessionErrors.add(\n\t\t\t\t\tactionRequest, \"emailArticleApprovalDeniedSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailArticleApprovalDeniedBody)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailArticleApprovalDeniedBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"dc276ae63fe32af26d775eab057d0841a59fe76a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailArticleApprovalGranted(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailArticleApprovalGrantedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalGrantedSubject\");\n\t\tString emailArticleApprovalGrantedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalGrantedBody\");\n\n\t\tif (Validator.isNull(emailArticleApprovalGrantedSubject)) {\n\t\t\tSessionErrors.add(\n\t\t\t\tactionRequest, \"emailArticleApprovalGrantedSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailArticleApprovalGrantedBody)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailArticleApprovalGrantedBody\");\n\t\t}\n\t}","id":12947,"modified_method":"protected void validateEmailArticleApprovalGranted(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailArticleApprovalGrantedEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailArticleApprovalGrantedEnabled\"));\n\t\tString emailArticleApprovalGrantedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalGrantedSubject\");\n\t\tString emailArticleApprovalGrantedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalGrantedBody\");\n\n\t\tif (emailArticleApprovalGrantedEnabled) {\n\t\t\tif (Validator.isNull(emailArticleApprovalGrantedSubject)) {\n\t\t\t\tSessionErrors.add(\n\t\t\t\t\tactionRequest, \"emailArticleApprovalGrantedSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailArticleApprovalGrantedBody)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailArticleApprovalGrantedBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"dc276ae63fe32af26d775eab057d0841a59fe76a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailArticleAdded(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailArticleAddedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleAddedSubject\");\n\t\tString emailArticleAddedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleAddedBody\");\n\n\t\tif (Validator.isNull(emailArticleAddedSubject)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailArticleAddedSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailArticleAddedBody)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailArticleAddedBody\");\n\t\t}\n\t}","id":12948,"modified_method":"protected void validateEmailArticleAdded(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailArticleAddedEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailArticleAddedEnabled\"));\n\t\tString emailArticleAddedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleAddedSubject\");\n\t\tString emailArticleAddedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleAddedBody\");\n\n\t\tif (emailArticleAddedEnabled) {\n\t\t\tif (Validator.isNull(emailArticleAddedSubject)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailArticleAddedSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailArticleAddedBody)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailArticleAddedBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"dc276ae63fe32af26d775eab057d0841a59fe76a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailArticleApprovalRequested(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailArticleApprovalRequestedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalRequestedSubject\");\n\t\tString emailArticleApprovalRequestedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalRequestedBody\");\n\n\t\tif (Validator.isNull(emailArticleApprovalRequestedSubject)) {\n\t\t\tSessionErrors.add(\n\t\t\t\tactionRequest, \"emailArticleApprovalRequestedSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailArticleApprovalRequestedBody)) {\n\t\t\tSessionErrors.add(\n\t\t\t\tactionRequest, \"emailArticleApprovalRequestedBody\");\n\t\t}\n\t}","id":12949,"modified_method":"protected void validateEmailArticleApprovalRequested(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailArticleApprovalRequestedEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailArticleApprovalRequestedEnabled\"));\n\t\tString emailArticleApprovalRequestedSubject = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalRequestedSubject\");\n\t\tString emailArticleApprovalRequestedBody = getParameter(\n\t\t\tactionRequest, \"emailArticleApprovalRequestedBody\");\n\n\t\tif (emailArticleApprovalRequestedEnabled) {\n\t\t\tif (Validator.isNull(emailArticleApprovalRequestedSubject)) {\n\t\t\t\tSessionErrors.add(\n\t\t\t\t\tactionRequest, \"emailArticleApprovalRequestedSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailArticleApprovalRequestedBody)) {\n\t\t\t\tSessionErrors.add(\n\t\t\t\t\tactionRequest, \"emailArticleApprovalRequestedBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"dc276ae63fe32af26d775eab057d0841a59fe76a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailEntryAdded(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailEntryAddedSubject = getLocalizedParameter(\n\t\t\tactionRequest, \"emailEntryAddedSubject\");\n\t\tString emailEntryAddedBody = getLocalizedParameter(\n\t\t\tactionRequest, \"emailEntryAddedBody\");\n\n\t\tif (Validator.isNull(emailEntryAddedSubject)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailEntryAddedSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailEntryAddedBody)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailEntryAddedBody\");\n\t\t}\n\t}","id":12950,"modified_method":"protected void validateEmailEntryAdded(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailEntryAddedEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailEntryAddedEnabled\"));\n\t\tString emailEntryAddedSubject = getLocalizedParameter(\n\t\t\tactionRequest, \"emailEntryAddedSubject\");\n\t\tString emailEntryAddedBody = getLocalizedParameter(\n\t\t\tactionRequest, \"emailEntryAddedBody\");\n\n\t\tif (emailEntryAddedEnabled) {\n\t\t\tif (Validator.isNull(emailEntryAddedSubject)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailEntryAddedSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailEntryAddedBody)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailEntryAddedBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"c22563b365f7e9f40d07e235bdb77881dae1954c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateEmailEntryUpdated(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tString emailEntryUpdatedSubject = getLocalizedParameter(\n\t\t\tactionRequest, \"emailEntryUpdatedSubject\");\n\t\tString emailEntryUpdatedBody = getLocalizedParameter(\n\t\t\tactionRequest, \"emailEntryUpdatedBody\");\n\n\t\tif (Validator.isNull(emailEntryUpdatedSubject)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailEntryUpdatedSubject\");\n\t\t}\n\t\telse if (Validator.isNull(emailEntryUpdatedBody)) {\n\t\t\tSessionErrors.add(actionRequest, \"emailEntryUpdatedBody\");\n\t\t}\n\t}","id":12951,"modified_method":"protected void validateEmailEntryUpdated(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tboolean emailEntryUpdatedEnabled = GetterUtil.getBoolean(\n\t\t\tgetParameter(actionRequest, \"emailEntryUpdatedEnabled\"));\n\t\tString emailEntryUpdatedSubject = getLocalizedParameter(\n\t\t\tactionRequest, \"emailEntryUpdatedSubject\");\n\t\tString emailEntryUpdatedBody = getLocalizedParameter(\n\t\t\tactionRequest, \"emailEntryUpdatedBody\");\n\n\t\tif (emailEntryUpdatedEnabled) {\n\t\t\tif (Validator.isNull(emailEntryUpdatedSubject)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailEntryUpdatedSubject\");\n\t\t\t}\n\t\t\telse if (Validator.isNull(emailEntryUpdatedBody)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailEntryUpdatedBody\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"c22563b365f7e9f40d07e235bdb77881dae1954c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void processAction(\n\t\t\tPortletConfig portletConfig, ActionRequest actionRequest,\n\t\t\tActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tString cmd = ParamUtil.getString(actionRequest, Constants.CMD);\n\n\t\tString tabs2 = ParamUtil.getString(actionRequest, \"tabs2\");\n\n\t\tif (Validator.isNotNull(cmd)) {\n\t\t\tif (tabs2.equals(\"email-from\")) {\n\t\t\t\tvalidateEmailFrom(actionRequest);\n\t\t\t}\n\t\t\telse if (tabs2.equals(\"entry-added-email\")) {\n\t\t\t\tvalidateEmailEntryAdded(actionRequest);\n\t\t\t}\n\t\t\telse if (tabs2.equals(\"entry-updated-email\")) {\n\t\t\t\tvalidateEmailEntryUpdated(actionRequest);\n\t\t\t}\n\t\t}\n\n\t\tsuper.processAction(portletConfig, actionRequest, actionResponse);\n\t}","id":12952,"modified_method":"@Override\n\tpublic void processAction(\n\t\t\tPortletConfig portletConfig, ActionRequest actionRequest,\n\t\t\tActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tString cmd = ParamUtil.getString(actionRequest, Constants.CMD);\n\n\t\tif (Validator.isNotNull(cmd)) {\n\t\t\tvalidateEmailFrom(actionRequest);\n\t\t\tvalidateEmailEntryAdded(actionRequest);\n\t\t\tvalidateEmailEntryUpdated(actionRequest);\n\t\t}\n\n\t\tsuper.processAction(portletConfig, actionRequest, actionResponse);\n\t}","commit_id":"c22563b365f7e9f40d07e235bdb77881dae1954c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    SNodeReference script = new SNodePointer(\"r:00000000-0000-4000-0000-011c895902c9(jetbrains.mps.baseLanguage.scripts)\", \"2214637407304092437\");\n\n    MigrationScriptExecutor executor = new MigrationScriptExecutor(script, \"Migrate float constants with f|F\", event.getData(CommonDataKeys.PROJECT));\n    if (ModelAccess.instance().canWrite()) {\n      executor.execImmediately(new ProgressMonitorAdapter(new EmptyProgressIndicator()));\n    } else {\n      executor.execAsCommand(event.getData(MPSCommonDataKeys.FRAME));\n    }\n  }","id":12953,"modified_method":"@Override\n  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    SNodeReference script = new SNodePointer(\"r:00000000-0000-4000-0000-011c895902c9(jetbrains.mps.baseLanguage.scripts)\", \"2214637407304092437\");\n\n    MigrationScriptExecutor executor = new MigrationScriptExecutor(script, MigrateFloatConstants_Action.this.getTemplatePresentation().getText(), event.getData(MPSCommonDataKeys.MPS_PROJECT));\n    executor.execImmediately(new ProgressMonitorAdapter(new EmptyProgressIndicator()));\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    {\n      Project p = event.getData(CommonDataKeys.PROJECT);\n      if (p == null) {\n        return false;\n      }\n    }\n    {\n      Frame p = event.getData(MPSCommonDataKeys.FRAME);\n    }\n    return true;\n  }","id":12954,"modified_method":"@Override\n  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    {\n      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);\n      if (p == null) {\n        return false;\n      }\n    }\n    return true;\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public MigrationScriptExecutor(SNodeReference script, String title, Project project) {\n    this.project = project;\n    this.script = script;\n    this.title = title;\n  }","id":12955,"modified_method":"public MigrationScriptExecutor(SNodeReference script, String title, MPSProject project) {\n    this.project = project;\n    this.script = script;\n    this.title = title;\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"private MPSProject getMPSProject() {\n    return project.getComponent(MPSProject.class);\n  }","id":12956,"modified_method":"private MPSProject getMPSProject() {\n    return project;\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void execImmediately(ProgressMonitor promon) {\n    ThreadUtils.assertEDT();\n    Runnable process = createProcess(false, promon);\n    process.run();\n  }","id":12957,"modified_method":"public void execImmediately(ProgressMonitor promon) {\n    // up to the point ot MigrationScriptController.process, we are fine with read action \n    // However, at the moment, we do not care to speed up UI stuff as it would require thorough refactoring, while simplicity is my goal now. \n    // E.g. shall split prepare() to run in read action, to collect applicable SNodeReference, and separate apply() to run as command in UI thread \n    getMPSProject().getModelAccess().checkWriteAccess();\n\n    SNode scriptNode = (SNode) script.resolve(getMPSProject().getRepository());\n    if (scriptNode == null) {\n      return;\n    }\n    final MigrationScriptFinder finder = new MigrationScriptFinder(Collections.singletonList(AbstractMigrationScriptHelper.toExecutable(scriptNode, getMPSProject())));\n    final MigrationScriptsController controller = new MigrationScriptsController(finder);\n    if (promon == null) {\n      promon = new EmptyProgressMonitor();\n    }\n    promon.start(String.format(\"Executing \\\"%s\\\"\", title), 200);\n\n    SearchResults results = finder.find(new SearchQuery(AbstractMigrationScriptHelper.createMigrationScope(getMPSProject())), promon.subTask(100));\n\n    controller.process(promon.subTask(100), (List<SearchResult<SNode>>) results.getSearchResults());\n\n    promon.done();\n\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void process(final ProgressMonitor pmonitor, final Collection<SearchResult<SNode>> searchResults) {\n    pmonitor.start(\"\", searchResults.size());\n    for (final SearchResult<SNode> seachResult : searchResults) {\n      runCommand(new Runnable() {\n        @Override\n        public void run() {\n          pmonitor.advance(1);\n        }\n      });\n      runCommand(new Runnable() {\n        public void run() {\n          final SNode node = seachResult.getObject();\n          if (node == null || node.getModel() == null) {\n            return;\n          }\n\n          final AbstractMigrationRefactoring migrationRefactoring = myFinder.getRefactoring(seachResult);\n          try {\n            if (migrationRefactoring.isApplicableInstanceNode(node)) {\n              migrationRefactoring.doUpdateInstanceNode(node);\n            }\n          } catch (Throwable th) {\n            if (LOG.isEnabledFor(Level.ERROR)) {\n              LOG.error(\"Script execution failed\", th);\n            }\n          }\n        }\n      });\n\n    }\n    runCommand(new Runnable() {\n      @Override\n      public void run() {\n        pmonitor.done();\n      }\n    });\n  }","id":12958,"modified_method":"public void process(final ProgressMonitor pmonitor, final Collection<SearchResult<SNode>> searchResults) {\n    // requires model write \n    pmonitor.start(\"\", searchResults.size());\n    for (SearchResult<SNode> seachResult : searchResults) {\n      pmonitor.advance(1);\n      final SNode node = seachResult.getObject();\n      if (node == null || node.getModel() == null) {\n        return;\n      }\n\n      final AbstractMigrationRefactoring migrationRefactoring = myFinder.getRefactoring(seachResult);\n      try {\n        if (migrationRefactoring.isApplicableInstanceNode(node)) {\n          migrationRefactoring.doUpdateInstanceNode(node);\n        }\n      } catch (Throwable th) {\n        if (LOG.isEnabledFor(Level.ERROR)) {\n          LOG.error(\"Script execution failed\", th);\n        }\n      }\n    }\n    pmonitor.done();\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"void addTab(final MigrationScriptFinder finder, final IResultProvider provider, final SearchQuery query) {\n    ThreadUtils.assertEDT();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        MigrationScriptsView view = new MigrationScriptsView(finder, provider, query, MigrationScriptsTool.this, getProject()) {\n          @Override\n          public void close() {\n            int index = myViews.indexOf(this);\n            closeTab(index);\n          }\n        };\n        myViews.add(view);\n        String tabName = \"    \";\n        Content content = addContent(view.getComponent(), tabName, IconManager.getIconForIHolder(query.getObjectHolder()), false);\n        getContentManager().setSelectedContent(content);\n      }\n    });\n  }","id":12959,"modified_method":"void addTab(final MigrationScriptFinder finder, final IResultProvider provider, final SearchQuery query) {\n    ThreadUtils.assertEDT();\n    MigrationScriptsView view = new MigrationScriptsView(finder, provider, query, MigrationScriptsTool.this, getProject()) {\n      @Override\n      public void close() {\n        int index = myViews.indexOf(this);\n        closeTab(index);\n      }\n    };\n    myViews.add(view);\n    String tabName = \"    \";\n    Content content = addContent(view.getComponent(), tabName, IconManager.getIconForIHolder(query.getObjectHolder()), false);\n    getContentManager().setSelectedContent(content);\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void applyMigrations() {\n    ThreadUtils.assertEDT();\n\n    final Collection<SearchResult<SNode>> aliveIncludedResults = new ModelAccessHelper(getMPSProject().getModelAccess()).runReadAction(new Computable<Collection<SearchResult<SNode>>>() {\n      public Collection<SearchResult<SNode>> compute() {\n        return myController.computeAliveIncludedResults(myUsagesView.getIncludedResultNodes(), getMPSProject().getRepository());\n      }\n    });\n    if (aliveIncludedResults.size() == 0) {\n      JOptionPane.showMessageDialog(myTool.getComponent(), \"No job\");\n      return;\n    }\n\n    updateControls(false, myIndicator.getComponent());\n\n    final TaskInfo task = createTaskInfo();\n    final Object cmd = ((CommandProcessorEx) CommandProcessor.getInstance()).startCommand(myProject, task.getTitle(), null, UndoConfirmationPolicy.REQUEST_CONFIRMATION);\n    final Runnable finishCommand = new Runnable() {\n      @Override\n      public void run() {\n        ((CommandProcessorEx) CommandProcessor.getInstance()).finishCommand(myProject, cmd, null);\n      }\n    };\n\n    Runnable process = new Runnable() {\n      @Override\n      public void run() {\n        myController.process(new ProgressMonitorAdapter(myIndicator), aliveIncludedResults);\n        getMPSProject().getModelAccess().executeCommandInEDT(finishCommand);\n        checkMigrationResults();\n      }\n    };\n    // execute the process on a pooled thread \n    ((ApplicationEx) ApplicationManagerEx.getApplicationEx()).runProcessWithProgressSynchronously(process, task.getTitle(), task.isCancellable(), myProject, getComponent(), task.getCancelText());\n  }","id":12960,"modified_method":"private void applyMigrations() {\n    ThreadUtils.assertEDT();\n\n    final Collection<SearchResult<SNode>> aliveIncludedResults = new ModelAccessHelper(getMPSProject().getModelAccess()).runReadAction(new Computable<Collection<SearchResult<SNode>>>() {\n      public Collection<SearchResult<SNode>> compute() {\n        return myController.computeAliveIncludedResults(myUsagesView.getIncludedResultNodes(), getMPSProject().getRepository());\n      }\n    });\n    if (aliveIncludedResults.size() == 0) {\n      JOptionPane.showMessageDialog(myTool.getComponent(), \"No job\");\n      return;\n    }\n\n    updateControls(false, myIndicator.getComponent());\n\n    final TaskInfo task = createTaskInfo();\n    // There's no hidden knowledge in use of task.getProcessId(), just picked first string that might serve as group indicator,  \n    // as groupId is irrelevant for us anyway \n    UndoRunnable ur = new UndoRunnable.Base(task.getTitle(), task.getProcessId(), true) {\n      public void run() {\n        myController.process(new ProgressMonitorAdapter(myIndicator), aliveIncludedResults);\n        checkMigrationResults();\n      }\n    };\n    getMPSProject().getModelAccess().executeCommandInEDT(ur);\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public MigrationScriptsView(MigrationScriptFinder finder, IResultProvider provider, SearchQuery query, MigrationScriptsTool tool, Project project) {\n    myProject = project;\n    ThreadUtils.assertEDT();\n    myFinder = finder;\n    myFinder.addResultsListener(this);\n    myQuery = query;\n    myTool = tool;\n    ViewOptions viewOptions = new ViewOptions();\n    viewOptions.myCategories[0] = true;\n    viewOptions.myShowSearchedNodes = false;\n    viewOptions.myGroupSearchedNodes = false;\n    viewOptions.mySearchedNodesButtonsVisible = false;\n    myUsagesView = new UsagesView(project, viewOptions);\n    UsagesView.RerunAction searchAction = new UsagesView.RerunAction(myUsagesView, \"Search again\");\n    searchAction.setRunOptions(provider, query);\n    myUsagesView.setActions(searchAction, new UsagesView.RebuildAction(myUsagesView), new AnAction(\"Close\", \"\", AllIcons.Actions.Cancel) {\n      public void actionPerformed(@NotNull AnActionEvent p0) {\n        MigrationScriptsView.this.close();\n      }\n    }, new PinToolwindowTabAction());\n    myUsagesView.setContents(finder.getLastSearchResults());\n    myMainPanel = new JPanel(new BorderLayout());\n    myMainPanel.add(myUsagesView.getComponent(), BorderLayout.CENTER);\n    myControlsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    myApplyButton = new JButton(new AbstractAction(\"Apply Migrations\") {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        applyMigrations();\n      }\n    });\n    myControlsPanel.add(myApplyButton);\n    myStatusPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));\n    myControlsPanel.add(myStatusPanel);\n    myMainPanel.add(myControlsPanel, BorderLayout.SOUTH);\n    this.myIndicator = new InlineProgressIndicator(true, createTaskInfo());\n    this.myController = new MigrationScriptsController(myFinder) {\n      @Override\n      public void runCommand(final Runnable cmd) {\n        getMPSProject().getModelAccess().executeCommandInEDT(new Runnable() {\n          @Override\n          public void run() {\n            cmd.run();\n          }\n        });\n      }\n    };\n  }","id":12961,"modified_method":"public MigrationScriptsView(MigrationScriptFinder finder, IResultProvider provider, SearchQuery query, MigrationScriptsTool tool, @NotNull Project project) {\n    ThreadUtils.assertEDT();\n    myProject = project;\n    myFinder = finder;\n    myFinder.addResultsListener(this);\n    myQuery = query;\n    myTool = tool;\n    ViewOptions viewOptions = new ViewOptions();\n    viewOptions.myCategories[0] = true;\n    viewOptions.myShowSearchedNodes = false;\n    viewOptions.myGroupSearchedNodes = false;\n    viewOptions.mySearchedNodesButtonsVisible = false;\n    myUsagesView = new UsagesView(project, viewOptions);\n    UsagesView.RerunAction searchAction = new UsagesView.RerunAction(myUsagesView, \"Search again\");\n    searchAction.setRunOptions(provider, query);\n    myUsagesView.setActions(searchAction, new UsagesView.RebuildAction(myUsagesView), new AnAction(\"Close\", \"\", AllIcons.Actions.Cancel) {\n      public void actionPerformed(@NotNull AnActionEvent p0) {\n        MigrationScriptsView.this.close();\n      }\n    }, new PinToolwindowTabAction());\n    myUsagesView.setContents(finder.getLastSearchResults());\n    myMainPanel = new JPanel(new BorderLayout());\n    myMainPanel.add(myUsagesView.getComponent(), BorderLayout.CENTER);\n    myControlsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    myApplyButton = new JButton(new AbstractAction(\"Apply Migrations\") {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        applyMigrations();\n      }\n    });\n    myControlsPanel.add(myApplyButton);\n    myStatusPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));\n    myControlsPanel.add(myStatusPanel);\n    myMainPanel.add(myControlsPanel, BorderLayout.SOUTH);\n    this.myIndicator = new InlineProgressIndicator(true, createTaskInfo());\n    this.myController = new MigrationScriptsController(myFinder);\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"private MPSProject getMPSProject() {\n    return (myProject != null ? myProject.getComponent(MPSProject.class) : null);\n  }","id":12962,"modified_method":"private MPSProject getMPSProject() {\n    return myProject.getComponent(MPSProject.class);\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    {\n      Project p = event.getData(CommonDataKeys.PROJECT);\n      if (p == null) {\n        return false;\n      }\n    }\n    {\n      Frame p = event.getData(MPSCommonDataKeys.FRAME);\n    }\n    return true;\n  }","id":12963,"modified_method":"@Override\n  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    {\n      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);\n      if (p == null) {\n        return false;\n      }\n    }\n    return true;\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    SNodeReference script = new SNodePointer(\"r:5cc40f3f-8490-4eff-97dc-454147d36c2e(jetbrains.mps.baseLanguage.javadoc.scripts)\", \"992603585967257187\");\n\n    MigrationScriptExecutor executor = new MigrationScriptExecutor(script, \"Initialize the text child for all DeprecatedBlockDocTag instances\", event.getData(CommonDataKeys.PROJECT));\n    if (ModelAccess.instance().canWrite()) {\n      executor.execImmediately(new ProgressMonitorAdapter(new EmptyProgressIndicator()));\n    } else {\n      executor.execAsCommand(event.getData(MPSCommonDataKeys.FRAME));\n    }\n  }","id":12964,"modified_method":"@Override\n  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    SNodeReference script = new SNodePointer(\"r:5cc40f3f-8490-4eff-97dc-454147d36c2e(jetbrains.mps.baseLanguage.javadoc.scripts)\", \"992603585967257187\");\n    MigrationScriptExecutor executor = new MigrationScriptExecutor(script, UpdateDepecatedBlockDocTags_Action.this.getTemplatePresentation().getText(), event.getData(MPSCommonDataKeys.MPS_PROJECT));\n    executor.execImmediately(new ProgressMonitorAdapter(new EmptyProgressIndicator()));\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    {\n      Project p = event.getData(CommonDataKeys.PROJECT);\n      if (p == null) {\n        return false;\n      }\n    }\n    {\n      Frame p = event.getData(MPSCommonDataKeys.FRAME);\n    }\n    return true;\n  }","id":12965,"modified_method":"@Override\n  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    {\n      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);\n      if (p == null) {\n        return false;\n      }\n    }\n    return true;\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    SNodeReference script = new SNodePointer(\"r:00000000-0000-4000-0000-011c895902c9(jetbrains.mps.baseLanguage.scripts)\", \"4536253685767003451\");\n\n    MigrationScriptExecutor executor = new MigrationScriptExecutor(script, \"Wrap NotExpressions in parentheses where necessary\", event.getData(CommonDataKeys.PROJECT));\n    if (ModelAccess.instance().canWrite()) {\n      executor.execImmediately(new ProgressMonitorAdapter(new EmptyProgressIndicator()));\n    } else {\n      executor.execAsCommand(event.getData(MPSCommonDataKeys.FRAME));\n    }\n  }","id":12966,"modified_method":"@Override\n  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    SNodeReference script = new SNodePointer(\"r:00000000-0000-4000-0000-011c895902c9(jetbrains.mps.baseLanguage.scripts)\", \"4536253685767003451\");\n\n    MigrationScriptExecutor executor = new MigrationScriptExecutor(script, WrapNotExpressionInParens_Action.this.getTemplatePresentation().getText(), event.getData(MPSCommonDataKeys.MPS_PROJECT));\n    executor.execImmediately(new ProgressMonitorAdapter(new EmptyProgressIndicator()));\n  }","commit_id":"074302b770c47f255e1c97630f400bf60da1aaf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     *  Run     tagsIncluded    useTag  rekey\n     *  1       yes (2)         no      no\n     *  2       no              yes     no\n     *  3       yes (2)         yes     no\n     *  4       no              yes     no\n     *  5       no              yes     no\n     */\n    public void testSessions() throws Exception{\n        Object keys[] = KeyGenerator.getInstance().generatePKIKeypair();\n        PublicKey pubKey = (PublicKey)keys[0];\n        PrivateKey privKey = (PrivateKey)keys[1];\n        SessionKey curKey = _context.sessionKeyManager().createSession(pubKey);\n        \n        SessionTag tag1 = new SessionTag(true);\n        SessionTag tag2 = new SessionTag(true);\n        SessionTag tag3 = new SessionTag(true);\n        SessionTag tag4 = new SessionTag(true);\n        \n        HashSet firstTags = new HashSet();\n        firstTags.add(tag1);\n        firstTags.add(tag2);\n        \n        HashSet secondTags = new HashSet();\n        secondTags.add(tag3);\n        secondTags.add(tag4);\n        \n        byte[] msg1 = \"msg 1\".getBytes();\n        byte[] msg2 = \"msg 2\".getBytes();\n        byte[] msg3 = \"msg 3\".getBytes();\n        byte[] msg4 = \"msg 4\".getBytes();\n        byte[] msg5 = \"msg 5\".getBytes();\n        \n        byte emsg1[] = _context.elGamalAESEngine().encrypt(msg1, pubKey, curKey, firstTags, 64);\n        \n        byte dmsg1[] = _context.elGamalAESEngine().decrypt(emsg1, privKey);\n        assertTrue(DataHelper.eq(dmsg1, msg1));\n        \n        \n        \n        _context.sessionKeyManager().tagsDelivered(pubKey, curKey, firstTags);\n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        SessionTag curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        \n        byte emsg2[] = _context.elGamalAESEngine().encrypt(msg2, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg2[] = _context.elGamalAESEngine().decrypt(emsg2, privKey);\n        assertTrue(DataHelper.eq(dmsg2, msg2));\n        \n        \n        \n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg3[] = _context.elGamalAESEngine().encrypt(msg3, pubKey, curKey, secondTags, curTag, 64);\n        \n        byte dmsg3[] = _context.elGamalAESEngine().decrypt(emsg3, privKey);\n        assertTrue(DataHelper.eq(dmsg3, msg3));\n        \n        \n        \n        _context.sessionKeyManager().tagsDelivered(pubKey, curKey, secondTags);\n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg4[] = _context.elGamalAESEngine().encrypt(msg4, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg4[] = _context.elGamalAESEngine().decrypt(emsg4, privKey);\n        assertTrue(DataHelper.eq(dmsg4, msg4));\n        \n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg5[] = _context.elGamalAESEngine().encrypt(msg5, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg5[] = _context.elGamalAESEngine().decrypt(emsg5, privKey);\n        assertTrue(DataHelper.eq(dmsg5, msg5));\n        \n        \n    }","id":12967,"modified_method":"/**\n     *  Run     tagsIncluded    useTag  rekey\n     *  1       yes (2)         no      no\n     *  2       no              yes     no\n     *  3       yes (2)         yes     no\n     *  4       no              yes     no\n     *  5       no              yes     no\n     */\n    public void testSessions() throws Exception{\n        Object keys[] = KeyGenerator.getInstance().generatePKIKeypair();\n        PublicKey pubKey = (PublicKey)keys[0];\n        PrivateKey privKey = (PrivateKey)keys[1];\n        SessionKey curKey = _context.sessionKeyManager().createSession(pubKey);\n        \n        SessionTag tag1 = new SessionTag(true);\n        SessionTag tag2 = new SessionTag(true);\n        SessionTag tag3 = new SessionTag(true);\n        SessionTag tag4 = new SessionTag(true);\n        \n        HashSet firstTags = new HashSet();\n        firstTags.add(tag1);\n        firstTags.add(tag2);\n        \n        HashSet secondTags = new HashSet();\n        secondTags.add(tag3);\n        secondTags.add(tag4);\n        \n        byte[] msg1 = \"msg 1\".getBytes();\n        byte[] msg2 = \"msg 2\".getBytes();\n        byte[] msg3 = \"msg 3\".getBytes();\n        byte[] msg4 = \"msg 4\".getBytes();\n        byte[] msg5 = \"msg 5\".getBytes();\n        \n        byte emsg1[] = _context.elGamalAESEngine().encrypt(msg1, pubKey, curKey, firstTags, 64);\n        \n        byte dmsg1[] = _context.elGamalAESEngine().decrypt(emsg1, privKey);\n        assertTrue(DataHelper.eq(dmsg1, msg1));\n        \n        \n        \n        TagSetHandle tsh = _context.sessionKeyManager().tagsDelivered(pubKey, curKey, firstTags);\n        _context.sessionKeyManager().tagsAcked(pubKey, curKey, tsh);\n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        SessionTag curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        \n        byte emsg2[] = _context.elGamalAESEngine().encrypt(msg2, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg2[] = _context.elGamalAESEngine().decrypt(emsg2, privKey);\n        assertTrue(DataHelper.eq(dmsg2, msg2));\n        \n        \n        \n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg3[] = _context.elGamalAESEngine().encrypt(msg3, pubKey, curKey, secondTags, curTag, 64);\n        \n        byte dmsg3[] = _context.elGamalAESEngine().decrypt(emsg3, privKey);\n        assertTrue(DataHelper.eq(dmsg3, msg3));\n        \n        \n        \n        tsh = _context.sessionKeyManager().tagsDelivered(pubKey, curKey, secondTags);\n        _context.sessionKeyManager().tagsAcked(pubKey, curKey, tsh);\n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg4[] = _context.elGamalAESEngine().encrypt(msg4, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg4[] = _context.elGamalAESEngine().decrypt(emsg4, privKey);\n        assertTrue(DataHelper.eq(dmsg4, msg4));\n        \n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg5[] = _context.elGamalAESEngine().encrypt(msg5, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg5[] = _context.elGamalAESEngine().decrypt(emsg5, privKey);\n        assertTrue(DataHelper.eq(dmsg5, msg5));\n        \n        \n    }","commit_id":"33c5e14f909f22ca3772c8111ef26c928ec55dde","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     *  Run tagsIncluded    useTag  rekey\n     *  1   yes (2)         no      no\n     *  2   no              yes     no\n     *  3   yes (2)         yes     yes\n     *  4   no              yes     no\n     *  5   no              yes     no\n     */\n    public void testRekeying() throws Exception{\n        Object keys[] = KeyGenerator.getInstance().generatePKIKeypair();\n        PublicKey pubKey = (PublicKey)keys[0];\n        PrivateKey privKey = (PrivateKey)keys[1];\n        SessionKey curKey = _context.sessionKeyManager().createSession(pubKey);\n        SessionKey nextKey = KeyGenerator.getInstance().generateSessionKey();\n        \n        SessionTag tag1 = new SessionTag(true);\n        SessionTag tag2 = new SessionTag(true);\n        SessionTag tag3 = new SessionTag(true);\n        SessionTag tag4 = new SessionTag(true);\n        \n        HashSet firstTags = new HashSet();\n        firstTags.add(tag1);\n        firstTags.add(tag2);\n        \n        HashSet secondTags = new HashSet();\n        secondTags.add(tag3);\n        secondTags.add(tag4);\n        \n        byte[] msg1 = \"msg 1\".getBytes();\n        byte[] msg2 = \"msg 2\".getBytes();\n        byte[] msg3 = \"msg 3\".getBytes();\n        byte[] msg4 = \"msg 4\".getBytes();\n        byte[] msg5 = \"msg 5\".getBytes();\n        \n        byte emsg1[] = _context.elGamalAESEngine().encrypt(msg1, pubKey, curKey, firstTags, 64);\n        \n        byte dmsg1[] = _context.elGamalAESEngine().decrypt(emsg1, privKey);\n        assertTrue(DataHelper.eq(dmsg1, msg1));\n        \n        \n        \n        _context.sessionKeyManager().tagsDelivered(pubKey, curKey, firstTags);\n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        SessionTag curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        \n        byte emsg2[] = _context.elGamalAESEngine().encrypt(msg2, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg2[] = _context.elGamalAESEngine().decrypt(emsg2, privKey);\n        assertTrue(DataHelper.eq(dmsg2, msg2));\n        \n        \n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg3[] = _context.elGamalAESEngine().encrypt(msg3, pubKey, curKey, secondTags, curTag, nextKey, 64);\n        \n        byte dmsg3[] = _context.elGamalAESEngine().decrypt(emsg3, privKey);\n        assertTrue(DataHelper.eq(dmsg3, msg3));\n        \n        \n        \n        _context.sessionKeyManager().tagsDelivered(pubKey, nextKey, secondTags); // note nextKey not curKey\n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg4[] = _context.elGamalAESEngine().encrypt(msg4, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg4[] = _context.elGamalAESEngine().decrypt(emsg4, privKey);\n        assertTrue(DataHelper.eq(dmsg4, msg4));\n        \n        \n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg5[] = _context.elGamalAESEngine().encrypt(msg5, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg5[] = _context.elGamalAESEngine().decrypt(emsg5, privKey);\n        assertTrue(DataHelper.eq(dmsg5, msg5));\n        \n        \n        \n    }","id":12968,"modified_method":"/**\n     *  Run tagsIncluded    useTag  rekey\n     *  1   yes (2)         no      no\n     *  2   no              yes     no\n     *  3   yes (2)         yes     yes\n     *  4   no              yes     no\n     *  5   no              yes     no\n     */\n    public void testRekeying() throws Exception{\n        Object keys[] = KeyGenerator.getInstance().generatePKIKeypair();\n        PublicKey pubKey = (PublicKey)keys[0];\n        PrivateKey privKey = (PrivateKey)keys[1];\n        SessionKey curKey = _context.sessionKeyManager().createSession(pubKey);\n        SessionKey nextKey = KeyGenerator.getInstance().generateSessionKey();\n        \n        SessionTag tag1 = new SessionTag(true);\n        SessionTag tag2 = new SessionTag(true);\n        SessionTag tag3 = new SessionTag(true);\n        SessionTag tag4 = new SessionTag(true);\n        \n        HashSet firstTags = new HashSet();\n        firstTags.add(tag1);\n        firstTags.add(tag2);\n        \n        HashSet secondTags = new HashSet();\n        secondTags.add(tag3);\n        secondTags.add(tag4);\n        \n        byte[] msg1 = \"msg 1\".getBytes();\n        byte[] msg2 = \"msg 2\".getBytes();\n        byte[] msg3 = \"msg 3\".getBytes();\n        byte[] msg4 = \"msg 4\".getBytes();\n        byte[] msg5 = \"msg 5\".getBytes();\n        \n        byte emsg1[] = _context.elGamalAESEngine().encrypt(msg1, pubKey, curKey, firstTags, 64);\n        \n        byte dmsg1[] = _context.elGamalAESEngine().decrypt(emsg1, privKey);\n        assertTrue(DataHelper.eq(dmsg1, msg1));\n        \n        \n        \n        TagSetHandle tsh = _context.sessionKeyManager().tagsDelivered(pubKey, curKey, firstTags);\n        _context.sessionKeyManager().tagsAcked(pubKey, curKey, tsh);\n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        SessionTag curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        \n        byte emsg2[] = _context.elGamalAESEngine().encrypt(msg2, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg2[] = _context.elGamalAESEngine().decrypt(emsg2, privKey);\n        assertTrue(DataHelper.eq(dmsg2, msg2));\n        \n        \n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg3[] = _context.elGamalAESEngine().encrypt(msg3, pubKey, curKey, secondTags, curTag, nextKey, 64);\n        \n        byte dmsg3[] = _context.elGamalAESEngine().decrypt(emsg3, privKey);\n        assertTrue(DataHelper.eq(dmsg3, msg3));\n        \n        \n        \n        tsh = _context.sessionKeyManager().tagsDelivered(pubKey, nextKey, secondTags); // note nextKey not curKey\n        _context.sessionKeyManager().tagsAcked(pubKey, nextKey, tsh);\n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg4[] = _context.elGamalAESEngine().encrypt(msg4, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg4[] = _context.elGamalAESEngine().decrypt(emsg4, privKey);\n        assertTrue(DataHelper.eq(dmsg4, msg4));\n        \n        \n        \n        curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n        curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n        \n        assertNotNull(curTag);\n        assertNotNull(curKey);\n        \n        byte emsg5[] = _context.elGamalAESEngine().encrypt(msg5, pubKey, curKey, null, curTag, 64);\n        \n        byte dmsg5[] = _context.elGamalAESEngine().decrypt(emsg5, privKey);\n        assertTrue(DataHelper.eq(dmsg5, msg5));\n        \n        \n        \n    }","commit_id":"33c5e14f909f22ca3772c8111ef26c928ec55dde","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     *  20 tags every 10 messages, rekey every 50\n     */\n    public void testLongSession() throws Exception{\n        Object keys[] = KeyGenerator.getInstance().generatePKIKeypair();\n        PublicKey pubKey = (PublicKey)keys[0];\n        PrivateKey privKey = (PrivateKey)keys[1];\n        SessionKey curKey = _context.sessionKeyManager().createSession(pubKey);\n        \n        for (int i = 0; i < 1000; i++) {\n            Set tags = null;\n            SessionKey nextKey = null;\n            curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n            SessionTag curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n            \n            int availTags = _context.sessionKeyManager().getAvailableTags(pubKey, curKey);\n            if ((availTags < 1)) {\n                tags = generateNewTags(50);\n            } \n            if (i % 50 == 0)\n                nextKey = KeyGenerator.getInstance().generateSessionKey();\n            \n            byte[] msg = (\"msg \" + i).getBytes();\n            \n            byte emsg[] = _context.elGamalAESEngine().encrypt(msg, pubKey, curKey, tags, curTag, nextKey, 64);\n            \n            byte dmsg[] = _context.elGamalAESEngine().decrypt(emsg, privKey);\n            assertTrue(DataHelper.eq(dmsg, msg));\n            \n            if ( (tags != null) && (tags.size() > 0) ) {\n                if (nextKey == null) {\n                    _context.sessionKeyManager().tagsDelivered(pubKey, curKey, tags);\n                } else {\n                    _context.sessionKeyManager().tagsDelivered(pubKey, nextKey, tags);\n                }\n            }\n        }\n    }","id":12969,"modified_method":"/**\n     *  20 tags every 10 messages, rekey every 50\n     */\n    public void testLongSession() throws Exception{\n        Object keys[] = KeyGenerator.getInstance().generatePKIKeypair();\n        PublicKey pubKey = (PublicKey)keys[0];\n        PrivateKey privKey = (PrivateKey)keys[1];\n        SessionKey curKey = _context.sessionKeyManager().createSession(pubKey);\n        \n        for (int i = 0; i < 1000; i++) {\n            Set tags = null;\n            SessionKey nextKey = null;\n            curKey = _context.sessionKeyManager().getCurrentKey(pubKey);\n            SessionTag curTag = _context.sessionKeyManager().consumeNextAvailableTag(pubKey, curKey);\n            \n            int availTags = _context.sessionKeyManager().getAvailableTags(pubKey, curKey);\n            if ((availTags < 1)) {\n                tags = generateNewTags(50);\n            } \n            if (i % 50 == 0)\n                nextKey = KeyGenerator.getInstance().generateSessionKey();\n            \n            byte[] msg = (\"msg \" + i).getBytes();\n            \n            byte emsg[] = _context.elGamalAESEngine().encrypt(msg, pubKey, curKey, tags, curTag, nextKey, 64);\n            \n            byte dmsg[] = _context.elGamalAESEngine().decrypt(emsg, privKey);\n            assertTrue(DataHelper.eq(dmsg, msg));\n            \n            if ( (tags != null) && (tags.size() > 0) ) {\n                if (nextKey == null) {\n                    TagSetHandle tsh = _context.sessionKeyManager().tagsDelivered(pubKey, curKey, tags);\n                    _context.sessionKeyManager().tagsAcked(pubKey, curKey, tsh);\n                } else {\n                    TagSetHandle tsh = _context.sessionKeyManager().tagsDelivered(pubKey, nextKey, tags);\n                    _context.sessionKeyManager().tagsAcked(pubKey, nextKey, tsh);\n                }\n            }\n        }\n    }","commit_id":"33c5e14f909f22ca3772c8111ef26c928ec55dde","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * @param sb not null\n     * @param entity not null\n     * @param indent not null\n     * @throws MojoExecutionException if any\n     */\n    private void addDefaultJavadocTags( final StringBuffer sb, final AbstractInheritableJavaEntity entity,\n                                        final String indent )\n        throws MojoExecutionException\n    {\n        boolean isJavaMethod = false;\n        if ( entity instanceof JavaMethod )\n        {\n            isJavaMethod = true;\n        }\n        boolean addSeparator = false;\n        if ( isJavaMethod )\n        {\n            JavaMethod javaMethod = (JavaMethod) entity;\n\n            if ( fixTag( PARAM_TAG ) && javaMethod.getParameters() != null )\n            {\n                for ( int i = 0; i < javaMethod.getParameters().length; i++ )\n                {\n                    JavaParameter javaParameter = javaMethod.getParameters()[i];\n\n                    if ( !addSeparator )\n                    {\n                        addSeparator( sb, indent );\n                        addSeparator = true;\n                    }\n\n                    sb.append( indent ).append( \" * @\" ).append( PARAM_TAG ).append( \" \" );\n                    sb.append( javaParameter.getName() );\n                    sb.append( \" \" );\n                    sb.append( getDefaultJavadocForType( javaParameter.getType() ) );\n                    sb.append( EOL );\n                }\n            }\n\n            if ( fixTag( RETURN_TAG ) )\n            {\n                if ( javaMethod.getReturns() != null && !javaMethod.getReturns().isVoid() )\n                {\n                    if ( !addSeparator )\n                    {\n                        addSeparator( sb, indent );\n                        addSeparator = true;\n                    }\n\n                    sb.append( indent ).append( \" * @\" ).append( RETURN_TAG ).append( \" \" );\n                    sb.append( getDefaultJavadocForType( javaMethod.getReturns() ) );\n                    sb.append( EOL );\n                }\n            }\n\n            if ( fixTag( THROWS_TAG ) && javaMethod.getExceptions() != null )\n            {\n                for ( int i = 0; i < javaMethod.getExceptions().length; i++ )\n                {\n                    Type exception = javaMethod.getExceptions()[i];\n\n                    if ( !addSeparator )\n                    {\n                        addSeparator( sb, indent );\n                        addSeparator = true;\n                    }\n\n                    sb.append( indent ).append( \" * @\" ).append( THROWS_TAG ).append( \" \" );\n                    sb.append( getDefaultJavadocForType( exception ) );\n                    sb.append( \" if any\" );\n                    sb.append( EOL );\n                }\n            }\n        }\n\n        if ( !isJavaMethod )\n        {\n            if ( fixTag( AUTHOR_TAG ) )\n            {\n                if ( !addSeparator )\n                {\n                    addSeparator( sb, indent );\n                    addSeparator = true;\n                }\n\n                addDefaultAuthor( sb, indent );\n            }\n            if ( fixTag( VERSION_TAG ) )\n            {\n                if ( !addSeparator )\n                {\n                    addSeparator( sb, indent );\n                    addSeparator = true;\n                }\n\n                addDefaultVersion( sb, indent );\n            }\n        }\n\n        if ( fixTag( SINCE_TAG ) )\n        {\n            if ( !addSeparator )\n            {\n                addSeparator( sb, indent );\n                addSeparator = true;\n            }\n\n            if ( !isJavaMethod )\n            {\n                JavaClass javaClass = (JavaClass) entity;\n\n                if ( !ignoreClirr )\n                {\n                    if ( isNewClassFromLastVersion( javaClass ) )\n                    {\n                        addDefaultSince( sb, indent );\n                    }\n                }\n                else\n                {\n                    addDefaultSince( sb, indent );\n                }\n            }\n            else\n            {\n                JavaMethod javaMethod = (JavaMethod) entity;\n\n                if ( !ignoreClirr )\n                {\n                    if ( isNewMethodFromLastRevision( javaMethod ) )\n                    {\n                        addDefaultSince( sb, indent );\n                    }\n                }\n                else\n                {\n                    addDefaultSince( sb, indent );\n                }\n            }\n        }\n    }","id":12970,"modified_method":"/**\n     * @param sb not null\n     * @param entity not null\n     * @param indent not null\n     * @throws MojoExecutionException if any\n     */\n    private void addDefaultJavadocTags( final StringBuffer sb, final AbstractInheritableJavaEntity entity,\n                                        final String indent )\n        throws MojoExecutionException\n    {\n        boolean isJavaMethod = false;\n        if ( entity instanceof JavaMethod )\n        {\n            isJavaMethod = true;\n        }\n        boolean addSeparator = false;\n        if ( isJavaMethod )\n        {\n            JavaMethod javaMethod = (JavaMethod) entity;\n\n            if ( fixTag( PARAM_TAG ) && javaMethod.getParameters() != null )\n            {\n                for ( int i = 0; i < javaMethod.getParameters().length; i++ )\n                {\n                    JavaParameter javaParameter = javaMethod.getParameters()[i];\n\n                    if ( !addSeparator )\n                    {\n                        addSeparator( sb, indent );\n                        addSeparator = true;\n                    }\n\n                    sb.append( indent ).append( \" * @\" ).append( PARAM_TAG ).append( \" \" );\n                    sb.append( javaParameter.getName() );\n                    sb.append( \" \" );\n                    sb.append( getDefaultJavadocForType( javaParameter.getType() ) );\n                    sb.append( EOL );\n                }\n            }\n\n            if ( fixTag( RETURN_TAG ) )\n            {\n                if ( javaMethod.getReturns() != null && !javaMethod.getReturns().isVoid() )\n                {\n                    if ( !addSeparator )\n                    {\n                        addSeparator( sb, indent );\n                        addSeparator = true;\n                    }\n\n                    sb.append( indent ).append( \" * @\" ).append( RETURN_TAG ).append( \" \" );\n                    sb.append( getDefaultJavadocForType( javaMethod.getReturns() ) );\n                    sb.append( EOL );\n                }\n            }\n\n            if ( fixTag( THROWS_TAG ) && javaMethod.getExceptions() != null )\n            {\n                for ( int i = 0; i < javaMethod.getExceptions().length; i++ )\n                {\n                    Type exception = javaMethod.getExceptions()[i];\n\n                    if ( !addSeparator )\n                    {\n                        addSeparator( sb, indent );\n                        addSeparator = true;\n                    }\n\n                    sb.append( indent ).append( \" * @\" ).append( THROWS_TAG ).append( \" \" );\n                    sb.append( getDefaultJavadocForType( exception ) );\n                    sb.append( \" if any\" );\n                    sb.append( EOL );\n                }\n            }\n        }\n\n        if ( !isJavaMethod )\n        {\n            if ( fixTag( AUTHOR_TAG ) )\n            {\n                if ( !addSeparator )\n                {\n                    addSeparator( sb, indent );\n                    addSeparator = true;\n                }\n\n                addDefaultAuthor( sb, indent );\n            }\n            if ( fixTag( VERSION_TAG ) )\n            {\n                if ( !addSeparator )\n                {\n                    addSeparator( sb, indent );\n                    addSeparator = true;\n                }\n\n                addDefaultVersion( sb, indent );\n            }\n        }\n\n        if ( fixTag( SINCE_TAG ) )\n        {\n            if ( !isJavaMethod )\n            {\n                JavaClass javaClass = (JavaClass) entity;\n\n                if ( !ignoreClirr )\n                {\n                    if ( isNewClassFromLastVersion( javaClass ) )\n                    {\n                        if ( !addSeparator )\n                        {\n                            addSeparator( sb, indent );\n                            addSeparator = true;\n                        }\n\n                        addDefaultSince( sb, indent );\n                    }\n                }\n                else\n                {\n                    if ( !addSeparator )\n                    {\n                        addSeparator( sb, indent );\n                        addSeparator = true;\n                    }\n\n                    addDefaultSince( sb, indent );\n                }\n            }\n            else\n            {\n                JavaMethod javaMethod = (JavaMethod) entity;\n\n                if ( !ignoreClirr )\n                {\n                    if ( isNewMethodFromLastRevision( javaMethod ) )\n                    {\n                        if ( !addSeparator )\n                        {\n                            addSeparator( sb, indent );\n                            addSeparator = true;\n                        }\n\n                        addDefaultSince( sb, indent );\n                    }\n                }\n                else\n                {\n                    if ( !addSeparator )\n                    {\n                        addSeparator( sb, indent );\n                        addSeparator = true;\n                    }\n\n                    addDefaultSince( sb, indent );\n                }\n            }\n        }\n    }","commit_id":"0189126a002422dbdce289ed0c11edba9e210a21","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * @param sb not null\n     * @param originalContent not null\n     * @param entity not null\n     * @param indent not null\n     * @throws IOException if any\n     * @throws MojoExecutionException if any\n     */\n    private void updateJavadocTags( final StringBuffer sb, final String originalContent,\n                                    final AbstractInheritableJavaEntity entity, final String indent )\n        throws IOException, MojoExecutionException\n    {\n        boolean isJavaMethod = false;\n        if ( entity instanceof JavaMethod )\n        {\n            isJavaMethod = true;\n        }\n\n        addSeparator( sb, indent );\n\n        List tagNames = new LinkedList();\n        List tagParams = new LinkedList();\n        boolean hasTagReturn = false;\n        List tagThrows = new LinkedList();\n\n        for ( int i = 0; i < entity.getTags().length; i++ )\n        {\n            DocletTag docletTag = entity.getTags()[i];\n\n            tagNames.add( docletTag.getName() );\n\n            if ( docletTag.getName().equals( RETURN_TAG ) )\n            {\n                hasTagReturn = true;\n            }\n\n            if ( docletTag.getName().equals( THROWS_TAG ) )\n            {\n                String originalTag = getJavadocComment( originalContent, entity, docletTag );\n                originalTag = removeLastEmptyJavadocLines( originalTag );\n\n                StringTokenizer token =\n                    new StringTokenizer( originalTag.substring( originalTag.indexOf( \"@\" + THROWS_TAG ) + 7 ), EOL\n                        + \" \" );\n                if ( token.countTokens() > 0 )\n                {\n                    tagThrows.add( token.nextToken() );\n                }\n            }\n\n            if ( docletTag.getValue().length() > 0 )\n            {\n                String originalTag = getJavadocComment( originalContent, entity, docletTag );\n                originalTag = removeLastEmptyJavadocLines( originalTag );\n                originalTag = trimRight( originalTag );\n\n                String param = null;\n\n                if ( docletTag.getName().equals( PARAM_TAG ) )\n                {\n                    StringTokenizer token =\n                        new StringTokenizer( originalTag.substring( originalTag.indexOf( \"@\" + PARAM_TAG ) + 6 ),\n                                             EOL + \" \" );\n                    if ( token.countTokens() > 0 )\n                    {\n                        param = token.nextToken();\n                        tagParams.add( param );\n                    }\n                }\n\n                if ( isJavaMethod && param != null )\n                {\n                    JavaMethod javaMethod = (JavaMethod) entity;\n\n                    JavaParameter javaParam = javaMethod.getParameterByName( param );\n                    if ( javaParam == null )\n                    {\n                        if ( getLog().isWarnEnabled() )\n                        {\n                            StringBuffer warn = new StringBuffer();\n\n                            warn.append( \"Fixed unknown param '\" ).append( param ).append( \"' defined in \" );\n                            warn.append( javaMethod.getParentClass().getFullyQualifiedName() );\n                            warn.append( \"#\" ).append( javaMethod.getCallSignature() );\n\n                            getLog().warn( warn.toString() );\n                        }\n\n                        if ( sb.toString().endsWith( EOL ) )\n                        {\n                            sb.delete( sb.toString().lastIndexOf( EOL ), sb.toString().length() );\n                        }\n                    }\n                    else\n                    {\n                        sb.append( originalTag );\n                        if ( StringUtils.removeDuplicateWhitespace( originalContent ).indexOf( \"param \" + param ) == -1 )\n                        {\n                            sb.append( \" \" );\n                            sb.append( getDefaultJavadocForType( javaParam.getType() ) );\n                        }\n                    }\n                }\n                else\n                {\n                    if ( isJavaMethod && docletTag.getName().equals( THROWS_TAG ) && tagThrows.size() > 0 )\n                    {\n                        JavaMethod javaMethod = (JavaMethod) entity;\n\n                        if ( javaMethod.getExceptions() != null )\n                        {\n                            for ( int j = 0; j < javaMethod.getExceptions().length; j++ )\n                            {\n                                Type exception = javaMethod.getExceptions()[j];\n\n                                String throwException = tagThrows.get( tagThrows.size() - 1 ).toString();\n                                if ( exception.getValue().endsWith( throwException ) )\n                                {\n                                    originalTag =\n                                        StringUtils.replace( originalTag, throwException, exception.getValue() );\n                                    tagThrows.add( tagThrows.size() - 1, exception.getValue() );\n                                    if ( originalTag.endsWith( exception.getValue() ) )\n                                    {\n                                        originalTag += \" if any\";\n                                    }\n\n                                    break;\n                                }\n                            }\n                        }\n                        if ( !originalTag.trim().startsWith( \"*\" ) )\n                        {\n                            sb.append( indent ).append( \" *\" );\n                        }\n                        sb.append( originalTag );\n                    }\n                    else\n                    {\n                        if ( !originalTag.trim().startsWith( \"*\" ) )\n                        {\n                            sb.append( indent ).append( \" *\" );\n                        }\n                        sb.append( originalTag );\n                    }\n                }\n            }\n            else\n            {\n                if ( docletTag.getName().equals( RETURN_TAG ) )\n                {\n                    if ( isJavaMethod )\n                    {\n                        JavaMethod javaMethod = (JavaMethod) entity;\n\n                        if ( javaMethod.getReturns() != null && !javaMethod.getReturns().isVoid() )\n                        {\n                            sb.append( indent ).append( \" * @\" ).append( RETURN_TAG ).append( \" \" );\n                            sb.append( getDefaultJavadocForType( javaMethod.getReturns() ) );\n                        }\n                    }\n                    else\n                    {\n                        sb.append( indent ).append( \" * @\" );\n                        sb.append( docletTag.getName() );\n                    }\n                }\n                else if ( !docletTag.getName().equals( PARAM_TAG ) )\n                {\n                    sb.append( indent ).append( \" * @\" );\n                    sb.append( docletTag.getName() );\n                }\n            }\n            sb.append( EOL );\n        }\n\n        // add missing tags...\n        if ( isJavaMethod )\n        {\n            JavaMethod javaMethod = (JavaMethod) entity;\n\n            for ( int i = 0; i < javaMethod.getParameters().length; i++ )\n            {\n                JavaParameter param = javaMethod.getParameters()[i];\n\n                if ( !tagParams.contains( param.getName() ) )\n                {\n                    sb.append( indent ).append( \" * @\" ).append( PARAM_TAG ).append( \" \" );\n                    sb.append( param.getName() );\n                    sb.append( \" \" );\n                    sb.append( getDefaultJavadocForType( param.getType() ) );\n                    sb.append( EOL );\n                }\n            }\n\n            if ( !hasTagReturn && javaMethod.getReturns() != null && !javaMethod.getReturns().isVoid() )\n            {\n                sb.append( indent ).append( \" * @\" ).append( RETURN_TAG ).append( \" \" );\n                sb.append( getDefaultJavadocForType( javaMethod.getReturns() ) );\n                sb.append( EOL );\n            }\n\n            if ( javaMethod.getExceptions() != null )\n            {\n                for ( int i = 0; i < javaMethod.getExceptions().length; i++ )\n                {\n                    Type exception = javaMethod.getExceptions()[i];\n\n                    if ( !tagThrows.contains( exception.getValue() ) )\n                    {\n                        sb.append( indent ).append( \" * @\" ).append( THROWS_TAG ).append( \" \" );\n                        sb.append( getDefaultJavadocForType( exception ) );\n                        sb.append( \" if any\" );\n                        sb.append( EOL );\n                    }\n                }\n            }\n        }\n        if ( !isJavaMethod )\n        {\n            if ( fixTag( AUTHOR_TAG ) && !tagNames.contains( AUTHOR_TAG ) )\n            {\n                addDefaultAuthor( sb, indent );\n            }\n            if ( fixTag( VERSION_TAG ) && !tagNames.contains( VERSION_TAG ) )\n            {\n                addDefaultVersion( sb, indent );\n            }\n        }\n        if ( fixTag( SINCE_TAG ) && !tagNames.contains( SINCE_TAG ) )\n        {\n            if ( !isJavaMethod )\n            {\n                if ( !ignoreClirr )\n                {\n                    if ( isNewClassFromLastVersion( (JavaClass) entity ) )\n                    {\n                        addDefaultSince( sb, indent );\n                    }\n                }\n                else\n                {\n                    addDefaultSince( sb, indent );\n                }\n            }\n            else\n            {\n                if ( !ignoreClirr )\n                {\n                    if ( isNewMethodFromLastRevision( (JavaMethod) entity ) )\n                    {\n                        addDefaultSince( sb, indent );\n                    }\n                }\n                else\n                {\n                    addDefaultSince( sb, indent );\n                }\n            }\n        }\n    }","id":12971,"modified_method":"/**\n     * @param sb not null\n     * @param originalContent not null\n     * @param entity not null\n     * @param indent not null\n     * @throws IOException if any\n     * @throws MojoExecutionException if any\n     */\n    private void updateJavadocTags( final StringBuffer sb, final String originalContent,\n                                    final AbstractInheritableJavaEntity entity, final String indent )\n        throws IOException, MojoExecutionException\n    {\n        boolean isJavaMethod = false;\n        if ( entity instanceof JavaMethod )\n        {\n            isJavaMethod = true;\n        }\n\n        addSeparator( sb, indent );\n\n        List tagNames = new LinkedList();\n        List tagParams = new LinkedList();\n        boolean hasTagReturn = false;\n        List tagThrows = new LinkedList();\n\n        for ( int i = 0; i < entity.getTags().length; i++ )\n        {\n            DocletTag docletTag = entity.getTags()[i];\n\n            tagNames.add( docletTag.getName() );\n\n            if ( docletTag.getName().equals( RETURN_TAG ) )\n            {\n                hasTagReturn = true;\n            }\n\n            if ( docletTag.getName().equals( THROWS_TAG ) )\n            {\n                String originalTag = getJavadocComment( originalContent, entity, docletTag );\n                originalTag = removeLastEmptyJavadocLines( originalTag );\n\n                String atThrows = \"@\" + THROWS_TAG;\n                if ( originalTag.indexOf( atThrows ) != -1 )\n                {\n                    StringTokenizer token =\n                        new StringTokenizer( originalTag.substring( originalTag.indexOf( atThrows )\n                            + atThrows.length() ), EOL + \" \" );\n                    if ( token.countTokens() > 0 )\n                    {\n                        tagThrows.add( token.nextToken() );\n                    }\n                }\n            }\n\n            if ( docletTag.getValue().length() > 0 )\n            {\n                String originalTag = getJavadocComment( originalContent, entity, docletTag );\n                originalTag = removeLastEmptyJavadocLines( originalTag );\n                originalTag = trimRight( originalTag );\n\n                String param = null;\n\n                String atParam = \"@\" + PARAM_TAG;\n                if ( docletTag.getName().equals( PARAM_TAG ) && originalTag.indexOf( atParam ) != -1 )\n                {\n                    StringTokenizer token =\n                        new StringTokenizer( originalTag.substring( originalTag.indexOf( atParam )\n                            + atParam.length() ), EOL + \" \" );\n                    if ( token.countTokens() > 0 )\n                    {\n                        param = token.nextToken();\n                        tagParams.add( param );\n                    }\n                }\n\n                if ( isJavaMethod && param != null )\n                {\n                    JavaMethod javaMethod = (JavaMethod) entity;\n\n                    JavaParameter javaParam = javaMethod.getParameterByName( param );\n                    if ( javaParam == null )\n                    {\n                        if ( getLog().isWarnEnabled() )\n                        {\n                            StringBuffer warn = new StringBuffer();\n\n                            warn.append( \"Fixed unknown param '\" ).append( param ).append( \"' defined in \" );\n                            warn.append( javaMethod.getParentClass().getFullyQualifiedName() );\n                            warn.append( \"#\" ).append( javaMethod.getCallSignature() );\n\n                            getLog().warn( warn.toString() );\n                        }\n\n                        if ( sb.toString().endsWith( EOL ) )\n                        {\n                            sb.delete( sb.toString().lastIndexOf( EOL ), sb.toString().length() );\n                        }\n                    }\n                    else\n                    {\n                        sb.append( originalTag );\n                        if ( StringUtils.removeDuplicateWhitespace( originalContent ).indexOf( \"param \" + param ) == -1 )\n                        {\n                            sb.append( \" \" );\n                            sb.append( getDefaultJavadocForType( javaParam.getType() ) );\n                        }\n                    }\n                }\n                else\n                {\n                    if ( isJavaMethod && docletTag.getName().equals( THROWS_TAG ) && tagThrows.size() > 0 )\n                    {\n                        JavaMethod javaMethod = (JavaMethod) entity;\n\n                        if ( javaMethod.getExceptions() != null )\n                        {\n                            for ( int j = 0; j < javaMethod.getExceptions().length; j++ )\n                            {\n                                Type exception = javaMethod.getExceptions()[j];\n\n                                String throwException = tagThrows.get( tagThrows.size() - 1 ).toString();\n                                if ( exception.getValue().endsWith( throwException ) )\n                                {\n                                    originalTag =\n                                        StringUtils.replace( originalTag, throwException, exception.getValue() );\n                                    tagThrows.add( tagThrows.size() - 1, exception.getValue() );\n                                    if ( originalTag.endsWith( exception.getValue() ) )\n                                    {\n                                        originalTag += \" if any\";\n                                    }\n\n                                    break;\n                                }\n                            }\n                        }\n                        if ( !originalTag.trim().startsWith( \"*\" ) )\n                        {\n                            sb.append( indent ).append( \" *\" );\n                        }\n                        sb.append( originalTag );\n                    }\n                    else\n                    {\n                        if ( !originalTag.trim().startsWith( \"*\" ) )\n                        {\n                            sb.append( indent ).append( \" *\" );\n                        }\n                        sb.append( originalTag );\n                    }\n                }\n            }\n            else\n            {\n                if ( docletTag.getName().equals( RETURN_TAG ) )\n                {\n                    if ( isJavaMethod )\n                    {\n                        JavaMethod javaMethod = (JavaMethod) entity;\n\n                        if ( javaMethod.getReturns() != null && !javaMethod.getReturns().isVoid() )\n                        {\n                            sb.append( indent ).append( \" * @\" ).append( RETURN_TAG ).append( \" \" );\n                            sb.append( getDefaultJavadocForType( javaMethod.getReturns() ) );\n                        }\n                    }\n                    else\n                    {\n                        sb.append( indent ).append( \" * @\" );\n                        sb.append( docletTag.getName() );\n                    }\n                }\n                else if ( !docletTag.getName().equals( PARAM_TAG ) )\n                {\n                    sb.append( indent ).append( \" * @\" );\n                    sb.append( docletTag.getName() );\n                }\n            }\n            sb.append( EOL );\n        }\n\n        // add missing tags...\n        if ( isJavaMethod )\n        {\n            JavaMethod javaMethod = (JavaMethod) entity;\n\n            for ( int i = 0; i < javaMethod.getParameters().length; i++ )\n            {\n                JavaParameter param = javaMethod.getParameters()[i];\n\n                if ( !tagParams.contains( param.getName() ) )\n                {\n                    sb.append( indent ).append( \" * @\" ).append( PARAM_TAG ).append( \" \" );\n                    sb.append( param.getName() );\n                    sb.append( \" \" );\n                    sb.append( getDefaultJavadocForType( param.getType() ) );\n                    sb.append( EOL );\n                }\n            }\n\n            if ( !hasTagReturn && javaMethod.getReturns() != null && !javaMethod.getReturns().isVoid() )\n            {\n                sb.append( indent ).append( \" * @\" ).append( RETURN_TAG ).append( \" \" );\n                sb.append( getDefaultJavadocForType( javaMethod.getReturns() ) );\n                sb.append( EOL );\n            }\n\n            if ( javaMethod.getExceptions() != null )\n            {\n                for ( int i = 0; i < javaMethod.getExceptions().length; i++ )\n                {\n                    Type exception = javaMethod.getExceptions()[i];\n\n                    if ( !tagThrows.contains( exception.getValue() ) )\n                    {\n                        sb.append( indent ).append( \" * @\" ).append( THROWS_TAG ).append( \" \" );\n                        sb.append( getDefaultJavadocForType( exception ) );\n                        sb.append( \" if any\" );\n                        sb.append( EOL );\n                    }\n                }\n            }\n        }\n        if ( !isJavaMethod )\n        {\n            if ( fixTag( AUTHOR_TAG ) && !tagNames.contains( AUTHOR_TAG ) )\n            {\n                addDefaultAuthor( sb, indent );\n            }\n            if ( fixTag( VERSION_TAG ) && !tagNames.contains( VERSION_TAG ) )\n            {\n                addDefaultVersion( sb, indent );\n            }\n        }\n        if ( fixTag( SINCE_TAG ) && !tagNames.contains( SINCE_TAG ) )\n        {\n            if ( !isJavaMethod )\n            {\n                if ( !ignoreClirr )\n                {\n                    if ( isNewClassFromLastVersion( (JavaClass) entity ) )\n                    {\n                        addDefaultSince( sb, indent );\n                    }\n                }\n                else\n                {\n                    addDefaultSince( sb, indent );\n                }\n            }\n            else\n            {\n                if ( !ignoreClirr )\n                {\n                    if ( isNewMethodFromLastRevision( (JavaMethod) entity ) )\n                    {\n                        addDefaultSince( sb, indent );\n                    }\n                }\n                else\n                {\n                    addDefaultSince( sb, indent );\n                }\n            }\n        }\n    }","commit_id":"0189126a002422dbdce289ed0c11edba9e210a21","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void mergeSnmpInterfaceAttributes(OnmsSnmpInterface scannedSnmpIface) {\n        \n        if (hasNewValue(scannedSnmpIface.getIfAdminStatus(), getIfAdminStatus())) {\n            setIfAdminStatus(scannedSnmpIface.getIfAdminStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfAlias(), getIfAlias())) {\n            setIfAlias(scannedSnmpIface.getIfAlias());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfDescr(), getIfDescr())) {\n            setIfDescr(scannedSnmpIface.getIfDescr());\n        }\n            \n        if (hasNewValue(scannedSnmpIface.getIfName(), getIfName())) {\n            setIfName(scannedSnmpIface.getIfName());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfOperStatus(), getIfOperStatus())) {\n            setIfOperStatus(scannedSnmpIface.getIfOperStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfSpeed(), getIfSpeed())) {\n            setIfSpeed(scannedSnmpIface.getIfSpeed());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfType(), getIfType())) {\n            setIfType(scannedSnmpIface.getIfType());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIpAddress(), getIpAddress())) {\n            setIpAddress(scannedSnmpIface.getIpAddress());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getNetMask(), getNetMask())) {\n            setNetMask(scannedSnmpIface.getNetMask());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getPhysAddr(), getPhysAddr())) {\n            setPhysAddr(scannedSnmpIface.getPhysAddr());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getLastCapsdPoll(), getLastCapsdPoll())) {\n            setLastCapsdPoll(scannedSnmpIface.getLastCapsdPoll());\n        }\n        \n        if(scannedSnmpIface.isCollectionUserSpecified()){\n            setCollectionEnabled(scannedSnmpIface.isCollectionEnabled(), true);\n        }else if(!isCollectionUserSpecified()){\n            setCollectionEnabled(scannedSnmpIface.isCollectionEnabled() || isCollectionEnabled());\n        }\n        \n    }","id":12972,"modified_method":"public void mergeSnmpInterfaceAttributes(OnmsSnmpInterface scannedSnmpIface) {\n        \n        if (hasNewValue(scannedSnmpIface.getIfAdminStatus(), getIfAdminStatus())) {\n            setIfAdminStatus(scannedSnmpIface.getIfAdminStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfAlias(), getIfAlias())) {\n            setIfAlias(scannedSnmpIface.getIfAlias());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfDescr(), getIfDescr())) {\n            setIfDescr(scannedSnmpIface.getIfDescr());\n        }\n            \n        if (hasNewValue(scannedSnmpIface.getIfName(), getIfName())) {\n            setIfName(scannedSnmpIface.getIfName());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfOperStatus(), getIfOperStatus())) {\n            setIfOperStatus(scannedSnmpIface.getIfOperStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfSpeed(), getIfSpeed())) {\n            setIfSpeed(scannedSnmpIface.getIfSpeed());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfType(), getIfType())) {\n            setIfType(scannedSnmpIface.getIfType());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIpAddress(), getIpAddress())) {\n            setIpAddress(scannedSnmpIface.getIpAddress());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getNetMask(), getNetMask())) {\n            setNetMask(scannedSnmpIface.getNetMask());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getPhysAddr(), getPhysAddr())) {\n            setPhysAddr(scannedSnmpIface.getPhysAddr());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getLastCapsdPoll(), getLastCapsdPoll())) {\n            setLastCapsdPoll(scannedSnmpIface.getLastCapsdPoll());\n        }\n        \n        if(scannedSnmpIface.isCollectionUserSpecified() || !isCollectionUserSpecified()){\n            setCollectionEnabled(scannedSnmpIface.isCollectionEnabled(), scannedSnmpIface.isCollectionUserSpecified());\n        }\n        \n    }","commit_id":"77a88401a769830584de8be496823f655fa1f887","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void mergeSnmpInterfaceAttributes(OnmsSnmpInterface scannedSnmpIface) {\n        \n        if (hasNewValue(scannedSnmpIface.getIfAdminStatus(), getIfAdminStatus())) {\n            setIfAdminStatus(scannedSnmpIface.getIfAdminStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfAlias(), getIfAlias())) {\n            setIfAlias(scannedSnmpIface.getIfAlias());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfDescr(), getIfDescr())) {\n            setIfDescr(scannedSnmpIface.getIfDescr());\n        }\n            \n        if (hasNewValue(scannedSnmpIface.getIfName(), getIfName())) {\n            setIfName(scannedSnmpIface.getIfName());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfOperStatus(), getIfOperStatus())) {\n            setIfOperStatus(scannedSnmpIface.getIfOperStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfSpeed(), getIfSpeed())) {\n            setIfSpeed(scannedSnmpIface.getIfSpeed());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfType(), getIfType())) {\n            setIfType(scannedSnmpIface.getIfType());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIpAddress(), getIpAddress())) {\n            setIpAddress(scannedSnmpIface.getIpAddress());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getNetMask(), getNetMask())) {\n            setNetMask(scannedSnmpIface.getNetMask());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getPhysAddr(), getPhysAddr())) {\n            setPhysAddr(scannedSnmpIface.getPhysAddr());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getLastCapsdPoll(), getLastCapsdPoll())) {\n            setLastCapsdPoll(scannedSnmpIface.getLastCapsdPoll());\n        }\n        \n        if(scannedSnmpIface.isCollectionUserSpecified()){\n            setCollectionEnabled(scannedSnmpIface.isCollectionEnabled(), true);\n        }else if(!isCollectionUserSpecified()){\n            setCollectionEnabled(scannedSnmpIface.isCollectionEnabled() || isCollectionEnabled());\n        }\n        \n    }","id":12973,"modified_method":"public void mergeSnmpInterfaceAttributes(OnmsSnmpInterface scannedSnmpIface) {\n        \n        if (hasNewValue(scannedSnmpIface.getIfAdminStatus(), getIfAdminStatus())) {\n            setIfAdminStatus(scannedSnmpIface.getIfAdminStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfAlias(), getIfAlias())) {\n            setIfAlias(scannedSnmpIface.getIfAlias());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfDescr(), getIfDescr())) {\n            setIfDescr(scannedSnmpIface.getIfDescr());\n        }\n            \n        if (hasNewValue(scannedSnmpIface.getIfName(), getIfName())) {\n            setIfName(scannedSnmpIface.getIfName());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfOperStatus(), getIfOperStatus())) {\n            setIfOperStatus(scannedSnmpIface.getIfOperStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfSpeed(), getIfSpeed())) {\n            setIfSpeed(scannedSnmpIface.getIfSpeed());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfType(), getIfType())) {\n            setIfType(scannedSnmpIface.getIfType());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIpAddress(), getIpAddress())) {\n            setIpAddress(scannedSnmpIface.getIpAddress());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getNetMask(), getNetMask())) {\n            setNetMask(scannedSnmpIface.getNetMask());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getPhysAddr(), getPhysAddr())) {\n            setPhysAddr(scannedSnmpIface.getPhysAddr());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getLastCapsdPoll(), getLastCapsdPoll())) {\n            setLastCapsdPoll(scannedSnmpIface.getLastCapsdPoll());\n        }\n        \n        if(scannedSnmpIface.isCollectionUserSpecified() || !isCollectionUserSpecified()){\n            setCollectionEnabled(scannedSnmpIface.isCollectionEnabled(), scannedSnmpIface.isCollectionUserSpecified());\n        }\n        \n    }","commit_id":"0b8febceb0a7e81b086229a5b6cb61c4356ec893","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void mergeSnmpInterfaceAttributes(OnmsSnmpInterface scannedSnmpIface) {\n        \n        if (hasNewValue(scannedSnmpIface.getIfAdminStatus(), getIfAdminStatus())) {\n            setIfAdminStatus(scannedSnmpIface.getIfAdminStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfAlias(), getIfAlias())) {\n            setIfAlias(scannedSnmpIface.getIfAlias());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfDescr(), getIfDescr())) {\n            setIfDescr(scannedSnmpIface.getIfDescr());\n        }\n            \n        if (hasNewValue(scannedSnmpIface.getIfName(), getIfName())) {\n            setIfName(scannedSnmpIface.getIfName());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfOperStatus(), getIfOperStatus())) {\n            setIfOperStatus(scannedSnmpIface.getIfOperStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfSpeed(), getIfSpeed())) {\n            setIfSpeed(scannedSnmpIface.getIfSpeed());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfType(), getIfType())) {\n            setIfType(scannedSnmpIface.getIfType());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIpAddress(), getIpAddress())) {\n            setIpAddress(scannedSnmpIface.getIpAddress());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getNetMask(), getNetMask())) {\n            setNetMask(scannedSnmpIface.getNetMask());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getPhysAddr(), getPhysAddr())) {\n            setPhysAddr(scannedSnmpIface.getPhysAddr());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getLastCapsdPoll(), getLastCapsdPoll())) {\n            setLastCapsdPoll(scannedSnmpIface.getLastCapsdPoll());\n        }\n        \n        if(scannedSnmpIface.isCollectionUserSpecified()){\n            setCollectionEnabled(scannedSnmpIface.isCollectionEnabled(), true);\n        }else if(!isCollectionUserSpecified()){\n            setCollectionEnabled(scannedSnmpIface.isCollectionEnabled() || isCollectionEnabled());\n        }\n        \n    }","id":12974,"modified_method":"public void mergeSnmpInterfaceAttributes(OnmsSnmpInterface scannedSnmpIface) {\n        \n        if (hasNewValue(scannedSnmpIface.getIfAdminStatus(), getIfAdminStatus())) {\n            setIfAdminStatus(scannedSnmpIface.getIfAdminStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfAlias(), getIfAlias())) {\n            setIfAlias(scannedSnmpIface.getIfAlias());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfDescr(), getIfDescr())) {\n            setIfDescr(scannedSnmpIface.getIfDescr());\n        }\n            \n        if (hasNewValue(scannedSnmpIface.getIfName(), getIfName())) {\n            setIfName(scannedSnmpIface.getIfName());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfOperStatus(), getIfOperStatus())) {\n            setIfOperStatus(scannedSnmpIface.getIfOperStatus());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfSpeed(), getIfSpeed())) {\n            setIfSpeed(scannedSnmpIface.getIfSpeed());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIfType(), getIfType())) {\n            setIfType(scannedSnmpIface.getIfType());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getIpAddress(), getIpAddress())) {\n            setIpAddress(scannedSnmpIface.getIpAddress());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getNetMask(), getNetMask())) {\n            setNetMask(scannedSnmpIface.getNetMask());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getPhysAddr(), getPhysAddr())) {\n            setPhysAddr(scannedSnmpIface.getPhysAddr());\n        }\n        \n        if (hasNewValue(scannedSnmpIface.getLastCapsdPoll(), getLastCapsdPoll())) {\n            setLastCapsdPoll(scannedSnmpIface.getLastCapsdPoll());\n        }\n        \n        if(scannedSnmpIface.isCollectionUserSpecified() || !isCollectionUserSpecified()){\n            setCollectionEnabled(scannedSnmpIface.isCollectionEnabled(), scannedSnmpIface.isCollectionUserSpecified());\n        }\n        \n    }","commit_id":"03403bf5f2508c1032dfcaa7a485d00c7716fe10","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Ability ability = (Ability) getValue(\"stackAbility\");\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        Permanent sourcePermanent = game.getPermanent(source.getSourceId());\r\n        if (ability != null && controller != null && sourcePermanent != null) {\r\n            Ability newAbility = ability.copy();\r\n            newAbility.newId();\r\n            game.getStack().push(new StackAbility(newAbility, source.getControllerId()));\r\n            if (newAbility.getTargets().size() > 0) {\r\n                if (controller.chooseUse(newAbility.getEffects().get(0).getOutcome(), \"Choose new targets?\", source, game)) {\r\n                    newAbility.getTargets().clearChosen();\r\n                    if (newAbility.getTargets().chooseTargets(newAbility.getEffects().get(0).getOutcome(), source.getControllerId(), newAbility, game) == false) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(\": \").append(controller.getLogName()).append(\" copied activated ability\").toString());\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":12975,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Ability ability = (Ability) getValue(\"stackAbility\");\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        Permanent sourcePermanent = game.getPermanent(source.getSourceId());\r\n        if (ability != null && controller != null && sourcePermanent != null) {\r\n            Ability newAbility = ability.copy();\r\n            newAbility.newId();\r\n            game.getStack().push(new StackAbility(newAbility, source.getControllerId()));\r\n            if (newAbility.getTargets().size() > 0) {\r\n                if (controller.chooseUse(newAbility.getEffects().get(0).getOutcome(), \"Choose new targets?\", source, game)) {\r\n                    newAbility.getTargets().clearChosen();\r\n                    if (newAbility.getTargets().chooseTargets(newAbility.getEffects().get(0).getOutcome(), source.getControllerId(), newAbility, false, game) == false) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(\": \").append(controller.getLogName()).append(\" copied activated ability\").toString());\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"69dc4f10ac1ff9df8b18ae9169762d1c1b0a3eeb","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        ColoredManaCost cost = new ColoredManaCost(ColoredManaSymbol.R);\r\n        if (player != null) {\r\n            if (player.chooseUse(Outcome.Benefit, \"Pay \" + cost.getText() + \"? If you do, copy that ability.  You may choose new targets for the copy.\", source, game)) {\r\n                if (cost.pay(source, game, source.getSourceId(), source.getControllerId(), false)) {\r\n                    Ability ability = (Ability) getValue(\"stackAbility\");\r\n                    Player controller = game.getPlayer(source.getControllerId());\r\n                    Permanent sourcePermanent = game.getPermanent(source.getSourceId());\r\n                    if (ability != null && controller != null) {\r\n                        Ability newAbility = ability.copy();\r\n                        newAbility.newId();\r\n                        game.getStack().push(new StackAbility(newAbility, source.getControllerId()));\r\n                        if (newAbility.getTargets().size() > 0) {\r\n                            if (controller.chooseUse(newAbility.getEffects().get(0).getOutcome(), \"Choose new targets?\", source, game)) {\r\n                                newAbility.getTargets().clearChosen();\r\n                                if (newAbility.getTargets().chooseTargets(newAbility.getEffects().get(0).getOutcome(), source.getControllerId(), newAbility, game) == false) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                        game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(\": \").append(controller.getLogName()).append(\" copied activated ability\").toString());\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","id":12976,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        ColoredManaCost cost = new ColoredManaCost(ColoredManaSymbol.R);\r\n        if (player != null) {\r\n            if (player.chooseUse(Outcome.Benefit, \"Pay \" + cost.getText() + \"? If you do, copy that ability.  You may choose new targets for the copy.\", source, game)) {\r\n                if (cost.pay(source, game, source.getSourceId(), source.getControllerId(), false)) {\r\n                    Ability ability = (Ability) getValue(\"stackAbility\");\r\n                    Player controller = game.getPlayer(source.getControllerId());\r\n                    Permanent sourcePermanent = game.getPermanent(source.getSourceId());\r\n                    if (ability != null && controller != null) {\r\n                        Ability newAbility = ability.copy();\r\n                        newAbility.newId();\r\n                        game.getStack().push(new StackAbility(newAbility, source.getControllerId()));\r\n                        if (newAbility.getTargets().size() > 0) {\r\n                            if (controller.chooseUse(newAbility.getEffects().get(0).getOutcome(), \"Choose new targets?\", source, game)) {\r\n                                newAbility.getTargets().clearChosen();\r\n                                if (newAbility.getTargets().chooseTargets(newAbility.getEffects().get(0).getOutcome(), source.getControllerId(), newAbility, false, game) == false) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                        game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(\": \").append(controller.getLogName()).append(\" copied activated ability\").toString());\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"69dc4f10ac1ff9df8b18ae9169762d1c1b0a3eeb","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Permanent p = game.getPermanent(source.getSourceId());\r\n        if (p != null && p.getCounters().getCount(counter.getName()) >= counter.getCount()) {\r\n            p.removeCounters(counter.getName(), counter.getCount(), game);\r\n            if (!game.isSimulation()) {\r\n                game.informPlayers(new StringBuilder(\"Removed \").append(counter.getCount()).append(\" \").append(counter.getName())\r\n                        .append(\" counter from \").append(p.getName()).toString());\r\n            }\r\n            return true;\r\n        }\r\n        Card c = game.getCard(source.getSourceId());\r\n        if (c != null && c.getCounters(game).getCount(counter.getName()) >= counter.getCount()) {\r\n            c.removeCounters(counter.getName(), counter.getCount(), game);\r\n            if (!game.isSimulation()) {\r\n                game.informPlayers(new StringBuilder(\"Removed \").append(counter.getCount()).append(\" \").append(counter.getName())\r\n                        .append(\" counter from \").append(c.getName())\r\n                        .append(\" (\").append(c.getCounters(game).getCount(counter.getName())).append(\" left)\").toString());\r\n            }\r\n            return true;\r\n        }    \r\n        return false;\r\n    }","id":12977,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Permanent permanent = game.getPermanent(source.getSourceId());\r\n        if (permanent != null && permanent.getCounters().getCount(counter.getName()) >= counter.getCount()) {\r\n            permanent.removeCounters(counter.getName(), counter.getCount(), game);\r\n            if (!game.isSimulation()) {\r\n                game.informPlayers(\"Removed \" + counter.getCount() + \" \" + counter.getName() + \" counter from \" + permanent.getLogName());\r\n            }\r\n            return true;\r\n        }\r\n        Card card = game.getCard(source.getSourceId());\r\n        if (card != null && card.getCounters(game).getCount(counter.getName()) >= counter.getCount()) {\r\n            card.removeCounters(counter.getName(), counter.getCount(), game);\r\n            if (!game.isSimulation()) {\r\n                game.informPlayers(\"Removed \" + counter.getCount() + \" \" + counter.getName()\r\n                        + \" counter from \" + card.getLogName()\r\n                        + \" (\" + card.getCounters(game).getCount(counter.getName()) + \" left)\");\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"69dc4f10ac1ff9df8b18ae9169762d1c1b0a3eeb","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        ManaCostsImpl cost = new ManaCostsImpl(\"{2}\");\r\n        if (player != null) {\r\n            if (player.chooseUse(Outcome.Benefit, \"Pay \" + cost.getText() + \"? If you do, copy that ability. You may choose new targets for the copy.\", source, game)) {\r\n                if (cost.pay(source, game, source.getSourceId(), source.getControllerId(), false)) {\r\n                    Ability ability = (Ability) getValue(\"stackAbility\");\r\n                    Player controller = game.getPlayer(source.getControllerId());\r\n                    Permanent sourcePermanent = game.getPermanent(source.getSourceId());\r\n                    if (ability != null && controller != null) {\r\n                        Ability newAbility = ability.copy();\r\n                        newAbility.newId();\r\n                        game.getStack().push(new StackAbility(newAbility, source.getControllerId()));\r\n                        if (newAbility.getTargets().size() > 0) {\r\n                            if (controller.chooseUse(newAbility.getEffects().get(0).getOutcome(), \"Choose new targets?\", source, game)) {\r\n                                newAbility.getTargets().clearChosen();\r\n                                if (newAbility.getTargets().chooseTargets(newAbility.getEffects().get(0).getOutcome(), source.getControllerId(), newAbility, game) == false) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                        game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(\": \").append(controller.getLogName()).append(\" copied activated ability\").toString());\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","id":12978,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        ManaCostsImpl cost = new ManaCostsImpl(\"{2}\");\r\n        if (player != null) {\r\n            if (player.chooseUse(Outcome.Benefit, \"Pay \" + cost.getText() + \"? If you do, copy that ability. You may choose new targets for the copy.\", source, game)) {\r\n                if (cost.pay(source, game, source.getSourceId(), source.getControllerId(), false)) {\r\n                    Ability ability = (Ability) getValue(\"stackAbility\");\r\n                    Player controller = game.getPlayer(source.getControllerId());\r\n                    Permanent sourcePermanent = game.getPermanent(source.getSourceId());\r\n                    if (ability != null && controller != null) {\r\n                        Ability newAbility = ability.copy();\r\n                        newAbility.newId();\r\n                        game.getStack().push(new StackAbility(newAbility, source.getControllerId()));\r\n                        if (newAbility.getTargets().size() > 0) {\r\n                            if (controller.chooseUse(newAbility.getEffects().get(0).getOutcome(), \"Choose new targets?\", source, game)) {\r\n                                newAbility.getTargets().clearChosen();\r\n                                if (newAbility.getTargets().chooseTargets(newAbility.getEffects().get(0).getOutcome(), source.getControllerId(), newAbility, false, game) == false) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                        game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(\": \").append(controller.getLogName()).append(\" copied activated ability\").toString());\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"69dc4f10ac1ff9df8b18ae9169762d1c1b0a3eeb","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        StackAbility stackAbility = (StackAbility)game.getStack().getStackObject(targetPointer.getFirst(game, source));\r\n        if(stackAbility != null){\r\n            Ability ability = (Ability) stackAbility.getStackAbility();\r\n            Player controller = game.getPlayer(source.getControllerId());\r\n            Permanent sourcePermanent = game.getPermanent(source.getSourceId());\r\n            if (ability != null && controller != null && sourcePermanent != null) {\r\n                Ability newAbility = ability.copy();\r\n                newAbility.newId();\r\n                game.getStack().push(new StackAbility(newAbility, source.getControllerId()));\r\n                if (newAbility.getTargets().size() > 0) {\r\n                    if (controller.chooseUse(newAbility.getEffects().get(0).getOutcome(), \"Choose new targets?\", source, game)) {\r\n                        newAbility.getTargets().clearChosen();\r\n                        if (newAbility.getTargets().chooseTargets(newAbility.getEffects().get(0).getOutcome(), source.getControllerId(), newAbility, game) == false) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(\": \").append(controller.getLogName()).append(\" copied activated ability\").toString());\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n        \r\n    }","id":12979,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        StackAbility stackAbility = (StackAbility) game.getStack().getStackObject(targetPointer.getFirst(game, source));\r\n        if (stackAbility != null) {\r\n            Ability ability = (Ability) stackAbility.getStackAbility();\r\n            Player controller = game.getPlayer(source.getControllerId());\r\n            Permanent sourcePermanent = game.getPermanent(source.getSourceId());\r\n            if (ability != null && controller != null && sourcePermanent != null) {\r\n                Ability newAbility = ability.copy();\r\n                newAbility.newId();\r\n                game.getStack().push(new StackAbility(newAbility, source.getControllerId()));\r\n                if (newAbility.getTargets().size() > 0) {\r\n                    if (controller.chooseUse(newAbility.getEffects().get(0).getOutcome(), \"Choose new targets?\", source, game)) {\r\n                        newAbility.getTargets().clearChosen();\r\n                        if (newAbility.getTargets().chooseTargets(newAbility.getEffects().get(0).getOutcome(), source.getControllerId(), newAbility, false, game) == false) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(\": \").append(controller.getLogName()).append(\" copied activated ability\").toString());\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n\r\n    }","commit_id":"69dc4f10ac1ff9df8b18ae9169762d1c1b0a3eeb","url":"https://github.com/magefree/mage"},{"original_method":"public boolean chooseTargets(Outcome outcome, UUID playerId, Ability source, Game game) {\n        if (this.size() > 0) {\n            if (!canChoose(source.getSourceId(), playerId, game)) {\n                return false;\n            }\n            while (!isChosen()) {\n                Target target = this.getUnchosen().get(0);\n                UUID targetController = playerId;\n                if (target.getTargetController() != null) { // some targets can have controller different than ability controller\n                    targetController = target.getTargetController();\n                }\n                if (!target.chooseTarget(outcome, targetController, source, game)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }","id":12980,"modified_method":"public boolean chooseTargets(Outcome outcome, UUID playerId, Ability source, boolean noMana, Game game) {\n        if (this.size() > 0) {\n            if (!canChoose(source.getSourceId(), playerId, game)) {\n                return false;\n            }\n            while (!isChosen()) {\n                Target target = this.getUnchosen().get(0);\n                UUID targetController = playerId;\n                if (target.getTargetController() != null) { // some targets can have controller different than ability controller\n                    targetController = target.getTargetController();\n                }\n                if (noMana) { // if cast without mana (e.g. by supend you may notr be able to cancel the casting if you are able to cast it\n                    target.setRequired(true);\n                }\n                if (!target.chooseTarget(outcome, targetController, source, game)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }","commit_id":"69dc4f10ac1ff9df8b18ae9169762d1c1b0a3eeb","url":"https://github.com/magefree/mage"},{"original_method":"public CabalTherapy(UUID ownerId) {\n        super(ownerId, 62, \"Cabal Therapy\", Rarity.UNCOMMON, new CardType[]{CardType.SORCERY}, \"{B}\");\n        this.expansionSetCode = \"JUD\";\n\n        this.color.setBlack(true);\n\n        // Name a nonland card. Target player reveals his or her hand and discards all cards with that name.\n        this.getSpellAbility().addTarget(new TargetPlayer());\n        this.getSpellAbility().addEffect(new CabalTherapyEffect());\n        // Flashback-Sacrifice a creature.\n        this.addAbility(new FlashbackAbility(\n                new SacrificeTargetCost(new TargetControlledCreaturePermanent(1,1,new FilterControlledCreaturePermanent(\"a creature\"), true)), \n                TimingRule.SORCERY));\n    }","id":12981,"modified_method":"public CabalTherapy(UUID ownerId) {\n        super(ownerId, 62, \"Cabal Therapy\", Rarity.UNCOMMON, new CardType[]{CardType.SORCERY}, \"{B}\");\n        this.expansionSetCode = \"JUD\";\n\n        // Name a nonland card. Target player reveals his or her hand and discards all cards with that name.\n        this.getSpellAbility().addTarget(new TargetPlayer());\n        this.getSpellAbility().addEffect(new CabalTherapyEffect());\n        \n        // Flashback-Sacrifice a creature.\n        this.addAbility(new FlashbackAbility(\n                new SacrificeTargetCost(new TargetControlledCreaturePermanent(1,1,new FilterControlledCreaturePermanent(\"a creature\"), true)), \n                TimingRule.SORCERY));\n    }","commit_id":"e2cb40de701148d99b8ce14f9d6ec23e70333e16","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player player = game.getPlayer(targetPointer.getFirst(game, source));\n        Player controller = game.getPlayer(source.getControllerId());\n        if (player != null && controller != null) {\n            Choice cardChoice = new ChoiceImpl();\n            cardChoice.setChoices(CardRepository.instance.getNonLandNames());\n            cardChoice.clearChoice();\n\n            while (!controller.choose(Outcome.Discard, cardChoice, game)) {\n                if (!controller.isInGame()) {\n                    return false;\n                }\n            }\n\n            String cardName = cardChoice.getChoice();\n            game.informPlayers(\"Cabal Therapy, named card: [\" + cardName + \"]\");\n            for (Card card : player.getHand().getCards(game)) {\n                if (card.getName().equals(cardName)) {\n                    player.discard(card, source, game);\n                }\n            }\n\n            controller.lookAtCards(\"Cabal Therapy Hand\", player.getHand(), game);\n        }\n        return true;\n    }","id":12982,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player targetPlayer = game.getPlayer(targetPointer.getFirst(game, source));\n        Player controller = game.getPlayer(source.getControllerId());\n        MageObject sourceObject = game.getObject(source.getSourceId());\n        if (targetPlayer != null && controller != null && sourceObject != null) {\n            Choice cardChoice = new ChoiceImpl(true);\n            cardChoice.setMessage(\"Name a nonland card.\");\n            cardChoice.setChoices(CardRepository.instance.getNonLandNames());\n            cardChoice.clearChoice();\n\n            while (!controller.choose(Outcome.Discard, cardChoice, game)) {\n                if (!controller.isInGame()) {\n                    return false;\n                }\n            }\n\n            String cardName = cardChoice.getChoice();\n            game.informPlayers(sourceObject.getLogName() + \", named card: [\" + cardName + \"]\");\n            for (Card card : targetPlayer.getHand().getCards(game)) {\n                if (card.getName().equals(cardName)) {\n                    targetPlayer.discard(card, source, game);\n                }\n            }\n\n            controller.lookAtCards(sourceObject.getLogName() + \" Hand\", targetPlayer.getHand(), game);\n        }\n        return true;\n    }","commit_id":"e2cb40de701148d99b8ce14f9d6ec23e70333e16","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        Permanent permanent = game.getPermanent(source.getSourceId());\r\n        if (player != null && permanent != null) {\r\n            for (Iterator<StackObject> iterator = game.getStack().iterator(); iterator.hasNext();) {\r\n                StackObject stackObject = iterator.next();\r\n                // only cast spells, so no copies\r\n                if (!stackObject.isCopy() && stackObject.getControllerId().equals(source.getControllerId())) {\r\n                    if (stackObject instanceof Spell) {\r\n                        Spell spell = (Spell) stackObject;\r\n                        if (filter.match(spell, game)) {\r\n                            if (!spell.getAbilities().contains(ability)) {\r\n                                game.getState().addOtherAbility(spell.getCard(), ability);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":12983,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        Permanent permanent = game.getPermanent(source.getSourceId());\r\n        if (player != null && permanent != null) {\r\n            for (StackObject stackObject : game.getStack()) {\r\n                // only spells cast, so no copies of spells\r\n                if ((stackObject instanceof Spell) && !stackObject.isCopy() && stackObject.getControllerId().equals(source.getControllerId())) {\r\n                    Spell spell = (Spell) stackObject;\r\n                    if (filter.match(spell, game)) {\r\n                        if (!spell.getAbilities().contains(ability)) {\r\n                            game.getState().addOtherAbility(spell.getCard(), ability);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"e2cb40de701148d99b8ce14f9d6ec23e70333e16","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean replaceEvent(GameEvent event, Ability source, Game game) {\r\n        Card sourceCard = game.getCard(source.getSourceId());\r\n        if (sourceCard == null) {\r\n            return false;\r\n        }\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player != null && player.getLibrary().size() >= amount \r\n                && player.chooseUse(outcome, new StringBuilder(\"Dredge \").append(sourceCard.getName()).\r\n                append(\"? (\").append(amount).append(\" cards go from top of library to graveyard)\").toString(), game)) {\r\n            if (!game.isSimulation()) {\r\n                game.informPlayers(new StringBuilder(player.getLogName()).append(\" dreges \").append(sourceCard.getName()).toString());\r\n            }\r\n            Cards cardsToGrave = new CardsImpl();\r\n            cardsToGrave.addAll(player.getLibrary().getTopCards(game, amount));\r\n            player.moveCardsToGraveyardWithInfo(cardsToGrave, source, game, Zone.LIBRARY);\r\n            player.moveCardToHandWithInfo(sourceCard, source.getSourceId(), game, Zone.GRAVEYARD);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":12984,"modified_method":"@Override\r\n    public boolean replaceEvent(GameEvent event, Ability source, Game game) {\r\n        Card sourceCard = game.getCard(source.getSourceId());\r\n        if (sourceCard == null) {\r\n            return false;\r\n        }\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player != null && player.getLibrary().size() >= amount \r\n                && player.chooseUse(outcome, new StringBuilder(\"Dredge \").append(sourceCard.getLogName()).\r\n                append(\"? (\").append(amount).append(\" cards go from top of library to graveyard)\").toString(), game)) {\r\n            if (!game.isSimulation()) {\r\n                game.informPlayers(new StringBuilder(player.getLogName()).append(\" dreges \").append(sourceCard.getLogName()).toString());\r\n            }\r\n            Cards cardsToGrave = new CardsImpl();\r\n            cardsToGrave.addAll(player.getLibrary().getTopCards(game, amount));\r\n            player.moveCardsToGraveyardWithInfo(cardsToGrave, source, game, Zone.LIBRARY);\r\n            player.moveCardToHandWithInfo(sourceCard, source.getSourceId(), game, Zone.GRAVEYARD);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"e2cb40de701148d99b8ce14f9d6ec23e70333e16","url":"https://github.com/magefree/mage"},{"original_method":"public boolean putOntoBattlefield(int amount, Game game, UUID sourceId, UUID controllerId, boolean tapped, boolean attacking) {\r\n        Player controller = game.getPlayer(controllerId);\r\n        if (controller == null) {\r\n            return false;\r\n        }\r\n        lastAddedTokenIds.clear();\r\n        // TODO: Check this setCode handling because it makes no sens if token put into play with e.g. \"Feldon of the third Path\"\r\n        Card source = game.getCard(sourceId);\r\n        String setCode;\r\n        if (this.getOriginalExpansionSetCode() != null && !this.getOriginalExpansionSetCode().isEmpty()) {\r\n            setCode = this.getOriginalExpansionSetCode();\r\n        } else {\r\n            setCode = source != null ? source.getExpansionSetCode() : null;\r\n        }\r\n        GameEvent event = new GameEvent(EventType.CREATE_TOKEN, null, sourceId, controllerId, amount, this.getCardType().contains(CardType.CREATURE));\r\n        if (!game.replaceEvent(event)) {\r\n            amount = event.getAmount();\r\n            for (int i = 0; i < amount; i++) {\r\n                PermanentToken newToken = new PermanentToken(this, event.getPlayerId(), setCode, game); // use event.getPlayerId() because it can be replaced by replacement effect\r\n                game.getState().addCard(newToken);\r\n                game.addPermanent(newToken);\r\n                if (tapped) {\r\n                    newToken.setTapped(true);\r\n                }\r\n                this.lastAddedTokenIds.add(newToken.getId());\r\n                this.lastAddedTokenId = newToken.getId();\r\n                game.setScopeRelevant(true);\r\n                game.applyEffects();\r\n                newToken.entersBattlefield(sourceId, game, Zone.OUTSIDE, true);\r\n                game.setScopeRelevant(false);\r\n                game.applyEffects();\r\n                game.fireEvent(new ZoneChangeEvent(newToken, event.getPlayerId(), Zone.OUTSIDE, Zone.BATTLEFIELD));\r\n                if (attacking && game.getCombat() != null) {\r\n                    game.getCombat().addAttackingCreature(newToken.getId(), game);\r\n                }\r\n            }\r\n            if (!game.isSimulation()) {\r\n                game.informPlayers(new StringBuilder(controller.getLogName()).append(\" puts \")\r\n                        .append(CardUtil.numberToText(amount, \"a\")).append(\" \").append(this.getName()).append(\" token\").append(amount==1?\"\":\"s\")\r\n                        .append(\" onto the battlefield\").toString());\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":12985,"modified_method":"public boolean putOntoBattlefield(int amount, Game game, UUID sourceId, UUID controllerId, boolean tapped, boolean attacking) {\r\n        Player controller = game.getPlayer(controllerId);\r\n        if (controller == null) {\r\n            return false;\r\n        }\r\n        lastAddedTokenIds.clear();\r\n        // TODO: Check this setCode handling because it makes no sens if token put into play with e.g. \"Feldon of the third Path\"\r\n        Card source = game.getCard(sourceId);\r\n        String setCode;\r\n        if (this.getOriginalExpansionSetCode() != null && !this.getOriginalExpansionSetCode().isEmpty()) {\r\n            setCode = this.getOriginalExpansionSetCode();\r\n        } else {\r\n            setCode = source != null ? source.getExpansionSetCode() : null;\r\n        }\r\n        GameEvent event = new GameEvent(EventType.CREATE_TOKEN, null, sourceId, controllerId, amount, this.getCardType().contains(CardType.CREATURE));\r\n        if (!game.replaceEvent(event)) {\r\n            amount = event.getAmount();\r\n            for (int i = 0; i < amount; i++) {\r\n                PermanentToken newToken = new PermanentToken(this, event.getPlayerId(), setCode, game); // use event.getPlayerId() because it can be replaced by replacement effect\r\n                game.getState().addCard(newToken);\r\n                game.addPermanent(newToken);\r\n                if (tapped) {\r\n                    newToken.setTapped(true);\r\n                }\r\n                this.lastAddedTokenIds.add(newToken.getId());\r\n                this.lastAddedTokenId = newToken.getId();\r\n                game.setScopeRelevant(true);\r\n                game.applyEffects();\r\n                newToken.entersBattlefield(sourceId, game, Zone.OUTSIDE, true);\r\n                game.setScopeRelevant(false);\r\n                game.applyEffects();\r\n                game.fireEvent(new ZoneChangeEvent(newToken, event.getPlayerId(), Zone.OUTSIDE, Zone.BATTLEFIELD));\r\n                if (attacking && game.getCombat() != null) {\r\n                    game.getCombat().addAttackingCreature(newToken.getId(), game);\r\n                }\r\n                if (!game.isSimulation()) {\r\n                    game.informPlayers(controller.getLogName() + \" puts a \" + newToken.getLogName() + \" token onto the battlefield\");\r\n                }                \r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"e2cb40de701148d99b8ce14f9d6ec23e70333e16","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean replaceEvent(GameEvent event, Ability source, Game game) {\r\n        Zone fromZone = ((ZoneChangeEvent) event).getFromZone();\r\n        Card card = game.getCard(event.getTargetId());\r\n        UUID sourceId = event.getSourceId();\r\n        UUID controllerId = event.getPlayerId();\r\n\r\n        // Aura cards that go to battlefield face down (Manifest) don't have to select targets\r\n        if (card.isFaceDown(game)) {\r\n            return false;\r\n        }\r\n        // Aura enters the battlefield attached\r\n        Object object = game.getState().getValue(\"attachTo:\" + card.getId());\r\n        if (object != null && object instanceof PermanentCard) {\r\n            return false;\r\n        }\r\n\r\n        UUID targetId = null;\r\n        MageObject sourceObject = game.getObject(sourceId);\r\n        boolean enchantCardInGraveyard = false;\r\n        if (sourceObject instanceof Spell) {\r\n            if (fromZone.equals(Zone.EXILED)) {\r\n                // cast from exile (e.g. Neightveil Spector) -> no replacement\r\n                return false;\r\n            }\r\n        }\r\n        if (sourceObject instanceof StackAbility) {\r\n            StackAbility stackAbility = (StackAbility) sourceObject;\r\n            if (!stackAbility.getEffects().isEmpty()) {\r\n                targetId = stackAbility.getEffects().get(0).getTargetPointer().getFirst(game, stackAbility);\r\n            }\r\n        }\r\n\r\n        if (targetId == null) {\r\n            Target target = card.getSpellAbility().getTargets().get(0);\r\n            enchantCardInGraveyard = target instanceof TargetCardInGraveyard;\r\n            if (enchantCardInGraveyard && target != null) {\r\n                target.clearChosen();\r\n            }\r\n            Player player = game.getPlayer(card.getOwnerId());\r\n            Outcome auraOutcome = Outcome.BoostCreature;\r\n            Ability:\r\n            for (Ability ability : card.getAbilities()) {\r\n                if (ability instanceof SpellAbility) {\r\n                    for (Effect effect : ability.getEffects()) {\r\n                        if (effect instanceof AttachEffect) {\r\n                            auraOutcome = effect.getOutcome();\r\n                            break Ability;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (target != null && player != null && player.choose(auraOutcome, target, card.getId(), game)) {\r\n                targetId = target.getFirstTarget();\r\n            }\r\n        }\r\n\r\n        Card targetCard = null;\r\n        Permanent targetPermanent = null;\r\n        if (enchantCardInGraveyard) {\r\n            targetCard = game.getCard(targetId);\r\n        } else {\r\n            targetPermanent = game.getPermanent(targetId);\r\n        }\r\n        Player targetPlayer = game.getPlayer(targetId);\r\n        if (targetCard != null || targetPermanent != null || targetPlayer != null) {\r\n            switch (fromZone) {\r\n                case EXILED:\r\n                    game.getExile().removeCard(card, game);\r\n                    break;\r\n                case GRAVEYARD:\r\n                    game.getPlayer(card.getOwnerId()).removeFromGraveyard(card, game);\r\n                    break;\r\n                case HAND:\r\n                    game.getPlayer(card.getOwnerId()).removeFromHand(card, game);\r\n                    break;\r\n                case LIBRARY:\r\n                    game.getPlayer(card.getOwnerId()).removeFromLibrary(card, game);\r\n                    break;\r\n                default:\r\n            }\r\n            game.rememberLKI(card.getId(), fromZone, card);\r\n\r\n            PermanentCard permanent = new PermanentCard(card, card.getOwnerId(), game);\r\n            game.getBattlefield().addPermanent(permanent);\r\n            card.setZone(Zone.BATTLEFIELD, game);\r\n            game.applyEffects();\r\n            boolean entered = permanent.entersBattlefield(event.getSourceId(), game, fromZone, true);\r\n            game.applyEffects();\r\n            if (!entered) {\r\n                return false;\r\n            }\r\n            game.fireEvent(new ZoneChangeEvent(permanent, controllerId, fromZone, Zone.BATTLEFIELD));\r\n\r\n            if (targetCard != null) {\r\n                permanent.attachTo(targetCard.getId(), game);\r\n            }\r\n            if (targetPermanent != null) {\r\n                targetPermanent.addAttachment(permanent.getId(), game);\r\n            }\r\n            if (targetPlayer != null) {\r\n                targetPlayer.addAttachment(permanent.getId(), game);\r\n            }\r\n        }\r\n        return true;\r\n    }","id":12986,"modified_method":"@Override\r\n    public boolean replaceEvent(GameEvent event, Ability source, Game game) {\r\n        Zone fromZone = ((ZoneChangeEvent) event).getFromZone();\r\n        Card card = game.getCard(event.getTargetId());\r\n        UUID sourceId = event.getSourceId();\r\n        UUID controllerId = event.getPlayerId();\r\n\r\n        // Aura cards that go to battlefield face down (Manifest) don't have to select targets\r\n        if (card.isFaceDown(game)) {\r\n            return false;\r\n        }\r\n        // Aura enters the battlefield attached\r\n        Object object = game.getState().getValue(\"attachTo:\" + card.getId());\r\n        if (object != null && object instanceof PermanentCard) {\r\n            return false;\r\n        }\r\n\r\n        UUID targetId = null;\r\n        MageObject sourceObject = game.getObject(sourceId);\r\n        boolean enchantCardInGraveyard = false;\r\n        if (sourceObject instanceof Spell) {\r\n            if (fromZone.equals(Zone.EXILED)) {\r\n                // cast from exile (e.g. Neightveil Spector) -> no replacement\r\n                return false;\r\n            }\r\n        }\r\n        if (sourceObject instanceof StackAbility) {\r\n            StackAbility stackAbility = (StackAbility) sourceObject;\r\n            if (!stackAbility.getEffects().isEmpty()) {\r\n                targetId = stackAbility.getEffects().get(0).getTargetPointer().getFirst(game, stackAbility);\r\n            }\r\n        }\r\n\r\n        if (targetId == null) {\r\n            Target target = card.getSpellAbility().getTargets().get(0);\r\n            enchantCardInGraveyard = target instanceof TargetCardInGraveyard;\r\n            if (target != null) {\r\n                target.clearChosen(); // neccessary if e.g. aura is blinked multiple times\r\n            }\r\n            Player player = game.getPlayer(card.getOwnerId());\r\n            Outcome auraOutcome = Outcome.BoostCreature;\r\n            Ability:\r\n            for (Ability ability : card.getAbilities()) {\r\n                if (ability instanceof SpellAbility) {\r\n                    for (Effect effect : ability.getEffects()) {\r\n                        if (effect instanceof AttachEffect) {\r\n                            auraOutcome = effect.getOutcome();\r\n                            break Ability;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (target != null && player != null && player.choose(auraOutcome, target, card.getId(), game)) {\r\n                targetId = target.getFirstTarget();\r\n            }\r\n        }\r\n\r\n        Card targetCard = null;\r\n        Permanent targetPermanent = null;\r\n        if (enchantCardInGraveyard) {\r\n            targetCard = game.getCard(targetId);\r\n        } else {\r\n            targetPermanent = game.getPermanent(targetId);\r\n        }\r\n        Player targetPlayer = game.getPlayer(targetId);\r\n        if (targetCard != null || targetPermanent != null || targetPlayer != null) {\r\n            switch (fromZone) {\r\n                case EXILED:\r\n                    game.getExile().removeCard(card, game);\r\n                    break;\r\n                case GRAVEYARD:\r\n                    game.getPlayer(card.getOwnerId()).removeFromGraveyard(card, game);\r\n                    break;\r\n                case HAND:\r\n                    game.getPlayer(card.getOwnerId()).removeFromHand(card, game);\r\n                    break;\r\n                case LIBRARY:\r\n                    game.getPlayer(card.getOwnerId()).removeFromLibrary(card, game);\r\n                    break;\r\n                default:\r\n            }\r\n            game.rememberLKI(card.getId(), fromZone, card);\r\n\r\n            PermanentCard permanent = new PermanentCard(card, card.getOwnerId(), game);\r\n            game.getBattlefield().addPermanent(permanent);\r\n            card.setZone(Zone.BATTLEFIELD, game);\r\n            game.applyEffects();\r\n            boolean entered = permanent.entersBattlefield(event.getSourceId(), game, fromZone, true);\r\n            game.applyEffects();\r\n            if (!entered) {\r\n                return false;\r\n            }\r\n            game.fireEvent(new ZoneChangeEvent(permanent, controllerId, fromZone, Zone.BATTLEFIELD));\r\n\r\n            if (targetCard != null) {\r\n                permanent.attachTo(targetCard.getId(), game);\r\n            }\r\n            if (targetPermanent != null) {\r\n                targetPermanent.addAttachment(permanent.getId(), game);\r\n            }\r\n            if (targetPlayer != null) {\r\n                targetPlayer.addAttachment(permanent.getId(), game);\r\n            }\r\n        }\r\n        return true;\r\n    }","commit_id":"96bbe01aae28e956df94756e55053b9db92f7c7b","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Card card = game.getCard(source.getSourceId());\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (card != null && controller != null) {\r\n            UUID exileId = SuspendAbility.getSuspendExileId(controller.getId(), game);\r\n            if (controller.moveCardToExileWithInfo(card, exileId, \"Suspended cards of \" + controller.getName(), source.getSourceId(), game, Zone.HAND, true)) {\r\n                if (suspend == Integer.MAX_VALUE) {\r\n                    suspend = source.getManaCostsToPay().getX();\r\n                }\r\n                card.addCounters(CounterType.TIME.createInstance(suspend), game);\r\n                if (!game.isSimulation())\r\n                    game.informPlayers(new StringBuilder(controller.getLogName()).append(\" suspends (\").append(suspend).append(\") \").append(card.getName()).toString());\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":12987,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Card card = game.getCard(source.getSourceId());\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (card != null && controller != null) {\r\n            UUID exileId = SuspendAbility.getSuspendExileId(controller.getId(), game);\r\n            if (controller.moveCardToExileWithInfo(card, exileId, \"Suspended cards of \" + controller.getName(), source.getSourceId(), game, Zone.HAND, true)) {\r\n                if (suspend == Integer.MAX_VALUE) {\r\n                    suspend = source.getManaCostsToPay().getX();\r\n                }\r\n                card.addCounters(CounterType.TIME.createInstance(suspend), game);\r\n                if (!game.isSimulation()) {\r\n                    game.informPlayers(controller.getLogName() + \" suspends (\" + suspend + \") \" + card.getLogName());\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"96bbe01aae28e956df94756e55053b9db92f7c7b","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public String getRule() {\n        return new StringBuilder(\"Vanishing \")\n            .append(vanishingAmount)\n            .append(\" <i>(This permanent enters the battlefield with \").append(CardUtil.numberToText(vanishingAmount))\n            .append(\" time counters on it. At the beginning of your upkeep, remove a time counter from it. When the last is removed, sacrifice it.)<i>\").toString();\n    }","id":12988,"modified_method":"@Override\n    public String getRule() {\n        return \"Vanishing \" + vanishingAmount\n                + \" <i>(This permanent enters the battlefield with \" + CardUtil.numberToText(vanishingAmount)\n                + \" time counters on it. At the beginning of your upkeep, remove a time counter from it. When the last is removed, sacrifice it.)<i>\";\n    }","commit_id":"96bbe01aae28e956df94756e55053b9db92f7c7b","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Permanent p = game.getPermanent(source.getSourceId());\n        if (p != null) {\n            int amount = p.getCounters().getCount(CounterType.TIME);\n            if (amount > 0) {\n                p.removeCounters(CounterType.TIME.createInstance(), game);\n            }\n            return true;\n        }\n        return false;\n    }","id":12989,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Permanent p = game.getPermanent(source.getSourceId());\n        if (p != null) {\n            int amount = p.getCounters().getCount(CounterType.TIME);\n            if (amount > 0) {\n                p.removeCounters(CounterType.TIME.createInstance(), game);\n                game.informPlayers(\"Removed a time counter from \" + p.getLogName() + \" (\" + amount + \" left)\");\n            }\n            return true;\n        }\n        return false;\n    }","commit_id":"96bbe01aae28e956df94756e55053b9db92f7c7b","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player controller = game.getPlayer(source.getControllerId());\n        MageObject sourceObject = game.getObject(source.getSourceId());\n        if (controller != null && sourceObject != null) {\n            if (counter != null) {\n                UUID controllerId = source.getControllerId();\n                List<Permanent> permanents = game.getBattlefield().getAllActivePermanents();\n                for (Permanent permanent : permanents) {\n                    if (filter.match(permanent, source.getSourceId(), controllerId, game)) {\n                        permanent.addCounters(counter.copy(), game);\n                        if (!game.isSimulation())\n                            game.informPlayers(new StringBuilder(sourceObject.getName()).append(\": \")\n                                .append(controller.getLogName()).append(\" puts \")\n                                .append(counter.getCount()).append(\" \").append(counter.getName().toLowerCase())\n                                .append(\" counter on \").append(permanent.getName()).toString());\n                    }\n                }\n            }            \n            return true;\n        }        \n        return false;\n    }","id":12990,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player controller = game.getPlayer(source.getControllerId());\n        MageObject sourceObject = game.getObject(source.getSourceId());\n        if (controller != null && sourceObject != null) {\n            if (counter != null) {\n                for (Permanent permanent : game.getBattlefield().getActivePermanents(filter, source.getControllerId(), source.getSourceId(), game)) {\n                    permanent.addCounters(counter.copy(), game);\n                    if (!game.isSimulation()) {\n                        game.informPlayers(sourceObject.getLogName() + \": \" + controller.getLogName() + \" puts \" + counter.getCount() + \" \" + counter.getName().toLowerCase()\n                                + \" counter on \" + permanent.getLogName());\n                    }\n                }\n            }\n            return true;\n        }\n        return false;\n    }","commit_id":"f3e8a93316dd074950fe475997f15559ed869930","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Permanent triggeringCreature = game.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(game, source));\r\n        if (triggeringCreature != null) {\r\n            Permanent sourceCreature = game.getPermanent(source.getSourceId());\r\n            if (sourceCreature != null && EvolveAbility.isPowerOrThoughnessGreater(sourceCreature, triggeringCreature)) {\r\n                game.getState().setValue(\"EvolveAddCounterActive\", Boolean.TRUE);\r\n                sourceCreature.addCounters(CounterType.P1P1.createInstance(), game);\r\n                game.getState().setValue(\"EvolveAddCounterActive\", Boolean.FALSE);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":12991,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Permanent triggeringCreature = game.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(game, source));\r\n        if (triggeringCreature != null) {\r\n            Permanent sourceCreature = game.getPermanent(source.getSourceId());\r\n            if (sourceCreature != null && EvolveAbility.isPowerOrThoughnessGreater(sourceCreature, triggeringCreature)) {\r\n                sourceCreature.addCounters(CounterType.P1P1.createInstance(), game);\r\n                game.fireEvent(GameEvent.getEvent(GameEvent.EventType.EVOLVED_CREATURE, sourceCreature.getId(), source.getSourceId(), source.getControllerId()));\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"f3e8a93316dd074950fe475997f15559ed869930","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public String getRule() {\r\n        return \"Whenever Renegade Krasis evolves, put a +1/+1 counter on each other creature you control with a +1/+1 counter on it.\";\r\n    }","id":12992,"modified_method":"@Override\r\n    public String getRule() {\r\n        return \"Whenever {this} evolves, put a +1/+1 counter on each other creature you control with a +1/+1 counter on it.\";\r\n    }","commit_id":"f3e8a93316dd074950fe475997f15559ed869930","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean checkEventType(GameEvent event, Game game) {\r\n        return event.getType() == EventType.COUNTER_ADDED;\r\n    }","id":12993,"modified_method":"@Override\r\n    public boolean checkEventType(GameEvent event, Game game) {\r\n        return event.getType() == EventType.EVOLVED_CREATURE;\r\n    }","commit_id":"f3e8a93316dd074950fe475997f15559ed869930","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        if (event.getTargetId().equals(getSourceId())) {\r\n            Object object = game.getState().getValue(\"EvolveAddCounterActive\");\r\n            if (object != null && (Boolean) object) {\r\n                StackObject stackObject = game.getStack().getLast();\r\n                if (stackObject.getStackAbility() instanceof EvolveAbility) {\r\n                    object = game.getState().getValue(this.getId() + \"_lastUsedEvolveStackObject\");\r\n                    if (object != null && ((UUID) object).equals(stackObject.getId())) {\r\n                        // this evolve was already handled before (prevents to trigger multiple times if counter from evolve is e.g. doubled)\r\n                        return false;\r\n                    }\r\n                    game.getState().setValue(this.getId() + \"_lastUsedEvolveStackObject\", stackObject.getId());\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","id":12994,"modified_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        return event.getTargetId().equals(getSourceId());\r\n    }","commit_id":"f3e8a93316dd074950fe475997f15559ed869930","url":"https://github.com/magefree/mage"},{"original_method":"public void enableWhiteboard(boolean enabled) {\r\n\t\troomManager.getRoom(getLocalScope().getName()).setWhiteboardEnabled(enabled);\r\n//\t\tISharedObject drawSO = getSharedObject(getLocalScope(), WHITEBOARD_SHARED_OBJECT);\r\n//\t\tList<Boolean> arguments = new ArrayList<Boolean>();\r\n//\t\targuments.add(enabled);\r\n//\t\tdrawSO.sendMessage(\"modifyEnabledCallback\", arguments);\r\n\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\tmessage.put(\"enabled\", roomManager.getRoom(getLocalScope().getName()).isWhiteboardEnabled());\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getLocalScope().getName(), \"EnableWhiteboardCommand\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12995,"modified_method":"public void enableWhiteboard(boolean enabled) {\r\n\t\troomManager.getRoom(getLocalScope().getName()).setWhiteboardEnabled(enabled);\r\n//\t\tISharedObject drawSO = getSharedObject(getLocalScope(), WHITEBOARD_SHARED_OBJECT);\r\n//\t\tList<Boolean> arguments = new ArrayList<Boolean>();\r\n//\t\targuments.add(enabled);\r\n//\t\tdrawSO.sendMessage(\"modifyEnabledCallback\", arguments);\r\n\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\tmessage.put(\"enabled\", roomManager.getRoom(getLocalScope().getName()).isWhiteboardEnabled());\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getLocalScope().getName(), \"WhiteboardEnableWhiteboardCommand\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","commit_id":"1fab7a430c0e7445f2ed5cb191ccb9c7e91ccd11","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void isWhiteboardEnabled(String userid) {\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\tmessage.put(\"enabled\", roomManager.getRoom(getLocalScope().getName()).isWhiteboardEnabled());\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.DIRECT, userid, \"IsWhiteboardEnabledReply\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12996,"modified_method":"public void isWhiteboardEnabled(String userid) {\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\r\n\t\tmessage.put(\"enabled\", roomManager.getRoom(getLocalScope().getName()).isWhiteboardEnabled());\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.DIRECT, userid, \"WhiteboardIsWhiteboardEnabledReply\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","commit_id":"1fab7a430c0e7445f2ed5cb191ccb9c7e91ccd11","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void sendAnnotationHistory(String userid) {\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\tList<Map<String, Object>> annotations = roomManager.getRoom(getLocalScope().getName()).getAnnotations();\r\n\t\tmessage.put(\"count\", new Integer(annotations.size()));\r\n\t\tmessage.put(\"annotations\", annotations);\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.DIRECT, userid, \"RequestAnnotationHistoryReply\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12997,"modified_method":"public void sendAnnotationHistory(String userid) {\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\tList<Map<String, Object>> annotations = roomManager.getRoom(getLocalScope().getName()).getAnnotations();\r\n\t\tmessage.put(\"count\", new Integer(annotations.size()));\r\n\t\tmessage.put(\"annotations\", annotations);\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.DIRECT, userid, \"WhiteboardRequestAnnotationHistoryReply\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","commit_id":"1fab7a430c0e7445f2ed5cb191ccb9c7e91ccd11","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void undo() {\r\n\t\troomManager.getRoom(getLocalScope().getName()).undo();\r\n\t\tISharedObject drawSO = getSharedObject(getLocalScope(), WHITEBOARD_SHARED_OBJECT);\r\n\t\tdrawSO.sendMessage(\"undo\", new ArrayList<Object>());\r\n\t}","id":12998,"modified_method":"public void undo() {\r\n\t\troomManager.getRoom(getLocalScope().getName()).undo();\r\n//\t\tISharedObject drawSO = getSharedObject(getLocalScope(), WHITEBOARD_SHARED_OBJECT);\r\n//\t\tdrawSO.sendMessage(\"undo\", new ArrayList<Object>());\r\n\t\t\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getLocalScope().getName(), \"WhiteboardUndoCommand\", message);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","commit_id":"1fab7a430c0e7445f2ed5cb191ccb9c7e91ccd11","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void sendAnnotation(Map<String, Object> annotation) {\r\n//\t\tISharedObject drawSO = getSharedObject(getLocalScope(), WHITEBOARD_SHARED_OBJECT);\r\n//\t\troomManager.getRoom(getLocalScope().getName()).addAnnotation(annotation);\r\n//\t\tList<Object> arguments = new ArrayList<Object>();\r\n//\t\targuments.add(annotation);\r\n//\t\tdrawSO.sendMessage(\"receiveAnnotation\", arguments);\r\n\t\t\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\troomManager.getRoom(getLocalScope().getName()).addAnnotation(annotation);\r\n\t\tmessage.put(\"annotation\", annotation);\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getLocalScope().getName(), \"NewAnnotationCommand\", annotation);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","id":12999,"modified_method":"public void sendAnnotation(Map<String, Object> annotation) {\r\n//\t\tISharedObject drawSO = getSharedObject(getLocalScope(), WHITEBOARD_SHARED_OBJECT);\r\n//\t\troomManager.getRoom(getLocalScope().getName()).addAnnotation(annotation);\r\n//\t\tList<Object> arguments = new ArrayList<Object>();\r\n//\t\targuments.add(annotation);\r\n//\t\tdrawSO.sendMessage(\"receiveAnnotation\", arguments);\r\n\t\t\r\n\t\tMap<String, Object> message = new HashMap<String, Object>();\t\t\r\n\t\troomManager.getRoom(getLocalScope().getName()).addAnnotation(annotation);\r\n\t\tmessage.put(\"annotation\", annotation);\r\n\t\tClientMessage m = new ClientMessage(ClientMessage.BROADCAST, getLocalScope().getName(), \"WhiteboardNewAnnotationCommand\", annotation);\r\n\t\tconnInvokerService.sendMessage(m);\r\n\t}","commit_id":"1fab7a430c0e7445f2ed5cb191ccb9c7e91ccd11","url":"https://github.com/bigbluebutton/bigbluebutton"}]