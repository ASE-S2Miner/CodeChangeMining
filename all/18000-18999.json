[{"original_method":"protected void importFolder(\n\t\t\tPortletDataContext context, boolean mergeData, Map folderPKs,\n\t\t\tDLFolder folder)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(folder.getUserUuid());\n\t\tlong plid = context.getPlid();\n\n\t\tLong parentFolderId = (Long)folderPKs.get(\n\t\t\tnew Long(folder.getParentFolderId()));\n\n\t\tif (parentFolderId == null) {\n\t\t\tparentFolderId = new Long(folder.getParentFolderId());\n\t\t}\n\n\t\tboolean addCommunityPermissions = true;\n\t\tboolean addGuestPermissions = true;\n\n\t\tDLFolder existingFolder = null;\n\n\t\ttry {\n\t\t\tif (parentFolderId.longValue() !=\n\t\t\t\t\tDLFolderImpl.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\t\tDLFolderUtil.findByPrimaryKey(parentFolderId.longValue());\n\t\t\t}\n\n\t\t\tif (mergeData) {\n\t\t\t\texistingFolder = DLFolderUtil.fetchByUUID_G(\n\t\t\t\t\tfolder.getUuid(), context.getGroupId());\n\n\t\t\t\tif (existingFolder == null) {\n\t\t\t\t\texistingFolder = DLFolderLocalServiceUtil.addFolder(\n\t\t\t\t\t\tfolder.getUuid(), userId, plid,\n\t\t\t\t\t\tparentFolderId.longValue(), folder.getName(),\n\t\t\t\t\t\tfolder.getDescription(), addCommunityPermissions,\n\t\t\t\t\t\taddGuestPermissions);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\texistingFolder = DLFolderLocalServiceUtil.updateFolder(\n\t\t\t\t\t\texistingFolder.getFolderId(),\n\t\t\t\t\t\tparentFolderId.longValue(), folder.getName(),\n\t\t\t\t\t\tfolder.getDescription());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingFolder = DLFolderLocalServiceUtil.addFolder(\n\t\t\t\t\tuserId, plid, parentFolderId.longValue(), folder.getName(),\n\t\t\t\t\tfolder.getDescription(), addCommunityPermissions,\n\t\t\t\t\taddGuestPermissions);\n\t\t\t}\n\n\t\t\tfolderPKs.put(\n\t\t\t\tfolder.getPrimaryKeyObj(), existingFolder.getPrimaryKeyObj());\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent folder for folder \" +\n\t\t\t\t\tfolder.getFolderId());\n\t\t}\n\t}","id":18000,"modified_method":"protected void importFolder(\n\t\t\tPortletDataContext context, boolean mergeData, Map folderPKs,\n\t\t\tDLFolder folder)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(folder.getUserUuid());\n\t\tlong plid = context.getPlid();\n\n\t\tlong parentFolderId = MapUtil.getLong(\n\t\t\tfolderPKs, folder.getParentFolderId(), folder.getParentFolderId());\n\n\t\tboolean addCommunityPermissions = true;\n\t\tboolean addGuestPermissions = true;\n\n\t\tDLFolder existingFolder = null;\n\n\t\ttry {\n\t\t\tif (parentFolderId != DLFolderImpl.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\t\tDLFolderUtil.findByPrimaryKey(parentFolderId);\n\t\t\t}\n\n\t\t\tif (mergeData) {\n\t\t\t\texistingFolder = DLFolderUtil.fetchByUUID_G(\n\t\t\t\t\tfolder.getUuid(), context.getGroupId());\n\n\t\t\t\tif (existingFolder == null) {\n\t\t\t\t\texistingFolder = DLFolderLocalServiceUtil.addFolder(\n\t\t\t\t\t\tfolder.getUuid(), userId, plid, parentFolderId,\n\t\t\t\t\t\tfolder.getName(), folder.getDescription(),\n\t\t\t\t\t\taddCommunityPermissions, addGuestPermissions);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\texistingFolder = DLFolderLocalServiceUtil.updateFolder(\n\t\t\t\t\t\texistingFolder.getFolderId(), parentFolderId,\n\t\t\t\t\t\tfolder.getName(), folder.getDescription());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingFolder = DLFolderLocalServiceUtil.addFolder(\n\t\t\t\t\tuserId, plid, parentFolderId, folder.getName(),\n\t\t\t\t\tfolder.getDescription(), addCommunityPermissions,\n\t\t\t\t\taddGuestPermissions);\n\t\t\t}\n\n\t\t\tfolderPKs.put(\n\t\t\t\tfolder.getPrimaryKeyObj(), existingFolder.getPrimaryKeyObj());\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent folder for folder \" +\n\t\t\t\t\tfolder.getFolderId());\n\t\t}\n\t}","commit_id":"926a3f5350f0ba5f6a52009d75fc042744b9a8a1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void importFolder(\n\t\t\tPortletDataContext context, boolean mergeData, Map folderPKs,\n\t\t\tIGFolder folder)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(folder.getUserUuid());\n\t\tlong plid = context.getPlid();\n\n\t\tLong parentFolderId = (Long)folderPKs.get(\n\t\t\tnew Long(folder.getParentFolderId()));\n\n\t\tif (parentFolderId == null) {\n\t\t\tparentFolderId = new Long(folder.getParentFolderId());\n\t\t}\n\n\t\tboolean addCommunityPermissions = true;\n\t\tboolean addGuestPermissions = true;\n\n\t\tIGFolder existingFolder = null;\n\n\t\ttry {\n\t\t\tif (parentFolderId.longValue() !=\n\t\t\t\t\tIGFolderImpl.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\t\tIGFolderUtil.findByPrimaryKey(parentFolderId.longValue());\n\t\t\t}\n\n\t\t\tif (mergeData) {\n\t\t\t\texistingFolder = IGFolderUtil.fetchByUUID_G(\n\t\t\t\t\tfolder.getUuid(), context.getGroupId());\n\n\t\t\t\tif (existingFolder == null) {\n\t\t\t\t\texistingFolder = IGFolderLocalServiceUtil.addFolder(\n\t\t\t\t\t\tfolder.getUuid(), userId, plid,\n\t\t\t\t\t\tparentFolderId.longValue(), folder.getName(),\n\t\t\t\t\t\tfolder.getDescription(), addCommunityPermissions,\n\t\t\t\t\t\taddGuestPermissions);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\texistingFolder = IGFolderLocalServiceUtil.updateFolder(\n\t\t\t\t\t\texistingFolder.getFolderId(),\n\t\t\t\t\t\tparentFolderId.longValue(), folder.getName(),\n\t\t\t\t\t\tfolder.getDescription(), false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingFolder = IGFolderLocalServiceUtil.addFolder(\n\t\t\t\t\tuserId, plid, parentFolderId.longValue(), folder.getName(),\n\t\t\t\t\tfolder.getDescription(), addCommunityPermissions,\n\t\t\t\t\taddGuestPermissions);\n\t\t\t}\n\n\t\t\tfolderPKs.put(\n\t\t\t\tfolder.getPrimaryKeyObj(), existingFolder.getPrimaryKeyObj());\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent folder for folder \" +\n\t\t\t\t\tfolder.getFolderId());\n\t\t}\n\t}","id":18001,"modified_method":"protected void importFolder(\n\t\t\tPortletDataContext context, boolean mergeData, Map folderPKs,\n\t\t\tIGFolder folder)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(folder.getUserUuid());\n\t\tlong plid = context.getPlid();\n\n\t\tlong parentFolderId = MapUtil.getLong(\n\t\t\tfolderPKs, folder.getParentFolderId(), folder.getParentFolderId());\n\n\t\tboolean addCommunityPermissions = true;\n\t\tboolean addGuestPermissions = true;\n\n\t\tIGFolder existingFolder = null;\n\n\t\ttry {\n\t\t\tif (parentFolderId != IGFolderImpl.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\t\tIGFolderUtil.findByPrimaryKey(parentFolderId);\n\t\t\t}\n\n\t\t\tif (mergeData) {\n\t\t\t\texistingFolder = IGFolderUtil.fetchByUUID_G(\n\t\t\t\t\tfolder.getUuid(), context.getGroupId());\n\n\t\t\t\tif (existingFolder == null) {\n\t\t\t\t\texistingFolder = IGFolderLocalServiceUtil.addFolder(\n\t\t\t\t\t\tfolder.getUuid(), userId, plid, parentFolderId,\n\t\t\t\t\t\tfolder.getName(), folder.getDescription(),\n\t\t\t\t\t\taddCommunityPermissions, addGuestPermissions);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\texistingFolder = IGFolderLocalServiceUtil.updateFolder(\n\t\t\t\t\t\texistingFolder.getFolderId(), parentFolderId,\n\t\t\t\t\t\tfolder.getName(), folder.getDescription(), false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingFolder = IGFolderLocalServiceUtil.addFolder(\n\t\t\t\t\tuserId, plid, parentFolderId, folder.getName(),\n\t\t\t\t\tfolder.getDescription(), addCommunityPermissions,\n\t\t\t\t\taddGuestPermissions);\n\t\t\t}\n\n\t\t\tfolderPKs.put(\n\t\t\t\tfolder.getPrimaryKeyObj(), existingFolder.getPrimaryKeyObj());\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent folder for folder \" +\n\t\t\t\t\tfolder.getFolderId());\n\t\t}\n\t}","commit_id":"926a3f5350f0ba5f6a52009d75fc042744b9a8a1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void importIGImage(\n\t\t\tPortletDataContext context, boolean mergeData, Map folderPKs,\n\t\t\tMap imagesPKs, IGImage igImage)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(igImage.getUserUuid());\n\n\t\tLong folderId = (Long)folderPKs.get(new Long(igImage.getFolderId()));\n\n\t\tif (folderId == null) {\n\t\t\tfolderId = new Long(igImage.getFolderId());\n\t\t}\n\n\t\tImage image = (Image)imagesPKs.get(new Long(igImage.getLargeImageId()));\n\n\t\tFile imageFile = null;\n\n\t\tif (image == null) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find image for IG image \" + igImage.getImageId());\n\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\timageFile = new File(\n\t\t\t\tigImage.getDescription() + \".\" + image.getType());\n\n\t\t\tFileUtil.write(imageFile, image.getTextObj());\n\t\t}\n\n\t\tString[] tagsEntries = context.getTagsEntries(\n\t\t\tIGImage.class, igImage.getPrimaryKeyObj());\n\n\t\tboolean addCommunityPermissions = true;\n\t\tboolean addGuestPermissions = true;\n\n\t\tIGImage existingImage = null;\n\n\t\ttry {\n\t\t\tIGFolderUtil.findByPrimaryKey(folderId.longValue());\n\n\t\t\tif (mergeData) {\n\t\t\t\texistingImage = IGImageFinderUtil.findByUuid_G(\n\t\t\t\t\tigImage.getUuid(), context.getGroupId());\n\n\t\t\t\tif (existingImage == null) {\n\t\t\t\t\tIGImageLocalServiceUtil.addImage(\n\t\t\t\t\t\tigImage.getUuid(), userId, folderId.longValue(),\n\t\t\t\t\t\tigImage.getDescription(), imageFile, image.getType(),\n\t\t\t\t\t\ttagsEntries, addCommunityPermissions,\n\t\t\t\t\t\taddGuestPermissions);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tIGImageLocalServiceUtil.updateImage(\n\t\t\t\t\t\tuserId, existingImage.getImageId(),\n\t\t\t\t\t\tfolderId.longValue(), igImage.getDescription(),\n\t\t\t\t\t\timageFile, image.getType(), tagsEntries);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tIGImageLocalServiceUtil.addImage(\n\t\t\t\t\tuserId, folderId.longValue(), igImage.getDescription(),\n\t\t\t\t\timageFile, image.getType(), tagsEntries,\n\t\t\t\t\taddCommunityPermissions, addGuestPermissions);\n\t\t\t}\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent folder for IG image \" +\n\t\t\t\t\tigImage.getImageId());\n\t\t}\n\t}","id":18002,"modified_method":"protected void importIGImage(\n\t\t\tPortletDataContext context, boolean mergeData, Map folderPKs,\n\t\t\tMap imagesPKs, IGImage igImage)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(igImage.getUserUuid());\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderPKs, igImage.getFolderId(), igImage.getFolderId());\n\n\t\tImage image = (Image)imagesPKs.get(new Long(igImage.getLargeImageId()));\n\n\t\tFile imageFile = null;\n\n\t\tif (image == null) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find image for IG image \" + igImage.getImageId());\n\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\timageFile = new File(\n\t\t\t\tigImage.getDescription() + \".\" + image.getType());\n\n\t\t\tFileUtil.write(imageFile, image.getTextObj());\n\t\t}\n\n\t\tString[] tagsEntries = context.getTagsEntries(\n\t\t\tIGImage.class, igImage.getPrimaryKeyObj());\n\n\t\tboolean addCommunityPermissions = true;\n\t\tboolean addGuestPermissions = true;\n\n\t\tIGImage existingImage = null;\n\n\t\ttry {\n\t\t\tIGFolderUtil.findByPrimaryKey(folderId);\n\n\t\t\tif (mergeData) {\n\t\t\t\texistingImage = IGImageFinderUtil.findByUuid_G(\n\t\t\t\t\tigImage.getUuid(), context.getGroupId());\n\n\t\t\t\tif (existingImage == null) {\n\t\t\t\t\tIGImageLocalServiceUtil.addImage(\n\t\t\t\t\t\tigImage.getUuid(), userId, folderId,\n\t\t\t\t\t\tigImage.getDescription(), imageFile, image.getType(),\n\t\t\t\t\t\ttagsEntries, addCommunityPermissions,\n\t\t\t\t\t\taddGuestPermissions);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tIGImageLocalServiceUtil.updateImage(\n\t\t\t\t\t\tuserId, existingImage.getImageId(), folderId,\n\t\t\t\t\t\tigImage.getDescription(), imageFile,\n\t\t\t\t\t\timage.getType(), tagsEntries);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tIGImageLocalServiceUtil.addImage(\n\t\t\t\t\tuserId, folderId, igImage.getDescription(), imageFile,\n\t\t\t\t\timage.getType(), tagsEntries, addCommunityPermissions,\n\t\t\t\t\taddGuestPermissions);\n\t\t\t}\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent folder for IG image \" +\n\t\t\t\t\tigImage.getImageId());\n\t\t}\n\t}","commit_id":"926a3f5350f0ba5f6a52009d75fc042744b9a8a1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void importChoice(\n\t\t\tPortletDataContext context, boolean mergeData, Map questionPKs,\n\t\t\tMap choicePKs, PollsChoice choice)\n\t\tthrows Exception {\n\n\t\tLong questionId = (Long)questionPKs.get(\n\t\t\tnew Long(choice.getQuestionId()));\n\n\t\tif (questionId == null) {\n\t\t\tquestionId = new Long(choice.getQuestionId());\n\t\t}\n\n\t\tPollsChoice existingChoice = null;\n\n\t\ttry {\n\t\t\tPollsQuestionUtil.findByPrimaryKey(questionId.longValue());\n\n\t\t\tif (mergeData) {\n\t\t\t\texistingChoice = PollsChoiceFinderUtil.findByUuid_G(\n\t\t\t\t\tchoice.getUuid(), context.getGroupId());\n\n\t\t\t\tif (existingChoice == null) {\n\t\t\t\t\texistingChoice = PollsChoiceLocalServiceUtil.addChoice(\n\t\t\t\t\t\tchoice.getUuid(), questionId.longValue(),\n\t\t\t\t\t\tchoice.getName(), choice.getDescription());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\texistingChoice = PollsChoiceLocalServiceUtil.updateChoice(\n\t\t\t\t\t\texistingChoice.getChoiceId(), questionId.longValue(),\n\t\t\t\t\t\tchoice.getName(), choice.getDescription());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingChoice = PollsChoiceLocalServiceUtil.addChoice(\n\t\t\t\t\tquestionId.longValue(), choice.getName(),\n\t\t\t\t\tchoice.getDescription());\n\t\t\t}\n\n\t\t\tchoicePKs.put(\n\t\t\t\tchoice.getPrimaryKeyObj(), existingChoice.getPrimaryKeyObj());\n\t\t}\n\t\tcatch (NoSuchQuestionException nsqe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the question for choice \" +\n\t\t\t\t\tchoice.getChoiceId());\n\t\t}\n\t}","id":18003,"modified_method":"protected void importChoice(\n\t\t\tPortletDataContext context, boolean mergeData, Map questionPKs,\n\t\t\tMap choicePKs, PollsChoice choice)\n\t\tthrows Exception {\n\n\t\tlong questionId = MapUtil.getLong(\n\t\t\tquestionPKs, choice.getQuestionId(), choice.getQuestionId());\n\n\t\tPollsChoice existingChoice = null;\n\n\t\ttry {\n\t\t\tPollsQuestionUtil.findByPrimaryKey(questionId);\n\n\t\t\tif (mergeData) {\n\t\t\t\texistingChoice = PollsChoiceFinderUtil.findByUuid_G(\n\t\t\t\t\tchoice.getUuid(), context.getGroupId());\n\n\t\t\t\tif (existingChoice == null) {\n\t\t\t\t\texistingChoice = PollsChoiceLocalServiceUtil.addChoice(\n\t\t\t\t\t\tchoice.getUuid(), questionId, choice.getName(),\n\t\t\t\t\t\tchoice.getDescription());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\texistingChoice = PollsChoiceLocalServiceUtil.updateChoice(\n\t\t\t\t\t\texistingChoice.getChoiceId(), questionId,\n\t\t\t\t\t\tchoice.getName(), choice.getDescription());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingChoice = PollsChoiceLocalServiceUtil.addChoice(\n\t\t\t\t\tquestionId, choice.getName(), choice.getDescription());\n\t\t\t}\n\n\t\t\tchoicePKs.put(\n\t\t\t\tchoice.getPrimaryKeyObj(), existingChoice.getPrimaryKeyObj());\n\t\t}\n\t\tcatch (NoSuchQuestionException nsqe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the question for choice \" +\n\t\t\t\t\tchoice.getChoiceId());\n\t\t}\n\t}","commit_id":"926a3f5350f0ba5f6a52009d75fc042744b9a8a1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void importVote(\n\t\t\tPortletDataContext context, Map questionPKs, Map choicePKs,\n\t\t\tPollsVote vote)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(vote.getUserUuid());\n\n\t\tLong questionId = (Long)questionPKs.get(\n\t\t\tnew Long(vote.getQuestionId()));\n\n\t\tif (questionId == null) {\n\t\t\tquestionId = new Long(vote.getQuestionId());\n\t\t}\n\n\t\tLong choiceId = (Long)choicePKs.get(new Long(vote.getChoiceId()));\n\n\t\tif (choiceId == null) {\n\t\t\tchoiceId = new Long(vote.getChoiceId());\n\t\t}\n\n\t\ttry {\n\t\t\tPollsQuestionUtil.findByPrimaryKey(questionId.longValue());\n\t\t\tPollsChoiceUtil.findByPrimaryKey(choiceId.longValue());\n\n\t\t\tPollsVoteLocalServiceUtil.addVote(\n\t\t\t\tuserId, questionId.longValue(), choiceId.longValue());\n\t\t}\n\t\tcatch (NoSuchQuestionException nsqe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the question for vote \" + vote.getVoteId());\n\t\t}\n\t\tcatch (NoSuchChoiceException nsve) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the choice for vote \" + vote.getVoteId());\n\t\t}\n\t}","id":18004,"modified_method":"protected void importVote(\n\t\t\tPortletDataContext context, Map questionPKs, Map choicePKs,\n\t\t\tPollsVote vote)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(vote.getUserUuid());\n\n\t\tlong questionId = MapUtil.getLong(\n\t\t\tquestionPKs, vote.getQuestionId(), vote.getQuestionId());\n\n\t\tlong choiceId = MapUtil.getLong(\n\t\t\tchoicePKs, vote.getChoiceId(), vote.getChoiceId());\n\n\t\ttry {\n\t\t\tPollsQuestionUtil.findByPrimaryKey(questionId);\n\t\t\tPollsChoiceUtil.findByPrimaryKey(choiceId);\n\n\t\t\tPollsVoteLocalServiceUtil.addVote(\n\t\t\t\tuserId, questionId, choiceId);\n\t\t}\n\t\tcatch (NoSuchQuestionException nsqe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the question for vote \" + vote.getVoteId());\n\t\t}\n\t\tcatch (NoSuchChoiceException nsve) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the choice for vote \" + vote.getVoteId());\n\t\t}\n\t}","commit_id":"926a3f5350f0ba5f6a52009d75fc042744b9a8a1","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void clear() {\n        // changed April 21 2004 (bela): SourceForge bug# 938584. We cannot delete our own messages sent between\n        // a join() and a getState(). Otherwise retransmission requests from members who missed those msgs might\n        // fail. Not to worry though: those msgs will be cleared by STABLE (message garbage collection)\n\n        // sent_msgs.clear();\n\n        for(NakReceiverWindow win: xmit_table.values()) {\n            win.reset();\n        }\n        xmit_table.clear();\n    }","id":18005,"modified_method":"private void clear() {\n        // changed April 21 2004 (bela): SourceForge bug# 938584. We cannot delete our own messages sent between\n        // a join() and a getState(). Otherwise retransmission requests from members who missed those msgs might\n        // fail. Not to worry though: those msgs will be cleared by STABLE (message garbage collection)\n\n        // sent_msgs.clear();\n\n        for(NakReceiverWindow win: xmit_table.values()) {\n            win.reset();\n        }\n        xmit_table.clear();\n        undelivered_msgs.set(0);\n    }","commit_id":"8c76f7cf3daa6c3d5fb13466766e78f685b87406","url":"https://github.com/belaban/JGroups"},{"original_method":"private void reset() {\n        seqno_lock.lock();\n        try {\n            seqno=0;\n        }\n        finally {\n            seqno_lock.unlock();\n        }\n\n        for(NakReceiverWindow win: xmit_table.values()) {\n            win.destroy();\n        }\n        xmit_table.clear();\n    }","id":18006,"modified_method":"private void reset() {\n        seqno_lock.lock();\n        try {\n            seqno=0;\n        }\n        finally {\n            seqno_lock.unlock();\n        }\n\n        for(NakReceiverWindow win: xmit_table.values()) {\n            win.destroy();\n        }\n        xmit_table.clear();\n        undelivered_msgs.set(0);\n    }","commit_id":"8c76f7cf3daa6c3d5fb13466766e78f685b87406","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Finds the corresponding NakReceiverWindow and adds the message to it (according to seqno). Then removes as many\n     * messages as possible from the NRW and passes them up the stack. Discards messages from non-members.\n     */\n    private void  handleMessage(Message msg, NakAckHeader hdr) {\n        Address sender=msg.getSrc();\n        if(sender == null) {\n            if(log.isErrorEnabled())\n                log.error(\"sender of message is null\");\n            return;\n        }\n\n        if(log.isTraceEnabled())\n            log.trace(new StringBuilder().append('[').append(local_addr).append(\": received \").append(sender).append('#').append(hdr.seqno));\n\n        NakReceiverWindow win=xmit_table.get(sender);\n        if(win == null) {  // discard message if there is no entry for sender\n            if(leaving)\n                return;\n            if(log.isWarnEnabled() && log_discard_msgs)\n                log.warn(local_addr + \"] discarded message from non-member \" + sender + \", my view is \" + view);\n            return;\n        }\n\n        boolean loopback=local_addr.equals(sender);\n        boolean added=loopback || win.add(hdr.seqno, msg);\n\n        // message is passed up if OOB. Later, when remove() is called, we discard it. This affects ordering !\n        // http://jira.jboss.com/jira/browse/JGRP-379\n        if(added && msg.isFlagSet(Message.OOB)) {\n            if(!loopback || oob_loopback_msgs.remove(hdr.seqno)) {\n                up_prot.up(new Event(Event.MSG, msg));\n                win.removeOOBMessage();\n                if(!(win.hasMessagesToRemove() && undelivered_msgs.get() > 0))\n                    return;\n            }\n        }\n        \n        //AtomicBoolean busy=in_progress.get(sender);\n        //if(busy == null) {\n          //  in_progress.putIfAbsent(sender, busy=new AtomicBoolean(false));\n        //}\n\n        // check whether a thread is already active for the same sender, if so, terminate. This prevents lots of\n        // threads blocking on the same lock and then - when that lock is released - from terminating anyway, because\n        // the previous thread has already processed all messages (http://jira.jboss.com/jira/browse/JGRP-457)\n        // if(busy.compareAndSet(false, true)) {\n        // try {\n            // Prevents concurrent passing up of messages by different threads (http://jira.jboss.com/jira/browse/JGRP-198);\n            // this is all the more important once we have a threadless stack (http://jira.jboss.com/jira/browse/JGRP-181),\n            // where lots of threads can come up to this point concurrently, but only 1 is allowed to pass at a time\n            // We *can* deliver messages from *different* senders concurrently, e.g. reception of P1, Q1, P2, Q2 can result in\n            // delivery of P1, Q1, Q2, P2: FIFO (implemented by NAKACK) says messages need to be delivered in the\n            // order in which they were sent by the sender\n        Message msg_to_deliver;\n        ReentrantLock lock=win.getLock();\n        lock.lock();\n        try {\n            if(eager_lock_release)\n                locks.put(Thread.currentThread(), lock);\n            short removed_regular_msgs=0;\n            while((msg_to_deliver=win.remove()) != null) {\n\n                // discard OOB msg as it has already been delivered (http://jira.jboss.com/jira/browse/JGRP-379)\n                if(msg_to_deliver.isFlagSet(Message.OOB)) {\n                    continue;\n                }\n                removed_regular_msgs++;\n\n                // Changed by bela Jan 29 2003: not needed (see above)\n                //msg_to_deliver.removeHeader(getName());\n                up_prot.up(new Event(Event.MSG, msg_to_deliver));\n            }\n            if(added) {\n                // We keep track of regular messages that we added, but couldn't remove (because of ordering).\n                // When we have such messages pending, then even OOB threads will remove and process them\n                // http://jira.jboss.com/jira/browse/JGRP-781\n                if(removed_regular_msgs == 0) {\n                    undelivered_msgs.incrementAndGet();\n                }\n                else if(removed_regular_msgs > 1) {\n                    undelivered_msgs.addAndGet(-(removed_regular_msgs -1));\n                }\n            }\n        }\n        finally {\n            if(eager_lock_release)\n                locks.remove(Thread.currentThread());\n            if(lock.isHeldByCurrentThread())\n                lock.unlock();\n        }\n    }","id":18007,"modified_method":"/**\n     * Finds the corresponding NakReceiverWindow and adds the message to it (according to seqno). Then removes as many\n     * messages as possible from the NRW and passes them up the stack. Discards messages from non-members.\n     */\n    private void  handleMessage(Message msg, NakAckHeader hdr) {\n        Address sender=msg.getSrc();\n        if(sender == null) {\n            if(log.isErrorEnabled())\n                log.error(\"sender of message is null\");\n            return;\n        }\n\n        if(log.isTraceEnabled())\n            log.trace(new StringBuilder().append('[').append(local_addr).append(\": received \").append(sender).append('#').append(hdr.seqno));\n\n        NakReceiverWindow win=xmit_table.get(sender);\n        if(win == null) {  // discard message if there is no entry for sender\n            if(leaving)\n                return;\n            if(log.isWarnEnabled() && log_discard_msgs)\n                log.warn(local_addr + \"] discarded message from non-member \" + sender + \", my view is \" + view);\n            return;\n        }\n\n        boolean loopback=local_addr.equals(sender);\n        boolean added=loopback || win.add(hdr.seqno, msg);\n        boolean regular_msg_added=added && !msg.isFlagSet(Message.OOB);\n\n        // message is passed up if OOB. Later, when remove() is called, we discard it. This affects ordering !\n        // http://jira.jboss.com/jira/browse/JGRP-379\n        if(added && msg.isFlagSet(Message.OOB)) {\n            if(!loopback || oob_loopback_msgs.remove(hdr.seqno)) {\n                up_prot.up(new Event(Event.MSG, msg));\n                win.removeOOBMessage();\n                if(!(win.hasMessagesToRemove() && undelivered_msgs.get() > 0))\n                    return;\n            }\n        }\n\n        // Prevents concurrent passing up of messages by different threads (http://jira.jboss.com/jira/browse/JGRP-198);\n        // this is all the more important once we have a threadless stack (http://jira.jboss.com/jira/browse/JGRP-181),\n        // where lots of threads can come up to this point concurrently, but only 1 is allowed to pass at a time\n        // We *can* deliver messages from *different* senders concurrently, e.g. reception of P1, Q1, P2, Q2 can result in\n        // delivery of P1, Q1, Q2, P2: FIFO (implemented by NAKACK) says messages need to be delivered in the\n        // order in which they were sent by the sender\n        Message msg_to_deliver;\n        ReentrantLock lock=win.getLock();\n        lock.lock();\n        try {\n            if(eager_lock_release)\n                locks.put(Thread.currentThread(), lock);\n            short removed_regular_msgs=0;\n            while((msg_to_deliver=win.remove()) != null) {\n\n                // discard OOB msg as it has already been delivered (http://jira.jboss.com/jira/browse/JGRP-379)\n                if(msg_to_deliver.isFlagSet(Message.OOB)) {\n                    continue;\n                }\n                removed_regular_msgs++;\n\n                // Changed by bela Jan 29 2003: not needed (see above)\n                //msg_to_deliver.removeHeader(getName());\n                up_prot.up(new Event(Event.MSG, msg_to_deliver));\n            }\n\n            // We keep track of regular messages that we added, but couldn't remove (because of ordering).\n            // When we have such messages pending, then even OOB threads will remove and process them\n            // http://jira.jboss.com/jira/browse/JGRP-781\n            if(regular_msg_added && removed_regular_msgs == 0) {\n                undelivered_msgs.incrementAndGet();\n            }\n            if(removed_regular_msgs > 0) { // regardless of whether a message was added or not !\n                int num_msgs_added=regular_msg_added? 1 : 0;\n                undelivered_msgs.addAndGet(-(removed_regular_msgs -num_msgs_added));\n            }\n        }\n        finally {\n            if(eager_lock_release)\n                locks.remove(Thread.currentThread());\n            if(lock.isHeldByCurrentThread())\n                lock.unlock();\n        }\n    }","commit_id":"8c76f7cf3daa6c3d5fb13466766e78f685b87406","url":"https://github.com/belaban/JGroups"},{"original_method":"private void reset() {\n        seqno_lock.lock();\n        try {\n            seqno=0;\n        }\n        finally {\n            seqno_lock.unlock();\n        }\n\n        for(NakReceiverWindow win: xmit_table.values()) {\n            win.destroy();\n        }\n        xmit_table.clear();\n    }","id":18008,"modified_method":"private void reset() {\n        seqno_lock.lock();\n        try {\n            seqno=0;\n        }\n        finally {\n            seqno_lock.unlock();\n        }\n\n        for(NakReceiverWindow win: xmit_table.values()) {\n            win.destroy();\n        }\n        xmit_table.clear();\n        undelivered_msgs.set(0);\n    }","commit_id":"8bc128ed4997a468d1ed4bd977b927d0ab9f26d6","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Finds the corresponding NakReceiverWindow and adds the message to it (according to seqno). Then removes as many\n     * messages as possible from the NRW and passes them up the stack. Discards messages from non-members.\n     */\n    private void  handleMessage(Message msg, NakAckHeader hdr) {\n        Address sender=msg.getSrc();\n        if(sender == null) {\n            if(log.isErrorEnabled())\n                log.error(\"sender of message is null\");\n            return;\n        }\n\n        if(log.isTraceEnabled())\n            log.trace(new StringBuilder().append('[').append(local_addr).append(\": received \").append(sender).append('#').append(hdr.seqno));\n\n        NakReceiverWindow win=xmit_table.get(sender);\n        if(win == null) {  // discard message if there is no entry for sender\n            if(leaving)\n                return;\n            if(log.isWarnEnabled() && log_discard_msgs)\n                log.warn(local_addr + \"] discarded message from non-member \" + sender + \", my view is \" + view);\n            return;\n        }\n\n        boolean loopback=local_addr.equals(sender);\n        boolean added=loopback || win.add(hdr.seqno, msg);\n\n        // message is passed up if OOB. Later, when remove() is called, we discard it. This affects ordering !\n        // http://jira.jboss.com/jira/browse/JGRP-379\n        if(added && msg.isFlagSet(Message.OOB)) {\n            if(!loopback || oob_loopback_msgs.remove(hdr.seqno)) {\n                up_prot.up(new Event(Event.MSG, msg));\n                win.removeOOBMessage();\n                if(!(win.hasMessagesToRemove() && undelivered_msgs.get() > 0))\n                    return;\n            }\n        }\n        \n        //AtomicBoolean busy=in_progress.get(sender);\n        //if(busy == null) {\n          //  in_progress.putIfAbsent(sender, busy=new AtomicBoolean(false));\n        //}\n\n        // check whether a thread is already active for the same sender, if so, terminate. This prevents lots of\n        // threads blocking on the same lock and then - when that lock is released - from terminating anyway, because\n        // the previous thread has already processed all messages (http://jira.jboss.com/jira/browse/JGRP-457)\n        // if(busy.compareAndSet(false, true)) {\n        // try {\n            // Prevents concurrent passing up of messages by different threads (http://jira.jboss.com/jira/browse/JGRP-198);\n            // this is all the more important once we have a threadless stack (http://jira.jboss.com/jira/browse/JGRP-181),\n            // where lots of threads can come up to this point concurrently, but only 1 is allowed to pass at a time\n            // We *can* deliver messages from *different* senders concurrently, e.g. reception of P1, Q1, P2, Q2 can result in\n            // delivery of P1, Q1, Q2, P2: FIFO (implemented by NAKACK) says messages need to be delivered in the\n            // order in which they were sent by the sender\n        Message msg_to_deliver;\n        ReentrantLock lock=win.getLock();\n        lock.lock();\n        try {\n            if(eager_lock_release)\n                locks.put(Thread.currentThread(), lock);\n            short removed_regular_msgs=0;\n            while((msg_to_deliver=win.remove()) != null) {\n\n                // discard OOB msg as it has already been delivered (http://jira.jboss.com/jira/browse/JGRP-379)\n                if(msg_to_deliver.isFlagSet(Message.OOB)) {\n                    continue;\n                }\n                removed_regular_msgs++;\n\n                // Changed by bela Jan 29 2003: not needed (see above)\n                //msg_to_deliver.removeHeader(getName());\n                up_prot.up(new Event(Event.MSG, msg_to_deliver));\n            }\n            if(added) {\n                // We keep track of regular messages that we added, but couldn't remove (because of ordering).\n                // When we have such messages pending, then even OOB threads will remove and process them\n                // http://jira.jboss.com/jira/browse/JGRP-781\n                if(removed_regular_msgs == 0) {\n                    undelivered_msgs.incrementAndGet();\n                }\n                else if(removed_regular_msgs > 1) {\n                    undelivered_msgs.addAndGet(-(removed_regular_msgs -1));\n                }\n            }\n        }\n        finally {\n            if(eager_lock_release)\n                locks.remove(Thread.currentThread());\n            if(lock.isHeldByCurrentThread())\n                lock.unlock();\n        }\n    }","id":18009,"modified_method":"/**\n     * Finds the corresponding NakReceiverWindow and adds the message to it (according to seqno). Then removes as many\n     * messages as possible from the NRW and passes them up the stack. Discards messages from non-members.\n     */\n    private void  handleMessage(Message msg, NakAckHeader hdr) {\n        Address sender=msg.getSrc();\n        if(sender == null) {\n            if(log.isErrorEnabled())\n                log.error(\"sender of message is null\");\n            return;\n        }\n\n        if(log.isTraceEnabled())\n            log.trace(new StringBuilder().append('[').append(local_addr).append(\": received \").append(sender).append('#').append(hdr.seqno));\n\n        NakReceiverWindow win=xmit_table.get(sender);\n        if(win == null) {  // discard message if there is no entry for sender\n            if(leaving)\n                return;\n            if(log.isWarnEnabled() && log_discard_msgs)\n                log.warn(local_addr + \"] discarded message from non-member \" + sender + \", my view is \" + view);\n            return;\n        }\n\n        boolean loopback=local_addr.equals(sender);\n        boolean added=loopback || win.add(hdr.seqno, msg);\n        boolean regular_msg_added=added && !msg.isFlagSet(Message.OOB);\n\n        // message is passed up if OOB. Later, when remove() is called, we discard it. This affects ordering !\n        // http://jira.jboss.com/jira/browse/JGRP-379\n        if(added && msg.isFlagSet(Message.OOB)) {\n            if(!loopback || oob_loopback_msgs.remove(hdr.seqno)) {\n                up_prot.up(new Event(Event.MSG, msg));\n                win.removeOOBMessage();\n                if(!(win.hasMessagesToRemove() && undelivered_msgs.get() > 0))\n                    return;\n            }\n        }\n\n        // Prevents concurrent passing up of messages by different threads (http://jira.jboss.com/jira/browse/JGRP-198);\n        // this is all the more important once we have a threadless stack (http://jira.jboss.com/jira/browse/JGRP-181),\n        // where lots of threads can come up to this point concurrently, but only 1 is allowed to pass at a time\n        // We *can* deliver messages from *different* senders concurrently, e.g. reception of P1, Q1, P2, Q2 can result in\n        // delivery of P1, Q1, Q2, P2: FIFO (implemented by NAKACK) says messages need to be delivered in the\n        // order in which they were sent by the sender\n        Message msg_to_deliver;\n        ReentrantLock lock=win.getLock();\n        lock.lock();\n        try {\n            if(eager_lock_release)\n                locks.put(Thread.currentThread(), lock);\n            short removed_regular_msgs=0;\n            while((msg_to_deliver=win.remove()) != null) {\n\n                // discard OOB msg as it has already been delivered (http://jira.jboss.com/jira/browse/JGRP-379)\n                if(msg_to_deliver.isFlagSet(Message.OOB)) {\n                    continue;\n                }\n                removed_regular_msgs++;\n\n                // Changed by bela Jan 29 2003: not needed (see above)\n                //msg_to_deliver.removeHeader(getName());\n                up_prot.up(new Event(Event.MSG, msg_to_deliver));\n            }\n\n            // We keep track of regular messages that we added, but couldn't remove (because of ordering).\n            // When we have such messages pending, then even OOB threads will remove and process them\n            // http://jira.jboss.com/jira/browse/JGRP-781\n            if(regular_msg_added && removed_regular_msgs == 0) {\n                undelivered_msgs.incrementAndGet();\n            }\n            if(removed_regular_msgs > 0) { // regardless of whether a message was added or not !\n                int num_msgs_added=regular_msg_added? 1 : 0;\n                undelivered_msgs.addAndGet(-(removed_regular_msgs -num_msgs_added));\n            }\n        }\n        finally {\n            if(eager_lock_release)\n                locks.remove(Thread.currentThread());\n            if(lock.isHeldByCurrentThread())\n                lock.unlock();\n        }\n    }","commit_id":"8bc128ed4997a468d1ed4bd977b927d0ab9f26d6","url":"https://github.com/belaban/JGroups"},{"original_method":"private void clear() {\n        // changed April 21 2004 (bela): SourceForge bug# 938584. We cannot delete our own messages sent between\n        // a join() and a getState(). Otherwise retransmission requests from members who missed those msgs might\n        // fail. Not to worry though: those msgs will be cleared by STABLE (message garbage collection)\n\n        // sent_msgs.clear();\n\n        for(NakReceiverWindow win: xmit_table.values()) {\n            win.reset();\n        }\n        xmit_table.clear();\n    }","id":18010,"modified_method":"private void clear() {\n        // changed April 21 2004 (bela): SourceForge bug# 938584. We cannot delete our own messages sent between\n        // a join() and a getState(). Otherwise retransmission requests from members who missed those msgs might\n        // fail. Not to worry though: those msgs will be cleared by STABLE (message garbage collection)\n\n        // sent_msgs.clear();\n\n        for(NakReceiverWindow win: xmit_table.values()) {\n            win.reset();\n        }\n        xmit_table.clear();\n        undelivered_msgs.set(0);\n    }","commit_id":"8bc128ed4997a468d1ed4bd977b927d0ab9f26d6","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Check whether the hashtable contains an entry e for <code>sender<\/code> (create if not). If\n     * e.received_msgs is null and <code>first<\/code> is true: create a new AckReceiverWindow(seqno) and\n     * add message. Set e.received_msgs to the new window. Else just add the message.\n     * @return boolean True if we can send an ack, false otherwise\n     */\n    private boolean handleDataReceived(Address sender, long seqno, Message msg) {\n        if(log.isTraceEnabled())\n            log.trace(new StringBuilder().append(local_addr).append(\" <-- DATA(\").append(sender).append(\": #\").append(seqno));\n\n        if(previous_members.contains(sender)) {\n            // we don't want to see messages from departed members\n            if(seqno > DEFAULT_FIRST_SEQNO) {\n                if(log.isTraceEnabled())\n                    log.trace(\"discarding message \" + seqno + \" from previous member \" + sender);\n                return false; // don't ack this message so the sender keeps resending it !\n            }\n            if(log.isTraceEnabled())\n                log.trace(\"removed \" + sender + \" from previous_members as we received a message from it\");\n            previous_members.remove(sender);\n        }\n\n        Entry    entry;\n        AckReceiverWindow win;\n        synchronized(connections) {\n            entry=connections.get(sender);\n            if(entry == null) {\n                entry=new Entry();\n                connections.put(sender, entry);\n                if(log.isTraceEnabled())\n                    log.trace(local_addr + \": created new connection for dst \" + sender);\n            }\n            win=entry.received_msgs;\n            if(win == null) {\n                win=new AckReceiverWindow(DEFAULT_FIRST_SEQNO);\n                entry.received_msgs=win;\n            }\n        }\n\n        boolean added=win.add(seqno, msg); // entry.received_msgs is guaranteed to be non-null if we get here\n        num_msgs_received++;\n        num_bytes_received+=msg.getLength();\n\n        // http://jira.jboss.com/jira/browse/JGRP-713: // send the ack back *before* we process the message\n        // to limit unnecessary retransmits\n        if(immediate_ack && !xmit_off)\n            sendAck(sender, seqno); // send an ack regardless of whether the message was added (stops retransmission)\n\n        // message is passed up if OOB. Later, when remove() is called, we discard it. This affects ordering !\n        // http://jira.jboss.com/jira/browse/JGRP-377\n        if(msg.isFlagSet(Message.OOB)) {\n            if(added)\n                up_prot.up(new Event(Event.MSG, msg));\n            win.removeOOBMessage(); // if we only have OOB messages, we'd never remove them !\n            if(!(win.hasMessagesToRemove() && undelivered_msgs.get() > 0))\n                return true;\n        }\n\n        // only regular messages from this point on\n        if(!added && !win.hasMessagesToRemove()) { // no ack if we didn't add the msg (e.g. duplicate)\n            return true; // ack the message, because this will stop retransmission (which are unreliable) !\n        }\n\n\n        // Try to remove (from the AckReceiverWindow) as many messages as possible as pass them up\n        Message  m;\n\n        // Prevents concurrent passing up of messages by different threads (http://jira.jboss.com/jira/browse/JGRP-198);\n        // this is all the more important once we have a threadless stack (http://jira.jboss.com/jira/browse/JGRP-181),\n        // where lots of threads can come up to this point concurrently, but only 1 is allowed to pass at a time\n        // We *can* deliver messages from *different* senders concurrently, e.g. reception of P1, Q1, P2, Q2 can result in\n        // delivery of P1, Q1, Q2, P2: FIFO (implemented by UNICAST) says messages need to be delivered only in the\n        // order in which they were sent by their senders\n        ReentrantLock lock=win.getLock();\n        lock.lock(); // we don't block on entry any more (http://jira.jboss.com/jira/browse/JGRP-485)\n        try {\n            if(eager_lock_release)\n                locks.put(Thread.currentThread(), lock);\n            short removed_regular_msgs=0;\n            while((m=win.remove()) != null) {\n                // discard OOB msg as it has already been delivered (http://jira.jboss.com/jira/browse/JGRP-377)\n                if(m.isFlagSet(Message.OOB)) {\n                    continue;\n                }\n                removed_regular_msgs++;\n                up_prot.up(new Event(Event.MSG, m));\n            }\n\n            if(added) {\n                // We keep track of regular messages that we added, but couldn't remove (because of ordering).\n                // When we have such messages pending, then even OOB threads will remove and process them.\n                // http://jira.jboss.com/jira/browse/JGRP-780\n                if(removed_regular_msgs == 0) {\n                    undelivered_msgs.incrementAndGet();\n                }\n                else if(removed_regular_msgs > 1) {\n                    undelivered_msgs.addAndGet(-(removed_regular_msgs -1));\n                }\n            }\n        }\n        finally {\n            if(eager_lock_release)\n                locks.remove(Thread.currentThread());\n            if(lock.isHeldByCurrentThread())\n                lock.unlock();\n        }\n        return true; // msg was successfully received - send an ack back to the sender\n    }","id":18011,"modified_method":"/**\n     * Check whether the hashtable contains an entry e for <code>sender<\/code> (create if not). If\n     * e.received_msgs is null and <code>first<\/code> is true: create a new AckReceiverWindow(seqno) and\n     * add message. Set e.received_msgs to the new window. Else just add the message.\n     * @return boolean True if we can send an ack, false otherwise\n     */\n    private boolean handleDataReceived(Address sender, long seqno, Message msg) {\n        if(log.isTraceEnabled())\n            log.trace(new StringBuilder().append(local_addr).append(\" <-- DATA(\").append(sender).append(\": #\").append(seqno));\n\n        if(previous_members.contains(sender)) {\n            // we don't want to see messages from departed members\n            if(seqno > DEFAULT_FIRST_SEQNO) {\n                if(log.isTraceEnabled())\n                    log.trace(\"discarding message \" + seqno + \" from previous member \" + sender);\n                return false; // don't ack this message so the sender keeps resending it !\n            }\n            if(log.isTraceEnabled())\n                log.trace(\"removed \" + sender + \" from previous_members as we received a message from it\");\n            previous_members.remove(sender);\n        }\n\n        Entry    entry;\n        AckReceiverWindow win;\n        synchronized(connections) {\n            entry=connections.get(sender);\n            if(entry == null) {\n                entry=new Entry();\n                connections.put(sender, entry);\n                if(log.isTraceEnabled())\n                    log.trace(local_addr + \": created new connection for dst \" + sender);\n            }\n            win=entry.received_msgs;\n            if(win == null) {\n                win=new AckReceiverWindow(DEFAULT_FIRST_SEQNO);\n                entry.received_msgs=win;\n            }\n        }\n\n        boolean added=win.add(seqno, msg); // entry.received_msgs is guaranteed to be non-null if we get here\n        boolean regular_msg_added=added && !msg.isFlagSet(Message.OOB);\n        num_msgs_received++;\n        num_bytes_received+=msg.getLength();\n\n        // http://jira.jboss.com/jira/browse/JGRP-713: // send the ack back *before* we process the message\n        // to limit unnecessary retransmits\n        if(immediate_ack && !xmit_off)\n            sendAck(sender, seqno); // send an ack regardless of whether the message was added (stops retransmission)\n\n        // message is passed up if OOB. Later, when remove() is called, we discard it. This affects ordering !\n        // http://jira.jboss.com/jira/browse/JGRP-377\n        if(msg.isFlagSet(Message.OOB)) {\n            if(added)\n                up_prot.up(new Event(Event.MSG, msg));\n            win.removeOOBMessage(); // if we only have OOB messages, we'd never remove them !\n            if(!(win.hasMessagesToRemove() && undelivered_msgs.get() > 0))\n                return true;\n        }\n\n        if(!added && !win.hasMessagesToRemove()) { // no ack if we didn't add the msg (e.g. duplicate)\n            return true; // ack the message, because this will stop retransmissions (which are unreliable) !\n        }\n\n\n        // Try to remove (from the AckReceiverWindow) as many messages as possible as pass them up\n        Message  m;\n        short removed_regular_msgs=0;\n\n        // Prevents concurrent passing up of messages by different threads (http://jira.jboss.com/jira/browse/JGRP-198);\n        // this is all the more important once we have a threadless stack (http://jira.jboss.com/jira/browse/JGRP-181),\n        // where lots of threads can come up to this point concurrently, but only 1 is allowed to pass at a time\n        // We *can* deliver messages from *different* senders concurrently, e.g. reception of P1, Q1, P2, Q2 can result in\n        // delivery of P1, Q1, Q2, P2: FIFO (implemented by UNICAST) says messages need to be delivered only in the\n        // order in which they were sent by their senders\n        ReentrantLock lock=win.getLock();\n        lock.lock(); // we don't block on entry any more (http://jira.jboss.com/jira/browse/JGRP-485)\n        try {\n            if(eager_lock_release)\n                locks.put(Thread.currentThread(), lock);\n            while((m=win.remove()) != null) {\n                // discard OOB msg as it has already been delivered (http://jira.jboss.com/jira/browse/JGRP-377)\n                if(m.isFlagSet(Message.OOB)) {\n                    continue;\n                }\n                removed_regular_msgs++;\n                up_prot.up(new Event(Event.MSG, m));\n            }\n\n            if(regular_msg_added && removed_regular_msgs == 0) {\n                // We keep track of regular messages that we added, but couldn't remove (because of ordering).\n                // When we have such messages pending, then even OOB threads will remove and process them.\n                // http://jira.jboss.com/jira/browse/JGRP-780\n                undelivered_msgs.incrementAndGet();\n            }\n\n            if(removed_regular_msgs > 0) { // regardless of whether a message was added or not !\n                int num_msgs_added=regular_msg_added? 1 : 0;\n                undelivered_msgs.addAndGet(-(removed_regular_msgs -num_msgs_added));\n            }\n        }\n        finally {\n            if(eager_lock_release)\n                locks.remove(Thread.currentThread());\n            if(lock.isHeldByCurrentThread())\n                lock.unlock();\n        }\n        return true; // msg was successfully received - send an ack back to the sender\n    }","commit_id":"a1ad64a857aa61721b76e03b996918487b19b1eb","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Check whether the hashtable contains an entry e for <code>sender<\/code> (create if not). If\n     * e.received_msgs is null and <code>first<\/code> is true: create a new AckReceiverWindow(seqno) and\n     * add message. Set e.received_msgs to the new window. Else just add the message.\n     * @return boolean True if we can send an ack, false otherwise\n     */\n    private boolean handleDataReceived(Address sender, long seqno, Message msg) {\n        if(log.isTraceEnabled())\n            log.trace(new StringBuilder().append(local_addr).append(\" <-- DATA(\").append(sender).append(\": #\").append(seqno));\n\n        if(previous_members.contains(sender)) {\n            // we don't want to see messages from departed members\n            if(seqno > DEFAULT_FIRST_SEQNO) {\n                if(log.isTraceEnabled())\n                    log.trace(\"discarding message \" + seqno + \" from previous member \" + sender);\n                return false; // don't ack this message so the sender keeps resending it !\n            }\n            if(log.isTraceEnabled())\n                log.trace(\"removed \" + sender + \" from previous_members as we received a message from it\");\n            previous_members.remove(sender);\n        }\n\n        Entry    entry;\n        AckReceiverWindow win;\n        synchronized(connections) {\n            entry=connections.get(sender);\n            if(entry == null) {\n                entry=new Entry();\n                connections.put(sender, entry);\n                if(log.isTraceEnabled())\n                    log.trace(local_addr + \": created new connection for dst \" + sender);\n            }\n            win=entry.received_msgs;\n            if(win == null) {\n                win=new AckReceiverWindow(DEFAULT_FIRST_SEQNO);\n                entry.received_msgs=win;\n            }\n        }\n\n        boolean added=win.add(seqno, msg); // entry.received_msgs is guaranteed to be non-null if we get here\n        num_msgs_received++;\n        num_bytes_received+=msg.getLength();\n\n        // http://jira.jboss.com/jira/browse/JGRP-713: // send the ack back *before* we process the message\n        // to limit unnecessary retransmits\n        if(immediate_ack && !xmit_off)\n            sendAck(sender, seqno); // send an ack regardless of whether the message was added (stops retransmission)\n\n        // message is passed up if OOB. Later, when remove() is called, we discard it. This affects ordering !\n        // http://jira.jboss.com/jira/browse/JGRP-377\n        if(msg.isFlagSet(Message.OOB)) {\n            if(added)\n                up_prot.up(new Event(Event.MSG, msg));\n            win.removeOOBMessage(); // if we only have OOB messages, we'd never remove them !\n            if(!(win.hasMessagesToRemove() && undelivered_msgs.get() > 0))\n                return true;\n        }\n\n        // only regular messages from this point on\n        if(!added && !win.hasMessagesToRemove()) { // no ack if we didn't add the msg (e.g. duplicate)\n            return true; // ack the message, because this will stop retransmission (which are unreliable) !\n        }\n\n\n        // Try to remove (from the AckReceiverWindow) as many messages as possible as pass them up\n        Message  m;\n\n        // Prevents concurrent passing up of messages by different threads (http://jira.jboss.com/jira/browse/JGRP-198);\n        // this is all the more important once we have a threadless stack (http://jira.jboss.com/jira/browse/JGRP-181),\n        // where lots of threads can come up to this point concurrently, but only 1 is allowed to pass at a time\n        // We *can* deliver messages from *different* senders concurrently, e.g. reception of P1, Q1, P2, Q2 can result in\n        // delivery of P1, Q1, Q2, P2: FIFO (implemented by UNICAST) says messages need to be delivered only in the\n        // order in which they were sent by their senders\n        ReentrantLock lock=win.getLock();\n        lock.lock(); // we don't block on entry any more (http://jira.jboss.com/jira/browse/JGRP-485)\n        try {\n            if(eager_lock_release)\n                locks.put(Thread.currentThread(), lock);\n            short removed_regular_msgs=0;\n            while((m=win.remove()) != null) {\n                // discard OOB msg as it has already been delivered (http://jira.jboss.com/jira/browse/JGRP-377)\n                if(m.isFlagSet(Message.OOB)) {\n                    continue;\n                }\n                removed_regular_msgs++;\n                up_prot.up(new Event(Event.MSG, m));\n            }\n\n            if(added) {\n                // We keep track of regular messages that we added, but couldn't remove (because of ordering).\n                // When we have such messages pending, then even OOB threads will remove and process them.\n                // http://jira.jboss.com/jira/browse/JGRP-780\n                if(removed_regular_msgs == 0) {\n                    undelivered_msgs.incrementAndGet();\n                }\n                else if(removed_regular_msgs > 1) {\n                    undelivered_msgs.addAndGet(-(removed_regular_msgs -1));\n                }\n            }\n        }\n        finally {\n            if(eager_lock_release)\n                locks.remove(Thread.currentThread());\n            if(lock.isHeldByCurrentThread())\n                lock.unlock();\n        }\n        return true; // msg was successfully received - send an ack back to the sender\n    }","id":18012,"modified_method":"/**\n     * Check whether the hashtable contains an entry e for <code>sender<\/code> (create if not). If\n     * e.received_msgs is null and <code>first<\/code> is true: create a new AckReceiverWindow(seqno) and\n     * add message. Set e.received_msgs to the new window. Else just add the message.\n     * @return boolean True if we can send an ack, false otherwise\n     */\n    private boolean handleDataReceived(Address sender, long seqno, Message msg) {\n        if(log.isTraceEnabled())\n            log.trace(new StringBuilder().append(local_addr).append(\" <-- DATA(\").append(sender).append(\": #\").append(seqno));\n\n        if(previous_members.contains(sender)) {\n            // we don't want to see messages from departed members\n            if(seqno > DEFAULT_FIRST_SEQNO) {\n                if(log.isTraceEnabled())\n                    log.trace(\"discarding message \" + seqno + \" from previous member \" + sender);\n                return false; // don't ack this message so the sender keeps resending it !\n            }\n            if(log.isTraceEnabled())\n                log.trace(\"removed \" + sender + \" from previous_members as we received a message from it\");\n            previous_members.remove(sender);\n        }\n\n        Entry    entry;\n        AckReceiverWindow win;\n        synchronized(connections) {\n            entry=connections.get(sender);\n            if(entry == null) {\n                entry=new Entry();\n                connections.put(sender, entry);\n                if(log.isTraceEnabled())\n                    log.trace(local_addr + \": created new connection for dst \" + sender);\n            }\n            win=entry.received_msgs;\n            if(win == null) {\n                win=new AckReceiverWindow(DEFAULT_FIRST_SEQNO);\n                entry.received_msgs=win;\n            }\n        }\n\n        boolean added=win.add(seqno, msg); // entry.received_msgs is guaranteed to be non-null if we get here\n        boolean regular_msg_added=added && !msg.isFlagSet(Message.OOB);\n        num_msgs_received++;\n        num_bytes_received+=msg.getLength();\n\n        // http://jira.jboss.com/jira/browse/JGRP-713: // send the ack back *before* we process the message\n        // to limit unnecessary retransmits\n        if(immediate_ack && !xmit_off)\n            sendAck(sender, seqno); // send an ack regardless of whether the message was added (stops retransmission)\n\n        // message is passed up if OOB. Later, when remove() is called, we discard it. This affects ordering !\n        // http://jira.jboss.com/jira/browse/JGRP-377\n        if(msg.isFlagSet(Message.OOB)) {\n            if(added)\n                up_prot.up(new Event(Event.MSG, msg));\n            win.removeOOBMessage(); // if we only have OOB messages, we'd never remove them !\n            if(!(win.hasMessagesToRemove() && undelivered_msgs.get() > 0))\n                return true;\n        }\n\n        if(!added && !win.hasMessagesToRemove()) { // no ack if we didn't add the msg (e.g. duplicate)\n            return true; // ack the message, because this will stop retransmissions (which are unreliable) !\n        }\n\n\n        // Try to remove (from the AckReceiverWindow) as many messages as possible as pass them up\n        Message  m;\n        short removed_regular_msgs=0;\n\n        // Prevents concurrent passing up of messages by different threads (http://jira.jboss.com/jira/browse/JGRP-198);\n        // this is all the more important once we have a threadless stack (http://jira.jboss.com/jira/browse/JGRP-181),\n        // where lots of threads can come up to this point concurrently, but only 1 is allowed to pass at a time\n        // We *can* deliver messages from *different* senders concurrently, e.g. reception of P1, Q1, P2, Q2 can result in\n        // delivery of P1, Q1, Q2, P2: FIFO (implemented by UNICAST) says messages need to be delivered only in the\n        // order in which they were sent by their senders\n        ReentrantLock lock=win.getLock();\n        lock.lock(); // we don't block on entry any more (http://jira.jboss.com/jira/browse/JGRP-485)\n        try {\n            if(eager_lock_release)\n                locks.put(Thread.currentThread(), lock);\n            while((m=win.remove()) != null) {\n                // discard OOB msg as it has already been delivered (http://jira.jboss.com/jira/browse/JGRP-377)\n                if(m.isFlagSet(Message.OOB)) {\n                    continue;\n                }\n                removed_regular_msgs++;\n                up_prot.up(new Event(Event.MSG, m));\n            }\n\n            if(regular_msg_added && removed_regular_msgs == 0) {\n                // We keep track of regular messages that we added, but couldn't remove (because of ordering).\n                // When we have such messages pending, then even OOB threads will remove and process them.\n                // http://jira.jboss.com/jira/browse/JGRP-780\n                undelivered_msgs.incrementAndGet();\n            }\n\n            if(removed_regular_msgs > 0) { // regardless of whether a message was added or not !\n                int num_msgs_added=regular_msg_added? 1 : 0;\n                undelivered_msgs.addAndGet(-(removed_regular_msgs -num_msgs_added));\n            }\n        }\n        finally {\n            if(eager_lock_release)\n                locks.remove(Thread.currentThread());\n            if(lock.isHeldByCurrentThread())\n                lock.unlock();\n        }\n        return true; // msg was successfully received - send an ack back to the sender\n    }","commit_id":"885239cb16ddf79b9ecd90aa4a93eabe5e7b67e9","url":"https://github.com/belaban/JGroups"},{"original_method":"@Override NewChunk inflate_impl(NewChunk nc) {\n    double dx = Math.log10(_scale);\n    assert water.util.PrettyPrint.fitsIntoInt(dx);\n    Arrays.fill(nc.alloc_exponent(len()), (int)dx);\n    nc.alloc_mantissa(len());\n    for( int i=0; i< len(); i++ ) {\n      int res = 0xFF&_mem[i+_OFF];\n      if( res == C1Chunk._NA ) nc.exponent()[i] = Integer.MIN_VALUE;\n      else                     nc.mantissa()[i] = res+_bias;\n    }\n    nc.set_len(nc.set_len2(len()));\n    return nc;\n  }","id":18013,"modified_method":"@Override NewChunk inflate_impl(NewChunk nc) {\n    double dx = Math.log10(_scale);\n    assert water.util.PrettyPrint.fitsIntoInt(dx);\n    nc.set_len(0);\n    nc.set_len2(0);\n    final int len = len();\n    for( int i=0; i<len; i++ ) {\n      int res = 0xFF&_mem[i+_OFF];\n      if( res == C1Chunk._NA ) nc.addNA();\n      else             nc.addNum((long)(res+_bias),(int)dx);\n    }\n    return nc;\n  }","commit_id":"ea99b178b80e280f9d49e74adc33593816b57a07","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override NewChunk inflate_impl(NewChunk nc) {\n    double dx = Math.log10(_scale);\n    assert water.util.PrettyPrint.fitsIntoInt(dx);\n    Arrays.fill(nc.alloc_exponent(len()), (int)dx);\n    nc.alloc_mantissa(len());\n    for( int i=0; i< len(); i++ ) {\n      int res = UnsafeUtils.get4(_mem,(i<<2)+_OFF);\n      if( res == _NA ) nc.exponent()[i] = Integer.MIN_VALUE;\n      else             nc.mantissa()[i] = res+_bias;\n    }\n    nc.set_len(nc.set_len2(len()));\n    return nc;\n  }","id":18014,"modified_method":"@Override NewChunk inflate_impl(NewChunk nc) {\n    double dx = Math.log10(_scale);\n    assert water.util.PrettyPrint.fitsIntoInt(dx);\n    nc.set_len(0);\n    nc.set_len2(0);\n    final int len = len();\n    for( int i=0; i<len; i++ ) {\n      int res = UnsafeUtils.get4(_mem,(i<<2)+_OFF);\n      if( res == _NA ) nc.addNA();\n      else nc.addNum((long)(res+_bias),(int)dx);\n    }\n    return nc;\n  }","commit_id":"5c9d9a2a7ec08428e2103c6796522577f26bb299","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override NewChunk inflate_impl(NewChunk nc) {\n    double dx = Math.log10(_scale);\n    assert water.util.PrettyPrint.fitsIntoInt(dx);\n    Arrays.fill(nc.alloc_exponent(len()), (int)dx);\n    nc.alloc_mantissa(len());\n    for( int i=0; i< len(); i++ ) {\n      int res = UnsafeUtils.get2(_mem,(i<<1)+_OFF);\n      if( res == C2Chunk._NA ) nc.exponent()[i] = Integer.MIN_VALUE;\n      else                     nc.mantissa()[i] = res+_bias;\n    }\n    nc.set_len(nc.set_len2(len()));\n    return nc;\n  }","id":18015,"modified_method":"@Override NewChunk inflate_impl(NewChunk nc) {\n    double dx = Math.log10(_scale);\n    assert water.util.PrettyPrint.fitsIntoInt(dx);\n    nc.set_len(0);\n    nc.set_len2(0);\n    final int len = len();\n    for( int i=0; i<len; i++ ) {\n      int res = UnsafeUtils.get2(_mem,(i<<1)+_OFF);\n      if( res == C2Chunk._NA ) nc.addNA();\n      else nc.addNum((long)(res+_bias),(int)dx);\n    }\n    return nc;\n  }","commit_id":"bab547ef9d9f7dc9b7bd3637ea0ef89429aed3fb","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public void createSequence(EObject context, EObject semanticObject) {\n\t\tif(semanticObject.eClass().getEPackage() == TypesPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {\n\t\t\tcase TypesPackage.JVM_FORMAL_PARAMETER:\n\t\t\t\tif(context == grammarAccess.getJvmFormalParameterRule()) {\n\t\t\t\t\tsequence_JvmFormalParameter_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_LOWER_BOUND:\n\t\t\t\tif(context == grammarAccess.getJvmLowerBoundRule()) {\n\t\t\t\t\tsequence_JvmLowerBound_JvmLowerBound(context, (JvmLowerBound) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:\n\t\t\t\tif(context == grammarAccess.getJvmTypeReferenceRule() ||\n\t\t\t\t   context == grammarAccess.getJvmParameterizedTypeReferenceRule() ||\n\t\t\t\t   context == grammarAccess.getJvmArgumentTypeReferenceRule()) {\n\t\t\t\t\tsequence_JvmParameterizedTypeReference_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_TYPE_PARAMETER:\n\t\t\t\tif(context == grammarAccess.getJvmTypeParameterRule()) {\n\t\t\t\t\tsequence_JvmTypeParameter_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_UPPER_BOUND:\n\t\t\t\tif(context == grammarAccess.getJvmUpperBoundAndedRule()) {\n\t\t\t\t\tsequence_JvmUpperBoundAnded_JvmUpperBound(context, (JvmUpperBound) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse if(context == grammarAccess.getJvmUpperBoundRule()) {\n\t\t\t\t\tsequence_JvmUpperBound_JvmUpperBound(context, (JvmUpperBound) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:\n\t\t\t\tif(context == grammarAccess.getJvmArgumentTypeReferenceRule() ||\n\t\t\t\t   context == grammarAccess.getJvmWildcardTypeReferenceRule()) {\n\t\t\t\t\tsequence_JvmWildcardTypeReference_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\t}\n\t\telse if(semanticObject.eClass().getEPackage() == XbasePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {\n\t\t\tcase XbasePackage.XBINARY_OPERATION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XAdditiveExpression_XBinaryOperation(context, (XBinaryOperation) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XASSIGNMENT:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XAssignment_XAssignment(context, (XAssignment) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XBLOCK_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXBlockExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XBlockExpression_XBlockExpression(context, (XBlockExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XBOOLEAN_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXBooleanLiteralRule()) {\n\t\t\t\t\tsequence_XBooleanLiteral_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCASE_PART:\n\t\t\t\tif(context == grammarAccess.getXCasePartRule()) {\n\t\t\t\t\tsequence_XCasePart_XCasePart(context, (XCasePart) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCASTED_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XCastedExpression_XCastedExpression(context, (XCastedExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCATCH_CLAUSE:\n\t\t\t\tif(context == grammarAccess.getXCatchClauseRule()) {\n\t\t\t\t\tsequence_XCatchClause_XCatchClause(context, (XCatchClause) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCLOSURE:\n\t\t\t\tif(context == grammarAccess.getXShortClosureRule()) {\n\t\t\t\t\tsequence_XShortClosure_XClosure(context, (XClosure) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse if(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXClosureRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XClosure_XClosure(context, (XClosure) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCONSTRUCTOR_CALL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXConstructorCallRule()) {\n\t\t\t\t\tsequence_XConstructorCall_XConstructorCall(context, (XConstructorCall) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XDO_WHILE_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXDoWhileExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XDoWhileExpression_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XNULL_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXNullLiteralRule()) {\n\t\t\t\t\tsequence_XExpression_XNullLiteral(context, (XNullLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XFEATURE_CALL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXFeatureCallRule()) {\n\t\t\t\t\tsequence_XFeatureCall_XFeatureCall(context, (XFeatureCall) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XFOR_LOOP_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXForLoopExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XForLoopExpression_XForLoopExpression(context, (XForLoopExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XIF_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXIfExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XIfExpression_XIfExpression(context, (XIfExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XINT_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXIntLiteralRule()) {\n\t\t\t\t\tsequence_XIntLiteral_XIntLiteral(context, (XIntLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XMEMBER_FEATURE_CALL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XMemberFeatureCall_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XINSTANCE_OF_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XRelationalExpression_XInstanceOfExpression(context, (XInstanceOfExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XRETURN_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXReturnExpressionRule()) {\n\t\t\t\t\tsequence_XReturnExpression_XReturnExpression(context, (XReturnExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XSTRING_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXStringLiteralRule()) {\n\t\t\t\t\tsequence_XStringLiteral_XStringLiteral(context, (XStringLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XSWITCH_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXSwitchExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XSwitchExpression_XSwitchExpression(context, (XSwitchExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XTHROW_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXThrowExpressionRule()) {\n\t\t\t\t\tsequence_XThrowExpression_XThrowExpression(context, (XThrowExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXTryCatchFinallyExpressionRule()) {\n\t\t\t\t\tsequence_XTryCatchFinallyExpression_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XTYPE_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXTypeLiteralRule()) {\n\t\t\t\t\tsequence_XTypeLiteral_XTypeLiteral(context, (XTypeLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XUNARY_OPERATION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XUnaryOperation_XUnaryOperation(context, (XUnaryOperation) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XVARIABLE_DECLARATION:\n\t\t\t\tif(context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXVariableDeclarationRule()) {\n\t\t\t\t\tsequence_XVariableDeclaration_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XWHILE_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXWhileExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XWhileExpression_XWhileExpression(context, (XWhileExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\t}\n\t\telse if(semanticObject.eClass().getEPackage() == XtypePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {\n\t\t\tcase XtypePackage.XFUNCTION_TYPE_REF:\n\t\t\t\tif(context == grammarAccess.getJvmTypeReferenceRule() ||\n\t\t\t\t   context == grammarAccess.getXFunctionTypeRefRule() ||\n\t\t\t\t   context == grammarAccess.getJvmArgumentTypeReferenceRule()) {\n\t\t\t\t\tsequence_XFunctionTypeRef_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\t}\n\t\tif (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));\n\t}","id":18016,"modified_method":"public void createSequence(EObject context, EObject semanticObject) {\n\t\tif(semanticObject.eClass().getEPackage() == TypesPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {\n\t\t\tcase TypesPackage.JVM_FORMAL_PARAMETER:\n\t\t\t\tif(context == grammarAccess.getJvmFormalParameterRule()) {\n\t\t\t\t\tsequence_JvmFormalParameter_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_LOWER_BOUND:\n\t\t\t\tif(context == grammarAccess.getJvmLowerBoundRule()) {\n\t\t\t\t\tsequence_JvmLowerBound_JvmLowerBound(context, (JvmLowerBound) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:\n\t\t\t\tif(context == grammarAccess.getJvmTypeReferenceRule() ||\n\t\t\t\t   context == grammarAccess.getJvmParameterizedTypeReferenceRule() ||\n\t\t\t\t   context == grammarAccess.getJvmArgumentTypeReferenceRule()) {\n\t\t\t\t\tsequence_JvmParameterizedTypeReference_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_TYPE_PARAMETER:\n\t\t\t\tif(context == grammarAccess.getJvmTypeParameterRule()) {\n\t\t\t\t\tsequence_JvmTypeParameter_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_UPPER_BOUND:\n\t\t\t\tif(context == grammarAccess.getJvmUpperBoundRule()) {\n\t\t\t\t\tsequence_JvmUpperBound_JvmUpperBound(context, (JvmUpperBound) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse if(context == grammarAccess.getJvmUpperBoundAndedRule()) {\n\t\t\t\t\tsequence_JvmUpperBoundAnded_JvmUpperBound(context, (JvmUpperBound) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:\n\t\t\t\tif(context == grammarAccess.getJvmArgumentTypeReferenceRule() ||\n\t\t\t\t   context == grammarAccess.getJvmWildcardTypeReferenceRule()) {\n\t\t\t\t\tsequence_JvmWildcardTypeReference_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\t}\n\t\telse if(semanticObject.eClass().getEPackage() == XbasePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {\n\t\t\tcase XbasePackage.XBINARY_OPERATION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XAdditiveExpression_XBinaryOperation(context, (XBinaryOperation) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XASSIGNMENT:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XAssignment_XAssignment(context, (XAssignment) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XBLOCK_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXBlockExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XBlockExpression_XBlockExpression(context, (XBlockExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XBOOLEAN_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXBooleanLiteralRule()) {\n\t\t\t\t\tsequence_XBooleanLiteral_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCASE_PART:\n\t\t\t\tif(context == grammarAccess.getXCasePartRule()) {\n\t\t\t\t\tsequence_XCasePart_XCasePart(context, (XCasePart) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCASTED_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XCastedExpression_XCastedExpression(context, (XCastedExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCATCH_CLAUSE:\n\t\t\t\tif(context == grammarAccess.getXCatchClauseRule()) {\n\t\t\t\t\tsequence_XCatchClause_XCatchClause(context, (XCatchClause) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCLOSURE:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXClosureRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XClosure_XClosure(context, (XClosure) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse if(context == grammarAccess.getXShortClosureRule()) {\n\t\t\t\t\tsequence_XShortClosure_XClosure(context, (XClosure) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XCONSTRUCTOR_CALL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXConstructorCallRule()) {\n\t\t\t\t\tsequence_XConstructorCall_XConstructorCall(context, (XConstructorCall) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XDO_WHILE_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXDoWhileExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XDoWhileExpression_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XNULL_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXNullLiteralRule()) {\n\t\t\t\t\tsequence_XExpression_XNullLiteral(context, (XNullLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XFEATURE_CALL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXFeatureCallRule()) {\n\t\t\t\t\tsequence_XFeatureCall_XFeatureCall(context, (XFeatureCall) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XFOR_LOOP_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXForLoopExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XForLoopExpression_XForLoopExpression(context, (XForLoopExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XIF_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXIfExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XIfExpression_XIfExpression(context, (XIfExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XINT_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXIntLiteralRule()) {\n\t\t\t\t\tsequence_XIntLiteral_XIntLiteral(context, (XIntLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XMEMBER_FEATURE_CALL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XMemberFeatureCall_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XINSTANCE_OF_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XRelationalExpression_XInstanceOfExpression(context, (XInstanceOfExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XRETURN_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXReturnExpressionRule()) {\n\t\t\t\t\tsequence_XReturnExpression_XReturnExpression(context, (XReturnExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XSTRING_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXStringLiteralRule()) {\n\t\t\t\t\tsequence_XStringLiteral_XStringLiteral(context, (XStringLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XSWITCH_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXSwitchExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XSwitchExpression_XSwitchExpression(context, (XSwitchExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XTHROW_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXThrowExpressionRule()) {\n\t\t\t\t\tsequence_XThrowExpression_XThrowExpression(context, (XThrowExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXTryCatchFinallyExpressionRule()) {\n\t\t\t\t\tsequence_XTryCatchFinallyExpression_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XTYPE_LITERAL:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXLiteralRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXTypeLiteralRule()) {\n\t\t\t\t\tsequence_XTypeLiteral_XTypeLiteral(context, (XTypeLiteral) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XUNARY_OPERATION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XUnaryOperation_XUnaryOperation(context, (XUnaryOperation) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XVARIABLE_DECLARATION:\n\t\t\t\tif(context == grammarAccess.getXExpressionInsideBlockRule() ||\n\t\t\t\t   context == grammarAccess.getXVariableDeclarationRule()) {\n\t\t\t\t\tsequence_XVariableDeclaration_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\tcase XbasePackage.XWHILE_EXPRESSION:\n\t\t\t\tif(context == grammarAccess.getXExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentRule() ||\n\t\t\t\t   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXUnaryOperationRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallRule() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||\n\t\t\t\t   context == grammarAccess.getXPrimaryExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXParenthesizedExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXWhileExpressionRule() ||\n\t\t\t\t   context == grammarAccess.getXExpressionInsideBlockRule()) {\n\t\t\t\t\tsequence_XWhileExpression_XWhileExpression(context, (XWhileExpression) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\t}\n\t\telse if(semanticObject.eClass().getEPackage() == XtypePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {\n\t\t\tcase XtypePackage.XFUNCTION_TYPE_REF:\n\t\t\t\tif(context == grammarAccess.getJvmTypeReferenceRule() ||\n\t\t\t\t   context == grammarAccess.getXFunctionTypeRefRule() ||\n\t\t\t\t   context == grammarAccess.getJvmArgumentTypeReferenceRule()) {\n\t\t\t\t\tsequence_XFunctionTypeRef_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); \n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\telse break;\n\t\t\t}\n\t\tif (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));\n\t}","commit_id":"269c8dc992459edf60e9122dd708c58ae870f029","url":"https://github.com/eclipse/xtext"},{"original_method":"public String serializeAssignedValue(EObject context, RuleCall ruleCall, Object value, INode node,\n\t\t\tAcceptor errorAcceptor) {\n\t\tif (node != null) {\n\t\t\tObject converted = converter.toValue(serialize(node), ruleCall.getRule().getName(), node);\n\t\t\tif (converted != null && converted.equals(value))\n\t\t\t\treturn tokenUtil.serializeNode(node);\n\t\t}\n\t\treturn converter.toString(value, ruleCall.getRule().getName());\n\t}","id":18017,"modified_method":"public String serializeAssignedValue(EObject context, RuleCall ruleCall, Object value, INode node, Acceptor errors) {\n\t\tif (node != null) {\n\t\t\tObject converted = converter.toValue(serialize(node), ruleCall.getRule().getName(), node);\n\t\t\tif (converted != null && converted.equals(value))\n\t\t\t\treturn tokenUtil.serializeNode(node);\n\t\t}\n\t\ttry {\n\t\t\tString str = converter.toString(value, ruleCall.getRule().getName());\n\t\t\tif (str != null)\n\t\t\t\treturn str;\n\t\t\tif (errors != null)\n\t\t\t\terrors.accept(diagnostics.getNullNotAllowedDiagnostic(context, ruleCall));\n\t\t\treturn null;\n\t\t} catch (Throwable e) {\n\t\t\tif (errors != null)\n\t\t\t\terrors.accept(diagnostics.getValueConversionExceptionDiagnostic(context, ruleCall, value, e));\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"269c8dc992459edf60e9122dd708c58ae870f029","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * Constraint:\n\t *     (\n\t *         (leftOperand=XAdditiveExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAdd] rightOperand=XMultiplicativeExpression) | \n\t *         (leftOperand=XMultiplicativeExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpMulti] rightOperand=XUnaryOperation) | \n\t *         (leftOperand=XOtherOperatorExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOther] rightOperand=XAdditiveExpression) | \n\t *         (leftOperand=XRelationalExpression_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpCompare] rightOperand=XOtherOperatorExpression) | \n\t *         (leftOperand=XEqualityExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=XRelationalExpression) | \n\t *         (leftOperand=XAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAnd] rightOperand=XEqualityExpression) | \n\t *         (leftOperand=XOrExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOr] rightOperand=XAndExpression) | \n\t *         (leftOperand=XAssignment_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpMultiAssign] rightOperand=XAssignment)\n\t *     )\n\t */\n\t@Override\n\tprotected void sequence_XAdditiveExpression_XBinaryOperation(EObject context, XBinaryOperation operation) {\n\t\tINodesForEObjectProvider nodes = createNodeProvider(operation);\n\t\tSequenceAcceptor acceptor = createSequencerAcceptor(operation, nodes);\n\t\tXAdditiveExpressionElements opAdd = grammarAccess.getXAdditiveExpressionAccess();\n\t\tXMultiplicativeExpressionElements opMulti = grammarAccess.getXMultiplicativeExpressionAccess();\n\t\tXOtherOperatorExpressionElements opOther = grammarAccess.getXOtherOperatorExpressionAccess();\n\t\tXRelationalExpressionElements opCompare = grammarAccess.getXRelationalExpressionAccess();\n\t\tXEqualityExpressionElements opEquality = grammarAccess.getXEqualityExpressionAccess();\n\t\tXAndExpressionElements opAnd = grammarAccess.getXAndExpressionAccess();\n\t\tXOrExpressionElements opOr = grammarAccess.getXOrExpressionAccess();\n\t\tXAssignmentElements opMultiAssign = grammarAccess.getXAssignmentAccess();\n\t\t\n\t\tIScope scope = scopeProvider.getScope(operation, XbasePackage.Literals.XABSTRACT_FEATURE_CALL__FEATURE);\n\t\tSet<String> operatorNames = Sets.newHashSet();\n\t\tfor (IEObjectDescription desc : scope.getElements(operation.getFeature()))\n\t\t\toperatorNames.add(qualifiedNameConverter.toString(desc.getName()));\n\t\t\n\t\tif(isValidOperator(operation, opAdd.getFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1(), operatorNames)) {\n\t\t\tacceptor.accept(opAdd.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opAdd.getFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1(), operation.getFeature());\n\t\t\tacceptor.accept(opAdd.getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if(isValidOperator(operation, opMulti.getFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1(), operatorNames)) {\n\t\t\tacceptor.accept(opMulti.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opMulti.getFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1(), operation.getFeature());\n\t\t\tacceptor.accept(opMulti.getRightOperandXUnaryOperationParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if(isValidOperator(operation, opOther.getFeatureJvmIdentifiableElementOpOtherParserRuleCall_1_0_0_1_0_1(), operatorNames)) {\n\t\t\tacceptor.accept(opOther.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opOther.getFeatureJvmIdentifiableElementOpOtherParserRuleCall_1_0_0_1_0_1(), operation.getFeature());\n\t\t\tacceptor.accept(opOther.getRightOperandXAdditiveExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if(isValidOperator(operation, opCompare.getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1(), operatorNames)) {\n\t\t\tacceptor.accept(opCompare.getXBinaryOperationLeftOperandAction_1_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opCompare.getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1(), operation.getFeature());\n\t\t\tacceptor.accept(opCompare.getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0(), operation.getRightOperand());\n\t\t} else if(isValidOperator(operation, opEquality.getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1(), operatorNames)) {\n\t\t\tacceptor.accept(opEquality.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opEquality.getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1(), operation.getFeature());\n\t\t\tacceptor.accept(opEquality.getRightOperandXRelationalExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if(isValidOperator(operation, opAnd.getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1(), operatorNames)) {\n\t\t\tacceptor.accept(opAnd.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opAnd.getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1(), operation.getFeature());\n\t\t\tacceptor.accept(opAnd.getRightOperandXEqualityExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if(isValidOperator(operation, opOr.getFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1(), operatorNames)) {\n\t\t\tacceptor.accept(opOr.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opOr.getFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1(), operation.getFeature());\n\t\t\tacceptor.accept(opOr.getRightOperandXAndExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if(isValidOperator(operation, opMultiAssign.getFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_1_0_0_1_0_1(), operatorNames)) {\n\t\t\tacceptor.accept(opMultiAssign.getXBinaryOperationLeftOperandAction_1_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opMultiAssign.getFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_1_0_0_1_0_1(), operation.getFeature());\n\t\t\tacceptor.accept(opMultiAssign.getRightOperandXAssignmentParserRuleCall_1_1_1_0(), operation.getRightOperand());\n\t\t} else if (errorAcceptor != null) {\n\t\t\terrorAcceptor.accept(new SerializationDiagnostic(operation, context, \"Operator \"+operatorNames+\" is not supported.\"));\n\t\t} \n\t\tacceptor.finish();\n\t}","id":18018,"modified_method":"/**\n\t * Constraint:\n\t *     (\n\t *         (leftOperand=XAdditiveExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAdd] rightOperand=XMultiplicativeExpression) | \n\t *         (leftOperand=XMultiplicativeExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpMulti] rightOperand=XUnaryOperation) | \n\t *         (leftOperand=XOtherOperatorExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOther] rightOperand=XAdditiveExpression) | \n\t *         (leftOperand=XRelationalExpression_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpCompare] rightOperand=XOtherOperatorExpression) | \n\t *         (leftOperand=XEqualityExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=XRelationalExpression) | \n\t *         (leftOperand=XAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAnd] rightOperand=XEqualityExpression) | \n\t *         (leftOperand=XOrExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOr] rightOperand=XAndExpression) | \n\t *         (leftOperand=XAssignment_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpMultiAssign] rightOperand=XAssignment)\n\t *     )\n\t */\n\t@Override\n\tprotected void sequence_XAdditiveExpression_XBinaryOperation(EObject context, XBinaryOperation operation) {\n\t\tINodesForEObjectProvider nodes = createNodeProvider(operation);\n\t\tSequenceAcceptor acceptor = createSequencerAcceptor(operation, nodes);\n\t\tXAdditiveExpressionElements opAdd = grammarAccess.getXAdditiveExpressionAccess();\n\t\tXMultiplicativeExpressionElements opMulti = grammarAccess.getXMultiplicativeExpressionAccess();\n\t\tXOtherOperatorExpressionElements opOther = grammarAccess.getXOtherOperatorExpressionAccess();\n\t\tXRelationalExpressionElements opCompare = grammarAccess.getXRelationalExpressionAccess();\n\t\tXEqualityExpressionElements opEquality = grammarAccess.getXEqualityExpressionAccess();\n\t\tXAndExpressionElements opAnd = grammarAccess.getXAndExpressionAccess();\n\t\tXOrExpressionElements opOr = grammarAccess.getXOrExpressionAccess();\n\t\tXAssignmentElements opMultiAssign = grammarAccess.getXAssignmentAccess();\n\t\t\n\t\tIScope scope = scopeProvider.getScope(operation, XbasePackage.Literals.XABSTRACT_FEATURE_CALL__FEATURE);\n\t\tSet<String> operatorNames = Sets.newHashSet();\n\t\tfor (IEObjectDescription desc : scope.getElements(operation.getFeature()))\n\t\t\toperatorNames.add(qualifiedNameConverter.toString(desc.getName()));\n\t\t\t\t\n\t\tICompositeNode featureNode = (ICompositeNode) nodes.getNodeForSingelValue(XbasePackage.Literals.XABSTRACT_FEATURE_CALL__FEATURE, operation.getFeature());\n\t\tString featureToken;\n\t\t\n\t\tif((featureToken = getValidOperator(operation, opAdd.getFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1(), operatorNames, featureNode)) != null) {\n\t\t\tacceptor.accept(opAdd.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opAdd.getFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1(), operation.getFeature(), featureToken, featureNode);\n\t\t\tacceptor.accept(opAdd.getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if((featureToken = getValidOperator(operation, opMulti.getFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1(), operatorNames, featureNode)) != null) {\n\t\t\tacceptor.accept(opMulti.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opMulti.getFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1(), operation.getFeature(), featureToken, featureNode);\n\t\t\tacceptor.accept(opMulti.getRightOperandXUnaryOperationParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if((featureToken = getValidOperator(operation, opOther.getFeatureJvmIdentifiableElementOpOtherParserRuleCall_1_0_0_1_0_1(), operatorNames, featureNode)) != null) {\n\t\t\tacceptor.accept(opOther.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opOther.getFeatureJvmIdentifiableElementOpOtherParserRuleCall_1_0_0_1_0_1(), operation.getFeature(), featureToken, featureNode);\n\t\t\tacceptor.accept(opOther.getRightOperandXAdditiveExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if((featureToken = getValidOperator(operation, opCompare.getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1(), operatorNames, featureNode)) != null) {\n\t\t\tacceptor.accept(opCompare.getXBinaryOperationLeftOperandAction_1_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opCompare.getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1(), operation.getFeature(), featureToken, featureNode);\n\t\t\tacceptor.accept(opCompare.getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0(), operation.getRightOperand());\n\t\t} else if((featureToken = getValidOperator(operation, opEquality.getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1(), operatorNames, featureNode)) != null) {\n\t\t\tacceptor.accept(opEquality.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opEquality.getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1(), operation.getFeature(), featureToken, featureNode);\n\t\t\tacceptor.accept(opEquality.getRightOperandXRelationalExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if((featureToken = getValidOperator(operation, opAnd.getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1(), operatorNames, featureNode)) != null) {\n\t\t\tacceptor.accept(opAnd.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opAnd.getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1(), operation.getFeature(), featureToken, featureNode);\n\t\t\tacceptor.accept(opAnd.getRightOperandXEqualityExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if((featureToken = getValidOperator(operation, opOr.getFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1(), operatorNames, featureNode)) != null) {\n\t\t\tacceptor.accept(opOr.getXBinaryOperationLeftOperandAction_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opOr.getFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1(), operation.getFeature(), featureToken, featureNode);\n\t\t\tacceptor.accept(opOr.getRightOperandXAndExpressionParserRuleCall_1_1_0(), operation.getRightOperand());\n\t\t} else if((featureToken = getValidOperator(operation, opMultiAssign.getFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_1_0_0_1_0_1(), operatorNames, featureNode)) != null) {\n\t\t\tacceptor.accept(opMultiAssign.getXBinaryOperationLeftOperandAction_1_1_0_0_0(), operation.getLeftOperand());\n\t\t\tacceptor.accept(opMultiAssign.getFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_1_0_0_1_0_1(), operation.getFeature(), featureToken, featureNode);\n\t\t\tacceptor.accept(opMultiAssign.getRightOperandXAssignmentParserRuleCall_1_1_1_0(), operation.getRightOperand());\n\t\t} else if (errorAcceptor != null) {\n\t\t\terrorAcceptor.accept(new SerializationDiagnostic(operation, context, \"Operator \"+operatorNames+\" is not supported.\"));\n\t\t} \n\t\tacceptor.finish();\n\t}","commit_id":"269c8dc992459edf60e9122dd708c58ae870f029","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean isValidOperator(EObject semanticObject, RuleCall ruleCall, Iterable<String> names) {\n\t\tfor (String name : names)\n\t\t\tif (valueSerializer.isValid(semanticObject, ruleCall, name, null))\n\t\t\t\treturn true;\n\t\treturn false;\n\t}","id":18019,"modified_method":"protected String getValidOperator(EObject semanticObject, RuleCall ruleCall, Iterable<String> names, ICompositeNode node) {\n\t\tfor (String name : names)\n\t\t\tif (valueSerializer.isValid(semanticObject, ruleCall, name, null))\n\t\t\t\treturn valueSerializer.serializeAssignedValue(semanticObject, ruleCall, name, node, errorAcceptor);\n\t\treturn null;\n\t}","commit_id":"269c8dc992459edf60e9122dd708c58ae870f029","url":"https://github.com/eclipse/xtext"},{"original_method":"private void refresh() {\n    ModelAccess.assertLegalWrite();\n\n    Set<SModelFqName> old = new HashSet<SModelFqName>(myModels.keySet());\n    for (Language module : MPSModuleRepository.getInstance().getAllLanguages()) {\n      SModelFqName fq = getModelFqName(module);\n      if (myModels.containsKey(fq)) {\n        old.remove(fq);\n        LanguageModelDescriptor languageModelDescriptor = myModels.get(fq);\n        if(languageModelDescriptor != null) {\n          languageModelDescriptor.invalidate();\n        }\n      } else {\n        createModel(module);\n      }\n    }\n\n    for (SModelFqName mm : old) {\n      LanguageModelDescriptor model = myModels.get(mm);\n      if (model != null) {\n        removeModel(model);\n      }\n    }\n  }","id":18020,"modified_method":"private void refresh() {\n    ModelAccess.assertLegalWrite();\n\n    Set<SModelReference> old = new HashSet<SModelReference>(myModels.keySet());\n    for (Language module : MPSModuleRepository.getInstance().getAllLanguages()) {\n      SModelReference ref = getSModelReference(module);\n      if (myModels.containsKey(ref)) {\n        old.remove(ref);\n        LanguageModelDescriptor languageModelDescriptor = myModels.get(ref);\n        if(languageModelDescriptor != null) {\n          languageModelDescriptor.invalidate();\n        }\n      } else {\n        createModel(module);\n      }\n    }\n\n    for (SModelReference mm : old) {\n      LanguageModelDescriptor model = myModels.get(mm);\n      if (model != null) {\n        removeModel(model);\n      }\n    }\n  }","commit_id":"e39d8bb7522a0850b2a90cfe514b434287eec1e1","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void removeModel(SModelDescriptor md) {\n    if (myModels.remove(md.getSModelReference().getSModelFqName()) != null) {\n      SModelRepository.getInstance().removeModelDescriptor(md);\n    }\n  }","id":18021,"modified_method":"private void removeModel(SModelDescriptor md) {\n    if (myModels.remove(md.getSModelReference()) != null) {\n      SModelRepository.getInstance().removeModelDescriptor(md);\n    }\n  }","commit_id":"e39d8bb7522a0850b2a90cfe514b434287eec1e1","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void refreshModule(Language module, boolean isDeleted) {\n    ModelAccess.assertLegalWrite();\n\n    SModelFqName fq = getModelFqName(module);\n    if (isDeleted) {\n      LanguageModelDescriptor descriptor = myModels.get(fq);\n      if (descriptor != null) {\n        removeModel(descriptor);\n      }\n    } else if (!myModels.containsKey(fq)) {\n      createModel(module);\n    } else {\n      LanguageModelDescriptor languageModelDescriptor = myModels.get(fq);\n      if(languageModelDescriptor != null) {\n        languageModelDescriptor.invalidate();\n      }\n    }\n  }","id":18022,"modified_method":"private void refreshModule(Language module, boolean isDeleted) {\n    ModelAccess.assertLegalWrite();\n\n    SModelReference ref = getSModelReference(module);\n    if (isDeleted) {\n      LanguageModelDescriptor descriptor = myModels.get(ref);\n      if (descriptor != null) {\n        removeModel(descriptor);\n      }\n    } else if (!myModels.containsKey(ref)) {\n      createModel(module);\n    } else {\n      LanguageModelDescriptor languageModelDescriptor = myModels.get(ref);\n      if(languageModelDescriptor != null) {\n        languageModelDescriptor.invalidate();\n      }\n    }\n  }","commit_id":"e39d8bb7522a0850b2a90cfe514b434287eec1e1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public LanguageModelDescriptor createModel(Language module) {\n    SModelFqName fqName = getModelFqName(module);\n    ModuleId moduleId = module.getModuleReference().getModuleId();\n    SModelId id = moduleId != null ? SModelId.foreign(\"descriptor\", moduleId.toString()) : SModelId.generate();\n    LanguageModelDescriptor result = new LanguageModelDescriptor(new SModelReference(fqName, id), module);\n\n    myModels.put(result.getSModelReference().getSModelFqName(), result);\n    SModelRepository.getInstance().registerModelDescriptor(result, module);\n    return result;\n  }","id":18023,"modified_method":"public LanguageModelDescriptor createModel(Language module) {\n    LanguageModelDescriptor result = new LanguageModelDescriptor(getSModelReference(module), module);\n\n    myModels.put(result.getSModelReference(), result);\n    SModelRepository.getInstance().registerModelDescriptor(result, module);\n    return result;\n  }","commit_id":"e39d8bb7522a0850b2a90cfe514b434287eec1e1","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void removeModel(SModelDescriptor md) {\n    if (myModels.remove(md.getSModelReference().getSModelFqName()) != null) {\n      SModelRepository.getInstance().removeModelDescriptor(md);\n      if (md instanceof ProjectStructureSModelDescriptor) {\n        ((ProjectStructureSModelDescriptor) md).dropModel();\n      }\n    }\n  }","id":18024,"modified_method":"private void removeModel(SModelDescriptor md) {\n    if (myModels.remove(md.getSModelReference()) != null) {\n      SModelRepository.getInstance().removeModelDescriptor(md);\n      if (md instanceof ProjectStructureSModelDescriptor) {\n        ((ProjectStructureSModelDescriptor) md).dropModel();\n      }\n    }\n  }","commit_id":"a149de51d5b2d5d252a68ca44767754de5fa19be","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void refresh() {\n    ModelAccess.assertLegalWrite();\n\n    Set<SModelFqName> old = new HashSet<SModelFqName>(myModels.keySet());\n    for (IModule module : MPSModuleRepository.getInstance().getAllModules()) {\n      if(!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {\n        continue;\n      }\n\n      SModelFqName fq = getModelFqName(module);\n      if (myModels.containsKey(fq)) {\n        old.remove(fq);\n        ProjectStructureSModelDescriptor descriptor = myModels.get(fq);\n        descriptor.dropModel();\n      } else {\n        createModel(module);\n      }\n    }\n\n    for (SModelFqName mm : old) {\n      ProjectStructureSModelDescriptor model = myModels.get(mm);\n      if (model != null) {\n        removeModel(model);\n      }\n    }\n  }","id":18025,"modified_method":"private void refresh() {\n    ModelAccess.assertLegalWrite();\n\n    Set<SModelReference> old = new HashSet<SModelReference>(myModels.keySet());\n    for (IModule module : MPSModuleRepository.getInstance().getAllModules()) {\n      if(!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {\n        continue;\n      }\n\n      SModelReference ref = getSModelReference(module);\n      if (myModels.containsKey(ref)) {\n        old.remove(ref);\n        ProjectStructureSModelDescriptor descriptor = myModels.get(ref);\n        descriptor.dropModel();\n      } else {\n        createModel(module);\n      }\n    }\n\n    for (SModelReference mm : old) {\n      ProjectStructureSModelDescriptor model = myModels.get(mm);\n      if (model != null) {\n        removeModel(model);\n      }\n    }\n  }","commit_id":"a149de51d5b2d5d252a68ca44767754de5fa19be","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModel getModelByModule(IModule module) {\n    ModelAccess.assertLegalRead();\n\n    if(module == null) return null;\n    SModelFqName fq = getModelFqName(module);\n\n    ProjectStructureSModelDescriptor descriptor = myModels.get(fq);\n    return descriptor == null ? null : descriptor.getSModel();\n  }","id":18026,"modified_method":"public SModel getModelByModule(IModule module) {\n    ModelAccess.assertLegalRead();\n\n    if(module == null) return null;\n    SModelReference ref = getSModelReference(module);\n\n    ProjectStructureSModelDescriptor descriptor = myModels.get(ref);\n    return descriptor == null ? null : descriptor.getSModel();\n  }","commit_id":"a149de51d5b2d5d252a68ca44767754de5fa19be","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void refreshModule(IModule module, boolean isDeleted) {\n    ModelAccess.assertLegalWrite();\n\n    if(!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {\n      return;\n    }\n\n    SModelFqName fq = getModelFqName(module);\n    if (isDeleted) {\n      ProjectStructureSModelDescriptor descriptor = myModels.get(fq);\n      if (descriptor != null) {\n        removeModel(descriptor);\n      }\n    } else if (myModels.containsKey(fq)) {\n      ProjectStructureSModelDescriptor descriptor = myModels.get(fq);\n      descriptor.dropModel();\n    } else {\n      createModel(module);\n    }\n  }","id":18027,"modified_method":"private void refreshModule(IModule module, boolean isDeleted) {\n    ModelAccess.assertLegalWrite();\n\n    if(!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {\n      return;\n    }\n\n    SModelReference ref = getSModelReference(module);\n    if (isDeleted) {\n      ProjectStructureSModelDescriptor descriptor = myModels.get(ref);\n      if (descriptor != null) {\n        removeModel(descriptor);\n      }\n    } else if (myModels.containsKey(ref)) {\n      ProjectStructureSModelDescriptor descriptor = myModels.get(ref);\n      descriptor.dropModel();\n    } else {\n      createModel(module);\n    }\n  }","commit_id":"a149de51d5b2d5d252a68ca44767754de5fa19be","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ProjectStructureSModelDescriptor createModel(IModule module) {\n    SModelFqName fqName = getModelFqName(module);\n    ModuleId moduleId = module.getModuleReference().getModuleId();\n    SModelId id = moduleId != null ? SModelId.foreign(\"project\", moduleId.toString()) : SModelId.generate();\n    ProjectStructureSModelDescriptor result = new ProjectStructureSModelDescriptor(new SModelReference(fqName, id), module);\n\n    myModels.put(result.getSModelReference().getSModelFqName(), result);\n    SModelRepository.getInstance().registerModelDescriptor(result, this);\n    invalidateCaches();\n    return result;\n  }","id":18028,"modified_method":"public ProjectStructureSModelDescriptor createModel(IModule module) {\n    ProjectStructureSModelDescriptor result = new ProjectStructureSModelDescriptor(getSModelReference(module), module);\n    myModels.put(result.getSModelReference(), result);\n    SModelRepository.getInstance().registerModelDescriptor(result, this);\n    invalidateCaches();\n    return result;\n  }","commit_id":"a149de51d5b2d5d252a68ca44767754de5fa19be","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public SModelDescriptor resolveModel(SModelReference reference) {\n      return myModels.get(reference.getSModelFqName());\n    }","id":18029,"modified_method":"@Override\n    public SModelDescriptor resolveModel(SModelReference reference) {\n      return myModels.get(reference);\n    }","commit_id":"a149de51d5b2d5d252a68ca44767754de5fa19be","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ProjectStructureSModelDescriptor createModel(IModule module) {\n    SModelFqName fqName = getModelFqName(module);\n    ModuleId moduleId = module.getModuleReference().getModuleId();\n    SModelId id = moduleId != null ? SModelId.foreign(\"project\", moduleId.toString()) : SModelId.generate();\n    ProjectStructureSModelDescriptor result = new ProjectStructureSModelDescriptor(new SModelReference(fqName, id), module);\n\n    myModels.put(result.getSModelReference().getSModelFqName(), result);\n    SModelRepository.getInstance().registerModelDescriptor(result, this);\n    invalidateCaches();\n    return result;\n  }","id":18030,"modified_method":"public ProjectStructureSModelDescriptor createModel(IModule module) {\n    ProjectStructureSModelDescriptor result = new ProjectStructureSModelDescriptor(getSModelReference(module), module);\n    myModels.put(result.getSModelReference(), result);\n    SModelRepository.getInstance().registerModelDescriptor(result, this);\n    invalidateCaches();\n    return result;\n  }","commit_id":"4d81bd0b336165d42eb017005a913ed3847e1133","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModel getModelByModule(IModule module) {\n    ModelAccess.assertLegalRead();\n\n    if(module == null) return null;\n    SModelFqName fq = getModelFqName(module);\n\n    ProjectStructureSModelDescriptor descriptor = myModels.get(fq);\n    return descriptor == null ? null : descriptor.getSModel();\n  }","id":18031,"modified_method":"public SModel getModelByModule(IModule module) {\n    ModelAccess.assertLegalRead();\n\n    if(module == null) return null;\n    SModelReference ref = getSModelReference(module);\n\n    ProjectStructureSModelDescriptor descriptor = myModels.get(ref);\n    return descriptor == null ? null : descriptor.getSModel();\n  }","commit_id":"4d81bd0b336165d42eb017005a913ed3847e1133","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void removeModel(SModelDescriptor md) {\n    if (myModels.remove(md.getSModelReference().getSModelFqName()) != null) {\n      SModelRepository.getInstance().removeModelDescriptor(md);\n      if (md instanceof ProjectStructureSModelDescriptor) {\n        ((ProjectStructureSModelDescriptor) md).dropModel();\n      }\n    }\n  }","id":18032,"modified_method":"private void removeModel(SModelDescriptor md) {\n    if (myModels.remove(md.getSModelReference()) != null) {\n      SModelRepository.getInstance().removeModelDescriptor(md);\n      if (md instanceof ProjectStructureSModelDescriptor) {\n        ((ProjectStructureSModelDescriptor) md).dropModel();\n      }\n    }\n  }","commit_id":"4d81bd0b336165d42eb017005a913ed3847e1133","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public SModelDescriptor resolveModel(SModelReference reference) {\n      return myModels.get(reference.getSModelFqName());\n    }","id":18033,"modified_method":"@Override\n    public SModelDescriptor resolveModel(SModelReference reference) {\n      return myModels.get(reference);\n    }","commit_id":"4d81bd0b336165d42eb017005a913ed3847e1133","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void refreshModule(IModule module, boolean isDeleted) {\n    ModelAccess.assertLegalWrite();\n\n    if(!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {\n      return;\n    }\n\n    SModelFqName fq = getModelFqName(module);\n    if (isDeleted) {\n      ProjectStructureSModelDescriptor descriptor = myModels.get(fq);\n      if (descriptor != null) {\n        removeModel(descriptor);\n      }\n    } else if (myModels.containsKey(fq)) {\n      ProjectStructureSModelDescriptor descriptor = myModels.get(fq);\n      descriptor.dropModel();\n    } else {\n      createModel(module);\n    }\n  }","id":18034,"modified_method":"private void refreshModule(IModule module, boolean isDeleted) {\n    ModelAccess.assertLegalWrite();\n\n    if(!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {\n      return;\n    }\n\n    SModelReference ref = getSModelReference(module);\n    if (isDeleted) {\n      ProjectStructureSModelDescriptor descriptor = myModels.get(ref);\n      if (descriptor != null) {\n        removeModel(descriptor);\n      }\n    } else if (myModels.containsKey(ref)) {\n      ProjectStructureSModelDescriptor descriptor = myModels.get(ref);\n      descriptor.dropModel();\n    } else {\n      createModel(module);\n    }\n  }","commit_id":"4d81bd0b336165d42eb017005a913ed3847e1133","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void refresh() {\n    ModelAccess.assertLegalWrite();\n\n    Set<SModelFqName> old = new HashSet<SModelFqName>(myModels.keySet());\n    for (IModule module : MPSModuleRepository.getInstance().getAllModules()) {\n      if(!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {\n        continue;\n      }\n\n      SModelFqName fq = getModelFqName(module);\n      if (myModels.containsKey(fq)) {\n        old.remove(fq);\n        ProjectStructureSModelDescriptor descriptor = myModels.get(fq);\n        descriptor.dropModel();\n      } else {\n        createModel(module);\n      }\n    }\n\n    for (SModelFqName mm : old) {\n      ProjectStructureSModelDescriptor model = myModels.get(mm);\n      if (model != null) {\n        removeModel(model);\n      }\n    }\n  }","id":18035,"modified_method":"private void refresh() {\n    ModelAccess.assertLegalWrite();\n\n    Set<SModelReference> old = new HashSet<SModelReference>(myModels.keySet());\n    for (IModule module : MPSModuleRepository.getInstance().getAllModules()) {\n      if(!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {\n        continue;\n      }\n\n      SModelReference ref = getSModelReference(module);\n      if (myModels.containsKey(ref)) {\n        old.remove(ref);\n        ProjectStructureSModelDescriptor descriptor = myModels.get(ref);\n        descriptor.dropModel();\n      } else {\n        createModel(module);\n      }\n    }\n\n    for (SModelReference mm : old) {\n      ProjectStructureSModelDescriptor model = myModels.get(mm);\n      if (model != null) {\n        removeModel(model);\n      }\n    }\n  }","commit_id":"4d81bd0b336165d42eb017005a913ed3847e1133","url":"https://github.com/JetBrains/MPS"},{"original_method":"public LanguageModelDescriptor createModel(Language module) {\n    SModelFqName fqName = getModelFqName(module);\n    ModuleId moduleId = module.getModuleReference().getModuleId();\n    SModelId id = moduleId != null ? SModelId.foreign(\"descriptor\", moduleId.toString()) : SModelId.generate();\n    LanguageModelDescriptor result = new LanguageModelDescriptor(new SModelReference(fqName, id), module);\n\n    myModels.put(result.getSModelReference().getSModelFqName(), result);\n    SModelRepository.getInstance().registerModelDescriptor(result, module);\n    return result;\n  }","id":18036,"modified_method":"public LanguageModelDescriptor createModel(Language module) {\n    LanguageModelDescriptor result = new LanguageModelDescriptor(getSModelReference(module), module);\n\n    myModels.put(result.getSModelReference(), result);\n    SModelRepository.getInstance().registerModelDescriptor(result, module);\n    return result;\n  }","commit_id":"aa2e89844e2713d248b0a9021160532c0c8de7b9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void refresh() {\n    ModelAccess.assertLegalWrite();\n\n    Set<SModelFqName> old = new HashSet<SModelFqName>(myModels.keySet());\n    for (Language module : MPSModuleRepository.getInstance().getAllLanguages()) {\n      SModelFqName fq = getModelFqName(module);\n      if (myModels.containsKey(fq)) {\n        old.remove(fq);\n        LanguageModelDescriptor languageModelDescriptor = myModels.get(fq);\n        if(languageModelDescriptor != null) {\n          languageModelDescriptor.invalidate();\n        }\n      } else {\n        createModel(module);\n      }\n    }\n\n    for (SModelFqName mm : old) {\n      LanguageModelDescriptor model = myModels.get(mm);\n      if (model != null) {\n        removeModel(model);\n      }\n    }\n  }","id":18037,"modified_method":"private void refresh() {\n    ModelAccess.assertLegalWrite();\n\n    Set<SModelReference> old = new HashSet<SModelReference>(myModels.keySet());\n    for (Language module : MPSModuleRepository.getInstance().getAllLanguages()) {\n      SModelReference ref = getSModelReference(module);\n      if (myModels.containsKey(ref)) {\n        old.remove(ref);\n        LanguageModelDescriptor languageModelDescriptor = myModels.get(ref);\n        if(languageModelDescriptor != null) {\n          languageModelDescriptor.invalidate();\n        }\n      } else {\n        createModel(module);\n      }\n    }\n\n    for (SModelReference mm : old) {\n      LanguageModelDescriptor model = myModels.get(mm);\n      if (model != null) {\n        removeModel(model);\n      }\n    }\n  }","commit_id":"aa2e89844e2713d248b0a9021160532c0c8de7b9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void refreshModule(Language module, boolean isDeleted) {\n    ModelAccess.assertLegalWrite();\n\n    SModelFqName fq = getModelFqName(module);\n    if (isDeleted) {\n      LanguageModelDescriptor descriptor = myModels.get(fq);\n      if (descriptor != null) {\n        removeModel(descriptor);\n      }\n    } else if (!myModels.containsKey(fq)) {\n      createModel(module);\n    } else {\n      LanguageModelDescriptor languageModelDescriptor = myModels.get(fq);\n      if(languageModelDescriptor != null) {\n        languageModelDescriptor.invalidate();\n      }\n    }\n  }","id":18038,"modified_method":"private void refreshModule(Language module, boolean isDeleted) {\n    ModelAccess.assertLegalWrite();\n\n    SModelReference ref = getSModelReference(module);\n    if (isDeleted) {\n      LanguageModelDescriptor descriptor = myModels.get(ref);\n      if (descriptor != null) {\n        removeModel(descriptor);\n      }\n    } else if (!myModels.containsKey(ref)) {\n      createModel(module);\n    } else {\n      LanguageModelDescriptor languageModelDescriptor = myModels.get(ref);\n      if(languageModelDescriptor != null) {\n        languageModelDescriptor.invalidate();\n      }\n    }\n  }","commit_id":"aa2e89844e2713d248b0a9021160532c0c8de7b9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void removeModel(SModelDescriptor md) {\n    if (myModels.remove(md.getSModelReference().getSModelFqName()) != null) {\n      SModelRepository.getInstance().removeModelDescriptor(md);\n    }\n  }","id":18039,"modified_method":"private void removeModel(SModelDescriptor md) {\n    if (myModels.remove(md.getSModelReference()) != null) {\n      SModelRepository.getInstance().removeModelDescriptor(md);\n    }\n  }","commit_id":"aa2e89844e2713d248b0a9021160532c0c8de7b9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void applyLimitOffsetOrderBy(final MultivaluedMap<String,String> p, final CriteriaBuilder builder, final Integer defaultLimit) {\n\n\t\tfinal MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n\t\tparams.putAll(p);\n\n\t\tbuilder.distinct();\n\t\tbuilder.limit(defaultLimit);\n\n\t\tif (params.containsKey(\"limit\")) {\n\t\t\tbuilder.limit(Integer.valueOf(params.getFirst(\"limit\")));\n\t\t\tparams.remove(\"limit\");\n\t\t}\n\n\t\tif (params.containsKey(\"offset\")) {\n\t\t\tbuilder.offset(Integer.valueOf(params.getFirst(\"offset\")));\n\t\t\tparams.remove(\"offset\");\n\t\t}\n\n\t\tif(params.containsKey(\"orderBy\")) {\n\t\t\tbuilder.orderBy(params.getFirst(\"orderBy\"));\n\t\t\tparams.remove(\"orderBy\");\n\n\t\t\tif(params.containsKey(\"order\")) {\n\t\t\t\tif(\"desc\".equalsIgnoreCase(params.getFirst(\"order\"))) {\n\t\t\t\t\tbuilder.desc();\n\t\t\t\t} else {\n\t\t\t\t\tbuilder.asc();\n\t\t\t\t}\n\t\t\t\tparams.remove(\"order\");\n\t\t\t}\n\t\t}\n\t}","id":18040,"modified_method":"private static void applyLimitOffsetOrderBy(final MultivaluedMap<String,String> p, final CriteriaBuilder builder, final Integer defaultLimit) {\n\n\t\tfinal MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n\t\tparams.putAll(p);\n\n\t\tbuilder.distinct();\n\t\tbuilder.limit(defaultLimit);\n\n\t\tif (params.containsKey(\"limit\") && params.getFirst(\"limit\") != null && !\"\".equals(params.getFirst(\"limit\").trim())) {\n\t\t\tbuilder.limit(Integer.valueOf(params.getFirst(\"limit\").trim()));\n\t\t\tparams.remove(\"limit\");\n\t\t}\n\n\t\tif (params.containsKey(\"offset\") && params.getFirst(\"offset\") != null && !\"\".equals(params.getFirst(\"offset\").trim())) {\n\t\t\tbuilder.offset(Integer.valueOf(params.getFirst(\"offset\").trim()));\n\t\t\tparams.remove(\"offset\");\n\t\t}\n\n\t\tif (params.containsKey(\"orderBy\") && params.getFirst(\"orderBy\") != null && !\"\".equals(params.getFirst(\"orderBy\").trim())) {\n\t\t\tbuilder.orderBy(params.getFirst(\"orderBy\").trim());\n\t\t\tparams.remove(\"orderBy\");\n\n\t\t\tif (params.containsKey(\"order\") && params.getFirst(\"order\") != null && !\"\".equals(params.getFirst(\"order\").trim())) {\n\t\t\t\tif(\"desc\".equalsIgnoreCase(params.getFirst(\"order\").trim())) {\n\t\t\t\t\tbuilder.desc();\n\t\t\t\t} else {\n\t\t\t\t\tbuilder.asc();\n\t\t\t\t}\n\t\t\t\tparams.remove(\"order\");\n\t\t\t}\n\t\t}\n\t}","commit_id":"b5bbb540b44cbb901cd8ddf9de64ad3312492053","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected Criteria getCriteria(UriInfo uriInfo, SearchContext searchContext) {\n\t\tfinal MultivaluedMap<String, String> params = uriInfo.getQueryParameters();\n\n\t\tfinal CriteriaBuilder builder = getCriteriaBuilder();\n\n\t\tif (searchContext != null) {\n\t\t\tSearchCondition<T> condition = searchContext.getCondition(getDaoClass());\n\t\t\tif (condition != null) {\n\t\t\t\tSearchConditionVisitor<T,CriteriaBuilder> visitor = new CriteriaBuilderSearchVisitor<T>(builder, getDaoClass());\n\t\t\t\tcondition.accept(visitor);\n\t\t\t}\n\t\t}\n\n\t\t// Apply limit, offset, orderBy, order params\n\t\tapplyLimitOffsetOrderBy(params, builder);\n\n\t\tCriteria crit = builder.toCriteria();\n\n\t\t/*\n\t\tTODO: Figure out how to do stuff like this\n\n\t\t// Don't include deleted nodes by default\n\t\tfinal String type = params.getFirst(\"type\");\n\t\tif (type == null) {\n\t\t\tfinal List<Restriction> restrictions = new ArrayList<Restriction>(crit.getRestrictions());\n\t\t\trestrictions.add(Restrictions.ne(\"type\", \"D\"));\n\t\t\tcrit.setRestrictions(restrictions);\n\t\t}\n\t\t */\n\t\t\n\t\treturn crit;\n\t}","id":18041,"modified_method":"protected Criteria getCriteria(UriInfo uriInfo, SearchContext searchContext) {\n\t\tfinal MultivaluedMap<String, String> params = uriInfo.getQueryParameters();\n\n\t\tfinal CriteriaBuilder builder = getCriteriaBuilder();\n\n\t\tif (searchContext != null) {\n\t\t\ttry {\n\t\t\t\tSearchCondition<T> condition = searchContext.getCondition(getDaoClass());\n\t\t\t\tif (condition != null) {\n\t\t\t\t\tSearchConditionVisitor<T,CriteriaBuilder> visitor = new CriteriaBuilderSearchVisitor<T>(builder, getDaoClass());\n\t\t\t\t\tcondition.accept(visitor);\n\t\t\t\t}\n\t\t\t} catch (ArrayIndexOutOfBoundsException e) {\n\t\t\t\tLOG.warn(\"Error while parsing FIQL search: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\t// Apply limit, offset, orderBy, order params\n\t\tapplyLimitOffsetOrderBy(params, builder);\n\n\t\tCriteria crit = builder.toCriteria();\n\n\t\t/*\n\t\tTODO: Figure out how to do stuff like this\n\n\t\t// Don't include deleted nodes by default\n\t\tfinal String type = params.getFirst(\"type\");\n\t\tif (type == null) {\n\t\t\tfinal List<Restriction> restrictions = new ArrayList<Restriction>(crit.getRestrictions());\n\t\t\trestrictions.add(Restrictions.ne(\"type\", \"D\"));\n\t\t\tcrit.setRestrictions(restrictions);\n\t\t}\n\t\t */\n\t\t\n\t\treturn crit;\n\t}","commit_id":"b5bbb540b44cbb901cd8ddf9de64ad3312492053","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Return a Map for the option <code>optionName<\/code> defined in a project with the given\n     * <code>artifactId<\/code> plugin.\n     * <br/>\n     * Example:\n     * <table>\n     *   <tr>\n     *     <td>Configuration<\/td>\n     *     <td>Result<\/td>\n     *   <\/tr>\n     *   <tr>\n     *     <td><pre>&lt;option&gt;value&lt;/option&gt;<\/pre><\/td>\n     *     <td><pre>{option=value}<\/pre><\/td>\n     *   <\/tr>\n     *   <tr>\n     *     <td><pre>\n     * &lt;option&gt;\n     *  &lt;param1&gt;value1&lt;/param1&gt;\n     *  &lt;param2&gt;value2&lt;/param2&gt;\n     * &lt;/option&gt;\n     * <\/pre><\/td>\n     *     <td><pre>{option={param1=value1, param2=value2}}<pre><\/td>\n     *   <\/tr>\n     *   <tr>\n     *     <td><pre>\n     * &lt;options&gt;\n     *   &lt;option&gt;\n     *    &lt;param1&gt;value1&lt;/param1&gt;\n     *    &lt;param2&gt;value2&lt;/param2&gt;\n     *   &lt;/option&gt;\n     *   &lt;option&gt;\n     *    &lt;param1&gt;value1&lt;/param1&gt;\n     *    &lt;param2&gt;value2&lt;/param2&gt;\n     *   &lt;/option&gt;\n     * &lt;/options&gt;\n     * <\/pre><\/td>\n     *     <td><pre>{options=[{option=[{param1=value1, param2=value2}]}, {option=[{param1=value1, param2=value2}]}]<pre><\/td>\n     *   <\/tr>\n     * <\/table>\n     *\n     * @param project not null\n     * @param pluginArtifactId not null\n     * @param optionName an <code>Xpath<\/code> expression from the plugin <code>&lt;configuration/&gt;<\/code>\n     * @param defaultValue could be null\n     * @return a map with the options found\n     * @throws IOException if any\n     */\n    private static Map getMavenPluginConfigurationsImpl( MavenProject project, String pluginArtifactId,\n                                                        String optionName, String defaultValue )\n        throws IOException\n    {\n        List plugins = new ArrayList();\n        for ( Iterator it = project.getModel().getReporting().getPlugins().iterator(); it.hasNext(); )\n        {\n            plugins.add( it.next() );\n        }\n        for ( Iterator it = project.getModel().getBuild().getPlugins().iterator(); it.hasNext(); )\n        {\n            plugins.add( it.next() );\n        }\n\n        for ( Iterator it = plugins.iterator(); it.hasNext(); )\n        {\n            Object next = it.next();\n\n            Xpp3Dom pluginConf = null;\n\n            if ( next instanceof Plugin )\n            {\n                Plugin plugin = (Plugin) next;\n\n                // using out-of-box Maven plugins\n                if ( !( ( plugin.getGroupId().equals( \"org.apache.maven.plugins\" ) ) && ( plugin.getArtifactId()\n                    .equals( pluginArtifactId ) ) ) )\n                {\n                    continue;\n                }\n\n                pluginConf = (Xpp3Dom) plugin.getConfiguration();\n            }\n\n            if ( next instanceof ReportPlugin )\n            {\n                ReportPlugin reportPlugin = (ReportPlugin) next;\n\n                // using out-of-box Maven plugins\n                if ( !( ( reportPlugin.getGroupId().equals( \"org.apache.maven.plugins\" ) ) && ( reportPlugin\n                    .getArtifactId().equals( pluginArtifactId ) ) ) )\n                {\n                    continue;\n                }\n\n                pluginConf = (Xpp3Dom) reportPlugin.getConfiguration();\n            }\n\n            if ( pluginConf == null )\n            {\n                continue;\n            }\n\n            try\n            {\n                Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()\n                    .parse( new ByteArrayInputStream( pluginConf.toString().getBytes( \"UTF-8\" ) ) );\n\n                XObject obj = XPathAPI.eval( doc, \"//configuration/\" + optionName );\n\n                NodeList nodeList = obj.nodelist();\n                if ( nodeList.getLength() > 0 && isList( nodeList.item( 0 ) ) )\n                {\n                    /*\n                     * <optionNames>\n                     *   <optionName>\n                     *    <param1>value1<\/param1>\n                     *    <param2>value2<\/param2>\n                     *   <\/optionName>\n                     * <\/optionNames>\n                     */\n                    Map options = new HashMap();\n\n                    List optionNames = new ArrayList();\n                    NodeList childs = nodeList.item( 0 ).getChildNodes();\n                    for ( int i = 0; i < childs.getLength(); i++ )\n                    {\n                        if ( childs.item( i ).getNodeType() == Node.ELEMENT_NODE )\n                        {\n                            Map option = new HashMap();\n\n                            obj = XPathAPI.eval( doc, \"//configuration/\" + childs.item( i ).getNodeName() );\n\n                            if ( StringUtils.isNotEmpty( obj.toString() ) )\n                            {\n                                Map properties = new HashMap();\n                                NodeList childs2 = childs.item( i ).getChildNodes();\n                                if ( childs2.getLength() > 0 )\n                                {\n                                    for ( int j = 0; j < childs2.getLength(); j++ )\n                                    {\n                                        if ( childs2.item( j ).getNodeType() == Node.ELEMENT_NODE )\n                                        {\n                                            properties.put( childs2.item( j ).getNodeName(), childs2.item( j )\n                                                .getFirstChild().getNodeValue() );\n                                        }\n                                    }\n                                    option.put( childs.item( i ).getNodeName(), properties );\n                                }\n                            }\n                            else\n                            {\n                                option.put( childs.item( i ).getNodeName(), childs.item( i ).getFirstChild()\n                                    .getNodeValue() );\n                            }\n\n                            optionNames.add( option );\n                        }\n                    }\n\n                    options.put( optionName, optionNames.toArray( new Map[0] ) );\n\n                    return options;\n                }\n\n                /*\n                 * <optionName>\n                 *  <param1>value1<\/param1>\n                 *  <param2>value2<\/param2>\n                 * <\/optionName>\n                 */\n                if ( StringUtils.isNotEmpty( obj.toString() ) )\n                {\n                    Map option = new HashMap();\n\n                    NodeList childs = nodeList.item( 0 ).getChildNodes();\n                    if ( childs.getLength() > 1 )\n                    {\n                        Map parameters = new HashMap();\n\n                        for ( int i = 0; i < childs.getLength(); i++ )\n                        {\n                            if ( childs.item( i ).getNodeType() == Node.ELEMENT_NODE )\n                            {\n                                parameters.put( childs.item( i ).getNodeName(), childs.item( i ).getFirstChild()\n                                    .getNodeValue() );\n                            }\n                        }\n\n                        option.put( optionName, parameters );\n                    }\n                    else\n                    {\n                        /*\n                         * <optionName>value1<\/optionName>\n                         */\n                        option.put( optionName, obj.toString() );\n                    }\n\n                    return option;\n                }\n            }\n            catch ( Exception e )\n            {\n                throw new IOException( \"Exception occured: \" + e.getMessage() );\n            }\n        }\n\n        Map properties = new HashMap();\n        properties.put( optionName, defaultValue );\n\n        return properties;\n    }","id":18042,"modified_method":"/**\n     * Return a Map for the option <code>optionName<\/code> defined in a project with the given\n     * <code>artifactId<\/code> plugin.\n     * <br/>\n     * Example:\n     * <table>\n     *   <tr>\n     *     <td>Configuration<\/td>\n     *     <td>Result<\/td>\n     *   <\/tr>\n     *   <tr>\n     *     <td><pre>&lt;option&gt;value&lt;/option&gt;<\/pre><\/td>\n     *     <td><pre>{option=value}<\/pre><\/td>\n     *   <\/tr>\n     *   <tr>\n     *     <td><pre>\n     * &lt;option&gt;\n     *  &lt;param1&gt;value1&lt;/param1&gt;\n     *  &lt;param2&gt;value2&lt;/param2&gt;\n     * &lt;/option&gt;\n     * <\/pre><\/td>\n     *     <td><pre>{option={param1=value1, param2=value2}}<pre><\/td>\n     *   <\/tr>\n     *   <tr>\n     *     <td><pre>\n     * &lt;options&gt;\n     *   &lt;option&gt;\n     *    &lt;param1&gt;value1&lt;/param1&gt;\n     *    &lt;param2&gt;value2&lt;/param2&gt;\n     *   &lt;/option&gt;\n     *   &lt;option&gt;\n     *    &lt;param1&gt;value1&lt;/param1&gt;\n     *    &lt;param2&gt;value2&lt;/param2&gt;\n     *   &lt;/option&gt;\n     * &lt;/options&gt;\n     * <\/pre><\/td>\n     *     <td><pre>{options=[{option=[{param1=value1, param2=value2}]}, {option=[{param1=value1, param2=value2}]}]<pre><\/td>\n     *   <\/tr>\n     * <\/table>\n     *\n     * @param project not null\n     * @param pluginArtifactId not null\n     * @param optionName an <code>Xpath<\/code> expression from the plugin <code>&lt;configuration/&gt;<\/code>\n     * @param defaultValue could be null\n     * @return a map with the options found\n     * @throws IOException if any\n     */\n    private static Map getMavenPluginConfigurationsImpl( MavenProject project, String pluginArtifactId,\n                                                        String optionName, String defaultValue )\n        throws IOException\n    {\n        List plugins = new ArrayList();\n        for ( Iterator it = project.getModel().getReporting().getPlugins().iterator(); it.hasNext(); )\n        {\n            plugins.add( it.next() );\n        }\n        for ( Iterator it = project.getModel().getBuild().getPlugins().iterator(); it.hasNext(); )\n        {\n            plugins.add( it.next() );\n        }\n\n        for ( Iterator it = plugins.iterator(); it.hasNext(); )\n        {\n            Object next = it.next();\n\n            Xpp3Dom pluginConf = null;\n\n            if ( next instanceof Plugin )\n            {\n                Plugin plugin = (Plugin) next;\n\n                // using out-of-box Maven plugins\n                if ( !( ( plugin.getGroupId().equals( \"org.apache.maven.plugins\" ) ) && ( plugin.getArtifactId()\n                    .equals( pluginArtifactId ) ) ) )\n                {\n                    continue;\n                }\n\n                pluginConf = (Xpp3Dom) plugin.getConfiguration();\n            }\n\n            if ( next instanceof ReportPlugin )\n            {\n                ReportPlugin reportPlugin = (ReportPlugin) next;\n\n                // using out-of-box Maven plugins\n                if ( !( ( reportPlugin.getGroupId().equals( \"org.apache.maven.plugins\" ) ) && ( reportPlugin\n                    .getArtifactId().equals( pluginArtifactId ) ) ) )\n                {\n                    continue;\n                }\n\n                pluginConf = (Xpp3Dom) reportPlugin.getConfiguration();\n            }\n\n            if ( pluginConf == null )\n            {\n                continue;\n            }\n\n            try\n            {\n                Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()\n                    .parse( new ByteArrayInputStream( pluginConf.toString().getBytes( \"UTF-8\" ) ) );\n\n                NodeList nodeList = XPathAPI.eval( doc, \"//configuration/\" + optionName ).nodelist();\n                if ( nodeList.getLength() > 0 )\n                {\n                    Node optionNode = nodeList.item( 0 );\n\n                    if ( isList( optionNode ) )\n                    {\n                        /*\n                         * <optionNames>\n                         *   <optionName>\n                         *    <param1>value1<\/param1>\n                         *    <param2>value2<\/param2>\n                         *   <\/optionName>\n                         * <\/optionNames>\n                         */\n                        Map options = new HashMap();\n\n                        List optionNames = new ArrayList();\n                        NodeList childs = optionNode.getChildNodes();\n                        for ( int i = 0; i < childs.getLength(); i++ )\n                        {\n                            Node child = childs.item( i );\n                            if ( child.getNodeType() == Node.ELEMENT_NODE )\n                            {\n                                Map option = new HashMap();\n\n                                if ( isElementContent( child ) )\n                                {\n                                    Map properties = new HashMap();\n                                    NodeList childs2 = child.getChildNodes();\n                                    if ( childs2.getLength() > 0 )\n                                    {\n                                        for ( int j = 0; j < childs2.getLength(); j++ )\n                                        {\n                                            Node child2 = childs2.item( j );\n                                            if ( child2.getNodeType() == Node.ELEMENT_NODE )\n                                            {\n                                                properties.put( child2.getNodeName(), getTextContent( child2 ) );\n                                            }\n                                        }\n                                        option.put( child.getNodeName(), properties );\n                                    }\n                                }\n                                else\n                                {\n                                    option.put( child.getNodeName(), getTextContent( child ) );\n                                }\n\n                                optionNames.add( option );\n                            }\n                        }\n\n                        options.put( optionName, optionNames.toArray( new Map[0] ) );\n\n                        return options;\n                    }\n\n                    if ( isElementContent( optionNode ) )\n                    {\n                        /*\n                         * <optionName>\n                         *  <param1>value1<\/param1>\n                         *  <param2>value2<\/param2>\n                         * <\/optionName>\n                         */\n                        Map option = new HashMap();\n\n                        NodeList childs = optionNode.getChildNodes();\n                        if ( childs.getLength() > 1 )\n                        {\n                            Map parameters = new HashMap();\n\n                            for ( int i = 0; i < childs.getLength(); i++ )\n                            {\n                                Node child = childs.item( i );\n                                if ( child.getNodeType() == Node.ELEMENT_NODE )\n                                {\n                                    parameters.put( child.getNodeName(), getTextContent( child ) );\n                                }\n                            }\n\n                            option.put( optionName, parameters );\n                        }\n\n                        return option;\n                    }\n                    else\n                    {\n                        /*\n                         * <optionName>value1<\/optionName>\n                         */\n                        Map option = new HashMap();\n\n                        option.put( optionName, getTextContent( optionNode ) );\n\n                        return option;\n                    }\n                }\n            }\n            catch ( Exception e )\n            {\n                throw new IOException( \"Exception occured: \" + e.getMessage() );\n            }\n        }\n\n        Map properties = new HashMap();\n        properties.put( optionName, defaultValue );\n\n        return properties;\n    }","commit_id":"303c53f4e9851a3f0eb081b8981c4fbae2a56c37","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Convenience method to write XML Ant javadoc task\n     *\n     * @param writer not null\n     * @param project not null\n     * @param wrapper not null\n     * @throws IOException if any\n     */\n    public static void writeJavadocTask( XMLWriter writer, MavenProject project, ArtifactResolverWrapper wrapper )\n        throws IOException\n    {\n        List sources = new ArrayList();\n        for ( Iterator it = project.getCompileSourceRoots().iterator(); it.hasNext(); )\n        {\n            String source = (String) it.next();\n\n            if ( new File( source ).exists() )\n            {\n                sources.add( source );\n            }\n        }\n\n        // No sources\n        if ( sources.size() == 0 )\n        {\n            return;\n        }\n\n        writer.startElement( \"javadoc\" );\n        String sourcepath = getMavenJavadocPluginBasicOption( project, \"sourcepath\", null );\n        if ( sourcepath == null )\n        {\n            StringBuffer sb = new StringBuffer();\n            String[] compileSourceRoots = (String[]) sources.toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                sb.append( \"${maven.build.srcDir.\" ).append( i ).append( \"}\" );\n\n                if ( i < ( compileSourceRoots.length - 1 ) )\n                {\n                    sb.append( File.pathSeparatorChar );\n                }\n            }\n            writer.addAttribute( \"sourcepath\", sb.toString() );\n            addWrapAttribute( writer, \"javadoc\", \"packagenames\", \"*\", 3 );\n        }\n        else\n        {\n            writer.addAttribute( \"sourcepath\", sourcepath );\n        }\n        addWrapAttribute( writer, \"javadoc\", \"destdir\",\n                          getMavenJavadocPluginBasicOption( project, \"destdir\",\n                                                            \"${maven.reporting.outputDirectory}/apidocs\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"extdirs\", getMavenJavadocPluginBasicOption( project, \"extdirs\", null ), 3 );\n\n        addWrapAttribute( writer, \"javadoc\", \"overview\", getMavenJavadocPluginBasicOption( project, \"overview\", null ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"access\",\n                          getMavenJavadocPluginBasicOption( project, \"show\", \"protected\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"old\", getMavenJavadocPluginBasicOption( project, \"old\", \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"verbose\",\n                          getMavenJavadocPluginBasicOption( project, \"verbose\", \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"locale\", getMavenJavadocPluginBasicOption( project, \"locale\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"encoding\", getMavenJavadocPluginBasicOption( project, \"encoding\", null ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"version\", getMavenJavadocPluginBasicOption( project, \"version\", \"true\" ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"use\", getMavenJavadocPluginBasicOption( project, \"use\", \"true\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"author\", getMavenJavadocPluginBasicOption( project, \"author\", \"true\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"splitindex\", getMavenJavadocPluginBasicOption( project, \"splitindex\",\n                                                                                             \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"windowtitle\", getMavenJavadocPluginBasicOption( project, \"windowtitle\",\n                                                                                              null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"nodeprecated\", getMavenJavadocPluginBasicOption( project, \"nodeprecated\",\n                                                                                               \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"nodeprecatedlist\", getMavenJavadocPluginBasicOption( project,\n                                                                                                   \"nodeprecatedlist\",\n                                                                                                   \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"notree\", getMavenJavadocPluginBasicOption( project, \"notree\", \"false\" ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"noindex\",\n                          getMavenJavadocPluginBasicOption( project, \"noindex\", \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"nohelp\", getMavenJavadocPluginBasicOption( project, \"nohelp\", \"false\" ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"nonavbar\",\n                          getMavenJavadocPluginBasicOption( project, \"nonavbar\", \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"serialwarn\", getMavenJavadocPluginBasicOption( project, \"serialwarn\",\n                                                                                             \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"helpfile\", getMavenJavadocPluginBasicOption( project, \"helpfile\", null ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"stylesheetfile\",\n                          getMavenJavadocPluginBasicOption( project, \"stylesheetfile\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"charset\", getMavenJavadocPluginBasicOption( project, \"charset\",\n                                                                                          \"ISO-8859-1\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"docencoding\", getMavenJavadocPluginBasicOption( project, \"docencoding\",\n                                                                                              null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"excludepackagenames\",\n                          getMavenJavadocPluginBasicOption( project, \"excludepackagenames\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"source\", getMavenJavadocPluginBasicOption( project, \"source\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"linksource\", getMavenJavadocPluginBasicOption( project, \"linksource\",\n                                                                                             \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"breakiterator\", getMavenJavadocPluginBasicOption( project,\n                                                                                                \"breakiterator\",\n                                                                                                \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"noqualifier\", getMavenJavadocPluginBasicOption( project, \"noqualifier\",\n                                                                                              null ), 3 );\n        // miscellaneous\n        addWrapAttribute( writer, \"javadoc\", \"maxmemory\",\n                          getMavenJavadocPluginBasicOption( project, \"maxmemory\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"additionalparam\", getMavenJavadocPluginBasicOption( project,\n                                                                                                  \"additionalparam\",\n                                                                                                  null ), 3 );\n\n        // Nested arg\n        String doctitle = getMavenJavadocPluginBasicOption( project, \"doctitle\", null );\n        if ( doctitle != null )\n        {\n            writer.startElement( \"doctitle\" );\n            writer.writeText( \"<![CDATA[\" + doctitle + \"]]>\" );\n            writer.endElement(); // doctitle\n        }\n        String header = getMavenJavadocPluginBasicOption( project, \"header\", null );\n        if ( header != null )\n        {\n            writer.startElement( \"header\" );\n            writer.writeText( \"<![CDATA[\" + header + \"]]>\" );\n            writer.endElement(); // header\n        }\n        String footer = getMavenJavadocPluginBasicOption( project, \"footer\", null );\n        if ( footer != null )\n        {\n            writer.startElement( \"footer\" );\n            writer.writeText( \"<![CDATA[\" + footer + \"]]>\" );\n            writer.endElement(); // footer\n        }\n        String bottom = getMavenJavadocPluginBasicOption( project, \"bottom\", null );\n        if ( bottom != null )\n        {\n            writer.startElement( \"bottom\" );\n            writer.writeText( \"<![CDATA[\" + bottom + \"]]>\" );\n            writer.endElement(); // bottom\n        }\n\n        Map[] links = getMavenJavadocPluginOptions( project, \"links\", null );\n        if ( links != null )\n        {\n            for ( int i = 0; i < links.length; i++ )\n            {\n                writer.startElement( \"link\" );\n                writer.addAttribute( \"href\", (String) links[i].get( \"link\" ) );\n                writer.endElement(); // link\n            }\n        }\n\n        Map[] offlineLinks = getMavenJavadocPluginOptions( project, \"offlineLinks\", null );\n        if ( offlineLinks != null )\n        {\n            for ( int i = 0; i < offlineLinks.length; i++ )\n            {\n                writer.startElement( \"link\" );\n                writer.addAttribute( \"href\", (String) offlineLinks[i].get( \"url\" ) );\n                addWrapAttribute( writer, \"javadoc\", \"offline\", \"true\", 4 );\n                writer.endElement(); // link\n            }\n        }\n\n        Map[] groups = getMavenJavadocPluginOptions( project, \"groups\", null );\n        if ( groups != null )\n        {\n            for ( int i = 0; i < groups.length; i++ )\n            {\n                writer.startElement( \"group\" );\n                writer.addAttribute( \"title\", (String) groups[i].get( \"title\" ) );\n                addWrapAttribute( writer, \"javadoc\", \"package\", (String) groups[i].get( \"package\" ), 4 );\n                writer.endElement(); // group\n            }\n        }\n\n        // TODO Handle docletArtifacts\n        String doclet = getMavenJavadocPluginBasicOption( project, \"doclet\", null );\n        if ( doclet != null )\n        {\n            String docletpath = getMavenJavadocPluginBasicOption( project, \"docletpath\", null );\n            if ( StringUtils.isNotEmpty( docletpath ) )\n            {\n                writer.startElement( \"doclet\" );\n                writer.addAttribute( \"name\", doclet );\n                addWrapAttribute( writer, \"javadoc\", \"path\", docletpath, 4 );\n                writer.endElement(); // doclet\n            }\n            else\n            {\n                Map docletArtifact = getMavenJavadocPluginOption( project, \"docletArtifact\", null );\n                String path = wrapper.getArtifactAbsolutePath( (String) docletArtifact.get( \"groupId\" ),\n                                                               (String) docletArtifact.get( \"artifactId\" ),\n                                                               (String) docletArtifact.get( \"version\" ) );\n                path = StringUtils.replace( path, wrapper.getLocalRepository().getBasedir(), \"${maven.repo.local}\" );\n\n                writer.startElement( \"doclet\" );\n                writer.addAttribute( \"name\", doclet );\n                addWrapAttribute( writer, \"javadoc\", \"path\", path, 4 );\n                writer.endElement(); // doclet\n            }\n        }\n\n        // TODO Handle taglets\n        String taglet = getMavenJavadocPluginBasicOption( project, \"taglet\", null );\n        if ( taglet != null )\n        {\n            String tagletpath = getMavenJavadocPluginBasicOption( project, \"tagletpath\", null );\n            if ( StringUtils.isNotEmpty( tagletpath ) )\n            {\n                writer.startElement( \"taglet\" );\n                writer.addAttribute( \"name\", taglet );\n                addWrapAttribute( writer, \"javadoc\", \"path\", tagletpath, 4 );\n                writer.endElement(); // taglet\n            }\n            else\n            {\n                Map tagletArtifact = getMavenJavadocPluginOption( project, \"tagletArtifact\", null );\n                String path = wrapper.getArtifactAbsolutePath( (String) tagletArtifact.get( \"groupId\" ),\n                                                               (String) tagletArtifact.get( \"artifactId\" ),\n                                                               (String) tagletArtifact.get( \"version\" ) );\n                path = StringUtils.replace( path, wrapper.getLocalRepository().getBasedir(), \"${maven.repo.local}\" );\n\n                writer.startElement( \"taglet\" );\n                writer.addAttribute( \"name\", taglet );\n                addWrapAttribute( writer, \"javadoc\", \"path\", path, 4 );\n                writer.endElement(); // taglet\n            }\n        }\n\n        Map[] tags = getMavenJavadocPluginOptions( project, \"tags\", null );\n        if ( tags != null )\n        {\n            for ( int i = 0; i < tags.length; i++ )\n            {\n                writer.startElement( \"tag\" );\n                writer.addAttribute( \"name\", (String) tags[i].get( \"name\" ) );\n                addWrapAttribute( writer, \"javadoc\", \"scope\", (String) tags[i].get( \"placement\" ), 4 );\n                addWrapAttribute( writer, \"javadoc\", \"description\", (String) tags[i].get( \"head\" ), 4 );\n                writer.endElement(); // tag\n            }\n        }\n\n        writer.endElement(); // javadoc\n    }","id":18043,"modified_method":"/**\n     * Convenience method to write XML Ant javadoc task\n     *\n     * @param writer not null\n     * @param project not null\n     * @param wrapper not null\n     * @throws IOException if any\n     */\n    public static void writeJavadocTask( XMLWriter writer, MavenProject project, ArtifactResolverWrapper wrapper )\n        throws IOException\n    {\n        List sources = new ArrayList();\n        for ( Iterator it = project.getCompileSourceRoots().iterator(); it.hasNext(); )\n        {\n            String source = (String) it.next();\n\n            if ( new File( source ).exists() )\n            {\n                sources.add( source );\n            }\n        }\n\n        // No sources\n        if ( sources.size() == 0 )\n        {\n            return;\n        }\n\n        writer.startElement( \"javadoc\" );\n        String sourcepath = getMavenJavadocPluginBasicOption( project, \"sourcepath\", null );\n        if ( sourcepath == null )\n        {\n            StringBuffer sb = new StringBuffer();\n            String[] compileSourceRoots = (String[]) sources.toArray( new String[0] );\n            for ( int i = 0; i < compileSourceRoots.length; i++ )\n            {\n                sb.append( \"${maven.build.srcDir.\" ).append( i ).append( \"}\" );\n\n                if ( i < ( compileSourceRoots.length - 1 ) )\n                {\n                    sb.append( File.pathSeparatorChar );\n                }\n            }\n            writer.addAttribute( \"sourcepath\", sb.toString() );\n            addWrapAttribute( writer, \"javadoc\", \"packagenames\", \"*\", 3 );\n        }\n        else\n        {\n            writer.addAttribute( \"sourcepath\", sourcepath );\n        }\n        addWrapAttribute( writer, \"javadoc\", \"destdir\",\n                          getMavenJavadocPluginBasicOption( project, \"destdir\",\n                                                            \"${maven.reporting.outputDirectory}/apidocs\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"extdirs\", getMavenJavadocPluginBasicOption( project, \"extdirs\", null ), 3 );\n\n        addWrapAttribute( writer, \"javadoc\", \"overview\", getMavenJavadocPluginBasicOption( project, \"overview\", null ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"access\",\n                          getMavenJavadocPluginBasicOption( project, \"show\", \"protected\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"old\", getMavenJavadocPluginBasicOption( project, \"old\", \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"verbose\",\n                          getMavenJavadocPluginBasicOption( project, \"verbose\", \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"locale\", getMavenJavadocPluginBasicOption( project, \"locale\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"encoding\", getMavenJavadocPluginBasicOption( project, \"encoding\", null ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"version\", getMavenJavadocPluginBasicOption( project, \"version\", \"true\" ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"use\", getMavenJavadocPluginBasicOption( project, \"use\", \"true\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"author\", getMavenJavadocPluginBasicOption( project, \"author\", \"true\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"splitindex\", getMavenJavadocPluginBasicOption( project, \"splitindex\",\n                                                                                             \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"windowtitle\", getMavenJavadocPluginBasicOption( project, \"windowtitle\",\n                                                                                              null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"nodeprecated\", getMavenJavadocPluginBasicOption( project, \"nodeprecated\",\n                                                                                               \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"nodeprecatedlist\", getMavenJavadocPluginBasicOption( project,\n                                                                                                   \"nodeprecatedlist\",\n                                                                                                   \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"notree\", getMavenJavadocPluginBasicOption( project, \"notree\", \"false\" ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"noindex\",\n                          getMavenJavadocPluginBasicOption( project, \"noindex\", \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"nohelp\", getMavenJavadocPluginBasicOption( project, \"nohelp\", \"false\" ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"nonavbar\",\n                          getMavenJavadocPluginBasicOption( project, \"nonavbar\", \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"serialwarn\", getMavenJavadocPluginBasicOption( project, \"serialwarn\",\n                                                                                             \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"helpfile\", getMavenJavadocPluginBasicOption( project, \"helpfile\", null ),\n                          3 );\n        addWrapAttribute( writer, \"javadoc\", \"stylesheetfile\",\n                          getMavenJavadocPluginBasicOption( project, \"stylesheetfile\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"charset\", getMavenJavadocPluginBasicOption( project, \"charset\",\n                                                                                          \"ISO-8859-1\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"docencoding\", getMavenJavadocPluginBasicOption( project, \"docencoding\",\n                                                                                              null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"excludepackagenames\",\n                          getMavenJavadocPluginBasicOption( project, \"excludepackagenames\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"source\", getMavenJavadocPluginBasicOption( project, \"source\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"linksource\", getMavenJavadocPluginBasicOption( project, \"linksource\",\n                                                                                             \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"breakiterator\", getMavenJavadocPluginBasicOption( project,\n                                                                                                \"breakiterator\",\n                                                                                                \"false\" ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"noqualifier\", getMavenJavadocPluginBasicOption( project, \"noqualifier\",\n                                                                                              null ), 3 );\n        // miscellaneous\n        addWrapAttribute( writer, \"javadoc\", \"maxmemory\",\n                          getMavenJavadocPluginBasicOption( project, \"maxmemory\", null ), 3 );\n        addWrapAttribute( writer, \"javadoc\", \"additionalparam\", getMavenJavadocPluginBasicOption( project,\n                                                                                                  \"additionalparam\",\n                                                                                                  null ), 3 );\n\n        // Nested arg\n        String doctitle = getMavenJavadocPluginBasicOption( project, \"doctitle\", null );\n        if ( doctitle != null )\n        {\n            writer.startElement( \"doctitle\" );\n            writer.writeText( \"<![CDATA[\" + doctitle + \"]]>\" );\n            writer.endElement(); // doctitle\n        }\n        String header = getMavenJavadocPluginBasicOption( project, \"header\", null );\n        if ( header != null )\n        {\n            writer.startElement( \"header\" );\n            writer.writeText( \"<![CDATA[\" + header + \"]]>\" );\n            writer.endElement(); // header\n        }\n        String footer = getMavenJavadocPluginBasicOption( project, \"footer\", null );\n        if ( footer != null )\n        {\n            writer.startElement( \"footer\" );\n            writer.writeText( \"<![CDATA[\" + footer + \"]]>\" );\n            writer.endElement(); // footer\n        }\n        String bottom = getMavenJavadocPluginBasicOption( project, \"bottom\", null );\n        if ( bottom != null )\n        {\n            writer.startElement( \"bottom\" );\n            writer.writeText( \"<![CDATA[\" + bottom + \"]]>\" );\n            writer.endElement(); // bottom\n        }\n\n        Map[] links = getMavenJavadocPluginOptions( project, \"links\", null );\n        if ( links != null )\n        {\n            for ( int i = 0; i < links.length; i++ )\n            {\n                writer.startElement( \"link\" );\n                writer.addAttribute( \"href\", (String) links[i].get( \"link\" ) );\n                writer.endElement(); // link\n            }\n        }\n\n        Map[] offlineLinks = getMavenJavadocPluginOptions( project, \"offlineLinks\", null );\n        if ( offlineLinks != null )\n        {\n            for ( int i = 0; i < offlineLinks.length; i++ )\n            {\n                writer.startElement( \"link\" );\n                writer.addAttribute( \"href\", (String) offlineLinks[i].get( \"url\" ) );\n                addWrapAttribute( writer, \"javadoc\", \"offline\", \"true\", 4 );\n                writer.endElement(); // link\n            }\n        }\n\n        Map[] groups = getMavenJavadocPluginOptions( project, \"groups\", null );\n        if ( groups != null )\n        {\n            for ( int i = 0; i < groups.length; i++ )\n            {\n                writer.startElement( \"group\" );\n                writer.addAttribute( \"title\", (String) groups[i].get( \"title\" ) );\n                addWrapAttribute( writer, \"javadoc\", \"package\", (String) groups[i].get( \"package\" ), 4 );\n                writer.endElement(); // group\n            }\n        }\n\n        // TODO Handle docletArtifacts\n        String doclet = getMavenJavadocPluginBasicOption( project, \"doclet\", null );\n        if ( doclet != null )\n        {\n            String docletpath = getMavenJavadocPluginBasicOption( project, \"docletpath\", null );\n            if ( StringUtils.isNotEmpty( docletpath ) )\n            {\n                writer.startElement( \"doclet\" );\n                writer.addAttribute( \"name\", doclet );\n                addWrapAttribute( writer, \"javadoc\", \"path\", docletpath, 4 );\n                writer.endElement(); // doclet\n            }\n            else\n            {\n                Map docletArtifact = getMavenJavadocPluginOption( project, \"docletArtifact\", null );\n                String path = wrapper.getArtifactAbsolutePath( (String) docletArtifact.get( \"groupId\" ),\n                                                               (String) docletArtifact.get( \"artifactId\" ),\n                                                               (String) docletArtifact.get( \"version\" ) );\n                path = StringUtils.replace( path, wrapper.getLocalRepository().getBasedir(), \"${maven.repo.local}\" );\n\n                writer.startElement( \"doclet\" );\n                writer.addAttribute( \"name\", doclet );\n                addWrapAttribute( writer, \"javadoc\", \"path\", path, 4 );\n                writer.endElement(); // doclet\n            }\n        }\n\n        // TODO Handle taglets\n        String taglet = getMavenJavadocPluginBasicOption( project, \"taglet\", null );\n        if ( taglet != null )\n        {\n            String tagletpath = getMavenJavadocPluginBasicOption( project, \"tagletpath\", null );\n            if ( StringUtils.isNotEmpty( tagletpath ) )\n            {\n                writer.startElement( \"taglet\" );\n                writer.addAttribute( \"name\", taglet );\n                addWrapAttribute( writer, \"javadoc\", \"path\", tagletpath, 4 );\n                writer.endElement(); // taglet\n            }\n            else\n            {\n                Map tagletArtifact = getMavenJavadocPluginOption( project, \"tagletArtifact\", null );\n                String path = wrapper.getArtifactAbsolutePath( (String) tagletArtifact.get( \"groupId\" ),\n                                                               (String) tagletArtifact.get( \"artifactId\" ),\n                                                               (String) tagletArtifact.get( \"version\" ) );\n                path = StringUtils.replace( path, wrapper.getLocalRepository().getBasedir(), \"${maven.repo.local}\" );\n\n                writer.startElement( \"taglet\" );\n                writer.addAttribute( \"name\", taglet );\n                addWrapAttribute( writer, \"javadoc\", \"path\", path, 4 );\n                writer.endElement(); // taglet\n            }\n        }\n\n        Map[] tags = getMavenJavadocPluginOptions( project, \"tags\", null );\n        if ( tags != null )\n        {\n            for ( int i = 0; i < tags.length; i++ )\n            {\n                Map props = (Map) tags[i].get( \"tag\" );\n                writer.startElement( \"tag\" );\n                writer.addAttribute( \"name\", (String) props.get( \"name\" ) );\n                addWrapAttribute( writer, \"javadoc\", \"scope\", (String) props.get( \"placement\" ), 4 );\n                addWrapAttribute( writer, \"javadoc\", \"description\", (String) props.get( \"head\" ), 4 );\n                writer.endElement(); // tag\n            }\n        }\n\n        writer.endElement(); // javadoc\n    }","commit_id":"303c53f4e9851a3f0eb081b8981c4fbae2a56c37","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Check if a given <code>node<\/code> is a list of nodes or not.\n     * <br/>\n     * For instance, the node <code>options<\/code> is a list of <code>option<\/code> in the following case:\n     *<pre>\n     * &lt;options&gt;\n     *   &lt;option&gt;\n     *    &lt;param1&gt;value1&lt;/param1&gt;\n     *    &lt;param2&gt;value2&lt;/param2&gt;\n     *   &lt;/option&gt;\n     *   &lt;option&gt;\n     *    &lt;param1&gt;value1&lt;/param1&gt;\n     *    &lt;param2&gt;value2&lt;/param2&gt;\n     *   &lt;/option&gt;\n     * &lt;/options&gt;\n     * <\/pre>\n     *\n     * @param node a given node\n     * @return true if the node is a list, false otherwise.\n     */\n    private static boolean isList( Node node )\n    {\n        if ( node == null )\n        {\n            return false;\n        }\n\n        NodeList childs = node.getChildNodes();\n\n        boolean isList = false;\n        String lastNodeName = null;\n        for ( int i = 0; i < childs.getLength(); i++ )\n        {\n            Node child = childs.item( i );\n            if ( child.getNodeType() == Node.ELEMENT_NODE )\n            {\n                isList = isList || ( child.getNodeName().equals( lastNodeName ) );\n                lastNodeName = child.getNodeName();\n            }\n        }\n        if ( StringUtils.isNotEmpty( lastNodeName ) )\n        {\n            isList = isList || lastNodeName.equals( getSingularForm( node.getNodeName() ) );\n        }\n\n        return isList;\n    }","id":18044,"modified_method":"/**\n     * Check if a given <code>node<\/code> is a list of nodes or not.\n     * <br/>\n     * For instance, the node <code>options<\/code> is a list of <code>option<\/code> in the following case:\n     *<pre>\n     * &lt;options&gt;\n     *   &lt;option&gt;\n     *    &lt;param1&gt;value1&lt;/param1&gt;\n     *    &lt;param2&gt;value2&lt;/param2&gt;\n     *   &lt;/option&gt;\n     *   &lt;option&gt;\n     *    &lt;param1&gt;value1&lt;/param1&gt;\n     *    &lt;param2&gt;value2&lt;/param2&gt;\n     *   &lt;/option&gt;\n     * &lt;/options&gt;\n     * <\/pre>\n     *\n     * @param node a given node, may be <code>null<\/code>.\n     * @return true if the node is a list, false otherwise.\n     */\n    private static boolean isList( Node node )\n    {\n        if ( node == null )\n        {\n            return false;\n        }\n\n        NodeList children = node.getChildNodes();\n\n        boolean isList = false;\n        String lastNodeName = null;\n        for ( int i = 0; i < children.getLength(); i++ )\n        {\n            Node child = children.item( i );\n            if ( child.getNodeType() == Node.ELEMENT_NODE )\n            {\n                isList = isList || ( child.getNodeName().equals( lastNodeName ) );\n                lastNodeName = child.getNodeName();\n            }\n        }\n        if ( StringUtils.isNotEmpty( lastNodeName ) )\n        {\n            isList = isList || lastNodeName.equals( getSingularForm( node.getNodeName() ) );\n        }\n\n        return isList;\n    }","commit_id":"303c53f4e9851a3f0eb081b8981c4fbae2a56c37","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Test method for 'org.apache.maven.plugin.ant.AntBuildWriterUtil.getMavenJavadocPluginConfiguration(MavenProject, String, String)'\n     *\n     * @throws Exception\n     */\n    public void testGetMavenJavadocPluginConfiguration()\n        throws Exception\n    {\n        File testPom = new File( getBasedir(), \"src/test/resources/unit/ant-javadoc-test/pom.xml\" );\n\n        MavenEmbedder maven = new MavenEmbedder();\n        maven.setClassLoader( Thread.currentThread().getContextClassLoader() );\n        maven.setLogger( new MavenEmbedderConsoleLogger() );\n        maven.setLocalRepositoryDirectory( getTestFile( \"target/local-repo\" ) );\n        maven.setOffline( true );\n        maven.start();\n\n        MavenProject project = maven.readProjectWithDependencies( testPom );\n\n        assertEquals( AntBuildWriterUtil.getMavenJavadocPluginBasicOption( project, \"doclet\", null ), \"gr.spinellis.umlgraph.doclet.UmlGraphDoc\" );\n\n        assertNotNull( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"links\", null ) );\n        assertEquals( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"links\", null ).length, 2 );\n\n        assertNotNull( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"docletArtifacts\", null ) );\n        assertEquals( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"docletArtifacts\", null ).length, 2 );\n\n        maven.stop();\n    }","id":18045,"modified_method":"/**\n     * Test method for 'org.apache.maven.plugin.ant.AntBuildWriterUtil.getMavenJavadocPluginConfiguration(MavenProject, String, String)'\n     *\n     * @throws Exception\n     */\n    public void testGetMavenJavadocPluginConfiguration()\n        throws Exception\n    {\n        File testPom = new File( getBasedir(), \"src/test/resources/unit/ant-javadoc-test/pom.xml\" );\n\n        MavenEmbedder maven = new MavenEmbedder();\n        maven.setClassLoader( Thread.currentThread().getContextClassLoader() );\n        maven.setLogger( new MavenEmbedderConsoleLogger() );\n        maven.setLocalRepositoryDirectory( getTestFile( \"target/local-repo\" ) );\n        maven.setOffline( true );\n        maven.start();\n\n        MavenProject project = maven.readProjectWithDependencies( testPom );\n\n        assertEquals( AntBuildWriterUtil.getMavenJavadocPluginBasicOption( project, \"doclet\", null ), \"gr.spinellis.umlgraph.doclet.UmlGraphDoc\" );\n\n        assertNotNull( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"links\", null ) );\n        assertEquals( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"links\", null ).length, 2 );\n\n        assertNotNull( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"docletArtifacts\", null ) );\n        assertEquals( AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"docletArtifacts\", null ).length, 2 );\n\n        Map[] options = AntBuildWriterUtil.getMavenJavadocPluginOptions( project, \"tags\", null );\n        assertNotNull( options );\n        assertEquals( options.length, 1 );\n        assertEquals( 1, options[0].size() );\n        Map properties = (Map) options[0].get( \"tag\" );\n        assertNotNull( properties );\n        assertEquals( \"requirement\", properties.get( \"name\" ) );\n        assertEquals( \"a\", properties.get( \"placement\" ) );\n        assertEquals( \"Software Requirement:\", properties.get( \"head\" ) );\n\n        maven.stop();\n    }","commit_id":"303c53f4e9851a3f0eb081b8981c4fbae2a56c37","url":"https://github.com/apache/maven-plugins"},{"original_method":"public DiscoveryRepresentation(URI managementUri, URI dataUri) {\n        super(DISCOVERY_REPRESENTATION_TYPE);\n        this.managementUri = managementUri;\n        this.dataUri = dataUri;\n    }","id":18046,"modified_method":"public DiscoveryRepresentation(String managementUri, String dataUri) {\n        super(DISCOVERY_REPRESENTATION_TYPE);\n        this.managementUri = managementUri;\n        this.dataUri = dataUri;\n    }","commit_id":"c782a2662acc09bcff12da61d5f7a48ad69bdaaf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    protected void serialize(MappingSerializer serializer) {\n        serializer.putString(MANAGEMENT_URI_KEY, managementUri.toString());\n        serializer.putString(DATA_URI_KEY, dataUri.toString());\n    }","id":18047,"modified_method":"@Override\n    protected void serialize(MappingSerializer serializer) {\n        serializer.putUri( MANAGEMENT_URI_KEY, managementUri);\n        serializer.putUri( DATA_URI_KEY, dataUri);\n    }","commit_id":"c782a2662acc09bcff12da61d5f7a48ad69bdaaf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateAMapContainingDataAndManagementURIs() throws Exception {\n        URI managementUri = new URI(\"http://localhost:9999/management\");\n        URI dataUri = new URI(\"http://localhost:8888/data\");\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(managementUri, dataUri);\n        \n        Map<String, Object> mapOfUris = RepresentationTestBase.serialize(dr);\n        \n        Object mappedManagementUri = mapOfUris.get(\"management\");\n        Object mappedDataUri = mapOfUris.get(\"data\");\n\n        assertNotNull(mappedManagementUri);\n        assertNotNull(mappedDataUri);\n        \n        assertEquals(managementUri.toString(), mappedManagementUri);\n        assertEquals(dataUri.toString(), mappedDataUri);\n    }","id":18048,"modified_method":"@Test\n    public void shouldCreateAMapContainingDataAndManagementURIs() throws Exception {\n        String managementUri = \"/management\";\n        String dataUri = \"/data\";\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(managementUri, dataUri);\n        \n        Map<String, Object> mapOfUris = RepresentationTestBase.serialize(dr);\n        \n        Object mappedManagementUri = mapOfUris.get(\"management\");\n        Object mappedDataUri = mapOfUris.get(\"data\");\n\n        assertNotNull(mappedManagementUri);\n        assertNotNull(mappedDataUri);\n        \n        assertEquals(managementUri, mappedManagementUri);\n        assertEquals(dataUri, mappedDataUri);\n    }","commit_id":"c782a2662acc09bcff12da61d5f7a48ad69bdaaf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getDiscoveryDocument() throws URISyntaxException {\n        String webAdminManagementUri = configuration.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY);\n        String dataUri = configuration.getString(Configurator.REST_API_PATH_PROPERTY_KEY);\n\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(new URI(webAdminManagementUri), new URI(dataUri));\n        return outputFormat.ok(dr);\n    }","id":18049,"modified_method":"@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getDiscoveryDocument() throws URISyntaxException {\n        String webAdminManagementUri = configuration.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY);\n        String dataUri = configuration.getString( Configurator.REST_API_PATH_PROPERTY_KEY, Configurator.DEFAULT_REST_API_PATH);\n\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(webAdminManagementUri, dataUri);\n        return outputFormat.ok(dr);\n    }","commit_id":"c782a2662acc09bcff12da61d5f7a48ad69bdaaf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReturnValidJSONWithDataAndManagementUris() throws Exception {\n        Configuration mockConfig = mock(Configuration.class);\n        String managementUri = \"http://localhost:9999/management\";\n        when(mockConfig.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY)).thenReturn(managementUri);\n        String dataUri = \"http://localhost:8888/data\";\n        when(mockConfig.getString(Configurator.REST_API_PATH_PROPERTY_KEY)).thenReturn(dataUri);\n        \n        \n        DiscoveryService ds = new DiscoveryService(mockConfig, new EntityOutputFormat( new JsonFormat(), new URI(\"http://localhost:5555\"), null ));\n        Response response = ds.getDiscoveryDocument();\n        \n        String json = new String((byte[]) response.getEntity());\n        \n        assertNotNull(json);\n        assertThat(json.length(), is(greaterThan(0)));\n        assertThat(json, is(not(\"\\\"\\\"\")));\n        assertThat(json, is(not(\"null\")));\n        \n        assertThat(json, containsString(\"\\\"management\\\" : \\\"\" + managementUri + \"\\\"\"));\n        assertThat(json, containsString(\"\\\"data\\\" : \\\"\" + dataUri + \"\\\"\"));\n    }","id":18050,"modified_method":"@Test\n    public void shouldReturnValidJSONWithDataAndManagementUris() throws Exception {\n        Configuration mockConfig = mock(Configuration.class);\n        String managementUri = \"/management\";\n        when(mockConfig.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY)).thenReturn(managementUri);\n        String dataUri = \"/data\";\n        when(mockConfig.getString(Configurator.REST_API_PATH_PROPERTY_KEY)).thenReturn(dataUri);\n        \n        String baseUri = \"http://www.example.com\";\n        DiscoveryService ds = new DiscoveryService(mockConfig, new EntityOutputFormat( new JsonFormat(), new URI(baseUri), null ));\n        Response response = ds.getDiscoveryDocument();\n        \n        String json = new String((byte[]) response.getEntity());\n        \n        assertNotNull(json);\n        assertThat(json.length(), is(greaterThan(0)));\n        assertThat(json, is(not(\"\\\"\\\"\")));\n        assertThat(json, is(not(\"null\")));\n        \n        assertThat(json, containsString(\"\\\"management\\\" : \\\"\" + baseUri + managementUri + \"\\\"\"));\n        assertThat(json, containsString(\"\\\"data\\\" : \\\"\" + baseUri + dataUri + \"\\\"\"));\n   \n    }","commit_id":"c782a2662acc09bcff12da61d5f7a48ad69bdaaf","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Set<URI> start(NeoServerWithEmbeddedWebServer neoServer) {\n        this.neoServer = neoServer;\n        try {\n            neoServer.getWebServer().addJAXRSPackages(listFrom(new String[] { Configurator.WEB_ADMIN_REST_API_PACKAGE }), managementApiUri().toString());\n            log.info(\"Mounted management API at [%s]\", managementApiUri().toString());\n            \n            HashSet<URI> ownedUris = new HashSet<URI>();\n            ownedUris.add(managementApiUri());\n            return ownedUris;\n        } catch (UnknownHostException e) {\n            log.warn(e);\n            return new HashSet<URI>();\n        }\n    }","id":18051,"modified_method":"public Set<URI> start(NeoServerWithEmbeddedWebServer neoServer) {\n        try {\n            neoServer.getWebServer().addJAXRSPackages(\n                    listFrom(new String[] { Configurator.WEB_ADMIN_REST_API_PACKAGE }), managementApiUri(neoServer).toString());\n            log.info(\"Mounted management API at [%s]\", managementApiUri(neoServer).toString());\n            \n            HashSet<URI> ownedUris = new HashSet<URI>();\n            ownedUris.add(managementApiUri(neoServer));\n            return ownedUris;\n        } catch (UnknownHostException e) {\n            log.warn(e);\n            return new HashSet<URI>();\n        }\n    }","commit_id":"c782a2662acc09bcff12da61d5f7a48ad69bdaaf","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void normalizeUris() {\n        try {\n            for (String key : new String[] { WEB_ADMIN_PATH_PROPERTY_KEY, REST_API_PATH_PROPERTY_KEY }) {\n                if (configuration().containsKey(key)) {\n                    URI normalizedUri = makeAbsoluteAndNormalized(new URI((String) configuration().getProperty(key)));\n                    configuration().clearProperty(key);\n                    configuration().addProperty(key, normalizedUri.toString());\n                }\n            }\n\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n    }","id":18052,"modified_method":"private void normalizeUris() {\n        try {\n            for (String key : new String[] { WEB_ADMIN_PATH_PROPERTY_KEY, REST_API_PATH_PROPERTY_KEY }) {\n                if (configuration().containsKey(key)) {\n                    URI normalizedUri = new URI((String) configuration().getProperty(key)).normalize();\n                    configuration().clearProperty(key);\n                    configuration().addProperty(key, normalizedUri.toString());\n                }\n            }\n\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n    }","commit_id":"c782a2662acc09bcff12da61d5f7a48ad69bdaaf","url":"https://github.com/neo4j/neo4j"},{"original_method":"private URI restApiUri() throws UnknownHostException {\n        if (neoServer.getConfiguration().containsKey(Configurator.REST_API_PATH_PROPERTY_KEY)) {\n            try {\n                return new URI(neoServer.getConfiguration().getProperty(Configurator.REST_API_PATH_PROPERTY_KEY).toString());\n            } catch (URISyntaxException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        log.warn(\"Could not establish the REST API URI from configuration, defaulting to [%s]\", generateUriFor(neoServer.baseUri(), DEFAULT_REST_API_PATH));\n        return generateUriFor(neoServer.baseUri(), DEFAULT_REST_API_PATH);\n    }","id":18053,"modified_method":"private URI restApiUri() throws UnknownHostException {\n        try {\n            return new URI(neoServer.getConfiguration().getString( Configurator.REST_API_PATH_PROPERTY_KEY, Configurator.DEFAULT_REST_API_PATH));\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"c782a2662acc09bcff12da61d5f7a48ad69bdaaf","url":"https://github.com/neo4j/neo4j"},{"original_method":"public DiscoveryRepresentation(URI managementUri, URI dataUri) {\n        super(DISCOVERY_REPRESENTATION_TYPE);\n        this.managementUri = managementUri;\n        this.dataUri = dataUri;\n    }","id":18054,"modified_method":"public DiscoveryRepresentation(String managementUri, String dataUri) {\n        super(DISCOVERY_REPRESENTATION_TYPE);\n        this.managementUri = managementUri;\n        this.dataUri = dataUri;\n    }","commit_id":"1632eacd1bee9dfea768917c4b25d9c75d04e7ea","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    protected void serialize(MappingSerializer serializer) {\n        serializer.putString(MANAGEMENT_URI_KEY, managementUri.toString());\n        serializer.putString(DATA_URI_KEY, dataUri.toString());\n    }","id":18055,"modified_method":"@Override\n    protected void serialize(MappingSerializer serializer) {\n        serializer.putUri( MANAGEMENT_URI_KEY, managementUri);\n        serializer.putUri( DATA_URI_KEY, dataUri);\n    }","commit_id":"1632eacd1bee9dfea768917c4b25d9c75d04e7ea","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateAMapContainingDataAndManagementURIs() throws Exception {\n        URI managementUri = new URI(\"http://localhost:9999/management\");\n        URI dataUri = new URI(\"http://localhost:8888/data\");\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(managementUri, dataUri);\n        \n        Map<String, Object> mapOfUris = RepresentationTestBase.serialize(dr);\n        \n        Object mappedManagementUri = mapOfUris.get(\"management\");\n        Object mappedDataUri = mapOfUris.get(\"data\");\n\n        assertNotNull(mappedManagementUri);\n        assertNotNull(mappedDataUri);\n        \n        assertEquals(managementUri.toString(), mappedManagementUri);\n        assertEquals(dataUri.toString(), mappedDataUri);\n    }","id":18056,"modified_method":"@Test\n    public void shouldCreateAMapContainingDataAndManagementURIs() throws Exception {\n        String managementUri = \"/management\";\n        String dataUri = \"/data\";\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(managementUri, dataUri);\n        \n        Map<String, Object> mapOfUris = RepresentationTestBase.serialize(dr);\n        \n        Object mappedManagementUri = mapOfUris.get(\"management\");\n        Object mappedDataUri = mapOfUris.get(\"data\");\n\n        assertNotNull(mappedManagementUri);\n        assertNotNull(mappedDataUri);\n        \n        assertEquals(managementUri, mappedManagementUri);\n        assertEquals(dataUri, mappedDataUri);\n    }","commit_id":"1632eacd1bee9dfea768917c4b25d9c75d04e7ea","url":"https://github.com/neo4j/neo4j"},{"original_method":"@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getDiscoveryDocument() throws URISyntaxException {\n        String webAdminManagementUri = configuration.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY);\n        String dataUri = configuration.getString(Configurator.REST_API_PATH_PROPERTY_KEY);\n\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(new URI(webAdminManagementUri), new URI(dataUri));\n        return outputFormat.ok(dr);\n    }","id":18057,"modified_method":"@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getDiscoveryDocument() throws URISyntaxException {\n        String webAdminManagementUri = configuration.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY);\n        String dataUri = configuration.getString( Configurator.REST_API_PATH_PROPERTY_KEY, Configurator.DEFAULT_REST_API_PATH);\n\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(webAdminManagementUri, dataUri);\n        return outputFormat.ok(dr);\n    }","commit_id":"1632eacd1bee9dfea768917c4b25d9c75d04e7ea","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReturnValidJSONWithDataAndManagementUris() throws Exception {\n        Configuration mockConfig = mock(Configuration.class);\n        String managementUri = \"http://localhost:9999/management\";\n        when(mockConfig.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY)).thenReturn(managementUri);\n        String dataUri = \"http://localhost:8888/data\";\n        when(mockConfig.getString(Configurator.REST_API_PATH_PROPERTY_KEY)).thenReturn(dataUri);\n        \n        \n        DiscoveryService ds = new DiscoveryService(mockConfig, new EntityOutputFormat( new JsonFormat(), new URI(\"http://localhost:5555\"), null ));\n        Response response = ds.getDiscoveryDocument();\n        \n        String json = new String((byte[]) response.getEntity());\n        \n        assertNotNull(json);\n        assertThat(json.length(), is(greaterThan(0)));\n        assertThat(json, is(not(\"\\\"\\\"\")));\n        assertThat(json, is(not(\"null\")));\n        \n        assertThat(json, containsString(\"\\\"management\\\" : \\\"\" + managementUri + \"\\\"\"));\n        assertThat(json, containsString(\"\\\"data\\\" : \\\"\" + dataUri + \"\\\"\"));\n    }","id":18058,"modified_method":"@Test\n    public void shouldReturnValidJSONWithDataAndManagementUris() throws Exception {\n        Configuration mockConfig = mock(Configuration.class);\n        String managementUri = \"/management\";\n        when(mockConfig.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY)).thenReturn(managementUri);\n        String dataUri = \"/data\";\n        when(mockConfig.getString(Configurator.REST_API_PATH_PROPERTY_KEY)).thenReturn(dataUri);\n        \n        String baseUri = \"http://www.example.com\";\n        DiscoveryService ds = new DiscoveryService(mockConfig, new EntityOutputFormat( new JsonFormat(), new URI(baseUri), null ));\n        Response response = ds.getDiscoveryDocument();\n        \n        String json = new String((byte[]) response.getEntity());\n        \n        assertNotNull(json);\n        assertThat(json.length(), is(greaterThan(0)));\n        assertThat(json, is(not(\"\\\"\\\"\")));\n        assertThat(json, is(not(\"null\")));\n        \n        assertThat(json, containsString(\"\\\"management\\\" : \\\"\" + baseUri + managementUri + \"\\\"\"));\n        assertThat(json, containsString(\"\\\"data\\\" : \\\"\" + baseUri + dataUri + \"\\\"\"));\n   \n    }","commit_id":"1632eacd1bee9dfea768917c4b25d9c75d04e7ea","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Set<URI> start(NeoServerWithEmbeddedWebServer neoServer) {\n        this.neoServer = neoServer;\n        try {\n            neoServer.getWebServer().addJAXRSPackages(listFrom(new String[] { Configurator.WEB_ADMIN_REST_API_PACKAGE }), managementApiUri().toString());\n            log.info(\"Mounted management API at [%s]\", managementApiUri().toString());\n            \n            HashSet<URI> ownedUris = new HashSet<URI>();\n            ownedUris.add(managementApiUri());\n            return ownedUris;\n        } catch (UnknownHostException e) {\n            log.warn(e);\n            return new HashSet<URI>();\n        }\n    }","id":18059,"modified_method":"public Set<URI> start(NeoServerWithEmbeddedWebServer neoServer) {\n        try {\n            neoServer.getWebServer().addJAXRSPackages(\n                    listFrom(new String[] { Configurator.WEB_ADMIN_REST_API_PACKAGE }), managementApiUri(neoServer).toString());\n            log.info(\"Mounted management API at [%s]\", managementApiUri(neoServer).toString());\n            \n            HashSet<URI> ownedUris = new HashSet<URI>();\n            ownedUris.add(managementApiUri(neoServer));\n            return ownedUris;\n        } catch (UnknownHostException e) {\n            log.warn(e);\n            return new HashSet<URI>();\n        }\n    }","commit_id":"1632eacd1bee9dfea768917c4b25d9c75d04e7ea","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void normalizeUris() {\n        try {\n            for (String key : new String[] { WEB_ADMIN_PATH_PROPERTY_KEY, REST_API_PATH_PROPERTY_KEY }) {\n                if (configuration().containsKey(key)) {\n                    URI normalizedUri = makeAbsoluteAndNormalized(new URI((String) configuration().getProperty(key)));\n                    configuration().clearProperty(key);\n                    configuration().addProperty(key, normalizedUri.toString());\n                }\n            }\n\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n    }","id":18060,"modified_method":"private void normalizeUris() {\n        try {\n            for (String key : new String[] { WEB_ADMIN_PATH_PROPERTY_KEY, REST_API_PATH_PROPERTY_KEY }) {\n                if (configuration().containsKey(key)) {\n                    URI normalizedUri = new URI((String) configuration().getProperty(key)).normalize();\n                    configuration().clearProperty(key);\n                    configuration().addProperty(key, normalizedUri.toString());\n                }\n            }\n\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n    }","commit_id":"1632eacd1bee9dfea768917c4b25d9c75d04e7ea","url":"https://github.com/neo4j/neo4j"},{"original_method":"private URI restApiUri() throws UnknownHostException {\n        if (neoServer.getConfiguration().containsKey(Configurator.REST_API_PATH_PROPERTY_KEY)) {\n            try {\n                return new URI(neoServer.getConfiguration().getProperty(Configurator.REST_API_PATH_PROPERTY_KEY).toString());\n            } catch (URISyntaxException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        log.warn(\"Could not establish the REST API URI from configuration, defaulting to [%s]\", generateUriFor(neoServer.baseUri(), DEFAULT_REST_API_PATH));\n        return generateUriFor(neoServer.baseUri(), DEFAULT_REST_API_PATH);\n    }","id":18061,"modified_method":"private URI restApiUri() throws UnknownHostException {\n        try {\n            return new URI(neoServer.getConfiguration().getString( Configurator.REST_API_PATH_PROPERTY_KEY, Configurator.DEFAULT_REST_API_PATH));\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"1632eacd1bee9dfea768917c4b25d9c75d04e7ea","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    protected void serialize(MappingSerializer serializer) {\n        serializer.putString(MANAGEMENT_URI_KEY, managementUri.toString());\n        serializer.putString(DATA_URI_KEY, dataUri.toString());\n    }","id":18062,"modified_method":"@Override\n    protected void serialize(MappingSerializer serializer) {\n        serializer.putUri( MANAGEMENT_URI_KEY, managementUri);\n        serializer.putUri( DATA_URI_KEY, dataUri);\n    }","commit_id":"abdfa52da22b0ec7b9bd8c1fa9a02eb802f29538","url":"https://github.com/neo4j/neo4j"},{"original_method":"public DiscoveryRepresentation(URI managementUri, URI dataUri) {\n        super(DISCOVERY_REPRESENTATION_TYPE);\n        this.managementUri = managementUri;\n        this.dataUri = dataUri;\n    }","id":18063,"modified_method":"public DiscoveryRepresentation(String managementUri, String dataUri) {\n        super(DISCOVERY_REPRESENTATION_TYPE);\n        this.managementUri = managementUri;\n        this.dataUri = dataUri;\n    }","commit_id":"abdfa52da22b0ec7b9bd8c1fa9a02eb802f29538","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateAMapContainingDataAndManagementURIs() throws Exception {\n        URI managementUri = new URI(\"http://localhost:9999/management\");\n        URI dataUri = new URI(\"http://localhost:8888/data\");\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(managementUri, dataUri);\n        \n        Map<String, Object> mapOfUris = RepresentationTestBase.serialize(dr);\n        \n        Object mappedManagementUri = mapOfUris.get(\"management\");\n        Object mappedDataUri = mapOfUris.get(\"data\");\n\n        assertNotNull(mappedManagementUri);\n        assertNotNull(mappedDataUri);\n        \n        assertEquals(managementUri.toString(), mappedManagementUri);\n        assertEquals(dataUri.toString(), mappedDataUri);\n    }","id":18064,"modified_method":"@Test\n    public void shouldCreateAMapContainingDataAndManagementURIs() throws Exception {\n        String managementUri = \"/management\";\n        String dataUri = \"/data\";\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(managementUri, dataUri);\n        \n        Map<String, Object> mapOfUris = RepresentationTestBase.serialize(dr);\n        \n        Object mappedManagementUri = mapOfUris.get(\"management\");\n        Object mappedDataUri = mapOfUris.get(\"data\");\n\n        assertNotNull(mappedManagementUri);\n        assertNotNull(mappedDataUri);\n        \n        assertEquals(managementUri, mappedManagementUri);\n        assertEquals(dataUri, mappedDataUri);\n    }","commit_id":"abdfa52da22b0ec7b9bd8c1fa9a02eb802f29538","url":"https://github.com/neo4j/neo4j"},{"original_method":"@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getDiscoveryDocument() throws URISyntaxException {\n        String webAdminManagementUri = configuration.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY);\n        String dataUri = configuration.getString(Configurator.REST_API_PATH_PROPERTY_KEY);\n\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(new URI(webAdminManagementUri), new URI(dataUri));\n        return outputFormat.ok(dr);\n    }","id":18065,"modified_method":"@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getDiscoveryDocument() throws URISyntaxException {\n        String webAdminManagementUri = configuration.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY);\n        String dataUri = configuration.getString( Configurator.REST_API_PATH_PROPERTY_KEY, Configurator.DEFAULT_REST_API_PATH);\n\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(webAdminManagementUri, dataUri);\n        return outputFormat.ok(dr);\n    }","commit_id":"abdfa52da22b0ec7b9bd8c1fa9a02eb802f29538","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReturnValidJSONWithDataAndManagementUris() throws Exception {\n        Configuration mockConfig = mock(Configuration.class);\n        String managementUri = \"http://localhost:9999/management\";\n        when(mockConfig.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY)).thenReturn(managementUri);\n        String dataUri = \"http://localhost:8888/data\";\n        when(mockConfig.getString(Configurator.REST_API_PATH_PROPERTY_KEY)).thenReturn(dataUri);\n        \n        \n        DiscoveryService ds = new DiscoveryService(mockConfig, new EntityOutputFormat( new JsonFormat(), new URI(\"http://localhost:5555\"), null ));\n        Response response = ds.getDiscoveryDocument();\n        \n        String json = new String((byte[]) response.getEntity());\n        \n        assertNotNull(json);\n        assertThat(json.length(), is(greaterThan(0)));\n        assertThat(json, is(not(\"\\\"\\\"\")));\n        assertThat(json, is(not(\"null\")));\n        \n        assertThat(json, containsString(\"\\\"management\\\" : \\\"\" + managementUri + \"\\\"\"));\n        assertThat(json, containsString(\"\\\"data\\\" : \\\"\" + dataUri + \"\\\"\"));\n    }","id":18066,"modified_method":"@Test\n    public void shouldReturnValidJSONWithDataAndManagementUris() throws Exception {\n        Configuration mockConfig = mock(Configuration.class);\n        String managementUri = \"/management\";\n        when(mockConfig.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY)).thenReturn(managementUri);\n        String dataUri = \"/data\";\n        when(mockConfig.getString(Configurator.REST_API_PATH_PROPERTY_KEY)).thenReturn(dataUri);\n        \n        String baseUri = \"http://www.example.com\";\n        DiscoveryService ds = new DiscoveryService(mockConfig, new EntityOutputFormat( new JsonFormat(), new URI(baseUri), null ));\n        Response response = ds.getDiscoveryDocument();\n        \n        String json = new String((byte[]) response.getEntity());\n        \n        assertNotNull(json);\n        assertThat(json.length(), is(greaterThan(0)));\n        assertThat(json, is(not(\"\\\"\\\"\")));\n        assertThat(json, is(not(\"null\")));\n        \n        assertThat(json, containsString(\"\\\"management\\\" : \\\"\" + baseUri + managementUri + \"\\\"\"));\n        assertThat(json, containsString(\"\\\"data\\\" : \\\"\" + baseUri + dataUri + \"\\\"\"));\n   \n    }","commit_id":"abdfa52da22b0ec7b9bd8c1fa9a02eb802f29538","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Set<URI> start(NeoServerWithEmbeddedWebServer neoServer) {\n        this.neoServer = neoServer;\n        try {\n            neoServer.getWebServer().addJAXRSPackages(listFrom(new String[] { Configurator.WEB_ADMIN_REST_API_PACKAGE }), managementApiUri().toString());\n            log.info(\"Mounted management API at [%s]\", managementApiUri().toString());\n            \n            HashSet<URI> ownedUris = new HashSet<URI>();\n            ownedUris.add(managementApiUri());\n            return ownedUris;\n        } catch (UnknownHostException e) {\n            log.warn(e);\n            return new HashSet<URI>();\n        }\n    }","id":18067,"modified_method":"public Set<URI> start(NeoServerWithEmbeddedWebServer neoServer) {\n        try {\n            neoServer.getWebServer().addJAXRSPackages(\n                    listFrom(new String[] { Configurator.WEB_ADMIN_REST_API_PACKAGE }), managementApiUri(neoServer).toString());\n            log.info(\"Mounted management API at [%s]\", managementApiUri(neoServer).toString());\n            \n            HashSet<URI> ownedUris = new HashSet<URI>();\n            ownedUris.add(managementApiUri(neoServer));\n            return ownedUris;\n        } catch (UnknownHostException e) {\n            log.warn(e);\n            return new HashSet<URI>();\n        }\n    }","commit_id":"abdfa52da22b0ec7b9bd8c1fa9a02eb802f29538","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void normalizeUris() {\n        try {\n            for (String key : new String[] { WEB_ADMIN_PATH_PROPERTY_KEY, REST_API_PATH_PROPERTY_KEY }) {\n                if (configuration().containsKey(key)) {\n                    URI normalizedUri = makeAbsoluteAndNormalized(new URI((String) configuration().getProperty(key)));\n                    configuration().clearProperty(key);\n                    configuration().addProperty(key, normalizedUri.toString());\n                }\n            }\n\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n    }","id":18068,"modified_method":"private void normalizeUris() {\n        try {\n            for (String key : new String[] { WEB_ADMIN_PATH_PROPERTY_KEY, REST_API_PATH_PROPERTY_KEY }) {\n                if (configuration().containsKey(key)) {\n                    URI normalizedUri = new URI((String) configuration().getProperty(key)).normalize();\n                    configuration().clearProperty(key);\n                    configuration().addProperty(key, normalizedUri.toString());\n                }\n            }\n\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n    }","commit_id":"abdfa52da22b0ec7b9bd8c1fa9a02eb802f29538","url":"https://github.com/neo4j/neo4j"},{"original_method":"private URI restApiUri() throws UnknownHostException {\n        if (neoServer.getConfiguration().containsKey(Configurator.REST_API_PATH_PROPERTY_KEY)) {\n            try {\n                return new URI(neoServer.getConfiguration().getProperty(Configurator.REST_API_PATH_PROPERTY_KEY).toString());\n            } catch (URISyntaxException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        log.warn(\"Could not establish the REST API URI from configuration, defaulting to [%s]\", generateUriFor(neoServer.baseUri(), DEFAULT_REST_API_PATH));\n        return generateUriFor(neoServer.baseUri(), DEFAULT_REST_API_PATH);\n    }","id":18069,"modified_method":"private URI restApiUri() throws UnknownHostException {\n        try {\n            return new URI(neoServer.getConfiguration().getString( Configurator.REST_API_PATH_PROPERTY_KEY, Configurator.DEFAULT_REST_API_PATH));\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"abdfa52da22b0ec7b9bd8c1fa9a02eb802f29538","url":"https://github.com/neo4j/neo4j"},{"original_method":"public DiscoveryRepresentation(URI managementUri, URI dataUri) {\n        super(DISCOVERY_REPRESENTATION_TYPE);\n        this.managementUri = managementUri;\n        this.dataUri = dataUri;\n    }","id":18070,"modified_method":"public DiscoveryRepresentation(String managementUri, String dataUri) {\n        super(DISCOVERY_REPRESENTATION_TYPE);\n        this.managementUri = managementUri;\n        this.dataUri = dataUri;\n    }","commit_id":"b3c796faddb0c4959672bcd7a02b5b2c198490d3","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    protected void serialize(MappingSerializer serializer) {\n        serializer.putString(MANAGEMENT_URI_KEY, managementUri.toString());\n        serializer.putString(DATA_URI_KEY, dataUri.toString());\n    }","id":18071,"modified_method":"@Override\n    protected void serialize(MappingSerializer serializer) {\n        serializer.putUri( MANAGEMENT_URI_KEY, managementUri);\n        serializer.putUri( DATA_URI_KEY, dataUri);\n    }","commit_id":"b3c796faddb0c4959672bcd7a02b5b2c198490d3","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateAMapContainingDataAndManagementURIs() throws Exception {\n        URI managementUri = new URI(\"http://localhost:9999/management\");\n        URI dataUri = new URI(\"http://localhost:8888/data\");\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(managementUri, dataUri);\n        \n        Map<String, Object> mapOfUris = RepresentationTestBase.serialize(dr);\n        \n        Object mappedManagementUri = mapOfUris.get(\"management\");\n        Object mappedDataUri = mapOfUris.get(\"data\");\n\n        assertNotNull(mappedManagementUri);\n        assertNotNull(mappedDataUri);\n        \n        assertEquals(managementUri.toString(), mappedManagementUri);\n        assertEquals(dataUri.toString(), mappedDataUri);\n    }","id":18072,"modified_method":"@Test\n    public void shouldCreateAMapContainingDataAndManagementURIs() throws Exception {\n        String managementUri = \"/management\";\n        String dataUri = \"/data\";\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(managementUri, dataUri);\n        \n        Map<String, Object> mapOfUris = RepresentationTestBase.serialize(dr);\n        \n        Object mappedManagementUri = mapOfUris.get(\"management\");\n        Object mappedDataUri = mapOfUris.get(\"data\");\n\n        assertNotNull(mappedManagementUri);\n        assertNotNull(mappedDataUri);\n        \n        assertEquals(managementUri, mappedManagementUri);\n        assertEquals(dataUri, mappedDataUri);\n    }","commit_id":"b3c796faddb0c4959672bcd7a02b5b2c198490d3","url":"https://github.com/neo4j/neo4j"},{"original_method":"@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getDiscoveryDocument() throws URISyntaxException {\n        String webAdminManagementUri = configuration.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY);\n        String dataUri = configuration.getString(Configurator.REST_API_PATH_PROPERTY_KEY);\n\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(new URI(webAdminManagementUri), new URI(dataUri));\n        return outputFormat.ok(dr);\n    }","id":18073,"modified_method":"@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getDiscoveryDocument() throws URISyntaxException {\n        String webAdminManagementUri = configuration.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY);\n        String dataUri = configuration.getString( Configurator.REST_API_PATH_PROPERTY_KEY, Configurator.DEFAULT_REST_API_PATH);\n\n        DiscoveryRepresentation dr = new DiscoveryRepresentation(webAdminManagementUri, dataUri);\n        return outputFormat.ok(dr);\n    }","commit_id":"b3c796faddb0c4959672bcd7a02b5b2c198490d3","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReturnValidJSONWithDataAndManagementUris() throws Exception {\n        Configuration mockConfig = mock(Configuration.class);\n        String managementUri = \"http://localhost:9999/management\";\n        when(mockConfig.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY)).thenReturn(managementUri);\n        String dataUri = \"http://localhost:8888/data\";\n        when(mockConfig.getString(Configurator.REST_API_PATH_PROPERTY_KEY)).thenReturn(dataUri);\n        \n        \n        DiscoveryService ds = new DiscoveryService(mockConfig, new EntityOutputFormat( new JsonFormat(), new URI(\"http://localhost:5555\"), null ));\n        Response response = ds.getDiscoveryDocument();\n        \n        String json = new String((byte[]) response.getEntity());\n        \n        assertNotNull(json);\n        assertThat(json.length(), is(greaterThan(0)));\n        assertThat(json, is(not(\"\\\"\\\"\")));\n        assertThat(json, is(not(\"null\")));\n        \n        assertThat(json, containsString(\"\\\"management\\\" : \\\"\" + managementUri + \"\\\"\"));\n        assertThat(json, containsString(\"\\\"data\\\" : \\\"\" + dataUri + \"\\\"\"));\n    }","id":18074,"modified_method":"@Test\n    public void shouldReturnValidJSONWithDataAndManagementUris() throws Exception {\n        Configuration mockConfig = mock(Configuration.class);\n        String managementUri = \"/management\";\n        when(mockConfig.getString(Configurator.WEB_ADMIN_PATH_PROPERTY_KEY)).thenReturn(managementUri);\n        String dataUri = \"/data\";\n        when(mockConfig.getString(Configurator.REST_API_PATH_PROPERTY_KEY)).thenReturn(dataUri);\n        \n        String baseUri = \"http://www.example.com\";\n        DiscoveryService ds = new DiscoveryService(mockConfig, new EntityOutputFormat( new JsonFormat(), new URI(baseUri), null ));\n        Response response = ds.getDiscoveryDocument();\n        \n        String json = new String((byte[]) response.getEntity());\n        \n        assertNotNull(json);\n        assertThat(json.length(), is(greaterThan(0)));\n        assertThat(json, is(not(\"\\\"\\\"\")));\n        assertThat(json, is(not(\"null\")));\n        \n        assertThat(json, containsString(\"\\\"management\\\" : \\\"\" + baseUri + managementUri + \"\\\"\"));\n        assertThat(json, containsString(\"\\\"data\\\" : \\\"\" + baseUri + dataUri + \"\\\"\"));\n   \n    }","commit_id":"b3c796faddb0c4959672bcd7a02b5b2c198490d3","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Set<URI> start(NeoServerWithEmbeddedWebServer neoServer) {\n        this.neoServer = neoServer;\n        try {\n            neoServer.getWebServer().addJAXRSPackages(listFrom(new String[] { Configurator.WEB_ADMIN_REST_API_PACKAGE }), managementApiUri().toString());\n            log.info(\"Mounted management API at [%s]\", managementApiUri().toString());\n            \n            HashSet<URI> ownedUris = new HashSet<URI>();\n            ownedUris.add(managementApiUri());\n            return ownedUris;\n        } catch (UnknownHostException e) {\n            log.warn(e);\n            return new HashSet<URI>();\n        }\n    }","id":18075,"modified_method":"public Set<URI> start(NeoServerWithEmbeddedWebServer neoServer) {\n        try {\n            neoServer.getWebServer().addJAXRSPackages(\n                    listFrom(new String[] { Configurator.WEB_ADMIN_REST_API_PACKAGE }), managementApiUri(neoServer).toString());\n            log.info(\"Mounted management API at [%s]\", managementApiUri(neoServer).toString());\n            \n            HashSet<URI> ownedUris = new HashSet<URI>();\n            ownedUris.add(managementApiUri(neoServer));\n            return ownedUris;\n        } catch (UnknownHostException e) {\n            log.warn(e);\n            return new HashSet<URI>();\n        }\n    }","commit_id":"b3c796faddb0c4959672bcd7a02b5b2c198490d3","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void normalizeUris() {\n        try {\n            for (String key : new String[] { WEB_ADMIN_PATH_PROPERTY_KEY, REST_API_PATH_PROPERTY_KEY }) {\n                if (configuration().containsKey(key)) {\n                    URI normalizedUri = makeAbsoluteAndNormalized(new URI((String) configuration().getProperty(key)));\n                    configuration().clearProperty(key);\n                    configuration().addProperty(key, normalizedUri.toString());\n                }\n            }\n\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n    }","id":18076,"modified_method":"private void normalizeUris() {\n        try {\n            for (String key : new String[] { WEB_ADMIN_PATH_PROPERTY_KEY, REST_API_PATH_PROPERTY_KEY }) {\n                if (configuration().containsKey(key)) {\n                    URI normalizedUri = new URI((String) configuration().getProperty(key)).normalize();\n                    configuration().clearProperty(key);\n                    configuration().addProperty(key, normalizedUri.toString());\n                }\n            }\n\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n    }","commit_id":"b3c796faddb0c4959672bcd7a02b5b2c198490d3","url":"https://github.com/neo4j/neo4j"},{"original_method":"private URI restApiUri() throws UnknownHostException {\n        if (neoServer.getConfiguration().containsKey(Configurator.REST_API_PATH_PROPERTY_KEY)) {\n            try {\n                return new URI(neoServer.getConfiguration().getProperty(Configurator.REST_API_PATH_PROPERTY_KEY).toString());\n            } catch (URISyntaxException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        log.warn(\"Could not establish the REST API URI from configuration, defaulting to [%s]\", generateUriFor(neoServer.baseUri(), DEFAULT_REST_API_PATH));\n        return generateUriFor(neoServer.baseUri(), DEFAULT_REST_API_PATH);\n    }","id":18077,"modified_method":"private URI restApiUri() throws UnknownHostException {\n        try {\n            return new URI(neoServer.getConfiguration().getString( Configurator.REST_API_PATH_PROPERTY_KEY, Configurator.DEFAULT_REST_API_PATH));\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"b3c796faddb0c4959672bcd7a02b5b2c198490d3","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent arg0) {\n            int [] rows = myEntriesTable.getSelectedRows();\n            model.copyMyToEnd(rows);\n        }","id":18078,"modified_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            model.copyMyToEnd(myEntriesTable.getSelectedRows());\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public CopyStartLeftAction() {\n            ImageIcon icon = ImageProvider.get(\"dialogs/conflict\", \"copystartleft.png\");\n            putValue(Action.SMALL_ICON, icon);\n            if (icon == null) {\n                putValue(Action.NAME, tr(\"> top\"));\n            }\n            putValue(Action.SHORT_DESCRIPTION, tr(\"Copy my selected nodes to the start of the merged node list\"));\n            setEnabled(false);\n        }","id":18079,"modified_method":"public CopyStartLeftAction() {\n            super(\"copystartleft\", tr(\"> top\"), tr(\"Copy my selected nodes to the start of the merged node list\"));\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent arg0) {\n            int [] myRows = myEntriesTable.getSelectedRows();\n            int [] mergedRows = mergedEntriesTable.getSelectedRows();\n            if (mergedRows == null || mergedRows.length == 0)\n                return;\n            int current = mergedRows[0];\n            model.copyMyAfterCurrent(myRows, current);\n        }","id":18080,"modified_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            int [] mergedRows = mergedEntriesTable.getSelectedRows();\n            if (mergedRows == null || mergedRows.length == 0)\n                return;\n            int [] myRows = myEntriesTable.getSelectedRows();\n            int current = mergedRows[0];\n            model.copyMyAfterCurrent(myRows, current);\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public ListMerger(ListMergeModel<T> model) {\n        this.model = model;\n        model.addObserver(this);\n        build();\n        model.addPropertyChangeListener(this);\n    }","id":18081,"modified_method":"/**\n     * Constructs a new {@code ListMerger}.\n     * @param model\n     */\n    public ListMerger(ListMergeModel<T> model) {\n        this.model = model;\n        model.addObserver(this);\n        build();\n        model.addPropertyChangeListener(this);\n    }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public CopyEndLeftAction() {\n            ImageIcon icon = ImageProvider.get(\"dialogs/conflict\", \"copyendleft.png\");\n            putValue(Action.SMALL_ICON, icon);\n            if (icon == null) {\n                putValue(Action.NAME, tr(\"> bottom\"));\n            }\n            putValue(Action.SHORT_DESCRIPTION, tr(\"Copy my selected elements to the end of the list of merged elements.\"));\n            setEnabled(false);\n        }","id":18082,"modified_method":"public CopyEndLeftAction() {\n            super(\"copyendleft\", tr(\"> bottom\"), tr(\"Copy my selected elements to the end of the list of merged elements.\"));\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public CopyAfterCurrentRightAction() {\n            ImageIcon icon = ImageProvider.get(\"dialogs/conflict\", \"copyaftercurrentright.png\");\n            putValue(Action.SMALL_ICON, icon);\n            if (icon == null) {\n                putValue(Action.NAME, \"< after\");\n            }\n            putValue(Action.SHORT_DESCRIPTION, tr(\"Copy their selected element after the first selected element in the list of merged elements\"));\n            setEnabled(false);\n        }","id":18083,"modified_method":"public CopyAfterCurrentRightAction() {\n            super(\"copyaftercurrentright\", tr(\"< after\"), \n                    tr(\"Copy their selected element after the first selected element in the list of merged elements\"));\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public CopyAfterCurrentLeftAction() {\n            ImageIcon icon = ImageProvider.get(\"dialogs/conflict\", \"copyaftercurrentleft.png\");\n            putValue(Action.SMALL_ICON, icon);\n            if (icon == null) {\n                putValue(Action.NAME, \"> after\");\n            }\n            putValue(Action.SHORT_DESCRIPTION, tr(\"Copy my selected elements after the first selected element in the list of merged elements.\"));\n            setEnabled(false);\n        }","id":18084,"modified_method":"public CopyAfterCurrentLeftAction() {\n            super(\"copyaftercurrentleft\", tr(\"> after\"), \n                    tr(\"Copy my selected elements after the first selected element in the list of merged elements.\"));\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent arg0) {\n            int [] myRows = theirEntriesTable.getSelectedRows();\n            int [] mergedRows = mergedEntriesTable.getSelectedRows();\n            if (mergedRows == null || mergedRows.length == 0)\n                return;\n            int current = mergedRows[0];\n            model.copyTheirBeforeCurrent(myRows, current);\n        }","id":18085,"modified_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            int [] mergedRows = mergedEntriesTable.getSelectedRows();\n            if (mergedRows == null || mergedRows.length == 0)\n                return;\n            int [] myRows = theirEntriesTable.getSelectedRows();\n            int current = mergedRows[0];\n            model.copyTheirBeforeCurrent(myRows, current);\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent arg0) {\n            int [] rows = myEntriesTable.getSelectedRows();\n            model.copyMyToTop(rows);\n        }","id":18086,"modified_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            model.copyMyToTop(myEntriesTable.getSelectedRows());\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent arg0) {\n            int [] myRows = theirEntriesTable.getSelectedRows();\n            int [] mergedRows = mergedEntriesTable.getSelectedRows();\n            if (mergedRows == null || mergedRows.length == 0)\n                return;\n            int current = mergedRows[0];\n            model.copyTheirAfterCurrent(myRows, current);\n        }","id":18087,"modified_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            int [] mergedRows = mergedEntriesTable.getSelectedRows();\n            if (mergedRows == null || mergedRows.length == 0)\n                return;\n            int [] myRows = theirEntriesTable.getSelectedRows();\n            int current = mergedRows[0];\n            model.copyTheirAfterCurrent(myRows, current);\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public CopyBeforeCurrentLeftAction() {\n            ImageIcon icon = ImageProvider.get(\"dialogs/conflict\", \"copybeforecurrentleft.png\");\n            putValue(Action.SMALL_ICON, icon);\n            if (icon == null) {\n                putValue(Action.NAME, \"> before\");\n            }\n            putValue(Action.SHORT_DESCRIPTION, tr(\"Copy my selected elements before the first selected element in the list of merged elements.\"));\n            setEnabled(false);\n        }","id":18088,"modified_method":"public CopyBeforeCurrentLeftAction() {\n            super(\"copybeforecurrentleft\", tr(\"> before\"), \n                    tr(\"Copy my selected elements before the first selected element in the list of merged elements.\"));\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent arg0) {\n            int [] rows = theirEntriesTable.getSelectedRows();\n            model.copyTheirToTop(rows);\n        }","id":18089,"modified_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            model.copyTheirToTop(theirEntriesTable.getSelectedRows());\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public CopyStartRightAction() {\n            ImageIcon icon = ImageProvider.get(\"dialogs/conflict\", \"copystartright.png\");\n            putValue(Action.SMALL_ICON, icon);\n            if (icon == null) {\n                putValue(Action.NAME, \"< top\");\n            }\n            putValue(Action.SHORT_DESCRIPTION, tr(\"Copy their selected element to the start of the list of merged elements.\"));\n            setEnabled(false);\n        }","id":18090,"modified_method":"public CopyStartRightAction() {\n            super(\"copystartright\", tr(\"< top\"), tr(\"Copy their selected element to the start of the list of merged elements.\"));\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public CopyEndRightAction() {\n            ImageIcon icon = ImageProvider.get(\"dialogs/conflict\", \"copyendright.png\");\n            putValue(Action.SMALL_ICON, icon);\n            if (icon == null) {\n                putValue(Action.NAME, \"< bottom\");\n            }\n            putValue(Action.SHORT_DESCRIPTION, tr(\"Copy their selected elements to the end of the list of merged elements.\"));\n            setEnabled(false);\n        }","id":18091,"modified_method":"public CopyEndRightAction() {\n            super(\"copyendright\", tr(\"< bottom\"), tr(\"Copy their selected elements to the end of the list of merged elements.\"));\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent arg0) {\n            int [] myRows = myEntriesTable.getSelectedRows();\n            int [] mergedRows = mergedEntriesTable.getSelectedRows();\n            if (mergedRows == null || mergedRows.length == 0)\n                return;\n            int current = mergedRows[0];\n            model.copyMyBeforeCurrent(myRows, current);\n        }","id":18092,"modified_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            int [] mergedRows = mergedEntriesTable.getSelectedRows();\n            if (mergedRows == null || mergedRows.length == 0)\n                return;\n            int [] myRows = myEntriesTable.getSelectedRows();\n            int current = mergedRows[0];\n            model.copyMyBeforeCurrent(myRows, current);\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent arg0) {\n            int [] rows = theirEntriesTable.getSelectedRows();\n            model.copyTheirToEnd(rows);\n        }","id":18093,"modified_method":"@Override\n        public void actionPerformed(ActionEvent arg0) {\n            model.copyTheirToEnd(theirEntriesTable.getSelectedRows());\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public CopyBeforeCurrentRightAction() {\n            ImageIcon icon = ImageProvider.get(\"dialogs/conflict\", \"copybeforecurrentright.png\");\n            putValue(Action.SMALL_ICON, icon);\n            if (icon == null) {\n                putValue(Action.NAME, \"< before\");\n            }\n            putValue(Action.SHORT_DESCRIPTION, tr(\"Copy their selected elements before the first selected element in the list of merged elements.\"));\n            setEnabled(false);\n        }","id":18094,"modified_method":"public CopyBeforeCurrentRightAction() {\n            super(\"copybeforecurrentright\", tr(\"< before\"), \n                    tr(\"Copy their selected elements before the first selected element in the list of merged elements.\"));\n        }","commit_id":"89ee4fbf91f45399f0cc8d760afa6e27c8ff7e8d","url":"https://github.com/openstreetmap/josm"},{"original_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(nodeToCheck, \"position\", true), \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1201271583415\", true), new QuotationClass_9().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1201271589564\", intentionProvider);\n    }\n  }","id":18095,"modified_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(SLinkOperations.getTarget(nodeToCheck, \"position\", true), \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1201271583415\", true), new QuotationClass_9().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1201271589564\", intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellActionMapDeclaration\", false, false), \"applicableConcept\", false);\n    if (applicableConcept == null) {\n      applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.BaseEditorComponent\", false, false), \"conceptDeclaration\", false);\n    }\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_1().createNode(applicableConcept), node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1179767185667\");\n  }","id":18096,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellActionMapDeclaration\", false, false), \"applicableConcept\", false);\n    if (applicableConcept == null) {\n      applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.BaseEditorComponent\", false, false), \"conceptDeclaration\", false);\n    }\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086202\", true), new QuotationClass_1().createNode(applicableConcept), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086197\", intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration\", false, false), \"applicableConcept\", false);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_0().createNode(applicableConcept), node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1179767203738\");\n  }","id":18097,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration\", false, false), \"applicableConcept\", false);\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086193\", true), new QuotationClass_0().createNode(applicableConcept), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086188\", intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode selectedNodes, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = selectedNodes;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(selectedNodes, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1189583398422\", true), new QuotationClass_7().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1189583402141\", intentionProvider);\n    }\n  }","id":18098,"modified_method":"public void applyRule(final SNode selectedNodes, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = selectedNodes;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(selectedNodes, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1189583398422\", true), new QuotationClass_7().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1189583402141\", intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode ancestor = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellMenuPart_AbstractGroup\", false, false);\n    SNode parameterObjectType = SLinkOperations.getTarget(ancestor, \"parameterObjectType\", true);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(parameterObjectType, node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1179767924849\");\n  }","id":18099,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode ancestor = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellMenuPart_AbstractGroup\", false, false);\n    SNode parameterObjectType = SLinkOperations.getTarget(ancestor, \"parameterObjectType\", true);\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086143\", true), parameterObjectType, _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086138\", intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode hostComponent = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.AbstractComponent\", false, false);\n    SNode editedConcept = SLinkOperations.getTarget(hostComponent, \"conceptDeclaration\", false);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_5().createNode(editedConcept), node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1179766709145\");\n  }","id":18100,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode hostComponent = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.AbstractComponent\", false, false);\n    SNode editedConcept = SLinkOperations.getTarget(hostComponent, \"conceptDeclaration\", false);\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086226\", true), new QuotationClass_5().createNode(editedConcept), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086221\", intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode hostMenuPart = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellMenuPart_Abstract\", false, false);\n    SNode editedFeature = CellMenuUtil.getEditedFeature(hostMenuPart);\n    if (SNodeOperations.isInstanceOf(editedFeature, \"jetbrains.mps.lang.structure.structure.LinkDeclaration\")) {\n      SNode conceptOfChild = SLinkOperations.getTarget(editedFeature, \"target\", false);\n      TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_3().createNode(conceptOfChild), node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1179782398208\");\n      return;\n    }\n    {\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().reportTypeError(node, \"couldn't define concept of child node\", \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1179782438058\", intentionProvider);\n    }\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_4().createNode(), node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1179766709137\");\n  }","id":18101,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode hostMenuPart = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellMenuPart_Abstract\", false, false);\n    SNode editedFeature = CellMenuUtil.getEditedFeature(hostMenuPart);\n    if (SNodeOperations.isInstanceOf(editedFeature, \"jetbrains.mps.lang.structure.structure.LinkDeclaration\")) {\n      SNode conceptOfChild = SLinkOperations.getTarget(editedFeature, \"target\", false);\n      {\n        SNode _nodeToCheck_1029348928467 = node;\n        BaseIntentionProvider intentionProvider = null;\n        typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086168\", true), new QuotationClass_3().createNode(conceptOfChild), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086163\", intentionProvider);\n      }\n      return;\n    }\n    {\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.reportTypeError(node, \"couldn't define concept of child node\", \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1179782438058\", intentionProvider);\n    }\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086251\", true), new QuotationClass_4().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086246\", intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode refNodeList = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList\", false, false);\n    if (SLinkOperations.getTarget(refNodeList, \"relationDeclaration\", false) != null) {\n      TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_6().createNode(SLinkOperations.getTarget(SLinkOperations.getTarget(refNodeList, \"relationDeclaration\", false), \"target\", false)), node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1182235608638\");\n    }\n  }","id":18102,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode refNodeList = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList\", false, false);\n    if (SLinkOperations.getTarget(refNodeList, \"relationDeclaration\", false) != null) {\n      {\n        SNode _nodeToCheck_1029348928467 = node;\n        BaseIntentionProvider intentionProvider = null;\n        typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086275\", true), new QuotationClass_6().createNode(SLinkOperations.getTarget(SLinkOperations.getTarget(refNodeList, \"relationDeclaration\", false), \"target\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086270\", intentionProvider);\n      }\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode conceptFunctionParameter_node, final TypeCheckingContext typeCheckingContext) {\n    SNode applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(conceptFunctionParameter_node, \"jetbrains.mps.lang.intentions.structure.IntentionDeclaration\", false, false), \"forConcept\", false);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_0().createNode(applicableConcept), conceptFunctionParameter_node, \"r:00000000-0000-4000-0000-011c89590351(jetbrains.mps.lang.intentions.helgins)\", \"1192798450074\");\n  }","id":18103,"modified_method":"public void applyRule(final SNode conceptFunctionParameter_node, final TypeCheckingContext typeCheckingContext) {\n    SNode applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(conceptFunctionParameter_node, \"jetbrains.mps.lang.intentions.structure.IntentionDeclaration\", false, false), \"forConcept\", false);\n    {\n      SNode _nodeToCheck_1029348928467 = conceptFunctionParameter_node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(conceptFunctionParameter_node, \"r:00000000-0000-4000-0000-011c89590351(jetbrains.mps.lang.intentions.helgins)\", \"1223982145703\", true), new QuotationClass_0().createNode(applicableConcept), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590351(jetbrains.mps.lang.intentions.helgins)\", \"1223982145698\", intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.BaseEditorComponent\", false, false), \"conceptDeclaration\", false);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_2().createNode(applicableConcept), node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1179766966421\");\n  }","id":18104,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode applicableConcept = SLinkOperations.getTarget(SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.editor.structure.BaseEditorComponent\", false, false), \"conceptDeclaration\", false);\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086119\", true), new QuotationClass_2().createNode(applicableConcept), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1223982086114\", intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequationStrong(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(nodeToCheck, \"editorContext\", true), \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1201270098250\", true), new QuotationClass_8().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1201270048564\", false, 0, intentionProvider);\n    }\n  }","id":18105,"modified_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createLessThanInequationStrong(typeCheckingContext.typeOf(SLinkOperations.getTarget(nodeToCheck, \"editorContext\", true), \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1201270098250\", true), new QuotationClass_8().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.helgins)\", \"1201270048564\", false, 0, intentionProvider);\n    }\n  }","commit_id":"cdb0548fa7ba25d5c109a1cfa3801471ca56a209","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode fm, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = fm;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(fm, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183657\", true), new QuotationClass_6().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183656\", false, 0, intentionProvider);\n    }\n  }","id":18106,"modified_method":"public void applyRule(final SNode fm, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = fm;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createLessThanInequation(typeCheckingContext.typeOf(SLinkOperations.getTarget(fm, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183657\", true), new QuotationClass_6().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183656\", false, 0, intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode fm, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = fm;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(fm, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183625\", true), new QuotationClass_2().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183624\", false, 0, intentionProvider);\n    }\n  }","id":18107,"modified_method":"public void applyRule(final SNode fm, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = fm;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createLessThanInequation(typeCheckingContext.typeOf(SLinkOperations.getTarget(fm, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183625\", true), new QuotationClass_2().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183624\", false, 0, intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode matchRegexpExpression, final TypeCheckingContext typeCheckingContext) {\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_7().createNode(), matchRegexpExpression, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1179358945232\");\n  }","id":18108,"modified_method":"public void applyRule(final SNode matchRegexpExpression, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = matchRegexpExpression;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(matchRegexpExpression, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1223981840547\", true), new QuotationClass_7().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1223981840542\", intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode mrs, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = mrs;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(mrs, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183616\", true), new QuotationClass_1().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183615\", false, 0, intentionProvider);\n    }\n  }","id":18109,"modified_method":"public void applyRule(final SNode mrs, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = mrs;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createLessThanInequation(typeCheckingContext.typeOf(SLinkOperations.getTarget(mrs, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183616\", true), new QuotationClass_1().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183615\", false, 0, intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode mvr, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = mvr;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(mvr, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1222428222364\", true), new QuotationClass_0().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1222428222362\", intentionProvider);\n    }\n  }","id":18110,"modified_method":"public void applyRule(final SNode mvr, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = mvr;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(mvr, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1222428222364\", true), new QuotationClass_0().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1222428222362\", intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode rr, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = rr;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(rr, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183634\", true), new QuotationClass_3().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183633\", false, 0, intentionProvider);\n    }\n  }","id":18111,"modified_method":"public void applyRule(final SNode rr, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = rr;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createLessThanInequation(typeCheckingContext.typeOf(SLinkOperations.getTarget(rr, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183634\", true), new QuotationClass_3().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183633\", false, 0, intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode se, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = se;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(se, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183643\", true), new QuotationClass_4().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183642\", false, 0, intentionProvider);\n    }\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_5().createNode(), se, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183649\");\n  }","id":18112,"modified_method":"public void applyRule(final SNode se, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = se;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createLessThanInequation(typeCheckingContext.typeOf(SLinkOperations.getTarget(se, \"expr\", true), \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183643\", true), new QuotationClass_4().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1178179183642\", false, 0, intentionProvider);\n    }\n    {\n      SNode _nodeToCheck_1029348928467 = se;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(se, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1223981840556\", true), new QuotationClass_5().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1223981840551\", intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491120336\", true), new QuotationClass_5().createNode(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(nodeToCheck))), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491123370\", intentionProvider);\n    }\n  }","id":18113,"modified_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491120336\", true), new QuotationClass_5().createNode(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(nodeToCheck))), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491123370\", intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    SNode parent = SNodeOperations.getParent(nodeToCheck);\n    String role = AttributesRolesUtil.getLinkRoleFromLinkAttributeRole(nodeToCheck.getRole_());\n    SNode linkDeclaration = AbstractConceptDeclaration_Behavior.call_findLinkDeclaration_1213877394467(SNodeOperations.getConceptDeclaration(parent), role);\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202486174317\", true), new QuotationClass_1().createNode(SLinkOperations.getTarget(linkDeclaration, \"target\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202486181555\", intentionProvider);\n    }\n  }","id":18114,"modified_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    SNode parent = SNodeOperations.getParent(nodeToCheck);\n    String role = AttributesRolesUtil.getLinkRoleFromLinkAttributeRole(nodeToCheck.getRole_());\n    SNode linkDeclaration = AbstractConceptDeclaration_Behavior.call_findLinkDeclaration_1213877394467(SNodeOperations.getConceptDeclaration(parent), role);\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202486174317\", true), new QuotationClass_1().createNode(SLinkOperations.getTarget(linkDeclaration, \"target\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202486181555\", intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    SNode attributedNode = SNodeOperations.getParent(nodeToCheck);\n    SNode parent = SNodeOperations.getParent(attributedNode);\n    if (parent == null) {\n      {\n        SNode _nodeToCheck_1029348928467 = nodeToCheck;\n        BaseIntentionProvider intentionProvider = null;\n        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491231736\", true), new QuotationClass_6().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491231731\", intentionProvider);\n      }\n    } else\n    {\n      String role = attributedNode.getRole_();\n      SNode linkDeclaration = AbstractConceptDeclaration_Behavior.call_findLinkDeclaration_1213877394467(SNodeOperations.getConceptDeclaration(parent), role);\n      {\n        SNode _nodeToCheck_1029348928467 = nodeToCheck;\n        BaseIntentionProvider intentionProvider = null;\n        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491231771\", true), new QuotationClass_7().createNode(SLinkOperations.getTarget(linkDeclaration, \"target\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491231762\", intentionProvider);\n      }\n    }\n  }","id":18115,"modified_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    SNode attributedNode = SNodeOperations.getParent(nodeToCheck);\n    SNode parent = SNodeOperations.getParent(attributedNode);\n    if (parent == null) {\n      {\n        SNode _nodeToCheck_1029348928467 = nodeToCheck;\n        BaseIntentionProvider intentionProvider = null;\n        typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491231736\", true), new QuotationClass_6().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491231731\", intentionProvider);\n      }\n    } else\n    {\n      String role = attributedNode.getRole_();\n      SNode linkDeclaration = AbstractConceptDeclaration_Behavior.call_findLinkDeclaration_1213877394467(SNodeOperations.getConceptDeclaration(parent), role);\n      {\n        SNode _nodeToCheck_1029348928467 = nodeToCheck;\n        BaseIntentionProvider intentionProvider = null;\n        typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491231771\", true), new QuotationClass_7().createNode(SLinkOperations.getTarget(linkDeclaration, \"target\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202491231762\", intentionProvider);\n      }\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode operation, final TypeCheckingContext typeCheckingContext) {\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_9().createNode(), operation, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1222262029411\");\n  }","id":18116,"modified_method":"public void applyRule(final SNode operation, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = operation;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(operation, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1223981840581\", true), new QuotationClass_9().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1223981840576\", intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode patternExpression, final TypeCheckingContext typeCheckingContext) {\n    SNode patternExpression1 = patternExpression;\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_0().createNode(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(patternExpression1, \"patternNode\", true))), patternExpression1, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1196515055997\");\n  }","id":18117,"modified_method":"public void applyRule(final SNode patternExpression, final TypeCheckingContext typeCheckingContext) {\n    SNode patternExpression1 = patternExpression;\n    {\n      SNode _nodeToCheck_1029348928467 = patternExpression;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(patternExpression1, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1223981705732\", true), new QuotationClass_0().createNode(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(patternExpression1, \"patternNode\", true))), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1223981705727\", intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    SNode attributedNode = SNodeOperations.getParent(nodeToCheck);\n    SNode parent = SNodeOperations.getParent(attributedNode);\n    if (parent == null) {\n      {\n        SNode _nodeToCheck_1029348928467 = nodeToCheck;\n        BaseIntentionProvider intentionProvider = null;\n        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488469553\", true), new QuotationClass_3().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488480088\", intentionProvider);\n      }\n    } else\n    {\n      String role = attributedNode.getRole_();\n      SNode linkDeclaration = AbstractConceptDeclaration_Behavior.call_findLinkDeclaration_1213877394467(SNodeOperations.getConceptDeclaration(parent), role);\n      {\n        SNode _nodeToCheck_1029348928467 = nodeToCheck;\n        BaseIntentionProvider intentionProvider = null;\n        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488496552\", true), new QuotationClass_4().createNode(SLinkOperations.getTarget(linkDeclaration, \"target\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488496543\", intentionProvider);\n      }\n    }\n  }","id":18118,"modified_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    SNode attributedNode = SNodeOperations.getParent(nodeToCheck);\n    SNode parent = SNodeOperations.getParent(attributedNode);\n    if (parent == null) {\n      {\n        SNode _nodeToCheck_1029348928467 = nodeToCheck;\n        BaseIntentionProvider intentionProvider = null;\n        typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488469553\", true), new QuotationClass_3().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488480088\", intentionProvider);\n      }\n    } else\n    {\n      String role = attributedNode.getRole_();\n      SNode linkDeclaration = AbstractConceptDeclaration_Behavior.call_findLinkDeclaration_1213877394467(SNodeOperations.getConceptDeclaration(parent), role);\n      {\n        SNode _nodeToCheck_1029348928467 = nodeToCheck;\n        BaseIntentionProvider intentionProvider = null;\n        typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488496552\", true), new QuotationClass_4().createNode(SLinkOperations.getTarget(linkDeclaration, \"target\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488496543\", intentionProvider);\n      }\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488170860\", true), new QuotationClass_2().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488174301\", intentionProvider);\n    }\n  }","id":18119,"modified_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488170860\", true), new QuotationClass_2().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590343(jetbrains.mps.lang.pattern.helgins)\", \"1202488174301\", intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode so, final TypeCheckingContext typeCheckingContext) {\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_8().createNode(), so, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1222260051562\");\n  }","id":18120,"modified_method":"public void applyRule(final SNode so, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = so;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(so, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1223981840522\", true), new QuotationClass_8().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c89590517(jetbrains.mps.baseLanguage.regexp.helgins)\", \"1223981840517\", intentionProvider);\n    }\n  }","commit_id":"11e3025108ae9ebd1e9d707285207810faa9493e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode parameter, final TypeCheckingContext typeCheckingContext) {\n    final SNode T_typevar_1178551166899 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();\n    {\n      SNode _nodeToCheck_1029348928467 = parameter;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(new QuotationClass_2().createNode(TypeChecker.getInstance().getEquationManager().getRepresentator(T_typevar_1178551166899)), TypeChecker.getInstance().getRuntimeSupport().typeOf(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179327748294\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179327739073\", intentionProvider);\n    }\n    {\n      SNode _nodeToCheck_1029348928467 = parameter;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(parameter, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179326834794\", true), TypeChecker.getInstance().getEquationManager().getRepresentator(T_typevar_1178551166899), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179326842470\", intentionProvider);\n    }\n  }","id":18121,"modified_method":"public void applyRule(final SNode parameter, final TypeCheckingContext typeCheckingContext) {\n    final SNode T_typevar_1178551166899 = typeCheckingContext.createNewRuntimeTypesVariable();\n    {\n      SNode _nodeToCheck_1029348928467 = parameter;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(new QuotationClass_2().createNode(typeCheckingContext.getEquationManager().getRepresentator(T_typevar_1178551166899)), typeCheckingContext.typeOf(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179327748294\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179327739073\", intentionProvider);\n    }\n    {\n      SNode _nodeToCheck_1029348928467 = parameter;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(parameter, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179326834794\", true), typeCheckingContext.getEquationManager().getRepresentator(T_typevar_1178551166899), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179326842470\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode expressionFunctionParam, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = expressionFunctionParam;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(expressionFunctionParam, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208192097\", true), new QuotationClass_10().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208192095\", intentionProvider);\n    }\n  }","id":18122,"modified_method":"public void applyRule(final SNode expressionFunctionParam, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = expressionFunctionParam;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(expressionFunctionParam, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208192097\", true), new QuotationClass_10().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208192095\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_26().createNode(), nodeToCheck, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1196768351890\");\n  }","id":18123,"modified_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToCheck;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToCheck, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223982595230\", true), new QuotationClass_26().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223982595225\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode index, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = index;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(index, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208188308\", true), new QuotationClass_8().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208188306\", intentionProvider);\n    }\n  }","id":18124,"modified_method":"public void applyRule(final SNode index, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = index;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(index, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208188308\", true), new QuotationClass_8().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208188306\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode param, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = param;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(param, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208184296\", true), SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getAncestor(param, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"treePathType\", true), \"nodeType\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208184294\", intentionProvider);\n    }\n  }","id":18125,"modified_method":"public void applyRule(final SNode param, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = param;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(param, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208184296\", true), SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getAncestor(param, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"treePathType\", true), \"nodeType\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208184294\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode param, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = param;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(param, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208173112\", true), SLinkOperations.getTarget(SNodeOperations.getAncestor(param, \"jetbrains.mps.ypath.structure.IParamFeature\", false, false), \"parameterType\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208173110\", intentionProvider);\n    }\n  }","id":18126,"modified_method":"public void applyRule(final SNode param, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = param;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(param, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208173112\", true), SLinkOperations.getTarget(SNodeOperations.getAncestor(param, \"jetbrains.mps.ypath.structure.IParamFeature\", false, false), \"parameterType\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208173110\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode prop, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = prop;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(prop, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288840926\", true), TypeChecker.getInstance().getRuntimeSupport().typeOf(SNodeOperations.getAncestor(prop, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288859999\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288835157\", intentionProvider);\n    }\n  }","id":18127,"modified_method":"public void applyRule(final SNode prop, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = prop;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(prop, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288840926\", true), typeCheckingContext.typeOf(SNodeOperations.getAncestor(prop, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288859999\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288835157\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode treeNodeKindReference, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = treeNodeKindReference;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(treeNodeKindReference, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179740518224\", true), new QuotationClass_6().createNode(TreePath_Behavior.call_getNodeType_1213877481303(SLinkOperations.getTarget(treeNodeKindReference, \"treePathAspect\", false))), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179740556071\", intentionProvider);\n    }\n  }","id":18128,"modified_method":"public void applyRule(final SNode treeNodeKindReference, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = treeNodeKindReference;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(treeNodeKindReference, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179740518224\", true), new QuotationClass_6().createNode(TreePath_Behavior.call_getNodeType_1213877481303(SLinkOperations.getTarget(treeNodeKindReference, \"treePathAspect\", false))), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1179740556071\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode kind, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = kind;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(kind, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184316264005\", true), TypeChecker.getInstance().getRuntimeSupport().typeOf(SNodeOperations.getAncestor(kind, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184316290748\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184316270386\", intentionProvider);\n    }\n  }","id":18129,"modified_method":"public void applyRule(final SNode kind, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = kind;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(kind, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184316264005\", true), typeCheckingContext.typeOf(SNodeOperations.getAncestor(kind, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184316290748\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184316270386\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode exp, final TypeCheckingContext typeCheckingContext) {\n    final SNode ExpType_typevar_1190288659521 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();\n    {\n      SNode _nodeToCheck_1029348928467 = exp;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(ExpType_typevar_1190288659521), TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(exp, \"expression\", true), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288685890\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288669877\", intentionProvider);\n    }\n    {\n      final SNode _representatorVar0 = TypeChecker.getInstance().getEquationManager().getRepresentator(ExpType_typevar_1190288659521);\n      TypeChecker.getInstance().getRuntimeSupport().whenConcrete(_representatorVar0, new Runnable() {\n\n        public void run() {\n          final SNode treePathType = SLinkOperations.getTarget(SLinkOperations.getTarget(exp, \"treepathAspect\", false), \"treePathType\", true);\n          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(ExpType_typevar_1190288659521), SLinkOperations.getTarget(treePathType, \"nodeType\", true)))) {\n            TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(exp, \"expression\", true), \"Incompatible type\", \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1196166858319\");\n          }\n          if ((SLinkOperations.getTarget(treePathType, \"nodeType\", true) != null)) {\n            TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_0().createNode(TypeChecker.getInstance().getEquationManager().getRepresentator(ExpType_typevar_1190288659521)), exp, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1196715484404\");\n          }\n        }\n\n      }, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288695814\");\n    }\n  }","id":18130,"modified_method":"public void applyRule(final SNode exp, final TypeCheckingContext typeCheckingContext) {\n    final SNode ExpType_typevar_1190288659521 = typeCheckingContext.createNewRuntimeTypesVariable();\n    {\n      SNode _nodeToCheck_1029348928467 = exp;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.getEquationManager().getRepresentator(ExpType_typevar_1190288659521), typeCheckingContext.typeOf(SLinkOperations.getTarget(exp, \"expression\", true), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288685890\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288669877\", intentionProvider);\n    }\n    {\n      final SNode _representatorVar0 = typeCheckingContext.getEquationManager().getRepresentator(ExpType_typevar_1190288659521);\n      TypeChecker.getInstance().getRuntimeSupport().whenConcrete(_representatorVar0, new Runnable() {\n\n        public void run() {\n          final SNode treePathType = SLinkOperations.getTarget(SLinkOperations.getTarget(exp, \"treepathAspect\", false), \"treePathType\", true);\n          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeCheckingContext.getEquationManager().getRepresentator(ExpType_typevar_1190288659521), SLinkOperations.getTarget(treePathType, \"nodeType\", true)))) {\n            TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(exp, \"expression\", true), \"Incompatible type\", \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1196166858319\");\n          }\n          if ((SLinkOperations.getTarget(treePathType, \"nodeType\", true) != null)) {\n            {\n              SNode _nodeToCheck_1029348928467 = exp;\n              BaseIntentionProvider intentionProvider = null;\n              typeCheckingContext.createEquation(typeCheckingContext.typeOf(exp, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223982595295\", true), new QuotationClass_0().createNode(typeCheckingContext.getEquationManager().getRepresentator(ExpType_typevar_1190288659521)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223982595290\", intentionProvider);\n            }\n          }\n        }\n\n      }, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1190288695814\");\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode aspect, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = aspect;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(aspect, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184578634207\", true), SLinkOperations.getTarget(aspect, \"treePathType\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184578634206\", intentionProvider);\n    }\n  }","id":18131,"modified_method":"public void applyRule(final SNode aspect, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = aspect;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(aspect, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184578634207\", true), SLinkOperations.getTarget(aspect, \"treePathType\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184578634206\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode tpCreator, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = tpCreator;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(tpCreator, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184578650091\", true), SLinkOperations.getTarget(tpCreator, \"treePathType\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184578650090\", intentionProvider);\n    }\n  }","id":18132,"modified_method":"public void applyRule(final SNode tpCreator, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = tpCreator;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(tpCreator, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184578650091\", true), SLinkOperations.getTarget(tpCreator, \"treePathType\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1184578650090\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode tptype, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = tptype;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(tptype, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208128037\", true), tptype, _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208128035\", intentionProvider);\n    }\n  }","id":18133,"modified_method":"public void applyRule(final SNode tptype, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = tptype;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(tptype, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208128037\", true), tptype, _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223208128035\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode value, final TypeCheckingContext typeCheckingContext) {\n    TypeChecker.getInstance().getRuntimeSupport().givetype(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getAncestor(value, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"treePathType\", true), \"nodeType\", true), value, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1183982168880\");\n  }","id":18134,"modified_method":"public void applyRule(final SNode value, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = value;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(value, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223982595255\", true), SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getAncestor(value, \"jetbrains.mps.ypath.structure.TreePath\", false, false), \"treePathType\", true), \"nodeType\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1223982595250\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode visitNodesStatement, final TypeCheckingContext typeCheckingContext) {\n    final SNode T_typevar_1180009898513 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();\n    {\n      SNode _nodeToCheck_1029348928467 = visitNodesStatement;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(visitNodesStatement, \"visitBlock\", true), \"expression\", true), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009367649\", true), new QuotationClass_7().createNode(TypeChecker.getInstance().getEquationManager().getRepresentator(T_typevar_1180009898513)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009374907\", false, 0, intentionProvider);\n    }\n    {\n      SNode _nodeToCheck_1029348928467 = visitNodesStatement;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(visitNodesStatement, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009856000\", true), TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(visitNodesStatement, \"visitBlock\", true), \"expression\", true), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009865622\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009862290\", intentionProvider);\n    }\n  }","id":18135,"modified_method":"public void applyRule(final SNode visitNodesStatement, final TypeCheckingContext typeCheckingContext) {\n    final SNode T_typevar_1180009898513 = typeCheckingContext.createNewRuntimeTypesVariable();\n    {\n      SNode _nodeToCheck_1029348928467 = visitNodesStatement;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createLessThanInequation(typeCheckingContext.typeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(visitNodesStatement, \"visitBlock\", true), \"expression\", true), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009367649\", true), new QuotationClass_7().createNode(typeCheckingContext.getEquationManager().getRepresentator(T_typevar_1180009898513)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009374907\", false, 0, intentionProvider);\n    }\n    {\n      SNode _nodeToCheck_1029348928467 = visitNodesStatement;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(visitNodesStatement, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009856000\", true), typeCheckingContext.typeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(visitNodesStatement, \"visitBlock\", true), \"expression\", true), \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009865622\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895905aa(jetbrains.mps.ypath.helgins)\", \"1180009862290\", intentionProvider);\n    }\n  }","commit_id":"a00795e765d7855a35b8cdd5795ac8081433839c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    SNode builder = SNodeOperations.getAncestor(nodeToCheck, \"jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder\", false, false);\n    SNode substituteConcept = SLinkOperations.getTarget(builder, \"applicableConcept\", false);\n    SNode conceptToAdd = SLinkOperations.getTarget(nodeToCheck, \"concept\", false);\n    if (!(SConceptOperations.isSubConceptOf(conceptToAdd, NameUtil.nodeFQName(substituteConcept)))) {\n      {\n        BaseIntentionProvider intentionProvider = null;\n        TypeChecker.getInstance().reportTypeError(nodeToCheck, \"Wrong concept to add. Use subtype of \" + SPropertyOperations.getString(substituteConcept, \"name\"), \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1197896061431\", intentionProvider);\n      }\n    }\n  }","id":18136,"modified_method":"public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {\n    SNode builder = SNodeOperations.getAncestor(nodeToCheck, \"jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder\", false, false);\n    SNode substituteConcept = SLinkOperations.getTarget(builder, \"applicableConcept\", false);\n    SNode conceptToAdd = SLinkOperations.getTarget(nodeToCheck, \"concept\", false);\n    if (!(SConceptOperations.isSubConceptOf(conceptToAdd, NameUtil.nodeFQName(substituteConcept)))) {\n      {\n        BaseIntentionProvider intentionProvider = null;\n        typeCheckingContext.reportTypeError(nodeToCheck, \"Wrong concept to add. Use subtype of \" + SPropertyOperations.getString(substituteConcept, \"name\"), \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1197896061431\", intentionProvider);\n      }\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode builder = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder\", false, false);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_2().createNode(SLinkOperations.getTarget(builder, \"applicableConcept\", false)), node, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1180046146718\");\n  }","id":18137,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode builder = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder\", false, false);\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503151\", true), new QuotationClass_2().createNode(SLinkOperations.getTarget(builder, \"applicableConcept\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503146\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(node, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1221137387963\", true), new QuotationClass_5().createNode(SLinkOperations.getTarget(ConceptFunctionParameter_nodeToPasteWrap_Behavior.call_getWrapper_1221137356128(node), \"sourceConcept\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1221137397106\", intentionProvider);\n    }\n  }","id":18138,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1221137387963\", true), new QuotationClass_5().createNode(SLinkOperations.getTarget(ConceptFunctionParameter_nodeToPasteWrap_Behavior.call_getWrapper_1221137356128(node), \"sourceConcept\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1221137397106\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode nodeToWrap, final TypeCheckingContext typeCheckingContext) {\n    SNode menu = SNodeOperations.getAncestor(nodeToWrap, \"jetbrains.mps.lang.actions.structure.WrapperSubstituteMenuPart\", false, false);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_0().createNode(SLinkOperations.getTarget(menu, \"wrappedConcept\", false)), nodeToWrap, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1180046146686\");\n  }","id":18139,"modified_method":"public void applyRule(final SNode nodeToWrap, final TypeCheckingContext typeCheckingContext) {\n    SNode menu = SNodeOperations.getAncestor(nodeToWrap, \"jetbrains.mps.lang.actions.structure.WrapperSubstituteMenuPart\", false, false);\n    {\n      SNode _nodeToCheck_1029348928467 = nodeToWrap;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToWrap, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503218\", true), new QuotationClass_0().createNode(SLinkOperations.getTarget(menu, \"wrappedConcept\", false)), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503213\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode parameter, final TypeCheckingContext typeCheckingContext) {\n    if (SLinkOperations.getTarget(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.lang.actions.structure.ParameterizedSubstituteMenuPart\", false, false), \"type\", true) != null) {\n      TypeChecker.getInstance().getRuntimeSupport().givetype(SLinkOperations.getTarget(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.lang.actions.structure.ParameterizedSubstituteMenuPart\", false, false), \"type\", true), parameter, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1180046146642\");\n      return;\n    }\n    if (SLinkOperations.getTarget(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.lang.actions.structure.ParameterizedSideTransformMenuPart\", false, false), \"type\", true) != null) {\n      TypeChecker.getInstance().getRuntimeSupport().givetype(SLinkOperations.getTarget(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.lang.actions.structure.ParameterizedSideTransformMenuPart\", false, false), \"type\", true), parameter, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1180046146661\");\n      return;\n    }\n  }","id":18140,"modified_method":"public void applyRule(final SNode parameter, final TypeCheckingContext typeCheckingContext) {\n    if (SLinkOperations.getTarget(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.lang.actions.structure.ParameterizedSubstituteMenuPart\", false, false), \"type\", true) != null) {\n      {\n        SNode _nodeToCheck_1029348928467 = parameter;\n        BaseIntentionProvider intentionProvider = null;\n        typeCheckingContext.createEquation(typeCheckingContext.typeOf(parameter, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503209\", true), SLinkOperations.getTarget(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.lang.actions.structure.ParameterizedSubstituteMenuPart\", false, false), \"type\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503204\", intentionProvider);\n      }\n      return;\n    }\n    if (SLinkOperations.getTarget(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.lang.actions.structure.ParameterizedSideTransformMenuPart\", false, false), \"type\", true) != null) {\n      {\n        SNode _nodeToCheck_1029348928467 = parameter;\n        BaseIntentionProvider intentionProvider = null;\n        typeCheckingContext.createEquation(typeCheckingContext.typeOf(parameter, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503126\", true), SLinkOperations.getTarget(SNodeOperations.getAncestor(parameter, \"jetbrains.mps.lang.actions.structure.ParameterizedSideTransformMenuPart\", false, false), \"type\", true), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503121\", intentionProvider);\n      }\n      return;\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode result, final TypeCheckingContext typeCheckingContext) {\n    SNode conceptOfResult = SLinkOperations.getTarget(SNodeOperations.getAncestor(result, \"jetbrains.mps.lang.actions.structure.ConceptRightTransformPart\", false, false), \"concept\", false);\n    {\n      SNode _nodeToCheck_1029348928467 = result;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(result, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1219184766217\", true), new QuotationClass_1().createNode(conceptOfResult), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1219184766215\", intentionProvider);\n    }\n  }","id":18141,"modified_method":"public void applyRule(final SNode result, final TypeCheckingContext typeCheckingContext) {\n    SNode conceptOfResult = SLinkOperations.getTarget(SNodeOperations.getAncestor(result, \"jetbrains.mps.lang.actions.structure.ConceptRightTransformPart\", false, false), \"concept\", false);\n    {\n      SNode _nodeToCheck_1029348928467 = result;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(result, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1219184766217\", true), new QuotationClass_1().createNode(conceptOfResult), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1219184766215\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode moneyCreator, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyCreator;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(moneyCreator, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187621956855\", true), new QuotationClass_8().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187621962983\", intentionProvider);\n    }\n  }","id":18142,"modified_method":"public void applyRule(final SNode moneyCreator, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyCreator;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(moneyCreator, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187621956855\", true), new QuotationClass_8().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187621962983\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode moneyGetAmountMethodCall, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyGetAmountMethodCall;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(moneyGetAmountMethodCall, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187360103766\", true), new QuotationClass_5().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187360077368\", intentionProvider);\n    }\n  }","id":18143,"modified_method":"public void applyRule(final SNode moneyGetAmountMethodCall, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyGetAmountMethodCall;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(moneyGetAmountMethodCall, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187360103766\", true), new QuotationClass_5().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187360077368\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode moneyGetCurrencyMethodCall, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyGetCurrencyMethodCall;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(moneyGetCurrencyMethodCall, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187360333780\", true), new QuotationClass_6().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187360333778\", intentionProvider);\n    }\n  }","id":18144,"modified_method":"public void applyRule(final SNode moneyGetCurrencyMethodCall, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyGetCurrencyMethodCall;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(moneyGetCurrencyMethodCall, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187360333780\", true), new QuotationClass_6().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187360333778\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode moneyIsZeroMethodCall, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyIsZeroMethodCall;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(moneyIsZeroMethodCall, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187618229155\", true), new QuotationClass_7().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187618239848\", intentionProvider);\n    }\n  }","id":18145,"modified_method":"public void applyRule(final SNode moneyIsZeroMethodCall, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyIsZeroMethodCall;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(moneyIsZeroMethodCall, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187618229155\", true), new QuotationClass_7().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187618239848\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode moneyLiteral, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyLiteral;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(moneyLiteral, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187622281045\", true), new QuotationClass_9().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187622287642\", intentionProvider);\n    }\n  }","id":18146,"modified_method":"public void applyRule(final SNode moneyLiteral, final TypeCheckingContext typeCheckingContext) {\n    {\n      SNode _nodeToCheck_1029348928467 = moneyLiteral;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(moneyLiteral, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187622281045\", true), new QuotationClass_9().createNode(), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895903f6(jetbrains.mps.baseLanguage.money.helgins)\", \"1187622287642\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode hostFactory = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.actions.structure.NodeFactory\", false, false);\n    SNode applicableConcept = SLinkOperations.getTarget(hostFactory, \"applicableConcept\", false);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_4().createNode(applicableConcept), node, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1180046823644\");\n  }","id":18147,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode hostFactory = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.actions.structure.NodeFactory\", false, false);\n    SNode applicableConcept = SLinkOperations.getTarget(hostFactory, \"applicableConcept\", false);\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503184\", true), new QuotationClass_4().createNode(applicableConcept), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503179\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode hostBuilder = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder\", false, false);\n    SNode applicableConcept = SLinkOperations.getTarget(hostBuilder, \"applicableConcept\", false);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_3().createNode(applicableConcept), node, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1180046610346\");\n  }","id":18148,"modified_method":"public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext) {\n    SNode hostBuilder = SNodeOperations.getAncestor(node, \"jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder\", false, false);\n    SNode applicableConcept = SLinkOperations.getTarget(hostBuilder, \"applicableConcept\", false);\n    {\n      SNode _nodeToCheck_1029348928467 = node;\n      BaseIntentionProvider intentionProvider = null;\n      typeCheckingContext.createEquation(typeCheckingContext.typeOf(node, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503175\", true), new QuotationClass_3().createNode(applicableConcept), _nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.helgins)\", \"1223982503170\", intentionProvider);\n    }\n  }","commit_id":"54eaea505509cde78dfc442d4ae63c05b6c20f67","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  synchronized\n  public BatchOperationResult execute(List<WriteOperation> writes)\n      throws BatchOperationException {\n    Log.debug(\"Received Batch of \" + writes.size() + \"WriteOperations: \");\n    List<TWriteOperation> tWrites = Lists.newArrayList();\n    for (WriteOperation writeOp : writes) {\n      Log.debug(\"  WriteOperation: \" + writeOp.toString());\n      TWriteOperation tWriteOp = new TWriteOperation();\n      if (writeOp instanceof Write)\n        tWriteOp.setWrite(wrap((Write)writeOp));\n      else if (writeOp instanceof Delete)\n        tWriteOp.setDelet(wrap((Delete)writeOp));\n      else if (writeOp instanceof Increment)\n        tWriteOp.setIncrement(wrap((Increment) writeOp));\n      else if (writeOp instanceof CompareAndSwap)\n        tWriteOp.setCompareAndSwap(wrap((CompareAndSwap) writeOp));\n      else if (writeOp instanceof QueueEnqueue)\n        tWriteOp.setQueueEnqueue(wrap((QueueEnqueue) writeOp));\n      else if (writeOp instanceof QueueAck)\n        tWriteOp.setQueueAck(wrap((QueueAck) writeOp));\n      else {\n        Log.error(\"Internal Error: Received an unknown WriteOperation of class \"\n            + writeOp.getClass().getName() + \".\");\n        continue;\n      }\n      tWrites.add(tWriteOp);\n    }\n    try {\n      Log.debug(\"Sending Batch: \" + Arrays.toString(writes.toArray()));\n      TBatchOperationResult result = client.batch(tWrites);\n      Log.debug(\"Result of Batch: \" + result);\n      return new BatchOperationResult(result.isSuccess(), result.getMessage());\n    } catch (TBatchOperationException e) {\n      throw new BatchOperationException(e.getMessage(), e);\n    } catch (TException e) {\n      throw new BatchOperationException(e.getMessage(), e);\n    }\n  }","id":18149,"modified_method":"@Override\n  public BatchOperationResult execute(List<WriteOperation> writes)\n      throws BatchOperationException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received Batch of \" + writes.size() + \"WriteOperations: \");\n    List<TWriteOperation> tWrites = Lists.newArrayList();\n    for (WriteOperation writeOp : writes) {\n      if (Log.isDebugEnabled())\n        Log.debug(\"  WriteOperation: \" + writeOp.toString());\n      TWriteOperation tWriteOp = new TWriteOperation();\n      if (writeOp instanceof Write)\n        tWriteOp.setWrite(wrap((Write)writeOp));\n      else if (writeOp instanceof Delete)\n        tWriteOp.setDelet(wrap((Delete)writeOp));\n      else if (writeOp instanceof Increment)\n        tWriteOp.setIncrement(wrap((Increment) writeOp));\n      else if (writeOp instanceof CompareAndSwap)\n        tWriteOp.setCompareAndSwap(wrap((CompareAndSwap) writeOp));\n      else if (writeOp instanceof QueueEnqueue)\n        tWriteOp.setQueueEnqueue(wrap((QueueEnqueue) writeOp));\n      else if (writeOp instanceof QueueAck)\n        tWriteOp.setQueueAck(wrap((QueueAck) writeOp));\n      else {\n        Log.error(\"Internal Error: Received an unknown WriteOperation of class \"\n            + writeOp.getClass().getName() + \".\");\n        continue;\n      }\n      tWrites.add(tWriteOp);\n    }\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending Batch: \" + Arrays.toString(writes.toArray()));\n      TBatchOperationResult result = client.batch(tWrites);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of Batch: \" + result);\n      return new BatchOperationResult(result.isSuccess(), result.getMessage());\n    } catch (TBatchOperationException e) {\n      throw new BatchOperationException(e.getMessage(), e);\n    } catch (TException e) {\n      throw new BatchOperationException(e.getMessage(), e);\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public boolean execute(CompareAndSwap compareAndSwap) {\n    try {\n      Log.debug(\"Received \" + compareAndSwap);\n      TCompareAndSwap tCompareAndSwap = wrap(compareAndSwap);\n      Log.debug(\"Sending \" + tCompareAndSwap);\n      boolean result = client.compareAndSwap(tCompareAndSwap);\n      Log.debug(\"Result of TCompareAndSwap: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for CompareAndSwap for key '\" +\n          new String(compareAndSwap.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","id":18150,"modified_method":"@Override\n  public boolean execute(CompareAndSwap compareAndSwap) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + compareAndSwap);\n      TCompareAndSwap tCompareAndSwap = wrap(compareAndSwap);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tCompareAndSwap);\n      boolean result = client.compareAndSwap(tCompareAndSwap);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TCompareAndSwap: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for CompareAndSwap for key '\" +\n          new String(compareAndSwap.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public QueueAdmin.QueueMeta execute(QueueAdmin.GetQueueMeta getQueueMeta) {\n    try {\n      Log.debug(\"Received \" + getQueueMeta);\n      TGetQueueMeta tGetQueueMeta = wrap(getQueueMeta);\n      Log.debug(\"Sending \" + tGetQueueMeta);\n      TQueueMeta tQueueMeta = client.getQueueMeta(tGetQueueMeta);\n      Log.debug(\"Result of TGetQueueMeta: \" + tQueueMeta);\n      return unwrap(tQueueMeta);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for GetQueueMeta failed for queue \" +\n          new String(getQueueMeta.getQueueName()) + \": \" + e.getMessage());\n      return null; // TODO execute() must be able to return an error\n    }\n  }","id":18151,"modified_method":"@Override\n  public QueueAdmin.QueueMeta execute(QueueAdmin.GetQueueMeta getQueueMeta) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + getQueueMeta);\n      TGetQueueMeta tGetQueueMeta = wrap(getQueueMeta);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tGetQueueMeta);\n      TQueueMeta tQueueMeta = client.getQueueMeta(tGetQueueMeta);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TGetQueueMeta: \" + tQueueMeta);\n      return unwrap(tQueueMeta);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for GetQueueMeta failed for queue \" +\n          new String(getQueueMeta.getQueueName()) + \": \" + e.getMessage());\n      return null; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public long execute(QueueAdmin.GetGroupID getGroupId) {\n    try {\n      Log.debug(\"Received \" + getGroupId);\n      TGetGroupId tGetGroupId = wrap(getGroupId);\n      Log.debug(\"Sending \" + tGetGroupId);\n      long result = client.getGroupId(tGetGroupId);\n      Log.debug(\"Result of TGetGroupId: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for GetGroupId failed for queue \" +\n          new String(getGroupId.getQueueName()) + \": \" + e.getMessage());\n      return 0; // TODO execute() must be able to return an error\n    }\n  }","id":18152,"modified_method":"@Override\n  public long execute(QueueAdmin.GetGroupID getGroupId) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + getGroupId);\n      TGetGroupId tGetGroupId = wrap(getGroupId);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tGetGroupId);\n      long result = client.getGroupId(tGetGroupId);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TGetGroupId: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for GetGroupId failed for queue \" +\n          new String(getGroupId.getQueueName()) + \": \" + e.getMessage());\n      return 0; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public boolean execute(QueueEnqueue enqueue) {\n    try {\n      Log.debug(\"Received \" + enqueue);\n      TQueueEnqueue tQueueEnqueue = wrap(enqueue);\n      Log.debug(\"Sending \" + tQueueEnqueue);\n      boolean result = client.queueEnqueue(tQueueEnqueue);\n      Log.debug(\"Result of TQueueEnqueue: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for QueueEnqueue for queue '\" +\n          new String(enqueue.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","id":18153,"modified_method":"@Override\n  public boolean execute(QueueEnqueue enqueue) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + enqueue);\n      TQueueEnqueue tQueueEnqueue = wrap(enqueue);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tQueueEnqueue);\n      boolean result = client.queueEnqueue(tQueueEnqueue);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TQueueEnqueue: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for QueueEnqueue for queue '\" +\n          new String(enqueue.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public boolean execute(Increment increment) {\n    try {\n      Log.debug(\"Received \" + increment);\n      TIncrement tIncrement = wrap(increment);\n      Log.debug(\"Sending \" + tIncrement);\n      boolean result = client.increment(tIncrement);\n      Log.debug(\"Result of TIncrement: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for Increment for key '\" +\n          new String(increment.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","id":18154,"modified_method":"@Override\n  public boolean execute(Increment increment) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + increment);\n      TIncrement tIncrement = wrap(increment);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tIncrement);\n      boolean result = client.increment(tIncrement);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TIncrement: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for Increment for key '\" +\n          new String(increment.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public DequeueResult execute(QueueDequeue dequeue) {\n    try {\n      Log.debug(\"Received \" + dequeue);\n      TQueueDequeue tDequeue = wrap(dequeue);\n      Log.debug(\"Sending \" + tDequeue);\n      TDequeueResult tDequeueResult = client.dequeue(tDequeue);\n      Log.debug(\"Result of TDequeue: \" + tDequeueResult);\n      return unwrap(tDequeueResult);\n    } catch (TException e) {\n      String message = \"Thrift Call for QueueDequeue failed for queue \" +\n          new String(dequeue.getKey()) + \": \" + e.getMessage();\n      Log.error(message);\n      return new DequeueResult(DequeueResult.DequeueStatus.FAILURE, message);\n    }\n  }","id":18155,"modified_method":"@Override\n  public DequeueResult execute(QueueDequeue dequeue) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + dequeue);\n      TQueueDequeue tDequeue = wrap(dequeue);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tDequeue);\n      TDequeueResult tDequeueResult = client.dequeue(tDequeue);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TDequeue: \" + tDequeueResult);\n      return unwrap(tDequeueResult);\n    } catch (TException e) {\n      String message = \"Thrift Call for QueueDequeue failed for queue \" +\n          new String(dequeue.getKey()) + \": \" + e.getMessage();\n      Log.error(message);\n      return new DequeueResult(DequeueResult.DequeueStatus.FAILURE, message);\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public boolean execute(Delete delete) {\n    try {\n      Log.debug(\"Received \" + delete);\n      TDelete tDelete = wrap(delete);\n      Log.debug(\"Sending \" + tDelete);\n      boolean result = client.delet(tDelete);\n      Log.debug(\"Result of TDelete: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for Delete for key '\" + new String(delete.getKey())\n          + \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","id":18156,"modified_method":"@Override\n  public boolean execute(Delete delete) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + delete);\n      TDelete tDelete = wrap(delete);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tDelete);\n      boolean result = client.delet(tDelete);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TDelete: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for Delete for key '\" + new String(delete.getKey())\n          + \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public Map<byte[], byte[]> execute(Read read) {\n    try {\n      Log.debug(\"Received \" + read);\n      TRead tRead = wrap(read);\n      Log.debug(\"Sending \" + tRead);\n      TOptionalBinaryMap result = client.read(tRead);\n      Log.debug(\"Result of TRead: \" + result);\n      return unwrap(result);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for Read for key '\" +\n          new String(read.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return null; // TODO execute() must be able to return an error\n    }\n  }","id":18157,"modified_method":"@Override\n  public Map<byte[], byte[]> execute(Read read) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + read);\n      TRead tRead = wrap(read);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tRead);\n      TOptionalBinaryMap result = client.read(tRead);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TRead: \" + result);\n      return unwrap(result);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for Read for key '\" +\n          new String(read.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return null; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public void execute(ClearFabric clearFabric) {\n    try {\n      Log.debug(\"Received \" + clearFabric);\n      TClearFabric tClearFabric = wrap(clearFabric);\n      Log.debug(\"Sending \" + tClearFabric);\n      client.clearFabric(tClearFabric);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for ClearFabric failed with message: \" +\n          e.getMessage());\n      // TODO execute() must be able to return an error\n    }\n  }","id":18158,"modified_method":"@Override\n  public void execute(ClearFabric clearFabric) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + clearFabric);\n      TClearFabric tClearFabric = wrap(clearFabric);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tClearFabric);\n      client.clearFabric(tClearFabric);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for ClearFabric failed with message: \" +\n          e.getMessage());\n      // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public boolean execute(QueueAck ack) {\n    try {\n      Log.debug(\"Received \" + ack);\n      TQueueAck tQueueAck = wrap(ack);\n      Log.debug(\"Sending \" + tQueueAck);\n      boolean result = client.queueAck(tQueueAck);\n      Log.debug(\"Result of TQueueAck: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for QueueAck for queue '\" +\n          new String(ack.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","id":18159,"modified_method":"@Override\n  public boolean execute(QueueAck ack) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + ack);\n      TQueueAck tQueueAck = wrap(ack);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tQueueAck);\n      boolean result = client.queueAck(tQueueAck);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TQueueAck: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for QueueAck for queue '\" +\n          new String(ack.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public Map<byte[], byte[]> execute(ReadColumnRange readColumnRange) {\n    try {\n      Log.debug(\"Received \" + readColumnRange);\n      TReadColumnRange tReadColumnRange = wrap(readColumnRange);\n      Log.debug(\"Sending \" + tReadColumnRange);\n      TOptionalBinaryMap result = client.readColumnRange(tReadColumnRange);\n      Log.debug(\"Result of TReadColumnRange: \" + result);\n      return unwrap(result);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for ReadColumnRange for key '\" +\n          new String(readColumnRange.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return null; // TODO execute() must be able to return an error\n    }\n  }","id":18160,"modified_method":"@Override\n  public Map<byte[], byte[]> execute(ReadColumnRange readColumnRange) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + readColumnRange);\n      TReadColumnRange tReadColumnRange = wrap(readColumnRange);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tReadColumnRange);\n      TOptionalBinaryMap result = client.readColumnRange(tReadColumnRange);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TReadColumnRange: \" + result);\n      return unwrap(result);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for ReadColumnRange for key '\" +\n          new String(readColumnRange.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return null; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  // synchronized\n  public byte[] execute(ReadKey readKey) {\n    try {\n      Log.debug(\"Received \" + readKey);\n      TReadKey tReadKey = wrap(readKey);\n      Log.debug(\"Sending \" + tReadKey);\n      TOptionalBinary result = client.readKey(tReadKey);\n      Log.debug(\"Result of TReadKey: \" + result);\n      return unwrap(result);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for ReadKey for key '\" +\n          new String(readKey.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return null; // TODO execute() must be able to return an error\n    }\n  }","id":18161,"modified_method":"@Override\n  public byte[] execute(ReadKey readKey) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + readKey);\n      TReadKey tReadKey = wrap(readKey);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tReadKey);\n      TOptionalBinary result = client.readKey(tReadKey);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TReadKey: \" + result);\n      return unwrap(result);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for ReadKey for key '\" +\n          new String(readKey.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return null; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  synchronized\n  public List<byte[]> execute(ReadAllKeys readKeys) {\n    try {\n      Log.debug(\"Received \" + readKeys);\n      TReadAllKeys tReadAllKeys = wrap(readKeys);\n      Log.debug(\"Sending \" + tReadAllKeys);\n      TOptionalBinaryList result = client.readAllKeys(tReadAllKeys);\n      Log.debug(\"Result of TReadAllKeys: \" + result);\n      return unwrap(result);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for ReadAllKeys(\" + readKeys.getOffset() + \", \" +\n          readKeys.getLimit() + \") failed with message: \" + e.getMessage());\n      return new ArrayList<byte[]>(0);\n      // TODO execute() must be able to return an error\n    }\n  }","id":18162,"modified_method":"@Override\n  public List<byte[]> execute(ReadAllKeys readKeys) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + readKeys);\n      TReadAllKeys tReadAllKeys = wrap(readKeys);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tReadAllKeys);\n      TOptionalBinaryList result = client.readAllKeys(tReadAllKeys);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TReadAllKeys: \" + result);\n      return unwrap(result);\n    } catch (TException e) {\n      Log.error(\"Thrift Call for ReadAllKeys(\" + readKeys.getOffset() + \", \" +\n          readKeys.getLimit() + \") failed with message: \" + e.getMessage());\n      return new ArrayList<byte[]>(0);\n      // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  // synchronized\n  public boolean execute(Write write) {\n    try {\n      Log.debug(\"Received \" + write);\n      TWrite tWrite = wrap(write);\n      Log.debug(\"Sending \" + tWrite);\n      boolean result = client.write(tWrite);\n      Log.debug(\"Result of TWrite: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for Write for key '\" + new String(write.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","id":18163,"modified_method":"@Override\n  public boolean execute(Write write) {\n    try {\n      if (Log.isDebugEnabled())\n        Log.debug(\"Received \" + write);\n      TWrite tWrite = wrap(write);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Sending \" + tWrite);\n      boolean result = client.write(tWrite);\n      if (Log.isDebugEnabled())\n        Log.debug(\"Result of TWrite: \" + result);\n      return result;\n    } catch (TException e) {\n      Log.error(\"Thrift Call for Write for key '\" + new String(write.getKey()) +\n          \"' failed with message: \" + e.getMessage());\n      return false; // TODO execute() must be able to return an error\n    }\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public TOptionalBinaryMap\n  readColumnRange(TReadColumnRange tReadColumnRange) throws TException {\n    Log.debug(\"Received TReadColumnRange\");\n    return wrapMap(this.opex.execute(unwrap(tReadColumnRange)));\n  }","id":18164,"modified_method":"@Override\n  public TOptionalBinaryMap\n  readColumnRange(TReadColumnRange tReadColumnRange) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TReadColumnRange: \" + tReadColumnRange);\n    ReadColumnRange readColumnRange = unwrap(tReadColumnRange);\n    Map<byte[], byte[]> result = this.opex.execute(readColumnRange);\n    TOptionalBinaryMap tResult = wrapMap(result);\n    if (Log.isDebugEnabled())\n      Log.debug(\"ReadColumnRange result: \" + tResult);\n    return tResult;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public TBatchOperationResult batch(List<TWriteOperation> batch)\n      throws TBatchOperationException, TException {\n    Log.debug(\"Received Batch\");\n    List<WriteOperation> writes = new ArrayList<WriteOperation>(batch.size());\n    for (TWriteOperation tWriteOp : batch) {\n      WriteOperation writeOp;\n      if (tWriteOp.isSetWrite())\n        writeOp = unwrap(tWriteOp.getWrite());\n      else if (tWriteOp.isSetDelet())\n        writeOp = unwrap(tWriteOp.getDelet());\n      else if (tWriteOp.isSetIncrement())\n        writeOp = unwrap(tWriteOp.getIncrement());\n      else if (tWriteOp.isSetCompareAndSwap())\n        writeOp = unwrap(tWriteOp.getCompareAndSwap());\n      else if (tWriteOp.isSetQueueEnqueue())\n        writeOp = new QueueEnqueue(tWriteOp.getQueueEnqueue().getQueueName(),\n            tWriteOp.getQueueEnqueue().getValue());\n      else if (tWriteOp.isSetQueueAck())\n        writeOp = unwrap(tWriteOp.getQueueAck());\n      else {\n        Log.error(\"Internal Error: Unkown TWriteOperation \"\n            + tWriteOp.toString() + \" in batch. Skipping.\");\n        continue;\n      }\n      writes.add(writeOp);\n    }\n    BatchOperationResult result;\n    try {\n      result = this.opex.execute(writes);\n    } catch (BatchOperationException e) {\n      throw new TBatchOperationException(e.getMessage());\n    }\n    return new TBatchOperationResult(result.isSuccess(), result.getMessage());\n  }","id":18165,"modified_method":"@Override\n  public TBatchOperationResult batch(List<TWriteOperation> batch)\n      throws TBatchOperationException, TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received Batch\");\n    List<WriteOperation> writes = new ArrayList<WriteOperation>(batch.size());\n    for (TWriteOperation tWriteOp : batch) {\n      WriteOperation writeOp;\n      if (tWriteOp.isSetWrite())\n        writeOp = unwrap(tWriteOp.getWrite());\n      else if (tWriteOp.isSetDelet())\n        writeOp = unwrap(tWriteOp.getDelet());\n      else if (tWriteOp.isSetIncrement())\n        writeOp = unwrap(tWriteOp.getIncrement());\n      else if (tWriteOp.isSetCompareAndSwap())\n        writeOp = unwrap(tWriteOp.getCompareAndSwap());\n      else if (tWriteOp.isSetQueueEnqueue())\n        writeOp = new QueueEnqueue(tWriteOp.getQueueEnqueue().getQueueName(),\n            tWriteOp.getQueueEnqueue().getValue());\n      else if (tWriteOp.isSetQueueAck())\n        writeOp = unwrap(tWriteOp.getQueueAck());\n      else {\n        Log.error(\"Internal Error: Unkown TWriteOperation \"\n            + tWriteOp.toString() + \" in batch. Skipping.\");\n        continue;\n      }\n      if (Log.isDebugEnabled())\n        Log.debug(\"Operation in batch: \" + writeOp);\n      writes.add(writeOp);\n    }\n    BatchOperationResult result;\n    try {\n      result = this.opex.execute(writes);\n    } catch (BatchOperationException e) {\n      throw new TBatchOperationException(e.getMessage());\n    }\n    if (Log.isDebugEnabled())\n      Log.debug(\"Batch result: \" + result);\n    return new TBatchOperationResult(result.isSuccess(), result.getMessage());\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public TOptionalBinary readKey(TReadKey tReadKey) throws TException {\n    Log.debug(\"Received TReadKey: \" + tReadKey);\n    ReadKey readKey = unwrap(tReadKey);\n    byte[] result = this.opex.execute(readKey);\n    Log.debug(\"ReadKey result: \"\n        + (result == null ? \"<null>\" : Arrays.toString(result)));\n    return wrapBinary(result);\n  }","id":18166,"modified_method":"@Override\n  public TOptionalBinary readKey(TReadKey tReadKey) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TReadKey: \" + tReadKey);\n    ReadKey readKey = unwrap(tReadKey);\n    byte[] result = this.opex.execute(readKey);\n    if (Log.isDebugEnabled())\n      Log.debug(\"ReadKey result: \"\n        + (result == null ? \"<null>\" : Arrays.toString(result)));\n    return wrapBinary(result);\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void clearFabric(TClearFabric tClearFabric) throws TException {\n    Log.debug(\"Received TClearFabric\");\n    this.opex.execute(unwrap(tClearFabric));\n  }","id":18167,"modified_method":"@Override\n  public void clearFabric(TClearFabric tClearFabric) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TClearFabric: \" + tClearFabric);\n    ClearFabric clearFabric = unwrap(tClearFabric);\n    this.opex.execute(clearFabric);\n    if (Log.isDebugEnabled())\n      Log.debug(\"ClearFabric completed.\");\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean write(TWrite tWrite) throws TException {\n    Log.debug(\"Received TWrite: \" + tWrite);\n    Write write = unwrap(tWrite);\n    boolean success = this.opex.execute(write);\n    Log.debug(\"Write result: \" + success);\n    return success;\n  }","id":18168,"modified_method":"@Override\n  public boolean write(TWrite tWrite) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TWrite: \" + tWrite);\n    Write write = unwrap(tWrite);\n    boolean success = this.opex.execute(write);\n    if (Log.isDebugEnabled())\n      Log.debug(\"Write result: \" + success);\n    return success;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public TOptionalBinaryMap read(TRead tRead) throws TException {\n    Log.debug(\"Received TRead\");\n    return wrapMap(this.opex.execute(unwrap(tRead)));\n  }","id":18169,"modified_method":"@Override\n  public TOptionalBinaryMap read(TRead tRead) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TRead: \" + tRead);\n    Read read = unwrap(tRead);\n    Map<byte[], byte[]> result = this.opex.execute(read);\n    TOptionalBinaryMap tResult = wrapMap(result);\n    if (Log.isDebugEnabled())\n      Log.debug(\"Read result: \" + tResult);\n    return tResult;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public TQueueMeta getQueueMeta(TGetQueueMeta tGetQueueMeta)\n      throws TException {\n    Log.debug(\"Received TGetQueueMeta\");\n    return wrap(this.opex.execute(unwrap(tGetQueueMeta)));\n  }","id":18170,"modified_method":"@Override\n  public TQueueMeta getQueueMeta(TGetQueueMeta tGetQueueMeta)\n      throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TGetQueueMeta: \" + tGetQueueMeta);\n    QueueAdmin.GetQueueMeta getQueueMeta = unwrap(tGetQueueMeta);\n    QueueAdmin.QueueMeta queueMeta = this.opex.execute(getQueueMeta);\n    if (Log.isDebugEnabled())\n      Log.debug(\"GetQueueMeta result: \" +\n          (queueMeta == null ? \"<null>\" : queueMeta.toString()));\n    return wrap(queueMeta);\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean queueAck(TQueueAck tQueueAck) throws TException {\n    Log.debug(\"Received TQueueAck\");\n    return this.opex.execute(unwrap(tQueueAck));\n  }","id":18171,"modified_method":"@Override\n  public boolean queueAck(TQueueAck tQueueAck) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TQueueAck: \" + tQueueAck);\n    QueueAck queueAck = unwrap(tQueueAck);\n    boolean success = this.opex.execute(queueAck);\n    if (Log.isDebugEnabled())\n      Log.debug(\"QueueAck result: \" + success);\n    return success;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean delet(TDelete tDelete) throws TException {\n    Log.debug(\"Received TDelete\");\n    return this.opex.execute(unwrap(tDelete));\n  }","id":18172,"modified_method":"@Override\n  public boolean delet(TDelete tDelete) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TDelete: \" + tDelete);\n    Delete delete = unwrap(tDelete);\n    boolean success = this.opex.execute(delete);\n    if (Log.isDebugEnabled())\n      Log.debug(\"Delete result: \" + success);\n    return success;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean increment(TIncrement tIncrement) throws TException {\n    Log.debug(\"Received TIncrement\");\n    return this.opex.execute(unwrap(tIncrement));\n  }","id":18173,"modified_method":"@Override\n  public boolean increment(TIncrement tIncrement) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TIncrement: \" + tIncrement);\n    Increment increment = unwrap(tIncrement);\n    boolean success = this.opex.execute(increment);\n    if (Log.isDebugEnabled())\n      Log.debug(\"Increment result: \" + success);\n    return success;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public long getGroupId(TGetGroupId tGetGroupId) throws TException {\n    Log.debug(\"Received TGetGroupID\");\n    return this.opex.execute(unwrap(tGetGroupId));\n  }","id":18174,"modified_method":"@Override\n  public long getGroupId(TGetGroupId tGetGroupId) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TGetGroupID: \" + tGetGroupId);\n    QueueAdmin.GetGroupID getGroupID = unwrap(tGetGroupId);\n    long groupId = this.opex.execute(getGroupID);\n    if (Log.isDebugEnabled())\n      Log.debug(\"GetGroupID result: \" + groupId);\n    return groupId;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean queueEnqueue(TQueueEnqueue tQueueEnqueue) throws TException {\n    Log.debug(\"Received TQueueEnqueue\");\n    return this.opex.execute(unwrap(tQueueEnqueue));\n  }","id":18175,"modified_method":"@Override\n  public boolean queueEnqueue(TQueueEnqueue tQueueEnqueue) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TQueueEnqueue: \" + tQueueEnqueue);\n    QueueEnqueue queueEnqueue = unwrap(tQueueEnqueue);\n    boolean success = this.opex.execute(queueEnqueue);\n    if (Log.isDebugEnabled())\n      Log.debug(\"QueueEnqueue result: \" + success);\n    return success;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public TOptionalBinaryList readAllKeys(TReadAllKeys tReadAllKeys)\n      throws TException {\n    Log.debug(\"Received TReadAllKeys\");\n    return wrapList(this.opex.execute(unwrap(tReadAllKeys)));\n  }","id":18176,"modified_method":"@Override\n  public TOptionalBinaryList readAllKeys(TReadAllKeys tReadAllKeys)\n      throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TReadAllKeys: \" + tReadAllKeys);\n    ReadAllKeys readAllKeys = unwrap(tReadAllKeys);\n    List<byte[]> result = this.opex.execute(readAllKeys);\n    TOptionalBinaryList tResult = wrapList(result);\n    if (Log.isDebugEnabled())\n      Log.debug(\"ReadAllKeys result: \" + tResult);\n    return tResult;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean compareAndSwap(TCompareAndSwap tCompareAndSwap)\n      throws TException {\n    Log.debug(\"Received TCompareAndSwap\");\n    return this.opex.execute(unwrap(tCompareAndSwap));\n  }","id":18177,"modified_method":"@Override\n  public boolean compareAndSwap(TCompareAndSwap tCompareAndSwap)\n      throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TCompareAndSwap: \" + tCompareAndSwap);\n    CompareAndSwap compareAndSwap = unwrap(tCompareAndSwap);\n    boolean success = this.opex.execute(compareAndSwap);\n    if (Log.isDebugEnabled())\n      Log.debug(\"CompareAndSwap result: \" + success);\n    return success;\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public TDequeueResult dequeue(TQueueDequeue tQueueDequeue) throws TException {\n    Log.debug(\"Received TQueueDequeue\" + tQueueDequeue.toString());\n    return wrap(this.opex.execute(unwrap(tQueueDequeue)));\n  }","id":18178,"modified_method":"@Override\n  public TDequeueResult dequeue(TQueueDequeue tQueueDequeue) throws TException {\n    if (Log.isDebugEnabled())\n      Log.debug(\"Received TQueueDequeue\" + tQueueDequeue.toString());\n    QueueDequeue queueDequeue = unwrap(tQueueDequeue);\n    DequeueResult result = this.opex.execute(queueDequeue);\n    if (Log.isDebugEnabled())\n      Log.debug(\"QueueDequeue result: \" + result);\n    return wrap(result);\n  }","commit_id":"0d3285e6db901bc3f035a41276f82362de7b524b","url":"https://github.com/caskdata/cdap"},{"original_method":"public void testAddMBMessage10() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread10 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread10 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread10 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread10 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread10 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18179,"modified_method":"public void testAddMBMessage10() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread10 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread10 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread10 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread10 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread10 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread10 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage11() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread11 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread11 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread11 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread11 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread11 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18180,"modified_method":"public void testAddMBMessage11() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread11 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread11 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread11 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread11 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread11 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread11 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage12() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread12 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread12 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread12 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread12 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread12 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18181,"modified_method":"public void testAddMBMessage12() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread12 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread12 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread12 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread12 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread12 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread12 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage13() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread13 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread13 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread13 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread13 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread13 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18182,"modified_method":"public void testAddMBMessage13() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread13 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread13 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread13 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread13 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread13 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread13 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage14() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread14 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread14 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread14 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread14 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread14 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18183,"modified_method":"public void testAddMBMessage14() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread14 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread14 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread14 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread14 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread14 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread14 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage15() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread15 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread15 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread15 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread15 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread15 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18184,"modified_method":"public void testAddMBMessage15() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread15 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread15 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread15 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread15 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread15 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread15 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage16() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread16 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread16 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread16 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread16 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread16 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18185,"modified_method":"public void testAddMBMessage16() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread16 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread16 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread16 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread16 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread16 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread16 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage17() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread17 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread17 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread17 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread17 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread17 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18186,"modified_method":"public void testAddMBMessage17() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread17 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread17 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread17 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread17 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread17 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread17 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage18() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread18 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread18 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread18 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread18 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread18 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18187,"modified_method":"public void testAddMBMessage18() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread18 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread18 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread18 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread18 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread18 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread18 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage19() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread19 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread19 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread19 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread19 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread19 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18188,"modified_method":"public void testAddMBMessage19() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread19 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread19 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread19 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread19 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread19 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread19 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage1() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread1 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread1 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread1 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread1 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread1 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18189,"modified_method":"public void testAddMBMessage1() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread1 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread1 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"MB Category Thread1 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread1 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread1 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread1 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage20() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread20 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread20 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread20 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread20 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread20 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18190,"modified_method":"public void testAddMBMessage20() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread20 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread20 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread20 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread20 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread20 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread20 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage21() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread21 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread21 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread21 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread21 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread21 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18191,"modified_method":"public void testAddMBMessage21() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread21 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread21 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\n\t\t\t\t\t\t\t\"MB Category Thread21 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread21 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread21 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread21 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage2() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread2 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread2 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread2 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread2 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread2 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18192,"modified_method":"public void testAddMBMessage2() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread2 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread2 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"MB Category Thread2 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread2 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread2 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread2 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage3() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread3 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread3 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread3 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread3 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread3 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18193,"modified_method":"public void testAddMBMessage3() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread3 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread3 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"MB Category Thread3 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread3 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread3 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread3 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage4() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread4 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread4 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread4 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread4 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread4 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18194,"modified_method":"public void testAddMBMessage4() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread4 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread4 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"MB Category Thread4 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread4 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread4 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread4 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage5() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread5 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread5 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread5 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread5 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread5 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18195,"modified_method":"public void testAddMBMessage5() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread5 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread5 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"MB Category Thread5 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread5 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread5 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread5 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage6() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread6 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread6 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread6 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread6 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread6 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18196,"modified_method":"public void testAddMBMessage6() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread6 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread6 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"MB Category Thread6 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread6 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread6 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread6 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage7() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread7 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread7 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread7 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread7 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread7 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18197,"modified_method":"public void testAddMBMessage7() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread7 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread7 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"MB Category Thread7 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread7 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread7 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread7 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage8() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread8 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread8 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread8 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread8 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread8 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18198,"modified_method":"public void testAddMBMessage8() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread8 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread8 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"MB Category Thread8 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread8 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread8 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread8 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddMBMessage9() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread9 Message Subject\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread9 Message Body\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread9 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread9 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread9 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","id":18199,"modified_method":"public void testAddMBMessage9() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Message Boards\",\n\t\t\tRuntimeVariables.replace(\"Message Boards\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"MB Category Name\"),\n\t\t\tselenium.getText(\"//td[2]/a/strong\"));\n\t\tselenium.clickAt(\"//td[2]/a/strong\",\n\t\t\tRuntimeVariables.replace(\"MB Category Name\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Post New Thread']\",\n\t\t\tRuntimeVariables.replace(\"Post New Thread\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_162_subject']\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread9 Message Subject\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__162_editor']/textarea\",\n\t\t\tRuntimeVariables.replace(\"MB Category Thread9 Message Body\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[@id='cke_34_label' and .='Source']\"));\n\t\tselenium.clickAt(\"//span[@id='cke_34_label' and .='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_162_editor' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__162_editor']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//td[@id='cke_contents__162_editor']/iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"MB Category Thread9 Message Body\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\"//body\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread9 Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']/a/strong\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Status: Pending (Review)\"),\n\t\t\tselenium.getText(\"//span[@class='workflow-status']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread9 Message Body\"),\n\t\t\tselenium.getText(\"//div[@class='thread-body']\"));\n\t\tselenium.clickAt(\"link=My Submissions\",\n\t\t\tRuntimeVariables.replace(\"My Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Single Approver\"),\n\t\t\tselenium.getText(\"//td[1]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"MB Category Thread9 Message Subject\"),\n\t\t\tselenium.getText(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Boards Message\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Review\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Never\"),\n\t\t\tselenium.getText(\"//td[6]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18200,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18201,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18202,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18203,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18204,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18205,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18206,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18207,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18208,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18209,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18210,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18211,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18212,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18213,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18214,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18215,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18216,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18217,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18218,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","id":18219,"modified_method":"public void testAddWebContent() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Go to\"),\n\t\t\tselenium.getText(\"//li[@id='_145_mySites']/a/span\"));\n\t\tselenium.mouseOver(\"//li[@id='_145_mySites']/a/span\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Web Content\",\n\t\t\tRuntimeVariables.replace(\"Web Content\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"//input[@value='Add']\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.type(\"//input[@id='_15_title_en_US']\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Title\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//a[@class='cke_button_source cke_on']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.type(\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/textarea\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Source\"),\n\t\t\tselenium.getText(\"//span[.='Source']\"));\n\t\tselenium.clickAt(\"//span[.='Source']\",\n\t\t\tRuntimeVariables.replace(\"Source\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\"//textarea[@id='_15__15_structure_el_TextAreaField_content' and @style='display: none;']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\n\t\t\t\"//td[@id='cke_contents__15__15_structure_el_TextAreaField_content']/iframe\");\n\t\tselenium.type(\"//body\",\n\t\t\tRuntimeVariables.replace(\"WC Web Content Content\"));\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.clickAt(\"//input[@value='Submit for Publication']\",\n\t\t\tRuntimeVariables.replace(\"Submit for Publication\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertTrue(selenium.isVisible(\"//td[2]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"WC Web Content Title\"),\n\t\t\tselenium.getText(\"//td[3]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Pending\"),\n\t\t\tselenium.getText(\"//td[4]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[5]/a\"));\n\t\tassertTrue(selenium.isVisible(\"//td[6]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//td[7]/a\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testViewPaginationTaskMBMessage10ItemsPerPage()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Workflow\", RuntimeVariables.replace(\"Workflow\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Submissions\",\n\t\t\tRuntimeVariables.replace(\"Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.select(\"//select[@id='_151_itemsPerPage']\",\n\t\t\tRuntimeVariables.replace(\"10\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"3\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='last']\", RuntimeVariables.replace(\"Last\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='first']\",\n\t\t\tRuntimeVariables.replace(\"First\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t}","id":18220,"modified_method":"public void testViewPaginationTaskMBMessage10ItemsPerPage()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Workflow\", RuntimeVariables.replace(\"Workflow\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Submissions\",\n\t\t\tRuntimeVariables.replace(\"Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.select(\"//select[@name='_151_itemsPerPage']\",\n\t\t\tRuntimeVariables.replace(\"10\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"3\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='last']\", RuntimeVariables.replace(\"Last\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='first']\",\n\t\t\tRuntimeVariables.replace(\"First\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testViewPaginationTaskMBMessage20ItemsPerPage()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Workflow\", RuntimeVariables.replace(\"Workflow\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Submissions\",\n\t\t\tRuntimeVariables.replace(\"Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='last']\", RuntimeVariables.replace(\"Last\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='first']\",\n\t\t\tRuntimeVariables.replace(\"First\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t}","id":18221,"modified_method":"public void testViewPaginationTaskMBMessage20ItemsPerPage()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Workflow\", RuntimeVariables.replace(\"Workflow\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Submissions\",\n\t\t\tRuntimeVariables.replace(\"Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='last']\", RuntimeVariables.replace(\"Last\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='first']\",\n\t\t\tRuntimeVariables.replace(\"First\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testViewPaginationTaskMBMessage5ItemsPerPage()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Workflow\", RuntimeVariables.replace(\"Workflow\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Submissions\",\n\t\t\tRuntimeVariables.replace(\"Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.select(\"//select[@id='_151_itemsPerPage']\",\n\t\t\tRuntimeVariables.replace(\"5\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 5 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 6 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"3\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 15 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"4\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 16 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"5\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.select(\"//select[@id='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 5 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 6 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 15 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 16 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 16 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 15 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 6 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 5 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='last']\", RuntimeVariables.replace(\"Last\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='first']\",\n\t\t\tRuntimeVariables.replace(\"First\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 5 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@id='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@id='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t}","id":18222,"modified_method":"public void testViewPaginationTaskMBMessage5ItemsPerPage()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\t\tloadRequiredJavaScriptModules();\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isElementPresent(\"link=Control Panel\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Control Panel\",\n\t\t\tRuntimeVariables.replace(\"Control Panel\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Workflow\", RuntimeVariables.replace(\"Workflow\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Submissions\",\n\t\t\tRuntimeVariables.replace(\"Submissions\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.clickAt(\"link=Pending\", RuntimeVariables.replace(\"Pending\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tselenium.select(\"//select[@name='_151_itemsPerPage']\",\n\t\t\tRuntimeVariables.replace(\"5\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 5 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"2\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 6 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"3\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 15 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"4\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 16 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"5\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.select(\"//select[@name='_151_page']\",\n\t\t\tRuntimeVariables.replace(\"1\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 5 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 6 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 15 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 16 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='next']\", RuntimeVariables.replace(\"Next\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 16 - 20 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 11 - 15 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 6 - 10 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='previous']\",\n\t\t\tRuntimeVariables.replace(\"Previous\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 5 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='last']\", RuntimeVariables.replace(\"Last\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 21 - 21 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//a[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//a[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//span[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//span[@class='last']\"));\n\t\tselenium.clickAt(\"//a[@class='first']\",\n\t\t\tRuntimeVariables.replace(\"First\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tloadRequiredJavaScriptModules();\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 - 5 of 21 results.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Items per Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='delta-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"5 10 20 30 50 75\"),\n\t\t\tselenium.getText(\"//select[@name='_151_itemsPerPage']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Page (Changing the value of this field will reload the page.)\"),\n\t\t\tselenium.getText(\"//div[@class='page-selector']/span/span/label\"));\n\t\tassertEquals(RuntimeVariables.replace(\"1 2 3 4 5\"),\n\t\t\tselenium.getText(\"//select[@name='_151_page']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"First\"),\n\t\t\tselenium.getText(\"//span[@class='first']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Previous\"),\n\t\t\tselenium.getText(\"//span[@class='previous']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Next\"),\n\t\t\tselenium.getText(\"//a[@class='next']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Last\"),\n\t\t\tselenium.getText(\"//a[@class='last']\"));\n\t}","commit_id":"25703e049d442898b9d655a1134d00e7612f5ae3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public CreateSecurityGroupResponseType create( final CreateSecurityGroupType request ) throws EucalyptusCloudException, MetadataException {\n    final Context ctx = Contexts.lookup( );\n\n    final String groupName = request.getGroupName();\n    if ( Strings.startsWith( \"sg-\" ).apply( groupName ) ) {\n      throw new InvalidParameterValueException( \"Value (\"+groupName+\") for parameter GroupName is invalid. Group names may not be in the format sg-*\" );\n    }\n\n    final CreateSecurityGroupResponseType reply = ( CreateSecurityGroupResponseType ) request.getReply( );\n    try {\n      Supplier<NetworkGroup> allocator = new Supplier<NetworkGroup>( ) {\n        \n        @Override\n        public NetworkGroup get( ) {\n          try {\n            return NetworkGroups.create( ctx.getUserFullName( ), groupName, request.getGroupDescription( ) );\n          } catch ( MetadataException ex ) {\n            throw new RuntimeException( ex );\n          }\n        }\n      };\n      final NetworkGroup group = RestrictedTypes.allocateUnitlessResource( allocator );\n      reply.setGroupId( group.getGroupId() );\n      return reply;\n    } catch ( final Exception ex ) {\n      throw new EucalyptusCloudException( \"CreateSecurityGroup failed because: \" + Exceptions.causeString( ex ), ex );\n    }\n  }","id":18223,"modified_method":"public CreateSecurityGroupResponseType create( final CreateSecurityGroupType request ) throws EucalyptusCloudException, MetadataException {\n    final Context ctx = Contexts.lookup( );\n\n    final String groupName = request.getGroupName();\n    if ( Strings.startsWith( \"sg-\" ).apply( groupName ) ) {\n      throw new InvalidParameterValueException( \"Value (\"+groupName+\") for parameter GroupName is invalid. Group names may not be in the format sg-*\" );\n    }\n\n    final CreateSecurityGroupResponseType reply = ( CreateSecurityGroupResponseType ) request.getReply( );\n    try {\n      Supplier<NetworkGroup> allocator = new Supplier<NetworkGroup>( ) {\n        \n        @Override\n        public NetworkGroup get( ) {\n          try {\n            return NetworkGroups.create( ctx.getUserFullName( ), groupName, request.getGroupDescription( ) );\n          } catch ( MetadataException ex ) {\n            throw new RuntimeException( ex );\n          }\n        }\n      };\n      final NetworkGroup group = RestrictedTypes.allocateUnitlessResource( allocator );\n      reply.setGroupId( group.getGroupId() );\n      return reply;\n    } catch ( final Exception ex ) {\n      String cause = Exceptions.causeString( ex );\n      if ( cause.contains( \"DuplicateMetadataException\" ) )\n          throw new EucalyptusCloudException( \"The security group '\" + groupName + \"' already exists\" );\n      else\n          throw new EucalyptusCloudException( \"CreateSecurityGroup failed because: \" + cause, ex );\n    }\n  }","commit_id":"bdd37127f8c493140b9106601c02d42ad1755f71","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public CreateSecurityGroupResponseType create( final CreateSecurityGroupType request ) throws EucalyptusCloudException, MetadataException {\n    final Context ctx = Contexts.lookup( );\n\n    final String groupName = request.getGroupName();\n    if ( Strings.startsWith( \"sg-\" ).apply( groupName ) ) {\n      throw new InvalidParameterValueException( \"Value (\"+groupName+\") for parameter GroupName is invalid. Group names may not be in the format sg-*\" );\n    }\n\n    final CreateSecurityGroupResponseType reply = ( CreateSecurityGroupResponseType ) request.getReply( );\n    try {\n      Supplier<NetworkGroup> allocator = new Supplier<NetworkGroup>( ) {\n        \n        @Override\n        public NetworkGroup get( ) {\n          try {\n            return NetworkGroups.create( ctx.getUserFullName( ), groupName, request.getGroupDescription( ) );\n          } catch ( MetadataException ex ) {\n            throw new RuntimeException( ex );\n          }\n        }\n      };\n      final NetworkGroup group = RestrictedTypes.allocateUnitlessResource( allocator );\n      reply.setGroupId( group.getGroupId() );\n      return reply;\n    } catch ( final Exception ex ) {\n      throw new EucalyptusCloudException( \"CreateSecurityGroup failed because: \" + Exceptions.causeString( ex ), ex );\n    }\n  }","id":18224,"modified_method":"public CreateSecurityGroupResponseType create( final CreateSecurityGroupType request ) throws EucalyptusCloudException, MetadataException {\n    final Context ctx = Contexts.lookup( );\n\n    final String groupName = request.getGroupName();\n    if ( Strings.startsWith( \"sg-\" ).apply( groupName ) ) {\n      throw new InvalidParameterValueException( \"Value (\"+groupName+\") for parameter GroupName is invalid. Group names may not be in the format sg-*\" );\n    }\n\n    final CreateSecurityGroupResponseType reply = ( CreateSecurityGroupResponseType ) request.getReply( );\n    try {\n      Supplier<NetworkGroup> allocator = new Supplier<NetworkGroup>( ) {\n        \n        @Override\n        public NetworkGroup get( ) {\n          try {\n            return NetworkGroups.create( ctx.getUserFullName( ), groupName, request.getGroupDescription( ) );\n          } catch ( MetadataException ex ) {\n            throw new RuntimeException( ex );\n          }\n        }\n      };\n      final NetworkGroup group = RestrictedTypes.allocateUnitlessResource( allocator );\n      reply.setGroupId( group.getGroupId() );\n      return reply;\n    } catch ( final Exception ex ) {\n      String cause = Exceptions.causeString( ex );\n      if ( cause.contains( \"DuplicateMetadataException\" ) )\n          throw new EucalyptusCloudException( \"The security group '\" + groupName + \"' already exists\" );\n      else\n          throw new EucalyptusCloudException( \"CreateSecurityGroup failed because: \" + cause, ex );\n    }\n  }","commit_id":"d76784ee1b84009d33f6ec35d4316f556d0b53c9","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public CreateSecurityGroupResponseType create( final CreateSecurityGroupType request ) throws EucalyptusCloudException, MetadataException {\n    final Context ctx = Contexts.lookup( );\n\n    final String groupName = request.getGroupName();\n    if ( Strings.startsWith( \"sg-\" ).apply( groupName ) ) {\n      throw new InvalidParameterValueException( \"Value (\"+groupName+\") for parameter GroupName is invalid. Group names may not be in the format sg-*\" );\n    }\n\n    final CreateSecurityGroupResponseType reply = ( CreateSecurityGroupResponseType ) request.getReply( );\n    try {\n      Supplier<NetworkGroup> allocator = new Supplier<NetworkGroup>( ) {\n        \n        @Override\n        public NetworkGroup get( ) {\n          try {\n            return NetworkGroups.create( ctx.getUserFullName( ), groupName, request.getGroupDescription( ) );\n          } catch ( MetadataException ex ) {\n            throw new RuntimeException( ex );\n          }\n        }\n      };\n      final NetworkGroup group = RestrictedTypes.allocateUnitlessResource( allocator );\n      reply.setGroupId( group.getGroupId() );\n      return reply;\n    } catch ( final Exception ex ) {\n      throw new EucalyptusCloudException( \"CreateSecurityGroup failed because: \" + Exceptions.causeString( ex ), ex );\n    }\n  }","id":18225,"modified_method":"public CreateSecurityGroupResponseType create( final CreateSecurityGroupType request ) throws EucalyptusCloudException, MetadataException {\n    final Context ctx = Contexts.lookup( );\n\n    final String groupName = request.getGroupName();\n    if ( Strings.startsWith( \"sg-\" ).apply( groupName ) ) {\n      throw new InvalidParameterValueException( \"Value (\"+groupName+\") for parameter GroupName is invalid. Group names may not be in the format sg-*\" );\n    }\n\n    final CreateSecurityGroupResponseType reply = ( CreateSecurityGroupResponseType ) request.getReply( );\n    try {\n      Supplier<NetworkGroup> allocator = new Supplier<NetworkGroup>( ) {\n        \n        @Override\n        public NetworkGroup get( ) {\n          try {\n            return NetworkGroups.create( ctx.getUserFullName( ), groupName, request.getGroupDescription( ) );\n          } catch ( MetadataException ex ) {\n            throw new RuntimeException( ex );\n          }\n        }\n      };\n      final NetworkGroup group = RestrictedTypes.allocateUnitlessResource( allocator );\n      reply.setGroupId( group.getGroupId() );\n      return reply;\n    } catch ( final Exception ex ) {\n      String cause = Exceptions.causeString( ex );\n      if ( cause.contains( \"DuplicateMetadataException\" ) )\n          throw new EucalyptusCloudException( \"The security group '\" + groupName + \"' already exists\" );\n      else\n          throw new EucalyptusCloudException( \"CreateSecurityGroup failed because: \" + cause, ex );\n    }\n  }","commit_id":"eb5565d5864530cbc256b5f93586889869f9c7ee","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n  public <T> void writeToDataset(T rdd, String datasetName, Class<?> kClass, Class<?> vClass) {\n    Map<String, String> datasetArgs = RuntimeArguments.extractScope(Scope.DATASET, datasetName, getRuntimeArguments());\n    getSparkFacade().saveAsDataset(rdd, datasetName, datasetArgs, kClass, vClass, new Configuration(hConf));\n  }","id":18226,"modified_method":"@Override\n  public <T> void writeToDataset(T rdd, String datasetName, Class<?> kClass, Class<?> vClass) {\n    // Clone the configuration since it's dataset specification and shouldn't affect the global hConf\n    Configuration configuration = new Configuration(hConf);\n\n    // first try if it is OutputFormatProvider\n    Map<String, String> dsArgs = RuntimeArguments.extractScope(Scope.DATASET, datasetName, getRuntimeArguments());\n    Dataset dataset = getDataset(datasetName, dsArgs);\n    if (dataset instanceof OutputFormatProvider) {\n      // get the output format and its configuration from the dataset\n      String outputFormatName = ((OutputFormatProvider) dataset).getOutputFormatClassName();\n\n      // load the input format class\n      if (outputFormatName == null) {\n        throw new DatasetInstantiationException(\n          String.format(\"Dataset '%s' provided null as the output format class name\", datasetName));\n      }\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends OutputFormat> outputFormatClass =\n          (Class<? extends OutputFormat>) SparkClassLoader.findFromContext().loadClass(outputFormatName);\n        Map<String, String> outputConfig = ((OutputFormatProvider) dataset).getOutputFormatConfiguration();\n        if (outputConfig != null) {\n          for (Map.Entry<String, String> entry : outputConfig.entrySet()) {\n            configuration.set(entry.getKey(), entry.getValue());\n          }\n        }\n        getSparkFacade().saveAsDataset(rdd, outputFormatClass, kClass, vClass, configuration);\n\n        if (dataset instanceof DatasetOutputCommitter) {\n          ((DatasetOutputCommitter) dataset).onSuccess();\n          // TODO must call onFailure() in case of failure\n        }\n        return;\n\n      } catch (ClassNotFoundException e) {\n        throw new DatasetInstantiationException(String.format(\n          \"Cannot load input format class %s provided by dataset '%s'\", outputFormatName, datasetName), e);\n      } catch (ClassCastException e) {\n        throw new DatasetInstantiationException(String.format(\n          \"Input format class %s provided by dataset '%s' is not an input format\", outputFormatName, datasetName), e);\n      }\n    }\n\n    Map<String, String> datasetArgs = RuntimeArguments.extractScope(Scope.DATASET, datasetName, getRuntimeArguments());\n    SparkDatasetOutputFormat.setDataset(hConf, datasetName, datasetArgs);\n    getSparkFacade().saveAsDataset(rdd, SparkDatasetOutputFormat.class, kClass, vClass, new Configuration(hConf));\n  }","commit_id":"c31d32b4ddfd24a1279a52d1f3d5856a0a54a7bc","url":"https://github.com/caskdata/cdap"},{"original_method":"@SuppressWarnings(\"unchecked\")\n  @Override\n  public <R, K, V> void saveAsDataset(R rdd, String datasetName, Map<String, String> arguments,\n                                      Class<K> keyClass, Class<V> valueClass, Configuration hConf) {\n    Preconditions.checkArgument(rdd instanceof JavaPairRDD,\n                                \"RDD class %s is not a subclass of %s\",\n                                rdd.getClass().getName(), JavaPairRDD.class.getName());\n\n    Configuration configuration = new Configuration(hConf);\n    SparkDatasetOutputFormat.setDataset(configuration, datasetName, arguments);\n    configuration.set(MRJobConfig.OUTPUT_FORMAT_CLASS_ATTR, SparkDatasetOutputFormat.class.getName());\n    ((JavaPairRDD<K, V>) rdd).saveAsNewAPIHadoopDataset(configuration);\n  }","id":18227,"modified_method":"@SuppressWarnings(\"unchecked\")\n  @Override\n  public <R, K, V> void saveAsDataset(R rdd, Class<? extends OutputFormat> outputFormatClass,\n                                      Class<K> keyClass, Class<V> valueClass, Configuration hConf) {\n    Preconditions.checkArgument(rdd instanceof JavaPairRDD,\n                                \"RDD class %s is not a subclass of %s\",\n                                rdd.getClass().getName(), JavaPairRDD.class.getName());\n    hConf.set(MRJobConfig.OUTPUT_FORMAT_CLASS_ATTR, outputFormatClass.getName());\n    ((JavaPairRDD<K, V>) rdd).saveAsNewAPIHadoopDataset(hConf);\n  }","commit_id":"c31d32b4ddfd24a1279a52d1f3d5856a0a54a7bc","url":"https://github.com/caskdata/cdap"},{"original_method":"@SuppressWarnings(\"unchecked\")\n  @Override\n  public <R, K, V> void saveAsDataset(R rdd, String datasetName, Map<String, String> arguments,\n                                      Class<K> keyClass, Class<V> valueClass, Configuration hConf) {\n    Preconditions.checkArgument(rdd instanceof RDD,\n                                \"RDD class %s is not a subclass of %s\",\n                                rdd.getClass().getName(), RDD.class.getName());\n\n    Configuration configuration = new Configuration(hConf);\n    SparkDatasetOutputFormat.setDataset(configuration, datasetName, arguments);\n    configuration.set(MRJobConfig.OUTPUT_FORMAT_CLASS_ATTR, SparkDatasetOutputFormat.class.getName());\n\n    ClassTag<K> kClassTag = ClassTag$.MODULE$.apply(keyClass);\n    ClassTag<V> vClassTag = ClassTag$.MODULE$.apply(valueClass);\n\n    PairRDDFunctions<K, V> pairRDD = new PairRDDFunctions<K, V>((RDD<Tuple2<K, V>>) rdd, kClassTag, vClassTag, null);\n    pairRDD.saveAsNewAPIHadoopDataset(configuration);\n  }","id":18228,"modified_method":"@SuppressWarnings(\"unchecked\")\n  @Override\n  public <R, K, V> void saveAsDataset(R rdd, Class<? extends OutputFormat> outputFormatClass,\n                                      Class<K> keyClass, Class<V> valueClass, Configuration hConf) {\n    Preconditions.checkArgument(rdd instanceof RDD,\n                                \"RDD class %s is not a subclass of %s\",\n                                rdd.getClass().getName(), RDD.class.getName());\n\n    hConf.set(MRJobConfig.OUTPUT_FORMAT_CLASS_ATTR, outputFormatClass.getName());\n\n    ClassTag<K> kClassTag = ClassTag$.MODULE$.apply(keyClass);\n    ClassTag<V> vClassTag = ClassTag$.MODULE$.apply(valueClass);\n\n    PairRDDFunctions<K, V> pairRDD = new PairRDDFunctions<K, V>((RDD<Tuple2<K, V>>) rdd, kClassTag, vClassTag, null);\n    pairRDD.saveAsNewAPIHadoopDataset(hConf);\n  }","commit_id":"c31d32b4ddfd24a1279a52d1f3d5856a0a54a7bc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void run(SparkContext context) {\n      String dataset = context.getRuntimeArguments().get(\"input\");\n\n      // read the dataset\n      JavaPairRDD<LongWritable, Text> inputData = context.readFromDataset(dataset, LongWritable.class, Text.class);\n\n      // create a new RDD with the same key but with a new value which is the length of the string\n      JavaPairRDD<byte[], byte[]> stringLengths = inputData.mapToPair(\n        new PairFunction<Tuple2<LongWritable, Text>, byte[], byte[]>() {\n        @Override\n        public Tuple2<byte[], byte[]> call(Tuple2<LongWritable, Text> pair) throws Exception {\n          return new Tuple2<>(Bytes.toBytes(pair._1().get()), Bytes.toBytes(pair._2().getLength()));\n        }\n      });\n\n      // write the character count to dataset\n      context.writeToDataset(stringLengths, \"count\", byte[].class, byte[].class);\n      ((JavaSparkContext) context.getOriginalSparkContext()).stop();\n    }","id":18229,"modified_method":"@Override\n    public void run(SparkContext context) {\n      String input = context.getRuntimeArguments().get(\"input\");\n      String output = context.getRuntimeArguments().get(\"output\");\n\n      // read the dataset\n      JavaPairRDD<Long, String> inputData = context.readFromDataset(input, Long.class, String.class);\n\n      // create a new RDD with the same key but with a new value which is the length of the string\n      JavaPairRDD<String, Integer> stringLengths = inputData.mapToPair(\n        new PairFunction<Tuple2<Long, String>, String, Integer>() {\n        @Override\n        public Tuple2<String, Integer> call(Tuple2<Long, String> pair) throws Exception {\n          return new Tuple2<>(pair._2(), pair._2().length());\n        }\n      });\n\n      // write the character count to dataset\n      context.writeToDataset(stringLengths, output, String.class, Integer.class);\n      ((JavaSparkContext) context.getOriginalSparkContext()).stop();\n    }","commit_id":"c31d32b4ddfd24a1279a52d1f3d5856a0a54a7bc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void configure() {\n    try {\n      setName(\"SparkAppUsingFileSet\");\n      setDescription(\"Application with Spark program using fileset input/output\");\n      createDataset(\"count\", KeyValueTable.class);\n      createDataset(\"fs\", FileSet.class, FileSetProperties.builder()\n        .setInputFormat(TextInputFormat.class)\n        .setOutputFormat(TextOutputFormat.class)\n        .setOutputProperty(TextOutputFormat.SEPERATOR, \":\").build());\n      createDataset(\"pfs\", PartitionedFileSet.class, PartitionedFileSetProperties.builder()\n        .setPartitioning(Partitioning.builder().addStringField(\"x\").build())\n        .setInputFormat(TextInputFormat.class)\n        .setOutputFormat(TextOutputFormat.class)\n        .setOutputProperty(TextOutputFormat.SEPERATOR, \":\").build());\n      createDataset(\"tpfs\", TimePartitionedFileSet.class, FileSetProperties.builder()\n        .setInputFormat(TextInputFormat.class)\n        .setOutputFormat(TextOutputFormat.class)\n        .setOutputProperty(TextOutputFormat.SEPERATOR, \":\").build());\n      addSpark(new CharCountSpecification());\n    } catch (Throwable t) {\n      throw Throwables.propagate(t);\n    }\n  }","id":18230,"modified_method":"@Override\n  public void configure() {\n    try {\n      setName(\"SparkAppUsingFileSet\");\n      setDescription(\"Application with Spark program using fileset input/output\");\n      createDataset(\"count\", KeyValueTable.class);\n      createDataset(\"fs\", FileSet.class, FileSetProperties.builder()\n        .setInputFormat(MyTextFormat.class)\n        .setOutputFormat(TextOutputFormat.class)\n        .setOutputProperty(TextOutputFormat.SEPERATOR, \":\").build());\n      createDataset(\"pfs\", PartitionedFileSet.class, PartitionedFileSetProperties.builder()\n        .setPartitioning(Partitioning.builder().addStringField(\"x\").build())\n        .setInputFormat(MyTextFormat.class)\n        .setOutputFormat(TextOutputFormat.class)\n        .setOutputProperty(TextOutputFormat.SEPERATOR, \":\").build());\n      createDataset(\"tpfs\", TimePartitionedFileSet.class, FileSetProperties.builder()\n        .setInputFormat(MyTextFormat.class)\n        .setOutputFormat(TextOutputFormat.class)\n        .setOutputProperty(TextOutputFormat.SEPERATOR, \":\").build());\n      addSpark(new CharCountSpecification());\n    } catch (Throwable t) {\n      throw Throwables.propagate(t);\n    }\n  }","commit_id":"c31d32b4ddfd24a1279a52d1f3d5856a0a54a7bc","url":"https://github.com/caskdata/cdap"},{"original_method":"private void checkOutputData() throws TransactionFailureException, InterruptedException {\n    final KeyValueTable output = datasetInstantiator.getDataset(\"count\");\n    //read output and verify result\n    txExecutorFactory.createExecutor(datasetInstantiator.getTransactionAware()).execute(\n      new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() {\n          byte[] val = output.read(Bytes.toBytes(testString1));\n          Assert.assertTrue(val != null);\n          Assert.assertEquals(Bytes.toInt(val), testString1.length());\n\n          val = output.read(Bytes.toBytes(testString2));\n          Assert.assertTrue(val != null);\n          Assert.assertEquals(Bytes.toInt(val), testString2.length());\n\n        }\n      });\n  }","id":18231,"modified_method":"private void validateFileOutput(Location location) throws Exception {\n    Assert.assertTrue(location.isDirectory());\n    for (Location child : location.list()) {\n      if (child.getName().startsWith(\"part-r-\")) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(child.getInputStream()))) {\n          String line = reader.readLine();\n          Assert.assertNotNull(line);\n          Assert.assertEquals(\"13 characters:13\", line);\n          line = reader.readLine();\n          Assert.assertNotNull(line);\n          Assert.assertEquals(\"7 chars:7\", line);\n          line = reader.readLine();\n          Assert.assertNull(line);\n          return;\n        }\n      }\n    }\n    Assert.fail(\"Output directory does not contain any part file: \" + location.list());\n  }","commit_id":"c31d32b4ddfd24a1279a52d1f3d5856a0a54a7bc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testSparkWithFileSet() throws Exception {\n    final ApplicationWithPrograms app =\n      AppFabricTestHelper.deployApplicationWithManager(SparkAppUsingFileSet.class, TEMP_FOLDER_SUPPLIER);\n\n    final FileSet inputDS = datasetInstantiator.getDataset(\"fs\");\n    Location location = inputDS.getLocation(\"nn\");\n    prepareFileInput(location);\n\n    Map<String, String> args = new HashMap<>();\n    FileSetArguments.setInputPath(args, \"nn\");\n    args = RuntimeArguments.addScope(Scope.DATASET, \"fs\", args);\n    args.put(\"input\", \"fs\");\n    runProgram(app, SparkAppUsingFileSet.CharCountSpecification.class, args);\n\n    validateFileOutput();\n  }","id":18232,"modified_method":"@Test\n  public void testSparkWithFileSet() throws Exception {\n    final ApplicationWithPrograms app =\n      AppFabricTestHelper.deployApplicationWithManager(SparkAppUsingFileSet.class, TEMP_FOLDER_SUPPLIER);\n\n    final FileSet fileset = datasetInstantiator.getDataset(\"fs\");\n    Location location = fileset.getLocation(\"nn\");\n    prepareFileInput(location);\n\n    Map<String, String> inputArgs = new HashMap<>();\n    FileSetArguments.setInputPath(inputArgs, \"nn\");\n    Map<String, String> outputArgs = new HashMap<>();\n    FileSetArguments.setOutputPath(inputArgs, \"xx\");\n    Map<String, String> args = new HashMap<>();\n    args.putAll(RuntimeArguments.addScope(Scope.DATASET, \"fs\", inputArgs));\n    args.putAll(RuntimeArguments.addScope(Scope.DATASET, \"fs\", outputArgs));\n    args.put(\"input\", \"fs\");\n    args.put(\"output\", \"fs\");\n    runProgram(app, SparkAppUsingFileSet.CharCountSpecification.class, args);\n\n    validateFileOutput(fileset.getLocation(\"xx\"));\n  }","commit_id":"c31d32b4ddfd24a1279a52d1f3d5856a0a54a7bc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testSparkWithPartitionedFileSet() throws Exception {\n    final ApplicationWithPrograms app =\n      AppFabricTestHelper.deployApplicationWithManager(SparkAppUsingFileSet.class, TEMP_FOLDER_SUPPLIER);\n\n    final PartitionedFileSet inputDS = datasetInstantiator.getDataset(\"pfs\");\n    final PartitionOutput partitionOutput = inputDS.getPartitionOutput(\n      PartitionKey.builder().addStringField(\"x\", \"nn\").build());\n    Location location = partitionOutput.getLocation();\n    prepareFileInput(location);\n    txExecutorFactory.createExecutor(datasetInstantiator.getTransactionAware()).execute(\n      new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          partitionOutput.addPartition();\n        }\n      });\n\n    Map<String, String> args = new HashMap<>();\n    PartitionedFileSetArguments.setInputPartitionFilter(\n      args, PartitionFilter.builder().addRangeCondition(\"x\", \"na\", \"nx\").build());\n    args = RuntimeArguments.addScope(Scope.DATASET, \"pfs\", args);\n    args.put(\"input\", \"pfs\");\n    runProgram(app, SparkAppUsingFileSet.CharCountSpecification.class, args);\n\n    validateFileOutput();\n  }","id":18233,"modified_method":"@Test\n  public void testSparkWithPartitionedFileSet() throws Exception {\n    final ApplicationWithPrograms app =\n      AppFabricTestHelper.deployApplicationWithManager(SparkAppUsingFileSet.class, TEMP_FOLDER_SUPPLIER);\n\n    final PartitionedFileSet pfs = datasetInstantiator.getDataset(\"pfs\");\n    final PartitionOutput partitionOutput = pfs.getPartitionOutput(\n      PartitionKey.builder().addStringField(\"x\", \"nn\").build());\n    Location location = partitionOutput.getLocation();\n    prepareFileInput(location);\n    txExecutorFactory.createExecutor(datasetInstantiator.getTransactionAware()).execute(\n      new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          partitionOutput.addPartition();\n        }\n      });\n\n    Map<String, String> inputArgs = new HashMap<>();\n    PartitionedFileSetArguments.setInputPartitionFilter(\n      inputArgs, PartitionFilter.builder().addRangeCondition(\"x\", \"na\", \"nx\").build());\n    Map<String, String> outputArgs = new HashMap<>();\n    final PartitionKey outputKey = PartitionKey.builder().addStringField(\"x\", \"xx\").build();\n    PartitionedFileSetArguments.setOutputPartitionKey(outputArgs, outputKey);\n    Map<String, String> args = new HashMap<>();\n    args.putAll(RuntimeArguments.addScope(Scope.DATASET, \"pfs\", inputArgs));\n    args.putAll(RuntimeArguments.addScope(Scope.DATASET, \"pfs\", outputArgs));\n    args.put(\"input\", \"pfs\");\n    args.put(\"output\", \"pfs\");\n\n    runProgram(app, SparkAppUsingFileSet.CharCountSpecification.class, args);\n\n    txExecutorFactory.createExecutor(datasetInstantiator.getTransactionAware()).execute(\n      new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          PartitionDetail partition = pfs.getPartition(outputKey);\n          Assert.assertNotNull(partition);\n          validateFileOutput(partition.getLocation());\n        }\n      });\n  }","commit_id":"c31d32b4ddfd24a1279a52d1f3d5856a0a54a7bc","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testSparkWithTimePartitionedFileSet() throws Exception {\n    final ApplicationWithPrograms app =\n      AppFabricTestHelper.deployApplicationWithManager(SparkAppUsingFileSet.class, TEMP_FOLDER_SUPPLIER);\n\n    long time = System.currentTimeMillis();\n    final TimePartitionedFileSet inputDS = datasetInstantiator.getDataset(\"tpfs\");\n    final PartitionOutput partitionOutput = inputDS.getPartitionOutput(time);\n    Location location = partitionOutput.getLocation();\n    prepareFileInput(location);\n    txExecutorFactory.createExecutor(datasetInstantiator.getTransactionAware()).execute(\n      new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          partitionOutput.addPartition();\n        }\n      });\n\n    Map<String, String> args = new HashMap<>();\n    TimePartitionedFileSetArguments.setInputStartTime(args, time - 100);\n    TimePartitionedFileSetArguments.setInputEndTime(args, time + 100);\n    args = RuntimeArguments.addScope(Scope.DATASET, \"tpfs\", args);\n    args.put(\"input\", \"tpfs\");\n    runProgram(app, SparkAppUsingFileSet.CharCountSpecification.class, args);\n\n    validateFileOutput();\n  }","id":18234,"modified_method":"@Test\n  public void testSparkWithTimePartitionedFileSet() throws Exception {\n    final ApplicationWithPrograms app =\n      AppFabricTestHelper.deployApplicationWithManager(SparkAppUsingFileSet.class, TEMP_FOLDER_SUPPLIER);\n\n    final TimePartitionedFileSet tpfs = datasetInstantiator.getDataset(\"tpfs\");\n    long inputTime = System.currentTimeMillis();\n    final long outputTime = inputTime + TimeUnit.HOURS.toMillis(1);\n\n    final PartitionOutput partitionOutput = tpfs.getPartitionOutput(inputTime);\n    Location location = partitionOutput.getLocation();\n    prepareFileInput(location);\n    txExecutorFactory.createExecutor(datasetInstantiator.getTransactionAware()).execute(\n      new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          partitionOutput.addPartition();\n        }\n      });\n\n    Map<String, String> inputArgs = new HashMap<>();\n    TimePartitionedFileSetArguments.setInputStartTime(inputArgs, inputTime - 100);\n    TimePartitionedFileSetArguments.setInputEndTime(inputArgs, inputTime + 100);\n    Map<String, String> outputArgs = new HashMap<>();\n    TimePartitionedFileSetArguments.setOutputPartitionTime(outputArgs, outputTime);\n    Map<String, String> args = new HashMap<>();\n    args.putAll(RuntimeArguments.addScope(Scope.DATASET, \"tpfs\", inputArgs));\n    args.putAll(RuntimeArguments.addScope(Scope.DATASET, \"tpfs\", outputArgs));\n    args.put(\"input\", \"tpfs\");\n    args.put(\"output\", \"tpfs\");\n\n    runProgram(app, SparkAppUsingFileSet.CharCountSpecification.class, args);\n\n    txExecutorFactory.createExecutor(datasetInstantiator.getTransactionAware()).execute(\n      new TransactionExecutor.Subroutine() {\n        @Override\n        public void apply() throws Exception {\n          PartitionDetail partition = tpfs.getPartitionByTime(outputTime);\n          Assert.assertNotNull(partition);\n          validateFileOutput(partition.getLocation());\n        }\n      });\n  }","commit_id":"c31d32b4ddfd24a1279a52d1f3d5856a0a54a7bc","url":"https://github.com/caskdata/cdap"},{"original_method":"private void parseTemplateText(Node parent) {\n\n        if (!reader.hasMoreInput())\n            return;\n\n        CharArrayWriter ttext = new CharArrayWriter();\n\n        while (reader.hasMoreInput()) {\n            int ch = reader.nextChar();\n            if (ch == '<') {\n                // Check for \"<\\%\"\n                if (reader.nextChar() == '\\\\') {\n                    if (reader.nextChar() == '%') {\n                        ttext.append('<');\n                        ttext.append('%');\n                    } else {\n                        reader.pushChar();\n                        reader.pushChar();\n                        if (ttext.size() == 0) {\n                            ttext.append('<');\n                        } else {\n                            reader.pushChar();\n                            break;\n                        }\n                    }\n                } else {\n                    reader.pushChar();\n                    if (ttext.size() == 0) {\n                        ttext.append('<');\n                    } else {\n                        reader.pushChar();\n                        break;\n                    }\n                }\n            } else if (ch == '\\\\' && !pageInfo.isELIgnored()) {\n                int next = reader.nextChar();\n                if (next == '$' || next == '#') {\n                    if (reader.nextChar() == '{') {\n                        ttext.write(next);\n                        ttext.append('{');\n                    } else {\n                        ttext.append('\\\\');\n                        ttext.write(next);\n                        reader.pushChar();\n                    }\n                } else {\n                    ttext.append('\\\\');\n                    reader.pushChar();\n                }\n            } else if ((ch == '$' || ch == '#' && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) &&\n                    !pageInfo.isELIgnored()) {\n                if (reader.nextChar() == '{') {\n                    reader.pushChar();\n                    reader.pushChar();\n                    break;\n                } else {\n                    reader.pushChar();\n                    ttext.write(ch);\n                }\n            } else {\n                ttext.write(ch);\n            }\n        }\n\n        @SuppressWarnings(\"unused\")\n        Node unused = new Node.TemplateText(ttext.toString(), start, parent);\n    }","id":18235,"modified_method":"private void parseTemplateText(Node parent) {\n\n        if (!reader.hasMoreInput())\n            return;\n\n        CharArrayWriter ttext = new CharArrayWriter();\n\n        int ch = reader.nextChar();\n        while (ch != -1) {\n            if (ch == '<') {\n                // Check for \"<\\%\"\n                if (reader.peekChar(0) == '\\\\' && reader.peekChar(1) == '%') {\n                    ttext.write(ch);\n                    // Swallow the \\\n                    reader.nextChar();\n                    ttext.write(reader.nextChar());\n                } else {\n                    if (ttext.size() == 0) {\n                        ttext.write(ch);\n                    } else {\n                        reader.pushChar();\n                        break;\n                    }\n                }\n            } else if (ch == '\\\\' && !pageInfo.isELIgnored()) {\n                int next = reader.peekChar(0);\n                if (next == '$' || next == '#') {\n                    if (reader.peekChar(1) == '{') {\n                        ttext.write(reader.nextChar());\n                        ttext.write(reader.nextChar());\n                    } else {\n                        ttext.write(ch);\n                        ttext.write(reader.nextChar());\n                    }\n                } else {\n                    ttext.write(ch);\n                }\n            } else if ((ch == '$' || ch == '#' && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) &&\n                    !pageInfo.isELIgnored()) {\n                if (reader.peekChar(0) == '{') {\n                    reader.pushChar();\n                    break;\n                } else {\n                    ttext.write(ch);\n                }\n            } else {\n                ttext.write(ch);\n            }\n            ch = reader.nextChar();\n        }\n\n        @SuppressWarnings(\"unused\")\n        Node unused = new Node.TemplateText(ttext.toString(), start, parent);\n    }","commit_id":"ae6731c653107ee72b4b3842bf32e6983aac0cd8","url":"https://github.com/apache/tomcat"},{"original_method":"protected long getRecentLayoutBranchId(\n\t\tPortalPreferences portalPreferences, long layoutSetBranchId,\n\t\tlong plid) {\n\n\t\treturn GetterUtil.getLong(\n\t\t\tportalPreferences.getValue(\n\t\t\t\tStaging.class.getName(),\n\t\t\t\tgetRecentLayoutBranchIdKey(layoutSetBranchId, plid)));\n\t}","id":18236,"modified_method":"protected long getRecentLayoutBranchId(\n\t\tPortalPreferences portalPreferences, long layoutSetBranchId,\n\t\tlong plid) {\n\n\t\tString recentLayoutBranchIdKey = getRecentLayoutBranchIdKey(\n\t\t\tlayoutSetBranchId, plid);\n\n\t\tString preferencesString = portalPreferences.getValue(\n\t\t\tStaging.class.getName(), \"ATTRIBUTE_MAP\");\n\n\t\ttry {\n\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray(\n\t\t\t\tpreferencesString);\n\n\t\t\tfor (int i = 0; i < jsonArray.length(); i ++) {\n\t\t\t\tJSONObject jsonObject = jsonArray.getJSONObject(i);\n\n\t\t\t\tif (jsonObject.has(recentLayoutBranchIdKey)) {\n\t\t\t\t\treturn GetterUtil.getLong(jsonObject.getString(\n\t\t\t\t\t\trecentLayoutBranchIdKey));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (JSONException je) {\n\t\t\t_log.warn(\"Staging preferences are not in JSON format\");\n\t\t}\n\n\t\treturn 0;\n\t}","commit_id":"c5f80a460e346bda657ae51fea0f939e5453ad18","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void deleteRecentLayoutRevisionId(\n\t\tPortalPreferences portalPreferences, long layoutSetBranchId,\n\t\tlong plid) {\n\n\t\tportalPreferences.setValue(\n\t\t\tStaging.class.getName(),\n\t\t\tgetRecentLayoutRevisionIdKey(layoutSetBranchId, plid), null);\n\t}","id":18237,"modified_method":"protected void deleteRecentLayoutRevisionId(\n\t\tPortalPreferences portalPreferences, long layoutSetBranchId,\n\t\tlong plid) {\n\n\t\tString oldPortalPreferences = portalPreferences.getValue(\n\t\t\tStaging.class.getName(), \"ATTRIBUTE_MAP\");\n\n\t\ttry {\n\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\t\tJSONArray oldJsonArray = JSONFactoryUtil.createJSONArray(\n\t\t\t\toldPortalPreferences);\n\n\t\t\tString recentLayoutRevisionIdKey = getRecentLayoutRevisionIdKey(\n\t\t\t\tlayoutSetBranchId, plid);\n\n\t\t\tfor (int i = 0; i < oldJsonArray.length(); i ++) {\n\t\t\t\tJSONObject jsonObject = oldJsonArray.getJSONObject(i);\n\n\t\t\t\tif (Validator.isNotNull(jsonObject.getString(\n\t\t\t\t\trecentLayoutRevisionIdKey))) {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tjsonArray.put(jsonObject);\n\t\t\t}\n\n\t\t\tportalPreferences.setValue(\n\t\t\t\tStaging.class.getName(), \"ATTRIBUTE_MAP\", jsonArray.toString());\n\t\t} \n\t\tcatch (JSONException je) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Staging preferences are not in JSON format. \" + \n\t\t\t\t\t\"Unable to set recent layout branch ID\", je);\n\t\t\t}\n\t\t}\t\n\t}","commit_id":"c5f80a460e346bda657ae51fea0f939e5453ad18","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void setRecentLayoutBranchId(\n\t\tPortalPreferences portalPreferences, long layoutSetBranchId, long plid,\n\t\tlong layoutBranchId) {\n\n\t\tportalPreferences.setValue(\n\t\t\tStaging.class.getName(),\n\t\t\tgetRecentLayoutBranchIdKey(layoutSetBranchId, plid),\n\t\t\tString.valueOf(layoutBranchId));\n\t}","id":18238,"modified_method":"protected void setRecentLayoutBranchId(\n\t\tPortalPreferences portalPreferences, long layoutSetBranchId, long plid,\n\t\tlong layoutBranchId) {\n\n\t\tString oldPortalPreferences = portalPreferences.getValue(\n\t\t\tStaging.class.getName(), \"ATTRIBUTE_MAP\");\n\n\t\ttry {\n\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\t\tJSONArray oldJsonArray = JSONFactoryUtil.createJSONArray(\n\t\t\t\toldPortalPreferences);\n\n\t\t\tString recentLayoutBranchIdKey = getRecentLayoutBranchIdKey(\n\t\t\t\tlayoutSetBranchId, plid);\n\n\t\t\tboolean alreadyExists = false;\n\n\t\t\tfor (int i = 0; i < oldJsonArray.length(); i ++) {\n\t\t\t\tJSONObject jsonObject = oldJsonArray.getJSONObject(i);\n\n\t\t\t\tif (Validator.isNotNull(jsonObject.getString(\n\t\t\t\t\trecentLayoutBranchIdKey))) {\n\n\t\t\t\t\talreadyExists = true;\n\n\t\t\t\t\tjsonObject.remove(recentLayoutBranchIdKey);\n\n\t\t\t\t\tjsonObject.put(recentLayoutBranchIdKey,\n\t\t\t\t\t\tString.valueOf(layoutBranchId));\n\t\t\t\t}\n\n\t\t\t\tjsonArray.put(jsonObject);\n\t\t\t}\n\n\t\t\tif (!alreadyExists) {\n\t\t\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject();\n\n\t\t\t\tjsonObject.put(recentLayoutBranchIdKey, \n\t\t\t\t\tString.valueOf(layoutBranchId));\n\n\t\t\t\tjsonArray.put(jsonObject);\n\t\t\t}\n\n\t\t\tportalPreferences.setValue(\n\t\t\t\tStaging.class.getName(), \"ATTRIBUTE_MAP\", jsonArray.toString());\n\t\t} \n\t\tcatch (JSONException je) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Staging preferences are not in JSON format. \" + \n\t\t\t\t\t\"Unable to set recent layout branch ID\", je);\n\t\t\t}\n\t\t}\n\t}","commit_id":"c5f80a460e346bda657ae51fea0f939e5453ad18","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected long getRecentLayoutRevisionId(\n\t\t\tPortalPreferences portalPreferences, long layoutSetBranchId,\n\t\t\tlong plid)\n\t\tthrows PortalException {\n\n\t\tlong layoutRevisionId = GetterUtil.getLong(\n\t\t\tportalPreferences.getValue(\n\t\t\t\tStaging.class.getName(),\n\t\t\t\tgetRecentLayoutRevisionIdKey(layoutSetBranchId, plid)));\n\n\t\tif (layoutRevisionId > 0) {\n\t\t\treturn layoutRevisionId;\n\t\t}\n\n\t\tlong layoutBranchId = getRecentLayoutBranchId(\n\t\t\tportalPreferences, layoutSetBranchId, plid);\n\n\t\tif (layoutBranchId > 0) {\n\t\t\ttry {\n\t\t\t\tLayoutBranchLocalServiceUtil.getLayoutBranch(layoutBranchId);\n\t\t\t}\n\t\t\tcatch (NoSuchLayoutBranchException nslbe) {\n\t\t\t\tLayoutBranch layoutBranch =\n\t\t\t\t\tLayoutBranchLocalServiceUtil.getMasterLayoutBranch(\n\t\t\t\t\t\tlayoutSetBranchId, plid);\n\n\t\t\t\tlayoutBranchId = layoutBranch.getLayoutBranchId();\n\t\t\t}\n\t\t}\n\n\t\tif (layoutBranchId > 0) {\n\t\t\ttry {\n\t\t\t\tLayoutRevision layoutRevision =\n\t\t\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\t\t\tlayoutSetBranchId, layoutBranchId, plid);\n\n\t\t\t\tif (layoutRevision != null) {\n\t\t\t\t\tlayoutRevisionId = layoutRevision.getLayoutRevisionId();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\t\t\t}\n\t\t}\n\n\t\treturn layoutRevisionId;\n\t}","id":18239,"modified_method":"protected long getRecentLayoutRevisionId(\n\t\t\tPortalPreferences portalPreferences, long layoutSetBranchId,\n\t\t\tlong plid)\n\t\tthrows PortalException {\n\n\t\tlong layoutRevisionId = 0;\n\n\t\tString preferencesString = portalPreferences.getValue(\n\t\t\tStaging.class.getName(), \"ATTRIBUTE_MAP\");\n\n\t\tString recentLayoutRevisionIdKey = getRecentLayoutRevisionIdKey(\n\t\t\tlayoutSetBranchId, plid);\n\n\t\ttry {\n\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray(\n\t\t\t\tpreferencesString);\n\n\t\t\tfor (int i = 0; i < jsonArray.length(); i ++) {\n\t\t\t\tJSONObject jsonObject = jsonArray.getJSONObject(i);\n\n\t\t\t\tif (jsonObject.has(recentLayoutRevisionIdKey)) {\n\t\t\t\t\tlayoutRevisionId = GetterUtil.getLong(jsonObject.getString(\n\t\t\t\t\t\trecentLayoutRevisionIdKey));\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tcatch (JSONException je) {\n\t\t\t_log.warn(\"Staging preferences are not in JSON format\");\n\t\t}\n\n\t\tif (layoutRevisionId > 0) {\n\t\t\treturn layoutRevisionId;\n\t\t}\n\n\t\tlong layoutBranchId = getRecentLayoutBranchId(\n\t\t\tportalPreferences, layoutSetBranchId, plid);\n\n\t\tif (layoutBranchId > 0) {\n\t\t\ttry {\n\t\t\t\tLayoutBranchLocalServiceUtil.getLayoutBranch(layoutBranchId);\n\t\t\t}\n\t\t\tcatch (NoSuchLayoutBranchException nslbe) {\n\t\t\t\tLayoutBranch layoutBranch =\n\t\t\t\t\tLayoutBranchLocalServiceUtil.getMasterLayoutBranch(\n\t\t\t\t\t\tlayoutSetBranchId, plid);\n\n\t\t\t\tlayoutBranchId = layoutBranch.getLayoutBranchId();\n\t\t\t}\n\t\t}\n\n\t\tif (layoutBranchId > 0) {\n\t\t\ttry {\n\t\t\t\tLayoutRevision layoutRevision =\n\t\t\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\t\t\tlayoutSetBranchId, layoutBranchId, plid);\n\n\t\t\t\tif (layoutRevision != null) {\n\t\t\t\t\tlayoutRevisionId = layoutRevision.getLayoutRevisionId();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\t\t\t}\n\t\t}\n\n\t\treturn layoutRevisionId;\n\t}","commit_id":"c5f80a460e346bda657ae51fea0f939e5453ad18","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void setRecentLayoutRevisionId(\n\t\tPortalPreferences portalPreferences, long layoutSetBranchId, long plid,\n\t\tlong layoutRevisionId) {\n\n\t\tlong layoutBranchId = 0;\n\n\t\ttry {\n\t\t\tLayoutRevision layoutRevision =\n\t\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\t\tlayoutRevisionId);\n\n\t\t\tlayoutBranchId = layoutRevision.getLayoutBranchId();\n\n\t\t\tLayoutRevision lastLayoutRevision =\n\t\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\t\tlayoutSetBranchId, layoutBranchId, plid);\n\n\t\t\tif (lastLayoutRevision.getLayoutRevisionId() == layoutRevisionId) {\n\t\t\t\tdeleteRecentLayoutRevisionId(\n\t\t\t\t\tportalPreferences, layoutSetBranchId, plid);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportalPreferences.setValue(\n\t\t\t\t\tStaging.class.getName(),\n\t\t\t\t\tgetRecentLayoutRevisionIdKey(layoutSetBranchId, plid),\n\t\t\t\t\tString.valueOf(layoutRevisionId));\n\t\t\t}\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Unable to set recent layout revision ID\", pe);\n\t\t\t}\n\t\t}\n\n\t\tportalPreferences.setValue(\n\t\t\tStaging.class.getName(),\n\t\t\tgetRecentLayoutBranchIdKey(layoutSetBranchId, plid),\n\t\t\tString.valueOf(layoutBranchId));\n\t}","id":18240,"modified_method":"protected void setRecentLayoutRevisionId(\n\t\tPortalPreferences portalPreferences, long layoutSetBranchId, long plid,\n\t\tlong layoutRevisionId) {\n\n\t\tlong layoutBranchId = 0;\n\n\t\ttry {\n\t\t\tLayoutRevision layoutRevision =\n\t\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\t\tlayoutRevisionId);\n\n\t\t\tlayoutBranchId = layoutRevision.getLayoutBranchId();\n\n\t\t\tLayoutRevision lastLayoutRevision =\n\t\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\t\tlayoutSetBranchId, layoutBranchId, plid);\n\n\t\t\tif (lastLayoutRevision.getLayoutRevisionId() == layoutRevisionId) {\n\t\t\t\tdeleteRecentLayoutRevisionId(\n\t\t\t\t\tportalPreferences, layoutSetBranchId, plid);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString oldPortalPreferences = portalPreferences.getValue(\n\t\t\t\t\tStaging.class.getName(), \"ATTRIBUTE_MAP\");\n\n\t\t\t\ttry {\n\t\t\t\t\tJSONArray jsonArray = JSONFactoryUtil.createJSONArray();\n\n\t\t\t\t\tJSONArray oldJsonArray = JSONFactoryUtil.createJSONArray(\n\t\t\t\t\t\toldPortalPreferences);\n\n\t\t\t\t\tString recentLayoutRevisionIdKey = \n\t\t\t\t\t\tgetRecentLayoutRevisionIdKey(layoutSetBranchId, plid);\n\n\t\t\t\t\tboolean alreadyExists = false;\n\n\t\t\t\t\tfor (int i = 0; i < oldJsonArray.length(); i ++) {\n\t\t\t\t\t\tJSONObject jsonObject = oldJsonArray.getJSONObject(i);\n\n\t\t\t\t\t\tif (Validator.isNotNull(jsonObject.getString(\n\t\t\t\t\t\t\trecentLayoutRevisionIdKey))) {\n\n\t\t\t\t\t\t\talreadyExists = true;\n\n\t\t\t\t\t\t\tjsonObject.remove(recentLayoutRevisionIdKey);\n\n\t\t\t\t\t\t\tjsonObject.put(recentLayoutRevisionIdKey,\n\t\t\t\t\t\t\t\tString.valueOf(layoutRevisionId));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjsonArray.put(jsonObject);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!alreadyExists) {\n\t\t\t\t\t\tJSONObject jsonObject = \n\t\t\t\t\t\t\tJSONFactoryUtil.createJSONObject();\n\n\t\t\t\t\t\tjsonObject.put(recentLayoutRevisionIdKey, \n\t\t\t\t\t\t\tString.valueOf(layoutRevisionId));\n\n\t\t\t\t\t\tjsonArray.put(jsonObject);\n\t\t\t\t\t}\n\n\t\t\t\t\tportalPreferences.setValue(\n\t\t\t\t\t\tStaging.class.getName(), \"ATTRIBUTE_MAP\",\n\t\t\t\t\t\tjsonArray.toString());\n\t\t\t\t} \n\t\t\t\tcatch (JSONException je) {\n\t\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t\t_log.warn(\"Staging preferences are not in JSON format \" +\n\t\t\t\t\t\t\t\"Unable to set recent layout revision ID\", je);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Unable to set recent layout revision ID\", pe);\n\t\t\t}\n\t\t}\n\t\tsetRecentLayoutBranchId(\n\t\t\tportalPreferences, layoutSetBranchId, plid, layoutBranchId);\n\t}","commit_id":"c5f80a460e346bda657ae51fea0f939e5453ad18","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void processDot1DBasePortTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {\n        LogUtils.debugf(this, \"processDot1DBasePortTable: Starting dot1dBasePort table processing.\");\n\n        for (final Dot1dBasePortTableEntry dot1dbaseptentry : snmpVlanColl.getDot1dBasePortTable().getEntries()) {\n            int baseport = dot1dbaseptentry.getBaseBridgePort();\n            int ifindex = dot1dbaseptentry.getBaseBridgePortIfindex();\n\n            if (baseport == -1 || ifindex == -1) {\n                LogUtils.warnf(this, \"processDot1DBasePortTable: Invalid base port (%d) or ifIndex (%d). Skipping.\", baseport, ifindex);\n                continue;\n            }\n\n            node.setIfIndexBridgePort(ifindex, baseport);\n\n            \n            \n            if (snmpcoll.getSaveStpInterfaceTable()) {\n                final OnmsNode onmsNode = getNode(node.getNodeId());\n                if (onmsNode == null) {\n                    LogUtils.debugf(this, \"no node found!\");\n                    continue;\n                }\n                final OnmsStpInterface stpInterface = new OnmsStpInterface(onmsNode, baseport, vlan.getVlanId());\n                stpInterface.setBridgePort(baseport);\n                stpInterface.setVlan(vlan.getVlanId());\n                stpInterface.setIfIndex(ifindex);\n                stpInterface.setStatus(DbStpNodeEntry.STATUS_ACTIVE);\n                stpInterface.setLastPollTime(scanTime);\n\n                saveStpInterface(dbConn, stpInterface);\n            }\n        }\n    }","id":18241,"modified_method":"protected void processDot1DBasePortTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {\n        List<Dot1dBasePortTableEntry> entries = snmpVlanColl.getDot1dBasePortTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processDot1DBasePortTable: Starting dot1BasePort table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processDot1DBasePortTable: Zero dot1BasePort table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        for (final Dot1dBasePortTableEntry dot1dbaseptentry : entries) {\n            int baseport = dot1dbaseptentry.getBaseBridgePort();\n            int ifindex = dot1dbaseptentry.getBaseBridgePortIfindex();\n\n            if (baseport == -1 || ifindex == -1) {\n                LogUtils.warnf(this, \"processDot1DBasePortTable: Invalid base port (%d) or ifIndex (%d). Skipping.\", baseport, ifindex);\n                continue;\n            }\n\n            node.setIfIndexBridgePort(ifindex, baseport);\n\n            \n            \n            if (snmpcoll.getSaveStpInterfaceTable()) {\n                final OnmsNode onmsNode = getNode(node.getNodeId());\n                if (onmsNode == null) {\n                    LogUtils.debugf(this, \"no node found!\");\n                    continue;\n                }\n                final OnmsStpInterface stpInterface = new OnmsStpInterface(onmsNode, baseport, vlan.getVlanId());\n                stpInterface.setBridgePort(baseport);\n                stpInterface.setVlan(vlan.getVlanId());\n                stpInterface.setIfIndex(ifindex);\n                stpInterface.setStatus(DbStpNodeEntry.STATUS_ACTIVE);\n                stpInterface.setLastPollTime(scanTime);\n\n                saveStpInterface(dbConn, stpInterface);\n            }\n        }\n    }","commit_id":"56dd134e775efbe7fb0fbd543b7093cd539a1937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processRouteTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<RouterInterface> routeInterfaces = new ArrayList<RouterInterface>();\n\n        LogUtils.debugf(this, \"processRouteTable: Starting route table processing.\");\n\n        for (final SnmpStore ent : snmpcoll.getIpRouteTable().getEntries()) {\n            final Integer ifindex = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_IFINDEX);\n\n            if (ifindex == null || ifindex < 0) {\n                LogUtils.warnf(this, \"processRouteTable: Not valid ifIndex %s. Skipping.\", ifindex);\n                continue;\n            }\n\n            final InetAddress nexthop = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_NXTHOP);\n\n            if (nexthop == null) {\n                LogUtils.warnf(this, \"processRouteTable: next hop not found. Skipping.\");\n                continue;\n            }\n\n            final InetAddress routedest = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_DEST);\n            if (routedest == null) {\n                LogUtils.warnf(this, \"processRouteTable: route destination not found. Skipping.\");\n                continue;\n            }\n\n            final InetAddress routemask = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_MASK);\n\n            if (routemask == null) {\n                LogUtils.warnf(this, \"processRouteTable: route mask not found. Skipping.\");\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processRouteTable: parsing routeDest/routeMask/nextHop: %s/%s/%s - ifIndex = %d\", str(routedest), str(routemask), str(nexthop), ifindex);\n\n            final Integer routemetric1 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC1);\n\n            /**\n             * FIXME: send routedest 0.0.0.0 to discoverylink remember that\n             * now nexthop 0.0.0.0 is not parsed, anyway we should analyze\n             * this case in link discovery so here is the place where you can\n             * have this info saved for now is discarded. See DiscoveryLink\n             * for more details......\n             */\n\n            // the routerinterface constructor set nodeid, ifindex, netmask for nexthop address\n            // try to find on snmpinterface table\n            RouterInterface routeIface = getNodeidMaskFromIp(dbConn, nexthop);\n\n            // if target node is not snmp node always try to find info\n            // on ipinterface table\n            if (routeIface == null) {\n                routeIface = getNodeFromIp(dbConn, nexthop);\n            }\n\n            if (routeIface == null) {\n                LogUtils.warnf(this, \"processRouteTable: No node ID found for next hop IP address %s. Not adding the IP route interface to the linkable SNMP node.\", str(nexthop));\n                // try to find it in ipinterface\n                sendNewSuspectEvent(nexthop, snmpcoll.getTarget(), snmpcoll.getPackageName());\n            } else {\n                int snmpiftype = -2;\n\n                if (ifindex >= 0)\n                    snmpiftype = getSnmpIfType(dbConn, node.getNodeId(), ifindex);\n\n                if (snmpiftype == -1) {\n                    LogUtils.warnf(this, \"processRouteTable: interface has an invalid ifType (%d). Skipping.\", snmpiftype);\n                } else if (nexthop.isLoopbackAddress()) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a loopback address. Skipping.\");\n                } else if (InetAddressUtils.str(nexthop).equals(\"0.0.0.0\")) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a broadcast address. Skipping.\");\n                } else if (nexthop.isMulticastAddress()) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a multicast address. Skipping.\");\n                } else if (routemetric1 == null || routemetric1 < 0) {\n                    LogUtils.infof(this, \"processRouteTable: Route metric is invalid. Skipping.\");\n                } else {\n                    LogUtils.debugf(this, \"processRouteTable: Interface has a valid ifType (%d). Adding.\", snmpiftype);\n\n                    routeIface.setRouteDest(routedest);\n                    routeIface.setRoutemask(routemask);\n                    routeIface.setSnmpiftype(snmpiftype);\n                    routeIface.setIfindex(ifindex);\n                    routeIface.setMetric(routemetric1);\n                    routeIface.setNextHop(nexthop);\n                    routeInterfaces.add(routeIface);\n\n                }\n            }\n\n            final Integer routemetric2 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC2);\n            final Integer routemetric3 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC3);\n            final Integer routemetric4 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC4);\n            final Integer routemetric5 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC5);\n            final Integer routetype = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_TYPE);\n            final Integer routeproto = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_PROTO);\n\n            // always save info to DB\n            if (snmpcoll.getSaveIpRouteTable()) {\n\n                final OnmsNode onmsNode = getNode(node.getNodeId());\n                final OnmsIpRouteInterface ipRouteInterface = new OnmsIpRouteInterface();\n                ipRouteInterface.setLastPollTime(scanTime);\n                ipRouteInterface.setNode(onmsNode);\n                ipRouteInterface.setRouteDest(str(routedest));\n                ipRouteInterface.setRouteIfIndex(ifindex);\n                ipRouteInterface.setRouteMask(str(routemask));\n                ipRouteInterface.setRouteMetric1(routemetric1);\n                ipRouteInterface.setRouteMetric2(routemetric2);\n                ipRouteInterface.setRouteMetric3(routemetric3);\n                ipRouteInterface.setRouteMetric4(routemetric4);\n                ipRouteInterface.setRouteMetric5(routemetric5);\n                ipRouteInterface.setRouteNextHop(str(nexthop));\n                ipRouteInterface.setRouteProto(routeproto);\n                ipRouteInterface.setRouteType(routetype);\n                ipRouteInterface.setStatus(DbAtInterfaceEntry.STATUS_ACTIVE);\n\n                saveIpRouteInterface(dbConn, ipRouteInterface);\n            }\n        }\n        node.setRouteInterfaces(routeInterfaces);\n    }","id":18242,"modified_method":"protected void processRouteTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<SnmpStore> entries = snmpcoll.getIpRouteTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processRouteTable: Starting route table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processRouteTable: Zero route table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        List<RouterInterface> routeInterfaces = new ArrayList<RouterInterface>();\n\n        for (final SnmpStore ent : entries) {\n            final Integer ifindex = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_IFINDEX);\n\n            if (ifindex == null || ifindex < 0) {\n                LogUtils.warnf(this, \"processRouteTable: Not valid ifIndex %s. Skipping.\", ifindex);\n                continue;\n            }\n\n            final InetAddress nexthop = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_NXTHOP);\n\n            if (nexthop == null) {\n                LogUtils.warnf(this, \"processRouteTable: next hop not found. Skipping.\");\n                continue;\n            }\n\n            final InetAddress routedest = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_DEST);\n            if (routedest == null) {\n                LogUtils.warnf(this, \"processRouteTable: route destination not found. Skipping.\");\n                continue;\n            }\n\n            final InetAddress routemask = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_MASK);\n\n            if (routemask == null) {\n                LogUtils.warnf(this, \"processRouteTable: route mask not found. Skipping.\");\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processRouteTable: parsing routeDest/routeMask/nextHop: %s/%s/%s - ifIndex = %d\", str(routedest), str(routemask), str(nexthop), ifindex);\n\n            final Integer routemetric1 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC1);\n\n            /**\n             * FIXME: send routedest 0.0.0.0 to discoverylink remember that\n             * now nexthop 0.0.0.0 is not parsed, anyway we should analyze\n             * this case in link discovery so here is the place where you can\n             * have this info saved for now is discarded. See DiscoveryLink\n             * for more details......\n             */\n\n            // the routerinterface constructor set nodeid, ifindex, netmask for nexthop address\n            // try to find on snmpinterface table\n            RouterInterface routeIface = getNodeidMaskFromIp(dbConn, nexthop);\n\n            // if target node is not snmp node always try to find info\n            // on ipinterface table\n            if (routeIface == null) {\n                routeIface = getNodeFromIp(dbConn, nexthop);\n            }\n\n            if (routeIface == null) {\n                LogUtils.warnf(this, \"processRouteTable: No node ID found for next hop IP address %s. Not adding the IP route interface to the linkable SNMP node.\", str(nexthop));\n                // try to find it in ipinterface\n                sendNewSuspectEvent(nexthop, snmpcoll.getTarget(), snmpcoll.getPackageName());\n            } else {\n                int snmpiftype = -2;\n\n                if (ifindex >= 0)\n                    snmpiftype = getSnmpIfType(dbConn, node.getNodeId(), ifindex);\n\n                if (snmpiftype == -1) {\n                    LogUtils.warnf(this, \"processRouteTable: interface has an invalid ifType (%d). Skipping.\", snmpiftype);\n                } else if (nexthop.isLoopbackAddress()) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a loopback address. Skipping.\");\n                } else if (InetAddressUtils.str(nexthop).equals(\"0.0.0.0\")) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a broadcast address. Skipping.\");\n                } else if (nexthop.isMulticastAddress()) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a multicast address. Skipping.\");\n                } else if (routemetric1 == null || routemetric1 < 0) {\n                    LogUtils.infof(this, \"processRouteTable: Route metric is invalid. Skipping.\");\n                } else {\n                    LogUtils.debugf(this, \"processRouteTable: Interface has a valid ifType (%d). Adding.\", snmpiftype);\n\n                    routeIface.setRouteDest(routedest);\n                    routeIface.setRoutemask(routemask);\n                    routeIface.setSnmpiftype(snmpiftype);\n                    routeIface.setIfindex(ifindex);\n                    routeIface.setMetric(routemetric1);\n                    routeIface.setNextHop(nexthop);\n                    routeInterfaces.add(routeIface);\n\n                }\n            }\n\n            final Integer routemetric2 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC2);\n            final Integer routemetric3 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC3);\n            final Integer routemetric4 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC4);\n            final Integer routemetric5 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC5);\n            final Integer routetype = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_TYPE);\n            final Integer routeproto = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_PROTO);\n\n            // always save info to DB\n            if (snmpcoll.getSaveIpRouteTable()) {\n\n                final OnmsNode onmsNode = getNode(node.getNodeId());\n                final OnmsIpRouteInterface ipRouteInterface = new OnmsIpRouteInterface();\n                ipRouteInterface.setLastPollTime(scanTime);\n                ipRouteInterface.setNode(onmsNode);\n                ipRouteInterface.setRouteDest(str(routedest));\n                ipRouteInterface.setRouteIfIndex(ifindex);\n                ipRouteInterface.setRouteMask(str(routemask));\n                ipRouteInterface.setRouteMetric1(routemetric1);\n                ipRouteInterface.setRouteMetric2(routemetric2);\n                ipRouteInterface.setRouteMetric3(routemetric3);\n                ipRouteInterface.setRouteMetric4(routemetric4);\n                ipRouteInterface.setRouteMetric5(routemetric5);\n                ipRouteInterface.setRouteNextHop(str(nexthop));\n                ipRouteInterface.setRouteProto(routeproto);\n                ipRouteInterface.setRouteType(routetype);\n                ipRouteInterface.setStatus(DbAtInterfaceEntry.STATUS_ACTIVE);\n\n                saveIpRouteInterface(dbConn, ipRouteInterface);\n            }\n        }\n        node.setRouteInterfaces(routeInterfaces);\n    }","commit_id":"56dd134e775efbe7fb0fbd543b7093cd539a1937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processIpNetToMediaTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        LogUtils.debugf(this, \"processIpNetToMediaTable: Starting IP net to media table processing.\");\n        // the AtInterfaces used by LinkableNode where to save info\n        final List<OnmsAtInterface> atInterfaces = new ArrayList<OnmsAtInterface>();\n\n        for (final IpNetToMediaTableEntry ent : snmpcoll.getIpNetToMediaTable().getEntries()) {\n\n            final int ifindex = ent.getIpNetToMediaIfIndex();\n\n            if (ifindex < 0) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid ifindex %s\", ifindex);\n                continue;\n            }\n\n            final InetAddress ipaddress = ent.getIpNetToMediaNetAddress();\n            final String hostAddress = InetAddressUtils.str(ipaddress);\n\n            if (ipaddress == null || ipaddress.isLoopbackAddress() || hostAddress.equals(\"0.0.0.0\")) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid IP: %s\", hostAddress);\n                continue;\n            }\n\n            final String physAddr = ent.getIpNetToMediaPhysAddress();\n\n            if (physAddr == null || physAddr.equals(\"000000000000\") || physAddr.equalsIgnoreCase(\"ffffffffffff\")) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid MAC address %s for IP %s\", physAddr, hostAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processIpNetToMediaTable: trying save ipNetToMedia info: IP address %s, MAC address %s, ifIndex %d\", hostAddress, physAddr, ifindex);\n\n            // get an At interface but without setting MAC address\n            final OnmsAtInterface at = getAtInterfaceForAddress(dbConn, ipaddress);\n            if (at == null) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: no node found for IP address %s.\", hostAddress);\n                sendNewSuspectEvent(ipaddress, snmpcoll.getTarget(), snmpcoll.getPackageName());\n                continue;\n            }\n\n            at.setSourceNodeId(node.getNodeId());\n\n            if (at.getMacAddress() != null && !at.getMacAddress().equals(physAddr)) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: Setting MAC address to %s but it used to be '%s' (IP Address = %s, ifIndex = %d)\", physAddr, at.getMacAddress(), hostAddress, ifindex);\n            }\n            at.setMacAddress(physAddr);\n\n            if (at.getIfIndex() != null && !at.getIfIndex().equals(ifindex)) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: Setting ifIndex to %d but it used to be '%s' (IP Address = %s, MAC = %s)\", ifindex, at.getIfIndex(), hostAddress, physAddr);\n            }\n            at.setIfIndex(ifindex);\n\n            at.setLastPollTime(scanTime);\n            at.setStatus(DbAtInterfaceEntry.STATUS_ACTIVE);\n\n            // add AtInterface to list of valid interfaces\n            atInterfaces.add(at);\n\n            saveAtInterface(dbConn, at);\n        }\n        // set AtInterfaces in LinkableNode\n        node.setAtInterfaces(atInterfaces);\n    }","id":18243,"modified_method":"protected void processIpNetToMediaTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<IpNetToMediaTableEntry> entries = snmpcoll.getIpNetToMediaTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processIpNetToMediaTable: Starting ipNetToMedia table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processIpNetToMediaTable: Zero ipNetToMedia table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        // the AtInterfaces used by LinkableNode where to save info\n        final List<OnmsAtInterface> atInterfaces = new ArrayList<OnmsAtInterface>();\n\n        for (final IpNetToMediaTableEntry ent : entries) {\n\n            final int ifindex = ent.getIpNetToMediaIfIndex();\n\n            if (ifindex < 0) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid ifindex %s\", ifindex);\n                continue;\n            }\n\n            final InetAddress ipaddress = ent.getIpNetToMediaNetAddress();\n            final String hostAddress = InetAddressUtils.str(ipaddress);\n\n            if (ipaddress == null || ipaddress.isLoopbackAddress() || hostAddress.equals(\"0.0.0.0\")) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid IP: %s\", hostAddress);\n                continue;\n            }\n\n            final String physAddr = ent.getIpNetToMediaPhysAddress();\n\n            if (physAddr == null || physAddr.equals(\"000000000000\") || physAddr.equalsIgnoreCase(\"ffffffffffff\")) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid MAC address %s for IP %s\", physAddr, hostAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processIpNetToMediaTable: trying save ipNetToMedia info: IP address %s, MAC address %s, ifIndex %d\", hostAddress, physAddr, ifindex);\n\n            // get an AtInterface but without setting MAC address\n            final OnmsAtInterface at = getAtInterfaceForAddress(dbConn, ipaddress);\n            if (at == null) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: no node found for IP address %s.\", hostAddress);\n                sendNewSuspectEvent(ipaddress, snmpcoll.getTarget(), snmpcoll.getPackageName());\n                continue;\n            }\n\n            at.setSourceNodeId(node.getNodeId());\n\n            if (at.getMacAddress() != null && !at.getMacAddress().equals(physAddr)) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: Setting OnmsAtInterface MAC address to %s but it used to be '%s' (IP Address = %s, ifIndex = %d)\", physAddr, at.getMacAddress(), hostAddress, ifindex);\n            }\n            at.setMacAddress(physAddr);\n\n            if (at.getIfIndex() != null && !at.getIfIndex().equals(ifindex)) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: Setting OnmsAtInterface ifIndex to %d but it used to be '%s' (IP Address = %s, MAC = %s)\", ifindex, at.getIfIndex(), hostAddress, physAddr);\n            }\n            at.setIfIndex(ifindex);\n\n            at.setLastPollTime(scanTime);\n            at.setStatus(DbAtInterfaceEntry.STATUS_ACTIVE);\n\n            // add AtInterface to list of valid interfaces\n            atInterfaces.add(at);\n\n            saveAtInterface(dbConn, at);\n        }\n        // set AtInterfaces in LinkableNode\n        node.setAtInterfaces(atInterfaces);\n    }","commit_id":"56dd134e775efbe7fb0fbd543b7093cd539a1937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processDot1DTpFdbTable(LinkableNode node, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl, Timestamp scanTime) {\n        LogUtils.debugf(this, \"processDot1DTpFdbTable: Starting dot1dTpFdb table processing.\");\n\n        for (final Dot1dTpFdbTableEntry dot1dfdbentry : snmpVlanColl.getDot1dFdbTable().getEntries()) {\n            final String curMacAddress = dot1dfdbentry.getDot1dTpFdbAddress();\n            final int fdbport = dot1dfdbentry.getDot1dTpFdbPort();\n            final int curfdbstatus = dot1dfdbentry.getDot1dTpFdbStatus();\n\n            if (curMacAddress == null || curMacAddress.equals(\"000000000000\")) {\n                LogUtils.warnf(this, \"processDot1DTpFdbTable: Invalid MAC address: %s. Skipping.\", curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processDot1DTpFdbTable: Found valid MAC address: %s\", curMacAddress);\n\n            if (fdbport == 0 || fdbport == -1) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Invalid FDB port (%d) for MAC address %s. Skipping.\", fdbport, curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processDot1DTpFdbTable: MAC address (%s) found on bridge port %d\", curMacAddress, fdbport);\n\n            if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED && vlan.getVlanId() != null) {\n                node.addMacAddress(fdbport, curMacAddress, vlan.getVlanId().toString());\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found learned status on bridge port.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {\n                node.addBridgeIdentifier(curMacAddress);\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: MAC address (%s) is used as bridge identifier.\", curMacAddress);\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'INVALID' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'MGMT' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'OTHER' status. Skipping.\");\n            } else if (curfdbstatus == -1) {\n                LogUtils.warnf(this, \"processDot1DTpFdbTable: Unable to determine status. Skipping.\");\n            }\n        }\n    }","id":18244,"modified_method":"protected void processDot1DTpFdbTable(LinkableNode node, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl, Timestamp scanTime) {\n        List<Dot1dTpFdbTableEntry> entries = snmpVlanColl.getDot1dFdbTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Starting dot1dTpFdb table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Zero dot1dTpFdb table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        for (final Dot1dTpFdbTableEntry dot1dfdbentry : entries) {\n            final String curMacAddress = dot1dfdbentry.getDot1dTpFdbAddress();\n            final int fdbport = dot1dfdbentry.getDot1dTpFdbPort();\n            final int curfdbstatus = dot1dfdbentry.getDot1dTpFdbStatus();\n\n            if (curMacAddress == null || curMacAddress.equals(\"000000000000\")) {\n                LogUtils.warnf(this, \"processDot1DTpFdbTable: Invalid MAC address: %s. Skipping.\", curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processDot1DTpFdbTable: Found valid MAC address: %s\", curMacAddress);\n\n            if (fdbport == 0 || fdbport == -1) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Invalid FDB port (%d) for MAC address %s. Skipping.\", fdbport, curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processDot1DTpFdbTable: MAC address (%s) found on bridge port %d\", curMacAddress, fdbport);\n\n            if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED && vlan.getVlanId() != null) {\n                node.addMacAddress(fdbport, curMacAddress, vlan.getVlanId().toString());\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found learned status on bridge port.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {\n                node.addBridgeIdentifier(curMacAddress);\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: MAC address (%s) is used as bridge identifier.\", curMacAddress);\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'INVALID' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'MGMT' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'OTHER' status. Skipping.\");\n            } else if (curfdbstatus == -1) {\n                LogUtils.warnf(this, \"processDot1DTpFdbTable: Unable to determine status. Skipping.\");\n            }\n        }\n    }","commit_id":"56dd134e775efbe7fb0fbd543b7093cd539a1937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processVlanTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        LogUtils.debugf(this, \"processVlanTable: Starting VLAN table processing.\");\n\n        final List<OnmsVlan> vlans = new ArrayList<OnmsVlan>();\n\n        for (final SnmpStore ent : snmpcoll.getVlanTable().getEntries()) {\n            final Integer vlanIndex = ent.getInt32(VlanCollectorEntry.VLAN_INDEX);\n\n            if (vlanIndex == null || vlanIndex < 0) {\n                LogUtils.debugf(this, \"processVlanTable: VLAN ifIndex was invalid (%d).  Skipping.\", vlanIndex);\n                continue;\n            }\n\n            String vlanName = ent.getDisplayString(VlanCollectorEntry.VLAN_NAME);\n            if (vlanName == null) {\n                LogUtils.debugf(this, \"processVlanTable: No VLAN name found.  Setting to 'default-%s'.\", vlanIndex);\n                vlanName = \"default-\" + vlanIndex;\n            }\n\n            Integer vlanType = ent.getInt32(VlanCollectorEntry.VLAN_TYPE);\n            if (vlanType == null) {\n                vlanType = DbVlanEntry.VLAN_TYPE_UNKNOWN;\n            }\n\n            Integer vlanStatus = ent.getInt32(VlanCollectorEntry.VLAN_STATUS);\n            if (vlanStatus == null) {\n                vlanStatus = DbVlanEntry.VLAN_STATUS_UNKNOWN;\n            }\n\n            final OnmsNode onmsNode = getNode(node.getNodeId());\n            final OnmsVlan vlan = new OnmsVlan(vlanIndex, vlanName, vlanStatus, vlanType);\n            vlan.setLastPollTime(scanTime);\n            vlan.setNode(onmsNode);\n            vlan.setStatus(DbVlanEntry.STATUS_ACTIVE);\n            vlans.add(vlan);\n\n            LogUtils.debugf(this, \"processVlanTable: Saving VLAN entry: %s\", vlan);\n\n            saveVlan(dbConn, vlan);\n\n        }\n        node.setVlans(vlans);\n    }","id":18245,"modified_method":"protected void processVlanTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<SnmpStore> entries = snmpcoll.getVlanTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processVlanTable: Starting VLAN table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processVlanTable: Zero VLAN table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        final List<OnmsVlan> vlans = new ArrayList<OnmsVlan>();\n\n        for (final SnmpStore ent : entries) {\n            final Integer vlanIndex = ent.getInt32(VlanCollectorEntry.VLAN_INDEX);\n\n            if (vlanIndex == null || vlanIndex < 0) {\n                LogUtils.debugf(this, \"processVlanTable: VLAN ifIndex was invalid (%d).  Skipping.\", vlanIndex);\n                continue;\n            }\n\n            String vlanName = ent.getDisplayString(VlanCollectorEntry.VLAN_NAME);\n            if (vlanName == null) {\n                LogUtils.debugf(this, \"processVlanTable: No VLAN name found.  Setting to 'default-%s'.\", vlanIndex);\n                vlanName = \"default-\" + vlanIndex;\n            }\n\n            Integer vlanType = ent.getInt32(VlanCollectorEntry.VLAN_TYPE);\n            if (vlanType == null) {\n                vlanType = DbVlanEntry.VLAN_TYPE_UNKNOWN;\n            }\n\n            Integer vlanStatus = ent.getInt32(VlanCollectorEntry.VLAN_STATUS);\n            if (vlanStatus == null) {\n                vlanStatus = DbVlanEntry.VLAN_STATUS_UNKNOWN;\n            }\n\n            final OnmsNode onmsNode = getNode(node.getNodeId());\n            final OnmsVlan vlan = new OnmsVlan(vlanIndex, vlanName, vlanStatus, vlanType);\n            vlan.setLastPollTime(scanTime);\n            vlan.setNode(onmsNode);\n            vlan.setStatus(DbVlanEntry.STATUS_ACTIVE);\n            vlans.add(vlan);\n\n            LogUtils.debugf(this, \"processVlanTable: Saving VLAN entry: %s\", vlan);\n\n            saveVlan(dbConn, vlan);\n\n        }\n        node.setVlans(vlans);\n    }","commit_id":"56dd134e775efbe7fb0fbd543b7093cd539a1937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processCdpCacheTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        LogUtils.debugf(this, \"processCdpCacheTable: Starting CDP cache table processing.\");\n        List<CdpInterface> cdpInterfaces = new ArrayList<CdpInterface>();\n\n        for (final CdpCacheTableEntry cdpEntry : snmpcoll.getCdpCacheTable().getEntries()) {\n            final int cdpAddrType = cdpEntry.getCdpCacheAddressType();\n\n            if (cdpAddrType != CDP_ADDRESS_TYPE_IP_ADDRESS) {\n                LogUtils.warnf(this, \"processCdpCacheTable: CDP address type not valid: %d\", cdpAddrType);\n                continue;\n            }\n\n            final InetAddress cdpTargetIpAddr = cdpEntry.getCdpCacheAddress();\n            final String hostAddress = InetAddressUtils.str(cdpTargetIpAddr);\n\n            if (cdpTargetIpAddr == null || cdpTargetIpAddr.isLoopbackAddress() || hostAddress.equals(\"0.0.0.0\")) {\n                LogUtils.debugf(this, \"processCdpCacheTable: IP address is not valid: %s\", hostAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: IP address found: %s\", hostAddress);\n\n            final int cdpIfIndex = cdpEntry.getCdpCacheIfIndex();\n\n            if (cdpIfIndex < 0) {\n                LogUtils.debugf(this, \"processCdpCacheTable: ifIndex not valid: %d\", cdpIfIndex);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: ifIndex found: %d\", cdpIfIndex);\n\n            final String cdpTargetDevicePort = cdpEntry.getCdpCacheDevicePort();\n\n            if (cdpTargetDevicePort == null) {\n                LogUtils.warnf(this, \"processCdpCacheTable: Target device port not found. Skipping.\");\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: Target device port name found: %s\", cdpTargetDevicePort);\n\n            int targetCdpNodeId = -1;\n\n            if (!cdpTargetIpAddr.isLoopbackAddress() && hostAddress.equals(\"0.0.0.0\")) {\n                targetCdpNodeId = getNodeidFromIp(dbConn, cdpTargetIpAddr);\n            }\n\n            if (targetCdpNodeId == -1) {\n                LogUtils.warnf(this, \"processCdpCacheTable: No node ID found: interface not added to linkable SNMP node. Skipping.\");\n                sendNewSuspectEvent(cdpTargetIpAddr, snmpcoll.getTarget(), snmpcoll.getPackageName());\n                continue;\n            }\n\n            final int cdpTargetIfindex = getIfIndexByName(dbConn, targetCdpNodeId, cdpTargetDevicePort);\n\n            if (cdpTargetIfindex == -1) {\n                LogUtils.warnf(this, \"processCdpCacheTable: No valid target ifIndex found: interface not added to linkable SNMP node. Skipping.\");\n                continue;\n            }\n\n            final CdpInterface cdpIface = new CdpInterface(cdpIfIndex);\n            cdpIface.setCdpTargetNodeId(targetCdpNodeId);\n            cdpIface.setCdpTargetIpAddr(cdpTargetIpAddr);\n            cdpIface.setCdpTargetIfIndex(cdpTargetIfindex);\n\n            LogUtils.debugf(this, \"processCdpCacheTable: Adding interface to linkable SNMP node: %s\", cdpIface);\n\n            cdpInterfaces.add(cdpIface);\n        }\n        node.setCdpInterfaces(cdpInterfaces);\n    }","id":18246,"modified_method":"protected void processCdpCacheTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<CdpCacheTableEntry> entries = snmpcoll.getCdpCacheTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processCdpCacheTable: Starting CDP cache table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processCdpCacheTable: Zero CDP cache table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        List<CdpInterface> cdpInterfaces = new ArrayList<CdpInterface>();\n\n        for (final CdpCacheTableEntry cdpEntry : entries) {\n            final int cdpAddrType = cdpEntry.getCdpCacheAddressType();\n\n            if (cdpAddrType != CDP_ADDRESS_TYPE_IP_ADDRESS) {\n                LogUtils.warnf(this, \"processCdpCacheTable: CDP address type not valid: %d\", cdpAddrType);\n                continue;\n            }\n\n            final InetAddress cdpTargetIpAddr = cdpEntry.getCdpCacheAddress();\n            final String hostAddress = InetAddressUtils.str(cdpTargetIpAddr);\n\n            if (cdpTargetIpAddr == null || cdpTargetIpAddr.isLoopbackAddress() || hostAddress.equals(\"0.0.0.0\")) {\n                LogUtils.debugf(this, \"processCdpCacheTable: IP address is not valid: %s\", hostAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: IP address found: %s\", hostAddress);\n\n            final int cdpIfIndex = cdpEntry.getCdpCacheIfIndex();\n\n            if (cdpIfIndex < 0) {\n                LogUtils.debugf(this, \"processCdpCacheTable: ifIndex not valid: %d\", cdpIfIndex);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: ifIndex found: %d\", cdpIfIndex);\n\n            final String cdpTargetDevicePort = cdpEntry.getCdpCacheDevicePort();\n\n            if (cdpTargetDevicePort == null) {\n                LogUtils.warnf(this, \"processCdpCacheTable: Target device port not found. Skipping.\");\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: Target device port name found: %s\", cdpTargetDevicePort);\n\n            int targetCdpNodeId = -1;\n\n            if (!cdpTargetIpAddr.isLoopbackAddress() && hostAddress.equals(\"0.0.0.0\")) {\n                targetCdpNodeId = getNodeidFromIp(dbConn, cdpTargetIpAddr);\n            }\n\n            if (targetCdpNodeId == -1) {\n                LogUtils.warnf(this, \"processCdpCacheTable: No node ID found: interface not added to linkable SNMP node. Skipping.\");\n                sendNewSuspectEvent(cdpTargetIpAddr, snmpcoll.getTarget(), snmpcoll.getPackageName());\n                continue;\n            }\n\n            final int cdpTargetIfindex = getIfIndexByName(dbConn, targetCdpNodeId, cdpTargetDevicePort);\n\n            if (cdpTargetIfindex == -1) {\n                LogUtils.warnf(this, \"processCdpCacheTable: No valid target ifIndex found: interface not added to linkable SNMP node. Skipping.\");\n                continue;\n            }\n\n            final CdpInterface cdpIface = new CdpInterface(cdpIfIndex);\n            cdpIface.setCdpTargetNodeId(targetCdpNodeId);\n            cdpIface.setCdpTargetIpAddr(cdpTargetIpAddr);\n            cdpIface.setCdpTargetIfIndex(cdpTargetIfindex);\n\n            LogUtils.debugf(this, \"processCdpCacheTable: Adding interface to linkable SNMP node: %s\", cdpIface);\n\n            cdpInterfaces.add(cdpIface);\n        }\n        node.setCdpInterfaces(cdpInterfaces);\n    }","commit_id":"56dd134e775efbe7fb0fbd543b7093cd539a1937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processQBridgeDot1dTpFdbTable(final LinkableNode node, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) {\n        LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Starting Q-BRIDGE-MIB dot1dTpFdb table processing.\");\n\n        for (final QBridgeDot1dTpFdbTableEntry dot1dfdbentry : snmpVlanColl.getQBridgeDot1dFdbTable().getEntries()) {\n            final String curMacAddress = dot1dfdbentry.getQBridgeDot1dTpFdbAddress();\n\n            if (curMacAddress == null || curMacAddress.equals(\"000000000000\")) {\n                LogUtils.warnf(this, \"processQBridgeDot1DTpFdbTable: Invalid MAC address: %s. Skipping.\", curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found MAC address: %s\", curMacAddress);\n\n            final int fdbport = dot1dfdbentry.getQBridgeDot1dTpFdbPort();\n\n            if (fdbport == 0 || fdbport == -1) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Invalid FDB port (%d) for MAC address %s. Skipping.\", fdbport, curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found bridge port: %d.\", fdbport);\n\n            final int curfdbstatus = dot1dfdbentry.getQBridgeDot1dTpFdbStatus();\n\n            if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED) {\n                node.addMacAddress(fdbport, curMacAddress, Integer.toString((int) vlan.getVlanId()));\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found learned status on bridge port.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {\n                node.addBridgeIdentifier(curMacAddress);\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: MAC address (%s) is used as bridge identifier.\", curMacAddress);\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'INVALID' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'MGMT' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'OTHER' status. Skipping.\");\n            } else if (curfdbstatus == -1) {\n                LogUtils.warnf(this, \"processQBridgeDot1DTpFdbTable: Unable to determine status. Skipping.\");\n            }\n        }\n    }","id":18247,"modified_method":"protected void processQBridgeDot1dTpFdbTable(final LinkableNode node, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) {\n        List<QBridgeDot1dTpFdbTableEntry> entries = snmpVlanColl.getQBridgeDot1dFdbTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processQBridgeDot1dTpFdbTable: Starting Q-BRIDGE-MIB dot1dTpFdb table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processQBridgeDot1dTpFdbTable: Zero Q-BRIDGE-MIB dot1dTpFdb table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        for (final QBridgeDot1dTpFdbTableEntry dot1dfdbentry : entries) {\n            final String curMacAddress = dot1dfdbentry.getQBridgeDot1dTpFdbAddress();\n\n            if (curMacAddress == null || curMacAddress.equals(\"000000000000\")) {\n                LogUtils.warnf(this, \"processQBridgeDot1DTpFdbTable: Invalid MAC address: %s. Skipping.\", curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found MAC address: %s\", curMacAddress);\n\n            final int fdbport = dot1dfdbentry.getQBridgeDot1dTpFdbPort();\n\n            if (fdbport == 0 || fdbport == -1) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Invalid FDB port (%d) for MAC address %s. Skipping.\", fdbport, curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found bridge port: %d.\", fdbport);\n\n            final int curfdbstatus = dot1dfdbentry.getQBridgeDot1dTpFdbStatus();\n\n            if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED) {\n                node.addMacAddress(fdbport, curMacAddress, Integer.toString((int) vlan.getVlanId()));\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found learned status on bridge port.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {\n                node.addBridgeIdentifier(curMacAddress);\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: MAC address (%s) is used as bridge identifier.\", curMacAddress);\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'INVALID' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'MGMT' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'OTHER' status. Skipping.\");\n            } else if (curfdbstatus == -1) {\n                LogUtils.warnf(this, \"processQBridgeDot1DTpFdbTable: Unable to determine status. Skipping.\");\n            }\n        }\n    }","commit_id":"56dd134e775efbe7fb0fbd543b7093cd539a1937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processDot1StpPortTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {\n        LogUtils.debugf(this, \"processDot1StpPortTable: Starting dot1StpPort table processing.\");\n        \n        for (final Dot1dStpPortTableEntry dot1dstpptentry : snmpVlanColl.getDot1dStpPortTable().getEntries()) {\n\n            final int stpport = dot1dstpptentry.getDot1dStpPort();\n\n            if (stpport == -1) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Found invalid STP port. Skipping.\");\n                continue;\n            }\n\n            final OnmsNode onmsNode = getNode(node.getNodeId());\n            if (onmsNode == null) {\n                LogUtils.debugf(this, \"no node found!\");\n                continue;\n            }\n\n            final OnmsStpInterface stpInterface = new OnmsStpInterface(onmsNode, stpport, vlan.getVlanId());\n            stpInterface.setStatus(DbStpNodeEntry.STATUS_ACTIVE);\n            stpInterface.setLastPollTime(scanTime);\n\n            String stpPortDesignatedBridge = dot1dstpptentry.getDot1dStpPortDesignatedBridge();\n            String stpPortDesignatedPort = dot1dstpptentry.getDot1dStpPortDesignatedPort();\n\n            if (stpPortDesignatedBridge == null || stpPortDesignatedBridge.equals(\"0000000000000000\")) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Designated bridge (%s) is invalid. Skipping.\", stpPortDesignatedBridge);\n                stpPortDesignatedBridge = \"0000000000000000\";\n            } else if (stpPortDesignatedPort == null || stpPortDesignatedPort.equals(\"0000\")) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Designated port (%s) is invalid. Skipping.\", stpPortDesignatedPort);\n                stpPortDesignatedPort = \"0000\";\n            } else {\n                stpInterface.setStpPortState(dot1dstpptentry.getDot1dStpPortState());\n                stpInterface.setStpPortPathCost(dot1dstpptentry.getDot1dStpPortPathCost());\n                stpInterface.setStpPortDesignatedBridge(stpPortDesignatedBridge);\n                stpInterface.setStpPortDesignatedRoot(dot1dstpptentry.getDot1dStpPortDesignatedRoot());\n                stpInterface.setStpPortDesignatedCost(dot1dstpptentry.getDot1dStpPortDesignatedCost());\n                stpInterface.setStpPortDesignatedPort(stpPortDesignatedPort);\n                node.addStpInterface(stpInterface);\n            }\n\n            if (snmpcoll.getSaveStpInterfaceTable()) {\n                saveStpInterface(dbConn, stpInterface);\n            }\n        }\n    }","id":18248,"modified_method":"protected void processDot1StpPortTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {\n        List<Dot1dStpPortTableEntry> entries = snmpVlanColl.getDot1dStpPortTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processDot1StpPortTable: Starting dot1StpPort table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processDot1StpPortTable: Zero dot1StpPort table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        for (final Dot1dStpPortTableEntry dot1dstpptentry : entries) {\n\n            final int stpport = dot1dstpptentry.getDot1dStpPort();\n\n            if (stpport == -1) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Found invalid STP port. Skipping.\");\n                continue;\n            }\n\n            final OnmsNode onmsNode = getNode(node.getNodeId());\n            if (onmsNode == null) {\n                LogUtils.debugf(this, \"no node found!\");\n                continue;\n            }\n\n            final OnmsStpInterface stpInterface = new OnmsStpInterface(onmsNode, stpport, vlan.getVlanId());\n            stpInterface.setStatus(DbStpNodeEntry.STATUS_ACTIVE);\n            stpInterface.setLastPollTime(scanTime);\n\n            String stpPortDesignatedBridge = dot1dstpptentry.getDot1dStpPortDesignatedBridge();\n            String stpPortDesignatedPort = dot1dstpptentry.getDot1dStpPortDesignatedPort();\n\n            if (stpPortDesignatedBridge == null || stpPortDesignatedBridge.equals(\"0000000000000000\")) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Designated bridge (%s) is invalid. Skipping.\", stpPortDesignatedBridge);\n                stpPortDesignatedBridge = \"0000000000000000\";\n            } else if (stpPortDesignatedPort == null || stpPortDesignatedPort.equals(\"0000\")) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Designated port (%s) is invalid. Skipping.\", stpPortDesignatedPort);\n                stpPortDesignatedPort = \"0000\";\n            } else {\n                stpInterface.setStpPortState(dot1dstpptentry.getDot1dStpPortState());\n                stpInterface.setStpPortPathCost(dot1dstpptentry.getDot1dStpPortPathCost());\n                stpInterface.setStpPortDesignatedBridge(stpPortDesignatedBridge);\n                stpInterface.setStpPortDesignatedRoot(dot1dstpptentry.getDot1dStpPortDesignatedRoot());\n                stpInterface.setStpPortDesignatedCost(dot1dstpptentry.getDot1dStpPortDesignatedCost());\n                stpInterface.setStpPortDesignatedPort(stpPortDesignatedPort);\n                node.addStpInterface(stpInterface);\n            }\n\n            if (snmpcoll.getSaveStpInterfaceTable()) {\n                saveStpInterface(dbConn, stpInterface);\n            }\n        }\n    }","commit_id":"56dd134e775efbe7fb0fbd543b7093cd539a1937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processRouteTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<RouterInterface> routeInterfaces = new ArrayList<RouterInterface>();\n\n        LogUtils.debugf(this, \"processRouteTable: Starting route table processing.\");\n\n        for (final SnmpStore ent : snmpcoll.getIpRouteTable().getEntries()) {\n            final Integer ifindex = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_IFINDEX);\n\n            if (ifindex == null || ifindex < 0) {\n                LogUtils.warnf(this, \"processRouteTable: Not valid ifIndex %s. Skipping.\", ifindex);\n                continue;\n            }\n\n            final InetAddress nexthop = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_NXTHOP);\n\n            if (nexthop == null) {\n                LogUtils.warnf(this, \"processRouteTable: next hop not found. Skipping.\");\n                continue;\n            }\n\n            final InetAddress routedest = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_DEST);\n            if (routedest == null) {\n                LogUtils.warnf(this, \"processRouteTable: route destination not found. Skipping.\");\n                continue;\n            }\n\n            final InetAddress routemask = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_MASK);\n\n            if (routemask == null) {\n                LogUtils.warnf(this, \"processRouteTable: route mask not found. Skipping.\");\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processRouteTable: parsing routeDest/routeMask/nextHop: %s/%s/%s - ifIndex = %d\", str(routedest), str(routemask), str(nexthop), ifindex);\n\n            final Integer routemetric1 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC1);\n\n            /**\n             * FIXME: send routedest 0.0.0.0 to discoverylink remember that\n             * now nexthop 0.0.0.0 is not parsed, anyway we should analyze\n             * this case in link discovery so here is the place where you can\n             * have this info saved for now is discarded. See DiscoveryLink\n             * for more details......\n             */\n\n            // the routerinterface constructor set nodeid, ifindex, netmask for nexthop address\n            // try to find on snmpinterface table\n            RouterInterface routeIface = getNodeidMaskFromIp(dbConn, nexthop);\n\n            // if target node is not snmp node always try to find info\n            // on ipinterface table\n            if (routeIface == null) {\n                routeIface = getNodeFromIp(dbConn, nexthop);\n            }\n\n            if (routeIface == null) {\n                LogUtils.warnf(this, \"processRouteTable: No node ID found for next hop IP address %s. Not adding the IP route interface to the linkable SNMP node.\", str(nexthop));\n                // try to find it in ipinterface\n                sendNewSuspectEvent(nexthop, snmpcoll.getTarget(), snmpcoll.getPackageName());\n            } else {\n                int snmpiftype = -2;\n\n                if (ifindex >= 0)\n                    snmpiftype = getSnmpIfType(dbConn, node.getNodeId(), ifindex);\n\n                if (snmpiftype == -1) {\n                    LogUtils.warnf(this, \"processRouteTable: interface has an invalid ifType (%d). Skipping.\", snmpiftype);\n                } else if (nexthop.isLoopbackAddress()) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a loopback address. Skipping.\");\n                } else if (InetAddressUtils.str(nexthop).equals(\"0.0.0.0\")) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a broadcast address. Skipping.\");\n                } else if (nexthop.isMulticastAddress()) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a multicast address. Skipping.\");\n                } else if (routemetric1 == null || routemetric1 < 0) {\n                    LogUtils.infof(this, \"processRouteTable: Route metric is invalid. Skipping.\");\n                } else {\n                    LogUtils.debugf(this, \"processRouteTable: Interface has a valid ifType (%d). Adding.\", snmpiftype);\n\n                    routeIface.setRouteDest(routedest);\n                    routeIface.setRoutemask(routemask);\n                    routeIface.setSnmpiftype(snmpiftype);\n                    routeIface.setIfindex(ifindex);\n                    routeIface.setMetric(routemetric1);\n                    routeIface.setNextHop(nexthop);\n                    routeInterfaces.add(routeIface);\n\n                }\n            }\n\n            final Integer routemetric2 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC2);\n            final Integer routemetric3 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC3);\n            final Integer routemetric4 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC4);\n            final Integer routemetric5 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC5);\n            final Integer routetype = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_TYPE);\n            final Integer routeproto = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_PROTO);\n\n            // always save info to DB\n            if (snmpcoll.getSaveIpRouteTable()) {\n\n                final OnmsNode onmsNode = getNode(node.getNodeId());\n                final OnmsIpRouteInterface ipRouteInterface = new OnmsIpRouteInterface();\n                ipRouteInterface.setLastPollTime(scanTime);\n                ipRouteInterface.setNode(onmsNode);\n                ipRouteInterface.setRouteDest(str(routedest));\n                ipRouteInterface.setRouteIfIndex(ifindex);\n                ipRouteInterface.setRouteMask(str(routemask));\n                ipRouteInterface.setRouteMetric1(routemetric1);\n                ipRouteInterface.setRouteMetric2(routemetric2);\n                ipRouteInterface.setRouteMetric3(routemetric3);\n                ipRouteInterface.setRouteMetric4(routemetric4);\n                ipRouteInterface.setRouteMetric5(routemetric5);\n                ipRouteInterface.setRouteNextHop(str(nexthop));\n                ipRouteInterface.setRouteProto(routeproto);\n                ipRouteInterface.setRouteType(routetype);\n                ipRouteInterface.setStatus(DbAtInterfaceEntry.STATUS_ACTIVE);\n\n                saveIpRouteInterface(dbConn, ipRouteInterface);\n            }\n        }\n        node.setRouteInterfaces(routeInterfaces);\n    }","id":18249,"modified_method":"protected void processRouteTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<SnmpStore> entries = snmpcoll.getIpRouteTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processRouteTable: Starting route table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processRouteTable: Zero route table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        List<RouterInterface> routeInterfaces = new ArrayList<RouterInterface>();\n\n        for (final SnmpStore ent : entries) {\n            final Integer ifindex = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_IFINDEX);\n\n            if (ifindex == null || ifindex < 0) {\n                LogUtils.warnf(this, \"processRouteTable: Not valid ifIndex %s. Skipping.\", ifindex);\n                continue;\n            }\n\n            final InetAddress nexthop = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_NXTHOP);\n\n            if (nexthop == null) {\n                LogUtils.warnf(this, \"processRouteTable: next hop not found. Skipping.\");\n                continue;\n            }\n\n            final InetAddress routedest = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_DEST);\n            if (routedest == null) {\n                LogUtils.warnf(this, \"processRouteTable: route destination not found. Skipping.\");\n                continue;\n            }\n\n            final InetAddress routemask = ent.getIPAddress(IpRouteCollectorEntry.IP_ROUTE_MASK);\n\n            if (routemask == null) {\n                LogUtils.warnf(this, \"processRouteTable: route mask not found. Skipping.\");\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processRouteTable: parsing routeDest/routeMask/nextHop: %s/%s/%s - ifIndex = %d\", str(routedest), str(routemask), str(nexthop), ifindex);\n\n            final Integer routemetric1 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC1);\n\n            /**\n             * FIXME: send routedest 0.0.0.0 to discoverylink remember that\n             * now nexthop 0.0.0.0 is not parsed, anyway we should analyze\n             * this case in link discovery so here is the place where you can\n             * have this info saved for now is discarded. See DiscoveryLink\n             * for more details......\n             */\n\n            // the routerinterface constructor set nodeid, ifindex, netmask for nexthop address\n            // try to find on snmpinterface table\n            RouterInterface routeIface = getNodeidMaskFromIp(dbConn, nexthop);\n\n            // if target node is not snmp node always try to find info\n            // on ipinterface table\n            if (routeIface == null) {\n                routeIface = getNodeFromIp(dbConn, nexthop);\n            }\n\n            if (routeIface == null) {\n                LogUtils.warnf(this, \"processRouteTable: No node ID found for next hop IP address %s. Not adding the IP route interface to the linkable SNMP node.\", str(nexthop));\n                // try to find it in ipinterface\n                sendNewSuspectEvent(nexthop, snmpcoll.getTarget(), snmpcoll.getPackageName());\n            } else {\n                int snmpiftype = -2;\n\n                if (ifindex >= 0)\n                    snmpiftype = getSnmpIfType(dbConn, node.getNodeId(), ifindex);\n\n                if (snmpiftype == -1) {\n                    LogUtils.warnf(this, \"processRouteTable: interface has an invalid ifType (%d). Skipping.\", snmpiftype);\n                } else if (nexthop.isLoopbackAddress()) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a loopback address. Skipping.\");\n                } else if (InetAddressUtils.str(nexthop).equals(\"0.0.0.0\")) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a broadcast address. Skipping.\");\n                } else if (nexthop.isMulticastAddress()) {\n                    LogUtils.infof(this, \"processRouteTable: next hop is a multicast address. Skipping.\");\n                } else if (routemetric1 == null || routemetric1 < 0) {\n                    LogUtils.infof(this, \"processRouteTable: Route metric is invalid. Skipping.\");\n                } else {\n                    LogUtils.debugf(this, \"processRouteTable: Interface has a valid ifType (%d). Adding.\", snmpiftype);\n\n                    routeIface.setRouteDest(routedest);\n                    routeIface.setRoutemask(routemask);\n                    routeIface.setSnmpiftype(snmpiftype);\n                    routeIface.setIfindex(ifindex);\n                    routeIface.setMetric(routemetric1);\n                    routeIface.setNextHop(nexthop);\n                    routeInterfaces.add(routeIface);\n\n                }\n            }\n\n            final Integer routemetric2 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC2);\n            final Integer routemetric3 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC3);\n            final Integer routemetric4 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC4);\n            final Integer routemetric5 = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_METRIC5);\n            final Integer routetype = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_TYPE);\n            final Integer routeproto = ent.getInt32(IpRouteCollectorEntry.IP_ROUTE_PROTO);\n\n            // always save info to DB\n            if (snmpcoll.getSaveIpRouteTable()) {\n\n                final OnmsNode onmsNode = getNode(node.getNodeId());\n                final OnmsIpRouteInterface ipRouteInterface = new OnmsIpRouteInterface();\n                ipRouteInterface.setLastPollTime(scanTime);\n                ipRouteInterface.setNode(onmsNode);\n                ipRouteInterface.setRouteDest(str(routedest));\n                ipRouteInterface.setRouteIfIndex(ifindex);\n                ipRouteInterface.setRouteMask(str(routemask));\n                ipRouteInterface.setRouteMetric1(routemetric1);\n                ipRouteInterface.setRouteMetric2(routemetric2);\n                ipRouteInterface.setRouteMetric3(routemetric3);\n                ipRouteInterface.setRouteMetric4(routemetric4);\n                ipRouteInterface.setRouteMetric5(routemetric5);\n                ipRouteInterface.setRouteNextHop(str(nexthop));\n                ipRouteInterface.setRouteProto(routeproto);\n                ipRouteInterface.setRouteType(routetype);\n                ipRouteInterface.setStatus(DbAtInterfaceEntry.STATUS_ACTIVE);\n\n                saveIpRouteInterface(dbConn, ipRouteInterface);\n            }\n        }\n        node.setRouteInterfaces(routeInterfaces);\n    }","commit_id":"3edf3ef025673b34bfc95083048307e39e199c6a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processDot1DBasePortTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {\n        LogUtils.debugf(this, \"processDot1DBasePortTable: Starting dot1dBasePort table processing.\");\n\n        for (final Dot1dBasePortTableEntry dot1dbaseptentry : snmpVlanColl.getDot1dBasePortTable().getEntries()) {\n            int baseport = dot1dbaseptentry.getBaseBridgePort();\n            int ifindex = dot1dbaseptentry.getBaseBridgePortIfindex();\n\n            if (baseport == -1 || ifindex == -1) {\n                LogUtils.warnf(this, \"processDot1DBasePortTable: Invalid base port (%d) or ifIndex (%d). Skipping.\", baseport, ifindex);\n                continue;\n            }\n\n            node.setIfIndexBridgePort(ifindex, baseport);\n\n            \n            \n            if (snmpcoll.getSaveStpInterfaceTable()) {\n                final OnmsNode onmsNode = getNode(node.getNodeId());\n                if (onmsNode == null) {\n                    LogUtils.debugf(this, \"no node found!\");\n                    continue;\n                }\n                final OnmsStpInterface stpInterface = new OnmsStpInterface(onmsNode, baseport, vlan.getVlanId());\n                stpInterface.setBridgePort(baseport);\n                stpInterface.setVlan(vlan.getVlanId());\n                stpInterface.setIfIndex(ifindex);\n                stpInterface.setStatus(DbStpNodeEntry.STATUS_ACTIVE);\n                stpInterface.setLastPollTime(scanTime);\n\n                saveStpInterface(dbConn, stpInterface);\n            }\n        }\n    }","id":18250,"modified_method":"protected void processDot1DBasePortTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {\n        List<Dot1dBasePortTableEntry> entries = snmpVlanColl.getDot1dBasePortTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processDot1DBasePortTable: Starting dot1BasePort table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processDot1DBasePortTable: Zero dot1BasePort table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        for (final Dot1dBasePortTableEntry dot1dbaseptentry : entries) {\n            int baseport = dot1dbaseptentry.getBaseBridgePort();\n            int ifindex = dot1dbaseptentry.getBaseBridgePortIfindex();\n\n            if (baseport == -1 || ifindex == -1) {\n                LogUtils.warnf(this, \"processDot1DBasePortTable: Invalid base port (%d) or ifIndex (%d). Skipping.\", baseport, ifindex);\n                continue;\n            }\n\n            node.setIfIndexBridgePort(ifindex, baseport);\n\n            \n            \n            if (snmpcoll.getSaveStpInterfaceTable()) {\n                final OnmsNode onmsNode = getNode(node.getNodeId());\n                if (onmsNode == null) {\n                    LogUtils.debugf(this, \"no node found!\");\n                    continue;\n                }\n                final OnmsStpInterface stpInterface = new OnmsStpInterface(onmsNode, baseport, vlan.getVlanId());\n                stpInterface.setBridgePort(baseport);\n                stpInterface.setVlan(vlan.getVlanId());\n                stpInterface.setIfIndex(ifindex);\n                stpInterface.setStatus(DbStpNodeEntry.STATUS_ACTIVE);\n                stpInterface.setLastPollTime(scanTime);\n\n                saveStpInterface(dbConn, stpInterface);\n            }\n        }\n    }","commit_id":"3edf3ef025673b34bfc95083048307e39e199c6a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processDot1DTpFdbTable(LinkableNode node, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl, Timestamp scanTime) {\n        LogUtils.debugf(this, \"processDot1DTpFdbTable: Starting dot1dTpFdb table processing.\");\n\n        for (final Dot1dTpFdbTableEntry dot1dfdbentry : snmpVlanColl.getDot1dFdbTable().getEntries()) {\n            final String curMacAddress = dot1dfdbentry.getDot1dTpFdbAddress();\n            final int fdbport = dot1dfdbentry.getDot1dTpFdbPort();\n            final int curfdbstatus = dot1dfdbentry.getDot1dTpFdbStatus();\n\n            if (curMacAddress == null || curMacAddress.equals(\"000000000000\")) {\n                LogUtils.warnf(this, \"processDot1DTpFdbTable: Invalid MAC address: %s. Skipping.\", curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processDot1DTpFdbTable: Found valid MAC address: %s\", curMacAddress);\n\n            if (fdbport == 0 || fdbport == -1) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Invalid FDB port (%d) for MAC address %s. Skipping.\", fdbport, curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processDot1DTpFdbTable: MAC address (%s) found on bridge port %d\", curMacAddress, fdbport);\n\n            if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED && vlan.getVlanId() != null) {\n                node.addMacAddress(fdbport, curMacAddress, vlan.getVlanId().toString());\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found learned status on bridge port.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {\n                node.addBridgeIdentifier(curMacAddress);\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: MAC address (%s) is used as bridge identifier.\", curMacAddress);\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'INVALID' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'MGMT' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'OTHER' status. Skipping.\");\n            } else if (curfdbstatus == -1) {\n                LogUtils.warnf(this, \"processDot1DTpFdbTable: Unable to determine status. Skipping.\");\n            }\n        }\n    }","id":18251,"modified_method":"protected void processDot1DTpFdbTable(LinkableNode node, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl, Timestamp scanTime) {\n        List<Dot1dTpFdbTableEntry> entries = snmpVlanColl.getDot1dFdbTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Starting dot1dTpFdb table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Zero dot1dTpFdb table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        for (final Dot1dTpFdbTableEntry dot1dfdbentry : entries) {\n            final String curMacAddress = dot1dfdbentry.getDot1dTpFdbAddress();\n            final int fdbport = dot1dfdbentry.getDot1dTpFdbPort();\n            final int curfdbstatus = dot1dfdbentry.getDot1dTpFdbStatus();\n\n            if (curMacAddress == null || curMacAddress.equals(\"000000000000\")) {\n                LogUtils.warnf(this, \"processDot1DTpFdbTable: Invalid MAC address: %s. Skipping.\", curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processDot1DTpFdbTable: Found valid MAC address: %s\", curMacAddress);\n\n            if (fdbport == 0 || fdbport == -1) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Invalid FDB port (%d) for MAC address %s. Skipping.\", fdbport, curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processDot1DTpFdbTable: MAC address (%s) found on bridge port %d\", curMacAddress, fdbport);\n\n            if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED && vlan.getVlanId() != null) {\n                node.addMacAddress(fdbport, curMacAddress, vlan.getVlanId().toString());\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found learned status on bridge port.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {\n                node.addBridgeIdentifier(curMacAddress);\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: MAC address (%s) is used as bridge identifier.\", curMacAddress);\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'INVALID' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'MGMT' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {\n                LogUtils.debugf(this, \"processDot1DTpFdbTable: Found 'OTHER' status. Skipping.\");\n            } else if (curfdbstatus == -1) {\n                LogUtils.warnf(this, \"processDot1DTpFdbTable: Unable to determine status. Skipping.\");\n            }\n        }\n    }","commit_id":"3edf3ef025673b34bfc95083048307e39e199c6a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processCdpCacheTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        LogUtils.debugf(this, \"processCdpCacheTable: Starting CDP cache table processing.\");\n        List<CdpInterface> cdpInterfaces = new ArrayList<CdpInterface>();\n\n        for (final CdpCacheTableEntry cdpEntry : snmpcoll.getCdpCacheTable().getEntries()) {\n            final int cdpAddrType = cdpEntry.getCdpCacheAddressType();\n\n            if (cdpAddrType != CDP_ADDRESS_TYPE_IP_ADDRESS) {\n                LogUtils.warnf(this, \"processCdpCacheTable: CDP address type not valid: %d\", cdpAddrType);\n                continue;\n            }\n\n            final InetAddress cdpTargetIpAddr = cdpEntry.getCdpCacheAddress();\n            final String hostAddress = InetAddressUtils.str(cdpTargetIpAddr);\n\n            if (cdpTargetIpAddr == null || cdpTargetIpAddr.isLoopbackAddress() || hostAddress.equals(\"0.0.0.0\")) {\n                LogUtils.debugf(this, \"processCdpCacheTable: IP address is not valid: %s\", hostAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: IP address found: %s\", hostAddress);\n\n            final int cdpIfIndex = cdpEntry.getCdpCacheIfIndex();\n\n            if (cdpIfIndex < 0) {\n                LogUtils.debugf(this, \"processCdpCacheTable: ifIndex not valid: %d\", cdpIfIndex);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: ifIndex found: %d\", cdpIfIndex);\n\n            final String cdpTargetDevicePort = cdpEntry.getCdpCacheDevicePort();\n\n            if (cdpTargetDevicePort == null) {\n                LogUtils.warnf(this, \"processCdpCacheTable: Target device port not found. Skipping.\");\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: Target device port name found: %s\", cdpTargetDevicePort);\n\n            int targetCdpNodeId = -1;\n\n            if (!cdpTargetIpAddr.isLoopbackAddress() && hostAddress.equals(\"0.0.0.0\")) {\n                targetCdpNodeId = getNodeidFromIp(dbConn, cdpTargetIpAddr);\n            }\n\n            if (targetCdpNodeId == -1) {\n                LogUtils.warnf(this, \"processCdpCacheTable: No node ID found: interface not added to linkable SNMP node. Skipping.\");\n                sendNewSuspectEvent(cdpTargetIpAddr, snmpcoll.getTarget(), snmpcoll.getPackageName());\n                continue;\n            }\n\n            final int cdpTargetIfindex = getIfIndexByName(dbConn, targetCdpNodeId, cdpTargetDevicePort);\n\n            if (cdpTargetIfindex == -1) {\n                LogUtils.warnf(this, \"processCdpCacheTable: No valid target ifIndex found: interface not added to linkable SNMP node. Skipping.\");\n                continue;\n            }\n\n            final CdpInterface cdpIface = new CdpInterface(cdpIfIndex);\n            cdpIface.setCdpTargetNodeId(targetCdpNodeId);\n            cdpIface.setCdpTargetIpAddr(cdpTargetIpAddr);\n            cdpIface.setCdpTargetIfIndex(cdpTargetIfindex);\n\n            LogUtils.debugf(this, \"processCdpCacheTable: Adding interface to linkable SNMP node: %s\", cdpIface);\n\n            cdpInterfaces.add(cdpIface);\n        }\n        node.setCdpInterfaces(cdpInterfaces);\n    }","id":18252,"modified_method":"protected void processCdpCacheTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<CdpCacheTableEntry> entries = snmpcoll.getCdpCacheTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processCdpCacheTable: Starting CDP cache table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processCdpCacheTable: Zero CDP cache table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        List<CdpInterface> cdpInterfaces = new ArrayList<CdpInterface>();\n\n        for (final CdpCacheTableEntry cdpEntry : entries) {\n            final int cdpAddrType = cdpEntry.getCdpCacheAddressType();\n\n            if (cdpAddrType != CDP_ADDRESS_TYPE_IP_ADDRESS) {\n                LogUtils.warnf(this, \"processCdpCacheTable: CDP address type not valid: %d\", cdpAddrType);\n                continue;\n            }\n\n            final InetAddress cdpTargetIpAddr = cdpEntry.getCdpCacheAddress();\n            final String hostAddress = InetAddressUtils.str(cdpTargetIpAddr);\n\n            if (cdpTargetIpAddr == null || cdpTargetIpAddr.isLoopbackAddress() || hostAddress.equals(\"0.0.0.0\")) {\n                LogUtils.debugf(this, \"processCdpCacheTable: IP address is not valid: %s\", hostAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: IP address found: %s\", hostAddress);\n\n            final int cdpIfIndex = cdpEntry.getCdpCacheIfIndex();\n\n            if (cdpIfIndex < 0) {\n                LogUtils.debugf(this, \"processCdpCacheTable: ifIndex not valid: %d\", cdpIfIndex);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: ifIndex found: %d\", cdpIfIndex);\n\n            final String cdpTargetDevicePort = cdpEntry.getCdpCacheDevicePort();\n\n            if (cdpTargetDevicePort == null) {\n                LogUtils.warnf(this, \"processCdpCacheTable: Target device port not found. Skipping.\");\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processCdpCacheTable: Target device port name found: %s\", cdpTargetDevicePort);\n\n            int targetCdpNodeId = -1;\n\n            if (!cdpTargetIpAddr.isLoopbackAddress() && hostAddress.equals(\"0.0.0.0\")) {\n                targetCdpNodeId = getNodeidFromIp(dbConn, cdpTargetIpAddr);\n            }\n\n            if (targetCdpNodeId == -1) {\n                LogUtils.warnf(this, \"processCdpCacheTable: No node ID found: interface not added to linkable SNMP node. Skipping.\");\n                sendNewSuspectEvent(cdpTargetIpAddr, snmpcoll.getTarget(), snmpcoll.getPackageName());\n                continue;\n            }\n\n            final int cdpTargetIfindex = getIfIndexByName(dbConn, targetCdpNodeId, cdpTargetDevicePort);\n\n            if (cdpTargetIfindex == -1) {\n                LogUtils.warnf(this, \"processCdpCacheTable: No valid target ifIndex found: interface not added to linkable SNMP node. Skipping.\");\n                continue;\n            }\n\n            final CdpInterface cdpIface = new CdpInterface(cdpIfIndex);\n            cdpIface.setCdpTargetNodeId(targetCdpNodeId);\n            cdpIface.setCdpTargetIpAddr(cdpTargetIpAddr);\n            cdpIface.setCdpTargetIfIndex(cdpTargetIfindex);\n\n            LogUtils.debugf(this, \"processCdpCacheTable: Adding interface to linkable SNMP node: %s\", cdpIface);\n\n            cdpInterfaces.add(cdpIface);\n        }\n        node.setCdpInterfaces(cdpInterfaces);\n    }","commit_id":"3edf3ef025673b34bfc95083048307e39e199c6a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processQBridgeDot1dTpFdbTable(final LinkableNode node, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) {\n        LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Starting Q-BRIDGE-MIB dot1dTpFdb table processing.\");\n\n        for (final QBridgeDot1dTpFdbTableEntry dot1dfdbentry : snmpVlanColl.getQBridgeDot1dFdbTable().getEntries()) {\n            final String curMacAddress = dot1dfdbentry.getQBridgeDot1dTpFdbAddress();\n\n            if (curMacAddress == null || curMacAddress.equals(\"000000000000\")) {\n                LogUtils.warnf(this, \"processQBridgeDot1DTpFdbTable: Invalid MAC address: %s. Skipping.\", curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found MAC address: %s\", curMacAddress);\n\n            final int fdbport = dot1dfdbentry.getQBridgeDot1dTpFdbPort();\n\n            if (fdbport == 0 || fdbport == -1) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Invalid FDB port (%d) for MAC address %s. Skipping.\", fdbport, curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found bridge port: %d.\", fdbport);\n\n            final int curfdbstatus = dot1dfdbentry.getQBridgeDot1dTpFdbStatus();\n\n            if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED) {\n                node.addMacAddress(fdbport, curMacAddress, Integer.toString((int) vlan.getVlanId()));\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found learned status on bridge port.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {\n                node.addBridgeIdentifier(curMacAddress);\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: MAC address (%s) is used as bridge identifier.\", curMacAddress);\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'INVALID' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'MGMT' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'OTHER' status. Skipping.\");\n            } else if (curfdbstatus == -1) {\n                LogUtils.warnf(this, \"processQBridgeDot1DTpFdbTable: Unable to determine status. Skipping.\");\n            }\n        }\n    }","id":18253,"modified_method":"protected void processQBridgeDot1dTpFdbTable(final LinkableNode node, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) {\n        List<QBridgeDot1dTpFdbTableEntry> entries = snmpVlanColl.getQBridgeDot1dFdbTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processQBridgeDot1dTpFdbTable: Starting Q-BRIDGE-MIB dot1dTpFdb table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processQBridgeDot1dTpFdbTable: Zero Q-BRIDGE-MIB dot1dTpFdb table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        for (final QBridgeDot1dTpFdbTableEntry dot1dfdbentry : entries) {\n            final String curMacAddress = dot1dfdbentry.getQBridgeDot1dTpFdbAddress();\n\n            if (curMacAddress == null || curMacAddress.equals(\"000000000000\")) {\n                LogUtils.warnf(this, \"processQBridgeDot1DTpFdbTable: Invalid MAC address: %s. Skipping.\", curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found MAC address: %s\", curMacAddress);\n\n            final int fdbport = dot1dfdbentry.getQBridgeDot1dTpFdbPort();\n\n            if (fdbport == 0 || fdbport == -1) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Invalid FDB port (%d) for MAC address %s. Skipping.\", fdbport, curMacAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found bridge port: %d.\", fdbport);\n\n            final int curfdbstatus = dot1dfdbentry.getQBridgeDot1dTpFdbStatus();\n\n            if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED) {\n                node.addMacAddress(fdbport, curMacAddress, Integer.toString((int) vlan.getVlanId()));\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found learned status on bridge port.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {\n                node.addBridgeIdentifier(curMacAddress);\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: MAC address (%s) is used as bridge identifier.\", curMacAddress);\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'INVALID' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'MGMT' status. Skipping.\");\n            } else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {\n                LogUtils.debugf(this, \"processQBridgeDot1DTpFdbTable: Found 'OTHER' status. Skipping.\");\n            } else if (curfdbstatus == -1) {\n                LogUtils.warnf(this, \"processQBridgeDot1DTpFdbTable: Unable to determine status. Skipping.\");\n            }\n        }\n    }","commit_id":"3edf3ef025673b34bfc95083048307e39e199c6a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processIpNetToMediaTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        LogUtils.debugf(this, \"processIpNetToMediaTable: Starting IP net to media table processing.\");\n        // the AtInterfaces used by LinkableNode where to save info\n        final List<OnmsAtInterface> atInterfaces = new ArrayList<OnmsAtInterface>();\n\n        for (final IpNetToMediaTableEntry ent : snmpcoll.getIpNetToMediaTable().getEntries()) {\n\n            final int ifindex = ent.getIpNetToMediaIfIndex();\n\n            if (ifindex < 0) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid ifindex %s\", ifindex);\n                continue;\n            }\n\n            final InetAddress ipaddress = ent.getIpNetToMediaNetAddress();\n            final String hostAddress = InetAddressUtils.str(ipaddress);\n\n            if (ipaddress == null || ipaddress.isLoopbackAddress() || hostAddress.equals(\"0.0.0.0\")) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid IP: %s\", hostAddress);\n                continue;\n            }\n\n            final String physAddr = ent.getIpNetToMediaPhysAddress();\n\n            if (physAddr == null || physAddr.equals(\"000000000000\") || physAddr.equalsIgnoreCase(\"ffffffffffff\")) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid MAC address %s for IP %s\", physAddr, hostAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processIpNetToMediaTable: trying save ipNetToMedia info: IP address %s, MAC address %s, ifIndex %d\", hostAddress, physAddr, ifindex);\n\n            // get an At interface but without setting MAC address\n            final OnmsAtInterface at = getAtInterfaceForAddress(dbConn, ipaddress);\n            if (at == null) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: no node found for IP address %s.\", hostAddress);\n                sendNewSuspectEvent(ipaddress, snmpcoll.getTarget(), snmpcoll.getPackageName());\n                continue;\n            }\n\n            at.setSourceNodeId(node.getNodeId());\n\n            if (at.getMacAddress() != null && !at.getMacAddress().equals(physAddr)) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: Setting MAC address to %s but it used to be '%s' (IP Address = %s, ifIndex = %d)\", physAddr, at.getMacAddress(), hostAddress, ifindex);\n            }\n            at.setMacAddress(physAddr);\n\n            if (at.getIfIndex() != null && !at.getIfIndex().equals(ifindex)) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: Setting ifIndex to %d but it used to be '%s' (IP Address = %s, MAC = %s)\", ifindex, at.getIfIndex(), hostAddress, physAddr);\n            }\n            at.setIfIndex(ifindex);\n\n            at.setLastPollTime(scanTime);\n            at.setStatus(DbAtInterfaceEntry.STATUS_ACTIVE);\n\n            // add AtInterface to list of valid interfaces\n            atInterfaces.add(at);\n\n            saveAtInterface(dbConn, at);\n        }\n        // set AtInterfaces in LinkableNode\n        node.setAtInterfaces(atInterfaces);\n    }","id":18254,"modified_method":"protected void processIpNetToMediaTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<IpNetToMediaTableEntry> entries = snmpcoll.getIpNetToMediaTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processIpNetToMediaTable: Starting ipNetToMedia table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processIpNetToMediaTable: Zero ipNetToMedia table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        // the AtInterfaces used by LinkableNode where to save info\n        final List<OnmsAtInterface> atInterfaces = new ArrayList<OnmsAtInterface>();\n\n        for (final IpNetToMediaTableEntry ent : entries) {\n\n            final int ifindex = ent.getIpNetToMediaIfIndex();\n\n            if (ifindex < 0) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid ifindex %s\", ifindex);\n                continue;\n            }\n\n            final InetAddress ipaddress = ent.getIpNetToMediaNetAddress();\n            final String hostAddress = InetAddressUtils.str(ipaddress);\n\n            if (ipaddress == null || ipaddress.isLoopbackAddress() || hostAddress.equals(\"0.0.0.0\")) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid IP: %s\", hostAddress);\n                continue;\n            }\n\n            final String physAddr = ent.getIpNetToMediaPhysAddress();\n\n            if (physAddr == null || physAddr.equals(\"000000000000\") || physAddr.equalsIgnoreCase(\"ffffffffffff\")) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: invalid MAC address %s for IP %s\", physAddr, hostAddress);\n                continue;\n            }\n\n            LogUtils.debugf(this, \"processIpNetToMediaTable: trying save ipNetToMedia info: IP address %s, MAC address %s, ifIndex %d\", hostAddress, physAddr, ifindex);\n\n            // get an AtInterface but without setting MAC address\n            final OnmsAtInterface at = getAtInterfaceForAddress(dbConn, ipaddress);\n            if (at == null) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: no node found for IP address %s.\", hostAddress);\n                sendNewSuspectEvent(ipaddress, snmpcoll.getTarget(), snmpcoll.getPackageName());\n                continue;\n            }\n\n            at.setSourceNodeId(node.getNodeId());\n\n            if (at.getMacAddress() != null && !at.getMacAddress().equals(physAddr)) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: Setting OnmsAtInterface MAC address to %s but it used to be '%s' (IP Address = %s, ifIndex = %d)\", physAddr, at.getMacAddress(), hostAddress, ifindex);\n            }\n            at.setMacAddress(physAddr);\n\n            if (at.getIfIndex() != null && !at.getIfIndex().equals(ifindex)) {\n                LogUtils.warnf(this, \"processIpNetToMediaTable: Setting OnmsAtInterface ifIndex to %d but it used to be '%s' (IP Address = %s, MAC = %s)\", ifindex, at.getIfIndex(), hostAddress, physAddr);\n            }\n            at.setIfIndex(ifindex);\n\n            at.setLastPollTime(scanTime);\n            at.setStatus(DbAtInterfaceEntry.STATUS_ACTIVE);\n\n            // add AtInterface to list of valid interfaces\n            atInterfaces.add(at);\n\n            saveAtInterface(dbConn, at);\n        }\n        // set AtInterfaces in LinkableNode\n        node.setAtInterfaces(atInterfaces);\n    }","commit_id":"3edf3ef025673b34bfc95083048307e39e199c6a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processDot1StpPortTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {\n        LogUtils.debugf(this, \"processDot1StpPortTable: Starting dot1StpPort table processing.\");\n        \n        for (final Dot1dStpPortTableEntry dot1dstpptentry : snmpVlanColl.getDot1dStpPortTable().getEntries()) {\n\n            final int stpport = dot1dstpptentry.getDot1dStpPort();\n\n            if (stpport == -1) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Found invalid STP port. Skipping.\");\n                continue;\n            }\n\n            final OnmsNode onmsNode = getNode(node.getNodeId());\n            if (onmsNode == null) {\n                LogUtils.debugf(this, \"no node found!\");\n                continue;\n            }\n\n            final OnmsStpInterface stpInterface = new OnmsStpInterface(onmsNode, stpport, vlan.getVlanId());\n            stpInterface.setStatus(DbStpNodeEntry.STATUS_ACTIVE);\n            stpInterface.setLastPollTime(scanTime);\n\n            String stpPortDesignatedBridge = dot1dstpptentry.getDot1dStpPortDesignatedBridge();\n            String stpPortDesignatedPort = dot1dstpptentry.getDot1dStpPortDesignatedPort();\n\n            if (stpPortDesignatedBridge == null || stpPortDesignatedBridge.equals(\"0000000000000000\")) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Designated bridge (%s) is invalid. Skipping.\", stpPortDesignatedBridge);\n                stpPortDesignatedBridge = \"0000000000000000\";\n            } else if (stpPortDesignatedPort == null || stpPortDesignatedPort.equals(\"0000\")) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Designated port (%s) is invalid. Skipping.\", stpPortDesignatedPort);\n                stpPortDesignatedPort = \"0000\";\n            } else {\n                stpInterface.setStpPortState(dot1dstpptentry.getDot1dStpPortState());\n                stpInterface.setStpPortPathCost(dot1dstpptentry.getDot1dStpPortPathCost());\n                stpInterface.setStpPortDesignatedBridge(stpPortDesignatedBridge);\n                stpInterface.setStpPortDesignatedRoot(dot1dstpptentry.getDot1dStpPortDesignatedRoot());\n                stpInterface.setStpPortDesignatedCost(dot1dstpptentry.getDot1dStpPortDesignatedCost());\n                stpInterface.setStpPortDesignatedPort(stpPortDesignatedPort);\n                node.addStpInterface(stpInterface);\n            }\n\n            if (snmpcoll.getSaveStpInterfaceTable()) {\n                saveStpInterface(dbConn, stpInterface);\n            }\n        }\n    }","id":18255,"modified_method":"protected void processDot1StpPortTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {\n        List<Dot1dStpPortTableEntry> entries = snmpVlanColl.getDot1dStpPortTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processDot1StpPortTable: Starting dot1StpPort table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processDot1StpPortTable: Zero dot1StpPort table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        for (final Dot1dStpPortTableEntry dot1dstpptentry : entries) {\n\n            final int stpport = dot1dstpptentry.getDot1dStpPort();\n\n            if (stpport == -1) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Found invalid STP port. Skipping.\");\n                continue;\n            }\n\n            final OnmsNode onmsNode = getNode(node.getNodeId());\n            if (onmsNode == null) {\n                LogUtils.debugf(this, \"no node found!\");\n                continue;\n            }\n\n            final OnmsStpInterface stpInterface = new OnmsStpInterface(onmsNode, stpport, vlan.getVlanId());\n            stpInterface.setStatus(DbStpNodeEntry.STATUS_ACTIVE);\n            stpInterface.setLastPollTime(scanTime);\n\n            String stpPortDesignatedBridge = dot1dstpptentry.getDot1dStpPortDesignatedBridge();\n            String stpPortDesignatedPort = dot1dstpptentry.getDot1dStpPortDesignatedPort();\n\n            if (stpPortDesignatedBridge == null || stpPortDesignatedBridge.equals(\"0000000000000000\")) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Designated bridge (%s) is invalid. Skipping.\", stpPortDesignatedBridge);\n                stpPortDesignatedBridge = \"0000000000000000\";\n            } else if (stpPortDesignatedPort == null || stpPortDesignatedPort.equals(\"0000\")) {\n                LogUtils.warnf(this, \"processDot1StpPortTable: Designated port (%s) is invalid. Skipping.\", stpPortDesignatedPort);\n                stpPortDesignatedPort = \"0000\";\n            } else {\n                stpInterface.setStpPortState(dot1dstpptentry.getDot1dStpPortState());\n                stpInterface.setStpPortPathCost(dot1dstpptentry.getDot1dStpPortPathCost());\n                stpInterface.setStpPortDesignatedBridge(stpPortDesignatedBridge);\n                stpInterface.setStpPortDesignatedRoot(dot1dstpptentry.getDot1dStpPortDesignatedRoot());\n                stpInterface.setStpPortDesignatedCost(dot1dstpptentry.getDot1dStpPortDesignatedCost());\n                stpInterface.setStpPortDesignatedPort(stpPortDesignatedPort);\n                node.addStpInterface(stpInterface);\n            }\n\n            if (snmpcoll.getSaveStpInterfaceTable()) {\n                saveStpInterface(dbConn, stpInterface);\n            }\n        }\n    }","commit_id":"3edf3ef025673b34bfc95083048307e39e199c6a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void processVlanTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        LogUtils.debugf(this, \"processVlanTable: Starting VLAN table processing.\");\n\n        final List<OnmsVlan> vlans = new ArrayList<OnmsVlan>();\n\n        for (final SnmpStore ent : snmpcoll.getVlanTable().getEntries()) {\n            final Integer vlanIndex = ent.getInt32(VlanCollectorEntry.VLAN_INDEX);\n\n            if (vlanIndex == null || vlanIndex < 0) {\n                LogUtils.debugf(this, \"processVlanTable: VLAN ifIndex was invalid (%d).  Skipping.\", vlanIndex);\n                continue;\n            }\n\n            String vlanName = ent.getDisplayString(VlanCollectorEntry.VLAN_NAME);\n            if (vlanName == null) {\n                LogUtils.debugf(this, \"processVlanTable: No VLAN name found.  Setting to 'default-%s'.\", vlanIndex);\n                vlanName = \"default-\" + vlanIndex;\n            }\n\n            Integer vlanType = ent.getInt32(VlanCollectorEntry.VLAN_TYPE);\n            if (vlanType == null) {\n                vlanType = DbVlanEntry.VLAN_TYPE_UNKNOWN;\n            }\n\n            Integer vlanStatus = ent.getInt32(VlanCollectorEntry.VLAN_STATUS);\n            if (vlanStatus == null) {\n                vlanStatus = DbVlanEntry.VLAN_STATUS_UNKNOWN;\n            }\n\n            final OnmsNode onmsNode = getNode(node.getNodeId());\n            final OnmsVlan vlan = new OnmsVlan(vlanIndex, vlanName, vlanStatus, vlanType);\n            vlan.setLastPollTime(scanTime);\n            vlan.setNode(onmsNode);\n            vlan.setStatus(DbVlanEntry.STATUS_ACTIVE);\n            vlans.add(vlan);\n\n            LogUtils.debugf(this, \"processVlanTable: Saving VLAN entry: %s\", vlan);\n\n            saveVlan(dbConn, vlan);\n\n        }\n        node.setVlans(vlans);\n    }","id":18256,"modified_method":"protected void processVlanTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime) throws SQLException {\n        List<SnmpStore> entries = snmpcoll.getVlanTable().getEntries();\n        if (LogUtils.isDebugEnabled(this)) {\n            if (entries.size() > 0) {\n                LogUtils.debugf(this, \"processVlanTable: Starting VLAN table processing for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            } else {\n                LogUtils.debugf(this, \"processVlanTable: Zero VLAN table entries for %d/%s\", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));\n            }\n        }\n\n        final List<OnmsVlan> vlans = new ArrayList<OnmsVlan>();\n\n        for (final SnmpStore ent : entries) {\n            final Integer vlanIndex = ent.getInt32(VlanCollectorEntry.VLAN_INDEX);\n\n            if (vlanIndex == null || vlanIndex < 0) {\n                LogUtils.debugf(this, \"processVlanTable: VLAN ifIndex was invalid (%d).  Skipping.\", vlanIndex);\n                continue;\n            }\n\n            String vlanName = ent.getDisplayString(VlanCollectorEntry.VLAN_NAME);\n            if (vlanName == null) {\n                LogUtils.debugf(this, \"processVlanTable: No VLAN name found.  Setting to 'default-%s'.\", vlanIndex);\n                vlanName = \"default-\" + vlanIndex;\n            }\n\n            Integer vlanType = ent.getInt32(VlanCollectorEntry.VLAN_TYPE);\n            if (vlanType == null) {\n                vlanType = DbVlanEntry.VLAN_TYPE_UNKNOWN;\n            }\n\n            Integer vlanStatus = ent.getInt32(VlanCollectorEntry.VLAN_STATUS);\n            if (vlanStatus == null) {\n                vlanStatus = DbVlanEntry.VLAN_STATUS_UNKNOWN;\n            }\n\n            final OnmsNode onmsNode = getNode(node.getNodeId());\n            final OnmsVlan vlan = new OnmsVlan(vlanIndex, vlanName, vlanStatus, vlanType);\n            vlan.setLastPollTime(scanTime);\n            vlan.setNode(onmsNode);\n            vlan.setStatus(DbVlanEntry.STATUS_ACTIVE);\n            vlans.add(vlan);\n\n            LogUtils.debugf(this, \"processVlanTable: Saving VLAN entry: %s\", vlan);\n\n            saveVlan(dbConn, vlan);\n\n        }\n        node.setVlans(vlans);\n    }","commit_id":"3edf3ef025673b34bfc95083048307e39e199c6a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void testAddPMMessageNonUser() throws Exception {\n\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//nav/ul/li[contains(.,'Messages')]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\t\tassertEquals(\"Mark as Unread\",\n\t\t\tselenium.getValue(\"//input[@value='Mark as Unread']\"));\n\t\tassertEquals(\"Delete\", selenium.getValue(\"//input[@value='Delete']\"));\n\t\tassertEquals(\"New Message\",\n\t\t\tselenium.getValue(\"//input[@value='New Message']\"));\n\t\tselenium.clickAt(\"//input[@value='New Message']\",\n\t\t\tRuntimeVariables.replace(\"New Message\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//button[contains(@class,'autocomplete-button')]/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[contains(@class,'autocomplete-button')]/span\",\n\t\t\tRuntimeVariables.replace(\"Dropdown\"));\n\t\tselenium.typeKeys(\"//input[@id='_1_WAR_privatemessagingportlet_to']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"Social01 Office01 User01 <socialoffice01>\"));\n\t\tassertEquals(\"Social01 Office01 User01 <socialoffice01>\",\n\t\t\tselenium.getValue(\n\t\t\t\t\"//input[@id='_1_WAR_privatemessagingportlet_to']\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//input[@id='_1_WAR_privatemessagingportlet_subject']\"));\n\t\tselenium.type(\"//input[@id='_1_WAR_privatemessagingportlet_subject']\",\n\t\t\tRuntimeVariables.replace(\"Message Subject\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//textarea[@id='_1_WAR_privatemessagingportlet_body']\"));\n\t\tselenium.type(\"//textarea[@id='_1_WAR_privatemessagingportlet_body']\",\n\t\t\tRuntimeVariables.replace(\"Message Body\"));\n\t\tselenium.clickAt(\"//input[@value='Send']\",\n\t\t\tRuntimeVariables.replace(\"Send\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//span[@class='portlet-msg-error']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"The following users were not found: 'socialoffice01'\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-msg-error']\"));\n\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//nav/ul/li[contains(.,'Messages')]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"No messages found.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t}","id":18257,"modified_method":"public void testAddPMMessageNonUser() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\t\tselenium.waitForVisible(\"//nav/ul/li[contains(.,'Messages')]/a/span\");\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\t\tassertEquals(\"Mark as Unread\",\n\t\t\tselenium.getValue(\"//input[@value='Mark as Unread']\"));\n\t\tassertEquals(\"Delete\", selenium.getValue(\"//input[@value='Delete']\"));\n\t\tassertEquals(\"New Message\",\n\t\t\tselenium.getValue(\"//input[@value='New Message']\"));\n\t\tselenium.clickAt(\"//input[@value='New Message']\",\n\t\t\tRuntimeVariables.replace(\"New Message\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//button[contains(@class,'autocomplete-button')]/span\");\n\t\tselenium.clickAt(\"//button[contains(@class,'autocomplete-button')]/span\",\n\t\t\tRuntimeVariables.replace(\"Dropdown\"));\n\t\tselenium.typeKeys(\"//input[@id='_1_WAR_privatemessagingportlet_to']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"Social01 Office01 User01 <socialoffice01>\"));\n\t\tassertEquals(\"Social01 Office01 User01 <socialoffice01>\",\n\t\t\tselenium.getValue(\n\t\t\t\t\"//input[@id='_1_WAR_privatemessagingportlet_to']\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//input[@id='_1_WAR_privatemessagingportlet_subject']\"));\n\t\tselenium.type(\"//input[@id='_1_WAR_privatemessagingportlet_subject']\",\n\t\t\tRuntimeVariables.replace(\"Message Subject\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//textarea[@id='_1_WAR_privatemessagingportlet_body']\"));\n\t\tselenium.type(\"//textarea[@id='_1_WAR_privatemessagingportlet_body']\",\n\t\t\tRuntimeVariables.replace(\"Message Body\"));\n\t\tselenium.clickAt(\"//input[@value='Send']\",\n\t\t\tRuntimeVariables.replace(\"Send\"));\n\t\tselenium.waitForVisible(\"//span[@class='portlet-msg-error']\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"The following users were not found: 'socialoffice01'\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-msg-error']\"));\n\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\t\tselenium.waitForVisible(\"//nav/ul/li[contains(.,'Messages')]/a/span\");\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"No messages found.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t}","commit_id":"8b3b3db571d43599777e18d074e3cdab19ba52c5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownPMMessage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//nav/ul/li[contains(.,'Messages')]/a/span\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\n\t\t\t\tboolean message1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean message2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean message3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean message4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean message5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18258,"modified_method":"public void testTearDownPMMessage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//nav/ul/li[contains(.,'Messages')]/a/span\");\n\t\t\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\n\t\t\t\tboolean message1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean message2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean message3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean message4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean message5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"8b3b3db571d43599777e18d074e3cdab19ba52c5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddPMMessageApostropheQuotation() throws Exception {\n\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//nav/ul/li[contains(.,'Messages')]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\t\tassertEquals(\"Mark as Unread\",\n\t\t\tselenium.getValue(\"//input[@value='Mark as Unread']\"));\n\t\tassertEquals(\"Delete\", selenium.getValue(\"//input[@value='Delete']\"));\n\t\tassertEquals(\"New Message\",\n\t\t\tselenium.getValue(\"//input[@value='New Message']\"));\n\t\tselenium.clickAt(\"//input[@value='New Message']\",\n\t\t\tRuntimeVariables.replace(\"New Message\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//button[contains(@class,'autocomplete-button')]/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//button[contains(@class,'autocomplete-button')]/span\",\n\t\t\tRuntimeVariables.replace(\"Dropdown\"));\n\t\tselenium.typeKeys(\"//input[@id='_1_WAR_privatemessagingportlet_to']\",\n\t\t\tRuntimeVariables.replace(\"Social01\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isPartialText(\n\t\t\t\t\t\t\t\"//li[contains(@data-text,'Social01 Office01 User01')]\",\n\t\t\t\t\t\t\t\"Social01 Office01 User01\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertTrue(selenium.isPartialText(\n\t\t\t\t\"//li[contains(@data-text,'Social01 Office01 User01')]\",\n\t\t\t\t\"Social01 Office01 User01\"));\n\t\tselenium.clickAt(\"//li[contains(@data-text,'Social01 Office01 User01')]\",\n\t\t\tRuntimeVariables.replace(\"Social01 Office01 User01\"));\n\t\tassertEquals(\"Social01 Office01 User01 <socialoffice01>,\",\n\t\t\tselenium.getValue(\n\t\t\t\t\"//input[@id='_1_WAR_privatemessagingportlet_to']\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//input[@id='_1_WAR_privatemessagingportlet_subject']\"));\n\t\tselenium.type(\"//input[@id='_1_WAR_privatemessagingportlet_subject']\",\n\t\t\tRuntimeVariables.replace(\"Message Subject\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//textarea[@id='_1_WAR_privatemessagingportlet_body']\"));\n\t\tselenium.type(\"//textarea[@id='_1_WAR_privatemessagingportlet_body']\",\n\t\t\tRuntimeVariables.replace(\"\\\"Message's Body\\\"\"));\n\t\tselenium.clickAt(\"//input[@value='Send']\",\n\t\t\tRuntimeVariables.replace(\"Send\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Social01 Office01 User01\"),\n\t\t\tselenium.getText(\"//span[@class='author-sender']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"\\\"Message's Body\\\"\"),\n\t\t\tselenium.getText(\"//div[@class='body']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 result.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t}","id":18259,"modified_method":"public void testAddPMMessageApostropheQuotation() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\t\tselenium.waitForVisible(\"//nav/ul/li[contains(.,'Messages')]/a/span\");\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\t\tassertEquals(\"Mark as Unread\",\n\t\t\tselenium.getValue(\"//input[@value='Mark as Unread']\"));\n\t\tassertEquals(\"Delete\", selenium.getValue(\"//input[@value='Delete']\"));\n\t\tassertEquals(\"New Message\",\n\t\t\tselenium.getValue(\"//input[@value='New Message']\"));\n\t\tselenium.clickAt(\"//input[@value='New Message']\",\n\t\t\tRuntimeVariables.replace(\"New Message\"));\n\t\tselenium.waitForVisible(\n\t\t\t\"//button[contains(@class,'autocomplete-button')]/span\");\n\t\tselenium.clickAt(\"//button[contains(@class,'autocomplete-button')]/span\",\n\t\t\tRuntimeVariables.replace(\"Dropdown\"));\n\t\tselenium.typeKeys(\"//input[@id='_1_WAR_privatemessagingportlet_to']\",\n\t\t\tRuntimeVariables.replace(\"Social01\"));\n\t\tThread.sleep(5000);\n\t\tselenium.waitForPartialText(\"//li[contains(@data-text,'Social01 Office01 User01')]\",\n\t\t\t\"Social01 Office01 User01\");\n\t\tassertTrue(selenium.isPartialText(\n\t\t\t\t\"//li[contains(@data-text,'Social01 Office01 User01')]\",\n\t\t\t\t\"Social01 Office01 User01\"));\n\t\tselenium.clickAt(\"//li[contains(@data-text,'Social01 Office01 User01')]\",\n\t\t\tRuntimeVariables.replace(\"Social01 Office01 User01\"));\n\t\tassertEquals(\"Social01 Office01 User01 <socialoffice01>,\",\n\t\t\tselenium.getValue(\n\t\t\t\t\"//input[@id='_1_WAR_privatemessagingportlet_to']\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//input[@id='_1_WAR_privatemessagingportlet_subject']\"));\n\t\tselenium.type(\"//input[@id='_1_WAR_privatemessagingportlet_subject']\",\n\t\t\tRuntimeVariables.replace(\"Message Subject\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//textarea[@id='_1_WAR_privatemessagingportlet_body']\"));\n\t\tselenium.type(\"//textarea[@id='_1_WAR_privatemessagingportlet_body']\",\n\t\t\tRuntimeVariables.replace(\"\\\"Message's Body\\\"\"));\n\t\tselenium.clickAt(\"//input[@value='Send']\",\n\t\t\tRuntimeVariables.replace(\"Send\"));\n\t\tselenium.waitForVisible(\"//div[@class='portlet-msg-success']\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Your request completed successfully.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Social01 Office01 User01\"),\n\t\t\tselenium.getText(\"//span[@class='author-sender']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"\\\"Message's Body\\\"\"),\n\t\t\tselenium.getText(\"//div[@class='body']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 result.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t}","commit_id":"3a14d6ebef67befb06b761bf26293cbee8e3053a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSOUs_ViewPMMessageApostropheQuotation()\n\t\tthrows Exception {\n\t\tselenium.open(\"/user/socialoffice01/so/dashboard\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//nav/ul/li[contains(.,'Messages')]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//span[@class='author-sender']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"\\\"Message's Body\\\"\"),\n\t\t\tselenium.getText(\"//div[@class='body']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 result.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tselenium.clickAt(\"//div[@class='subject']\",\n\t\t\tRuntimeVariables.replace(\"Message Subject\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']/span\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Between Joe Bloggs And you\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-layout-content thread-info-content ']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//span[@class='name'])[contains(.,'Joe Bloggs')]\"));\n\t\tassertTrue(selenium.isPartialText(\"//div[@class='body']\",\n\t\t\t\t\"\\\"Message's Body\\\"\"));\n\t}","id":18260,"modified_method":"public void testSOUs_ViewPMMessageApostropheQuotation()\n\t\tthrows Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/user/socialoffice01/so/dashboard\");\n\t\tselenium.waitForVisible(\"//nav/ul/li[contains(.,'Messages')]/a/span\");\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//span[@class='author-sender']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"\\\"Message's Body\\\"\"),\n\t\t\tselenium.getText(\"//div[@class='body']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 result.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tselenium.clickAt(\"//div[@class='subject']\",\n\t\t\tRuntimeVariables.replace(\"Message Subject\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']/span\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Between Joe Bloggs And you\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-layout-content thread-info-content ']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//span[@class='name'])[contains(.,'Joe Bloggs')]\"));\n\t\tassertTrue(selenium.isPartialText(\"//div[@class='body']\",\n\t\t\t\t\"\\\"Message's Body\\\"\"));\n\t}","commit_id":"3a14d6ebef67befb06b761bf26293cbee8e3053a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownPMMessage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//nav/ul/li[contains(.,'Messages')]/a/span\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\n\t\t\t\tboolean message1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean message2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean message3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean message4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean message5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18261,"modified_method":"public void testTearDownPMMessage() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.selectWindow(\"null\");\n\t\t\t\tselenium.selectFrame(\"relative=top\");\n\t\t\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\t\t\t\tselenium.waitForVisible(\n\t\t\t\t\t\"//nav/ul/li[contains(.,'Messages')]/a/span\");\n\t\t\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\n\t\t\t\tboolean message1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean message2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean message3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean message4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean message5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//td[1]/span/span/span/input[2]\");\n\n\t\t\t\tif (!message5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"//td[1]/span/span/span/input[2]\",\n\t\t\t\t\tRuntimeVariables.replace(\"Checkbox\"));\n\t\t\t\tselenium.clickAt(\"//input[@value='Delete']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"3a14d6ebef67befb06b761bf26293cbee8e3053a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testViewPMMessageApostropheQuotation()\n\t\tthrows Exception {\n\t\tselenium.open(\"/user/joebloggs/home\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//nav/ul/li[contains(.,'Messages')]/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Social01 Office01 User01\"),\n\t\t\tselenium.getText(\"//span[@class='author-sender']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"\\\"Message's Body\\\"\"),\n\t\t\tselenium.getText(\"//div[@class='body']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 result.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tselenium.clickAt(\"//div[@class='subject']\",\n\t\t\tRuntimeVariables.replace(\"Message Subject\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']/span\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Between Social01 Office01 User01 And you\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-layout-content thread-info-content ']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//span[@class='name'])[contains(.,'Joe Bloggs')]\"));\n\t\tassertTrue(selenium.isPartialText(\"//div[@class='body']\",\n\t\t\t\t\"\\\"Message's Body\\\"\"));\n\t}","id":18262,"modified_method":"public void testViewPMMessageApostropheQuotation()\n\t\tthrows Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/user/joebloggs/home\");\n\t\tselenium.waitForVisible(\"//nav/ul/li[contains(.,'Messages')]/a/span\");\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Messages')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Messages\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Private Messaging\"),\n\t\t\tselenium.getText(\"//span[@class='portlet-title-default']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Social01 Office01 User01\"),\n\t\t\tselenium.getText(\"//span[@class='author-sender']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//div[@class='subject']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"\\\"Message's Body\\\"\"),\n\t\t\tselenium.getText(\"//div[@class='body']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Showing 1 result.\"),\n\t\t\tselenium.getText(\"//div[@class='search-results']\"));\n\t\tselenium.clickAt(\"//div[@class='subject']\",\n\t\t\tRuntimeVariables.replace(\"Message Subject\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Message Subject\"),\n\t\t\tselenium.getText(\"//h1[@class='header-title']/span\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"Between Social01 Office01 User01 And you\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='aui-layout-content thread-info-content ']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//span[@class='name'])[contains(.,'Joe Bloggs')]\"));\n\t\tassertTrue(selenium.isPartialText(\"//div[@class='body']\",\n\t\t\t\t\"\\\"Message's Body\\\"\"));\n\t}","commit_id":"3a14d6ebef67befb06b761bf26293cbee8e3053a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static LogEntry readEntry( ByteBuffer buffer, ReadableByteChannel channel, \n            XaCommandFactory cf ) throws IOException\n    {\n        buffer.clear();\n        buffer.limit( 1 );\n        if ( channel.read( buffer ) != buffer.limit() )\n        {\n            // ok no more entries we're done\n            return null;\n        }\n        buffer.flip();\n        byte entry = buffer.get();\n        switch ( entry )\n        {\n            case LogEntry.TX_START:\n                return readTxStartEntry( buffer, channel );\n            case LogEntry.TX_PREPARE:\n                return readTxPrepareEntry( buffer, channel );\n            case LogEntry.TX_1P_COMMIT:\n                return readTxOnePhaseCommitEntry( buffer, channel );\n            case LogEntry.TX_2P_COMMIT:\n                return readTxTwoPhaseCommitEntry( buffer, channel );\n            case LogEntry.COMMAND:\n                return readTxCommandEntry( buffer, channel, cf );\n            case LogEntry.DONE:\n                return readTxDoneEntry( buffer, channel );\n            case LogEntry.EMPTY:\n                return null;\n            default:\n                throw new IOException( \"Unknown entry[\" + entry + \"]\" );\n        }\n    }","id":18263,"modified_method":"public static LogEntry readEntry( ByteBuffer buffer, ReadableByteChannel channel, \n            XaCommandFactory cf ) throws IOException\n    {\n        try\n        {\n            byte entry = readNextByte( buffer, channel );\n            switch ( entry )\n            {\n                case LogEntry.TX_START:\n                    return readTxStartEntry( buffer, channel );\n                case LogEntry.TX_PREPARE:\n                    return readTxPrepareEntry( buffer, channel );\n                case LogEntry.TX_1P_COMMIT:\n                    return readTxOnePhaseCommitEntry( buffer, channel );\n                case LogEntry.TX_2P_COMMIT:\n                    return readTxTwoPhaseCommitEntry( buffer, channel );\n                case LogEntry.COMMAND:\n                    return readTxCommandEntry( buffer, channel, cf );\n                case LogEntry.DONE:\n                    return readTxDoneEntry( buffer, channel );\n                case LogEntry.EMPTY:\n                    return null;\n                default:\n                    throw new IOException( \"Unknown entry[\" + entry + \"]\" );\n            }\n        }\n        catch ( ReadPastEndException e )\n        {\n            return null;\n        }\n    }","commit_id":"bdc3346a1822e56f5f118eb11daa5dc00b91f31f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Prepare readTxPrepareEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        return new LogEntry.Prepare( identifier );\n    }","id":18264,"modified_method":"private static LogEntry.Prepare readTxPrepareEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.Prepare( readNextInt( buf, channel ) );\n    }","commit_id":"bdc3346a1822e56f5f118eb11daa5dc00b91f31f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.OnePhaseCommit readTxOnePhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 12 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        long txId = buf.getLong();\n        return new LogEntry.OnePhaseCommit( identifier, txId );\n    }","id":18265,"modified_method":"private static LogEntry.OnePhaseCommit readTxOnePhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.OnePhaseCommit( readNextInt( buf, channel ),\n                readNextLong( buf, channel ) );\n    }","commit_id":"bdc3346a1822e56f5f118eb11daa5dc00b91f31f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Done readTxDoneEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        return new LogEntry.Done( identifier );\n    }","id":18266,"modified_method":"private static LogEntry.Done readTxDoneEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.Done( readNextInt( buf, channel ) );\n    }","commit_id":"bdc3346a1822e56f5f118eb11daa5dc00b91f31f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Command readTxCommandEntry( \n            ByteBuffer buf, ReadableByteChannel channel, XaCommandFactory cf ) \n        throws IOException\n    {\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        XaCommand command = cf.readCommand( channel, buf );\n        if ( command == null )\n        {\n            return null;\n        }\n        return new LogEntry.Command( identifier, command );\n    }","id":18267,"modified_method":"private static LogEntry.Command readTxCommandEntry( \n            ByteBuffer buf, ReadableByteChannel channel, XaCommandFactory cf ) \n            throws IOException, ReadPastEndException\n    {\n        int identifier = readNextInt( buf, channel );\n        XaCommand command = cf.readCommand( channel, buf );\n        if ( command == null )\n        {\n            return null;\n        }\n        return new LogEntry.Command( identifier, command );\n    }","commit_id":"bdc3346a1822e56f5f118eb11daa5dc00b91f31f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Start readTxStartEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 1 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        byte globalIdLength = buf.get();\n        // get the branchId id\n        buf.clear();\n        buf.limit( 1 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        byte branchIdLength = buf.get();\n        byte globalId[] = new byte[globalIdLength];\n        ByteBuffer tmpBuffer = ByteBuffer.wrap( globalId );\n        if ( channel.read( tmpBuffer ) != globalId.length )\n        {\n            return null;\n        }\n        byte branchId[] = new byte[branchIdLength];\n        tmpBuffer = ByteBuffer.wrap( branchId );\n        if ( channel.read( tmpBuffer ) != branchId.length )\n        {\n            return null;\n        }\n        // get the tx identifier\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        // get the format id\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int formatId = buf.getInt();\n        // re-create the transaction\n        Xid xid = new XidImpl( globalId, branchId, formatId );\n        return new LogEntry.Start( xid, identifier, -1 );\n    }","id":18268,"modified_method":"private static LogEntry.Start readTxStartEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        byte globalIdLength = readNextByte( buf, channel );\n        byte branchIdLength = readNextByte( buf, channel );\n        byte globalId[] = new byte[globalIdLength];\n        readIntoBufferAndFlip( ByteBuffer.wrap( globalId ), channel, globalIdLength );\n        byte branchId[] = new byte[branchIdLength];\n        readIntoBufferAndFlip( ByteBuffer.wrap( branchId ), channel, branchIdLength );\n        int identifier = readNextInt( buf, channel );\n        int formatId = readNextInt( buf, channel );\n        \n        // re-create the transaction\n        Xid xid = new XidImpl( globalId, branchId, formatId );\n        return new LogEntry.Start( xid, identifier, -1 );\n    }","commit_id":"bdc3346a1822e56f5f118eb11daa5dc00b91f31f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.TwoPhaseCommit readTxTwoPhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 12 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        long txId = buf.getLong();\n        return new LogEntry.TwoPhaseCommit( identifier, txId );\n    }","id":18269,"modified_method":"private static LogEntry.TwoPhaseCommit readTxTwoPhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.TwoPhaseCommit( readNextInt( buf, channel ),\n                readNextLong( buf, channel ) );\n    }","commit_id":"bdc3346a1822e56f5f118eb11daa5dc00b91f31f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Done readTxDoneEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        return new LogEntry.Done( identifier );\n    }","id":18270,"modified_method":"private static LogEntry.Done readTxDoneEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.Done( readNextInt( buf, channel ) );\n    }","commit_id":"cd673d0af3fe19454217b15ff543289f0f341152","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.TwoPhaseCommit readTxTwoPhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 12 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        long txId = buf.getLong();\n        return new LogEntry.TwoPhaseCommit( identifier, txId );\n    }","id":18271,"modified_method":"private static LogEntry.TwoPhaseCommit readTxTwoPhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.TwoPhaseCommit( readNextInt( buf, channel ),\n                readNextLong( buf, channel ) );\n    }","commit_id":"cd673d0af3fe19454217b15ff543289f0f341152","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static LogEntry readEntry( ByteBuffer buffer, ReadableByteChannel channel, \n            XaCommandFactory cf ) throws IOException\n    {\n        buffer.clear();\n        buffer.limit( 1 );\n        if ( channel.read( buffer ) != buffer.limit() )\n        {\n            // ok no more entries we're done\n            return null;\n        }\n        buffer.flip();\n        byte entry = buffer.get();\n        switch ( entry )\n        {\n            case LogEntry.TX_START:\n                return readTxStartEntry( buffer, channel );\n            case LogEntry.TX_PREPARE:\n                return readTxPrepareEntry( buffer, channel );\n            case LogEntry.TX_1P_COMMIT:\n                return readTxOnePhaseCommitEntry( buffer, channel );\n            case LogEntry.TX_2P_COMMIT:\n                return readTxTwoPhaseCommitEntry( buffer, channel );\n            case LogEntry.COMMAND:\n                return readTxCommandEntry( buffer, channel, cf );\n            case LogEntry.DONE:\n                return readTxDoneEntry( buffer, channel );\n            case LogEntry.EMPTY:\n                return null;\n            default:\n                throw new IOException( \"Unknown entry[\" + entry + \"]\" );\n        }\n    }","id":18272,"modified_method":"public static LogEntry readEntry( ByteBuffer buffer, ReadableByteChannel channel, \n            XaCommandFactory cf ) throws IOException\n    {\n        try\n        {\n            byte entry = readNextByte( buffer, channel );\n            switch ( entry )\n            {\n                case LogEntry.TX_START:\n                    return readTxStartEntry( buffer, channel );\n                case LogEntry.TX_PREPARE:\n                    return readTxPrepareEntry( buffer, channel );\n                case LogEntry.TX_1P_COMMIT:\n                    return readTxOnePhaseCommitEntry( buffer, channel );\n                case LogEntry.TX_2P_COMMIT:\n                    return readTxTwoPhaseCommitEntry( buffer, channel );\n                case LogEntry.COMMAND:\n                    return readTxCommandEntry( buffer, channel, cf );\n                case LogEntry.DONE:\n                    return readTxDoneEntry( buffer, channel );\n                case LogEntry.EMPTY:\n                    return null;\n                default:\n                    throw new IOException( \"Unknown entry[\" + entry + \"]\" );\n            }\n        }\n        catch ( ReadPastEndException e )\n        {\n            return null;\n        }\n    }","commit_id":"cd673d0af3fe19454217b15ff543289f0f341152","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Start readTxStartEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 1 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        byte globalIdLength = buf.get();\n        // get the branchId id\n        buf.clear();\n        buf.limit( 1 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        byte branchIdLength = buf.get();\n        byte globalId[] = new byte[globalIdLength];\n        ByteBuffer tmpBuffer = ByteBuffer.wrap( globalId );\n        if ( channel.read( tmpBuffer ) != globalId.length )\n        {\n            return null;\n        }\n        byte branchId[] = new byte[branchIdLength];\n        tmpBuffer = ByteBuffer.wrap( branchId );\n        if ( channel.read( tmpBuffer ) != branchId.length )\n        {\n            return null;\n        }\n        // get the tx identifier\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        // get the format id\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int formatId = buf.getInt();\n        // re-create the transaction\n        Xid xid = new XidImpl( globalId, branchId, formatId );\n        return new LogEntry.Start( xid, identifier, -1 );\n    }","id":18273,"modified_method":"private static LogEntry.Start readTxStartEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        byte globalIdLength = readNextByte( buf, channel );\n        byte branchIdLength = readNextByte( buf, channel );\n        byte globalId[] = new byte[globalIdLength];\n        readIntoBufferAndFlip( ByteBuffer.wrap( globalId ), channel, globalIdLength );\n        byte branchId[] = new byte[branchIdLength];\n        readIntoBufferAndFlip( ByteBuffer.wrap( branchId ), channel, branchIdLength );\n        int identifier = readNextInt( buf, channel );\n        int formatId = readNextInt( buf, channel );\n        \n        // re-create the transaction\n        Xid xid = new XidImpl( globalId, branchId, formatId );\n        return new LogEntry.Start( xid, identifier, -1 );\n    }","commit_id":"cd673d0af3fe19454217b15ff543289f0f341152","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.OnePhaseCommit readTxOnePhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 12 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        long txId = buf.getLong();\n        return new LogEntry.OnePhaseCommit( identifier, txId );\n    }","id":18274,"modified_method":"private static LogEntry.OnePhaseCommit readTxOnePhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.OnePhaseCommit( readNextInt( buf, channel ),\n                readNextLong( buf, channel ) );\n    }","commit_id":"cd673d0af3fe19454217b15ff543289f0f341152","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Prepare readTxPrepareEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        return new LogEntry.Prepare( identifier );\n    }","id":18275,"modified_method":"private static LogEntry.Prepare readTxPrepareEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.Prepare( readNextInt( buf, channel ) );\n    }","commit_id":"cd673d0af3fe19454217b15ff543289f0f341152","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Command readTxCommandEntry( \n            ByteBuffer buf, ReadableByteChannel channel, XaCommandFactory cf ) \n        throws IOException\n    {\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        XaCommand command = cf.readCommand( channel, buf );\n        if ( command == null )\n        {\n            return null;\n        }\n        return new LogEntry.Command( identifier, command );\n    }","id":18276,"modified_method":"private static LogEntry.Command readTxCommandEntry( \n            ByteBuffer buf, ReadableByteChannel channel, XaCommandFactory cf ) \n            throws IOException, ReadPastEndException\n    {\n        int identifier = readNextInt( buf, channel );\n        XaCommand command = cf.readCommand( channel, buf );\n        if ( command == null )\n        {\n            return null;\n        }\n        return new LogEntry.Command( identifier, command );\n    }","commit_id":"cd673d0af3fe19454217b15ff543289f0f341152","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Done readTxDoneEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        return new LogEntry.Done( identifier );\n    }","id":18277,"modified_method":"private static LogEntry.Done readTxDoneEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.Done( readNextInt( buf, channel ) );\n    }","commit_id":"9cd192b43943cb1bd622e21152fd4397c81975da","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.TwoPhaseCommit readTxTwoPhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 12 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        long txId = buf.getLong();\n        return new LogEntry.TwoPhaseCommit( identifier, txId );\n    }","id":18278,"modified_method":"private static LogEntry.TwoPhaseCommit readTxTwoPhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.TwoPhaseCommit( readNextInt( buf, channel ),\n                readNextLong( buf, channel ) );\n    }","commit_id":"9cd192b43943cb1bd622e21152fd4397c81975da","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Prepare readTxPrepareEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        return new LogEntry.Prepare( identifier );\n    }","id":18279,"modified_method":"private static LogEntry.Prepare readTxPrepareEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.Prepare( readNextInt( buf, channel ) );\n    }","commit_id":"9cd192b43943cb1bd622e21152fd4397c81975da","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.OnePhaseCommit readTxOnePhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 12 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        long txId = buf.getLong();\n        return new LogEntry.OnePhaseCommit( identifier, txId );\n    }","id":18280,"modified_method":"private static LogEntry.OnePhaseCommit readTxOnePhaseCommitEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        return new LogEntry.OnePhaseCommit( readNextInt( buf, channel ),\n                readNextLong( buf, channel ) );\n    }","commit_id":"9cd192b43943cb1bd622e21152fd4397c81975da","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static LogEntry readEntry( ByteBuffer buffer, ReadableByteChannel channel, \n            XaCommandFactory cf ) throws IOException\n    {\n        buffer.clear();\n        buffer.limit( 1 );\n        if ( channel.read( buffer ) != buffer.limit() )\n        {\n            // ok no more entries we're done\n            return null;\n        }\n        buffer.flip();\n        byte entry = buffer.get();\n        switch ( entry )\n        {\n            case LogEntry.TX_START:\n                return readTxStartEntry( buffer, channel );\n            case LogEntry.TX_PREPARE:\n                return readTxPrepareEntry( buffer, channel );\n            case LogEntry.TX_1P_COMMIT:\n                return readTxOnePhaseCommitEntry( buffer, channel );\n            case LogEntry.TX_2P_COMMIT:\n                return readTxTwoPhaseCommitEntry( buffer, channel );\n            case LogEntry.COMMAND:\n                return readTxCommandEntry( buffer, channel, cf );\n            case LogEntry.DONE:\n                return readTxDoneEntry( buffer, channel );\n            case LogEntry.EMPTY:\n                return null;\n            default:\n                throw new IOException( \"Unknown entry[\" + entry + \"]\" );\n        }\n    }","id":18281,"modified_method":"public static LogEntry readEntry( ByteBuffer buffer, ReadableByteChannel channel, \n            XaCommandFactory cf ) throws IOException\n    {\n        try\n        {\n            byte entry = readNextByte( buffer, channel );\n            switch ( entry )\n            {\n                case LogEntry.TX_START:\n                    return readTxStartEntry( buffer, channel );\n                case LogEntry.TX_PREPARE:\n                    return readTxPrepareEntry( buffer, channel );\n                case LogEntry.TX_1P_COMMIT:\n                    return readTxOnePhaseCommitEntry( buffer, channel );\n                case LogEntry.TX_2P_COMMIT:\n                    return readTxTwoPhaseCommitEntry( buffer, channel );\n                case LogEntry.COMMAND:\n                    return readTxCommandEntry( buffer, channel, cf );\n                case LogEntry.DONE:\n                    return readTxDoneEntry( buffer, channel );\n                case LogEntry.EMPTY:\n                    return null;\n                default:\n                    throw new IOException( \"Unknown entry[\" + entry + \"]\" );\n            }\n        }\n        catch ( ReadPastEndException e )\n        {\n            return null;\n        }\n    }","commit_id":"9cd192b43943cb1bd622e21152fd4397c81975da","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Command readTxCommandEntry( \n            ByteBuffer buf, ReadableByteChannel channel, XaCommandFactory cf ) \n        throws IOException\n    {\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        XaCommand command = cf.readCommand( channel, buf );\n        if ( command == null )\n        {\n            return null;\n        }\n        return new LogEntry.Command( identifier, command );\n    }","id":18282,"modified_method":"private static LogEntry.Command readTxCommandEntry( \n            ByteBuffer buf, ReadableByteChannel channel, XaCommandFactory cf ) \n            throws IOException, ReadPastEndException\n    {\n        int identifier = readNextInt( buf, channel );\n        XaCommand command = cf.readCommand( channel, buf );\n        if ( command == null )\n        {\n            return null;\n        }\n        return new LogEntry.Command( identifier, command );\n    }","commit_id":"9cd192b43943cb1bd622e21152fd4397c81975da","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static LogEntry.Start readTxStartEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException\n    {\n        buf.clear();\n        buf.limit( 1 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        byte globalIdLength = buf.get();\n        // get the branchId id\n        buf.clear();\n        buf.limit( 1 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        byte branchIdLength = buf.get();\n        byte globalId[] = new byte[globalIdLength];\n        ByteBuffer tmpBuffer = ByteBuffer.wrap( globalId );\n        if ( channel.read( tmpBuffer ) != globalId.length )\n        {\n            return null;\n        }\n        byte branchId[] = new byte[branchIdLength];\n        tmpBuffer = ByteBuffer.wrap( branchId );\n        if ( channel.read( tmpBuffer ) != branchId.length )\n        {\n            return null;\n        }\n        // get the tx identifier\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int identifier = buf.getInt();\n        // get the format id\n        buf.clear();\n        buf.limit( 4 );\n        if ( channel.read( buf ) != buf.limit() )\n        {\n            return null;\n        }\n        buf.flip();\n        int formatId = buf.getInt();\n        // re-create the transaction\n        Xid xid = new XidImpl( globalId, branchId, formatId );\n        return new LogEntry.Start( xid, identifier, -1 );\n    }","id":18283,"modified_method":"private static LogEntry.Start readTxStartEntry( ByteBuffer buf, \n            ReadableByteChannel channel ) throws IOException, ReadPastEndException\n    {\n        byte globalIdLength = readNextByte( buf, channel );\n        byte branchIdLength = readNextByte( buf, channel );\n        byte globalId[] = new byte[globalIdLength];\n        readIntoBufferAndFlip( ByteBuffer.wrap( globalId ), channel, globalIdLength );\n        byte branchId[] = new byte[branchIdLength];\n        readIntoBufferAndFlip( ByteBuffer.wrap( branchId ), channel, branchIdLength );\n        int identifier = readNextInt( buf, channel );\n        int formatId = readNextInt( buf, channel );\n        \n        // re-create the transaction\n        Xid xid = new XidImpl( globalId, branchId, formatId );\n        return new LogEntry.Start( xid, identifier, -1 );\n    }","commit_id":"9cd192b43943cb1bd622e21152fd4397c81975da","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void processOutgoingOrRequeue(MessageItem[] messages, PeerNode pn, boolean neverWaitForPacketNumber, boolean dontRequeue) {\n    \tString requeueLogString = \"\";\n    \tif(!dontRequeue) {\n    \t\trequeueLogString = \", requeueing\";\n    \t}\n        if(logMINOR) Logger.minor(this, \"processOutgoingOrRequeue \"+messages.length+\" messages for \"+pn+\" (\"+neverWaitForPacketNumber+ ')');\n        byte[][] messageData = new byte[messages.length][];\n        int[] alreadyReported = new int[messages.length];\n        MessageItem[] newMsgs = new MessageItem[messages.length];\n        KeyTracker kt = pn.getCurrentKeyTracker();\n        if(kt == null) {\n        \tLogger.error(this, \"Not connected while sending packets: \"+pn);\n        \treturn;\n        }\n        int length = 1;\n        length += kt.countAcks() + kt.countAckRequests() + kt.countResendRequests();\n        int callbacksCount = 0;\n        int x = 0;\n\t\tString mi_name = null;\n        for(int i=0;i<messageData.length;i++) {\n            MessageItem mi = messages[i];\n        \tif(logMINOR) Logger.minor(this, \"Handling formatted MessageItem \"+mi+\" : \"+mi.getData(pn).length);\n\t\t\tmi_name = (mi.msg == null ? \"(not a Message)\" : mi.msg.getSpec().getName());\n            if(mi.formatted) {\n                try {\n                    byte[] buf = mi.getData(pn);\n                    kt = pn.getCurrentKeyTracker();\n                    if(kt == null) {\n                        if(logMINOR) Logger.minor(this, \"kt = null\");\n                        pn.requeueMessageItems(messages, i, messages.length-i, false, \"kt = null\");\n                        return;\n                    }\n                    int packetNumber = kt.allocateOutgoingPacketNumberNeverBlock();\n                    this.processOutgoingPreformatted(buf, 0, buf.length, pn.getCurrentKeyTracker(), packetNumber, mi.cb, mi.alreadyReportedBytes);\n                    if(mi.ctrCallback != null)\n                    \tmi.ctrCallback.sentBytes(buf.length + HEADERS_LENGTH_ONE_MESSAGE);\n                    if(mi.cb != null) {\n                    \tfor(int j=0;j<mi.cb.length;j++) mi.cb[j].sent();\n                    }\n                } catch (NotConnectedException e) {\n                    Logger.normal(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString);\n                    // Requeue\n                    if(!dontRequeue) {\n                    \tpn.requeueMessageItems(messages, 0, x, false, \"NotConnectedException(1a)\");\n                    \tpn.requeueMessageItems(messages, i, messages.length-i, false, \"NotConnectedException(1b)\");\n                    }\n                    return;\n                } catch (WouldBlockException e) {\n                    if(logMINOR) Logger.minor(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                    // Requeue\n                    if(!dontRequeue) {\n                    \tpn.requeueMessageItems(messages, 0, x, false, \"WouldBlockException(1a)\");\n                    \tpn.requeueMessageItems(messages, i, messages.length-i, false, \"WouldBlockException(1b)\");\n                    }\n                    return;\n                } catch (KeyChangedException e) {\n                \tif(logMINOR) Logger.minor(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                    // Requeue\n                    if(!dontRequeue) {\n                    \tpn.requeueMessageItems(messages, 0, x, false, \"KeyChangedException(1a)\");\n                    \tpn.requeueMessageItems(messages, i, messages.length-i, false, \"KeyChangedException(1b)\");\n                    }\n                    return;\n                } catch (Throwable e) {\n                    Logger.error(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                    // Requeue\n                    if(!dontRequeue) {\n                    \tpn.requeueMessageItems(messages, 0, x, false, \"Throwable(1)\");\n                    \tpn.requeueMessageItems(messages, i, messages.length-i, false, \"Throwable(1)\");\n                    }\n                    return;\n                }\n            } else {\n                byte[] data = mi.getData(pn);\n                messageData[x] = data;\n                if(data.length > node.usm.getMaxPacketSize()) {\n                    Logger.error(this, \"Message exceeds packet size: \"+messages[i]+\" size \"+data.length+\" message \"+mi.msg);\n                    // Will be handled later\n                }\n                newMsgs[x] = mi;\n                alreadyReported[x] = mi.alreadyReportedBytes;\n                x++;\n                if(mi.cb != null) callbacksCount += mi.cb.length;\n                if(logMINOR) Logger.minor(this, \"Sending: \"+mi+\" length \"+data.length+\" cb \"+ StringArray.toString(mi.cb));\n                length += (data.length + 2);\n            }\n        }\n        if(x != messageData.length) {\n            byte[][] newMessageData = new byte[x][];\n            System.arraycopy(messageData, 0, newMessageData, 0, x);\n            messageData = newMessageData;\n            messages = newMsgs;\n            newMsgs = new MessageItem[x];\n            System.arraycopy(messages, 0, newMsgs, 0, x);\n            messages = newMsgs;\n        }\n        AsyncMessageCallback callbacks[] = new AsyncMessageCallback[callbacksCount];\n        x=0;\n        int alreadyReportedBytes = 0;\n        for(int i=0;i<messages.length;i++) {\n            if(messages[i].formatted) continue;\n            if(messages[i].cb != null) {\n            \talreadyReportedBytes += messages[i].alreadyReportedBytes;\n                System.arraycopy(messages[i].cb, 0, callbacks, x, messages[i].cb.length);\n                x += messages[i].cb.length;\n            }\n        }\n        if(x != callbacksCount) throw new IllegalStateException();\n        \n        if((length + HEADERS_LENGTH_MINIMUM < node.usm.getMaxPacketSize()) &&\n                (messageData.length < 256)) {\n\t\t\tmi_name = null;\n            try {\n                innerProcessOutgoing(messageData, 0, messageData.length, length, pn, neverWaitForPacketNumber, callbacks, alreadyReportedBytes);\n                for(int i=0;i<messageData.length;i++) {\n                \tMessageItem mi = newMsgs[i];\n\t\t\t\t\tmi_name = (mi.msg == null ? \"(not a Message)\" : mi.msg.getSpec().getName());\n                \tif(mi.ctrCallback != null) {\n                \t\tmi.ctrCallback.sentBytes(messageData[i].length + \n                \t\t\t\t1 + (HEADERS_LENGTH_MINIMUM / messageData.length));\n                \t\t// FIXME rounding issues\n                \t}\n                    if(mi.cb != null) {\n                    \tfor(int j=0;j<mi.cb.length;j++) mi.cb[j].sent();\n                    }\n                }\n            } catch (NotConnectedException e) {\n                Logger.normal(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString);\n                // Requeue\n                if(!dontRequeue)\n                \tpn.requeueMessageItems(messages, 0, messages.length, false, \"NotConnectedException(2)\");\n                return;\n            } catch (WouldBlockException e) {\n            \tif(logMINOR) Logger.minor(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                // Requeue\n                if(!dontRequeue)\n                \tpn.requeueMessageItems(messages, 0, messages.length, false, \"WouldBlockException(2)\");\n                return;\n            } catch (Throwable e) {\n                Logger.error(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                // Requeue\n                if(!dontRequeue)\n                \tpn.requeueMessageItems(messages, 0, messages.length, false, \"Throwable(2)\");\n                return;\n                \n            }\n        } else {\n\t\t\tif(!dontRequeue) {\n\t\t\t\trequeueLogString = \", requeueing remaining messages\";\n\t\t\t}\n            length = 1;\n            length += kt.countAcks() + kt.countAckRequests() + kt.countResendRequests();\n            int count = 0;\n            int lastIndex = 0;\n            alreadyReportedBytes = 0;\n            for(int i=0;i<=messageData.length;i++) {\n                int thisLength;\n                if(i == messages.length) thisLength = 0;\n                else thisLength = (messageData[i].length + 2);\n                int newLength = length + thisLength;\n                count++;\n                if((newLength + HEADERS_LENGTH_MINIMUM > node.usm.getMaxPacketSize()) || (count > 255) || (i == messages.length)) {\n                    // lastIndex up to the message right before this one\n                    // e.g. lastIndex = 0, i = 1, we just send message 0\n                    if(lastIndex != i) {\n\t\t\t\t\t\tmi_name = null;\n                        try {\n                            innerProcessOutgoing(messageData, lastIndex, i-lastIndex, length, pn, neverWaitForPacketNumber, callbacks, alreadyReportedBytes);\n                            for(int j=lastIndex;j<i;j++) {\n                            \tMessageItem mi = newMsgs[j];\n\t\t\t\t\t\t\t\tmi_name = (mi.msg == null ? \"(not a Message)\" : mi.msg.getSpec().getName());\n                            \tif(mi.ctrCallback != null) {\n                            \t\tmi.ctrCallback.sentBytes(messageData[j].length + \n                            \t\t\t\t1 + (HEADERS_LENGTH_MINIMUM / (i-lastIndex)));\n                            \t\t// FIXME rounding issues\n                            \t}\n                                if(mi.cb != null) {\n                                \tfor(int k=0;k<mi.cb.length;k++) mi.cb[k].sent();\n                                }\n                            }\n                        } catch (NotConnectedException e) {\n                            Logger.normal(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString);\n                            // Requeue\n                            if(!dontRequeue)\n                            \tpn.requeueMessageItems(messages, lastIndex, messages.length - lastIndex, false, \"NotConnectedException(3)\");\n                            return;\n                        } catch (WouldBlockException e) {\n                        \tif(logMINOR) Logger.minor(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                            // Requeue\n                            if(!dontRequeue)\n                            \tpn.requeueMessageItems(messages, lastIndex, messages.length - lastIndex, false, \"WouldBlockException(3)\");\n                            return;\n                        } catch (Throwable e) {\n                            Logger.error(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                            // Requeue\n                            if(!dontRequeue)\n                            \tpn.requeueMessageItems(messages, lastIndex, messages.length - lastIndex, false, \"Throwable(3)\");\n                            return;\n                        }\n                    }\n                    lastIndex = i;\n                    if(i != messageData.length)\n                        length = 1 + (messageData[i].length + 2);\n                    count = 0;\n                } else {\n                \tlength = newLength;\n                \talreadyReportedBytes += alreadyReported[i];\n                }\n            }\n        }\n    }","id":18284,"modified_method":"public void processOutgoingOrRequeue(MessageItem[] messages, PeerNode pn, boolean neverWaitForPacketNumber, boolean dontRequeue) {\n    \tString requeueLogString = \"\";\n    \tif(!dontRequeue) {\n    \t\trequeueLogString = \", requeueing\";\n    \t}\n        if(logMINOR) Logger.minor(this, \"processOutgoingOrRequeue \"+messages.length+\" messages for \"+pn+\" (\"+neverWaitForPacketNumber+ ')');\n        byte[][] messageData = new byte[messages.length][];\n        int[] alreadyReported = new int[messages.length];\n        MessageItem[] newMsgs = new MessageItem[messages.length];\n        KeyTracker kt = pn.getCurrentKeyTracker();\n        if(kt == null) {\n        \tLogger.error(this, \"Not connected while sending packets: \"+pn);\n        \treturn;\n        }\n        int length = 1;\n        length += kt.countAcks() + kt.countAckRequests() + kt.countResendRequests();\n        int callbacksCount = 0;\n        int x = 0;\n\t\tString mi_name = null;\n        for(int i=0;i<messageData.length;i++) {\n            MessageItem mi = messages[i];\n        \tif(logMINOR) Logger.minor(this, \"Handling formatted MessageItem \"+mi+\" : \"+mi.getData(pn).length);\n\t\t\tmi_name = (mi.msg == null ? \"(not a Message)\" : mi.msg.getSpec().getName());\n            if(mi.formatted) {\n                try {\n                    byte[] buf = mi.getData(pn);\n                    kt = pn.getCurrentKeyTracker();\n                    if(kt == null) {\n                        if(logMINOR) Logger.minor(this, \"kt = null\");\n                        pn.requeueMessageItems(messages, i, messages.length-i, false, \"kt = null\");\n                        return;\n                    }\n                    int packetNumber = kt.allocateOutgoingPacketNumberNeverBlock();\n                    this.processOutgoingPreformatted(buf, 0, buf.length, pn.getCurrentKeyTracker(), packetNumber, mi.cb, mi.alreadyReportedBytes);\n                    mi.onSent(buf.length + HEADERS_LENGTH_ONE_MESSAGE);\n                } catch (NotConnectedException e) {\n                    Logger.normal(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString);\n                    // Requeue\n                    if(!dontRequeue) {\n                    \tpn.requeueMessageItems(messages, 0, x, false, \"NotConnectedException(1a)\");\n                    \tpn.requeueMessageItems(messages, i, messages.length-i, false, \"NotConnectedException(1b)\");\n                    }\n                    return;\n                } catch (WouldBlockException e) {\n                    if(logMINOR) Logger.minor(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                    // Requeue\n                    if(!dontRequeue) {\n                    \tpn.requeueMessageItems(messages, 0, x, false, \"WouldBlockException(1a)\");\n                    \tpn.requeueMessageItems(messages, i, messages.length-i, false, \"WouldBlockException(1b)\");\n                    }\n                    return;\n                } catch (KeyChangedException e) {\n                \tif(logMINOR) Logger.minor(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                    // Requeue\n                    if(!dontRequeue) {\n                    \tpn.requeueMessageItems(messages, 0, x, false, \"KeyChangedException(1a)\");\n                    \tpn.requeueMessageItems(messages, i, messages.length-i, false, \"KeyChangedException(1b)\");\n                    }\n                    return;\n                } catch (Throwable e) {\n                    Logger.error(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                    // Requeue\n                    if(!dontRequeue) {\n                    \tpn.requeueMessageItems(messages, 0, x, false, \"Throwable(1)\");\n                    \tpn.requeueMessageItems(messages, i, messages.length-i, false, \"Throwable(1)\");\n                    }\n                    return;\n                }\n            } else {\n                byte[] data = mi.getData(pn);\n                messageData[x] = data;\n                if(data.length > node.usm.getMaxPacketSize()) {\n                    Logger.error(this, \"Message exceeds packet size: \"+messages[i]+\" size \"+data.length+\" message \"+mi.msg);\n                    // Will be handled later\n                }\n                newMsgs[x] = mi;\n                alreadyReported[x] = mi.alreadyReportedBytes;\n                x++;\n                if(mi.cb != null) callbacksCount += mi.cb.length;\n                if(logMINOR) Logger.minor(this, \"Sending: \"+mi+\" length \"+data.length+\" cb \"+ StringArray.toString(mi.cb));\n                length += (data.length + 2);\n            }\n        }\n        if(x != messageData.length) {\n            byte[][] newMessageData = new byte[x][];\n            System.arraycopy(messageData, 0, newMessageData, 0, x);\n            messageData = newMessageData;\n            messages = newMsgs;\n            newMsgs = new MessageItem[x];\n            System.arraycopy(messages, 0, newMsgs, 0, x);\n            messages = newMsgs;\n        }\n        AsyncMessageCallback callbacks[] = new AsyncMessageCallback[callbacksCount];\n        x=0;\n        int alreadyReportedBytes = 0;\n        for(int i=0;i<messages.length;i++) {\n            if(messages[i].formatted) continue;\n            if(messages[i].cb != null) {\n            \talreadyReportedBytes += messages[i].alreadyReportedBytes;\n                System.arraycopy(messages[i].cb, 0, callbacks, x, messages[i].cb.length);\n                x += messages[i].cb.length;\n            }\n        }\n        if(x != callbacksCount) throw new IllegalStateException();\n        \n        if((length + HEADERS_LENGTH_MINIMUM < node.usm.getMaxPacketSize()) &&\n                (messageData.length < 256)) {\n\t\t\tmi_name = null;\n            try {\n                innerProcessOutgoing(messageData, 0, messageData.length, length, pn, neverWaitForPacketNumber, callbacks, alreadyReportedBytes);\n                for(int i=0;i<messageData.length;i++) {\n                \tMessageItem mi = newMsgs[i];\n\t\t\t\t\tmi_name = (mi.msg == null ? \"(not a Message)\" : mi.msg.getSpec().getName());\n\t\t\t\t\tmi.onSent(messageData[i].length + 1 + (HEADERS_LENGTH_MINIMUM / messageData.length));\n                }\n            } catch (NotConnectedException e) {\n                Logger.normal(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString);\n                // Requeue\n                if(!dontRequeue)\n                \tpn.requeueMessageItems(messages, 0, messages.length, false, \"NotConnectedException(2)\");\n                return;\n            } catch (WouldBlockException e) {\n            \tif(logMINOR) Logger.minor(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                // Requeue\n                if(!dontRequeue)\n                \tpn.requeueMessageItems(messages, 0, messages.length, false, \"WouldBlockException(2)\");\n                return;\n            } catch (Throwable e) {\n                Logger.error(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                // Requeue\n                if(!dontRequeue)\n                \tpn.requeueMessageItems(messages, 0, messages.length, false, \"Throwable(2)\");\n                return;\n                \n            }\n        } else {\n\t\t\tif(!dontRequeue) {\n\t\t\t\trequeueLogString = \", requeueing remaining messages\";\n\t\t\t}\n            length = 1;\n            length += kt.countAcks() + kt.countAckRequests() + kt.countResendRequests();\n            int count = 0;\n            int lastIndex = 0;\n            alreadyReportedBytes = 0;\n            for(int i=0;i<=messageData.length;i++) {\n                int thisLength;\n                if(i == messages.length) thisLength = 0;\n                else thisLength = (messageData[i].length + 2);\n                int newLength = length + thisLength;\n                count++;\n                if((newLength + HEADERS_LENGTH_MINIMUM > node.usm.getMaxPacketSize()) || (count > 255) || (i == messages.length)) {\n                    // lastIndex up to the message right before this one\n                    // e.g. lastIndex = 0, i = 1, we just send message 0\n                    if(lastIndex != i) {\n\t\t\t\t\t\tmi_name = null;\n                        try {\n                            innerProcessOutgoing(messageData, lastIndex, i-lastIndex, length, pn, neverWaitForPacketNumber, callbacks, alreadyReportedBytes);\n                            for(int j=lastIndex;j<i;j++) {\n                            \tMessageItem mi = newMsgs[j];\n\t\t\t\t\t\t\t\tmi_name = (mi.msg == null ? \"(not a Message)\" : mi.msg.getSpec().getName());\n\t\t\t\t\t\t\t\tmi.onSent(messageData[j].length + 1 + (HEADERS_LENGTH_MINIMUM / (i-lastIndex)));\n                            }\n                        } catch (NotConnectedException e) {\n                            Logger.normal(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString);\n                            // Requeue\n                            if(!dontRequeue)\n                            \tpn.requeueMessageItems(messages, lastIndex, messages.length - lastIndex, false, \"NotConnectedException(3)\");\n                            return;\n                        } catch (WouldBlockException e) {\n                        \tif(logMINOR) Logger.minor(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                            // Requeue\n                            if(!dontRequeue)\n                            \tpn.requeueMessageItems(messages, lastIndex, messages.length - lastIndex, false, \"WouldBlockException(3)\");\n                            return;\n                        } catch (Throwable e) {\n                            Logger.error(this, \"Caught \"+e+\" while sending messages (\"+mi_name+\") to \"+pn.getPeer()+requeueLogString, e);\n                            // Requeue\n                            if(!dontRequeue)\n                            \tpn.requeueMessageItems(messages, lastIndex, messages.length - lastIndex, false, \"Throwable(3)\");\n                            return;\n                        }\n                    }\n                    lastIndex = i;\n                    if(i != messageData.length)\n                        length = 1 + (messageData[i].length + 2);\n                    count = 0;\n                } else {\n                \tlength = newLength;\n                \talreadyReportedBytes += alreadyReported[i];\n                }\n            }\n        }\n    }","commit_id":"a4911a6cd5a14e471c9fc44972f1983c59345318","url":"https://github.com/freenet/fred"},{"original_method":"protected void addDDMStructures(\n\t\t\tString parentDDMStructureKey, String fileName,\n\t\t\tInputStream inputStream)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tgetKey(fileName));\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM structure with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t}\n\n\t\tString xsd = StringUtil.read(inputStream);\n\n\t\tif (isJournalStructureXSD(xsd)) {\n\t\t\txsd = JournalConverterUtil.getDDMXSD(xsd);\n\t\t}\n\n\t\tsetServiceContext(fileName);\n\n\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, parentDDMStructureKey,\n\t\t\tPortalUtil.getClassNameId(JournalArticle.class), getKey(fileName),\n\t\t\tgetMap(name), null, xsd,\n\t\t\tPropsUtil.get(PropsKeys.JOURNAL_ARTICLE_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDMTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_JOURNAL_DDM_TEMPLATES_DIR_NAME + fileName);\n\n\t\tif (Validator.isNull(parentDDMStructureKey)) {\n\t\t\taddDDMStructures(\n\t\t\t\tddmStructure.getStructureKey(),\n\t\t\t\t_JOURNAL_DDM_STRUCTURES_DIR_NAME + fileName);\n\t\t}\n\t}","id":18285,"modified_method":"protected void addDDMStructures(\n\t\t\tString parentDDMStructureKey, String fileName,\n\t\t\tInputStream inputStream)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tgetKey(fileName));\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM structure with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!updateModeEnabled) {\n\t\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t\t}\n\t\t}\n\n\t\tString xsd = StringUtil.read(inputStream);\n\n\t\tif (isJournalStructureXSD(xsd)) {\n\t\t\txsd = JournalConverterUtil.getDDMXSD(xsd);\n\t\t}\n\n\t\tsetServiceContext(fileName);\n\n\t\tif (!updateModeEnabled || (ddmStructure == null)) {\n\t\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\tuserId, groupId, parentDDMStructureKey,\n\t\t\t\tPortalUtil.getClassNameId(JournalArticle.class),\n\t\t\t\tgetKey(fileName), getMap(name), null, xsd,\n\t\t\t\tPropsUtil.get(PropsKeys.JOURNAL_ARTICLE_STORAGE_TYPE),\n\t\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\t\t}\n\t\telse {\n\t\t\tDDMStructure parentStructure =\n\t\t\t\tDDMStructureLocalServiceUtil.fetchStructure(\n\t\t\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\t\t\tparentDDMStructureKey);\n\n\t\t\tddmStructure = DDMStructureLocalServiceUtil.updateStructure(\n\t\t\t\tddmStructure.getStructureId(), parentStructure.getStructureId(),\n\t\t\t\tgetMap(name), null, xsd, serviceContext);\n\t\t}\n\n\t\taddDDMTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_JOURNAL_DDM_TEMPLATES_DIR_NAME + fileName);\n\n\t\tif (Validator.isNull(parentDDMStructureKey)) {\n\t\t\taddDDMStructures(\n\t\t\t\tddmStructure.getStructureKey(),\n\t\t\t\t_JOURNAL_DDM_STRUCTURES_DIR_NAME + fileName);\n\t\t}\n\t}","commit_id":"e22df879fdc6f07680cbfc2c4565a3a1821db4a5","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMTemplates(\n\t\t\tString ddmStructureKey, String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tString xsl = StringUtil.read(inputStream);\n\n\t\tsetServiceContext(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tddmStructureKey);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tgetKey(fileName));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tddmTemplate = DDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tddmStructure.getStructureId(), getKey(fileName), getMap(name), null,\n\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, null,\n\t\t\tgetDDMTemplateLanguage(fileName), replaceFileEntryURL(xsl), false,\n\t\t\tfalse, null, null, serviceContext);\n\n\t\taddJournalArticles(\n\t\t\tddmStructureKey, ddmTemplate.getTemplateKey(),\n\t\t\t_JOURNAL_ARTICLES_DIR_NAME + fileName);\n\t}","id":18286,"modified_method":"protected void addDDMTemplates(\n\t\t\tString ddmStructureKey, String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tString xsl = StringUtil.read(inputStream);\n\n\t\tsetServiceContext(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tddmStructureKey);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tgetKey(fileName));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!updateModeEnabled) {\n\t\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t\t}\n\t\t}\n\n\t\tif (!updateModeEnabled || (ddmTemplate == null)) {\n\t\t\tddmTemplate = DDMTemplateLocalServiceUtil.addTemplate(\n\t\t\t\tuserId, groupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\t\tddmStructure.getStructureId(), getKey(fileName), getMap(name),\n\t\t\t\tnull, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, null,\n\t\t\t\tgetDDMTemplateLanguage(fileName), replaceFileEntryURL(xsl),\n\t\t\t\tfalse, false, null, null, serviceContext);\n\t\t}\n\t\telse {\n\t\t\tddmTemplate = DDMTemplateLocalServiceUtil.updateTemplate(\n\t\t\t\tddmTemplate.getTemplateId(),\n\t\t\t\tPortalUtil.getClassNameId(DDMStructure.class), getMap(name),\n\t\t\t\tnull, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, null,\n\t\t\t\tgetDDMTemplateLanguage(fileName), replaceFileEntryURL(xsl),\n\t\t\t\tfalse, false, null, null, serviceContext);\n\t\t}\n\n\t\taddJournalArticles(\n\t\t\tddmStructureKey, ddmTemplate.getTemplateKey(),\n\t\t\t_JOURNAL_ARTICLES_DIR_NAME + fileName);\n\t}","commit_id":"e22df879fdc6f07680cbfc2c4565a3a1821db4a5","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addApplicationDisplayTemplate(\n\t\t\tString script, File file, long classNameId)\n\t\tthrows PortalException {\n\n\t\tString fileName = FileUtil.stripExtension(file.getName());\n\n\t\tString name = getName(fileName);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, classNameId, getKey(fileName));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, classNameId, 0, getKey(fileName), getMap(name),\n\t\t\tnull, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, StringPool.BLANK,\n\t\t\tgetDDMTemplateLanguage(name), script, false, false,\n\t\t\tStringPool.BLANK, null, serviceContext);\n\t}","id":18287,"modified_method":"protected void addApplicationDisplayTemplate(\n\t\t\tString script, File file, long classNameId)\n\t\tthrows PortalException {\n\n\t\tString fileName = FileUtil.stripExtension(file.getName());\n\n\t\tString name = getName(fileName);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, classNameId, getKey(fileName));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!updateModeEnabled) {\n\t\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t\t}\n\t\t}\n\n\t\tif (!updateModeEnabled || (ddmTemplate == null)) {\n\t\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\t\tuserId, groupId, classNameId, 0, getKey(fileName), getMap(name),\n\t\t\t\tnull, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY,\n\t\t\t\tStringPool.BLANK, getDDMTemplateLanguage(name), script, false,\n\t\t\t\tfalse, StringPool.BLANK, null, serviceContext);\n\t\t}\n\t\telse {\n\t\t\tDDMTemplateLocalServiceUtil.updateTemplate(\n\t\t\t\tddmTemplate.getTemplateId(), ddmTemplate.getClassPK(),\n\t\t\t\tgetMap(name), null, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY,\n\t\t\t\tStringPool.BLANK, getDDMTemplateLanguage(name), script, false,\n\t\t\t\tserviceContext);\n\t\t}\n\t}","commit_id":"e22df879fdc6f07680cbfc2c4565a3a1821db4a5","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMStructures(String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tgetKey(fileName));\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM structure with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t}\n\n\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, DDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID,\n\t\t\tPortalUtil.getClassNameId(DDLRecordSet.class), getKey(fileName),\n\t\t\tgetMap(name), null, StringUtil.read(inputStream),\n\t\t\tPropsUtil.get(PropsKeys.DYNAMIC_DATA_LISTS_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDLDisplayTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_DISPLAY_TEMPLATE_DIR_NAME, fileName);\n\n\t\taddDDLFormTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_FORM_TEMPLATE_DIR_NAME, fileName);\n\t}","id":18288,"modified_method":"protected void addDDMStructures(String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tgetKey(fileName));\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM structure with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!updateModeEnabled) {\n\t\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t\t}\n\t\t}\n\n\t\tif (!updateModeEnabled || (ddmStructure == null)) {\n\t\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\tuserId, groupId,\n\t\t\t\tDDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID,\n\t\t\t\tPortalUtil.getClassNameId(DDLRecordSet.class), getKey(fileName),\n\t\t\t\tgetMap(name), null, StringUtil.read(inputStream),\n\t\t\t\tPropsUtil.get(PropsKeys.DYNAMIC_DATA_LISTS_STORAGE_TYPE),\n\t\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\t\t}\n\t\telse {\n\t\t\tddmStructure = DDMStructureLocalServiceUtil.updateStructure(\n\t\t\t\tddmStructure.getStructureId(),\n\t\t\t\tDDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID, getMap(name),\n\t\t\t\tnull, StringUtil.read(inputStream), serviceContext);\n\t\t}\n\n\t\taddDDLDisplayTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_DISPLAY_TEMPLATE_DIR_NAME, fileName);\n\n\t\taddDDLFormTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_FORM_TEMPLATE_DIR_NAME, fileName);\n\t}","commit_id":"e22df879fdc6f07680cbfc2c4565a3a1821db4a5","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMTemplate(\n\t\t\tlong templateGroupId, long ddmStructureId, String fileName,\n\t\t\tString language, String script, String type, String mode)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.getShortFileName(fileName);\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tgetKey(fileName));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, templateGroupId,\n\t\t\tPortalUtil.getClassNameId(DDMStructure.class), ddmStructureId,\n\t\t\tgetKey(fileName), getMap(name), null, type, mode, language, script,\n\t\t\tfalse, false, StringPool.BLANK, null, serviceContext);\n\t}","id":18289,"modified_method":"protected void addDDMTemplate(\n\t\t\tlong templateGroupId, long ddmStructureId, String fileName,\n\t\t\tString language, String script, String type, String mode)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.getShortFileName(fileName);\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tgetKey(fileName));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!updateModeEnabled) {\n\t\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t\t}\n\t\t}\n\n\t\tif (!updateModeEnabled || (ddmTemplate == null)) {\n\t\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\t\tuserId, templateGroupId,\n\t\t\t\tPortalUtil.getClassNameId(DDMStructure.class), ddmStructureId,\n\t\t\t\tgetKey(fileName), getMap(name), null, type, mode, language,\n\t\t\t\tscript, false, false, StringPool.BLANK, null, serviceContext);\n\t\t}\n\t\telse {\n\t\t\tDDMTemplateLocalServiceUtil.updateTemplate(\n\t\t\t\tddmTemplate.getTemplateId(),\n\t\t\t\tPortalUtil.getClassNameId(DDMStructure.class), getMap(name),\n\t\t\t\tnull, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, null,\n\t\t\t\tlanguage, script, false, false, null, null, serviceContext);\n\t\t}\n\t}","commit_id":"e22df879fdc6f07680cbfc2c4565a3a1821db4a5","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\n  protected void configure() {\n    container.addSingleton(reactor);\n    container.addSingleton(new PropertiesConfiguration());\n    container.addSingleton(BootstrapSettings.class);\n    container.addSingleton(BatchPluginRepository.class);\n    container.addSingleton(ExtensionInstaller.class);\n    container.addSingleton(DryRun.class);\n    container.addSingleton(DryRunExporter.class);\n    container.addSingleton(Logback.class);\n    container.addSingleton(ServerClient.class);\n    container.addSingleton(ServerMetadata.class);\n    container.addSingleton(WsConnector.class);\n    container.addSingleton(Sonar.class);\n    container.addSingleton(TempDirectories.class);\n    container.addSingleton(HttpDownloader.class);\n    container.addSingleton(UriReader.class);\n    container.addSingleton(PluginDownloader.class);\n    container.addSingleton(EmailSettings.class);\n    container.addSingleton(I18nManager.class);\n    container.addSingleton(RuleI18nManager.class);\n    for (Object component : boostrapperComponents) {\n      if (component != null) {\n        container.addSingleton(component);\n      }\n    }\n    container.addSingleton(BootstrapExtensionExecutor.class);\n    if (!isMavenPluginExecutorRegistered()) {\n      container.addSingleton(FakeMavenPluginExecutor.class);\n    }\n    addDatabaseComponents();\n  }","id":18290,"modified_method":"@Override\n  protected void configure() {\n    container.addSingleton(reactor);\n    container.addSingleton(new PropertiesConfiguration());\n    container.addSingleton(BootstrapSettings.class);\n    container.addSingleton(BatchPluginRepository.class);\n    container.addSingleton(ExtensionInstaller.class);\n    container.addSingleton(DryRun.class);\n    container.addSingleton(Logback.class);\n    container.addSingleton(ServerClient.class);\n    container.addSingleton(ServerMetadata.class);\n    container.addSingleton(WsConnector.class);\n    container.addSingleton(Sonar.class);\n    container.addSingleton(TempDirectories.class);\n    container.addSingleton(HttpDownloader.class);\n    container.addSingleton(UriReader.class);\n    container.addSingleton(PluginDownloader.class);\n    container.addSingleton(EmailSettings.class);\n    container.addSingleton(I18nManager.class);\n    container.addSingleton(RuleI18nManager.class);\n    for (Object component : boostrapperComponents) {\n      if (component != null) {\n        container.addSingleton(component);\n      }\n    }\n    container.addSingleton(BootstrapExtensionExecutor.class);\n    if (!isMavenPluginExecutorRegistered()) {\n      container.addSingleton(FakeMavenPluginExecutor.class);\n    }\n    addDatabaseComponents();\n  }","commit_id":"e0603258d5ec0702a0a0610aa3b680c8c9a44b09","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public byte[] createDatabaseForDryRun(int resourceId) {\n    String name = serverFileSystem.getTempDir().getAbsolutePath() + \"db-\" + System.nanoTime();\n\n    try {\n      DataSource source = database.getDataSource();\n      BasicDataSource destination = create(DIALECT, DRIVER, USER, PASSWORD, URL + name);\n\n      copy(source, destination, resourceId);\n      close(destination);\n\n      return dbFileContent(name);\n    } catch (SQLException e) {\n      throw new SonarException(\"Unable to create database for dry run\", e);\n    }\n  }","id":18291,"modified_method":"public byte[] createDatabaseForDryRun(Integer resourceId) {\n    String name = serverFileSystem.getTempDir().getAbsolutePath() + \"db-\" + System.nanoTime();\n\n    try {\n      DataSource source = database.getDataSource();\n      BasicDataSource destination = create(DIALECT, DRIVER, USER, PASSWORD, URL + name);\n\n      copy(source, destination, resourceId);\n      close(destination);\n\n      return dbFileContent(name);\n    } catch (SQLException e) {\n      throw new SonarException(\"Unable to create database for dry run\", e);\n    }\n  }","commit_id":"e0603258d5ec0702a0a0610aa3b680c8c9a44b09","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void copy(DataSource source, DataSource dest, int resourceId) {\n    new DbTemplate()\n        .copyTable(source, dest, \"PROPERTIES\",\n            \"SELECT * FROM PROPERTIES WHERE (((USER_ID IS NULL) AND (RESOURCE_ID IS NULL)) OR (RESOURCE_ID='\" + resourceId +\n              \"')) AND NOT (PROP_KEY LIKE '%.secured')\")\n        .copyTable(source, dest, \"RULES_PROFILES\", \"SELECT * FROM RULES_PROFILES\")\n        .copyTable(source, dest, \"RULES\", \"SELECT * FROM RULES\")\n        .copyTable(source, dest, \"RULES_PARAMETERS\", \"SELECT * FROM RULES_PARAMETERS\")\n        .copyTable(source, dest, \"ACTIVE_RULES\", \"SELECT * FROM ACTIVE_RULES\")\n        .copyTable(source, dest, \"ACTIVE_RULE_PARAMETERS\", \"SELECT * FROM ACTIVE_RULE_PARAMETERS\")\n        .copyTable(source, dest, \"METRICS\", \"SELECT * FROM METRICS\")\n        .copyTable(source, dest, \"CHARACTERISTICS\", \"SELECT * FROM CHARACTERISTICS\")\n        .copyTable(source, dest, \"CHARACTERISTIC_PROPERTIES\", \"SELECT * FROM CHARACTERISTIC_PROPERTIES\")\n        .copyTable(source, dest, \"CHARACTERISTIC_EDGES\", \"SELECT * FROM CHARACTERISTIC_EDGES\")\n        .copyTable(source, dest, \"QUALITY_MODELS\", \"SELECT * FROM QUALITY_MODELS\");\n  }","id":18292,"modified_method":"private void copy(DataSource source, DataSource dest, Integer resourceId) {\n    String notSecured = \"NOT (PROP_KEY LIKE '%.secured')\";\n    String defaultProperty = \"((USER_ID IS NULL) AND (RESOURCE_ID IS NULL))\";\n    String projectProperty = (null == resourceId) ? \"\" : \" OR (RESOURCE_ID='\" + resourceId + \"')\";\n\n    new DbTemplate()\n        .copyTable(source, dest, \"ACTIVE_RULES\", \"SELECT * FROM ACTIVE_RULES\")\n        .copyTable(source, dest, \"ACTIVE_RULE_PARAMETERS\", \"SELECT * FROM ACTIVE_RULE_PARAMETERS\")\n        .copyTable(source, dest, \"CHARACTERISTICS\", \"SELECT * FROM CHARACTERISTICS\")\n        .copyTable(source, dest, \"CHARACTERISTIC_EDGES\", \"SELECT * FROM CHARACTERISTIC_EDGES\")\n        .copyTable(source, dest, \"CHARACTERISTIC_PROPERTIES\", \"SELECT * FROM CHARACTERISTIC_PROPERTIES\")\n        .copyTable(source, dest, \"METRICS\", \"SELECT * FROM METRICS\")\n        .copyTable(source, dest, \"PROPERTIES\", \"SELECT * FROM PROPERTIES WHERE \" + notSecured + \" AND (\" + defaultProperty + projectProperty + \")\")\n        .copyTable(source, dest, \"QUALITY_MODELS\", \"SELECT * FROM QUALITY_MODELS\")\n        .copyTable(source, dest, \"RULES\", \"SELECT * FROM RULES\")\n        .copyTable(source, dest, \"RULES_PARAMETERS\", \"SELECT * FROM RULES_PARAMETERS\")\n        .copyTable(source, dest, \"RULES_PROFILES\", \"SELECT * FROM RULES_PROFILES\");\n  }","commit_id":"e0603258d5ec0702a0a0610aa3b680c8c9a44b09","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void execute(SensorContext context) {\n    if (!dryRun.isEnabled()) {\n      return;\n    }\n\n    LOG.info(\"Exporting dry run results\");\n  }","id":18293,"modified_method":"public void execute(SensorContext context) {\n    if (!dryRun.isEnabled()) {\n      return;\n    }\n\n    LOG.info(\"Exporting dry run results\");\n\n    List<Map<String, ? extends Serializable>> results = Lists.newArrayList();\n\n    for (Resource resource : sonarIndex.getResources()) {\n      List<Violation> violations = sonarIndex.getViolations(ViolationQuery.create().forResource(resource));\n      for (Violation violation : violations) {\n        results.add(ImmutableMap.of(\n            \"resource\", violation.getResource().getKey(),\n            \"line\", violation.getLineId(),\n            \"message\", violation.getMessage()));\n\n      }\n    }\n\n    String json = new Gson().toJson(results);\n    System.out.println(json);\n  }","commit_id":"e0603258d5ec0702a0a0610aa3b680c8c9a44b09","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public DryRunExporter(DryRun dryRun) {\n    this.dryRun = dryRun;\n  }","id":18294,"modified_method":"public DryRunExporter(DryRun dryRun, DefaultIndex sonarIndex) {\n    this.dryRun = dryRun;\n    this.sonarIndex = sonarIndex;\n  }","commit_id":"e0603258d5ec0702a0a0610aa3b680c8c9a44b09","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() {\n    dryRunExporter = new DryRunExporter(dryRun);\n  }","id":18295,"modified_method":"@Before\n  public void setUp() {\n    dryRunExporter = new DryRunExporter(dryRun, sonarIndex);\n  }","commit_id":"e0603258d5ec0702a0a0610aa3b680c8c9a44b09","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_disable_if_no_dry_run() {\n    dryRunExporter.execute(sensorContext);\n\n    verifyZeroInteractions(sensorContext);\n  }","id":18296,"modified_method":"@Test\n  public void should_disable_if_no_dry_run() {\n    dryRunExporter.execute(sensorContext);\n\n    verifyZeroInteractions(sensorContext, sonarIndex);\n  }","commit_id":"e0603258d5ec0702a0a0610aa3b680c8c9a44b09","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void addProjectComponents() {\n    ProjectDefinition projectDefinition = container.getComponentByType(ProjectTree.class).getProjectDefinition(project);\n    container.addSingleton(projectDefinition);\n    container.addSingleton(project);\n    container.addSingleton(project.getConfiguration());\n    container.addSingleton(ProjectSettings.class);\n    container.addSingleton(UnsupportedProperties.class);\n\n    for (Object component : projectDefinition.getContainerExtensions()) {\n      container.addSingleton(component);\n    }\n    container.addSingleton(Languages.class);\n    container.addSingleton(DefaultProjectClasspath.class);\n    container.addSingleton(DefaultProjectFileSystem2.class);\n    container.addSingleton(RulesDao.class);\n\n    // the Snapshot component will be removed when asynchronous measures are improved (required for AsynchronousMeasureSensor)\n    container.addSingleton(container.getComponentByType(DefaultResourcePersister.class).getSnapshot(project));\n\n    container.addSingleton(TimeMachineConfiguration.class);\n    container.addSingleton(org.sonar.api.database.daos.MeasuresDao.class);\n    container.addSingleton(ProfilesDao.class);\n    container.addSingleton(DefaultSensorContext.class);\n    container.addSingleton(BatchExtensionDictionnary.class);\n    container.addSingleton(DefaultTimeMachine.class);\n    container.addSingleton(ViolationFilters.class);\n    container.addSingleton(ResourceFilters.class);\n    container.addSingleton(DefaultModelFinder.class);\n    container.addSingleton(DefaultProfileLoader.class);\n    container.addPicoAdapter(new ProfileProvider());\n  }","id":18297,"modified_method":"private void addProjectComponents() {\n    ProjectDefinition projectDefinition = container.getComponentByType(ProjectTree.class).getProjectDefinition(project);\n    container.addSingleton(projectDefinition);\n    container.addSingleton(project);\n    container.addSingleton(project.getConfiguration());\n    container.addSingleton(ProjectSettings.class);\n    container.addSingleton(UnsupportedProperties.class);\n\n    for (Object component : projectDefinition.getContainerExtensions()) {\n      container.addSingleton(component);\n    }\n    container.addSingleton(Languages.class);\n    container.addSingleton(DefaultProjectClasspath.class);\n    container.addSingleton(DefaultProjectFileSystem2.class);\n    container.addSingleton(RulesDao.class);\n\n    // the Snapshot component will be removed when asynchronous measures are improved (required for AsynchronousMeasureSensor)\n    container.addSingleton(container.getComponentByType(DefaultResourcePersister.class).getSnapshot(project));\n\n    container.addSingleton(TimeMachineConfiguration.class);\n    container.addSingleton(org.sonar.api.database.daos.MeasuresDao.class);\n    container.addSingleton(ProfilesDao.class);\n    container.addSingleton(DefaultSensorContext.class);\n    container.addSingleton(BatchExtensionDictionnary.class);\n    container.addSingleton(DefaultTimeMachine.class);\n    container.addSingleton(ViolationFilters.class);\n    container.addSingleton(ResourceFilters.class);\n    container.addSingleton(DefaultModelFinder.class);\n    container.addSingleton(DefaultProfileLoader.class);\n    container.addSingleton(DryRunExporter.class);\n    container.addPicoAdapter(new ProfileProvider());\n  }","commit_id":"e0603258d5ec0702a0a0610aa3b680c8c9a44b09","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void update(AnActionEvent e) {\n      e.getPresentation().setText(\"_Checkout...\", true);\n      RepositoryTreeNode node = getRepositoryBrowser().getSelectedNode();\n      if (node != null) {\n        DirectoryEntry entry = node.getSVNDirEntry();\n        e.getPresentation().setEnabled(entry == null || entry.getKind() == NodeKind.DIR);\n      } else {\n        e.getPresentation().setEnabled(false);\n      }\n    }","id":18298,"modified_method":"public void update(AnActionEvent e) {\n      e.getPresentation().setText(\"_Checkout...\", true);\n      setEnabled(e, getRepositoryBrowser().getSelectedNode());\n    }","commit_id":"69be4e24ffed087445d5485eb2ca34a8c8e7e1d8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void update(AnActionEvent e) {\n      RepositoryTreeNode node = getRepositoryBrowser().getSelectedNode();\n      e.getPresentation().setText(\"Compare With...\", true);\n      if (node != null) {\n        DirectoryEntry entry = node.getSVNDirEntry();\n        e.getPresentation().setEnabled(entry == null || entry.getKind() == NodeKind.DIR);\n      } else {\n        e.getPresentation().setEnabled(false);\n      }\n    }","id":18299,"modified_method":"public void update(AnActionEvent e) {\n      e.getPresentation().setText(\"Compare With...\", true);\n      setEnabled(e, getRepositoryBrowser().getSelectedNode());\n    }","commit_id":"69be4e24ffed087445d5485eb2ca34a8c8e7e1d8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void update(AnActionEvent e) {\n      e.getPresentation().setVisible(showImportAction());\n      e.getPresentation().setText(SvnBundle.message(\"repository.browser.import.action\"));\n      RepositoryTreeNode node = getRepositoryBrowser().getSelectedNode();\n      final boolean running = ProjectLevelVcsManager.getInstance(myProject).isBackgroundVcsOperationRunning();\n      if (node != null) {\n        DirectoryEntry entry = node.getSVNDirEntry();\n        e.getPresentation().setEnabled((entry == null || entry.getKind() == NodeKind.DIR) && (! running));\n      } else {\n        e.getPresentation().setEnabled(false);\n      }\n    }","id":18300,"modified_method":"public void update(AnActionEvent e) {\n      e.getPresentation().setVisible(showImportAction());\n      e.getPresentation().setText(SvnBundle.message(\"repository.browser.import.action\"));\n      setEnabled(e, getRepositoryBrowser().getSelectedNode(),\n                 ProjectLevelVcsManager.getInstance(myProject).isBackgroundVcsOperationRunning());\n    }","commit_id":"69be4e24ffed087445d5485eb2ca34a8c8e7e1d8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void update(AnActionEvent e) {\n      RepositoryTreeNode node = myBrowserComponent.getSelectedNode();\n      //e.getPresentation().setText(SvnBundle.message(\"repository.browser.new.folder.action\"), true);\n      if (node != null) {\n        DirectoryEntry entry = node.getSVNDirEntry();\n        e.getPresentation().setEnabled(entry == null || entry.getKind() == NodeKind.DIR);\n      } else {\n        e.getPresentation().setEnabled(false);\n      }\n    }","id":18301,"modified_method":"public void update(AnActionEvent e) {\n      //e.getPresentation().setText(SvnBundle.message(\"repository.browser.new.folder.action\"), true);\n      setEnabled(e, myBrowserComponent.getSelectedNode());\n    }","commit_id":"69be4e24ffed087445d5485eb2ca34a8c8e7e1d8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void writeMap(final Map map, final String comment) throws IOException {\r\n        this.seek(0);\r\n        writeLine(\"# \" + comment);\r\n        final Iterator iter = map.entrySet().iterator();\r\n        Map.Entry entry;\r\n        while (iter.hasNext()) {\r\n            entry = (Map.Entry) iter.next();\r\n            write(((String) entry.getKey()).getBytes());\r\n            write((byte) '=');\r\n           writeLine((String) entry.getValue());\r\n        }\r\n        writeLine(\"# EOF\");\r\n    }","id":18302,"modified_method":"public void writeMap(final Map map, final String comment) throws IOException {\r\n        this.seek(0);\r\n        final Iterator iter = map.entrySet().iterator();\r\n        Map.Entry entry;\r\n        StringBuffer sb = new StringBuffer(map.size() * 40);\r\n        sb.append(\"# \" + comment);\r\n        sb.append(cr);\r\n        sb.append(lf);\r\n        while (iter.hasNext()) {\r\n            entry = (Map.Entry) iter.next();\r\n            sb.append((String) entry.getKey());\r\n            sb.append('=');\r\n            sb.append((String) entry.getValue());\r\n            sb.append(cr);\r\n            sb.append(lf);\r\n        }\r\n        sb.append(\"# EOF\");\r\n        sb.append(cr);\r\n        sb.append(lf);\r\n        write(new String(sb).getBytes());\r\n    }","commit_id":"338047e056cc798ea1e0edb0a3b4fd1d1c06116f","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void writeProperties(final Properties props, final String comment) throws IOException {\r\n        this.seek(0);\r\n        writeLine(\"# \" + comment);\r\n        final Enumeration e = props.propertyNames();\r\n        String key, value;\r\n        while (e.hasMoreElements()) {\r\n            key = (String) e.nextElement();\r\n            value = props.getProperty(key, \"\");\r\n            write(key.getBytes());\r\n            write((byte) '=');\r\n            writeLine(value);\r\n        }\r\n        writeLine(\"# EOF\");\r\n    }","id":18303,"modified_method":"public void writeProperties(final Properties props, final String comment) throws IOException {\r\n        this.seek(0);\r\n        final Enumeration e = props.propertyNames();\r\n        String key, value;\r\n        StringBuffer sb = new StringBuffer(props.size() * 40);\r\n        sb.append(\"# \" + comment);\r\n        sb.append(cr);\r\n        sb.append(lf);\r\n        while (e.hasMoreElements()) {\r\n            key = (String) e.nextElement();\r\n            value = props.getProperty(key, \"\");\r\n            sb.append(key);\r\n            sb.append('=');\r\n            sb.append(value);\r\n            sb.append(cr);\r\n            sb.append(lf);\r\n        }\r\n        sb.append(\"# EOF\");\r\n        sb.append(cr);\r\n        sb.append(lf);\r\n        write(new String(sb).getBytes());\r\n    }","commit_id":"338047e056cc798ea1e0edb0a3b4fd1d1c06116f","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public Map readMap() throws IOException {\r\n        this.seek(0);\r\n        final TreeMap map = new TreeMap();\r\n        String line;\r\n        int pos;\r\n        while ((line = readLine()) != null) { // very slow readLine????\r\n            line = line.trim();\r\n            if (line.equals(\"# EOF\")) return map;\r\n            if ((line.length() == 0) || (line.charAt(0) == '#')) continue;\r\n            pos = line.indexOf(\"=\");\r\n            if (pos < 0) continue;\r\n            map.put(line.substring(0, pos), line.substring(pos + 1));\r\n        }\r\n        return map;\r\n    }","id":18304,"modified_method":"public Map readMap() throws IOException {\r\n        this.seek(0);\r\n        byte[] b = readFully();\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(b)));\r\n        final TreeMap map = new TreeMap();\r\n        String line;\r\n        int pos;\r\n        while ((line = br.readLine()) != null) { // very slow readLine????\r\n            line = line.trim();\r\n            if (line.equals(\"# EOF\")) return map;\r\n            if ((line.length() == 0) || (line.charAt(0) == '#')) continue;\r\n            pos = line.indexOf(\"=\");\r\n            if (pos < 0) continue;\r\n            map.put(line.substring(0, pos), line.substring(pos + 1));\r\n        }\r\n        return map;\r\n    }","commit_id":"af098b815c2042bb0e8af87abc60f457c5f93ab1","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void writeMap(final Map map, final String comment) throws IOException {\r\n        this.seek(0);\r\n        writeLine(\"# \" + comment);\r\n        final Iterator iter = map.entrySet().iterator();\r\n        Map.Entry entry;\r\n        while (iter.hasNext()) {\r\n            entry = (Map.Entry) iter.next();\r\n            write(((String) entry.getKey()).getBytes());\r\n            write((byte) '=');\r\n            writeLine((String) entry.getValue());\r\n        }\r\n        writeLine(\"# EOF\");\r\n    }","id":18305,"modified_method":"public void writeMap(final Map map, final String comment) throws IOException {\r\n        this.seek(0);\r\n        final Iterator iter = map.entrySet().iterator();\r\n        Map.Entry entry;\r\n        serverByteBuffer bb = new serverByteBuffer(map.size() * 40);\r\n        bb.append(\"# \" + comment);\r\n        bb.append(cr);\r\n        bb.append(lf);\r\n        while (iter.hasNext()) {\r\n            entry = (Map.Entry) iter.next();\r\n            bb.append((String) entry.getKey());\r\n            bb.append('=');\r\n            bb.append((String) entry.getValue());\r\n            bb.append(cr);\r\n            bb.append(lf);\r\n        }\r\n        bb.append(\"# EOF\");\r\n        bb.append(cr);\r\n        bb.append(lf);\r\n        write(bb.getBytes());\r\n    }","commit_id":"af098b815c2042bb0e8af87abc60f457c5f93ab1","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n     * @return string containing value of title,category,content and extract of XWiki.ArticleClass\n     */\n    private String getContentAsText(XWikiDocument doc, XWikiContext context)\n    {\n        StringBuffer contentText = new StringBuffer();\n        try {\n            LOG.info(doc.getFullName());\n            Map objects = doc.getxWikiObjects();\n            Iterator itKey = objects.keySet().iterator();\n            while (itKey.hasNext()) {\n                String className = (String) itKey.next();\n                Iterator itObj = doc.getObjects(className).iterator();\n                while (itObj.hasNext()) {\n                    extractContent(contentText, (BaseObject) itObj.next(), context);\n                }\n            }\n        } catch (Exception e) {\n            LOG.error(\"error getting content from  XWiki Objects \", e);\n            e.printStackTrace();\n        }\n        return contentText.toString();\n    }","id":18306,"modified_method":"/**\n     * @return string containing value of title,category,content and extract of XWiki.ArticleClass\n     */\n    private String getContentAsText(XWikiDocument doc, XWikiContext context)\n    {\n        StringBuffer contentText = new StringBuffer();\n        try {\n            LOG.info(doc.getFullName());\n            for (String className : doc.getxWikiObjects().keySet()) {\n                for (BaseObject obj : doc.getObjects(className)) {\n                    extractContent(contentText, obj, context);\n                }\n            }\n        } catch (Exception e) {\n            LOG.error(\"error getting content from  XWiki Objects \", e);\n            e.printStackTrace();\n        }\n        return contentText.toString();\n    }","commit_id":"890b49503861ea0618d98c5c0cd310faebc879a1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void addDataToLuceneDocument(org.apache.lucene.document.Document luceneDoc,\n        XWikiDocument doc,\n        XWikiContext context)\n    {\n\n        super.addDataToLuceneDocument(luceneDoc, doc, context);\n        Map objects = doc.getxWikiObjects();\n        String className;\n        Iterator itObj;\n        BaseObject baseObject;\n        for (Iterator itr = objects.keySet().iterator(); itr.hasNext();) {\n            className = (String) itr.next();\n            itObj = doc.getObjects(className).iterator();\n\n            while (itObj.hasNext()) {\n                baseObject = (BaseObject) itObj.next();\n                if (baseObject != null) {\n                    Object[] propertyNames = baseObject.getPropertyNames();\n                    for (int i = 0; i < propertyNames.length; i++) {\n                        try {\n                            indexProperty(luceneDoc, baseObject, (String) propertyNames[i],\n                                context);\n                        } catch (Exception e) {\n                            LOG.error(\"error extracting fulltext for document \" + this, e);\n                        }\n                    }\n                }\n            }\n        }\n    }","id":18307,"modified_method":"public void addDataToLuceneDocument(org.apache.lucene.document.Document luceneDoc,\n        XWikiDocument doc, XWikiContext context)\n    {\n        super.addDataToLuceneDocument(luceneDoc, doc, context);\n        for (String className : doc.getxWikiObjects().keySet()) {\n            for (BaseObject obj : doc.getObjects(className)) {\n                if (obj != null) {\n                    Object[] propertyNames = obj.getPropertyNames();\n                    for (int i = 0; i < propertyNames.length; i++) {\n                        try {\n                            indexProperty(luceneDoc, obj, (String) propertyNames[i],\n                                context);\n                        } catch (Exception e) {\n                            LOG.error(\"error extracting fulltext for document \" + this, e);\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"890b49503861ea0618d98c5c0cd310faebc879a1","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void addDataToLuceneDocument(org.apache.lucene.document.Document luceneDoc,\n        XWikiDocument doc,\n        XWikiContext context)\n    {\n\n        super.addDataToLuceneDocument(luceneDoc, doc, context);\n        Map objects = doc.getxWikiObjects();\n        String className;\n        Iterator itObj;\n        BaseObject baseObject;\n        for (Iterator itr = objects.keySet().iterator(); itr.hasNext();) {\n            className = (String) itr.next();\n            itObj = doc.getObjects(className).iterator();\n\n            while (itObj.hasNext()) {\n                baseObject = (BaseObject) itObj.next();\n                if (baseObject != null) {\n                    Object[] propertyNames = baseObject.getPropertyNames();\n                    for (int i = 0; i < propertyNames.length; i++) {\n                        try {\n                            indexProperty(luceneDoc, baseObject, (String) propertyNames[i],\n                                context);\n                        } catch (Exception e) {\n                            LOG.error(\"error extracting fulltext for document \" + this, e);\n                        }\n                    }\n                }\n            }\n        }\n    }","id":18308,"modified_method":"public void addDataToLuceneDocument(org.apache.lucene.document.Document luceneDoc,\n        XWikiDocument doc, XWikiContext context)\n    {\n        super.addDataToLuceneDocument(luceneDoc, doc, context);\n        for (String className : doc.getxWikiObjects().keySet()) {\n            for (BaseObject obj : doc.getObjects(className)) {\n                if (obj != null) {\n                    Object[] propertyNames = obj.getPropertyNames();\n                    for (int i = 0; i < propertyNames.length; i++) {\n                        try {\n                            indexProperty(luceneDoc, obj, (String) propertyNames[i],\n                                context);\n                        } catch (Exception e) {\n                            LOG.error(\"error extracting fulltext for document \" + this, e);\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"054f63b54e33bd93b19fc6277292becf3af20c52","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @return string containing value of title,category,content and extract of XWiki.ArticleClass\n     */\n    private String getContentAsText(XWikiDocument doc, XWikiContext context)\n    {\n        StringBuffer contentText = new StringBuffer();\n        try {\n            LOG.info(doc.getFullName());\n            Map objects = doc.getxWikiObjects();\n            Iterator itKey = objects.keySet().iterator();\n            while (itKey.hasNext()) {\n                String className = (String) itKey.next();\n                Iterator itObj = doc.getObjects(className).iterator();\n                while (itObj.hasNext()) {\n                    extractContent(contentText, (BaseObject) itObj.next(), context);\n                }\n            }\n        } catch (Exception e) {\n            LOG.error(\"error getting content from  XWiki Objects \", e);\n            e.printStackTrace();\n        }\n        return contentText.toString();\n    }","id":18309,"modified_method":"/**\n     * @return string containing value of title,category,content and extract of XWiki.ArticleClass\n     */\n    private String getContentAsText(XWikiDocument doc, XWikiContext context)\n    {\n        StringBuffer contentText = new StringBuffer();\n        try {\n            LOG.info(doc.getFullName());\n            for (String className : doc.getxWikiObjects().keySet()) {\n                for (BaseObject obj : doc.getObjects(className)) {\n                    extractContent(contentText, obj, context);\n                }\n            }\n        } catch (Exception e) {\n            LOG.error(\"error getting content from  XWiki Objects \", e);\n            e.printStackTrace();\n        }\n        return contentText.toString();\n    }","commit_id":"054f63b54e33bd93b19fc6277292becf3af20c52","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"Neo4jJmx( int instanceId )\n    {\n        StringBuilder identifier = new StringBuilder( \"org.neo4j:\" );\n        identifier.append( \"instance=kernel#\" );\n        identifier.append( instanceId );\n        identifier.append( \",name=\" );\n        identifier.append( getName( getClass() ) );\n        try\n        {\n            objectName = new ObjectName( identifier.toString() );\n        }\n        catch ( MalformedObjectNameException e )\n        {\n            throw new IllegalArgumentException( e );\n        }\n    }","id":18310,"modified_method":"Neo4jJmx( int instanceId )\n    {\n        ObjectName name = null;\n        for ( Class<?> beanType : getClass().getInterfaces() )\n        {\n            name = getObjectName( instanceId, beanType, getClass() );\n        }\n        if ( name == null )\n        {\n            throw new IllegalArgumentException( \"\" );\n        }\n        objectName = name;\n    }","commit_id":"8b9128f0c1e480525d225d9b8efcaedc5b73049e","url":"https://github.com/neo4j/neo4j"},{"original_method":"Neo4jJmx( int instanceId )\n    {\n        StringBuilder identifier = new StringBuilder( \"org.neo4j:\" );\n        identifier.append( \"instance=kernel#\" );\n        identifier.append( instanceId );\n        identifier.append( \",name=\" );\n        identifier.append( getName( getClass() ) );\n        try\n        {\n            objectName = new ObjectName( identifier.toString() );\n        }\n        catch ( MalformedObjectNameException e )\n        {\n            throw new IllegalArgumentException( e );\n        }\n    }","id":18311,"modified_method":"Neo4jJmx( int instanceId )\n    {\n        ObjectName name = null;\n        for ( Class<?> beanType : getClass().getInterfaces() )\n        {\n            name = getObjectName( instanceId, beanType, getClass() );\n        }\n        if ( name == null )\n        {\n            throw new IllegalArgumentException( \"\" );\n        }\n        objectName = name;\n    }","commit_id":"91213379cde7c23277724684d357eda98efe6449","url":"https://github.com/neo4j/neo4j"},{"original_method":"Neo4jJmx( int instanceId )\n    {\n        StringBuilder identifier = new StringBuilder( \"org.neo4j:\" );\n        identifier.append( \"instance=kernel#\" );\n        identifier.append( instanceId );\n        identifier.append( \",name=\" );\n        identifier.append( getName( getClass() ) );\n        try\n        {\n            objectName = new ObjectName( identifier.toString() );\n        }\n        catch ( MalformedObjectNameException e )\n        {\n            throw new IllegalArgumentException( e );\n        }\n    }","id":18312,"modified_method":"Neo4jJmx( int instanceId )\n    {\n        ObjectName name = null;\n        for ( Class<?> beanType : getClass().getInterfaces() )\n        {\n            name = getObjectName( instanceId, beanType, getClass() );\n        }\n        if ( name == null )\n        {\n            throw new IllegalArgumentException( \"\" );\n        }\n        objectName = name;\n    }","commit_id":"fae8aaf21cc3823cb097ee8b1a15cb0b519cf6cb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        Category log = ThreadCategory.getInstance();\n        PollStatus status = null;\n\n        try {\n            MailTransportParameters mailParms = MailTransportParameters.get(parameters);\n            if (\"${ipaddr}\".equals(mailParms.getReadTestHost())) {\n                mailParms.setReadTestHost(svc.getIpAddr());\n            }\n            if (\"${ipaddr}\".equals(mailParms.getSendTestHost())) {\n                mailParms.setSendTestHost(svc.getIpAddr());\n            }\n            \n            parseJavaMailProperties(mailParms);\n            status = doMailTest(mailParms);\n        } catch (Exception e) {\n            log.error(\"poll, Exception from mailer: \", e);\n            status = PollStatus.down(\"Exception from mailer: \" + e.getLocalizedMessage());\n        }\n\n        return status;\n    }","id":18313,"modified_method":"@Override\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        Category log = ThreadCategory.getInstance();\n        PollStatus status = null;\n\n        try {\n            MailTransportParameters mailParms = MailTransportParameters.get(parameters);\n            \n            try {\n                if (\"${ipaddr}\".equals(mailParms.getReadTestHost())) {\n                mailParms.setReadTestHost(svc.getIpAddr());\n                }\n            } catch (IllegalStateException ise) {\n                //just ignore, don't have to have a both a read and send test configured\n            }\n\n            try {\n                if (\"${ipaddr}\".equals(mailParms.getSendTestHost())) {\n                    mailParms.setSendTestHost(svc.getIpAddr());\n                }\n            } catch (IllegalStateException ise) {\n                //just ignore, don't have to have a both a read and send test configured\n            }\n            \n            parseJavaMailProperties(mailParms);\n            status = doMailTest(mailParms);\n        } catch (IllegalStateException ise) {\n            //ignore this because we don't have to have both a send and read\n            \n        } catch (Exception e) {\n            log.error(\"poll, Exception from mailer: \", e);\n            status = PollStatus.down(\"Exception from mailer: \" + e.getLocalizedMessage());\n        }\n\n        return status;\n    }","commit_id":"fdbb8c840c9a7467210712b2610136b1ada08144","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void parseJavaMailProperties(final MailTransportParameters mailParms) {\n        \n        List<JavamailProperty> propertyList = mailParms.getReadTest().getJavamailPropertyCollection();\n        propertyList.addAll(mailParms.getSendTest().getJavamailPropertyCollection());\n        Properties props = mailParms.getJavamailProperties();\n        \n        for (JavamailProperty property : propertyList) {\n            props.setProperty(property.getName(), property.getValue());\n        }\n        \n        mailParms.setJavamailProperties(props);\n    }","id":18314,"modified_method":"private void parseJavaMailProperties(final MailTransportParameters mailParms) {\n        \n        ReadmailTest readTest = mailParms.getReadTest();\n\n        List<JavamailProperty> propertyList = new ArrayList<JavamailProperty>();\n        if (readTest != null) {\n            propertyList = readTest.getJavamailPropertyCollection();\n        }\n\n        SendmailTest sendTest = mailParms.getSendTest();\n        if (sendTest != null) {\n            List<JavamailProperty> sendTestProperties = sendTest.getJavamailPropertyCollection();\n            propertyList.addAll(sendTestProperties);\n        }\n        \n        Properties props = mailParms.getJavamailProperties();\n        for (JavamailProperty property : propertyList) {\n            props.setProperty(property.getName(), property.getValue());\n        }\n        \n        mailParms.setJavamailProperties(props);\n    }","commit_id":"fdbb8c840c9a7467210712b2610136b1ada08144","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void parseJavaMailProperties(final MailTransportParameters mailParms) {\n        \n        List<JavamailProperty> propertyList = mailParms.getReadTest().getJavamailPropertyCollection();\n        propertyList.addAll(mailParms.getSendTest().getJavamailPropertyCollection());\n        Properties props = mailParms.getJavamailProperties();\n        \n        for (JavamailProperty property : propertyList) {\n            props.setProperty(property.getName(), property.getValue());\n        }\n        \n        mailParms.setJavamailProperties(props);\n    }","id":18315,"modified_method":"private void parseJavaMailProperties(final MailTransportParameters mailParms) {\n        \n        ReadmailTest readTest = mailParms.getReadTest();\n\n        List<JavamailProperty> propertyList = new ArrayList<JavamailProperty>();\n        if (readTest != null) {\n            propertyList = readTest.getJavamailPropertyCollection();\n        }\n\n        SendmailTest sendTest = mailParms.getSendTest();\n        if (sendTest != null) {\n            List<JavamailProperty> sendTestProperties = sendTest.getJavamailPropertyCollection();\n            propertyList.addAll(sendTestProperties);\n        }\n        \n        Properties props = mailParms.getJavamailProperties();\n        for (JavamailProperty property : propertyList) {\n            props.setProperty(property.getName(), property.getValue());\n        }\n        \n        mailParms.setJavamailProperties(props);\n    }","commit_id":"06a9c87906cedd4b4e5924eb077c407f70778b94","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        Category log = ThreadCategory.getInstance();\n        PollStatus status = null;\n\n        try {\n            MailTransportParameters mailParms = MailTransportParameters.get(parameters);\n            if (\"${ipaddr}\".equals(mailParms.getReadTestHost())) {\n                mailParms.setReadTestHost(svc.getIpAddr());\n            }\n            if (\"${ipaddr}\".equals(mailParms.getSendTestHost())) {\n                mailParms.setSendTestHost(svc.getIpAddr());\n            }\n            \n            parseJavaMailProperties(mailParms);\n            status = doMailTest(mailParms);\n        } catch (Exception e) {\n            log.error(\"poll, Exception from mailer: \", e);\n            status = PollStatus.down(\"Exception from mailer: \" + e.getLocalizedMessage());\n        }\n\n        return status;\n    }","id":18316,"modified_method":"@Override\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        Category log = ThreadCategory.getInstance();\n        PollStatus status = null;\n\n        try {\n            MailTransportParameters mailParms = MailTransportParameters.get(parameters);\n            \n            try {\n                if (\"${ipaddr}\".equals(mailParms.getReadTestHost())) {\n                mailParms.setReadTestHost(svc.getIpAddr());\n                }\n            } catch (IllegalStateException ise) {\n                //just ignore, don't have to have a both a read and send test configured\n            }\n\n            try {\n                if (\"${ipaddr}\".equals(mailParms.getSendTestHost())) {\n                    mailParms.setSendTestHost(svc.getIpAddr());\n                }\n            } catch (IllegalStateException ise) {\n                //just ignore, don't have to have a both a read and send test configured\n            }\n            \n            parseJavaMailProperties(mailParms);\n            status = doMailTest(mailParms);\n        } catch (IllegalStateException ise) {\n            //ignore this because we don't have to have both a send and read\n            \n        } catch (Exception e) {\n            log.error(\"poll, Exception from mailer: \", e);\n            status = PollStatus.down(\"Exception from mailer: \" + e.getLocalizedMessage());\n        }\n\n        return status;\n    }","commit_id":"06a9c87906cedd4b4e5924eb077c407f70778b94","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        Category log = ThreadCategory.getInstance();\n        PollStatus status = null;\n\n        try {\n            MailTransportParameters mailParms = MailTransportParameters.get(parameters);\n            if (\"${ipaddr}\".equals(mailParms.getReadTestHost())) {\n                mailParms.setReadTestHost(svc.getIpAddr());\n            }\n            if (\"${ipaddr}\".equals(mailParms.getSendTestHost())) {\n                mailParms.setSendTestHost(svc.getIpAddr());\n            }\n            \n            parseJavaMailProperties(mailParms);\n            status = doMailTest(mailParms);\n        } catch (Exception e) {\n            log.error(\"poll, Exception from mailer: \", e);\n            status = PollStatus.down(\"Exception from mailer: \" + e.getLocalizedMessage());\n        }\n\n        return status;\n    }","id":18317,"modified_method":"@Override\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        Category log = ThreadCategory.getInstance();\n        PollStatus status = null;\n\n        try {\n            MailTransportParameters mailParms = MailTransportParameters.get(parameters);\n            \n            try {\n                if (\"${ipaddr}\".equals(mailParms.getReadTestHost())) {\n                mailParms.setReadTestHost(svc.getIpAddr());\n                }\n            } catch (IllegalStateException ise) {\n                //just ignore, don't have to have a both a read and send test configured\n            }\n\n            try {\n                if (\"${ipaddr}\".equals(mailParms.getSendTestHost())) {\n                    mailParms.setSendTestHost(svc.getIpAddr());\n                }\n            } catch (IllegalStateException ise) {\n                //just ignore, don't have to have a both a read and send test configured\n            }\n            \n            parseJavaMailProperties(mailParms);\n            status = doMailTest(mailParms);\n        } catch (IllegalStateException ise) {\n            //ignore this because we don't have to have both a send and read\n            \n        } catch (Exception e) {\n            log.error(\"poll, Exception from mailer: \", e);\n            status = PollStatus.down(\"Exception from mailer: \" + e.getLocalizedMessage());\n        }\n\n        return status;\n    }","commit_id":"6e030aeb21366fb5791599da0c7841a09eee8782","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void parseJavaMailProperties(final MailTransportParameters mailParms) {\n        \n        List<JavamailProperty> propertyList = mailParms.getReadTest().getJavamailPropertyCollection();\n        propertyList.addAll(mailParms.getSendTest().getJavamailPropertyCollection());\n        Properties props = mailParms.getJavamailProperties();\n        \n        for (JavamailProperty property : propertyList) {\n            props.setProperty(property.getName(), property.getValue());\n        }\n        \n        mailParms.setJavamailProperties(props);\n    }","id":18318,"modified_method":"private void parseJavaMailProperties(final MailTransportParameters mailParms) {\n        \n        ReadmailTest readTest = mailParms.getReadTest();\n\n        List<JavamailProperty> propertyList = new ArrayList<JavamailProperty>();\n        if (readTest != null) {\n            propertyList = readTest.getJavamailPropertyCollection();\n        }\n\n        SendmailTest sendTest = mailParms.getSendTest();\n        if (sendTest != null) {\n            List<JavamailProperty> sendTestProperties = sendTest.getJavamailPropertyCollection();\n            propertyList.addAll(sendTestProperties);\n        }\n        \n        Properties props = mailParms.getJavamailProperties();\n        for (JavamailProperty property : propertyList) {\n            props.setProperty(property.getName(), property.getValue());\n        }\n        \n        mailParms.setJavamailProperties(props);\n    }","commit_id":"6e030aeb21366fb5791599da0c7841a09eee8782","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        validator.validate(operation);\n\n        ModelNode opAddr = operation.get(OP_ADDR);\n        PathAddress address = PathAddress.pathAddress(opAddr);\n        String name = address.getLastElement().getValue();\n        String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;\n\n        final byte[] hash;\n        // clone it, so we can modify it to our own content\n        final ModelNode content = operation.require(CONTENT).clone();\n        // TODO: JBAS-9020: for the moment overlays are not supported, so there is a single content item\n        final DeploymentHandlerUtil.ContentItem contentItem;\n        final ModelNode contentItemNode = content.require(0);\n        if (contentItemNode.hasDefined(HASH)) {\n            hash = contentItemNode.require(HASH).asBytes();\n            if (!contentRepository.hasContent(hash))\n                throw createFailureException(\"No deployment content with hash %s is available in the deployment content repository.\", HashUtil.bytesToHexString(hash));\n            contentItem = new DeploymentHandlerUtil.ContentItem(hash);\n        } else if (hasValidContentAdditionParameterDefined(contentItemNode)) {\n            InputStream in = getInputStream(context, contentItemNode);\n            try {\n                try {\n                    hash = contentRepository.addContent(in);\n                } catch (IOException e) {\n                    throw createFailureException(e.toString());\n                }\n\n            } finally {\n                StreamUtils.safeClose(in);\n            }\n            contentItemNode.get(HASH).set(hash);\n            // TODO: remove the content addition stuff?\n            contentItem = new DeploymentHandlerUtil.ContentItem(hash);\n        } else {\n            final String path = contentItemNode.require(PATH).asString();\n            final String relativeTo = asString(contentItemNode, RELATIVE_TO);\n            final boolean archive = contentItemNode.require(ARCHIVE).asBoolean();\n            contentItem = new DeploymentHandlerUtil.ContentItem(path, relativeTo, archive);\n        }\n\n        ModelNode subModel = context.getSubModel();\n        subModel.get(NAME).set(name);\n        subModel.get(RUNTIME_NAME).set(runtimeName);\n        // content is a clone\n        subModel.get(CONTENT).set(content);\n        subModel.get(ENABLED).set(operation.has(ENABLED) && operation.get(ENABLED).asBoolean()); // TODO consider starting\n        if (context.getRuntimeContext() != null && subModel.get(ENABLED).asBoolean()) {\n            DeploymentHandlerUtil.deploy(context, name, runtimeName, resultHandler, contentItem);\n        } else {\n            resultHandler.handleResultComplete();\n        }\n        return new BasicOperationResult(Util.getResourceRemoveOperation(operation.get(OP_ADDR)));\n    }","id":18319,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        validator.validate(operation);\n\n        ModelNode opAddr = operation.get(OP_ADDR);\n        PathAddress address = PathAddress.pathAddress(opAddr);\n        String name = address.getLastElement().getValue();\n        String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;\n\n        final byte[] hash;\n        // clone it, so we can modify it to our own content\n        final ModelNode content = operation.require(CONTENT).clone();\n        // TODO: JBAS-9020: for the moment overlays are not supported, so there is a single content item\n        final DeploymentHandlerUtil.ContentItem contentItem;\n        final ModelNode contentItemNode = content.require(0);\n        if (contentItemNode.hasDefined(HASH)) {\n            managedContentValidator.validate(contentItemNode);\n            hash = contentItemNode.require(HASH).asBytes();\n            if (!contentRepository.hasContent(hash))\n                throw createFailureException(\"No deployment content with hash %s is available in the deployment content repository.\", HashUtil.bytesToHexString(hash));\n            contentItem = new DeploymentHandlerUtil.ContentItem(hash);\n        } else if (hasValidContentAdditionParameterDefined(contentItemNode)) {\n            InputStream in = getInputStream(context, contentItemNode);\n            try {\n                try {\n                    hash = contentRepository.addContent(in);\n                } catch (IOException e) {\n                    throw createFailureException(e.toString());\n                }\n\n            } finally {\n                StreamUtils.safeClose(in);\n            }\n            contentItemNode.get(HASH).set(hash);\n            // TODO: remove the content addition stuff?\n            contentItem = new DeploymentHandlerUtil.ContentItem(hash);\n        } else {\n            unmanagedContentValidator.validate(contentItemNode);\n            final String path = contentItemNode.require(PATH).asString();\n            final String relativeTo = asString(contentItemNode, RELATIVE_TO);\n            final boolean archive = contentItemNode.require(ARCHIVE).asBoolean();\n            contentItem = new DeploymentHandlerUtil.ContentItem(path, relativeTo, archive);\n        }\n\n        ModelNode subModel = context.getSubModel();\n        subModel.get(NAME).set(name);\n        subModel.get(RUNTIME_NAME).set(runtimeName);\n        // content is a clone\n        subModel.get(CONTENT).set(content);\n        subModel.get(ENABLED).set(operation.has(ENABLED) && operation.get(ENABLED).asBoolean()); // TODO consider starting\n        if (context.getRuntimeContext() != null && subModel.get(ENABLED).asBoolean()) {\n            DeploymentHandlerUtil.deploy(context, name, runtimeName, resultHandler, contentItem);\n        } else {\n            resultHandler.handleResultComplete();\n        }\n        return new BasicOperationResult(Util.getResourceRemoveOperation(operation.get(OP_ADDR)));\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"public DeploymentAddHandler(final ContentRepository contentRepository) {\n        this.contentRepository = contentRepository;\n        this.validator.registerValidator(RUNTIME_NAME, new StringLengthValidator(1, Integer.MAX_VALUE, true, false));\n        this.validator.registerValidator(ENABLED, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        final ParametersValidator contentValidator = new ParametersValidator();\n        // existing managed content\n        contentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES, true));\n        // existing unmanaged content\n        contentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        contentValidator.registerValidator(PATH, new ModelTypeValidator(ModelType.STRING, true));\n        contentValidator.registerValidator(RELATIVE_TO, new ModelTypeValidator(ModelType.STRING, true));\n        // content additions\n        contentValidator.registerValidator(INPUT_STREAM_INDEX, new ModelTypeValidator(ModelType.INT, true));\n        contentValidator.registerValidator(BYTES, new ModelTypeValidator(ModelType.BYTES, true));\n        contentValidator.registerValidator(URL, new StringLengthValidator(1, true));\n        this.validator.registerValidator(CONTENT, chain(new ListValidator(new ParametersOfValidator(contentValidator)),\n                new AbstractParameterValidator() {\n                    @Override\n                    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n                        validateOnePieceOfContent(value);\n                    }\n                }));\n    }","id":18320,"modified_method":"public DeploymentAddHandler(final ContentRepository contentRepository) {\n        this.contentRepository = contentRepository;\n        this.validator.registerValidator(RUNTIME_NAME, new StringLengthValidator(1, Integer.MAX_VALUE, true, false));\n        this.validator.registerValidator(ENABLED, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        final ParametersValidator contentValidator = new ParametersValidator();\n        // existing managed content\n        contentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES, true));\n        // existing unmanaged content\n        contentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        contentValidator.registerValidator(PATH, new StringLengthValidator(1, true));\n        contentValidator.registerValidator(RELATIVE_TO, new ModelTypeValidator(ModelType.STRING, true));\n        // content additions\n        contentValidator.registerValidator(INPUT_STREAM_INDEX, new ModelTypeValidator(ModelType.INT, true));\n        contentValidator.registerValidator(BYTES, new ModelTypeValidator(ModelType.BYTES, true));\n        contentValidator.registerValidator(URL, new StringLengthValidator(1, true));\n        this.validator.registerValidator(CONTENT, chain(new ListValidator(new ParametersOfValidator(contentValidator)),\n                new AbstractParameterValidator() {\n                    @Override\n                    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n                        validateOnePieceOfContent(value);\n                    }\n                }));\n        this.managedContentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES));\n        this.unmanagedContentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN));\n        this.unmanagedContentValidator.registerValidator(PATH, new StringLengthValidator(1));\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        validator.validate(operation);\n\n        ModelNode opAddr = operation.get(OP_ADDR);\n        PathAddress address = PathAddress.pathAddress(opAddr);\n        String name = address.getLastElement().getValue();\n        String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;\n\n        byte[] hash;\n        // clone it, so we can modify it to our own content\n        final ModelNode content = operation.require(CONTENT).clone();\n        // TODO: JBAS-9020: for the moment overlays are not supported, so there is a single content item\n        final ModelNode contentItemNode = content.require(0);\n        if (contentItemNode.hasDefined(HASH)) {\n            hash = contentItemNode.require(HASH).asBytes();\n            if (!contentRepository.hasContent(hash))\n                throw createFailureException(\"No deployment content with hash %s is available in the deployment content repository.\", HashUtil.bytesToHexString(hash));\n        } else if (hasValidContentAdditionParameterDefined(contentItemNode)) {\n            if (!isMaster) {\n                // This is a slave DC. We can't handle this operation; it should have been fixed up on the master DC\n                throw createFailureException(\"A slave domain controller cannot accept deployment content uploads\");\n            }\n\n            InputStream in = getInputStream(context, contentItemNode);\n            try {\n                try {\n                    hash = contentRepository.addContent(in);\n                } catch (IOException e) {\n                    throw createFailureException(e.toString());\n                }\n\n            } finally {\n                StreamUtils.safeClose(in);\n            }\n            contentItemNode.get(HASH).set(hash);\n        } else {\n            // TODO: handle unmanaged content, the user is responsible for replication\n//            final String path = contentItemNode.require(PATH).asString();\n//            final String relativeTo = asString(contentItemNode, RELATIVE_TO);\n//            final boolean archive = contentItemNode.require(ARCHIVE).asBoolean();\n//            contentItem = new DeploymentHandlerUtil.ContentItem(path, relativeTo, archive);\n            throw createFailureException(\"A domain controller cannot accept unmanaged content\");\n        }\n\n        if (!isMaster || contentRepository.hasContent(hash)) {\n            ModelNode subModel = context.getSubModel();\n            subModel.get(NAME).set(name);\n            subModel.get(RUNTIME_NAME).set(runtimeName);\n            subModel.get(CONTENT).set(content);\n        }\n        else {\n            throw createFailureException(\"No deployment content with hash %s is available in the deployment content repository.\", HashUtil.bytesToHexString(hash));\n        }\n\n        resultHandler.handleResultComplete();\n        return new BasicOperationResult(Util.getResourceRemoveOperation(operation.get(OP_ADDR)));\n    }","id":18321,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        validator.validate(operation);\n\n        ModelNode opAddr = operation.get(OP_ADDR);\n        PathAddress address = PathAddress.pathAddress(opAddr);\n        String name = address.getLastElement().getValue();\n        String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;\n\n        byte[] hash = null;\n        // clone it, so we can modify it to our own content\n        final ModelNode content = operation.require(CONTENT).clone();\n        // TODO: JBAS-9020: for the moment overlays are not supported, so there is a single content item\n        final ModelNode contentItemNode = content.require(0);\n        if (contentItemNode.hasDefined(HASH)) {\n            managedContentValidator.validate(contentItemNode);\n            hash = contentItemNode.require(HASH).asBytes();\n            if (!contentRepository.hasContent(hash))\n                throw createFailureException(\"No deployment content with hash %s is available in the deployment content repository.\", HashUtil.bytesToHexString(hash));\n        } else if (hasValidContentAdditionParameterDefined(contentItemNode)) {\n            if (!isMaster) {\n                // This is a slave DC. We can't handle this operation; it should have been fixed up on the master DC\n                throw createFailureException(\"A slave domain controller cannot accept deployment content uploads\");\n            }\n\n            InputStream in = getInputStream(context, contentItemNode);\n            try {\n                try {\n                    hash = contentRepository.addContent(in);\n                } catch (IOException e) {\n                    throw createFailureException(e.toString());\n                }\n\n            } finally {\n                StreamUtils.safeClose(in);\n            }\n            contentItemNode.get(HASH).set(hash);\n        } else {\n            // Unmanaged content, the user is responsible for replication\n            // Just validate the required attributes are present\n            unmanagedContentValidator.validate(contentItemNode);\n        }\n\n        ModelNode subModel = context.getSubModel();\n        subModel.get(NAME).set(name);\n        subModel.get(RUNTIME_NAME).set(runtimeName);\n        subModel.get(CONTENT).set(content);\n\n        resultHandler.handleResultComplete();\n        return new BasicOperationResult(Util.getResourceRemoveOperation(operation.get(OP_ADDR)));\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"public DeploymentAddHandler(final ContentRepository contentRepository, final boolean isMaster) {\n        this.contentRepository = contentRepository;\n        this.validator.registerValidator(RUNTIME_NAME, new StringLengthValidator(1, Integer.MAX_VALUE, true, false));\n        final ParametersValidator contentValidator = new ParametersValidator();\n        // existing managed content\n        contentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES, true));\n        // existing unmanaged content\n        contentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        contentValidator.registerValidator(PATH, new ModelTypeValidator(ModelType.STRING, true));\n        contentValidator.registerValidator(RELATIVE_TO, new ModelTypeValidator(ModelType.STRING, true));\n        // content additions\n        contentValidator.registerValidator(INPUT_STREAM_INDEX, new ModelTypeValidator(ModelType.INT, true));\n        contentValidator.registerValidator(BYTES, new ModelTypeValidator(ModelType.BYTES, true));\n        contentValidator.registerValidator(URL, new StringLengthValidator(1, true));\n        this.validator.registerValidator(CONTENT, chain(new ListValidator(new ParametersOfValidator(contentValidator)),\n                new AbstractParameterValidator() {\n                    @Override\n                    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n                        validateOnePieceOfContent(value);\n                    }\n                }));\n        this.isMaster = isMaster;\n    }","id":18322,"modified_method":"public DeploymentAddHandler(final ContentRepository contentRepository, final boolean isMaster) {\n        this.contentRepository = contentRepository;\n        this.validator.registerValidator(RUNTIME_NAME, new StringLengthValidator(1, Integer.MAX_VALUE, true, false));\n        final ParametersValidator contentValidator = new ParametersValidator();\n        // existing managed content\n        contentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES, true));\n        // existing unmanaged content\n        contentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        contentValidator.registerValidator(PATH, new StringLengthValidator(1, true));\n        contentValidator.registerValidator(RELATIVE_TO, new ModelTypeValidator(ModelType.STRING, true));\n        // content additions\n        contentValidator.registerValidator(INPUT_STREAM_INDEX, new ModelTypeValidator(ModelType.INT, true));\n        contentValidator.registerValidator(BYTES, new ModelTypeValidator(ModelType.BYTES, true));\n        contentValidator.registerValidator(URL, new StringLengthValidator(1, true));\n        this.validator.registerValidator(CONTENT, chain(new ListValidator(new ParametersOfValidator(contentValidator)),\n                new AbstractParameterValidator() {\n                    @Override\n                    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n                        validateOnePieceOfContent(value);\n                    }\n                }));\n        this.managedContentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES));\n        this.unmanagedContentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN));\n        this.unmanagedContentValidator.registerValidator(PATH, new StringLengthValidator(1));\n        this.isMaster = isMaster;\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        validator.validate(operation);\n\n        String name = operation.require(NAME).asString();\n        String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;\n\n        final byte[] hash;\n        // clone it, so we can modify it to our own content\n        final ModelNode content = operation.require(CONTENT).clone();\n        // TODO: JBAS-9020: for the moment overlays are not supported, so there is a single content item\n        final DeploymentHandlerUtil.ContentItem contentItem;\n        final ModelNode contentItemNode = content.require(0);\n        if (contentItemNode.hasDefined(HASH)) {\n            hash = contentItemNode.require(HASH).asBytes();\n            if (!contentRepository.hasContent(hash))\n                throw createFailureException(\"No deployment content with hash %s is available in the deployment content repository.\", HashUtil.bytesToHexString(hash));\n            contentItem = new DeploymentHandlerUtil.ContentItem(hash);\n        } else if (hasValidContentAdditionParameterDefined(contentItemNode)) {\n            InputStream in = getInputStream(context, contentItemNode);\n            try {\n                try {\n                    hash = contentRepository.addContent(in);\n                } catch (IOException e) {\n                    throw createFailureException(e.toString());\n                }\n\n            } finally {\n                StreamUtils.safeClose(in);\n            }\n            contentItemNode.get(HASH).set(hash);\n            // TODO: remove the content addition stuff?\n            contentItem = new DeploymentHandlerUtil.ContentItem(hash);\n        } else {\n            final String path = contentItemNode.require(PATH).asString();\n            final String relativeTo = asString(contentItemNode, RELATIVE_TO);\n            final boolean archive = contentItemNode.require(ARCHIVE).asBoolean();\n            contentItem = new DeploymentHandlerUtil.ContentItem(path, relativeTo, archive);\n        }\n\n        ModelNode rootModel = context.getSubModel();\n        ModelNode deployments = rootModel.get(DEPLOYMENT);\n\n        ModelNode replaceNode = deployments.hasDefined(name) ? deployments.get(name) : null;\n        if (replaceNode == null) {\n            throw createFailureException(\"No deployment with name %s found\", name);\n        }\n\n        boolean start = replaceNode.get(ENABLED).asBoolean();\n\n        ModelNode deployNode = new ModelNode();\n        deployNode.get(NAME).set(name);\n        deployNode.get(RUNTIME_NAME).set(runtimeName);\n        deployNode.get(CONTENT).set(content);\n        deployNode.get(ENABLED).set(start);\n\n        deployments.get(name).set(deployNode);\n\n        ModelNode compensatingOp = operation.clone();\n        compensatingOp.get(RUNTIME_NAME).set(replaceNode.get(RUNTIME_NAME).asString());\n        compensatingOp.get(CONTENT).set(replaceNode.require(CONTENT).clone());\n        // the content repo will already have these, note that content should not be empty\n        removeContentAdditions(compensatingOp.require(CONTENT));\n\n        if (start) {\n            DeploymentHandlerUtil.replace(context, name, runtimeName, resultHandler, contentItem);\n        } else {\n            resultHandler.handleResultComplete();\n        }\n\n        return new BasicOperationResult(compensatingOp);\n    }","id":18323,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        validator.validate(operation);\n\n        String name = operation.require(NAME).asString();\n        String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;\n\n        final byte[] hash;\n        // clone it, so we can modify it to our own content\n        final ModelNode content = operation.require(CONTENT).clone();\n        // TODO: JBAS-9020: for the moment overlays are not supported, so there is a single content item\n        final DeploymentHandlerUtil.ContentItem contentItem;\n        final ModelNode contentItemNode = content.require(0);\n        if (contentItemNode.hasDefined(HASH)) {\n            managedContentValidator.validate(contentItemNode);\n            hash = contentItemNode.require(HASH).asBytes();\n            if (!contentRepository.hasContent(hash))\n                throw createFailureException(\"No deployment content with hash %s is available in the deployment content repository.\", HashUtil.bytesToHexString(hash));\n            contentItem = new DeploymentHandlerUtil.ContentItem(hash);\n        } else if (hasValidContentAdditionParameterDefined(contentItemNode)) {\n            InputStream in = getInputStream(context, contentItemNode);\n            try {\n                try {\n                    hash = contentRepository.addContent(in);\n                } catch (IOException e) {\n                    throw createFailureException(e.toString());\n                }\n\n            } finally {\n                StreamUtils.safeClose(in);\n            }\n            contentItemNode.get(HASH).set(hash);\n            // TODO: remove the content addition stuff?\n            contentItem = new DeploymentHandlerUtil.ContentItem(hash);\n        } else {\n            unmanagedContentValidator.validate(contentItemNode);\n            final String path = contentItemNode.require(PATH).asString();\n            final String relativeTo = asString(contentItemNode, RELATIVE_TO);\n            final boolean archive = contentItemNode.require(ARCHIVE).asBoolean();\n            contentItem = new DeploymentHandlerUtil.ContentItem(path, relativeTo, archive);\n        }\n\n        ModelNode rootModel = context.getSubModel();\n        ModelNode deployments = rootModel.get(DEPLOYMENT);\n\n        ModelNode replaceNode = deployments.hasDefined(name) ? deployments.get(name) : null;\n        if (replaceNode == null) {\n            throw createFailureException(\"No deployment with name %s found\", name);\n        }\n\n        boolean start = replaceNode.get(ENABLED).asBoolean();\n\n        ModelNode deployNode = new ModelNode();\n        deployNode.get(NAME).set(name);\n        deployNode.get(RUNTIME_NAME).set(runtimeName);\n        deployNode.get(CONTENT).set(content);\n        deployNode.get(ENABLED).set(start);\n\n        deployments.get(name).set(deployNode);\n\n        ModelNode compensatingOp = operation.clone();\n        compensatingOp.get(RUNTIME_NAME).set(replaceNode.get(RUNTIME_NAME).asString());\n        compensatingOp.get(CONTENT).set(replaceNode.require(CONTENT).clone());\n        // the content repo will already have these, note that content should not be empty\n        removeContentAdditions(compensatingOp.require(CONTENT));\n\n        if (start) {\n            DeploymentHandlerUtil.replace(context, name, runtimeName, resultHandler, contentItem);\n        } else {\n            resultHandler.handleResultComplete();\n        }\n\n        return new BasicOperationResult(compensatingOp);\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"public DeploymentFullReplaceHandler(final ContentRepository contentRepository) {\n        this.contentRepository = contentRepository;\n        this.validator.registerValidator(NAME, new StringLengthValidator(1, Integer.MAX_VALUE, false, false));\n        this.validator.registerValidator(RUNTIME_NAME, new StringLengthValidator(1, Integer.MAX_VALUE, true, false));\n        // TODO: can we force enablement on replace?\n        //this.validator.registerValidator(ENABLED, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        final ParametersValidator contentValidator = new ParametersValidator();\n        // existing managed content\n        contentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES, true));\n        // existing unmanaged content\n        contentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        contentValidator.registerValidator(PATH, new ModelTypeValidator(ModelType.STRING, true));\n        contentValidator.registerValidator(RELATIVE_TO, new ModelTypeValidator(ModelType.STRING, true));\n        // content additions\n        contentValidator.registerValidator(INPUT_STREAM_INDEX, new ModelTypeValidator(ModelType.INT, true));\n        contentValidator.registerValidator(BYTES, new ModelTypeValidator(ModelType.BYTES, true));\n        contentValidator.registerValidator(URL, new StringLengthValidator(1, true));\n        this.validator.registerValidator(CONTENT, chain(new ListValidator(new ParametersOfValidator(contentValidator)),\n                new AbstractParameterValidator() {\n                    @Override\n                    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n                        validateOnePieceOfContent(value);\n                    }\n                }));\n\n    }","id":18324,"modified_method":"public DeploymentFullReplaceHandler(final ContentRepository contentRepository) {\n        this.contentRepository = contentRepository;\n        this.validator.registerValidator(NAME, new StringLengthValidator(1, Integer.MAX_VALUE, false, false));\n        this.validator.registerValidator(RUNTIME_NAME, new StringLengthValidator(1, Integer.MAX_VALUE, true, false));\n        // TODO: can we force enablement on replace?\n        //this.validator.registerValidator(ENABLED, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        final ParametersValidator contentValidator = new ParametersValidator();\n        // existing managed content\n        contentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES, true));\n        // existing unmanaged content\n        contentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        contentValidator.registerValidator(PATH, new StringLengthValidator(1, true));\n        contentValidator.registerValidator(RELATIVE_TO, new ModelTypeValidator(ModelType.STRING, true));\n        // content additions\n        contentValidator.registerValidator(INPUT_STREAM_INDEX, new ModelTypeValidator(ModelType.INT, true));\n        contentValidator.registerValidator(BYTES, new ModelTypeValidator(ModelType.BYTES, true));\n        contentValidator.registerValidator(URL, new StringLengthValidator(1, true));\n        this.validator.registerValidator(CONTENT, chain(new ListValidator(new ParametersOfValidator(contentValidator)),\n                new AbstractParameterValidator() {\n                    @Override\n                    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n                        validateOnePieceOfContent(value);\n                    }\n                }));\n        this.managedContentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES));\n        this.unmanagedContentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN));\n        this.unmanagedContentValidator.registerValidator(PATH, new StringLengthValidator(1));\n\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        validator.validate(operation);\n\n        String name = operation.require(NAME).asString();\n        String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;\n        byte[] hash;\n        // clone it, so we can modify it to our own content\n        final ModelNode content = operation.require(CONTENT).clone();\n        // TODO: JBAS-9020: for the moment overlays are not supported, so there is a single content item\n        final ModelNode contentItemNode = content.require(0);\n        if (contentItemNode.hasDefined(HASH)) {\n            hash = contentItemNode.require(HASH).asBytes();\n            if (!contentRepository.hasContent(hash))\n                throw createFailureException(\"No deployment content with hash %s is available in the deployment content repository.\", HashUtil.bytesToHexString(hash));\n        } else if (hasValidContentAdditionParameterDefined(contentItemNode)) {\n            if (!isMaster) {\n                // This is a slave DC. We can't handle this operation; it should have been fixed up on the master DC\n                throw createFailureException(\"A slave domain controller cannot accept deployment content uploads\");\n            }\n\n            InputStream in = getInputStream(context, contentItemNode);\n            try {\n                try {\n                    hash = contentRepository.addContent(in);\n                } catch (IOException e) {\n                    throw createFailureException(e.toString());\n                }\n\n            } finally {\n                StreamUtils.safeClose(in);\n            }\n            contentItemNode.get(HASH).set(hash);\n        } else {\n            // TODO: handle unmanaged content, the user is responsible for replication\n//            final String path = contentItemNode.require(PATH).asString();\n//            final String relativeTo = asString(contentItemNode, RELATIVE_TO);\n//            final boolean archive = contentItemNode.require(ARCHIVE).asBoolean();\n//            contentItem = new DeploymentHandlerUtil.ContentItem(path, relativeTo, archive);\n            throw createFailureException(\"A domain controller cannot accept unmanaged content\");\n        }\n\n\n        ModelNode rootModel = context.getSubModel();\n        ModelNode deployments = rootModel.get(DEPLOYMENT);\n\n        ModelNode replaceNode = deployments.hasDefined(name) ? deployments.get(name) : null;\n        if (replaceNode == null) {\n            throw createFailureException(\"No deployment with name %s found\", name);\n        }\n\n        ModelNode deployNode = new ModelNode();\n        deployNode.get(NAME).set(name);\n        deployNode.get(RUNTIME_NAME).set(runtimeName);\n        deployNode.get(CONTENT).set(content);\n\n        deployments.get(name).set(deployNode);\n\n        if (rootModel.hasDefined(SERVER_GROUP)) {\n            for (Property server : rootModel.get(SERVER_GROUP).asPropertyList()) {\n                ModelNode serverConfig = server.getValue();\n                if (serverConfig.hasDefined(DEPLOYMENT) && serverConfig.get(DEPLOYMENT).hasDefined(name)) {\n                    ModelNode groupDeployNode = serverConfig.get(DEPLOYMENT, name);\n                    groupDeployNode.get(RUNTIME_NAME).set(runtimeName);\n                    groupDeployNode.get(HASH).set(hash);\n                }\n            }\n        }\n\n        ModelNode compensatingOp = operation.clone();\n        compensatingOp.get(RUNTIME_NAME).set(replaceNode.get(RUNTIME_NAME).asString());\n        compensatingOp.get(CONTENT).set(replaceNode.require(CONTENT).clone());\n        // the content repo will already have these, note that content should not be empty\n        removeContentAdditions(compensatingOp.require(CONTENT));\n\n        resultHandler.handleResultComplete();\n\n        return new BasicOperationResult(compensatingOp);\n    }","id":18325,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        validator.validate(operation);\n\n        String name = operation.require(NAME).asString();\n        String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : name;\n        byte[] hash;\n        // clone it, so we can modify it to our own content\n        final ModelNode content = operation.require(CONTENT).clone();\n        // TODO: JBAS-9020: for the moment overlays are not supported, so there is a single content item\n        final ModelNode contentItemNode = content.require(0);\n        if (contentItemNode.hasDefined(HASH)) {\n            managedContentValidator.validate(contentItemNode);\n            hash = contentItemNode.require(HASH).asBytes();\n            if (!contentRepository.hasContent(hash))\n                throw createFailureException(\"No deployment content with hash %s is available in the deployment content repository.\", HashUtil.bytesToHexString(hash));\n        } else if (hasValidContentAdditionParameterDefined(contentItemNode)) {\n            if (!isMaster) {\n                // This is a slave DC. We can't handle this operation; it should have been fixed up on the master DC\n                throw createFailureException(\"A slave domain controller cannot accept deployment content uploads\");\n            }\n\n            InputStream in = getInputStream(context, contentItemNode);\n            try {\n                try {\n                    hash = contentRepository.addContent(in);\n                } catch (IOException e) {\n                    throw createFailureException(e.toString());\n                }\n\n            } finally {\n                StreamUtils.safeClose(in);\n            }\n            contentItemNode.get(HASH).set(hash);\n        } else {\n            // Unmanaged content, the user is responsible for replication\n            // Just validate the required attributes are present\n            unmanagedContentValidator.validate(contentItemNode);\n        }\n\n        ModelNode rootModel = context.getSubModel();\n        ModelNode deployments = rootModel.get(DEPLOYMENT);\n\n        ModelNode replaceNode = deployments.hasDefined(name) ? deployments.get(name) : null;\n        if (replaceNode == null) {\n            throw createFailureException(\"No deployment with name %s found\", name);\n        }\n\n        ModelNode deployNode = new ModelNode();\n        deployNode.get(NAME).set(name);\n        deployNode.get(RUNTIME_NAME).set(runtimeName);\n        deployNode.get(CONTENT).set(content);\n\n        deployments.get(name).set(deployNode);\n\n        if (rootModel.hasDefined(SERVER_GROUP)) {\n            for (Property server : rootModel.get(SERVER_GROUP).asPropertyList()) {\n                ModelNode serverConfig = server.getValue();\n                if (serverConfig.hasDefined(DEPLOYMENT) && serverConfig.get(DEPLOYMENT).hasDefined(name)) {\n                    ModelNode groupDeployNode = serverConfig.get(DEPLOYMENT, name);\n                    groupDeployNode.get(RUNTIME_NAME).set(runtimeName);\n                }\n            }\n        }\n\n        ModelNode compensatingOp = operation.clone();\n        compensatingOp.get(RUNTIME_NAME).set(replaceNode.get(RUNTIME_NAME).asString());\n        compensatingOp.get(CONTENT).set(replaceNode.require(CONTENT).clone());\n        // the content repo will already have these, note that content should not be empty\n        removeContentAdditions(compensatingOp.require(CONTENT));\n\n        resultHandler.handleResultComplete();\n\n        return new BasicOperationResult(compensatingOp);\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"public DeploymentFullReplaceHandler(final ContentRepository contentRepository, final boolean isMaster) {\n        this.contentRepository = contentRepository;\n        this.validator.registerValidator(NAME, new StringLengthValidator(1, Integer.MAX_VALUE, false, false));\n        this.validator.registerValidator(RUNTIME_NAME, new StringLengthValidator(1, Integer.MAX_VALUE, true, false));\n        // TODO: can we force enablement on replace?\n        //this.validator.registerValidator(ENABLED, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        final ParametersValidator contentValidator = new ParametersValidator();\n        // existing managed content\n        contentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES, true));\n        // existing unmanaged content\n        contentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        contentValidator.registerValidator(PATH, new ModelTypeValidator(ModelType.STRING, true));\n        contentValidator.registerValidator(RELATIVE_TO, new ModelTypeValidator(ModelType.STRING, true));\n        // content additions\n        contentValidator.registerValidator(INPUT_STREAM_INDEX, new ModelTypeValidator(ModelType.INT, true));\n        contentValidator.registerValidator(BYTES, new ModelTypeValidator(ModelType.BYTES, true));\n        contentValidator.registerValidator(URL, new StringLengthValidator(1, true));\n        this.validator.registerValidator(CONTENT, chain(new ListValidator(new ParametersOfValidator(contentValidator)),\n                new AbstractParameterValidator() {\n                    @Override\n                    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n                        validateOnePieceOfContent(value);\n                    }\n                }));\n        this.isMaster = isMaster;\n    }","id":18326,"modified_method":"public DeploymentFullReplaceHandler(final ContentRepository contentRepository, final boolean isMaster) {\n        this.contentRepository = contentRepository;\n        this.validator.registerValidator(NAME, new StringLengthValidator(1, Integer.MAX_VALUE, false, false));\n        this.validator.registerValidator(RUNTIME_NAME, new StringLengthValidator(1, Integer.MAX_VALUE, true, false));\n        // TODO: can we force enablement on replace?\n        //this.validator.registerValidator(ENABLED, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        final ParametersValidator contentValidator = new ParametersValidator();\n        // existing managed content\n        contentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES, true));\n        // existing unmanaged content\n        contentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN, true));\n        contentValidator.registerValidator(PATH, new StringLengthValidator(1, true));\n        contentValidator.registerValidator(RELATIVE_TO, new ModelTypeValidator(ModelType.STRING, true));\n        // content additions\n        contentValidator.registerValidator(INPUT_STREAM_INDEX, new ModelTypeValidator(ModelType.INT, true));\n        contentValidator.registerValidator(BYTES, new ModelTypeValidator(ModelType.BYTES, true));\n        contentValidator.registerValidator(URL, new StringLengthValidator(1, true));\n        this.validator.registerValidator(CONTENT, chain(new ListValidator(new ParametersOfValidator(contentValidator)),\n                new AbstractParameterValidator() {\n                    @Override\n                    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n                        validateOnePieceOfContent(value);\n                    }\n                }));\n        this.managedContentValidator.registerValidator(HASH, new ModelTypeValidator(ModelType.BYTES));\n        this.unmanagedContentValidator.registerValidator(ARCHIVE, new ModelTypeValidator(ModelType.BOOLEAN));\n        this.unmanagedContentValidator.registerValidator(PATH, new StringLengthValidator(1));\n        this.isMaster = isMaster;\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void addDeployments(List<ModelNode> updates) {\n        if (serverGroup.hasDefined(DEPLOYMENT)) {\n            for (Property deployment : serverGroup.get(DEPLOYMENT).asPropertyList()) {\n                String name = deployment.getName();\n                ModelNode details = deployment.getValue();\n\n                // Make sure we have a copy of the deployment in the local repo\n\n                final byte[] hash;\n                // clone it, so we can modify it to our own content\n                final ModelNode content = details.require(CONTENT).clone();\n                // TODO: JBAS-9020: for the moment overlays are not supported, so there is a single content item\n                final ModelNode contentItemNode = content.require(0);\n                if (contentItemNode.hasDefined(HASH)) {\n                    hash = contentItemNode.require(HASH).asBytes();\n                    domainController.getFileRepository().getDeploymentFiles(hash);\n                }\n\n                PathAddress addr = PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT, name));\n                ModelNode addOp = Util.getEmptyOperation(ADD, addr.toModelNode());\n                addOp.get(RUNTIME_NAME).set(details.get(RUNTIME_NAME));\n                addOp.get(CONTENT).set(content);\n                addOp.get(ENABLED).set(!details.hasDefined(ENABLED) || details.get(ENABLED).asBoolean());\n\n                updates.add(addOp);\n            }\n        }\n    }","id":18327,"modified_method":"private void addDeployments(List<ModelNode> updates) {\n        if (serverGroup.hasDefined(DEPLOYMENT)) {\n            for (Property deployment : serverGroup.get(DEPLOYMENT).asPropertyList()) {\n                String name = deployment.getName();\n                ModelNode details = deployment.getValue();\n\n                // Make sure we have a copy of the deployment in the local repo\n\n                ModelNode domainDeployment = domainModel.require(DEPLOYMENT).require(name);\n                ModelNode deploymentContent = domainDeployment.require(CONTENT).clone();\n                for (ModelNode content : deploymentContent.asList()) {\n                    if ((content.hasDefined(HASH))) {\n                        byte[] hash = content.require(HASH).asBytes();\n                        // Ensure the local repo has the files\n                        domainController.getFileRepository().getDeploymentFiles(hash);\n                    }\n                }\n\n                PathAddress addr = PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT, name));\n                ModelNode addOp = Util.getEmptyOperation(ADD, addr.toModelNode());\n                addOp.get(RUNTIME_NAME).set(details.get(RUNTIME_NAME));\n                addOp.get(CONTENT).set(deploymentContent);\n                addOp.get(ENABLED).set(!details.hasDefined(ENABLED) || details.get(ENABLED).asBoolean());\n\n                updates.add(addOp);\n            }\n        }\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        ModelNode opAddr = operation.get(OP_ADDR);\n        PathAddress address = PathAddress.pathAddress(opAddr);\n        String name = address.getLastElement().getValue();\n\n        ModelNode deployment = context.getSubModel(PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT, name)));\n\n        byte[] hash = deployment.require(CONTENT).require(0).require(HASH).asBytes();\n        // Ensure the local repo has the files\n        fileRepository.getDeploymentFiles(hash);\n\n        final String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : deployment.get(RUNTIME_NAME).asString();\n\n        ModelNode subModel = context.getSubModel();\n        subModel.get(NAME).set(name);\n        subModel.get(RUNTIME_NAME).set(runtimeName);\n        subModel.get(ENABLED).set(operation.has(ENABLED) && operation.get(ENABLED).asBoolean()); // TODO consider starting\n\n        resultHandler.handleResultComplete();\n        return new BasicOperationResult(Util.getResourceRemoveOperation(operation.get(OP_ADDR)));\n    }","id":18328,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public OperationResult execute(OperationContext context, ModelNode operation, ResultHandler resultHandler) throws OperationFailedException {\n\n        ModelNode opAddr = operation.get(OP_ADDR);\n        PathAddress address = PathAddress.pathAddress(opAddr);\n        String name = address.getLastElement().getValue();\n\n        ModelNode deployment = context.getSubModel(PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT, name)));\n\n        for (ModelNode content : deployment.require(CONTENT).asList()) {\n            if ((content.hasDefined(HASH))) {\n                byte[] hash = content.require(HASH).asBytes();\n                // Ensure the local repo has the files\n                fileRepository.getDeploymentFiles(hash);\n            }\n        }\n\n        final String runtimeName = operation.hasDefined(RUNTIME_NAME) ? operation.get(RUNTIME_NAME).asString() : deployment.get(RUNTIME_NAME).asString();\n\n        ModelNode subModel = context.getSubModel();\n        subModel.get(NAME).set(name);\n        subModel.get(RUNTIME_NAME).set(runtimeName);\n        subModel.get(ENABLED).set(operation.has(ENABLED) && operation.get(ENABLED).asBoolean()); // TODO consider starting\n\n        resultHandler.handleResultComplete();\n        return new BasicOperationResult(Util.getResourceRemoveOperation(operation.get(OP_ADDR)));\n    }","commit_id":"ca68f54b4cc8d55cc0b5d0eceb1ab59c3ed85339","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18329,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18330,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18331,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18332,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18333,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18334,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18335,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18336,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18337,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18338,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18339,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Home\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Home\", RuntimeVariables.replace(\"Home\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//div/a/span[2]\"));\n\t\tselenium.clickAt(\"//div/a/span[2]\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Name\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//div[@class='portlet-msg-info']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add\"),\n\t\t\tselenium.getText(\"//span[@title='Add']/ul/li/strong/a/span\"));\n\t\tselenium.clickAt(\"//span[@title='Add']/ul/li/strong/a/span\",\n\t\t\tRuntimeVariables.replace(\"Add\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"link=DM Folder Name\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"link=DM Folder Name\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","id":18340,"modified_method":"public void testAddNewDLFolderDocumentAPActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Add New\"),\n\t\t\tselenium.getText(\"//span[@title='Add New']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Add New']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Add New\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Basic Document\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\"));\n\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[4]/a\",\n\t\t\tRuntimeVariables.replace(\"Basic Document\"));\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//iframe\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.selectFrame(\"//iframe\");\n\t\tassertEquals(\"Select\",\n\t\t\tselenium.getValue(\"//input[@id='_20_openFolderSelectorButton']\"));\n\t\tselenium.click(\"//input[@id='_20_openFolderSelectorButton']\");\n\t\tselenium.waitForPopUp(\"folder\", RuntimeVariables.replace(\"30000\"));\n\t\tselenium.selectWindow(\"name=folder\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//input[@value='Choose']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.click(\"//input[@value='Choose']\");\n\t\tselenium.selectWindow(\"null\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Name\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//a[@id='_20_folderName']\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Name\"),\n\t\t\tselenium.getText(\"//a[@id='_20_folderName']\"));\n\t\tselenium.type(\"//input[@id='_20_file']\",\n\t\t\tRuntimeVariables.replace(\n\t\t\t\t\"L:\\\\portal\\\\build\\\\portal-web\\\\test\\\\com\\\\liferay\\\\portalweb\\\\portlet\\\\assetpublisher\\\\dependencies\\\\DLDocument.txt\"));\n\t\tselenium.type(\"//input[@id='_20_title']\",\n\t\t\tRuntimeVariables.replace(\"DM Folder Document Title\"));\n\t\tselenium.clickAt(\"//input[@value='Publish']\",\n\t\t\tRuntimeVariables.replace(\"Publish\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"DM Folder Document Title\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//h3[@class='asset-title']/a\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//h3[@class='asset-title']/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\"DM Folder Document Title\"),\n\t\t\tselenium.getText(\"//div[@class='asset-resource-info']/span/a/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testConfigurePortletAssetSelectionManual()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//select[@id='_86_selectionStyle']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"//select[@id='_86_selectionStyle']\",\n\t\t\tRuntimeVariables.replace(\"Manual\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Selection\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//div[@class='lfr-panel-title']/span\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(\"Manual\",\n\t\t\tselenium.getSelectedLabel(\"//select[@id='_86_selectionStyle']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Selection\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='lfr-panel-title'])[1]/span\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Display Settings\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='lfr-panel-title'])[2]/span\"));\n\t}","id":18341,"modified_method":"public void testConfigurePortletAssetSelectionManual()\n\t\tthrows Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\t\tThread.sleep(5000);\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//select[@id='_86_selectionStyle']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.select(\"//select[@id='_86_selectionStyle']\",\n\t\t\tRuntimeVariables.replace(\"Manual\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (RuntimeVariables.replace(\"Source\")\n\t\t\t\t\t\t\t\t\t\t.equals(selenium.getText(\n\t\t\t\t\t\t\t\t\"//div[@class='lfr-panel-title']/span\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"//input[@value='Save']\",\n\t\t\tRuntimeVariables.replace(\"Save\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(\"Manual\",\n\t\t\tselenium.getSelectedLabel(\"//select[@id='_86_selectionStyle']\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Selection\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='lfr-panel-title'])[1]/span\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Display Settings\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='lfr-panel-title'])[2]/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testDeleteAPArchivedSetupActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\tselenium.getText(\"//div[@class='archived-setups']/span/a/span\"));\n\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Archive Name\"),\n\t\t\tselenium.getText(\"//tr[3]/td[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no archived setups.\"),\n\t\t\tselenium.getText(\"//form/div[@class='portlet-msg-info']\"));\n\t\tassertFalse(selenium.isTextPresent(\"Archive Name\"));\n\t}","id":18342,"modified_method":"public void testDeleteAPArchivedSetupActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\tselenium.getText(\"//div[@class='archived-setups']/span/a/span\"));\n\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Archive Name\"),\n\t\t\tselenium.getText(\"//tr[3]/td[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"There are no archived setups.\"),\n\t\t\tselenium.getText(\"//form/div[@class='portlet-msg-info']\"));\n\t\tassertFalse(selenium.isTextPresent(\"Archive Name\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testRestoreAPArchivedSetupActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\tselenium.getText(\"//div[@class='archived-setups']/span/a/span\"));\n\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Archive Name\"),\n\t\t\tselenium.getText(\"//tr[3]/td[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a[@id='_86_rjus']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Restore\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a[@id='_86_rjus']\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a[@id='_86_rjus']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//select[@id='_86_selectionStyle']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(\"Manual\",\n\t\t\tselenium.getSelectedLabel(\"//select[@id='_86_selectionStyle']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Selection\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='lfr-panel-title'])[1]/span\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Display Settings\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='lfr-panel-title'])[2]/span\"));\n\t}","id":18343,"modified_method":"public void testRestoreAPArchivedSetupActions() throws Exception {\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\tselenium.getText(\"//div[@class='archived-setups']/span/a/span\"));\n\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\"Archive Name\"),\n\t\t\tselenium.getText(\"//tr[3]/td[1]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Joe Bloggs\"),\n\t\t\tselenium.getText(\"//tr[3]/td[2]\"));\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a[@id='_86_rjus']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Restore\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a[@id='_86_rjus']\"));\n\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[1]/a[@id='_86_rjus']\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"You have successfully updated the setup.\"),\n\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\tselenium.open(\"/web/guest/home/\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tThread.sleep(5000);\n\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\tselenium.click(\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\tfor (int second = 0;; second++) {\n\t\t\tif (second >= 90) {\n\t\t\t\tfail(\"timeout\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (selenium.isVisible(\"//select[@id='_86_selectionStyle']\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tThread.sleep(1000);\n\t\t}\n\n\t\tassertEquals(\"Manual\",\n\t\t\tselenium.getSelectedLabel(\"//select[@id='_86_selectionStyle']\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Selection\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='lfr-panel-title'])[1]/span\"));\n\t\tassertEquals(RuntimeVariables.replace(\"Display Settings\"),\n\t\t\tselenium.getText(\"xPath=(//div[@class='lfr-panel-title'])[2]/span\"));\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownAPArchivedSetup() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\t\t\tselenium.click(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean archive1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18344,"modified_method":"public void testTearDownAPArchivedSetup() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\t\t\tselenium.click(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean archive1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownAPArchivedSetup() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\t\t\tselenium.click(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean archive1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18345,"modified_method":"public void testTearDownAPArchivedSetup() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\t\t\tselenium.click(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean archive1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownAPArchivedSetup() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\t\t\tselenium.click(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean archive1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18346,"modified_method":"public void testTearDownAPArchivedSetup() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\"link=Asset Publisher Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Asset Publisher Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Asset Publisher Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Options\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Options']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Options']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Options\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Configuration\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\"));\n\t\t\t\tselenium.click(\n\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Archive/Restore Setup\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='archived-setups']/span/a/span\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='archived-setups']/span/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Archive/Restore Setup\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\n\t\t\t\tboolean archive1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\t\tboolean archive5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong\");\n\n\t\t\t\tif (!archive5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[2]/a[@id='_86_ctvk']\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18347,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18348,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18349,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18350,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18351,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18352,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18353,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18354,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18355,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18356,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18357,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18358,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18359,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18360,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18361,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18362,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18363,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18364,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18365,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18366,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18367,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@class='entry-title']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.clickAt(\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Delete\"));\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='portlet-msg-success']\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"Your request completed successfully.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-success']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\t\t\"There are no documents or media files in this folder.\"),\n\t\t\t\t\tselenium.getText(\"//div[@class='portlet-msg-info']\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":18368,"modified_method":"public void testTearDownDLDocument() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"link=Documents and Media Test Page\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tselenium.clickAt(\"link=Documents and Media Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Documents and Media Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tselenium.clickAt(\"//button[@title='Icon View']\",\n\t\t\t\t\tRuntimeVariables.replace(\"Icon View\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\t\t\"//button[@title='Icon View' and contains(@class,'aui-state-active')]\"));\n\n\t\t\t\tboolean dmDocumentPresent = selenium.isElementPresent(\n\t\t\t\t\t\t\"//input[@id='_20_rowIdsFolderCheckbox']\");\n\n\t\t\t\tif (!dmDocumentPresent) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertFalse(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tselenium.clickAt(\"//input[@id='_20_allRowIdsCheckbox']\",\n\t\t\t\t\tRuntimeVariables.replace(\"All Row IDs Checked\"));\n\t\t\t\tassertTrue(selenium.isChecked(\n\t\t\t\t\t\t\"//input[@id='_20_allRowIdsCheckbox']\"));\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a/span\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a/span\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[5]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete the selected entries[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"db30f480ffe0eac98c542395118520d1c3ffcad7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    PsiBuilder.Marker abMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      builder.error(GroovyBundle.message(\"lcurly.expected\"));\n      abMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    AnnotationMember.parse(builder);\n\n    while (Separators.parse(builder)) {\n      AnnotationMember.parse(builder);\n    }\n\n    if (builder.getTokenType() != mRCURLY) {\n      builder.error(GroovyBundle.message(\"rcurly.expected\"));\n    }\n\n    while (!builder.eof() && !ParserUtils.getToken(builder, mRCURLY)) {\n      AnnotationMember.parse(builder);\n\n      builder.advanceLexer();\n    }\n\n    abMarker.done(CLASS_BODY);\n    return CLASS_BODY;\n  }","id":18369,"modified_method":"public static IElementType parse(PsiBuilder builder) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    PsiBuilder.Marker abMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      builder.error(GroovyBundle.message(\"lcurly.expected\"));\n      abMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    while (AnnotationMember.parse(builder) && Separators.parse(builder));\n\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n\n    abMarker.done(CLASS_BODY);\n    return CLASS_BODY;\n  }","commit_id":"7bd90d545bc9fcfc833b68fbd7a62b97ee21d00f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder, String className) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    //allow errors\n    PsiBuilder.Marker cbMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      builder.error(GroovyBundle.message(\"lcurly.expected\"));\n      cbMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    ClassMember.parse(builder, className);\n\n    while (Separators.parse(builder)) {\n      ClassMember.parse(builder, className);\n    }\n\n    if (builder.getTokenType() != mRCURLY) {\n      builder.error(GroovyBundle.message(\"rcurly.expected\"));\n    }\n\n    while (!builder.eof() && !ParserUtils.getToken(builder, mRCURLY)) {\n      ClassMember.parse(builder, className);\n\n      builder.advanceLexer();\n    }\n\n    cbMarker.done(CLASS_BODY);\n    return CLASS_BODY;\n  }","id":18370,"modified_method":"public static GroovyElementType parse(PsiBuilder builder, String className) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    //allow errors\n    PsiBuilder.Marker cbMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      builder.error(GroovyBundle.message(\"lcurly.expected\"));\n      cbMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    while (ClassMember.parse(builder, className) && Separators.parse(builder));\n\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n\n    cbMarker.done(CLASS_BODY);\n    return CLASS_BODY;\n  }","commit_id":"7bd90d545bc9fcfc833b68fbd7a62b97ee21d00f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean parse(PsiBuilder builder) {\n    PsiBuilder.Marker cbMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      builder.error(GroovyBundle.message(\"lcurly.expected\"));\n      cbMarker.rollbackTo();\n      return false;\n    }\n\n    ParserUtils.getToken(builder, mNLS);\n\n    PsiBuilder.Marker constructorInvokationMarker = builder.mark();\n    if (parseExplicitConstructor(builder)) {\n      constructorInvokationMarker.done(EXPLICIT_CONSTRUCTOR);\n    } else {\n      constructorInvokationMarker.rollbackTo();\n    }\n\n    //explicit constructor invocation\n    Separators.parse(builder);\n    OpenOrClosableBlock.parseBlockBody(builder);\n\n    cbMarker.done(OPEN_BLOCK);\n    return true;\n\n  }","id":18371,"modified_method":"public static boolean parse(PsiBuilder builder) {\n    PsiBuilder.Marker cbMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      builder.error(GroovyBundle.message(\"lcurly.expected\"));\n      cbMarker.rollbackTo();\n      return false;\n    }\n\n    ParserUtils.getToken(builder, mNLS);\n\n    PsiBuilder.Marker constructorInvokationMarker = builder.mark();\n    if (parseExplicitConstructor(builder)) {\n      constructorInvokationMarker.done(EXPLICIT_CONSTRUCTOR);\n    } else {\n      constructorInvokationMarker.rollbackTo();\n    }\n\n    //explicit constructor invocation\n    Separators.parse(builder);\n    OpenOrClosableBlock.parseBlockBody(builder);\n\n    if (builder.getTokenType() != mRCURLY) {\n      builder.error(GroovyBundle.message(\"rcurly.expected\"));\n    } else {\n      builder.advanceLexer();\n    }\n\n    cbMarker.done(OPEN_BLOCK);\n    return true;\n\n  }","commit_id":"7bd90d545bc9fcfc833b68fbd7a62b97ee21d00f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder, String enumName) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    PsiBuilder.Marker ebMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      ebMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    Separators.parse(builder);\n\n    if (parseEnumConstantStart(builder)) {\n      EnumConstants.parse(builder);\n    } else {\n      ClassMember.parse(builder, enumName);\n    }\n\n    while (Separators.parse(builder)) {\n      ClassMember.parse(builder, enumName);\n    }\n\n    if (builder.getTokenType() != mRCURLY) {\n      builder.error(GroovyBundle.message(\"rcurly.expected\"));\n    }\n\n    while (!builder.eof() && !ParserUtils.getToken(builder, mRCURLY)) {\n      ClassMember.parse(builder, enumName);\n      builder.advanceLexer();\n    }\n\n    ebMarker.done(ENUM_BODY);\n    return ENUM_BODY;\n  }","id":18372,"modified_method":"public static GroovyElementType parse(PsiBuilder builder, String enumName) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    PsiBuilder.Marker ebMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      ebMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    Separators.parse(builder);\n\n    if (parseEnumConstantStart(builder)) {\n      EnumConstants.parse(builder);\n    } else {\n      ClassMember.parse(builder, enumName);\n    }\n\n    while (Separators.parse(builder)) {\n      ClassMember.parse(builder, enumName);\n    }\n\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n\n    ebMarker.done(ENUM_BODY);\n    return ENUM_BODY;\n  }","commit_id":"7bd90d545bc9fcfc833b68fbd7a62b97ee21d00f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder, String interfaceName) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    PsiBuilder.Marker ibMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      ibMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    InterfaceMember.parse(builder, interfaceName);\n    while (Separators.parse(builder)) {\n      InterfaceMember.parse(builder, interfaceName);\n    }\n\n    if (builder.getTokenType() != mRCURLY) {\n      builder.error(GroovyBundle.message(\"rcurly.expected\"));\n    }\n\n    while (!builder.eof() && !ParserUtils.getToken(builder, mRCURLY)) {\n      InterfaceMember.parse(builder, interfaceName);\n      builder.advanceLexer();\n    }\n\n    ibMarker.done(CLASS_BODY);\n    return CLASS_BODY;\n  }","id":18373,"modified_method":"public static IElementType parse(PsiBuilder builder, String interfaceName) {\n    //see also InterfaceBlock, EnumBlock, AnnotationBlock\n    PsiBuilder.Marker ibMarker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      ibMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    while (InterfaceMember.parse(builder, interfaceName) && Separators.parse(builder));\n\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n\n    ibMarker.done(CLASS_BODY);\n    return CLASS_BODY;\n  }","commit_id":"7bd90d545bc9fcfc833b68fbd7a62b97ee21d00f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean parse(PsiBuilder builder) {\n    PsiBuilder.Marker tdMarker = builder.mark();\n    Modifiers.parse(builder);\n    if (builder.getTokenType() == kCLASS && ClassDefinition.parse(builder)) {\n      tdMarker.done(CLASS_DEFINITION);\n      return true;\n    }\n\n    if (builder.getTokenType() == kINTERFACE && InterfaceDefinition.parse(builder)) {\n      tdMarker.done(INTERFACE_DEFINITION);\n      return true;\n    }\n\n    if (builder.getTokenType() == kENUM && EnumDefinition.parse(builder)) {\n      tdMarker.done(ENUM_DEFINITION);\n      return true;\n    }\n\n    if (builder.getTokenType() == mAT && AnnotationDefinition.parse(builder)) {\n      tdMarker.done(ANNOTATION_DEFINITION);\n      return true;\n    }\n\n    tdMarker.rollbackTo();\n    builder.error(GroovyBundle.message(\"class.or.interface.or.enum.or.annotation.expected\"));\n    return false;\n  }","id":18374,"modified_method":"public static boolean parse(PsiBuilder builder) {\n    PsiBuilder.Marker tdMarker = builder.mark();\n    Modifiers.parse(builder);\n    if (builder.getTokenType() == kCLASS && ClassDefinition.parse(builder)) {\n      tdMarker.done(CLASS_DEFINITION);\n      return true;\n    }\n\n    if (builder.getTokenType() == kINTERFACE && InterfaceDefinition.parse(builder)) {\n      tdMarker.done(INTERFACE_DEFINITION);\n      return true;\n    }\n\n    if (builder.getTokenType() == kENUM && EnumDefinition.parse(builder)) {\n      tdMarker.done(ENUM_DEFINITION);\n      return true;\n    }\n\n    if (builder.getTokenType() == mAT && AnnotationDefinition.parse(builder)) {\n      tdMarker.done(ANNOTATION_DEFINITION);\n      return true;\n    }\n\n    tdMarker.rollbackTo();\n    return false;\n  }","commit_id":"7bd90d545bc9fcfc833b68fbd7a62b97ee21d00f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void copyArtifact(ArtifactContext ac, File archive) throws RepositoryException, IOException {\n        if (verbose != null && (verbose.contains(\"all\") || verbose.contains(\"files\"))) {\n            msg(\"copying.artifact\", archive).newline();\n        }\n        getOutputRepositoryManager().putArtifact(ac, archive);\n        // SHA1 it if required\n        if(!ac.getSingleSuffix().equals(ArtifactContext.DOCS)){\n            signArtifact(ac, archive);\n        }\n    }","id":18375,"modified_method":"private void copyArtifact(ArtifactContext ac, File archive) throws RepositoryException, IOException {\n        if (verbose != null && (verbose.contains(\"all\") || verbose.contains(\"files\"))) {\n            msg(\"copying.artifact\", archive).newline();\n        }\n        getOutputRepositoryManager().putArtifact(ac, archive);\n        // SHA1 it if required\n        if(!ArtifactContext.isDirectoryName(ac.getSingleSuffix())) {\n            signArtifact(ac, archive);\n        }\n    }","commit_id":"e395ce24afe21d66741862353d735209811f9439","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void run() throws Exception {\n        setSystemProperties();\n        // FIXME: copying is currently very inefficient!\n        // All possible suffix types are tried which will result in numerous\n        // unnecessary roundtrips to external servers\n        Set<String> artifacts = new HashSet<String>();\n        boolean defaults = js == null \n                && jvm == null\n                && src == null\n                && docs == null\n                && all == null;\n        if(BooleanUtil.isTrue(js) || (BooleanUtil.isTrue(all) && BooleanUtil.isNotFalse(js)) || defaults)\n            artifacts.add(ArtifactContext.JS);\n        if(BooleanUtil.isTrue(jvm) || (BooleanUtil.isTrue(all) && BooleanUtil.isNotFalse(js)) || defaults){\n            // put the CAR first since its presence will shortcut the other three\n            artifacts.add(ArtifactContext.CAR);\n            artifacts.add(ArtifactContext.JAR);\n            artifacts.add(ArtifactContext.MODULE_PROPERTIES);\n            artifacts.add(ArtifactContext.MODULE_XML);\n        }\n        if(BooleanUtil.isTrue(src) || (BooleanUtil.isTrue(all) && BooleanUtil.isNotFalse(js)))\n            artifacts.add(ArtifactContext.SRC);\n        if(BooleanUtil.isTrue(docs) || (BooleanUtil.isTrue(all) && BooleanUtil.isNotFalse(js))){\n            artifacts.add(ArtifactContext.DOCS_ZIPPED);\n            artifacts.add(ArtifactContext.DOCS);\n        }\n        for (ModuleSpec module : modules) {\n            if (module != ModuleSpec.DEFAULT_MODULE && !module.isVersioned()) {\n                String version = checkModuleVersionsOrShowSuggestions(getRepositoryManager(), module.getName(), null, ModuleQuery.Type.ALL, null, null);\n                module = new ModuleSpec(module.getName(), version);\n            }\n            copyModule(module, artifacts);\n        }\n    }","id":18376,"modified_method":"@Override\n    public void run() throws Exception {\n        setSystemProperties();\n        // FIXME: copying is currently very inefficient!\n        // All possible suffix types are tried which will result in numerous\n        // unnecessary roundtrips to external servers\n        Set<String> artifacts = new HashSet<String>();\n        boolean defaults = js == null \n                && jvm == null\n                && src == null\n                && docs == null\n                && all == null;\n        if (BooleanUtil.isTrue(all)) {\n            artifacts.addAll(ArtifactContext.allSuffixes());\n        }\n        if (BooleanUtil.isTrue(js) || defaults) {\n            artifacts.add(ArtifactContext.JS);\n            artifacts.add(ArtifactContext.JS_MODEL);\n            artifacts.add(ArtifactContext.RESOURCES);\n        } else if (BooleanUtil.isFalse(js)) {\n            artifacts.remove(ArtifactContext.JS);\n            artifacts.remove(ArtifactContext.JS_MODEL);\n            artifacts.remove(ArtifactContext.RESOURCES);\n        }\n        if (BooleanUtil.isTrue(jvm) || defaults) {\n            // put the CAR first since its presence will shortcut the other three\n            artifacts.add(ArtifactContext.CAR);\n            artifacts.add(ArtifactContext.JAR);\n            artifacts.add(ArtifactContext.MODULE_PROPERTIES);\n            artifacts.add(ArtifactContext.MODULE_XML);\n        } else if (BooleanUtil.isFalse(jvm)) {\n            artifacts.remove(ArtifactContext.CAR);\n            artifacts.remove(ArtifactContext.JAR);\n            artifacts.remove(ArtifactContext.MODULE_PROPERTIES);\n            artifacts.remove(ArtifactContext.MODULE_XML);\n        }\n        if (BooleanUtil.isTrue(src)) {\n            artifacts.add(ArtifactContext.SRC);\n        } else if (BooleanUtil.isFalse(src)) {\n            artifacts.remove(ArtifactContext.SRC);\n        }\n        if (BooleanUtil.isTrue(docs)) {\n            artifacts.add(ArtifactContext.DOCS_ZIPPED);\n            artifacts.add(ArtifactContext.DOCS);\n        } else if (BooleanUtil.isFalse(docs)) {\n            artifacts.remove(ArtifactContext.DOCS_ZIPPED);\n            artifacts.remove(ArtifactContext.DOCS);\n        }\n        for (ModuleSpec module : modules) {\n            if (module != ModuleSpec.DEFAULT_MODULE && !module.isVersioned()) {\n                String version = checkModuleVersionsOrShowSuggestions(getRepositoryManager(), module.getName(), null, ModuleQuery.Type.ALL, null, null);\n                module = new ModuleSpec(module.getName(), version);\n            }\n            copyModule(module, artifacts);\n        }\n    }","commit_id":"e395ce24afe21d66741862353d735209811f9439","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"public SeleniumBuilderContext(String baseDir) throws Exception {\n\t\t_baseDir = baseDir;\n\n\t\t_seleniumBuilderFileUtil = new SeleniumBuilderFileUtil(_baseDir);\n\n\t\tDirectoryScanner directoryScanner = new DirectoryScanner();\n\n\t\tdirectoryScanner.setBasedir(_baseDir);\n\t\tdirectoryScanner.setIncludes(\n\t\t\tnew String[] {\n\t\t\t\t\"**\\\\*.action\", \"**\\\\*.function\", \"**\\\\*.macro\", \"**\\\\*.path\",\n\t\t\t\t\"**\\\\*.testcase\", \"**\\\\*.testsuite\"\n\t\t\t});\n\n\t\tdirectoryScanner.scan();\n\n\t\tString[] fileNames = directoryScanner.getIncludedFiles();\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tfileName = _normalizeFileName(fileName);\n\n\t\t\tif (fileName.endsWith(\".action\")) {\n\t\t\t\t_actionFileNames.add(fileName);\n\n\t\t\t\t_actionNames.add(_getName(fileName));\n\n\t\t\t\t_actionRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".function\")) {\n\t\t\t\t_functionClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_functionFileNames.add(fileName);\n\n\t\t\t\t_functionNames.add(_getName(fileName));\n\n\t\t\t\t_functionRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".macro\")) {\n\t\t\t\t_macroClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_macroFileNames.add(fileName);\n\n\t\t\t\t_macroNames.add(_getName(fileName));\n\n\t\t\t\t_macroRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".path\")) {\n\t\t\t\t_actionClassNames.add(_getClassName(fileName, \"Action\"));\n\n\t\t\t\t_pathClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_pathFileNames.add(fileName);\n\n\t\t\t\t_pathNames.add(_getName(fileName));\n\n\t\t\t\t_pathRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".testcase\")) {\n\t\t\t\t_testCaseClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_testCaseFileNames.add(fileName);\n\n\t\t\t\t_testCaseNames.add(_getName(fileName));\n\n\t\t\t\t_testCaseRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".testsuite\")) {\n\t\t\t\t_testSuiteClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_testSuiteFileNames.add(fileName);\n\n\t\t\t\t_testSuiteNames.add(_getName(fileName));\n\n\t\t\t\t_testSuiteRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid file \" + fileName);\n\t\t\t}\n\t\t}\n\t}","id":18377,"modified_method":"public SeleniumBuilderContext(String baseDir) throws Exception {\n\t\t_baseDir = baseDir;\n\n\t\t_seleniumBuilderFileUtil = new SeleniumBuilderFileUtil(_baseDir);\n\n\t\tDirectoryScanner directoryScanner = new DirectoryScanner();\n\n\t\tdirectoryScanner.setBasedir(_baseDir);\n\t\tdirectoryScanner.setIncludes(\n\t\t\tnew String[] {\n\t\t\t\t\"**\\\\*.action\", \"**\\\\*.function\", \"**\\\\*.macro\", \"**\\\\*.path\",\n\t\t\t\t\"**\\\\*.testcase\", \"**\\\\*.testsuite\"\n\t\t\t});\n\n\t\tdirectoryScanner.scan();\n\n\t\tString[] fileNames = directoryScanner.getIncludedFiles();\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tfileName = _normalizeFileName(fileName);\n\n\t\t\tif (fileName.endsWith(\".action\")) {\n\t\t\t\tString actionName = _getName(fileName);\n\n\t\t\t\tif (_actionNames.contains(actionName)) {\n\t\t\t\t\tthrow new Exception(\n\t\t\t\t\t\t\"Duplicate name \" + actionName + \" at \" + fileName);\n\t\t\t\t}\n\n\t\t\t\t_actionFileNames.add(fileName);\n\n\t\t\t\t_actionNames.add(actionName);\n\n\t\t\t\t_actionRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".function\")) {\n\t\t\t\tString functionName = _getName(fileName);\n\n\t\t\t\tif (_functionNames.contains(functionName)) {\n\t\t\t\t\tthrow new Exception(\n\t\t\t\t\t\t\"Duplicate name \" + functionName + \" at \" + fileName);\n\t\t\t\t}\n\n\t\t\t\t_functionClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_functionFileNames.add(fileName);\n\n\t\t\t\t_functionNames.add(functionName);\n\n\t\t\t\t_functionRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".macro\")) {\n\t\t\t\tString macroName = _getName(fileName);\n\n\t\t\t\tif (_macroNames.contains(macroName)) {\n\t\t\t\t\tthrow new Exception(\n\t\t\t\t\t\t\"Duplicate name \" + macroName + \" at \" + fileName);\n\t\t\t\t}\n\n\t\t\t\t_macroClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_macroFileNames.add(fileName);\n\n\t\t\t\t_macroNames.add(macroName);\n\n\t\t\t\t_macroRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".path\")) {\n\t\t\t\tString pathName = _getName(fileName);\n\n\t\t\t\tif (_pathNames.contains(pathName)) {\n\t\t\t\t\tthrow new Exception(\n\t\t\t\t\t\t\"Duplicate name \" + pathName + \" at \" + fileName);\n\t\t\t\t}\n\n\t\t\t\t_actionClassNames.add(_getClassName(fileName, \"Action\"));\n\n\t\t\t\t_pathClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_pathFileNames.add(fileName);\n\n\t\t\t\t_pathNames.add(pathName);\n\n\t\t\t\t_pathRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".testcase\")) {\n\t\t\t\tString testCaseName = _getName(fileName);\n\n\t\t\t\tif (_testCaseNames.contains(testCaseName)) {\n\t\t\t\t\tthrow new Exception(\n\t\t\t\t\t\t\"Duplicate name \" + testCaseName + \" at \" + fileName);\n\t\t\t\t}\n\n\t\t\t\t_testCaseClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_testCaseFileNames.add(fileName);\n\n\t\t\t\t_testCaseNames.add(testCaseName);\n\n\t\t\t\t_testCaseRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".testsuite\")) {\n\t\t\t\tString testSuiteName = _getName(fileName);\n\n\t\t\t\tif (_testSuiteNames.contains(testSuiteName)) {\n\t\t\t\t\tthrow new Exception(\n\t\t\t\t\t\t\"Duplicate name \" + testSuiteName + \" at \" + fileName);\n\t\t\t\t}\n\n\t\t\t\t_testSuiteClassNames.add(_getClassName(fileName));\n\n\t\t\t\t_testSuiteFileNames.add(fileName);\n\n\t\t\t\t_testSuiteNames.add(testSuiteName);\n\n\t\t\t\t_testSuiteRootElements.put(fileName, _getRootElement(fileName));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid file \" + fileName);\n\t\t\t}\n\t\t}\n\t}","commit_id":"8248e04bf330feeee68254ebc6e5afcf7bc3c83a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Attachments getAttachmentsForDocument(Document doc, int start, int number) throws XWikiException\n    {\n        Attachments attachments = objectFactory.createAttachments();\n\n        List<com.xpn.xwiki.api.Attachment> xwikiAttachments = doc.getAttachmentList();\n\n        RangeIterable<com.xpn.xwiki.api.Attachment> ri =\n            new RangeIterable<com.xpn.xwiki.api.Attachment>(xwikiAttachments, start, number);\n\n        /*\n         * We need to retrieve the base XWiki documents because Document doesn't have a method for retrieving the\n         * external URL for an attachment\n         */\n        XWikiDocument xwikiDocument =\n            Utils.getXWiki(componentManager).getDocument(doc.getPrefixedFullName(),\n                Utils.getXWikiContext(componentManager));\n\n        for (com.xpn.xwiki.api.Attachment xwikiAttachment : ri) {\n            String attachmentXWikiAbsoluteUrl =\n                xwikiDocument.getExternalAttachmentURL(xwikiAttachment.getFilename(), \"download\",\n                    Utils.getXWikiContext(componentManager)).toString();\n\n            String attachmentXWikiRelativeUrl =\n                xwikiDocument.getAttachmentURL(xwikiAttachment.getFilename(), \"download\",\n                    Utils.getXWikiContext(componentManager)).toString();\n\n            attachments.getAttachments().add(\n                DomainObjectFactory.createAttachment(objectFactory, uriInfo.getBaseUri(), xwikiAttachment,\n                    attachmentXWikiRelativeUrl, attachmentXWikiAbsoluteUrl));\n        }\n\n        return attachments;\n    }","id":18378,"modified_method":"protected Attachments getAttachmentsForDocument(Document doc, int start, int number) throws XWikiException\n    {\n        Attachments attachments = objectFactory.createAttachments();\n\n        List<com.xpn.xwiki.api.Attachment> xwikiAttachments = doc.getAttachmentList();\n\n        RangeIterable<com.xpn.xwiki.api.Attachment> ri =\n            new RangeIterable<com.xpn.xwiki.api.Attachment>(xwikiAttachments, start, number);\n\n        for (com.xpn.xwiki.api.Attachment xwikiAttachment : ri) {\n            URL url =\n                Utils.getXWikiContext(componentManager).getURLFactory().createAttachmentURL(\n                    xwikiAttachment.getFilename(), doc.getSpace(), doc.getName(), \"download\", null, doc.getWiki(),\n                    Utils.getXWikiContext(componentManager));\n            String attachmentXWikiAbsoluteUrl = url.toString();\n            String attachmentXWikiRelativeUrl =\n                Utils.getXWikiContext(componentManager).getURLFactory().getURL(url,\n                    Utils.getXWikiContext(componentManager));\n\n            attachments.getAttachments().add(\n                DomainObjectFactory.createAttachment(objectFactory, uriInfo.getBaseUri(), xwikiAttachment,\n                    attachmentXWikiRelativeUrl, attachmentXWikiAbsoluteUrl));\n        }\n\n        return attachments;\n    }","commit_id":"279de83de52686a0508970de2a8d03ffe5f2fc1c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public TypesystemDescriptor() {\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_ConceptRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Concept_FindInstances_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Concept_GetAllSubConcepts_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Concept_NewInstance_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_EnumMemberReference_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_LinkList_AddChildOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_LinkList_AddNewChildOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_LinkList_InsertChildFirstOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Link_DeleteChildOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Link_SetNewChildOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Link_SetTargetOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_CreateNewNodeOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_NodesIncludingImportedOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_NodesOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_RootsIncludingImportedOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_RootsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Node_CopyOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Node_GetAncestorOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_AbstractNodeRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_AsNodeOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_AttributeAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_CheckedModuleQualifiedName_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_CheckedModuleReference_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ConceptFqNameRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ConceptPropertyNameRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ConceptProperty_SetOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_GetAllSuperConcepts_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_GetDirectSuperConcepts_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_GetHierarchy_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_IsExactlyOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_IsSubConceptOfOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_IsSuperConceptOfOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_EnumMemberValueRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_EnumMember_NameOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_EnumMember_ValueOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_EqualsStructurallyExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_IRefConceptArg_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_IfInstanceOfStatement_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_IfInstanceOfVariable_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_LanguageReferenceExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_LinkList_RemoveAllChildrenOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_LinkNameRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_LinkRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ModelReferenceExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Model_AddRootOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Model_GetLongNameOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Model_GetModule_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ModuleReferenceExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_NodePointerExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_DeleteOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_DetachOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetAllSiblingsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetAncestorsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetChildrenOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetConceptOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetContainingLinkOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetContainingRoleOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetContainingRootOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetDescendantsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetIndexInParentOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetModelOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetNextSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetNextSiblingsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetParentOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetPrevSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetPrevSiblingsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetReferenceOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetReferencesOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetReferentSearchScopeOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_InsertNewNextSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_InsertNewPrevSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_InsertNextSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_InsertPrevSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsAttributeOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsInstanceOfOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsNotNullOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsNullOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsRoleOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_ReplaceWithAnotherOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_ReplaceWithNewOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_OfConceptOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_OperationParm_Concept_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_OperationParm_LinkQualifier_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_OperationParm_LinkQualifier_LinkQualifier_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_PoundExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_PropertyNameRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Property_HasValue_Enum_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Property_HasValue_Simple_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Property_SetOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ReadConceptReferenceExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Reference_GetLinkDeclarationOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Reference_GetResolveInfo_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Reference_GetRoleOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Reference_GetTargetOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SConceptLinkAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SConceptPropertyAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnumOperationInvocation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberForNameOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberForNameOperation_checkArg_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberForValueOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberForValueOperation_checkArg_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MembersOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SLinkAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SLinkImplicitSelect_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SLinkListAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SNodeCreator_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SNodeListCreator_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SNodeTypeCastExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SPropertyAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SearchScope_ContainsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SemanticDowncastExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_ConceptSwitch_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_LinkRefExpression_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_Link_DeleteChildOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_Link_SetNewChildOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_Node_DetachOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_Node_GetReferentSearchScopeOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SConceptLinkAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SConceptPropertyAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SLinkAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SLinkListAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SNodeOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SPropertyAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_ClassifierTypeSModel_SModelType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_ClassifierTypeSNode_SNodeType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_ListType_ListType_elementSNode_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SConceptTypeType_SConceptTypeType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SConceptType_SNodeType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SEnumMemberType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SModelType_ClassifierTypeSModel_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeListType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_BaseConcept_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_ClassifierTypeSNode_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_SConceptType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_SEnumMemberType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_SNodeType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SReferenceType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SearchScopeType_ISearchScope_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SetType_SetType_elementSNode_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      ComparisonRule_Runtime comparisonRule = new comparable_SEnumMemberType__node_EnumerationMemberDeclaration_ComparisonRule();\n      this.myComparisonRules.add(comparisonRule);\n    }\n    {\n      ComparisonRule_Runtime comparisonRule = new interface_node_types_are_comparable_ComparisonRule();\n      this.myComparisonRules.add(comparisonRule);\n    }\n    {\n      InequationReplacementRule_Runtime eliminationRule = new nlist_subtypeOf_list_of_nodes_InequationReplacementRule();\n      this.myInequationReplacementRules.add(eliminationRule);\n    }\n    {\n      IVariableConverter_Runtime converter = new IVariableConverter_Runtime() {\n        public boolean isApplicable(SNode contextNode, String role, SNode variable, boolean isAggregation) {\n          if (isAggregation) {\n            return false;\n          }\n          if (!(SNodeOperations.isInstanceOf(contextNode, \"jetbrains.mps.lang.smodel.structure.SNodeType\"))) {\n            return false;\n          }\n          SNode concept = SLinkOperations.getTarget(SNodeOperations.cast(contextNode, \"jetbrains.mps.lang.smodel.structure.SNodeType\"), \"concept\", false);\n          return concept == variable;\n        }\n\n        public SNode convert(SNode contextNode, String role, SNode variable, boolean isAggregation) {\n          return SNodeOperations.getNode(\"r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)\", \"1133920641626\");\n        }\n      };\n      this.myVariableConverters.add(converter);\n    }\n    {\n      IVariableConverter_Runtime converter = new IVariableConverter_Runtime() {\n        public boolean isApplicable(SNode contextNode, String role, SNode variable, boolean isAggregation) {\n          if (isAggregation) {\n            return false;\n          }\n          if (!(SNodeOperations.isInstanceOf(contextNode, \"jetbrains.mps.lang.smodel.structure.SConceptType\"))) {\n            return false;\n          }\n          SNode concept = SLinkOperations.getTarget(SNodeOperations.cast(contextNode, \"jetbrains.mps.lang.smodel.structure.SConceptType\"), \"conceptDeclaraton\", false);\n          return concept == variable;\n        }\n\n        public SNode convert(SNode contextNode, String role, SNode variable, boolean isAggregation) {\n          return SNodeOperations.getNode(\"r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)\", \"1133920641626\");\n        }\n      };\n      this.myVariableConverters.add(converter);\n    }\n  }","id":18379,"modified_method":"public TypesystemDescriptor() {\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_ConceptRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Concept_FindInstances_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Concept_GetAllSubConcepts_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Concept_NewInstance_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_EnumMemberReference_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_LinkList_AddChildOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_LinkList_AddNewChildOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_LinkList_InsertChildFirstOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Link_DeleteChildOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Link_SetNewChildOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Link_SetTargetOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_CreateNewNodeOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_NodesIncludingImportedOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_NodesOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_RootsIncludingImportedOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Model_RootsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Node_CopyOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeOf_Node_GetAncestorOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_AbstractNodeRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_AsNodeOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_AttributeAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_CheckedModuleQualifiedName_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_CheckedModuleReference_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ConceptFqNameRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ConceptPropertyNameRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ConceptProperty_SetOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_GetAllSuperConcepts_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_GetDirectSuperConcepts_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_GetHierarchy_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_IsExactlyOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_IsSubConceptOfOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Concept_IsSuperConceptOfOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_EnumMemberValueRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_EnumMember_NameOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_EnumMember_ValueOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_EqualsStructurallyExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_IfInstanceOfStatement_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_IfInstanceOfVariable_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_LanguageReferenceExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_LinkList_RemoveAllChildrenOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_LinkNameRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_LinkRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ModelReferenceExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Model_AddRootOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Model_GetLongNameOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Model_GetModule_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ModuleReferenceExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_NodePointerExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_DeleteOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_DetachOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetAllSiblingsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetAncestorsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetChildrenOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetConceptOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetContainingLinkOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetContainingRoleOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetContainingRootOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetDescendantsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetIndexInParentOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetModelOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetNextSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetNextSiblingsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetParentOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetPrevSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetPrevSiblingsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetReferenceOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetReferencesOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_GetReferentSearchScopeOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_InsertNewNextSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_InsertNewPrevSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_InsertNextSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_InsertPrevSiblingOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsAttributeOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsInstanceOfOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsNotNullOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsNullOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_IsRoleOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_ReplaceWithAnotherOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Node_ReplaceWithNewOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_OfConceptOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_OperationParm_Concept_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_OperationParm_LinkQualifier_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_OperationParm_LinkQualifier_LinkQualifier_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_PoundExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_PropertyNameRefExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Property_HasValue_Enum_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Property_HasValue_Simple_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Property_SetOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_ReadConceptReferenceExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_RefConcept_Reference_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Reference_GetLinkDeclarationOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Reference_GetResolveInfo_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Reference_GetRoleOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_Reference_GetTargetOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SConceptLinkAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SConceptPropertyAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnumOperationInvocation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberForNameOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberForNameOperation_checkArg_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberForValueOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberForValueOperation_checkArg_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MemberOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SEnum_MembersOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SLinkAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SLinkImplicitSelect_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SLinkListAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SNodeCreator_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SNodeListCreator_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SNodeTypeCastExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SPropertyAccess_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SearchScope_ContainsOperation_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      InferenceRule_Runtime inferenceRule = new typeof_SemanticDowncastExpression_InferenceRule();\n      this.myInferenceRules.add(inferenceRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_ConceptSwitch_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_LinkRefExpression_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_Link_DeleteChildOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_Link_SetNewChildOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_Node_DetachOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_Node_GetReferentSearchScopeOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SConceptLinkAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SConceptPropertyAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SLinkAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SLinkListAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SNodeOperation_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SPropertyAccess_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_ClassifierTypeSModel_SModelType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_ClassifierTypeSNode_SNodeType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_ListType_ListType_elementSNode_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SConceptTypeType_SConceptTypeType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SConceptType_SNodeType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SEnumMemberType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SModelType_ClassifierTypeSModel_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeListType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_BaseConcept_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_ClassifierTypeSNode_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_SConceptType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_SEnumMemberType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SNodeType_SNodeType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SReferenceType_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SearchScopeType_ISearchScope_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      SubtypingRule_Runtime subtypingRule = new supertypesOf_SetType_SetType_elementSNode_SubtypingRule();\n      this.mySubtypingRules.add(subtypingRule);\n    }\n    {\n      ComparisonRule_Runtime comparisonRule = new comparable_SEnumMemberType__node_EnumerationMemberDeclaration_ComparisonRule();\n      this.myComparisonRules.add(comparisonRule);\n    }\n    {\n      ComparisonRule_Runtime comparisonRule = new interface_node_types_are_comparable_ComparisonRule();\n      this.myComparisonRules.add(comparisonRule);\n    }\n    {\n      InequationReplacementRule_Runtime eliminationRule = new nlist_subtypeOf_list_of_nodes_InequationReplacementRule();\n      this.myInequationReplacementRules.add(eliminationRule);\n    }\n    {\n      IVariableConverter_Runtime converter = new IVariableConverter_Runtime() {\n        public boolean isApplicable(SNode contextNode, String role, SNode variable, boolean isAggregation) {\n          if (isAggregation) {\n            return false;\n          }\n          if (!(SNodeOperations.isInstanceOf(contextNode, \"jetbrains.mps.lang.smodel.structure.SNodeType\"))) {\n            return false;\n          }\n          SNode concept = SLinkOperations.getTarget(SNodeOperations.cast(contextNode, \"jetbrains.mps.lang.smodel.structure.SNodeType\"), \"concept\", false);\n          return concept == variable;\n        }\n\n        public SNode convert(SNode contextNode, String role, SNode variable, boolean isAggregation) {\n          return SNodeOperations.getNode(\"r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)\", \"1133920641626\");\n        }\n      };\n      this.myVariableConverters.add(converter);\n    }\n    {\n      IVariableConverter_Runtime converter = new IVariableConverter_Runtime() {\n        public boolean isApplicable(SNode contextNode, String role, SNode variable, boolean isAggregation) {\n          if (isAggregation) {\n            return false;\n          }\n          if (!(SNodeOperations.isInstanceOf(contextNode, \"jetbrains.mps.lang.smodel.structure.SConceptType\"))) {\n            return false;\n          }\n          SNode concept = SLinkOperations.getTarget(SNodeOperations.cast(contextNode, \"jetbrains.mps.lang.smodel.structure.SConceptType\"), \"conceptDeclaraton\", false);\n          return concept == variable;\n        }\n\n        public SNode convert(SNode contextNode, String role, SNode variable, boolean isAggregation) {\n          return SNodeOperations.getNode(\"r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)\", \"1133920641626\");\n        }\n      };\n      this.myVariableConverters.add(converter);\n    }\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_54sxeo_a0a0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanType\", null, null, GlobalScope.getInstance(), false);\n    return quotedNode_1;\n  }","id":18380,"modified_method":"private static SNode _quotation_createNode_54sxeo_a0a0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SConceptType\", null, null, GlobalScope.getInstance(), false);\n    return quotedNode_1;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode op, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    {\n      SNode _nodeToCheck_1029348928467 = op;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094867528\", 0, null);\n      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094867532\", true), (SNode) _quotation_createNode_54sxeo_a0a0b(), _info_12389875345);\n    }\n  }","id":18381,"modified_method":"public void applyRule(final SNode op, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    {\n      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(op, \"conceptArgument\", true);\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"7057947030084340457\", 0, null);\n      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"7057947030084340460\", true), (SNode) _quotation_createNode_54sxeo_a0a0b(), false, true, _info_12389875345);\n    }\n\n    {\n      SNode _nodeToCheck_1029348928467 = op;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094867528\", 0, null);\n      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094867532\", true), (SNode) _quotation_createNode_54sxeo_a0c0b(), _info_12389875345);\n    }\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode op, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode conceptArg = SLinkOperations.getTarget(op, \"conceptArgument\", true);\n    {\n      SNode _nodeToCheck_1029348928467 = op;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094914076\", 0, null);\n      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094914081\", true), (SNode) _quotation_createNode_35z7h3_a0b0b(), _info_12389875345);\n    }\n  }","id":18382,"modified_method":"public void applyRule(final SNode op, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode conceptArg = SLinkOperations.getTarget(op, \"conceptArgument\", true);\n    {\n      SNode _nodeToCheck_1029348928467 = conceptArg;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033727264\", 0, null);\n      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033727266\", true), (SNode) _quotation_createNode_35z7h3_a0b0b(), false, true, _info_12389875345);\n    }\n\n    {\n      SNode _nodeToCheck_1029348928467 = op;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094914076\", 0, null);\n      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094914081\", true), (SNode) _quotation_createNode_35z7h3_a0d0b(), _info_12389875345);\n    }\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_35z7h3_a0b0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanType\", null, null, GlobalScope.getInstance(), false);\n    return quotedNode_1;\n  }","id":18383,"modified_method":"private static SNode _quotation_createNode_35z7h3_a0b0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SConceptType\", null, null, GlobalScope.getInstance(), false);\n    return quotedNode_1;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode op, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode conceptArg = SLinkOperations.getTarget(op, \"conceptArgument\", true);\n    {\n      SNode _nodeToCheck_1029348928467 = op;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094916743\", 0, null);\n      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094916748\", true), (SNode) _quotation_createNode_goto9h_a0b0b(), _info_12389875345);\n    }\n  }","id":18384,"modified_method":"public void applyRule(final SNode op, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode conceptArg = SLinkOperations.getTarget(op, \"conceptArgument\", true);\n    {\n      SNode _nodeToCheck_1029348928467 = conceptArg;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033741312\", 0, null);\n      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033741314\", true), (SNode) _quotation_createNode_goto9h_a0b0b(), false, true, _info_12389875345);\n    }\n\n    {\n      SNode _nodeToCheck_1029348928467 = op;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094916743\", 0, null);\n      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635094916748\", true), (SNode) _quotation_createNode_goto9h_a0d0b(), _info_12389875345);\n    }\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_goto9h_a0b0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanType\", null, null, GlobalScope.getInstance(), false);\n    return quotedNode_1;\n  }","id":18385,"modified_method":"private static SNode _quotation_createNode_goto9h_a0b0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SConceptType\", null, null, GlobalScope.getInstance(), false);\n    return quotedNode_1;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_dwt96n_a0b0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_1.addChild(\"elementType\", quotedNode_2);\n    return quotedNode_1;\n  }","id":18386,"modified_method":"private static SNode _quotation_createNode_dwt96n_a0a0b0a0a0d0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_1.addChild(\"elementType\", quotedNode_2);\n    return quotedNode_1;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_dwt96n_a0a0a1a0a0a2a1(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_3, \"concept\", (SNode) parameter_1);\n    quotedNode_2.addChild(\"elementType\", quotedNode_3);\n    return quotedNode_2;\n  }","id":18387,"modified_method":"private static SNode _quotation_createNode_dwt96n_a0a0a1a0a0a3a1(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_3, \"concept\", (SNode) parameter_1);\n    quotedNode_2.addChild(\"elementType\", quotedNode_3);\n    return quotedNode_2;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_dwt96n_a0a0a2a1(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_3, \"concept\", (SNode) parameter_1);\n    quotedNode_2.addChild(\"elementType\", quotedNode_3);\n    return quotedNode_2;\n  }","id":18388,"modified_method":"private static SNode _quotation_createNode_dwt96n_a0a0a3a1(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_3, \"concept\", (SNode) parameter_1);\n    quotedNode_2.addChild(\"elementType\", quotedNode_3);\n    return quotedNode_2;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_dwt96n_a0a0b0a0a0c0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_1.addChild(\"elementType\", quotedNode_2);\n    return quotedNode_1;\n  }","id":18389,"modified_method":"private static SNode _quotation_createNode_dwt96n_a0c0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_1.addChild(\"elementType\", quotedNode_2);\n    return quotedNode_1;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode instancesExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    if (!(typeCheckingContext.isSingleTypeComputation())) {\n      {\n        SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true);\n        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"473081947984802161\", 0, null);\n        typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"473081947984802167\", true), (SNode) _quotation_createNode_dwt96n_a0a0b(), true, true, _info_12389875345);\n      }\n    }\n    {\n      SNode _nodeToCheck_1029348928467 = instancesExpression;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"473081947984804985\", 0, null);\n      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"473081947984804988\", true), (SNode) _quotation_createNode_dwt96n_a0b0b(), false, true, _info_12389875345);\n    }\n    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true), \"jetbrains.mps.lang.smodel.structure.PoundExpression\")) {\n      {\n        final SNode conceptParameterType = typeCheckingContext.typeOf(SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true), \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024291279\", true);\n        typeCheckingContext.whenConcrete(conceptParameterType, new Runnable() {\n          public void run() {\n            if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(conceptParameterType), \"jetbrains.mps.lang.smodel.structure.SConceptType\")) {\n              SNode conceptType = SNodeOperations.cast(typeCheckingContext.getExpandedNode(conceptParameterType), \"jetbrains.mps.lang.smodel.structure.SConceptType\");\n              if (SLinkOperations.getTarget(conceptType, \"conceptDeclaraton\", false) == null) {\n                {\n                  SNode _nodeToCheck_1029348928467 = instancesExpression;\n                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024608968\", 0, null);\n                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024608970\", true), (SNode) _quotation_createNode_dwt96n_a0a0b0a0a0c0b(), _info_12389875345);\n                }\n              } else {\n                {\n                  SNode _nodeToCheck_1029348928467 = instancesExpression;\n                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024291267\", 0, null);\n                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024291269\", true), (SNode) _quotation_createNode_dwt96n_a0a0a1a0a0a2a1(SLinkOperations.getTarget(conceptType, \"conceptDeclaraton\", false)), _info_12389875345);\n                }\n              }\n            }\n          }\n        }, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024291258\", false, false);\n      }\n    } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true), \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\")) {\n      {\n        SNode _nodeToCheck_1029348928467 = instancesExpression;\n        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"4693937538539160493\", 0, null);\n        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"4693937538539160495\", true), (SNode) _quotation_createNode_dwt96n_a0a0a2a1(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true), \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\"), \"conceptDeclaration\", false)), _info_12389875345);\n      }\n    }\n  }","id":18390,"modified_method":"public void applyRule(final SNode instancesExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    {\n      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true);\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"7057947030084340457\", 0, null);\n      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"7057947030084340460\", true), (SNode) _quotation_createNode_dwt96n_a0a0b(), false, true, _info_12389875345);\n    }\n\n    {\n      SNode _nodeToCheck_1029348928467 = instancesExpression;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"473081947984804985\", 0, null);\n      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"473081947984804988\", true), (SNode) _quotation_createNode_dwt96n_a0c0b(), false, true, _info_12389875345);\n    }\n    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true), \"jetbrains.mps.lang.smodel.structure.PoundExpression\")) {\n      {\n        final SNode conceptParameterType = typeCheckingContext.typeOf(SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true), \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024291279\", true);\n        typeCheckingContext.whenConcrete(conceptParameterType, new Runnable() {\n          public void run() {\n            if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(conceptParameterType), \"jetbrains.mps.lang.smodel.structure.SConceptType\")) {\n              SNode conceptType = SNodeOperations.cast(typeCheckingContext.getExpandedNode(conceptParameterType), \"jetbrains.mps.lang.smodel.structure.SConceptType\");\n              if (SLinkOperations.getTarget(conceptType, \"conceptDeclaraton\", false) == null) {\n                {\n                  SNode _nodeToCheck_1029348928467 = instancesExpression;\n                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024608968\", 0, null);\n                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024608970\", true), (SNode) _quotation_createNode_dwt96n_a0a0b0a0a0d0b(), _info_12389875345);\n                }\n              } else {\n                {\n                  SNode _nodeToCheck_1029348928467 = instancesExpression;\n                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024291267\", 0, null);\n                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024291269\", true), (SNode) _quotation_createNode_dwt96n_a0a0a1a0a0a3a1(SLinkOperations.getTarget(conceptType, \"conceptDeclaraton\", false)), _info_12389875345);\n                }\n              }\n            }\n          }\n        }, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"6864030874024291258\", false, false);\n      }\n    } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true), \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\")) {\n      {\n        SNode _nodeToCheck_1029348928467 = instancesExpression;\n        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"4693937538539160493\", 0, null);\n        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:7e8cfa8a-da13-467d-9878-63b90b943128(jetbrains.mps.console.blCommand.typesystem)\", \"4693937538539160495\", true), (SNode) _quotation_createNode_dwt96n_a0a0a3a1(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(instancesExpression, \"conceptArg\", true), \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\"), \"conceptDeclaration\", false)), _info_12389875345);\n      }\n    }\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_bsicn0_a0b0b0b(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_2, \"concept\", (SNode) parameter_1);\n    return quotedNode_2;\n  }","id":18391,"modified_method":"private static SNode _quotation_createNode_bsicn0_a0b0c0b(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_2, \"concept\", (SNode) parameter_1);\n    return quotedNode_2;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_bsicn0_a0d0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanType\", null, null, GlobalScope.getInstance(), false);\n    return quotedNode_1;\n  }","id":18392,"modified_method":"private static SNode _quotation_createNode_bsicn0_a0b0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SConceptType\", null, null, GlobalScope.getInstance(), false);\n    return quotedNode_1;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode op, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode conceptArg = SLinkOperations.getTarget(op, \"conceptArgument\", true);\n    if (SNodeOperations.isInstanceOf(conceptArg, \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\")) {\n      SNode conceptReference = SNodeOperations.cast(conceptArg, \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\");\n      {\n        SNode _nodeToCheck_1029348928467 = op;\n        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4101496941862450650\", 0, null);\n        typeCheckingContext.createComparableEquation((SNode) typeCheckingContext.typeOf(IOperation_Behavior.call_getOperand_1213877410070(op), \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4101496941862450640\", true), (SNode) _quotation_createNode_bsicn0_a0b0b0b(SLinkOperations.getTarget(conceptReference, \"conceptDeclaration\", false)), false, _info_12389875345);\n      }\n    }\n\n    {\n      SNode _nodeToCheck_1029348928467 = op;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635095118770\", 0, null);\n      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635095118775\", true), (SNode) _quotation_createNode_bsicn0_a0d0b(), _info_12389875345);\n    }\n  }","id":18393,"modified_method":"public void applyRule(final SNode op, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    SNode conceptArg = SLinkOperations.getTarget(op, \"conceptArgument\", true);\n    {\n      SNode _nodeToCheck_1029348928467 = conceptArg;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033747690\", 0, null);\n      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033747692\", true), (SNode) _quotation_createNode_bsicn0_a0b0b(), false, true, _info_12389875345);\n    }\n    if (SNodeOperations.isInstanceOf(conceptArg, \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\")) {\n      SNode conceptReference = SNodeOperations.cast(conceptArg, \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\");\n      {\n        SNode _nodeToCheck_1029348928467 = op;\n        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4101496941862450650\", 0, null);\n        typeCheckingContext.createComparableEquation((SNode) typeCheckingContext.typeOf(IOperation_Behavior.call_getOperand_1213877410070(op), \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4101496941862450640\", true), (SNode) _quotation_createNode_bsicn0_a0b0c0b(SLinkOperations.getTarget(conceptReference, \"conceptDeclaration\", false)), false, _info_12389875345);\n      }\n    }\n\n    {\n      SNode _nodeToCheck_1029348928467 = op;\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635095118770\", 0, null);\n      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"654553635095118775\", true), (SNode) _quotation_createNode_bsicn0_a0e0b(), _info_12389875345);\n    }\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_nf8bul_a0a0a1a0a0a1a1(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_3, \"concept\", (SNode) parameter_1);\n    quotedNode_2.addChild(\"elementType\", quotedNode_3);\n    return quotedNode_2;\n  }","id":18394,"modified_method":"private static SNode _quotation_createNode_nf8bul_a0a0a1a0a0a3a1(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_3, \"concept\", (SNode) parameter_1);\n    quotedNode_2.addChild(\"elementType\", quotedNode_3);\n    return quotedNode_2;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode ofConceptOperation, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(ofConceptOperation), \"jetbrains.mps.baseLanguage.structure.DotExpression\")) {\n      if (!(typeCheckingContext.isSingleTypeComputation())) {\n        {\n          SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(ofConceptOperation), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true);\n          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6159542558115988221\", 0, null);\n          typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6159542558115988224\", true), (SNode) _quotation_createNode_nf8bul_a0a0a0b(), true, true, _info_12389875345);\n        }\n      }\n    } else {\n      {\n        MessageTarget errorTarget = new NodeMessageTarget();\n        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ofConceptOperation, \"OfConceptOperation should be child of DotExpression\", \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6159542558115930305\", null, errorTarget);\n      }\n    }\n    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ofConceptOperation, \"requestedConcept\", true), \"jetbrains.mps.lang.smodel.structure.PoundExpression\")) {\n      {\n        final SNode requestedConceptType = typeCheckingContext.typeOf(SLinkOperations.getTarget(ofConceptOperation, \"requestedConcept\", true), \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4223933980257845797\", true);\n        typeCheckingContext.whenConcrete(requestedConceptType, new Runnable() {\n          public void run() {\n            if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(requestedConceptType), \"jetbrains.mps.lang.smodel.structure.SConceptType\")) {\n              SNode conceptType = SNodeOperations.cast(typeCheckingContext.getExpandedNode(requestedConceptType), \"jetbrains.mps.lang.smodel.structure.SConceptType\");\n              if (SLinkOperations.getTarget(conceptType, \"conceptDeclaraton\", false) == null) {\n                {\n                  SNode _nodeToCheck_1029348928467 = typeCheckingContext.getExpandedNode(requestedConceptType);\n                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6864030874024608968\", 0, null);\n                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6864030874024608970\", true), (SNode) _quotation_createNode_nf8bul_a0a0b0a0a0b0b(), _info_12389875345);\n                }\n              } else {\n                {\n                  SNode _nodeToCheck_1029348928467 = ofConceptOperation;\n                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6864030874024291267\", 0, null);\n                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6864030874024291269\", true), (SNode) _quotation_createNode_nf8bul_a0a0a1a0a0a1a1(SLinkOperations.getTarget(conceptType, \"conceptDeclaraton\", false)), _info_12389875345);\n                }\n              }\n            }\n          }\n        }, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4223933980257845707\", false, false);\n      }\n    } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ofConceptOperation, \"requestedConcept\", true), \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\")) {\n      {\n        SNode _nodeToCheck_1029348928467 = ofConceptOperation;\n        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4223933980263548512\", 0, null);\n        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4223933980263539437\", true), (SNode) _quotation_createNode_nf8bul_a0a0a1a1(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(ofConceptOperation, \"requestedConcept\", true), \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\"), \"conceptDeclaration\", false)), _info_12389875345);\n      }\n    }\n  }","id":18395,"modified_method":"public void applyRule(final SNode ofConceptOperation, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(ofConceptOperation), \"jetbrains.mps.baseLanguage.structure.DotExpression\")) {\n      if (!(typeCheckingContext.isSingleTypeComputation())) {\n        {\n          SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(ofConceptOperation), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true);\n          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6159542558115988221\", 0, null);\n          typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6159542558115988224\", true), (SNode) _quotation_createNode_nf8bul_a0a0a0b(), true, true, _info_12389875345);\n        }\n      }\n    } else {\n      {\n        MessageTarget errorTarget = new NodeMessageTarget();\n        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ofConceptOperation, \"OfConceptOperation should be child of DotExpression\", \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6159542558115930305\", null, errorTarget);\n      }\n    }\n    {\n      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(ofConceptOperation, \"requestedConcept\", true);\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033755799\", 0, null);\n      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033755801\", true), (SNode) _quotation_createNode_nf8bul_a0b0b(), false, true, _info_12389875345);\n    }\n\n    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ofConceptOperation, \"requestedConcept\", true), \"jetbrains.mps.lang.smodel.structure.PoundExpression\")) {\n      {\n        final SNode requestedConceptType = typeCheckingContext.typeOf(SLinkOperations.getTarget(ofConceptOperation, \"requestedConcept\", true), \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4223933980257845797\", true);\n        typeCheckingContext.whenConcrete(requestedConceptType, new Runnable() {\n          public void run() {\n            if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(requestedConceptType), \"jetbrains.mps.lang.smodel.structure.SConceptType\")) {\n              SNode conceptType = SNodeOperations.cast(typeCheckingContext.getExpandedNode(requestedConceptType), \"jetbrains.mps.lang.smodel.structure.SConceptType\");\n              if (SLinkOperations.getTarget(conceptType, \"conceptDeclaraton\", false) == null) {\n                {\n                  SNode _nodeToCheck_1029348928467 = typeCheckingContext.getExpandedNode(requestedConceptType);\n                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6864030874024608968\", 0, null);\n                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6864030874024608970\", true), (SNode) _quotation_createNode_nf8bul_a0a0b0a0a0d0b(), _info_12389875345);\n                }\n              } else {\n                {\n                  SNode _nodeToCheck_1029348928467 = ofConceptOperation;\n                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6864030874024291267\", 0, null);\n                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"6864030874024291269\", true), (SNode) _quotation_createNode_nf8bul_a0a0a1a0a0a3a1(SLinkOperations.getTarget(conceptType, \"conceptDeclaraton\", false)), _info_12389875345);\n                }\n              }\n            }\n          }\n        }, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4223933980257845707\", false, false);\n      }\n    } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ofConceptOperation, \"requestedConcept\", true), \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\")) {\n      {\n        SNode _nodeToCheck_1029348928467 = ofConceptOperation;\n        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4223933980263548512\", 0, null);\n        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"4223933980263539437\", true), (SNode) _quotation_createNode_nf8bul_a0a0a3a1(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(ofConceptOperation, \"requestedConcept\", true), \"jetbrains.mps.lang.smodel.structure.RefConcept_Reference\"), \"conceptDeclaration\", false)), _info_12389875345);\n      }\n    }\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_nf8bul_a0a0a1a1(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_3, \"concept\", (SNode) parameter_1);\n    quotedNode_2.addChild(\"elementType\", quotedNode_3);\n    return quotedNode_2;\n  }","id":18396,"modified_method":"private static SNode _quotation_createNode_nf8bul_a0a0a3a1(Object parameter_1) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_3, \"concept\", (SNode) parameter_1);\n    quotedNode_2.addChild(\"elementType\", quotedNode_3);\n    return quotedNode_2;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_nf8bul_a0a0b0a0a0b0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SequenceType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_1.addChild(\"elementType\", quotedNode_2);\n    return quotedNode_1;\n  }","id":18397,"modified_method":"private static SNode _quotation_createNode_nf8bul_a0b0b() {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_1 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SConceptType\", null, null, GlobalScope.getInstance(), false);\n    return quotedNode_1;\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode opp, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n  }","id":18398,"modified_method":"public void applyRule(final SNode opp, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {\n    {\n      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(opp, \"conceptArgument\", true);\n      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033770435\", 0, null);\n      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, \"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)\", \"8933148862033770437\", true), (SNode) _quotation_createNode_eac4ma_a0a0b(), false, true, _info_12389875345);\n    }\n  }","commit_id":"7fb37f528742d460880f1bce32f5d5afc78456c5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public synchronized void rotate() throws IOException\n    {\n        xaTf.flushAll();\n        String newLogFile = getLog2FileName();\n        String currentLogFile = getLog1FileName();\n        char newActiveLog = LOG2;\n        long currentVersion = xaTf.getCurrentVersion();\n        String oldCopy = getFileName( currentVersion );\n        if ( currentLog == CLEAN || currentLog == LOG2 )\n        {\n            newActiveLog = LOG1;\n            newLogFile = getLog1FileName();\n            currentLogFile = getLog2FileName();\n        }\n        else\n        {\n            assert currentLog == LOG1;\n        }\n        assertFileDoesntExist( newLogFile, \"New log file\" );\n        assertFileDoesntExist( oldCopy, \"Copy log file\" );\n//        System.out.println( \" ---- Performing rotate on \" + currentLogFile + \" -----\" );\n//        DumpLogicalLog.main( new String[] { currentLogFile } );\n//        System.out.println( \" ----- end ----\" );\n        msgLog.logMessage( \"Rotating [\" + currentLogFile + \"] @ version=\" + \n                currentVersion + \" to \" +  newLogFile + \"from position \" + \n                writeBuffer.getFileChannelPosition() );\n        long endPosition = writeBuffer.getFileChannelPosition();\n        writeBuffer.force();\n        FileChannel newLog = new RandomAccessFile( \n            newLogFile, \"rw\" ).getChannel();\n        buffer.clear();\n        buffer.putLong( currentVersion + 1 );\n        long lastTx = xaTf.getLastCommittedTx();\n        buffer.putLong( lastTx ).flip();\n        previousLogLastCommittedTx = lastTx;\n        if ( newLog.write( buffer ) != 16 )\n        {\n            throw new IOException( \"Unable to write log version to new\" );\n        }\n        fileChannel.position( 0 );\n        long[] header =  readAndAssertLogHeader( buffer, fileChannel, currentVersion );\n        if ( xidIdentMap.size() > 0 )\n        {\n            fileChannel.position( getFirstStartEntry( endPosition ) );\n        }\n        LogEntry entry;\n        Set<Integer> startEntriesWritten = new HashSet<Integer>();\n        while ((entry = LogIoUtils.readEntry( buffer, fileChannel, cf )) != null )\n        {\n            if ( xidIdentMap.get( entry.getIdentifier() ) != null )\n            {\n                if ( entry instanceof LogEntry.Start )\n                {\n                    ((LogEntry.Start) entry).setStartPosition( newLog.position() );\n                    startEntriesWritten.add( entry.getIdentifier() );\n                }\n                if ( !startEntriesWritten.contains( entry.getIdentifier() ) )\n                {\n                    throw new IOException( \"Unable to rotate log since start entry for identifier[\" +\n                            entry.getIdentifier() + \"] not written\" );\n                }\n                LogBuffer newLogBuffer = new DirectLogBuffer( newLog, buffer );\n                LogIoUtils.writeLogEntry( entry, newLogBuffer );\n            }\n        }\n        msgLog.logMessage( \"Rotate: old log scanned, newLog @ pos=\" + \n                newLog.position() );\n        newLog.force( false );\n        releaseCurrentLogFile();\n        setActiveLog( newActiveLog );\n        if ( keepLogs )\n        {\n            renameCurrentLogFileAndIncrementVersion( currentLogFile, \n                endPosition );\n        }\n        else\n        {\n            deleteCurrentLogFile( currentLogFile );\n            xaTf.getAndSetNewVersion();\n        }\n        if ( xaTf.getCurrentVersion() != ( currentVersion + 1 ) )\n        {\n            throw new IOException( \"version change failed\" );\n        }\n        fileChannel = newLog;\n        instantiateCorrectWriteBuffer();\n        msgLog.logMessage( \"Log rotated, newLog @ pos=\" + \n                writeBuffer.getFileChannelPosition() + \" and version \" + \n                (currentVersion + 1) ); \n    }","id":18399,"modified_method":"public synchronized void rotate() throws IOException\n    {\n        xaTf.flushAll();\n        String newLogFile = getLog2FileName();\n        String currentLogFile = getLog1FileName();\n        char newActiveLog = LOG2;\n        long currentVersion = xaTf.getCurrentVersion();\n        String oldCopy = getFileName( currentVersion );\n        if ( currentLog == CLEAN || currentLog == LOG2 )\n        {\n            newActiveLog = LOG1;\n            newLogFile = getLog1FileName();\n            currentLogFile = getLog2FileName();\n        }\n        else\n        {\n            assert currentLog == LOG1;\n        }\n        assertFileDoesntExist( newLogFile, \"New log file\" );\n        assertFileDoesntExist( oldCopy, \"Copy log file\" );\n//        System.out.println( \" ---- Performing rotate on \" + currentLogFile + \" -----\" );\n//        DumpLogicalLog.main( new String[] { currentLogFile } );\n//        System.out.println( \" ----- end ----\" );\n        msgLog.logMessage( \"Rotating [\" + currentLogFile + \"] @ version=\" + \n                currentVersion + \" to \" +  newLogFile + \"from position \" + \n                writeBuffer.getFileChannelPosition() );\n        long endPosition = writeBuffer.getFileChannelPosition();\n        writeBuffer.force();\n        FileChannel newLog = new RandomAccessFile( \n            newLogFile, \"rw\" ).getChannel();\n        buffer.clear();\n        buffer.putLong( currentVersion + 1 );\n        long lastTx = xaTf.getLastCommittedTx();\n        buffer.putLong( lastTx ).flip();\n        previousLogLastCommittedTx = lastTx;\n        if ( newLog.write( buffer ) != 16 )\n        {\n            throw new IOException( \"Unable to write log version to new\" );\n        }\n        fileChannel.position( 0 );\n        long[] header =  readAndAssertLogHeader( buffer, fileChannel, currentVersion );\n        if ( xidIdentMap.size() > 0 )\n        {\n            fileChannel.position( getFirstStartEntry( endPosition ) );\n        }\n        LogEntry entry;\n        // Set<Integer> startEntriesWritten = new HashSet<Integer>();\n        while ((entry = LogIoUtils.readEntry( buffer, fileChannel, cf )) != null )\n        {\n            if ( xidIdentMap.get( entry.getIdentifier() ) != null )\n            {\n                if ( entry instanceof LogEntry.Start )\n                {\n                    LogEntry.Start startEntry = (LogEntry.Start) entry;\n                    startEntry.setStartPosition( newLog.position() );\n                    // overwrite old start entry with new that has updated position\n                    xidIdentMap.put( startEntry.getIdentifier(), startEntry );\n                    // startEntriesWritten.add( entry.getIdentifier() );\n                }\n//                if ( !startEntriesWritten.contains( entry.getIdentifier() ) )\n//                {\n//                    throw new IOException( \"Unable to rotate log since start entry for identifier[\" +\n//                            entry.getIdentifier() + \"] not written\" );\n//                }\n                LogBuffer newLogBuffer = new DirectLogBuffer( newLog, buffer );\n                LogIoUtils.writeLogEntry( entry, newLogBuffer );\n            }\n        }\n        msgLog.logMessage( \"Rotate: old log scanned, newLog @ pos=\" + \n                newLog.position() );\n        newLog.force( false );\n        releaseCurrentLogFile();\n        setActiveLog( newActiveLog );\n        if ( keepLogs )\n        {\n            renameCurrentLogFileAndIncrementVersion( currentLogFile, \n                endPosition );\n        }\n        else\n        {\n            deleteCurrentLogFile( currentLogFile );\n            xaTf.getAndSetNewVersion();\n        }\n        if ( xaTf.getCurrentVersion() != ( currentVersion + 1 ) )\n        {\n            throw new IOException( \"version change failed\" );\n        }\n        fileChannel = newLog;\n        instantiateCorrectWriteBuffer();\n        msgLog.logMessage( \"Log rotated, newLog @ pos=\" + \n                writeBuffer.getFileChannelPosition() + \" and version \" + \n                (currentVersion + 1) ); \n    }","commit_id":"1b9f8c8f733e21bdef49bad8ba2ca139b3a221e7","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized void rotate() throws IOException\n    {\n        xaTf.flushAll();\n        String newLogFile = getLog2FileName();\n        String currentLogFile = getLog1FileName();\n        char newActiveLog = LOG2;\n        long currentVersion = xaTf.getCurrentVersion();\n        String oldCopy = getFileName( currentVersion );\n        if ( currentLog == CLEAN || currentLog == LOG2 )\n        {\n            newActiveLog = LOG1;\n            newLogFile = getLog1FileName();\n            currentLogFile = getLog2FileName();\n        }\n        else\n        {\n            assert currentLog == LOG1;\n        }\n        assertFileDoesntExist( newLogFile, \"New log file\" );\n        assertFileDoesntExist( oldCopy, \"Copy log file\" );\n//        System.out.println( \" ---- Performing rotate on \" + currentLogFile + \" -----\" );\n//        DumpLogicalLog.main( new String[] { currentLogFile } );\n//        System.out.println( \" ----- end ----\" );\n        msgLog.logMessage( \"Rotating [\" + currentLogFile + \"] @ version=\" + \n                currentVersion + \" to \" +  newLogFile + \"from position \" + \n                writeBuffer.getFileChannelPosition() );\n        long endPosition = writeBuffer.getFileChannelPosition();\n        writeBuffer.force();\n        FileChannel newLog = new RandomAccessFile( \n            newLogFile, \"rw\" ).getChannel();\n        buffer.clear();\n        buffer.putLong( currentVersion + 1 );\n        long lastTx = xaTf.getLastCommittedTx();\n        buffer.putLong( lastTx ).flip();\n        previousLogLastCommittedTx = lastTx;\n        if ( newLog.write( buffer ) != 16 )\n        {\n            throw new IOException( \"Unable to write log version to new\" );\n        }\n        fileChannel.position( 0 );\n        long[] header =  readAndAssertLogHeader( buffer, fileChannel, currentVersion );\n        if ( xidIdentMap.size() > 0 )\n        {\n            fileChannel.position( getFirstStartEntry( endPosition ) );\n        }\n        LogEntry entry;\n        Set<Integer> startEntriesWritten = new HashSet<Integer>();\n        while ((entry = LogIoUtils.readEntry( buffer, fileChannel, cf )) != null )\n        {\n            if ( xidIdentMap.get( entry.getIdentifier() ) != null )\n            {\n                if ( entry instanceof LogEntry.Start )\n                {\n                    ((LogEntry.Start) entry).setStartPosition( newLog.position() );\n                    startEntriesWritten.add( entry.getIdentifier() );\n                }\n                if ( !startEntriesWritten.contains( entry.getIdentifier() ) )\n                {\n                    throw new IOException( \"Unable to rotate log since start entry for identifier[\" +\n                            entry.getIdentifier() + \"] not written\" );\n                }\n                LogBuffer newLogBuffer = new DirectLogBuffer( newLog, buffer );\n                LogIoUtils.writeLogEntry( entry, newLogBuffer );\n            }\n        }\n        msgLog.logMessage( \"Rotate: old log scanned, newLog @ pos=\" + \n                newLog.position() );\n        newLog.force( false );\n        releaseCurrentLogFile();\n        setActiveLog( newActiveLog );\n        if ( keepLogs )\n        {\n            renameCurrentLogFileAndIncrementVersion( currentLogFile, \n                endPosition );\n        }\n        else\n        {\n            deleteCurrentLogFile( currentLogFile );\n            xaTf.getAndSetNewVersion();\n        }\n        if ( xaTf.getCurrentVersion() != ( currentVersion + 1 ) )\n        {\n            throw new IOException( \"version change failed\" );\n        }\n        fileChannel = newLog;\n        instantiateCorrectWriteBuffer();\n        msgLog.logMessage( \"Log rotated, newLog @ pos=\" + \n                writeBuffer.getFileChannelPosition() + \" and version \" + \n                (currentVersion + 1) ); \n    }","id":18400,"modified_method":"public synchronized void rotate() throws IOException\n    {\n        xaTf.flushAll();\n        String newLogFile = getLog2FileName();\n        String currentLogFile = getLog1FileName();\n        char newActiveLog = LOG2;\n        long currentVersion = xaTf.getCurrentVersion();\n        String oldCopy = getFileName( currentVersion );\n        if ( currentLog == CLEAN || currentLog == LOG2 )\n        {\n            newActiveLog = LOG1;\n            newLogFile = getLog1FileName();\n            currentLogFile = getLog2FileName();\n        }\n        else\n        {\n            assert currentLog == LOG1;\n        }\n        assertFileDoesntExist( newLogFile, \"New log file\" );\n        assertFileDoesntExist( oldCopy, \"Copy log file\" );\n//        System.out.println( \" ---- Performing rotate on \" + currentLogFile + \" -----\" );\n//        DumpLogicalLog.main( new String[] { currentLogFile } );\n//        System.out.println( \" ----- end ----\" );\n        msgLog.logMessage( \"Rotating [\" + currentLogFile + \"] @ version=\" + \n                currentVersion + \" to \" +  newLogFile + \"from position \" + \n                writeBuffer.getFileChannelPosition() );\n        long endPosition = writeBuffer.getFileChannelPosition();\n        writeBuffer.force();\n        FileChannel newLog = new RandomAccessFile( \n            newLogFile, \"rw\" ).getChannel();\n        buffer.clear();\n        buffer.putLong( currentVersion + 1 );\n        long lastTx = xaTf.getLastCommittedTx();\n        buffer.putLong( lastTx ).flip();\n        previousLogLastCommittedTx = lastTx;\n        if ( newLog.write( buffer ) != 16 )\n        {\n            throw new IOException( \"Unable to write log version to new\" );\n        }\n        fileChannel.position( 0 );\n        long[] header =  readAndAssertLogHeader( buffer, fileChannel, currentVersion );\n        if ( xidIdentMap.size() > 0 )\n        {\n            fileChannel.position( getFirstStartEntry( endPosition ) );\n        }\n        LogEntry entry;\n        // Set<Integer> startEntriesWritten = new HashSet<Integer>();\n        while ((entry = LogIoUtils.readEntry( buffer, fileChannel, cf )) != null )\n        {\n            if ( xidIdentMap.get( entry.getIdentifier() ) != null )\n            {\n                if ( entry instanceof LogEntry.Start )\n                {\n                    LogEntry.Start startEntry = (LogEntry.Start) entry;\n                    startEntry.setStartPosition( newLog.position() );\n                    // overwrite old start entry with new that has updated position\n                    xidIdentMap.put( startEntry.getIdentifier(), startEntry );\n                    // startEntriesWritten.add( entry.getIdentifier() );\n                }\n//                if ( !startEntriesWritten.contains( entry.getIdentifier() ) )\n//                {\n//                    throw new IOException( \"Unable to rotate log since start entry for identifier[\" +\n//                            entry.getIdentifier() + \"] not written\" );\n//                }\n                LogBuffer newLogBuffer = new DirectLogBuffer( newLog, buffer );\n                LogIoUtils.writeLogEntry( entry, newLogBuffer );\n            }\n        }\n        msgLog.logMessage( \"Rotate: old log scanned, newLog @ pos=\" + \n                newLog.position() );\n        newLog.force( false );\n        releaseCurrentLogFile();\n        setActiveLog( newActiveLog );\n        if ( keepLogs )\n        {\n            renameCurrentLogFileAndIncrementVersion( currentLogFile, \n                endPosition );\n        }\n        else\n        {\n            deleteCurrentLogFile( currentLogFile );\n            xaTf.getAndSetNewVersion();\n        }\n        if ( xaTf.getCurrentVersion() != ( currentVersion + 1 ) )\n        {\n            throw new IOException( \"version change failed\" );\n        }\n        fileChannel = newLog;\n        instantiateCorrectWriteBuffer();\n        msgLog.logMessage( \"Log rotated, newLog @ pos=\" + \n                writeBuffer.getFileChannelPosition() + \" and version \" + \n                (currentVersion + 1) ); \n    }","commit_id":"2ffd94b713b3f19f3e1992924af1bc94186b8519","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized void rotate() throws IOException\n    {\n        xaTf.flushAll();\n        String newLogFile = getLog2FileName();\n        String currentLogFile = getLog1FileName();\n        char newActiveLog = LOG2;\n        long currentVersion = xaTf.getCurrentVersion();\n        String oldCopy = getFileName( currentVersion );\n        if ( currentLog == CLEAN || currentLog == LOG2 )\n        {\n            newActiveLog = LOG1;\n            newLogFile = getLog1FileName();\n            currentLogFile = getLog2FileName();\n        }\n        else\n        {\n            assert currentLog == LOG1;\n        }\n        assertFileDoesntExist( newLogFile, \"New log file\" );\n        assertFileDoesntExist( oldCopy, \"Copy log file\" );\n//        System.out.println( \" ---- Performing rotate on \" + currentLogFile + \" -----\" );\n//        DumpLogicalLog.main( new String[] { currentLogFile } );\n//        System.out.println( \" ----- end ----\" );\n        msgLog.logMessage( \"Rotating [\" + currentLogFile + \"] @ version=\" + \n                currentVersion + \" to \" +  newLogFile + \"from position \" + \n                writeBuffer.getFileChannelPosition() );\n        long endPosition = writeBuffer.getFileChannelPosition();\n        writeBuffer.force();\n        FileChannel newLog = new RandomAccessFile( \n            newLogFile, \"rw\" ).getChannel();\n        buffer.clear();\n        buffer.putLong( currentVersion + 1 );\n        long lastTx = xaTf.getLastCommittedTx();\n        buffer.putLong( lastTx ).flip();\n        previousLogLastCommittedTx = lastTx;\n        if ( newLog.write( buffer ) != 16 )\n        {\n            throw new IOException( \"Unable to write log version to new\" );\n        }\n        fileChannel.position( 0 );\n        long[] header =  readAndAssertLogHeader( buffer, fileChannel, currentVersion );\n        if ( xidIdentMap.size() > 0 )\n        {\n            fileChannel.position( getFirstStartEntry( endPosition ) );\n        }\n        LogEntry entry;\n        Set<Integer> startEntriesWritten = new HashSet<Integer>();\n        while ((entry = LogIoUtils.readEntry( buffer, fileChannel, cf )) != null )\n        {\n            if ( xidIdentMap.get( entry.getIdentifier() ) != null )\n            {\n                if ( entry instanceof LogEntry.Start )\n                {\n                    ((LogEntry.Start) entry).setStartPosition( newLog.position() );\n                    startEntriesWritten.add( entry.getIdentifier() );\n                }\n                if ( !startEntriesWritten.contains( entry.getIdentifier() ) )\n                {\n                    throw new IOException( \"Unable to rotate log since start entry for identifier[\" +\n                            entry.getIdentifier() + \"] not written\" );\n                }\n                LogBuffer newLogBuffer = new DirectLogBuffer( newLog, buffer );\n                LogIoUtils.writeLogEntry( entry, newLogBuffer );\n            }\n        }\n        msgLog.logMessage( \"Rotate: old log scanned, newLog @ pos=\" + \n                newLog.position() );\n        newLog.force( false );\n        releaseCurrentLogFile();\n        setActiveLog( newActiveLog );\n        if ( keepLogs )\n        {\n            renameCurrentLogFileAndIncrementVersion( currentLogFile, \n                endPosition );\n        }\n        else\n        {\n            deleteCurrentLogFile( currentLogFile );\n            xaTf.getAndSetNewVersion();\n        }\n        if ( xaTf.getCurrentVersion() != ( currentVersion + 1 ) )\n        {\n            throw new IOException( \"version change failed\" );\n        }\n        fileChannel = newLog;\n        instantiateCorrectWriteBuffer();\n        msgLog.logMessage( \"Log rotated, newLog @ pos=\" + \n                writeBuffer.getFileChannelPosition() + \" and version \" + \n                (currentVersion + 1) ); \n    }","id":18401,"modified_method":"public synchronized void rotate() throws IOException\n    {\n        xaTf.flushAll();\n        String newLogFile = getLog2FileName();\n        String currentLogFile = getLog1FileName();\n        char newActiveLog = LOG2;\n        long currentVersion = xaTf.getCurrentVersion();\n        String oldCopy = getFileName( currentVersion );\n        if ( currentLog == CLEAN || currentLog == LOG2 )\n        {\n            newActiveLog = LOG1;\n            newLogFile = getLog1FileName();\n            currentLogFile = getLog2FileName();\n        }\n        else\n        {\n            assert currentLog == LOG1;\n        }\n        assertFileDoesntExist( newLogFile, \"New log file\" );\n        assertFileDoesntExist( oldCopy, \"Copy log file\" );\n//        System.out.println( \" ---- Performing rotate on \" + currentLogFile + \" -----\" );\n//        DumpLogicalLog.main( new String[] { currentLogFile } );\n//        System.out.println( \" ----- end ----\" );\n        msgLog.logMessage( \"Rotating [\" + currentLogFile + \"] @ version=\" + \n                currentVersion + \" to \" +  newLogFile + \"from position \" + \n                writeBuffer.getFileChannelPosition() );\n        long endPosition = writeBuffer.getFileChannelPosition();\n        writeBuffer.force();\n        FileChannel newLog = new RandomAccessFile( \n            newLogFile, \"rw\" ).getChannel();\n        buffer.clear();\n        buffer.putLong( currentVersion + 1 );\n        long lastTx = xaTf.getLastCommittedTx();\n        buffer.putLong( lastTx ).flip();\n        previousLogLastCommittedTx = lastTx;\n        if ( newLog.write( buffer ) != 16 )\n        {\n            throw new IOException( \"Unable to write log version to new\" );\n        }\n        fileChannel.position( 0 );\n        long[] header =  readAndAssertLogHeader( buffer, fileChannel, currentVersion );\n        if ( xidIdentMap.size() > 0 )\n        {\n            fileChannel.position( getFirstStartEntry( endPosition ) );\n        }\n        LogEntry entry;\n        // Set<Integer> startEntriesWritten = new HashSet<Integer>();\n        while ((entry = LogIoUtils.readEntry( buffer, fileChannel, cf )) != null )\n        {\n            if ( xidIdentMap.get( entry.getIdentifier() ) != null )\n            {\n                if ( entry instanceof LogEntry.Start )\n                {\n                    LogEntry.Start startEntry = (LogEntry.Start) entry;\n                    startEntry.setStartPosition( newLog.position() );\n                    // overwrite old start entry with new that has updated position\n                    xidIdentMap.put( startEntry.getIdentifier(), startEntry );\n                    // startEntriesWritten.add( entry.getIdentifier() );\n                }\n//                if ( !startEntriesWritten.contains( entry.getIdentifier() ) )\n//                {\n//                    throw new IOException( \"Unable to rotate log since start entry for identifier[\" +\n//                            entry.getIdentifier() + \"] not written\" );\n//                }\n                LogBuffer newLogBuffer = new DirectLogBuffer( newLog, buffer );\n                LogIoUtils.writeLogEntry( entry, newLogBuffer );\n            }\n        }\n        msgLog.logMessage( \"Rotate: old log scanned, newLog @ pos=\" + \n                newLog.position() );\n        newLog.force( false );\n        releaseCurrentLogFile();\n        setActiveLog( newActiveLog );\n        if ( keepLogs )\n        {\n            renameCurrentLogFileAndIncrementVersion( currentLogFile, \n                endPosition );\n        }\n        else\n        {\n            deleteCurrentLogFile( currentLogFile );\n            xaTf.getAndSetNewVersion();\n        }\n        if ( xaTf.getCurrentVersion() != ( currentVersion + 1 ) )\n        {\n            throw new IOException( \"version change failed\" );\n        }\n        fileChannel = newLog;\n        instantiateCorrectWriteBuffer();\n        msgLog.logMessage( \"Log rotated, newLog @ pos=\" + \n                writeBuffer.getFileChannelPosition() + \" and version \" + \n                (currentVersion + 1) ); \n    }","commit_id":"b66f00ecbcb30494fdea19fbf46f8b5c0bc36f0b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (targetType.getElementTypeDescriptor() == null) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t}\n\t\tboolean canConvert = conversionService.canConvert(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor());\n\t\tif (canConvert) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (sourceType.getElementTypeDescriptor().getType().isAssignableFrom(targetType.getElementTypeDescriptor().getType())) {\n\t\t\t\t// maybe;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// no;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}","id":18402,"modified_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), conversionService);\n\t}","commit_id":"15e009f3a0b13362e80da199c49ffe67dcbed8fb","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (sourceType.getElementTypeDescriptor() == null) {\n\t\t\t// maybe\n\t\t\treturn true;\n\t\t}\n\t\tboolean canConvert = conversionService.canConvert(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor());\n\t\tif (canConvert) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (sourceType.getElementTypeDescriptor().getType().isAssignableFrom(targetType.getElementTypeDescriptor().getType())) {\n\t\t\t\t// maybe;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// no;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}","id":18403,"modified_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), conversionService);\n\t}","commit_id":"15e009f3a0b13362e80da199c49ffe67dcbed8fb","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (targetType.getElementTypeDescriptor() == null) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t}\n\t\tif (sourceType.getElementTypeDescriptor() == null) {\n\t\t\t// maybe\n\t\t\treturn true;\n\t\t}\n\t\tboolean canConvert = conversionService.canConvert(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor());\n\t\tif (canConvert) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (sourceType.getElementTypeDescriptor().getType().isAssignableFrom(targetType.getElementTypeDescriptor().getType())) {\n\t\t\t\t// maybe;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// no;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}","id":18404,"modified_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), conversionService);\n\t}","commit_id":"15e009f3a0b13362e80da199c49ffe67dcbed8fb","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (sourceType.getElementTypeDescriptor() == null) {\n\t\t\t// maybe\n\t\t\treturn true;\n\t\t}\n\t\tboolean canConvert = conversionService.canConvert(sourceType.getElementTypeDescriptor(), targetType);\n\t\tif (canConvert) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (sourceType.getElementTypeDescriptor().getType().isAssignableFrom(targetType.getType())) {\n\t\t\t\t// maybe;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// no;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}","id":18405,"modified_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, conversionService);\n\t}","commit_id":"15e009f3a0b13362e80da199c49ffe67dcbed8fb","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (sourceType.getElementTypeDescriptor() == null) {\n\t\t\t// maybe\n\t\t\treturn true;\n\t\t}\n\t\tboolean canConvert = conversionService.canConvert(sourceType.getElementTypeDescriptor(), targetType);\n\t\tif (canConvert) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (sourceType.getElementTypeDescriptor().getType().isAssignableFrom(targetType.getType())) {\n\t\t\t\t// maybe;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// no;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}","id":18406,"modified_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, conversionService);\n\t}","commit_id":"15e009f3a0b13362e80da199c49ffe67dcbed8fb","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private boolean canConvertKey(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (targetType.getMapKeyTypeDescriptor() == null) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t}\n\t\tif (sourceType.getMapKeyTypeDescriptor() == null) {\n\t\t\t// maybe\n\t\t\treturn true;\n\t\t}\n\t\tboolean canConvert = conversionService.canConvert(sourceType.getMapKeyTypeDescriptor(), targetType.getMapKeyTypeDescriptor());\n\t\tif (canConvert) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (sourceType.getMapKeyTypeDescriptor().getType().isAssignableFrom(targetType.getMapKeyTypeDescriptor().getType())) {\n\t\t\t\t// maybe;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// no;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}","id":18407,"modified_method":"private boolean canConvertKey(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType.getMapKeyTypeDescriptor(), targetType.getMapKeyTypeDescriptor(), conversionService);\n\t}","commit_id":"15e009f3a0b13362e80da199c49ffe67dcbed8fb","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private boolean canConvertValue(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (targetType.getMapValueTypeDescriptor() == null) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t}\n\t\tif (sourceType.getMapValueTypeDescriptor() == null) {\n\t\t\t// maybe\n\t\t\treturn true;\n\t\t}\n\t\tboolean canConvert = conversionService.canConvert(sourceType.getMapValueTypeDescriptor(), targetType.getMapValueTypeDescriptor());\n\t\tif (canConvert) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (sourceType.getMapValueTypeDescriptor().getType().isAssignableFrom(targetType.getMapValueTypeDescriptor().getType())) {\n\t\t\t\t// maybe;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// no;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}","id":18408,"modified_method":"private boolean canConvertValue(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType.getMapValueTypeDescriptor(), targetType.getMapValueTypeDescriptor(), conversionService);\n\t}","commit_id":"15e009f3a0b13362e80da199c49ffe67dcbed8fb","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tboolean canConvert = conversionService.canConvert(sourceType, targetType.getElementTypeDescriptor());\n\t\tif (canConvert) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (sourceType.getType().isAssignableFrom(targetType.getElementTypeDescriptor().getType())) {\n\t\t\t\t// maybe;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// no;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}","id":18409,"modified_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType, targetType.getElementTypeDescriptor(), conversionService);\n\t}","commit_id":"15e009f3a0b13362e80da199c49ffe67dcbed8fb","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (targetType.getElementTypeDescriptor() == null) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t}\t\t\n\t\tboolean canConvert = conversionService.canConvert(sourceType, targetType.getElementTypeDescriptor());\n\t\tif (canConvert) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif (sourceType.getType().isAssignableFrom(targetType.getElementTypeDescriptor().getType())) {\n\t\t\t\t// maybe;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// no;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}","id":18410,"modified_method":"public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType, targetType.getElementTypeDescriptor(), conversionService);\n\t}","commit_id":"15e009f3a0b13362e80da199c49ffe67dcbed8fb","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public Destination getHostForVersionMapping(ServiceVersionMapping mapping) throws VersionedHostNotFoundException {\n      final Destination host = configuredHosts.get(mapping.getPpDestId());\n\n      if (host == null) {\n         throw new VersionedHostNotFoundException(\"Power Proxy Host: \" + mapping.getPpDestId() + \" is not specified in the power proxy system model\");\n      }\n\n      return host;\n   }","id":18411,"modified_method":"public Destination getHostForVersionMapping(ServiceVersionMapping mapping) throws VersionedHostNotFoundException {\n      final Destination host = configuredHosts.get(mapping.getPpDestId());\n\n      if (host == null) {\n         throw new VersionedHostNotFoundException(\"Endpoin: \" + mapping.getPpDestId() + \" is not specified in the system model\");\n      }\n\n      return host;\n   }","commit_id":"05eecbf9d6b242e15cfd09b88ba9489223dabf56","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n      HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n      final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n      final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n      final FilterDirector director = handlerFactory.newHandler().handleRequest(mutableHttpRequest, mutableHttpResponse);\n\n      director.applyTo(mutableHttpRequest);\n\n      switch (director.getFilterAction()) {\n         case RETURN:\n            director.applyTo(mutableHttpResponse);\n            break;\n\n         case PASS:\n            chain.doFilter(mutableHttpRequest, response);\n            break;\n      }\n   }","id":18412,"modified_method":"@Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n      new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n   }","commit_id":"05eecbf9d6b242e15cfd09b88ba9489223dabf56","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n        final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n        final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n        final FilterDirector director = handlerFactory.newHandler().handleRequest(mutableHttpRequest, mutableHttpResponse);\n\n        director.applyTo(mutableHttpRequest);\n\n        switch (director.getFilterAction()) {\n            case RETURN:\n                break;\n\n            case PASS:\n                chain.doFilter(mutableHttpRequest, mutableHttpResponse);\n                break;\n        }\n    }","id":18413,"modified_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n    }","commit_id":"9b81d37eee310d7143d7909dabcf12bd2692c083","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n        final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n        final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n        final FilterDirector director = handlerFactory.newHandler().handleRequest(mutableHttpRequest, mutableHttpResponse);\n\n        director.applyTo(mutableHttpRequest);\n\n        switch (director.getFilterAction()) {\n            case RETURN:\n                break;\n\n            case PASS:\n                chain.doFilter(mutableHttpRequest, mutableHttpResponse);\n                break;\n        }\n    }","id":18414,"modified_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n    }","commit_id":"9b81d37eee310d7143d7909dabcf12bd2692c083","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n        final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n        final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n        final FilterDirector director = handlerFactory.newHandler().handleRequest(mutableHttpRequest, mutableHttpResponse);\n\n        director.applyTo(mutableHttpRequest);\n\n        switch (director.getFilterAction()) {\n            case RETURN:\n                break;\n\n            case PASS:\n                chain.doFilter(mutableHttpRequest, mutableHttpResponse);\n                break;\n        }\n    }","id":18415,"modified_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n    }","commit_id":"9b81d37eee310d7143d7909dabcf12bd2692c083","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n   public FilterDirector handleRequest(HttpServletRequest request, ReadableHttpServletResponse response) {\n\n      final FilterDirector filterDirector = new FilterDirectorImpl();\n      final HeaderManager headerManager = filterDirector.requestHeaderManager();\n      final ExtractorResult<Object> userResult = keyedRegexExtractor.extract(request.getRequestURI());\n      filterDirector.setFilterAction(FilterAction.PASS);\n\n      if (userResult != null && !userResult.getResult().isEmpty()) {\n         final String user = userResult.getResult();\n         \n         headerManager.putHeader(PowerApiHeader.USER.toString(), user + quality);\n         headerManager.putHeader(PowerApiHeader.GROUPS.toString(), group);\n      }\n\n      return filterDirector;\n   }","id":18416,"modified_method":"@Override\n   public FilterDirector handleRequest(HttpServletRequest request, ReadableHttpServletResponse response) {\n\n      final FilterDirector filterDirector = new FilterDirectorImpl();\n      final HeaderManager headerManager = filterDirector.requestHeaderManager();\n      final ExtractorResult<Object> userResult = keyedRegexExtractor.extract(request.getRequestURI());\n      filterDirector.setFilterAction(FilterAction.PASS);\n\n      if (userResult != null && !userResult.getResult().isEmpty()) {\n         final String user = userResult.getResult();\n         \n         headerManager.appendHeader(PowerApiHeader.USER.toString(), user + quality);\n         headerManager.appendHeader(PowerApiHeader.GROUPS.toString(), group);\n      }\n\n      return filterDirector;\n   }","commit_id":"9b81d37eee310d7143d7909dabcf12bd2692c083","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n        final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n        final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n        chain.doFilter(request, response);\n\n        handler.newHandler().handleResponse(mutableHttpRequest, mutableHttpResponse);\n    }","id":18417,"modified_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n    }","commit_id":"6862bd76cbdd5262a7db698268bbab509566790d","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void destroy() {\n        manager.unsubscribeFrom(\"http-logging.cfg.xml\", handler);\n    }","id":18418,"modified_method":"@Override\n    public void destroy() {\n        manager.unsubscribeFrom(\"http-logging.cfg.xml\", handlerFactory);\n    }","commit_id":"6862bd76cbdd5262a7db698268bbab509566790d","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        handler = new HttpLoggingHandlerFactory();\n        manager = ServletContextHelper.getPowerApiContext(filterConfig.getServletContext()).configurationService();\n\n        manager.subscribeTo(\"http-logging.cfg.xml\", handler, HttpLoggingConfig.class);\n    }","id":18419,"modified_method":"@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        handlerFactory = new HttpLoggingHandlerFactory();\n        manager = ServletContextHelper.getPowerApiContext(filterConfig.getServletContext()).configurationService();\n\n        manager.subscribeTo(\"http-logging.cfg.xml\", handlerFactory, HttpLoggingConfig.class);\n    }","commit_id":"6862bd76cbdd5262a7db698268bbab509566790d","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n        final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n        final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n        final FilterDirector director = handlerFactory.newHandler().handleRequest(mutableHttpRequest, mutableHttpResponse);\n\n        director.applyTo(mutableHttpRequest);\n\n        switch (director.getFilterAction()) {\n            case RETURN:\n                break;\n\n            case PASS:\n                chain.doFilter(mutableHttpRequest, response);\n                break;\n        }\n    }","id":18420,"modified_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n    }","commit_id":"6862bd76cbdd5262a7db698268bbab509566790d","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n        final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n        final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n        final FilterDirector director = handlerFactory.newHandler().handleRequest(mutableHttpRequest, mutableHttpResponse);\n\n        director.applyTo(mutableHttpRequest);\n\n        switch (director.getFilterAction()) {\n            case RETURN:\n                break;\n\n            case PASS:\n                chain.doFilter(mutableHttpRequest, response);\n                break;\n        }\n    }","id":18421,"modified_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n    }","commit_id":"6862bd76cbdd5262a7db698268bbab509566790d","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n        final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n        final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n        final FilterDirector director = handlerFactory.newHandler().handleRequest(mutableHttpRequest, mutableHttpResponse);\n\n        director.applyTo(mutableHttpRequest);\n\n        switch (director.getFilterAction()) {\n            case RETURN:\n                break;\n\n            case PASS:\n                chain.doFilter(mutableHttpRequest, response);\n                break;\n        }\n    }","id":18422,"modified_method":"@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n    }","commit_id":"59212376281ad96dfd01451932b3459fbff71570","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n      HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n      final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n      final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n      final FilterDirector director = handlerFactory.newHandler().handleRequest(mutableHttpRequest, mutableHttpResponse);\n\n      director.applyTo(mutableHttpRequest);\n\n      switch (director.getFilterAction()) {\n         case RETURN:\n            director.applyTo(mutableHttpResponse);\n            break;\n            \n         case PASS:\n            chain.doFilter(mutableHttpRequest, response);\n            break;\n      }\n   }","id":18423,"modified_method":"@Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n      new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n   }","commit_id":"59212376281ad96dfd01451932b3459fbff71570","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n      HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n      final HttpServletResponse httpResponse = (HttpServletResponse) response;\n      final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n\n      final FilterDirector director = handlerFactory.newHandler().handleRequest((HttpServletRequest) request, mutableHttpResponse);\n\n      switch (director.getFilterAction()) {\n         case PASS:\n         case NOT_SET:\n            chain.doFilter(request, response);\n            break;\n\n         case RETURN:\n         case PROCESS_RESPONSE:\n            director.applyTo(httpResponse);\n            break;\n      }\n   }","id":18424,"modified_method":"@Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n      new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n   }","commit_id":"a4c29ed9b85bccb1b629f25c844af2b6994cc395","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n      HttpServletHelper.verifyRequestAndResponse(LOG, request, response);\n\n      final MutableHttpServletResponse mutableHttpResponse = MutableHttpServletResponse.wrap((HttpServletResponse) response);\n      final MutableHttpServletRequest mutableHttpRequest = MutableHttpServletRequest.wrap((HttpServletRequest) request);\n\n      final RateLimitingHandler handler = handlerFactory.newHandler();\n      FilterDirector director = handler.handleRequest(mutableHttpRequest, mutableHttpResponse);\n\n      director.applyTo(mutableHttpRequest);\n\n      switch (director.getFilterAction()) {\n         case PASS:\n            chain.doFilter(request, response);\n            break;\n\n         case PROCESS_RESPONSE:\n            chain.doFilter(request, response);\n            director = handler.handleResponse(mutableHttpRequest, mutableHttpResponse);\n\n         case RETURN:\n            director.applyTo(mutableHttpResponse);\n            break;\n      }\n   }","id":18425,"modified_method":"@Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n      new FilterLogicHandlerDelegate(request, response, chain).doFilter(handlerFactory.newHandler());\n   }","commit_id":"a4c29ed9b85bccb1b629f25c844af2b6994cc395","url":"https://github.com/rackerlabs/repose"},{"original_method":"/**\n     * assign a new db. the counts cache is invalidated and all subsequent db\n     * lookups go to the new db.\n     *\n     * Also clears the Category TagNames (should this happen here?)\n     *\n     * @param db\n     */\n    public void setDb(DrawableDB db) {\n        this.db = db;\n        categoryCounts.invalidateAll();\n        Category.clearTagNames();\n    }","id":18426,"modified_method":"/**\n     * assign a new db. the counts cache is invalidated and all subsequent db\n     * lookups go to the new db.\n     *\n     * Also clears the Category TagNames (should this happen here?)\n     *\n     * @param db\n     */\n    public void setDb(DrawableDB db) {\n        this.db = db;\n        categoryCounts.invalidateAll();\n        Category.clearTagNames();\n        TagUtils.clearFollowUpTagName();\n    }","commit_id":"edfe858dd869e7ab4ed17abf91de25a6a9725c93","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * reset the state of the controller (eg if the case is closed)\n     */\n    public synchronized void reset() {\n        LOGGER.info(\"resetting ImageGalleryControler to initial state.\");\n        selectionModel.clearSelection();\n        setListeningEnabled(false);\n        ThumbnailCache.getDefault().clearCache();\n        Platform.runLater(() -> {\n            historyManager.clear();\n        });\n        Category.clearTagNames();\n\n        Toolbar.getDefault().reset();\n        groupManager.clear();\n        if (db != null) {\n            db.closeDBCon();\n        }\n        db = null;\n    }","id":18427,"modified_method":"/**\n     * reset the state of the controller (eg if the case is closed)\n     */\n    public synchronized void reset() {\n        LOGGER.info(\"resetting ImageGalleryControler to initial state.\");\n        selectionModel.clearSelection();\n        setListeningEnabled(false);\n        ThumbnailCache.getDefault().clearCache();\n        Platform.runLater(() -> {\n            historyManager.clear();\n        });\n        Category.clearTagNames();\n        TagUtils.clearFollowUpTagName();\n\n        Toolbar.getDefault().reset();\n        groupManager.clear();\n        if (db != null) {\n            db.closeDBCon();\n        }\n        db = null;\n    }","commit_id":"edfe858dd869e7ab4ed17abf91de25a6a9725c93","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public static void fireChange(Collection<Long> ids) {\n        Set<TagUtils.TagListener> listenersCopy = new HashSet<TagUtils.TagListener>(listeners);\n        synchronized (listeners) {\n            listenersCopy.addAll(listeners);\n        }\n        for (TagListener list : listenersCopy) {\n            list.handleTagsChanged(ids);\n        }\n    }","id":18428,"modified_method":"public static void fireChange(Collection<Long> ids) {\n        Set<TagUtils.TagListener> listenersCopy = new HashSet<>(listeners);\n        synchronized (listeners) {\n            listenersCopy.addAll(listeners);\n        }\n        for (TagListener list : listenersCopy) {\n            list.handleTagsChanged(ids);\n        }\n    }","commit_id":"edfe858dd869e7ab4ed17abf91de25a6a9725c93","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"static public Collection<TagName> getNonCategoryTagNames() {\n        List<TagName> nonCatTagNames = new ArrayList<>();\n        List<TagName> allTagNames;\n        try {\n            allTagNames = Case.getCurrentCase().getServices().getTagsManager().getAllTagNames();\n            for (TagName tn : allTagNames) {\n                if (tn.getDisplayName().startsWith(Category.CATEGORY_PREFIX) == false) {\n                    nonCatTagNames.add(tn);\n                }\n            }\n        } catch (TskCoreException | IllegalStateException ex) {\n            Logger.getLogger(TagUtils.class.getName()).log(Level.WARNING, \"couldn't access case\", ex);\n        }\n\n        return nonCatTagNames;\n    }","id":18429,"modified_method":"static public Collection<TagName> getNonCategoryTagNames() {\n        try {\n            return Case.getCurrentCase().getServices().getTagsManager().getAllTagNames().stream()\n                    .filter(Category::isCategoryTagName)\n                    .collect(Collectors.toSet());\n        } catch (TskCoreException | IllegalStateException ex) {\n            Logger.getLogger(TagUtils.class.getName()).log(Level.WARNING, \"couldn't access case\", ex);\n        }\n        return Collections.emptySet();\n    }","commit_id":"edfe858dd869e7ab4ed17abf91de25a6a9725c93","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"synchronized public static TagName getFollowUpTagName() throws TskCoreException {\n        if (followUpTagName == null) {\n            followUpTagName = getTagName(follow_Up);\n        }\n        return followUpTagName;\n    }","id":18430,"modified_method":"synchronized public static TagName getFollowUpTagName() throws TskCoreException {\n        if (followUpTagName == null) {\n            followUpTagName = getTagName(FOLLOW_UP);\n        }\n        return followUpTagName;\n    }","commit_id":"edfe858dd869e7ab4ed17abf91de25a6a9725c93","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * assign a new db. the counts cache is invalidated and all subsequent db\n     * lookups go to the new db.\n     *\n     * Also clears the Category TagNames (should this happen here?)\n     *\n     * @param db\n     */\n    public void setDb(DrawableDB db) {\n        this.db = db;\n        categoryCounts.invalidateAll();\n        Category.clearTagNames();\n    }","id":18431,"modified_method":"/**\n     * assign a new db. the counts cache is invalidated and all subsequent db\n     * lookups go to the new db.\n     *\n     * Also clears the Category TagNames (should this happen here?)\n     *\n     * @param db\n     */\n    public void setDb(DrawableDB db) {\n        this.db = db;\n        categoryCounts.invalidateAll();\n        Category.clearTagNames();\n        TagUtils.clearFollowUpTagName();\n    }","commit_id":"dc65b8ae2fca457929a7d5982a3816fb15e2840d","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * reset the state of the controller (eg if the case is closed)\n     */\n    public synchronized void reset() {\n        LOGGER.info(\"resetting ImageGalleryControler to initial state.\");\n        selectionModel.clearSelection();\n        setListeningEnabled(false);\n        ThumbnailCache.getDefault().clearCache();\n        Platform.runLater(() -> {\n            historyManager.clear();\n        });\n        Category.clearTagNames();\n\n        Toolbar.getDefault().reset();\n        groupManager.clear();\n        if (db != null) {\n            db.closeDBCon();\n        }\n        db = null;\n    }","id":18432,"modified_method":"/**\n     * reset the state of the controller (eg if the case is closed)\n     */\n    public synchronized void reset() {\n        LOGGER.info(\"resetting ImageGalleryControler to initial state.\");\n        selectionModel.clearSelection();\n        setListeningEnabled(false);\n        ThumbnailCache.getDefault().clearCache();\n        Platform.runLater(() -> {\n            historyManager.clear();\n        });\n        Category.clearTagNames();\n        TagUtils.clearFollowUpTagName();\n\n        Toolbar.getDefault().reset();\n        groupManager.clear();\n        if (db != null) {\n            db.closeDBCon();\n        }\n        db = null;\n    }","commit_id":"dc65b8ae2fca457929a7d5982a3816fb15e2840d","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"static public Collection<TagName> getNonCategoryTagNames() {\n        List<TagName> nonCatTagNames = new ArrayList<>();\n        List<TagName> allTagNames;\n        try {\n            allTagNames = Case.getCurrentCase().getServices().getTagsManager().getAllTagNames();\n            for (TagName tn : allTagNames) {\n                if (tn.getDisplayName().startsWith(Category.CATEGORY_PREFIX) == false) {\n                    nonCatTagNames.add(tn);\n                }\n            }\n        } catch (TskCoreException | IllegalStateException ex) {\n            Logger.getLogger(TagUtils.class.getName()).log(Level.WARNING, \"couldn't access case\", ex);\n        }\n\n        return nonCatTagNames;\n    }","id":18433,"modified_method":"static public Collection<TagName> getNonCategoryTagNames() {\n        try {\n            return Case.getCurrentCase().getServices().getTagsManager().getAllTagNames().stream()\n                    .filter(Category::isCategoryTagName)\n                    .collect(Collectors.toSet());\n        } catch (TskCoreException | IllegalStateException ex) {\n            Logger.getLogger(TagUtils.class.getName()).log(Level.WARNING, \"couldn't access case\", ex);\n        }\n        return Collections.emptySet();\n    }","commit_id":"dc65b8ae2fca457929a7d5982a3816fb15e2840d","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public static void fireChange(Collection<Long> ids) {\n        Set<TagUtils.TagListener> listenersCopy = new HashSet<TagUtils.TagListener>(listeners);\n        synchronized (listeners) {\n            listenersCopy.addAll(listeners);\n        }\n        for (TagListener list : listenersCopy) {\n            list.handleTagsChanged(ids);\n        }\n    }","id":18434,"modified_method":"public static void fireChange(Collection<Long> ids) {\n        Set<TagUtils.TagListener> listenersCopy = new HashSet<>(listeners);\n        synchronized (listeners) {\n            listenersCopy.addAll(listeners);\n        }\n        for (TagListener list : listenersCopy) {\n            list.handleTagsChanged(ids);\n        }\n    }","commit_id":"dc65b8ae2fca457929a7d5982a3816fb15e2840d","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"synchronized public static TagName getFollowUpTagName() throws TskCoreException {\n        if (followUpTagName == null) {\n            followUpTagName = getTagName(follow_Up);\n        }\n        return followUpTagName;\n    }","id":18435,"modified_method":"synchronized public static TagName getFollowUpTagName() throws TskCoreException {\n        if (followUpTagName == null) {\n            followUpTagName = getTagName(FOLLOW_UP);\n        }\n        return followUpTagName;\n    }","commit_id":"dc65b8ae2fca457929a7d5982a3816fb15e2840d","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * assign a new db. the counts cache is invalidated and all subsequent db\n     * lookups go to the new db.\n     *\n     * Also clears the Category TagNames (should this happen here?)\n     *\n     * @param db\n     */\n    public void setDb(DrawableDB db) {\n        this.db = db;\n        categoryCounts.invalidateAll();\n        Category.clearTagNames();\n    }","id":18436,"modified_method":"/**\n     * assign a new db. the counts cache is invalidated and all subsequent db\n     * lookups go to the new db.\n     *\n     * Also clears the Category TagNames (should this happen here?)\n     *\n     * @param db\n     */\n    public void setDb(DrawableDB db) {\n        this.db = db;\n        categoryCounts.invalidateAll();\n        Category.clearTagNames();\n        TagUtils.clearFollowUpTagName();\n    }","commit_id":"aad2335b34403bd14c2071c15bc689d4dd13a1ae","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * reset the state of the controller (eg if the case is closed)\n     */\n    public synchronized void reset() {\n        LOGGER.info(\"resetting ImageGalleryControler to initial state.\");\n        selectionModel.clearSelection();\n        setListeningEnabled(false);\n        ThumbnailCache.getDefault().clearCache();\n        Platform.runLater(() -> {\n            historyManager.clear();\n        });\n        Category.clearTagNames();\n\n        Toolbar.getDefault().reset();\n        groupManager.clear();\n        if (db != null) {\n            db.closeDBCon();\n        }\n        db = null;\n    }","id":18437,"modified_method":"/**\n     * reset the state of the controller (eg if the case is closed)\n     */\n    public synchronized void reset() {\n        LOGGER.info(\"resetting ImageGalleryControler to initial state.\");\n        selectionModel.clearSelection();\n        setListeningEnabled(false);\n        ThumbnailCache.getDefault().clearCache();\n        Platform.runLater(() -> {\n            historyManager.clear();\n        });\n        Category.clearTagNames();\n        TagUtils.clearFollowUpTagName();\n\n        Toolbar.getDefault().reset();\n        groupManager.clear();\n        if (db != null) {\n            db.closeDBCon();\n        }\n        db = null;\n    }","commit_id":"aad2335b34403bd14c2071c15bc689d4dd13a1ae","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public static void fireChange(Collection<Long> ids) {\n        Set<TagUtils.TagListener> listenersCopy = new HashSet<TagUtils.TagListener>(listeners);\n        synchronized (listeners) {\n            listenersCopy.addAll(listeners);\n        }\n        for (TagListener list : listenersCopy) {\n            list.handleTagsChanged(ids);\n        }\n    }","id":18438,"modified_method":"public static void fireChange(Collection<Long> ids) {\n        Set<TagUtils.TagListener> listenersCopy = new HashSet<>(listeners);\n        synchronized (listeners) {\n            listenersCopy.addAll(listeners);\n        }\n        for (TagListener list : listenersCopy) {\n            list.handleTagsChanged(ids);\n        }\n    }","commit_id":"aad2335b34403bd14c2071c15bc689d4dd13a1ae","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"static public Collection<TagName> getNonCategoryTagNames() {\n        List<TagName> nonCatTagNames = new ArrayList<>();\n        List<TagName> allTagNames;\n        try {\n            allTagNames = Case.getCurrentCase().getServices().getTagsManager().getAllTagNames();\n            for (TagName tn : allTagNames) {\n                if (tn.getDisplayName().startsWith(Category.CATEGORY_PREFIX) == false) {\n                    nonCatTagNames.add(tn);\n                }\n            }\n        } catch (TskCoreException | IllegalStateException ex) {\n            Logger.getLogger(TagUtils.class.getName()).log(Level.WARNING, \"couldn't access case\", ex);\n        }\n\n        return nonCatTagNames;\n    }","id":18439,"modified_method":"static public Collection<TagName> getNonCategoryTagNames() {\n        try {\n            return Case.getCurrentCase().getServices().getTagsManager().getAllTagNames().stream()\n                    .filter(Category::isCategoryTagName)\n                    .collect(Collectors.toSet());\n        } catch (TskCoreException | IllegalStateException ex) {\n            Logger.getLogger(TagUtils.class.getName()).log(Level.WARNING, \"couldn't access case\", ex);\n        }\n        return Collections.emptySet();\n    }","commit_id":"aad2335b34403bd14c2071c15bc689d4dd13a1ae","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"synchronized public static TagName getFollowUpTagName() throws TskCoreException {\n        if (followUpTagName == null) {\n            followUpTagName = getTagName(follow_Up);\n        }\n        return followUpTagName;\n    }","id":18440,"modified_method":"synchronized public static TagName getFollowUpTagName() throws TskCoreException {\n        if (followUpTagName == null) {\n            followUpTagName = getTagName(FOLLOW_UP);\n        }\n        return followUpTagName;\n    }","commit_id":"aad2335b34403bd14c2071c15bc689d4dd13a1ae","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tUser user = UserLocalServiceUtil.getDefaultUser(companyId);\n\n\t\tuserId = user.getUserId();\n\n\t\tGroup group = null;\n\n\t\tif (targetClassName.equals(LayoutSetPrototype.class.getName())) {\n\t\t\tLayoutSetPrototype layoutSetPrototype = getLayoutSetPrototype(\n\t\t\t\tcompanyId, targetValue);\n\n\t\t\tif (layoutSetPrototype != null) {\n\t\t\t\texisting = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayoutSetPrototype =\n\t\t\t\t\tLayoutSetPrototypeLocalServiceUtil.addLayoutSetPrototype(\n\t\t\t\t\t\tuserId, companyId, getTargetValueMap(),\n\t\t\t\t\t\tStringPool.BLANK, true, true, new ServiceContext());\n\t\t\t}\n\n\t\t\tgroup = layoutSetPrototype.getGroup();\n\n\t\t\ttargetClassPK = layoutSetPrototype.getLayoutSetPrototypeId();\n\t\t}\n\t\telse if (targetClassName.equals(Group.class.getName())) {\n\t\t\tif (targetValue.equals(GroupConstants.GLOBAL)) {\n\t\t\t\tgroup = GroupLocalServiceUtil.getCompanyGroup(companyId);\n\t\t\t}\n\t\t\telse if (targetValue.equals(GroupConstants.GUEST)) {\n\t\t\t\tgroup = GroupLocalServiceUtil.getGroup(\n\t\t\t\t\tcompanyId, GroupConstants.GUEST);\n\n\t\t\t\tList<Layout> layouts = LayoutLocalServiceUtil.getLayouts(\n\t\t\t\t\tgroup.getGroupId(), false,\n\t\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, false, 0, 1);\n\n\t\t\t\tif (!layouts.isEmpty()) {\n\t\t\t\t\tLayout layout = layouts.get(0);\n\n\t\t\t\t\tLayoutTypePortlet layoutTypePortlet =\n\t\t\t\t\t\t(LayoutTypePortlet)layout.getLayoutType();\n\n\t\t\t\t\tList<String> portletIds = layoutTypePortlet.getPortletIds();\n\n\t\t\t\t\tif (portletIds.size() != 2) {\n\t\t\t\t\t\texisting = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (String portletId : portletIds) {\n\t\t\t\t\t\tif (!portletId.equals(\"47\") &&\n\t\t\t\t\t\t\t!portletId.equals(\"58\")) {\n\n\t\t\t\t\t\t\texisting = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgroup = GroupLocalServiceUtil.fetchGroup(\n\t\t\t\t\tcompanyId, targetValue);\n\n\t\t\t\tif (group != null) {\n\t\t\t\t\texisting = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgroup = GroupLocalServiceUtil.addGroup(\n\t\t\t\t\t\tuserId, GroupConstants.DEFAULT_PARENT_GROUP_ID,\n\t\t\t\t\t\tStringPool.BLANK,\n\t\t\t\t\t\tGroupConstants.DEFAULT_PARENT_GROUP_ID,\n\t\t\t\t\t\tGroupConstants.DEFAULT_LIVE_GROUP_ID, targetValue,\n\t\t\t\t\t\tStringPool.BLANK, GroupConstants.TYPE_SITE_OPEN, true,\n\t\t\t\t\t\tGroupConstants.DEFAULT_MEMBERSHIP_RESTRICTION, null,\n\t\t\t\t\t\ttrue, true, new ServiceContext());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetClassPK = group.getGroupId();\n\t\t}\n\n\t\tif (group != null) {\n\t\t\tgroupId = group.getGroupId();\n\t\t}\n\t}","id":18441,"modified_method":"@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tUser user = UserLocalServiceUtil.getDefaultUser(companyId);\n\n\t\tuserId = user.getUserId();\n\n\t\tif (isCompanyGroup()) {\n\t\t\treturn;\n\t\t}\n\n\t\tGroup group = null;\n\n\t\tif (targetClassName.equals(LayoutSetPrototype.class.getName())) {\n\t\t\tLayoutSetPrototype layoutSetPrototype = getLayoutSetPrototype(\n\t\t\t\tcompanyId, targetValue);\n\n\t\t\tif (layoutSetPrototype != null) {\n\t\t\t\texisting = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayoutSetPrototype =\n\t\t\t\t\tLayoutSetPrototypeLocalServiceUtil.addLayoutSetPrototype(\n\t\t\t\t\t\tuserId, companyId, getTargetValueMap(),\n\t\t\t\t\t\tStringPool.BLANK, true, true, new ServiceContext());\n\t\t\t}\n\n\t\t\tgroup = layoutSetPrototype.getGroup();\n\n\t\t\ttargetClassPK = layoutSetPrototype.getLayoutSetPrototypeId();\n\t\t}\n\t\telse if (targetClassName.equals(Group.class.getName())) {\n\t\t\tif (targetValue.equals(GroupConstants.GLOBAL)) {\n\t\t\t\tgroup = GroupLocalServiceUtil.getCompanyGroup(companyId);\n\t\t\t}\n\t\t\telse if (targetValue.equals(GroupConstants.GUEST)) {\n\t\t\t\tgroup = GroupLocalServiceUtil.getGroup(\n\t\t\t\t\tcompanyId, GroupConstants.GUEST);\n\n\t\t\t\tList<Layout> layouts = LayoutLocalServiceUtil.getLayouts(\n\t\t\t\t\tgroup.getGroupId(), false,\n\t\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, false, 0, 1);\n\n\t\t\t\tif (!layouts.isEmpty()) {\n\t\t\t\t\tLayout layout = layouts.get(0);\n\n\t\t\t\t\tLayoutTypePortlet layoutTypePortlet =\n\t\t\t\t\t\t(LayoutTypePortlet)layout.getLayoutType();\n\n\t\t\t\t\tList<String> portletIds = layoutTypePortlet.getPortletIds();\n\n\t\t\t\t\tif (portletIds.size() != 2) {\n\t\t\t\t\t\texisting = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (String portletId : portletIds) {\n\t\t\t\t\t\tif (!portletId.equals(\"47\") &&\n\t\t\t\t\t\t\t!portletId.equals(\"58\")) {\n\n\t\t\t\t\t\t\texisting = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgroup = GroupLocalServiceUtil.fetchGroup(\n\t\t\t\t\tcompanyId, targetValue);\n\n\t\t\t\tif (group != null) {\n\t\t\t\t\texisting = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgroup = GroupLocalServiceUtil.addGroup(\n\t\t\t\t\t\tuserId, GroupConstants.DEFAULT_PARENT_GROUP_ID,\n\t\t\t\t\t\tStringPool.BLANK,\n\t\t\t\t\t\tGroupConstants.DEFAULT_PARENT_GROUP_ID,\n\t\t\t\t\t\tGroupConstants.DEFAULT_LIVE_GROUP_ID, targetValue,\n\t\t\t\t\t\tStringPool.BLANK, GroupConstants.TYPE_SITE_OPEN, true,\n\t\t\t\t\t\tGroupConstants.DEFAULT_MEMBERSHIP_RESTRICTION, null,\n\t\t\t\t\t\ttrue, true, new ServiceContext());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetClassPK = group.getGroupId();\n\t\t}\n\n\t\tif (group != null) {\n\t\t\tgroupId = group.getGroupId();\n\t\t}\n\t}","commit_id":"27285cd75bf1777a340c6b4b4071b55bf12e2087","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMTemplates(\n\t\t\tString ddmStructureKey, String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tString name = FileUtil.stripExtension(fileName);\n\n\t\tString xsl = StringUtil.read(inputStream);\n\n\t\tsetServiceContext(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tddmStructureKey);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tddmStructure.getStructureId(), getJournalId(fileName), getMap(name),\n\t\t\tnull, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, null,\n\t\t\tgetDDMTemplateLanguage(fileName), replaceFileEntryURL(xsl), false,\n\t\t\tfalse, null, null, serviceContext);\n\n\t\taddJournalArticles(\n\t\t\tddmStructureKey, ddmTemplate.getTemplateKey(),\n\t\t\t_JOURNAL_ARTICLES_DIR_NAME + name);\n\t}","id":18442,"modified_method":"protected void addDDMTemplates(\n\t\t\tString ddmStructureKey, String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tString name = FileUtil.stripExtension(fileName);\n\n\t\tString xsl = StringUtil.read(inputStream);\n\n\t\tsetServiceContext(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tddmStructureKey);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tgetTemplateKey(name));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Template already exists for \" + fileName +\n\t\t\t\t\t\t\" with version \" + version);\n\t\t\t}\n\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tddmTemplate = DDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tddmStructure.getStructureId(), getTemplateKey(fileName),\n\t\t\tgetMap(name), null, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY,\n\t\t\tnull, getDDMTemplateLanguage(fileName), replaceFileEntryURL(xsl),\n\t\t\tfalse, false, null, null, serviceContext);\n\n\t\taddJournalArticles(\n\t\t\tddmStructureKey, ddmTemplate.getTemplateKey(),\n\t\t\t_JOURNAL_ARTICLES_DIR_NAME + name);\n\t}","commit_id":"27285cd75bf1777a340c6b4b4071b55bf12e2087","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMStructures(String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, DDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID,\n\t\t\tPortalUtil.getClassNameId(DDLRecordSet.class), null,\n\t\t\tgetMap(fileName), null, StringUtil.read(inputStream),\n\t\t\tPropsUtil.get(PropsKeys.DYNAMIC_DATA_LISTS_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDLDisplayTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_DISPLAY_TEMPLATE_DIR_NAME);\n\n\t\taddDDLFormTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_FORM_TEMPLATE_DIR_NAME);\n\t}","id":18443,"modified_method":"protected void addDDMStructures(String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tgetTemplateKey(fileName));\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Structure already exists for \" + fileName +\n\t\t\t\t\t\t\" with version \" + version);\n\t\t\t}\n\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t}\n\n\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, DDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID,\n\t\t\tPortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tgetTemplateKey(fileName), getMap(fileName), null,\n\t\t\tStringUtil.read(inputStream),\n\t\t\tPropsUtil.get(PropsKeys.DYNAMIC_DATA_LISTS_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDLDisplayTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_DISPLAY_TEMPLATE_DIR_NAME);\n\n\t\taddDDLFormTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_FORM_TEMPLATE_DIR_NAME);\n\t}","commit_id":"27285cd75bf1777a340c6b4b4071b55bf12e2087","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMTemplate(\n\t\t\tlong templateGroupId, long ddmStructureId, String fileName,\n\t\t\tString language, String script, String type, String mode)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(FileUtil.getShortFileName(fileName));\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, templateGroupId,\n\t\t\tPortalUtil.getClassNameId(DDMStructure.class), ddmStructureId, null,\n\t\t\tgetMap(fileName), null, type, mode, language, script, false, false,\n\t\t\tStringPool.BLANK, null, serviceContext);\n\t}","id":18444,"modified_method":"protected void addDDMTemplate(\n\t\t\tlong templateGroupId, long ddmStructureId, String fileName,\n\t\t\tString language, String script, String type, String mode)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(FileUtil.getShortFileName(fileName));\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tgetTemplateKey(fileName));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Template already exists for \" + fileName +\n\t\t\t\t\t\t\" with version \" + version);\n\t\t\t}\n\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, templateGroupId,\n\t\t\tPortalUtil.getClassNameId(DDMStructure.class), ddmStructureId,\n\t\t\tgetTemplateKey(fileName), getMap(fileName), null, type, mode,\n\t\t\tlanguage, script, false, false, StringPool.BLANK, null,\n\t\t\tserviceContext);\n\t}","commit_id":"27285cd75bf1777a340c6b4b4071b55bf12e2087","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addApplicationDisplayTemplate(\n\t\t\tString script, File file, long classNameId)\n\t\tthrows PortalException, SystemException {\n\n\t\tString name = FileUtil.stripExtension(file.getName());\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, classNameId, 0, null, getMap(name), null,\n\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, StringPool.BLANK,\n\t\t\tgetDDMTemplateLanguage(name), script, false, false,\n\t\t\tStringPool.BLANK, null, serviceContext);\n\t}","id":18445,"modified_method":"protected void addApplicationDisplayTemplate(\n\t\t\tString script, File file, long classNameId)\n\t\tthrows PortalException, SystemException {\n\n\t\tString name = FileUtil.stripExtension(file.getName());\n\n\t\tDDMTemplate template = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, classNameId, getTemplateKey(name));\n\n\t\tif (template != null) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Template already exists for \" + name + \" with version \" +\n\t\t\t\t\t\tversion);\n\t\t\t}\n\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(template);\n\t\t}\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, classNameId, 0, getTemplateKey(name), getMap(name),\n\t\t\tnull, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, StringPool.BLANK,\n\t\t\tgetDDMTemplateLanguage(name), script, false, false,\n\t\t\tStringPool.BLANK, null, serviceContext);\n\t}","commit_id":"27285cd75bf1777a340c6b4b4071b55bf12e2087","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMStructures(\n\t\t\tString parentDDMStructureKey, String fileName,\n\t\t\tInputStream inputStream)\n\t\tthrows Exception {\n\n\t\tString name = FileUtil.stripExtension(fileName);\n\n\t\tMap<Locale, String> nameMap = getMap(name);\n\n\t\tString xsd = StringUtil.read(inputStream);\n\n\t\tif (isJournalStructureXSD(xsd)) {\n\t\t\txsd = JournalConverterUtil.getDDMXSD(xsd);\n\t\t}\n\n\t\tsetServiceContext(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, parentDDMStructureKey,\n\t\t\tPortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tgetJournalId(fileName), nameMap, null, xsd,\n\t\t\tPropsUtil.get(PropsKeys.JOURNAL_ARTICLE_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDMTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_JOURNAL_DDM_TEMPLATES_DIR_NAME + name);\n\n\t\tif (Validator.isNull(parentDDMStructureKey)) {\n\t\t\taddDDMStructures(\n\t\t\t\tddmStructure.getStructureKey(),\n\t\t\t\t_JOURNAL_DDM_STRUCTURES_DIR_NAME + name);\n\t\t}\n\t}","id":18446,"modified_method":"protected void addDDMStructures(\n\t\t\tString parentDDMStructureKey, String fileName,\n\t\t\tInputStream inputStream)\n\t\tthrows Exception {\n\n\t\tString name = FileUtil.stripExtension(fileName);\n\n\t\tMap<Locale, String> nameMap = getMap(name);\n\n\t\tString xsd = StringUtil.read(inputStream);\n\n\t\tif (isJournalStructureXSD(xsd)) {\n\t\t\txsd = JournalConverterUtil.getDDMXSD(xsd);\n\t\t}\n\n\t\tsetServiceContext(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tgetTemplateKey(fileName));\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Structure already exists for \" + fileName +\n\t\t\t\t\t\t\" with version \" + version);\n\t\t\t}\n\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t}\n\n\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, parentDDMStructureKey,\n\t\t\tPortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tgetTemplateKey(fileName), nameMap, null, xsd,\n\t\t\tPropsUtil.get(PropsKeys.JOURNAL_ARTICLE_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDMTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_JOURNAL_DDM_TEMPLATES_DIR_NAME + name);\n\n\t\tif (Validator.isNull(parentDDMStructureKey)) {\n\t\t\taddDDMStructures(\n\t\t\t\tddmStructure.getStructureKey(),\n\t\t\t\t_JOURNAL_DDM_STRUCTURES_DIR_NAME + name);\n\t\t}\n\t}","commit_id":"27285cd75bf1777a340c6b4b4071b55bf12e2087","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void setupAssets(String fileName) throws Exception {\n\t\tif (!isCompanyGroup()) {\n\t\t\tList<AssetTag> assetTags = AssetTagLocalServiceUtil.getGroupTags(\n\t\t\t\tgroupId);\n\n\t\t\tfor (AssetTag assetTag : assetTags) {\n\t\t\t\tAssetTagLocalServiceUtil.deleteAssetTag(assetTag);\n\t\t\t}\n\n\t\t\tRepositoryLocalServiceUtil.deleteRepositories(groupId);\n\n\t\t\tJournalArticleLocalServiceUtil.deleteArticles(groupId);\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplates(groupId);\n\n\t\t\tDDMStructureLocalServiceUtil.deleteStructures(groupId);\n\t\t}\n\n\t\tJSONObject jsonObject = getJSONObject(fileName);\n\n\t\tif (jsonObject != null) {\n\t\t\tJSONArray assetsJSONArray = jsonObject.getJSONArray(\"assets\");\n\n\t\t\tsetupAssets(assetsJSONArray);\n\t\t}\n\n\t\taddApplicationDisplayTemplates(_APPLICATION_DISPLAY_TEMPLATE_DIR_NAME);\n\n\t\taddDDLStructures(_DDL_STRUCTURE_DIR_NAME);\n\n\t\taddDDMStructures(StringPool.BLANK, _JOURNAL_DDM_STRUCTURES_DIR_NAME);\n\n\t\taddDDMTemplates(StringPool.BLANK, _JOURNAL_DDM_TEMPLATES_DIR_NAME);\n\n\t\taddDLFileEntries(_DL_DOCUMENTS_DIR_NAME);\n\n\t\taddJournalArticles(\n\t\t\tStringPool.BLANK, StringPool.BLANK, _JOURNAL_ARTICLES_DIR_NAME);\n\n\t\taddLayoutTemplate(_LAYOUT_TEMPLATE_DIR_NAME);\n\t}","id":18447,"modified_method":"protected void setupAssets(String fileName) throws Exception {\n\t\tif (!isCompanyGroup()) {\n\t\t\tList<AssetTag> assetTags = AssetTagLocalServiceUtil.getGroupTags(\n\t\t\t\tgroupId);\n\n\t\t\tfor (AssetTag assetTag : assetTags) {\n\t\t\t\tAssetTagLocalServiceUtil.deleteAssetTag(assetTag);\n\t\t\t}\n\n\t\t\tRepositoryLocalServiceUtil.deleteRepositories(groupId);\n\n\t\t\tJournalArticleLocalServiceUtil.deleteArticles(groupId);\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplates(groupId);\n\n\t\t\tList<DDMStructure> ddmStructures =\n\t\t\t\tDDMStructureLocalServiceUtil.getStructures(groupId);\n\n\t\t\tfor (DDMStructure ddmStructure : ddmStructures) {\n\t\t\t\tif (ddmStructure.getParentStructureId() ==\n\t\t\t\t\t\tDDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID) {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t\t}\n\n\t\t\tDDMStructureLocalServiceUtil.deleteStructures(groupId);\n\t\t}\n\n\t\tJSONObject jsonObject = getJSONObject(fileName);\n\n\t\tif (jsonObject != null) {\n\t\t\tJSONArray assetsJSONArray = jsonObject.getJSONArray(\"assets\");\n\n\t\t\tsetupAssets(assetsJSONArray);\n\t\t}\n\n\t\taddApplicationDisplayTemplates(_APPLICATION_DISPLAY_TEMPLATE_DIR_NAME);\n\n\t\taddDDLStructures(_DDL_STRUCTURE_DIR_NAME);\n\n\t\taddDDMStructures(StringPool.BLANK, _JOURNAL_DDM_STRUCTURES_DIR_NAME);\n\n\t\taddDDMTemplates(StringPool.BLANK, _JOURNAL_DDM_TEMPLATES_DIR_NAME);\n\n\t\taddDLFileEntries(_DL_DOCUMENTS_DIR_NAME);\n\n\t\taddJournalArticles(\n\t\t\tStringPool.BLANK, StringPool.BLANK, _JOURNAL_ARTICLES_DIR_NAME);\n\n\t\taddLayoutTemplate(_LAYOUT_TEMPLATE_DIR_NAME);\n\t}","commit_id":"27285cd75bf1777a340c6b4b4071b55bf12e2087","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addLayoutTemplate(InputStream inputStream) throws Exception {\n\t\tString content = StringUtil.read(inputStream);\n\n\t\tif (Validator.isNull(content)) {\n\t\t\treturn;\n\t\t}\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(content);\n\n\t\tJSONObject layoutTemplateJSONObject = jsonObject.getJSONObject(\n\t\t\t\"layoutTemplate\");\n\n\t\tString name = layoutTemplateJSONObject.getString(\"name\");\n\n\t\tMap<Locale, String> nameMap = getMap(name);\n\n\t\tLayoutPrototype layoutPrototype =\n\t\t\tLayoutPrototypeLocalServiceUtil.addLayoutPrototype(\n\t\t\t\tuserId, companyId, nameMap, name, true, serviceContext);\n\n\t\tJSONArray columnsJSONArray = layoutTemplateJSONObject.getJSONArray(\n\t\t\t\"columns\");\n\n\t\tLayout layout = layoutPrototype.getLayout();\n\n\t\taddLayoutColumns(\n\t\t\tlayout, LayoutTypePortletConstants.COLUMN_PREFIX, columnsJSONArray);\n\n\t\tLayoutLocalServiceUtil.updateLayout(\n\t\t\tlayout.getGroupId(), layout.isPrivateLayout(), layout.getLayoutId(),\n\t\t\tlayout.getTypeSettings());\n\t}","id":18448,"modified_method":"protected void addLayoutTemplate(InputStream inputStream) throws Exception {\n\t\tString content = StringUtil.read(inputStream);\n\n\t\tif (Validator.isNull(content)) {\n\t\t\treturn;\n\t\t}\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(content);\n\n\t\tJSONObject layoutTemplateJSONObject = jsonObject.getJSONObject(\n\t\t\t\"layoutTemplate\");\n\n\t\tString name = layoutTemplateJSONObject.getString(\"name\");\n\n\t\tMap<Locale, String> nameMap = getMap(name);\n\n\t\tLayoutPrototype layoutPrototype = getLayoutPrototype(companyId, name);\n\n\t\tif (layoutPrototype != null) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Layout prototype already exists for \" + name);\n\t\t\t}\n\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tLayoutPrototypeLocalServiceUtil.deleteLayoutPrototype(\n\t\t\t\tlayoutPrototype);\n\t\t}\n\n\t\tlayoutPrototype =\n\t\t\tLayoutPrototypeLocalServiceUtil.addLayoutPrototype(\n\t\t\t\tuserId, companyId, nameMap, name, true, serviceContext);\n\n\t\tJSONArray columnsJSONArray = layoutTemplateJSONObject.getJSONArray(\n\t\t\t\"columns\");\n\n\t\tLayout layout = layoutPrototype.getLayout();\n\n\t\taddLayoutColumns(\n\t\t\tlayout, LayoutTypePortletConstants.COLUMN_PREFIX, columnsJSONArray);\n\n\t\tLayoutLocalServiceUtil.updateLayout(\n\t\t\tlayout.getGroupId(), layout.isPrivateLayout(), layout.getLayoutId(),\n\t\t\tlayout.getTypeSettings());\n\t}","commit_id":"27285cd75bf1777a340c6b4b4071b55bf12e2087","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void initialize(Message message) throws Exception {\n\t\tString servletContextName = message.getString(\"servletContextName\");\n\n\t\tServletContext servletContext = ServletContextPool.get(\n\t\t\tservletContextName);\n\n\t\tif ((servletContext.getResource(_RESOURCES_DIR) == null) &&\n\t\t\t(servletContext.getResource(_TEMPLATES_DIR) == null)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tProperties pluginPackageProperties = getPluginPackageProperties(\n\t\t\tservletContext);\n\n\t\tString targetClassName = pluginPackageProperties.getProperty(\n\t\t\t\"resources-importer-target-class-name\",\n\t\t\tLayoutSetPrototype.class.getName());\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\t_RESOURCES_DIR);\n\t\tSet<String> templatePaths = servletContext.getResourcePaths(\n\t\t\t_TEMPLATES_DIR);\n\n\t\tURL privateLARURL = null;\n\t\tURL publicLARURL = servletContext.getResource(\n\t\t\t_RESOURCES_DIR.concat(\"archive.lar\"));\n\n\t\tif (publicLARURL == null) {\n\t\t\tprivateLARURL = servletContext.getResource(\n\t\t\t\t_RESOURCES_DIR.concat(\"private.lar\"));\n\t\t\tpublicLARURL = servletContext.getResource(\n\t\t\t\t_RESOURCES_DIR.concat(\"public.lar\"));\n\t\t}\n\n\t\tList<Company> companies = CompanyLocalServiceUtil.getCompanies();\n\n\t\tfor (Company company : companies) {\n\t\t\tlong companyId = CompanyThreadLocal.getCompanyId();\n\n\t\t\ttry {\n\t\t\t\tCompanyThreadLocal.setCompanyId(company.getCompanyId());\n\n\t\t\t\tImporter importer = null;\n\n\t\t\t\tif ((privateLARURL != null) || (publicLARURL != null)) {\n\t\t\t\t\tLARImporter larImporter = getLARImporter();\n\n\t\t\t\t\tURLConnection privateLARURLConnection = null;\n\n\t\t\t\t\tif (privateLARURL != null) {\n\t\t\t\t\t\tprivateLARURLConnection =\n\t\t\t\t\t\t\tprivateLARURL.openConnection();\n\n\t\t\t\t\t\tlarImporter.setPrivateLARInputStream(\n\t\t\t\t\t\t\tprivateLARURLConnection.getInputStream());\n\t\t\t\t\t}\n\n\t\t\t\t\tURLConnection publicLARURLConnection = null;\n\n\t\t\t\t\tif (publicLARURL != null) {\n\t\t\t\t\t\tpublicLARURLConnection = publicLARURL.openConnection();\n\n\t\t\t\t\t\tlarImporter.setPublicLARInputStream(\n\t\t\t\t\t\t\tpublicLARURLConnection.getInputStream());\n\t\t\t\t\t}\n\n\t\t\t\t\timporter = larImporter;\n\t\t\t\t}\n\t\t\t\telse if ((resourcePaths != null) && !resourcePaths.isEmpty()) {\n\t\t\t\t\timporter = getResourceImporter();\n\n\t\t\t\t\timporter.setResourcesDir(_RESOURCES_DIR);\n\t\t\t\t}\n\t\t\t\telse if ((templatePaths != null) && !templatePaths.isEmpty()) {\n\t\t\t\t\timporter = getResourceImporter();\n\n\t\t\t\t\tGroup group = GroupLocalServiceUtil.getCompanyGroup(\n\t\t\t\t\t\tcompanyId);\n\n\t\t\t\t\timporter.setGroupId(group.getGroupId());\n\t\t\t\t\timporter.setResourcesDir(_TEMPLATES_DIR);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tString resourcesDir = pluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"resources-importer-external-dir\");\n\n\t\t\t\t\tif (Validator.isNotNull(resourcesDir)) {\n\t\t\t\t\t\timporter = getFileSystemImporter();\n\n\t\t\t\t\t\timporter.setResourcesDir(resourcesDir);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (importer == null) {\n\t\t\t\t\tthrow new ImporterException(\"No valid importer found\");\n\t\t\t\t}\n\n\t\t\t\timporter.setCompanyId(company.getCompanyId());\n\t\t\t\timporter.setServletContext(servletContext);\n\t\t\t\timporter.setServletContextName(servletContextName);\n\t\t\t\timporter.setTargetClassName(targetClassName);\n\n\t\t\t\tString targetValue = pluginPackageProperties.getProperty(\n\t\t\t\t\t\"resources-importer-target-value\");\n\n\t\t\t\tif (Validator.isNull(targetValue)) {\n\t\t\t\t\ttargetValue = TextFormatter.format(\n\t\t\t\t\t\tservletContextName, TextFormatter.J);\n\t\t\t\t}\n\n\t\t\t\timporter.setTargetValue(targetValue);\n\n\t\t\t\timporter.afterPropertiesSet();\n\n\t\t\t\tboolean developerModeEnabled = GetterUtil.getBoolean(\n\t\t\t\t\tpluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"resources-importer-developer-mode-enabled\"));\n\n\t\t\t\tif (!developerModeEnabled && importer.isExisting() &&\n\t\t\t\t\t!importer.isCompanyGroup()) {\n\n\t\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\t\"Group or layout set prototype already exists \" +\n\t\t\t\t\t\t\t\t\"for company \" + company.getWebId());\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlong startTime = 0;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstartTime = System.currentTimeMillis();\n\t\t\t\t}\n\n\t\t\t\timporter.importResources();\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tlong endTime = System.currentTimeMillis() - startTime;\n\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Importing resources from \" + servletContextName +\n\t\t\t\t\t\t\t\" to group \" + importer.getGroupId() + \" takes \" +\n\t\t\t\t\t\t\t\tendTime + \" ms\");\n\t\t\t\t}\n\n\t\t\t\tMessage newMessage = new Message();\n\n\t\t\t\tnewMessage.put(\"companyId\", company.getCompanyId());\n\t\t\t\tnewMessage.put(\"servletContextName\", servletContextName);\n\t\t\t\tnewMessage.put(\"targetClassName\", targetClassName);\n\t\t\t\tnewMessage.put(\"targetClassPK\", importer.getTargetClassPK());\n\n\t\t\t\tif (message.getResponseId() != null) {\n\t\t\t\t\tMap<String, Object> responseMap =\n\t\t\t\t\t\tnew HashMap<String, Object>();\n\n\t\t\t\t\tresponseMap.put(\"groupId\", importer.getTargetClassPK());\n\n\t\t\t\t\tnewMessage.setPayload(responseMap);\n\n\t\t\t\t\tnewMessage.setResponseId(message.getResponseId());\n\t\t\t\t}\n\n\t\t\t\tMessageBusUtil.sendMessage(\n\t\t\t\t\t\"liferay/resources_importer\", newMessage);\n\t\t\t}\n\t\t\tcatch (ImporterException ie) {\n\t\t\t\tMessage newMessage = new Message();\n\n\t\t\t\tnewMessage.put(\"companyId\", company.getCompanyId());\n\t\t\t\tnewMessage.put(\"error\", ie.getMessage());\n\t\t\t\tnewMessage.put(\"servletContextName\", servletContextName);\n\t\t\t\tnewMessage.put(\"targetClassName\", targetClassName);\n\t\t\t\tnewMessage.put(\"targetClassPK\", 0);\n\n\t\t\t\tMessageBusUtil.sendMessage(\n\t\t\t\t\t\"liferay/resources_importer\", newMessage);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tCompanyThreadLocal.setCompanyId(companyId);\n\t\t\t}\n\t\t}\n\t}","id":18449,"modified_method":"protected void initialize(Message message) throws Exception {\n\t\tString servletContextName = message.getString(\"servletContextName\");\n\n\t\tServletContext servletContext = ServletContextPool.get(\n\t\t\tservletContextName);\n\n\t\tif ((servletContext.getResource(_RESOURCES_DIR) == null) &&\n\t\t\t(servletContext.getResource(_TEMPLATES_DIR) == null)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tProperties pluginPackageProperties = getPluginPackageProperties(\n\t\t\tservletContext);\n\n\t\tString targetClassName = pluginPackageProperties.getProperty(\n\t\t\t\"resources-importer-target-class-name\",\n\t\t\tLayoutSetPrototype.class.getName());\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\t_RESOURCES_DIR);\n\t\tSet<String> templatePaths = servletContext.getResourcePaths(\n\t\t\t_TEMPLATES_DIR);\n\n\t\tURL privateLARURL = null;\n\t\tURL publicLARURL = servletContext.getResource(\n\t\t\t_RESOURCES_DIR.concat(\"archive.lar\"));\n\n\t\tif (publicLARURL == null) {\n\t\t\tprivateLARURL = servletContext.getResource(\n\t\t\t\t_RESOURCES_DIR.concat(\"private.lar\"));\n\t\t\tpublicLARURL = servletContext.getResource(\n\t\t\t\t_RESOURCES_DIR.concat(\"public.lar\"));\n\t\t}\n\n\t\tList<Company> companies = CompanyLocalServiceUtil.getCompanies();\n\n\t\tfor (Company company : companies) {\n\t\t\tlong companyId = CompanyThreadLocal.getCompanyId();\n\n\t\t\ttry {\n\t\t\t\tCompanyThreadLocal.setCompanyId(company.getCompanyId());\n\n\t\t\t\tImporter importer = null;\n\n\t\t\t\tif ((privateLARURL != null) || (publicLARURL != null)) {\n\t\t\t\t\tLARImporter larImporter = getLARImporter();\n\n\t\t\t\t\tURLConnection privateLARURLConnection = null;\n\n\t\t\t\t\tif (privateLARURL != null) {\n\t\t\t\t\t\tprivateLARURLConnection =\n\t\t\t\t\t\t\tprivateLARURL.openConnection();\n\n\t\t\t\t\t\tlarImporter.setPrivateLARInputStream(\n\t\t\t\t\t\t\tprivateLARURLConnection.getInputStream());\n\t\t\t\t\t}\n\n\t\t\t\t\tURLConnection publicLARURLConnection = null;\n\n\t\t\t\t\tif (publicLARURL != null) {\n\t\t\t\t\t\tpublicLARURLConnection = publicLARURL.openConnection();\n\n\t\t\t\t\t\tlarImporter.setPublicLARInputStream(\n\t\t\t\t\t\t\tpublicLARURLConnection.getInputStream());\n\t\t\t\t\t}\n\n\t\t\t\t\timporter = larImporter;\n\t\t\t\t}\n\t\t\t\telse if ((resourcePaths != null) && !resourcePaths.isEmpty()) {\n\t\t\t\t\timporter = getResourceImporter();\n\n\t\t\t\t\timporter.setResourcesDir(_RESOURCES_DIR);\n\t\t\t\t}\n\t\t\t\telse if ((templatePaths != null) && !templatePaths.isEmpty()) {\n\t\t\t\t\timporter = getResourceImporter();\n\n\t\t\t\t\tGroup group = GroupLocalServiceUtil.getCompanyGroup(\n\t\t\t\t\t\tcompany.getCompanyId());\n\n\t\t\t\t\timporter.setGroupId(group.getGroupId());\n\t\t\t\t\timporter.setResourcesDir(_TEMPLATES_DIR);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tString resourcesDir = pluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"resources-importer-external-dir\");\n\n\t\t\t\t\tif (Validator.isNotNull(resourcesDir)) {\n\t\t\t\t\t\timporter = getFileSystemImporter();\n\n\t\t\t\t\t\timporter.setResourcesDir(resourcesDir);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (importer == null) {\n\t\t\t\t\tthrow new ImporterException(\"No valid importer found\");\n\t\t\t\t}\n\n\t\t\t\timporter.setCompanyId(company.getCompanyId());\n\t\t\t\timporter.setServletContext(servletContext);\n\t\t\t\timporter.setServletContextName(servletContextName);\n\t\t\t\timporter.setTargetClassName(targetClassName);\n\n\t\t\t\tString targetValue = pluginPackageProperties.getProperty(\n\t\t\t\t\t\"resources-importer-target-value\");\n\n\t\t\t\tif (Validator.isNull(targetValue)) {\n\t\t\t\t\ttargetValue = TextFormatter.format(\n\t\t\t\t\t\tservletContextName, TextFormatter.J);\n\t\t\t\t}\n\n\t\t\t\timporter.setTargetValue(targetValue);\n\n\t\t\t\tint version = GetterUtil.getInteger(\n\t\t\t\t\tpluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"module-incremental-version\", \"1\"));\n\n\t\t\t\timporter.setVersion(version);\n\n\t\t\t\tboolean developerModeEnabled = GetterUtil.getBoolean(\n\t\t\t\t\tpluginPackageProperties.getProperty(\n\t\t\t\t\t\t\"resources-importer-developer-mode-enabled\"));\n\n\t\t\t\timporter.setDeveloperModeEnabled(developerModeEnabled);\n\n\t\t\t\timporter.afterPropertiesSet();\n\n\t\t\t\tif (!developerModeEnabled && importer.isExisting() &&\n\t\t\t\t\t!importer.isCompanyGroup()) {\n\n\t\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\t\"Group or layout set prototype already exists \" +\n\t\t\t\t\t\t\t\t\"for company \" + company.getWebId());\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlong startTime = 0;\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tstartTime = System.currentTimeMillis();\n\t\t\t\t}\n\n\t\t\t\timporter.importResources();\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tlong endTime = System.currentTimeMillis() - startTime;\n\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Importing resources from \" + servletContextName +\n\t\t\t\t\t\t\t\" to group \" + importer.getGroupId() + \" takes \" +\n\t\t\t\t\t\t\t\tendTime + \" ms\");\n\t\t\t\t}\n\n\t\t\t\tMessage newMessage = new Message();\n\n\t\t\t\tnewMessage.put(\"companyId\", company.getCompanyId());\n\t\t\t\tnewMessage.put(\"servletContextName\", servletContextName);\n\t\t\t\tnewMessage.put(\"targetClassName\", targetClassName);\n\t\t\t\tnewMessage.put(\"targetClassPK\", importer.getTargetClassPK());\n\n\t\t\t\tif (message.getResponseId() != null) {\n\t\t\t\t\tMap<String, Object> responseMap =\n\t\t\t\t\t\tnew HashMap<String, Object>();\n\n\t\t\t\t\tresponseMap.put(\"groupId\", importer.getTargetClassPK());\n\n\t\t\t\t\tnewMessage.setPayload(responseMap);\n\n\t\t\t\t\tnewMessage.setResponseId(message.getResponseId());\n\t\t\t\t}\n\n\t\t\t\tMessageBusUtil.sendMessage(\n\t\t\t\t\t\"liferay/resources_importer\", newMessage);\n\t\t\t}\n\t\t\tcatch (ImporterException ie) {\n\t\t\t\tMessage newMessage = new Message();\n\n\t\t\t\tnewMessage.put(\"companyId\", company.getCompanyId());\n\t\t\t\tnewMessage.put(\"error\", ie.getMessage());\n\t\t\t\tnewMessage.put(\"servletContextName\", servletContextName);\n\t\t\t\tnewMessage.put(\"targetClassName\", targetClassName);\n\t\t\t\tnewMessage.put(\"targetClassPK\", 0);\n\n\t\t\t\tMessageBusUtil.sendMessage(\n\t\t\t\t\t\"liferay/resources_importer\", newMessage);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tCompanyThreadLocal.setCompanyId(companyId);\n\t\t\t}\n\t\t}\n\t}","commit_id":"27285cd75bf1777a340c6b4b4071b55bf12e2087","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void processRequestResponse() {\n  if (myClient.available() > 0) {\n    String line = myClient.readStringUntil((byte) 10);\n    //println(\"Line: \" + line);\n    if (line == null) line = \"\"; else line = line.trim();\n    if (line.startsWith(\"<domain\")) processDomain(parseProps(line.substring(7, line.length() - 1).trim()));\n    if (line.startsWith(\"<citation\")) processCitation(parseProps(line.substring(9, line.length() - 2).trim()));\n  }\n}","id":18450,"modified_method":"public void processRequestResponse(int steps) {\n  if (((myClient == null) || (myClient.available() <= 0)) && (System.currentTimeMillis() - lastUpdate > 10000)) {\n    initRequest(true);\n    lastUpdate = Long.MAX_VALUE;\n    return;\n  }\n  for (int i = 0; i < steps; i++) {\n    if (myClient.available() > 0) {\n      String line = myClient.readStringUntil((byte) 10);\n      //println(\"Line: \" + line);\n      if (line == null) line = \"\"; else line = line.trim();\n      if (line.startsWith(\"<domain\")) processDomain(parseProps(line.substring(7, line.length() - 1).trim()));\n      if (line.startsWith(\"<citation\")) processCitation(parseProps(line.substring(9, line.length() - 2).trim()));\n      lastUpdate = System.currentTimeMillis();\n    } else {\n      initTime = false;\n    }\n  }\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void updateCentroid() {\n  float \n    xMax = Float.NEGATIVE_INFINITY, \n    xMin = Float.POSITIVE_INFINITY, \n    yMin = Float.POSITIVE_INFINITY, \n    yMax = Float.NEGATIVE_INFINITY;\n\n  for ( int i = 0; i < physics.numberOfParticles(); ++i ) {\n    Particle p = physics.getParticle( i );\n    xMax = max( xMax, p.position().x() );\n    xMin = min( xMin, p.position().x() );\n    yMin = min( yMin, p.position().y() );\n    yMax = max( yMax, p.position().y() );\n  }\n  float deltaX = xMax-xMin;\n  float deltaY = yMax-yMin;\n  if ( deltaY > deltaX )\n    centroid.setTarget( xMin + 0.5f*deltaX, yMin +0.5f*deltaY, height/(deltaY+50) );\n  else\n    centroid.setTarget( xMin + 0.5f*deltaX, yMin +0.5f*deltaY, width/(deltaX+50) );\n}","id":18451,"modified_method":"public void updateCentroid(HashSet invisible) {\n  float \n    xMax = Float.NEGATIVE_INFINITY, \n    xMin = Float.POSITIVE_INFINITY, \n    yMin = Float.POSITIVE_INFINITY, \n    yMax = Float.NEGATIVE_INFINITY;\n\n  for (int i = 0; i < physics.numberOfParticles(); ++i) {\n    Particle p = physics.getParticle(i);\n    if ((i >= 2) && ((p == center0) || (p == center1) || (invisible.contains(p)))) continue;\n    xMax = max( xMax, p.position().x() );\n    xMin = min( xMin, p.position().x() );\n    yMin = min( yMin, p.position().y() );\n    yMax = max( yMax, p.position().y() );\n  }\n  \n  float deltaX = xMax-xMin;\n  float deltaY = yMax-yMin;\n  centroid.setTarget(\n    xMin + (x + 1) * 0.5f * deltaX,\n    yMin + (y + 1) * 0.5f * deltaY,\n    z * ((deltaY > deltaX) ? height / (deltaY + 50) : width / (deltaX + 50))\n  );\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void keyPressed() {\n  if ( key == 'c' ) {\n    initializePhysics();\n    return;\n  }\n  \n  if ( key == ' ' ) {\n    Particle p = physics.makeParticle();\n    addRelation(p, physics.getParticle( (int) random( 0, physics.numberOfParticles()-1) ));\n    addAttraction(p);\n    return;\n  }\n}","id":18452,"modified_method":"public void keyPressed() {\n  if ( key == 'c' ) initializePhysics();\n  if ( key == 'a' ) x = Math.max(-1.0f, x - 0.1f);\n  if ( key == 'd' ) x = Math.min( 1.0f, x + 0.1f);\n  if ( key == 'w' ) y = Math.max(-1.0f, y - 0.1f);\n  if ( key == 's' ) y = Math.min( 1.0f, y + 0.1f);\n  if ( key == '-' ) z = Math.max( 1.0f, z - 1.0f);\n  if ( key == '+' ) z = Math.min(10.0f, z + 1.0f);\n  if ( key == '0' ) { x = 0.0f; y = 0.0f; z = 1.0f; }\n  if ( key == 't' ) {\n    HashSet hs = new HashSet();\n    for (int i = 0; i < physics.numberOfParticles(); ++i ) {\n      hs.add(physics.getParticle(i));\n    }\n    for (int i = 0; i < physics.numberOfSprings(); ++i ) {\n      hs.remove(physics.getSpring(i).getOneEnd());\n      hs.remove(physics.getSpring(i).getTheOtherEnd());\n    }\n    Iterator i = hs.iterator();\n    while (i.hasNext()) {\n      ((Particle) i.next()).kill();\n    }\n    return;\n  }\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void addAttraction(Particle p) {\n  physics.makeAttraction(center0, p, 5000.0f, 3 * EDGE_LENGTH);\n  physics.makeAttraction(center1, p, 5000.0f, 3 * EDGE_LENGTH);\n\n  // spacers\n  for ( int i = 0; i < physics.numberOfParticles(); ++i ) {\n    Particle q = physics.getParticle( i );\n    if (p != q) physics.makeAttraction( p, q, -SPACER_STRENGTH, 20);\n  }\n}","id":18453,"modified_method":"public void addAttraction(Particle p) {\n  physics.makeAttraction(center0, p, SPACER_STRENGTH * 10000.0f, 100 * EDGE_LENGTH);\n  physics.makeAttraction(center1, p, SPACER_STRENGTH * 10000.0f, 100 * EDGE_LENGTH);\n\n  // spacers\n  for ( int i = 0; i < physics.numberOfParticles(); ++i ) {\n    Particle q = physics.getParticle( i );\n    if (p != q) physics.makeAttraction( p, q, -SPACER_STRENGTH, 20);\n  }\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void processCitation(HashMap props) {\n  //println(\"Citation: \" + props.toString());\n  String host = (String) props.get(\"host\"); if (host == null) host = \"\";\n  String id = (String) props.get(\"id\"); if (id == null) id = \"\";\n  int count = 0;\n  try {\n  String counts = (String) props.get(\"count\"); if (counts != null) count = Integer.parseInt(counts);\n  } catch (NumberFormatException e) {}\n  // find the two nodes that have a relation\n  host h = (host) nodes.get(id);\n  if (h == null) return; // host is not known TODO: store these and create relation later\n  host p = (host) nodes.get(parsingHostID); // this should be successful\n  addRelation(h.node, p.node);\n}","id":18454,"modified_method":"public void processCitation(HashMap props) {\n  //println(\"Citation: \" + props.toString());\n  String host = (String) props.get(\"host\"); if (host == null) host = \"\";\n  String id = (String) props.get(\"id\"); if (id == null) id = \"\";\n  int count = 0;\n  try {\n  String counts = (String) props.get(\"count\"); if (counts != null) count = Integer.parseInt(counts);\n  } catch (NumberFormatException e) {}\n  // find the two nodes that have a relation\n  host h = (host) nodes.get(id);\n  if (h == null) {\n    return; /*\n    h = new host(host, physics.makeParticle(1.0, EDGE_LENGTH * 20 * cos(a), -EDGE_LENGTH * 10 * sin(a), 0));\n    a += TWO_PI/256.0 + TWO_PI / 2; if (a > TWO_PI) a -= TWO_PI;\n    nodes.put(id, h);\n    addAttraction(h.node);*/\n  }\n  h.time = System.currentTimeMillis();\n  host p = (host) nodes.get(parsingHostID); // this should be successful\n  // prevent that a spring is made twice\n  for ( int i = 0; i < physics.numberOfSprings(); ++i ) {\n    Spring e = physics.getSpring(i);\n    Particle a = e.getOneEnd();\n    Particle b = e.getTheOtherEnd();\n    if (((a == h.node) && (b == p.node)) || ((b == h.node) && (a == p.node))) return;\n  }\n  physics.makeSpring(h.node, p.node, EDGE_STRENGTH, EDGE_STRENGTH, EDGE_LENGTH );\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void draw() {\n  processRequestResponse();\n  \n  physics.tick( 1.0f ); \n  if (physics.numberOfParticles() > 1) updateCentroid();\n  centroid.tick();\n\n  background( 0 );\n  translate( width/2 , height/2 );\n  scale( centroid.z() );\n  translate( -centroid.x(), -centroid.y() );\n \n  drawNetwork();\n}","id":18455,"modified_method":"public void draw() {\n  processRequestResponse(20);\n  \n  physics.tick( 1.0f ); \n  HashSet invisible = invisibleParticles();\n  if (physics.numberOfParticles() > 1) updateCentroid(invisible);\n  centroid.tick();\n\n  background( 0 );\n  translate( width/2 , height/2 );\n  scale( centroid.z() );\n  translate( -centroid.x(), -centroid.y() );\n \n  drawNetwork(invisible);\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void initRequest() {\n  myClient = new Client(this, \"localhost\", 8080);\n  myClient.write(\"GET /xml/webstructure.xml HTTP/1.1\\n\");\n  myClient.write(\"Host: localhost\\n\\n\");\n}","id":18456,"modified_method":"public void initRequest(boolean update) {\n  myClient = new Client(this, host, port);\n  myClient.write((update) ? \"GET /xml/webstructure.xml?latest= HTTP/1.1\\n\" : \"GET /xml/webstructure.xml HTTP/1.1\\n\");\n  myClient.write(\"Host: localhost\\n\\n\");\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void drawNetwork() {      \n  fill( 100, 255, 100 );\n  \n  // draw vertices\n  noStroke();\n  String name;\n  Iterator j = nodes.values().iterator();\n  host h;\n  while (j.hasNext()) {\n    h = (host) j.next();\n    Particle v = h.node;\n    ellipse(v.position().x(), v.position().y(), NODE_SIZE, NODE_SIZE);\n    name = h.name;\n    text(name, v.position().x() - (name.length() * 26 / 10), v.position().y() + 14);\n  }\n  \n  // draw center\n  /*\n  ellipse( center0.position().x(), center0.position().y(), NODE_SIZE * 2, NODE_SIZE * 2 );\n  name = \"Center0\";\n  text(name, center0.position().x() - (name.length() * 26 / 10), center0.position().y() + 14);\n  ellipse( center1.position().x(), center1.position().y(), NODE_SIZE * 2, NODE_SIZE * 2 );\n  name = \"Center1\";\n  text(name, center1.position().x() - (name.length() * 26 / 10), center1.position().y() + 14);\n  */\n  \n  // draw edges \n  stroke( 160 );\n  beginShape( LINES );\n  for ( int i = 0; i < physics.numberOfSprings(); ++i ) {\n    Spring e = physics.getSpring( i );\n    Particle a = e.getOneEnd();\n    Particle b = e.getTheOtherEnd();\n    vertex( a.position().x(), a.position().y() );\n    vertex( b.position().x(), b.position().y() );\n  }\n  endShape();\n}","id":18457,"modified_method":"public void drawNetwork(HashSet invisible) {\n  \n  // draw vertices\n  fill( 120, 255, 120 );\n  noStroke();\n  String name;\n  host h;\n  Iterator j = nodes.values().iterator();\n  while (j.hasNext()) {\n    h = (host) j.next();\n    Particle v = h.node;\n    if (invisible.contains(v)) continue;\n    ellipse(v.position().x(), v.position().y(), NODE_SIZE, NODE_SIZE);\n    name = h.name;\n    text(name, v.position().x() - (name.length() * 26 / 10), v.position().y() + 14);\n  }\n\n  // draw center\n  //fill( 255, 0, 0 );\n  //ellipse( center0.position().x(), center0.position().y(), NODE_SIZE * 2, NODE_SIZE * 2 );\n  //ellipse( center1.position().x(), center1.position().y(), NODE_SIZE * 2, NODE_SIZE * 2 );\n\n  // draw edges \n  stroke( 200 );\n  for ( int i = 0; i < physics.numberOfSprings(); ++i ) {\n    Spring e = physics.getSpring( i );\n    Particle a = e.getOneEnd();\n    if (invisible.contains(a)) continue;\n    Particle b = e.getTheOtherEnd();\n    if (invisible.contains(b)) continue;\n    line(a.position().x(), a.position().y(), b.position().x(), b.position().y());\n  }\n\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void initializePhysics() {\n  physics.clear();\n  center0 = physics.makeParticle(1.0f, 0, 0, 0);\n  center0.makeFixed();\n  center1 = physics.makeParticle(1.0f, EDGE_LENGTH * 30, 0, 0);\n  center1.makeFixed();\n  centroid.setValue( 0, 0, 1.0f );\n}","id":18458,"modified_method":"public void initializePhysics() {\n  physics.clear();\n  center0 = physics.makeParticle(1.0f, -EDGE_LENGTH * 10, 0, 0);\n  center0.makeFixed();\n  center1 = physics.makeParticle(1.0f, EDGE_LENGTH * 10, 0, 0);\n  center1.makeFixed();\n  centroid.setValue( 0, 0, 1.0f );\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void setup() {\n  \n  String[] fontList = PFont.list();\n  //println(fontList);\n  font = createFont(fontList[0], 32); //just take any, should be mostly Arial\n  textFont(font, 12); \n  \n  size(660, 400);\n  smooth();\n  frameRate( 24 );\n  strokeWeight( 2 );\n  ellipseMode( CENTER );       \n  \n  physics = new ParticleSystem( 0, 0.25f );\n  centroid = new Smoother3D( 0.8f );\n\n  initializePhysics();\n  initRequest();\n}","id":18459,"modified_method":"public void setup() {\n  \n  String[] fontList = PFont.list();\n  //println(fontList);\n  font = createFont(fontList[0], 32); //just take any, should be mostly Arial\n  textFont(font, 9); \n  \n  size(660, 400);\n  smooth();\n  frameRate( 12 );\n  strokeWeight( 1 );\n  ellipseMode( CENTER );       \n  \n  physics = new ParticleSystem( 0, 0.25f );\n  centroid = new Smoother3D( 0.8f );\n\n  initializePhysics();\n  URL url = null;\n  try {\n    url = getDocumentBase();\n  } catch (NullPointerException e) {}\n  if (url == null) {\n    host=\"localhost\";\n    port=8080;\n  } else {\n    host=url.getHost();\n    port=url.getPort();\n  }\n  //println(\"CodeBase: \" + url);\n  //println(\"host: \" + host);\n  //println(\"port: \" + port);\n  \n  initRequest(false);\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void processDomain(HashMap props) {\n  //println(\"Domain: \" + props.toString());\n  parsingHostName = (String) props.get(\"host\"); if (parsingHostName == null) parsingHostName = \"\";\n  parsingHostID = (String) props.get(\"id\"); if (parsingHostID == null) parsingHostID = \"\";\n  host h = new host(parsingHostName, physics.makeParticle(1.0f, random(0, EDGE_LENGTH * 30), random(- EDGE_LENGTH * 2, EDGE_LENGTH * 2), 0));\n  nodes.put(parsingHostID, h);\n  addAttraction(h.node);\n}","id":18460,"modified_method":"public void processDomain(HashMap props) {\n  //println(\"Domain: \" + props.toString());\n  parsingHostName = (String) props.get(\"host\"); if (parsingHostName == null) parsingHostName = \"\";\n  parsingHostID = (String) props.get(\"id\"); if (parsingHostID == null) parsingHostID = \"\";\n  host h = (host) nodes.get(parsingHostID);\n  if (h != null) {\n    h.time = System.currentTimeMillis();\n    return;\n  }\n  h = new host(parsingHostName, physics.makeParticle(1.0f, EDGE_LENGTH * 20 * cos(a), -EDGE_LENGTH * 10 * sin(a), 0));\n  a += TWO_PI/256.0f + TWO_PI / 2; if (a > TWO_PI) a -= TWO_PI;\n  nodes.put(parsingHostID, h);\n  addAttraction(h.node);\n}","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public host(String name, Particle node) {\n    this.name = name;\n    this.node = node;\n  }","id":18461,"modified_method":"public host(String name, Particle node) {\n    this.name = name;\n    this.node = node;\n    this.time = System.currentTimeMillis();\n  }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public String referrerHash() {\r\n            return referrerHash;\r\n        }","id":18462,"modified_method":"public String referrerHash() {\r\n            return (referrerHash == null) ? \"\" : referrerHash;\r\n        }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public structureIterator() {\n            i = structure.entrySet().iterator();\n            next0();\n        }","id":18463,"modified_method":"public structureIterator(boolean latest) {\n            i = ((latest) ? structure_new : structure_old).entrySet().iterator();\n            next0();\n        }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public plasmaWebStructure(serverLog log, File rankingPath, String crlFile, String crgFile, File structureFile) {\n        this.log = log;\n        this.rankingPath = rankingPath;\n        this.crlFile = crlFile;\n        this.crgFile = crgFile;\n        this.crg = new StringBuffer(maxCRGDump);\n        this.structure = new TreeMap<String, String>();\n        this.structureFile = structureFile;\n        \n        // load web structure\n        Map<String, String> loadedStructure = (this.structureFile.exists()) ? serverFileUtils.loadHashMap(this.structureFile) : new TreeMap<String, String>();\n        if (loadedStructure != null) this.structure.putAll(loadedStructure);\n        \n        // delete outdated entries in case the structure is too big\n        if (this.structure.size() > maxhosts) {\n        \t// fill a set with last-modified - dates of the structure\n        \tTreeSet<String> delset = new TreeSet<String>();\n        \tString key, value;\n        \tfor (Map.Entry<String, String> entry : this.structure.entrySet()) {\n        \t\tkey = entry.getKey();\n        \t\tvalue = entry.getValue();\n        \t\tdelset.add(value.substring(0, 8) + key);\n        \t}\n        \tint delcount = this.structure.size() - (maxhosts * 9 / 10);\n        \tIterator<String> j = delset.iterator();\n        \twhile ((delcount > 0) && (j.hasNext())) {\n        \t\tthis.structure.remove(j.next().substring(8));\n        \t\tdelcount--;\n        \t}\n        }\n    }","id":18464,"modified_method":"public plasmaWebStructure(serverLog log, File rankingPath, String crlFile, String crgFile, File structureFile) {\n        this.log = log;\n        this.rankingPath = rankingPath;\n        this.crlFile = crlFile;\n        this.crgFile = crgFile;\n        this.crg = new StringBuffer(maxCRGDump);\n        this.structure_old = new TreeMap<String, String>();\n        this.structure_new = new TreeMap<String, String>();\n        this.structureFile = structureFile;\n        \n        // load web structure\n        Map<String, String> loadedStructure = (this.structureFile.exists()) ? serverFileUtils.loadHashMap(this.structureFile) : new TreeMap<String, String>();\n        if (loadedStructure != null) this.structure_old.putAll(loadedStructure);\n        \n        // delete out-dated entries in case the structure is too big\n        if (this.structure_old.size() > maxhosts) {\n        \t// fill a set with last-modified - dates of the structure\n        \tTreeSet<String> delset = new TreeSet<String>();\n        \tString key, value;\n        \tfor (Map.Entry<String, String> entry : this.structure_old.entrySet()) {\n        \t\tkey = entry.getKey();\n        \t\tvalue = entry.getValue();\n        \t\tdelset.add(value.substring(0, 8) + key);\n        \t}\n        \tint delcount = this.structure_old.size() - (maxhosts * 9 / 10);\n        \tIterator<String> j = delset.iterator();\n        \twhile ((delcount > 0) && (j.hasNext())) {\n        \t\tthis.structure_old.remove(j.next().substring(8));\n        \t\tdelcount--;\n        \t}\n        }\n    }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private void learn(yacyURL url, StringBuffer reference /*string of b64(12digits)-hashes*/) {\n        String domhash = url.hash().substring(6);\n\n        // parse the new reference string and join it with the stored references\n        Map<String, Integer> refs = references(domhash);\n        assert reference.length() % 12 == 0;\n        String dom;\n        int c;\n        for (int i = 0; i < reference.length() / 12; i++) {\n            dom = reference.substring(i * 12 + 6, (i + 1) * 12);\n            c = 0;\n            if (refs.containsKey(dom)) {\n                c = ((Integer) refs.get(dom)).intValue();\n            }\n            refs.put(dom, new Integer(++c));\n        }\n        \n        // check if the maxref is exceeded\n        if (refs.size() > maxref) {\n        \tint shrink = refs.size() - (maxref * 9 / 10);\n\t\t\tdelloop: while (shrink > 0) {\n\t\t\t\t// shrink the references: the entry with the smallest number of references is removed\n\t\t\t\tint minrefcount = Integer.MAX_VALUE;\n\t\t\t\tString minrefkey = null;\n\t\t\t\tfindloop: for (Map.Entry<String, Integer> entry : refs.entrySet()) {\n\t\t\t\t\tif (entry.getValue().intValue() < minrefcount) {\n\t\t\t\t\t\tminrefcount = entry.getValue().intValue();\n\t\t\t\t\t\tminrefkey = entry.getKey();\n\t\t\t\t\t}\n\t\t\t\t\tif (minrefcount == 1) break findloop;\n\t\t\t\t}\n\t\t\t\t// remove the smallest\n\t\t\t\tif (minrefkey == null) break delloop;\n\t\t\t\trefs.remove(minrefkey);\n\t\t\t\tshrink--;\n\t\t\t}\n\t\t}\n        \n        // store the map back to the structure\n        synchronized(structure) {\n            structure.put(domhash + \",\" + url.getHost(), map2refstr(refs));\n        }\n    }","id":18465,"modified_method":"private void learn(yacyURL url, StringBuffer reference /*string of b64(12digits)-hashes*/) {\n        String domhash = url.hash().substring(6);\n\n        // parse the new reference string and join it with the stored references\n        Map<String, Integer> refs = references(domhash);\n        assert reference.length() % 12 == 0;\n        String dom;\n        int c;\n        for (int i = 0; i < reference.length() / 12; i++) {\n            dom = reference.substring(i * 12 + 6, (i + 1) * 12);\n            c = 0;\n            if (refs.containsKey(dom)) {\n                c = ((Integer) refs.get(dom)).intValue();\n            }\n            refs.put(dom, new Integer(++c));\n        }\n        \n        // check if the maxref is exceeded\n        if (refs.size() > maxref) {\n        \tint shrink = refs.size() - (maxref * 9 / 10);\n\t\t\tdelloop: while (shrink > 0) {\n\t\t\t\t// shrink the references: the entry with the smallest number of references is removed\n\t\t\t\tint minrefcount = Integer.MAX_VALUE;\n\t\t\t\tString minrefkey = null;\n\t\t\t\tfindloop: for (Map.Entry<String, Integer> entry : refs.entrySet()) {\n\t\t\t\t\tif (entry.getValue().intValue() < minrefcount) {\n\t\t\t\t\t\tminrefcount = entry.getValue().intValue();\n\t\t\t\t\t\tminrefkey = entry.getKey();\n\t\t\t\t\t}\n\t\t\t\t\tif (minrefcount == 1) break findloop;\n\t\t\t\t}\n\t\t\t\t// remove the smallest\n\t\t\t\tif (minrefkey == null) break delloop;\n\t\t\t\trefs.remove(minrefkey);\n\t\t\t\tshrink--;\n\t\t\t}\n\t\t}\n        \n        // store the map back to the structure\n        synchronized(structure_new) {\n            structure_new.put(domhash + \",\" + url.getHost(), map2refstr(refs));\n        }\n    }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void saveWebStructure() {\n        try {\n            synchronized(structure) {\n                serverFileUtils.saveMap(this.structureFile, this.structure, \"Web Structure Syntax: <b64hash(6)>','<host> to <date-yyyymmdd(8)>{<target-b64hash(6)><target-count-hex(4)>}*\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }","id":18466,"modified_method":"public void saveWebStructure() {\n        joinOldNew();\n        try {\n            synchronized(structure_old) {\n                serverFileUtils.saveMap(this.structureFile, this.structure_old, \"Web Structure Syntax: <b64hash(6)>','<host> to <date-yyyymmdd(8)>{<target-b64hash(6)><target-count-hex(4)>}*\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public String resolveDomHash2DomString(String domhash) {\n        // returns the domain as string, null if unknown\n        assert domhash.length() == 6;\n        synchronized(structure) {\n            SortedMap<String, String> tailMap = structure.tailMap(domhash);\n            if ((tailMap == null) || (tailMap.isEmpty())) return null;\n            String key = tailMap.firstKey();\n            if (key.startsWith(domhash)) {\n                return key.substring(7);\n            } else {\n                return null;\n            }\n        }\n    }","id":18467,"modified_method":"public String resolveDomHash2DomString(String domhash) {\n        // returns the domain as string, null if unknown\n        assert domhash.length() == 6;\n        SortedMap<String, String> tailMap;\n        synchronized(structure_old) {\n            tailMap = structure_old.tailMap(domhash);\n            if (!tailMap.isEmpty()) {\n                String key = tailMap.firstKey();\n                if (key.startsWith(domhash)) {\n                    return key.substring(7);\n                }\n            }\n        }\n        synchronized(structure_new) {\n            tailMap = structure_new.tailMap(domhash);\n            if (!tailMap.isEmpty()) {\n                String key = tailMap.firstKey();\n                if (key.startsWith(domhash)) {\n                    return key.substring(7);\n                }\n            }\n        }\n        return null;\n    }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public String hostWithMaxReferences() {\n        // find domain with most references\n        String maxhost = null;\n        int refsize, maxref = 0;\n        synchronized(structure) {\n            for (Map.Entry<String, String> entry : structure.entrySet()) {\n                refsize = entry.getValue().length();\n                if (refsize > maxref) {\n                    maxref = refsize;\n                    maxhost = entry.getKey().substring(7);\n                }\n            }\n        }\n        return maxhost;\n    }","id":18468,"modified_method":"public String hostWithMaxReferences() {\n        // find domain with most references\n        String maxhost = null;\n        int refsize, maxref = 0;\n        joinOldNew();\n        synchronized(structure_new) {\n            for (Map.Entry<String, String> entry : structure_old.entrySet()) {\n                refsize = entry.getValue().length();\n                if (refsize > maxref) {\n                    maxref = refsize;\n                    maxhost = entry.getKey().substring(7);\n                }\n            }\n        }\n        return maxhost;\n    }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public Map<String, Integer> references(String domhash) {\n        // returns a map with a domhash(String):refcount(Integer) relation\n        assert domhash.length() == 6;\n        synchronized(structure) {\n            SortedMap<String, String> tailMap = structure.tailMap(domhash);\n            if ((tailMap == null) || (tailMap.isEmpty())) return new HashMap<String, Integer>();\n            String key = tailMap.firstKey();\n            if (key.startsWith(domhash)) {\n                return refstr2map(tailMap.get(key));\n            } else {\n                return new HashMap<String, Integer>();\n            }\n        }\n    }","id":18469,"modified_method":"public Map<String, Integer> references(String domhash) {\n        // returns a map with a domhash(String):refcount(Integer) relation\n        assert domhash.length() == 6;\n        SortedMap<String, String> tailMap;\n        Map<String, Integer> h = new HashMap<String, Integer>();\n        synchronized (structure_old) {\n            tailMap = structure_old.tailMap(domhash);\n            if (!tailMap.isEmpty()) {\n                String key = tailMap.firstKey();\n                if (key.startsWith(domhash)) {\n                    h = refstr2map(tailMap.get(key));\n                }\n            }\n        }\n        synchronized (structure_new) {\n            tailMap = structure_new.tailMap(domhash);\n            if (!tailMap.isEmpty()) {\n                String key = tailMap.firstKey();\n                if (key.startsWith(domhash)) {\n                    h.putAll(refstr2map(tailMap.get(key)));\n                }\n            }\n        }\n        return h;\n    }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public int referencesCount(String domhash) {\n        // returns the number of domains that are referenced by this domhash\n        assert domhash.length() == 6 : \"domhash = \" + domhash;\n        synchronized(structure) {\n            SortedMap<String, String> tailMap = structure.tailMap(domhash);\n            if ((tailMap == null) || (tailMap.isEmpty())) return 0;\n            String key = tailMap.firstKey();\n            if (key.startsWith(domhash)) {\n                return refstr2count(tailMap.get(key));\n            } else {\n                return 0;\n            }\n        }\n    }","id":18470,"modified_method":"public int referencesCount(String domhash) {\n        // returns the number of domains that are referenced by this domhash\n        assert domhash.length() == 6 : \"domhash = \" + domhash;\n        SortedMap<String, String> tailMap;\n        int c = 0;\n        synchronized (structure_old) {\n            tailMap = structure_old.tailMap(domhash);\n            if (!tailMap.isEmpty()) {\n                String key = tailMap.firstKey();\n                if (key.startsWith(domhash)) {\n                    c = refstr2count(tailMap.get(key));\n                }\n            }\n        }\n        synchronized (structure_new) {\n            tailMap = structure_new.tailMap(domhash);\n            if (!tailMap.isEmpty()) {\n                String key = tailMap.firstKey();\n                if (key.startsWith(domhash)) {\n                    c += refstr2count(tailMap.get(key));\n                }\n            }\n        }\n        return c;\n    }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public Iterator<structureEntry> structureEntryIterator() {\n        // iterates objects of type structureEntry\n        return new structureIterator();\n    }","id":18471,"modified_method":"public Iterator<structureEntry> structureEntryIterator(boolean latest) {\n        // iterates objects of type structureEntry\n        return new structureIterator(latest);\n    }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch<?> env) {\n        serverObjects prop = new serverObjects();\n        plasmaSwitchboard sb = (plasmaSwitchboard) env;\n        Iterator<plasmaWebStructure.structureEntry> i = sb.webStructure.structureEntryIterator();\n        int c = 0, d;\n        plasmaWebStructure.structureEntry sentry;\n        Map.Entry<String, Integer> refentry;\n        String refdom, refhash;\n        Integer refcount;\n        Iterator<Map.Entry<String, Integer>> k;\n        while (i.hasNext()) {\n            sentry = i.next();\n            prop.put(\"domains_\" + c + \"_hash\", sentry.domhash);\n            prop.put(\"domains_\" + c + \"_domain\", sentry.domain);\n            prop.put(\"domains_\" + c + \"_date\", sentry.date);\n            k = sentry.references.entrySet().iterator();\n            d = 0;\n            refloop: while (k.hasNext()) {\n                refentry = k.next();\n                refhash = refentry.getKey();\n                refdom = sb.webStructure.resolveDomHash2DomString(refhash);\n                if (refdom == null) continue refloop;\n                prop.put(\"domains_\" + c + \"_citations_\" + d + \"_refhash\", refhash);\n                prop.put(\"domains_\" + c + \"_citations_\" + d + \"_refdom\", refdom);\n                refcount = refentry.getValue();\n                prop.put(\"domains_\" + c + \"_citations_\" + d + \"_refcount\", refcount.intValue());\n                d++;\n            }\n            prop.put(\"domains_\" + c + \"_citations\", d);\n            c++;\n        }\n        prop.put(\"domains\", c);\n        prop.put(\"maxref\", plasmaWebStructure.maxref);\n        \n        // return rewrite properties\n        return prop;\n    }","id":18472,"modified_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch<?> env) {\n        serverObjects prop = new serverObjects();\n        plasmaSwitchboard sb = (plasmaSwitchboard) env;\n        boolean latest = ((post == null) ? false : post.containsKey(\"latest\"));\n        Iterator<plasmaWebStructure.structureEntry> i = sb.webStructure.structureEntryIterator(latest);\n        int c = 0, d;\n        plasmaWebStructure.structureEntry sentry;\n        Map.Entry<String, Integer> refentry;\n        String refdom, refhash;\n        Integer refcount;\n        Iterator<Map.Entry<String, Integer>> k;\n        while (i.hasNext()) {\n            sentry = i.next();\n            prop.put(\"domains_\" + c + \"_hash\", sentry.domhash);\n            prop.put(\"domains_\" + c + \"_domain\", sentry.domain);\n            prop.put(\"domains_\" + c + \"_date\", sentry.date);\n            k = sentry.references.entrySet().iterator();\n            d = 0;\n            refloop: while (k.hasNext()) {\n                refentry = k.next();\n                refhash = refentry.getKey();\n                refdom = sb.webStructure.resolveDomHash2DomString(refhash);\n                if (refdom == null) continue refloop;\n                prop.put(\"domains_\" + c + \"_citations_\" + d + \"_refhash\", refhash);\n                prop.put(\"domains_\" + c + \"_citations_\" + d + \"_refdom\", refdom);\n                refcount = refentry.getValue();\n                prop.put(\"domains_\" + c + \"_citations_\" + d + \"_refcount\", refcount.intValue());\n                d++;\n            }\n            prop.put(\"domains_\" + c + \"_citations\", d);\n            c++;\n        }\n        prop.put(\"domains\", c);\n        prop.put(\"maxref\", plasmaWebStructure.maxref);\n        if (latest) sb.webStructure.joinOldNew();\n        \n        // return rewrite properties\n        return prop;\n    }","commit_id":"f42c8cf69c65d8081ba922531a01631d78daf9e4","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testDifferentFriendlyURLDifferentLocaleSameLayout()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tServiceContext serviceContext = ServiceTestUtil.getServiceContext(\n\t\t\tgroup.getGroupId());\n\n\t\tMap<Locale, String> randomMap = ServiceTestUtil.randomLocaleStringMap();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/casa\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","id":18473,"modified_method":"@Test\n\t@Transactional\n\tpublic void testDifferentFriendlyURLDifferentLocaleSameLayout()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(_enLocale, \"/home\");\n\t\tfriendlyURLMap.put(_esLocale, \"/casa\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","commit_id":"7e24ef615ddacfa3d365c449921abf72eca47151","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testDifferentFriendlyURLDifferentLocaleDifferentLayoutSet()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tServiceContext serviceContext = ServiceTestUtil.getServiceContext(\n\t\t\tgroup.getGroupId());\n\n\t\tMap<Locale, String> randomMap = ServiceTestUtil.randomLocaleStringMap();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/casa\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tgroup = GroupTestUtil.addGroup();\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), true,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","id":18474,"modified_method":"@Test\n\t@Transactional\n\tpublic void testDifferentFriendlyURLDifferentLocaleDifferentLayoutSet()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(_enLocale, \"/home\");\n\t\tfriendlyURLMap.put(_esLocale, \"/casa\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tgroup = GroupTestUtil.addGroup();\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), true, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","commit_id":"7e24ef615ddacfa3d365c449921abf72eca47151","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLDifferentLocaleSameLayout()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tServiceContext serviceContext = ServiceTestUtil.getServiceContext(\n\t\t\tgroup.getGroupId());\n\n\t\tMap<Locale, String> randomMap = ServiceTestUtil.randomLocaleStringMap();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/home\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","id":18475,"modified_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLDifferentLocaleSameLayout()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(_enLocale, \"/home\");\n\t\tfriendlyURLMap.put(_esLocale, \"/home\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","commit_id":"7e24ef615ddacfa3d365c449921abf72eca47151","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLDifferentLocaleDifferentGroup()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tServiceContext serviceContext = ServiceTestUtil.getServiceContext(\n\t\t\tgroup.getGroupId());\n\n\t\tMap<Locale, String> randomMap = ServiceTestUtil.randomLocaleStringMap();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/home\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tgroup = GroupTestUtil.addGroup();\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","id":18476,"modified_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLDifferentLocaleDifferentGroup()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(_enLocale, \"/home\");\n\t\tfriendlyURLMap.put(_esLocale, \"/home\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tgroup = GroupTestUtil.addGroup();\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","commit_id":"7e24ef615ddacfa3d365c449921abf72eca47151","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLDifferentLocaleDifferentLayoutSet()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tServiceContext serviceContext = ServiceTestUtil.getServiceContext(\n\t\t\tgroup.getGroupId());\n\n\t\tMap<Locale, String> randomMap = ServiceTestUtil.randomLocaleStringMap();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/home\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), true,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","id":18477,"modified_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLDifferentLocaleDifferentLayoutSet()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/home\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), true, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","commit_id":"7e24ef615ddacfa3d365c449921abf72eca47151","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLSameLocaleDifferentLayout()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tServiceContext serviceContext = ServiceTestUtil.getServiceContext(\n\t\t\tgroup.getGroupId());\n\n\t\tMap<Locale, String> randomMap = ServiceTestUtil.randomLocaleStringMap();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/casa\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tfriendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/house\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/casa\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\n\t\t\tAssert.fail();\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t}\n\t}","id":18478,"modified_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLSameLocaleDifferentLayout()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(_enLocale, \"/home\");\n\t\tfriendlyURLMap.put(_esLocale, \"/casa\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tfriendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(_enLocale, \"/house\");\n\t\tfriendlyURLMap.put(_esLocale, \"/casa\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\n\t\t\tAssert.fail();\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t}\n\t}","commit_id":"7e24ef615ddacfa3d365c449921abf72eca47151","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLDifferentLocaleDifferentLayout()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tServiceContext serviceContext = ServiceTestUtil.getServiceContext(\n\t\t\tgroup.getGroupId());\n\n\t\tMap<Locale, String> randomMap = ServiceTestUtil.randomLocaleStringMap();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/casa\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tfriendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/welcome\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/home\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\n\t\t\tAssert.fail();\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t}\n\t}","id":18479,"modified_method":"@Test\n\t@Transactional\n\tpublic void testSameFriendlyURLDifferentLocaleDifferentLayout()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/casa\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tfriendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/welcome\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/home\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\n\t\t\tAssert.fail();\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t}\n\t}","commit_id":"7e24ef615ddacfa3d365c449921abf72eca47151","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testDifferentFriendlyURLDifferentLocaleDifferentGroup()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tServiceContext serviceContext = ServiceTestUtil.getServiceContext(\n\t\t\tgroup.getGroupId());\n\n\t\tMap<Locale, String> randomMap = ServiceTestUtil.randomLocaleStringMap();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(new Locale(\"en\", \"US\"), \"/home\");\n\t\tfriendlyURLMap.put(new Locale(\"es\", \"ES\"), \"/casa\");\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tgroup = GroupTestUtil.addGroup();\n\n\t\ttry {\n\t\t\tLayoutLocalServiceUtil.addLayout(\n\t\t\t\tTestPropsValues.getUserId(), group.getGroupId(), false,\n\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID, randomMap, randomMap,\n\t\t\t\trandomMap, randomMap, randomMap, LayoutConstants.TYPE_PORTLET,\n\t\t\t\tfalse, friendlyURLMap, serviceContext);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","id":18480,"modified_method":"@Test\n\t@Transactional\n\tpublic void testDifferentFriendlyURLDifferentLocaleDifferentGroup()\n\t\tthrows Exception {\n\n\t\tGroup group = GroupTestUtil.addGroup();\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<Locale, String>();\n\n\t\tfriendlyURLMap.put(_enLocale, \"/home\");\n\t\tfriendlyURLMap.put(_esLocale, \"/casa\");\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\n\t\tgroup = GroupTestUtil.addGroup();\n\n\t\ttry {\n\t\t\taddLayout(group.getGroupId(), false, friendlyURLMap);\n\t\t}\n\t\tcatch (LayoutFriendlyURLException lfurle) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","commit_id":"7e24ef615ddacfa3d365c449921abf72eca47151","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Transactional\n    private void addOrReduceEventAsAlarm(Event event) {\n        OnmsEvent e = m_eventDao.get(event.getDbid());\n        Assert.notNull(e, \"Event was deleted before we could retrieve it and create an alarm.\"); //TODO: Understand why we use Assert\n\n        OnmsAlarm alarm = m_alarmDao.findByReductionKey(event.getAlarmData().getReductionKey());\n\n        if (alarm == null) {\n            alarm = createNewAlarm(e, event);\n            \n            //FIXME: this should be a cascaded save\n            m_alarmDao.save(alarm);\n            m_eventDao.saveOrUpdate(e);\n        } else {\n            reduceEvent(e, alarm);\n            m_alarmDao.update(alarm);\n            m_eventDao.update(e);\n\n            if (event.getAlarmData().isAutoClean()) {\n                m_eventDao.deletePreviousEventsForAlarm(alarm.getId(), e);\n            }\n        }\n    }","id":18481,"modified_method":"@Transactional\n    private void addOrReduceEventAsAlarm(Event event) {\n        OnmsEvent e = m_eventDao.get(event.getDbid());\n        Assert.notNull(e, \"Event was deleted before we could retrieve it and create an alarm.\"); //TODO: Understand why we use Assert\n    \n        String reductionKey = event.getAlarmData().getReductionKey();\n        log().debug(\"addOrReduceEventAsAlarm: looking for existing reduction key: \"+reductionKey);\n        OnmsAlarm alarm = m_alarmDao.findByReductionKey(reductionKey);\n    \n        if (alarm == null) {\n            log().debug(\"addOrReduceEventAsAlarm: reductionKey:\"+reductionKey+\" not found, instantiating new alarm\");\n            alarm = createNewAlarm(e, event);\n            \n            //FIXME: this should be a cascaded save\n            m_alarmDao.save(alarm);\n            m_eventDao.saveOrUpdate(e);\n        } else {\n            log().debug(\"addOrReduceEventAsAlarm: reductionKey:\"+reductionKey+\" found, reducting event to exisiting alarm: \"+alarm.getIpAddr());\n            reduceEvent(e, alarm);\n            m_alarmDao.update(alarm);\n            m_eventDao.update(e);\n    \n            if (event.getAlarmData().isAutoClean()) {\n                m_eventDao.deletePreviousEventsForAlarm(alarm.getId(), e);\n            }\n        }\n    }","commit_id":"5c4be93a9083c4ba7c04b406cc410acfd337a22a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    private void addOrReduceEventAsAlarm(Event event) {\n        OnmsEvent e = m_eventDao.get(event.getDbid());\n        Assert.notNull(e, \"Event was deleted before we could retrieve it and create an alarm.\"); //TODO: Understand why we use Assert\n\n        OnmsAlarm alarm = m_alarmDao.findByReductionKey(event.getAlarmData().getReductionKey());\n\n        if (alarm == null) {\n            alarm = createNewAlarm(e, event);\n            \n            //FIXME: this should be a cascaded save\n            m_alarmDao.save(alarm);\n            m_eventDao.saveOrUpdate(e);\n        } else {\n            reduceEvent(e, alarm);\n            m_alarmDao.update(alarm);\n            m_eventDao.update(e);\n\n            if (event.getAlarmData().isAutoClean()) {\n                m_eventDao.deletePreviousEventsForAlarm(alarm.getId(), e);\n            }\n        }\n    }","id":18482,"modified_method":"@Transactional\n    private void addOrReduceEventAsAlarm(Event event) {\n        OnmsEvent e = m_eventDao.get(event.getDbid());\n        Assert.notNull(e, \"Event was deleted before we could retrieve it and create an alarm.\"); //TODO: Understand why we use Assert\n    \n        String reductionKey = event.getAlarmData().getReductionKey();\n        log().debug(\"addOrReduceEventAsAlarm: looking for existing reduction key: \"+reductionKey);\n        OnmsAlarm alarm = m_alarmDao.findByReductionKey(reductionKey);\n    \n        if (alarm == null) {\n            log().debug(\"addOrReduceEventAsAlarm: reductionKey:\"+reductionKey+\" not found, instantiating new alarm\");\n            alarm = createNewAlarm(e, event);\n            \n            //FIXME: this should be a cascaded save\n            m_alarmDao.save(alarm);\n            m_eventDao.saveOrUpdate(e);\n        } else {\n            log().debug(\"addOrReduceEventAsAlarm: reductionKey:\"+reductionKey+\" found, reducting event to exisiting alarm: \"+alarm.getIpAddr());\n            reduceEvent(e, alarm);\n            m_alarmDao.update(alarm);\n            m_eventDao.update(e);\n    \n            if (event.getAlarmData().isAutoClean()) {\n                m_eventDao.deletePreviousEventsForAlarm(alarm.getId(), e);\n            }\n        }\n    }","commit_id":"c1b860caa673e01d3977b616a38685f213bb8426","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transactional\n    private void addOrReduceEventAsAlarm(Event event) {\n        OnmsEvent e = m_eventDao.get(event.getDbid());\n        Assert.notNull(e, \"Event was deleted before we could retrieve it and create an alarm.\"); //TODO: Understand why we use Assert\n\n        OnmsAlarm alarm = m_alarmDao.findByReductionKey(event.getAlarmData().getReductionKey());\n\n        if (alarm == null) {\n            alarm = createNewAlarm(e, event);\n            \n            //FIXME: this should be a cascaded save\n            m_alarmDao.save(alarm);\n            m_eventDao.saveOrUpdate(e);\n        } else {\n            reduceEvent(e, alarm);\n            m_alarmDao.update(alarm);\n            m_eventDao.update(e);\n\n            if (event.getAlarmData().isAutoClean()) {\n                m_eventDao.deletePreviousEventsForAlarm(alarm.getId(), e);\n            }\n        }\n    }","id":18483,"modified_method":"@Transactional\n    private void addOrReduceEventAsAlarm(Event event) {\n        OnmsEvent e = m_eventDao.get(event.getDbid());\n        Assert.notNull(e, \"Event was deleted before we could retrieve it and create an alarm.\"); //TODO: Understand why we use Assert\n    \n        String reductionKey = event.getAlarmData().getReductionKey();\n        log().debug(\"addOrReduceEventAsAlarm: looking for existing reduction key: \"+reductionKey);\n        OnmsAlarm alarm = m_alarmDao.findByReductionKey(reductionKey);\n    \n        if (alarm == null) {\n            log().debug(\"addOrReduceEventAsAlarm: reductionKey:\"+reductionKey+\" not found, instantiating new alarm\");\n            alarm = createNewAlarm(e, event);\n            \n            //FIXME: this should be a cascaded save\n            m_alarmDao.save(alarm);\n            m_eventDao.saveOrUpdate(e);\n        } else {\n            log().debug(\"addOrReduceEventAsAlarm: reductionKey:\"+reductionKey+\" found, reducting event to exisiting alarm: \"+alarm.getIpAddr());\n            reduceEvent(e, alarm);\n            m_alarmDao.update(alarm);\n            m_eventDao.update(e);\n    \n            if (event.getAlarmData().isAutoClean()) {\n                m_eventDao.deletePreviousEventsForAlarm(alarm.getId(), e);\n            }\n        }\n    }","commit_id":"35d4028844261e02781cf267f4cc05a80a2bfa0f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n  public void visitPyStringLiteralExpression(final PyStringLiteralExpression node) {\n    super.visitPyStringLiteralExpression(node);\n    final List<ASTNode> stringNodes = node.getStringNodes();\n\n    for (ASTNode stringNode : stringNodes) {\n      int len = 0;\n      final StringBuilder message = new StringBuilder(myCommonMessage);\n      final String nodeText = stringNode.getText();\n      final int index = PyStringLiteralExpressionImpl.getPrefixLength(nodeText);\n      final String prefix = nodeText.substring(0, index).toUpperCase();\n      final TextRange range = TextRange.create(stringNode.getStartOffset(), stringNode.getStartOffset() + index);\n      for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n        final LanguageLevel languageLevel = myVersionsToProcess.get(i);\n        if (prefix.isEmpty()) continue;\n\n        final Set<String> prefixesForLanguageLevel = AVAILABLE_PREFIXES.get(languageLevel);\n        final Set<String> prefixes = prefixesForLanguageLevel != null ? prefixesForLanguageLevel : DEFAULT_PREFIXES;\n        if (!prefixes.contains(prefix))\n          len = appendLanguageLevel(message, len, languageLevel);\n      }\n      commonRegisterProblem(message, \" not support a '\" + prefix + \"' prefix\", len, node, range, new RemovePrefixQuickFix(prefix));\n    }\n  }","id":18484,"modified_method":"@Override\n  public void visitPyStringLiteralExpression(final PyStringLiteralExpression node) {\n    super.visitPyStringLiteralExpression(node);\n\n    for (ASTNode stringNode : node.getStringNodes()) {\n      final String text = stringNode.getText();\n      final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(text);\n      final String prefix = text.substring(0, prefixLength).toUpperCase();\n      if (prefix.isEmpty()) continue;\n\n      final StringBuilder message = new StringBuilder(myCommonMessage);\n      final int len =\n        appendLanguageLevels(message, myVersionsToProcess,\n                             level -> !AVAILABLE_PREFIXES.getOrDefault(level, DEFAULT_PREFIXES).contains(prefix));\n\n      final TextRange range = TextRange.create(stringNode.getStartOffset(), stringNode.getStartOffset() + prefixLength);\n      commonRegisterProblem(message, \" not support a '\" + prefix + \"' prefix\", len, node, range, new RemovePrefixQuickFix(prefix));\n    }\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPyRaiseStatement(PyRaiseStatement node) {\n    super.visitPyRaiseStatement(node);\n    // empty raise\n    int len = 0;\n    StringBuilder message = new StringBuilder(myCommonMessage);\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      boolean hasNoArgs = UnsupportedFeaturesUtil.raiseHasNoArgs(node, languageLevel);\n      if (hasNoArgs) {\n        len = appendLanguageLevel(message, len, languageLevel);\n      }\n    }\n    commonRegisterProblem(message, \" not support this syntax. Raise with no arguments can only be used in an except block\",\n                          len, node, null, false);\n    // raise 1, 2, 3\n    len = 0;\n    message = new StringBuilder(myCommonMessage);\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      boolean hasTwoArgs = UnsupportedFeaturesUtil.raiseHasMoreThenOneArg(node, languageLevel);\n      if (hasTwoArgs) {\n        len = appendLanguageLevel(message, len, languageLevel);\n      }\n    }\n    commonRegisterProblem(message, \" not support this syntax.\",\n                          len, node, new ReplaceRaiseStatementQuickFix());\n\n    // raise exception from cause\n    len = 0;\n    message = new StringBuilder(myCommonMessage);\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      final LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      final boolean hasFrom = UnsupportedFeaturesUtil.raiseHasFromKeyword(node, languageLevel);\n      if (hasFrom) {\n        len = appendLanguageLevel(message, len, languageLevel);\n      }\n    }\n    commonRegisterProblem(message, \" not support this syntax.\",\n                          len, node, new ReplaceRaiseStatementQuickFix());\n  }","id":18485,"modified_method":"@Override\n  public void visitPyRaiseStatement(PyRaiseStatement node) {\n    super.visitPyRaiseStatement(node);\n\n    // empty raise\n    StringBuilder message = new StringBuilder(myCommonMessage);\n    int len = appendLanguageLevels(message, myVersionsToProcess, level -> UnsupportedFeaturesUtil.raiseHasNoArgs(node, level));\n    commonRegisterProblem(message, \" not support this syntax. Raise with no arguments can only be used in an except block\",\n                          len, node, null, false);\n\n    // raise 1, 2, 3\n    message = new StringBuilder(myCommonMessage);\n    len = appendLanguageLevels(message, myVersionsToProcess, level -> UnsupportedFeaturesUtil.raiseHasMoreThenOneArg(node, level));\n    commonRegisterProblem(message, \" not support this syntax.\", len, node, new ReplaceRaiseStatementQuickFix());\n\n    // raise exception from cause\n    message = new StringBuilder(myCommonMessage);\n    len = appendLanguageLevels(message, myVersionsToProcess, level -> UnsupportedFeaturesUtil.raiseHasFromKeyword(node, level));\n    commonRegisterProblem(message, \" not support this syntax.\", len, node, new ReplaceRaiseStatementQuickFix());\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPyExceptBlock(PyExceptPart node) {\n    super.visitPyExceptBlock(node);\n    PyExpression exceptClass = node.getExceptClass();\n    if (exceptClass != null) {\n      if (myVersionsToProcess.contains(LanguageLevel.PYTHON24) || myVersionsToProcess.contains(LanguageLevel.PYTHON25)) {\n        PsiElement element = exceptClass.getNextSibling();\n        while (element instanceof PsiWhiteSpace) {\n          element = element.getNextSibling();\n        }\n        if (element != null && \"as\".equals(element.getText())) {\n          registerProblem(node, myCommonMessage + \"2.4, 2.5 do not support this syntax.\");\n        }\n      }\n\n      int len = 0;\n      StringBuilder message = new StringBuilder(myCommonMessage);\n      for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n        LanguageLevel languageLevel = myVersionsToProcess.get(i);\n        if (languageLevel.isPy3K()) {\n          PsiElement element = exceptClass.getNextSibling();\n          while (element instanceof PsiWhiteSpace) {\n            element = element.getNextSibling();\n          }\n          if (element != null && \",\".equals(element.getText())) {\n            len = appendLanguageLevel(message, len, languageLevel);\n          }\n        }\n      }\n      commonRegisterProblem(message, \" not support this syntax.\", len, node, new ReplaceExceptPartQuickFix());\n    }\n  }","id":18486,"modified_method":"@Override\n  public void visitPyExceptBlock(PyExceptPart node) {\n    super.visitPyExceptBlock(node);\n\n    final PyExpression exceptClass = node.getExceptClass();\n    if (exceptClass != null) {\n      if (myVersionsToProcess.contains(LanguageLevel.PYTHON24) || myVersionsToProcess.contains(LanguageLevel.PYTHON25)) {\n        PsiElement element = exceptClass.getNextSibling();\n        while (element instanceof PsiWhiteSpace) {\n          element = element.getNextSibling();\n        }\n\n        if (element != null && \"as\".equals(element.getText())) {\n          registerProblem(node, myCommonMessage + \"2.4, 2.5 do not support this syntax.\");\n        }\n      }\n\n      PsiElement element = exceptClass.getNextSibling();\n      while (element instanceof PsiWhiteSpace) {\n        element = element.getNextSibling();\n      }\n\n      if (element != null && \",\".equals(element.getText())) {\n        final StringBuilder message = new StringBuilder(myCommonMessage);\n        final int len = appendLanguageLevels(message, myVersionsToProcess, LanguageLevel::isPy3K);\n\n        commonRegisterProblem(message, \" not support this syntax.\", len, node, new ReplaceExceptPartQuickFix());\n      }\n    }\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) {\n    super.visitPyNumericLiteralExpression(node);\n\n    final String text = node.getText();\n\n    if (node.isIntegerLiteral()) {\n      if (text.endsWith(\"l\") || text.endsWith(\"L\")) {\n        final StringBuilder message = new StringBuilder(myCommonMessage);\n        final String suffix = \" not support a trailing \\'l\\' or \\'L\\'.\";\n        int len = 0;\n\n        for (LanguageLevel languageLevel : myVersionsToProcess) {\n          if (languageLevel.isPy3K()) {\n            len = appendLanguageLevel(message, len, languageLevel);\n          }\n        }\n\n        commonRegisterProblem(message, suffix, len, node, new RemoveTrailingLQuickFix());\n      }\n\n      if (text.length() > 1 && text.charAt(0) == '0') {\n        final char secondChar = Character.toLowerCase(text.charAt(1));\n        if (secondChar != 'o' && secondChar != 'b' && secondChar != 'x' && text.chars().anyMatch(c -> c != '0')) {\n          final StringBuilder message = new StringBuilder(myCommonMessage);\n          final String suffix = \" not support this syntax. It requires '0o' prefix for octal literals\";\n          int len = 0;\n\n          for (LanguageLevel languageLevel : myVersionsToProcess) {\n            if (languageLevel.isPy3K()) {\n              len = appendLanguageLevel(message, len, languageLevel);\n            }\n          }\n\n          commonRegisterProblem(message, suffix, len, node, new ReplaceOctalNumericLiteralQuickFix());\n        }\n      }\n    }\n\n    if (text.contains(\"_\")) {\n      final StringBuilder message = new StringBuilder(myCommonMessage);\n      final String suffix = \" not support underscores in numeric literals\";\n      int len = 0;\n\n      for (LanguageLevel languageLevel : myVersionsToProcess) {\n        if (languageLevel.isOlderThan(LanguageLevel.PYTHON36)) {\n          len = appendLanguageLevel(message, len, languageLevel);\n        }\n      }\n\n      commonRegisterProblem(message, suffix, len, node, new PyRemoveUnderscoresInNumericLiteralsQuickFix());\n    }\n  }","id":18487,"modified_method":"@Override\n  public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) {\n    super.visitPyNumericLiteralExpression(node);\n\n    final String text = node.getText();\n\n    if (node.isIntegerLiteral()) {\n      if (text.endsWith(\"l\") || text.endsWith(\"L\")) {\n        final StringBuilder message = new StringBuilder(myCommonMessage);\n        final String suffix = \" not support a trailing \\'l\\' or \\'L\\'.\";\n        final int len = appendLanguageLevels(message, myVersionsToProcess, LanguageLevel::isPy3K);\n\n        commonRegisterProblem(message, suffix, len, node, new RemoveTrailingLQuickFix());\n      }\n\n      if (text.length() > 1 && text.charAt(0) == '0') {\n        final char secondChar = Character.toLowerCase(text.charAt(1));\n        if (secondChar != 'o' && secondChar != 'b' && secondChar != 'x' && text.chars().anyMatch(c -> c != '0')) {\n          final StringBuilder message = new StringBuilder(myCommonMessage);\n          final String suffix = \" not support this syntax. It requires '0o' prefix for octal literals\";\n          int len = appendLanguageLevels(message, myVersionsToProcess, LanguageLevel::isPy3K);\n\n          commonRegisterProblem(message, suffix, len, node, new ReplaceOctalNumericLiteralQuickFix());\n        }\n      }\n    }\n\n    if (text.contains(\"_\")) {\n      final StringBuilder message = new StringBuilder(myCommonMessage);\n      final String suffix = \" not support underscores in numeric literals\";\n      final int len = appendLanguageLevels(message, myVersionsToProcess, level -> level.isOlderThan(LanguageLevel.PYTHON36));\n\n      commonRegisterProblem(message, suffix, len, node, new PyRemoveUnderscoresInNumericLiteralsQuickFix());\n    }\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPyListCompExpression(final PyListCompExpression node) {\n    super.visitPyListCompExpression(node);\n    int len = 0;\n    StringBuilder message = new StringBuilder(myCommonMessage);\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      boolean tmp = UnsupportedFeaturesUtil.visitPyListCompExpression(node, languageLevel);\n      if (tmp) {\n        len = appendLanguageLevel(message, len, languageLevel);\n      }\n    }\n    for (ComprhForComponent forComponent : node.getForComponents()) {\n      final PyExpression iteratedList = forComponent.getIteratedList();\n      commonRegisterProblem(message, \" not support this syntax in list comprehensions.\", len, iteratedList,\n                            new ReplaceListComprehensionsQuickFix());\n    }\n  }","id":18488,"modified_method":"@Override\n  public void visitPyListCompExpression(final PyListCompExpression node) {\n    super.visitPyListCompExpression(node);\n\n    final StringBuilder message = new StringBuilder(myCommonMessage);\n    final int len =\n      appendLanguageLevels(message, myVersionsToProcess, level -> UnsupportedFeaturesUtil.visitPyListCompExpression(node, level));\n\n    for (ComprhForComponent forComponent : node.getForComponents()) {\n      commonRegisterProblem(message, \" not support this syntax in list comprehensions.\", len, forComponent.getIteratedList(),\n                            new ReplaceListComprehensionsQuickFix());\n    }\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPyImportStatement(PyImportStatement node) {\n    super.visitPyImportStatement(node);\n    PyIfStatement ifParent = PsiTreeUtil.getParentOfType(node, PyIfStatement.class);\n    if (ifParent != null)\n      return;\n    PyImportElement[] importElements = node.getImportElements();\n    int len = 0;\n    String moduleName = \"\";\n    StringBuilder message = new StringBuilder(myCommonMessage);\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      for (PyImportElement importElement : importElements) {\n        final QualifiedName qName = importElement.getImportedQName();\n        if (qName != null) {\n          if (!languageLevel.isPy3K()) {\n            if (qName.matches(\"builtins\")) {\n              len = appendLanguageLevel(message, len, languageLevel);\n              moduleName = \"builtins\";\n            }\n          }\n          else {\n            if (qName.matches(\"__builtin__\")) {\n              len = appendLanguageLevel(message, len, languageLevel);\n              moduleName = \"__builtin__\";\n            }\n          }\n        }\n      }\n    }\n    commonRegisterProblem(message, \" not have module \" + moduleName, len, node, new ReplaceBuiltinsQuickFix());\n  }","id":18489,"modified_method":"@Override\n  public void visitPyImportStatement(PyImportStatement node) {\n    super.visitPyImportStatement(node);\n\n    final PyIfStatement ifParent = PsiTreeUtil.getParentOfType(node, PyIfStatement.class);\n    if (ifParent != null) return;\n\n    for (PyImportElement importElement : node.getImportElements()) {\n      final QualifiedName qName = importElement.getImportedQName();\n\n      if (qName != null) {\n        final StringBuilder message = new StringBuilder(myCommonMessage);\n        final int len;\n\n        if (qName.matches(\"builtins\")) {\n          len = appendLanguageLevels(message, myVersionsToProcess, level -> !level.isPy3K());\n          commonRegisterProblem(message, \" not have module builtins\", len, node, new ReplaceBuiltinsQuickFix());\n        }\n        else if (qName.matches(\"__builtin__\")) {\n          len = appendLanguageLevels(message, myVersionsToProcess, LanguageLevel::isPy3K);\n          commonRegisterProblem(message, \" not have module __builtin__\", len, node, new ReplaceBuiltinsQuickFix());\n        }\n      }\n    }\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPyCallExpression(PyCallExpression node) {\n    super.visitPyCallExpression(node);\n    int len = 0;\n    StringBuilder message = new StringBuilder(myCommonMessage);\n\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      if (!languageLevel.isPy3K()) {\n        final PsiElement firstChild = node.getFirstChild();\n        if (firstChild != null) {\n          final String name = firstChild.getText();\n          if (PyNames.SUPER.equals(name)) {\n            final PyArgumentList argumentList = node.getArgumentList();\n            if (argumentList != null && argumentList.getArguments().length == 0) {\n              len = appendLanguageLevel(message, len, languageLevel);\n            }\n          }\n        }\n      }\n    }\n    commonRegisterProblem(message, \" not support this syntax. super() should have arguments in Python 2\",\n                          len, node, null);\n\n    highlightIncorrectArguments(node);\n  }","id":18490,"modified_method":"@Override\n  public void visitPyCallExpression(PyCallExpression node) {\n    super.visitPyCallExpression(node);\n\n    final PsiElement firstChild = node.getFirstChild();\n    if (firstChild != null && PyNames.SUPER.equals(firstChild.getText()) && ArrayUtil.isEmpty(node.getArguments())) {\n      final StringBuilder message = new StringBuilder(myCommonMessage);\n      final int len = appendLanguageLevels(message, myVersionsToProcess, level -> !level.isPy3K());\n\n      commonRegisterProblem(message, \" not support this syntax. super() should have arguments in Python 2\", len, node, null);\n    }\n\n    highlightIncorrectArguments(node);\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPyBinaryExpression(PyBinaryExpression node) {\n    super.visitPyBinaryExpression(node);\n    int len = 0;\n    if (node.isOperator(\"<>\")) {\n      StringBuilder message = new StringBuilder(myCommonMessage);\n      for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n        LanguageLevel languageLevel = myVersionsToProcess.get(i);\n        if (languageLevel.isPy3K()) {\n          len = appendLanguageLevel(message, len, languageLevel);\n        }\n      }\n      commonRegisterProblem(message, \" not support <>, use != instead.\", len, node, new ReplaceNotEqOperatorQuickFix());\n    }\n    else if (node.isOperator(\"@\")) {\n      checkMatrixMultiplicationOperator(node.getPsiOperator());\n    }\n  }","id":18491,"modified_method":"@Override\n  public void visitPyBinaryExpression(PyBinaryExpression node) {\n    super.visitPyBinaryExpression(node);\n\n    if (node.isOperator(\"<>\")) {\n      final StringBuilder message = new StringBuilder(myCommonMessage);\n      final int len = appendLanguageLevels(message, myVersionsToProcess, LanguageLevel::isPy3K);\n\n      commonRegisterProblem(message, \" not support <>, use != instead.\", len, node, new ReplaceNotEqOperatorQuickFix());\n    }\n    else if (node.isOperator(\"@\")) {\n      checkMatrixMultiplicationOperator(node.getPsiOperator());\n    }\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPySetLiteralExpression(PySetLiteralExpression node) {\n    super.visitPySetLiteralExpression(node);\n    int len = 0;\n    StringBuilder message = new StringBuilder(myCommonMessage);\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      if (!languageLevel.supportsSetLiterals()) {\n        len = appendLanguageLevel(message, len, languageLevel);\n      }\n    }\n    commonRegisterProblem(message, \" not support set literal expressions\", len, node, new ConvertSetLiteralQuickFix(), false);\n  }","id":18492,"modified_method":"@Override\n  public void visitPySetLiteralExpression(PySetLiteralExpression node) {\n    super.visitPySetLiteralExpression(node);\n\n    final StringBuilder message = new StringBuilder(myCommonMessage);\n    final int len = appendLanguageLevels(message, myVersionsToProcess, level -> !level.supportsSetLiterals());\n    commonRegisterProblem(message, \" not support set literal expressions\", len, node, new ConvertSetLiteralQuickFix(), false);\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPyDictCompExpression(PyDictCompExpression node) {\n    super.visitPyDictCompExpression(node);\n    int len = 0;\n    StringBuilder message = new StringBuilder(myCommonMessage);\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      if (!languageLevel.supportsSetLiterals()) {\n        len = appendLanguageLevel(message, len, languageLevel);\n      }\n    }\n    commonRegisterProblem(message, \" not support dictionary comprehensions\", len, node, new ConvertDictCompQuickFix(), false);\n  }","id":18493,"modified_method":"@Override\n  public void visitPyDictCompExpression(PyDictCompExpression node) {\n    super.visitPyDictCompExpression(node);\n\n    final StringBuilder message = new StringBuilder(myCommonMessage);\n    final int len = appendLanguageLevels(message, myVersionsToProcess, level -> !level.supportsSetLiterals());\n    commonRegisterProblem(message, \" not support dictionary comprehensions\", len, node, new ConvertDictCompQuickFix(), false);\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPySetCompExpression(PySetCompExpression node) {\n    super.visitPySetCompExpression(node);\n    int len = 0;\n    StringBuilder message = new StringBuilder(myCommonMessage);\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      if (!languageLevel.supportsSetLiterals()) {\n        len = appendLanguageLevel(message, len, languageLevel);\n      }\n    }\n    commonRegisterProblem(message, \" not support set comprehensions\", len, node, null, false);\n  }","id":18494,"modified_method":"@Override\n  public void visitPySetCompExpression(PySetCompExpression node) {\n    super.visitPySetCompExpression(node);\n\n    final StringBuilder message = new StringBuilder(myCommonMessage);\n    final int len = appendLanguageLevels(message, myVersionsToProcess, level -> !level.supportsSetLiterals());\n    commonRegisterProblem(message, \" not support set comprehensions\", len, node, null, false);\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void visitPyReprExpression(PyReprExpression node) {\n    super.visitPyReprExpression(node);\n    int len = 0;\n    StringBuilder message = new StringBuilder(myCommonMessage);\n    for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n      LanguageLevel languageLevel = myVersionsToProcess.get(i);\n      if (languageLevel.isPy3K()) {\n        len = appendLanguageLevel(message, len, languageLevel);\n      }\n    }\n    commonRegisterProblem(message, \" not support backquotes, use repr() instead\",\n                          len, node, new ReplaceBackquoteExpressionQuickFix());\n  }","id":18495,"modified_method":"@Override\n  public void visitPyReprExpression(PyReprExpression node) {\n    super.visitPyReprExpression(node);\n\n    final StringBuilder message = new StringBuilder(myCommonMessage);\n    final int len = appendLanguageLevels(message, myVersionsToProcess, LanguageLevel::isPy3K);\n    commonRegisterProblem(message, \" not support backquotes, use repr() instead\", len, node, new ReplaceBackquoteExpressionQuickFix());\n  }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitPyImportElement(PyImportElement importElement) {\n      myUsedImports.add(importElement.getVisibleName());\n      PyIfStatement ifParent = PsiTreeUtil.getParentOfType(importElement, PyIfStatement.class);\n      if (ifParent != null)\n        return;\n      int len = 0;\n      String moduleName = \"\";\n      StringBuilder message = new StringBuilder(\"Python version \");\n\n      PyTryExceptStatement tryExceptStatement = PsiTreeUtil.getParentOfType(importElement, PyTryExceptStatement.class);\n      if (tryExceptStatement != null) {\n        PyExceptPart[] parts = tryExceptStatement.getExceptParts();\n        for (PyExceptPart part : parts) {\n          final PyExpression exceptClass = part.getExceptClass();\n          if (exceptClass != null && exceptClass.getText().equals(\"ImportError\")) {\n            return;\n          }\n        }\n      }\n\n      final PyFromImportStatement fromImportStatement = PsiTreeUtil.getParentOfType(importElement, PyFromImportStatement.class);\n      if (fromImportStatement != null) {\n        for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n          LanguageLevel languageLevel = myVersionsToProcess.get(i);\n          final QualifiedName qName = importElement.getImportedQName();\n          final QualifiedName sourceQName = fromImportStatement.getImportSourceQName();\n          if (qName != null && sourceQName != null && qName.matches(\"unicode_literals\") &&\n              sourceQName.matches(\"__future__\") && languageLevel.isOlderThan(LanguageLevel.PYTHON26)) {\n            len = appendLanguageLevel(message, len, languageLevel);\n          }\n        }\n        commonRegisterProblem(message, \" not have unicode_literals in __future__ module\", len, importElement, null);\n        return;\n      }\n\n      for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n        LanguageLevel languageLevel = myVersionsToProcess.get(i);\n        final QualifiedName qName = importElement.getImportedQName();\n        if (qName != null && !qName.matches(\"builtins\") && !qName.matches(\"__builtin__\")) {\n          moduleName = qName.toString();\n          if (UnsupportedFeaturesUtil.MODULES.get(languageLevel).contains(moduleName) && !BACKPORTED_PACKAGES.contains(moduleName)) {\n            len = appendLanguageLevel(message, len, languageLevel);\n          }\n        }\n      }\n      commonRegisterProblem(message, \" not have module \" + moduleName, len, importElement, null);\n    }","id":18496,"modified_method":"@Override\n    public void visitPyImportElement(PyImportElement importElement) {\n      myUsedImports.add(importElement.getVisibleName());\n\n      final PyIfStatement ifParent = PsiTreeUtil.getParentOfType(importElement, PyIfStatement.class);\n      if (ifParent != null) return;\n\n      final PyTryExceptStatement tryExceptStatement = PsiTreeUtil.getParentOfType(importElement, PyTryExceptStatement.class);\n      if (tryExceptStatement != null) {\n        for (PyExceptPart part : tryExceptStatement.getExceptParts()) {\n          final PyExpression exceptClass = part.getExceptClass();\n          if (exceptClass != null && exceptClass.getText().equals(\"ImportError\")) {\n            return;\n          }\n        }\n      }\n\n      final PyFromImportStatement fromImportStatement = PsiTreeUtil.getParentOfType(importElement, PyFromImportStatement.class);\n      if (fromImportStatement != null) {\n        final QualifiedName qName = importElement.getImportedQName();\n        final QualifiedName sourceQName = fromImportStatement.getImportSourceQName();\n\n        if (qName != null && sourceQName != null && qName.matches(\"unicode_literals\") && sourceQName.matches(\"__future__\")) {\n          final StringBuilder message = new StringBuilder(\"Python version \");\n          final int len = appendLanguageLevels(message, myVersionsToProcess, level -> level.isOlderThan(LanguageLevel.PYTHON26));\n\n          commonRegisterProblem(message, \" not have unicode_literals in __future__ module\", len, importElement, null);\n        }\n\n        return;\n      }\n\n      final QualifiedName qName = importElement.getImportedQName();\n      if (qName != null && !qName.matches(\"builtins\") && !qName.matches(\"__builtin__\")) {\n        final String moduleName = qName.toString();\n        final StringBuilder message = new StringBuilder(\"Python version \");\n        final int len = appendLanguageLevels(message, myVersionsToProcess,\n                                             level -> UnsupportedFeaturesUtil.MODULES.get(level).contains(moduleName) &&\n                                                      !BACKPORTED_PACKAGES.contains(moduleName));\n\n        commonRegisterProblem(message, \" not have module \" + moduleName, len, importElement, null);\n      }\n    }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitPyCallExpression(PyCallExpression node) {\n      super.visitPyCallExpression(node);\n\n      final Optional<PyFunction> optionalFunction = Optional\n        .ofNullable(node.getCallee())\n        .map(PyExpression::getReference)\n        .map(PsiReference::resolve)\n        .filter(PyFunction.class::isInstance)\n        .map(PyFunction.class::cast);\n\n      if (optionalFunction.isPresent()) {\n        final PyFunction function = optionalFunction.get();\n        final PyClass containingClass = function.getContainingClass();\n        final String originalFunctionName = function.getName();\n\n        final StringBuilder message = containingClass != null && !PyNames.INIT.equals(originalFunctionName)\n                                      ? new StringBuilder(\"Class \" + containingClass.getName() + \" in python version \")\n                                      : new StringBuilder(\"Python version \");\n\n        final String functionName = containingClass != null && PyNames.INIT.equals(originalFunctionName)\n                                    ? node.getCallee().getText()\n                                    : originalFunctionName;\n\n        int len = 0;\n\n        if (containingClass != null) {\n          final String className = containingClass.getName();\n\n          if (UnsupportedFeaturesUtil.CLASS_METHODS.containsKey(className)) {\n            final Map<LanguageLevel, Set<String>> unsupportedMethods = UnsupportedFeaturesUtil.CLASS_METHODS.get(className);\n            for (LanguageLevel languageLevel : myVersionsToProcess) {\n              if (unsupportedMethods.getOrDefault(languageLevel, Collections.emptySet()).contains(functionName)) {\n                len = appendLanguageLevel(message, len, languageLevel);\n              }\n            }\n          }\n        }\n\n        if (PyBuiltinCache.getInstance(function).isBuiltin(function) &&\n            !\"print\".equals(functionName) &&\n            !\"exec\".equals(functionName) &&\n            !myUsedImports.contains(functionName)) {\n          for (LanguageLevel languageLevel : myVersionsToProcess) {\n            if (UnsupportedFeaturesUtil.BUILTINS.get(languageLevel).contains(functionName)) {\n              len = appendLanguageLevel(message, len, languageLevel);\n            }\n          }\n        }\n\n        commonRegisterProblem(message, \" not have method \" + functionName, len, node, null, false);\n      }\n    }","id":18497,"modified_method":"@Override\n    public void visitPyCallExpression(PyCallExpression node) {\n      super.visitPyCallExpression(node);\n\n      final Optional<PyFunction> optionalFunction = Optional\n        .ofNullable(node.getCallee())\n        .map(PyExpression::getReference)\n        .map(PsiReference::resolve)\n        .filter(PyFunction.class::isInstance)\n        .map(PyFunction.class::cast);\n\n      if (optionalFunction.isPresent()) {\n        final PyFunction function = optionalFunction.get();\n        final PyClass containingClass = function.getContainingClass();\n        final String originalFunctionName = function.getName();\n\n        final StringBuilder message = new StringBuilder(containingClass != null && !PyNames.INIT.equals(originalFunctionName)\n                                                        ? \"Class \" + containingClass.getName() + \" in python version \"\n                                                        : \"Python version \");\n\n        final String functionName = containingClass != null && PyNames.INIT.equals(originalFunctionName)\n                                    ? node.getCallee().getText()\n                                    : originalFunctionName;\n\n        int len = 0;\n\n        if (containingClass != null) {\n          final String className = containingClass.getName();\n\n          if (UnsupportedFeaturesUtil.CLASS_METHODS.containsKey(className)) {\n            final Map<LanguageLevel, Set<String>> unsupportedMethods = UnsupportedFeaturesUtil.CLASS_METHODS.get(className);\n\n            len += appendLanguageLevels(message, myVersionsToProcess,\n                                        level -> unsupportedMethods.getOrDefault(level, Collections.emptySet()).contains(functionName));\n          }\n        }\n\n        if (PyBuiltinCache.getInstance(function).isBuiltin(function) &&\n            !\"print\".equals(functionName) &&\n            !\"exec\".equals(functionName) &&\n            !myUsedImports.contains(functionName)) {\n          len +=\n            appendLanguageLevels(message, myVersionsToProcess, level -> UnsupportedFeaturesUtil.BUILTINS.get(level).contains(functionName));\n        }\n\n        commonRegisterProblem(message, \" not have method \" + functionName, len, node, null, false);\n      }\n    }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void visitPyFromImportStatement(PyFromImportStatement node) {\n      super.visitPyFromImportStatement(node);\n      if (node.getRelativeLevel() > 0) return;\n      int len = 0;\n      StringBuilder message = new StringBuilder(\"Python version \");\n      QualifiedName name = node.getImportSourceQName();\n      PyReferenceExpression source = node.getImportSource();\n      if (name != null) {\n        for (int i = 0; i != myVersionsToProcess.size(); ++i) {\n          LanguageLevel languageLevel = myVersionsToProcess.get(i);\n          final String moduleName = name.toString();\n          if (UnsupportedFeaturesUtil.MODULES.get(languageLevel).contains(moduleName) && !BACKPORTED_PACKAGES.contains(moduleName)) {\n            len = appendLanguageLevel(message, len, languageLevel);\n          }\n        }\n        commonRegisterProblem(message, \" not have module \" + name,\n                              len, source, null, false);\n      }\n    }","id":18498,"modified_method":"@Override\n    public void visitPyFromImportStatement(PyFromImportStatement node) {\n      super.visitPyFromImportStatement(node);\n\n      if (node.getRelativeLevel() > 0) return;\n\n      final QualifiedName name = node.getImportSourceQName();\n      if (name != null) {\n        final StringBuilder message = new StringBuilder(\"Python version \");\n        final String moduleName = name.toString();\n        final int len = appendLanguageLevels(message, myVersionsToProcess,\n                                             level -> UnsupportedFeaturesUtil.MODULES.get(level).contains(moduleName) &&\n                                                      !BACKPORTED_PACKAGES.contains(moduleName));\n\n        commonRegisterProblem(message, \" not have module \" + name, len, node.getImportSource(), null, false);\n      }\n    }","commit_id":"3479d2ac76a537d73ad002c95e6e891e361998ea","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void configure(final IHighlightingConfiguration.IHighlightingStyleAcceptor it) {\n    it.addStyle(HighlightingStyles.KEYWORD_ID, \"Keyword\", JavaHighlightingColors.KEYWORD);\n    it.addStyle(HighlightingStyles.PUNCTUATION_ID, \"Punctuation\", JavaHighlightingColors.DOT);\n    it.addStyle(HighlightingStyles.COMMENT_ID, \"Comment\", JavaHighlightingColors.LINE_COMMENT);\n    it.addStyle(HighlightingStyles.STRING_ID, \"String\", JavaHighlightingColors.STRING);\n    it.addStyle(HighlightingStyles.NUMBER_ID, \"Number\", JavaHighlightingColors.NUMBER);\n    it.addStyle(HighlightingStyles.DEFAULT_ID, \"Default\", HighlighterColors.TEXT);\n    it.addStyle(HighlightingStyles.INVALID_TOKEN_ID, \"Error\", CodeInsightColors.ERRORS_ATTRIBUTES);\n    it.addStyle(HighlightingStyles.TASK_ID, \"Todo\", CodeInsightColors.TODO_DEFAULT_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.STATIC_METHOD_INVOCATION, \"Static method\", CodeInsightColors.STATIC_METHOD_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.STATIC_FIELD, \"Static field\", CodeInsightColors.STATIC_FIELD_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.FIELD, \"Field\", DefaultLanguageHighlighterColors.INSTANCE_FIELD);\n    it.addStyle(XbaseHighlightingStyles.ANNOTATION, \"Annotation\", CodeInsightColors.ANNOTATION_NAME_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.EXTENSION_METHOD_INVOCATION, \"Extension method\", CodeInsightColors.LOCAL_VARIABLE_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.DEPRECATED_MEMBERS, \"Deprecated members\", CodeInsightColors.DEPRECATED_ATTRIBUTES);\n  }","id":18499,"modified_method":"@Override\n  public void configure(final IHighlightingConfiguration.IHighlightingStyleAcceptor it) {\n    it.addStyle(HighlightingStyles.KEYWORD_ID, \"Keyword\", JavaHighlightingColors.KEYWORD);\n    it.addStyle(HighlightingStyles.PUNCTUATION_ID, \"Punctuation\", JavaHighlightingColors.DOT);\n    it.addStyle(HighlightingStyles.COMMENT_ID, \"Comment\", JavaHighlightingColors.LINE_COMMENT);\n    it.addStyle(HighlightingStyles.STRING_ID, \"String\", JavaHighlightingColors.STRING);\n    it.addStyle(HighlightingStyles.NUMBER_ID, \"Number\", JavaHighlightingColors.NUMBER);\n    it.addStyle(HighlightingStyles.DEFAULT_ID, \"Default\", HighlighterColors.TEXT);\n    it.addStyle(HighlightingStyles.INVALID_TOKEN_ID, \"Error\", CodeInsightColors.ERRORS_ATTRIBUTES);\n    it.addStyle(HighlightingStyles.TASK_ID, \"Todo\", CodeInsightColors.TODO_DEFAULT_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.INTERFACE, \"Interfaces\", JavaHighlightingColors.INTERFACE_NAME_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.ENUM, \"Enums\", JavaHighlightingColors.ENUM_NAME_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.CLASS, \"Classes\", JavaHighlightingColors.CLASS_NAME_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.ABSTRACT_CLASS, \"Abstract classes\", JavaHighlightingColors.ABSTRACT_CLASS_NAME_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.ANNOTATION, \"Annotations\", JavaHighlightingColors.ANNOTATION_NAME_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.FIELD, \"Fields\", JavaHighlightingColors.INSTANCE_FIELD_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.STATIC_FIELD, \"Static fields\", JavaHighlightingColors.STATIC_FIELD_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.STATIC_FINAL_FIELD, \"Static final fields\", JavaHighlightingColors.STATIC_FINAL_FIELD_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.METHOD, \"Methods\", JavaHighlightingColors.METHOD_DECLARATION_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.STATIC_METHOD_INVOCATION, \"Static method invocations\", JavaHighlightingColors.STATIC_METHOD_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.ABSTRACT_METHOD_INVOCATION, \"Abstract method invocations\", JavaHighlightingColors.ABSTRACT_METHOD_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.EXTENSION_METHOD_INVOCATION, \"Extension method invocations\", JavaHighlightingColors.LOCAL_VARIABLE_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.DEPRECATED_MEMBERS, \"Deprecated members\", CodeInsightColors.DEPRECATED_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.LOCAL_VARIABLE, \"Local variables\", JavaHighlightingColors.LOCAL_VARIABLE_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.LOCAL_VARIABLE_DECLARATION, \"Local variable declarations\", JavaHighlightingColors.LOCAL_VARIABLE_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.LOCAL_FINAL_VARIABLE, \"Local final variables\", JavaHighlightingColors.LOCAL_VARIABLE_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.LOCAL_FINAL_VARIABLE_DECLARATION, \"Local final variable declarations\", JavaHighlightingColors.LOCAL_VARIABLE_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.PARAMETER_VARIABLE, \"Parameter variables\", JavaHighlightingColors.PARAMETER_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.TYPE_VARIABLE, \"Type variables\", JavaHighlightingColors.TYPE_PARAMETER_NAME_ATTRIBUTES);\n    it.addStyle(XbaseHighlightingStyles.TYPE_ARGUMENT, \"Type arguments\", HighlighterColors.TEXT);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testRichText_3() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo(String[] nums) \");\n    String _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    String _$ = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$, \"\\t\");\n    String _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is not indented\");\n    String _$_1 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_1, \"\\t\");\n    String _white_2 = this.white(\"\\t\\t\\t\");\n    _builder.append(_white_2, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GL, \"\\t\");\n    _builder.append(\"FOR i:nums\");\n    _builder.append(XtendSemanticHighlightingTest.GR, \"\\t\");\n    String _$_2 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_2, \"\\t\");\n    String _white_3 = this.white(\"\\t\\t\");\n    _builder.append(_white_3, \"\\t\");\n    _builder.append(\"\\t\");\n    String _white_4 = this.white(\"\\t\");\n    _builder.append(_white_4, \"\\t\");\n    _builder.append(\"loop body\");\n    String _$_3 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_3, \"\\t\");\n    String _white_5 = this.white(\"\\t\\t\\t\");\n    _builder.append(_white_5, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GL, \"\\t\");\n    _builder.append(\"ENDFOR\");\n    _builder.append(XtendSemanticHighlightingTest.GR, \"\\t\");\n    String _$_4 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_4, \"\\t\");\n    String _white_6 = this.white(\"\\t\\t\");\n    _builder.append(_white_6, \"\\t\");\n    _builder.append(\"this is not indented\");\n    String _$_5 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_5, \"\\t\");\n    String _white_7 = this.white(\"\\t\");\n    _builder.append(_white_7, \"\\t\");\n    String _white_8 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_8, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18500,"modified_method":"public void testRichText_3() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\"(\");\n    CharSequence _$_2 = this.$(XbaseHighlightingStyles.CLASS, \"String\");\n    _builder.append(_$_2, \"\\t\");\n    _builder.append(\"[] \");\n    CharSequence _$_3 = this.$(XbaseHighlightingStyles.PARAMETER_VARIABLE, \"nums\");\n    _builder.append(_$_3, \"\\t\");\n    _builder.append(\") \");\n    CharSequence _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    CharSequence _$_4 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_4, \"\\t\");\n    CharSequence _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is not indented\");\n    CharSequence _$_5 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_5, \"\\t\");\n    CharSequence _white_2 = this.white(\"\\t\\t\\t\");\n    _builder.append(_white_2, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GL, \"\\t\");\n    _builder.append(\"FOR \");\n    CharSequence _$_6 = this.$(XbaseHighlightingStyles.LOCAL_VARIABLE_DECLARATION, \"i\");\n    CharSequence _$_7 = this.$(XbaseHighlightingStyles.LOCAL_FINAL_VARIABLE_DECLARATION, _$_6);\n    _builder.append(_$_7, \"\\t\");\n    _builder.append(\":\");\n    CharSequence _$_8 = this.$(XbaseHighlightingStyles.PARAMETER_VARIABLE, \"nums\");\n    _builder.append(_$_8, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GR, \"\\t\");\n    CharSequence _$_9 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_9, \"\\t\");\n    CharSequence _white_3 = this.white(\"\\t\\t\");\n    _builder.append(_white_3, \"\\t\");\n    _builder.append(\"\\t\");\n    CharSequence _white_4 = this.white(\"\\t\");\n    _builder.append(_white_4, \"\\t\");\n    _builder.append(\"loop body\");\n    CharSequence _$_10 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_10, \"\\t\");\n    CharSequence _white_5 = this.white(\"\\t\\t\\t\");\n    _builder.append(_white_5, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GL, \"\\t\");\n    _builder.append(\"ENDFOR\");\n    _builder.append(XtendSemanticHighlightingTest.GR, \"\\t\");\n    CharSequence _$_11 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_11, \"\\t\");\n    CharSequence _white_6 = this.white(\"\\t\\t\");\n    _builder.append(_white_6, \"\\t\");\n    _builder.append(\"this is not indented\");\n    CharSequence _$_12 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_12, \"\\t\");\n    CharSequence _white_7 = this.white(\"\\t\");\n    _builder.append(_white_7, \"\\t\");\n    CharSequence _white_8 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_8, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testStaticField() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"static val \");\n    String _$ = this.$(XbaseHighlightingStyles.STATIC_FIELD, \"foo\");\n    _builder.append(_$, \"\\t\");\n    _builder.append(\" = true\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def bar() { \");\n    String _$_1 = this.$(XbaseHighlightingStyles.STATIC_FIELD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\" }\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18501,"modified_method":"public void testStaticField() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"static val \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.STATIC_FINAL_FIELD, \"foo\");\n    CharSequence _$_2 = this.$(XbaseHighlightingStyles.STATIC_FIELD, _$_1);\n    CharSequence _$_3 = this.$(XbaseHighlightingStyles.FIELD, _$_2);\n    _builder.append(_$_3, \"\\t\");\n    _builder.append(\" = true\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_4 = this.$(XbaseHighlightingStyles.METHOD, \"bar\");\n    _builder.append(_$_4, \"\\t\");\n    _builder.append(\"() { \");\n    CharSequence _$_5 = this.$(XbaseHighlightingStyles.STATIC_FINAL_FIELD, \"foo\");\n    CharSequence _$_6 = this.$(XbaseHighlightingStyles.STATIC_FIELD, _$_5);\n    CharSequence _$_7 = this.$(XbaseHighlightingStyles.FIELD, _$_6);\n    _builder.append(_$_7, \"\\t\");\n    _builder.append(\" }\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"protected String white(final String whitespace) {\n    return this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, whitespace);\n  }","id":18502,"modified_method":"protected CharSequence white(final String whitespace) {\n    return this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, whitespace);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testField() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"val \");\n    String _$ = this.$(XbaseHighlightingStyles.FIELD, \"foo\");\n    _builder.append(_$, \"\\t\");\n    _builder.append(\" = null\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18503,"modified_method":"public void testField() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"val \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.FIELD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\" = null\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testRichText_4() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() \");\n    String _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    String _$ = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$, \"\\t\");\n    String _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is not indented\");\n    String _$_1 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_1, \"\\t\");\n    String _$_2 = this.$(HighlightingStyles.COMMENT_ID, (((XtendSemanticHighlightingTest.GL + XtendSemanticHighlightingTest.GL) + XtendSemanticHighlightingTest.GL) + \" a comment\"));\n    _builder.append(_$_2, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    String _white_2 = this.white(\"\\t\\t\");\n    _builder.append(_white_2, \"\");\n    _builder.append(\"this is not indented\");\n    String _$_3 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_3, \"\");\n    String _white_3 = this.white(\"\\t\");\n    _builder.append(_white_3, \"\");\n    String _white_4 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_4, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18504,"modified_method":"public void testRichText_4() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\"() \");\n    CharSequence _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    CharSequence _$_2 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_2, \"\\t\");\n    CharSequence _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is not indented\");\n    CharSequence _$_3 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_3, \"\\t\");\n    CharSequence _$_4 = this.$(HighlightingStyles.COMMENT_ID, (((XtendSemanticHighlightingTest.GL + XtendSemanticHighlightingTest.GL) + XtendSemanticHighlightingTest.GL) + \" a comment\"));\n    _builder.append(_$_4, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    CharSequence _white_2 = this.white(\"\\t\\t\");\n    _builder.append(_white_2, \"\");\n    _builder.append(\"this is not indented\");\n    CharSequence _$_5 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_5, \"\");\n    CharSequence _white_3 = this.white(\"\\t\");\n    _builder.append(_white_3, \"\");\n    CharSequence _white_4 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_4, \"\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testPrimitiveTypeIsKeyword() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    String _$ = this.$(HighlightingStyles.KEYWORD_ID, \"void\");\n    _builder.append(_$, \"\\t\");\n    _builder.append(\" foo() {}\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18505,"modified_method":"public void testPrimitiveTypeIsKeyword() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_1 = this.$(HighlightingStyles.KEYWORD_ID, \"void\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\" \");\n    CharSequence _$_2 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_2, \"\\t\");\n    _builder.append(\"() {}\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testRichText_2() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo(String[] nums) \");\n    String _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    String _$ = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$, \"\\t\");\n    String _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is not indented\");\n    String _$_1 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_1, \"\\t\");\n    String _white_2 = this.white(\"\\t\\t\");\n    _builder.append(_white_2, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GL, \"\\t\");\n    _builder.append(\"FOR i:nums\");\n    _builder.append(XtendSemanticHighlightingTest.GR, \"\\t\");\n    String _$_2 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_2, \"\\t\");\n    String _white_3 = this.white(\"\\t\\t\");\n    _builder.append(_white_3, \"\\t\");\n    String _white_4 = this.white(\"\\t\");\n    _builder.append(_white_4, \"\\t\");\n    _builder.append(\"loop body\");\n    String _$_3 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_3, \"\\t\");\n    String _white_5 = this.white(\"\\t\\t\");\n    _builder.append(_white_5, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GL, \"\\t\");\n    _builder.append(\"ENDFOR\");\n    _builder.append(XtendSemanticHighlightingTest.GR, \"\\t\");\n    String _$_4 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_4, \"\\t\");\n    String _white_6 = this.white(\"\\t\\t\");\n    _builder.append(_white_6, \"\\t\");\n    _builder.append(\"this is not indented\");\n    String _$_5 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_5, \"\\t\");\n    String _white_7 = this.white(\"\\t\");\n    _builder.append(_white_7, \"\\t\");\n    String _white_8 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_8, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18506,"modified_method":"public void testRichText_2() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\"(\");\n    CharSequence _$_2 = this.$(XbaseHighlightingStyles.CLASS, \"String\");\n    _builder.append(_$_2, \"\\t\");\n    _builder.append(\"[] \");\n    CharSequence _$_3 = this.$(XbaseHighlightingStyles.PARAMETER_VARIABLE, \"nums\");\n    _builder.append(_$_3, \"\\t\");\n    _builder.append(\") \");\n    CharSequence _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    CharSequence _$_4 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_4, \"\\t\");\n    CharSequence _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is not indented\");\n    CharSequence _$_5 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_5, \"\\t\");\n    CharSequence _white_2 = this.white(\"\\t\\t\");\n    _builder.append(_white_2, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GL, \"\\t\");\n    _builder.append(\"FOR \");\n    CharSequence _$_6 = this.$(XbaseHighlightingStyles.LOCAL_VARIABLE_DECLARATION, \"i\");\n    CharSequence _$_7 = this.$(XbaseHighlightingStyles.LOCAL_FINAL_VARIABLE_DECLARATION, _$_6);\n    _builder.append(_$_7, \"\\t\");\n    _builder.append(\":\");\n    CharSequence _$_8 = this.$(XbaseHighlightingStyles.PARAMETER_VARIABLE, \"nums\");\n    _builder.append(_$_8, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GR, \"\\t\");\n    CharSequence _$_9 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_9, \"\\t\");\n    CharSequence _white_3 = this.white(\"\\t\\t\");\n    _builder.append(_white_3, \"\\t\");\n    CharSequence _white_4 = this.white(\"\\t\");\n    _builder.append(_white_4, \"\\t\");\n    _builder.append(\"loop body\");\n    CharSequence _$_10 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_10, \"\\t\");\n    CharSequence _white_5 = this.white(\"\\t\\t\");\n    _builder.append(_white_5, \"\\t\");\n    _builder.append(XtendSemanticHighlightingTest.GL, \"\\t\");\n    _builder.append(\"ENDFOR\");\n    _builder.append(XtendSemanticHighlightingTest.GR, \"\\t\");\n    CharSequence _$_11 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_11, \"\\t\");\n    CharSequence _white_6 = this.white(\"\\t\\t\");\n    _builder.append(_white_6, \"\\t\");\n    _builder.append(\"this is not indented\");\n    CharSequence _$_12 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_12, \"\\t\");\n    CharSequence _white_7 = this.white(\"\\t\");\n    _builder.append(_white_7, \"\\t\");\n    CharSequence _white_8 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_8, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testStaticMethod() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"static def foo() {}\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def bar() { \");\n    String _$ = this.$(XbaseHighlightingStyles.STATIC_METHOD_INVOCATION, \"foo\");\n    _builder.append(_$, \"\\t\");\n    _builder.append(\" }\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18507,"modified_method":"public void testStaticMethod() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"static def \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\"() {}\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_2 = this.$(XbaseHighlightingStyles.METHOD, \"bar\");\n    _builder.append(_$_2, \"\\t\");\n    _builder.append(\"() { \");\n    CharSequence _$_3 = this.$(XbaseHighlightingStyles.STATIC_METHOD_INVOCATION, \"foo\");\n    CharSequence _$_4 = this.$(XbaseHighlightingStyles.METHOD, _$_3);\n    _builder.append(_$_4, \"\\t\");\n    _builder.append(\" }\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testAnnotation() {\n    StringConcatenation _builder = new StringConcatenation();\n    String _$ = this.$(XbaseHighlightingStyles.ANNOTATION, \"@\");\n    _builder.append(_$, \"\");\n    String _$_1 = this.$(XbaseHighlightingStyles.ANNOTATION, \"SuppressWarnings\");\n    _builder.append(_$_1, \"\");\n    _builder.append(\"(\\\"all\\\")\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18508,"modified_method":"public void testAnnotation() {\n    StringConcatenation _builder = new StringConcatenation();\n    CharSequence _$ = this.$(XbaseHighlightingStyles.ANNOTATION, \"@\");\n    _builder.append(_$, \"\");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.ANNOTATION, \"SuppressWarnings\");\n    _builder.append(_$_1, \"\");\n    _builder.append(\"(\\\"all\\\")\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"class \");\n    CharSequence _$_2 = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$_2, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testExtensionMethod() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo(String x) {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def bar() {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"\\'\\'.\");\n    String _$ = this.$(XbaseHighlightingStyles.EXTENSION_METHOD_INVOCATION, \"foo\");\n    _builder.append(_$, \"\\t\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18509,"modified_method":"public void testExtensionMethod() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\"(\");\n    CharSequence _$_2 = this.$(XbaseHighlightingStyles.CLASS, \"String\");\n    _builder.append(_$_2, \"\\t\");\n    _builder.append(\" \");\n    CharSequence _$_3 = this.$(XbaseHighlightingStyles.PARAMETER_VARIABLE, \"x\");\n    _builder.append(_$_3, \"\\t\");\n    _builder.append(\") {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_4 = this.$(XbaseHighlightingStyles.METHOD, \"bar\");\n    _builder.append(_$_4, \"\\t\");\n    _builder.append(\"() {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\");\n    _builder.append(\"\\'\\'.\");\n    CharSequence _$_5 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    CharSequence _$_6 = this.$(XbaseHighlightingStyles.EXTENSION_METHOD_INVOCATION, _$_5);\n    _builder.append(_$_6, \"\\t\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testThisIsKeyword() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() {\");\n    _builder.newLine();\n    _builder.append(\"\\t\\t\");\n    String _$ = this.$(HighlightingStyles.KEYWORD_ID, \"this\");\n    _builder.append(_$, \"\\t\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18510,"modified_method":"public void testThisIsKeyword() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\"() {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\\t\");\n    CharSequence _$_2 = this.$(HighlightingStyles.KEYWORD_ID, \"this\");\n    _builder.append(_$_2, \"\\t\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testRichText_1() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() \");\n    String _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    String _$ = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$, \"\\t\");\n    String _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is not indented\");\n    String _$_1 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_1, \"\\t\");\n    String _white_2 = this.white(\"\\t\\t\");\n    _builder.append(_white_2, \"\\t\");\n    _builder.append(\"\\tthis is indented\");\n    String _$_2 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_2, \"\\t\");\n    String _white_3 = this.white(\"\\t\\t\");\n    _builder.append(_white_3, \"\\t\");\n    _builder.append(\"this is not indented\");\n    String _$_3 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_3, \"\\t\");\n    String _white_4 = this.white(\"\\t\");\n    _builder.append(_white_4, \"\\t\");\n    String _white_5 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_5, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18511,"modified_method":"public void testRichText_1() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\"() \");\n    CharSequence _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    CharSequence _$_2 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_2, \"\\t\");\n    CharSequence _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is not indented\");\n    CharSequence _$_3 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_3, \"\\t\");\n    CharSequence _white_2 = this.white(\"\\t\\t\");\n    _builder.append(_white_2, \"\\t\");\n    _builder.append(\"\\tthis is indented\");\n    CharSequence _$_4 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_4, \"\\t\");\n    CharSequence _white_3 = this.white(\"\\t\\t\");\n    _builder.append(_white_3, \"\\t\");\n    _builder.append(\"this is not indented\");\n    CharSequence _$_5 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_5, \"\\t\");\n    CharSequence _white_4 = this.white(\"\\t\");\n    _builder.append(_white_4, \"\\t\");\n    CharSequence _white_5 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_5, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testRichText_0() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo() \");\n    String _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    String _$ = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$, \"\\t\");\n    String _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is a template\");\n    String _$_1 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_1, \"\\t\");\n    String _white_2 = this.white(\"\\t\");\n    _builder.append(_white_2, \"\\t\");\n    String _white_3 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_3, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18512,"modified_method":"public void testRichText_0() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\"() \");\n    CharSequence _white = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white, \"\\t\");\n    CharSequence _$_2 = this.$(XtendHighlightingStyles.INSIGNIFICANT_TEMPLATE_TEXT, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_2, \"\\t\");\n    CharSequence _white_1 = this.white(\"\\t\\t\");\n    _builder.append(_white_1, \"\\t\");\n    _builder.append(\"this is a template\");\n    CharSequence _$_3 = this.$(XtendHighlightingStyles.SEMANTIC_LINE_BREAK, XtendSemanticHighlightingTest.NL);\n    _builder.append(_$_3, \"\\t\");\n    CharSequence _white_2 = this.white(\"\\t\");\n    _builder.append(_white_2, \"\\t\");\n    CharSequence _white_3 = this.white(XtendSemanticHighlightingTest.Q3);\n    _builder.append(_white_3, \"\\t\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"public void testItIsKeyword() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class Foo {\");\n    _builder.newLine();\n    _builder.append(\"\\t\");\n    _builder.append(\"def foo(String \");\n    String _$ = this.$(HighlightingStyles.KEYWORD_ID, \"it\");\n    _builder.append(_$, \"\\t\");\n    _builder.append(\") {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","id":18513,"modified_method":"public void testItIsKeyword() {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"class \");\n    CharSequence _$ = this.$(XbaseHighlightingStyles.CLASS, \"Foo\");\n    _builder.append(_$, \"\");\n    _builder.append(\" {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"def \");\n    CharSequence _$_1 = this.$(XbaseHighlightingStyles.METHOD, \"foo\");\n    _builder.append(_$_1, \"\\t\");\n    _builder.append(\"(\");\n    CharSequence _$_2 = this.$(XbaseHighlightingStyles.CLASS, \"String\");\n    _builder.append(_$_2, \"\\t\");\n    _builder.append(\" \");\n    CharSequence _$_3 = this.$(HighlightingStyles.KEYWORD_ID, \"it\");\n    _builder.append(_$_3, \"\\t\");\n    _builder.append(\") {\");\n    _builder.newLineIfNotEmpty();\n    _builder.append(\"\\t\");\n    _builder.append(\"}\");\n    _builder.newLine();\n    _builder.append(\"}\");\n    _builder.newLine();\n    this.checkHighlight(_builder);\n  }","commit_id":"4a4ca84067d30273a37a7575f551e18866c1e40e","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n   * Constructor.\n   * @param d target database\n   * @param i input info\n   * @param n document nodes to add\n   * @param p document paths\n   * @param c database context\n   */\n  public Add(final Data d, final InputInfo i, final NodeCache n,\n      final TokenList p, final Context c) {\n    super(PrimitiveType.INSERTAFTER, lastDoc(d), d, i, n);\n    docs = n;\n    paths = p;\n    ctx = c;\n  }","id":18514,"modified_method":"/**\n   * Constructor.\n   * @param trg target database\n   * @param i input info\n   * @param d document nodes to add\n   * @param n document name\n   * @param p document(s) path\n   * @param c database context\n   */\n  public Add(final Data trg, final InputInfo i, final List<Item> d,\n      final byte[] n, final byte[] p, final Context c) {\n    super(PrimitiveType.INSERTAFTER, lastDoc(trg), trg, i, null);\n    docs = d;\n    name = n == null || n.length == 0 ? null : n;\n    path = p == null || p.length == 0 ? null : p;\n    ctx = c;\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void merge(final UpdatePrimitive p) {\n    if(p instanceof Add) {\n      final Add a = (Add) p;\n      final NodeCache newdocs = a.docs;\n      final TokenList newpaths = a.paths;\n      ANode n;\n      for(int i = 0; (n = newdocs.next()) != null; ++i) {\n        docs.add(n);\n        paths.add(newpaths.get(i));\n      }\n    } else {\n      Util.notexpected(p);\n    }\n  }","id":18515,"modified_method":"@Override\n  public void merge(final UpdatePrimitive p) {\n    if(p instanceof Add) {\n      final Add a = (Add) p;\n      docs.addAll(a.docs);\n    } else {\n      Util.notexpected(p);\n    }\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void prepare() {\n    // build main memory representation of nodes to be copied\n    md = new MemData(data);\n    new DataBuilder(md).build(docs);\n    // rename the document paths as required\n    final int[] pres = md.doc();\n    for(int i = 0; i < pres.length; ++i)\n      md.replace(pres[i], Data.DOC, paths.get(i));\n  }","id":18516,"modified_method":"@Override\n  public void prepare() throws QueryException {\n    // build data with all documents, to prevent dirty reads\n    md = new MemData(data);\n    for(final Item d : docs) {\n      final MemData docData;\n      if(d.node()) {\n        // adding a document node\n        final ANode doc = (ANode) d;\n        if(doc.ndType() != NodeType.DOC) UPFOTYPE.thrw(input, doc);\n        docData = new MemData(data);\n        new DataBuilder(docData).build(doc);\n      } else if(d.str()) {\n        // adding file(s) from a path\n        final String docpath = string(d.atom(input));\n        final IO io = IO.get(docpath);\n        final DirParser p = new DirParser(io, ctx.prop);\n        final MemBuilder b = new MemBuilder(p, ctx.prop);\n        try {\n          docData = b.build(data.meta.random());\n        } catch(IOException e) {\n          throw DOCERR.thrw(input, docpath);\n        }\n      } else {\n        throw STRNODTYPE.thrw(input, this, d.type);\n      }\n      md.insert(md.meta.size, -1, docData);\n    }\n\n    // set new names, if needed\n    final int[] pres = md.doc();\n    if(pres.length == 1 && name != null) {\n      // name is specified and a single document is added: set the name\n      final byte[] nm = path == null ? name : concat(path, SLASH, name);\n      md.replace(pres[0], Data.DOC, nm);\n    } else if(path != null) {\n      // path is specified: replace the path of each new document\n      for(final int d : pres) {\n        final byte[] old = md.text(d, true);\n        final int p = lastIndexOf(old, '/');\n        final byte[] nm = p < 0 ? old : subtoken(old, p + 1);\n        md.replace(d, Data.DOC, concat(path, SLASH, nm));\n      }\n    }\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Performs the add function.\r\n   * @param ctx query context\r\n   * @return {@code null}\r\n   * @throws QueryException query exception\r\n   */\r\n  private Item add(final QueryContext ctx) throws QueryException {\r\n    final byte[] path;\r\n    if(expr.length == 4) {\r\n      final String s = ACreate.path(string(checkStr(expr[3], ctx)));\r\n      path = token(s.isEmpty() ? s : s + '/');\r\n    } else {\r\n      path = null;\r\n    }\r\n\r\n    final NodeCache c = new NodeCache();\r\n    final TokenList p = new TokenList();\r\n\r\n    final Iter iter = ctx.iter(expr[1]);\r\n    for(Item i; (i = iter.next()) != null;) {\r\n      final ANode nd = checkNode(i);\r\n      if(nd == null || nd.type != NodeType.DOC) UPFOTYPE.thrw(input, i);\r\n      c.add(nd);\r\n      p.add(EMPTY);\r\n    }\r\n\r\n    if(p.size() == 1) {\r\n      if (expr.length > 2) {\r\n        final byte[] name = checkStr(expr[2], ctx);\r\n        if(path == null) p.set(name, 0);\r\n        else {\r\n          final TokenBuilder tb = new TokenBuilder();\r\n          if(path.length > 0) tb.add(path);\r\n          tb.add(name);\r\n          p.set(tb.finish(), 0);\r\n        }\r\n      }\r\n    } else if(p.size() > 1 && path != null) {\r\n      for(int i = 0; i < p.size(); ++i) {\r\n        byte[] doc = p.get(i);\r\n        final int pos = lastIndexOf(doc, '/');\r\n        if(pos > 0) doc = subtoken(doc, pos + 1);\r\n        p.set(concat(path, doc), i);\r\n      }\r\n    }\r\n\r\n    if(c.size() > 0) {\r\n      final Data data = ctx.resource.data(checkStr(expr[0], ctx), input);\r\n      ctx.updates.add(new Add(data, input, c, p, ctx.context), ctx);\r\n    }\r\n    return null;\r\n  }","id":18517,"modified_method":"/**\r\n   * Performs the add function.\r\n   * @param ctx query context\r\n   * @return {@code null}\r\n   * @throws QueryException query exception\r\n   */\r\n  private Item add(final QueryContext ctx) throws QueryException {\r\n    final byte[] name = expr.length < 3 ? null :\r\n      token(path(string(checkStr(expr[2], ctx))));\r\n    final byte[] path = expr.length < 4 ? null :\r\n      token(path(string(checkStr(expr[3], ctx))));\r\n\r\n    // get all items representing document(s):\r\n    final ArrayList<Item> docs = new ArrayList<Item>();\r\n    final Iter iter = ctx.iter(expr[1]);\r\n    for(Item i; (i = iter.next()) != null;) docs.add(i);\r\n\r\n    if(docs.size() > 0) {\r\n      final Data data = ctx.resource.data(checkStr(expr[0], ctx), input);\r\n      ctx.updates.add(new Add(data, input, docs, name, path, ctx.context), ctx);\r\n    }\r\n    return null;\r\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Performs the delete function.\r\n   * @param ctx query context\r\n   * @return {@code null}\r\n   * @throws QueryException query exception\r\n   */\r\n  private Item delete(final QueryContext ctx) throws QueryException {\r\n    final Data data = ctx.resource.data(checkStr(expr[0], ctx), input);\r\n    final String path = string(checkStr(expr[1], ctx));\r\n\r\n    final int[] docs = data.doc(path);\r\n    for(final int pre : docs)\r\n      ctx.updates.add(new DeleteNode(pre, data, input), ctx);\r\n\r\n    return null;\r\n  }","id":18518,"modified_method":"/**\r\n   * Performs the delete function.\r\n   * @param ctx query context\r\n   * @return {@code null}\r\n   * @throws QueryException query exception\r\n   */\r\n  private Item delete(final QueryContext ctx) throws QueryException {\r\n    final String path = path(string(checkStr(expr[0], ctx)));\r\n\r\n    // the first step of the path should be the database name\r\n    final int pos = path.indexOf('/');\r\n    if(pos <= 0) NODB.thrw(input, path);\r\n    final byte[] db = token(path.substring(0, pos));\r\n    final Data data = ctx.resource.data(db, input);\r\n\r\n    final String trg = path.substring(pos + 1);\r\n\r\n    final int[] docs = data.doc(trg);\r\n    for(final int pre : docs)\r\n      ctx.updates.add(new DeleteNode(pre, data, input), ctx);\r\n\r\n    return null;\r\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Performs the rename function.\r\n   * @param ctx query context\r\n   * @return {@code null}\r\n   * @throws QueryException query exception\r\n   */\r\n  private Item rename(final QueryContext ctx) throws QueryException {\r\n    final Data data = ctx.resource.data(checkStr(expr[0], ctx), input);\r\n    final byte[] path = checkStr(expr[1], ctx);\r\n    final byte[] newpath = checkStr(expr[2], ctx);\r\n\r\n    final int[] docs = data.doc(string(path));\r\n    for(final int pre : docs) {\r\n      final byte[] nm = newName(data, pre, path, newpath);\r\n      ctx.updates.add(new ReplaceValue(pre, data, input, nm), ctx);\r\n    }\r\n\r\n    return null;\r\n  }","id":18519,"modified_method":"/**\r\n   * Performs the rename function.\r\n   * @param ctx query context\r\n   * @return {@code null}\r\n   * @throws QueryException query exception\r\n   */\r\n  private Item rename(final QueryContext ctx) throws QueryException {\r\n    final String path = path(string(checkStr(expr[0], ctx)));\r\n\r\n    // the first step of the path should be the database name\r\n    final int pos = path.indexOf('/');\r\n    if(pos <= 0) NODB.thrw(input, path);\r\n    final byte[] db = token(path.substring(0, pos));\r\n    final Data data = ctx.resource.data(db, input);\r\n\r\n    final byte[] src = token(path.substring(pos + 1));\r\n    final byte[] trg = token(path(string(checkStr(expr[1], ctx))));\r\n\r\n    final int[] docs = data.doc(string(src));\r\n    for(final int pre : docs) {\r\n      final byte[] nm = newName(data, pre, src, trg);\r\n      ctx.updates.add(new ReplaceValue(pre, data, input, nm), ctx);\r\n    }\r\n\r\n    return null;\r\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Performs the replace function.\r\n   * @param ctx query context\r\n   * @return {@code null}\r\n   * @throws QueryException query exception\r\n   */\r\n  private Item replace(final QueryContext ctx) throws QueryException {\r\n    final Data data = ctx.resource.data(checkStr(expr[0], ctx), input);\r\n    final String path = ACreate.path(string(checkStr(expr[1], ctx)));\r\n    final ANode doc = checkNode(checkItem(expr[2], ctx));\r\n\r\n    // collect all old documents\r\n    final int[] old = data.doc(path);\r\n    if(old.length > 0) {\r\n      final int pre = old[0];\r\n      if(old.length > 1 || !eq(data.text(pre, true), token(path)))\r\n        DOCTRGMULT.thrw(input);\r\n      ctx.updates.add(new DeleteNode(pre, data, input), ctx);\r\n    }\r\n\r\n    final NodeCache c = new NodeCache(); c.add(doc);\r\n    final TokenList p = new TokenList(1); p.add(token(path));\r\n    ctx.updates.add(new Add(data, input, c, p, ctx.context), ctx);\r\n\r\n    return null;\r\n  }","id":18520,"modified_method":"/**\r\n   * Performs the replace function.\r\n   * @param ctx query context\r\n   * @return {@code null}\r\n   * @throws QueryException query exception\r\n   */\r\n  private Item replace(final QueryContext ctx) throws QueryException {\r\n    final String path = path(string(checkStr(expr[0], ctx)));\r\n\r\n    // the first step of the path should be the database name\r\n    final int pos = path.indexOf('/');\r\n    if(pos <= 0) NODB.thrw(input, path);\r\n    final byte[] db = token(path.substring(0, pos));\r\n    final Data data = ctx.resource.data(db, input);\r\n\r\n    // replace: source and target path are the same\r\n    final String src = path.substring(pos + 1);\r\n    final byte[] trg = token(src);\r\n\r\n    final Item doc = checkItem(expr[1], ctx);\r\n\r\n    // collect all old documents\r\n    final int[] old = data.doc(src);\r\n    if(old.length > 0) {\r\n      final int pre = old[0];\r\n      if(old.length > 1 || !eq(data.text(pre, true), trg))\r\n        DOCTRGMULT.thrw(input);\r\n      ctx.updates.add(new DeleteNode(pre, data, input), ctx);\r\n    }\r\n\r\n    final byte[] trgname;\r\n    final byte[] trgpath;\r\n    final int p = lastIndexOf(trg, '/');\r\n    if(p < 0) {\r\n      trgname = trg;\r\n      trgpath = null;\r\n    } else {\r\n      trgname = subtoken(trg, p + 1);\r\n      trgpath = subtoken(trg, 0, p);\r\n    }\r\n\r\n    final ArrayList<Item> docs = new ArrayList<Item>(); docs.add(doc);\r\n    final Add add = new Add(data, input, docs, trgname, trgpath, ctx.context);\r\n    ctx.updates.add(add, ctx);\r\n\r\n    return null;\r\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Test method for the db:add() function.\r\n   * @throws QueryException query exception\r\n   */\r\n  @Test\r\n  public void testAdd() throws QueryException {\r\n    final String fun = check(Function.ADD);\r\n\r\n    query(fun + \"('db', document { <root/> }, 'test1')\");\r\n    query(\"count(collection('db/test1')) eq 1\", \"true\");\r\n  }","id":18521,"modified_method":"/**\r\n   * Test method for the db:add() function.\r\n   * @throws QueryException query exception\r\n   */\r\n  @Test\r\n  public void testAdd() throws QueryException {\r\n    final String fun = check(Function.ADD);\r\n\r\n    query(fun + \"('db', document { <root/> }, 'test1.xml')\");\r\n    query(\"count(collection('db/test1.xml')/root) eq 1\", \"true\");\r\n\r\n    query(fun + \"('db', document { <root/> }, 'test2.xml', 'test')\");\r\n    query(\"count(collection('db/test/test2.xml')/root) eq 1\", \"true\");\r\n\r\n    query(fun + \"('db', 'etc/test/input.xml', '', 'test')\");\r\n    query(\"count(collection('db/test/input.xml')/html) eq 1\", \"true\");\r\n\r\n    query(fun + \"('db', 'etc/test/input.xml', 'test3.xml', 'test')\");\r\n    query(\"count(collection('db/test/test3.xml')/html) eq 1\", \"true\");\r\n\r\n    query(fun + \"('db', 'etc/test/dir', '', 'test/dir')\");\r\n    query(\"count(collection('db/test/dir')) gt 0\", \"true\");\r\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Test method for the db:rename() function.\r\n   * @throws QueryException query exception\r\n   * @throws BaseXException database exception\r\n   */\r\n  @Test\r\n  public void testRename() throws QueryException, BaseXException {\r\n    final String fun = check(Function.RENAME);\r\n\r\n    // add documents with certain prefix\r\n    new Add(\"etc/test/dir\", \"docs\", \"test\").execute(CONTEXT);\r\n    query(fun + \"('db', 'test', 'newtest')\", \"\");\r\n    query(\"count(collection('db/newtest')) gt 0\", \"true\");\r\n  }","id":18522,"modified_method":"/**\r\n   * Test method for the db:rename() function.\r\n   * @throws QueryException query exception\r\n   * @throws BaseXException database exception\r\n   */\r\n  @Test\r\n  public void testRename() throws QueryException, BaseXException {\r\n    final String fun = check(Function.RENAME);\r\n\r\n    new Add(\"etc/test/dir\", \"docs\", \"test\").execute(CONTEXT);\r\n\r\n    query(fun + \"('db/test', 'newtest')\", \"\");\r\n    query(\"count(collection('db/newtest')) gt 0\", \"true\");\r\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Test method for the db:delete() function.\r\n   * @throws QueryException query exception\r\n   * @throws BaseXException database exception\r\n   */\r\n  @Test\r\n  public void testDelete() throws QueryException, BaseXException {\r\n    final String fun = check(Function.DELETE);\r\n\r\n    // add documents with certain prefix\r\n    new Add(\"etc/test/dir\", \"docs\", \"test\").execute(CONTEXT);\r\n    query(fun + \"('db', 'test')\", \"\");\r\n    query(\"count(collection('db/newtest')) eq 0\", \"true\");\r\n  }","id":18523,"modified_method":"/**\r\n   * Test method for the db:delete() function.\r\n   * @throws QueryException query exception\r\n   * @throws BaseXException database exception\r\n   */\r\n  @Test\r\n  public void testDelete() throws QueryException, BaseXException {\r\n    final String fun = check(Function.DELETE);\r\n\r\n    new Add(\"etc/test/dir\", \"docs\", \"test\").execute(CONTEXT);\r\n\r\n    query(fun + \"('db/test')\", \"\");\r\n    query(\"count(collection('db/test')) eq 0\", \"true\");\r\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Test method for the db:replace() function.\r\n   * @throws QueryException query exception\r\n   * @throws BaseXException database exception\r\n   */\r\n  @Test\r\n  public void testReplace() throws QueryException, BaseXException {\r\n    final String fun = check(Function.REPLACEDOC);\r\n\r\n    new Add(\"etc/test/input.xml\", null, \"test\").execute(CONTEXT);\r\n    query(fun + \"('db', 'test/input.xml', document { <root/> })\");\r\n    query(\"count(collection('db/test/input.xml')/html) eq 0\", \"true\");\r\n    query(\"count(collection('db/test/input.xml')/root) eq 1\", \"true\");\r\n  }","id":18524,"modified_method":"/**\r\n   * Test method for the db:replace() function.\r\n   * @throws QueryException query exception\r\n   * @throws BaseXException database exception\r\n   */\r\n  @Test\r\n  public void testReplace() throws QueryException, BaseXException {\r\n    final String fun = check(Function.REPLACEDOC);\r\n\r\n    new Add(\"etc/test/input.xml\", null, \"test\").execute(CONTEXT);\r\n\r\n    query(fun + \"('db/test/input.xml', document { <root/> })\");\r\n    query(\"count(collection('db/test/input.xml')/html) eq 0\", \"true\");\r\n    query(\"count(collection('db/test/input.xml')/root) eq 1\", \"true\");\r\n\r\n    query(fun + \"('db/test/input.xml', 'etc/test/input.xml')\");\r\n    query(\"count(collection('db/test/input.xml')/html) eq 1\", \"true\");\r\n    query(\"count(collection('db/test/input.xml')/root) eq 0\", \"true\");\r\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Prepares this update primitive before execution. This includes i.e. the\n   * preparation of insertion sequences.\n   */\n  public void prepare() {\n    // build main memory representation of nodes to be copied\n    md = new MemData(data);\n    final NodeCache seq = new NodeCache();\n    for(final NodeCache nc : insert) {\n      for(ANode i; (i = nc.next()) != null;) seq.add(i);\n    }\n    // text nodes still need to be merged. two adjacent iterators may\n    // lead to two adjacent text nodes\n    new DataBuilder(md).build(mergeNodeCacheText(seq));\n  }","id":18525,"modified_method":"/**\n   * Prepares this update primitive before execution. This includes i.e. the\n   * preparation of insertion sequences.\n   * @throws QueryException exception during preparation of data\n   */\n  @SuppressWarnings(\"unused\")\n  public void prepare() throws QueryException {\n    // build main memory representation of nodes to be copied\n    md = new MemData(data);\n    final NodeCache seq = new NodeCache();\n    for(final NodeCache nc : insert) {\n      for(ANode i; (i = nc.next()) != null;) seq.add(i);\n    }\n    // text nodes still need to be merged. two adjacent iterators may\n    // lead to two adjacent text nodes\n    new DataBuilder(md).build(mergeNodeCacheText(seq));\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Merges two adjacent text nodes in a database. The two node arguments must\n   * be sorted in ascending order, otherwise the text of the two nodes is\n   * concatenated in the wrong order.\n   * @param d data reference\n   * @param a node pre value\n   * @param b node pre value\n   * @return true if nodes have been merged\n   */\n  protected static boolean mergeTexts(final Data d, final int a, final int b) {\n    // some pre value checks to prevent database errors\n    final int s = d.meta.size;\n    if(a >= s || b >= s) return false;\n    if(d.kind(a) != Data.TEXT || d.kind(b) != Data.TEXT) return false;\n    if(d.parent(a, Data.TEXT) != d.parent(b, Data.TEXT)) return false;\n\n    d.replace(a, Data.TEXT, concat(d.text(a, true), d.text(b, true)));\n    d.delete(b);\n    return true;\n  }","id":18526,"modified_method":"/**\n   * Merges two adjacent text nodes in a database. The two node arguments must\n   * be sorted in ascending order, otherwise the text of the two nodes is\n   * concatenated in the wrong order.\n   * @param d data reference\n   * @param a node pre value\n   * @param b node pre value\n   * @return true if nodes have been merged\n   */\n  protected static boolean mergeTexts(final Data d, final int a, final int b) {\n    // some pre value checks to prevent database errors\n    final int s = d.meta.size;\n    if(a >= s || b >= s || a < 0 || b < 0) return false;\n    if(d.kind(a) != Data.TEXT || d.kind(b) != Data.TEXT) return false;\n    if(d.parent(a, Data.TEXT) != d.parent(b, Data.TEXT)) return false;\n\n    d.replace(a, Data.TEXT, concat(d.text(a, true), d.text(b, true)));\n    d.delete(b);\n    return true;\n  }","commit_id":"f786e426a8913935e2104f4a70dee26175397159","url":"https://github.com/BaseXdb/basex"},{"original_method":"protected static void init() throws ChannelException {\n        try {\n            // make sure we have a class for DocumentBuilderFactory\n            // getClass().getClassLoader().loadClass(\"javax.xml.parsers.DocumentBuilderFactory\");\n            Util.loadClass(\"javax.xml.parsers.DocumentBuilderFactory\", ClassConfigurator.class);\n\n            MagicNumberReader reader=new MagicNumberReader();\n\n            // PropertyPermission not granted if running in an untrusted environment with JNLP.\n            try {\n                String mnfile=Util.getProperty(new String[]{Global.MAGIC_NUMBER_FILE, \"org.jgroups.conf.magicNumberFile\"},\n                                               null, null, false, null);\n                if(mnfile != null) {\n                    if(log.isDebugEnabled()) log.debug(\"Using \" + mnfile + \" as magic number file\");\n                    reader.setFilename(mnfile);\n                }\n            }\n            catch (SecurityException ex){\n            }\n\n            ClassMap[] mapping=reader.readMagicNumberMapping();\n            if(mapping != null) {\n                Short m;\n                for(int i=0; i < mapping.length; i++) {\n                    m=new Short(mapping[i].getMagicNumber());\n                    try {\n                        Class clazz=mapping[i].getClassForMap();\n                        if(magicMap.containsKey(m)) {\n                            throw new ChannelException(\"magic key \" + m + \" (\" + clazz.getName() + ')' +\n                                                       \" is already in map; please make sure that \" +\n                                                       \"all magic keys are unique\");\n                        }\n                        else {\n                            magicMap.put(m, clazz);\n                            classMap.put(clazz, m);\n                        }\n                    }\n                    catch(ClassNotFoundException cnf) {\n                        throw new ChannelException(\"failed loading class\", cnf);\n                    }\n                }\n            }\n        }\n        catch(ChannelException ex) {\n            throw ex;\n        }\n        catch(Throwable x) {\n            throw new ChannelException(\"failed reading the magic number mapping file\", x);\n        }\n    }","id":18527,"modified_method":"protected static void init() throws ChannelException {\n        try {\n            // make sure we have a class for DocumentBuilderFactory\n            Util.loadClass(\"javax.xml.parsers.DocumentBuilderFactory\", ClassConfigurator.class);\n\n            String mnfile=null;\n            try { // PropertyPermission not granted if running in an untrusted environment with JNLP\n                mnfile=Util.getProperty(new String[]{Global.MAGIC_NUMBER_FILE, \"org.jgroups.conf.magicNumberFile\"},\n                                               null, null, false, MAGIC_NUMBER_FILE);\n                if(log.isDebugEnabled()) log.debug(\"Using \" + mnfile + \" as magic number file\");\n            }\n            catch (SecurityException ex){\n            }\n\n            List<Tuple<Short,String>> mapping=readMagicNumberMapping(mnfile);\n            for(Tuple<Short,String> tuple: mapping) {\n                short m=tuple.getVal1();\n                try {\n                    Class clazz=Util.loadClass(tuple.getVal2(), ClassConfigurator.class);\n                    if(magicMap.containsKey(m))\n                        throw new ChannelException(\"key \" + m + \" (\" + clazz.getName() + ')' +\n                                \" is already in map; please make sure that all keys are unique\");\n                    \n                    magicMap.put(m, clazz);\n                    classMap.put(clazz, m);\n                }\n                catch(ClassNotFoundException cnf) {\n                    throw new ChannelException(\"failed loading class\", cnf);\n                }\n            }\n        }\n        catch(ChannelException ex) {\n            throw ex;\n        }\n        catch(Throwable x) {\n            throw new ChannelException(\"failed reading the magic number mapping file\", x);\n        }\n    }","commit_id":"63b23e5b4ed20cc56a878bccadba1034a5cd166d","url":"https://github.com/belaban/JGroups"},{"original_method":"protected static void init() throws ChannelException {\n        try {\n            // make sure we have a class for DocumentBuilderFactory\n            // getClass().getClassLoader().loadClass(\"javax.xml.parsers.DocumentBuilderFactory\");\n            Util.loadClass(\"javax.xml.parsers.DocumentBuilderFactory\", ClassConfigurator.class);\n\n            MagicNumberReader reader=new MagicNumberReader();\n\n            // PropertyPermission not granted if running in an untrusted environment with JNLP.\n            try {\n                String mnfile=Util.getProperty(new String[]{Global.MAGIC_NUMBER_FILE, \"org.jgroups.conf.magicNumberFile\"},\n                                               null, null, false, null);\n                if(mnfile != null) {\n                    if(log.isDebugEnabled()) log.debug(\"Using \" + mnfile + \" as magic number file\");\n                    reader.setFilename(mnfile);\n                }\n            }\n            catch (SecurityException ex){\n            }\n\n            ClassMap[] mapping=reader.readMagicNumberMapping();\n            if(mapping != null) {\n                Short m;\n                for(int i=0; i < mapping.length; i++) {\n                    m=new Short(mapping[i].getMagicNumber());\n                    try {\n                        Class clazz=mapping[i].getClassForMap();\n                        if(magicMap.containsKey(m)) {\n                            throw new ChannelException(\"magic key \" + m + \" (\" + clazz.getName() + ')' +\n                                                       \" is already in map; please make sure that \" +\n                                                       \"all magic keys are unique\");\n                        }\n                        else {\n                            magicMap.put(m, clazz);\n                            classMap.put(clazz, m);\n                        }\n                    }\n                    catch(ClassNotFoundException cnf) {\n                        throw new ChannelException(\"failed loading class\", cnf);\n                    }\n                }\n            }\n        }\n        catch(ChannelException ex) {\n            throw ex;\n        }\n        catch(Throwable x) {\n            throw new ChannelException(\"failed reading the magic number mapping file\", x);\n        }\n    }","id":18528,"modified_method":"protected static void init() throws ChannelException {\n        try {\n            // make sure we have a class for DocumentBuilderFactory\n            Util.loadClass(\"javax.xml.parsers.DocumentBuilderFactory\", ClassConfigurator.class);\n\n            String mnfile=null;\n            try { // PropertyPermission not granted if running in an untrusted environment with JNLP\n                mnfile=Util.getProperty(new String[]{Global.MAGIC_NUMBER_FILE, \"org.jgroups.conf.magicNumberFile\"},\n                                               null, null, false, MAGIC_NUMBER_FILE);\n                if(log.isDebugEnabled()) log.debug(\"Using \" + mnfile + \" as magic number file\");\n            }\n            catch (SecurityException ex){\n            }\n\n            List<Tuple<Short,String>> mapping=readMagicNumberMapping(mnfile);\n            for(Tuple<Short,String> tuple: mapping) {\n                short m=tuple.getVal1();\n                try {\n                    Class clazz=Util.loadClass(tuple.getVal2(), ClassConfigurator.class);\n                    if(magicMap.containsKey(m))\n                        throw new ChannelException(\"key \" + m + \" (\" + clazz.getName() + ')' +\n                                \" is already in map; please make sure that all keys are unique\");\n                    \n                    magicMap.put(m, clazz);\n                    classMap.put(clazz, m);\n                }\n                catch(ClassNotFoundException cnf) {\n                    throw new ChannelException(\"failed loading class\", cnf);\n                }\n            }\n        }\n        catch(ChannelException ex) {\n            throw ex;\n        }\n        catch(Throwable x) {\n            throw new ChannelException(\"failed reading the magic number mapping file\", x);\n        }\n    }","commit_id":"1c1fe63a93e7de8fc9c255bc6d6bc011efc9fdca","url":"https://github.com/belaban/JGroups"},{"original_method":"public GetTranslatorList()\n   {\n   }","id":18529,"modified_method":"private GetTranslatorList()\n   {\n   }","commit_id":"dee47b131cd06d4ee623b8d0473324b760996e0d","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public void onChatClick()\n   {\n      if (!userWorkspaceContext.hasReadOnlyAccess())\n      {\n         if (!isExpended)\n         {\n            expendSideMenu(true);\n            display.setSelectedTab(SideMenuDisplay.WORKSPACEUSER_VIEW);\n         }\n         else if (display.getCurrentTab() != SideMenuDisplay.WORKSPACEUSER_VIEW)\n         {\n            display.setSelectedTab(SideMenuDisplay.WORKSPACEUSER_VIEW);\n         }\n         else\n         {\n            expendSideMenu(false);\n         }\n      }\n   }","id":18530,"modified_method":"@Override\n   public void onChatClick()\n   {\n      showAndExpandOrCollapseTab(SideMenuDisplay.WORKSPACEUSER_VIEW);\n   }","commit_id":"dee47b131cd06d4ee623b8d0473324b760996e0d","url":"https://github.com/zanata/zanata-server"},{"original_method":"private void loadTranslatorList()\n   {\n      dispatcher.execute(new GetTranslatorList(), new AsyncCallback<GetTranslatorListResult>()\n      {\n         @Override\n         public void onFailure(Throwable caught)\n         {\n            Log.error(\"error fetching translators list: \" + caught.getMessage());\n         }\n\n         @Override\n         public void onSuccess(GetTranslatorListResult result)\n         {\n            workspaceUsersPresenter.initUserList(result.getTranslatorList());\n         }\n      });\n\n      registerHandler(eventBus.addHandler(ExitWorkspaceEvent.getType(), new ExitWorkspaceEventHandler()\n      {\n         @Override\n         public void onExitWorkspace(ExitWorkspaceEvent event)\n         {\n            workspaceUsersPresenter.removeTranslator(event.getEditorClientId(), event.getPerson());\n         }\n      }));\n\n      registerHandler(eventBus.addHandler(EnterWorkspaceEvent.getType(), new EnterWorkspaceEventHandler()\n      {\n         @Override\n         public void onEnterWorkspace(EnterWorkspaceEvent event)\n         {\n            workspaceUsersPresenter.addTranslator(event.getEditorClientId(), event.getPerson(), null);\n            workspaceUsersPresenter.dispatchChatAction(null, messages.hasJoinedWorkspace(event.getPerson().getId().toString()), MESSAGE_TYPE.SYSTEM_MSG);\n         }\n      }));\n\n      registerHandler(eventBus.addHandler(PublishWorkspaceChatEvent.getType(), new PublishWorkspaceChatEventHandler()\n      {\n         @Override\n         public void onPublishWorkspaceChat(PublishWorkspaceChatEvent event)\n         {\n            if (display.getCurrentTab() != SideMenuDisplay.WORKSPACEUSER_VIEW)\n            {\n               display.setChatTabAlert(true);\n            }\n         }\n      }));\n   }","id":18531,"modified_method":"private void loadTranslatorList()\n   {\n      dispatcher.execute(GetTranslatorList.ACTION, new AsyncCallback<GetTranslatorListResult>()\n      {\n         @Override\n         public void onFailure(Throwable caught)\n         {\n            Log.error(\"error fetching translators list: \" + caught.getMessage());\n         }\n\n         @Override\n         public void onSuccess(GetTranslatorListResult result)\n         {\n            workspaceUsersPresenter.initUserList(result.getTranslatorList());\n         }\n      });\n   }","commit_id":"dee47b131cd06d4ee623b8d0473324b760996e0d","url":"https://github.com/zanata/zanata-server"},{"original_method":"private void expendSideMenu(boolean isExpend)\n   {\n      isExpended = isExpend;\n      eventBus.fireEvent(new ShowSideMenuEvent(isExpended));\n      if (!isExpended)\n      {\n         display.setSelectedTab(SideMenuDisplay.EMPTY_VIEW);\n      }\n   }","id":18532,"modified_method":"protected void expendSideMenu(boolean isExpend)\n   {\n      isExpended = isExpend;\n      eventBus.fireEvent(new ShowSideMenuEvent(isExpended));\n      if (!isExpended)\n      {\n         display.setSelectedTab(SideMenuDisplay.EMPTY_VIEW);\n      }\n   }","commit_id":"dee47b131cd06d4ee623b8d0473324b760996e0d","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   protected void onBind()\n   {\n      editorOptionsPresenter.bind();\n      validationOptionsPresenter.bind();\n      workspaceUsersPresenter.bind();\n      notificationPresenter.bind();\n\n      registerHandler(eventBus.addHandler(WorkspaceContextUpdateEvent.getType(), new WorkspaceContextUpdateEventHandler()\n      {\n         @Override\n         public void onWorkspaceContextUpdated(WorkspaceContextUpdateEvent event)\n         {\n            userWorkspaceContext.setProjectActive(event.isProjectActive());\n            setReadOnly(userWorkspaceContext.hasReadOnlyAccess());\n         }\n      }));\n\n      setReadOnly(userWorkspaceContext.hasReadOnlyAccess());\n\n      notificationPresenter.setNotificationListener(this);\n\n      // We won't receive the EnterWorkspaceEvent generated by our own login,\n      // because this presenter is not bound until we get the callback from\n      // EventProcessor.\n      // Thus we load the translator list here.\n      loadTranslatorList();\n   }","id":18533,"modified_method":"@Override\n   protected void onBind()\n   {\n      editorOptionsPresenter.bind();\n      validationOptionsPresenter.bind();\n      workspaceUsersPresenter.bind();\n      notificationPresenter.bind();\n\n      registerHandler(eventBus.addHandler(WorkspaceContextUpdateEvent.getType(), new WorkspaceContextUpdateEventHandler()\n      {\n         @Override\n         public void onWorkspaceContextUpdated(WorkspaceContextUpdateEvent event)\n         {\n            userWorkspaceContext.setProjectActive(event.isProjectActive());\n            setReadOnly(userWorkspaceContext.hasReadOnlyAccess());\n         }\n      }));\n\n      setReadOnly(userWorkspaceContext.hasReadOnlyAccess());\n\n      notificationPresenter.setNotificationListener(this);\n\n      registerHandler(eventBus.addHandler(ExitWorkspaceEvent.getType(), this));\n      registerHandler(eventBus.addHandler(EnterWorkspaceEvent.getType(), this));\n      registerHandler(eventBus.addHandler(PublishWorkspaceChatEvent.getType(), this));\n\n      // We won't receive the EnterWorkspaceEvent generated by our own login,\n      // because this presenter is not bound until we get the callback from\n      // EventProcessor.\n      // Thus we load the translator list here.\n      loadTranslatorList();\n   }","commit_id":"dee47b131cd06d4ee623b8d0473324b760996e0d","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public void onValidationOptionsClick()\n   {\n      if (!userWorkspaceContext.hasReadOnlyAccess())\n      {\n         if (!isExpended)\n         {\n            expendSideMenu(true);\n            display.setSelectedTab(SideMenuDisplay.VALIDATION_OPTION_VIEW);\n         }\n         else if (display.getCurrentTab() != SideMenuDisplay.VALIDATION_OPTION_VIEW)\n         {\n            display.setSelectedTab(SideMenuDisplay.VALIDATION_OPTION_VIEW);\n         }\n         else\n         {\n            expendSideMenu(false);\n         }\n      }\n   }","id":18534,"modified_method":"@Override\n   public void onValidationOptionsClick()\n   {\n      showAndExpandOrCollapseTab(SideMenuDisplay.VALIDATION_OPTION_VIEW);\n   }","commit_id":"dee47b131cd06d4ee623b8d0473324b760996e0d","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public void onEditorOptionsClick()\n   {\n      if (!userWorkspaceContext.hasReadOnlyAccess())\n      {\n         if (!isExpended)\n         {\n            expendSideMenu(true);\n            display.setSelectedTab(SideMenuDisplay.EDITOR_OPTION_VIEW);\n         }\n         else if (display.getCurrentTab() != SideMenuDisplay.EDITOR_OPTION_VIEW)\n         {\n            display.setSelectedTab(SideMenuDisplay.EDITOR_OPTION_VIEW);\n         }\n         else\n         {\n            expendSideMenu(false);\n         }\n      }\n   }","id":18535,"modified_method":"@Override\n   public void onEditorOptionsClick()\n   {\n      showAndExpandOrCollapseTab(SideMenuDisplay.EDITOR_OPTION_VIEW);\n   }","commit_id":"dee47b131cd06d4ee623b8d0473324b760996e0d","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public void onNotificationClick()\n   {\n      if (!isExpended)\n      {\n         expendSideMenu(true);\n         display.setSelectedTab(SideMenuDisplay.NOTIFICATION_VIEW);\n      }\n      else if (display.getCurrentTab() != SideMenuDisplay.NOTIFICATION_VIEW)\n      {\n         display.setSelectedTab(SideMenuDisplay.NOTIFICATION_VIEW);\n      }\n      else\n      {\n         expendSideMenu(false);\n      }\n   }","id":18536,"modified_method":"@Override\n   public void onNotificationClick()\n   {\n      showAndExpandOrCollapseTab(SideMenuDisplay.NOTIFICATION_VIEW);\n   }","commit_id":"dee47b131cd06d4ee623b8d0473324b760996e0d","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n\tpublic void checkDuplicateTrashEntry(\n\t\t\tTrashEntry trashEntry, long containerModelId, String newName)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFileEntry dlFileEntry = getDLFileEntry(trashEntry.getClassPK());\n\n\t\tif (containerModelId == TrashEntryConstants.DEFAULT_CONTAINER_ID) {\n\t\t\tcontainerModelId = dlFileEntry.getFolderId();\n\t\t}\n\n\t\tString originalTitle = trashEntry.getTypeSettingsProperty(\"title\");\n\n\t\tif (Validator.isNotNull(newName)) {\n\t\t\toriginalTitle = newName;\n\t\t}\n\n\t\tDLFileEntry duplicateDLFileEntry =\n\t\t\tDLFileEntryLocalServiceUtil.fetchFileEntry(\n\t\t\t\tdlFileEntry.getGroupId(), containerModelId, originalTitle);\n\n\t\tif (duplicateDLFileEntry != null) {\n\t\t\tDuplicateEntryException dee = new DuplicateEntryException();\n\n\t\t\tdee.setDuplicateEntryId(duplicateDLFileEntry.getFileEntryId());\n\t\t\tdee.setOldName(duplicateDLFileEntry.getTitle());\n\t\t\tdee.setTrashEntryId(trashEntry.getEntryId());\n\n\t\t\tthrow dee;\n\t\t}\n\t}","id":18537,"modified_method":"@Override\n\tpublic void checkDuplicateTrashEntry(\n\t\t\tTrashEntry trashEntry, long containerModelId, String newName)\n\t\tthrows PortalException, SystemException {\n\n\t\tcheckDuplicate(\n\t\t\ttrashEntry.getClassPK(), trashEntry.getEntryId(), containerModelId,\n\t\t\ttrashEntry.getTypeSettingsProperty(\"title\"), newName);\n\t}","commit_id":"0c8475c80f1b059191651b22fe4c1be5ed8512de","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void checkDuplicateTrashEntry(\n\t\t\tTrashEntry trashEntry, long containerModelId, String newName)\n\t\tthrows PortalException, SystemException {\n\n\t\tDLFolder dlFolder = getDLFolder(trashEntry.getClassPK());\n\n\t\tif (containerModelId == TrashEntryConstants.DEFAULT_CONTAINER_ID) {\n\t\t\tcontainerModelId = dlFolder.getParentFolderId();\n\t\t}\n\n\t\tString originalTitle = trashEntry.getTypeSettingsProperty(\"title\");\n\n\t\tif (Validator.isNotNull(newName)) {\n\t\t\toriginalTitle = newName;\n\t\t}\n\n\t\tDLFolder duplicateDLFolder = DLFolderLocalServiceUtil.fetchFolder(\n\t\t\tdlFolder.getGroupId(), dlFolder.getParentFolderId(), originalTitle);\n\n\t\tif (duplicateDLFolder != null) {\n\t\t\tDuplicateEntryException dee = new DuplicateEntryException();\n\n\t\t\tdee.setDuplicateEntryId(duplicateDLFolder.getFolderId());\n\t\t\tdee.setOldName(duplicateDLFolder.getName());\n\t\t\tdee.setTrashEntryId(trashEntry.getEntryId());\n\n\t\t\tthrow dee;\n\t\t}\n\t}","id":18538,"modified_method":"@Override\n\tpublic void checkDuplicateTrashEntry(\n\t\t\tTrashEntry trashEntry, long containerModelId, String newName)\n\t\tthrows PortalException, SystemException {\n\n\t\tcheckDuplicate(\n\t\t\ttrashEntry.getClassPK(), trashEntry.getEntryId(), containerModelId,\n\t\t\ttrashEntry.getTypeSettingsProperty(\"title\"), newName);\n\t}","commit_id":"0c8475c80f1b059191651b22fe4c1be5ed8512de","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void checkDuplicateTrashEntry(\n\t\t\tTrashEntry trashEntry, long containerModelId, String newName)\n\t\tthrows PortalException, SystemException {\n\n\t\tJournalArticle article =\n\t\t\tJournalArticleLocalServiceUtil.getLatestArticle(\n\t\t\t\ttrashEntry.getClassPK());\n\n\t\tString originalTitle = trashEntry.getTypeSettingsProperty(\"title\");\n\n\t\tif (Validator.isNotNull(newName)) {\n\t\t\toriginalTitle = newName;\n\t\t}\n\n\t\tJournalArticleResource articleResource =\n\t\t\tJournalArticleResourceLocalServiceUtil.fetchArticleResource(\n\t\t\t\tarticle.getGroupId(), originalTitle);\n\n\t\tif (articleResource != null) {\n\t\t\tDuplicateEntryException dee = new DuplicateEntryException();\n\n\t\t\tJournalArticle duplicateArticle =\n\t\t\t\tJournalArticleLocalServiceUtil.getArticle(\n\t\t\t\t\tarticleResource.getGroupId(), originalTitle);\n\n\t\t\tdee.setDuplicateEntryId(duplicateArticle.getResourcePrimKey());\n\t\t\tdee.setOldName(duplicateArticle.getArticleId());\n\t\t\tdee.setTrashEntryId(trashEntry.getEntryId());\n\n\t\t\tthrow dee;\n\t\t}\n\t}","id":18539,"modified_method":"@Override\n\tpublic void checkDuplicateTrashEntry(\n\t\t\tTrashEntry trashEntry, long containerModelId, String newName)\n\t\tthrows PortalException, SystemException {\n\n\t\tcheckDuplicate(\n\t\t\ttrashEntry.getClassPK(), trashEntry.getEntryId(), containerModelId,\n\t\t\ttrashEntry.getTypeSettingsProperty(\"title\"), newName);\n\t}","commit_id":"0c8475c80f1b059191651b22fe4c1be5ed8512de","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void checkDuplicateTrashEntry(\n\t\t\tTrashEntry trashEntry, long containerModelId, String newName)\n\t\tthrows PortalException, SystemException {\n\n\t\tJournalFolder folder = JournalFolderLocalServiceUtil.getFolder(\n\t\t\ttrashEntry.getClassPK());\n\n\t\tString originalTitle = trashEntry.getTypeSettingsProperty(\"title\");\n\n\t\tif (Validator.isNotNull(newName)) {\n\t\t\toriginalTitle = newName;\n\t\t}\n\n\t\tJournalFolder duplicateFolder =\n\t\t\tJournalFolderLocalServiceUtil.fetchFolder(\n\t\t\t\tfolder.getGroupId(), folder.getParentFolderId(), originalTitle);\n\n\t\tif (duplicateFolder != null) {\n\t\t\tDuplicateEntryException dee = new DuplicateEntryException();\n\n\t\t\tdee.setDuplicateEntryId(duplicateFolder.getFolderId());\n\t\t\tdee.setOldName(duplicateFolder.getName());\n\t\t\tdee.setTrashEntryId(trashEntry.getEntryId());\n\n\t\t\tthrow dee;\n\t\t}\n\t}","id":18540,"modified_method":"@Override\n\tpublic void checkDuplicateTrashEntry(\n\t\t\tTrashEntry trashEntry, long containerModelId, String newName)\n\t\tthrows PortalException, SystemException {\n\n\t\tcheckDuplicate(\n\t\t\ttrashEntry.getClassPK(), trashEntry.getEntryId(), containerModelId,\n\t\t\ttrashEntry.getTypeSettingsProperty(\"title\"), newName);\n\t}","commit_id":"0c8475c80f1b059191651b22fe4c1be5ed8512de","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static void deleteFromFs(final MasterProcedureEnv env,\n      final TableName tableName, final List<HRegionInfo> regions,\n      final boolean archive) throws IOException {\n    final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();\n    final FileSystem fs = mfs.getFileSystem();\n    final Path tempdir = mfs.getTempDir();\n\n    final Path tableDir = FSUtils.getTableDir(mfs.getRootDir(), tableName);\n    final Path tempTableDir = FSUtils.getTableDir(tempdir, tableName);\n\n    if (fs.exists(tableDir)) {\n      // Ensure temp exists\n      if (!fs.exists(tempdir) && !fs.mkdirs(tempdir)) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Ensure parent exists\n      if (!fs.exists(tempTableDir.getParent()) && !fs.mkdirs(tempTableDir.getParent())) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Move the table in /hbase/.tmp\n      if (!fs.rename(tableDir, tempTableDir)) {\n        if (fs.exists(tempTableDir)) {\n          // TODO\n          // what's in this dir? something old? probably something manual from the user...\n          // let's get rid of this stuff...\n          FileStatus[] files = fs.listStatus(tempdir);\n          if (files != null && files.length > 0) {\n            for (int i = 0; i < files.length; ++i) {\n              if (!files[i].isDir()) continue;\n              HFileArchiver.archiveRegion(fs, mfs.getRootDir(), tempTableDir, files[i].getPath());\n            }\n          }\n          fs.delete(tempdir, true);\n        }\n        throw new IOException(\"Unable to move '\" + tableDir + \"' to temp '\" + tempTableDir + \"'\");\n      }\n    }\n\n    // Archive regions from FS (temp directory)\n    if (archive) {\n      for (HRegionInfo hri : regions) {\n        LOG.debug(\"Archiving region \" + hri.getRegionNameAsString() + \" from FS\");\n        HFileArchiver.archiveRegion(fs, mfs.getRootDir(),\n            tempTableDir, HRegion.getRegionDir(tempTableDir, hri.getEncodedName()));\n      }\n      LOG.debug(\"Table '\" + tableName + \"' archived!\");\n    }\n\n    // Archive the mob data if there is a mob-enabled column\n    HTableDescriptor htd = env.getMasterServices().getTableDescriptors().get(tableName);\n    boolean hasMob = MobUtils.hasMobColumns(htd);\n    Path mobTableDir = null;\n    if (hasMob) {\n      // Archive mob data\n      mobTableDir = FSUtils.getTableDir(new Path(mfs.getRootDir(), MobConstants.MOB_DIR_NAME),\n              tableName);\n      Path regionDir =\n              new Path(mobTableDir, MobUtils.getMobRegionInfo(tableName).getEncodedName());\n      if (fs.exists(regionDir)) {\n        HFileArchiver.archiveRegion(fs, mfs.getRootDir(), mobTableDir, regionDir);\n      }\n    }\n\n    // Delete table directory from FS (temp directory)\n    if (!fs.delete(tempTableDir, true) && fs.exists(tempTableDir)) {\n      throw new IOException(\"Couldn't delete \" + tempTableDir);\n    }\n\n    // Delete the table directory where the mob files are saved\n    if (hasMob && mobTableDir != null && fs.exists(mobTableDir)) {\n      if (!fs.delete(mobTableDir, true)) {\n        throw new IOException(\"Couldn't delete mob dir \" + mobTableDir);\n      }\n    }\n  }","id":18541,"modified_method":"protected static void deleteFromFs(final MasterProcedureEnv env,\n      final TableName tableName, final List<HRegionInfo> regions,\n      final boolean archive) throws IOException {\n    final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();\n    final FileSystem fs = mfs.getFileSystem();\n    final Path tempdir = mfs.getTempDir();\n\n    final Path tableDir = FSUtils.getTableDir(mfs.getRootDir(), tableName);\n    final Path tempTableDir = FSUtils.getTableDir(tempdir, tableName);\n\n    if (fs.exists(tableDir)) {\n      // Ensure temp exists\n      if (!fs.exists(tempdir) && !fs.mkdirs(tempdir)) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Ensure parent exists\n      if (!fs.exists(tempTableDir.getParent()) && !fs.mkdirs(tempTableDir.getParent())) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Move the table in /hbase/.tmp\n      if (!fs.rename(tableDir, tempTableDir)) {\n        if (fs.exists(tempTableDir)) {\n          // TODO\n          // what's in this dir? something old? probably something manual from the user...\n          // let's get rid of this stuff...\n          FileStatus[] files = fs.listStatus(tempdir);\n          if (files != null && files.length > 0) {\n            for (int i = 0; i < files.length; ++i) {\n              if (!files[i].isDir()) continue;\n              HFileArchiver.archiveRegion(fs, mfs.getRootDir(), tempTableDir, files[i].getPath());\n            }\n          }\n          fs.delete(tempdir, true);\n        }\n        throw new IOException(\"Unable to move '\" + tableDir + \"' to temp '\" + tempTableDir + \"'\");\n      }\n    }\n\n    // Archive regions from FS (temp directory)\n    if (archive) {\n      for (HRegionInfo hri : regions) {\n        LOG.debug(\"Archiving region \" + hri.getRegionNameAsString() + \" from FS\");\n        HFileArchiver.archiveRegion(fs, mfs.getRootDir(),\n            tempTableDir, HRegion.getRegionDir(tempTableDir, hri.getEncodedName()));\n      }\n      LOG.debug(\"Table '\" + tableName + \"' archived!\");\n    }\n\n    // Archive mob data\n    Path mobTableDir = FSUtils.getTableDir(new Path(mfs.getRootDir(), MobConstants.MOB_DIR_NAME),\n            tableName);\n    Path regionDir =\n            new Path(mobTableDir, MobUtils.getMobRegionInfo(tableName).getEncodedName());\n    if (fs.exists(regionDir)) {\n      HFileArchiver.archiveRegion(fs, mfs.getRootDir(), mobTableDir, regionDir);\n    }\n\n    // Delete table directory from FS (temp directory)\n    if (!fs.delete(tempTableDir, true) && fs.exists(tempTableDir)) {\n      throw new IOException(\"Couldn't delete \" + tempTableDir);\n    }\n\n    // Delete the table directory where the mob files are saved\n    if (mobTableDir != null && fs.exists(mobTableDir)) {\n      if (!fs.delete(mobTableDir, true)) {\n        throw new IOException(\"Couldn't delete mob dir \" + mobTableDir);\n      }\n    }\n  }","commit_id":"03e4712f0ca08d57586b3fc4d93cf02c999515d8","url":"https://github.com/apache/hbase"},{"original_method":"@Test(timeout=90000)\n  public void testRollbackAndDoubleExecution() throws Exception {\n    final TableName tableName = TableName.valueOf(\"testRollbackAndDoubleExecution\");\n\n    // create the table\n    final ProcedureExecutor<MasterProcedureEnv> procExec = getMasterProcedureExecutor();\n    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec, true);\n\n    // Start the Create procedure && kill the executor\n    final byte[][] splitKeys = new byte[][] {\n      Bytes.toBytes(\"a\"), Bytes.toBytes(\"b\"), Bytes.toBytes(\"c\")\n    };\n    HTableDescriptor htd = MasterProcedureTestingUtility.createHTD(tableName, \"f1\", \"f2\");\n    htd.setRegionReplication(3);\n    HRegionInfo[] regions = ModifyRegionUtils.createHRegionInfos(htd, splitKeys);\n    long procId = procExec.submitProcedure(\n      new CreateTableProcedure(procExec.getEnvironment(), htd, regions), nonceGroup, nonce);\n\n    // NOTE: the 4 (number of CreateTableState steps) is hardcoded,\n    //       so you have to look at this test at least once when you add a new step.\n    MasterProcedureTestingUtility.testRollbackAndDoubleExecution(\n        procExec, procId, 4, CreateTableState.values());\n\n    MasterProcedureTestingUtility.validateTableDeletion(\n      UTIL.getHBaseCluster().getMaster(), tableName, regions, \"f1\", \"f2\");\n\n    // are we able to create the table after a rollback?\n    resetProcExecutorTestingKillFlag();\n    testSimpleCreate(tableName, splitKeys);\n  }","id":18542,"modified_method":"@Test(timeout=90000)\n  public void testRollbackAndDoubleExecution() throws Exception {\n    final TableName tableName = TableName.valueOf(\"testRollbackAndDoubleExecution\");\n    testRollbackAndDoubleExecution(MasterProcedureTestingUtility.createHTD(tableName, \"f1\", \"f2\"));\n  }","commit_id":"03e4712f0ca08d57586b3fc4d93cf02c999515d8","url":"https://github.com/apache/hbase"},{"original_method":"protected static void deleteFromFs(final MasterProcedureEnv env,\n      final TableName tableName, final List<HRegionInfo> regions,\n      final boolean archive) throws IOException {\n    final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();\n    final FileSystem fs = mfs.getFileSystem();\n    final Path tempdir = mfs.getTempDir();\n\n    final Path tableDir = FSUtils.getTableDir(mfs.getRootDir(), tableName);\n    final Path tempTableDir = FSUtils.getTableDir(tempdir, tableName);\n\n    if (fs.exists(tableDir)) {\n      // Ensure temp exists\n      if (!fs.exists(tempdir) && !fs.mkdirs(tempdir)) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Ensure parent exists\n      if (!fs.exists(tempTableDir.getParent()) && !fs.mkdirs(tempTableDir.getParent())) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Move the table in /hbase/.tmp\n      if (!fs.rename(tableDir, tempTableDir)) {\n        if (fs.exists(tempTableDir)) {\n          // TODO\n          // what's in this dir? something old? probably something manual from the user...\n          // let's get rid of this stuff...\n          FileStatus[] files = fs.listStatus(tempdir);\n          if (files != null && files.length > 0) {\n            for (int i = 0; i < files.length; ++i) {\n              if (!files[i].isDir()) continue;\n              HFileArchiver.archiveRegion(fs, mfs.getRootDir(), tempTableDir, files[i].getPath());\n            }\n          }\n          fs.delete(tempdir, true);\n        }\n        throw new IOException(\"Unable to move '\" + tableDir + \"' to temp '\" + tempTableDir + \"'\");\n      }\n    }\n\n    // Archive regions from FS (temp directory)\n    if (archive) {\n      for (HRegionInfo hri : regions) {\n        LOG.debug(\"Archiving region \" + hri.getRegionNameAsString() + \" from FS\");\n        HFileArchiver.archiveRegion(fs, mfs.getRootDir(),\n            tempTableDir, HRegion.getRegionDir(tempTableDir, hri.getEncodedName()));\n      }\n      LOG.debug(\"Table '\" + tableName + \"' archived!\");\n    }\n\n    // Archive the mob data if there is a mob-enabled column\n    HTableDescriptor htd = env.getMasterServices().getTableDescriptors().get(tableName);\n    boolean hasMob = MobUtils.hasMobColumns(htd);\n    Path mobTableDir = null;\n    if (hasMob) {\n      // Archive mob data\n      mobTableDir = FSUtils.getTableDir(new Path(mfs.getRootDir(), MobConstants.MOB_DIR_NAME),\n              tableName);\n      Path regionDir =\n              new Path(mobTableDir, MobUtils.getMobRegionInfo(tableName).getEncodedName());\n      if (fs.exists(regionDir)) {\n        HFileArchiver.archiveRegion(fs, mfs.getRootDir(), mobTableDir, regionDir);\n      }\n    }\n\n    // Delete table directory from FS (temp directory)\n    if (!fs.delete(tempTableDir, true) && fs.exists(tempTableDir)) {\n      throw new IOException(\"Couldn't delete \" + tempTableDir);\n    }\n\n    // Delete the table directory where the mob files are saved\n    if (hasMob && mobTableDir != null && fs.exists(mobTableDir)) {\n      if (!fs.delete(mobTableDir, true)) {\n        throw new IOException(\"Couldn't delete mob dir \" + mobTableDir);\n      }\n    }\n  }","id":18543,"modified_method":"protected static void deleteFromFs(final MasterProcedureEnv env,\n      final TableName tableName, final List<HRegionInfo> regions,\n      final boolean archive) throws IOException {\n    final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();\n    final FileSystem fs = mfs.getFileSystem();\n    final Path tempdir = mfs.getTempDir();\n\n    final Path tableDir = FSUtils.getTableDir(mfs.getRootDir(), tableName);\n    final Path tempTableDir = FSUtils.getTableDir(tempdir, tableName);\n\n    if (fs.exists(tableDir)) {\n      // Ensure temp exists\n      if (!fs.exists(tempdir) && !fs.mkdirs(tempdir)) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Ensure parent exists\n      if (!fs.exists(tempTableDir.getParent()) && !fs.mkdirs(tempTableDir.getParent())) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Move the table in /hbase/.tmp\n      if (!fs.rename(tableDir, tempTableDir)) {\n        if (fs.exists(tempTableDir)) {\n          // TODO\n          // what's in this dir? something old? probably something manual from the user...\n          // let's get rid of this stuff...\n          FileStatus[] files = fs.listStatus(tempdir);\n          if (files != null && files.length > 0) {\n            for (int i = 0; i < files.length; ++i) {\n              if (!files[i].isDir()) continue;\n              HFileArchiver.archiveRegion(fs, mfs.getRootDir(), tempTableDir, files[i].getPath());\n            }\n          }\n          fs.delete(tempdir, true);\n        }\n        throw new IOException(\"Unable to move '\" + tableDir + \"' to temp '\" + tempTableDir + \"'\");\n      }\n    }\n\n    // Archive regions from FS (temp directory)\n    if (archive) {\n      for (HRegionInfo hri : regions) {\n        LOG.debug(\"Archiving region \" + hri.getRegionNameAsString() + \" from FS\");\n        HFileArchiver.archiveRegion(fs, mfs.getRootDir(),\n            tempTableDir, HRegion.getRegionDir(tempTableDir, hri.getEncodedName()));\n      }\n      LOG.debug(\"Table '\" + tableName + \"' archived!\");\n    }\n\n    // Archive mob data\n    Path mobTableDir = FSUtils.getTableDir(new Path(mfs.getRootDir(), MobConstants.MOB_DIR_NAME),\n            tableName);\n    Path regionDir =\n            new Path(mobTableDir, MobUtils.getMobRegionInfo(tableName).getEncodedName());\n    if (fs.exists(regionDir)) {\n      HFileArchiver.archiveRegion(fs, mfs.getRootDir(), mobTableDir, regionDir);\n    }\n\n    // Delete table directory from FS (temp directory)\n    if (!fs.delete(tempTableDir, true) && fs.exists(tempTableDir)) {\n      throw new IOException(\"Couldn't delete \" + tempTableDir);\n    }\n\n    // Delete the table directory where the mob files are saved\n    if (mobTableDir != null && fs.exists(mobTableDir)) {\n      if (!fs.delete(mobTableDir, true)) {\n        throw new IOException(\"Couldn't delete mob dir \" + mobTableDir);\n      }\n    }\n  }","commit_id":"c6b8e6f1ac4aebb996d793b1cae0a95dd343db92","url":"https://github.com/apache/hbase"},{"original_method":"@Test(timeout=90000)\n  public void testRollbackAndDoubleExecution() throws Exception {\n    final TableName tableName = TableName.valueOf(\"testRollbackAndDoubleExecution\");\n\n    // create the table\n    final ProcedureExecutor<MasterProcedureEnv> procExec = getMasterProcedureExecutor();\n    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec, true);\n\n    // Start the Create procedure && kill the executor\n    final byte[][] splitKeys = new byte[][] {\n      Bytes.toBytes(\"a\"), Bytes.toBytes(\"b\"), Bytes.toBytes(\"c\")\n    };\n    HTableDescriptor htd = MasterProcedureTestingUtility.createHTD(tableName, \"f1\", \"f2\");\n    htd.setRegionReplication(3);\n    HRegionInfo[] regions = ModifyRegionUtils.createHRegionInfos(htd, splitKeys);\n    long procId = procExec.submitProcedure(\n      new CreateTableProcedure(procExec.getEnvironment(), htd, regions), nonceGroup, nonce);\n\n    // NOTE: the 4 (number of CreateTableState steps) is hardcoded,\n    //       so you have to look at this test at least once when you add a new step.\n    MasterProcedureTestingUtility.testRollbackAndDoubleExecution(\n        procExec, procId, 4, CreateTableState.values());\n\n    MasterProcedureTestingUtility.validateTableDeletion(\n      UTIL.getHBaseCluster().getMaster(), tableName, regions, \"f1\", \"f2\");\n\n    // are we able to create the table after a rollback?\n    resetProcExecutorTestingKillFlag();\n    testSimpleCreate(tableName, splitKeys);\n  }","id":18544,"modified_method":"@Test(timeout=90000)\n  public void testRollbackAndDoubleExecution() throws Exception {\n    final TableName tableName = TableName.valueOf(\"testRollbackAndDoubleExecution\");\n    testRollbackAndDoubleExecution(MasterProcedureTestingUtility.createHTD(tableName, \"f1\", \"f2\"));\n  }","commit_id":"c6b8e6f1ac4aebb996d793b1cae0a95dd343db92","url":"https://github.com/apache/hbase"},{"original_method":"protected static void deleteFromFs(final MasterProcedureEnv env,\n      final TableName tableName, final List<HRegionInfo> regions,\n      final boolean archive) throws IOException {\n    final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();\n    final FileSystem fs = mfs.getFileSystem();\n    final Path tempdir = mfs.getTempDir();\n\n    final Path tableDir = FSUtils.getTableDir(mfs.getRootDir(), tableName);\n    final Path tempTableDir = FSUtils.getTableDir(tempdir, tableName);\n\n    if (fs.exists(tableDir)) {\n      // Ensure temp exists\n      if (!fs.exists(tempdir) && !fs.mkdirs(tempdir)) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Ensure parent exists\n      if (!fs.exists(tempTableDir.getParent()) && !fs.mkdirs(tempTableDir.getParent())) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Move the table in /hbase/.tmp\n      if (!fs.rename(tableDir, tempTableDir)) {\n        if (fs.exists(tempTableDir)) {\n          // TODO\n          // what's in this dir? something old? probably something manual from the user...\n          // let's get rid of this stuff...\n          FileStatus[] files = fs.listStatus(tempdir);\n          if (files != null && files.length > 0) {\n            for (int i = 0; i < files.length; ++i) {\n              if (!files[i].isDir()) continue;\n              HFileArchiver.archiveRegion(fs, mfs.getRootDir(), tempTableDir, files[i].getPath());\n            }\n          }\n          fs.delete(tempdir, true);\n        }\n        throw new IOException(\"Unable to move '\" + tableDir + \"' to temp '\" + tempTableDir + \"'\");\n      }\n    }\n\n    // Archive regions from FS (temp directory)\n    if (archive) {\n      for (HRegionInfo hri : regions) {\n        LOG.debug(\"Archiving region \" + hri.getRegionNameAsString() + \" from FS\");\n        HFileArchiver.archiveRegion(fs, mfs.getRootDir(),\n            tempTableDir, HRegion.getRegionDir(tempTableDir, hri.getEncodedName()));\n      }\n      LOG.debug(\"Table '\" + tableName + \"' archived!\");\n    }\n\n    // Archive mob data\n    Path mobTableDir = FSUtils.getTableDir(new Path(mfs.getRootDir(), MobConstants.MOB_DIR_NAME),\n            tableName);\n    Path regionDir =\n            new Path(mobTableDir, MobUtils.getMobRegionInfo(tableName).getEncodedName());\n    if (fs.exists(regionDir)) {\n      HFileArchiver.archiveRegion(fs, mfs.getRootDir(), mobTableDir, regionDir);\n    }\n\n    // Delete table directory from FS (temp directory)\n    if (!fs.delete(tempTableDir, true) && fs.exists(tempTableDir)) {\n      throw new IOException(\"Couldn't delete \" + tempTableDir);\n    }\n\n    // Delete the table directory where the mob files are saved\n    if (mobTableDir != null && fs.exists(mobTableDir)) {\n      if (!fs.delete(mobTableDir, true)) {\n        throw new IOException(\"Couldn't delete mob dir \" + mobTableDir);\n      }\n    }\n  }","id":18545,"modified_method":"protected static void deleteFromFs(final MasterProcedureEnv env,\n      final TableName tableName, final List<HRegionInfo> regions,\n      final boolean archive) throws IOException {\n    final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();\n    final FileSystem fs = mfs.getFileSystem();\n    final Path tempdir = mfs.getTempDir();\n\n    final Path tableDir = FSUtils.getTableDir(mfs.getRootDir(), tableName);\n    final Path tempTableDir = FSUtils.getTableDir(tempdir, tableName);\n\n    if (fs.exists(tableDir)) {\n      // Ensure temp exists\n      if (!fs.exists(tempdir) && !fs.mkdirs(tempdir)) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Ensure parent exists\n      if (!fs.exists(tempTableDir.getParent()) && !fs.mkdirs(tempTableDir.getParent())) {\n        throw new IOException(\"HBase temp directory '\" + tempdir + \"' creation failure.\");\n      }\n\n      // Move the table in /hbase/.tmp\n      if (!fs.rename(tableDir, tempTableDir)) {\n        if (fs.exists(tempTableDir)) {\n          // TODO\n          // what's in this dir? something old? probably something manual from the user...\n          // let's get rid of this stuff...\n          FileStatus[] files = fs.listStatus(tempdir);\n          if (files != null && files.length > 0) {\n            for (int i = 0; i < files.length; ++i) {\n              if (!files[i].isDir()) continue;\n              HFileArchiver.archiveRegion(fs, mfs.getRootDir(), tempTableDir, files[i].getPath());\n            }\n          }\n          fs.delete(tempdir, true);\n        }\n        throw new IOException(\"Unable to move '\" + tableDir + \"' to temp '\" + tempTableDir + \"'\");\n      }\n    }\n\n    // Archive regions from FS (temp directory)\n    if (archive) {\n      for (HRegionInfo hri : regions) {\n        LOG.debug(\"Archiving region \" + hri.getRegionNameAsString() + \" from FS\");\n        HFileArchiver.archiveRegion(fs, mfs.getRootDir(),\n            tempTableDir, HRegion.getRegionDir(tempTableDir, hri.getEncodedName()));\n      }\n      LOG.debug(\"Table '\" + tableName + \"' archived!\");\n    }\n\n    // Archive the mob data if there is a mob-enabled column\n    HTableDescriptor htd = env.getMasterServices().getTableDescriptors().get(tableName);\n    boolean hasMob = MobUtils.hasMobColumns(htd);\n    Path mobTableDir = null;\n    if (hasMob) {\n      // Archive mob data\n      mobTableDir = FSUtils.getTableDir(new Path(mfs.getRootDir(), MobConstants.MOB_DIR_NAME),\n              tableName);\n      Path regionDir =\n              new Path(mobTableDir, MobUtils.getMobRegionInfo(tableName).getEncodedName());\n      if (fs.exists(regionDir)) {\n        HFileArchiver.archiveRegion(fs, mfs.getRootDir(), mobTableDir, regionDir);\n      }\n    }\n\n    // Delete table directory from FS (temp directory)\n    if (!fs.delete(tempTableDir, true) && fs.exists(tempTableDir)) {\n      throw new IOException(\"Couldn't delete \" + tempTableDir);\n    }\n\n    // Delete the table directory where the mob files are saved\n    if (hasMob && mobTableDir != null && fs.exists(mobTableDir)) {\n      if (!fs.delete(mobTableDir, true)) {\n        throw new IOException(\"Couldn't delete mob dir \" + mobTableDir);\n      }\n    }\n  }","commit_id":"35a7b56e530f3e4a12f1968df5aee9d3b63815bb","url":"https://github.com/apache/hbase"},{"original_method":"@Test(timeout=90000)\n  public void testRollbackAndDoubleExecution() throws Exception {\n    final TableName tableName = TableName.valueOf(\"testRollbackAndDoubleExecution\");\n    testRollbackAndDoubleExecution(MasterProcedureTestingUtility.createHTD(tableName, \"f1\", \"f2\"));\n  }","id":18546,"modified_method":"@Test(timeout=90000)\n  public void testRollbackAndDoubleExecution() throws Exception {\n    final TableName tableName = TableName.valueOf(\"testRollbackAndDoubleExecution\");\n\n    // create the table\n    final ProcedureExecutor<MasterProcedureEnv> procExec = getMasterProcedureExecutor();\n    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec, true);\n\n    // Start the Create procedure && kill the executor\n    final byte[][] splitKeys = new byte[][] {\n      Bytes.toBytes(\"a\"), Bytes.toBytes(\"b\"), Bytes.toBytes(\"c\")\n    };\n    HTableDescriptor htd = MasterProcedureTestingUtility.createHTD(tableName, \"f1\", \"f2\");\n    htd.setRegionReplication(3);\n    HRegionInfo[] regions = ModifyRegionUtils.createHRegionInfos(htd, splitKeys);\n    long procId = procExec.submitProcedure(\n      new CreateTableProcedure(procExec.getEnvironment(), htd, regions), nonceGroup, nonce);\n\n    // NOTE: the 4 (number of CreateTableState steps) is hardcoded,\n    //       so you have to look at this test at least once when you add a new step.\n    MasterProcedureTestingUtility.testRollbackAndDoubleExecution(\n        procExec, procId, 4, CreateTableState.values());\n\n    MasterProcedureTestingUtility.validateTableDeletion(\n      UTIL.getHBaseCluster().getMaster(), tableName, regions, \"f1\", \"f2\");\n\n    // are we able to create the table after a rollback?\n    resetProcExecutorTestingKillFlag();\n    testSimpleCreate(tableName, splitKeys);\n  }","commit_id":"35a7b56e530f3e4a12f1968df5aee9d3b63815bb","url":"https://github.com/apache/hbase"},{"original_method":"private void initRRD() {\n        Category log = ThreadCategory.getInstance(getClass());\n        \n        // Get path to RRD repository\n        m_rrdPath = JMXDataCollectionConfigFactory.getInstance().getRrdRepository();\n\n        if (m_rrdPath == null)\n            throw new RuntimeException(\n                    \"Configuration error, failed to retrieve path to RRD repository.\");\n\n        // Strip the File.separator char off of the end of the path\n\n        if (m_rrdPath.endsWith(File.separator)) {\n            m_rrdPath = m_rrdPath.substring(0,(m_rrdPath.length() - File.separator.length()));\n        }\n\n        if (log.isDebugEnabled())\n            log.debug(\"initialize: \" + serviceName + \" RRD file repository path: \" + m_rrdPath);\n\n        // If the RRD file repository directory does NOT already exist, create\n        // it.\n        //\n\n        File f = new File(m_rrdPath);\n        if (!f.isDirectory())\n            if (!f.mkdirs())\n                throw new RuntimeException(\"Unable to create RRD file repository, path: \" + m_rrdPath);\n\n        try {\n            RrdUtils.initialize();\n        } catch (RrdException e) {\n            if (log.isEnabledFor(Priority.ERROR))\n                log.error(\"initialize: Unable to initialize RrdUtils\", e);\n            throw new RuntimeException(\"Unable to initialize RrdUtils\", e);\n        }\n    }","id":18547,"modified_method":"private void initRRD() {\n        Category log = ThreadCategory.getInstance(getClass());\n\n        // Get path to RRD repository\n        m_rrdPath =\n            JMXDataCollectionConfigFactory.getInstance().getRrdRepository();\n\n        if (m_rrdPath == null) {\n            throw new RuntimeException(\"Configuration error, failed to retrieve \"\n                                       + \"path to RRD repository.\");\n        }\n\n        // Strip the File.separator char off of the end of the path\n        if (m_rrdPath.endsWith(File.separator)) {\n            m_rrdPath = m_rrdPath.substring(0,\n                                            (m_rrdPath.length()\n                                                    - File.separator.length()));\n        }\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"initialize: \" + serviceName\n                      + \" RRD file repository path: \" + m_rrdPath);\n        }\n\n        // If the RRD file repository directory does NOT already exist, create it.\n        File f = new File(m_rrdPath);\n        if (!f.isDirectory()) {\n            if (!f.mkdirs()) {\n                throw new RuntimeException(\"Unable to create RRD file \"\n                                           + \"repository, path: \" + m_rrdPath);\n            }\n        }\n\n        try {\n            RrdUtils.initialize();\n        } catch (RrdException e) {\n            log.error(\"initialize: Unable to initialize RrdUtils\", e);\n            throw new RuntimeException(\"Unable to initialize RrdUtils\", e);\n        }\n    }","commit_id":"fc52d5058887e05545ff8daf1f3d0a65ac68669b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Initialize the service collector.\n     * <\/P>\n     * \n     * <P>\n     * During initialization the JMX collector: - Initializes various\n     * configuration factories. - Verifies access to the database - Verifies\n     * access to RRD file repository - Verifies access to JNI RRD shared library -\n     * Determines if JMX to be stored for only the node'sprimary interface or\n     * for all interfaces.\n     * <\/P>\n     * \n     * @param parameters\n     *            Not currently used.\n     * \n     * @exception RuntimeException\n     *                Thrown if an unrecoverable error occurs that prevents the\n     *                plug-in from functioning.\n     *  \n     */\n\n    public void initialize(Map parameters) {\n        \n        // Log4j category\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n        \n        // Get local host name (used when generating threshold events)\n        try {            \n            m_host = InetAddress.getLocalHost().getHostName();\n        } catch (UnknownHostException e) {            \n            if (log.isEnabledFor(Priority.WARN))            \n              log.warn(\"initialize: Unable to resolve local host name.\", e);            \n            m_host = \"unresolved.host\";\n        }\n        \n        // Initialize the JMXDataCollectionConfigFactory\n        try {\n            JMXDataCollectionConfigFactory.reload();\n\n        } catch (MarshalException ex) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed to load data collection configuration\",ex);\n            throw new UndeclaredThrowableException(ex);\n        } catch (ValidationException ex) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed to load data collection configuration\",ex);\n            throw new UndeclaredThrowableException(ex);\n        } catch (IOException ex) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed to load data collection configuration\",ex);\n            throw new UndeclaredThrowableException(ex);\n        }\n\n        // Make sure we can connect to the database\n        //\n        java.sql.Connection ctest = null;\n        try {\n            DatabaseConnectionFactory.init();\n            ctest = DatabaseConnectionFactory.getInstance().getConnection();\n        } catch (IOException ie) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: IOException getting database connection\", ie);\n            throw new UndeclaredThrowableException(ie);\n        } catch (MarshalException me) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Marshall Exception getting database connection\",me);\n            throw new UndeclaredThrowableException(me);\n        } catch (ValidationException ve) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Validation Exception getting database connection\",ve);\n            throw new UndeclaredThrowableException(ve);\n        } catch (SQLException sqlE) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed getting connection to the database.\",sqlE);\n            throw new UndeclaredThrowableException(sqlE);\n        } catch (PropertyVetoException e) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed getting connection to the database.\",e);\n            throw new UndeclaredThrowableException(e);\n        } catch (ClassNotFoundException cnfE) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed loading database driver.\", cnfE);\n            throw new UndeclaredThrowableException(cnfE);\n\n        } finally {\n            if (ctest != null) {\n                try {\n                    ctest.close();\n                } catch (Throwable t) {\n                    if (log.isEnabledFor(Priority.WARN))\n                        log.warn(\"initialize: an exception occured while closing the JDBC connection\",t);\n                }\n            }\n        }\n        \n        // Save local reference to singleton instance\n        //\n        // m_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();\n\n        if (log.isDebugEnabled())\n            log.debug(\"initialize: successfully instantiated JNI interface to RRD...\");\n        return;\n    }","id":18548,"modified_method":"/**\n     * <p>\n     * Initialize the service collector.\n     * <\/p>\n     * <p>\n     * During initialization the JMX collector: - Initializes various\n     * configuration factories. - Verifies access to the database - Verifies\n     * access to RRD file repository - Verifies access to JNI RRD shared\n     * library - Determines if JMX to be stored for only the node'sprimary\n     * interface or for all interfaces.\n     * <\/p>\n     * \n     * @param parameters\n     *            Not currently used.\n     * @exception RuntimeException\n     *                Thrown if an unrecoverable error occurs that prevents\n     *                the plug-in from functioning.\n     */\n\n    public void initialize(Map parameters) {\n        // Log4j category\n        Category log = ThreadCategory.getInstance(getClass());\n\n        // Get local host name (used when generating threshold events)\n        try {\n            m_host = InetAddress.getLocalHost().getHostName();\n        } catch (UnknownHostException e) {\n            log.warn(\"initialize: Unable to resolve local host name.\", e);\n            m_host = \"unresolved.host\";\n        }\n\n        // Initialize the JMXDataCollectionConfigFactory\n        try {\n            JMXDataCollectionConfigFactory.reload();\n        } catch (MarshalException e) {\n            log.fatal(\"initialize: Failed to load data collection configuration\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        } catch (ValidationException e) {\n            log.fatal(\"initialize: Failed to load data collection configuration\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        } catch (IOException e) {\n            log.fatal(\"initialize: Failed to load data collection configuration\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        }\n\n        // Make sure we can connect to the database\n        java.sql.Connection ctest = null;\n        try {\n            DatabaseConnectionFactory.init();\n            ctest = DatabaseConnectionFactory.getInstance().getConnection();\n        } catch (IOException e) {\n            log.fatal(\"initialize: IOException getting database connection\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        } catch (MarshalException e) {\n            log.fatal(\"initialize: Marshall Exception getting database \"\n                      + \"connection\", e);\n            throw new UndeclaredThrowableException(e);\n        } catch (ValidationException e) {\n            log.fatal(\"initialize: Validation Exception getting database \"\n                      + \"connection\", e);\n            throw new UndeclaredThrowableException(e);\n        } catch (SQLException e) {\n            log.fatal(\"initialize: Failed getting connection to the database.\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        } catch (PropertyVetoException e) {\n            log.fatal(\"initialize: Failed getting connection to the database.\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        } catch (ClassNotFoundException e) {\n            log.fatal(\"initialize: Failed loading database driver.\", e);\n            throw new UndeclaredThrowableException(e);\n        } finally {\n            if (ctest != null) {\n                try {\n                    ctest.close();\n                } catch (Throwable t) {\n                    log.warn(\"initialize: an exception occured while closing the \"\n                             + \"JDBC connection\", t);\n                }\n            }\n        }\n\n        // Save local reference to singleton instance\n\n        // m_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();\n\n        log.debug(\"initialize: successfully instantiated JNI interface to RRD.\");\n        return;\n    }","commit_id":"fc52d5058887e05545ff8daf1f3d0a65ac68669b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This method is responsible for building a Capsd forceRescan event object\n     * and sending it out over the EventProxy.\n     * \n     * @param ifAddress\n     *            interface address to which this event pertains\n     * @param eventProxy\n     *            proxy over which an event may be sent to eventd\n     */\n\n    private void generateForceRescanEvent(String ifAddress, EventProxy eventProxy) {\n       \n        // Log4j category\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n        if (log.isDebugEnabled())\n            log.debug(\"generateForceRescanEvent: interface = \" + ifAddress + \" serviceName: \" + serviceName);\n\n        // create the event to be sent\n        Event newEvent = new Event();\n        newEvent.setUei(EventConstants.FORCE_RESCAN_EVENT_UEI);\n        newEvent.setSource(serviceName.toUpperCase() + \"ServiceMonitor\");\n        newEvent.setInterface(ifAddress);\n        newEvent.setService(serviceName.toUpperCase());\n\n        if (m_host != null)\n            newEvent.setHost(m_host);\n\n        newEvent.setTime(EventConstants.formatToString(new java.util.Date()));\n\n        // Send event via EventProxy\n        try {\n            eventProxy.send(newEvent);\n        } catch (Exception e) {\n            if (log.isEnabledFor(Priority.ERROR))\n                log.error(\"generateForceRescanEvent: Unable to send forceRescan event.\", e);\n        }\n    }","id":18549,"modified_method":"/**\n     * This method is responsible for building a Capsd forceRescan event object\n     * and sending it out over the EventProxy.\n     * \n     * @param ifAddress\n     *            interface address to which this event pertains\n     * @param eventProxy\n     *            proxy over which an event may be sent to eventd\n     */\n    private void generateForceRescanEvent(String ifAddress,\n            EventProxy eventProxy) {\n\n        // Log4j category\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n        if (log.isDebugEnabled()) {\n            log.debug(\"generateForceRescanEvent: interface = \" + ifAddress\n                    + \" serviceName: \" + serviceName);\n        }\n\n        // create the event to be sent\n        Event newEvent = new Event();\n        newEvent.setUei(EventConstants.FORCE_RESCAN_EVENT_UEI);\n        newEvent.setSource(serviceName.toUpperCase() + \"ServiceMonitor\");\n        newEvent.setInterface(ifAddress);\n        newEvent.setService(serviceName.toUpperCase());\n\n        if (m_host != null) {\n            newEvent.setHost(m_host);\n        }\n\n        newEvent.setTime(EventConstants.formatToString(new java.util.Date()));\n\n        // Send event via EventProxy\n        try {\n            eventProxy.send(newEvent);\n        } catch (Exception e) {\n            log.error(\"generateForceRescanEvent: Unable to send forceRescan \"\n                      + \"event.\", e);\n        }\n    }","commit_id":"fc52d5058887e05545ff8daf1f3d0a65ac68669b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Responsible for performing all necessary initialization for the specified\n     * interface in preparation for data collection.\n     * \n     * @param iface\n     *            Network interface to be prepped for collection.\n     * @param parameters\n     *            Key/value pairs associated with the package to which the\n     *            interface belongs..\n     *  \n     */\n\n    public void initialize(NetworkInterface iface, Map parameters) {\n        Category    log    = ThreadCategory.getInstance(getClass());\n        InetAddress ipAddr = (InetAddress) iface.getAddress();\n        \n        log.debug(\"initialize: \" + m_rrdPath);\n        if (m_rrdPath == null) {\n            initRRD();\n        }\n        \n        if (log.isDebugEnabled())\n            log.debug(\"initialize: InetAddress=\" + ipAddr.getHostAddress());\n        \n        // Retrieve the name of the JMX data collector\n        String collectionName = ParameterMap.getKeyedString(parameters,\"collection\", serviceName);\n\n        if (log.isDebugEnabled())\n            log.debug(\"initialize: collectionName=\" + collectionName);\n        java.sql.Connection dbConn = null;\n        try {\n            dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n        } catch (SQLException sqlE) {\n            if (log.isEnabledFor(Priority.ERROR))\n                log.error(\"initialize: Failed getting connection to the database.\",sqlE);\n            throw new UndeclaredThrowableException(sqlE);\n        }\n\n        int nodeID = -1;\n\n        // Prepare & execute the SQL statement to get the 'nodeid' from the\n        // ipInterface table 'nodeid' will be used to retrieve the node's\n        // system object id from the node table.\n        // In addition to nodeid, the interface's ifIndex\n        // fields are also retrieved.\n        //\n\n        PreparedStatement stmt = null;\n\n        try {\n\n            stmt = dbConn.prepareStatement(SQL_GET_NODEID);\n            stmt.setString(1, ipAddr.getHostAddress()); // interface address\n            ResultSet rs = stmt.executeQuery();\n\n            if (rs.next()) {\n                nodeID = rs.getInt(1);\n                if (rs.wasNull())\n                    nodeID = -1;\n            } else {\n                nodeID = -1;\n            }\n            rs.close();\n\n        } catch (SQLException sqle) {\n            if (log.isDebugEnabled())\n                log.debug(\"initialize: SQL exception!!\", sqle);\n            throw new RuntimeException(\n                    \"SQL exception while attempting to retrieve node id for interface \"\n                            + ipAddr.getHostAddress());\n        } finally {\n            try {\n                stmt.close();\n                dbConn.close();\n            } catch (Exception e) {\n                // Ignore\n            }\n        }\n\n        JMXNodeInfo nodeInfo = new JMXNodeInfo(nodeID);\n        log.debug(\"nodeInfo: \" + ipAddr.getHostAddress() + \" \" + nodeID + \" \" + iface);\n\n        // Retrieve list of MBean objects to be collected from the\n        // remote agent which are to be stored in the node-level RRD file.\n        // These objects pertain to the node itself not any individual\n        // interfaces.\n        Map attrMap = JMXDataCollectionConfigFactory.getInstance().getAttributeMap(collectionName, serviceName, ipAddr.getHostAddress());\n        nodeInfo.setAttributeMap(attrMap);\n       \n        HashMap dsList = buildDataSourceList(collectionName, attrMap);\n        nodeInfo.setDsMap(dsList);\n        nodeInfo.setMBeans(JMXDataCollectionConfigFactory.getInstance().getMBeanInfo(collectionName));\n\n        // Add the JMXNodeInfo object as an attribute of the interface\n        //\n        iface.setAttribute(NODE_INFO_KEY, nodeInfo);\n        iface.setAttribute(\"collectionName\", collectionName);\n        \n        File repos = new File(m_rrdPath + \"/\" + nodeID + \"/\" + collectionName);\n        if (!repos.exists()) {\n            repos.mkdir();\n        }\n        \n    }","id":18550,"modified_method":"/**\n     * Responsible for performing all necessary initialization for the\n     * specified interface in preparation for data collection.\n     * \n     * @param iface\n     *            Network interface to be prepped for collection.\n     * @param parameters\n     *            Key/value pairs associated with the package to which the\n     *            interface belongs..\n     */\n\n    public void initialize(NetworkInterface iface, Map parameters) {\n        Category log = ThreadCategory.getInstance(getClass());\n        InetAddress ipAddr = (InetAddress) iface.getAddress();\n\n        log.debug(\"initialize: \" + m_rrdPath);\n        if (m_rrdPath == null) {\n            initRRD();\n        }\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"initialize: InetAddress=\" + ipAddr.getHostAddress());\n        }\n\n        // Retrieve the name of the JMX data collector\n        String collectionName = ParameterMap.getKeyedString(parameters,\n                                                            \"collection\",\n                                                            serviceName);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"initialize: collectionName=\" + collectionName);\n        }\n        java.sql.Connection dbConn = null;\n        try {\n            dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n        } catch (SQLException e) {\n            log.error(\"initialize: Failed getting connection to the database.\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        }\n\n        int nodeID = -1;\n\n        /*\n         * Prepare & execute the SQL statement to get the 'nodeid' from the\n         * ipInterface table 'nodeid' will be used to retrieve the node's\n         * system object id from the node table.\n         * In addition to nodeid, the interface's ifIndex\n         * fields are also retrieved.\n         */\n        PreparedStatement stmt = null;\n\n        try {\n            stmt = dbConn.prepareStatement(SQL_GET_NODEID);\n            stmt.setString(1, ipAddr.getHostAddress()); // interface address\n            ResultSet rs = stmt.executeQuery();\n\n            if (rs.next()) {\n                nodeID = rs.getInt(1);\n                if (rs.wasNull()) {\n                    nodeID = -1;\n                }\n            } else {\n                nodeID = -1;\n            }\n            rs.close();\n        } catch (SQLException e) {\n            log.error(\"initialize: SQL exception!!\", e);\n            throw new RuntimeException(\"SQL exception while attempting to \"\n                                       + \"retrieve node id for interface \"\n                                       + ipAddr.getHostAddress());\n        } finally {\n            try {\n                stmt.close();\n                dbConn.close();\n            } catch (Exception e) {\n                // Ignore\n            }\n        }\n\n        JMXNodeInfo nodeInfo = new JMXNodeInfo(nodeID);\n        log.debug(\"nodeInfo: \" + ipAddr.getHostAddress() + \" \" + nodeID + \" \"\n                  + iface);\n\n        /*\n         * Retrieve list of MBean objects to be collected from the\n         * remote agent which are to be stored in the node-level RRD file.\n         * These objects pertain to the node itself not any individual\n         * interfaces.\n         */\n        Map attrMap =JMXDataCollectionConfigFactory.getInstance().getAttributeMap(\n                                                                                   collectionName,\n                                                                                   serviceName,\n                                                                                   ipAddr.getHostAddress());\n        nodeInfo.setAttributeMap(attrMap);\n\n        HashMap dsList = buildDataSourceList(collectionName, attrMap);\n        nodeInfo.setDsMap(dsList);\n        nodeInfo.setMBeans(JMXDataCollectionConfigFactory.getInstance().getMBeanInfo(\n                                                                                     collectionName));\n\n        // Add the JMXNodeInfo object as an attribute of the interface\n        iface.setAttribute(NODE_INFO_KEY, nodeInfo);\n        iface.setAttribute(\"collectionName\", collectionName);\n\n        File repos = new File(m_rrdPath + \"/\" + nodeID + \"/\" + collectionName);\n        if (!repos.exists()) {\n            repos.mkdir();\n        }\n\n    }","commit_id":"fc52d5058887e05545ff8daf1f3d0a65ac68669b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This method is responsible for building an RRDTool style 'update' command\n     * which is issued via the RRD JNI interface in order to push the latest\n     * JMX-collected values into the interface's RRD database.\n     * \n     * @param collectionName\n     *            JMX data Collection name from 'jmx-datacollection-config.xml'\n     * @param iface\n     *            NetworkInterface object of the interface currently being\n     *            polled\n     * @param nodeCollector\n     *            Node level MBean data collected via JMX for the polled\n     *            interface\n     * @param ifCollector\n     *            Interface level MBean data collected via JMX for the polled\n     *            interface\n     * \n     * @exception RuntimeException\n     *                Thrown if the data source list for the interface is null.\n     */\n\n    private boolean updateRRDs(String           objectName,\n    \t\t                      String           collectionName, \n                               NetworkInterface iface,\n                               AttributeList    attributeList,\n                               String           collectionDir,\n                               String           keyField,\n                               String           substitutions) {\n\n        Category log = ThreadCategory.getInstance(getClass());\n        InetAddress ipaddr = (InetAddress) iface.getAddress();\n\n        JMXNodeInfo nodeInfo = (JMXNodeInfo) iface.getAttribute(NODE_INFO_KEY);\n\n        boolean rrdError = false;\n        \n        // -----------------------------------------------------------\n        // Node data\n        // -----------------------------------------------------------\n\n        log.debug(\"updateRRDs: processing node-level collection...\");\n\n        // Build path to node RRD repository. createRRD() will make the\n        // appropriate directories if they do not already exist.\n        //\n\n        String nodeRepository = m_rrdPath + File.separator + String.valueOf(nodeInfo.getNodeId());\n        \n        // Iterate over the node datasource list and issue RRD update\n        // commands to update each datasource which has a corresponding\n        // value in the collected JMX data\n        //\n        HashMap dsMap = nodeInfo.getDsMap();\n\n        try {\n            for (int i = 0; i < attributeList.size(); i++) {\n                Attribute attribute = (Attribute) attributeList.get(i);\n                RRDDataSource ds = (RRDDataSource) dsMap.get(objectName + \"|\" + attribute.getName());\n                \n                if (keyField == null) {\n                    try {\n                        createRRD(collectionName, ipaddr, nodeRepository, ds, collectionDir, null);\n                        RrdUtils.updateRRD(ipaddr.getHostAddress(), \n                                           nodeRepository + \"/\" + collectionDir, \n                                           ds.getName(), \n                                           \"\" + attribute.getValue());\n                    } catch (Throwable e1) {\n                    }\n                }\n                else {\n                    try {\n                        String key = fixKey(keyField, ds.getName(), substitutions);\n                        createRRD(collectionName, ipaddr, nodeRepository, ds, collectionDir, key);\n                        if (key.equals(\"\")) {\n                            RrdUtils.updateRRD(ipaddr.getHostAddress(), \n                                    nodeRepository + \"/\" + collectionDir, \n                                    ds.getName(), \n                                    \"\" + attribute.getValue());\n                        }\n                        else {\n                            RrdUtils.updateRRD(ipaddr.getHostAddress(), \n                                    nodeRepository + \"/\" + collectionDir, \n                                    key + \"_\" + ds.getName(), \n                                    \"\" + attribute.getValue());\n                        }\n                    } catch (Throwable e1) {\n                        //log.debug(\"Error updating: \" ds.getName());\n                    }\n                }\n                try {\n                    Thread.sleep(1100);\n                }catch (Exception te) {\n                    \n                }\n            }\n        } catch (Throwable e) {\n            //log.error(\"RRD Error\", e);\n            rrdError = true;\n        }\n        return rrdError;\n    }","id":18551,"modified_method":"/**\n     * This method is responsible for building an RRDTool style 'update'\n     * command which is issued via the RRD JNI interface in order to push the\n     * latest JMX-collected values into the interface's RRD database.\n     * \n     * @param collectionName\n     *            JMX data Collection name from\n     *            'jmx-datacollection-config.xml'\n     * @param iface\n     *            NetworkInterface object of the interface currently being\n     *            polled\n     * @param nodeCollector\n     *            Node level MBean data collected via JMX for the polled\n     *            interface\n     * @param ifCollector\n     *            Interface level MBean data collected via JMX for the polled\n     *            interface\n     * @exception RuntimeException\n     *                Thrown if the data source list for the interface is\n     *                null.\n     */\n\n    private boolean updateRRDs(String objectName, String collectionName,\n            NetworkInterface iface, AttributeList attributeList,\n            String collectionDir, String keyField, String substitutions) {\n\n        Category log = ThreadCategory.getInstance(getClass());\n        InetAddress ipaddr = (InetAddress) iface.getAddress();\n\n        JMXNodeInfo nodeInfo = (JMXNodeInfo) iface.getAttribute(NODE_INFO_KEY);\n\n        boolean rrdError = false;\n\n        /*\n         * -----------------------------------------------------------\n         * Node data\n         * -----------------------------------------------------------\n         */\n        log.debug(\"updateRRDs: processing node-level collection...\");\n\n        /*\n         * Build path to node RRD repository. createRRD() will make the\n         * appropriate directories if they do not already exist.\n         */\n        String nodeRepository = m_rrdPath + File.separator\n                + String.valueOf(nodeInfo.getNodeId());\n\n        /*\n         * Iterate over the node datasource list and issue RRD update\n         * commands to update each datasource which has a corresponding\n         * value in the collected JMX data\n         */\n        HashMap dsMap = nodeInfo.getDsMap();\n\n        try {\n            for (int i = 0; i < attributeList.size(); i++) {\n                Attribute attribute = (Attribute) attributeList.get(i);\n                RRDDataSource ds = (RRDDataSource) dsMap.get(objectName + \"|\"\n                        + attribute.getName());\n\n                if (keyField == null) {\n                    try {\n                        createRRD(collectionName, ipaddr, nodeRepository, ds,\n                                  collectionDir, null);\n                        RrdUtils.updateRRD(ipaddr.getHostAddress(),\n                                           nodeRepository + \"/\" + collectionDir,\n                                           ds.getName(),\n                                           attribute.getValue().toString());\n                    } catch (Throwable e1) {\n                    }\n                } else {\n                    try {\n                        String key = fixKey(keyField, ds.getName(),\n                                            substitutions);\n                        createRRD(collectionName, ipaddr, nodeRepository, ds,\n                                  collectionDir, key);\n                        if (key.equals(\"\")) {\n                            RrdUtils.updateRRD(ipaddr.getHostAddress(),\n                                               nodeRepository + \"/\"\n                                                       + collectionDir,\n                                               ds.getName(), \"\"\n                                                       + attribute.getValue());\n                        } else {\n                            RrdUtils.updateRRD(ipaddr.getHostAddress(),\n                                               nodeRepository + \"/\"\n                                                       + collectionDir, key\n                                                       + \"_\" + ds.getName(),\n                                               \"\" + attribute.getValue());\n                        }\n                    } catch (Throwable e1) {\n                        // log.debug(\"Error updating: \" ds.getName());\n                    }\n                }\n                try {\n                    Thread.sleep(1100);\n                } catch (Exception te) {\n\n                }\n            }\n        } catch (Throwable e) {\n            // log.error(\"RRD Error\", e);\n            rrdError = true;\n        }\n        return rrdError;\n    }","commit_id":"fc52d5058887e05545ff8daf1f3d0a65ac68669b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Perform data collection.\n     * \n     * @param iface\n     *            Network interface to be data collected\n     * @param eproxy\n     *            Eventy proxy for sending events.\n     * @param parameters\n     *            Key/value pairs from the package to which the interface\n     *            belongs.\n     */\n\n    public int collect(NetworkInterface iface, EventProxy eproxy, Map map) {\n        Category    log            = ThreadCategory.getInstance(getClass());\n        InetAddress ipaddr         = (InetAddress) iface.getAddress();\n        String      collectionName = (String) iface.getAttribute(\"collectionName\");\n        JMXNodeInfo nodeInfo       = (JMXNodeInfo) iface.getAttribute(NODE_INFO_KEY);\n        HashMap     mbeans         = nodeInfo.getMBeans();\n        String      collDir        = serviceName;\n        \n        ConnectionWrapper connection = null;\n\n        log.debug(\"collect \" + ipaddr.getHostAddress() + \" \" + nodeInfo.getNodeId() + \" \" + m_rrdPath);\n\n        try {\n\n            String rrdPath      = ParameterMap.getKeyedString( map, \"rrdRepository\",  null);\n            int    retry        = ParameterMap.getKeyedInteger(map, \"retry\",          3);\n            String port         = ParameterMap.getKeyedString( map, \"port\",           null);\n            String friendlyName = ParameterMap.getKeyedString( map, \"friendly-name\",  port);\n            \n            connection = getMBeanServerConnection(map, ipaddr);\n            \n            if (connection == null) {\n                return COLLECTION_FAILED;\n            }\n            \n            MBeanServerConnection mbeanServer = connection.getMBeanServer();\n            \n//            int serviceStatus = COLLECTION_FAILED;\n            \n            if (useFriendlyName) {\n                collDir = friendlyName;\n            }\n\n            for (int attempts = 0; attempts <= retry; attempts++) {\n                try {\n\n                    /*\n                     * Iterate over the mbeans, for each object name perform a\n                     * getAttributes, the update the RRD.\n                     */\n\n                    for (Iterator iter = mbeans.values().iterator(); iter.hasNext();) {\n                        BeanInfo beanInfo    = (BeanInfo) iter.next();\n                        String   objectName  = beanInfo.getObjectName();\n                        String   excludeList = beanInfo.getExcludes();\n                        \n                        String[] attrNames = beanInfo.getAttributeNames();\n                        \n                        if (objectName.indexOf(\"*\") == -1) {\n                            log.debug(serviceName + \" Collector - getAttributes: \" + objectName + \" #attributes: \" + attrNames.length);\n \n                            try {\n                                ObjectName oName = new ObjectName(objectName);\n                                if (mbeanServer.isRegistered(oName)) {\n                                   AttributeList attrList = (AttributeList) mbeanServer.getAttributes(oName,attrNames);\n                                   updateRRDs(objectName, collectionName, iface, attrList, collDir, null, null);\n                                }\n                            } catch (InstanceNotFoundException e2) {\n                                log.error(\"Unable to retrieve attributes from \" + objectName);\n                            }\n                        }\n                        else {\n                        \t/*\n                        \t * This section is for ObjectNames that use the '*' wildcard\n                        \t */\n                            Set mbeanSet = mbeanServer.queryNames(new ObjectName(objectName),null);\n                            for (Iterator objectNameIter = mbeanSet.iterator(); objectNameIter.hasNext();) {\n                                ObjectName oName = (ObjectName)objectNameIter.next();\n                                log.debug(serviceName + \" Collector - getAttributesWC: \" + oName + \" #attributes: \" + attrNames.length + \" \" + beanInfo.getKeyAlias());\n  \n                                try {\n                                    if (excludeList == null) {\n                                        /*\n                                         * the exclude list doesn't apply\n                                         */\n                                        if (mbeanServer.isRegistered(oName)) {\n                                            AttributeList attrList = (AttributeList) mbeanServer.getAttributes(oName, attrNames);\n                                            updateRRDs(objectName,\n                                            \t\t    collectionName, \n                                                       iface, \n                                                       attrList, \n                                                       collDir,\n                                                       oName.getKeyProperty(beanInfo.getKeyField()), \n                                                       beanInfo.getKeyAlias());\n                                        }\n                                    }\n                                    else {\n                                        /*\n                                         * filter out calls if the key field matches an entry in the exclude list\n                                         */\n                                        String keyName = oName.getKeyProperty(beanInfo.getKeyField());\n                                        boolean found = false;\n                                        StringTokenizer st = new StringTokenizer(excludeList, \",\");\n                                        while (st.hasMoreTokens()) {\n                                            if (keyName.equals(st.nextToken())) {\n                                                found = true;\n                                                break;\n                                            }\n                                        }\n                                        if (!found) {\n                                            if (mbeanServer.isRegistered(oName)) {\n                                                AttributeList attrList = (AttributeList) mbeanServer.getAttributes(oName, attrNames);\n                                                updateRRDs(objectName,\n                                                \t\t    collectionName, \n                                                           iface, \n                                                           attrList, \n                                                           collDir,\n                                                           oName.getKeyProperty(beanInfo.getKeyField()), \n                                                           beanInfo.getKeyAlias());\n                                            }\n                                        }\n                                    }\n                                } catch (InstanceNotFoundException e2) {\n                                    log.error(\"Error retrieving attributes for \" + oName);\n                                }\n                            }\n                        }\n                        //serviceStatus = COLLECTION_SUCCEEDED;\n                    }\n                    break;\n                }\n                catch (Exception e) {\n                    e.fillInStackTrace();\n                    log.debug(serviceName + \" Collector.collect: IOException while collect address: \" + iface.getAddress(), e);\n                }\n            } // of for\n        } catch (Exception e1) {\n            log.error(\"Error getting MBeanServer\");\n       } finally {\n           if (connection != null) {\n               connection.close();\n           }\n       }\n        //\n        // return the status of the collection\n        //\n        return COLLECTION_SUCCEEDED;\n    }","id":18552,"modified_method":"/**\n     * Perform data collection.\n     * \n     * @param iface\n     *            Network interface to be data collected\n     * @param eproxy\n     *            Eventy proxy for sending events.\n     * @param parameters\n     *            Key/value pairs from the package to which the interface\n     *            belongs.\n     */\n\n    public int collect(NetworkInterface iface, EventProxy eproxy, Map map) {\n        Category log = ThreadCategory.getInstance(getClass());\n        InetAddress ipaddr = (InetAddress) iface.getAddress();\n        String collectionName = (String) iface.getAttribute(\"collectionName\");\n        JMXNodeInfo nodeInfo = (JMXNodeInfo) iface.getAttribute(NODE_INFO_KEY);\n        HashMap mbeans = nodeInfo.getMBeans();\n        String collDir = serviceName;\n\n        ConnectionWrapper connection = null;\n\n        log.debug(\"collect \" + ipaddr.getHostAddress() + \" \"\n                + nodeInfo.getNodeId() + \" \" + m_rrdPath);\n\n        try {\n            int retry = ParameterMap.getKeyedInteger(map, \"retry\", 3);\n            String port = ParameterMap.getKeyedString(map, \"port\", null);\n            String friendlyName = ParameterMap.getKeyedString(map,\n                                                              \"friendly-name\",\n                                                              port);\n\n            connection = getMBeanServerConnection(map, ipaddr);\n\n            if (connection == null) {\n                return COLLECTION_FAILED;\n            }\n\n            MBeanServerConnection mbeanServer = connection.getMBeanServer();\n\n            // int serviceStatus = COLLECTION_FAILED;\n\n            if (useFriendlyName) {\n                collDir = friendlyName;\n            }\n\n            for (int attempts = 0; attempts <= retry; attempts++) {\n                try {\n                    /*\n                     * Iterate over the mbeans, for each object name perform a\n                     * getAttributes, the update the RRD.\n                     */\n\n                    for (Iterator iter = mbeans.values().iterator(); iter.hasNext();) {\n                        BeanInfo beanInfo = (BeanInfo) iter.next();\n                        String objectName = beanInfo.getObjectName();\n                        String excludeList = beanInfo.getExcludes();\n\n                        String[] attrNames = beanInfo.getAttributeNames();\n\n                        if (objectName.indexOf(\"*\") == -1) {\n                            log.debug(serviceName\n                                    + \" Collector - getAttributes: \"\n                                    + objectName + \" #attributes: \"\n                                    + attrNames.length);\n\n                            try {\n                                ObjectName oName = new ObjectName(objectName);\n                                if (mbeanServer.isRegistered(oName)) {\n                                    AttributeList attrList = (AttributeList)\n                                        mbeanServer.getAttributes(oName,\n                                                                  attrNames);\n                                    updateRRDs(objectName, collectionName,\n                                               iface, attrList, collDir,\n                                               null, null);\n                                }\n                            } catch (InstanceNotFoundException e) {\n                                log.error(\"Unable to retrieve attributes from \"\n                                        + objectName, e);\n                            }\n                        } else {\n                            /*\n                             * This section is for ObjectNames that use the\n                             * '*' wildcard\n                             */\n                            Set mbeanSet =\n                                mbeanServer.queryNames(new ObjectName(objectName),\n                                                       null);\n                            for (Iterator objectNameIter = mbeanSet.iterator();\n                                 objectNameIter.hasNext(); ) {\n                                ObjectName oName =\n                                    (ObjectName) objectNameIter.next();\n                                if (log.isDebugEnabled()) {\n                                    log.debug(serviceName\n                                              + \" Collector - getAttributesWC: \"\n                                              + oName + \" #attributes: \"\n                                              + attrNames.length + \" \"\n                                              + beanInfo.getKeyAlias());\n                                }\n\n                                try {\n                                    if (excludeList == null) {\n                                        // the exclude list doesn't apply\n                                        if (mbeanServer.isRegistered(oName)) {\n                                            AttributeList attrList =\n                                                (AttributeList)\n                                                mbeanServer.getAttributes(oName,\n                                                                          attrNames);\n                                            updateRRDs(objectName,\n                                                       collectionName,\n                                                       iface,\n                                                       attrList,\n                                                       collDir,\n                                                       oName.getKeyProperty(beanInfo.getKeyField()),\n                                                       beanInfo.getKeyAlias());\n                                        }\n                                    } else {\n                                        /*\n                                         * filter out calls if the key field\n                                         * matches an entry in the exclude\n                                         * list\n                                         */\n                                        String keyName = oName.getKeyProperty(beanInfo.getKeyField());\n                                        boolean found = false;\n                                        StringTokenizer st = new StringTokenizer(\n                                                                                 excludeList,\n                                                                                 \",\");\n                                        while (st.hasMoreTokens()) {\n                                            if (keyName.equals(st.nextToken())) {\n                                                found = true;\n                                                break;\n                                            }\n                                        }\n                                        if (!found) {\n                                            if (mbeanServer.isRegistered(oName)) {\n                                                AttributeList attrList =\n                                                    (AttributeList)\n                                                    mbeanServer.getAttributes(oName,\n                                                                              attrNames);\n                                                updateRRDs(objectName,\n                                                           collectionName,\n                                                           iface,\n                                                           attrList,\n                                                           collDir,\n                                                           oName.getKeyProperty(beanInfo.getKeyField()),\n                                                           beanInfo.getKeyAlias());\n                                            }\n                                        }\n                                    }\n                                } catch (InstanceNotFoundException e) {\n                                    log.error(\"Error retrieving attributes for \"\n                                              + oName, e);\n                                }\n                            }\n                        }\n                        // serviceStatus = COLLECTION_SUCCEEDED;\n                    }\n                    break;\n                } catch (Exception e) {\n                    e.fillInStackTrace();\n                    log.debug(serviceName\n                              + \" Collector.collect: IOException while collect \"\n                              + \"address: \" + iface.getAddress(), e);\n                }\n            } // of for\n        } catch (Exception e) {\n            log.error(\"Error getting MBeanServer\", e);\n        } finally {\n            if (connection != null) {\n                connection.close();\n            }\n        }\n        \n        // return the status of the collection\n        return COLLECTION_SUCCEEDED;\n    }","commit_id":"fc52d5058887e05545ff8daf1f3d0a65ac68669b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This method is responsible for building a list of RRDDataSource objects\n     * from the provided list of MBeanObject objects.\n     * \n     * @param collectionName\n     *            Collection name\n     * @param oidList\n     *            List of MBeanObject objects defining the oid's to be collected\n     *            via JMX.\n     * \n     * @return list of RRDDataSource objects\n     */\n\n    private HashMap buildDataSourceList(String collectionName, Map attributeMap) {\n\n        // Log4j category\n        //\n        Category log = ThreadCategory.getInstance(getClass());\n        \n        log.debug(\"buildDataSourceList - ***\");\n\n        // Retrieve the RRD expansion data source list which contains all\n        // the expansion data source's. Use this list as a basis\n        // for building a data source list for the current interface.\n        //\n\n        HashMap dsList = new HashMap();\n\n        // Loop through the MBean object list to be collected for this interface\n        // and add a corresponding RRD data source object. In this manner\n        // each interface will have RRD files create which reflect only the data\n        // sources pertinent to it.\n        //\n\n        log.debug(\"attributeMap size: \" + attributeMap.size());\n        Iterator objNameIter = attributeMap.keySet().iterator();\n        while (objNameIter.hasNext()) {\n        \t   String objectName = objNameIter.next().toString();\n        \t   \n        \t   log.debug(\"ObjectName: \" + objectName);\n        \t   \n        \t    ArrayList list = (ArrayList)attributeMap.get(objectName);\n        \t    log.debug(\"Attributes: \" + list.size());\n        \t    \n        \t    Iterator iter = list.iterator();\n        \t    while (iter.hasNext()) {\n                    Attrib attr = (Attrib) iter.next();\n                    RRDDataSource ds = null;\n\n                    // Verify that this object has an appropriate \"integer\" data type\n                    // which can be stored in an RRD database file (must map to one of\n                    // the supported RRD data source types: COUNTER or GAUGE).\n                    String ds_type = RRDDataSource.mapType(attr.getType());\n                    if (ds_type != null) {\n                        // Passed!! Create new data source instance for this MBean\n                        // object\n                        // Assign heartbeat using formula (2 * step) and hard code\n                        // min & max values to \"U\" (\"unknown\").\n                        ds = new RRDDataSource();\n                        ds.setHeartbeat(2 * JMXDataCollectionConfigFactory\n                                .getInstance().getStep(collectionName));\n                        // For completeness, adding a minval option to the variable.\n                        String ds_minval = attr.getMinval();\n                        if (ds_minval == null) {\n                            ds_minval = \"U\";\n                        }\n                        ds.setMax(ds_minval);\n\n                        // In order to handle counter wraps, we need to set a max\n                        // value for the variable.\n                        String ds_maxval = attr.getMaxval();\n                        if (ds_maxval == null) {\n                            ds_maxval = \"U\";\n                        }\n\n                        ds.setMax(ds_maxval);\n                        ds.setInstance(collectionName);\n\n                        // Truncate MBean object name/alias if it exceeds 19 char max\n                        // for\n                        // RRD data source names.\n                        String ds_name = attr.getAlias();\n                        if (ds_name.length() > MAX_DS_NAME_LENGTH) {\n                            if (log.isEnabledFor(Priority.WARN))\n                                log.warn(\"buildDataSourceList: alias '\"\n                                                + attr.getAlias()\n                                                + \"' exceeds 19 char maximum for RRD data source names, truncating.\");\n                            char[] temp = ds_name.toCharArray();\n                            ds_name = String.copyValueOf(temp, 0, MAX_DS_NAME_LENGTH);\n                        }\n                        ds.setName(ds_name);\n\n                        // Map MBean object data type to RRD data type\n                        ds.setType(ds_type);\n\n                        // Assign the data source object identifier and instance\n                        //ds.setName(attr.getName());\n                        ds.setOid(attr.getName());\n\n            //            if (log.isDebugEnabled())\n                            log.debug(\"buildDataSourceList: ds_name: \" + ds.getName()\n                                    + \" ds_oid: \" + ds.getOid() + \".\"\n                                    + ds.getInstance() + \" ds_max: \" + ds.getMax()\n                                    + \" ds_min: \" + ds.getMin());\n\n                        // Add the new data source to the list\n                        dsList.put(objectName + \"|\" + attr.getName(), ds);\n                    } else if (log.isEnabledFor(Priority.WARN)) {\n                        log.warn(\"buildDataSourceList: Data type '\"\n                                        + attr.getType()\n                                        + \"' not supported.  Only integer-type data may be stored in RRD.\");\n                        log.warn(\"buildDataSourceList: MBean object '\"\n                                + attr.getAlias()\n                                + \"' will not be mapped to RRD data source.\");\n                    }\n        \t    }\n        }\n\n        return dsList;\n    }","id":18553,"modified_method":"/**\n     * This method is responsible for building a list of RRDDataSource objects\n     * from the provided list of MBeanObject objects.\n     * \n     * @param collectionName\n     *            Collection name\n     * @param oidList\n     *            List of MBeanObject objects defining the oid's to be\n     *            collected via JMX.\n     * @return list of RRDDataSource objects\n     */\n    private HashMap buildDataSourceList(String collectionName,\n            Map attributeMap) {\n        Category log = ThreadCategory.getInstance(getClass());\n\n        log.debug(\"buildDataSourceList - ***\");\n\n        /*\n         * Retrieve the RRD expansion data source list which contains all\n         * the expansion data source's. Use this list as a basis\n         * for building a data source list for the current interface.\n         */\n        HashMap dsList = new HashMap();\n\n        /*\n         * Loop through the MBean object list to be collected for this\n         * interface and add a corresponding RRD data source object. In this\n         * manner each interface will have RRD files create which reflect only\n         * the data sources pertinent to it.\n         */\n\n        log.debug(\"attributeMap size: \" + attributeMap.size());\n        Iterator objNameIter = attributeMap.keySet().iterator();\n        while (objNameIter.hasNext()) {\n            String objectName = objNameIter.next().toString();\n\n            log.debug(\"ObjectName: \" + objectName);\n\n            ArrayList list = (ArrayList) attributeMap.get(objectName);\n            log.debug(\"Attributes: \" + list.size());\n\n            Iterator iter = list.iterator();\n            while (iter.hasNext()) {\n                Attrib attr = (Attrib) iter.next();\n                RRDDataSource ds = null;\n\n                /*\n                 * Verify that this object has an appropriate \"integer\" data\n                 * type which can be stored in an RRD database file (must map to\n                 * one of the supported RRD data source types: COUNTER or GAUGE).\n                 * */\n                String ds_type = RRDDataSource.mapType(attr.getType());\n                if (ds_type != null) {\n                    /*\n                     * Passed!! Create new data source instance for this MBean\n                     * object.\n                     * Assign heartbeat using formula (2 * step) and hard code\n                     * min & max values to \"U\" (\"unknown\").\n                     */\n                    ds = new RRDDataSource();\n                    ds.setHeartbeat(2 * JMXDataCollectionConfigFactory.getInstance().getStep(\n                                                                                             collectionName));\n                    // For completeness, adding a minval option to the variable.\n                    String ds_minval = attr.getMinval();\n                    if (ds_minval == null) {\n                        ds_minval = \"U\";\n                    }\n                    ds.setMax(ds_minval);\n\n                    /*\n                     * In order to handle counter wraps, we need to set a max\n                     * value for the variable.\n                     */\n                    String ds_maxval = attr.getMaxval();\n                    if (ds_maxval == null) {\n                        ds_maxval = \"U\";\n                    }\n\n                    ds.setMax(ds_maxval);\n                    ds.setInstance(collectionName);\n\n                    /*\n                     * Truncate MBean object name/alias if it exceeds 19 char\n                     * max for RRD data source names.\n                     */\n                    String ds_name = attr.getAlias();\n                    if (ds_name.length() > MAX_DS_NAME_LENGTH) {\n                        if (log.isEnabledFor(Priority.WARN))\n                            log.warn(\"buildDataSourceList: alias '\"\n                                    + attr.getAlias()\n                                    + \"' exceeds 19 char maximum for RRD data \"\n                                    + \"source names, truncating.\");\n                        char[] temp = ds_name.toCharArray();\n                        ds_name = String.copyValueOf(temp, 0,\n                                                     MAX_DS_NAME_LENGTH);\n                    }\n                    ds.setName(ds_name);\n\n                    // Map MBean object data type to RRD data type\n                    ds.setType(ds_type);\n\n                    /*\n                     * Assign the data source object identifier and instance\n                     * ds.setName(attr.getName());\n                     */\n                    ds.setOid(attr.getName());\n\n                    // if (log.isDebugEnabled())\n                    log.debug(\"buildDataSourceList: ds_name: \" + ds.getName()\n                            + \" ds_oid: \" + ds.getOid() + \".\"\n                            + ds.getInstance() + \" ds_max: \" + ds.getMax()\n                            + \" ds_min: \" + ds.getMin());\n\n                    // Add the new data source to the list\n                    dsList.put(objectName + \"|\" + attr.getName(), ds);\n                } else if (log.isEnabledFor(Priority.WARN)) {\n                    log.warn(\"buildDataSourceList: Data type '\"\n                            + attr.getType()\n                            + \"' not supported.  Only integer-type data may be \"\n                            + \"stored in RRD.\");\n                    log.warn(\"buildDataSourceList: MBean object '\"\n                            + attr.getAlias()\n                            + \"' will not be mapped to RRD data source.\");\n                }\n            }\n        }\n\n        return dsList;\n    }","commit_id":"fc52d5058887e05545ff8daf1f3d0a65ac68669b","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * For each category in the categories list, this reads the services and\n     * outage tables to get the initial data, creates objects that are added to\n     * the map and and to the appropriate category\n     * \n     * @throws SQLException\n     *             if the database read fails due to an SQL error\n     * @throws FilterParseException\n     *             if filtering the data against the category rule fails due to\n     *             the rule being incorrect\n     */\n    private void populateNodesFromDB(org.opennms.netmgt.config.categories.Category cat, List monitoredServices) throws SQLException, FilterParseException, Exception {\n        m_nodes = new ArrayList();\n\torg.apache.log4j.Category log = ThreadCategory.getInstance(AvailabilityData.class);\n\n\tif (log.isDebugEnabled()) {\n            log.debug(\"in populateNodesFromDB\");\n\t}\n\n        // Create the filter\n        Filter filter = new Filter();\n\n        initialiseConnection();\n        // Prepare the statement to get service entries for each IP\n        PreparedStatement servicesGetStmt = m_availConn.prepareStatement(AvailabilityConstants.DB_GET_SVC_ENTRIES);\n        // Prepared statement to get node info for an ip\n        PreparedStatement ipInfoGetStmt = m_availConn.prepareStatement(AvailabilityConstants.DB_GET_INFO_FOR_IP);\n        // Prepared statement to get outages entries\n        PreparedStatement outagesGetStmt = m_availConn.prepareStatement(AvailabilityConstants.DB_GET_OUTAGE_ENTRIES);\n\n        \n        // get the rule for this category, get the list of nodes that satisfy\n        // this rule\n        m_catComment = cat.getComment();\n        String filterRule = m_commonRule;\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Category: \" + filterRule);\n\t}\n\n        String ip = null;\n        ResultSet ipRS = null;\n        try {\n            List nodeIPs = filter.getIPList(filterRule);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Number of IPs satisfying rule: \" + nodeIPs.size());\n\t    }\n\n            // For each of these IP addresses, get the details from the\n            // ifServices and services tables\n            Iterator ipIter = nodeIPs.iterator();\n            while (ipIter.hasNext()) {\n                ip = (String) ipIter.next();\n\n                // get node info for this ip\n                ipInfoGetStmt.setString(1, ip);\n\n                ipRS = ipInfoGetStmt.executeQuery();\n                while (ipRS.next()) {\n                    int nodeid = ipRS.getInt(1);\n                    String nodeName = ipRS.getString(2);\n\n                    // if(log.isDebugEnabled())\n                    // log.debug(\"IP->node info lookup result: \" + nodeid);\n\n                    //\n                    // get the services for this IP address\n                    //\n                    ResultSet svcRS = null;\n                    servicesGetStmt.setLong(1, nodeid);\n                    servicesGetStmt.setString(2, ip);\n                    servicesGetStmt.setString(3, ip);\n                    servicesGetStmt.setLong(4, nodeid);\n                    svcRS = servicesGetStmt.executeQuery();\n\n                    // create node objects for this nodeID/IP/service\n                    while (svcRS.next()) {\n                        // read data from the resultset\n                        int svcid = svcRS.getInt(1);\n                        String svcname = svcRS.getString(2);\n\n                        /*\n\t\t\t * If the list is empty, we assume all services are\n                         * monitored. If it has any, we use it as a filter\n\t\t\t */\n                        if (monitoredServices.isEmpty() || monitoredServices.contains(svcname)) {\n                            // if(log.isDebugEnabled())\n                            // log.debug(\"services result: \" + nodeid + \"\\t\" +\n                            // ip + \"\\t\" + svcname);\n\n                            OutageSvcTimesList outageSvcTimesList = new OutageSvcTimesList();\n                            getOutagesNodeIpSvc(nodeid, nodeName, ip, svcid,\n\t\t\t\t\t\tsvcname, outageSvcTimesList,\n\t\t\t\t\t\toutagesGetStmt);\n\n                            /*\n                             * IfService ifservice = new IfService(nodeid, ip,\n                             * svcid, nodeName, svcname); Map svcOutages =\n                             * (Map)m_services.get(svcname); if(svcOutages ==\n                             * null) svcOutages = new HashMap();\n                             * svcOutages.put(ifservice, outageSvcTimesList);\n                             * m_services.put(svcname, svcOutages);\n                             */\n                        }\n                    }\n\n                    // finally close the result set\n                    try {\n                        if (svcRS != null) {\n                            svcRS.close();\n\t\t\t}\n                    } catch (Exception e) {\n                        if (log.isEnabledFor(Priority.FATAL)) {\n                            log.fatal(\"Exception while closing the services result set\", e);\n\t\t\t}\n                        throw e;\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            if (log.isEnabledFor(Priority.FATAL)) {\n                log.fatal(\"Unable to get node list for category \\'\" + cat.getLabel(), e);\n\t    }\n            throw e;\n        } catch (FilterParseException e) {\n            /*\n\t     * If we get here, the error was most likely in\n             * getting the nodelist from the filters.\n\t     */\n            if (log.isEnabledFor(Priority.FATAL)) {\n                log.fatal(\"Unable to get node list for category \\'\"\n\t\t    + cat.getLabel() + \"'\", e);\n\t    }\n\n            // re-throw exception\n            throw e;\n        } catch (Exception e) {\n            if (log.isEnabledFor(Priority.FATAL)) {\n                log.fatal(\"Unable to get node list for category \\'\"\n\t\t    + cat.getLabel() + \"'\", e);\n\t    }\n\n            // re-throw exception\n            throw new Exception(\"Unable to get node list for category \\'\"\n\t\t+ cat.getLabel() + \"\\':\\n\\t\" + e);\n        } finally {\n            try {\n                if (ipRS != null) {\n                    ipRS.close();\n\t\t}\n                if (servicesGetStmt != null) {\n                    servicesGetStmt.close();\n\t\t}\n\n                if (ipInfoGetStmt != null) {\n                    ipInfoGetStmt.close();\n\t\t}\n\n                if (outagesGetStmt != null) {\n                    outagesGetStmt.close();\n\t\t}\n\n                if (m_availConn != null) {\n                    closeConnection();\n\t\t}\n            } catch (Exception e) {\n                if (log.isEnabledFor(Priority.FATAL)) {\n                    log.fatal(\"Exception while closing the ip get node info result set - ip: \" + ip, e);\n\t\t}\n                throw e;\n            }\n        }\n    }","id":18554,"modified_method":"/**\n     * For each category in the categories list, this reads the services and\n     * outage tables to get the initial data, creates objects that are added\n     * to the map and and to the appropriate category\n     * \n     * @throws SQLException\n     *             if the database read fails due to an SQL error\n     * @throws FilterParseException\n     *             if filtering the data against the category rule fails due\n     *             to the rule being incorrect\n     */\n    private void populateNodesFromDB(\n            org.opennms.netmgt.config.categories.Category cat,\n            List monitoredServices) throws SQLException,\n            FilterParseException, Exception {\n        m_nodes = new ArrayList();\n        org.apache.log4j.Category log =\n            ThreadCategory.getInstance(AvailabilityData.class);\n\n        log.debug(\"in populateNodesFromDB\");\n\n        // Create the filter\n        Filter filter = new Filter();\n\n        initialiseConnection();\n        // Prepare the statement to get service entries for each IP\n        PreparedStatement servicesGetStmt =\n            m_availConn.prepareStatement(AvailabilityConstants.DB_GET_SVC_ENTRIES);\n        // Prepared statement to get node info for an ip\n        PreparedStatement ipInfoGetStmt =\n            m_availConn.prepareStatement(AvailabilityConstants.DB_GET_INFO_FOR_IP);\n        // Prepared statement to get outages entries\n        PreparedStatement outagesGetStmt =\n            m_availConn.prepareStatement(AvailabilityConstants.DB_GET_OUTAGE_ENTRIES);\n        \n        /*\n         * Tet the rule for this category, get the list of nodes that satisfy\n         * this rule.\n         */\n        m_catComment = cat.getComment();\n        String filterRule = m_commonRule;\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Category: \" + filterRule);\n        }\n\n        String ip = null;\n        ResultSet ipRS = null;\n        try {\n            List nodeIPs = filter.getIPList(filterRule);\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Number of IPs satisfying rule: \" + nodeIPs.size());\n            }\n\n            /*\n             * For each of these IP addresses, get the details from the\n             * ifServices and services tables.\n             */\n            Iterator ipIter = nodeIPs.iterator();\n            while (ipIter.hasNext()) {\n                ip = (String) ipIter.next();\n\n                // get node info for this ip\n                ipInfoGetStmt.setString(1, ip);\n\n                ipRS = ipInfoGetStmt.executeQuery();\n                while (ipRS.next()) {\n                    int nodeid = ipRS.getInt(1);\n                    String nodeName = ipRS.getString(2);\n\n                    // if(log.isDebugEnabled())\n                    // log.debug(\"IP->node info lookup result: \" + nodeid);\n\n                    // get the services for this IP address\n                    ResultSet svcRS = null;\n                    servicesGetStmt.setLong(1, nodeid);\n                    servicesGetStmt.setString(2, ip);\n                    servicesGetStmt.setString(3, ip);\n                    servicesGetStmt.setLong(4, nodeid);\n                    svcRS = servicesGetStmt.executeQuery();\n\n                    // create node objects for this nodeID/IP/service\n                    while (svcRS.next()) {\n                        // read data from the resultset\n                        int svcid = svcRS.getInt(1);\n                        String svcname = svcRS.getString(2);\n\n                        /*\n                         * If the list is empty, we assume all services are\n                         * monitored. If it has any, we use it as a filter\n                         */\n                        if (monitoredServices.isEmpty()\n                                || monitoredServices.contains(svcname)) {\n                            // if(log.isDebugEnabled())\n                            // log.debug(\"services result: \" + nodeid + \"\\t\" +\n                            // ip + \"\\t\" + svcname);\n\n                            OutageSvcTimesList outageSvcTimesList =\n                                new OutageSvcTimesList();\n                            getOutagesNodeIpSvc(nodeid, nodeName, ip, svcid,\n                                                svcname, outageSvcTimesList,\n                                                outagesGetStmt);\n\n                            /*\n                             * IfService ifservice = new IfService(nodeid, ip,\n                             * svcid, nodeName, svcname); Map svcOutages =\n                             * (Map)m_services.get(svcname); if(svcOutages ==\n                             * null) svcOutages = new HashMap();\n                             * svcOutages.put(ifservice, outageSvcTimesList);\n                             * m_services.put(svcname, svcOutages);\n                             */\n                        }\n                    }\n\n                    // finally close the result set\n                    try {\n                        if (svcRS != null) {\n                            svcRS.close();\n                        }\n                    } catch (Exception e) {\n                        log.fatal(\"Exception while closing the services result \"\n                                  + \"set\", e);\n                        throw e;\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            log.fatal(\"Unable to get node list for category '\"\n                      + cat.getLabel() + \"'\", e);\n            throw e;\n        } catch (FilterParseException e) {\n            /*\n             * If we get here, the error was most likely in getting the\n             * nodelist from the filters.\n             */\n            log.fatal(\"Unable to get node list for category '\"\n                      + cat.getLabel() + \"'\", e);\n            throw e;\n        } catch (Exception e) {\n            log.fatal(\"Unable to get node list for category '\"\n                      + cat.getLabel() + \"'\", e);\n\n            // re-throw exception\n            throw new Exception(\"Unable to get node list for category \\'\"\n                    + cat.getLabel() + \"\\': \" + e.getMessage(), e);\n        } finally {\n            try {\n                if (ipRS != null) {\n                    ipRS.close();\n                }\n                if (servicesGetStmt != null) {\n                    servicesGetStmt.close();\n                }\n\n                if (ipInfoGetStmt != null) {\n                    ipInfoGetStmt.close();\n                }\n\n                if (outagesGetStmt != null) {\n                    outagesGetStmt.close();\n                }\n\n                if (m_availConn != null) {\n                    closeConnection();\n                }\n            } catch (Exception e) {\n                log.fatal(\"Exception while closing the ip get node info result \"\n                          + \"set.  IP: \" + ip, e);\n                throw e;\n            }\n        }\n        /*\n         * XXX why do we rethrow the original exception in a few cases and create\n         * a new exception in others? \n         */\n        \n    }","commit_id":"c0e21460c24ae379ccf6d8c2467a4967f8a52c1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Closes the database connection.\n     */\n    public void closeConnection() {\n        org.apache.log4j.Category log = ThreadCategory.getInstance(this.getClass());\n        if (m_availConn != null) {\n            try {\n                m_availConn.close();\n                m_availConn = null;\n            } catch (Throwable t) {\n                if (log.isEnabledFor(Priority.WARN)) {\n                    log.warn(\"initialize: an exception occured while closing the JDBC connection\", t);\n\t\t}\n            }\n        }\n    }","id":18555,"modified_method":"/**\n     * Closes the database connection.\n     */\n    public void closeConnection() {\n        org.apache.log4j.Category log =\n            ThreadCategory.getInstance(this.getClass());\n        if (m_availConn != null) {\n            try {\n                m_availConn.close();\n                m_availConn = null;\n            } catch (Throwable t) {\n                log.warn(\"initialize: an exception occured while closing the \"\n                         + \"JDBC connection\", t);\n            }\n        }\n    }","commit_id":"c0e21460c24ae379ccf6d8c2467a4967f8a52c1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Populates the data structure for this category. This method only computes\n     * for monitored services in this category.\n     * \n     * @param cat\n     *            Category\n     * @param report\n     *            Report Castor class\n     * @param format\n     *            SVG-specific/all reports\n     */\n    private void populateDataStructures(org.opennms.netmgt.config.categories.Category cat, Report report, String format, String monthFormat, int catIndex) throws Exception {\n        org.apache.log4j.Category log = ThreadCategory.getInstance(this.getClass());\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"Inside populate data Structures\" + catIndex);\n\t\treport.setCatCount(catIndex);\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"Inside populate data Structures\");\n        try {\n            String categoryName = cat.getLabel();\n            m_commonRule = m_catFactory.getEffectiveRule(categoryName);\n            Enumeration enumMonitoredSvc = cat.enumerateService();\n            List monitoredServices = new ArrayList();\n            while (enumMonitoredSvc.hasMoreElements()) {\n                String service = (String) enumMonitoredSvc.nextElement();\n\t\t\t\tif (log.isDebugEnabled())\n\t                log.debug(\"adding service\" + service);\n                monitoredServices.add(service);\n            }\n            populateNodesFromDB(cat, monitoredServices);\n            ViewInfo viewInfo = report.getViewInfo();\n            if (log.isDebugEnabled()) {\n                log.debug(\"Nodes \" + m_nodes);\n            }\n            ListIterator cleanNodes = m_nodes.listIterator();\n            while (cleanNodes.hasNext()) {\n                Node node = (Node) cleanNodes.next();\n                if (node != null && !node.hasOutages()) {\n\t\t\t\t\tif (log.isDebugEnabled())\n\t\t                log.debug(\"Removing node: \" + node);\n\t\t\t\t\tcleanNodes.remove();\n                }\n            }\n            if (log.isDebugEnabled()) {\n                log.debug(\"Cleaned Nodes \" + m_nodes);\n            }\n            TreeMap topOffenders = new TreeMap();\n            topOffenders = getPercentNode();\n\n            if (log.isDebugEnabled())\n                log.debug(\"TOP OFFENDERS \" + topOffenders);\n            if (m_nodes.size() <= 0)\n                m_nodes = null;\n            if (m_nodes != null) {\n                AvailCalculations availCalculations = new AvailCalculations(m_nodes, m_endTime, m_lastMonthEndTime, monitoredServices, report, topOffenders, cat.getWarning(), cat.getNormal(), cat.getComment(), cat.getLabel(), format, monthFormat, catIndex, m_sectionIndex);\n                m_sectionIndex = availCalculations.getSectionIndex();\n                report.setSectionCount(m_sectionIndex - 1);\n            } else {\n                org.opennms.report.availability.Category category = new org.opennms.report.availability.Category();\n                category.setCatComments(cat.getComment());\n                category.setCatName(cat.getLabel());\n                category.setCatIndex(catIndex);\n                category.setNodeCount(0);\n                category.setIpaddrCount(0);\n                category.setServiceCount(0);\n                Section section = new Section();\n                section.setSectionIndex(m_sectionIndex);\n                org.opennms.report.availability.CatSections catSections = new org.opennms.report.availability.CatSections();\n                catSections.addSection(section);\n                category.addCatSections(catSections);\n                org.opennms.report.availability.Categories categories = report.getCategories();\n                categories.addCategory(category);\n                report.setCategories(categories);\n                report.setSectionCount(m_sectionIndex);\n                m_sectionIndex++;\n            }\n        } catch (Exception e) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"Exception has occured \" + e);\n            e.printStackTrace();\n            throw e;\n        }\n    }","id":18556,"modified_method":"/**\n     * Populates the data structure for this category. This method only\n     * computes for monitored services in this category.\n     * \n     * @param cat\n     *            Category\n     * @param report\n     *            Report Castor class\n     * @param format\n     *            SVG-specific/all reports\n     */\n    private void populateDataStructures(\n            org.opennms.netmgt.config.categories.Category cat, Report report,\n            String format, String monthFormat, int catIndex) throws Exception {\n        org.apache.log4j.Category log =\n            ThreadCategory.getInstance(this.getClass());\n        if (log.isDebugEnabled())\n            log.debug(\"Inside populate data Structures\" + catIndex);\n        report.setCatCount(catIndex);\n        log.debug(\"Inside populate data Structures\");\n        try {\n            String categoryName = cat.getLabel();\n            m_commonRule = m_catFactory.getEffectiveRule(categoryName);\n            Enumeration enumMonitoredSvc = cat.enumerateService();\n            List monitoredServices = new ArrayList();\n            while (enumMonitoredSvc.hasMoreElements()) {\n                String service = (String) enumMonitoredSvc.nextElement();\n                if (log.isDebugEnabled()) {\n                    log.debug(\"adding service\" + service);\n                }\n                monitoredServices.add(service);\n            }\n            populateNodesFromDB(cat, monitoredServices);\n            ViewInfo viewInfo = report.getViewInfo();\n            if (log.isDebugEnabled()) {\n                log.debug(\"Nodes \" + m_nodes);\n            }\n            ListIterator cleanNodes = m_nodes.listIterator();\n            while (cleanNodes.hasNext()) {\n                Node node = (Node) cleanNodes.next();\n                if (node != null && !node.hasOutages()) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"Removing node: \" + node);\n                    }\n                    cleanNodes.remove();\n                }\n            }\n            if (log.isDebugEnabled()) {\n                log.debug(\"Cleaned Nodes \" + m_nodes);\n            }\n            TreeMap topOffenders = new TreeMap();\n            topOffenders = getPercentNode();\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"TOP OFFENDERS \" + topOffenders);\n            }\n            if (m_nodes.size() <= 0) {\n                m_nodes = null;\n            }\n            if (m_nodes != null) {\n                AvailCalculations availCalculations =\n                    new AvailCalculations(m_nodes,\n                                          m_endTime,\n                                          m_lastMonthEndTime,\n                                          monitoredServices,\n                                          report,\n                                          topOffenders,\n                                          cat.getWarning(),\n                                          cat.getNormal(),\n                                          cat.getComment(),\n                                          cat.getLabel(),\n                                          format,\n                                          monthFormat,\n                                          catIndex,\n                                          m_sectionIndex);\n                m_sectionIndex = availCalculations.getSectionIndex();\n                report.setSectionCount(m_sectionIndex - 1);\n            } else {\n                org.opennms.report.availability.Category category =\n                    new org.opennms.report.availability.Category();\n                category.setCatComments(cat.getComment());\n                category.setCatName(cat.getLabel());\n                category.setCatIndex(catIndex);\n                category.setNodeCount(0);\n                category.setIpaddrCount(0);\n                category.setServiceCount(0);\n                Section section = new Section();\n                section.setSectionIndex(m_sectionIndex);\n                org.opennms.report.availability.CatSections catSections =\n                    new org.opennms.report.availability.CatSections();\n                catSections.addSection(section);\n                category.addCatSections(catSections);\n                org.opennms.report.availability.Categories categories =\n                    report.getCategories();\n                categories.addCategory(category);\n                report.setCategories(categories);\n                report.setSectionCount(m_sectionIndex);\n                m_sectionIndex++;\n            }\n        } catch (Exception e) {\n            log.fatal(\"Exception has occured\", e);\n            throw e;\n        }\n    }","commit_id":"c0e21460c24ae379ccf6d8c2467a4967f8a52c1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Initialises the database connection.\n     */\n    public void initialiseConnection() throws IOException, MarshalException, ValidationException, ClassNotFoundException, SQLException {\n        org.apache.log4j.Category log = ThreadCategory.getInstance(this.getClass());\n        //\n        // Initialize the DataCollectionConfigFactory\n        //\n        try {\n            DatabaseConnectionFactory.init();\n            m_availConn = DatabaseConnectionFactory.getInstance().getConnection();\n        } catch (MarshalException ex) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed to load data collection configuration\", ex);\n            throw new UndeclaredThrowableException(ex);\n        } catch (ValidationException ex) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed to load data collection configuration\", ex);\n            throw new UndeclaredThrowableException(ex);\n        } catch (IOException ex) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed to load data collection configuration\", ex);\n            throw new UndeclaredThrowableException(ex);\n        } catch (ClassNotFoundException cnfE) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed loading database driver.\", cnfE);\n            throw new UndeclaredThrowableException(cnfE);\n        } catch (SQLException sqlE) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed getting connection to the database.\", sqlE);\n            throw new UndeclaredThrowableException(sqlE);\n        } catch (PropertyVetoException e) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"initialize: Failed getting connection to the database.\", e);\n            throw new UndeclaredThrowableException(e);\n        }\n    }","id":18557,"modified_method":"/**\n     * Initialises the database connection.\n     */\n    public void initialiseConnection() throws IOException, MarshalException,\n            ValidationException, ClassNotFoundException, SQLException {\n        org.apache.log4j.Category log =\n            ThreadCategory.getInstance(this.getClass());\n        //\n        // Initialize the DataCollectionConfigFactory\n        //\n        try {\n            DatabaseConnectionFactory.init();\n            m_availConn = DatabaseConnectionFactory.getInstance().getConnection();\n        } catch (MarshalException e) {\n            log.fatal(\"initialize: Failed to load data collection configuration\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        } catch (ValidationException e) {\n            log.fatal(\"initialize: Failed to load data collection configuration\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        } catch (IOException e) {\n            log.fatal(\"initialize: Failed to load data collection configuration\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        } catch (ClassNotFoundException e) {\n            log.fatal(\"initialize: Failed loading database driver.\", e);\n            throw new UndeclaredThrowableException(e);\n        } catch (SQLException e) {\n            log.fatal(\"initialize: Failed getting connection to the database.\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        } catch (PropertyVetoException e) {\n            log.fatal(\"initialize: Failed getting connection to the database.\",\n                      e);\n            throw new UndeclaredThrowableException(e);\n        }\n    }","commit_id":"c0e21460c24ae379ccf6d8c2467a4967f8a52c1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Get all outages for this nodeid/ipaddr/service combination and add it to\n     * m_nodes.\n     */\n    private void getOutagesNodeIpSvc(int nodeid, String nodeName,\n\t\t\t\t     String ipaddr, int serviceid,\n\t\t\t\t     String serviceName,\n\t\t\t\t     OutageSvcTimesList outageSvcTimesList,\n\t\t\t\t     PreparedStatement outagesGetStmt)\n\t\tthrows SQLException {\n        org.apache.log4j.Category log = ThreadCategory.getInstance(AvailabilityData.class);\n        // Get outages for this node/ip/svc pair\n        try {\n            // if (log.isDebugEnabled())\n            // log.debug(\"Node \" + nodeid + \" ipaddr \" + ipaddr + \" serviceid \"\n            // + serviceid);\n            outagesGetStmt.setInt(1, nodeid);\n            outagesGetStmt.setString(2, ipaddr);\n            outagesGetStmt.setInt(3, serviceid);\n\n            ResultSet rs = outagesGetStmt.executeQuery();\n\n            if (m_nodes != null && m_nodes.size() > 0) {\n                ListIterator lstIter = m_nodes.listIterator();\n                boolean foundFlag = false;\n                Node oldNode = null;\n                while (lstIter.hasNext()) {\n                    oldNode = (Node) lstIter.next();\n                    if (oldNode != null && oldNode.getNodeID() == nodeid) {\n                        foundFlag = true;\n                        break;\n                    }\n                }\n                if (!foundFlag) {\n                    Node newNode = new Node(nodeName, nodeid);\n                    newNode.addInterface(ipaddr, serviceName);\n                    m_nodes.add(newNode);\n                } else {\n                    oldNode.addInterface(ipaddr, serviceName);\n                }\n            } else {\n                Node newNode = new Node(nodeName, nodeid);\n                newNode.addInterface(ipaddr, serviceName);\n                m_nodes.add(newNode);\n            }\n\n            while (rs.next()) {\n                Timestamp lost = rs.getTimestamp(1);\n                Timestamp regained = rs.getTimestamp(2);\n                long losttime = lost.getTime();\n                long regainedtime = 0;\n\n                if (regained != null) {\n                    regainedtime = regained.getTime();\n\t\t}\n\n                if (regainedtime > 0) {\n                    if (regainedtime <= m_12MonthsBack\n\t\t\t|| losttime >= m_endTime) {\n                        continue;\n\t\t    }\n                } else {\n                    if (losttime >= m_endTime) {\n                        continue;\n\t\t    }\n                }\n                Outage outage = new Outage(losttime, regainedtime);\n                outageSvcTimesList.add(outage);\n                addNode(nodeName, nodeid, ipaddr, serviceName, losttime, regainedtime);\n            }\n            if (rs != null) {\n                rs.close();\n\t    }\n\n        } catch (SQLException e) {\n            if (log.isEnabledFor(Priority.FATAL)) {\n                log.fatal(\"Error has occured while getting the outages \", e);\n\t    }\n            throw e;\n        }\n    }","id":18558,"modified_method":"/**\n     * Get all outages for this nodeid/ipaddr/service combination and add it\n     * to m_nodes.\n     */\n    private void getOutagesNodeIpSvc(int nodeid, String nodeName,\n            String ipaddr, int serviceid, String serviceName,\n            OutageSvcTimesList outageSvcTimesList,\n            PreparedStatement outagesGetStmt) throws SQLException {\n        org.apache.log4j.Category log =\n            ThreadCategory.getInstance(AvailabilityData.class);\n        // Get outages for this node/ip/svc pair\n        try {\n            // if (log.isDebugEnabled())\n            // log.debug(\"Node \" + nodeid + \" ipaddr \" + ipaddr + \" serviceid\n            // \"\n            // + serviceid);\n            outagesGetStmt.setInt(1, nodeid);\n            outagesGetStmt.setString(2, ipaddr);\n            outagesGetStmt.setInt(3, serviceid);\n\n            ResultSet rs = outagesGetStmt.executeQuery();\n\n            if (m_nodes != null && m_nodes.size() > 0) {\n                ListIterator lstIter = m_nodes.listIterator();\n                boolean foundFlag = false;\n                Node oldNode = null;\n                while (lstIter.hasNext()) {\n                    oldNode = (Node) lstIter.next();\n                    if (oldNode != null && oldNode.getNodeID() == nodeid) {\n                        foundFlag = true;\n                        break;\n                    }\n                }\n                if (!foundFlag) {\n                    Node newNode = new Node(nodeName, nodeid);\n                    newNode.addInterface(ipaddr, serviceName);\n                    m_nodes.add(newNode);\n                } else {\n                    oldNode.addInterface(ipaddr, serviceName);\n                }\n            } else {\n                Node newNode = new Node(nodeName, nodeid);\n                newNode.addInterface(ipaddr, serviceName);\n                m_nodes.add(newNode);\n            }\n\n            while (rs.next()) {\n                Timestamp lost = rs.getTimestamp(1);\n                Timestamp regained = rs.getTimestamp(2);\n                long losttime = lost.getTime();\n                long regainedtime = 0;\n\n                if (regained != null) {\n                    regainedtime = regained.getTime();\n                }\n\n                if (regainedtime > 0) {\n                    if (regainedtime <= m_12MonthsBack\n                            || losttime >= m_endTime) {\n                        continue;\n                    }\n                } else {\n                    if (losttime >= m_endTime) {\n                        continue;\n                    }\n                }\n                Outage outage = new Outage(losttime, regainedtime);\n                outageSvcTimesList.add(outage);\n                addNode(nodeName, nodeid, ipaddr, serviceName, losttime,\n                        regainedtime);\n            }\n            if (rs != null) {\n                rs.close();\n            }\n\n        } catch (SQLException e) {\n            log.fatal(\"Error has occured while getting the outages \", e);\n            throw e;\n        }\n    }","commit_id":"c0e21460c24ae379ccf6d8c2467a4967f8a52c1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Initialise the endTime, last Months end time and number of days in the\n     * last month.\n     */\n    private void initialiseInterval(Calendar calendar) {\n        org.apache.log4j.Category log = ThreadCategory.getInstance(this.getClass());\n\n        int month = calendar.get(Calendar.MONTH);\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\n        int year = calendar.get(Calendar.YEAR);\n        calendar.set(year, month, day - 1, 23, 59, 59); // Set the end Time\n        m_endTime = calendar.getTime().getTime();\n\n        calendar.add(Calendar.YEAR, -1);\n        LAST_YEAR_ROLLING_WINDOW = m_endTime - calendar.getTime().getTime();\n        m_12MonthsBack = m_endTime - LAST_YEAR_ROLLING_WINDOW;\n\n        calendar = new GregorianCalendar();\n        calendar.setTime(new java.util.Date(m_12MonthsBack));\n        month = calendar.get(Calendar.MONTH);\n        day = calendar.get(Calendar.DAY_OF_MONTH);\n        year = calendar.get(Calendar.YEAR);\n        calendar.set(year, month, 1, 0, 0, 0); // Set the end Time\n        m_12MonthsBack = calendar.getTime().getTime();\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"last Year \" + new java.util.Date(m_12MonthsBack));\n            log.debug(\"End Year \" + new java.util.Date(m_endTime));\n            log.debug(\"Rolling window of the last year \" + LAST_YEAR_ROLLING_WINDOW);\n        }\n        Calendar lastMonthCalendar = new GregorianCalendar();\n        lastMonthCalendar.setTime(new java.util.Date((new Double(m_endTime)).longValue()));\n        month = lastMonthCalendar.get(Calendar.MONTH) - 1;\n        year = lastMonthCalendar.get(Calendar.YEAR);\n        lastMonthCalendar.set(year, month, 1, 0, 0, 0);\n\n\t// Number of days in the last month\n        m_daysInLastMonth =\n\t    getDaysForMonth(lastMonthCalendar.getTime().getTime());\n\n\t// Set the end time of the last month\n        lastMonthCalendar.set(year, month, m_daysInLastMonth, 23, 59, 59);\n        m_lastMonthEndTime = lastMonthCalendar.getTime().getTime();\n    }","id":18559,"modified_method":"/**\n     * Initialise the endTime, last Months end time and number of days in the\n     * last month.\n     */\n    private void initialiseInterval(Calendar calendar) {\n        org.apache.log4j.Category log =\n            ThreadCategory.getInstance(this.getClass());\n\n        int month = calendar.get(Calendar.MONTH);\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\n        int year = calendar.get(Calendar.YEAR);\n        calendar.set(year, month, day - 1, 23, 59, 59); // Set the end Time\n        m_endTime = calendar.getTime().getTime();\n\n        calendar.add(Calendar.YEAR, -1);\n        LAST_YEAR_ROLLING_WINDOW = m_endTime - calendar.getTime().getTime();\n        m_12MonthsBack = m_endTime - LAST_YEAR_ROLLING_WINDOW;\n\n        calendar = new GregorianCalendar();\n        calendar.setTime(new java.util.Date(m_12MonthsBack));\n        month = calendar.get(Calendar.MONTH);\n        day = calendar.get(Calendar.DAY_OF_MONTH);\n        year = calendar.get(Calendar.YEAR);\n        calendar.set(year, month, 1, 0, 0, 0); // Set the end Time\n        m_12MonthsBack = calendar.getTime().getTime();\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"last Year \" + new java.util.Date(m_12MonthsBack));\n            log.debug(\"End Year \" + new java.util.Date(m_endTime));\n            log.debug(\"Rolling window of the last year \"\n                    + LAST_YEAR_ROLLING_WINDOW);\n        }\n        Calendar lastMonthCalendar = new GregorianCalendar();\n        java.util.Date lastMonthDate =\n            new java.util.Date(new Double(m_endTime).longValue());\n        lastMonthCalendar.setTime(lastMonthDate);\n        month = lastMonthCalendar.get(Calendar.MONTH) - 1;\n        year = lastMonthCalendar.get(Calendar.YEAR);\n        lastMonthCalendar.set(year, month, 1, 0, 0, 0);\n\n        // Number of days in the last month\n        m_daysInLastMonth =\n            getDaysForMonth(lastMonthCalendar.getTime().getTime());\n\n        // Set the end time of the last month\n        lastMonthCalendar.set(year, month, m_daysInLastMonth, 23, 59, 59);\n        m_lastMonthEndTime = lastMonthCalendar.getTime().getTime();\n    }","commit_id":"c0e21460c24ae379ccf6d8c2467a4967f8a52c1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Constructor\n     * \n     */\n    public AvailabilityData(String categoryName, Report report, String format,\n\t\t\t    String monthFormat, Calendar calendar)\n\t\tthrows IOException, MarshalException, ValidationException,\n\t\t       Exception {\n        ThreadCategory.setPrefix(LOG4J_CATEGORY);\n        org.apache.log4j.Category log =\n\t    ThreadCategory.getInstance(this.getClass());\n        if (log.isDebugEnabled()) {\n            log.debug(\"Inside AvailabilityData\");\n\t}\n\n        m_nodes = new ArrayList();\n        initialiseInterval(calendar);\n        m_categoryName = categoryName;\n        Catinfo config = null;\n        try {\n            CategoryFactory.init();\n            m_catFactory = CategoryFactory.getInstance();\n            config = m_catFactory.getConfig();\n        } catch (IOException ioe) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"IOException \" + ioe);\n            throw ioe;\n        } catch (MarshalException marshex) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"Exception \" + marshex);\n            throw marshex;\n        } catch (ValidationException ex) {\n            if (log.isEnabledFor(Priority.FATAL))\n                log.fatal(\"Exception \" + ex);\n            throw ex;\n        }\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"CATEGORY \" + categoryName);\n\t}\n        if (categoryName.equals(\"\") || categoryName.equals(\"all\")) {\n            Enumeration enumCG = config.enumerateCategorygroup();\n            int catCount = 0;\n\t    if (log.isDebugEnabled()) {\n                log.debug(\"catCount \" + catCount);\n\t    }\n            while (enumCG.hasMoreElements()) {\n                Categorygroup cg = (Categorygroup) enumCG.nextElement();\n\n                // go through the categories\n                org.opennms.netmgt.config.categories.Categories cats =\n\t\t    cg.getCategories();\n\n                Enumeration enumCat = cats.enumerateCategory();\n                while (enumCat.hasMoreElements()) {\n                    org.opennms.netmgt.config.categories.Category cat =\n\t\t        (org.opennms.netmgt.config.categories.Category)\n\t\t\tenumCat.nextElement();\n                    Enumeration enumMonitoredSvc = cat.enumerateService();\n                    List monitoredServices = new ArrayList();\n                    while (enumMonitoredSvc.hasMoreElements()) {\n                        String service =\n\t\t\t    (String) enumMonitoredSvc.nextElement();\n                        monitoredServices.add(service);\n                    }\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"CATEGORY \" + cat.getLabel());\n\t\t    }\n                    catCount++;\n                    populateDataStructures(cat, report, format, monthFormat,\n\t\t\t\t\t   catCount);\n                }\n            }\n\t    if (log.isDebugEnabled()) {\n                log.debug(\"catCount \" + catCount);\n\t    }\n        } else {\n            org.opennms.netmgt.config.categories.Category cat =\n\t\t(org.opennms.netmgt.config.categories.Category)\n\t\tm_catFactory.getCategory(categoryName);\n            if (log.isDebugEnabled()) {\n                log.debug(\"CATEGORY - now populating data structures \"\n\t\t    + cat.getLabel());\n\t    }\n            populateDataStructures(cat, report, format, monthFormat, 1);\n        }\n\n        SimpleDateFormat simplePeriod =\n\t    new SimpleDateFormat(\"MMMMMMMMMMM dd, yyyy\");\n        String reportPeriod =\n\t    simplePeriod.format(new java.util.Date(m_12MonthsBack)) + \" - \"\n\t    + simplePeriod.format(new java.util.Date(m_endTime));\n        Created created = report.getCreated();\n        if (created == null) {\n            created = new Created();\n\t}\n        created.setPeriod(reportPeriod);\n        report.setCreated(created);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"After availCalculations\");\n\t}\n    }","id":18560,"modified_method":"/**\n     * Constructor\n     */\n    public AvailabilityData(String categoryName, Report report,\n            String format, String monthFormat, Calendar calendar)\n            throws IOException, MarshalException, ValidationException,\n            Exception {\n        ThreadCategory.setPrefix(LOG4J_CATEGORY);\n        org.apache.log4j.Category log = ThreadCategory.getInstance(this.getClass());\n        log.debug(\"Inside AvailabilityData\");\n\n        m_nodes = new ArrayList();\n        initialiseInterval(calendar);\n        m_categoryName = categoryName;\n        Catinfo config = null;\n        try {\n            CategoryFactory.init();\n            m_catFactory = CategoryFactory.getInstance();\n            config = m_catFactory.getConfig();\n        } catch (IOException e) {\n            log.fatal(\"Initializing CategoryFactory\", e);\n            throw e;\n        } catch (MarshalException e) {\n            log.fatal(\"Initializing CategoryFactory\", e);\n            throw e;\n        } catch (ValidationException e) {\n            log.fatal(\"Initializing CategoryFactory\", e);\n            throw e;\n        }\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"CATEGORY \" + categoryName);\n        }\n        if (categoryName.equals(\"\") || categoryName.equals(\"all\")) {\n            Enumeration enumCG = config.enumerateCategorygroup();\n            int catCount = 0;\n            if (log.isDebugEnabled()) {\n                log.debug(\"catCount \" + catCount);\n            }\n            while (enumCG.hasMoreElements()) {\n                Categorygroup cg = (Categorygroup) enumCG.nextElement();\n\n                // go through the categories\n                org.opennms.netmgt.config.categories.Categories cats =\n                    cg.getCategories();\n\n                Enumeration enumCat = cats.enumerateCategory();\n                while (enumCat.hasMoreElements()) {\n                    org.opennms.netmgt.config.categories.Category cat =\n                        (org.opennms.netmgt.config.categories.Category)\n                        enumCat.nextElement();\n                    Enumeration enumMonitoredSvc = cat.enumerateService();\n                    List monitoredServices = new ArrayList();\n                    while (enumMonitoredSvc.hasMoreElements()) {\n                        String service = (String) enumMonitoredSvc.nextElement();\n                        monitoredServices.add(service);\n                    }\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"CATEGORY \" + cat.getLabel());\n                    }\n                    catCount++;\n                    populateDataStructures(cat, report, format, monthFormat,\n                                           catCount);\n                }\n            }\n            if (log.isDebugEnabled()) {\n                log.debug(\"catCount \" + catCount);\n            }\n        } else {\n            org.opennms.netmgt.config.categories.Category cat =\n                (org.opennms.netmgt.config.categories.Category)\n                m_catFactory.getCategory(categoryName);\n            if (log.isDebugEnabled()) {\n                log.debug(\"CATEGORY - now populating data structures \"\n                        + cat.getLabel());\n            }\n            populateDataStructures(cat, report, format, monthFormat, 1);\n        }\n\n        SimpleDateFormat simplePeriod =\n            new SimpleDateFormat(\"MMMMMMMMMMM dd, yyyy\");\n        String reportPeriod =\n            simplePeriod.format(new java.util.Date(m_12MonthsBack))\n                + \" - \" + simplePeriod.format(new java.util.Date(m_endTime));\n        Created created = report.getCreated();\n        if (created == null) {\n            created = new Created();\n        }\n        created.setPeriod(reportPeriod);\n        report.setCreated(created);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"After availCalculations\");\n        }\n    }","commit_id":"c0e21460c24ae379ccf6d8c2467a4967f8a52c1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * This method adds a unique tuple to the list of nodes m_nodes.\n     */\n    public void addNode(String nodeName, int nodeid, String ipaddr, String serviceid, long losttime, long regainedtime) {\n        org.apache.log4j.Category log = ThreadCategory.getInstance(AvailabilityData.class);\n        if (m_nodes == null) {\n            m_nodes = new ArrayList();\n\t} else {\n            if (m_nodes.size() <= 0) {\n                Node newNode = new Node(nodeName, nodeid);\n                // if(log.isDebugEnabled())\n                // log.debug(\"Created the new node.\");\n                if (losttime > 0) {\n                    if (regainedtime > 0) {\n                        newNode.addInterface(ipaddr, serviceid, losttime, regainedtime);\n\t\t    } else {\n                        newNode.addInterface(ipaddr, serviceid, losttime);\n\t\t    }\n                } else {\n                    newNode.addInterface(ipaddr, serviceid);\n                }\n                m_nodes.add(newNode);\n                return;\n            } else // look for the node with the nodeName\n            {\n                Node newNode = null;\n                boolean foundFlag = false;\n                ListIterator lstIter = m_nodes.listIterator();\n                while (lstIter.hasNext()) {\n                    newNode = (Node) lstIter.next();\n                    if (newNode.getNodeID() == nodeid) {\n                        foundFlag = true;\n                        break;\n                    }\n                }\n                if (!foundFlag) {\n                    newNode = new Node(nodeName, nodeid);\n                    if (losttime > 0) {\n                        if (regainedtime > 0) {\n                            newNode.addInterface(ipaddr, serviceid, losttime, regainedtime);\n\t\t\t} else {\n                            newNode.addInterface(ipaddr, serviceid, losttime);\n\t\t\t}\n                    } else {\n                        newNode.addInterface(ipaddr, serviceid);\n                    }\n                    m_nodes.add(newNode);\n                    return;\n                } else {\n                    if (losttime > 0) {\n                        if (regainedtime > 0) {\n                            newNode.addInterface(ipaddr, serviceid, losttime, regainedtime);\n\t\t\t} else {\n                            newNode.addInterface(ipaddr, serviceid, losttime);\n\t\t\t}\n                    } else {\n                        newNode.addInterface(ipaddr, serviceid);\n                    }\n                    return;\n                }\n            }\n        }\n    }","id":18561,"modified_method":"/**\n     * This method adds a unique tuple to the list of nodes m_nodes.\n     */\n    public void addNode(String nodeName, int nodeid, String ipaddr,\n            String serviceid, long losttime, long regainedtime) {\n        if (m_nodes == null) {\n            m_nodes = new ArrayList();\n        } else {\n            if (m_nodes.size() <= 0) {\n                Node newNode = new Node(nodeName, nodeid);\n                // if(log.isDebugEnabled())\n                // log.debug(\"Created the new node.\");\n                if (losttime > 0) {\n                    if (regainedtime > 0) {\n                        newNode.addInterface(ipaddr, serviceid, losttime,\n                                             regainedtime);\n                    } else {\n                        newNode.addInterface(ipaddr, serviceid, losttime);\n                    }\n                } else {\n                    newNode.addInterface(ipaddr, serviceid);\n                }\n                m_nodes.add(newNode);\n                return;\n            } else // look for the node with the nodeName\n            {\n                Node newNode = null;\n                boolean foundFlag = false;\n                ListIterator lstIter = m_nodes.listIterator();\n                while (lstIter.hasNext()) {\n                    newNode = (Node) lstIter.next();\n                    if (newNode.getNodeID() == nodeid) {\n                        foundFlag = true;\n                        break;\n                    }\n                }\n                if (!foundFlag) {\n                    newNode = new Node(nodeName, nodeid);\n                    if (losttime > 0) {\n                        if (regainedtime > 0) {\n                            newNode.addInterface(ipaddr, serviceid, losttime,\n                                                 regainedtime);\n                        } else {\n                            newNode.addInterface(ipaddr, serviceid, losttime);\n                        }\n                    } else {\n                        newNode.addInterface(ipaddr, serviceid);\n                    }\n                    m_nodes.add(newNode);\n                    return;\n                } else {\n                    if (losttime > 0) {\n                        if (regainedtime > 0) {\n                            newNode.addInterface(ipaddr, serviceid, losttime,\n                                                 regainedtime);\n                        } else {\n                            newNode.addInterface(ipaddr, serviceid, losttime);\n                        }\n                    } else {\n                        newNode.addInterface(ipaddr, serviceid);\n                    }\n                    return;\n                }\n            }\n        }\n    }","commit_id":"c0e21460c24ae379ccf6d8c2467a4967f8a52c1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Returns the number of Days in the month\n     * \n     * @param endTime\n     *            The end of the month (time in milliseconds)\n     */\n    private int getDaysForMonth(long endTime) {\n        GregorianCalendar calendar = new GregorianCalendar();\n        calendar.setTime(new java.util.Date(endTime));\n        int month = calendar.get(Calendar.MONTH);\n        int year = calendar.get(Calendar.YEAR);\n        int days = getDays(calendar.isLeapYear(year), month);\n        return (getDays(calendar.isLeapYear(year), month));\n    }","id":18562,"modified_method":"/**\n     * Returns the number of Days in the month\n     * \n     * @param endTime\n     *            The end of the month (time in milliseconds)\n     */\n    private int getDaysForMonth(long endTime) {\n        GregorianCalendar calendar = new GregorianCalendar();\n        calendar.setTime(new java.util.Date(endTime));\n        int month = calendar.get(Calendar.MONTH);\n        int year = calendar.get(Calendar.YEAR);\n        return (getDays(calendar.isLeapYear(year), month));\n    }","commit_id":"c0e21460c24ae379ccf6d8c2467a4967f8a52c1a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Activity( lifecycle = \"nodeScan\", phase = \"detectAgents\" )\n    public void detectAgents(Phase currentPhase, OnmsNode node) {\n        // someday I'll change this to use agentDetectors\n        OnmsIpInterface primaryIface = node.getPrimaryInterface();\n        if (primaryIface.getMonitoredServiceByServiceType(\"SNMP\") != null) {\n            LifeCycleInstance nested = currentPhase.createNestedLifeCycle(\"agentScan\");\n            nested.setAttribute(\"agentType\", \"SNMP\");\n            nested.setAttribute(\"node\", node);\n            nested.setAttribute(\"foreignSource\", node.getForeignSource());\n            nested.setAttribute(\"foreignId\", node.getForeignId());\n            nested.setAttribute(\"primaryAddress\", primaryIface.getInetAddress());\n            nested.trigger();\n        }\n        \n    }","id":18563,"modified_method":"@Activity( lifecycle = \"nodeScan\", phase = \"detectAgents\" )\n    public void detectAgents(Phase currentPhase, OnmsNode node) {\n        // someday I'll change this to use agentDetectors\n        OnmsIpInterface primaryIface = node.getPrimaryInterface();\n        if (primaryIface.getMonitoredServiceByServiceType(\"SNMP\") != null) {\n            currentPhase.createNestedLifeCycle(\"agentScan\")\n                .setAttribute(\"agentType\", \"SNMP\")\n                .setAttribute(\"node\", node)\n                .setAttribute(\"foreignSource\", node.getForeignSource())\n                .setAttribute(\"foreignId\", node.getForeignId())\n                .setAttribute(\"primaryAddress\", primaryIface.getInetAddress())\n                .trigger();\n        }\n        \n    }","commit_id":"c81604e11bdb6072866072230d2648a1bfeb0bb8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setAttribute(String key, Object value) {\n        m_attributes.put(key, value);\n    }","id":18564,"modified_method":"public LifeCycleInstance setAttribute(String key, Object value) {\n        m_attributes.put(key, value);\n        return this;\n    }","commit_id":"c81604e11bdb6072866072230d2648a1bfeb0bb8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Activity( lifecycle = \"nodeScan\", phase = \"detectAgents\" )\n    public void detectAgents(Phase currentPhase, OnmsNode node) {\n        // someday I'll change this to use agentDetectors\n        OnmsIpInterface primaryIface = node.getPrimaryInterface();\n        if (primaryIface.getMonitoredServiceByServiceType(\"SNMP\") != null) {\n            LifeCycleInstance nested = currentPhase.createNestedLifeCycle(\"agentScan\");\n            nested.setAttribute(\"agentType\", \"SNMP\");\n            nested.setAttribute(\"node\", node);\n            nested.setAttribute(\"foreignSource\", node.getForeignSource());\n            nested.setAttribute(\"foreignId\", node.getForeignId());\n            nested.setAttribute(\"primaryAddress\", primaryIface.getInetAddress());\n            nested.trigger();\n        }\n        \n    }","id":18565,"modified_method":"@Activity( lifecycle = \"nodeScan\", phase = \"detectAgents\" )\n    public void detectAgents(Phase currentPhase, OnmsNode node) {\n        // someday I'll change this to use agentDetectors\n        OnmsIpInterface primaryIface = node.getPrimaryInterface();\n        if (primaryIface.getMonitoredServiceByServiceType(\"SNMP\") != null) {\n            currentPhase.createNestedLifeCycle(\"agentScan\")\n                .setAttribute(\"agentType\", \"SNMP\")\n                .setAttribute(\"node\", node)\n                .setAttribute(\"foreignSource\", node.getForeignSource())\n                .setAttribute(\"foreignId\", node.getForeignId())\n                .setAttribute(\"primaryAddress\", primaryIface.getInetAddress())\n                .trigger();\n        }\n        \n    }","commit_id":"9f162ca26638a60e0a414f0b4c53a107cabee7ea","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setAttribute(String key, Object value) {\n        m_attributes.put(key, value);\n    }","id":18566,"modified_method":"public LifeCycleInstance setAttribute(String key, Object value) {\n        m_attributes.put(key, value);\n        return this;\n    }","commit_id":"9f162ca26638a60e0a414f0b4c53a107cabee7ea","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Activity( lifecycle = \"nodeScan\", phase = \"detectAgents\" )\n    public void detectAgents(Phase currentPhase, OnmsNode node) {\n        // someday I'll change this to use agentDetectors\n        OnmsIpInterface primaryIface = node.getPrimaryInterface();\n        if (primaryIface.getMonitoredServiceByServiceType(\"SNMP\") != null) {\n            LifeCycleInstance nested = currentPhase.createNestedLifeCycle(\"agentScan\");\n            nested.setAttribute(\"agentType\", \"SNMP\");\n            nested.setAttribute(\"node\", node);\n            nested.setAttribute(\"foreignSource\", node.getForeignSource());\n            nested.setAttribute(\"foreignId\", node.getForeignId());\n            nested.setAttribute(\"primaryAddress\", primaryIface.getInetAddress());\n            nested.trigger();\n        }\n        \n    }","id":18567,"modified_method":"@Activity( lifecycle = \"nodeScan\", phase = \"detectAgents\" )\n    public void detectAgents(Phase currentPhase, OnmsNode node) {\n        // someday I'll change this to use agentDetectors\n        OnmsIpInterface primaryIface = node.getPrimaryInterface();\n        if (primaryIface.getMonitoredServiceByServiceType(\"SNMP\") != null) {\n            currentPhase.createNestedLifeCycle(\"agentScan\")\n                .setAttribute(\"agentType\", \"SNMP\")\n                .setAttribute(\"node\", node)\n                .setAttribute(\"foreignSource\", node.getForeignSource())\n                .setAttribute(\"foreignId\", node.getForeignId())\n                .setAttribute(\"primaryAddress\", primaryIface.getInetAddress())\n                .trigger();\n        }\n        \n    }","commit_id":"79e6eec39548fd9d7ba3fc6ca7a62d42f6f1f460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setAttribute(String key, Object value) {\n        m_attributes.put(key, value);\n    }","id":18568,"modified_method":"public LifeCycleInstance setAttribute(String key, Object value) {\n        m_attributes.put(key, value);\n        return this;\n    }","commit_id":"79e6eec39548fd9d7ba3fc6ca7a62d42f6f1f460","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private GitGlobalInstaller() {\n  }","id":18569,"modified_method":"public GitGlobalInstaller(Project project) {\n    super(project);\n  }","commit_id":"9a93cbe62acad080ca60f4e0d6edf16cd6a9474a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean install(VirtualFile vcsRootPath, boolean dryRun) {\n    VirtualFile attributesFile = vcsRootPath.findChild(ATTRIBUTES_FILE);\n    if (attributesFile != null && attributesFile.isDirectory()) {\n      return false;\n    }\n    try {\n      if (attributesFile == null || attributesFile.exists()) {\n        attributesFile = vcsRootPath.createChildData(null, ATTRIBUTES_FILE);\n      }\n      final List<String> lines = StringsIO.readLines(attributesFile.getInputStream());\n\n      if (dryRun) {\n        return ListSequence.fromList(EXTENSIONS).all(new IWhereFilter<String>() {\n          public boolean accept(final String ext) {\n            return ListSequence.fromList(lines).any(new IWhereFilter<String>() {\n              public boolean accept(String line) {\n                return line.matches(\"\\\\s*\\\\*\\\\.\" + ext + \".+merge=mps\\\\s*\");\n              }\n            });\n          }\n        });\n      }\n\n      for (String ext : ListSequence.fromList(EXTENSIONS)) {\n        boolean updated = false;\n        for (int i = 0; i < ListSequence.fromList(lines).count(); i++) {\n          if (ListSequence.fromList(lines).getElement(i).matches(\"\\\\s*\\\\*\\\\.\" + ext + \".*\") && !(ListSequence.fromList(lines).getElement(i).contains(\"merge=mps\"))) {\n            ListSequence.fromList(lines).setElement(i, ListSequence.fromList(lines).getElement(i) + \" merge=mps\");\n            updated = true;\n          }\n        }\n        if (!(updated)) {\n          ListSequence.fromList(lines).addElement(\"*.\" + ext + \" merge=mps\");\n        }\n      }\n\n      StringsIO.writeLines(attributesFile.getOutputStream(null), lines);\n      return true;\n    } catch (IOException e) {\n      return false;\n    }\n  }","id":18570,"modified_method":"@NotNull\n  private static AbstractInstaller.State installForRoot(VirtualFile vcsRootPath, boolean dryRun) {\n    VirtualFile attributesFile = vcsRootPath.findChild(ATTRIBUTES_FILE);\n    if (attributesFile != null && attributesFile.isDirectory()) {\n      return AbstractInstaller.State.NOT_INSTALLED;\n    }\n    try {\n      if (attributesFile == null || !(attributesFile.exists())) {\n        if (dryRun) {\n          return AbstractInstaller.State.NOT_INSTALLED;\n        }\n        attributesFile = vcsRootPath.createChildData(null, ATTRIBUTES_FILE);\n      }\n      final List<String> lines = StringsIO.readLines(attributesFile.getInputStream());\n\n      if (ListSequence.fromList(EXTENSIONS).all(new IWhereFilter<String>() {\n        public boolean accept(final String ext) {\n          return ListSequence.fromList(lines).any(new IWhereFilter<String>() {\n            public boolean accept(String line) {\n              return line.matches(\"\\\\s*\\\\*\\\\.\" + ext + \".+merge=mps\\\\s*\");\n            }\n          });\n        }\n      })) {\n        return AbstractInstaller.State.INSTALLED;\n      }\n\n      for (String ext : ListSequence.fromList(EXTENSIONS)) {\n        boolean addNew = true;\n        for (int i = 0; i < ListSequence.fromList(lines).count(); i++) {\n          if (ListSequence.fromList(lines).getElement(i).matches(\"\\\\s*\\\\*\\\\.\" + ext + \".*\")) {\n            if (ListSequence.fromList(lines).getElement(i).contains(\"merge=mps\")) {\n              if (dryRun) {\n                return AbstractInstaller.State.OUTDATED;\n              }\n            } else {\n              ListSequence.fromList(lines).setElement(i, ListSequence.fromList(lines).getElement(i) + \" merge=mps\");\n            }\n            addNew = false;\n          }\n        }\n        if (addNew) {\n          ListSequence.fromList(lines).addElement(\"*.\" + ext + \" merge=mps\");\n        }\n      }\n\n      StringsIO.writeLines(attributesFile.getOutputStream(null), lines);\n      return AbstractInstaller.State.INSTALLED;\n    } catch (IOException e) {\n      return AbstractInstaller.State.NOT_INSTALLED;\n    }\n  }","commit_id":"9a93cbe62acad080ca60f4e0d6edf16cd6a9474a","url":"https://github.com/JetBrains/MPS"},{"original_method":"private GitRepositoriesInstaller() {\n  }","id":18571,"modified_method":"public GitRepositoriesInstaller(Project project) {\n    super(project);\n  }","commit_id":"9a93cbe62acad080ca60f4e0d6edf16cd6a9474a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean isApplicable(Project project) {\n    return Sequence.fromIterable(Sequence.fromArray(project.getComponent(ProjectLevelVcsManager.class).getAllVcsRoots())).any(new IWhereFilter<VcsRoot>() {\n      public boolean accept(VcsRoot root) {\n        return \"Git\".equals(root.vcs.getName()) || \"svn\".equals(root.vcs.getName());\n      }\n    });\n  }","id":18572,"modified_method":"public static boolean isApplicable(Project project) {\n    return Sequence.fromIterable(getInstallers(project)).any(new IWhereFilter<AbstractInstaller>() {\n      public boolean accept(AbstractInstaller i) {\n        return i.getCurrentState() != AbstractInstaller.State.INSTALLED;\n      }\n    });\n  }","commit_id":"9a93cbe62acad080ca60f4e0d6edf16cd6a9474a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void installWhereNeeded(Project project) {\n    String globalMessage = GitGlobalInstaller.install(project);\n    if (globalMessage != null) {\n      GitRepositoriesInstaller.installForRepositoriesIfNeeded(project, globalMessage);\n    }\n    SvnInstaller.install(project);\n  }","id":18573,"modified_method":"public static void installWhereNeeded(Project project) {\n    Sequence.fromIterable(getInstallers(project)).visitAll(new IVisitor<AbstractInstaller>() {\n      public void visit(AbstractInstaller i) {\n        i.install();\n      }\n    });\n  }","commit_id":"9a93cbe62acad080ca60f4e0d6edf16cd6a9474a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void install(Project project) {\n    File configFile = new File(WorkbenchPathManager.getUserHome() + File.separator + \".subversion\" + File.separator + \"config\");\n    if (!(configFile.exists())) {\n      Messages.showErrorDialog(project, \"Could not find Subversion configuration file (~/.subversion/config).\", \"Subversion Config Not Found\");\n      return;\n    }\n    if (!(configFile.canWrite()) && configFile.getParentFile().canWrite()) {\n      Messages.showErrorDialog(project, \"Can't write to Subversion config (~/.subversion).\", \"Can't Write\");\n      return;\n    }\n\n    List<String> lines = StringsIO.readLines(configFile);\n    int lineToReplace = -1;\n    for (int i = 0; i < ListSequence.fromList(lines).count(); i++) {\n      String line = ListSequence.fromList(lines).getElement(i);\n      if (line.trim().startsWith(\"diff3-cmd\")) {\n        // Some diff3 is already present \n\n        Matcher matcher = Pattern.compile(\"^\\\\s*diff3-cmd\\\\s*=\\\\s*(.+)$\").matcher(line);\n        if (matcher.matches()) {\n          String cmd = matcher.group(1);\n\n          if (cmd.contains(\"mps-merger.\")) {\n            // already installed \n            lineToReplace = i;\n            break;\n          } else {\n            // another is installed \n\n            // TODO integrate with user's merger \n            lineToReplace = i;\n            break;\n          }\n        }\n      }\n    }\n\n    if (lineToReplace == -1) {\n      String commented = ListSequence.fromList(lines).findFirst(new IWhereFilter<String>() {\n        public boolean accept(String line) {\n          return line.trim().startsWith(\"# diff3-cmd\");\n        }\n      });\n      if (commented != null) {\n        lineToReplace = ListSequence.fromList(lines).indexOf(commented);\n      } else {\n        int helpersStart = ListSequence.fromList(lines).indexOf(ListSequence.fromList(lines).findFirst(new IWhereFilter<String>() {\n          public boolean accept(String line) {\n            return line.trim().equals(\"[helpers]\");\n          }\n        }));\n        if (helpersStart != -1) {\n          // [helpers] section is present, finding next section start \n          int nextStart = ListSequence.fromList(lines).indexOf(ListSequence.fromList(lines).skip(helpersStart + 1).findFirst(new IWhereFilter<String>() {\n            public boolean accept(String line) {\n              return line.trim().startsWith(\"[\");\n            }\n          }));\n          if (nextStart == -1) {\n            // [helpers] is the last section \n            ListSequence.fromList(lines).addElement(\"\");\n            lineToReplace = ListSequence.fromList(lines).count() - 1;\n          } else {\n            Iterable<String> section = ListSequence.fromList(lines).page(helpersStart + 1, nextStart);\n            // Finding last non-comment line \n            int nonComment = Sequence.fromIterable(section).indexOf(Sequence.fromIterable(section).findLast(new IWhereFilter<String>() {\n              public boolean accept(String line) {\n                return !(line.trim().startsWith(\"#\")) && !(line.trim().isEmpty());\n              }\n            }));\n            if (nonComment == -1) {\n              lineToReplace = helpersStart + 1;\n            } else {\n              lineToReplace = nonComment + helpersStart + 1;\n            }\n            ListSequence.fromList(lines).insertElement(lineToReplace, \"\");\n          }\n        }\n      }\n    }\n\n    String script = createScript(project, configFile.getParentFile());\n    if (script != null) {\n      String line = String.format(\"diff3-cmd = %s\", script);\n      if (lineToReplace == -1) {\n        ListSequence.fromList(lines).addElement(\"[helpers]\");\n        ListSequence.fromList(lines).addElement(line);\n      }\n      ListSequence.fromList(lines).setElement(lineToReplace, line);\n    }\n    try {\n      StringsIO.writeLines(configFile, lines);\n      Messages.showInfoMessage(project, \"Successfully installed MPS merger for subversion\", \"Subversion Merger Installed\");\n    } catch (IOException e) {\n      Messages.showErrorDialog(project, \"Could not update Subversion configuration file (~/.subversion/config).\" + e.getMessage(), \"Could Not Save Config\");\n      return;\n    }\n  }","id":18574,"modified_method":"public SvnInstaller(Project project) {\n    super(project);\n    myConfigDir = new File(WorkbenchPathManager.getUserHome() + File.separator + \".subversion\");\n    myConfigFile = new File(myConfigDir, \"config\");\n  }","commit_id":"9a93cbe62acad080ca60f4e0d6edf16cd6a9474a","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected Creole10Parser buildParser(String sourceCode)\n\t\tthrows IOException {\n\n\t\tANTLRInputStream input = new ANTLRInputStream(\n\t\t\tnew ClassPathResource(sourceCode).getInputStream());\n\n\t\tCreole10Lexer lexer = new Creole10Lexer(input);\n\n\t\tCommonTokenStream tokens = new CommonTokenStream(lexer);\n\n\t\treturn new Creole10Parser(tokens);\n\t}","id":18575,"modified_method":"protected Creole10Parser getCreole10Parser(String fileName)\n\t\tthrows IOException {\n\n\t\tClass<?> clazz = getClass();\n\n\t\tInputStream inputStream = clazz.getResourceAsStream(\n\t\t\t\"dependencies/\" + fileName);\n\n\t\tANTLRInputStream antlrInputStream = new ANTLRInputStream(inputStream);\n\n\t\tCreole10Lexer creole10Lexer = new Creole10Lexer(antlrInputStream);\n\n\t\tCommonTokenStream commonTokenStream = new CommonTokenStream(\n\t\t\tcreole10Lexer);\n\n\t\treturn new Creole10Parser(commonTokenStream);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleImageTagWithNoAlternative() {\n\t\tWikiPageNode root = parseFile(IMAGE_FILES_PREFIX + \"image-2.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tParagraphNode p = (ParagraphNode) root.getChildASTNode(0);\n\t\tLineNode line = (LineNode) p.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, line.getChildASTNodesCount());\n\n\t\tImageNode image = (ImageNode) line.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"link\", image.getLink());\n\n\t\tCollectionNode alternativeElements = image.getAltNode();\n\n\t\tAssert.assertNull(alternativeElements);\n\t}","id":18576,"modified_method":"public void testParseSimpleImageTagWithNoAlternative() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"image-2.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, lineNode.getChildASTNodesCount());\n\n\t\tImageNode imageNode = (ImageNode)lineNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"link\", imageNode.getLink());\n\n\t\tCollectionNode collectionNode = imageNode.getAltNode();\n\n\t\tAssert.assertNull(collectionNode);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneOrderedItemFirstLevel() {\n\t\texecFirstLevelItemListTests(LISTS_FILES_PREFIX + \"list-7.creole\", 1);\n\t}","id":18577,"modified_method":"public void testParseCorrectlyOneOrderedItemFirstLevel() {\n\t\texecuteFirstLevelItemListTests(\"list-7.creole\", 1);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseMultilineTextParagraph() {\n\t\tWikiPageNode root = parseFile(TEXT_FILES_PREFIX + \"text-2.creole\");\n\n\t\tAssert.assertNotNull(root);\n\t\tAssert.assertEquals(1, root.getChildASTNodesCount());\n\n\t\tParagraphNode paragraph = (ParagraphNode) root.getChildASTNode(0);\n\t\tList<ASTNode> lines = paragraph.getChildASTNodes();\n\n\t\tAssert.assertEquals(10, lines.size());\n\n\t\tint counter = 0;\n\t\tfor (ASTNode l : lines) {\n\t\t\tLineNode line = (LineNode) l;\n\n\t\t\tAssert.assertEquals(1, line.getChildASTNodesCount());\n\n\t\t\tUnformattedTextNode textNode =\n\t\t\t\t(UnformattedTextNode) line.getChildASTNode(\n\t\t\t\t\t0);\n\t\t\tUnformattedTextNode text =\n\t\t\t\t(UnformattedTextNode) textNode.getChildASTNode(\n\t\t\t\t\t0);\n\n\t\t\tAssert.assertEquals(\"Simple P\" + counter++, text.getContent());\n\t\t}\n\t}","id":18578,"modified_method":"public void testParseMultilineTextParagraph() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"text-2.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\t\tAssert.assertEquals(1, wikiPageNode.getChildASTNodesCount());\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tList<ASTNode> astNodes = paragraphNode.getChildASTNodes();\n\n\t\tAssert.assertEquals(10, astNodes.size());\n\n\t\tfor (int i = 0; i < astNodes.size(); i++) {\n\t\t\tASTNode astNode = astNodes.get(i);\n\n\t\t\tLineNode lineNode = (LineNode)astNode;\n\n\t\t\tAssert.assertEquals(1, lineNode.getChildASTNodesCount());\n\n\t\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t\t(UnformattedTextNode)lineNode.getChildASTNode(0);\n\n\t\t\tunformattedTextNode =\n\t\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\t\tAssert.assertEquals(\n\t\t\t\t\"Simple P\" + i, unformattedTextNode.getContent());\n\t\t}\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextBoldAndItalics() {\n\t\tWikiPageNode root = parseFile(TEXT_FILES_PREFIX + \"text-6.creole\");\n\n\t\tAssert.assertNotNull(root);\n\t\tAssert.assertEquals(1, root.getChildASTNodesCount());\n\n\t\tParagraphNode paragraph = (ParagraphNode) root.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, paragraph.getChildASTNodesCount());\n\n\t\tLineNode line = (LineNode) paragraph.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, line.getChildASTNodesCount());\n\n\t\tUnformattedTextNode text =\n\t\t\t(UnformattedTextNode) line.getChildASTNode(0);\n\t\tUnformattedTextNode t = (UnformattedTextNode) text.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"Text \", t.getContent());\n\n\t\tBoldTextNode boldText = (BoldTextNode) line.getChildASTNode(1);\n\n\t\tAssert.assertEquals(1, boldText.getChildASTNodesCount());\n\n\t\tItalicTextNode it = (ItalicTextNode) boldText.getChildASTNode(0);\n\t\tCollectionNode n = (CollectionNode) it.getChildASTNode(0);\n\t\tUnformattedTextNode node = (UnformattedTextNode) n.get(0);\n\n\t\tAssert.assertEquals(\"ItalicAndBold\", node.getContent());\n\t}","id":18579,"modified_method":"public void testParseSimpleTextBoldAndItalics() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"text-6.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\t\tAssert.assertEquals(1, wikiPageNode.getChildASTNodesCount());\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, paragraphNode.getChildASTNodesCount());\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, lineNode.getChildASTNodesCount());\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)lineNode.getChildASTNode(0);\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"Text \", unformattedTextNode.getContent());\n\n\t\tBoldTextNode boldTextNode = (BoldTextNode)lineNode.getChildASTNode(1);\n\n\t\tAssert.assertEquals(1, boldTextNode.getChildASTNodesCount());\n\n\t\tItalicTextNode italicTextNode =\n\t\t\t(ItalicTextNode)boldTextNode.getChildASTNode(0);\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)italicTextNode.getChildASTNode(0);\n\n\t\tunformattedTextNode = (UnformattedTextNode)collectionNode.get(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"ItalicAndBold\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseNoWikiBlockMultiple() {\n\t\tWikiPageNode root = parseFile(\n\t\t\tNOWIKI_FILES_PREFIX + \"nowikiblock-2.creole\");\n\n\t\tAssert.assertEquals(3, root.getChildASTNodesCount());\n\t}","id":18580,"modified_method":"public void testParseNoWikiBlockMultiple() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"nowikiblock-2.creole\");\n\n\t\tAssert.assertEquals(3, wikiPageNode.getChildASTNodesCount());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneItemFirstLevel() {\n\t\texecFirstLevelItemListTests(LISTS_FILES_PREFIX + \"list-1.creole\", 1);\n\t}","id":18581,"modified_method":"public void testParseCorrectlyOneItemFirstLevel() {\n\t\texecuteFirstLevelItemListTests(\"list-1.creole\", 1);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseTableOneRowOneColumn() {\n\t\tWikiPageNode root = parseFile(TABLE_FILES_PREFIX + \"table-1.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tTableNode table = (TableNode) root.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(table);\n\t\tAssert.assertEquals(2, table.getChildASTNodesCount());\n\n\t\tCollectionNode firstRow = (CollectionNode) table.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, firstRow.size());\n\n\t\tTableHeaderNode header = (TableHeaderNode) firstRow.get(0);\n\n\t\tAssert.assertNotNull(header);\n\n\t\tUnformattedTextNode textNode =\n\t\t\t(UnformattedTextNode) header.getChildASTNode(\n\t\t\t\t0);\n\n\t\tAssert.assertNotNull(textNode);\n\t\tAssert.assertEquals(1, textNode.getChildASTNodesCount());\n\n\t\tUnformattedTextNode text =\n\t\t\t(UnformattedTextNode) textNode.getChildASTNode(\n\t\t\t\t0);\n\n\t\tAssert.assertEquals(\"H1\", text.getContent());\n\n\t\tCollectionNode secondRow =\n\t\t\t(CollectionNode) table.getChildASTNodes().get(1);\n\n\t\tAssert.assertEquals(1, secondRow.size());\n\n\t\tTableDataNode cell = (TableDataNode) secondRow.get(0);\n\n\t\tAssert.assertNotNull(cell);\n\n\t\ttextNode = (UnformattedTextNode) cell.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(textNode);\n\t\tAssert.assertEquals(1, textNode.getChildASTNodesCount());\n\n\t\ttext = (UnformattedTextNode) textNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"C1.1\", text.getContent());\n\t}","id":18582,"modified_method":"public void testParseTableOneRowOneColumn() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"table-1.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tTableNode tableNode = (TableNode)wikiPageNode.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(tableNode);\n\t\tAssert.assertEquals(2, tableNode.getChildASTNodesCount());\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)tableNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, collectionNode.size());\n\n\t\tTableHeaderNode tableHeaderNode =\n\t\t\t(TableHeaderNode)collectionNode.get(0);\n\n\t\tAssert.assertNotNull(tableHeaderNode);\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)tableHeaderNode.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(unformattedTextNode);\n\t\tAssert.assertEquals(1, unformattedTextNode.getChildASTNodesCount());\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"H1\", unformattedTextNode.getContent());\n\n\t\tList<ASTNode> astNodes = tableNode.getChildASTNodes();\n\n\t\tcollectionNode = (CollectionNode)astNodes.get(1);\n\n\t\tAssert.assertEquals(1, collectionNode.size());\n\n\t\tTableDataNode tableDataNode = (TableDataNode)collectionNode.get(0);\n\n\t\tAssert.assertNotNull(tableDataNode);\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)tableDataNode.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(unformattedTextNode);\n\t\tAssert.assertEquals(1, unformattedTextNode.getChildASTNodesCount());\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"C1.1\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseHorizontalTwoBlocks() {\n\t\tWikiPageNode root = parseFile(\n\t\t\tHORIZONTAL_FILES_PREFIX + \"horizontal-2.creole\");\n\n\t\tAssert.assertEquals(2, root.getChildASTNodesCount());\n\t\tAssert.assertTrue(root.getChildASTNode(0) instanceof HorizontalNode);\n\t\tAssert.assertTrue(root.getChildASTNode(1) instanceof HorizontalNode);\n\t}","id":18583,"modified_method":"public void testParseHorizontalTwoBlocks() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"horizontal-2.creole\");\n\n\t\tAssert.assertEquals(2, wikiPageNode.getChildASTNodesCount());\n\t\tAssert.assertTrue(\n\t\t\twikiPageNode.getChildASTNode(0) instanceof HorizontalNode);\n\t\tAssert.assertTrue(\n\t\t\twikiPageNode.getChildASTNode(1) instanceof HorizontalNode);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseOnlySpacesContentInImageTag() {\n\t\tWikiPageNode root = parseFile(IMAGE_FILES_PREFIX + \"image-3.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tParagraphNode p = (ParagraphNode) root.getChildASTNode(0);\n\t\tLineNode line = (LineNode) p.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, line.getChildASTNodesCount());\n\n\t\tImageNode image = (ImageNode) line.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"  \", image.getLink());\n\n\t\tCollectionNode alternativeElements = image.getAltNode();\n\n\t\tAssert.assertNull(alternativeElements);\n\t}","id":18584,"modified_method":"public void testParseOnlySpacesContentInImageTag() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"image-3.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, lineNode.getChildASTNodesCount());\n\n\t\tImageNode imageNode = (ImageNode)lineNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"  \", imageNode.getLink());\n\n\t\tCollectionNode collectionNode = imageNode.getAltNode();\n\n\t\tAssert.assertNull(collectionNode);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseEmpyImageTag() {\n\t\tWikiPageNode root = parseFile(IMAGE_FILES_PREFIX + \"image-4.creole\");\n\t\tAssert.assertNotNull(root);\n\n\t\tParagraphNode p = (ParagraphNode) root.getChildASTNode(0);\n\t\tLineNode line = (LineNode) p.getChildASTNode(0);\n\t\tAssert.assertEquals(1, line.getChildASTNodesCount());\n\n\t\tImageNode image = (ImageNode) line.getChildASTNode(0);\n\t\tAssert.assertEquals(\"\", image.getLink());\n\n\t\tCollectionNode alternativeElements = image.getAltNode();\n\t\tAssert.assertNull(alternativeElements);\n\t}","id":18585,"modified_method":"public void testParseEmpyImageTag() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"image-4.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tParagraphNode paragraphNode = (ParagraphNode)\n\t\t\twikiPageNode.getChildASTNode(0);\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, lineNode.getChildASTNodesCount());\n\n\t\tImageNode imageNode = (ImageNode)lineNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(StringPool.BLANK, imageNode.getLink());\n\n\t\tCollectionNode collectionNode = imageNode.getAltNode();\n\n\t\tAssert.assertNull(collectionNode);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyNestedLevels() {\n\t\tUnorderedListNode unorderedListNode =\n\t\t\t(UnorderedListNode) parseListNode(\n\t\t\t\tLISTS_FILES_PREFIX + \"list-4.creole\");\n\n\t\tAssert.assertEquals(7, unorderedListNode.getChildASTNodesCount());\n\n\t\tint sumOfItemsInLevel1 = 0, sumOfItemsInLevel2 = 0,\n\t\t\texpectedSumOfItemsInLevel1 = 3 * 1,\n\t\t\texpectedSumOfItemsInLevel2 = 4 * 2;\n\t\t;\n\n\t\tfor (Object node : unorderedListNode.getChildASTNodes()) {\n\t\t\tUnorderedListItemNode listItem =\n\t\t\t\t(UnorderedListItemNode) node;\n\t\t\tint currentLevel = listItem.getLevel();\n\n\t\t\tif (currentLevel == 1) {\n\t\t\t\tsumOfItemsInLevel1 += currentLevel;\n\t\t\t}\n\t\t\telse if (currentLevel == 2) {\n\t\t\t\tsumOfItemsInLevel2 += currentLevel;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tAssert.fail(\"Parsed has not been achieved correctly\");\n\t\t\t}\n\t\t}\n\n\t\tAssert.assertEquals(sumOfItemsInLevel1, expectedSumOfItemsInLevel1);\n\t\tAssert.assertEquals(sumOfItemsInLevel2, expectedSumOfItemsInLevel2);\n\t}","id":18586,"modified_method":"public void testParseCorrectlyNestedLevels() {\n\t\tUnorderedListNode unorderedListNode =\n\t\t\t(UnorderedListNode)parseBaseListNode(\"list-4.creole\");\n\n\t\tAssert.assertEquals(7, unorderedListNode.getChildASTNodesCount());\n\n\t\tint level1Count = 0;\n\t\tint level2Count = 0;\n\n\t\tfor (ASTNode astNode : unorderedListNode.getChildASTNodes()) {\n\t\t\tUnorderedListItemNode unorderedListItemNode =\n\t\t\t\t(UnorderedListItemNode)astNode;\n\n\t\t\tint currentLevel = unorderedListItemNode.getLevel();\n\n\t\t\tif (currentLevel == 1) {\n\t\t\t\tlevel1Count += currentLevel;\n\t\t\t}\n\t\t\telse if (currentLevel == 2) {\n\t\t\t\tlevel2Count += currentLevel;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tAssert.fail(\"Parsed has not been achieved correctly\");\n\t\t\t}\n\t\t}\n\n\t\tAssert.assertEquals(level1Count, 3 * 1);\n\t\tAssert.assertEquals(level2Count, 4 * 2);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected BaseListNode parseListNode(String file) {\n\t\tWikiPageNode root = parseFile(file);\n\n\t\tBaseListNode listNode =\n\t\t\t(BaseListNode) root.getChildASTNode(0);\n\t\tAssert.assertNotNull(listNode);\n\n\t\treturn listNode;\n\t}","id":18587,"modified_method":"protected BaseListNode parseBaseListNode(String fileName) {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(fileName);\n\n\t\tBaseListNode baseListNode = (BaseListNode)wikiPageNode.getChildASTNode(\n\t\t\t0);\n\n\t\tAssert.assertNotNull(baseListNode);\n\n\t\treturn baseListNode;\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyThreeOrderedItemFirstLevel() {\n\t\texecFirstLevelItemListTests(LISTS_FILES_PREFIX + \"list-9.creole\", 3);\n\t}","id":18588,"modified_method":"public void testParseCorrectlyThreeOrderedItemFirstLevel() {\n\t\texecuteFirstLevelItemListTests(\"list-9.creole\", 3);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleLinkTagWithoutDescription2() {\n\t\tWikiPageNode root = parseFile(LINK_FILES_PREFIX + \"link-3.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tParagraphNode p = (ParagraphNode) root.getChildASTNode(0);\n\t\tLineNode line = (LineNode) p.getChildASTNode(0);\n\n\t\tAssert.assertEquals(5, line.getChildASTNodesCount());\n\n\t\tList<ASTNode> items = line.getChildASTNodes();\n\n\t\tfor (ASTNode n : items) {\n\t\t\tif (n instanceof LinkNode) {\n\t\t\t\tLinkNode link = (LinkNode) n;\n\t\t\t\tAssert.assertEquals(\"L\", link.getLink());\n\t\t\t\tCollectionNode alternativeElements =\n\t\t\t\t\tlink.getAltCollectionNode();\n\t\t\t\tAssert.assertNotNull(alternativeElements);\n\t\t\t\tAssert.assertEquals(1, alternativeElements.size());\n\t\t\t\tUnformattedTextNode textNode =\n\t\t\t\t\t(UnformattedTextNode) alternativeElements.getASTNodes().\n\t\t\t\t\t\tget(0);\n\t\t\t\tCollectionNode textItems =\n\t\t\t\t\t(CollectionNode) textNode.getChildASTNode(\n\t\t\t\t\t\t0);\n\t\t\t\tUnformattedTextNode text =\n\t\t\t\t\t(UnformattedTextNode) textItems.get(0);\n\t\t\t\tAssert.assertEquals(\"A\", text.getContent());\n\t\t\t}\n\t\t}\n\t}","id":18589,"modified_method":"public void testParseSimpleLinkTagWithoutDescription2() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"link-3.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(5, lineNode.getChildASTNodesCount());\n\n\t\tList<ASTNode> astNodes = lineNode.getChildASTNodes();\n\n\t\tfor (ASTNode astNode : astNodes) {\n\t\t\tif (!(astNode instanceof LinkNode)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tLinkNode linkNode = (LinkNode)astNode;\n\n\t\t\tAssert.assertEquals(\"L\", linkNode.getLink());\n\n\t\t\tCollectionNode collectionNode = linkNode.getAltCollectionNode();\n\n\t\t\tAssert.assertNotNull(collectionNode);\n\t\t\tAssert.assertEquals(1, collectionNode.size());\n\n\t\t\tList<ASTNode> collectionNodeASTNodes = collectionNode.getASTNodes();\n\n\t\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t\t(UnformattedTextNode)collectionNodeASTNodes.get(0);\n\n\t\t\tcollectionNode =\n\t\t\t\t(CollectionNode)unformattedTextNode.getChildASTNode(0);\n\n\t\t\tunformattedTextNode = (UnformattedTextNode)collectionNode.get(0);\n\n\t\t\tAssert.assertEquals(\"A\", unformattedTextNode.getContent());\n\t\t}\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void execFirstLevelItemListTests(String file, int numOfItems) {\n\t\tBaseListNode listNode = parseListNode(file);\n\n\t\tAssert.assertEquals(numOfItems, listNode.getChildASTNodesCount());\n\n\t\tfor (Object node : listNode.getChildASTNodes()) {\n\t\t\tItemNode listItem = (ItemNode) node;\n\t\t\tAssert.assertNotNull(listItem);\n\t\t\tAssert.assertEquals(1, listItem.getLevel());\n\t\t}\n\t}","id":18590,"modified_method":"protected void executeFirstLevelItemListTests(String fileName, int count) {\n\t\tBaseListNode baseListNode = parseBaseListNode(fileName);\n\n\t\tAssert.assertEquals(count, baseListNode.getChildASTNodesCount());\n\n\t\tfor (ASTNode astNode : baseListNode.getChildASTNodes()) {\n\t\t\tItemNode itemNode = (ItemNode)astNode;\n\n\t\t\tAssert.assertNotNull(itemNode);\n\t\t\tAssert.assertEquals(1, itemNode.getLevel());\n\t\t}\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyItalicContentInListItems() {\n\t\tUnorderedListNode unorderedListNode =\n\t\t\t(UnorderedListNode) parseListNode(\n\t\t\t\tLISTS_FILES_PREFIX + \"list-5.creole\");\n\n\t\tAssert.assertEquals(1, unorderedListNode.getChildASTNodesCount());\n\n\t\tUnorderedListItemNode unorderedItemNode =\n\t\t\t(UnorderedListItemNode) unorderedListNode.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(unorderedItemNode);\n\t\tAssert.assertEquals(2, unorderedItemNode.getChildASTNodesCount());\n\n\t\tFormattedTextNode italicTextContent =\n\t\t\t(FormattedTextNode) unorderedItemNode.getChildASTNode(1);\n\n\t\tItalicTextNode italicTex =\n\t\t\t(ItalicTextNode) italicTextContent.getChildASTNode(0);\n\t\tCollectionNode child =\n\t\t\t(CollectionNode) italicTex.getChildASTNode(0);\n\t\tUnformattedTextNode text = (UnformattedTextNode) child.get(0);\n\n\t\tAssert.assertEquals(\"abcdefg\", text.getContent());\n\t}","id":18591,"modified_method":"public void testParseCorrectlyItalicContentInListItems() {\n\t\tUnorderedListNode unorderedListNode =\n\t\t\t(UnorderedListNode)parseBaseListNode(\"list-5.creole\");\n\n\t\tAssert.assertEquals(1, unorderedListNode.getChildASTNodesCount());\n\n\t\tUnorderedListItemNode unorderedListItemNode =\n\t\t\t(UnorderedListItemNode)unorderedListNode.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(unorderedListItemNode);\n\t\tAssert.assertEquals(2, unorderedListItemNode.getChildASTNodesCount());\n\n\t\tFormattedTextNode formattedTextNode =\n\t\t\t(FormattedTextNode)unorderedListItemNode.getChildASTNode(1);\n\n\t\tItalicTextNode italicTextNode =\n\t\t\t(ItalicTextNode)formattedTextNode.getChildASTNode(0);\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)italicTextNode.getChildASTNode(0);\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)collectionNode.get(0);\n\n\t\tAssert.assertEquals(\"abcdefg\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyTwoOrderedItemFirstLevel() {\n\t\texecFirstLevelItemListTests(LISTS_FILES_PREFIX + \"list-8.creole\", 2);\n\t}","id":18592,"modified_method":"public void testParseCorrectlyTwoOrderedItemFirstLevel() {\n\t\texecuteFirstLevelItemListTests(\"list-8.creole\", 2);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextParagraph() {\n\t\tWikiPageNode root = parseFile(TEXT_FILES_PREFIX + \"text-1.creole\");\n\n\t\tAssert.assertNotNull(root);\n\t\tAssert.assertEquals(1, root.getChildASTNodesCount());\n\n\t\tParagraphNode paragraph = (ParagraphNode) root.getChildASTNode(0);\n\t\tList<ASTNode> lines = paragraph.getChildASTNodes();\n\n\t\tAssert.assertEquals(1, lines.size());\n\n\t\tLineNode line = (LineNode) paragraph.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, line.getChildASTNodesCount());\n\n\t\tUnformattedTextNode textNode =\n\t\t\t(UnformattedTextNode) line.getChildASTNode(\n\t\t\t\t0);\n\t\tUnformattedTextNode text =\n\t\t\t(UnformattedTextNode) textNode.getChildASTNode(\n\t\t\t\t0);\n\n\t\tAssert.assertEquals(\"Simple paragraph\", text.getContent());\n\t}","id":18593,"modified_method":"public void testParseSimpleTextParagraph() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"text-1.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\t\tAssert.assertEquals(1, wikiPageNode.getChildASTNodesCount());\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tList<ASTNode> astNodes = paragraphNode.getChildASTNodes();\n\n\t\tAssert.assertEquals(1, astNodes.size());\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, lineNode.getChildASTNodesCount());\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)lineNode.getChildASTNode(0);\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"Simple paragraph\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextWithBold() {\n\t\tWikiPageNode root = parseFile(TEXT_FILES_PREFIX + \"text-4.creole\");\n\n\t\tAssert.assertNotNull(root);\n\t\tAssert.assertEquals(1, root.getChildASTNodesCount());\n\n\t\tParagraphNode paragraph = (ParagraphNode) root.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, paragraph.getChildASTNodesCount());\n\n\t\tLineNode line = (LineNode) paragraph.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, line.getChildASTNodesCount());\n\n\t\tUnformattedTextNode text =\n\t\t\t(UnformattedTextNode) line.getChildASTNode(0);\n\t\tUnformattedTextNode t = (UnformattedTextNode) text.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"Text with some contents in \", t.getContent());\n\n\t\tBoldTextNode boldTextContent =\n\t\t\t(BoldTextNode) line.getChildASTNode(1);\n\n\t\tFormattedTextNode boldText =\n\t\t\t(FormattedTextNode) boldTextContent.getChildASTNode(0);\n\t\tCollectionNode child =\n\t\t\t(CollectionNode) boldText.getChildASTNode(0);\n\n\t\tUnformattedTextNode unformattedTex = (UnformattedTextNode) child.get(0);\n\t\tAssert.assertEquals(\"bold\", unformattedTex.getContent());\n\t}","id":18594,"modified_method":"public void testParseSimpleTextWithBold() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"text-4.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\t\tAssert.assertEquals(1, wikiPageNode.getChildASTNodesCount());\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, paragraphNode.getChildASTNodesCount());\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, lineNode.getChildASTNodesCount());\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)lineNode.getChildASTNode(0);\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"Text with some content in \", unformattedTextNode.getContent());\n\n\t\tBoldTextNode boldTextContent = (BoldTextNode)lineNode.getChildASTNode(\n\t\t\t1);\n\n\t\tFormattedTextNode formattedTextNode =\n\t\t\t(FormattedTextNode)boldTextContent.getChildASTNode(0);\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)formattedTextNode.getChildASTNode(0);\n\n\t\tunformattedTextNode = (UnformattedTextNode)collectionNode.get(0);\n\n\t\tAssert.assertEquals(\"bold\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleImageTag() {\n\t\tWikiPageNode root = parseFile(IMAGE_FILES_PREFIX + \"image-1.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tParagraphNode p = (ParagraphNode) root.getChildASTNode(0);\n\t\tLineNode line = (LineNode) p.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, line.getChildASTNodesCount());\n\n\t\tImageNode image = (ImageNode) line.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"link\", image.getLink());\n\n\t\tCollectionNode alternativeElements = image.getAltNode();\n\n\t\tAssert.assertNotNull(alternativeElements);\n\t\tAssert.assertEquals(1, alternativeElements.size());\n\n\t\tUnformattedTextNode textNode =\n\t\t\t(UnformattedTextNode) alternativeElements.getASTNodes().get(0);\n\t\tUnformattedTextNode text =\n\t\t\t(UnformattedTextNode) textNode.getChildASTNode(\n\t\t\t\t0);\n\n\t\tAssert.assertEquals(\"alternative text\", text.getContent());\n\t}","id":18595,"modified_method":"public void testParseSimpleImageTag() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"image-1.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, lineNode.getChildASTNodesCount());\n\n\t\tImageNode imageNode = (ImageNode)lineNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"link\", imageNode.getLink());\n\n\t\tCollectionNode collectionNode = imageNode.getAltNode();\n\n\t\tAssert.assertNotNull(collectionNode);\n\t\tAssert.assertEquals(1, collectionNode.size());\n\n\t\tList<ASTNode> astNodes = collectionNode.getASTNodes();\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)astNodes.get(0);\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"alternative text\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseMultipleImageTags() {\n\t\tWikiPageNode root = parseFile(IMAGE_FILES_PREFIX + \"image-5.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tParagraphNode p = (ParagraphNode) root.getChildASTNode(0);\n\t\tLineNode line = (LineNode) p.getChildASTNode(0);\n\n\t\tAssert.assertEquals(5, line.getChildASTNodesCount());\n\n\t\tfor (int i = 0; i < line.getChildASTNodes().size(); ) {\n\t\t\tImageNode image = (ImageNode) line.getChildASTNode(i);\n\t\t\tAssert.assertEquals(\"L\" + ++i, image.getLink());\n\t\t}\n\t}","id":18596,"modified_method":"public void testParseMultipleImageTags() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"image-5.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(5, lineNode.getChildASTNodesCount());\n\n\t\tList<ASTNode> astNodes = lineNode.getChildASTNodes();\n\n\t\tfor (int i = 0; i < astNodes.size();) {\n\t\t\tImageNode imageNode = (ImageNode)astNodes.get(i);\n\n\t\t\tAssert.assertEquals(\"L\" + ++i, imageNode.getLink());\n\t\t}\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseTableMultipleRowsAndCOlumns() {\n\t\tWikiPageNode root = parseFile(TABLE_FILES_PREFIX + \"table-2.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tTableNode table = (TableNode) root.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(table);\n\t\tAssert.assertEquals(4, table.getChildASTNodesCount());\n\n\t\tCollectionNode row = (CollectionNode) table.getChildASTNode(0);\n\n\t\tAssert.assertEquals(4, row.size());\n\n\t\t// test the header\n\t\tfor (int i = 0; i < 4; ++i) {\n\t\t\tTableHeaderNode header = (TableHeaderNode) row.get(i);\n\n\t\t\tAssert.assertNotNull(header);\n\n\t\t\tUnformattedTextNode textNode =\n\t\t\t\t(UnformattedTextNode) header.getChildASTNode(0);\n\n\t\t\tAssert.assertNotNull(textNode);\n\t\t\tAssert.assertEquals(1, textNode.getChildASTNodesCount());\n\n\t\t\tUnformattedTextNode text =\n\t\t\t\t(UnformattedTextNode) textNode.getChildASTNode(\n\t\t\t\t\t0);\n\n\t\t\tAssert.assertEquals(\"H\" + (i + 1), text.getContent());\n\t\t}\n\n\t\t// test the content rows\n\t\tint content = 1;\n\n\t\tfor (int rowIndex = 1; rowIndex < 4; ++rowIndex) {\n\t\t\trow = (CollectionNode) table.getChildASTNode(rowIndex);\n\t\t\tAssert.assertEquals(4, row.size());\n\t\t\tfor (int column = 0; column < 4; ++column) {\n\t\t\t\tTableDataNode cell = (TableDataNode) row.get((column));\n\n\t\t\t\tAssert.assertNotNull(cell);\n\n\t\t\t\tUnformattedTextNode textNode =\n\t\t\t\t\t(UnformattedTextNode) cell.getChildASTNode(0);\n\n\t\t\t\tAssert.assertNotNull(textNode);\n\t\t\t\tAssert.assertEquals(1, textNode.getChildASTNodesCount());\n\n\t\t\t\tUnformattedTextNode text =\n\t\t\t\t\t(UnformattedTextNode) textNode.getChildASTNode(0);\n\n\t\t\t\tAssert.assertEquals(\"C\" + content++, text.getContent());\n\t\t\t}\n\t\t}\n\t}","id":18597,"modified_method":"public void testParseTableMultipleRowsAndCOlumns() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"table-2.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tTableNode tableNode = (TableNode)wikiPageNode.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(tableNode);\n\t\tAssert.assertEquals(4, tableNode.getChildASTNodesCount());\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)tableNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(4, collectionNode.size());\n\n\t\tfor (int i = 0; i < 4; ++i) {\n\t\t\tTableHeaderNode tableHeaderNode =\n\t\t\t\t(TableHeaderNode)collectionNode.get(i);\n\n\t\t\tAssert.assertNotNull(tableHeaderNode);\n\n\t\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t\t(UnformattedTextNode)tableHeaderNode.getChildASTNode(0);\n\n\t\t\tAssert.assertNotNull(unformattedTextNode);\n\t\t\tAssert.assertEquals(1, unformattedTextNode.getChildASTNodesCount());\n\n\t\t\tunformattedTextNode =\n\t\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\t\tAssert.assertEquals(\n\t\t\t\t\"H\" + (i + 1), unformattedTextNode.getContent());\n\t\t}\n\n\t\tint count = 1;\n\n\t\tfor (int row = 1; row < 4; ++row) {\n\t\t\tcollectionNode = (CollectionNode)tableNode.getChildASTNode(row);\n\n\t\t\tAssert.assertEquals(4, collectionNode.size());\n\n\t\t\tfor (int column = 0; column < 4; ++column) {\n\t\t\t\tTableDataNode tableDataNode = (TableDataNode)collectionNode.get(\n\t\t\t\t\tcolumn);\n\n\t\t\t\tAssert.assertNotNull(tableDataNode);\n\n\t\t\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t\t\t(UnformattedTextNode)tableDataNode.getChildASTNode(0);\n\n\t\t\t\tAssert.assertNotNull(unformattedTextNode);\n\t\t\t\tAssert.assertEquals(\n\t\t\t\t\t1, unformattedTextNode.getChildASTNodesCount());\n\n\t\t\t\tunformattedTextNode =\n\t\t\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\t\t\tAssert.assertEquals(\n\t\t\t\t\t\"C\" + count++, unformattedTextNode.getContent());\n\t\t\t}\n\t\t}\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseNoWikiBlockEmpty() {\n\t\tWikiPageNode root = parseFile(\n\t\t\tNOWIKI_FILES_PREFIX + \"nowikiblock-3.creole\");\n\n\t\tNoWikiSectionNode child = (NoWikiSectionNode) root.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"\", child.getContent());\n\t}","id":18598,"modified_method":"public void testParseNoWikiBlockEmpty() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"nowikiblock-3.creole\");\n\n\t\tNoWikiSectionNode noWikiSectionNode =\n\t\t\t(NoWikiSectionNode)wikiPageNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(StringPool.BLANK, noWikiSectionNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOrderedNestedLevels() {\n\t\tOrderedListNode orderedListNode = (OrderedListNode) parseListNode(\n\t\t\tLISTS_FILES_PREFIX + \"list-10.creole\");\n\n\t\tAssert.assertEquals(7, orderedListNode.getChildASTNodesCount());\n\n\t\tint sumOfItemsInLevel1 = 0, sumOfItemsInLevel2 = 0,\n\t\t\texpectedSumOfItemsInLevel1 = 3 * 1,\n\t\t\texpectedSumOfItemsInLevel2 = 4 * 2;\n\n\t\tfor (Object node : orderedListNode.getChildASTNodes()) {\n\t\t\tOrderedListItemNode listItem =\n\t\t\t\t(OrderedListItemNode) node;\n\t\t\tint currentLevel = listItem.getLevel();\n\n\t\t\tif (currentLevel == 1) {\n\t\t\t\tsumOfItemsInLevel1 += currentLevel;\n\t\t\t}\n\t\t\telse if (currentLevel == 2) {\n\t\t\t\tsumOfItemsInLevel2 += currentLevel;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tAssert.fail(\"Parsed has not been achieved correctly\");\n\t\t\t}\n\t\t}\n\n\t\tAssert.assertEquals(sumOfItemsInLevel1, expectedSumOfItemsInLevel1);\n\t\tAssert.assertEquals(sumOfItemsInLevel2, expectedSumOfItemsInLevel2);\n\t}","id":18599,"modified_method":"public void testParseCorrectlyOrderedNestedLevels() {\n\t\tOrderedListNode orderedListNode = (OrderedListNode)parseBaseListNode(\n\t\t\t\"list-10.creole\");\n\n\t\tAssert.assertEquals(7, orderedListNode.getChildASTNodesCount());\n\n\t\tint level1Count = 0;\n\t\tint level2Count = 0;\n\n\t\tfor (ASTNode astNode : orderedListNode.getChildASTNodes()) {\n\t\t\tOrderedListItemNode orderedListItemNode =\n\t\t\t\t(OrderedListItemNode)astNode;\n\n\t\t\tint currentLevel = orderedListItemNode.getLevel();\n\n\t\t\tif (currentLevel == 1) {\n\t\t\t\tlevel1Count += currentLevel;\n\t\t\t}\n\t\t\telse if (currentLevel == 2) {\n\t\t\t\tlevel2Count += currentLevel;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tAssert.fail(\"Parsed has not been achieved correctly\");\n\t\t\t}\n\t\t}\n\n\t\tAssert.assertEquals(level1Count, 3 * 1);\n\t\tAssert.assertEquals(level2Count, 4 * 2);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSimpleEscapedCharacter() {\n\t\tWikiPageNode root = parseFile(ESCAPE_FILES_PREFIX + \"escape-1.creole\");\n\n\t\tAssert.assertNotNull(root);\n\t\tAssert.assertEquals(1, root.getChildASTNodesCount());\n\n\t\tParagraphNode p = (ParagraphNode) root.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, p.getChildASTNodesCount());\n\n\t\tLineNode line = (LineNode) p.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, line.getChildASTNodesCount());\n\n\t\tUnformattedTextNode firstline =\n\t\t\t(UnformattedTextNode) line.getChildASTNode(\n\t\t\t\t0);\n\t\tScapedNode scaped = (ScapedNode) firstline.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"E\", scaped.getContent());\n\t\tCollectionNode notScaped =\n\t\t\t(CollectionNode) line.getChildASTNode(1);\n\n\t\tUnformattedTextNode t = (UnformattedTextNode) notScaped.get(0);\n\t\tAssert.assertEquals(\"SCAPED1\", t.getContent());\n\t}","id":18600,"modified_method":"public void testSimpleEscapedCharacter() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"escape-1.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\t\tAssert.assertEquals(1, wikiPageNode.getChildASTNodesCount());\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, paragraphNode.getChildASTNodesCount());\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, lineNode.getChildASTNodesCount());\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)lineNode.getChildASTNode(0);\n\n\t\tScapedNode scapedNode = (ScapedNode)unformattedTextNode.getChildASTNode(\n\t\t\t0);\n\n\t\tAssert.assertEquals(\"E\", scapedNode.getContent());\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)lineNode.getChildASTNode(1);\n\n\t\tunformattedTextNode = (UnformattedTextNode)collectionNode.get(0);\n\n\t\tAssert.assertEquals(\"SCAPED1\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseHorizontalBlock() {\n\t\tWikiPageNode root = parseFile(\n\t\t\tHORIZONTAL_FILES_PREFIX + \"horizontal-1.creole\");\n\n\t\tAssert.assertEquals(1, root.getChildASTNodesCount());\n\t\tAssert.assertTrue(root.getChildASTNode(0) instanceof HorizontalNode);\n\t}","id":18601,"modified_method":"public void testParseHorizontalBlock() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"horizontal-1.creole\");\n\n\t\tAssert.assertEquals(1, wikiPageNode.getChildASTNodesCount());\n\t\tAssert.assertTrue(\n\t\t\twikiPageNode.getChildASTNode(0) instanceof HorizontalNode);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyTwoItemFirstLevel() {\n\t\texecFirstLevelItemListTests(LISTS_FILES_PREFIX + \"list-2.creole\", 2);\n\t}","id":18602,"modified_method":"public void testParseCorrectlyTwoItemFirstLevel() {\n\t\texecuteFirstLevelItemListTests(\"list-2.creole\", 2);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextWithItalicTextInMultipleLines() {\n\t\tWikiPageNode root = parseFile(TEXT_FILES_PREFIX + \"text-8.creole\");\n\n\t\tAssert.assertNotNull(root);\n\t}","id":18603,"modified_method":"public void testParseSimpleTextWithItalicTextInMultipleLines() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"text-8.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextWithBoldAndItalics() {\n\t\tWikiPageNode root = parseFile(TEXT_FILES_PREFIX + \"text-5.creole\");\n\n\t\tAssert.assertNotNull(root);\n\t\tAssert.assertEquals(1, root.getChildASTNodesCount());\n\n\t\tParagraphNode paragraph = (ParagraphNode) root.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, paragraph.getChildASTNodesCount());\n\n\t\tLineNode line = (LineNode) paragraph.getChildASTNode(0);\n\n\t\tAssert.assertEquals(4, line.getChildASTNodesCount());\n\n\t\tUnformattedTextNode text =\n\t\t\t(UnformattedTextNode) line.getChildASTNode(0);\n\t\tUnformattedTextNode t = (UnformattedTextNode) text.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"Text with some contents in \", t.getContent());\n\n\t\tBoldTextNode boldTextNode = (BoldTextNode) line.getChildASTNode(1);\n\n\t\tAssert.assertEquals(1, boldTextNode.getChildASTNodesCount());\n\n\t\tFormattedTextNode textInBold =\n\t\t\t(FormattedTextNode) boldTextNode.getChildASTNode(0);\n\t\tCollectionNode n = (CollectionNode) textInBold.getChildASTNode(0);\n\t\tUnformattedTextNode node =\n\t\t\t(UnformattedTextNode) n.get(0);\n\n\t\tAssert.assertEquals(\"bold\", node.getContent());\n\t}","id":18604,"modified_method":"public void testParseSimpleTextWithBoldAndItalics() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"text-5.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\t\tAssert.assertEquals(1, wikiPageNode.getChildASTNodesCount());\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, paragraphNode.getChildASTNodesCount());\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(4, lineNode.getChildASTNodesCount());\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)lineNode.getChildASTNode(0);\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"Text with some content in \", unformattedTextNode.getContent());\n\n\t\tBoldTextNode boldTextNode = (BoldTextNode)lineNode.getChildASTNode(1);\n\n\t\tAssert.assertEquals(1, boldTextNode.getChildASTNodesCount());\n\n\t\tFormattedTextNode formattedTextNode =\n\t\t\t(FormattedTextNode)boldTextNode.getChildASTNode(0);\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)formattedTextNode.getChildASTNode(0);\n\n\t\tunformattedTextNode = (UnformattedTextNode)collectionNode.get(0);\n\n\t\tAssert.assertEquals(\"bold\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseNoWikiBlock() {\n\t\tWikiPageNode root = parseFile(\n\t\t\tNOWIKI_FILES_PREFIX + \"nowikiblock-1.creole\");\n\n\t\tAssert.assertEquals(1, root.getChildASTNodesCount());\n\t}","id":18605,"modified_method":"public void testParseNoWikiBlock() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"nowikiblock-1.creole\");\n\n\t\tAssert.assertEquals(1, wikiPageNode.getChildASTNodesCount());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextWithItalics() {\n\t\tWikiPageNode root = parseFile(TEXT_FILES_PREFIX + \"text-3.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tList<ASTNode> sections = root.getChildASTNodes();\n\n\t\tAssert.assertEquals(1, sections.size());\n\n\t\tParagraphNode paragraph = (ParagraphNode) sections.get(0);\n\t\tList<ASTNode> lines = paragraph.getChildASTNodes();\n\n\t\tAssert.assertEquals(1, lines.size());\n\n\t\tLineNode line = (LineNode) paragraph.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, line.getChildASTNodesCount());\n\n\t\tUnformattedTextNode text =\n\t\t\t(UnformattedTextNode) line.getChildASTNode(0);\n\t\tUnformattedTextNode t = (UnformattedTextNode) text.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"Text with some contents in \", t.getContent());\n\n\t\tItalicTextNode italicTextContent =\n\t\t\t(ItalicTextNode) line.getChildASTNode(1);\n\n\t\tFormattedTextNode italicTex =\n\t\t\t(FormattedTextNode) italicTextContent.getChildASTNode(0);\n\t\tCollectionNode child =\n\t\t\t(CollectionNode) italicTex.getChildASTNode(0);\n\t\tUnformattedTextNode unformattedTex = (UnformattedTextNode) child.get(0);\n\n\t\tAssert.assertEquals(\"italic\", unformattedTex.getContent());\n\t}","id":18606,"modified_method":"public void testParseSimpleTextWithItalics() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"text-3.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tList<ASTNode> astNodes = wikiPageNode.getChildASTNodes();\n\n\t\tAssert.assertEquals(1, astNodes.size());\n\n\t\tParagraphNode paragraphNode = (ParagraphNode)astNodes.get(0);\n\n\t\tastNodes = paragraphNode.getChildASTNodes();\n\n\t\tAssert.assertEquals(1, astNodes.size());\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(2, lineNode.getChildASTNodesCount());\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)lineNode.getChildASTNode(0);\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"Text with some content in \", unformattedTextNode.getContent());\n\n\t\tItalicTextNode italicTextNode =\n\t\t\t(ItalicTextNode)lineNode.getChildASTNode(1);\n\n\t\tFormattedTextNode formattedTextNode =\n\t\t\t(FormattedTextNode)italicTextNode.getChildASTNode(0);\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)formattedTextNode.getChildASTNode(0);\n\n\t\tunformattedTextNode = (UnformattedTextNode)collectionNode.get(0);\n\n\t\tAssert.assertEquals(\"italic\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseHorizontalMixedBlocks() {\n\t\tWikiPageNode root = parseFile(\n\t\t\tHORIZONTAL_FILES_PREFIX + \"horizontal-3.creole\");\n\n\t\tAssert.assertEquals(3, root.getChildASTNodesCount());\n\t\tAssert.assertTrue(root.getChildASTNode(1) instanceof HorizontalNode);\n\t}","id":18607,"modified_method":"public void testParseHorizontalMixedBlocks() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"horizontal-3.creole\");\n\n\t\tAssert.assertEquals(3, wikiPageNode.getChildASTNodesCount());\n\t\tAssert.assertTrue(\n\t\t\twikiPageNode.getChildASTNode(1) instanceof HorizontalNode);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleLinkTagWithoutDescription() {\n\t\tWikiPageNode root = parseFile(LINK_FILES_PREFIX + \"link-2.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tParagraphNode p = (ParagraphNode) root.getChildASTNode(0);\n\t\tLineNode line = (LineNode) p.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, line.getChildASTNodesCount());\n\n\t\tLinkNode link = (LinkNode) line.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"link\", link.getLink());\n\t\tAssert.assertNull(link.getAltCollectionNode());\n\t}","id":18608,"modified_method":"public void testParseSimpleLinkTagWithoutDescription() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"link-2.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, lineNode.getChildASTNodesCount());\n\n\t\tLinkNode linkNode = (LinkNode)lineNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"link\", linkNode.getLink());\n\t\tAssert.assertNull(linkNode.getAltCollectionNode());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseNoWikiBlockNonEmpty() {\n\t\tWikiPageNode root = parseFile(\n\t\t\tNOWIKI_FILES_PREFIX + \"nowikiblock-4.creole\");\n\n\t\tNoWikiSectionNode child = (NoWikiSectionNode) root.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"This is a non \\\\empty\\\\ block\", child.getContent());\n\t}","id":18609,"modified_method":"public void testParseNoWikiBlockNonEmpty() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"nowikiblock-4.creole\");\n\n\t\tNoWikiSectionNode noWikiSectionNode =\n\t\t\t(NoWikiSectionNode)wikiPageNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"This is a non \\\\empty\\\\ block\", noWikiSectionNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextWithForcedEndline() {\n\t\tWikiPageNode root = parseFile(TEXT_FILES_PREFIX + \"text-7.creole\");\n\n\t\tAssert.assertNotNull(root);\n\t\tAssert.assertEquals(1, root.getChildASTNodesCount());\n\n\t\tParagraphNode paragraph = (ParagraphNode) root.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, paragraph.getChildASTNodesCount());\n\n\t\tLineNode line = (LineNode) paragraph.getChildASTNode(0);\n\n\t\tAssert.assertEquals(3, line.getChildASTNodesCount());\n\n\t\tUnformattedTextNode text =\n\t\t\t(UnformattedTextNode) line.getChildASTNode(0);\n\t\tUnformattedTextNode ut = (UnformattedTextNode) text.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"Text with \", ut.getContent());\n\n\t\tCollectionNode newLineText = (CollectionNode) line.getChildASTNode(1);\n\n\t\tAssert.assertEquals(1, newLineText.size());\n\t\tAssert.assertTrue(newLineText.get(0) instanceof ForcedEndOfLineNode);\n\n\t\tCollectionNode t = (CollectionNode) line.getChildASTNode(2);\n\n\t\tAssert.assertEquals(\n\t\t\t\"forced line break\",\n\t\t\t((UnformattedTextNode) t.get(0)).getContent());\n\t}","id":18610,"modified_method":"public void testParseSimpleTextWithForcedEndline() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"text-7.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\t\tAssert.assertEquals(1, wikiPageNode.getChildASTNodesCount());\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, paragraphNode.getChildASTNodesCount());\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(3, lineNode.getChildASTNodesCount());\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)lineNode.getChildASTNode(0);\n\n\t\tunformattedTextNode =\n\t\t\t(UnformattedTextNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"Text with \", unformattedTextNode.getContent());\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)lineNode.getChildASTNode(1);\n\n\t\tAssert.assertEquals(1, collectionNode.size());\n\t\tAssert.assertTrue(collectionNode.get(0) instanceof ForcedEndOfLineNode);\n\n\t\tcollectionNode = (CollectionNode)lineNode.getChildASTNode(2);\n\n\t\tunformattedTextNode = (UnformattedTextNode)collectionNode.get(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"forced line break\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleLinkTag() {\n\t\tWikiPageNode root = parseFile(LINK_FILES_PREFIX + \"link-1.creole\");\n\n\t\tAssert.assertNotNull(root);\n\n\t\tParagraphNode p = (ParagraphNode) root.getChildASTNode(0);\n\t\tLineNode line = (LineNode) p.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, line.getChildASTNodesCount());\n\n\t\tLinkNode link = (LinkNode) line.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"link\", link.getLink());\n\n\t\tCollectionNode alternativeElements = link.getAltCollectionNode();\n\n\t\tAssert.assertNotNull(alternativeElements);\n\t\tAssert.assertEquals(1, alternativeElements.size());\n\n\t\tUnformattedTextNode textNode =\n\t\t\t(UnformattedTextNode) alternativeElements.getASTNodes().get(0);\n\t\tCollectionNode textItems = (CollectionNode) textNode.getChildASTNode(0);\n\t\tUnformattedTextNode text = (UnformattedTextNode) textItems.get(0);\n\n\t\tAssert.assertEquals(\"alternative text\", text.getContent());\n\t}","id":18611,"modified_method":"public void testParseSimpleLinkTag() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"link-1.creole\");\n\n\t\tAssert.assertNotNull(wikiPageNode);\n\n\t\tParagraphNode paragraphNode =\n\t\t\t(ParagraphNode)wikiPageNode.getChildASTNode(0);\n\n\t\tLineNode lineNode = (LineNode)paragraphNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(1, lineNode.getChildASTNodesCount());\n\n\t\tLinkNode linkNode = (LinkNode)lineNode.getChildASTNode(0);\n\n\t\tAssert.assertEquals(\"link\", linkNode.getLink());\n\n\t\tCollectionNode collectionNode = linkNode.getAltCollectionNode();\n\n\t\tAssert.assertNotNull(collectionNode);\n\t\tAssert.assertEquals(1, collectionNode.size());\n\n\t\tList<ASTNode> astNodes = collectionNode.getASTNodes();\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)astNodes.get(0);\n\n\t\tCollectionNode unformattedTextNodes =\n\t\t\t(CollectionNode)unformattedTextNode.getChildASTNode(0);\n\n\t\tunformattedTextNode = (UnformattedTextNode)unformattedTextNodes.get(0);\n\n\t\tAssert.assertEquals(\n\t\t\t\"alternative text\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyBoldContentInListItems() {\n\t\tUnorderedListNode unorderedListNode =\n\t\t\t(UnorderedListNode) parseListNode(\n\t\t\t\tLISTS_FILES_PREFIX + \"list-6.creole\");\n\n\t\tAssert.assertEquals(1, unorderedListNode.getChildASTNodesCount());\n\n\t\tUnorderedListItemNode unorderedItemNode =\n\t\t\t(UnorderedListItemNode) unorderedListNode.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(unorderedItemNode);\n\n\t\tFormattedTextNode boldTextContent =\n\t\t\t(FormattedTextNode) unorderedItemNode.getChildASTNode(1);\n\n\t\tBoldTextNode boldText =\n\t\t\t(BoldTextNode) boldTextContent.getChildASTNode(0);\n\t\tCollectionNode child =\n\t\t\t(CollectionNode) boldText.getChildASTNode(0);\n\t\tUnformattedTextNode text = (UnformattedTextNode) child.get(0);\n\n\t\tAssert.assertEquals(\"abcdefg\", text.getContent());\n\t}","id":18612,"modified_method":"public void testParseCorrectlyBoldContentInListItems() {\n\t\tUnorderedListNode unorderedListNode =\n\t\t\t(UnorderedListNode)parseBaseListNode(\"list-6.creole\");\n\n\t\tAssert.assertEquals(1, unorderedListNode.getChildASTNodesCount());\n\n\t\tUnorderedListItemNode unorderedListItemNode =\n\t\t\t(UnorderedListItemNode)unorderedListNode.getChildASTNode(0);\n\n\t\tAssert.assertNotNull(unorderedListItemNode);\n\n\t\tFormattedTextNode formattedTextNode =\n\t\t\t(FormattedTextNode)unorderedListItemNode.getChildASTNode(1);\n\n\t\tBoldTextNode boldTextNode =\n\t\t\t(BoldTextNode)formattedTextNode.getChildASTNode(0);\n\n\t\tCollectionNode collectionNode =\n\t\t\t(CollectionNode)boldTextNode.getChildASTNode(0);\n\n\t\tUnformattedTextNode unformattedTextNode =\n\t\t\t(UnformattedTextNode)collectionNode.get(0);\n\n\t\tAssert.assertEquals(\"abcdefg\", unformattedTextNode.getContent());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyThreeItemFirstLevel() {\n\t\texecFirstLevelItemListTests(LISTS_FILES_PREFIX + \"list-3.creole\", 3);\n\t}","id":18613,"modified_method":"public void testParseCorrectlyThreeItemFirstLevel() {\n\t\texecuteFirstLevelItemListTests(\"list-3.creole\", 3);\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseHeadingBlocksMultiple() {\n\t\tWikiPageNode root = parseFile(\n\t\t\tHEADING_FILES_PREFIX + \"heading-10.creole\");\n\n\t\tAssert.assertEquals(3, root.getChildASTNodesCount());\n\t}","id":18614,"modified_method":"public void testParseHeadingBlocksMultiple() {\n\t\tWikiPageNode wikiPageNode = getWikiPageNode(\"heading-10.creole\");\n\n\t\tAssert.assertEquals(3, wikiPageNode.getChildASTNodesCount());\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyThreeNoWikiBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<pre>1111<\/pre><pre>2222<\/pre><pre>3333<\/pre>\",\n\t\t\ttranslate(NOWIKI_FILES_PREFIX + \"nowikiblock-2.creole\"));\n\t}","id":18615,"modified_method":"public void testParseCorrectlyThreeNoWikiBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<pre>1111<\/pre><pre>2222<\/pre><pre>3333<\/pre>\",\n\t\t\ttranslate(\"nowikiblock-2.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyNoClosedFirstHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h1>This is a non closed heading<\/h1>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-3.creole\"));\n\t}","id":18616,"modified_method":"public void testParseCorrectlyNoClosedFirstHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h1>This is a non closed heading<\/h1>\",\n\t\t\ttranslate(\"heading-3.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneEmptyNoWikiBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<pre><\/pre>\",\n\t\t\ttranslate(NOWIKI_FILES_PREFIX + \"nowikiblock-3.creole\"));\n\t}","id":18617,"modified_method":"public void testParseCorrectlyOneEmptyNoWikiBlock() {\n\t\tAssert.assertEquals(\"<pre><\/pre>\", translate(\"nowikiblock-3.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneOrderedItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ol><li>ABCDEFG<\/li><\/ol>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-7.creole\"));\n\t}","id":18618,"modified_method":"public void testParseCorrectlyOneOrderedItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ol><li>ABCDEFG<\/li><\/ol>\", translate(\"list-7.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneEmptyFirstHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h1>  <\/h1>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-2.creole\"));\n\t}","id":18619,"modified_method":"public void testParseCorrectlyOneEmptyFirstHeadingBlock() {\n\t\tAssert.assertEquals(\"<h1>  <\/h1>\", translate(\"heading-2.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseMultilineTextParagraph() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Simple P0 Simple P1 Simple P2 Simple P3 Simple P4 \" +\n\t\t\t\"Simple P5 Simple P6 Simple P7 Simple P8 Simple P9 <\/p>\",\n\t\t\ttranslate(TEXT_FILES_PREFIX + \"text-2.creole\"));\n\t}","id":18620,"modified_method":"public void testParseMultilineTextParagraph() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Simple P0 Simple P1 Simple P2 Simple P3 Simple P4 Simple P5 \" +\n\t\t\t\t\"Simple P6 Simple P7 Simple P8 Simple P9 <\/p>\",\n\t\t\ttranslate(\"text-2.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseOnlySpacesContentInImageTag() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"L1\\\" alt=\\\"A1\\\"/><img src=\\\"L2\\\" alt=\\\"A2\\\"/>\"  +\n\t\t\t\"<img src=\\\"L3\\\" alt=\\\"A3\\\"/><img src=\\\"L4\\\" alt=\\\"A4\\\"/>\" + \"\" +\n\t\t\t\"<img src=\\\"L5\\\" alt=\\\"A5\\\"/> <\/p>\",\n\t\t\ttranslate(IMAGE_FILES_PREFIX + \"image-5.creole\"));\n\t}","id":18621,"modified_method":"public void testParseOnlySpacesContentInImageTag() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"L1\\\" alt=\\\"A1\\\"/><img src=\\\"L2\\\" alt=\\\"A2\\\"/>\"  +\n\t\t\t\t\"<img src=\\\"L3\\\" alt=\\\"A3\\\"/><img src=\\\"L4\\\" alt=\\\"A4\\\"/>\" +\n\t\t\t\t\t\"<img src=\\\"L5\\\" alt=\\\"A5\\\"/> <\/p>\",\n\t\t\ttranslate(\"image-5.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseImageInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><img src=\\\"imageLink\\\" alt=\\\"altText\\\"/><\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-16.creole\"));\n\t}","id":18622,"modified_method":"public void testParseImageInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><img src=\\\"imageLink\\\" alt=\\\"altText\\\"/><\/li><\/ul>\",\n\t\t\ttranslate(\"list-16.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyThreeOrderedItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ol><li>1<\/li><li>2<\/li><li>3<\/li><\/ol>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-9.creole\"));\n\t}","id":18623,"modified_method":"public void testParseCorrectlyThreeOrderedItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ol><li>1<\/li><li>2<\/li><li>3<\/li><\/ol>\",\n\t\t\ttranslate(\"list-9.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleImageTagWithNoAlternative() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"link\\\" /> <\/p>\",\n\t\t\ttranslate(IMAGE_FILES_PREFIX + \"image-2.creole\"));\n\t}","id":18624,"modified_method":"public void testParseSimpleImageTagWithNoAlternative() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"link\\\" /> <\/p>\", translate(\"image-2.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseEmpyImageTag() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"\\\" /> <\/p>\",\n\t\t\ttranslate(IMAGE_FILES_PREFIX + \"image-4.creole\"));\n\t}","id":18625,"modified_method":"public void testParseEmpyImageTag() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"\\\" /> <\/p>\", translate(\"image-4.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTranslateOneNoWikiBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<pre>\\t//This// does **not** get [[formatted]]<\/pre>\",\n\t\t\ttranslate(NOWIKI_FILES_PREFIX + \"nowikiblock-1.creole\"));\n\t}","id":18626,"modified_method":"public void testTranslateOneNoWikiBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<pre>\\t//This// does **not** get [[formatted]]<\/pre>\",\n\t\t\ttranslate(\"nowikiblock-1.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneNonEmptySecondHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h2>Level 2<\/h2>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-4.creole\"));\n\t}","id":18627,"modified_method":"public void testParseCorrectlyOneNonEmptySecondHeadingBlock() {\n\t\tAssert.assertEquals(\"<h2>Level 2<\/h2>\", translate(\"heading-4.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleImageTag() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"link\\\" alt=\\\"alternative text\\\"/> <\/p>\",\n\t\t\ttranslate(IMAGE_FILES_PREFIX + \"image-1.creole\"));\n\t}","id":18628,"modified_method":"public void testParseSimpleImageTag() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"link\\\" alt=\\\"alternative text\\\"/> <\/p>\",\n\t\t\ttranslate(\"image-1.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneEmptyThirdHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h3>  <\/h3>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-8.creole\"));\n\t}","id":18629,"modified_method":"public void testParseCorrectlyOneEmptyThirdHeadingBlock() {\n\t\tAssert.assertEquals(\"<h3>  <\/h3>\", translate(\"heading-8.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseNoWikiInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><pre>This is nowiki inside a list item<\/pre><\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-14.creole\"));\n\t}","id":18630,"modified_method":"public void testParseNoWikiInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><pre>This is nowiki inside a list item<\/pre><\/li><\/ul>\",\n\t\t\ttranslate(\"list-14.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testSimpleEscapedCharacter() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>ESCAPED1 Esto no está escaped <\/p>\",\n\t\t\ttranslate(ESCAPE_FILES_PREFIX + \"escape-1.creole\"));\n\t}","id":18631,"modified_method":"public void testSimpleEscapedCharacter() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>ESCAPED1 Esto no está escaped <\/p>\",\n\t\t\ttranslate(\"escape-1.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyTwoItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>1<\/li><li>2<\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-2.creole\"));\n\t}","id":18632,"modified_method":"public void testParseCorrectlyTwoItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>1<\/li><li>2<\/li><\/ul>\", translate(\"list-2.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyMixedHorizontalBlocks() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h1>Before Horizontal section<\/h1><hr/>\" +\n\t\t\t\"<pre>\\tNo wiki section after Horizontal section<\/pre>\",\n\t\t\ttranslate(HORIZONTAL_FILES_PREFIX + \"horizontal-3.creole\"));\n\t}","id":18633,"modified_method":"public void testParseCorrectlyMixedHorizontalBlocks() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h1>Before Horizontal section<\/h1><hr/><pre>\\tNo wiki section \" +\n\t\t\t\t\"after Horizontal section<\/pre>\",\n\t\t\ttranslate(\"horizontal-3.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testEscapedEscapedCharacter() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>~&#034;~ is escaped&#034; <\/p>\",\n\t\t\ttranslate(ESCAPE_FILES_PREFIX + \"escape-2.creole\"));\n\t}","id":18634,"modified_method":"public void testEscapedEscapedCharacter() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>~&#034;~ is escaped&#034; <\/p>\", translate(\"escape-2.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyTwoHorizontalBlocks() {\n\t\tAssert.assertEquals(\n\t\t\t\"<hr/><hr/>\",\n\t\t\ttranslate(HORIZONTAL_FILES_PREFIX + \"horizontal-2.creole\"));\n\t}","id":18635,"modified_method":"public void testParseCorrectlyTwoHorizontalBlocks() {\n\t\tAssert.assertEquals(\"<hr/><hr/>\", translate(\"horizontal-2.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseLinkInListItemMixedText() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>This is an item with a link <a href=\\\"l\\\">a<\/a> \" + \"\" +\n\t\t\t\"inside text<\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-12.creole\"));\n\t}","id":18636,"modified_method":"public void testParseLinkInListItemMixedText() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>This is an item with a link <a href=\\\"l\\\">a<\/a> inside \" +\n\t\t\t\t\"text<\/li><\/ul>\",\n\t\t\ttranslate(\"list-12.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleLinkTagWithoutDescription() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><a href=\\\"link\\\">link<\/a> <\/p>\",\n\t\t\ttranslate(LINK_FILES_PREFIX + \"link-2.creole\"));\n\t}","id":18637,"modified_method":"public void testParseSimpleLinkTagWithoutDescription() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><a href=\\\"link\\\">link<\/a> <\/p>\", translate(\"link-2.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseLinkInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><a href=\\\"l\\\">a<\/a><\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-13.creole\"));\n\t}","id":18638,"modified_method":"public void testParseLinkInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><a href=\\\"l\\\">a<\/a><\/li><\/ul>\",\n\t\t\ttranslate(\"list-13.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOrderedNestedLevels() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ol><li>a<\/li><ol><li>a.1<\/li><\/ol><li>b<\/li><ol><li>b.1<\/li>\" +\n\t\t\t\"<li>b.2<\/li><li>b.3<\/li><\/ol><li>c<\/li><\/ol>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-10.creole\"));\n\t}","id":18639,"modified_method":"public void testParseCorrectlyOrderedNestedLevels() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ol><li>a<\/li><ol><li>a.1<\/li><\/ol><li>b<\/li><ol><li>b.1<\/li>\" +\n\t\t\t\t\"<li>b.2<\/li><li>b.3<\/li><\/ol><li>c<\/li><\/ol>\",\n\t\t\ttranslate(\"list-10.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseNestedLists() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li> 1<\/li><li> 2<\/li><ul><li> 2.1<\/li><ul><li> 2.1.1<\/li>\" +\n\t\t\t\"<ul><li> 2.1.1.1<\/li><li> 2.1.1.2<\/li><\/ul><li> 2.1.2<\/li><li>\" +\n\t\t\t\" 2.1.3<\/li><\/ul><li> 2.2<\/li><li> 2.3<\/li><\/ul><li>3<\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-18.creole\"));\n\t}","id":18640,"modified_method":"public void testParseNestedLists() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li> 1<\/li><li> 2<\/li><ul><li> 2.1<\/li><ul><li> 2.1.1<\/li>\" +\n\t\t\t\t\"<ul><li> 2.1.1.1<\/li><li> 2.1.1.2<\/li><\/ul><li> 2.1.2<\/li>\" +\n\t\t\t\t\t\"<li> 2.1.3<\/li><\/ul><li> 2.2<\/li><li> 2.3<\/li><\/ul><li>3\" +\n\t\t\t\t\t\t\"<\/li><\/ul>\",\n\t\t\ttranslate(\"list-18.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyItalicContentInListItems() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li> <em>abcdefg<\/em><\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-5.creole\"));\n\t}","id":18641,"modified_method":"public void testParseCorrectlyItalicContentInListItems() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li> <em>abcdefg<\/em><\/li><\/ul>\", translate(\"list-5.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextParagraph() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Simple paragraph <\/p>\",\n\t\t\ttranslate(TEXT_FILES_PREFIX + \"text-1.creole\"));\n\t}","id":18642,"modified_method":"public void testParseSimpleTextParagraph() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Simple paragraph <\/p>\", translate(\"text-1.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseMultipleImageTags() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"L1\\\" alt=\\\"A1\\\"/><img src=\\\"L2\\\" alt=\\\"A2\\\"/>\" +\n\t\t\t\"<img src=\\\"L3\\\" alt=\\\"A3\\\"/><img src=\\\"L4\\\" alt=\\\"A4\\\"/>\" +\n\t\t\t\"<img src=\\\"L5\\\" alt=\\\"A5\\\"/> <\/p>\",\n\t\t\ttranslate(IMAGE_FILES_PREFIX + \"image-5.creole\"));\n\t}","id":18643,"modified_method":"public void testParseMultipleImageTags() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><img src=\\\"L1\\\" alt=\\\"A1\\\"/><img src=\\\"L2\\\" alt=\\\"A2\\\"/><img \" +\n\t\t\t\t\"src=\\\"L3\\\" alt=\\\"A3\\\"/><img src=\\\"L4\\\" alt=\\\"A4\\\"/><img \" +\n\t\t\t\t\t\"src=\\\"L5\\\" alt=\\\"A5\\\"/> <\/p>\",\n\t\t\ttranslate(\"image-5.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneNonEmptyNoWikiBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<pre>This is a non \\\\empty\\\\ block<\/pre>\",\n\t\t\ttranslate(NOWIKI_FILES_PREFIX + \"nowikiblock-4.creole\"));\n\t}","id":18644,"modified_method":"public void testParseCorrectlyOneNonEmptyNoWikiBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<pre>This is a non \\\\empty\\\\ block<\/pre>\",\n\t\t\ttranslate(\"nowikiblock-4.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyThreeItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>1<\/li><li>2<\/li><li>3<\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-3.creole\"));\n\t}","id":18645,"modified_method":"public void testParseCorrectlyThreeItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>1<\/li><li>2<\/li><li>3<\/li><\/ul>\",\n\t\t\ttranslate(\"list-3.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleLinkTag() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><a href=\\\"link\\\">alternative text<\/a> <\/p>\",\n\t\t\ttranslate(LINK_FILES_PREFIX + \"link-1.creole\"));\n\t}","id":18646,"modified_method":"public void testParseSimpleLinkTag() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><a href=\\\"link\\\">alternative text<\/a> <\/p>\",\n\t\t\ttranslate(\"link-1.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseImageAndTextInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><img src=\\\"imageLink\\\" alt=\\\"altText\\\"/> end.<\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-17.creole\"));\n\t}","id":18647,"modified_method":"public void testParseImageAndTextInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><img src=\\\"imageLink\\\" alt=\\\"altText\\\"/> end.<\/li><\/ul>\",\n\t\t\ttranslate(\"list-17.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneNonEmptyThirdHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h3>This is a non closed heading<\/h3>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-9.creole\"));\n\t}","id":18648,"modified_method":"public void testParseCorrectlyOneNonEmptyThirdHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h3>This is a non closed heading<\/h3>\",\n\t\t\ttranslate(\"heading-9.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextWithItalics() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text with some contents in <em>italic<\/em> <\/p>\",\n\t\t\ttranslate(TEXT_FILES_PREFIX + \"text-3.creole\"));\n\t}","id":18649,"modified_method":"public void testParseSimpleTextWithItalics() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text with some content in <em>italic<\/em> <\/p>\",\n\t\t\ttranslate(\"text-3.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyNoClosedSecondHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h2>This is a non closed heading<\/h2>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-6.creole\"));\n\t}","id":18650,"modified_method":"public void testParseCorrectlyNoClosedSecondHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h2>This is a non closed heading<\/h2>\",\n\t\t\ttranslate(\"heading-6.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyMultipleHeadingBlocks() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h1>Level 1<\/h1><h2>Level 2<\/h2><h3>Level 3<\/h3>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-10.creole\"));\n\t}","id":18651,"modified_method":"public void testParseCorrectlyMultipleHeadingBlocks() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h1>Level 1<\/h1><h2>Level 2<\/h2><h3>Level 3<\/h3>\",\n\t\t\ttranslate(\"heading-10.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseLinkInListItemWithPreText() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>This is an item with a link <a href=\\\"l\\\">a<\/a><\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-11.creole\"));\n\t}","id":18652,"modified_method":"public void testParseLinkInListItemWithPreText() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>This is an item with a link <a href=\\\"l\\\">a<\/a><\/li><\/ul>\",\n\t\t\ttranslate(\"list-11.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextWithBoldAndItalics() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text with some contents in <strong>bold<\/strong> and with\" +\n\t\t\t\" some contents in <em>italic<\/em> <\/p>\",\n\t\t\ttranslate(TEXT_FILES_PREFIX + \"text-5.creole\"));\n\t}","id":18653,"modified_method":"public void testParseSimpleTextWithBoldAndItalics() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text with some content in <strong>bold<\/strong> and with \" +\n\t\t\t\t\"some content in <em>italic<\/em> <\/p>\",\n\t\t\ttranslate(\"text-5.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneNonEmptyFirstHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h1> Level 1 (largest) <\/h1>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-1.creole\"));\n\t}","id":18654,"modified_method":"public void testParseCorrectlyOneNonEmptyFirstHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h1> Level 1 (largest) <\/h1>\",\n\t\t\ttranslate(\"heading-1.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneEmptySecondHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h2>  <\/h2>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-5.creole\"));\n\t}","id":18655,"modified_method":"public void testParseCorrectlyOneEmptySecondHeadingBlock() {\n\t\tAssert.assertEquals(\"<h2>  <\/h2>\", translate(\"heading-5.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextBoldAndItalics() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text <strong><em>ItalicAndBold<\/em><\/strong> <\/p>\",\n\t\t\ttranslate(TEXT_FILES_PREFIX + \"text-6.creole\"));\n\t}","id":18656,"modified_method":"public void testParseSimpleTextBoldAndItalics() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text <strong><em>ItalicAndBold<\/em><\/strong> <\/p>\",\n\t\t\ttranslate(\"text-6.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneNonEmptyNoWikiBlockWitMultipleLines() {\n\t\tAssert.assertEquals(\n\t\t\t\"<pre>Multiple\\nlines<\/pre>\",\n\t\t\ttranslate(NOWIKI_FILES_PREFIX + \"nowikiblock-5.creole\"));\n\t}","id":18657,"modified_method":"public void testParseCorrectlyOneNonEmptyNoWikiBlockWitMultipleLines() {\n\t\tAssert.assertEquals(\n\t\t\t\"<pre>Multiple\\nlines<\/pre>\",\n\t\t\ttranslate(\"nowikiblock-5.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyBoldContentInListItems() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li> <strong>abcdefg<\/strong><\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-6.creole\"));\n\t}","id":18658,"modified_method":"public void testParseCorrectlyBoldContentInListItems() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li> <strong>abcdefg<\/strong><\/li><\/ul>\",\n\t\t\ttranslate(\"list-6.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseMultipleLinkTags() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><a href=\\\"L\\\">A<\/a> <a href=\\\"L\\\">A<\/a>\" +\n\t\t\t\" <a href=\\\"L\\\">A<\/a> <\/p>\",\n\t\t\ttranslate(LINK_FILES_PREFIX + \"link-3.creole\"));\n\t}","id":18659,"modified_method":"public void testParseMultipleLinkTags() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><a href=\\\"L\\\">A<\/a> <a href=\\\"L\\\">A<\/a> <a href=\\\"L\\\">A<\/a> \" +\n\t\t\t\t\"<\/p>\",\n\t\t\ttranslate(\"link-3.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneHorizontalBlocks() {\n\t\tAssert.assertEquals(\n\t\t\t\"<hr/>\",\n\t\t\ttranslate(HORIZONTAL_FILES_PREFIX + \"horizontal-1.creole\"));\n\t}","id":18660,"modified_method":"public void testParseCorrectlyOneHorizontalBlocks() {\n\t\tAssert.assertEquals(\"<hr/>\", translate(\"horizontal-1.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected String translate(String file) {\n\t\treturn getTranslator().translate(parseFile(file));\n\t}","id":18661,"modified_method":"protected String translate(String fileName) {\n\t\treturn _xhtmlTranslationVisitor.translate(getWikiPageNode(fileName));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyNoClosedThirdHeadingBlock() {\n\t\tAssert.assertEquals(\n\t\t\t\"<h3>Level 3<\/h3>\",\n\t\t\ttranslate(HEADING_FILES_PREFIX + \"heading-7.creole\"));\n\t}","id":18662,"modified_method":"public void testParseCorrectlyNoClosedThirdHeadingBlock() {\n\t\tAssert.assertEquals(\"<h3>Level 3<\/h3>\", translate(\"heading-7.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseLinkWithNoAlt() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><a href=\\\"Link\\\">Link<\/a> <\/p>\",\n\t\t\ttranslate(LINK_FILES_PREFIX + \"link-7.creole\"));\n\t}","id":18663,"modified_method":"public void testParseLinkWithNoAlt() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p><a href=\\\"Link\\\">Link<\/a> <\/p>\", translate(\"link-7.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseTableMultipleRowsAndCOlumns() {\n\t\tAssert.assertEquals(\n\t\t\t\"<table><tr><th>H1<\/th><th>H2<\/th><th>H3<\/th><th>H4<\/th>\" +\n\t\t\t\"<\/tr><tr><td>C1<\/td><td>C2<\/td><td>C3<\/td><td>C4<\/td><\/tr>\" +\n\t\t\t\"<tr><td>C5<\/td><td>C6<\/td><td>C7<\/td><td>C8<\/td><\/tr>\" +\n\t\t\t\"<tr><td>C9<\/td><td>C10<\/td><td>C11<\/td><td>C12<\/td><\/tr>\" +\n\t\t\t\"<\/table>\", translate(TABLE_FILES_PREFIX + \"table-2.creole\"));\n\t}","id":18664,"modified_method":"public void testParseTableMultipleRowsAndCOlumns() {\n\t\tAssert.assertEquals(\n\t\t\t\"<table><tr><th>H1<\/th><th>H2<\/th><th>H3<\/th><th>H4<\/th><\/tr>\" +\n\t\t\t\t\"<tr><td>C1<\/td><td>C2<\/td><td>C3<\/td><td>C4<\/td><\/tr><tr>\" +\n\t\t\t\t\t\"<td>C5<\/td><td>C6<\/td><td>C7<\/td><td>C8<\/td><\/tr><tr>\" +\n\t\t\t\t\t\t\"<td>C9<\/td><td>C10<\/td><td>C11<\/td><td>C12<\/td>\" +\n\t\t\t\t\t\t\t\"<\/tr><\/table>\",\n\t\t\ttranslate(\"table-2.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseNoWikiAndTextInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><pre>This is nowiki inside a list item<\/pre> and \" +\n\t\t\t\"<em>italics<\/em><\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-15.creole\"));\n\t}","id":18665,"modified_method":"public void testParseNoWikiAndTextInListItem() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li><pre>This is nowiki inside a list item<\/pre> and <em>\" +\n\t\t\t\t\"italics<\/em><\/li><\/ul>\",\n\t\t\ttranslate(\"list-15.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextWithBold() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text with some contents in <strong>bold<\/strong> <\/p>\",\n\t\t\ttranslate(TEXT_FILES_PREFIX + \"text-4.creole\"));\n\t}","id":18666,"modified_method":"public void testParseSimpleTextWithBold() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text with some content in <strong>bold<\/strong> <\/p>\",\n\t\t\ttranslate(\"text-4.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyOneItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>ABCDEFG<\/li><\/ul>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-1.creole\"));\n\t}","id":18667,"modified_method":"public void testParseCorrectlyOneItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ul><li>ABCDEFG<\/li><\/ul>\", translate(\"list-1.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseSimpleTextWithForcedEndline() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text with <br/>forced line break <\/p>\",\n\t\t\ttranslate(TEXT_FILES_PREFIX + \"text-7.creole\"));\n\t}","id":18668,"modified_method":"public void testParseSimpleTextWithForcedEndline() {\n\t\tAssert.assertEquals(\n\t\t\t\"<p>Text with <br/>forced line break <\/p>\",\n\t\t\ttranslate(\"text-7.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseTableOneRowOneColumn() {\n\t\tAssert.assertEquals(\n\t\t\t\"<table><tr><th>H1<\/th><\/tr><tr><td>C1.1<\/td><\/tr><\/table>\",\n\t\t\ttranslate(TABLE_FILES_PREFIX + \"table-1.creole\"));\n\t}","id":18669,"modified_method":"public void testParseTableOneRowOneColumn() {\n\t\tAssert.assertEquals(\n\t\t\t\"<table><tr><th>H1<\/th><\/tr><tr><td>C1.1<\/td><\/tr><\/table>\",\n\t\t\ttranslate(\"table-1.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testParseCorrectlyTwoOrderedItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ol><li>1<\/li><li>2<\/li><\/ol>\",\n\t\t\ttranslate(LISTS_FILES_PREFIX + \"list-8.creole\"));\n\t}","id":18670,"modified_method":"public void testParseCorrectlyTwoOrderedItemFirstLevel() {\n\t\tAssert.assertEquals(\n\t\t\t\"<ol><li>1<\/li><li>2<\/li><\/ol>\", translate(\"list-8.creole\"));\n\t}","commit_id":"b363e2c1b3d64ba362a3942700e28cd01569d6d9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void fillComponents(UIContainer tofill, ViewParameters arg1, ComponentChecker arg2) {\n    \t\n    \tboolean isCourseSite = handler.isCourseSite();\n    \t\n    \tUIBranchContainer content = UIBranchContainer.make(tofill, \"content:\");\n    \t\n    \tif (isCourseSite)\n    \t{\n    \t\t// show specific instructions for adding participant into course site\n    \t\tUIMessage.make(content, \"add.official\", \"add.official\");\n    \t\tUIMessage.make(content, \"add.official1\", \"add.official1\");\n    \t\tUIMessage.make(content, \"add.official.instruction\", \"add.official.instruction\");\n\t    }\n        \n    \tUIForm participantForm = UIForm.make(content, \"participant-form\");\n    \t\n    \t// official participant\n    \tUIInput.make(participantForm, \"officialAccountParticipant\", \"#{siteAddParticipantHandler.officialAccountParticipant}\", handler.officialAccountParticipant);\n    \tUIOutput.make(participantForm, \"officialAccountSectionTitle\", handler.getServerConfigurationString(\"officialAccountSectionTitle\"));\n    \tUIOutput.make(participantForm, \"officialAccountName\", handler.getServerConfigurationString(\"officialAccountName\"));\n    \tUIOutput.make(participantForm, \"officialAccountLabel\", handler.getServerConfigurationString(\"officialAccountLabel\"));\n    \t\n    \tString pickerAction = handler.getServerConfigurationString(\"officialAccountPickerAction\");\n\t\tif (pickerAction != null && !\"\".equals(pickerAction))\n\t\t{\n\t\t\tUIOutput.make(participantForm, \"officialAccountPickerLabel\", handler.getServerConfigurationString(\"officialAccountPickerLabel\"));\n\t\t\tUIOutput.make(participantForm, \"officialAccountPickerAction\", pickerAction);\n\t\t}\n    \t\n\t\t// non official participant\n    \tString allowAddNonOfficialParticipant = handler.getServerConfigurationString(\"nonOfficialAccount\", \"true\");\n    \tif (allowAddNonOfficialParticipant.equalsIgnoreCase(\"true\"))\n    \t{\n    \t\tUIInput.make(participantForm, \"nonOfficialAccountParticipant\", \"#{siteAddParticipantHandler.nonOfficialAccountParticipant}\", handler.nonOfficialAccountParticipant);\n\t    \tUIOutput.make(participantForm, \"nonOfficialAccountSectionTitle\", handler.getServerConfigurationString(\"nonOfficialAccountSectionTitle\"));\n\t    \tUIOutput.make(participantForm, \"nonOfficialAccountName\", handler.getServerConfigurationString(\"nonOfficialAccountName\"));\n\t    \tUIOutput.make(participantForm, \"nonOfficialAccountLabel\", handler.getServerConfigurationString(\"nonOfficialAccountLabel\"));\n    \t}\n    \t\n    \t// role choice\n    \tString[] values = new String[] { \"sameRole\", \"differentRole\"};\n\t    String[] labels = new String[] {\n\t    \t\tmessageLocator.getMessage(\"add.assign\"), \n\t    \t\tmessageLocator.getMessage(\"add.assign2\")\n\t    \t\t};\t    \n\t    StringList roleItems = new StringList();\n\t    UISelect roleSelect = UISelect.make(participantForm, \"select-roles\", null, \"#{siteAddParticipantHandler.roleChoice}\", handler.roleChoice);\n\t    for (int i = 0; i < values.length; ++i) {\n\t\t    UIBranchContainer roleRow = UIBranchContainer.make(participantForm,\"role-row:\", Integer.toString(i));\n            UIOutput.make(roleRow, \"role-label\", labels[i]);\n            UISelectChoice.make(roleRow, \"role-select\", roleSelect.getFullID(), i);\n            roleItems.add(values[i]);\n        }\n        roleSelect.optionlist.setValue(roleItems.toStringArray());        \n\t\t\n    \tUICommand.make(participantForm, \"continue\", messageLocator.getMessage(\"gen.continue\"), \"#{siteAddParticipantHandler.processGetParticipant}\");\n        UICommand.make(participantForm, \"cancel\", messageLocator.getMessage(\"gen.cancel\"), \"#{siteAddParticipantHandler.processCancel}\");\n        \n        //process any messages\n        targettedMessageList = handler.targettedMessageList;\n        if (targettedMessageList != null && targettedMessageList.size() > 0) {\n\t\t\tfor (int i = 0; i < targettedMessageList.size(); i++ ) {\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\", new Integer(i).toString());\n\t\t\t\tTargettedMessage msg = targettedMessageList.messageAt(i);\n\t\t    \tif (msg.args != null ) \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode(), (Object[]) msg.args);\n\t\t    \t} \n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode());\n\t\t    \t}\n\t\t\t}\n        }\n        //frameAdjustingProducer.fillComponents(tofill, \"resize\", \"resetFrame\");\n         \n    }","id":18671,"modified_method":"public void fillComponents(UIContainer tofill, ViewParameters arg1, ComponentChecker arg2) {\n    \t\n    \tboolean isCourseSite = handler.isCourseSite();\n    \t\n    \tUIBranchContainer content = UIBranchContainer.make(tofill, \"content:\");\n    \t\n    \tif (isCourseSite)\n    \t{\n    \t\t// show specific instructions for adding participant into course site\n    \t\tUIMessage.make(content, \"add.official\", \"add.official\");\n    \t\tUIMessage.make(content, \"add.official1\", \"add.official1\");\n    \t\tUIMessage.make(content, \"add.official.instruction\", \"add.official.instruction\");\n\t    }\n        \n    \tUIForm participantForm = UIForm.make(content, \"participant-form\");\n    \t\n    \t// official participant\n    \tUIInput.make(participantForm, \"officialAccountParticipant\", \"#{siteAddParticipantHandler.officialAccountParticipant}\", handler.officialAccountParticipant);\n    \tUIOutput.make(participantForm, \"officialAccountSectionTitle\", handler.getServerConfigurationString(\"officialAccountSectionTitle\"));\n    \tUIOutput.make(participantForm, \"officialAccountName\", handler.getServerConfigurationString(\"officialAccountName\"));\n    \tUIOutput.make(participantForm, \"officialAccountLabel\", handler.getServerConfigurationString(\"officialAccountLabel\"));\n    \t\n    \tString pickerAction = handler.getServerConfigurationString(\"officialAccountPickerAction\");\n\t\tif (pickerAction != null && !\"\".equals(pickerAction))\n\t\t{\n\t\t\tUIOutput.make(participantForm, \"officialAccountPickerLabel\", handler.getServerConfigurationString(\"officialAccountPickerLabel\"));\n\t\t\tUIOutput.make(participantForm, \"officialAccountPickerAction\", pickerAction);\n\t\t}\n    \t\n\t\t// non official participant\n    \tString allowAddNonOfficialParticipant = handler.getServerConfigurationString(\"nonOfficialAccount\", \"true\");\n    \tif (allowAddNonOfficialParticipant.equalsIgnoreCase(\"true\"))\n    \t{\n    \t\tUIInput.make(participantForm, \"nonOfficialAccountParticipant\", \"#{siteAddParticipantHandler.nonOfficialAccountParticipant}\", handler.nonOfficialAccountParticipant);\n\t    \tUIOutput.make(participantForm, \"nonOfficialAccountSectionTitle\", handler.getServerConfigurationString(\"nonOfficialAccountSectionTitle\"));\n\t    \tUIOutput.make(participantForm, \"nonOfficialAccountName\", handler.getServerConfigurationString(\"nonOfficialAccountName\"));\n\t    \tUIOutput.make(participantForm, \"nonOfficialAccountLabel\", handler.getServerConfigurationString(\"nonOfficialAccountLabel\"));\n    \t}\n    \t\n    \t// role choice\n    \tString[] values = new String[] { \"sameRole\", \"differentRole\"};\n\t    String[] labels = new String[] {\n\t    \t\tmessageLocator.getMessage(\"add.assign\"), \n\t    \t\tmessageLocator.getMessage(\"add.assign2\")\n\t    \t\t};\n\t    \n\t    StringList roleItems = new StringList();\n\t    \n\t    UISelect roleSelect = UISelect.make(participantForm, \"select-roles\", null, \"#{siteAddParticipantHandler.roleChoice}\", handler.roleChoice);\n\n\t    roleSelect.optionnames = UIOutputMany.make(labels);\n\t    String selectID = roleSelect.getFullID();\n\t    for (int i = 0; i < values.length; ++i) {\n\t\t    UIBranchContainer roleRow = UIBranchContainer.make(participantForm,\"role-row:\", Integer.toString(i));\n            UISelectLabel lb = UISelectLabel.make(roleRow, \"role-label\", selectID, i);\n            UISelectChoice choice =UISelectChoice.make(roleRow, \"role-select\", selectID, i);\n            UILabelTargetDecorator.targetLabel(lb, choice);\n            \n            roleItems.add(values[i]);\n        }\n        roleSelect.optionlist.setValue(roleItems.toStringArray());        \n\t\t\n    \tUICommand.make(participantForm, \"continue\", messageLocator.getMessage(\"gen.continue\"), \"#{siteAddParticipantHandler.processGetParticipant}\");\n        UICommand.make(participantForm, \"cancel\", messageLocator.getMessage(\"gen.cancel\"), \"#{siteAddParticipantHandler.processCancel}\");\n        \n        //process any messages\n        targettedMessageList = handler.targettedMessageList;\n        if (targettedMessageList != null && targettedMessageList.size() > 0) {\n\t\t\tfor (int i = 0; i < targettedMessageList.size(); i++ ) {\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\", new Integer(i).toString());\n\t\t\t\tTargettedMessage msg = targettedMessageList.messageAt(i);\n\t\t    \tif (msg.args != null ) \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode(), (Object[]) msg.args);\n\t\t    \t} \n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode());\n\t\t    \t}\n\t\t\t}\n        }\n        //frameAdjustingProducer.fillComponents(tofill, \"resize\", \"resetFrame\");\n         \n    }","commit_id":"937402b780373b5a76a111088062cdd6ce1d4496","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void fillComponents(UIContainer tofill, ViewParameters arg1, ComponentChecker arg2) {\n    \t\n    \tUIBranchContainer content = UIBranchContainer.make(tofill, \"content:\");\n        \n    \tUIForm emailNotiForm = UIForm.make(content, \"emailNoti-form\");\n    \t\n    \t// role choice\n    \tString[] values = new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString()};\n\t    String[] labels = new String[] {\n\t    \t\tmessageLocator.getMessage(\"addnoti.sendnow\"), \n\t    \t\tmessageLocator.getMessage(\"addnoti.dontsend\")\n\t    \t\t};\t    \n\t    StringList notiItems = new StringList();\n\t    UISelect notiSelect = UISelect.make(emailNotiForm, \"select-noti\", null,\n\t\t        \"#{siteAddParticipantHandler.emailNotiChoice}\", handler.emailNotiChoice);\n  \n\t    for (int i = 0; i < values.length; i++) {\n\t    \t\n\t\t    UIBranchContainer notiRow = UIBranchContainer.make(emailNotiForm, \"noti-row:\", Integer.toString(i));\n            UIOutput.make(notiRow, \"noti-label\", labels[i]);\n            UISelectChoice.make(notiRow, \"noti-select\", notiSelect.getFullID(), i);\n            notiItems.add(values[i]);\n        }\n        notiSelect.optionlist.setValue(notiItems.toStringArray());   \n        \n    \t// buttons\n    \tUICommand.make(emailNotiForm, \"continue\", messageLocator.getMessage(\"gen.continue\"), \"#{siteAddParticipantHandler.processEmailNotiContinue}\");\n    \tUICommand.make(emailNotiForm, \"back\", messageLocator.getMessage(\"gen.back\"), \"#{siteAddParticipantHandler.processEmailNotiBack}\");\n    \tUICommand.make(emailNotiForm, \"cancel\", messageLocator.getMessage(\"gen.cancel\"), \"#{siteAddParticipantHandler.processCancel}\");\n   \n    \t//process any messages\n        if (targettedMessageList != null && targettedMessageList.size() > 0) {\n\t\t\tfor (int i = 0; i < targettedMessageList.size(); i ++ ) {\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\", new Integer(i).toString());\n\t\t\t\tTargettedMessage msg = targettedMessageList.messageAt(i);\n\t\t    \tif (msg.args != null ) \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode(), (Object[]) msg.args);\n\t\t    \t} \n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode());\n\t\t    \t}\n\t\t\t}\n        }\n    }","id":18672,"modified_method":"public void fillComponents(UIContainer tofill, ViewParameters arg1, ComponentChecker arg2) {\n    \t\n    \tUIBranchContainer content = UIBranchContainer.make(tofill, \"content:\");\n        \n    \tUIForm emailNotiForm = UIForm.make(content, \"emailNoti-form\");\n    \t\n    \t// role choice\n    \tString[] values = new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString()};\n\t    String[] labels = new String[] {\n\t    \t\tmessageLocator.getMessage(\"addnoti.sendnow\"), \n\t    \t\tmessageLocator.getMessage(\"addnoti.dontsend\")\n\t    \t\t};\t    \n\t    StringList notiItems = new StringList();\n\t    UISelect notiSelect = UISelect.make(emailNotiForm, \"select-noti\", null,\n\t\t        \"#{siteAddParticipantHandler.emailNotiChoice}\", handler.emailNotiChoice);\n\t    String selectID = notiSelect.getFullID();\n\t    notiSelect.optionnames = UIOutputMany.make(labels);\n\t    for (int i = 0; i < values.length; i++) {\n\t    \t\n\t\t    UIBranchContainer notiRow = UIBranchContainer.make(emailNotiForm, \"noti-row:\", Integer.toString(i));\n           \n\t\t    UISelectLabel lb = UISelectLabel.make(notiRow, \"noti-label\", selectID, i);\n            UISelectChoice choice = UISelectChoice.make(notiRow, \"noti-select\", selectID, i);\n            UILabelTargetDecorator.targetLabel(lb, choice);\n            \n            notiItems.add(values[i]);\n        }\n        notiSelect.optionlist.setValue(notiItems.toStringArray());   \n        \n    \t// buttons\n    \tUICommand.make(emailNotiForm, \"continue\", messageLocator.getMessage(\"gen.continue\"), \"#{siteAddParticipantHandler.processEmailNotiContinue}\");\n    \tUICommand.make(emailNotiForm, \"back\", messageLocator.getMessage(\"gen.back\"), \"#{siteAddParticipantHandler.processEmailNotiBack}\");\n    \tUICommand.make(emailNotiForm, \"cancel\", messageLocator.getMessage(\"gen.cancel\"), \"#{siteAddParticipantHandler.processCancel}\");\n   \n    \t//process any messages\n        if (targettedMessageList != null && targettedMessageList.size() > 0) {\n\t\t\tfor (int i = 0; i < targettedMessageList.size(); i ++ ) {\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\", new Integer(i).toString());\n\t\t\t\tTargettedMessage msg = targettedMessageList.messageAt(i);\n\t\t    \tif (msg.args != null ) \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode(), (Object[]) msg.args);\n\t\t    \t} \n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode());\n\t\t    \t}\n\t\t\t}\n        }\n    }","commit_id":"937402b780373b5a76a111088062cdd6ce1d4496","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void fillComponents(UIContainer tofill, ViewParameters arg1, ComponentChecker arg2) {\n    \t\n    \tUIBranchContainer content = UIBranchContainer.make(tofill, \"content:\");\n        \n    \tUIForm sameRoleForm = UIForm.make(content, \"sameRole-form\");\n    \t\n    \t// role choice \n\t    StringList roleItems = new StringList();\n\t    UISelect roleSelect = UISelect.make(sameRoleForm, \"select-roles\", null,\n\t\t        \"#{siteAddParticipantHandler.sameRoleChoice}\", handler.sameRoleChoice);\n\t    List<Role> roles = handler.getRoles();\n\t    for (int i = 0; i < roles.size(); ++i) {\n\t    \tRole r = roles.get(i);\n\t\t    UIBranchContainer roleRow = UIBranchContainer.make(sameRoleForm,\"role-row:\", Integer.toString(i));\n            UIOutput.make(roleRow, \"role-label\", r.getId());\n            UISelectChoice.make(roleRow, \"role-select\", roleSelect.getFullID(), i);\n            roleItems.add(r.getId());\n        }\n        roleSelect.optionlist.setValue(roleItems.toStringArray()); \n        \n        // list of users\n        for (Iterator<String> it=handler.getUsers().iterator(); it.hasNext(); ) {\n        \tString userEId = it.next();\n        \tString userName = userEId;\n        \ttry\n        \t{\n        \t\tUser u = userDirectoryService.getUserByEid(userEId);\n        \t\tuserName = u.getSortName();\n        \t}\n        \tcatch (Exception e)\n        \t{\n        \t\tM_log.info(this + \":fillComponents: cannot find user with eid=\" + userEId);\n        \t}\n            UIBranchContainer userRow = UIBranchContainer.make(sameRoleForm, \"user-row:\", userEId);\n            UIOutput.make(userRow, \"user-label\", userEId + \"(\" + userName + \")\");\n        }\n    \t\n    \tUICommand.make(sameRoleForm, \"continue\", messageLocator.getMessage(\"gen.continue\"), \"#{siteAddParticipantHandler.processSameRoleContinue}\");\n    \tUICommand.make(sameRoleForm, \"back\", messageLocator.getMessage(\"gen.back\"), \"#{siteAddParticipantHandler.processSameRoleBack}\");\n    \tUICommand.make(sameRoleForm, \"cancel\", messageLocator.getMessage(\"gen.cancel\"), \"#{siteAddParticipantHandler.processCancel}\");\n   \n    \t//process any messages\n        targettedMessageList = handler.targettedMessageList;\n        if (targettedMessageList != null && targettedMessageList.size() > 0) {\n\t\t\tfor (int i = 0; i < targettedMessageList.size(); i++ ) {\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\", new Integer(i).toString());\n\t\t\t\tTargettedMessage msg = targettedMessageList.messageAt(i);\n\t\t    \tif (msg.args != null ) \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode(), (Object[]) msg.args);\n\t\t    \t} \n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode());\n\t\t    \t}\n\t\t\t}\n        }\n         \n    }","id":18673,"modified_method":"public void fillComponents(UIContainer tofill, ViewParameters arg1, ComponentChecker arg2) {\n    \t\n    \tUIBranchContainer content = UIBranchContainer.make(tofill, \"content:\");\n        \n    \tUIForm sameRoleForm = UIForm.make(content, \"sameRole-form\");\n    \t\n    \t// role choice \n\t    StringList roleItems = new StringList();\n\t    UISelect roleSelect = UISelect.make(sameRoleForm, \"select-roles\", null,\n\t\t        \"#{siteAddParticipantHandler.sameRoleChoice}\", handler.sameRoleChoice);\n\t    String selectID = roleSelect.getFullID();\n\t    List<Role> roles = handler.getRoles();\n\t    for (int i = 0; i < roles.size(); ++i) {\n\t    \tRole r = roles.get(i);\n\t\t    UIBranchContainer roleRow = UIBranchContainer.make(sameRoleForm,\"role-row:\", Integer.toString(i));\n            \n            UISelectLabel lb = UISelectLabel.make(roleRow, \"role-label\", selectID, i);\n            UISelectChoice choice =UISelectChoice.make(roleRow, \"role-select\", selectID, i);\n            UILabelTargetDecorator.targetLabel(lb, choice);\n            \n            roleItems.add(r.getId());\n        }\n        roleSelect.optionlist.setValue(roleItems.toStringArray()); \n        \n        // list of users\n        for (Iterator<String> it=handler.getUsers().iterator(); it.hasNext(); ) {\n        \tString userEId = it.next();\n        \tString userName = userEId;\n        \ttry\n        \t{\n        \t\tUser u = userDirectoryService.getUserByEid(userEId);\n        \t\tuserName = u.getSortName();\n        \t}\n        \tcatch (Exception e)\n        \t{\n        \t\tM_log.info(this + \":fillComponents: cannot find user with eid=\" + userEId);\n        \t}\n            UIBranchContainer userRow = UIBranchContainer.make(sameRoleForm, \"user-row:\", userEId);\n            UIOutput.make(userRow, \"user-label\", userEId + \"(\" + userName + \")\");\n        }\n    \t\n    \tUICommand.make(sameRoleForm, \"continue\", messageLocator.getMessage(\"gen.continue\"), \"#{siteAddParticipantHandler.processSameRoleContinue}\");\n    \tUICommand.make(sameRoleForm, \"back\", messageLocator.getMessage(\"gen.back\"), \"#{siteAddParticipantHandler.processSameRoleBack}\");\n    \tUICommand.make(sameRoleForm, \"cancel\", messageLocator.getMessage(\"gen.cancel\"), \"#{siteAddParticipantHandler.processCancel}\");\n   \n    \t//process any messages\n        targettedMessageList = handler.targettedMessageList;\n        if (targettedMessageList != null && targettedMessageList.size() > 0) {\n\t\t\tfor (int i = 0; i < targettedMessageList.size(); i++ ) {\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\", new Integer(i).toString());\n\t\t\t\tTargettedMessage msg = targettedMessageList.messageAt(i);\n\t\t    \tif (msg.args != null ) \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode(), (Object[]) msg.args);\n\t\t    \t} \n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tUIMessage.make(errorRow,\"error\", msg.acquireMessageCode());\n\t\t    \t}\n\t\t\t}\n        }\n         \n    }","commit_id":"937402b780373b5a76a111088062cdd6ce1d4496","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Test all the files in the project which has an associated {@link ILicenseHeaderHandler}.\n\t */\n\tpublic void testLicenseHeaders()\n\t{\n\t\tlicenseHeaderHandlers = new ILicenseHeaderHandler[] {\n\t\t\t\tnew JavaLicenseHeaderHandler(javaIgnore),\n\t\t\t\tnew JavaScriptLicenseHeaderHandler(javaScriptIgnore),\n\t\t\t\tnew XmlLicenseHeaderHandler(xmlIgnore),\n\t\t\t\tnew PropertiesLicenseHeaderHandler(propertiesIgnore),\n\t\t\t\tnew CssLicenseHeaderHandler(cssIgnore), new HtmlLicenseHeaderHandler(htmlIgnore),\n\t\t\t\tnew VelocityLicenseHeaderHandler(velocityIgnore) };\n\n\t\tfinal Map/* <ILicenseHeaderHandler, List<File>> */badFiles = new HashMap/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * <ILicenseHeaderHandler,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * List<File>>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */();\n\n\t\tfor (int i = 0; i < licenseHeaderHandlers.length; i++)\n\t\t{\n\t\t\tfinal ILicenseHeaderHandler licenseHeaderHandler = licenseHeaderHandlers[i];\n\n\t\t\tvisitFiles(licenseHeaderHandler.getSuffixes(), licenseHeaderHandler.getIgnoreFiles(),\n\t\t\t\t\tnew FileVisitor()\n\t\t\t\t\t{\n\t\t\t\t\t\tpublic void visitFile(File file)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (licenseHeaderHandler.checkLicenseHeader(file) == false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (addHeaders == false ||\n\t\t\t\t\t\t\t\t\t\tlicenseHeaderHandler.addLicenseHeader(file) == false)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tList/* <File> */files = (List)badFiles\n\t\t\t\t\t\t\t\t\t\t\t.get(licenseHeaderHandler);\n\n\t\t\t\t\t\t\t\t\tif (files == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfiles = new ArrayList/* <File> */();\n\t\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tfiles.add(file);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t}\n\n\t\tfailIncorrectLicenceHeaders(badFiles);\n\t}","id":18674,"modified_method":"/**\n\t * Test all the files in the project which has an associated {@link ILicenseHeaderHandler}.\n\t */\n\tpublic void testLicenseHeaders()\n\t{\n\t\tlicenseHeaderHandlers = new ILicenseHeaderHandler[] {\n\t\t\t\tnew JavaLicenseHeaderHandler(javaIgnore),\n\t\t\t\tnew JavaScriptLicenseHeaderHandler(javaScriptIgnore),\n\t\t\t\tnew XmlLicenseHeaderHandler(xmlIgnore),\n\t\t\t\tnew PropertiesLicenseHeaderHandler(propertiesIgnore),\n\t\t\t\tnew CssLicenseHeaderHandler(cssIgnore), new HtmlLicenseHeaderHandler(htmlIgnore),\n\t\t\t\tnew VelocityLicenseHeaderHandler(velocityIgnore) };\n\n\t\tfinal Map<ILicenseHeaderHandler, List<File>> badFiles = new HashMap<ILicenseHeaderHandler, List<File>>();\n\n\t\tfor (int i = 0; i < licenseHeaderHandlers.length; i++)\n\t\t{\n\t\t\tfinal ILicenseHeaderHandler licenseHeaderHandler = licenseHeaderHandlers[i];\n\n\t\t\tvisitFiles(licenseHeaderHandler.getSuffixes(), licenseHeaderHandler.getIgnoreFiles(),\n\t\t\t\tnew FileVisitor()\n\t\t\t\t{\n\t\t\t\t\tpublic void visitFile(File file)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (licenseHeaderHandler.checkLicenseHeader(file) == false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (addHeaders == false ||\n\t\t\t\t\t\t\t\tlicenseHeaderHandler.addLicenseHeader(file) == false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tList<File> files = badFiles.get(licenseHeaderHandler);\n\n\t\t\t\t\t\t\t\tif (files == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfiles = new ArrayList<File>();\n\t\t\t\t\t\t\t\t\tbadFiles.put(licenseHeaderHandler, files);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfiles.add(file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tfailIncorrectLicenceHeaders(badFiles);\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"private void failIncorrectLicenceHeaders(Map/* <ILicenseHeaderHandler, List<File>> */files)\n\t{\n\t\tif (files.size() > 0)\n\t\t{\n\t\t\tStringBuffer failString = new StringBuffer();\n\n\t\t\tfor (Iterator iter = files.entrySet().iterator(); iter.hasNext();)\n\t\t\t{\n\t\t\t\tMap.Entry entry = (Map.Entry) iter.next();\n\n\t\t\t\tILicenseHeaderHandler licenseHeaderHandler = (ILicenseHeaderHandler) entry.getKey();\n\t\t\t\tList/* <File> */fileList = (List) entry.getValue();\n\n\t\t\t\tfailString.append(\"\\n\");\n\t\t\t\tfailString.append(licenseHeaderHandler.getClass().getName());\n\t\t\t\tfailString.append(\" failed. The following files(\");\n\t\t\t\tfailString.append(fileList.size());\n\t\t\t\tfailString.append(\") didn't have correct license header:\\n\");\n\n\t\t\t\tfor (Iterator iterator = fileList.iterator(); iterator.hasNext();)\n\t\t\t\t{\n\t\t\t\t\tFile file = (File)iterator.next();\n\t\t\t\t\tString filename = file.getAbsolutePath();\n\n\t\t\t\t\t// Find the license type\n\t\t\t\t\tString licenseType = licenseHeaderHandler.getLicenseType(file);\n\n\t\t\t\t\tif (licenseType == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfailString.append(\"NONE\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfailString.append(licenseType);\n\t\t\t\t\t}\n\n\t\t\t\t\tfailString.append(\" \").append(filename).append(LINE_ENDING);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(failString);\n\t\t\tfail(failString.toString());\n\t\t}\n\t}","id":18675,"modified_method":"private void failIncorrectLicenceHeaders(Map<ILicenseHeaderHandler, List<File>> files)\n\t{\n\t\tif (files.size() > 0)\n\t\t{\n\t\t\tStringBuffer failString = new StringBuffer();\n\n\t\t\tfor (Entry<ILicenseHeaderHandler, List<File>> entry : files.entrySet())\n\t\t\t{\n\t\t\t\tILicenseHeaderHandler licenseHeaderHandler = entry.getKey();\n\t\t\t\tList<File> fileList = entry.getValue();\n\n\t\t\t\tfailString.append(\"\\n\");\n\t\t\t\tfailString.append(licenseHeaderHandler.getClass().getName());\n\t\t\t\tfailString.append(\" failed. The following files(\");\n\t\t\t\tfailString.append(fileList.size());\n\t\t\t\tfailString.append(\") didn't have correct license header:\\n\");\n\n\t\t\t\tfor (File file : fileList)\n\t\t\t\t{\n\t\t\t\t\tString filename = file.getAbsolutePath();\n\n\t\t\t\t\t// Find the license type\n\t\t\t\t\tString licenseType = licenseHeaderHandler.getLicenseType(file);\n\n\t\t\t\t\tif (licenseType == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfailString.append(\"NONE\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfailString.append(licenseType);\n\t\t\t\t\t}\n\n\t\t\t\t\tfailString.append(\" \").append(filename).append(LINE_ENDING);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(failString);\n\t\t\tfail(failString.toString());\n\t\t}\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @see java.util.Iterator#next()\n\t */\n\tpublic Object next()\n\t{\n\t\treturn path + extensions[index++];\n\t}","id":18676,"modified_method":"/**\n\t * \n\t * @see java.util.Iterator#next()\n\t */\n\tpublic String next()\n\t{\n\t\treturn path + extensions[index++];\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Constructs a list parser from an entry MetaPattern, a separator MetaPattern and an input\n\t * character sequence.\n\t * \n\t * @param entryPattern\n\t *            The pattern in between the separators\n\t * @param separatorPattern\n\t *            The separator pattern\n\t * @param input\n\t *            The input to parse\n\t */\n\tpublic ListParser(final MetaPattern entryPattern, final MetaPattern separatorPattern,\n\t\t\tfinal CharSequence input)\n\t{\n\t\tsuper(input);\n\t\tthis.entryGroup = new Group(entryPattern);\n\t\tthis.separatorPattern = separatorPattern;\n\t}","id":18677,"modified_method":"/**\n\t * Constructs a list parser from an entry MetaPattern, a separator MetaPattern and an input\n\t * character sequence.\n\t * \n\t * @param entryPattern\n\t *            The pattern in between the separators\n\t * @param separatorPattern\n\t *            The separator pattern\n\t * @param input\n\t *            The input to parse\n\t */\n\tpublic ListParser(final MetaPattern entryPattern, final MetaPattern separatorPattern,\n\t\tfinal CharSequence input)\n\t{\n\t\tsuper(input);\n\t\tentryGroup = new Group(entryPattern);\n\t\tthis.separatorPattern = separatorPattern;\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Notifies each listener in this set by calling notifyListener.\n\t */\n\tpublic void notifyListeners()\n\t{\n\t\t// Create a stable copy for iterating over\n\t\tfinal Set copy = new HashSet(listeners);\n\n\t\t// Notify all listeners that the file changed\n\t\tfor (final Iterator iterator = copy.iterator(); iterator.hasNext();)\n\t\t{\n\t\t\tnotifyListener((IListener)iterator.next());\n\t\t}\n\t}","id":18678,"modified_method":"/**\n\t * Notifies each listener in this set by calling notifyListener.\n\t */\n\tpublic void notifyListeners()\n\t{\n\t\t// Create a stable copy for iterating over\n\t\tfinal Set<IListener> copy = new HashSet<IListener>(listeners);\n\n\t\t// Notify all listeners that the file changed\n\t\tfor (IListener listener : copy)\n\t\t{\n\t\t\tnotifyListener(listener);\n\t\t}\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @see java.util.Iterator#hasNext()\n\t */\n\tpublic boolean hasNext()\n\t{\n\t\treturn (this.state < 4);\n\t}","id":18679,"modified_method":"/**\n\t * \n\t * @see java.util.Iterator#hasNext()\n\t */\n\tpublic boolean hasNext()\n\t{\n\t\treturn (state < 4);\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @see java.util.Iterator#next()\n\t */\n\tpublic Object next()\n\t{\n\t\tif (locale == null)\n\t\t{\n\t\t\tstate = 999;\n\t\t\treturn path;\n\t\t}\n\n\t\t// 1. Apply Locale default toString() implementation. See Locale.\n\t\tif (state == 0)\n\t\t{\n\t\t\tthis.state++;\n\t\t\tthis.currentLocale = locale;\n\t\t\tthis.currentPath = path + '_' + locale.toString();\n\t\t\treturn this.currentPath;\n\t\t}\n\n\t\t// Get language and country, either of which may be the empty string\n\t\tfinal String language = locale.getLanguage();\n\t\tfinal String country = locale.getCountry();\n\n\t\t// 2. If country and language are available\n\t\tif (state == 1)\n\t\t{\n\t\t\tthis.state++;\n\n\t\t\tif (!Strings.isEmpty(language) && !Strings.isEmpty(country))\n\t\t\t{\n\t\t\t\tthis.currentLocale = new Locale(language, country);\n\t\t\t\tString newPath = path + '_' + language + '_' + country;\n\t\t\t\tif (this.currentPath.equals(newPath) == false)\n\t\t\t\t{\n\t\t\t\t\treturn newPath;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 3. If language is available\n\t\tif (state == 2)\n\t\t{\n\t\t\tthis.state++;\n\n\t\t\tif (!Strings.isEmpty(language))\n\t\t\t{\n\t\t\t\tthis.currentLocale = new Locale(language);\n\t\t\t\treturn path + '_' + language;\n\t\t\t}\n\t\t}\n\n\t\t// 4. The path only; without locale\n\t\tthis.state++;\n\n\t\tthis.currentLocale = null;\n\t\treturn path;\n\t}","id":18680,"modified_method":"/**\n\t * \n\t * @see java.util.Iterator#next()\n\t */\n\tpublic String next()\n\t{\n\t\tif (locale == null)\n\t\t{\n\t\t\tstate = 999;\n\t\t\treturn path;\n\t\t}\n\n\t\t// 1. Apply Locale default toString() implementation. See Locale.\n\t\tif (state == 0)\n\t\t{\n\t\t\tstate++;\n\t\t\tcurrentLocale = locale;\n\t\t\tcurrentPath = path + '_' + locale.toString();\n\t\t\treturn currentPath;\n\t\t}\n\n\t\t// Get language and country, either of which may be the empty string\n\t\tfinal String language = locale.getLanguage();\n\t\tfinal String country = locale.getCountry();\n\n\t\t// 2. If country and language are available\n\t\tif (state == 1)\n\t\t{\n\t\t\tstate++;\n\n\t\t\tif (!Strings.isEmpty(language) && !Strings.isEmpty(country))\n\t\t\t{\n\t\t\t\tcurrentLocale = new Locale(language, country);\n\t\t\t\tString newPath = path + '_' + language + '_' + country;\n\t\t\t\tif (currentPath.equals(newPath) == false)\n\t\t\t\t{\n\t\t\t\t\treturn newPath;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 3. If language is available\n\t\tif (state == 2)\n\t\t{\n\t\t\tstate++;\n\n\t\t\tif (!Strings.isEmpty(language))\n\t\t\t{\n\t\t\t\tcurrentLocale = new Locale(language);\n\t\t\t\treturn path + '_' + language;\n\t\t\t}\n\t\t}\n\n\t\t// 4. The path only; without locale\n\t\tstate++;\n\n\t\tcurrentLocale = null;\n\t\treturn path;\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Binds this MetaPattern to one or more capturing groups. Since MetaPatterns can nest, the\n\t * binding process can recurse.\n\t * \n\t * @param group\n\t *            The initial capturing group number\n\t * @return The final capturing group (for use in recursion)\n\t */\n\tprivate int bind(int group)\n\t{\n\t\tif (this instanceof Group)\n\t\t{\n\t\t\t((Group)this).bind(group++);\n\t\t}\n\n\t\tif (patterns != null)\n\t\t{\n\t\t\tfor (int i = 0; i < patterns.size(); i++)\n\t\t\t{\n\t\t\t\tgroup = ((MetaPattern)patterns.get(i)).bind(group);\n\t\t\t}\n\t\t}\n\n\t\treturn group;\n\t}","id":18681,"modified_method":"/**\n\t * Binds this MetaPattern to one or more capturing groups. Since MetaPatterns can nest, the\n\t * binding process can recurse.\n\t * \n\t * @param group\n\t *            The initial capturing group number\n\t * @return The final capturing group (for use in recursion)\n\t */\n\tprivate int bind(int group)\n\t{\n\t\tif (this instanceof Group)\n\t\t{\n\t\t\t((Group)this).bind(group++);\n\t\t}\n\n\t\tif (patterns != null)\n\t\t{\n\t\t\tfor (int i = 0; i < patterns.size(); i++)\n\t\t\t{\n\t\t\t\tgroup = (patterns.get(i)).bind(group);\n\t\t\t}\n\t\t}\n\n\t\treturn group;\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Constructs from a list of MetaPatterns\n\t * \n\t * @param patterns\n\t *            List of MetaPatterns\n\t */\n\tpublic MetaPattern(final List patterns)\n\t{\n\t\tthis.patterns = patterns;\n\t}","id":18682,"modified_method":"/**\n\t * Constructs from a list of MetaPatterns\n\t * \n\t * @param patterns\n\t *            List of MetaPatterns\n\t */\n\tpublic MetaPattern(final List<MetaPattern> patterns)\n\t{\n\t\tthis.patterns = patterns;\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Constructor\n\t * \n\t * @param patterns\n\t */\n\tpublic OptionalMetaPattern(final List patterns)\n\t{\n\t\tsuper(patterns);\n\t}","id":18683,"modified_method":"/**\n\t * Constructor\n\t * \n\t * @param patterns\n\t */\n\tpublic OptionalMetaPattern(final List<MetaPattern> patterns)\n\t{\n\t\tsuper(patterns);\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @see org.apache.wicket.util.resource.locator.ResourceStreamLocator#locate(java.lang.Class,\n\t *      java.lang.String)\n\t */\n\tpublic IResourceStream locate(final Class clazz, final String path)\n\t{\n\t\treturn super.locate(clazz, \"/\" + path);\n\t}","id":18684,"modified_method":"/**\n\t * \n\t * @see org.apache.wicket.util.resource.locator.ResourceStreamLocator#locate(java.lang.Class,\n\t *      java.lang.String)\n\t */\n\tpublic IResourceStream locate(final Class< ? > clazz, final String path)\n\t{\n\t\treturn super.locate(clazz, \"/\" + path);\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Obtains an {@link IResourceStream} from the application's\n\t * {@link IResourceStreamLocator#locate(Class, String)}\n\t * \n\t * @param scope\n\t *            This argument will be used to get the class loader for loading the package\n\t *            resource, and to determine what package it is in.\n\t * @param path\n\t *            The path to the resource\n\t */\n\tpublic PackageResourceStream(Class scope, String path)\n\t{\n\t\tString absolutePath = Packages.absolutePath(scope, path);\n\t\tresourceStream = Application.get().getResourceSettings().getResourceStreamLocator().locate(\n\t\t\t\tscope, absolutePath, null, null, null);\n\n\t\tif (resourceStream == null)\n\t\t{\n\t\t\tthrow new WicketRuntimeException(\"Cannot find resource with \" + scope.getName() +\n\t\t\t\t\t\" and path \" + path);\n\t\t}\n\t}","id":18685,"modified_method":"/**\n\t * Obtains an {@link IResourceStream} from the application's\n\t * {@link IResourceStreamLocator#locate(Class, String)}\n\t * \n\t * @param scope\n\t *            This argument will be used to get the class loader for loading the package\n\t *            resource, and to determine what package it is in.\n\t * @param path\n\t *            The path to the resource\n\t */\n\tpublic PackageResourceStream(Class< ? > scope, String path)\n\t{\n\t\tString absolutePath = Packages.absolutePath(scope, path);\n\t\tresourceStream = Application.get().getResourceSettings().getResourceStreamLocator().locate(\n\t\t\tscope, absolutePath, null, null, null);\n\n\t\tif (resourceStream == null)\n\t\t{\n\t\t\tthrow new WicketRuntimeException(\"Cannot find resource with \" + scope.getName() +\n\t\t\t\t\" and path \" + path);\n\t\t}\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see java.util.Iterator#next()\n\t */\n\tpublic Object next()\n\t{\n\t\tif (extenstionsIterator != null)\n\t\t{\n\t\t\treturn extenstionsIterator.next();\n\t\t}\n\t\tthrow new WicketRuntimeException(\n\t\t\t\"Illegal call of next(). Iterator not properly initialized\");\n\t}","id":18686,"modified_method":"/**\n\t * @see java.util.Iterator#next()\n\t */\n\tpublic String next()\n\t{\n\t\tif (extenstionsIterator != null)\n\t\t{\n\t\t\treturn extenstionsIterator.next();\n\t\t}\n\t\tthrow new WicketRuntimeException(\n\t\t\t\"Illegal call of next(). Iterator not properly initialized\");\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see java.util.Iterator#hasNext()\n\t */\n\tpublic boolean hasNext()\n\t{\n\t\t// Most inner loop. Loop through all extensions provided\n\t\tif (extenstionsIterator != null)\n\t\t{\n\t\t\tif (extenstionsIterator.hasNext() == true)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// If there are no more extensions, than return to the next outer\n\t\t\t// loop (locale), get the next value from that loop and start\n\t\t\t// over again with the first extension in the list.\n\t\t\textenstionsIterator = null;\n\t\t}\n\n\t\t// 2nd inner loop: Loop through all Locale combinations\n\t\tif (localeIterator != null)\n\t\t{\n\t\t\twhile (localeIterator.hasNext())\n\t\t\t{\n\t\t\t\t// Get the next Locale from the iterator and start the next\n\t\t\t\t// inner iterator over again.\n\t\t\t\tString newPath = (String)localeIterator.next();\n\t\t\t\tcurrentLocale = localeIterator.getLocale();\n\t\t\t\textenstionsIterator = new ExtensionResourceNameIterator(newPath, extensions);\n\t\t\t\tif (extenstionsIterator.hasNext() == true)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlocaleIterator = null;\n\t\t}\n\n\t\t// Most outer loop: Loop through all combinations of styles and\n\t\t// variations\n\t\twhile (styleIterator.hasNext())\n\t\t{\n\t\t\tString newPath = (String)styleIterator.next();\n\n\t\t\tlocaleIterator = new LocaleResourceNameIterator(newPath, locale);\n\t\t\twhile (localeIterator.hasNext())\n\t\t\t{\n\t\t\t\tnewPath = (String)localeIterator.next();\n\t\t\t\tcurrentLocale = localeIterator.getLocale();\n\t\t\t\textenstionsIterator = new ExtensionResourceNameIterator(newPath, extensions);\n\t\t\t\tif (extenstionsIterator.hasNext() == true)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// No more combinations found. End of iteration.\n\t\treturn false;\n\t}","id":18687,"modified_method":"/**\n\t * @see java.util.Iterator#hasNext()\n\t */\n\tpublic boolean hasNext()\n\t{\n\t\t// Most inner loop. Loop through all extensions provided\n\t\tif (extenstionsIterator != null)\n\t\t{\n\t\t\tif (extenstionsIterator.hasNext() == true)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// If there are no more extensions, than return to the next outer\n\t\t\t// loop (locale), get the next value from that loop and start\n\t\t\t// over again with the first extension in the list.\n\t\t\textenstionsIterator = null;\n\t\t}\n\n\t\t// 2nd inner loop: Loop through all Locale combinations\n\t\tif (localeIterator != null)\n\t\t{\n\t\t\twhile (localeIterator.hasNext())\n\t\t\t{\n\t\t\t\t// Get the next Locale from the iterator and start the next\n\t\t\t\t// inner iterator over again.\n\t\t\t\tString newPath = localeIterator.next();\n\t\t\t\tcurrentLocale = localeIterator.getLocale();\n\t\t\t\textenstionsIterator = new ExtensionResourceNameIterator(newPath, extensions);\n\t\t\t\tif (extenstionsIterator.hasNext() == true)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlocaleIterator = null;\n\t\t}\n\n\t\t// Most outer loop: Loop through all combinations of styles and\n\t\t// variations\n\t\twhile (styleIterator.hasNext())\n\t\t{\n\t\t\tString newPath = styleIterator.next();\n\n\t\t\tlocaleIterator = new LocaleResourceNameIterator(newPath, locale);\n\t\t\twhile (localeIterator.hasNext())\n\t\t\t{\n\t\t\t\tnewPath = localeIterator.next();\n\t\t\t\tcurrentLocale = localeIterator.getLocale();\n\t\t\t\textenstionsIterator = new ExtensionResourceNameIterator(newPath, extensions);\n\t\t\t\tif (extenstionsIterator.hasNext() == true)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// No more combinations found. End of iteration.\n\t\treturn false;\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @see org.apache.wicket.util.resource.locator.IResourceStreamLocator#locate(java.lang.Class,\n\t *      java.lang.String)\n\t */\n\tpublic IResourceStream locate(final Class clazz, final String path)\n\t{\n\t\t// First try with the resource finder registered with the application\n\t\t// (allows for markup reloading)\n\t\tIResourceStream stream = locateByResourceFinder(clazz, path);\n\t\tif (stream != null)\n\t\t{\n\t\t\treturn stream;\n\t\t}\n\n\t\t// Then search the resource on the classpath\n\t\tstream = locateByClassLoader(clazz, path);\n\t\tif (stream != null)\n\t\t{\n\t\t\treturn stream;\n\t\t}\n\n\t\treturn null;\n\t}","id":18688,"modified_method":"/**\n\t * \n\t * @see org.apache.wicket.util.resource.locator.IResourceStreamLocator#locate(java.lang.Class,\n\t *      java.lang.String)\n\t */\n\tpublic IResourceStream locate(final Class< ? > clazz, final String path)\n\t{\n\t\t// First try with the resource finder registered with the application\n\t\t// (allows for markup reloading)\n\t\tIResourceStream stream = locateByResourceFinder(clazz, path);\n\t\tif (stream != null)\n\t\t{\n\t\t\treturn stream;\n\t\t}\n\n\t\t// Then search the resource on the classpath\n\t\tstream = locateByClassLoader(clazz, path);\n\t\tif (stream != null)\n\t\t{\n\t\t\treturn stream;\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Search the resource by means of the application registered resource finder\n\t * \n\t * @param clazz\n\t * @param path\n\t * @return resource stream\n\t */\n\tprotected IResourceStream locateByResourceFinder(final Class clazz, final String path)\n\t{\n\t\tif (this.finder == null)\n\t\t{\n\t\t\tfinder = Application.get().getResourceSettings().getResourceFinder();\n\t\t}\n\n\t\t// Log attempt\n\t\tif (log.isDebugEnabled())\n\t\t{\n\t\t\tlog.debug(\"Attempting to locate resource '\" + path + \"' on path \" + finder);\n\t\t}\n\n\t\t// Try to find file resource on the path supplied\n\t\treturn finder.find(clazz, path);\n\t}","id":18689,"modified_method":"/**\n\t * Search the resource by means of the application registered resource finder\n\t * \n\t * @param clazz\n\t * @param path\n\t * @return resource stream\n\t */\n\tprotected IResourceStream locateByResourceFinder(final Class< ? > clazz, final String path)\n\t{\n\t\tif (finder == null)\n\t\t{\n\t\t\tfinder = Application.get().getResourceSettings().getResourceFinder();\n\t\t}\n\n\t\t// Log attempt\n\t\tif (log.isDebugEnabled())\n\t\t{\n\t\t\tlog.debug(\"Attempting to locate resource '\" + path + \"' on path \" + finder);\n\t\t}\n\n\t\t// Try to find file resource on the path supplied\n\t\treturn finder.find(clazz, path);\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Search the the resource my means of the various classloaders available\n\t * \n\t * @param clazz\n\t * @param path\n\t * @return resource stream\n\t */\n\tprotected IResourceStream locateByClassLoader(final Class clazz, final String path)\n\t{\n\t\tClassLoader classLoader = null;\n\t\tif (clazz != null)\n\t\t{\n\t\t\tclassLoader = clazz.getClassLoader();\n\t\t}\n\n\t\tif (classLoader == null)\n\t\t{\n\t\t\t// use context classloader when no specific classloader is set\n\t\t\t// (package resources for instance)\n\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n\t\t}\n\n\t\tif (classLoader == null)\n\t\t{\n\t\t\t// use Wicket classloader when no specific classloader is set\n\t\t\tclassLoader = getClass().getClassLoader();\n\t\t}\n\n\t\t// Log attempt\n\t\tif (log.isDebugEnabled())\n\t\t{\n\t\t\tlog.debug(\"Attempting to locate resource '\" + path + \"' using classloader \" +\n\t\t\t\t\tclassLoader);\n\t\t}\n\n\t\t// Try loading path using classloader\n\t\tfinal URL url = classLoader.getResource(path);\n\t\tif (url != null)\n\t\t{\n\t\t\treturn new UrlResourceStream(url);\n\t\t}\n\t\treturn null;\n\t}","id":18690,"modified_method":"/**\n\t * Search the the resource my means of the various classloaders available\n\t * \n\t * @param clazz\n\t * @param path\n\t * @return resource stream\n\t */\n\tprotected IResourceStream locateByClassLoader(final Class< ? > clazz, final String path)\n\t{\n\t\tClassLoader classLoader = null;\n\t\tif (clazz != null)\n\t\t{\n\t\t\tclassLoader = clazz.getClassLoader();\n\t\t}\n\n\t\tif (classLoader == null)\n\t\t{\n\t\t\t// use context classloader when no specific classloader is set\n\t\t\t// (package resources for instance)\n\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n\t\t}\n\n\t\tif (classLoader == null)\n\t\t{\n\t\t\t// use Wicket classloader when no specific classloader is set\n\t\t\tclassLoader = getClass().getClassLoader();\n\t\t}\n\n\t\t// Log attempt\n\t\tif (log.isDebugEnabled())\n\t\t{\n\t\t\tlog.debug(\"Attempting to locate resource '\" + path + \"' using classloader \" +\n\t\t\t\tclassLoader);\n\t\t}\n\n\t\t// Try loading path using classloader\n\t\tfinal URL url = classLoader.getResource(path);\n\t\tif (url != null)\n\t\t{\n\t\t\treturn new UrlResourceStream(url);\n\t\t}\n\t\treturn null;\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @see org.apache.wicket.util.resource.locator.IResourceStreamLocator#locate(java.lang.Class,\n\t *      java.lang.String, java.lang.String, java.util.Locale, java.lang.String)\n\t */\n\tpublic IResourceStream locate(final Class clazz, String path, final String style,\n\t\t\tfinal Locale locale, final String extension)\n\t{\n\t\t// Try the various combinations of style, locale and extension to find\n\t\t// the resource.\n\t\tResourceNameIterator iter = new ResourceNameIterator(path, style, locale, extension);\n\t\twhile (iter.hasNext())\n\t\t{\n\t\t\tString newPath = (String)iter.next();\n\n\t\t\tIResourceStream stream = locate(clazz, newPath);\n\t\t\tif (stream != null)\n\t\t\t{\n\t\t\t\tstream.setLocale(iter.getLocale());\n\t\t\t\treturn stream;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","id":18691,"modified_method":"/**\n\t * \n\t * @see org.apache.wicket.util.resource.locator.IResourceStreamLocator#locate(java.lang.Class,\n\t *      java.lang.String, java.lang.String, java.util.Locale, java.lang.String)\n\t */\n\tpublic IResourceStream locate(final Class< ? > clazz, String path, final String style,\n\t\tfinal Locale locale, final String extension)\n\t{\n\t\t// Try the various combinations of style, locale and extension to find\n\t\t// the resource.\n\t\tResourceNameIterator iter = new ResourceNameIterator(path, style, locale, extension);\n\t\twhile (iter.hasNext())\n\t\t{\n\t\t\tString newPath = (String)iter.next();\n\n\t\t\tIResourceStream stream = locate(clazz, newPath);\n\t\t\tif (stream != null)\n\t\t\t{\n\t\t\t\tstream.setLocale(iter.getLocale());\n\t\t\t\treturn stream;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @see java.util.Iterator#hasNext()\n\t */\n\tpublic boolean hasNext()\n\t{\n\t\treturn (this.state < 3);\n\t}","id":18692,"modified_method":"/**\n\t * \n\t * @see java.util.Iterator#hasNext()\n\t */\n\tpublic boolean hasNext()\n\t{\n\t\treturn (state < 3);\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @see java.util.Iterator#next()\n\t */\n\tpublic Object next()\n\t{\n\t\tif (state == 0)\n\t\t{\n\t\t\tstate++;\n\t\t\tif ((style != null) && (variation != null))\n\t\t\t{\n\t\t\t\treturn path + '_' + style + '_' + variation;\n\t\t\t}\n\t\t}\n\n\t\tif (state == 1)\n\t\t{\n\t\t\tstate++;\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\treturn path + '_' + style;\n\t\t\t}\n\t\t}\n\n\t\tstate = 3;\n\t\treturn path;\n\t}","id":18693,"modified_method":"/**\n\t * \n\t * @see java.util.Iterator#next()\n\t */\n\tpublic String next()\n\t{\n\t\tif (state == 0)\n\t\t{\n\t\t\tstate++;\n\t\t\tif ((style != null) && (variation != null))\n\t\t\t{\n\t\t\t\treturn path + '_' + style + '_' + variation;\n\t\t\t}\n\t\t}\n\n\t\tif (state == 1)\n\t\t{\n\t\t\tstate++;\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\treturn path + '_' + style;\n\t\t\t}\n\t\t}\n\n\t\tstate = 3;\n\t\treturn path;\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Construct.\n\t * \n\t * @param xsltResource\n\t *            the XSL stylesheet as an {@link IResourceStream}\n\t * @param xmlResource\n\t *            the input XML document as an {@link IResourceStream}\n\t */\n\tpublic XSLTResourceStream(IResourceStream xsltResource, IResourceStream xmlResource)\n\t{\n\t\ttry\n\t\t{\n\t\t\tjavax.xml.transform.Source xmlSource = new javax.xml.transform.stream.StreamSource(\n\t\t\t\t\txmlResource.getInputStream());\n\t\t\tjavax.xml.transform.Source xsltSource = new javax.xml.transform.stream.StreamSource(\n\t\t\t\t\txsltResource.getInputStream());\n\t\t\tout = new ByteArrayOutputStream();\n\t\t\tjavax.xml.transform.Result result = new javax.xml.transform.stream.StreamResult(out);\n\n\t\t\t// create an instance of TransformerFactory\n\t\t\tjavax.xml.transform.TransformerFactory transFact = javax.xml.transform.TransformerFactory\n\t\t\t\t\t.newInstance();\n\n\t\t\tjavax.xml.transform.Transformer trans = transFact.newTransformer(xsltSource);\n\t\t\tMap parameters = getParameters();\n\t\t\tif (parameters != null)\n\t\t\t{\n\t\t\t\tIterator it = parameters.entrySet().iterator();\n\t\t\t\twhile (it.hasNext())\n\t\t\t\t{\n\t\t\t\t\tEntry e = (Entry)it.next();\n\t\t\t\t\ttrans.setParameter(e.getKey().toString(), e.getValue().toString());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttrans.transform(xmlSource, result);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tthrow new WicketRuntimeException(e);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\txmlResource.close();\n\t\t\t\txsltResource.close();\n\t\t\t}\n\t\t\tcatch (IOException e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t}","id":18694,"modified_method":"/**\n\t * Construct.\n\t * \n\t * @param xsltResource\n\t *            the XSL stylesheet as an {@link IResourceStream}\n\t * @param xmlResource\n\t *            the input XML document as an {@link IResourceStream}\n\t */\n\tpublic XSLTResourceStream(IResourceStream xsltResource, IResourceStream xmlResource)\n\t{\n\t\ttry\n\t\t{\n\t\t\tjavax.xml.transform.Source xmlSource = new javax.xml.transform.stream.StreamSource(\n\t\t\t\txmlResource.getInputStream());\n\t\t\tjavax.xml.transform.Source xsltSource = new javax.xml.transform.stream.StreamSource(\n\t\t\t\txsltResource.getInputStream());\n\t\t\tout = new ByteArrayOutputStream();\n\t\t\tjavax.xml.transform.Result result = new javax.xml.transform.stream.StreamResult(out);\n\n\t\t\t// create an instance of TransformerFactory\n\t\t\tjavax.xml.transform.TransformerFactory transFact = javax.xml.transform.TransformerFactory.newInstance();\n\n\t\t\tjavax.xml.transform.Transformer trans = transFact.newTransformer(xsltSource);\n\t\t\tMap<Object, Object> parameters = getParameters();\n\t\t\tif (parameters != null)\n\t\t\t{\n\t\t\t\tIterator<Entry<Object, Object>> it = parameters.entrySet().iterator();\n\t\t\t\twhile (it.hasNext())\n\t\t\t\t{\n\t\t\t\t\tEntry<Object, Object> e = it.next();\n\t\t\t\t\ttrans.setParameter(e.getKey().toString(), e.getValue().toString());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttrans.transform(xmlSource, result);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tthrow new WicketRuntimeException(e);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\txmlResource.close();\n\t\t\t\txsltResource.close();\n\t\t\t}\n\t\t\tcatch (IOException e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t}","commit_id":"01a0cf3bddbbc46cf670ecb0ec19691d66472e9f","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * Create ZIP archive containing wiki pages rendered in HTML, attached files and used skins.\n     * \n     * @param context the XWiki context.\n     * @return always return null.\n     * @throws XWikiException error when exporting HTML ZIP package.\n     * @throws IOException error when exporting HTML ZIP package.\n     * @since XWiki Platform 1.3M1\n     */\n    private String exportHTML(XWikiContext context) throws XWikiException, IOException\n    {\n        XWikiRequest request = context.getRequest();\n\n        String description = request.get(\"description\");\n        String name = request.get(\"name\");\n        String[] pages = request.getParameterValues(\"pages\");\n\n        List pageList = new ArrayList();\n        if (pages == null || pages.length == 0) {\n            pageList.add(context.getDoc().getFullName());\n\n            if (name == null || name.trim().length() == 0) {\n                name = context.getDoc().getFullName();\n            }\n        } else {\n            Map wikiQueries = new HashMap();\n            for (int i = 0; i < pages.length; ++i) {\n                String pattern = pages[i];\n                \n                String wikiName;\n                if (pattern.contains(\":\")) {\n                    int index = pattern.indexOf(':');\n                    wikiName = pattern.substring(0, index);\n                    pattern = pattern.substring(index + 1);\n                } else {\n                    wikiName = context.getDatabase();\n                }\n                \n                StringBuffer where;\n                List params;\n                \n                if (!wikiQueries.containsKey(wikiName)) {\n                    Object[] query = new Object[2];\n                    query[0] = where = new StringBuffer(\"where \");\n                    query[1] = params = new ArrayList();\n                    wikiQueries.put(wikiName, query);\n                } else {\n                    Object[] query = (Object[])wikiQueries.get(wikiName);\n                    where = (StringBuffer)query[0];\n                    params = (List)query[1];\n                }\n                \n                if (i > 0) {\n                    where.append(\" or \");\n                }\n                \n                where.append(\"doc.fullName like ?\");\n                params.add(pattern);\n            }\n            \n            String database = context.getDatabase();\n            try {\n                for (Iterator it = wikiQueries.entrySet().iterator(); it.hasNext();) {\n                    Map.Entry entry = (Map.Entry)it.next();\n                    String wikiName = (String)entry.getKey();\n                    Object[] query = (Object[])entry.getValue();\n                    String where = ((StringBuffer)query[0]).toString();\n                    List params = (List)query[1];\n                    \n                    context.setDatabase(wikiName);\n                    List docsNames = context.getWiki().getStore().searchDocumentsNames(where, params, context);\n                    for (Iterator itDocName = docsNames.iterator(); itDocName.hasNext();) {\n                        String docName = (String)itDocName.next();\n                        pageList.add(wikiName + XWikiDocument.DB_SPACE_SEP + docName);\n                    }\n                }\n            } finally {\n                context.setDatabase(database);\n            }\n        }\n        \n        if (pageList.size() == 0) {\n            return null;\n        }\n\n        HtmlPackager packager = new HtmlPackager();\n\n        if (name != null && name.trim().length() > 0) {\n            packager.setName(name);\n        }\n\n        if (description != null) {\n            packager.setDescription(description);\n        }\n        \n        packager.addPages(pageList);\n        \n        packager.export(context);\n        \n        return null;\n    }","id":18695,"modified_method":"/**\n     * Create ZIP archive containing wiki pages rendered in HTML, attached files and used skins.\n     * \n     * @param context the XWiki context.\n     * @return always return null.\n     * @throws XWikiException error when exporting HTML ZIP package.\n     * @throws IOException error when exporting HTML ZIP package.\n     * @since XWiki Platform 1.3M1\n     */\n    private String exportHTML(XWikiContext context) throws XWikiException, IOException\n    {\n        XWikiRequest request = context.getRequest();\n\n        String description = request.get(\"description\");\n        String name = request.get(\"name\");\n        String[] pages = request.getParameterValues(\"pages\");\n\n        List<String> pageList = new ArrayList<String>();\n        if (pages == null || pages.length == 0) {\n            pageList.add(context.getDoc().getFullName());\n\n            if (StringUtils.isBlank(name)) {\n                name = context.getDoc().getFullName();\n            }\n        } else {\n            Map<String, Object[]> wikiQueries = new HashMap<String, Object[]>();\n            for (int i = 0; i < pages.length; ++i) {\n                String pattern = pages[i];\n\n                String wikiName;\n                if (pattern.contains(\":\")) {\n                    int index = pattern.indexOf(':');\n                    wikiName = pattern.substring(0, index);\n                    pattern = pattern.substring(index + 1);\n                } else {\n                    wikiName = context.getDatabase();\n                }\n\n                StringBuffer where;\n                List<String> params;\n\n                if (!wikiQueries.containsKey(wikiName)) {\n                    Object[] query = new Object[2];\n                    query[0] = where = new StringBuffer(\"where \");\n                    query[1] = params = new ArrayList<String>();\n                    wikiQueries.put(wikiName, query);\n                } else {\n                    Object[] query = wikiQueries.get(wikiName);\n                    where = (StringBuffer) query[0];\n                    params = (List<String>) query[1];\n                }\n\n                if (i > 0) {\n                    where.append(\" or \");\n                }\n\n                where.append(\"doc.fullName like ?\");\n                params.add(pattern);\n            }\n\n            String database = context.getDatabase();\n            try {\n                for (Map.Entry<String, Object[]> entry : wikiQueries.entrySet()) {\n                    String wikiName = entry.getKey();\n                    Object[] query = entry.getValue();\n                    String where = ((StringBuffer) query[0]).toString();\n                    @SuppressWarnings(\"unchecked\")\n                    List<String> params = (List<String>) query[1];\n\n                    context.setDatabase(wikiName);\n                    List<String> docsNames = context.getWiki().getStore().searchDocumentsNames(where, params, context);\n                    for (String docName : docsNames) {\n                        pageList.add(wikiName + XWikiDocument.DB_SPACE_SEP + docName);\n                    }\n                }\n            } finally {\n                context.setDatabase(database);\n            }\n        }\n\n        if (pageList.size() == 0) {\n            return null;\n        }\n\n        HtmlPackager packager = new HtmlPackager();\n\n        if (name != null && name.trim().length() > 0) {\n            packager.setName(name);\n        }\n\n        if (description != null) {\n            packager.setDescription(description);\n        }\n\n        packager.addPages(pageList);\n\n        packager.export(context);\n\n        return null;\n    }","commit_id":"573a5b1d85aa164b2444d02c470b87af78210b1f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private String exportPDFOrRTF(String format, XWikiContext context) throws XWikiException,\n        IOException\n    {\n        XWikiURLFactory urlf =\n            context.getWiki().getURLFactoryService().createURLFactory(XWikiContext.MODE_PDF,\n                context);\n        context.setURLFactory(urlf);\n        PdfExportImpl pdfexport = new PdfExportImpl();\n        XWikiDocument doc = context.getDoc();\n        handleRevision(context);\n\n        int type = PdfExportImpl.PDF;\n        if (format.equals(\"rtf\")) {\n            type = PdfExportImpl.RTF;\n        } else {\n            format = \"pdf\";\n        }\n\n        context.getResponse().setContentType(\"application/\" + format);\n        context.getResponse().addHeader(\n            \"Content-disposition\",\n            \"inline; filename=\" + Utils.encode(doc.getSpace(), context) + \"_\"\n                + Utils.encode(doc.getName(), context) + \".\" + format);\n        pdfexport.export(doc, context.getResponse().getOutputStream(), type, context);\n\n        return null;\n    }","id":18696,"modified_method":"private String exportPDFOrRTF(String format, XWikiContext context) throws XWikiException, IOException\n    {\n        XWikiURLFactory urlf =\n            context.getWiki().getURLFactoryService().createURLFactory(XWikiContext.MODE_PDF, context);\n        context.setURLFactory(urlf);\n        PdfExportImpl pdfexport = new PdfExportImpl();\n        XWikiDocument doc = context.getDoc();\n        handleRevision(context);\n\n        int type = PdfExportImpl.PDF;\n        if (format.equals(\"rtf\")) {\n            type = PdfExportImpl.RTF;\n        } else {\n            format = \"pdf\";\n        }\n\n        context.getResponse().setContentType(\"application/\" + format);\n        context.getResponse().addHeader(\n            \"Content-disposition\",\n            \"inline; filename=\" + Util.encodeURI(doc.getSpace(), context) + \"_\"\n                + Util.encodeURI(doc.getName(), context) + \".\" + format);\n        pdfexport.export(doc, context.getResponse().getOutputStream(), type, context);\n\n        return null;\n    }","commit_id":"573a5b1d85aa164b2444d02c470b87af78210b1f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String render(XWikiContext context) throws XWikiException {\n        XWikiURLFactory urlf = context.getWiki().getURLFactoryService().createURLFactory(XWikiContext.MODE_PDF, context);\n        context.setURLFactory(urlf);\n        PdfExportImpl pdfexport = new PdfExportImpl();\n        XWikiDocument doc = context.getDoc();\n        handleRevision(context);\n            \n        try {\n         context.getResponse().setContentType(\"application/pdf\");\n         context.getResponse().addHeader(\"Content-disposition\", \"inline; filename=\" + Utils.encode(doc.getSpace(), context) + \"_\" + Utils.encode(doc.getName(), context) + \".pdf\");\n\n         pdfexport.export(doc, context.getResponse().getOutputStream(), PdfExportImpl.PDF, context);\n        } catch (IOException e) {\n           throw new XWikiException(XWikiException.MODULE_XWIKI_APP,\n                XWikiException.ERROR_XWIKI_APP_SEND_RESPONSE_EXCEPTION,\n                \"Exception while sending response\", e);\n        }\n        return null;\n\t}","id":18697,"modified_method":"@Override\n    public String render(XWikiContext context) throws XWikiException\n    {\n        XWikiURLFactory urlf =\n            context.getWiki().getURLFactoryService().createURLFactory(XWikiContext.MODE_PDF, context);\n        context.setURLFactory(urlf);\n        PdfExportImpl pdfexport = new PdfExportImpl();\n        XWikiDocument doc = context.getDoc();\n        handleRevision(context);\n\n        try {\n            context.getResponse().setContentType(\"application/pdf\");\n            context.getResponse().addHeader(\n                \"Content-disposition\",\n                \"inline; filename=\" + Util.encodeURI(doc.getSpace(), context) + \"_\"\n                    + Util.encodeURI(doc.getName(), context) + \".pdf\");\n\n            pdfexport.export(doc, context.getResponse().getOutputStream(), PdfExportImpl.PDF, context);\n        } catch (IOException e) {\n            throw new XWikiException(XWikiException.MODULE_XWIKI_APP,\n                XWikiException.ERROR_XWIKI_APP_SEND_RESPONSE_EXCEPTION, \"Exception while sending response\", e);\n        }\n        return null;\n    }","commit_id":"573a5b1d85aa164b2444d02c470b87af78210b1f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void checkProjectLicenses( MavenProject project, DocumentationReporter reporter )\n    {\n        List licenses = project.getLicenses();\n\n        if ( licenses == null || licenses.isEmpty() )\n        {\n            reporter.error( \"pom.xml has no <licenses>/<license> specified.\" );\n        }\n        else\n        {\n            for ( Iterator it = licenses.iterator(); it.hasNext(); )\n            {\n                License license = (License) it.next();\n\n                if ( StringUtils.isEmpty( license.getName() ) )\n                {\n                    reporter.error( \"pom.xml is missing the <licenses>/<license>/<name> tag.\" );\n                }\n                else\n                {\n                    String url = license.getUrl();\n                    if ( StringUtils.isEmpty( url ) )\n                    {\n                        reporter.error( \"pom.xml is missing the <licenses>/<license>/<url> tag for the license \\'\"\n                            + license.getName() + \"\\'.\" );\n                    }\n                    else\n                    {\n                        checkURL( url, \"license \\'\" + license.getName() + \"\\'\", reporter );\n                    }\n                }\n            }\n        }\n    }","id":18698,"modified_method":"private void checkProjectLicenses( MavenProject project, DocumentationReporter reporter )\n    {\n        @SuppressWarnings( \"unchecked\" )\n        List<License> licenses = project.getLicenses();\n\n        if ( licenses == null || licenses.isEmpty() )\n        {\n            reporter.error( \"pom.xml has no <licenses>/<license> specified.\" );\n        }\n        else\n        {\n            for ( License license : licenses )\n            {\n                if ( StringUtils.isEmpty( license.getName() ) )\n                {\n                    reporter.error( \"pom.xml is missing the <licenses>/<license>/<name> tag.\" );\n                }\n                else\n                {\n                    String url = license.getUrl();\n                    if ( StringUtils.isEmpty( url ) )\n                    {\n                        reporter.error( \"pom.xml is missing the <licenses>/<license>/<url> tag for the license \\'\"\n                            + license.getName() + \"\\'.\" );\n                    }\n                    else\n                    {\n                        checkURL( url, \"license \\'\" + license.getName() + \"\\'\", reporter );\n                    }\n                }\n            }\n        }\n    }","commit_id":"735b3e2e1eff02424ecaba5bc652d65ba7c5aa0d","url":"https://github.com/apache/maven-plugins"},{"original_method":"private String getURLProtocol( String url )\n        throws MalformedURLException\n    {\n        String protocol;\n\n        URL licenseUrl = new URL( url );\n        protocol = licenseUrl.getProtocol();\n\n        if ( protocol != null )\n        {\n            protocol = protocol.toLowerCase();\n        }\n\n        return protocol;\n    }","id":18699,"modified_method":"private String getURLProtocol( String url )\n        throws MalformedURLException\n    {\n        URL licenseUrl = new URL( url );\n        String protocol = licenseUrl.getProtocol();\n\n        if ( protocol != null )\n        {\n            protocol = protocol.toLowerCase();\n        }\n\n        return protocol;\n    }","commit_id":"735b3e2e1eff02424ecaba5bc652d65ba7c5aa0d","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n        setupProxy();\n\n        if ( output != null )\n        {\n            getLog().info( \"Writing documentation check results to: \" + output );\n        }\n\n        Map reporters = new LinkedHashMap();\n        boolean hasErrors = false;\n\n        for ( Iterator it = reactorProjects.iterator(); it.hasNext(); )\n        {\n            MavenProject project = (MavenProject) it.next();\n\n            if ( approveProjectPackaging( project.getPackaging() ) )\n            {\n                getLog().info( \"Checking project: \" + project.getName() );\n\n                DocumentationReporter reporter = new DocumentationReporter();\n\n                checkProject( project, reporter );\n\n                if ( !hasErrors && reporter.hasErrors() )\n                {\n                    hasErrors = true;\n                }\n\n                reporters.put( project, reporter );\n            }\n            else\n            {\n                getLog().info( \"Skipping unsupported project: \" + project.getName() );\n            }\n        }\n\n        String messages;\n\n        messages = buildErrorMessages( reporters );\n\n        if ( !hasErrors )\n        {\n            messages += \"No documentation errors were found.\";\n        }\n\n        try\n        {\n            writeMessages( messages, hasErrors );\n        }\n        catch ( IOException e )\n        {\n            throw new MojoExecutionException( \"Error writing results to output file: \" + output );\n        }\n\n        if ( hasErrors )\n        {\n            String logLocation;\n            if ( output == null )\n            {\n                logLocation = \"Please see the console output above for more information.\";\n            }\n            else\n            {\n                logLocation = \"Please see \\'\" + output + \"\\' for more information.\";\n            }\n\n            throw new MojoFailureException( \"Documentation problems were found. \" + logLocation );\n        }\n    }","id":18700,"modified_method":"public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n        setupProxy();\n\n        if ( output != null )\n        {\n            getLog().info( \"Writing documentation check results to: \" + output );\n        }\n\n        Map<MavenProject, DocumentationReporter> reporters = new LinkedHashMap<MavenProject, DocumentationReporter>();\n        boolean hasErrors = false;\n\n        for ( MavenProject project : reactorProjects )\n        {\n            if ( approveProjectPackaging( project.getPackaging() ) )\n            {\n                getLog().info( \"Checking project: \" + project.getName() );\n\n                DocumentationReporter reporter = new DocumentationReporter();\n\n                checkProject( project, reporter );\n\n                if ( !hasErrors && reporter.hasErrors() )\n                {\n                    hasErrors = true;\n                }\n\n                reporters.put( project, reporter );\n            }\n            else\n            {\n                getLog().info( \"Skipping unsupported project: \" + project.getName() );\n            }\n        }\n\n        String messages;\n\n        messages = buildErrorMessages( reporters );\n\n        if ( !hasErrors )\n        {\n            messages += \"No documentation errors were found.\";\n        }\n\n        try\n        {\n            writeMessages( messages, hasErrors );\n        }\n        catch ( IOException e )\n        {\n            throw new MojoExecutionException( \"Error writing results to output file: \" + output );\n        }\n\n        if ( hasErrors )\n        {\n            String logLocation;\n            if ( output == null )\n            {\n                logLocation = \"Please see the console output above for more information.\";\n            }\n            else\n            {\n                logLocation = \"Please see \\'\" + output + \"\\' for more information.\";\n            }\n\n            throw new MojoFailureException( \"Documentation problems were found. \" + logLocation );\n        }\n    }","commit_id":"735b3e2e1eff02424ecaba5bc652d65ba7c5aa0d","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Checks the project configured plugins if the required report plugins are present.\n     *\n     * @param project  MavenProject to check\n     * @param reporter listener\n     * @todo maybe this should be checked default for all project?\n     */\n    private void checkConfiguredReportPlugins( MavenProject project, DocumentationReporter reporter )\n    {\n        List expectedPlugins = getRequiredPlugins();\n\n        List reportPlugins = project.getReportPlugins();\n        if ( reportPlugins != null && reportPlugins.size() > 0 )\n        {\n            for ( Iterator plugins = reportPlugins.iterator(); plugins.hasNext(); )\n            {\n                ReportPlugin plugin = (ReportPlugin) plugins.next();\n\n                expectedPlugins.remove( plugin.getArtifactId() );\n            }\n        }\n        else\n        {\n            reporter.error( \"pom.xml has no report plugins configured.\" );\n        }\n\n        for ( Iterator plugins = expectedPlugins.iterator(); plugins.hasNext(); )\n        {\n            reporter.error( \"pom.xml is missing the report plugin: \" + plugins.next().toString() + \".\" );\n        }\n    }","id":18701,"modified_method":"/**\n     * Checks the project configured plugins if the required report plugins are present.\n     *\n     * @param project  MavenProject to check\n     * @param reporter listener\n     * @todo maybe this should be checked default for all project?\n     */\n    private void checkConfiguredReportPlugins( MavenProject project, DocumentationReporter reporter )\n    {\n        List<String> expectedPlugins = getRequiredPlugins();\n\n        @SuppressWarnings( \"unchecked\" )\n        List<ReportPlugin> reportPlugins = project.getReportPlugins();\n        if ( reportPlugins != null && reportPlugins.size() > 0 )\n        {\n            for ( ReportPlugin plugin : reportPlugins )\n            {\n                expectedPlugins.remove( plugin.getArtifactId() );\n            }\n        }\n        else\n        {\n            reporter.error( \"pom.xml has no report plugins configured.\" );\n        }\n\n        for ( String expectedPlugin : expectedPlugins )\n        {\n            reporter.error( \"pom.xml is missing the report plugin: \" + expectedPlugin + \".\" );\n        }\n    }","commit_id":"735b3e2e1eff02424ecaba5bc652d65ba7c5aa0d","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Returns a List of Strings of required report plugins.\n     *\n     * @return List of report plugin artifactIds\n     */\n    private List getRequiredPlugins()\n    {\n        List list = new ArrayList();\n\n        list.add( \"maven-javadoc-plugin\" );\n        list.add( \"maven-jxr-plugin\" );\n\n        return list;\n    }","id":18702,"modified_method":"/**\n     * Returns a List of Strings of required report plugins.\n     *\n     * @return List of report plugin artifactIds\n     */\n    private List<String> getRequiredPlugins()\n    {\n        List<String> list = new ArrayList<String>();\n\n        list.add( \"maven-javadoc-plugin\" );\n        list.add( \"maven-jxr-plugin\" );\n\n        return list;\n    }","commit_id":"735b3e2e1eff02424ecaba5bc652d65ba7c5aa0d","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected void checkPackagingSpecificDocumentation( MavenProject project, DocumentationReporter reporter )\n    {\n        PluginDescriptor descriptor = new PluginDescriptor();\n\n        try\n        {\n            mojoScanner.populatePluginDescriptor( project, descriptor );\n        }\n        catch ( InvalidPluginDescriptorException e )\n        {\n            reporter.error( \"Failed to parse mojo descriptors.\\nError: \" + e.getMessage() );\n            descriptor = null;\n        }\n        catch ( ExtractionException e )\n        {\n            reporter.error( \"Failed to parse mojo descriptors.\\nError: \" + e.getMessage() );\n            descriptor = null;\n        }\n\n        if ( descriptor != null )\n        {\n            List mojos = descriptor.getMojos();\n\n            // ensure that all mojo classes are documented\n            if ( mojos != null && !mojos.isEmpty() )\n            {\n                for ( Iterator it = mojos.iterator(); it.hasNext(); )\n                {\n                    MojoDescriptor mojo = (MojoDescriptor) it.next();\n\n                    String mojoDescription = mojo.getDescription();\n\n                    if ( mojoDescription == null || mojoDescription.trim().length() < MIN_DESCRIPTION_LENGTH )\n                    {\n                        reporter.error( \"Mojo: \\'\" + mojo.getGoal() + \"\\' is missing a description.\" );\n                    }\n\n                    List params = mojo.getParameters();\n\n                    // ensure that all parameters are documented\n                    if ( params != null && !params.isEmpty() )\n                    {\n                        for ( Iterator paramIterator = params.iterator(); paramIterator.hasNext(); )\n                        {\n                            Parameter param = (Parameter) paramIterator.next();\n\n                            if ( param.getRequirement() == null && param.isEditable() )\n                            {\n                                String paramDescription = param.getDescription();\n\n                                if ( paramDescription == null\n                                    || paramDescription.trim().length() < MIN_DESCRIPTION_LENGTH )\n                                {\n                                    reporter.error( \"Parameter: \\'\" + param.getName() + \"\\' in mojo: \\'\"\n                                        + mojo.getGoal() + \"\\' is missing a description.\" );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        checkConfiguredReportPlugins( project, reporter );\n\n        checkProjectSite( project, reporter );\n    }","id":18703,"modified_method":"protected void checkPackagingSpecificDocumentation( MavenProject project, DocumentationReporter reporter )\n    {\n        PluginDescriptor descriptor = new PluginDescriptor();\n\n        try\n        {\n            mojoScanner.populatePluginDescriptor( project, descriptor );\n        }\n        catch ( InvalidPluginDescriptorException e )\n        {\n            reporter.error( \"Failed to parse mojo descriptors.\\nError: \" + e.getMessage() );\n            descriptor = null;\n        }\n        catch ( ExtractionException e )\n        {\n            reporter.error( \"Failed to parse mojo descriptors.\\nError: \" + e.getMessage() );\n            descriptor = null;\n        }\n\n        if ( descriptor != null )\n        {\n            @SuppressWarnings( \"unchecked\" )\n            List<MojoDescriptor> mojos = descriptor.getMojos();\n\n            // ensure that all mojo classes are documented\n            if ( mojos != null && !mojos.isEmpty() )\n            {\n                for ( MojoDescriptor mojo : mojos )\n                {\n                    String mojoDescription = mojo.getDescription();\n\n                    if ( mojoDescription == null || mojoDescription.trim().length() < MIN_DESCRIPTION_LENGTH )\n                    {\n                        reporter.error( \"Mojo: \\'\" + mojo.getGoal() + \"\\' is missing a description.\" );\n                    }\n\n                    @SuppressWarnings( \"unchecked\" )\n                    List<Parameter> params = mojo.getParameters();\n\n                    // ensure that all parameters are documented\n                    if ( params != null && !params.isEmpty() )\n                    {\n                        for ( Parameter param : params )\n                        {\n                            if ( param.getRequirement() == null && param.isEditable() )\n                            {\n                                String paramDescription = param.getDescription();\n\n                                if ( paramDescription == null\n                                    || paramDescription.trim().length() < MIN_DESCRIPTION_LENGTH )\n                                {\n                                    reporter.error( \"Parameter: \\'\" + param.getName() + \"\\' in mojo: \\'\"\n                                        + mojo.getGoal() + \"\\' is missing a description.\" );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        checkConfiguredReportPlugins( project, reporter );\n\n        checkProjectSite( project, reporter );\n    }","commit_id":"735b3e2e1eff02424ecaba5bc652d65ba7c5aa0d","url":"https://github.com/apache/maven-plugins"},{"original_method":"public boolean hasErrors()\n    {\n        for ( Iterator iter = reports.iterator(); iter.hasNext(); )\n        {\n            DocumentationReport report = (DocumentationReport) iter.next();\n\n            if ( report.getType() == DocumentationReport.TYPE_ERROR )\n            {\n                //first occurrence will do\n                return true;\n            }\n        }\n\n        return false;\n    }","id":18704,"modified_method":"public boolean hasErrors()\n    {\n        for ( DocumentationReport report : reports )\n        {\n            if ( report.getType() == DocumentationReport.TYPE_ERROR )\n            {\n                // first occurrence will do\n                return true;\n            }\n        }\n\n        return false;\n    }","commit_id":"735b3e2e1eff02424ecaba5bc652d65ba7c5aa0d","url":"https://github.com/apache/maven-plugins"},{"original_method":"public List getMessagesByType( int type )\n    {\n        List list = new ArrayList();\n\n        for ( Iterator iter = reports.iterator(); iter.hasNext(); )\n        {\n            DocumentationReport report = (DocumentationReport) iter.next();\n\n            if ( report.getType() == type )\n            {\n                list.add( report.getMessage() );\n            }\n        }\n\n        return list;\n    }","id":18705,"modified_method":"public List<String> getMessagesByType( int type )\n    {\n        List<String> list = new ArrayList<String>();\n\n        for ( DocumentationReport report : reports )\n        {\n            if ( report.getType() == type )\n            {\n                list.add( report.getMessage() );\n            }\n        }\n\n        return list;\n    }","commit_id":"735b3e2e1eff02424ecaba5bc652d65ba7c5aa0d","url":"https://github.com/apache/maven-plugins"},{"original_method":"public List getMessages()\n    {\n        List list = new ArrayList();\n\n        for ( Iterator iter = reports.iterator(); iter.hasNext(); )\n        {\n            DocumentationReport report = (DocumentationReport) iter.next();\n\n            list.add( report.getMessage() );\n        }\n\n        return list;\n    }","id":18706,"modified_method":"public List<String> getMessages()\n    {\n        List<String> list = new ArrayList<String>();\n\n        for ( DocumentationReport report : reports )\n        {\n            list.add( report.getMessage() );\n        }\n\n        return list;\n    }","commit_id":"735b3e2e1eff02424ecaba5bc652d65ba7c5aa0d","url":"https://github.com/apache/maven-plugins"},{"original_method":"@Test\n    public void testIsNotGzipCompressedByContentType() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir, compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.mp3\",filesize);\n\n        FilterHolder holder = tester.setContentServlet(org.eclipse.jetty.servlet.DefaultServlet.class);\n        holder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        try\n        {\n            tester.start();\n            HttpTester.Response http = tester.assertIsResponseNotGzipCompressed(\"GET\",\"file.mp3\", filesize, HttpStatus.OK_200);\n            Assert.assertNull(http.get(\"Vary\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18707,"modified_method":"@Test\n    public void testIsNotGzipCompressedByContentType() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        // Prepare server file\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.mp3\",filesize);\n\n        // Add content servlet\n        tester.setContentServlet(DefaultServlet.class);\n\n        try\n        {\n            tester.start();\n            HttpTester.Response http = assertIsResponseNotGzipCompressed(tester,\"GET\",\"file.mp3\",filesize,HttpStatus.OK_200);\n            Assert.assertNull(http.get(\"Vary\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testIsNotGzipCompressedHttpBadRequestStatus() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir, compressionType);\n        \n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        // Test error code 400\n        tester.setContentServlet(HttpErrorServlet.class);\n\n        try\n        {\n            tester.start();\n            \n            HttpTester.Response response = tester.executeRequest(\"GET\",\"/context/\",2,TimeUnit.SECONDS);\n            \n            assertThat(\"Response status\", response.getStatus(), is(HttpStatus.BAD_REQUEST_400));\n            assertThat(\"Content-Encoding\",response.get(\"Content-Encoding\"),not(containsString(GzipFilter.GZIP)));\n            \n            String content = tester.readResponse(response);\n            assertThat(\"Response content\", content, is(\"error message\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18708,"modified_method":"@Test\n    public void testIsNotGzipCompressedHttpBadRequestStatus() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n\n        // Test error code 400\n        tester.setContentServlet(HttpErrorServlet.class);\n\n        try\n        {\n            tester.start();\n\n            HttpTester.Response response = tester.executeRequest(\"GET\",\"/context/\",2,TimeUnit.SECONDS);\n\n            assertThat(\"Response status\",response.getStatus(),is(HttpStatus.BAD_REQUEST_400));\n            assertThat(\"Content-Encoding\",response.get(\"Content-Encoding\"),not(containsString(compressionType)));\n\n            String content = tester.readResponse(response);\n            assertThat(\"Response content\",content,is(\"error message\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testIsGzipCompressedEmpty() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir, compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        tester.prepareServerFile(\"empty.txt\",0);\n        \n        FilterHolder holder = tester.setContentServlet(org.eclipse.jetty.servlet.DefaultServlet.class);\n        holder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        try\n        {\n            tester.start();\n            @SuppressWarnings(\"unused\")\n            HttpTester.Response http = tester.assertIsResponseNotGzipCompressed(\"GET\",\"empty.txt\",0,200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18709,"modified_method":"@Test\n    public void testIsGzipCompressedEmpty() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        // Prepare server file\n        tester.prepareServerFile(\"empty.txt\",0);\n\n        // Set content servlet\n        tester.setContentServlet(DefaultServlet.class);\n\n        try\n        {\n            tester.start();\n\n            HttpTester.Response response;\n\n            response = tester.executeRequest(\"GET\",\"/context/empty.txt\",2,TimeUnit.SECONDS);\n\n            assertThat(\"Response status\",response.getStatus(),is(HttpStatus.OK_200));\n            assertThat(\"Content-Encoding\",response.get(\"Content-Encoding\"),not(containsString(compressionType)));\n\n            String content = tester.readResponse(response);\n            assertThat(\"Response content size\",content.length(),is(0));\n            String expectedContent = IO.readToString(testingdir.getFile(\"empty.txt\"));\n            assertThat(\"Response content\",content,is(expectedContent));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testUserAgentExclusion() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        FilterHolder holder = tester.setContentServlet(DefaultServlet.class);\n        holder.setInitParameter(\"excludedAgents\",\"bar, foo\");\n        tester.setUserAgent(\"foo\");\n\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        try\n        {\n            tester.start();\n            tester.assertIsResponseNotGzipCompressed(\"GET\",\"file.txt\",filesize,HttpStatus.OK_200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18710,"modified_method":"@Test\n    public void testUserAgentExclusion() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n        tester.setUserAgent(\"foo\");\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n        gzipHolder.setInitParameter(\"excludedAgents\",\"bar, foo\");\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n\n        // Prepare server file\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        // Add content servlet\n        tester.setContentServlet(DefaultServlet.class);\n\n        try\n        {\n            tester.start();\n            assertIsResponseNotGzipCompressed(tester,\"GET\",\"file.txt\",filesize,HttpStatus.OK_200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testExcludePaths() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        FilterHolder holder = tester.setContentServlet(DefaultServlet.class);\n        holder.setInitParameter(\"excludePaths\",\"/bar/, /context/\");\n\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        try\n        {\n            tester.start();\n            tester.assertIsResponseNotGzipCompressed(\"GET\",\"file.txt\",filesize,HttpStatus.OK_200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18711,"modified_method":"@Test\n    public void testExcludePaths() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        gzipHolder.setInitParameter(\"excludePaths\",\"/bar/, /context/\");\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n\n        // Prepare server file\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        // Set content servlet\n        tester.setContentServlet(DefaultServlet.class);\n\n        try\n        {\n            tester.start();\n            assertIsResponseNotGzipCompressed(tester,\"GET\",\"file.txt\",filesize,HttpStatus.OK_200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testIsNotGzipCompressedByExcludedContentTypeWithCharset() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir, compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"test_quotes.txt\", filesize);\n        tester.addMimeType(\"txt\",\"text/plain;charset=UTF-8\");\n\n        FilterHolder holder = tester.setContentServlet(org.eclipse.jetty.servlet.DefaultServlet.class);\n        holder.setInitParameter(\"excludedMimeTypes\",\"text/plain\");\n\n        try\n        {\n            tester.start();\n            HttpTester.Response http = tester.assertIsResponseNotGzipCompressed(\"GET\",\"test_quotes.txt\", filesize, HttpStatus.OK_200);\n            Assert.assertNull(http.get(\"Vary\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18712,"modified_method":"@Test\n    public void testIsNotGzipCompressedByExcludedContentTypeWithCharset() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"excludedMimeTypes\",\"text/plain\");\n\n        // Prepare server file\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"test_quotes.txt\",filesize);\n        tester.addMimeType(\"txt\",\"text/plain;charset=UTF-8\");\n\n        // Add content servlet\n        tester.setContentServlet(DefaultServlet.class);\n\n        try\n        {\n            tester.start();\n            HttpTester.Response http = assertIsResponseNotGzipCompressed(tester,\"GET\",\"test_quotes.txt\",filesize,HttpStatus.OK_200);\n            Assert.assertNull(http.get(\"Vary\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testIsNotGzipCompressedByExcludedContentType() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir, compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"test_quotes.txt\", filesize);\n    \n\n        FilterHolder holder = tester.setContentServlet(org.eclipse.jetty.servlet.DefaultServlet.class);\n        holder.setInitParameter(\"excludedMimeTypes\",\"text/plain\");\n\n        try\n        {\n            tester.start();\n            HttpTester.Response http = tester.assertIsResponseNotGzipCompressed(\"GET\",\"test_quotes.txt\", filesize, HttpStatus.OK_200);\n            Assert.assertNull(http.get(\"Vary\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18713,"modified_method":"@Test\n    public void testIsNotGzipCompressedByExcludedContentType() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"excludedMimeTypes\",\"text/plain\");\n\n        // Prepare server file\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"test_quotes.txt\",filesize);\n\n        // Add content servlet\n        tester.setContentServlet(DefaultServlet.class);\n\n        try\n        {\n            tester.start();\n            HttpTester.Response http = assertIsResponseNotGzipCompressed(tester,\"GET\",\"test_quotes.txt\",filesize,HttpStatus.OK_200);\n            Assert.assertNull(http.get(\"Vary\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testIsNotGzipCompressedByDeferredContentType() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir, compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.mp3.deferred\",filesize);\n        \n        FilterHolder holder = tester.setContentServlet(GetServlet.class);\n        holder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        try\n        {\n            tester.start();\n            HttpTester.Response http = tester.assertIsResponseNotGzipCompressed(\"GET\",\"file.mp3.deferred\", filesize, HttpStatus.OK_200);\n            Assert.assertNull(http.get(\"Vary\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18714,"modified_method":"@Test\n    public void testIsNotGzipCompressedByDeferredContentType() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        // Prepare server file\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.mp3.deferred\",filesize);\n\n        // Add content servlet\n        tester.setContentServlet(GetServlet.class);\n\n        try\n        {\n            tester.start();\n            HttpTester.Response response = assertIsResponseNotGzipCompressed(tester,\"GET\",\"file.mp3.deferred\",filesize,HttpStatus.OK_200);\n            assertThat(\"Response[Vary]\", response.get(\"Vary\"), isEmptyOrNullString());\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testIsNotGzipCompressedWithZeroQ() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir, compressionType+\"; q=0\");\n        tester.setGzipFilterClass(testFilter);\n        \n        int filesize = tester.getOutputBufferSize() / 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n        \n        FilterHolder holder = tester.setContentServlet(org.eclipse.jetty.servlet.DefaultServlet.class);\n        holder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        try\n        {\n            tester.start();\n            HttpTester.Response http = tester.assertIsResponseNotGzipCompressed(\"GET\",\"file.txt\", filesize, HttpStatus.OK_200);\n            Assert.assertEquals(\"Accept-Encoding\",http.get(\"Vary\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18715,"modified_method":"@Test\n    public void testIsNotGzipCompressedWithZeroQ() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType + \"; q=0\");\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        // Prepare server file\n        int filesize = tester.getOutputBufferSize() / 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        // Add content servlet\n        tester.setContentServlet(DefaultServlet.class);\n\n        try\n        {\n            tester.start();\n            HttpTester.Response http = assertIsResponseNotGzipCompressed(tester,\"GET\",\"file.txt\",filesize,HttpStatus.OK_200);\n            assertThat(\"Response[Vary]\",http.get(\"Vary\"),containsString(\"Accept-Encoding\"));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testIsNotGzipCompressedHttpStatus() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir, compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        // Test error code 204\n        tester.setContentServlet(HttpStatusServlet.class);\n\n        try\n        {\n            tester.start();\n\n            HttpTester.Response response = tester.executeRequest(\"GET\",\"/context/\",2,TimeUnit.SECONDS);\n            \n            assertThat(\"Response status\", response.getStatus(), is(HttpStatus.NO_CONTENT_204));\n            \n            assertThat(\"Content-Encoding\",response.get(\"Content-Encoding\"),not(containsString(GzipFilter.GZIP)));\n        }\n        finally\n        {\n            tester.stop();\n        }\n\n    }","id":18716,"modified_method":"@Test\n    public void testIsNotGzipCompressedHttpStatus() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n\n        // Test error code 204\n        tester.setContentServlet(HttpStatusServlet.class);\n\n        try\n        {\n            tester.start();\n\n            HttpTester.Response response = tester.executeRequest(\"GET\",\"/context/\",2,TimeUnit.SECONDS);\n\n            assertThat(\"Response status\",response.getStatus(),is(HttpStatus.NO_CONTENT_204));\n            assertThat(\"Content-Encoding\",response.get(\"Content-Encoding\"),not(containsString(compressionType)));\n        }\n        finally\n        {\n            tester.stop();\n        }\n\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testExcludePathPatterns() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        FilterHolder holder = tester.setContentServlet(DefaultServlet.class);\n        holder.setInitParameter(\"excludePathPatterns\",\"/cont.*\");\n\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        try\n        {\n            tester.start();\n            tester.assertIsResponseNotGzipCompressed(\"GET\",\"file.txt\",filesize,HttpStatus.OK_200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18717,"modified_method":"@Test\n    public void testExcludePathPatterns() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        gzipHolder.setInitParameter(\"excludePathPatterns\",\"/cont.*\");\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n\n        // Prepare server file\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        // Set content servlet\n        tester.setContentServlet(DefaultServlet.class);\n\n        try\n        {\n            tester.start();\n            assertIsResponseNotGzipCompressed(tester,\"GET\",\"file.txt\",filesize,HttpStatus.OK_200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testIsGzipByMethod() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir, compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        int filesize = tester.getOutputBufferSize() * 2;\n        tester.prepareServerFile(\"file.txt\",filesize);\n        \n        FilterHolder holder = tester.setContentServlet(GetServlet.class);\n        holder.setInitParameter(\"mimeTypes\",\"text/plain\");\n        holder.setInitParameter(\"methods\",\"POST, WIBBLE\");\n                \n        try\n        {\n            tester.start();\n            tester.assertIsResponseGzipCompressed(\"POST\",\"file.txt\");\n            tester.assertIsResponseGzipCompressed(\"WIBBLE\",\"file.txt\");\n            tester.assertIsResponseNotGzipCompressed(\"GET\",\"file.txt\",filesize,200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18718,"modified_method":"@Test\n    public void testIsGzipByMethod() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n        gzipHolder.setInitParameter(\"mimeTypes\",\"text/plain\");\n        gzipHolder.setInitParameter(\"methods\",\"POST, WIBBLE\");\n\n        // Prepare Server File\n        int filesize = tester.getOutputBufferSize() * 2;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        // Content Servlet\n        tester.setContentServlet(GetServlet.class);\n\n        try\n        {\n            tester.start();\n            HttpTester.Response response;\n\n            tester.assertIsResponseGzipCompressed(\"POST\",\"file.txt\");\n            tester.assertIsResponseGzipCompressed(\"WIBBLE\",\"file.txt\");\n\n            response = tester.executeRequest(\"GET\",\"/context/file.txt\",2,TimeUnit.SECONDS);\n\n            assertThat(\"Response status\",response.getStatus(),is(HttpStatus.OK_200));\n            assertThat(\"Content-Encoding\",response.get(\"Content-Encoding\"),not(containsString(compressionType)));\n\n            String content = tester.readResponse(response);\n            assertThat(\"Response content size\",content.length(),is(filesize));\n            String expectedContent = IO.readToString(testingdir.getFile(\"file.txt\"));\n            assertThat(\"Response content\",content,is(expectedContent));\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testUserAgentExclusionByExcludedAgentPatterns() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n        tester.setGzipFilterClass(testFilter);\n\n        FilterHolder holder = tester.setContentServlet(DefaultServlet.class);\n        holder.setInitParameter(\"excludedAgents\",\"bar\");\n        holder.setInitParameter(\"excludeAgentPatterns\",\"fo.*\");\n        tester.setUserAgent(\"foo\");\n\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        try\n        {\n            tester.start();\n            tester.assertIsResponseNotGzipCompressed(\"GET\",\"file.txt\",filesize,HttpStatus.OK_200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","id":18719,"modified_method":"@Test\n    public void testUserAgentExclusionByExcludedAgentPatterns() throws Exception\n    {\n        GzipTester tester = new GzipTester(testingdir,compressionType);\n        tester.setUserAgent(\"foo\");\n\n        // Add Gzip Filter first\n        FilterHolder gzipHolder = new FilterHolder(testFilter);\n        gzipHolder.setAsyncSupported(true);\n        gzipHolder.setInitParameter(\"excludedAgents\",\"bar\");\n        gzipHolder.setInitParameter(\"excludeAgentPatterns\",\"fo.*\");\n        tester.addFilter(gzipHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST,DispatcherType.ASYNC));\n\n        // Prepare server file\n        int filesize = tester.getOutputBufferSize() * 4;\n        tester.prepareServerFile(\"file.txt\",filesize);\n\n        // Set content servlet\n        tester.setContentServlet(DefaultServlet.class);\n\n        try\n        {\n            tester.start();\n            assertIsResponseNotGzipCompressed(tester,\"GET\",\"file.txt\",filesize,HttpStatus.OK_200);\n        }\n        finally\n        {\n            tester.stop();\n        }\n    }","commit_id":"5941bf76d67be8eae8f7e603288892e8bd1b2c96","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    final SNode containerConcept = SLinkOperations.getTarget(AttributeAccess_Behavior.call_getAttributeContainerType_6960953357954139822(SNodeOperations.as(_context.getEnclosingNode(), \"jetbrains.mps.lang.smodel.structure.AttributeAccess\")), \"concept\", false);\n    return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.core.structure.LinkAttribute\"), _context.getModel(), operationContext.getScope())).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode attr) {\n        return ListSequence.fromList(SLinkOperations.getTargets(attr, \"conceptProperty\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return (SLinkOperations.getTarget(it, \"conceptPropertyDeclaration\", false) != null);\n          }\n        }).<SNode>select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode it) {\n            return SLinkOperations.getTarget(it, \"conceptPropertyDeclaration\", false);\n          }\n        }).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SPropertyOperations.hasValue(it, \"name\", \"role\");\n          }\n        }) && ListSequence.fromList(SLinkOperations.getConceptLinkTargets(attr, \"attributed\")).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SConceptOperations.isSubConceptOf(containerConcept, NameUtil.nodeFQName(it));\n          }\n        });\n      }\n    });\n  }","id":18720,"modified_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    return AttributeQualifier_Behavior.getApplicableRoles_959482772563105834(_context.getEnclosingNode(), \"jetbrains.mps.lang.core.structure.LinkAttribute\", _context.getModel(), operationContext.getScope());\n  }","commit_id":"b1a6273b1f2aa7f17eced77df3b377837d779889","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    final SNode containerConcept = SLinkOperations.getTarget(AttributeAccess_Behavior.call_getAttributeContainerType_6960953357954139822(SNodeOperations.as(_context.getEnclosingNode(), \"jetbrains.mps.lang.smodel.structure.AttributeAccess\")), \"concept\", false);\n    return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.core.structure.NodeAttribute\"), _context.getModel(), operationContext.getScope())).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode attr) {\n        return ListSequence.fromList(SLinkOperations.getTargets(attr, \"conceptProperty\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return (SLinkOperations.getTarget(it, \"conceptPropertyDeclaration\", false) != null);\n          }\n        }).<SNode>select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode it) {\n            return SLinkOperations.getTarget(it, \"conceptPropertyDeclaration\", false);\n          }\n        }).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SPropertyOperations.hasValue(it, \"name\", \"role\");\n          }\n        }) && ListSequence.fromList(SLinkOperations.getConceptLinkTargets(attr, \"attributed\")).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SConceptOperations.isSubConceptOf(containerConcept, NameUtil.nodeFQName(it));\n          }\n        });\n      }\n    });\n  }","id":18721,"modified_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    return AttributeQualifier_Behavior.getApplicableRoles_959482772563105834(_context.getEnclosingNode(), \"jetbrains.mps.lang.core.structure.NodeAttribute\", _context.getModel(), operationContext.getScope());\n  }","commit_id":"b1a6273b1f2aa7f17eced77df3b377837d779889","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    final SNode containerConcept = SLinkOperations.getTarget(AttributeAccess_Behavior.call_getAttributeContainerType_6960953357954139822(SNodeOperations.as(_context.getEnclosingNode(), \"jetbrains.mps.lang.smodel.structure.AttributeAccess\")), \"concept\", false);\n    return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.core.structure.PropertyAttribute\"), _context.getModel(), operationContext.getScope())).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode attr) {\n        return ListSequence.fromList(SLinkOperations.getTargets(attr, \"conceptProperty\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return (SLinkOperations.getTarget(it, \"conceptPropertyDeclaration\", false) != null);\n          }\n        }).<SNode>select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode it) {\n            return SLinkOperations.getTarget(it, \"conceptPropertyDeclaration\", false);\n          }\n        }).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SPropertyOperations.hasValue(it, \"name\", \"role\");\n          }\n        }) && ListSequence.fromList(SLinkOperations.getConceptLinkTargets(attr, \"attributed\")).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SConceptOperations.isSubConceptOf(containerConcept, NameUtil.nodeFQName(it));\n          }\n        });\n      }\n    });\n  }","id":18722,"modified_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    return AttributeQualifier_Behavior.getApplicableRoles_959482772563105834(_context.getEnclosingNode(), \"jetbrains.mps.lang.core.structure.PropertyAttribute\", _context.getModel(), operationContext.getScope());\n\n  }","commit_id":"b1a6273b1f2aa7f17eced77df3b377837d779889","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static com.ext.portlet.reports.model.ReportsEntry model(\n        ReportsEntryHBM reportsEntryHBM) {\n        return model(reportsEntryHBM, true);\n    }","id":18723,"modified_method":"public static com.ext.portlet.reports.model.ReportsEntry model(\n        ReportsEntryHBM reportsEntryHBM) {\n        return (com.ext.portlet.reports.model.ReportsEntry) reportsEntryHBM;\n    }","commit_id":"363bea1fe65f5340b3d1db0f245ee9f49bf74e40","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Object clone() {\n        return new ReportsEntry(getEntryId(), getCompanyId(), getUserId(),\n            getUserName(), getCreateDate(), getModifiedDate(), getName());\n    }","id":18724,"modified_method":"public Object clone() {\n        ReportsEntry clone = new ReportsEntry();\n        clone.setEntryId(getEntryId());\n        clone.setCompanyId(getCompanyId());\n        clone.setUserId(getUserId());\n        clone.setUserName(getUserName());\n        clone.setCreateDate(getCreateDate());\n        clone.setModifiedDate(getModifiedDate());\n        clone.setName(getName());\n\n        return clone;\n    }","commit_id":"363bea1fe65f5340b3d1db0f245ee9f49bf74e40","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public com.ext.portlet.reports.model.ReportsEntry create(String entryId) {\n        return new com.ext.portlet.reports.model.ReportsEntry(entryId);\n    }","id":18725,"modified_method":"public com.ext.portlet.reports.model.ReportsEntry create(String entryId) {\n        ReportsEntryHBM reportsEntryHBM = new ReportsEntryHBM();\n        reportsEntryHBM.setNew(true);\n        reportsEntryHBM.setPrimaryKey(entryId);\n\n        return ReportsEntryHBMUtil.model(reportsEntryHBM);\n    }","commit_id":"363bea1fe65f5340b3d1db0f245ee9f49bf74e40","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public com.ext.portlet.reports.model.ReportsEntry findByPrimaryKey(\n        String entryId) throws NoSuchEntryException, SystemException {\n        com.ext.portlet.reports.model.ReportsEntry reportsEntry = ReportsEntryPool.get(entryId);\n        Session session = null;\n\n        try {\n            if (reportsEntry == null) {\n                session = openSession();\n\n                ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) session.get(ReportsEntryHBM.class,\n                        entryId);\n\n                if (reportsEntryHBM == null) {\n                    _log.warn(\"No ReportsEntry exists with the primary key \" +\n                        entryId.toString());\n                    throw new NoSuchEntryException(\n                        \"No ReportsEntry exists with the primary key \" +\n                        entryId.toString());\n                }\n\n                reportsEntry = ReportsEntryHBMUtil.model(reportsEntryHBM, false);\n            }\n\n            return reportsEntry;\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","id":18726,"modified_method":"public com.ext.portlet.reports.model.ReportsEntry findByPrimaryKey(\n        String entryId) throws NoSuchEntryException, SystemException {\n        Session session = null;\n\n        try {\n            session = openSession();\n\n            ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) session.get(ReportsEntryHBM.class,\n                    entryId);\n\n            if (reportsEntryHBM == null) {\n                _log.warn(\"No ReportsEntry exists with the primary key \" +\n                    entryId.toString());\n                throw new NoSuchEntryException(\n                    \"No ReportsEntry exists with the primary key \" +\n                    entryId.toString());\n            }\n\n            return ReportsEntryHBMUtil.model(reportsEntryHBM);\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","commit_id":"363bea1fe65f5340b3d1db0f245ee9f49bf74e40","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void removeByCompanyId(String companyId) throws SystemException {\n        Session session = null;\n\n        try {\n            session = openSession();\n\n            StringBuffer query = new StringBuffer();\n            query.append(\n                \"FROM ReportsEntry IN CLASS com.ext.portlet.reports.service.persistence.ReportsEntryHBM WHERE \");\n            query.append(\"companyId = ?\");\n            query.append(\" \");\n            query.append(\"ORDER BY \");\n            query.append(\"name ASC\");\n\n            Query q = session.createQuery(query.toString());\n            int queryPos = 0;\n            q.setString(queryPos++, companyId);\n\n            Iterator itr = q.list().iterator();\n\n            while (itr.hasNext()) {\n                ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) itr.next();\n                ReportsEntryPool.remove((String) reportsEntryHBM.getPrimaryKey());\n                session.delete(reportsEntryHBM);\n            }\n\n            session.flush();\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","id":18727,"modified_method":"public void removeByCompanyId(String companyId) throws SystemException {\n        Session session = null;\n\n        try {\n            session = openSession();\n\n            StringBuffer query = new StringBuffer();\n            query.append(\n                \"FROM ReportsEntry IN CLASS com.ext.portlet.reports.service.persistence.ReportsEntryHBM WHERE \");\n            query.append(\"companyId = ?\");\n            query.append(\" \");\n            query.append(\"ORDER BY \");\n            query.append(\"name ASC\");\n\n            Query q = session.createQuery(query.toString());\n            int queryPos = 0;\n            q.setString(queryPos++, companyId);\n\n            Iterator itr = q.list().iterator();\n\n            while (itr.hasNext()) {\n                ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) itr.next();\n                session.delete(reportsEntryHBM);\n            }\n\n            session.flush();\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","commit_id":"363bea1fe65f5340b3d1db0f245ee9f49bf74e40","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public com.ext.portlet.reports.model.ReportsEntry remove(String entryId)\n        throws NoSuchEntryException, SystemException {\n        Session session = null;\n\n        try {\n            session = openSession();\n\n            ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) session.get(ReportsEntryHBM.class,\n                    entryId);\n\n            if (reportsEntryHBM == null) {\n                _log.warn(\"No ReportsEntry exists with the primary key \" +\n                    entryId.toString());\n                throw new NoSuchEntryException(\n                    \"No ReportsEntry exists with the primary key \" +\n                    entryId.toString());\n            }\n\n            com.ext.portlet.reports.model.ReportsEntry reportsEntry = ReportsEntryHBMUtil.model(reportsEntryHBM);\n            session.delete(reportsEntryHBM);\n            session.flush();\n            ReportsEntryPool.remove(entryId);\n\n            return reportsEntry;\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","id":18728,"modified_method":"public com.ext.portlet.reports.model.ReportsEntry remove(String entryId)\n        throws NoSuchEntryException, SystemException {\n        Session session = null;\n\n        try {\n            session = openSession();\n\n            ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) session.get(ReportsEntryHBM.class,\n                    entryId);\n\n            if (reportsEntryHBM == null) {\n                _log.warn(\"No ReportsEntry exists with the primary key \" +\n                    entryId.toString());\n                throw new NoSuchEntryException(\n                    \"No ReportsEntry exists with the primary key \" +\n                    entryId.toString());\n            }\n\n            session.delete(reportsEntryHBM);\n            session.flush();\n\n            return ReportsEntryHBMUtil.model(reportsEntryHBM);\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","commit_id":"363bea1fe65f5340b3d1db0f245ee9f49bf74e40","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public com.ext.portlet.reports.model.ReportsEntry update(\n        com.ext.portlet.reports.model.ReportsEntry reportsEntry)\n        throws SystemException {\n        Session session = null;\n\n        try {\n            if (reportsEntry.isNew() || reportsEntry.isModified()) {\n                session = openSession();\n\n                if (reportsEntry.isNew()) {\n                    ReportsEntryHBM reportsEntryHBM = new ReportsEntryHBM(reportsEntry.getEntryId(),\n                            reportsEntry.getCompanyId(),\n                            reportsEntry.getUserId(),\n                            reportsEntry.getUserName(),\n                            reportsEntry.getCreateDate(),\n                            reportsEntry.getModifiedDate(),\n                            reportsEntry.getName());\n                    session.save(reportsEntryHBM);\n                    session.flush();\n                } else {\n                    ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) session.get(ReportsEntryHBM.class,\n                            reportsEntry.getPrimaryKey());\n\n                    if (reportsEntryHBM != null) {\n                        reportsEntryHBM.setCompanyId(reportsEntry.getCompanyId());\n                        reportsEntryHBM.setUserId(reportsEntry.getUserId());\n                        reportsEntryHBM.setUserName(reportsEntry.getUserName());\n                        reportsEntryHBM.setCreateDate(reportsEntry.getCreateDate());\n                        reportsEntryHBM.setModifiedDate(reportsEntry.getModifiedDate());\n                        reportsEntryHBM.setName(reportsEntry.getName());\n                        session.flush();\n                    } else {\n                        reportsEntryHBM = new ReportsEntryHBM(reportsEntry.getEntryId(),\n                                reportsEntry.getCompanyId(),\n                                reportsEntry.getUserId(),\n                                reportsEntry.getUserName(),\n                                reportsEntry.getCreateDate(),\n                                reportsEntry.getModifiedDate(),\n                                reportsEntry.getName());\n                        session.save(reportsEntryHBM);\n                        session.flush();\n                    }\n                }\n\n                reportsEntry.setNew(false);\n                reportsEntry.setModified(false);\n                reportsEntry.protect();\n                ReportsEntryPool.update(reportsEntry.getPrimaryKey(),\n                    reportsEntry);\n            }\n\n            return reportsEntry;\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","id":18729,"modified_method":"public com.ext.portlet.reports.model.ReportsEntry update(\n        com.ext.portlet.reports.model.ReportsEntry reportsEntry)\n        throws SystemException {\n        Session session = null;\n\n        try {\n            if (reportsEntry.isNew() || reportsEntry.isModified()) {\n                session = openSession();\n\n                if (reportsEntry.isNew()) {\n                    ReportsEntryHBM reportsEntryHBM = new ReportsEntryHBM();\n                    reportsEntryHBM.setEntryId(reportsEntry.getEntryId());\n                    reportsEntryHBM.setCompanyId(reportsEntry.getCompanyId());\n                    reportsEntryHBM.setUserId(reportsEntry.getUserId());\n                    reportsEntryHBM.setUserName(reportsEntry.getUserName());\n                    reportsEntryHBM.setCreateDate(reportsEntry.getCreateDate());\n                    reportsEntryHBM.setModifiedDate(reportsEntry.getModifiedDate());\n                    reportsEntryHBM.setName(reportsEntry.getName());\n                    session.save(reportsEntryHBM);\n                    session.flush();\n                } else {\n                    ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) session.get(ReportsEntryHBM.class,\n                            reportsEntry.getPrimaryKey());\n\n                    if (reportsEntryHBM != null) {\n                        reportsEntryHBM.setCompanyId(reportsEntry.getCompanyId());\n                        reportsEntryHBM.setUserId(reportsEntry.getUserId());\n                        reportsEntryHBM.setUserName(reportsEntry.getUserName());\n                        reportsEntryHBM.setCreateDate(reportsEntry.getCreateDate());\n                        reportsEntryHBM.setModifiedDate(reportsEntry.getModifiedDate());\n                        reportsEntryHBM.setName(reportsEntry.getName());\n                        session.flush();\n                    } else {\n                        reportsEntryHBM = new ReportsEntryHBM();\n                        reportsEntryHBM.setEntryId(reportsEntry.getEntryId());\n                        reportsEntryHBM.setCompanyId(reportsEntry.getCompanyId());\n                        reportsEntryHBM.setUserId(reportsEntry.getUserId());\n                        reportsEntryHBM.setUserName(reportsEntry.getUserName());\n                        reportsEntryHBM.setCreateDate(reportsEntry.getCreateDate());\n                        reportsEntryHBM.setModifiedDate(reportsEntry.getModifiedDate());\n                        reportsEntryHBM.setName(reportsEntry.getName());\n                        session.save(reportsEntryHBM);\n                        session.flush();\n                    }\n                }\n\n                reportsEntry.setNew(false);\n                reportsEntry.setModified(false);\n            }\n\n            return reportsEntry;\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","commit_id":"363bea1fe65f5340b3d1db0f245ee9f49bf74e40","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void removeByUserId(String userId) throws SystemException {\n        Session session = null;\n\n        try {\n            session = openSession();\n\n            StringBuffer query = new StringBuffer();\n            query.append(\n                \"FROM ReportsEntry IN CLASS com.ext.portlet.reports.service.persistence.ReportsEntryHBM WHERE \");\n            query.append(\"userId = ?\");\n            query.append(\" \");\n            query.append(\"ORDER BY \");\n            query.append(\"name ASC\");\n\n            Query q = session.createQuery(query.toString());\n            int queryPos = 0;\n            q.setString(queryPos++, userId);\n\n            Iterator itr = q.list().iterator();\n\n            while (itr.hasNext()) {\n                ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) itr.next();\n                ReportsEntryPool.remove((String) reportsEntryHBM.getPrimaryKey());\n                session.delete(reportsEntryHBM);\n            }\n\n            session.flush();\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","id":18730,"modified_method":"public void removeByUserId(String userId) throws SystemException {\n        Session session = null;\n\n        try {\n            session = openSession();\n\n            StringBuffer query = new StringBuffer();\n            query.append(\n                \"FROM ReportsEntry IN CLASS com.ext.portlet.reports.service.persistence.ReportsEntryHBM WHERE \");\n            query.append(\"userId = ?\");\n            query.append(\" \");\n            query.append(\"ORDER BY \");\n            query.append(\"name ASC\");\n\n            Query q = session.createQuery(query.toString());\n            int queryPos = 0;\n            q.setString(queryPos++, userId);\n\n            Iterator itr = q.list().iterator();\n\n            while (itr.hasNext()) {\n                ReportsEntryHBM reportsEntryHBM = (ReportsEntryHBM) itr.next();\n                session.delete(reportsEntryHBM);\n            }\n\n            session.flush();\n        } catch (HibernateException he) {\n            throw new SystemException(he);\n        } finally {\n            closeSession(session);\n        }\n    }","commit_id":"363bea1fe65f5340b3d1db0f245ee9f49bf74e40","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public ActionForward render(\n\t\t\tActionMapping mapping, ActionForm form, PortletConfig config,\n\t\t\tRenderRequest req, RenderResponse res)\n\t\tthrows Exception {\n\n\t\ttry {\n\t\t\tif (req.getWindowState().equals(WindowState.NORMAL)) {\n\t\t\t\treturn mapping.findForward(\"portlet.ext.reports.view\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tList reports = new ArrayList();\n\n\t\t\t\treports.add(\"One\");\n\t\t\t\treports.add(\"Two\");\n\t\t\t\treports.add(\"Three\");\n\n\t\t\t\treq.setAttribute(\"reports\", reports);\n\n\t\t\t\treturn mapping.findForward(\"portlet.ext.reports.view_reports\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\treq.setAttribute(PageContext.EXCEPTION, e);\n\n\t\t\treturn mapping.findForward(Constants.COMMON_ERROR);\n\t\t}\n\t}","id":18731,"modified_method":"public ActionForward render(\n\t\t\tActionMapping mapping, ActionForm form, PortletConfig config,\n\t\t\tRenderRequest req, RenderResponse res)\n\t\tthrows Exception {\n\n\t\tif (req.getWindowState().equals(WindowState.NORMAL)) {\n\t\t\treturn mapping.findForward(\"portlet.ext.reports.view\");\n\t\t}\n\t\telse {\n\t\t\tList reports = new ArrayList();\n\n\t\t\treports.add(\"One\");\n\t\t\treports.add(\"Two\");\n\t\t\treports.add(\"Three\");\n\n\t\t\treq.setAttribute(\"reports\", reports);\n\n\t\t\treturn mapping.findForward(\"portlet.ext.reports.view_reports\");\n\t\t}\n\t}","commit_id":"363bea1fe65f5340b3d1db0f245ee9f49bf74e40","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        MageObject sourceObject = game.getObject(source.getSourceId());\r\n        if (controller == null || sourceObject ==  null) {\r\n            return false;\r\n        }\r\n\r\n        Cards cards = new CardsImpl();\r\n        int count = Math.min(controller.getLibrary().size(), 3);\r\n        for (int i = 0; i < count; i++) {\r\n            Card card = controller.getLibrary().removeFromTop(game);\r\n            if (card != null) {\r\n                cards.add(card);\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!cards.isEmpty()) {\r\n            controller.revealCards(sourceObject.getName(), cards, game);\r\n            Card card = null;\r\n            if (cards.size() == 1) {\r\n                card = cards.getRandom(game);\r\n            } else {\r\n                TargetCard target = new TargetCard(Zone.LIBRARY, new FilterCard(\"card to put into your hand\"));\r\n                target.setRequired(true);\r\n                if (controller.choose(Outcome.DrawCard, cards, target, game)) {\r\n                    card = cards.get(target.getFirstTarget(), game);\r\n                }\r\n            }\r\n            if (card != null) {\r\n                cards.remove(card);\r\n                controller.moveCards(card, Zone.LIBRARY, Zone.GRAVEYARD, source, game);                \r\n            }\r\n            controller.moveCards(cards, Zone.LIBRARY, Zone.GRAVEYARD, source, game);\r\n        }\r\n        return true;\r\n    }","id":18732,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        MageObject sourceObject = game.getObject(source.getSourceId());\r\n        if (controller == null || sourceObject == null) {\r\n            return false;\r\n        }\r\n\r\n        Cards cards = new CardsImpl();\r\n        cards.addAll(controller.getLibrary().getTopCards(game, 3));\r\n        if (!cards.isEmpty()) {\r\n            controller.revealCards(sourceObject.getName(), cards, game);\r\n            Card card = null;\r\n            if (cards.size() == 1) {\r\n                card = cards.getRandom(game);\r\n            } else {\r\n                TargetCard target = new TargetCard(Zone.LIBRARY, new FilterCard(\"card to put into your hand\"));\r\n                target.setRequired(true);\r\n                if (controller.choose(Outcome.DrawCard, cards, target, game)) {\r\n                    card = cards.get(target.getFirstTarget(), game);\r\n                }\r\n            }\r\n            if (card != null) {\r\n                cards.remove(card);\r\n                controller.moveCards(card, Zone.HAND, source, game);\r\n            }\r\n            controller.moveCards(cards, Zone.GRAVEYARD, source, game);\r\n        }\r\n        return true;\r\n    }","commit_id":"d9013346b33ab013835111ad61dc2079095d50bf","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n\r\n        if (controller != null) {\r\n            Cards cards = new CardsImpl(Zone.PICK);\r\n            int cardsCount = Math.min(4, controller.getLibrary().size());\r\n            for (int i = 0; i < cardsCount; i++) {\r\n                Card card = controller.getLibrary().removeFromTop(game);\r\n                if (card != null) {\r\n                    cards.add(card);\r\n                    game.setZone(card.getId(), Zone.PICK);\r\n                }\r\n            }\r\n\r\n            if (cards.size() > 0) {\r\n                controller.lookAtCards(\"Sultai Soothsayer\", cards, game);\r\n\r\n                TargetCard target = new TargetCard(Zone.PICK, new FilterCard(\"card to put in your hand\"));\r\n                if (controller.choose(Outcome.Benefit, cards, target, game)) {\r\n                    Card card = cards.get(target.getFirstTarget(), game);\r\n                    if (card != null) {\r\n                        card.moveToZone(Zone.HAND, source.getSourceId(), game, false);\r\n                        cards.remove(card);\r\n                    }\r\n                }\r\n\r\n                for (Card card : cards.getCards(game)) {\r\n                    controller.moveCardToGraveyardWithInfo(card, source.getSourceId(), game, Zone.LIBRARY);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":18733,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        MageObject sourceObject = game.getObject(source.getSourceId());\r\n        if (controller != null && sourceObject != null) {\r\n            Cards cards = new CardsImpl();\r\n            cards.addAll(controller.getLibrary().getTopCards(game, 4));\r\n\r\n            if (cards.size() > 0) {\r\n                controller.lookAtCards(sourceObject.getLogName(), cards, game);\r\n\r\n                TargetCard target = new TargetCard(Zone.LIBRARY, new FilterCard(\"card to put in your hand\"));\r\n                if (controller.choose(Outcome.Benefit, cards, target, game)) {\r\n                    Card card = cards.get(target.getFirstTarget(), game);\r\n                    if (card != null) {\r\n                        card.moveToZone(Zone.HAND, source.getSourceId(), game, false);\r\n                        cards.remove(card);\r\n                    }\r\n                }\r\n\r\n                for (Card card : cards.getCards(game)) {\r\n                    controller.moveCardToGraveyardWithInfo(card, source.getSourceId(), game, Zone.LIBRARY);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"d7fba16c079aa60fa20fa2828db83bccb7c2a317","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(this.getTargetPointer().getFirst(game, source));\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (player == null || controller == null) {\r\n            return false;\r\n        }\r\n        \r\n        Cards cards = new CardsImpl();\r\n        int max = Math.min(player.getLibrary().size(), 7);\r\n        for(int i = 0; i < max; i++){\r\n            Card card = player.getLibrary().removeFromTop(game);\r\n            if (card != null) {\r\n                card.moveToExile(null, \"\", source.getSourceId(), game);\r\n                cards.add(card);\r\n            }\r\n        }\r\n        if(cards.getCards(new FilterCreatureCard(), game).size() > 0){\r\n            TargetCard target = new TargetCard(Zone.EXILED, new FilterCreatureCard());\r\n            if(controller.chooseTarget(Outcome.PutCreatureInPlay, cards, target, source, game)){\r\n                Card card = cards.get(target.getFirstTarget(), game);\r\n                if(card != null){\r\n                    card.putOntoBattlefield(game, Zone.EXILED, source.getSourceId(), source.getControllerId());\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }","id":18734,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(this.getTargetPointer().getFirst(game, source));\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (player == null || controller == null) {\r\n            return false;\r\n        }\r\n\r\n        Cards cards = new CardsImpl();\r\n        cards.addAll(player.getLibrary().getTopCards(game, 7));\r\n        controller.moveCards(cards, Zone.EXILED, source, game);\r\n        if (cards.getCards(new FilterCreatureCard(), game).size() > 0) {\r\n            TargetCard target = new TargetCard(Zone.EXILED, new FilterCreatureCard());\r\n            if (controller.chooseTarget(outcome, cards, target, source, game)) {\r\n                Card card = cards.get(target.getFirstTarget(), game);\r\n                if (card != null) {\r\n                    controller.moveCards(cards.getCards(game), Zone.BATTLEFIELD, source, game, false, false, false, null);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }","commit_id":"7f105fb1239a809b5da30f7bd9660905fdea422f","url":"https://github.com/magefree/mage"},{"original_method":"public LordOfTheVoidEffect() {\r\n        super(Outcome.PutCardInPlay);\r\n        this.staticText = \"exile the top seven cards of that player's library, then put a creature card from among them onto the battlefield under your control\";\r\n    }","id":18735,"modified_method":"public LordOfTheVoidEffect() {\r\n        super(Outcome.PutCreatureInPlay);\r\n        this.staticText = \"exile the top seven cards of that player's library, then put a creature card from among them onto the battlefield under your control\";\r\n    }","commit_id":"7f105fb1239a809b5da30f7bd9660905fdea422f","url":"https://github.com/magefree/mage"},{"original_method":"private double calculateDeltaQReported(final IntegerIndexedNestedHashMap<RecalDatum> table, final int[] key, final EventType errorModel, final double globalDeltaQ, final byte qualFromRead) {\n        double result = 0.0;\n\n        final RecalDatum empiricalQualQS = table.get(key[0], key[1], errorModel.index);\n        if (empiricalQualQS != null) {\n            final double deltaQReportedEmpirical = empiricalQualQS.getEmpiricalQuality();\n            result = deltaQReportedEmpirical - qualFromRead - globalDeltaQ;\n        }\n\n        return result;\n    }","id":18736,"modified_method":"private double calculateDeltaQReported(final NestedIntegerArray<RecalDatum> table, final int[] key, final EventType errorModel, final double globalDeltaQ, final byte qualFromRead) {\n        double result = 0.0;\n\n        final RecalDatum empiricalQualQS = table.get(key[0], key[1], errorModel.index);\n        if (empiricalQualQS != null) {\n            final double deltaQReportedEmpirical = empiricalQualQS.getEmpiricalQuality();\n            result = deltaQReportedEmpirical - qualFromRead - globalDeltaQ;\n        }\n\n        return result;\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * Recalibrates the base qualities of a read\n     *\n     * It updates the base qualities of the read with the new recalibrated qualities (for all event types)\n     *\n     * @param read the read to recalibrate\n     */\n    public void recalibrateRead(final GATKSAMRecord read) {\n        RecalDataManager.computeCovariates(read, requestedCovariates, readCovariates);                                  // compute all covariates for the read\n        for (final EventType errorModel : EventType.values()) {                                                         // recalibrate all three quality strings\n            final byte[] quals = read.getBaseQualities(errorModel);\n            final int[][] fullReadKeySet = readCovariates.getKeySet(errorModel);                                        // get the keyset for this base using the error model\n\n            final int readLength = read.getReadLength();\n            for (int offset = 0; offset < readLength; offset++) {                                                       // recalibrate all bases in the read\n\n                final byte originalQualityScore = quals[offset];\n\n                if (originalQualityScore >= QualityUtils.MIN_USABLE_Q_SCORE) {                                          // only recalibrate usable qualities (the original quality will come from the instrument -- reported quality)\n                    final int[] keySet = fullReadKeySet[offset];                                                        // get the keyset for this base using the error model\n                    final Byte recalibratedQualityScore = performSequentialQualityCalculation(keySet, errorModel);      // recalibrate the base\n                    //Byte recalibratedQualityScore = (Byte) qualityScoreByFullCovariateKey[errorModel.index].get(keySet);\n                    //Byte recalibratedQualityScore = null;\n                    //if (recalibratedQualityScore == null) {\n                    //    recalibratedQualityScore = performSequentialQualityCalculation(keySet, errorModel);             // recalibrate the base\n                    //    qualityScoreByFullCovariateKey[errorModel.index].put(recalibratedQualityScore, keySet);\n                    //}\n                    quals[offset] = recalibratedQualityScore;\n                }\n            }\n            read.setBaseQualities(quals, errorModel);\n        }\n    }","id":18737,"modified_method":"/**\n     * Recalibrates the base qualities of a read\n     *\n     * It updates the base qualities of the read with the new recalibrated qualities (for all event types)\n     *\n     * @param read the read to recalibrate\n     */\n    public void recalibrateRead(final GATKSAMRecord read) {\n        RecalDataManager.computeCovariates(read, requestedCovariates, readCovariates);                                  // compute all covariates for the read\n        for (final EventType errorModel : EventType.values()) {                                                         // recalibrate all three quality strings\n            final byte[] quals = read.getBaseQualities(errorModel);\n            final int[][] fullReadKeySet = readCovariates.getKeySet(errorModel);                                        // get the keyset for this base using the error model\n\n            final int readLength = read.getReadLength();\n            for (int offset = 0; offset < readLength; offset++) {                                                       // recalibrate all bases in the read\n\n                final byte originalQualityScore = quals[offset];\n\n                if (originalQualityScore >= QualityUtils.MIN_USABLE_Q_SCORE) {                                          // only recalibrate usable qualities (the original quality will come from the instrument -- reported quality)\n                    final int[] keySet = fullReadKeySet[offset];                                                        // get the keyset for this base using the error model\n                    final byte recalibratedQualityScore = performSequentialQualityCalculation(keySet, errorModel);      // recalibrate the base\n                    quals[offset] = recalibratedQualityScore;\n                }\n            }\n            read.setBaseQualities(quals, errorModel);\n        }\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"private double calculateGlobalDeltaQ(final IntegerIndexedNestedHashMap<RecalDatum> table, final int[] key, final EventType errorModel) {\n        double result = 0.0;\n\n        final RecalDatum empiricalQualRG = table.get(key[0], errorModel.index);\n        if (empiricalQualRG != null) {\n            final double globalDeltaQEmpirical = empiricalQualRG.getEmpiricalQuality();\n            final double aggregrateQReported = empiricalQualRG.getEstimatedQReported();\n            result = globalDeltaQEmpirical - aggregrateQReported;\n        }\n\n        return result;\n    }","id":18738,"modified_method":"private double calculateGlobalDeltaQ(final NestedIntegerArray<RecalDatum> table, final int[] key, final EventType errorModel) {\n        double result = 0.0;\n\n        final RecalDatum empiricalQualRG = table.get(key[0], errorModel.index);\n        if (empiricalQualRG != null) {\n            final double globalDeltaQEmpirical = empiricalQualRG.getEmpiricalQuality();\n            final double aggregrateQReported = empiricalQualRG.getEstimatedQReported();\n            result = globalDeltaQEmpirical - aggregrateQReported;\n        }\n\n        return result;\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"@BeforeClass\n    public void init() {\n        GATKSAMReadGroupRecord rg = new GATKSAMReadGroupRecord(\"rg\");\n        rg.setPlatform(\"illumina\");\n        read.setReadGroup(rg);\n\n        byte[] quals = new byte[read.getReadLength()];\n        for (int i = 0; i < read.getReadLength(); i++)\n            quals[i] = 20;\n        read.setBaseQualities(quals);\n\n        RecalibrationArgumentCollection RAC = new RecalibrationArgumentCollection();\n        List<Covariate> requiredCovariates = new ArrayList<Covariate>();\n        List<Covariate> optionalCovariates = new ArrayList<Covariate>();\n\n        dataManager = new org.broadinstitute.sting.gatk.walkers.recalibration.RecalDataManager(true, 4);\n\n        rgCovariate = new ReadGroupCovariate();\n        rgCovariate.initialize(RAC);\n        requiredCovariates.add(rgCovariate);\n\n        qsCovariate = new QualityScoreCovariate();\n        qsCovariate.initialize(RAC);\n        requiredCovariates.add(qsCovariate);\n\n        cxCovariate = new ContextCovariate();\n        cxCovariate.initialize(RAC);\n        optionalCovariates.add(cxCovariate);\n        cyCovariate = new CycleCovariate();\n        cyCovariate.initialize(RAC);\n        optionalCovariates.add(cyCovariate);\n\n        final Covariate[] requestedCovariates = new Covariate[requiredCovariates.size() + optionalCovariates.size()];\n        int covariateIndex = 0;\n        for (final Covariate cov : requiredCovariates)\n            requestedCovariates[covariateIndex++] = cov;\n        for (final Covariate cov : optionalCovariates)\n            requestedCovariates[covariateIndex++] = cov;\n\n        readCovariates = RecalDataManager.computeCovariates(read, requestedCovariates);\n\n        RecalibrationTables recalibrationTables = new RecalibrationTables(requestedCovariates);\n        final IntegerIndexedNestedHashMap<RecalDatum> rgTable = recalibrationTables.getTable(RecalibrationTables.TableType.READ_GROUP_TABLE);\n        final IntegerIndexedNestedHashMap<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE);\n\n        for (int i=0; i<read.getReadLength(); i++) {\n            final int[] bitKeys = readCovariates.getMismatchesKeySet(i);\n            final Object[] objKey = buildObjectKey(bitKeys);\n\n            Random random = new Random();\n            int nObservations = random.nextInt(10000);\n            int nErrors = random.nextInt(10);\n            double estimatedQReported = 30;\n            double empiricalQuality = calcEmpiricalQual(nObservations, nErrors);\n\n            org.broadinstitute.sting.gatk.walkers.recalibration.RecalDatum oldDatum = new org.broadinstitute.sting.gatk.walkers.recalibration.RecalDatum(nObservations, nErrors, estimatedQReported, empiricalQuality);\n            dataManager.addToAllTables(objKey, oldDatum, QualityUtils.MIN_USABLE_Q_SCORE);\n\n            RecalDatum newDatum = new RecalDatum(nObservations, nErrors, estimatedQReported, empiricalQuality);\n\n            rgTable.put(newDatum, bitKeys[0], EventType.BASE_SUBSTITUTION.index);\n            qualTable.put(newDatum, bitKeys[0], bitKeys[1], EventType.BASE_SUBSTITUTION.index);\n            for (int j = 0; j < optionalCovariates.size(); j++) {\n                final IntegerIndexedNestedHashMap<RecalDatum> covTable = recalibrationTables.getTable(RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index + j);\n                covTable.put(newDatum, bitKeys[0], bitKeys[1], j, bitKeys[RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index + j], EventType.BASE_SUBSTITUTION.index);\n            }\n        }\n\n    dataManager.generateEmpiricalQualities(1, QualityUtils.MAX_RECALIBRATED_Q_SCORE);\n\n        List<Byte> quantizedQuals = new ArrayList<Byte>();\n        List<Long> qualCounts = new ArrayList<Long>();\n        for (byte i = 0; i <= QualityUtils.MAX_QUAL_SCORE; i++) {\n            quantizedQuals.add(i);\n            qualCounts.add(1L);\n        }\n        QuantizationInfo quantizationInfo = new QuantizationInfo(quantizedQuals, qualCounts);\n        quantizationInfo.noQuantization();\n        baseRecalibration = new BaseRecalibration(quantizationInfo, recalibrationTables, requestedCovariates);\n\n    }","id":18739,"modified_method":"@BeforeClass\n    public void init() {\n        GATKSAMReadGroupRecord rg = new GATKSAMReadGroupRecord(\"rg\");\n        rg.setPlatform(\"illumina\");\n        read.setReadGroup(rg);\n\n        byte[] quals = new byte[read.getReadLength()];\n        for (int i = 0; i < read.getReadLength(); i++)\n            quals[i] = 20;\n        read.setBaseQualities(quals);\n\n        RecalibrationArgumentCollection RAC = new RecalibrationArgumentCollection();\n        List<Covariate> requiredCovariates = new ArrayList<Covariate>();\n        List<Covariate> optionalCovariates = new ArrayList<Covariate>();\n\n        dataManager = new org.broadinstitute.sting.gatk.walkers.recalibration.RecalDataManager(true, 4);\n\n        rgCovariate = new ReadGroupCovariate();\n        rgCovariate.initialize(RAC);\n        requiredCovariates.add(rgCovariate);\n\n        qsCovariate = new QualityScoreCovariate();\n        qsCovariate.initialize(RAC);\n        requiredCovariates.add(qsCovariate);\n\n        cxCovariate = new ContextCovariate();\n        cxCovariate.initialize(RAC);\n        optionalCovariates.add(cxCovariate);\n        cyCovariate = new CycleCovariate();\n        cyCovariate.initialize(RAC);\n        optionalCovariates.add(cyCovariate);\n\n        final Covariate[] requestedCovariates = new Covariate[requiredCovariates.size() + optionalCovariates.size()];\n        int covariateIndex = 0;\n        for (final Covariate cov : requiredCovariates)\n            requestedCovariates[covariateIndex++] = cov;\n        for (final Covariate cov : optionalCovariates)\n            requestedCovariates[covariateIndex++] = cov;\n\n        readCovariates = RecalDataManager.computeCovariates(read, requestedCovariates);\n\n        RecalibrationTables recalibrationTables = new RecalibrationTables(requestedCovariates);\n        final NestedIntegerArray<RecalDatum> rgTable = recalibrationTables.getTable(RecalibrationTables.TableType.READ_GROUP_TABLE);\n        final NestedIntegerArray<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE);\n\n        for (int i=0; i<read.getReadLength(); i++) {\n            final int[] bitKeys = readCovariates.getMismatchesKeySet(i);\n            final Object[] objKey = buildObjectKey(bitKeys);\n\n            Random random = new Random();\n            int nObservations = random.nextInt(10000);\n            int nErrors = random.nextInt(10);\n            double estimatedQReported = 30;\n            double empiricalQuality = calcEmpiricalQual(nObservations, nErrors);\n\n            org.broadinstitute.sting.gatk.walkers.recalibration.RecalDatum oldDatum = new org.broadinstitute.sting.gatk.walkers.recalibration.RecalDatum(nObservations, nErrors, estimatedQReported, empiricalQuality);\n            dataManager.addToAllTables(objKey, oldDatum, QualityUtils.MIN_USABLE_Q_SCORE);\n\n            RecalDatum newDatum = new RecalDatum(nObservations, nErrors, estimatedQReported, empiricalQuality);\n\n            rgTable.put(newDatum, bitKeys[0], EventType.BASE_SUBSTITUTION.index);\n            qualTable.put(newDatum, bitKeys[0], bitKeys[1], EventType.BASE_SUBSTITUTION.index);\n            for (int j = 0; j < optionalCovariates.size(); j++) {\n                final NestedIntegerArray<RecalDatum> covTable = recalibrationTables.getTable(RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index + j);\n                covTable.put(newDatum, bitKeys[0], bitKeys[1], j, bitKeys[RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index + j], EventType.BASE_SUBSTITUTION.index);\n            }\n        }\n\n    dataManager.generateEmpiricalQualities(1, QualityUtils.MAX_RECALIBRATED_Q_SCORE);\n\n        List<Byte> quantizedQuals = new ArrayList<Byte>();\n        List<Long> qualCounts = new ArrayList<Long>();\n        for (byte i = 0; i <= QualityUtils.MAX_QUAL_SCORE; i++) {\n            quantizedQuals.add(i);\n            qualCounts.add(1L);\n        }\n        QuantizationInfo quantizationInfo = new QuantizationInfo(quantizedQuals, qualCounts);\n        quantizationInfo.noQuantization();\n        baseRecalibration = new BaseRecalibration(quantizationInfo, recalibrationTables, requestedCovariates);\n\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"public QuantizationInfo(final RecalibrationTables recalibrationTables, final int quantizationLevels) {\n        final Long [] qualHistogram = new Long[QualityUtils.MAX_QUAL_SCORE+1];                                          // create a histogram with the empirical quality distribution\n        for (int i = 0; i < qualHistogram.length; i++)\n            qualHistogram[i] = 0L;\n\n        final IntegerIndexedNestedHashMap<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE); // get the quality score table\n\n        for (final RecalDatum value : qualTable.getAllValues()) {\n            final RecalDatum datum = value;\n            final int empiricalQual = MathUtils.fastRound(datum.getEmpiricalQuality());                                 // convert the empirical quality to an integer ( it is already capped by MAX_QUAL )\n            qualHistogram[empiricalQual] += datum.numObservations;                                                      // add the number of observations for every key\n        }\n        empiricalQualCounts = Arrays.asList(qualHistogram);                                                             // histogram with the number of observations of the empirical qualities\n        quantizeQualityScores(quantizationLevels);\n\n        this.quantizationLevels = quantizationLevels;\n    }","id":18740,"modified_method":"public QuantizationInfo(final RecalibrationTables recalibrationTables, final int quantizationLevels) {\n        final Long [] qualHistogram = new Long[QualityUtils.MAX_QUAL_SCORE+1];                                          // create a histogram with the empirical quality distribution\n        for (int i = 0; i < qualHistogram.length; i++)\n            qualHistogram[i] = 0L;\n\n        final NestedIntegerArray<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE); // get the quality score table\n\n        for (final RecalDatum value : qualTable.getAllValues()) {\n            final RecalDatum datum = value;\n            final int empiricalQual = MathUtils.fastRound(datum.getEmpiricalQuality());                                 // convert the empirical quality to an integer ( it is already capped by MAX_QUAL )\n            qualHistogram[empiricalQual] += datum.numObservations;                                                      // add the number of observations for every key\n        }\n        empiricalQualCounts = Arrays.asList(qualHistogram);                                                             // histogram with the number of observations of the empirical qualities\n        quantizeQualityScores(quantizationLevels);\n\n        this.quantizationLevels = quantizationLevels;\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"private static void writeCSV(final PrintStream deltaTableFile, final RecalibrationTables recalibrationTables, final String recalibrationMode, final Covariate[] requestedCovariates, final boolean printHeader) {\n\n        final NestedHashMap deltaTable = new NestedHashMap();\n\n        // add the quality score table to the delta table\n        final IntegerIndexedNestedHashMap<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE);\n        for (final IntegerIndexedNestedHashMap.Leaf leaf : qualTable.getAllLeaves()) {                                  // go through every element in the covariates table to create the delta table\n            final int[] newCovs = new int[4];\n            newCovs[0] = leaf.keys[0];\n            newCovs[1] = requestedCovariates.length;                                                                    // replace the covariate name with an arbitrary (unused) index for QualityScore\n            newCovs[2] = leaf.keys[1];\n            newCovs[3] = leaf.keys[2];\n            addToDeltaTable(deltaTable, newCovs, (RecalDatum)leaf.value);                                               // add this covariate to the delta table\n        }\n\n        // add the optional covariates to the delta table\n        for (int i = RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index; i < requestedCovariates.length; i++) {\n            final IntegerIndexedNestedHashMap<RecalDatum> covTable = recalibrationTables.getTable(i);\n            for (final IntegerIndexedNestedHashMap.Leaf leaf : covTable.getAllLeaves()) {\n                final int[] covs = new int[leaf.keys.length-1];\n                covs[0] = leaf.keys[0];\n                covs[1] = i;                                                                                     // reset the quality score covariate to 0 from the keyset (so we aggregate all rows regardless of QS)\n                covs[2] = leaf.keys[2];\n                covs[3] = leaf.keys[3];\n                addToDeltaTable(deltaTable, covs, (RecalDatum) leaf.value);                                                  // add this covariate to the delta table\n            }\n        }\n\n        // output the csv file\n        if (printHeader) {\n            final List<String> header = new LinkedList<String>();\n            header.add(\"ReadGroup\");\n            header.add(\"CovariateValue\");\n            header.add(\"CovariateName\");\n            header.add(\"EventType\");\n            header.add(\"Observations\");\n            header.add(\"Errors\");\n            header.add(\"EmpiricalQuality\");\n            header.add(\"AverageReportedQuality\");\n            header.add(\"Accuracy\");\n            header.add(\"Recalibration\");\n            deltaTableFile.println(Utils.join(\",\", header));\n        }\n\n        final Map<Covariate, String> covariateNameMap = new HashMap<Covariate, String>(requestedCovariates.length);\n        for (final Covariate covariate : requestedCovariates)\n            covariateNameMap.put(covariate, parseCovariateName(covariate));\n\n        // print each data line\n        for (final NestedHashMap.Leaf leaf : deltaTable.getAllLeaves()) {\n            final List<Object> deltaKeys = generateValuesFromKeys(leaf.keys, requestedCovariates, covariateNameMap);\n            final RecalDatum deltaDatum = (RecalDatum)leaf.value;\n            deltaTableFile.print(Utils.join(\",\", deltaKeys));\n            deltaTableFile.print(\",\" + deltaDatum.stringForCSV());\n            deltaTableFile.println(\",\" + recalibrationMode);\n        }\n    }","id":18741,"modified_method":"private static void writeCSV(final PrintStream deltaTableFile, final RecalibrationTables recalibrationTables, final String recalibrationMode, final Covariate[] requestedCovariates, final boolean printHeader) {\n\n        final NestedHashMap deltaTable = new NestedHashMap();\n\n        // add the quality score table to the delta table\n        final NestedIntegerArray<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE);\n        for (final NestedIntegerArray.Leaf leaf : qualTable.getAllLeaves()) {                                           // go through every element in the covariates table to create the delta table\n            final int[] newCovs = new int[4];\n            newCovs[0] = leaf.keys[0];\n            newCovs[1] = requestedCovariates.length;                                                                    // replace the covariate name with an arbitrary (unused) index for QualityScore\n            newCovs[2] = leaf.keys[1];\n            newCovs[3] = leaf.keys[2];\n            addToDeltaTable(deltaTable, newCovs, (RecalDatum)leaf.value);                                               // add this covariate to the delta table\n        }\n\n        // add the optional covariates to the delta table\n        for (int i = RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index; i < requestedCovariates.length; i++) {\n            final NestedIntegerArray<RecalDatum> covTable = recalibrationTables.getTable(i);\n            for (final NestedIntegerArray.Leaf leaf : covTable.getAllLeaves()) {\n                final int[] covs = new int[4];\n                covs[0] = leaf.keys[0];\n                covs[1] = i;                                                                                            // reset the quality score covariate to 0 from the keyset (so we aggregate all rows regardless of QS)\n                covs[2] = leaf.keys[2];\n                covs[3] = leaf.keys[3];\n                addToDeltaTable(deltaTable, covs, (RecalDatum) leaf.value);                                             // add this covariate to the delta table\n            }\n        }\n\n        // output the csv file\n        if (printHeader) {\n            final List<String> header = new LinkedList<String>();\n            header.add(\"ReadGroup\");\n            header.add(\"CovariateValue\");\n            header.add(\"CovariateName\");\n            header.add(\"EventType\");\n            header.add(\"Observations\");\n            header.add(\"Errors\");\n            header.add(\"EmpiricalQuality\");\n            header.add(\"AverageReportedQuality\");\n            header.add(\"Accuracy\");\n            header.add(\"Recalibration\");\n            deltaTableFile.println(Utils.join(\",\", header));\n        }\n\n        final Map<Covariate, String> covariateNameMap = new HashMap<Covariate, String>(requestedCovariates.length);\n        for (final Covariate covariate : requestedCovariates)\n            covariateNameMap.put(covariate, parseCovariateName(covariate));\n\n        // print each data line\n        for (final NestedHashMap.Leaf leaf : deltaTable.getAllLeaves()) {\n            final List<Object> deltaKeys = generateValuesFromKeys(leaf.keys, requestedCovariates, covariateNameMap);\n            final RecalDatum deltaDatum = (RecalDatum)leaf.value;\n            deltaTableFile.print(Utils.join(\",\", deltaKeys));\n            deltaTableFile.print(\",\" + deltaDatum.stringForCSV());\n            deltaTableFile.println(\",\" + recalibrationMode);\n        }\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"private static List<GATKReportTable> generateReportTables(final RecalibrationTables recalibrationTables, final Covariate[] requestedCovariates) {\n        List<GATKReportTable> result = new LinkedList<GATKReportTable>();\n        int reportTableIndex = 0;\n\n        final Map<Covariate, String> covariateNameMap = new HashMap<Covariate, String>(requestedCovariates.length);\n        for (final Covariate covariate : requestedCovariates)\n            covariateNameMap.put(covariate, parseCovariateName(covariate));\n\n        for (int tableIndex = 0; tableIndex < recalibrationTables.numTables(); tableIndex++) {\n\n            final ArrayList<Pair<String, String>> columnNames = new ArrayList<Pair<String, String>>();                  // initialize the array to hold the column names\n            columnNames.add(new Pair<String, String>(covariateNameMap.get(requestedCovariates[0]), \"%s\"));              // save the required covariate name so we can reference it in the future\n            if (tableIndex != RecalibrationTables.TableType.READ_GROUP_TABLE.index) {\n                columnNames.add(new Pair<String, String>(covariateNameMap.get(requestedCovariates[1]), \"%s\"));          // save the required covariate name so we can reference it in the future\n                if (tableIndex == RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                    columnNames.add(covariateValue);\n                    columnNames.add(covariateName);\n                }\n            }\n\n            columnNames.add(eventType);                                                                                 // the order of these column names is important here\n            columnNames.add(empiricalQuality);\n            if (tableIndex == RecalibrationTables.TableType.READ_GROUP_TABLE.index)\n                columnNames.add(estimatedQReported);                                                                    // only the read group table needs the estimated Q reported\n            columnNames.add(nObservations);\n            columnNames.add(nErrors);\n\n            final GATKReportTable reportTable = new GATKReportTable(\"RecalTable\" + reportTableIndex++, \"\", columnNames.size());\n            for (final Pair<String, String> columnName : columnNames)\n                reportTable.addColumn(columnName.getFirst(), columnName.getSecond());                                   // every table must have the event type\n\n            int rowIndex = 0;\n\n            final IntegerIndexedNestedHashMap<RecalDatum> table = recalibrationTables.getTable(tableIndex);\n            for (final IntegerIndexedNestedHashMap.Leaf row : table.getAllLeaves()) {\n                final RecalDatum datum = (RecalDatum)row.value;\n                final int[] keys = row.keys;\n\n                int columnIndex = 0;\n                setReportTableCell(reportTable, rowIndex, columnNames.get(columnIndex).getFirst(), requestedCovariates[0].formatKey(keys[columnIndex++]));\n                if (tableIndex != RecalibrationTables.TableType.READ_GROUP_TABLE.index) {\n                    setReportTableCell(reportTable, rowIndex, columnNames.get(columnIndex).getFirst(), requestedCovariates[1].formatKey(keys[columnIndex++]));\n                    if (tableIndex >= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                        final Covariate covariate = requestedCovariates[tableIndex];\n                        final int covariateKey = keys[columnIndex+1];\n\n                        setReportTableCell(reportTable, rowIndex, columnNames.get(columnIndex++).getFirst(), covariate.formatKey(covariateKey));\n                        setReportTableCell(reportTable, rowIndex, columnNames.get(columnIndex++).getFirst(), covariateNameMap.get(covariate));\n                    }\n                }\n\n                final EventType event = EventType.eventFrom(keys[columnIndex]);\n                setReportTableCell(reportTable, rowIndex, columnNames.get(columnIndex++).getFirst(), event);\n\n                setReportTableCell(reportTable, rowIndex, columnNames.get(columnIndex++).getFirst(), datum.getEmpiricalQuality());\n                if (tableIndex == RecalibrationTables.TableType.READ_GROUP_TABLE.index)\n                    setReportTableCell(reportTable, rowIndex, columnNames.get(columnIndex++).getFirst(), datum.getEstimatedQReported());                          // we only add the estimated Q reported in the RG table\n                setReportTableCell(reportTable, rowIndex, columnNames.get(columnIndex++).getFirst(), datum.numObservations);\n                setReportTableCell(reportTable, rowIndex, columnNames.get(columnIndex).getFirst(), datum.numMismatches);\n\n                rowIndex++;\n            }\n            result.add(reportTable);\n        }\n\n        return result;\n    }","id":18742,"modified_method":"private static List<GATKReportTable> generateReportTables(final RecalibrationTables recalibrationTables, final Covariate[] requestedCovariates) {\n        List<GATKReportTable> result = new LinkedList<GATKReportTable>();\n        int reportTableIndex = 0;\n        int rowIndex = 0;\n\n        final Map<Covariate, String> covariateNameMap = new HashMap<Covariate, String>(requestedCovariates.length);\n        for (final Covariate covariate : requestedCovariates)\n            covariateNameMap.put(covariate, parseCovariateName(covariate));\n\n        for (int tableIndex = 0; tableIndex < recalibrationTables.numTables(); tableIndex++) {\n\n            final ArrayList<Pair<String, String>> columnNames = new ArrayList<Pair<String, String>>();                                     // initialize the array to hold the column names\n            columnNames.add(new Pair<String, String>(covariateNameMap.get(requestedCovariates[0]), \"%s\"));              // save the required covariate name so we can reference it in the future\n            if (tableIndex != RecalibrationTables.TableType.READ_GROUP_TABLE.index) {\n                columnNames.add(new Pair<String, String>(covariateNameMap.get(requestedCovariates[1]), \"%s\"));          // save the required covariate name so we can reference it in the future\n                if (tableIndex >= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                    columnNames.add(covariateValue);\n                    columnNames.add(covariateName);\n                }\n            }\n\n            columnNames.add(eventType);                                                                                 // the order of these column names is important here\n            columnNames.add(empiricalQuality);\n            if (tableIndex == RecalibrationTables.TableType.READ_GROUP_TABLE.index)\n                columnNames.add(estimatedQReported);                                                                    // only the read group table needs the estimated Q reported\n            columnNames.add(nObservations);\n            columnNames.add(nErrors);\n\n            final GATKReportTable reportTable;\n            if (tableIndex <= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                reportTable = new GATKReportTable(\"RecalTable\" + reportTableIndex++, \"\", columnNames.size());\n                for (final Pair<String, String> columnName : columnNames)\n                    reportTable.addColumn(columnName.getFirst(), columnName.getSecond());\n                rowIndex = 0;                                                                                           // reset the row index since we're starting with a new table\n            } else {\n                reportTable = result.get(RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index);\n            }\n\n            final NestedIntegerArray<RecalDatum> table = recalibrationTables.getTable(tableIndex);\n            for (final NestedIntegerArray.Leaf row : table.getAllLeaves()) {\n                final RecalDatum datum = (RecalDatum)row.value;\n                final int[] keys = row.keys;\n\n                int columnIndex = 0;\n                int keyIndex = 0;\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), requestedCovariates[0].formatKey(keys[keyIndex++]));\n                if (tableIndex != RecalibrationTables.TableType.READ_GROUP_TABLE.index) {\n                    reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), requestedCovariates[1].formatKey(keys[keyIndex++]));\n                    if (tableIndex >= RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index) {\n                        final Covariate covariate = requestedCovariates[tableIndex];\n\n                        reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), covariate.formatKey(keys[keyIndex++]));\n                        reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), covariateNameMap.get(covariate));\n                    }\n                }\n\n                final EventType event = EventType.eventFrom(keys[keyIndex]);\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), event.toString());\n\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), datum.getEmpiricalQuality());\n                if (tableIndex == RecalibrationTables.TableType.READ_GROUP_TABLE.index)\n                    reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), datum.getEstimatedQReported());   // we only add the estimated Q reported in the RG table\n                reportTable.set(rowIndex, columnNames.get(columnIndex++).getFirst(), datum.numObservations);\n                reportTable.set(rowIndex, columnNames.get(columnIndex).getFirst(), datum.numMismatches);\n\n                rowIndex++;\n            }\n            result.add(reportTable);\n        }\n\n        return result;\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n    * Combines two recalibration reports by adding all observations and errors\n    *\n    * Note: This method DOES NOT recalculate the empirical qualities and quantized qualities. You have to recalculate\n    * them after combining. The reason for not calculating it is because this function is inteded for combining a\n    * series of recalibration reports, and it only makes sense to calculate the empirical qualities and quantized\n    * qualities after all the recalibration reports have been combined. Having the user recalculate when appropriate,\n    * makes this method faster\n    *\n    * Note2: The empirical quality reported, however, is recalculated given its simplicity.\n    *\n    * @param other the recalibration report to combine with this one\n    */\n    public void combine(final RecalibrationReport other) {\n\n        for (RecalibrationTables.TableType type : RecalibrationTables.TableType.values()) {\n            final IntegerIndexedNestedHashMap<RecalDatum> myTable = recalibrationTables.getTable(type);\n            final IntegerIndexedNestedHashMap<RecalDatum> otherTable = other.recalibrationTables.getTable(type);\n\n            for (final IntegerIndexedNestedHashMap.Leaf row : otherTable.getAllLeaves()) {\n                final RecalDatum myDatum = myTable.get(row.keys);\n\n                if (myDatum == null)\n                    myTable.put((RecalDatum)row.value, row.keys);\n                else\n                    myDatum.combine((RecalDatum)row.value);\n            }\n        }\n    }","id":18743,"modified_method":"/**\n    * Combines two recalibration reports by adding all observations and errors\n    *\n    * Note: This method DOES NOT recalculate the empirical qualities and quantized qualities. You have to recalculate\n    * them after combining. The reason for not calculating it is because this function is inteded for combining a\n    * series of recalibration reports, and it only makes sense to calculate the empirical qualities and quantized\n    * qualities after all the recalibration reports have been combined. Having the user recalculate when appropriate,\n    * makes this method faster\n    *\n    * Note2: The empirical quality reported, however, is recalculated given its simplicity.\n    *\n    * @param other the recalibration report to combine with this one\n    */\n    public void combine(final RecalibrationReport other) {\n\n        for (RecalibrationTables.TableType type : RecalibrationTables.TableType.values()) {\n            final NestedIntegerArray<RecalDatum> myTable = recalibrationTables.getTable(type);\n            final NestedIntegerArray<RecalDatum> otherTable = other.recalibrationTables.getTable(type);\n\n            for (final NestedIntegerArray.Leaf row : otherTable.getAllLeaves()) {\n                final RecalDatum myDatum = myTable.get(row.keys);\n\n                if (myDatum == null)\n                    myTable.put((RecalDatum)row.value, row.keys);\n                else\n                    myDatum.combine((RecalDatum)row.value);\n            }\n        }\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * this functionality avoids recalculating the empirical qualities, estimated reported quality\n     * and quantization of the quality scores during every call of combine(). Very useful for the BQSRGatherer.\n     */\n    public void calculateEmpiricalAndQuantizedQualities() {\n        for (RecalibrationTables.TableType type : RecalibrationTables.TableType.values()) {\n            final IntegerIndexedNestedHashMap table = recalibrationTables.getTable(type);\n            for (final Object value : table.getAllValues()) {\n                ((RecalDatum)value).calcCombinedEmpiricalQuality();\n            }\n        }\n\n        quantizationInfo = new QuantizationInfo(recalibrationTables, RAC.QUANTIZING_LEVELS);\n    }","id":18744,"modified_method":"/**\n     * this functionality avoids recalculating the empirical qualities, estimated reported quality\n     * and quantization of the quality scores during every call of combine(). Very useful for the BQSRGatherer.\n     */\n    public void calculateEmpiricalAndQuantizedQualities() {\n        for (RecalibrationTables.TableType type : RecalibrationTables.TableType.values()) {\n            final NestedIntegerArray table = recalibrationTables.getTable(type);\n            for (final Object value : table.getAllValues()) {\n                ((RecalDatum)value).calcCombinedEmpiricalQuality();\n            }\n        }\n\n        quantizationInfo = new QuantizationInfo(recalibrationTables, RAC.QUANTIZING_LEVELS);\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * Compiles the list of keys for the ReadGroup table and uses the shared parsing utility to produce the actual table\n     *\n     * @param reportTable            the GATKReport table containing data for this table\n     * @param rgTable                the map representing this table\n     */\n    private void parseReadGroupTable(final GATKReportTable reportTable, final IntegerIndexedNestedHashMap<RecalDatum> rgTable) {\n        for ( int i = 0; i < reportTable.getNumRows(); i++ ) {\n            final Object rg = reportTable.get(i, RecalDataManager.READGROUP_COLUMN_NAME);\n            tempRGarray[0] = requestedCovariates[0].keyFromValue(rg);\n            final EventType event = EventType.eventFrom((String)reportTable.get(i, RecalDataManager.EVENT_TYPE_COLUMN_NAME));\n            tempRGarray[1] = event.index;\n\n            rgTable.put(getRecalDatum(reportTable, i, true), tempRGarray);\n        }\n    }","id":18745,"modified_method":"/**\n     * Compiles the list of keys for the ReadGroup table and uses the shared parsing utility to produce the actual table\n     *\n     * @param reportTable            the GATKReport table containing data for this table\n     * @param rgTable                the map representing this table\n     */\n    private void parseReadGroupTable(final GATKReportTable reportTable, final NestedIntegerArray<RecalDatum> rgTable) {\n        for ( int i = 0; i < reportTable.getNumRows(); i++ ) {\n            final Object rg = reportTable.get(i, RecalDataManager.READGROUP_COLUMN_NAME);\n            tempRGarray[0] = requestedCovariates[0].keyFromValue(rg);\n            final EventType event = EventType.eventFrom((String)reportTable.get(i, RecalDataManager.EVENT_TYPE_COLUMN_NAME));\n            tempRGarray[1] = event.index;\n\n            rgTable.put(getRecalDatum(reportTable, i, true), tempRGarray);\n        }\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     *\n     * Compiles the list of keys for the QualityScore table and uses the shared parsing utility to produce the actual table\n     * @param reportTable            the GATKReport table containing data for this table\n     * @param qualTable               the map representing this table\n     */\n    private void parseQualityScoreTable(final GATKReportTable reportTable, final IntegerIndexedNestedHashMap<RecalDatum> qualTable) {\n        for ( int i = 0; i < reportTable.getNumRows(); i++ ) {\n            final Object rg = reportTable.get(i, RecalDataManager.READGROUP_COLUMN_NAME);\n            tempQUALarray[0] = requestedCovariates[0].keyFromValue(rg);\n            final Object qual = reportTable.get(i, RecalDataManager.QUALITY_SCORE_COLUMN_NAME);\n            tempQUALarray[1] = requestedCovariates[1].keyFromValue(qual);\n            final EventType event = EventType.eventFrom((String)reportTable.get(i, RecalDataManager.EVENT_TYPE_COLUMN_NAME));\n            tempQUALarray[2] = event.index;\n\n            qualTable.put(getRecalDatum(reportTable, i, false), tempQUALarray);\n        }\n    }","id":18746,"modified_method":"/**\n     *\n     * Compiles the list of keys for the QualityScore table and uses the shared parsing utility to produce the actual table\n     * @param reportTable            the GATKReport table containing data for this table\n     * @param qualTable               the map representing this table\n     */\n    private void parseQualityScoreTable(final GATKReportTable reportTable, final NestedIntegerArray<RecalDatum> qualTable) {\n        for ( int i = 0; i < reportTable.getNumRows(); i++ ) {\n            final Object rg = reportTable.get(i, RecalDataManager.READGROUP_COLUMN_NAME);\n            tempQUALarray[0] = requestedCovariates[0].keyFromValue(rg);\n            final Object qual = reportTable.get(i, RecalDataManager.QUALITY_SCORE_COLUMN_NAME);\n            tempQUALarray[1] = requestedCovariates[1].keyFromValue(qual);\n            final EventType event = EventType.eventFrom((String)reportTable.get(i, RecalDataManager.EVENT_TYPE_COLUMN_NAME));\n            tempQUALarray[2] = event.index;\n\n            qualTable.put(getRecalDatum(reportTable, i, false), tempQUALarray);\n        }\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Test(enabled = false)\n    public void testOutput() {\n        final int length = 100;\n\n        List<Byte> quals = new ArrayList<Byte>(QualityUtils.MAX_QUAL_SCORE + 1);\n        List<Long> counts = new ArrayList<Long>(QualityUtils.MAX_QUAL_SCORE + 1);\n\n        for (int i = 0;  i<= QualityUtils.MAX_QUAL_SCORE; i++) {\n            quals.add((byte) i);\n            counts.add(1L);\n        }\n\n        final QuantizationInfo quantizationInfo = new QuantizationInfo(quals, counts);\n        final RecalibrationArgumentCollection RAC = new RecalibrationArgumentCollection();\n\n        quantizationInfo.noQuantization();\n        final List<Covariate> requiredCovariates = new LinkedList<Covariate>();\n        final List<Covariate> optionalCovariates = new LinkedList<Covariate>();\n\n        final ReadGroupCovariate rgCovariate = new ReadGroupCovariate();\n        rgCovariate.initialize(RAC);\n        requiredCovariates.add(rgCovariate);\n\n        final QualityScoreCovariate qsCovariate = new QualityScoreCovariate();\n        qsCovariate.initialize(RAC);\n        requiredCovariates.add(qsCovariate);\n\n        final ContextCovariate cxCovariate = new ContextCovariate();\n        cxCovariate.initialize(RAC);\n        optionalCovariates.add(cxCovariate);\n        final CycleCovariate cyCovariate = new CycleCovariate();\n        cyCovariate.initialize(RAC);\n        optionalCovariates.add(cyCovariate);\n\n        final Covariate[] requestedCovariates = new Covariate[requiredCovariates.size() + optionalCovariates.size()];\n        int covariateIndex = 0;\n        for (final Covariate cov : requiredCovariates)\n            requestedCovariates[covariateIndex++] = cov;\n        for (final Covariate cov : optionalCovariates)\n            requestedCovariates[covariateIndex++] = cov;\n\n        final GATKSAMReadGroupRecord rg = new GATKSAMReadGroupRecord(\"id\");\n        rg.setPlatform(\"illumina\");\n        final GATKSAMRecord read = ReadUtils.createRandomRead(length, false);\n        read.setReadGroup(rg);\n        final byte [] readQuals = new byte[length];\n        for (int i = 0; i < length; i++)\n            readQuals[i] = 20;\n        read.setBaseQualities(readQuals);\n\n        final int expectedKeys = expectedNumberOfKeys(4, length, RAC.INDELS_CONTEXT_SIZE, RAC.MISMATCHES_CONTEXT_SIZE);\n        int nKeys = 0;                                                                                                  // keep track of how many keys were produced\n        final ReadCovariates rc = RecalDataManager.computeCovariates(read, requestedCovariates);\n\n        final RecalibrationTables recalibrationTables = new RecalibrationTables(requestedCovariates);\n        final IntegerIndexedNestedHashMap<RecalDatum> rgTable = recalibrationTables.getTable(RecalibrationTables.TableType.READ_GROUP_TABLE);\n        final IntegerIndexedNestedHashMap<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE);\n\n        for (int offset = 0; offset < length; offset++) {\n\n            for (EventType errorMode : EventType.values()) {\n\n                final int[] covariates = rc.getKeySet(offset, errorMode);\n                final int randomMax = errorMode == EventType.BASE_SUBSTITUTION ? 10000 : 100000;\n\n                rgTable.put(RecalDatum.createRandomRecalDatum(randomMax, 10), covariates[0], errorMode.index);\n                qualTable.put(RecalDatum.createRandomRecalDatum(randomMax, 10), covariates[0], covariates[1], errorMode.index);\n                nKeys += 2;\n                for (int j = 0; j < optionalCovariates.size(); j++) {\n                    final IntegerIndexedNestedHashMap<RecalDatum> covTable = recalibrationTables.getTable(RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index + j);\n                    covTable.put(RecalDatum.createRandomRecalDatum(randomMax, 10), covariates[0], covariates[1], j, covariates[RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index + j], errorMode.index);\n                    nKeys++;\n                }\n            }\n        }\n        Assert.assertEquals(nKeys, expectedKeys);\n\n        final RecalibrationReport report = new RecalibrationReport(quantizationInfo, recalibrationTables, RAC.generateReportTable(), RAC);\n\n        File output = new File(\"RecalibrationReportUnitTestOutuput.grp\");\n        PrintStream out;\n        try {\n            out = new PrintStream(output);\n        } catch (FileNotFoundException e) {\n            throw new ReviewedStingException(\"couldn't create the file \" + output, e);\n        }\n        report.output(out);\n\n        RecalibrationReport loadedReport = new RecalibrationReport(output);\n\n        Assert.assertTrue(report.equals(loadedReport));\n        if (!output.delete())\n            throw new ReviewedStingException(\"File could not be deleted \" + output);\n    }","id":18747,"modified_method":"@Test(enabled = false)\n    public void testOutput() {\n        final int length = 100;\n\n        List<Byte> quals = new ArrayList<Byte>(QualityUtils.MAX_QUAL_SCORE + 1);\n        List<Long> counts = new ArrayList<Long>(QualityUtils.MAX_QUAL_SCORE + 1);\n\n        for (int i = 0;  i<= QualityUtils.MAX_QUAL_SCORE; i++) {\n            quals.add((byte) i);\n            counts.add(1L);\n        }\n\n        final QuantizationInfo quantizationInfo = new QuantizationInfo(quals, counts);\n        final RecalibrationArgumentCollection RAC = new RecalibrationArgumentCollection();\n\n        quantizationInfo.noQuantization();\n        final List<Covariate> requiredCovariates = new LinkedList<Covariate>();\n        final List<Covariate> optionalCovariates = new LinkedList<Covariate>();\n\n        final ReadGroupCovariate rgCovariate = new ReadGroupCovariate();\n        rgCovariate.initialize(RAC);\n        requiredCovariates.add(rgCovariate);\n\n        final QualityScoreCovariate qsCovariate = new QualityScoreCovariate();\n        qsCovariate.initialize(RAC);\n        requiredCovariates.add(qsCovariate);\n\n        final ContextCovariate cxCovariate = new ContextCovariate();\n        cxCovariate.initialize(RAC);\n        optionalCovariates.add(cxCovariate);\n        final CycleCovariate cyCovariate = new CycleCovariate();\n        cyCovariate.initialize(RAC);\n        optionalCovariates.add(cyCovariate);\n\n        final Covariate[] requestedCovariates = new Covariate[requiredCovariates.size() + optionalCovariates.size()];\n        int covariateIndex = 0;\n        for (final Covariate cov : requiredCovariates)\n            requestedCovariates[covariateIndex++] = cov;\n        for (final Covariate cov : optionalCovariates)\n            requestedCovariates[covariateIndex++] = cov;\n\n        final GATKSAMReadGroupRecord rg = new GATKSAMReadGroupRecord(\"id\");\n        rg.setPlatform(\"illumina\");\n        final GATKSAMRecord read = ReadUtils.createRandomRead(length, false);\n        read.setReadGroup(rg);\n        final byte [] readQuals = new byte[length];\n        for (int i = 0; i < length; i++)\n            readQuals[i] = 20;\n        read.setBaseQualities(readQuals);\n\n        final int expectedKeys = expectedNumberOfKeys(4, length, RAC.INDELS_CONTEXT_SIZE, RAC.MISMATCHES_CONTEXT_SIZE);\n        int nKeys = 0;                                                                                                  // keep track of how many keys were produced\n        final ReadCovariates rc = RecalDataManager.computeCovariates(read, requestedCovariates);\n\n        final RecalibrationTables recalibrationTables = new RecalibrationTables(requestedCovariates);\n        final NestedIntegerArray<RecalDatum> rgTable = recalibrationTables.getTable(RecalibrationTables.TableType.READ_GROUP_TABLE);\n        final NestedIntegerArray<RecalDatum> qualTable = recalibrationTables.getTable(RecalibrationTables.TableType.QUALITY_SCORE_TABLE);\n\n        for (int offset = 0; offset < length; offset++) {\n\n            for (EventType errorMode : EventType.values()) {\n\n                final int[] covariates = rc.getKeySet(offset, errorMode);\n                final int randomMax = errorMode == EventType.BASE_SUBSTITUTION ? 10000 : 100000;\n\n                rgTable.put(RecalDatum.createRandomRecalDatum(randomMax, 10), covariates[0], errorMode.index);\n                qualTable.put(RecalDatum.createRandomRecalDatum(randomMax, 10), covariates[0], covariates[1], errorMode.index);\n                nKeys += 2;\n                for (int j = 0; j < optionalCovariates.size(); j++) {\n                    final NestedIntegerArray<RecalDatum> covTable = recalibrationTables.getTable(RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index + j);\n                    covTable.put(RecalDatum.createRandomRecalDatum(randomMax, 10), covariates[0], covariates[1], j, covariates[RecalibrationTables.TableType.OPTIONAL_COVARIATE_TABLES_START.index + j], errorMode.index);\n                    nKeys++;\n                }\n            }\n        }\n        Assert.assertEquals(nKeys, expectedKeys);\n\n        final RecalibrationReport report = new RecalibrationReport(quantizationInfo, recalibrationTables, RAC.generateReportTable(), RAC);\n\n        File output = new File(\"RecalibrationReportUnitTestOutuput.grp\");\n        PrintStream out;\n        try {\n            out = new PrintStream(output);\n        } catch (FileNotFoundException e) {\n            throw new ReviewedStingException(\"couldn't create the file \" + output, e);\n        }\n        report.output(out);\n\n        RecalibrationReport loadedReport = new RecalibrationReport(output);\n\n        Assert.assertTrue(report.equals(loadedReport));\n        if (!output.delete())\n            throw new ReviewedStingException(\"File could not be deleted \" + output);\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"public IntegerIndexedNestedHashMap<RecalDatum> getTable(final int index) {\n        return (IntegerIndexedNestedHashMap<RecalDatum>)tables[index];\n    }","id":18748,"modified_method":"public NestedIntegerArray<RecalDatum> getTable(final int index) {\n        return (NestedIntegerArray<RecalDatum>)tables[index];\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"public IntegerIndexedNestedHashMap<RecalDatum> getTable(final TableType type) {\n        return (IntegerIndexedNestedHashMap<RecalDatum>)tables[type.index];\n    }","id":18749,"modified_method":"public NestedIntegerArray<RecalDatum> getTable(final TableType type) {\n        return (NestedIntegerArray<RecalDatum>)tables[type.index];\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"public RecalibrationTables(final Covariate[] covariates, final int numReadGroups) {\n        tables = new IntegerIndexedNestedHashMap[covariates.length];\n\n        final int qualDimension = covariates[TableType.QUALITY_SCORE_TABLE.index].maximumKeyValue() + 1;\n        final int eventDimension = EventType.values().length;\n\n        tables[TableType.READ_GROUP_TABLE.index] = new IntegerIndexedNestedHashMap<RecalDatum>(numReadGroups, eventDimension);\n        tables[TableType.QUALITY_SCORE_TABLE.index] = new IntegerIndexedNestedHashMap<RecalDatum>(numReadGroups, qualDimension, eventDimension);\n        for (int i = TableType.OPTIONAL_COVARIATE_TABLES_START.index; i < covariates.length; i++)\n            tables[i] = new IntegerIndexedNestedHashMap<RecalDatum>(numReadGroups, qualDimension, covariates[i].maximumKeyValue()+1, eventDimension);\n    }","id":18750,"modified_method":"public RecalibrationTables(final Covariate[] covariates, final int numReadGroups) {\n        tables = new NestedIntegerArray[covariates.length];\n\n        final int qualDimension = covariates[TableType.QUALITY_SCORE_TABLE.index].maximumKeyValue() + 1;\n        final int eventDimension = EventType.values().length;\n\n        tables[TableType.READ_GROUP_TABLE.index] = new NestedIntegerArray<RecalDatum>(numReadGroups, eventDimension);\n        tables[TableType.QUALITY_SCORE_TABLE.index] = new NestedIntegerArray<RecalDatum>(numReadGroups, qualDimension, eventDimension);\n        for (int i = TableType.OPTIONAL_COVARIATE_TABLES_START.index; i < covariates.length; i++)\n            tables[i] = new NestedIntegerArray<RecalDatum>(numReadGroups, qualDimension, covariates[i].maximumKeyValue()+1, eventDimension);\n    }","commit_id":"5e47149348cc569a26c49ca6ff3ef90bc3297e65","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Theory\n    public void translateBasicHTMLFile(String extension) {\n        File testfile =\n                testFileGenerator.generateTestFileWithContent(\"basichtml\", \".\"\n                        + extension, \"<html><body>Line One<p>Line Two<p>\"\n                        + \"Line Three<\/body><\/html>\");\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", extension + \"-project\");\n        projectSettings.put(\"Name\", extension + \"-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        EditorPage editorPage = new ProjectWorkFlow()\n                .createNewProject(projectSettings)\n                .clickCreateVersionLink().inputVersionId(extension)\n                .saveVersion()\n                .gotoSettingsTab()\n                .gotoSettingsDocumentsTab()\n                .pressUploadFileButton()\n                .enterFilePath(testfile.getAbsolutePath())\n                .submitUpload()\n                .translate(\"fr\", testfile.getName());\n\n        assertThat(\"Item 1 shows Line One\",\n                editorPage.getMessageSourceAtRowIndex(0),\n                Matchers.equalTo(\"Line One\"));\n        assertThat(\"Item 2 shows Line Two\",\n                editorPage.getMessageSourceAtRowIndex(1),\n                Matchers.equalTo(\"Line Two\"));\n        assertThat(\"Item 3 shows Line Three\",\n                editorPage.getMessageSourceAtRowIndex(2),\n                Matchers.equalTo(\"Line Three\"));\n\n        editorPage =\n                editorPage.translateTargetAtRowIndex(0, \"Une Ligne\")\n                        .approveTranslationAtRow(0);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(1, \"Deux Ligne\")\n                        .approveTranslationAtRow(1);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(2, \"Ligne Trois\")\n                        .approveTranslationAtRow(2);\n\n        assertThat(\"Item 1 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 2 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 3 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Ligne Trois\"));\n\n        // Close and reopen the editor to test save, switches to CodeMirror\n        editorPage.reload();\n\n        assertThat(\"Item 1 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 2 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 3 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Ligne Trois\"));\n    }","id":18751,"modified_method":"@Feature(summary = \"The user can translate HyperText Markup Language files\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Theory\n    public void translateBasicHTMLFile(String extension) {\n        File testfile = testFileGenerator.generateTestFileWithContent(\n                \"basichtml\", \".\" + extension,\n                \"<html><body>Line One<p>Line Two<p>Line Three<\/body><\/html>\");\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", extension + \"-project\");\n        projectSettings.put(\"Name\", extension + \"-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        EditorPage editorPage = new ProjectWorkFlow()\n                .createNewProject(projectSettings)\n                .clickCreateVersionLink().inputVersionId(extension)\n                .saveVersion()\n                .gotoSettingsTab()\n                .gotoSettingsDocumentsTab()\n                .pressUploadFileButton()\n                .enterFilePath(testfile.getAbsolutePath())\n                .submitUpload()\n                .translate(\"fr\", testfile.getName());\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(0))\n                .isEqualTo(\"Line One\")\n                .as(\"Item 1 shows Line One\");\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(1))\n                .isEqualTo(\"Line Two\")\n                .as(\"Item 2 shows Line Two\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(2))\n                .isEqualTo(\"Line Three\")\n                .as(\"Item 3 shows Line Three\");\n\n        editorPage = editorPage\n                .translateTargetAtRowIndex(0, \"Une Ligne\")\n                .approveTranslationAtRow(0)\n                .translateTargetAtRowIndex(1, \"Deux Ligne\")\n                .approveTranslationAtRow(1)\n                .translateTargetAtRowIndex(2, \"Ligne Trois\")\n                .approveTranslationAtRow(2);\n\n        assertTranslations(editorPage);\n\n        // Close and reopen the editor to test save\n        editorPage.reload();\n\n        assertTranslations(editorPage);\n\n    }","commit_id":"50f9ad6c0d196c1fbf148320b1808d48907dbffc","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void translateBasicIdmlFile() {\n        File testfile = testFileGenerator.openTestFile(\"test-idml.idml\");\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", \"idml-project\");\n        projectSettings.put(\"Name\", \"idml-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        VersionLanguagesPage projectVersionPage =\n                new ProjectWorkFlow().createNewProject(projectSettings)\n                        .clickCreateVersionLink().inputVersionId(\"idml\")\n                        .saveVersion()\n                        .gotoSettingsTab()\n                        .gotoSettingsDocumentsTab()\n                        .pressUploadFileButton()\n                        .enterFilePath(testfile.getAbsolutePath())\n                        .submitUpload();\n\n        EditorPage editorPage =\n                projectVersionPage.translate(\"fr\",\n                        testfile.getName());\n\n        assertThat(\"Item 1 shows Line One\",\n                editorPage.getMessageSourceAtRowIndex(0),\n                Matchers.equalTo(\"Line One\"));\n        assertThat(\"Item 2 shows Line Two\",\n                editorPage.getMessageSourceAtRowIndex(1),\n                Matchers.equalTo(\"Line Two\"));\n        assertThat(\"Item 3 shows Line Three\",\n                editorPage.getMessageSourceAtRowIndex(2),\n                Matchers.equalTo(\"Line Three\"));\n\n        editorPage =\n                editorPage.translateTargetAtRowIndex(0, \"Une Ligne\")\n                        .approveTranslationAtRow(0);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(1, \"Deux Ligne\")\n                        .approveTranslationAtRow(1);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(2, \"Ligne Trois\")\n                        .approveTranslationAtRow(2);\n\n        assertThat(\"Item 1 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 2 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 3 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Ligne Trois\"));\n\n        // Close and reopen the editor to test save, switches to CodeMirror\n        editorPage.reload();\n\n        assertThat(\"Item 1 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 2 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 3 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Ligne Trois\"));\n    }","id":18752,"modified_method":"@Feature(summary = \"The user can translate an InDesign file\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void translateBasicIdmlFile() {\n        File testfile = testFileGenerator.openTestFile(\"test-idml.idml\");\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", \"idml-project\");\n        projectSettings.put(\"Name\", \"idml-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        VersionLanguagesPage projectVersionPage = new ProjectWorkFlow()\n                .createNewProject(projectSettings)\n                .clickCreateVersionLink().inputVersionId(\"idml\")\n                .saveVersion()\n                .gotoSettingsTab()\n                .gotoSettingsDocumentsTab()\n                .pressUploadFileButton()\n                .enterFilePath(testfile.getAbsolutePath())\n                .submitUpload();\n\n        EditorPage editorPage =\n                projectVersionPage.translate(\"fr\", testfile.getName());\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(0))\n                .isEqualTo(\"Line One\")\n                .as(\"Item 1 shows Line One\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(1))\n                .isEqualTo(\"Line Two\")\n                .as(\"Item 2 shows Line Two\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(2))\n                .isEqualTo(\"Line Three\")\n                .as(\"Item 3 shows Line Three\");\n\n        editorPage = editorPage.translateTargetAtRowIndex(0, \"Une Ligne\")\n                .approveTranslationAtRow(0)\n                .translateTargetAtRowIndex(1, \"Deux Ligne\")\n                .approveTranslationAtRow(1)\n                .translateTargetAtRowIndex(2, \"Ligne Trois\")\n                .approveTranslationAtRow(2);\n\n        assertTranslations(editorPage);\n\n        // Close and reopen the editor to test save\n        editorPage.reload();\n\n        assertTranslations(editorPage);\n    }","commit_id":"50f9ad6c0d196c1fbf148320b1808d48907dbffc","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void translateBasicOdsFile() {\n        File testfile = testFileGenerator.openTestFile(\"test-ods.ods\");\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", \"ods-project\");\n        projectSettings.put(\"Name\", \"ods-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        VersionLanguagesPage projectVersionPage =\n                new ProjectWorkFlow().createNewProject(projectSettings)\n                        .clickCreateVersionLink().inputVersionId(\"ods\")\n                        .saveVersion()\n                        .gotoSettingsTab()\n                        .gotoSettingsDocumentsTab()\n                        .pressUploadFileButton()\n                        .enterFilePath(testfile.getAbsolutePath())\n                        .submitUpload();\n\n        EditorPage editorPage =\n                projectVersionPage.translate(\"fr\", testfile.getName());\n\n        assertThat(\"Item 1 shows TestODS (the sheet name)\",\n                editorPage.getMessageSourceAtRowIndex(0),\n                Matchers.equalTo(\"TestODS\"));\n        assertThat(\"Item 2 shows First (the page name)\",\n                editorPage.getMessageSourceAtRowIndex(1),\n                Matchers.equalTo(\"First\"));\n        assertThat(\"Item 3 shows Line One\",\n                editorPage.getMessageSourceAtRowIndex(2),\n                Matchers.equalTo(\"Line One\"));\n        assertThat(\"Item 4 shows Line Two\",\n                editorPage.getMessageSourceAtRowIndex(3),\n                Matchers.equalTo(\"Line Two\"));\n        assertThat(\"Item 5 shows Line Three\",\n                editorPage.getMessageSourceAtRowIndex(4),\n                Matchers.equalTo(\"Line Three\"));\n\n        editorPage =\n                editorPage.translateTargetAtRowIndex(0, \"TestODS\")\n                        .approveTranslationAtRow(0);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(1, \"Début\")\n                        .approveTranslationAtRow(1);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(2, \"Une Ligne\")\n                        .approveTranslationAtRow(2);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(3, \"Deux Ligne\")\n                        .approveTranslationAtRow(3);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(4, \"Ligne Trois\")\n                        .approveTranslationAtRow(4);\n\n        assertThat(\"Item 1 shows a translation of the sheet name\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"TestODS\"));\n        assertThat(\"Item 2 shows a translation of page name\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Début\"));\n        assertThat(\"Item 3 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 4 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(3),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 5 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(4),\n                Matchers.equalTo(\"Ligne Trois\"));\n\n        // Close and reopen the editor to test save, switches to CodeMirror\n        editorPage.reload();\n\n        assertThat(\"Item 1 shows a translation of the sheet name\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"TestODS\"));\n        assertThat(\"Item 2 shows a translation of page name\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Début\"));\n        assertThat(\"Item 3 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 4 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(3),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 5 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(4),\n                Matchers.equalTo(\"Ligne Trois\"));\n    }","id":18753,"modified_method":"@Feature(summary = \"The user can translate an OpenOffice spreadsheet file\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void translateBasicOdsFile() {\n        File testfile = testFileGenerator.openTestFile(\"test-ods.ods\");\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", \"ods-project\");\n        projectSettings.put(\"Name\", \"ods-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        VersionLanguagesPage projectVersionPage = new ProjectWorkFlow()\n                .createNewProject(projectSettings)\n                .clickCreateVersionLink().inputVersionId(\"ods\")\n                .saveVersion()\n                .gotoSettingsTab()\n                .gotoSettingsDocumentsTab()\n                .pressUploadFileButton()\n                .enterFilePath(testfile.getAbsolutePath())\n                .submitUpload();\n\n        EditorPage editorPage =\n                projectVersionPage.translate(\"fr\", testfile.getName());\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(0))\n                .isEqualTo(\"TestODS\")\n                .as(\"Item 1 shows TestODS (the sheet name)\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(1))\n                .isEqualTo(\"First\")\n                .as(\"Item 2 shows First (the page name)\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(2))\n                .isEqualTo(\"Line One\")\n                .as(\"Item 3 shows Line One\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(3))\n                .isEqualTo(\"Line Two\")\n                .as(\"Item 4 shows Line Two\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(4))\n                .isEqualTo(\"Line Three\")\n                .as(\"Item 5 shows Line Three\");\n\n        editorPage = editorPage\n                .translateTargetAtRowIndex(0, \"TestODS\")\n                .approveTranslationAtRow(0)\n                .translateTargetAtRowIndex(1, \"Début\")\n                .approveTranslationAtRow(1)\n                .translateTargetAtRowIndex(2, \"Une Ligne\")\n                .approveTranslationAtRow(2)\n                .translateTargetAtRowIndex(3, \"Deux Ligne\")\n                .approveTranslationAtRow(3)\n                .translateTargetAtRowIndex(4, \"Ligne Trois\")\n                .approveTranslationAtRow(4);\n\n        assertTranslations(editorPage);\n\n        // Close and reopen the editor to test save, switches to CodeMirror\n        editorPage.reload();\n\n        assertTranslations(editorPage);\n    }","commit_id":"50f9ad6c0d196c1fbf148320b1808d48907dbffc","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Theory\n    public void translateBasicOpenOfficeFile(String extension) {\n        File testfile =\n                testFileGenerator.openTestFile(\"test-\" + extension + \".\"\n                        + extension);\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", extension + \"-project\");\n        projectSettings.put(\"Name\", extension + \"-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        EditorPage editorPage =\n                new ProjectWorkFlow().createNewProject(projectSettings)\n                        .clickCreateVersionLink().inputVersionId(extension)\n                        .saveVersion().gotoSettingsTab()\n                        .gotoSettingsDocumentsTab()\n                        .pressUploadFileButton()\n                        .enterFilePath(testfile.getAbsolutePath())\n                        .submitUpload().translate(\"fr\", testfile.getName());\n\n        assertThat(\"Item 1 shows Line One\",\n                editorPage.getMessageSourceAtRowIndex(0),\n                Matchers.equalTo(\"Line One\"));\n        assertThat(\"Item 2 shows Line Two\",\n                editorPage.getMessageSourceAtRowIndex(1),\n                Matchers.equalTo(\"Line Two\"));\n        assertThat(\"Item 3 shows Line Three\",\n                editorPage.getMessageSourceAtRowIndex(2),\n                Matchers.equalTo(\"Line Three\"));\n\n        editorPage =\n                editorPage.translateTargetAtRowIndex(0, \"Une Ligne\")\n                        .approveTranslationAtRow(0);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(1, \"Deux Ligne\")\n                        .approveTranslationAtRow(1);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(2, \"Ligne Trois\")\n                        .approveTranslationAtRow(2);\n\n        assertThat(\"Item 1 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 2 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 3 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Ligne Trois\"));\n\n        // Close and reopen the editor to test save, switches to CodeMirror\n        editorPage.reload();\n\n        assertThat(\"Item 1 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 2 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 3 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Ligne Trois\"));\n    }","id":18754,"modified_method":"@Feature(summary = \"The user can translate OpenOffice files\",\n        tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Theory\n    public void translateBasicOpenOfficeFile(String extension) {\n        File testfile =\n                testFileGenerator.openTestFile(\"test-\" + extension + \".\"\n                        + extension);\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", extension + \"-project\");\n        projectSettings.put(\"Name\", extension + \"-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        EditorPage editorPage = new ProjectWorkFlow()\n                .createNewProject(projectSettings)\n                .clickCreateVersionLink().inputVersionId(extension)\n                .saveVersion().gotoSettingsTab()\n                .gotoSettingsDocumentsTab()\n                .pressUploadFileButton()\n                .enterFilePath(testfile.getAbsolutePath())\n                .submitUpload().translate(\"fr\", testfile.getName());\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(0))\n                .isEqualTo(\"Line One\")\n                .as(\"Item 1 shows Line One\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(1))\n                .isEqualTo(\"Line Two\")\n                .as(\"Item 2 shows Line Two\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(2))\n                .isEqualTo(\"Line Three\")\n                .as(\"Item 3 shows Line Three\");\n\n        editorPage = editorPage\n                .translateTargetAtRowIndex(0, \"Une Ligne\")\n                .approveTranslationAtRow(0)\n                .translateTargetAtRowIndex(1, \"Deux Ligne\")\n                .approveTranslationAtRow(1)\n                .translateTargetAtRowIndex(2, \"Ligne Trois\")\n                .approveTranslationAtRow(2);\n\n        assertTranslations(editorPage);\n\n        // Close and reopen the editor to test save, switches to CodeMirror\n        editorPage.reload();\n\n        assertTranslations(editorPage);\n    }","commit_id":"50f9ad6c0d196c1fbf148320b1808d48907dbffc","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void translateBasicTextFile() {\n        File testfile =\n                testFileGenerator.generateTestFileWithContent(\"basictext\",\n                        \".txt\", \"Line One\\nLine Two\\nLine Three\");\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", \"text-project\");\n        projectSettings.put(\"Name\", \"text-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        EditorPage editorPage =\n                new ProjectWorkFlow().createNewProject(projectSettings)\n                        .clickCreateVersionLink().inputVersionId(\"text\")\n                        .saveVersion()\n                        .gotoSettingsTab()\n                        .gotoSettingsDocumentsTab()\n                        .pressUploadFileButton()\n                        .enterFilePath(testfile.getAbsolutePath())\n                        .submitUpload().translate(\"fr\", testfile.getName());\n\n        assertThat(\"Item 1 shows Line One\",\n                editorPage.getMessageSourceAtRowIndex(0),\n                Matchers.equalTo(\"Line One\"));\n        assertThat(\"Item 2 shows Line Two\",\n                editorPage.getMessageSourceAtRowIndex(1),\n                Matchers.equalTo(\"Line Two\"));\n        assertThat(\"Item 3 shows Line Three\",\n                editorPage.getMessageSourceAtRowIndex(2),\n                Matchers.equalTo(\"Line Three\"));\n\n        editorPage =\n                editorPage.translateTargetAtRowIndex(0, \"Une Ligne\")\n                        .approveTranslationAtRow(0);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(1, \"Deux Ligne\")\n                        .approveTranslationAtRow(1);\n        editorPage =\n                editorPage.translateTargetAtRowIndex(2, \"Ligne Trois\")\n                        .approveTranslationAtRow(2);\n\n        assertThat(\"Item 1 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 2 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 3 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Ligne Trois\"));\n\n        // Close and reopen the editor to test save, switches to CodeMirror\n        editorPage.reload();\n\n        assertThat(\"Item 1 shows a translation of Line One\",\n                editorPage.getBasicTranslationTargetAtRowIndex(0),\n                Matchers.equalTo(\"Une Ligne\"));\n        assertThat(\"Item 2 shows a translation of Line Two\",\n                editorPage.getBasicTranslationTargetAtRowIndex(1),\n                Matchers.equalTo(\"Deux Ligne\"));\n        assertThat(\"Item 3 shows a translation of Line Three\",\n                editorPage.getBasicTranslationTargetAtRowIndex(2),\n                Matchers.equalTo(\"Ligne Trois\"));\n    }","id":18755,"modified_method":"@Feature(summary = \"The user can translate a plain text file\",\n            tcmsTestPlanIds = 5316, tcmsTestCaseIds = 0)\n    @Test(timeout = ZanataTestCase.MAX_SHORT_TEST_DURATION)\n    public void translateBasicTextFile() {\n        File testfile = testFileGenerator.generateTestFileWithContent(\n                \"basictext\",\".txt\",\n                \"Line One\\nLine Two\\nLine Three\");\n\n        HashMap<String, String> projectSettings =\n                ProjectWorkFlow.projectDefaults();\n        projectSettings.put(\"Project ID\", \"text-project\");\n        projectSettings.put(\"Name\", \"text-project\");\n        projectSettings.put(\"Project Type\", \"File\");\n\n        EditorPage editorPage = new ProjectWorkFlow()\n                .createNewProject(projectSettings)\n                .clickCreateVersionLink().inputVersionId(\"text\")\n                .saveVersion()\n                .gotoSettingsTab()\n                .gotoSettingsDocumentsTab()\n                .pressUploadFileButton()\n                .enterFilePath(testfile.getAbsolutePath())\n                .submitUpload().translate(\"fr\", testfile.getName());\n\n        assertThat(editorPage.getMessageSourceAtRowIndex(0))\n                .isEqualTo(\"Line One\")\n                .as(\"Item 1 shows Line One\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(1))\n                .isEqualTo(\"Line Two\")\n                .as(\"Item 2 shows Line Two\");\n        assertThat(editorPage.getMessageSourceAtRowIndex(2))\n                .isEqualTo(\"Line Three\")\n                .as(\"Item 3 shows Line Three\");\n\n        editorPage = editorPage.translateTargetAtRowIndex(0, \"Une Ligne\")\n                .approveTranslationAtRow(0)\n                .translateTargetAtRowIndex(1, \"Deux Ligne\")\n                .approveTranslationAtRow(1)\n                .translateTargetAtRowIndex(2, \"Ligne Trois\")\n                .approveTranslationAtRow(2);\n\n        assertTranslations(editorPage);\n\n        // Close and reopen the editor to test save, switches to CodeMirror\n        editorPage.reload();\n\n        assertTranslations(editorPage);\n    }","commit_id":"50f9ad6c0d196c1fbf148320b1808d48907dbffc","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n    public List<GuestOSCategoryVO> listGuestOSCategoriesByCriteria(ListGuestOsCategoriesCmd cmd) {\n        Filter searchFilter = new Filter(GuestOSCategoryVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Long id = cmd.getId();\n\n        SearchBuilder<GuestOSCategoryVO> sb = _guestOSCategoryDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n\n        SearchCriteria<GuestOSCategoryVO> sc = sb.create();\n\n        if (id != null) {\n            sc.setParameters(\"id\", id);\n        }\n\n        return _guestOSCategoryDao.search(sc, searchFilter);\n    }","id":18756,"modified_method":"@Override\n    public List<GuestOSCategoryVO> listGuestOSCategoriesByCriteria(ListGuestOsCategoriesCmd cmd) {\n        Filter searchFilter = new Filter(GuestOSCategoryVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Long id = cmd.getId();\n        String name = cmd.getName();\n        String keyword = cmd.getKeyword();\n\n        SearchCriteria<GuestOSCategoryVO> sc = _guestOSCategoryDao.createSearchCriteria();\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n        \n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n        \n        if (keyword != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n        }\n\n        return _guestOSCategoryDao.search(sc, searchFilter);\n    }","commit_id":"15019d1e5c32bee83e8a2bee033be2dc2c352d57","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public List<GuestOSVO> listGuestOSByCriteria(ListGuestOsCmd cmd) {\n        Filter searchFilter = new Filter(GuestOSVO.class, \"displayName\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Long id = cmd.getId();\n        Long osCategoryId = cmd.getOsCategoryId();\n\n        SearchBuilder<GuestOSVO> sb = _guestOSDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"categoryId\", sb.entity().getCategoryId(), SearchCriteria.Op.EQ);\n\n        SearchCriteria<GuestOSVO> sc = sb.create();\n\n        if (id != null) {\n            sc.setParameters(\"id\", id);\n        }\n\n        if (osCategoryId != null) {\n            sc.setParameters(\"categoryId\", osCategoryId);\n        }\n\n        return _guestOSDao.search(sc, searchFilter);\n    }","id":18757,"modified_method":"@Override\n    public List<GuestOSVO> listGuestOSByCriteria(ListGuestOsCmd cmd) {\n        Filter searchFilter = new Filter(GuestOSVO.class, \"displayName\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Long id = cmd.getId();\n        Long osCategoryId = cmd.getOsCategoryId();\n        String description = cmd.getDescription();\n        String keyword = cmd.getKeyword();\n\n        SearchCriteria<GuestOSVO> sc = _guestOSDao.createSearchCriteria();\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (osCategoryId != null) {\n            sc.addAnd(\"categoryId\", SearchCriteria.Op.EQ, osCategoryId);\n        }\n        \n        if (description != null) {\n            sc.addAnd(\"displayName\", SearchCriteria.Op.LIKE, \"%\" + description + \"%\");\n        }\n        \n        if (keyword != null) {\n            sc.addAnd(\"displayName\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n        }\n\n        return _guestOSDao.search(sc, searchFilter);\n    }","commit_id":"15019d1e5c32bee83e8a2bee033be2dc2c352d57","url":"https://github.com/apache/cloudstack"},{"original_method":"private static Tuple _getJavaTermTuple(String line) {\r\n\t\tint pos = line.indexOf(StringPool.OPEN_PARENTHESIS);\r\n\r\n\t\tif (line.startsWith(StringPool.TAB + \"public static \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\tString variableName = _getVariableName(line);\r\n\r\n\t\t\t\tif (Character.isLowerCase(variableName.charAt(0))) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new Tuple(variableName, _TYPE_VARIABLE_PUBLIC_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t_TYPE_METHOD_PUBLIC_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (line.startsWith(StringPool.TAB + \"public static class \")) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getClassName(line), _TYPE_CLASS_PUBLIC_STATIC);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"public \")) {\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\tint spaceCount = StringUtil.count(\r\n\t\t\t\t\tline.substring(0, pos), StringPool.SPACE);\r\n\r\n\t\t\t\tif (spaceCount == 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_CONSTRUCTOR_PUBLIC);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (spaceCount > 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_METHOD_PUBLIC);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (line.startsWith(StringPool.TAB + \"public class \")) {\r\n\t\t\t\treturn new Tuple(_getClassName(line), _TYPE_CLASS_PUBLIC);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"protected static \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\tString variableName = _getVariableName(line);\r\n\r\n\t\t\t\tif (Character.isLowerCase(variableName.charAt(0))) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new Tuple(variableName, _TYPE_VARIABLE_PROTECTED_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t_TYPE_METHOD_PROTECTED_STATIC);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"protected \")) {\r\n\t\t\tif ((pos != -1) && !line.contains(StringPool.EQUAL)) {\r\n\t\t\t\tint spaceCount = StringUtil.count(\r\n\t\t\t\t\tline.substring(0, pos), StringPool.SPACE);\r\n\r\n\t\t\t\tif (spaceCount == 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_CONSTRUCTOR_PROTECTED);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (spaceCount > 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_METHOD_PROTECTED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn new Tuple(_getVariableName(line), _TYPE_VARIABLE_PROTECTED);\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"private static \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\tString variableName = _getVariableName(line);\r\n\r\n\t\t\t\tchar firstChar = variableName.charAt(1);\r\n\r\n\t\t\t\tif (Character.isUpperCase(firstChar)) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\tvariableName, _TYPE_VARIABLE_PRIVATE_STATIC_CONSTANT);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new Tuple(variableName, _TYPE_VARIABLE_PRIVATE_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t_TYPE_METHOD_PRIVATE_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (line.startsWith(StringPool.TAB + \"private static class \")) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getClassName(line), _TYPE_CLASS_PRIVATE_STATIC);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"private \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getVariableName(line), _TYPE_VARIABLE_PRIVATE);\r\n\t\t\t}\r\n\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\tint spaceCount = StringUtil.count(\r\n\t\t\t\t\tline.substring(0, pos), StringPool.SPACE);\r\n\r\n\t\t\t\tif (spaceCount == 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_CONSTRUCTOR_PRIVATE);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (spaceCount > 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_METHOD_PRIVATE);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (line.startsWith(StringPool.TAB + \"private class \")) {\r\n\t\t\t\treturn new Tuple(_getClassName(line), _TYPE_CLASS_PRIVATE);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}","id":18758,"modified_method":"private static Tuple _getJavaTermTuple(String line) {\r\n\t\tint pos = line.indexOf(StringPool.OPEN_PARENTHESIS);\r\n\r\n\t\tif (line.startsWith(StringPool.TAB + \"public static final \") &&\r\n\t\t\t(line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t line.contains(StringPool.EQUAL))) {\r\n\r\n\t\t\treturn new Tuple(\r\n\t\t\t\t_getVariableName(line), _TYPE_VARIABLE_PUBLIC_STATIC_FINAL);\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"public static \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getVariableName(line), _TYPE_VARIABLE_PUBLIC_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t_TYPE_METHOD_PUBLIC_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (line.startsWith(StringPool.TAB + \"public static class \")) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getClassName(line), _TYPE_CLASS_PUBLIC_STATIC);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"public \")) {\r\n\t\t\tif (line.contains(StringPool.EQUAL) ||\r\n\t\t\t\t(line.endsWith(StringPool.SEMICOLON) &&\r\n\t\t\t\t !line.contains(StringPool.OPEN_PARENTHESIS))) {\r\n\r\n\t\t\t\treturn new Tuple(_getVariableName(line), _TYPE_VARIABLE_PUBLIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\tint spaceCount = StringUtil.count(\r\n\t\t\t\t\tline.substring(0, pos), StringPool.SPACE);\r\n\r\n\t\t\t\tif (spaceCount == 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_CONSTRUCTOR_PUBLIC);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (spaceCount > 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_METHOD_PUBLIC);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (line.startsWith(StringPool.TAB + \"public class \")) {\r\n\t\t\t\treturn new Tuple(_getClassName(line), _TYPE_CLASS_PUBLIC);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"protected static final \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getVariableName(line),\r\n\t\t\t\t\t_TYPE_VARIABLE_PROTECTED_STATIC_FINAL);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"protected static \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getVariableName(line), _TYPE_VARIABLE_PROTECTED_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t_TYPE_METHOD_PROTECTED_STATIC);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"protected \")) {\r\n\t\t\tif ((pos != -1) && !line.contains(StringPool.EQUAL)) {\r\n\t\t\t\tint spaceCount = StringUtil.count(\r\n\t\t\t\t\tline.substring(0, pos), StringPool.SPACE);\r\n\r\n\t\t\t\tif (spaceCount == 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_CONSTRUCTOR_PROTECTED);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (spaceCount > 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_METHOD_PROTECTED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn new Tuple(_getVariableName(line), _TYPE_VARIABLE_PROTECTED);\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"private static final \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getVariableName(line),\r\n\t\t\t\t\t_TYPE_VARIABLE_PRIVATE_STATIC_FINAL);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"private static \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getVariableName(line), _TYPE_VARIABLE_PRIVATE_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t_TYPE_METHOD_PRIVATE_STATIC);\r\n\t\t\t}\r\n\r\n\t\t\tif (line.startsWith(StringPool.TAB + \"private static class \")) {\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getClassName(line), _TYPE_CLASS_PRIVATE_STATIC);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (line.startsWith(StringPool.TAB + \"private \")) {\r\n\t\t\tif (line.endsWith(StringPool.SEMICOLON) ||\r\n\t\t\t\tline.contains(StringPool.EQUAL)) {\r\n\r\n\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t_getVariableName(line), _TYPE_VARIABLE_PRIVATE);\r\n\t\t\t}\r\n\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\tint spaceCount = StringUtil.count(\r\n\t\t\t\t\tline.substring(0, pos), StringPool.SPACE);\r\n\r\n\t\t\t\tif (spaceCount == 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_CONSTRUCTOR_PRIVATE);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (spaceCount > 1) {\r\n\t\t\t\t\treturn new Tuple(\r\n\t\t\t\t\t\t_getConstructorOrMethodName(line, pos),\r\n\t\t\t\t\t\t_TYPE_METHOD_PRIVATE);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (line.startsWith(StringPool.TAB + \"private class \")) {\r\n\t\t\t\treturn new Tuple(_getClassName(line), _TYPE_CLASS_PRIVATE);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}","commit_id":"40c8a96b9647f789fe37e71671269eff7d9c7915","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static String _formatJavaContent(String fileName, String content)\r\n\t\tthrows IOException {\r\n\r\n\t\tboolean longLogFactoryUtil = false;\r\n\r\n\t\tStringBundler sb = new StringBundler();\r\n\r\n\t\tUnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(\r\n\t\t\tnew UnsyncStringReader(content));\r\n\r\n\t\tint lineCount = 0;\r\n\r\n\t\tString line = null;\r\n\r\n\t\tString previousLine = StringPool.BLANK;\r\n\r\n\t\tint lineToSkipIfEmpty = 0;\r\n\r\n\t\tString javaTermName = null;\r\n\t\tint javaTermType = 0;\r\n\r\n\t\tString previousJavaTermName = null;\r\n\t\tint previousJavaTermType = 0;\r\n\r\n\t\tList<String> methodParameterTypes = new ArrayList<String>();\r\n\t\tList<String> previousMethodParameterTypes = null;\r\n\r\n\t\tboolean readMethodParameterTypes = false;\r\n\t\tboolean hasSameMethodName = false;\r\n\r\n\t\twhile ((line = unsyncBufferedReader.readLine()) != null) {\r\n\t\t\tlineCount++;\r\n\r\n\t\t\tif (line.trim().length() == 0) {\r\n\t\t\t\tline = StringPool.BLANK;\r\n\t\t\t}\r\n\r\n\t\t\tline = StringUtil.trimTrailing(line);\r\n\r\n\t\t\tline = StringUtil.replace(\r\n\t\t\t\tline,\r\n\t\t\t\tnew String[] {\r\n\t\t\t\t\t\"* Copyright (c) 2000-2011 Liferay, Inc.\"\r\n\t\t\t\t},\r\n\t\t\t\tnew String[] {\r\n\t\t\t\t\t\"* Copyright (c) 2000-2012 Liferay, Inc.\"\r\n\t\t\t\t});\r\n\r\n\t\t\tline = _replacePrimitiveWrapperInstantiation(\r\n\t\t\t\tfileName, line, lineCount);\r\n\r\n\t\t\tString trimmedLine = StringUtil.trimLeading(line);\r\n\r\n\t\t\tString excluded = \r\n\t\t\t\t_javaTermAlphabetizeExclusionsProperties.getProperty(\r\n\t\t\t\t\tStringUtil.replace(\r\n\t\t\t\t\t\tfileName, \"\\\\\", \"/\") + StringPool.AT + lineCount);\r\n\r\n\t\t\tif (excluded == null) {\r\n\t\t\t\texcluded = _javaTermAlphabetizeExclusionsProperties.getProperty(\r\n\t\t\t\t\tStringUtil.replace(fileName, \"\\\\\", \"/\"));\r\n\t\t\t}\r\n\r\n\t\t\tif (line.startsWith(StringPool.TAB + \"private \") ||\r\n\t\t\t\tline.startsWith(StringPool.TAB + \"protected \") ||\r\n\t\t\t\tline.startsWith(StringPool.TAB + \"public \")) {\r\n\r\n\t\t\t\thasSameMethodName = false;\r\n\r\n\t\t\t\tTuple tuple = _getJavaTermTuple(line);\r\n\r\n\t\t\t\tif (tuple != null) {\r\n\t\t\t\t\tjavaTermName = (String)tuple.getObject(0);\r\n\t\t\t\t\tjavaTermType = (Integer)tuple.getObject(1);\r\n\r\n\t\t\t\t\tboolean isMethod = _isInJavaTermTypeGroup(\r\n\t\t\t\t\t\tjavaTermType, _TYPE_METHOD);\r\n\t\t\t\t\tboolean isPrivateMethodOrVariable =\r\n\t\t\t\t\t\t_isInJavaTermTypeGroup(\r\n\t\t\t\t\t\t\tjavaTermType, _TYPE_PRIVATE_METHOD_OR_VARIABLE);\r\n\r\n\t\t\t\t\tif (isMethod) {\r\n\t\t\t\t\t\treadMethodParameterTypes = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((isPrivateMethodOrVariable &&\r\n\t\t\t\t\t\t !javaTermName.startsWith(StringPool.UNDERLINE) &&\r\n\t\t\t\t\t\t !javaTermName.equals(\"serialVersionUID\")) ||\r\n\t\t\t\t\t\t(!isPrivateMethodOrVariable &&\r\n\t\t\t\t\t\t javaTermName.startsWith(StringPool.UNDERLINE))) {\r\n\r\n\t\t\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\t\t\tfileName,\r\n\t\t\t\t\t\t\t\"underscore: \" + fileName + \" \" + lineCount);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (Validator.isNotNull(previousJavaTermName)) {\r\n\t\t\t\t\t\tif (previousJavaTermType > javaTermType) {\r\n\t\t\t\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\t\t\t\tfileName,\r\n\t\t\t\t\t\t\t\t\"order: \" + fileName + \" \" + lineCount);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (previousJavaTermType == javaTermType) {\r\n\t\t\t\t\t\t\tif (isMethod &&\r\n\t\t\t\t\t\t\t\tpreviousJavaTermName.equals(javaTermName)) {\r\n\r\n\t\t\t\t\t\t\t\thasSameMethodName = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (excluded == null) {\r\n\t\t\t\t\t\t\t\t_compareJavaTermNames(\r\n\t\t\t\t\t\t\t\t\tfileName, previousJavaTermName,\r\n\t\t\t\t\t\t\t\t\tjavaTermName, lineCount);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpreviousJavaTermName = javaTermName;\r\n\t\t\t\t\tpreviousJavaTermType = javaTermType;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (readMethodParameterTypes) {\r\n\t\t\t\tmethodParameterTypes = _addMethodParameterTypes(\r\n\t\t\t\t\ttrimmedLine, methodParameterTypes);\r\n\r\n\t\t\t\tif (trimmedLine.contains(StringPool.CLOSE_PARENTHESIS)) {\r\n\t\t\t\t\tif (hasSameMethodName) {\r\n\t\t\t\t\t\t_compareMethodParameterTypes(\r\n\t\t\t\t\t\t\tfileName, previousMethodParameterTypes,\r\n\t\t\t\t\t\t\tmethodParameterTypes, lineCount);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treadMethodParameterTypes = false;\r\n\r\n\t\t\t\t\tpreviousMethodParameterTypes = ListUtil.copy(\r\n\t\t\t\t\t\tmethodParameterTypes);\r\n\r\n\t\t\t\t\tmethodParameterTypes.clear();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!trimmedLine.contains(StringPool.DOUBLE_SLASH) &&\r\n\t\t\t\t!trimmedLine.startsWith(StringPool.STAR)) {\r\n\r\n\t\t\t\twhile (trimmedLine.contains(StringPool.TAB)) {\r\n\t\t\t\t\tline = StringUtil.replaceLast(\r\n\t\t\t\t\t\tline, StringPool.TAB, StringPool.SPACE);\r\n\r\n\t\t\t\t\ttrimmedLine = StringUtil.replaceLast(\r\n\t\t\t\t\t\ttrimmedLine, StringPool.TAB, StringPool.SPACE);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (trimmedLine.contains(StringPool.DOUBLE_SPACE) &&\r\n\t\t\t\t\t   !trimmedLine.contains(\r\n\t\t\t\t\t\t   StringPool.QUOTE + StringPool.DOUBLE_SPACE) &&\r\n\t\t\t\t\t   !fileName.contains(\"Test\")) {\r\n\r\n\t\t\t\t\tline = StringUtil.replaceLast(\r\n\t\t\t\t\t\tline, StringPool.DOUBLE_SPACE, StringPool.SPACE);\r\n\r\n\t\t\t\t\ttrimmedLine = StringUtil.replaceLast(\r\n\t\t\t\t\t\ttrimmedLine, StringPool.DOUBLE_SPACE, StringPool.SPACE);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!line.contains(StringPool.QUOTE)) {\r\n\t\t\t\t\tif ((trimmedLine.startsWith(\"private \") ||\r\n\t\t\t\t\t\t trimmedLine.startsWith(\"protected \") ||\r\n\t\t\t\t\t\t trimmedLine.startsWith(\"public \")) &&\r\n\t\t\t\t\t\tline.contains(\" (\")) {\r\n\r\n\t\t\t\t\t\tline = StringUtil.replace(line, \" (\", \"(\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (line.contains(\" [\")) {\r\n\t\t\t\t\t\tline = StringUtil.replace(line, \" [\", \"[\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (int x = -1;;) {\r\n\t\t\t\t\t\tx = line.indexOf(StringPool.COMMA, x + 1);\r\n\r\n\t\t\t\t\t\tif (x == -1) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (line.length() > (x + 1)) {\r\n\t\t\t\t\t\t\tchar nextChar = line.charAt(x + 1);\r\n\r\n\t\t\t\t\t\t\tif ((nextChar != CharPool.SPACE) && \r\n\t\t\t\t\t\t\t\t(nextChar != CharPool.APOSTROPHE)) {\r\n\r\n\t\t\t\t\t\t\t\tline = StringUtil.insert(\r\n\t\t\t\t\t\t\t\t\tline, StringPool.SPACE, x + 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (x > 0) {\r\n\t\t\t\t\t\t\tchar previousChar = line.charAt(x - 1);\r\n\r\n\t\t\t\t\t\t\tif (previousChar == CharPool.SPACE) {\r\n\t\t\t\t\t\t\t\tline = line.substring(0, x - 1).concat(\r\n\t\t\t\t\t\t\t\t\tline.substring(x));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (line.contains(\"    \") && !line.matches(\"\\\\s*\\\\*.*\")) {\r\n\t\t\t\tif (!fileName.endsWith(\"StringPool.java\")) {\r\n\t\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\t\tfileName, \"tab: \" + fileName + \" \" + lineCount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (line.contains(\"  {\") && !line.matches(\"\\\\s*\\\\*.*\")) {\r\n\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\tfileName, \"{:\" + fileName + \" \" + lineCount);\r\n\t\t\t}\r\n\r\n\t\t\tif (line.endsWith(\"private static Log _log =\")) {\r\n\t\t\t\tlongLogFactoryUtil = true;\r\n\t\t\t}\r\n\r\n\t\t\texcluded = _lineLengthExclusionsProperties.getProperty(\r\n\t\t\t\tStringUtil.replace(\r\n\t\t\t\t\tfileName, \"\\\\\", \"/\") + StringPool.AT + lineCount);\r\n\r\n\t\t\tif (excluded == null) {\r\n\t\t\t\texcluded = _lineLengthExclusionsProperties.getProperty(\r\n\t\t\t\t\tStringUtil.replace(fileName, \"\\\\\", \"/\"));\r\n\t\t\t}\r\n\r\n\t\t\tString combinedLines = null;\r\n\r\n\t\t\tif ((excluded == null) &&\r\n\t\t\t\t!line.startsWith(\"import \") && !line.startsWith(\"package \") &&\r\n\t\t\t\t!line.matches(\"\\\\s*\\\\*.*\")) {\r\n\r\n\t\t\t\tif (fileName.endsWith(\"Table.java\") &&\r\n\t\t\t\t\tline.contains(\"String TABLE_SQL_CREATE = \")) {\r\n\t\t\t\t}\r\n\t\t\t\telse if (fileName.endsWith(\"Table.java\") &&\r\n\t\t\t\t\t\t line.contains(\"String TABLE_SQL_DROP = \")) {\r\n\t\t\t\t}\r\n\t\t\t\telse if (fileName.endsWith(\"Table.java\") &&\r\n\t\t\t\t\t\t line.contains(\" index IX_\")) {\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (_getLineLength(line) > 80) {\r\n\t\t\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\t\t\tfileName, \"> 80: \" + fileName + \" \" + lineCount);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcombinedLines = _getCombinedLines(\r\n\t\t\t\t\t\t\ttrimmedLine, previousLine);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (Validator.isNotNull(combinedLines)) {\r\n\t\t\t\tpreviousLine = combinedLines;\r\n\r\n\t\t\t\tif (line.endsWith(StringPool.OPEN_CURLY_BRACE)) {\r\n\t\t\t\t\tlineToSkipIfEmpty = lineCount + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ((lineCount > 1) &&\r\n\t\t\t\t\t(Validator.isNotNull(previousLine) ||\r\n\t\t\t\t\t (lineToSkipIfEmpty != lineCount - 1))) {\r\n\r\n\t\t\t\t\tsb.append(previousLine);\r\n\t\t\t\t\tsb.append(\"\\n\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpreviousLine = line;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsb.append(previousLine);\r\n\r\n\t\tunsyncBufferedReader.close();\r\n\r\n\t\tString newContent = sb.toString();\r\n\r\n\t\tif (newContent.endsWith(\"\\n\")) {\r\n\t\t\tnewContent = newContent.substring(0, newContent.length() - 1);\r\n\t\t}\r\n\r\n\t\tif (longLogFactoryUtil) {\r\n\t\t\tnewContent = StringUtil.replace(\r\n\t\t\t\tnewContent,\r\n\t\t\t\t\"private static Log _log =\\n\\t\\tLogFactoryUtil.getLog(\",\r\n\t\t\t\t\"private static Log _log = LogFactoryUtil.getLog(\\n\\t\\t\");\r\n\t\t}\r\n\r\n\t\treturn newContent;\r\n\t}","id":18759,"modified_method":"private static String _formatJavaContent(String fileName, String content)\r\n\t\tthrows IOException {\r\n\r\n\t\tboolean longLogFactoryUtil = false;\r\n\r\n\t\tStringBundler sb = new StringBundler();\r\n\r\n\t\tUnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(\r\n\t\t\tnew UnsyncStringReader(content));\r\n\r\n\t\tint lineCount = 0;\r\n\r\n\t\tString line = null;\r\n\r\n\t\tString previousLine = StringPool.BLANK;\r\n\r\n\t\tint lineToSkipIfEmpty = 0;\r\n\r\n\t\tString javaTermName = null;\r\n\t\tint javaTermType = 0;\r\n\r\n\t\tString previousJavaTermName = null;\r\n\t\tint previousJavaTermType = 0;\r\n\r\n\t\tList<String> methodParameterTypes = new ArrayList<String>();\r\n\t\tList<String> previousMethodParameterTypes = null;\r\n\r\n\t\tboolean readMethodParameterTypes = false;\r\n\t\tboolean hasSameMethodName = false;\r\n\r\n\t\twhile ((line = unsyncBufferedReader.readLine()) != null) {\r\n\t\t\tlineCount++;\r\n\r\n\t\t\tif (line.trim().length() == 0) {\r\n\t\t\t\tline = StringPool.BLANK;\r\n\t\t\t}\r\n\r\n\t\t\tline = StringUtil.trimTrailing(line);\r\n\r\n\t\t\tline = StringUtil.replace(\r\n\t\t\t\tline,\r\n\t\t\t\tnew String[] {\r\n\t\t\t\t\t\"* Copyright (c) 2000-2011 Liferay, Inc.\"\r\n\t\t\t\t},\r\n\t\t\t\tnew String[] {\r\n\t\t\t\t\t\"* Copyright (c) 2000-2012 Liferay, Inc.\"\r\n\t\t\t\t});\r\n\r\n\t\t\tline = _replacePrimitiveWrapperInstantiation(\r\n\t\t\t\tfileName, line, lineCount);\r\n\r\n\t\t\tString trimmedLine = StringUtil.trimLeading(line);\r\n\r\n\t\t\tString excluded = \r\n\t\t\t\t_javaTermAlphabetizeExclusionsProperties.getProperty(\r\n\t\t\t\t\tStringUtil.replace(\r\n\t\t\t\t\t\tfileName, \"\\\\\", \"/\") + StringPool.AT + lineCount);\r\n\r\n\t\t\tif (excluded == null) {\r\n\t\t\t\texcluded = _javaTermAlphabetizeExclusionsProperties.getProperty(\r\n\t\t\t\t\tStringUtil.replace(fileName, \"\\\\\", \"/\"));\r\n\t\t\t}\r\n\r\n\t\t\tif (line.startsWith(StringPool.TAB + \"private \") ||\r\n\t\t\t\tline.startsWith(StringPool.TAB + \"protected \") ||\r\n\t\t\t\tline.startsWith(StringPool.TAB + \"public \")) {\r\n\r\n\t\t\t\thasSameMethodName = false;\r\n\r\n\t\t\t\tTuple tuple = _getJavaTermTuple(line);\r\n\r\n\t\t\t\tif (tuple != null) {\r\n\t\t\t\t\tjavaTermName = (String)tuple.getObject(0);\r\n\r\n\t\t\t\t\tif (Validator.isNotNull(javaTermName)) {\r\n\t\t\t\t\t\tjavaTermType = (Integer)tuple.getObject(1);\r\n\r\n\t\t\t\t\t\tboolean isMethod = _isInJavaTermTypeGroup(\r\n\t\t\t\t\t\t\tjavaTermType, _TYPE_METHOD);\r\n\t\t\t\t\t\tboolean isPrivateMethodOrVariable =\r\n\t\t\t\t\t\t\t_isInJavaTermTypeGroup(\r\n\t\t\t\t\t\t\t\tjavaTermType, _TYPE_PRIVATE_METHOD_OR_VARIABLE);\r\n\r\n\t\t\t\t\t\tif (isMethod) {\r\n\t\t\t\t\t\t\treadMethodParameterTypes = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((isPrivateMethodOrVariable &&\r\n\t\t\t\t\t\t\t!javaTermName.startsWith(StringPool.UNDERLINE) &&\r\n\t\t\t\t\t\t\t!javaTermName.equals(\"serialVersionUID\")) ||\r\n\t\t\t\t\t\t\t(!isPrivateMethodOrVariable &&\r\n\t\t\t\t\t\t\t javaTermName.startsWith(StringPool.UNDERLINE))) {\r\n\r\n\t\t\t\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\t\t\t\tfileName,\r\n\t\t\t\t\t\t\t\t\"underscore: \" + fileName + \" \" + lineCount);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (_isInJavaTermTypeGroup(\r\n\t\t\t\t\t\t\t\tjavaTermType, _TYPE_VARIABLE_NOT_STATIC)) {\r\n\r\n\t\t\t\t\t\t\tchar firstChar = javaTermName.charAt(0);\r\n\r\n\t\t\t\t\t\t\tif (firstChar == CharPool.UNDERLINE) {\r\n\t\t\t\t\t\t\t\tfirstChar = javaTermName.charAt(1);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (Character.isUpperCase(firstChar)) {\r\n\t\t\t\t\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\t\t\t\t\tfileName,\r\n\t\t\t\t\t\t\t\t\t\"final: \" + fileName + \" \" + lineCount);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (Validator.isNotNull(previousJavaTermName) &&\r\n\t\t\t\t\t\t\t(excluded == null)) {\r\n\r\n\t\t\t\t\t\t\tif (previousJavaTermType > javaTermType) {\r\n\t\t\t\t\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\t\t\t\t\tfileName,\r\n\t\t\t\t\t\t\t\t\t\"order: \" + fileName + \" \" + lineCount);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (previousJavaTermType == javaTermType) {\r\n\t\t\t\t\t\t\t\tif (isMethod &&\r\n\t\t\t\t\t\t\t\t\tpreviousJavaTermName.equals(javaTermName)) {\r\n\r\n\t\t\t\t\t\t\t\t\thasSameMethodName = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t_compareJavaTermNames(\r\n\t\t\t\t\t\t\t\t\t\tfileName, previousJavaTermName,\r\n\t\t\t\t\t\t\t\t\t\tjavaTermName, lineCount);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpreviousJavaTermName = javaTermName;\r\n\t\t\t\t\t\tpreviousJavaTermType = javaTermType;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (readMethodParameterTypes) {\r\n\t\t\t\tmethodParameterTypes = _addMethodParameterTypes(\r\n\t\t\t\t\ttrimmedLine, methodParameterTypes);\r\n\r\n\t\t\t\tif (trimmedLine.contains(StringPool.CLOSE_PARENTHESIS)) {\r\n\t\t\t\t\tif (hasSameMethodName) {\r\n\t\t\t\t\t\t_compareMethodParameterTypes(\r\n\t\t\t\t\t\t\tfileName, previousMethodParameterTypes,\r\n\t\t\t\t\t\t\tmethodParameterTypes, lineCount);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treadMethodParameterTypes = false;\r\n\r\n\t\t\t\t\tpreviousMethodParameterTypes = ListUtil.copy(\r\n\t\t\t\t\t\tmethodParameterTypes);\r\n\r\n\t\t\t\t\tmethodParameterTypes.clear();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!trimmedLine.contains(StringPool.DOUBLE_SLASH) &&\r\n\t\t\t\t!trimmedLine.startsWith(StringPool.STAR)) {\r\n\r\n\t\t\t\twhile (trimmedLine.contains(StringPool.TAB)) {\r\n\t\t\t\t\tline = StringUtil.replaceLast(\r\n\t\t\t\t\t\tline, StringPool.TAB, StringPool.SPACE);\r\n\r\n\t\t\t\t\ttrimmedLine = StringUtil.replaceLast(\r\n\t\t\t\t\t\ttrimmedLine, StringPool.TAB, StringPool.SPACE);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (trimmedLine.contains(StringPool.DOUBLE_SPACE) &&\r\n\t\t\t\t\t   !trimmedLine.contains(\r\n\t\t\t\t\t\t   StringPool.QUOTE + StringPool.DOUBLE_SPACE) &&\r\n\t\t\t\t\t   !fileName.contains(\"Test\")) {\r\n\r\n\t\t\t\t\tline = StringUtil.replaceLast(\r\n\t\t\t\t\t\tline, StringPool.DOUBLE_SPACE, StringPool.SPACE);\r\n\r\n\t\t\t\t\ttrimmedLine = StringUtil.replaceLast(\r\n\t\t\t\t\t\ttrimmedLine, StringPool.DOUBLE_SPACE, StringPool.SPACE);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!line.contains(StringPool.QUOTE)) {\r\n\t\t\t\t\tif ((trimmedLine.startsWith(\"private \") ||\r\n\t\t\t\t\t\t trimmedLine.startsWith(\"protected \") ||\r\n\t\t\t\t\t\t trimmedLine.startsWith(\"public \")) &&\r\n\t\t\t\t\t\tline.contains(\" (\")) {\r\n\r\n\t\t\t\t\t\tline = StringUtil.replace(line, \" (\", \"(\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (line.contains(\" [\")) {\r\n\t\t\t\t\t\tline = StringUtil.replace(line, \" [\", \"[\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (int x = -1;;) {\r\n\t\t\t\t\t\tx = line.indexOf(StringPool.COMMA, x + 1);\r\n\r\n\t\t\t\t\t\tif (x == -1) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (line.length() > (x + 1)) {\r\n\t\t\t\t\t\t\tchar nextChar = line.charAt(x + 1);\r\n\r\n\t\t\t\t\t\t\tif ((nextChar != CharPool.SPACE) && \r\n\t\t\t\t\t\t\t\t(nextChar != CharPool.APOSTROPHE)) {\r\n\r\n\t\t\t\t\t\t\t\tline = StringUtil.insert(\r\n\t\t\t\t\t\t\t\t\tline, StringPool.SPACE, x + 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (x > 0) {\r\n\t\t\t\t\t\t\tchar previousChar = line.charAt(x - 1);\r\n\r\n\t\t\t\t\t\t\tif (previousChar == CharPool.SPACE) {\r\n\t\t\t\t\t\t\t\tline = line.substring(0, x - 1).concat(\r\n\t\t\t\t\t\t\t\t\tline.substring(x));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (line.contains(\"    \") && !line.matches(\"\\\\s*\\\\*.*\")) {\r\n\t\t\t\tif (!fileName.endsWith(\"StringPool.java\")) {\r\n\t\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\t\tfileName, \"tab: \" + fileName + \" \" + lineCount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (line.contains(\"  {\") && !line.matches(\"\\\\s*\\\\*.*\")) {\r\n\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\tfileName, \"{:\" + fileName + \" \" + lineCount);\r\n\t\t\t}\r\n\r\n\t\t\tif (line.endsWith(\"private static Log _log =\")) {\r\n\t\t\t\tlongLogFactoryUtil = true;\r\n\t\t\t}\r\n\r\n\t\t\texcluded = _lineLengthExclusionsProperties.getProperty(\r\n\t\t\t\tStringUtil.replace(\r\n\t\t\t\t\tfileName, \"\\\\\", \"/\") + StringPool.AT + lineCount);\r\n\r\n\t\t\tif (excluded == null) {\r\n\t\t\t\texcluded = _lineLengthExclusionsProperties.getProperty(\r\n\t\t\t\t\tStringUtil.replace(fileName, \"\\\\\", \"/\"));\r\n\t\t\t}\r\n\r\n\t\t\tString combinedLines = null;\r\n\r\n\t\t\tif ((excluded == null) &&\r\n\t\t\t\t!line.startsWith(\"import \") && !line.startsWith(\"package \") &&\r\n\t\t\t\t!line.matches(\"\\\\s*\\\\*.*\")) {\r\n\r\n\t\t\t\tif (fileName.endsWith(\"Table.java\") &&\r\n\t\t\t\t\tline.contains(\"String TABLE_SQL_CREATE = \")) {\r\n\t\t\t\t}\r\n\t\t\t\telse if (fileName.endsWith(\"Table.java\") &&\r\n\t\t\t\t\t\t line.contains(\"String TABLE_SQL_DROP = \")) {\r\n\t\t\t\t}\r\n\t\t\t\telse if (fileName.endsWith(\"Table.java\") &&\r\n\t\t\t\t\t\t line.contains(\" index IX_\")) {\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (_getLineLength(line) > 80) {\r\n\t\t\t\t\t\t_sourceFormatterHelper.printError(\r\n\t\t\t\t\t\t\tfileName, \"> 80: \" + fileName + \" \" + lineCount);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcombinedLines = _getCombinedLines(\r\n\t\t\t\t\t\t\ttrimmedLine, previousLine);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (Validator.isNotNull(combinedLines)) {\r\n\t\t\t\tpreviousLine = combinedLines;\r\n\r\n\t\t\t\tif (line.endsWith(StringPool.OPEN_CURLY_BRACE)) {\r\n\t\t\t\t\tlineToSkipIfEmpty = lineCount + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ((lineCount > 1) &&\r\n\t\t\t\t\t(Validator.isNotNull(previousLine) ||\r\n\t\t\t\t\t (lineToSkipIfEmpty != lineCount - 1))) {\r\n\r\n\t\t\t\t\tsb.append(previousLine);\r\n\t\t\t\t\tsb.append(\"\\n\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpreviousLine = line;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsb.append(previousLine);\r\n\r\n\t\tunsyncBufferedReader.close();\r\n\r\n\t\tString newContent = sb.toString();\r\n\r\n\t\tif (newContent.endsWith(\"\\n\")) {\r\n\t\t\tnewContent = newContent.substring(0, newContent.length() - 1);\r\n\t\t}\r\n\r\n\t\tif (longLogFactoryUtil) {\r\n\t\t\tnewContent = StringUtil.replace(\r\n\t\t\t\tnewContent,\r\n\t\t\t\t\"private static Log _log =\\n\\t\\tLogFactoryUtil.getLog(\",\r\n\t\t\t\t\"private static Log _log = LogFactoryUtil.getLog(\\n\\t\\t\");\r\n\t\t}\r\n\r\n\t\treturn newContent;\r\n\t}","commit_id":"40c8a96b9647f789fe37e71671269eff7d9c7915","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n   * use GenerationFacade\n   */\n  @Deprecated\n  public boolean generateModels(final List<SModelDescriptor> inputModels,\n                                final IOperationContext invocationContext,\n                                final IGenerationHandler generationHandler,\n                                final ProgressIndicator progress,\n                                final IMessageHandler messages,\n                                final GenerationOptions options) {\n    final boolean[] result = new boolean[1];\n    ModelAccess.instance().tryWrite(new Runnable() {\n      public void run() {\n        TransientModelsComponent transientModelsComponent = myProject.getComponent(TransientModelsComponent.class);\n        transientModelsComponent.startGeneration(options.getNumberOfModelsToKeep());\n\n        options.getGenerationTracer().startTracing();\n        fireBeforeGeneration(inputModels, options, invocationContext);\n\n        GeneratorLoggerAdapter logger = new GeneratorLoggerAdapter(messages, options.isShowInfo(), options.isShowWarnings(), options.isKeepModelsWithWarnings());\n\n        final GenerationController gc = new GenerationController(inputModels, transientModelsComponent, options, generationHandler, logger, invocationContext, progress);\n        result[0] = UndoHelper.getInstance().runNonUndoableAction(new Computable<Boolean>() {\n          @Override\n          public Boolean compute() {\n            boolean success = gc.generate();\n            if(success) {\n              fireModelsGenerated(Collections.unmodifiableList(inputModels), success);\n            }\n            return success;\n          }\n        });\n        options.getGenerationTracer().finishTracing();\n        fireAfterGeneration(inputModels, options, invocationContext);\n\n        transientModelsComponent.publishAll();\n        CleanupManager.getInstance().cleanup();\n      }\n    });\n    generationHandler.generationCompleted();\n    return result[0];\n  }","id":18760,"modified_method":"/**\n   * use GenerationFacade\n   */\n  @Deprecated\n  public boolean generateModels(final List<SModelDescriptor> inputModels,\n                                final IOperationContext invocationContext,\n                                final IGenerationHandler generationHandler,\n                                final ProgressIndicator progress,\n                                final IMessageHandler messages,\n                                final GenerationOptions options) {\n    final boolean[] result = new boolean[1];\n    int i;\n    for (i = 0; i < 3 && !ModelAccess.instance().tryWrite(new Runnable() {\n      public void run() {\n        TransientModelsComponent transientModelsComponent = myProject.getComponent(TransientModelsComponent.class);\n        transientModelsComponent.startGeneration(options.getNumberOfModelsToKeep());\n\n        options.getGenerationTracer().startTracing();\n        fireBeforeGeneration(inputModels, options, invocationContext);\n\n        GeneratorLoggerAdapter logger = new GeneratorLoggerAdapter(messages, options.isShowInfo(), options.isShowWarnings(), options.isKeepModelsWithWarnings());\n\n        final GenerationController gc = new GenerationController(inputModels, transientModelsComponent, options, generationHandler, logger, invocationContext, progress);\n        result[0] = UndoHelper.getInstance().runNonUndoableAction(new Computable<Boolean>() {\n          @Override\n          public Boolean compute() {\n            boolean success = gc.generate();\n            if(success) {\n              fireModelsGenerated(Collections.unmodifiableList(inputModels), success);\n            }\n            return success;\n          }\n        });\n        options.getGenerationTracer().finishTracing();\n        fireAfterGeneration(inputModels, options, invocationContext);\n\n        transientModelsComponent.publishAll();\n        CleanupManager.getInstance().cleanup();\n      }\n    }); ++i) {\n      try {\n        Thread.sleep((1<<i)*100);\n      } catch (InterruptedException ignore) {}\n    }\n    if (i >= 3) {\n      throw new RuntimeException(\"Failed to acquire write lock\");\n    }\n\n    generationHandler.generationCompleted();\n    return result[0];\n  }","commit_id":"7dd00b5e080eea36f0320ceae2ca1287c5d8ccde","url":"https://github.com/JetBrains/MPS"},{"original_method":"public TransientModelsModule getModule(final IModule module) {\n    return ModelAccess.instance().tryWrite(new Computable<TransientModelsModule>() {\n      @Override\n      public TransientModelsModule compute() {\n        TransientModelsModule transientModelsModule = myModuleMap.get(module);\n        if(transientModelsModule != null) {\n          return transientModelsModule;\n        }\n\n        transientModelsModule = new TransientModelsModule(module, TransientModelsComponent.this);\n        transientModelsModule.initModule();\n        myModuleMap.put(module, transientModelsModule);\n        return transientModelsModule;\n      }\n    });\n  }","id":18761,"modified_method":"public TransientModelsModule getModule(final IModule module) {\n    TransientModelsModule transientModelsModule = null;\n    int i;\n    for (i = 0; i < 3 && null == (transientModelsModule = ModelAccess.instance().tryWrite(new Computable<TransientModelsModule>() {\n      @Override\n      public TransientModelsModule compute() {\n        TransientModelsModule transientModelsModule = myModuleMap.get(module);\n        if (transientModelsModule != null) {\n          return transientModelsModule;\n        }\n\n        transientModelsModule = new TransientModelsModule(module, TransientModelsComponent.this);\n        transientModelsModule.initModule();\n        myModuleMap.put(module, transientModelsModule);\n        return transientModelsModule;\n      }\n    })); ++i) {\n      try {\n        Thread.sleep((1<<i)*100);\n      } catch (InterruptedException ignore) {}\n    }\n    if (i >= 3) {\n      throw new RuntimeException(\"Failed to acquire write lock\");\n    }\n    return transientModelsModule;\n  }","commit_id":"7dd00b5e080eea36f0320ceae2ca1287c5d8ccde","url":"https://github.com/JetBrains/MPS"},{"original_method":"public synchronized void publishAll() {\n    ModelAccess.instance().tryWrite(new Runnable() {\n      public void run() {\n        for(TransientModelsModule m : myModuleMap.values()) {\n          m.publishAll();\n        }\n      }\n    });\n  }","id":18762,"modified_method":"public synchronized void publishAll() {\n    int i;\n    for (i = 0; i < 3 && !ModelAccess.instance().tryWrite(new Runnable() {\n      public void run() {\n        for(TransientModelsModule m : myModuleMap.values()) {\n          m.publishAll();\n        }\n      }\n    }); ++i) {\n      try {\n        Thread.sleep((1<<i)*100);\n      } catch (InterruptedException ignore) {}\n    }\n    if (i >= 3) {\n      throw new RuntimeException(\"Failed to acquire write lock\");\n    }\n  }","commit_id":"7dd00b5e080eea36f0320ceae2ca1287c5d8ccde","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void clearAll() {\n    ModelAccess.instance().tryWrite(new Runnable() {\n      public void run() {\n        List<TransientModelsModule> toRemove = new ArrayList<TransientModelsModule>(myModuleMap.values());\n        myModuleMap.clear();\n        for(TransientModelsModule m : toRemove) {\n          m.disposeModule();\n        }\n      }\n    });\n\n    TransientSwapSpace space = getTransientSwapSpace();\n    if (space != null) {\n      space.clear();\n    }\n    mySessionId = null;\n  }","id":18763,"modified_method":"private void clearAll() {\n    int i;\n    for (i = 0; i < 3 && !ModelAccess.instance().tryWrite(new Runnable() {\n      public void run() {\n        List<TransientModelsModule> toRemove = new ArrayList<TransientModelsModule>(myModuleMap.values());\n        myModuleMap.clear();\n        for(TransientModelsModule m : toRemove) {\n          m.disposeModule();\n        }\n      }\n    }); ++i) {\n      try {\n        Thread.sleep((1<<i)*100);\n      } catch (InterruptedException ignore) {}\n    }\n    if (i >= 3) {\n      throw new RuntimeException(\"Failed to acquire write lock\");\n    }\n\n    TransientSwapSpace space = getTransientSwapSpace();\n    if (space != null) {\n      space.clear();\n    }\n    mySessionId = null;\n  }","commit_id":"7dd00b5e080eea36f0320ceae2ca1287c5d8ccde","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public boolean isNodeReady(AdapterOperation op) {\n        if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            Integer nodeid = op.getNodeId();\n            updateRancidNodeState(nodeid, true);\n            return \n            m_rancidAdapterConfig.isCurTimeInSchedule(getSuitableIpForRancid(nodeid));\n        }\n        return true;\n    }","id":18764,"modified_method":"@Override\n    public boolean isNodeReady(AdapterOperation op) {\n        boolean ready = true;\n        if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            Integer nodeid = op.getNodeId();\n            updateRancidNodeState(nodeid, true);\n            ready =\n            m_rancidAdapterConfig.isCurTimeInSchedule(getSuitableIpForRancid(nodeid));\n        }\n        log().debug(\"is Node Ready: \" + ready + \" For Operation \" + op.getType() + \" for node: \" + op.getNodeId());\n        return ready;\n    }","commit_id":"3b7c1a0ba2a043c7cdc8e74720078bacec8a2390","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@EventHandler(uei = EventConstants.RANCID_DOWNLOAD_FAILURE_UEI)\n    public void handleRancidDownLoadFailure(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.hasNodeid()) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, true);\n                doNodeConfigChanged(nodeId,m_cp,true);\n            } else {\n                log().warn(\"node does not exist with nodeid: \" + e.getNodeid());\n            }\n        }\n    }","id":18765,"modified_method":"@EventHandler(uei = EventConstants.RANCID_DOWNLOAD_FAILURE_UEI)\n    public void handleRancidDownLoadFailure(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.hasNodeid()) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, false);\n                doNodeConfigChanged(nodeId,m_cp,true);\n            } else {\n                log().warn(\"node does not exist with nodeid: \" + e.getNodeid());\n            }\n        }\n    }","commit_id":"3b7c1a0ba2a043c7cdc8e74720078bacec8a2390","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry ConfigChange on standByConn: \" + cp.getUrl());\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":18766,"modified_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED DoNodeConfigChanged: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry ConfigChange on standByConn: \" + cp.getUrl());\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"3b7c1a0ba2a043c7cdc8e74720078bacec8a2390","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    AdapterOperationSchedule createScheduleForNode(final int nodeId, AdapterOperationType type) {\n        if (type.equals(AdapterOperationType.CONFIG_CHANGE)) {\n            final String ipaddress =\n            (String)m_template.execute(new TransactionCallback() {\n                public Object doInTransaction(TransactionStatus arg0) {\n                    return getSuitableIpForRancid(nodeId);\n                }\n            });\n            return new AdapterOperationSchedule(m_rancidAdapterConfig.getDelay(ipaddress),60000, m_rancidAdapterConfig.getRetries(ipaddress), TimeUnit.MILLISECONDS);\n        }\n        return new AdapterOperationSchedule();\n    }","id":18767,"modified_method":"@Override\n    AdapterOperationSchedule createScheduleForNode(final int nodeId, AdapterOperationType type) {\n        log().debug(\"Scheduling: \" + type + \" for nodeid: \" + nodeId);\n        if (type.equals(AdapterOperationType.CONFIG_CHANGE)) {\n            final String ipaddress =\n            (String)m_template.execute(new TransactionCallback() {\n                public Object doInTransaction(TransactionStatus arg0) {\n                    return getSuitableIpForRancid(nodeId);\n                }\n            });\n            long initialDelay = m_rancidAdapterConfig.getDelay(ipaddress);\n            int retries = m_rancidAdapterConfig.getRetries(ipaddress);\n            log().debug(\"Setting initialDelay: \" + initialDelay);\n            log().debug(\"Setting retries: \" + retries);\n            \n            return new AdapterOperationSchedule(initialDelay,60, retries, TimeUnit.SECONDS);\n        }\n        return new AdapterOperationSchedule();\n    }","commit_id":"3b7c1a0ba2a043c7cdc8e74720078bacec8a2390","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@EventHandler(uei = EventConstants.RANCID_DOWNLOAD_FAILURE_UEI)\n    public void handleRancidDownLoadFailure(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.hasNodeid()) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, true);\n                doNodeConfigChanged(nodeId,m_cp,true);\n            } else {\n                log().warn(\"node does not exist with nodeid: \" + e.getNodeid());\n            }\n        }\n    }","id":18768,"modified_method":"@EventHandler(uei = EventConstants.RANCID_DOWNLOAD_FAILURE_UEI)\n    public void handleRancidDownLoadFailure(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.hasNodeid()) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, false);\n                doNodeConfigChanged(nodeId,m_cp,true);\n            } else {\n                log().warn(\"node does not exist with nodeid: \" + e.getNodeid());\n            }\n        }\n    }","commit_id":"8a7da80f0b10b1aab24bdca0a670e9f2d7e6b937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    AdapterOperationSchedule createScheduleForNode(final int nodeId, AdapterOperationType type) {\n        if (type.equals(AdapterOperationType.CONFIG_CHANGE)) {\n            final String ipaddress =\n            (String)m_template.execute(new TransactionCallback() {\n                public Object doInTransaction(TransactionStatus arg0) {\n                    return getSuitableIpForRancid(nodeId);\n                }\n            });\n            return new AdapterOperationSchedule(m_rancidAdapterConfig.getDelay(ipaddress),60000, m_rancidAdapterConfig.getRetries(ipaddress), TimeUnit.MILLISECONDS);\n        }\n        return new AdapterOperationSchedule();\n    }","id":18769,"modified_method":"@Override\n    AdapterOperationSchedule createScheduleForNode(final int nodeId, AdapterOperationType type) {\n        log().debug(\"Scheduling: \" + type + \" for nodeid: \" + nodeId);\n        if (type.equals(AdapterOperationType.CONFIG_CHANGE)) {\n            final String ipaddress =\n            (String)m_template.execute(new TransactionCallback() {\n                public Object doInTransaction(TransactionStatus arg0) {\n                    return getSuitableIpForRancid(nodeId);\n                }\n            });\n            long initialDelay = m_rancidAdapterConfig.getDelay(ipaddress);\n            int retries = m_rancidAdapterConfig.getRetries(ipaddress);\n            log().debug(\"Setting initialDelay: \" + initialDelay);\n            log().debug(\"Setting retries: \" + retries);\n            \n            return new AdapterOperationSchedule(initialDelay,60, retries, TimeUnit.SECONDS);\n        }\n        return new AdapterOperationSchedule();\n    }","commit_id":"8a7da80f0b10b1aab24bdca0a670e9f2d7e6b937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean isNodeReady(AdapterOperation op) {\n        if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            Integer nodeid = op.getNodeId();\n            updateRancidNodeState(nodeid, true);\n            return \n            m_rancidAdapterConfig.isCurTimeInSchedule(getSuitableIpForRancid(nodeid));\n        }\n        return true;\n    }","id":18770,"modified_method":"@Override\n    public boolean isNodeReady(AdapterOperation op) {\n        boolean ready = true;\n        if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            Integer nodeid = op.getNodeId();\n            updateRancidNodeState(nodeid, true);\n            ready =\n            m_rancidAdapterConfig.isCurTimeInSchedule(getSuitableIpForRancid(nodeid));\n        }\n        log().debug(\"is Node Ready: \" + ready + \" For Operation \" + op.getType() + \" for node: \" + op.getNodeId());\n        return ready;\n    }","commit_id":"8a7da80f0b10b1aab24bdca0a670e9f2d7e6b937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry ConfigChange on standByConn: \" + cp.getUrl());\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":18771,"modified_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED DoNodeConfigChanged: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry ConfigChange on standByConn: \" + cp.getUrl());\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"8a7da80f0b10b1aab24bdca0a670e9f2d7e6b937","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@EventHandler(uei = EventConstants.RANCID_DOWNLOAD_FAILURE_UEI)\n    public void handleRancidDownLoadFailure(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.hasNodeid()) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, true);\n                doNodeConfigChanged(nodeId,m_cp,true);\n            } else {\n                log().warn(\"node does not exist with nodeid: \" + e.getNodeid());\n            }\n        }\n    }","id":18772,"modified_method":"@EventHandler(uei = EventConstants.RANCID_DOWNLOAD_FAILURE_UEI)\n    public void handleRancidDownLoadFailure(Event e) {\n        log().debug(\"get Event uei/id: \" + e.getUei() + \"/\" + e.getDbid());\n        if (e.hasNodeid()) {\n            int nodeId = Long.valueOf(e.getNodeid()).intValue();\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                updateRancidNodeState(nodeId, false);\n                doNodeConfigChanged(nodeId,m_cp,true);\n            } else {\n                log().warn(\"node does not exist with nodeid: \" + e.getNodeid());\n            }\n        }\n    }","commit_id":"28548721433dc3d6f2a37e76a071f8a1ffe2c6a7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    AdapterOperationSchedule createScheduleForNode(final int nodeId, AdapterOperationType type) {\n        if (type.equals(AdapterOperationType.CONFIG_CHANGE)) {\n            final String ipaddress =\n            (String)m_template.execute(new TransactionCallback() {\n                public Object doInTransaction(TransactionStatus arg0) {\n                    return getSuitableIpForRancid(nodeId);\n                }\n            });\n            return new AdapterOperationSchedule(m_rancidAdapterConfig.getDelay(ipaddress),60000, m_rancidAdapterConfig.getRetries(ipaddress), TimeUnit.MILLISECONDS);\n        }\n        return new AdapterOperationSchedule();\n    }","id":18773,"modified_method":"@Override\n    AdapterOperationSchedule createScheduleForNode(final int nodeId, AdapterOperationType type) {\n        log().debug(\"Scheduling: \" + type + \" for nodeid: \" + nodeId);\n        if (type.equals(AdapterOperationType.CONFIG_CHANGE)) {\n            final String ipaddress =\n            (String)m_template.execute(new TransactionCallback() {\n                public Object doInTransaction(TransactionStatus arg0) {\n                    return getSuitableIpForRancid(nodeId);\n                }\n            });\n            long initialDelay = m_rancidAdapterConfig.getDelay(ipaddress);\n            int retries = m_rancidAdapterConfig.getRetries(ipaddress);\n            log().debug(\"Setting initialDelay: \" + initialDelay);\n            log().debug(\"Setting retries: \" + retries);\n            \n            return new AdapterOperationSchedule(initialDelay,60, retries, TimeUnit.SECONDS);\n        }\n        return new AdapterOperationSchedule();\n    }","commit_id":"28548721433dc3d6f2a37e76a071f8a1ffe2c6a7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry ConfigChange on standByConn: \" + cp.getUrl());\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":18774,"modified_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED DoNodeConfigChanged: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry ConfigChange on standByConn: \" + cp.getUrl());\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"28548721433dc3d6f2a37e76a071f8a1ffe2c6a7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean isNodeReady(AdapterOperation op) {\n        if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            Integer nodeid = op.getNodeId();\n            updateRancidNodeState(nodeid, true);\n            return \n            m_rancidAdapterConfig.isCurTimeInSchedule(getSuitableIpForRancid(nodeid));\n        }\n        return true;\n    }","id":18775,"modified_method":"@Override\n    public boolean isNodeReady(AdapterOperation op) {\n        boolean ready = true;\n        if (op.getType() == AdapterOperationType.CONFIG_CHANGE) {\n            Integer nodeid = op.getNodeId();\n            updateRancidNodeState(nodeid, true);\n            ready =\n            m_rancidAdapterConfig.isCurTimeInSchedule(getSuitableIpForRancid(nodeid));\n        }\n        log().debug(\"is Node Ready: \" + ready + \" For Operation \" + op.getType() + \" for node: \" + op.getNodeId());\n        return ready;\n    }","commit_id":"28548721433dc3d6f2a37e76a071f8a1ffe2c6a7","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Shows a pop-up notification corresponding to a device configuration\n     * change.\n     *\n     * @param title The title of the pop-up notification.\n     * @param device The device which has been connected, disconnected or\n     * selected as default device.\n     * @param popUpEvent The event for a device which has fired this\n     * notification: connected, disconnected or selected.\n     */\n    public void showPopUpNotification(\n            String title,\n            CaptureDeviceInfo device,\n            String popUpEvent)\n    {\n        // Shows the pop-up notification.\n        if(title != null && device != null && popUpEvent != null)\n        {\n            NotificationService notificationService\n                = NeomediaActivator.getNotificationService();\n\n            if(notificationService != null)\n            {\n                // Registers only once to the  popup message notification\n                // handler.\n                if(!isRegisteredToPopupMessageListener)\n                {\n                    isRegisteredToPopupMessageListener = true;\n                    managePopupMessageListenerRegistration(true);\n                }\n\n                // Fires the popup notification.\n                Map<String,Object> extras = new HashMap<String,Object>();\n                extras.put(\n                        NotificationData.POPUP_MESSAGE_HANDLER_TAG_EXTRA,\n                        this);\n\n                ResourceManagementService resources\n                    = NeomediaActivator.getResources();\n\n                notificationService.fireNotification(\n                        popUpEvent,\n                        title,\n                        device.getName()\n                        + \"\\r\\n\"\n                        + resources.getI18NString(\n                            \"impl.media.configform\"\n                            + \".AUDIO_DEVICE_CONFIG_MANAGMENT_CLICK\"),\n                        null,\n                        extras);\n            }\n        }\n    }","id":18776,"modified_method":"/**\n     * Shows a pop-up notification corresponding to a device configuration\n     * change.\n     *\n     * @param title The title of the pop-up notification.\n     * @param body A body text describing the device modifications.\n     * @param popUpEvent The event for a device which has fired this\n     * notification: connected, disconnected or selected.\n     */\n    public void showPopUpNotification(\n            String title,\n            String body,\n            String popUpEvent)\n    {\n        // Shows the pop-up notification.\n        if(title != null && body != null && popUpEvent != null)\n        {\n            NotificationService notificationService\n                = NeomediaActivator.getNotificationService();\n\n            if(notificationService != null)\n            {\n                // Registers only once to the  popup message notification\n                // handler.\n                if(!isRegisteredToPopupMessageListener)\n                {\n                    isRegisteredToPopupMessageListener = true;\n                    managePopupMessageListenerRegistration(true);\n                }\n\n                // Fires the popup notification.\n                Map<String,Object> extras = new HashMap<String,Object>();\n                extras.put(\n                        NotificationData.POPUP_MESSAGE_HANDLER_TAG_EXTRA,\n                        this);\n\n                ResourceManagementService resources\n                    = NeomediaActivator.getResources();\n\n                notificationService.fireNotification(\n                        popUpEvent,\n                        title,\n                        body\n                        + \"\\r\\n\\r\\n\"\n                        + resources.getI18NString(\n                            \"impl.media.configform\"\n                            + \".AUDIO_DEVICE_CONFIG_MANAGMENT_CLICK\"),\n                        null,\n                        extras);\n            }\n        }\n    }","commit_id":"c4a0b3c6cb4340cb507f16a008ec1fedc059c0a6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Function called when an audio device is plugged or unplugged.\n     *\n     * @param event The property change event which may concern the audio\n     * device.\n     */\n    public void propertyChange(PropertyChangeEvent event)\n    {\n        String popUpEvent = null;\n        String title = null;\n        CaptureDeviceInfo device = null;\n        ResourceManagementService resources\n            = NeomediaActivator.getResources();\n\n        // If the device configuration has changed: a device has been\n        // plugged or un-plugged.\n        if(DeviceConfiguration.PROP_AUDIO_SYSTEM_DEVICES\n                .equals(event.getPropertyName()))\n        {\n            popUpEvent = NeomediaActivator.DEVICE_CONFIGURATION_HAS_CHANGED;\n            // A device has been connected.\n            if(event.getNewValue() != null)\n            {\n                title = resources.getI18NString(\n                        \"impl.media.configform\"\n                        + \".AUDIO_DEVICE_CONNECTED\");\n                device = (CaptureDeviceInfo) event.getNewValue();\n            }\n            // A device has been disconnected.\n            else if(event.getOldValue() != null)\n            {\n                title = resources.getI18NString(\n                        \"impl.media.configform\"\n                        + \".AUDIO_DEVICE_DISCONNECTED\");\n                device = (CaptureDeviceInfo) event.getOldValue();\n            }\n        }\n        // If a new capture device has been selected.\n        else if(CaptureDevices.PROP_DEVICE.equals(event.getPropertyName()))\n        {\n            if(event.getNewValue() != null)\n            {\n                popUpEvent = NeomediaActivator.NEW_SELECTED_DEVICE;\n                title = resources.getI18NString(\n                        \"impl.media.configform\"\n                        + \".AUDIO_DEVICE_SELECTED_AUDIO_IN\");\n                device = (CaptureDeviceInfo) event.getNewValue();\n            }\n        }\n        // If a new playback device has been selected.\n        else if(PlaybackDevices.PROP_DEVICE.equals(event.getPropertyName()))\n        {\n            if(event.getNewValue() != null)\n            {\n                popUpEvent = NeomediaActivator.NEW_SELECTED_DEVICE;\n                title = resources.getI18NString(\n                        \"impl.media.configform\"\n                        + \".AUDIO_DEVICE_SELECTED_AUDIO_OUT\");\n                device = (CaptureDeviceInfo) event.getNewValue();\n            }\n        }\n        // If a new notify device has been selected.\n        else if(NotifyDevices.PROP_DEVICE.equals(event.getPropertyName()))\n        {\n            if(event.getNewValue() != null)\n            {\n                popUpEvent = NeomediaActivator.NEW_SELECTED_DEVICE;\n                title = resources.getI18NString(\n                        \"impl.media.configform\"\n                        + \".AUDIO_DEVICE_SELECTED_AUDIO_NOTIFICATIONS\");\n                device = (CaptureDeviceInfo) event.getNewValue();\n            }\n        }\n\n        // Shows the pop-up notification.\n        super.showPopUpNotification(title, device, popUpEvent);\n    }","id":18777,"modified_method":"/**\n     * Function called when an audio device is plugged or unplugged.\n     *\n     * @param event The property change event which may concern the audio\n     * device.\n     */\n    public void propertyChange(PropertyChangeEvent event)\n    {\n        String popUpEvent = null;\n        String title = null;\n        CaptureDeviceInfo device = null;\n        ResourceManagementService resources\n            = NeomediaActivator.getResources();\n\n        // If the device configuration has changed: a device has been\n        // plugged or un-plugged.\n        if(DeviceConfiguration.PROP_AUDIO_SYSTEM_DEVICES\n                .equals(event.getPropertyName()))\n        {\n            popUpEvent = NeomediaActivator.DEVICE_CONFIGURATION_HAS_CHANGED;\n            // A device has been connected.\n            if(event.getNewValue() != null)\n            {\n                title = resources.getI18NString(\n                        \"impl.media.configform\"\n                        + \".AUDIO_DEVICE_CONNECTED\");\n                device = (CaptureDeviceInfo) event.getNewValue();\n            }\n            // A device has been disconnected.\n            else if(event.getOldValue() != null)\n            {\n                title = resources.getI18NString(\n                        \"impl.media.configform\"\n                        + \".AUDIO_DEVICE_DISCONNECTED\");\n                device = (CaptureDeviceInfo) event.getOldValue();\n            }\n        }\n        // If a new capture device has been selected.\n        else if(CaptureDevices.PROP_DEVICE.equals(event.getPropertyName()))\n        {\n            if(event.getNewValue() != null)\n            {\n                captureDevice = (CaptureDeviceInfo) event.getNewValue();\n            }\n        }\n        // If a new playback device has been selected.\n        else if(PlaybackDevices.PROP_DEVICE.equals(event.getPropertyName()))\n        {\n            if(event.getNewValue() != null)\n            {\n                playbackDevice = (CaptureDeviceInfo) event.getNewValue();\n            }\n        }\n        // If a new notify device has been selected.\n        else if(NotifyDevices.PROP_DEVICE.equals(event.getPropertyName()))\n        {\n            if(event.getNewValue() != null)\n            {\n                notificationDevice = (CaptureDeviceInfo) event.getNewValue();\n            }\n        }\n\n        String body = null;\n        if(device != null)\n        {\n            body = device.getName();\n            if(captureDevice != null\n                    || playbackDevice != null\n                    || notificationDevice != null)\n            {\n                body += \"\\r\\n\";\n                if(captureDevice != null)\n                {\n                    body += \"\\r\\n\"\n                        + resources.getI18NString(\n                                \"impl.media.configform\"\n                                + \".AUDIO_DEVICE_SELECTED_AUDIO_IN\")\n                        + \"\\r\\n\\t\"\n                        + captureDevice.getName();\n                    captureDevice = null;\n                }\n                if(playbackDevice != null)\n                {\n                    body += \"\\r\\n\"\n                        + resources.getI18NString(\n                                \"impl.media.configform\"\n                                + \".AUDIO_DEVICE_SELECTED_AUDIO_OUT\")\n                        + \"\\r\\n\\t\"\n                        + playbackDevice.getName();\n                    playbackDevice = null;\n                }\n                if(notificationDevice != null)\n                {\n                    body += \"\\r\\n\"\n                        + resources.getI18NString(\n                                \"impl.media.configform\"\n                                + \".AUDIO_DEVICE_SELECTED_AUDIO_NOTIFICATIONS\")\n                        + \"\\r\\n\\t\"\n                        + notificationDevice.getName();\n                    notificationDevice = null;\n                }\n            }\n        }\n\n        // Shows the pop-up notification.\n        super.showPopUpNotification(title, body, popUpEvent);\n    }","commit_id":"c4a0b3c6cb4340cb507f16a008ec1fedc059c0a6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Function called when an audio device is plugged or unplugged.\n     *\n     * @param event The property change event which may concern the audio\n     * device.\n     */\n    public void propertyChange(PropertyChangeEvent event)\n    {\n        String popUpEvent = null;\n        String title = null;\n        CaptureDeviceInfo device = null;\n        ResourceManagementService resources\n            = NeomediaActivator.getResources();\n\n        // If a new video device has been selected.\n        if(DeviceConfiguration.VIDEO_CAPTURE_DEVICE\n                .equals(event.getPropertyName()))\n        {\n            if(event.getNewValue() != null)\n            {\n                popUpEvent = NeomediaActivator.NEW_SELECTED_DEVICE;\n                title = resources.getI18NString(\n                        \"impl.media.configform\"\n                        + \".VIDEO_DEVICE_SELECTED\");\n                device = (CaptureDeviceInfo) event.getNewValue();\n            }\n        }\n\n        // Shows the pop-up notification.\n        this.showPopUpNotification(title, device, popUpEvent);\n    }","id":18778,"modified_method":"/**\n     * Function called when an audio device is plugged or unplugged.\n     *\n     * @param event The property change event which may concern the audio\n     * device.\n     */\n    public void propertyChange(PropertyChangeEvent event)\n    {\n        String popUpEvent = null;\n        String title = null;\n        CaptureDeviceInfo device = null;\n        ResourceManagementService resources\n            = NeomediaActivator.getResources();\n\n        // If a new video device has been selected.\n        if(DeviceConfiguration.VIDEO_CAPTURE_DEVICE\n                .equals(event.getPropertyName()))\n        {\n            if(event.getNewValue() != null)\n            {\n                popUpEvent = NeomediaActivator.NEW_SELECTED_DEVICE;\n                title = resources.getI18NString(\n                        \"impl.media.configform\"\n                        + \".VIDEO_DEVICE_SELECTED\");\n                device = (CaptureDeviceInfo) event.getNewValue();\n            }\n        }\n\n        String body = null;\n        if(device != null)\n        {\n            body = device.getName();\n        }\n\n        // Shows the pop-up notification.\n        this.showPopUpNotification(title, body, popUpEvent);\n    }","commit_id":"c4a0b3c6cb4340cb507f16a008ec1fedc059c0a6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n   * Restore from provided model (characteristics and rule debt are restored)\n   */\n  public void restore() {\n    checkPermission();\n\n    Date updateDate = new Date(system2.now());\n    SqlSession session = mybatis.openSession();\n    try {\n      restoreCharacteristics(loadModelFromPlugin(DebtModelPluginRepository.DEFAULT_MODEL), updateDate, session);\n      restoreProvidedModel(ruleDao.selectEnablesAndNonManual(session), updateDate, session);\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":18779,"modified_method":"/**\n   * Restore from provided model\n   */\n  public void restore() {\n    restoreProvidedModel(null);\n  }","commit_id":"74255d29d42c2eca4ce0e4a89dc0b8686b9e50a3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void restoreRules(List<CharacteristicDto> characteristicDtos, List<RuleDto> rules, List<RuleDebt> ruleDebts,\n                            ValidationMessages validationMessages, Date updateDate, SqlSession session) {\n    for (RuleDto rule : rules) {\n      RuleDebt ruleDebt = ruleDebtByRule(rule, ruleDebts);\n      if (ruleDebt == null) {\n        disabledRuleDebt(rule, updateDate, session);\n      } else {\n        CharacteristicDto characteristicDto = characteristicByKey(ruleDebt.characteristicKey(), characteristicDtos);\n        if (characteristicDto == null) {\n          disabledRuleDebt(rule, updateDate, session);\n        } else {\n          boolean isSameCharacteristic = characteristicDto.getId().equals(rule.getDefaultCharacteristicId());\n          boolean isSameFunction = isSameRemediationFunction(ruleDebt, rule);\n          rule.setCharacteristicId(!isSameCharacteristic ? characteristicDto.getId() : null);\n          rule.setRemediationFunction(!isSameFunction ? ruleDebt.function().name() : null);\n          rule.setRemediationCoefficient(!isSameFunction ? ruleDebt.coefficient() : null);\n          rule.setRemediationOffset(!isSameFunction ? ruleDebt.offset() : null);\n          rule.setUpdatedAt(updateDate);\n          ruleDao.update(rule, session);\n          // TODO index rules in E/S\n        }\n      }\n      ruleDebts.remove(ruleDebt);\n    }\n\n    for (RuleDebt ruleDebt : ruleDebts) {\n      validationMessages.addWarningText(String.format(\"The rule '%s' does not exist.\", ruleDebt.ruleKey()));\n    }\n  }","id":18780,"modified_method":"private void restoreRules(List<CharacteristicDto> characteristicDtos, List<RuleDto> rules, List<RuleDebt> ruleDebts,\n                            ValidationMessages validationMessages, Date updateDate, SqlSession session) {\n    for (RuleDto rule : rules) {\n      RuleDebt ruleDebt = ruleDebtByRule(rule, ruleDebts);\n      if (ruleDebt == null) {\n        disabledRuleDebt(rule, updateDate, session);\n      } else {\n        CharacteristicDto characteristicDto = characteristicByKey(ruleDebt.characteristicKey(), characteristicDtos);\n        if (characteristicDto == null) {\n          disabledRuleDebt(rule, updateDate, session);\n        } else {\n          boolean isSameCharacteristicAsDefault = characteristicDto.getId().equals(rule.getDefaultCharacteristicId());\n          boolean isSameFunctionAsDefault = isSameRemediationFunction(ruleDebt, rule);\n          // If given characteristic is the same as the default one, set nothing in overridden characteristic\n          rule.setCharacteristicId(!isSameCharacteristicAsDefault ? characteristicDto.getId() : null);\n\n          // If given function is the same as the default one, set nothing in overridden function\n          rule.setRemediationFunction(!isSameFunctionAsDefault ? ruleDebt.function().name() : null);\n          rule.setRemediationCoefficient(!isSameFunctionAsDefault ? ruleDebt.coefficient() : null);\n          rule.setRemediationOffset(!isSameFunctionAsDefault ? ruleDebt.offset() : null);\n\n          rule.setUpdatedAt(updateDate);\n          ruleDao.update(rule, session);\n          // TODO index rules in E/S\n        }\n      }\n      ruleDebts.remove(ruleDebt);\n    }\n\n    for (RuleDebt ruleDebt : ruleDebts) {\n      validationMessages.addWarningText(String.format(\"The rule '%s' does not exist.\", ruleDebt.ruleKey()));\n    }\n  }","commit_id":"74255d29d42c2eca4ce0e4a89dc0b8686b9e50a3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Restore from plugins providing rules for a given language (only debt of rules on given language are restored)\n   */\n  public void restore(final String languageKey) {\n    checkPermission();\n\n    Date updateDate = new Date(system2.now());\n    SqlSession session = mybatis.openSession();\n    try {\n      List<RuleDto> rules = newArrayList(Iterables.filter(ruleDao.selectEnablesAndNonManual(session), new Predicate<RuleDto>() {\n        @Override\n        public boolean apply(@Nullable RuleDto input) {\n          return input != null && languageKey.equals(input.getLanguage());\n        }\n      }));\n      restoreProvidedModel(rules, updateDate, session);\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":18781,"modified_method":"/**\n   * Restore from plugins providing rules for a given language\n   */\n  public void restore(final String languageKey) {\n    restoreProvidedModel(languageKey);\n  }","commit_id":"74255d29d42c2eca4ce0e4a89dc0b8686b9e50a3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Restore model from a given XML model and a given language (only debt of rules on given language are restored from XML)\n   */\n  public ValidationMessages restoreFromXml(String xml, final String languageKey) {\n    checkPermission();\n\n    ValidationMessages validationMessages = ValidationMessages.create();\n    Date updateDate = new Date(system2.now());\n    SqlSession session = mybatis.openSession();\n    try {\n      List<CharacteristicDto> characteristicDtos = dao.selectEnabledCharacteristics(session);\n      List<RuleDto> rules = newArrayList(Iterables.filter(ruleDao.selectEnablesAndNonManual(session), new Predicate<RuleDto>() {\n        @Override\n        public boolean apply(@Nullable RuleDto input) {\n          return input != null && languageKey.equals(input.getLanguage());\n        }\n      }));\n      restoreRules(characteristicDtos, rules, rulesXMLImporter.importXML(xml, validationMessages), validationMessages, updateDate, session);\n\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n    return validationMessages;\n  }","id":18782,"modified_method":"/**\n   * Restore model from a given XML model and a given language (only debt of rules on given language are restored from XML)\n   */\n  public ValidationMessages restoreFromXml(String xml, final String languageKey) {\n    return restoreXmlModel(xml, languageKey);\n  }","commit_id":"74255d29d42c2eca4ce0e4a89dc0b8686b9e50a3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Restore model from a given XML model (characteristics and rule debt are restored from XML)\n   */\n  public ValidationMessages restoreFromXml(String xml) {\n    checkPermission();\n\n    ValidationMessages validationMessages = ValidationMessages.create();\n    Date updateDate = new Date(system2.now());\n    SqlSession session = mybatis.openSession();\n    try {\n      List<CharacteristicDto> characteristicDtos = restoreCharacteristics(characteristicsXMLImporter.importXML(xml), updateDate, session);\n      restoreRules(characteristicDtos, ruleDao.selectEnablesAndNonManual(session), rulesXMLImporter.importXML(xml, validationMessages), validationMessages, updateDate, session);\n\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n    return validationMessages;\n  }","id":18783,"modified_method":"/**\n   * Restore model from a given XML model (characteristics and rule debt are restored from XML)\n   */\n  public ValidationMessages restoreFromXml(String xml) {\n    return restoreXmlModel(xml, null);\n  }","commit_id":"74255d29d42c2eca4ce0e4a89dc0b8686b9e50a3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void restore_from_xml_and_language() throws Exception {\n    when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(\n      new CharacteristicDto().setId(1).setKey(\"PORTABILITY\").setName(\"Portability\").setOrder(1).setCreatedAt(oldDate),\n      new CharacteristicDto().setId(2).setKey(\"COMPILER\").setName(\"Compiler\").setParentId(1).setCreatedAt(oldDate)));\n\n    when(rulesXMLImporter.importXML(anyString(), any(ValidationMessages.class))).thenReturn(newArrayList(new RuleDebt()\n      .setRuleKey(RuleKey.of(\"squid\", \"UselessImportCheck\")).setCharacteristicKey(\"COMPILER\").setFunction(DebtRemediationFunction.Type.LINEAR).setCoefficient(\"2h\")));\n\n    when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(\n      new RuleDto().setId(1).setRepositoryKey(\"squid\").setRuleKey(\"UselessImportCheck\").setLanguage(\"java\")\n        .setDefaultCharacteristicId(10).setDefaultRemediationFunction(\"LINEAR\").setDefaultRemediationCoefficient(\"2h\")\n        .setCreatedAt(oldDate).setUpdatedAt(oldDate),\n      // Should be ignored\n      new RuleDto().setId(2).setRepositoryKey(\"checkstyle\").setLanguage(\"java2\")\n        .setCharacteristicId(3).setRemediationFunction(\"LINEAR\").setRemediationCoefficient(\"2h\")\n        .setCreatedAt(oldDate).setUpdatedAt(oldDate)\n    ));\n\n    debtModelBackup.restoreFromXml(\"<xml/>\", \"java\");\n\n    verify(characteristicsXMLImporter, never()).importXML(anyString());\n    verify(dao, never()).update(any(CharacteristicDto.class), eq(session));\n\n    verify(ruleDao).selectEnablesAndNonManual(session);\n    verify(ruleDao).update(ruleArgument.capture(), eq(session));\n    verifyNoMoreInteractions(ruleDao);\n\n    RuleDto rule = ruleArgument.getValue();\n    assertThat(rule.getId()).isEqualTo(1);\n\n    verify(session).commit();\n  }","id":18784,"modified_method":"@Test\n  public void restore_from_xml_and_language() throws Exception {\n    when(characteristicsXMLImporter.importXML(anyString())).thenReturn(new DebtModel()\n      .addRootCharacteristic(new DefaultDebtCharacteristic().setKey(\"PORTABILITY\").setName(\"Portability\").setOrder(1))\n      .addSubCharacteristic(new DefaultDebtCharacteristic().setKey(\"COMPILER\").setName(\"Compiler\"), \"PORTABILITY\"));\n\n    when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(\n      new CharacteristicDto().setId(1).setKey(\"PORTABILITY\").setName(\"Portability\").setOrder(1).setCreatedAt(oldDate),\n      new CharacteristicDto().setId(2).setKey(\"COMPILER\").setName(\"Compiler\").setParentId(1).setCreatedAt(oldDate)));\n\n    when(rulesXMLImporter.importXML(anyString(), any(ValidationMessages.class))).thenReturn(newArrayList(new RuleDebt()\n      .setRuleKey(RuleKey.of(\"squid\", \"UselessImportCheck\")).setCharacteristicKey(\"COMPILER\").setFunction(DebtRemediationFunction.Type.LINEAR).setCoefficient(\"2h\")));\n\n    when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(\n      new RuleDto().setId(1).setRepositoryKey(\"squid\").setRuleKey(\"UselessImportCheck\").setLanguage(\"java\")\n        .setDefaultCharacteristicId(10).setDefaultRemediationFunction(\"LINEAR\").setDefaultRemediationCoefficient(\"2h\")\n        .setCreatedAt(oldDate).setUpdatedAt(oldDate),\n      // Should be ignored\n      new RuleDto().setId(2).setRepositoryKey(\"checkstyle\").setLanguage(\"java2\")\n        .setCharacteristicId(3).setRemediationFunction(\"LINEAR\").setRemediationCoefficient(\"2h\")\n        .setCreatedAt(oldDate).setUpdatedAt(oldDate)\n    ));\n\n    debtModelBackup.restoreFromXml(\"<xml/>\", \"java\");\n\n    verify(ruleDao).selectEnablesAndNonManual(session);\n    verify(ruleDao).update(ruleArgument.capture(), eq(session));\n    verifyNoMoreInteractions(ruleDao);\n\n    RuleDto rule = ruleArgument.getValue();\n    assertThat(rule.getId()).isEqualTo(1);\n\n    verify(session).commit();\n  }","commit_id":"74255d29d42c2eca4ce0e4a89dc0b8686b9e50a3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void restore_from_xml_and_language_with_rule_linked_on_disabled_characteristic2() throws Exception {\n    when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(\n      new CharacteristicDto().setId(1).setKey(\"PORTABILITY\").setName(\"Portability updated\").setOrder(2).setCreatedAt(oldDate),\n      new CharacteristicDto().setId(2).setKey(\"COMPILER\").setName(\"Compiler updated\").setParentId(1).setCreatedAt(oldDate)\n    ));\n\n    when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(\n      new RuleDto().setId(1).setRepositoryKey(\"squid\").setRuleKey(\"UselessImportCheck\").setLanguage(\"java\")\n        .setDefaultCharacteristicId(3).setDefaultRemediationFunction(\"LINEAR\").setDefaultRemediationCoefficient(\"2h\")\n        .setCharacteristicId(2).setRemediationFunction(\"LINEAR_OFFSET\").setRemediationCoefficient(\"2h\").setRemediationOffset(\"15min\")\n        .setCreatedAt(oldDate).setUpdatedAt(oldDate)\n    ));\n\n    when(rulesXMLImporter.importXML(anyString(), any(ValidationMessages.class))).thenReturn(newArrayList(new RuleDebt()\n      // Linked on a default disabled characteristic -> Rule debt should be disabled\n      .setRuleKey(RuleKey.of(\"squid\", \"UselessImportCheck\")).setCharacteristicKey(\"HARDWARE\").setFunction(DebtRemediationFunction.Type.LINEAR).setCoefficient(\"2h\")));\n\n    debtModelBackup.restoreFromXml(\"<xml/>\", \"java\");\n\n    verify(characteristicsXMLImporter, never()).importXML(anyString());\n    verify(dao, never()).update(any(CharacteristicDto.class), eq(session));\n\n    verify(ruleDao).selectEnablesAndNonManual(session);\n    verify(ruleDao).update(ruleArgument.capture(), eq(session));\n    verifyNoMoreInteractions(ruleDao);\n\n    RuleDto rule = ruleArgument.getValue();\n    assertThat(rule.getId()).isEqualTo(1);\n    assertThat(rule.getCharacteristicId()).isEqualTo(-1);\n    assertThat(rule.getRemediationFunction()).isNull();\n    assertThat(rule.getRemediationCoefficient()).isNull();\n    assertThat(rule.getRemediationOffset()).isNull();\n    assertThat(rule.getUpdatedAt()).isEqualTo(now);\n\n    verify(session).commit();\n  }","id":18785,"modified_method":"@Test\n  public void restore_from_xml_and_language_with_rule_linked_on_disabled_characteristic2() throws Exception {\n    when(characteristicsXMLImporter.importXML(anyString())).thenReturn(new DebtModel()\n      .addRootCharacteristic(new DefaultDebtCharacteristic().setKey(\"PORTABILITY\").setName(\"Portability\").setOrder(1))\n      .addSubCharacteristic(new DefaultDebtCharacteristic().setKey(\"COMPILER\").setName(\"Compiler\"), \"PORTABILITY\"));\n\n    when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(\n      new CharacteristicDto().setId(1).setKey(\"PORTABILITY\").setName(\"Portability updated\").setOrder(2).setCreatedAt(oldDate),\n      new CharacteristicDto().setId(2).setKey(\"COMPILER\").setName(\"Compiler updated\").setParentId(1).setCreatedAt(oldDate)\n    ));\n\n    when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(\n      new RuleDto().setId(1).setRepositoryKey(\"squid\").setRuleKey(\"UselessImportCheck\").setLanguage(\"java\")\n        .setDefaultCharacteristicId(3).setDefaultRemediationFunction(\"LINEAR\").setDefaultRemediationCoefficient(\"2h\")\n        .setCharacteristicId(2).setRemediationFunction(\"LINEAR_OFFSET\").setRemediationCoefficient(\"2h\").setRemediationOffset(\"15min\")\n        .setCreatedAt(oldDate).setUpdatedAt(oldDate)\n    ));\n\n    when(rulesXMLImporter.importXML(anyString(), any(ValidationMessages.class))).thenReturn(newArrayList(new RuleDebt()\n      // Linked on a default disabled characteristic -> Rule debt should be disabled\n      .setRuleKey(RuleKey.of(\"squid\", \"UselessImportCheck\")).setCharacteristicKey(\"HARDWARE\").setFunction(DebtRemediationFunction.Type.LINEAR).setCoefficient(\"2h\")));\n\n    debtModelBackup.restoreFromXml(\"<xml/>\", \"java\");\n\n    verify(ruleDao).selectEnablesAndNonManual(session);\n    verify(ruleDao).update(ruleArgument.capture(), eq(session));\n    verifyNoMoreInteractions(ruleDao);\n\n    RuleDto rule = ruleArgument.getValue();\n    assertThat(rule.getId()).isEqualTo(1);\n    assertThat(rule.getCharacteristicId()).isEqualTo(-1);\n    assertThat(rule.getRemediationFunction()).isNull();\n    assertThat(rule.getRemediationCoefficient()).isNull();\n    assertThat(rule.getRemediationOffset()).isNull();\n    assertThat(rule.getUpdatedAt()).isEqualTo(now);\n\n    verify(session).commit();\n  }","commit_id":"74255d29d42c2eca4ce0e4a89dc0b8686b9e50a3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void restore_from_xml_and_language_with_rule_not_in_xml_and_linked_on_disabled_default_characteristic() throws Exception {\n    when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(\n      new CharacteristicDto().setId(1).setKey(\"PORTABILITY\").setName(\"Portability updated\").setOrder(2).setCreatedAt(oldDate),\n      new CharacteristicDto().setId(2).setKey(\"COMPILER\").setName(\"Compiler updated\").setParentId(1).setCreatedAt(oldDate)\n    ));\n\n    when(rulesXMLImporter.importXML(anyString(), any(ValidationMessages.class))).thenReturn(Collections.<RuleDebt>emptyList());\n    when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(\n      // Linked on a default disabled characteristic -> Rule debt should be disabled\n      new RuleDto().setId(1).setRepositoryKey(\"squid\").setRuleKey(\"UselessImportCheck\").setLanguage(\"java\")\n        .setDefaultCharacteristicId(3).setDefaultRemediationFunction(\"LINEAR\").setDefaultRemediationCoefficient(\"2h\")\n        .setCharacteristicId(2).setRemediationFunction(\"LINEAR_OFFSET\").setRemediationCoefficient(\"2h\").setRemediationOffset(\"15min\")\n        .setCreatedAt(oldDate).setUpdatedAt(oldDate)\n    ));\n\n    debtModelBackup.restoreFromXml(\"<xml/>\", \"java\");\n\n    verify(characteristicsXMLImporter, never()).importXML(anyString());\n    verify(dao, never()).update(any(CharacteristicDto.class), eq(session));\n\n    verify(ruleDao).selectEnablesAndNonManual(session);\n    verify(ruleDao).update(ruleArgument.capture(), eq(session));\n    verifyNoMoreInteractions(ruleDao);\n\n    RuleDto rule = ruleArgument.getValue();\n    assertThat(rule.getId()).isEqualTo(1);\n    assertThat(rule.getCharacteristicId()).isEqualTo(-1);\n    assertThat(rule.getRemediationFunction()).isNull();\n    assertThat(rule.getRemediationCoefficient()).isNull();\n    assertThat(rule.getRemediationOffset()).isNull();\n    assertThat(rule.getUpdatedAt()).isEqualTo(now);\n\n    verify(session).commit();\n  }","id":18786,"modified_method":"@Test\n  public void restore_from_xml_and_language_with_rule_not_in_xml_and_linked_on_disabled_default_characteristic() throws Exception {\n    when(characteristicsXMLImporter.importXML(anyString())).thenReturn(new DebtModel()\n      .addRootCharacteristic(new DefaultDebtCharacteristic().setKey(\"PORTABILITY\").setName(\"Portability\").setOrder(1))\n      .addSubCharacteristic(new DefaultDebtCharacteristic().setKey(\"COMPILER\").setName(\"Compiler\"), \"PORTABILITY\"));\n\n    when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(\n      new CharacteristicDto().setId(1).setKey(\"PORTABILITY\").setName(\"Portability updated\").setOrder(2).setCreatedAt(oldDate),\n      new CharacteristicDto().setId(2).setKey(\"COMPILER\").setName(\"Compiler updated\").setParentId(1).setCreatedAt(oldDate)\n    ));\n\n    when(rulesXMLImporter.importXML(anyString(), any(ValidationMessages.class))).thenReturn(Collections.<RuleDebt>emptyList());\n    when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(\n      // Linked on a default disabled characteristic -> Rule debt should be disabled\n      new RuleDto().setId(1).setRepositoryKey(\"squid\").setRuleKey(\"UselessImportCheck\").setLanguage(\"java\")\n        .setDefaultCharacteristicId(3).setDefaultRemediationFunction(\"LINEAR\").setDefaultRemediationCoefficient(\"2h\")\n        .setCharacteristicId(2).setRemediationFunction(\"LINEAR_OFFSET\").setRemediationCoefficient(\"2h\").setRemediationOffset(\"15min\")\n        .setCreatedAt(oldDate).setUpdatedAt(oldDate)\n    ));\n\n    debtModelBackup.restoreFromXml(\"<xml/>\", \"java\");\n\n    verify(ruleDao).selectEnablesAndNonManual(session);\n    verify(ruleDao).update(ruleArgument.capture(), eq(session));\n    verifyNoMoreInteractions(ruleDao);\n\n    RuleDto rule = ruleArgument.getValue();\n    assertThat(rule.getId()).isEqualTo(1);\n    assertThat(rule.getCharacteristicId()).isEqualTo(-1);\n    assertThat(rule.getRemediationFunction()).isNull();\n    assertThat(rule.getRemediationCoefficient()).isNull();\n    assertThat(rule.getRemediationOffset()).isNull();\n    assertThat(rule.getUpdatedAt()).isEqualTo(now);\n\n    verify(session).commit();\n  }","commit_id":"74255d29d42c2eca4ce0e4a89dc0b8686b9e50a3","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"protected File doExportLayoutsAsFile(\n\t\t\tlong groupId, boolean privateLayout, long[] layoutIds,\n\t\t\tMap<String, String[]> parameterMap, Date startDate, Date endDate)\n\t\tthrows Exception {\n\n\t\tboolean exportCategories = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.CATEGORIES);\n\t\tboolean exportIgnoreLastPublishDate = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.IGNORE_LAST_PUBLISH_DATE);\n\t\tboolean exportPermissions = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PERMISSIONS);\n\t\tboolean exportPortletArchivedSetups = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);\n\t\tboolean exportPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\t\tboolean exportPortletUserPreferences = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);\n\t\tboolean exportTheme = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.THEME);\n\t\tboolean exportThemeSettings = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.THEME_REFERENCE);\n\t\tboolean exportLogo = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.LOGO);\n\t\tboolean exportLayoutSetSettings = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.LAYOUT_SET_SETTINGS);\n\t\tboolean updateLastPublishDate = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Export permissions \" + exportPermissions);\n\t\t\t_log.debug(\n\t\t\t\t\"Export portlet archived setups \" +\n\t\t\t\t\texportPortletArchivedSetups);\n\t\t\t_log.debug(\n\t\t\t\t\"Export portlet user preferences \" +\n\t\t\t\t\texportPortletUserPreferences);\n\t\t\t_log.debug(\"Export theme \" + exportTheme);\n\t\t}\n\n\t\tLayoutSet layoutSet = LayoutSetLocalServiceUtil.getLayoutSet(\n\t\t\tgroupId, privateLayout);\n\n\t\tlong companyId = layoutSet.getCompanyId();\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (serviceContext == null) {\n\t\t\tserviceContext = new ServiceContext();\n\n\t\t\tserviceContext.setCompanyId(companyId);\n\t\t\tserviceContext.setSignedIn(false);\n\t\t\tserviceContext.setUserId(defaultUserId);\n\n\t\t\tServiceContextThreadLocal.pushServiceContext(serviceContext);\n\t\t}\n\n\t\tserviceContext.setAttribute(\"exporting\", Boolean.TRUE);\n\n\t\tlong layoutSetBranchId = MapUtil.getLong(\n\t\t\tparameterMap, \"layoutSetBranchId\");\n\n\t\tserviceContext.setAttribute(\"layoutSetBranchId\", layoutSetBranchId);\n\n\t\tlong lastPublishDate = System.currentTimeMillis();\n\n\t\tif (endDate != null) {\n\t\t\tlastPublishDate = endDate.getTime();\n\t\t}\n\n\t\tif (exportIgnoreLastPublishDate) {\n\t\t\tendDate = null;\n\t\t\tstartDate = null;\n\t\t}\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\t\t}\n\n\t\tLayoutCache layoutCache = new LayoutCache();\n\n\t\tZipWriter zipWriter = ZipWriterFactoryUtil.getZipWriter();\n\n\t\tPortletDataContext portletDataContext =\n\t\t\tPortletDataContextFactoryUtil.createExportPortletDataContext(\n\t\t\t\tcompanyId, groupId, parameterMap, startDate, endDate,\n\t\t\t\tzipWriter);\n\n\t\tportletDataContext.setPortetDataContextListener(\n\t\t\tnew PortletDataContextListenerImpl(portletDataContext));\n\n\t\tDocument document = SAXReaderUtil.createDocument();\n\n\t\tElement rootElement = document.addElement(\"root\");\n\n\t\tportletDataContext.setExportDataRootElement(rootElement);\n\n\t\tElement headerElement = rootElement.addElement(\"header\");\n\n\t\theaderElement.addAttribute(\n\t\t\t\"available-locales\",\n\t\t\tStringUtil.merge(LanguageUtil.getAvailableLocales()));\n\t\theaderElement.addAttribute(\n\t\t\t\"build-number\", String.valueOf(ReleaseInfo.getBuildNumber()));\n\t\theaderElement.addAttribute(\"export-date\", Time.getRFC822());\n\n\t\tif (portletDataContext.hasDateRange()) {\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"start-date\",\n\t\t\t\tString.valueOf(portletDataContext.getStartDate()));\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"end-date\", String.valueOf(portletDataContext.getEndDate()));\n\t\t}\n\n\t\theaderElement.addAttribute(\n\t\t\t\"company-id\", String.valueOf(portletDataContext.getCompanyId()));\n\t\theaderElement.addAttribute(\n\t\t\t\"company-group-id\",\n\t\t\tString.valueOf(portletDataContext.getCompanyGroupId()));\n\t\theaderElement.addAttribute(\"group-id\", String.valueOf(groupId));\n\t\theaderElement.addAttribute(\n\t\t\t\"user-personal-site-group-id\",\n\t\t\tString.valueOf(portletDataContext.getUserPersonalSiteGroupId()));\n\t\theaderElement.addAttribute(\n\t\t\t\"private-layout\", String.valueOf(privateLayout));\n\n\t\tGroup group = layoutSet.getGroup();\n\n\t\tString type = \"layout-set\";\n\n\t\tif (group.isLayoutPrototype()) {\n\t\t\ttype = \"layout-prototype\";\n\n\t\t\tLayoutPrototype layoutPrototype =\n\t\t\t\tLayoutPrototypeLocalServiceUtil.getLayoutPrototype(\n\t\t\t\t\tgroup.getClassPK());\n\n\t\t\theaderElement.addAttribute(\"type-uuid\", layoutPrototype.getUuid());\n\t\t}\n\t\telse if (group.isLayoutSetPrototype()) {\n\t\t\ttype =\"layout-set-prototype\";\n\n\t\t\tLayoutSetPrototype layoutSetPrototype =\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototype(\n\t\t\t\t\tgroup.getClassPK());\n\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"type-uuid\", layoutSetPrototype.getUuid());\n\t\t}\n\n\t\theaderElement.addAttribute(\"type\", type);\n\n\t\tif (exportTheme || exportThemeSettings) {\n\t\t\theaderElement.addAttribute(\"theme-id\", layoutSet.getThemeId());\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"color-scheme-id\", layoutSet.getColorSchemeId());\n\t\t}\n\n\t\tif (exportLogo) {\n\t\t\tImage image = ImageLocalServiceUtil.getImage(layoutSet.getLogoId());\n\n\t\t\tif ((image != null) && (image.getTextObj() != null)) {\n\t\t\t\tString logoPath = ExportImportPathUtil.getRootPath(\n\t\t\t\t\tportletDataContext);\n\n\t\t\t\tlogoPath += \"/logo\";\n\n\t\t\t\theaderElement.addAttribute(\"logo-path\", logoPath);\n\n\t\t\t\tportletDataContext.addZipEntry(logoPath, image.getTextObj());\n\t\t\t}\n\t\t}\n\n\t\tif (exportLayoutSetSettings) {\n\t\t\tElement settingsElement = headerElement.addElement(\"settings\");\n\n\t\t\tsettingsElement.addCDATA(layoutSet.getSettings());\n\t\t}\n\n\t\tElement cssElement = headerElement.addElement(\"css\");\n\n\t\tcssElement.addCDATA(layoutSet.getCss());\n\n\t\tMap<String, Object[]> portletIds =\n\t\t\tnew LinkedHashMap<String, Object[]>();\n\n\t\tList<Layout> layouts = null;\n\n\t\tif ((layoutIds == null) || (layoutIds.length == 0)) {\n\t\t\tlayouts = LayoutLocalServiceUtil.getLayouts(groupId, privateLayout);\n\t\t}\n\t\telse {\n\t\t\tlayouts = LayoutLocalServiceUtil.getLayouts(\n\t\t\t\tgroupId, privateLayout, layoutIds);\n\t\t}\n\n\t\tList<Portlet> portlets = getDataSiteLevelPortlets(companyId);\n\n\t\tlong plid = LayoutConstants.DEFAULT_PLID;\n\n\t\tif (!layouts.isEmpty()) {\n\t\t\tLayout firstLayout = layouts.get(0);\n\n\t\t\tplid = firstLayout.getPlid();\n\t\t}\n\n\t\tif (group.isStagingGroup()) {\n\t\t\tgroup = group.getLiveGroup();\n\t\t}\n\n\t\tfor (Portlet portlet : portlets) {\n\t\t\tString portletId = portlet.getRootPortletId();\n\n\t\t\tif (!group.isStagedPortlet(portletId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString key = PortletPermissionUtil.getPrimaryKey(0, portletId);\n\n\t\t\tif (portletIds.get(key) == null) {\n\t\t\t\tportletIds.put(\n\t\t\t\t\tkey,\n\t\t\t\t\tnew Object[] {\n\t\t\t\t\t\tportletId, plid, groupId, StringPool.BLANK,\n\t\t\t\t\t\tStringPool.BLANK\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tElement missingReferencesElement = rootElement.addElement(\n\t\t\t\"missing-references\");\n\n\t\tportletDataContext.setMissingReferencesElement(\n\t\t\tmissingReferencesElement);\n\n\t\tElement layoutsElement = portletDataContext.getExportDataGroupElement(\n\t\t\tLayout.class);\n\n\t\tString layoutSetPrototypeUuid = layoutSet.getLayoutSetPrototypeUuid();\n\n\t\tif (Validator.isNotNull(layoutSetPrototypeUuid)) {\n\t\t\tLayoutSetPrototype layoutSetPrototype =\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.\n\t\t\t\t\tgetLayoutSetPrototypeByUuidAndCompanyId(\n\t\t\t\t\t\tlayoutSetPrototypeUuid, companyId);\n\n\t\t\tlayoutsElement.addAttribute(\n\t\t\t\t\"layout-set-prototype-uuid\", layoutSetPrototypeUuid);\n\n\t\t\tlayoutsElement.addAttribute(\n\t\t\t\t\"layout-set-prototype-name\",\n\t\t\t\tlayoutSetPrototype.getName(LocaleUtil.getDefault()));\n\t\t}\n\n\t\tfor (Layout layout : layouts) {\n\t\t\texportLayout(\n\t\t\t\tportletDataContext, portlets, portletIds, layout,\n\t\t\t\tlayoutsElement);\n\t\t}\n\n\t\tlong previousScopeGroupId = portletDataContext.getScopeGroupId();\n\n\t\tElement portletsElement = rootElement.addElement(\"portlets\");\n\n\t\tfor (Map.Entry<String, Object[]> portletIdsEntry :\n\t\t\t\tportletIds.entrySet()) {\n\n\t\t\tObject[] portletObjects = portletIdsEntry.getValue();\n\n\t\t\tString portletId = null;\n\t\t\tplid = LayoutConstants.DEFAULT_PLID;\n\t\t\tlong scopeGroupId = 0;\n\t\t\tString scopeType = StringPool.BLANK;\n\t\t\tString scopeLayoutUuid = null;\n\n\t\t\tif (portletObjects.length == 4) {\n\t\t\t\tportletId = (String)portletIdsEntry.getValue()[0];\n\t\t\t\tplid = (Long)portletIdsEntry.getValue()[1];\n\t\t\t\tscopeGroupId = (Long)portletIdsEntry.getValue()[2];\n\t\t\t\tscopeLayoutUuid = (String)portletIdsEntry.getValue()[3];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportletId = (String)portletIdsEntry.getValue()[0];\n\t\t\t\tplid = (Long)portletIdsEntry.getValue()[1];\n\t\t\t\tscopeGroupId = (Long)portletIdsEntry.getValue()[2];\n\t\t\t\tscopeType = (String)portletIdsEntry.getValue()[3];\n\t\t\t\tscopeLayoutUuid = (String)portletIdsEntry.getValue()[4];\n\t\t\t}\n\n\t\t\tLayout layout = LayoutLocalServiceUtil.fetchLayout(plid);\n\n\t\t\tif (layout == null) {\n\t\t\t\tif (!group.isCompany() &&\n\t\t\t\t\t(plid <= LayoutConstants.DEFAULT_PLID)) {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\"Assuming global scope because no layout was found\");\n\t\t\t\t}\n\n\t\t\t\tlayout = new LayoutImpl();\n\n\t\t\t\tlayout.setGroupId(groupId);\n\t\t\t\tlayout.setCompanyId(companyId);\n\t\t\t}\n\n\t\t\tportletDataContext.setPlid(plid);\n\t\t\tportletDataContext.setOldPlid(plid);\n\t\t\tportletDataContext.setScopeGroupId(scopeGroupId);\n\t\t\tportletDataContext.setScopeType(scopeType);\n\t\t\tportletDataContext.setScopeLayoutUuid(scopeLayoutUuid);\n\n\t\t\tboolean[] exportPortletControls = getExportPortletControls(\n\t\t\t\tcompanyId, portletId, parameterMap, type);\n\n\t\t\t_portletExporter.exportPortlet(\n\t\t\t\tportletDataContext, layoutCache, portletId, layout,\n\t\t\t\tportletsElement, defaultUserId, exportPermissions,\n\t\t\t\texportPortletArchivedSetups, exportPortletControls[0],\n\t\t\t\texportPortletControls[1], exportPortletUserPreferences);\n\t\t}\n\n\t\tportletDataContext.setScopeGroupId(previousScopeGroupId);\n\n\t\texportAssetCategories(\n\t\t\tportletDataContext, exportPortletDataAll, exportCategories,\n\t\t\tgroup.isCompany());\n\n\t\t_portletExporter.exportAssetLinks(portletDataContext);\n\t\t_portletExporter.exportAssetTags(portletDataContext);\n\t\t_portletExporter.exportComments(portletDataContext);\n\t\t_portletExporter.exportExpandoTables(portletDataContext);\n\t\t_portletExporter.exportLocks(portletDataContext);\n\n\t\t_deletionSystemEventExporter.export(portletDataContext);\n\n\t\tif (exportPermissions) {\n\t\t\t_permissionExporter.exportPortletDataPermissions(\n\t\t\t\tportletDataContext);\n\t\t}\n\n\t\t_portletExporter.exportRatingsEntries(portletDataContext, rootElement);\n\n\t\tif (exportTheme && !portletDataContext.isPerformDirectBinaryImport()) {\n\t\t\texportTheme(layoutSet, zipWriter);\n\t\t}\n\n\t\tExportImportHelperUtil.writeManifestSummary(\n\t\t\tdocument, portletDataContext.getManifestSummary());\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tif (stopWatch != null) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Exporting layouts takes \" + stopWatch.getTime() + \" ms\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_log.info(\"Exporting layouts is finished\");\n\t\t\t}\n\t\t}\n\n\t\tportletDataContext.addZipEntry(\n\t\t\t\"/manifest.xml\", document.formattedString());\n\n\t\ttry {\n\t\t\treturn zipWriter.getFile();\n\t\t}\n\t\tfinally {\n\t\t\tif (updateLastPublishDate) {\n\t\t\t\tupdateLastPublishDate(layoutSet, lastPublishDate);\n\t\t\t}\n\t\t}\n\t}","id":18787,"modified_method":"protected File doExportLayoutsAsFile(\n\t\t\tlong groupId, boolean privateLayout, long[] layoutIds,\n\t\t\tMap<String, String[]> parameterMap, Date startDate, Date endDate)\n\t\tthrows Exception {\n\n\t\tboolean exportCategories = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.CATEGORIES);\n\t\tboolean exportIgnoreLastPublishDate = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.IGNORE_LAST_PUBLISH_DATE);\n\t\tboolean exportPermissions = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PERMISSIONS);\n\t\tboolean exportPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\t\tboolean exportTheme = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.THEME);\n\t\tboolean exportThemeSettings = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.THEME_REFERENCE);\n\t\tboolean exportLogo = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.LOGO);\n\t\tboolean exportLayoutSetSettings = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.LAYOUT_SET_SETTINGS);\n\t\tboolean updateLastPublishDate = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Export permissions \" + exportPermissions);\n\t\t\t_log.debug(\"Export theme \" + exportTheme);\n\t\t}\n\n\t\tLayoutSet layoutSet = LayoutSetLocalServiceUtil.getLayoutSet(\n\t\t\tgroupId, privateLayout);\n\n\t\tlong companyId = layoutSet.getCompanyId();\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(companyId);\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (serviceContext == null) {\n\t\t\tserviceContext = new ServiceContext();\n\n\t\t\tserviceContext.setCompanyId(companyId);\n\t\t\tserviceContext.setSignedIn(false);\n\t\t\tserviceContext.setUserId(defaultUserId);\n\n\t\t\tServiceContextThreadLocal.pushServiceContext(serviceContext);\n\t\t}\n\n\t\tserviceContext.setAttribute(\"exporting\", Boolean.TRUE);\n\n\t\tlong layoutSetBranchId = MapUtil.getLong(\n\t\t\tparameterMap, \"layoutSetBranchId\");\n\n\t\tserviceContext.setAttribute(\"layoutSetBranchId\", layoutSetBranchId);\n\n\t\tlong lastPublishDate = System.currentTimeMillis();\n\n\t\tif (endDate != null) {\n\t\t\tlastPublishDate = endDate.getTime();\n\t\t}\n\n\t\tif (exportIgnoreLastPublishDate) {\n\t\t\tendDate = null;\n\t\t\tstartDate = null;\n\t\t}\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\t\t}\n\n\t\tLayoutCache layoutCache = new LayoutCache();\n\n\t\tZipWriter zipWriter = ZipWriterFactoryUtil.getZipWriter();\n\n\t\tPortletDataContext portletDataContext =\n\t\t\tPortletDataContextFactoryUtil.createExportPortletDataContext(\n\t\t\t\tcompanyId, groupId, parameterMap, startDate, endDate,\n\t\t\t\tzipWriter);\n\n\t\tportletDataContext.setPortetDataContextListener(\n\t\t\tnew PortletDataContextListenerImpl(portletDataContext));\n\n\t\tDocument document = SAXReaderUtil.createDocument();\n\n\t\tElement rootElement = document.addElement(\"root\");\n\n\t\tportletDataContext.setExportDataRootElement(rootElement);\n\n\t\tElement headerElement = rootElement.addElement(\"header\");\n\n\t\theaderElement.addAttribute(\n\t\t\t\"available-locales\",\n\t\t\tStringUtil.merge(LanguageUtil.getAvailableLocales()));\n\t\theaderElement.addAttribute(\n\t\t\t\"build-number\", String.valueOf(ReleaseInfo.getBuildNumber()));\n\t\theaderElement.addAttribute(\"export-date\", Time.getRFC822());\n\n\t\tif (portletDataContext.hasDateRange()) {\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"start-date\",\n\t\t\t\tString.valueOf(portletDataContext.getStartDate()));\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"end-date\", String.valueOf(portletDataContext.getEndDate()));\n\t\t}\n\n\t\theaderElement.addAttribute(\n\t\t\t\"company-id\", String.valueOf(portletDataContext.getCompanyId()));\n\t\theaderElement.addAttribute(\n\t\t\t\"company-group-id\",\n\t\t\tString.valueOf(portletDataContext.getCompanyGroupId()));\n\t\theaderElement.addAttribute(\"group-id\", String.valueOf(groupId));\n\t\theaderElement.addAttribute(\n\t\t\t\"user-personal-site-group-id\",\n\t\t\tString.valueOf(portletDataContext.getUserPersonalSiteGroupId()));\n\t\theaderElement.addAttribute(\n\t\t\t\"private-layout\", String.valueOf(privateLayout));\n\n\t\tGroup group = layoutSet.getGroup();\n\n\t\tString type = \"layout-set\";\n\n\t\tif (group.isLayoutPrototype()) {\n\t\t\ttype = \"layout-prototype\";\n\n\t\t\tLayoutPrototype layoutPrototype =\n\t\t\t\tLayoutPrototypeLocalServiceUtil.getLayoutPrototype(\n\t\t\t\t\tgroup.getClassPK());\n\n\t\t\theaderElement.addAttribute(\"type-uuid\", layoutPrototype.getUuid());\n\t\t}\n\t\telse if (group.isLayoutSetPrototype()) {\n\t\t\ttype =\"layout-set-prototype\";\n\n\t\t\tLayoutSetPrototype layoutSetPrototype =\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototype(\n\t\t\t\t\tgroup.getClassPK());\n\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"type-uuid\", layoutSetPrototype.getUuid());\n\t\t}\n\n\t\theaderElement.addAttribute(\"type\", type);\n\n\t\tif (exportTheme || exportThemeSettings) {\n\t\t\theaderElement.addAttribute(\"theme-id\", layoutSet.getThemeId());\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"color-scheme-id\", layoutSet.getColorSchemeId());\n\t\t}\n\n\t\tif (exportLogo) {\n\t\t\tImage image = ImageLocalServiceUtil.getImage(layoutSet.getLogoId());\n\n\t\t\tif ((image != null) && (image.getTextObj() != null)) {\n\t\t\t\tString logoPath = ExportImportPathUtil.getRootPath(\n\t\t\t\t\tportletDataContext);\n\n\t\t\t\tlogoPath += \"/logo\";\n\n\t\t\t\theaderElement.addAttribute(\"logo-path\", logoPath);\n\n\t\t\t\tportletDataContext.addZipEntry(logoPath, image.getTextObj());\n\t\t\t}\n\t\t}\n\n\t\tif (exportLayoutSetSettings) {\n\t\t\tElement settingsElement = headerElement.addElement(\"settings\");\n\n\t\t\tsettingsElement.addCDATA(layoutSet.getSettings());\n\t\t}\n\n\t\tElement cssElement = headerElement.addElement(\"css\");\n\n\t\tcssElement.addCDATA(layoutSet.getCss());\n\n\t\tMap<String, Object[]> portletIds =\n\t\t\tnew LinkedHashMap<String, Object[]>();\n\n\t\tList<Layout> layouts = null;\n\n\t\tif ((layoutIds == null) || (layoutIds.length == 0)) {\n\t\t\tlayouts = LayoutLocalServiceUtil.getLayouts(groupId, privateLayout);\n\t\t}\n\t\telse {\n\t\t\tlayouts = LayoutLocalServiceUtil.getLayouts(\n\t\t\t\tgroupId, privateLayout, layoutIds);\n\t\t}\n\n\t\tList<Portlet> portlets = getDataSiteLevelPortlets(companyId);\n\n\t\tlong plid = LayoutConstants.DEFAULT_PLID;\n\n\t\tif (!layouts.isEmpty()) {\n\t\t\tLayout firstLayout = layouts.get(0);\n\n\t\t\tplid = firstLayout.getPlid();\n\t\t}\n\n\t\tif (group.isStagingGroup()) {\n\t\t\tgroup = group.getLiveGroup();\n\t\t}\n\n\t\tfor (Portlet portlet : portlets) {\n\t\t\tString portletId = portlet.getRootPortletId();\n\n\t\t\tif (!group.isStagedPortlet(portletId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString key = PortletPermissionUtil.getPrimaryKey(0, portletId);\n\n\t\t\tif (portletIds.get(key) == null) {\n\t\t\t\tportletIds.put(\n\t\t\t\t\tkey,\n\t\t\t\t\tnew Object[] {\n\t\t\t\t\t\tportletId, plid, groupId, StringPool.BLANK,\n\t\t\t\t\t\tStringPool.BLANK\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tElement missingReferencesElement = rootElement.addElement(\n\t\t\t\"missing-references\");\n\n\t\tportletDataContext.setMissingReferencesElement(\n\t\t\tmissingReferencesElement);\n\n\t\tElement layoutsElement = portletDataContext.getExportDataGroupElement(\n\t\t\tLayout.class);\n\n\t\tString layoutSetPrototypeUuid = layoutSet.getLayoutSetPrototypeUuid();\n\n\t\tif (Validator.isNotNull(layoutSetPrototypeUuid)) {\n\t\t\tLayoutSetPrototype layoutSetPrototype =\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.\n\t\t\t\t\tgetLayoutSetPrototypeByUuidAndCompanyId(\n\t\t\t\t\t\tlayoutSetPrototypeUuid, companyId);\n\n\t\t\tlayoutsElement.addAttribute(\n\t\t\t\t\"layout-set-prototype-uuid\", layoutSetPrototypeUuid);\n\n\t\t\tlayoutsElement.addAttribute(\n\t\t\t\t\"layout-set-prototype-name\",\n\t\t\t\tlayoutSetPrototype.getName(LocaleUtil.getDefault()));\n\t\t}\n\n\t\tfor (Layout layout : layouts) {\n\t\t\texportLayout(\n\t\t\t\tportletDataContext, portlets, portletIds, layout,\n\t\t\t\tlayoutsElement);\n\t\t}\n\n\t\tlong previousScopeGroupId = portletDataContext.getScopeGroupId();\n\n\t\tElement portletsElement = rootElement.addElement(\"portlets\");\n\n\t\tfor (Map.Entry<String, Object[]> portletIdsEntry :\n\t\t\t\tportletIds.entrySet()) {\n\n\t\t\tObject[] portletObjects = portletIdsEntry.getValue();\n\n\t\t\tString portletId = null;\n\t\t\tplid = LayoutConstants.DEFAULT_PLID;\n\t\t\tlong scopeGroupId = 0;\n\t\t\tString scopeType = StringPool.BLANK;\n\t\t\tString scopeLayoutUuid = null;\n\n\t\t\tif (portletObjects.length == 4) {\n\t\t\t\tportletId = (String)portletIdsEntry.getValue()[0];\n\t\t\t\tplid = (Long)portletIdsEntry.getValue()[1];\n\t\t\t\tscopeGroupId = (Long)portletIdsEntry.getValue()[2];\n\t\t\t\tscopeLayoutUuid = (String)portletIdsEntry.getValue()[3];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportletId = (String)portletIdsEntry.getValue()[0];\n\t\t\t\tplid = (Long)portletIdsEntry.getValue()[1];\n\t\t\t\tscopeGroupId = (Long)portletIdsEntry.getValue()[2];\n\t\t\t\tscopeType = (String)portletIdsEntry.getValue()[3];\n\t\t\t\tscopeLayoutUuid = (String)portletIdsEntry.getValue()[4];\n\t\t\t}\n\n\t\t\tLayout layout = LayoutLocalServiceUtil.fetchLayout(plid);\n\n\t\t\tif (layout == null) {\n\t\t\t\tif (!group.isCompany() &&\n\t\t\t\t\t(plid <= LayoutConstants.DEFAULT_PLID)) {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\"Assuming global scope because no layout was found\");\n\t\t\t\t}\n\n\t\t\t\tlayout = new LayoutImpl();\n\n\t\t\t\tlayout.setGroupId(groupId);\n\t\t\t\tlayout.setCompanyId(companyId);\n\t\t\t}\n\n\t\t\tportletDataContext.setPlid(plid);\n\t\t\tportletDataContext.setOldPlid(plid);\n\t\t\tportletDataContext.setScopeGroupId(scopeGroupId);\n\t\t\tportletDataContext.setScopeType(scopeType);\n\t\t\tportletDataContext.setScopeLayoutUuid(scopeLayoutUuid);\n\n\t\t\tboolean[] exportPortletControls = getExportPortletControls(\n\t\t\t\tcompanyId, portletId, parameterMap, type);\n\n\t\t\t_portletExporter.exportPortlet(\n\t\t\t\tportletDataContext, layoutCache, portletId, layout,\n\t\t\t\tportletsElement, defaultUserId, exportPermissions,\n\t\t\t\texportPortletControls[0], exportPortletControls[1],\n\t\t\t\texportPortletControls[2], exportPortletControls[3]);\n\t\t}\n\n\t\tportletDataContext.setScopeGroupId(previousScopeGroupId);\n\n\t\texportAssetCategories(\n\t\t\tportletDataContext, exportPortletDataAll, exportCategories,\n\t\t\tgroup.isCompany());\n\n\t\t_portletExporter.exportAssetLinks(portletDataContext);\n\t\t_portletExporter.exportAssetTags(portletDataContext);\n\t\t_portletExporter.exportComments(portletDataContext);\n\t\t_portletExporter.exportExpandoTables(portletDataContext);\n\t\t_portletExporter.exportLocks(portletDataContext);\n\n\t\t_deletionSystemEventExporter.export(portletDataContext);\n\n\t\tif (exportPermissions) {\n\t\t\t_permissionExporter.exportPortletDataPermissions(\n\t\t\t\tportletDataContext);\n\t\t}\n\n\t\t_portletExporter.exportRatingsEntries(portletDataContext, rootElement);\n\n\t\tif (exportTheme && !portletDataContext.isPerformDirectBinaryImport()) {\n\t\t\texportTheme(layoutSet, zipWriter);\n\t\t}\n\n\t\tExportImportHelperUtil.writeManifestSummary(\n\t\t\tdocument, portletDataContext.getManifestSummary());\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tif (stopWatch != null) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Exporting layouts takes \" + stopWatch.getTime() + \" ms\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_log.info(\"Exporting layouts is finished\");\n\t\t\t}\n\t\t}\n\n\t\tportletDataContext.addZipEntry(\n\t\t\t\"/manifest.xml\", document.formattedString());\n\n\t\ttry {\n\t\t\treturn zipWriter.getFile();\n\t\t}\n\t\tfinally {\n\t\t\tif (updateLastPublishDate) {\n\t\t\t\tupdateLastPublishDate(layoutSet, lastPublishDate);\n\t\t\t}\n\t\t}\n\t}","commit_id":"32dad9c8b6c7030939b3e005afb1ff01a26aa8c3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected boolean[] getExportPortletControls(\n\t\t\tlong companyId, String portletId,\n\t\t\tMap<String, String[]> parameterMap, String type)\n\t\tthrows Exception {\n\n\t\tboolean exportPortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA);\n\t\tboolean exportPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\t\tboolean exportPortletSetup = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP);\n\t\tboolean exportPortletSetupAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP_ALL);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Export portlet data \" + exportPortletData);\n\t\t\t_log.debug(\"Export all portlet data \" + exportPortletDataAll);\n\t\t\t_log.debug(\"Export portlet setup \" + exportPortletSetup);\n\t\t}\n\n\t\tboolean exportCurPortletData = exportPortletData;\n\t\tboolean exportCurPortletSetup = exportPortletSetup;\n\n\t\tString rootPortletId =\n\t\t\tExportImportHelperUtil.getExportableRootPortletId(\n\t\t\t\tcompanyId, portletId);\n\n\t\tif (exportPortletDataAll) {\n\t\t\texportCurPortletData = true;\n\t\t}\n\t\telse if (rootPortletId != null) {\n\n\t\t\t// PORTLET_DATA and the PORTLET_DATA for this specific data handler\n\t\t\t// must be true\n\n\t\t\texportCurPortletData =\n\t\t\t\texportPortletData &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\tif (exportPortletSetupAll ||\n\t\t\t(exportPortletSetup && type.equals(\"layout-prototype\"))) {\n\n\t\t\texportCurPortletSetup = true;\n\t\t}\n\t\telse if (rootPortletId != null) {\n\n\t\t\t// PORTLET_SETUP and the PORTLET_SETUP for this specific data\n\t\t\t// handler must be true\n\n\t\t\texportCurPortletSetup =\n\t\t\t\texportPortletSetup &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\treturn new boolean[] {exportCurPortletData, exportCurPortletSetup};\n\t}","id":18788,"modified_method":"protected boolean[] getExportPortletControls(\n\t\t\tlong companyId, String portletId,\n\t\t\tMap<String, String[]> parameterMap, String type)\n\t\tthrows Exception {\n\n\t\tboolean exportPortletConfiguration = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_CONFIGURATION);\n\t\tboolean exportPortletConfigurationAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL);\n\t\tboolean exportPortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA);\n\t\tboolean exportPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Export portlet data \" + exportPortletData);\n\t\t\t_log.debug(\"Export all portlet data \" + exportPortletDataAll);\n\t\t\t_log.debug(\n\t\t\t\t\"Export portlet configuration \" + exportPortletConfiguration);\n\t\t}\n\n\t\tboolean exportCurPortletData = exportPortletData;\n\n\t\tString rootPortletId =\n\t\t\tExportImportHelperUtil.getExportableRootPortletId(\n\t\t\t\tcompanyId, portletId);\n\n\t\tif (exportPortletDataAll) {\n\t\t\texportCurPortletData = true;\n\t\t}\n\t\telse if (rootPortletId != null) {\n\n\t\t\t// PORTLET_DATA and the PORTLET_DATA for this specific data handler\n\t\t\t// must be true\n\n\t\t\texportCurPortletData =\n\t\t\t\texportPortletData &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\tboolean exportCurPortletArchivedSetups = exportPortletConfiguration;\n\t\tboolean exportCurPortletSetup = exportPortletConfiguration;\n\t\tboolean exportCurPortletUserPreferences = exportPortletConfiguration;\n\n\t\tif (exportPortletConfigurationAll ||\n\t\t\t(exportPortletConfiguration && type.equals(\"layout-prototype\"))) {\n\n\t\t\texportCurPortletArchivedSetups =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS_ALL);\n\t\t\texportCurPortletSetup =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP_ALL);\n\t\t\texportCurPortletUserPreferences =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_USER_PREFERENCES_ALL);\n\t\t}\n\t\telse if (rootPortletId != null) {\n\t\t\tboolean exportCurPortletConfiguration =\n\t\t\t\texportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_CONFIGURATION +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\texportCurPortletArchivedSetups =\n\t\t\t\texportCurPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\texportCurPortletSetup =\n\t\t\t\texportCurPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\texportCurPortletUserPreferences =\n\t\t\t\texportCurPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_USER_PREFERENCES +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\treturn new boolean[] {\n\t\t\texportCurPortletArchivedSetups, exportCurPortletData,\n\t\t\texportCurPortletSetup, exportCurPortletUserPreferences};\n\t}","commit_id":"32dad9c8b6c7030939b3e005afb1ff01a26aa8c3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected boolean[] getImportPortletControls(\n\t\t\tlong companyId, String portletId,\n\t\t\tMap<String, String[]> parameterMap, Element portletDataElement)\n\t\tthrows Exception {\n\n\t\tboolean importPortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA);\n\t\tboolean importPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\t\tboolean importPortletSetup = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP);\n\t\tboolean importPortletSetupAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP_ALL);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Import portlet data \" + importPortletData);\n\t\t\t_log.debug(\"Import all portlet data \" + importPortletDataAll);\n\t\t\t_log.debug(\"Import portlet setup \" + importPortletSetup);\n\t\t}\n\n\t\tboolean importCurPortletData = importPortletData;\n\t\tboolean importCurPortletSetup = importPortletSetup;\n\n\t\tString rootPortletId =\n\t\t\tExportImportHelperUtil.getExportableRootPortletId(\n\t\t\t\tcompanyId, portletId);\n\n\t\tif (portletDataElement == null) {\n\t\t\timportCurPortletData = false;\n\t\t}\n\t\telse if (importPortletDataAll) {\n\t\t\timportCurPortletData = true;\n\t\t}\n\t\telse if (rootPortletId != null) {\n\t\t\timportCurPortletData =\n\t\t\t\timportPortletData &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\tif (importPortletSetupAll) {\n\t\t\timportCurPortletSetup = true;\n\t\t}\n\t\telse if (rootPortletId != null) {\n\t\t\timportCurPortletSetup =\n\t\t\t\timportPortletSetup &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\treturn new boolean[] {importCurPortletData, importCurPortletSetup};\n\t}","id":18789,"modified_method":"protected boolean[] getImportPortletControls(\n\t\t\tlong companyId, String portletId,\n\t\t\tMap<String, String[]> parameterMap, Element portletDataElement)\n\t\tthrows Exception {\n\n\t\tboolean importPortletConfiguration = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_CONFIGURATION);\n\t\tboolean importPortletConfigurationAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL);\n\t\tboolean importPortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA);\n\t\tboolean importPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Import portlet data \" + importPortletData);\n\t\t\t_log.debug(\"Import all portlet data \" + importPortletDataAll);\n\t\t\t_log.debug(\n\t\t\t\t\"Import portlet configuration \" + importPortletConfiguration);\n\t\t}\n\n\t\tboolean importCurPortletData = importPortletData;\n\n\t\tString rootPortletId =\n\t\t\tExportImportHelperUtil.getExportableRootPortletId(\n\t\t\t\tcompanyId, portletId);\n\n\t\tif (portletDataElement == null) {\n\t\t\timportCurPortletData = false;\n\t\t}\n\t\telse if (importPortletDataAll) {\n\t\t\timportCurPortletData = true;\n\t\t}\n\t\telse if (rootPortletId != null) {\n\t\t\timportCurPortletData =\n\t\t\t\timportPortletData &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\tboolean importCurPortletArchivedSetups = importPortletConfiguration;\n\t\tboolean importCurPortletSetup = importPortletConfiguration;\n\t\tboolean importCurPortletUserPreferences = importPortletConfiguration;\n\n\t\tif (importPortletConfigurationAll) {\n\t\t\timportCurPortletArchivedSetups =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS_ALL);\n\t\t\timportCurPortletSetup =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP_ALL);\n\t\t\timportCurPortletUserPreferences =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_USER_PREFERENCES_ALL);\n\t\t}\n\t\telse if (rootPortletId != null) {\n\t\t\tboolean importCurPortletConfiguration =\n\t\t\t\timportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_CONFIGURATION +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\timportCurPortletArchivedSetups =\n\t\t\t\timportCurPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\timportCurPortletSetup =\n\t\t\t\timportCurPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\timportCurPortletUserPreferences =\n\t\t\t\timportCurPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_USER_PREFERENCES +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\treturn new boolean[] {\n\t\t\timportCurPortletArchivedSetups, importCurPortletData,\n\t\t\timportCurPortletSetup, importCurPortletUserPreferences};\n\t}","commit_id":"32dad9c8b6c7030939b3e005afb1ff01a26aa8c3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void doImportLayouts(\n\t\t\tlong userId, long groupId, boolean privateLayout,\n\t\t\tMap<String, String[]> parameterMap, File file)\n\t\tthrows Exception {\n\n\t\tboolean deleteMissingLayouts = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.DELETE_MISSING_LAYOUTS,\n\t\t\tBoolean.TRUE.booleanValue());\n\t\tboolean deletePortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.DELETE_PORTLET_DATA);\n\t\tboolean importCategories = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.CATEGORIES);\n\t\tboolean importPermissions = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PERMISSIONS);\n\t\tboolean importPortletArchivedSetups = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);\n\t\tboolean importPortletUserPreferences = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);\n\t\tboolean importTheme = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.THEME);\n\t\tboolean importThemeSettings = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.THEME_REFERENCE);\n\t\tboolean importLogo = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.LOGO);\n\t\tboolean importLayoutSetSettings = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.LAYOUT_SET_SETTINGS);\n\n\t\tboolean layoutSetPrototypeLinkEnabled = MapUtil.getBoolean(\n\t\t\tparameterMap,\n\t\t\tPortletDataHandlerKeys.LAYOUT_SET_PROTOTYPE_LINK_ENABLED, true);\n\n\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\tif (group.isLayoutSetPrototype()) {\n\t\t\tlayoutSetPrototypeLinkEnabled = false;\n\t\t}\n\n\t\tString layoutsImportMode = MapUtil.getString(\n\t\t\tparameterMap, PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE,\n\t\t\tPortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_MERGE_BY_LAYOUT_UUID);\n\t\tString userIdStrategy = MapUtil.getString(\n\t\t\tparameterMap, PortletDataHandlerKeys.USER_ID_STRATEGY);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Delete portlet data \" + deletePortletData);\n\t\t\t_log.debug(\"Import categories \" + importCategories);\n\t\t\t_log.debug(\"Import permissions \" + importPermissions);\n\t\t\t_log.debug(\n\t\t\t\t\"Import portlet archived setups \" +\n\t\t\t\t\timportPortletArchivedSetups);\n\t\t\t_log.debug(\n\t\t\t\t\"Import portlet user preferences \" +\n\t\t\t\t\timportPortletUserPreferences);\n\t\t\t_log.debug(\"Import theme \" + importTheme);\n\t\t}\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\t\t}\n\n\t\tLayoutCache layoutCache = new LayoutCache();\n\n\t\tLayoutSet layoutSet = LayoutSetLocalServiceUtil.getLayoutSet(\n\t\t\tgroupId, privateLayout);\n\n\t\tlong companyId = layoutSet.getCompanyId();\n\n\t\tUser user = UserUtil.findByPrimaryKey(userId);\n\n\t\tUserIdStrategy strategy = _portletImporter.getUserIdStrategy(\n\t\t\tuser, userIdStrategy);\n\n\t\tZipReader zipReader = ZipReaderFactoryUtil.getZipReader(file);\n\n\t\tPortletDataContext portletDataContext =\n\t\t\tPortletDataContextFactoryUtil.createImportPortletDataContext(\n\t\t\t\tcompanyId, groupId, parameterMap, strategy, zipReader);\n\n\t\tportletDataContext.setPortetDataContextListener(\n\t\t\tnew PortletDataContextListenerImpl(portletDataContext));\n\n\t\tportletDataContext.setPrivateLayout(privateLayout);\n\n\t\t// Zip\n\n\t\tInputStream themeZip = null;\n\n\t\tvalidateFile(portletDataContext);\n\n\t\t// Company id\n\n\t\tlong sourceCompanyId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"company-id\"));\n\n\t\tportletDataContext.setSourceCompanyId(sourceCompanyId);\n\n\t\t// Company group id\n\n\t\tlong sourceCompanyGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"company-group-id\"));\n\n\t\tportletDataContext.setSourceCompanyGroupId(sourceCompanyGroupId);\n\n\t\t// Group id\n\n\t\tlong sourceGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"group-id\"));\n\n\t\tportletDataContext.setSourceGroupId(sourceGroupId);\n\n\t\t// User personal site group id\n\n\t\tlong sourceUserPersonalSiteGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"user-personal-site-group-id\"));\n\n\t\tportletDataContext.setSourceUserPersonalSiteGroupId(\n\t\t\tsourceUserPersonalSiteGroupId);\n\n\t\t// Layout and layout set prototype\n\n\t\tString layoutSetPrototypeUuid = _layoutsElement.attributeValue(\n\t\t\t\"layout-set-prototype-uuid\");\n\n\t\tString larType = _headerElement.attributeValue(\"type\");\n\n\t\tif (group.isLayoutPrototype() && larType.equals(\"layout-prototype\")) {\n\t\t\tdeleteMissingLayouts = false;\n\n\t\t\tLayoutPrototype layoutPrototype =\n\t\t\t\tLayoutPrototypeLocalServiceUtil.getLayoutPrototype(\n\t\t\t\t\tgroup.getClassPK());\n\n\t\t\tString layoutPrototypeUuid = GetterUtil.getString(\n\t\t\t\t_headerElement.attributeValue(\"type-uuid\"));\n\n\t\t\tLayoutPrototype existingLayoutPrototype = null;\n\n\t\t\tif (Validator.isNotNull(layoutPrototypeUuid)) {\n\t\t\t\ttry {\n\t\t\t\t\texistingLayoutPrototype =\n\t\t\t\t\t\tLayoutPrototypeLocalServiceUtil.\n\t\t\t\t\t\t\tgetLayoutPrototypeByUuidAndCompanyId(\n\t\t\t\t\t\t\t\tlayoutPrototypeUuid, companyId);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchLayoutPrototypeException nslpe) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (existingLayoutPrototype == null) {\n\t\t\t\tList<Layout> layouts =\n\t\t\t\t\tLayoutLocalServiceUtil.getLayoutsByLayoutPrototypeUuid(\n\t\t\t\t\t\tlayoutPrototype.getUuid());\n\n\t\t\t\tlayoutPrototype.setUuid(layoutPrototypeUuid);\n\n\t\t\t\tLayoutPrototypeLocalServiceUtil.updateLayoutPrototype(\n\t\t\t\t\tlayoutPrototype);\n\n\t\t\t\tfor (Layout layout : layouts) {\n\t\t\t\t\tlayout.setLayoutPrototypeUuid(layoutPrototypeUuid);\n\n\t\t\t\t\tLayoutLocalServiceUtil.updateLayout(layout);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (group.isLayoutSetPrototype() &&\n\t\t\t\t larType.equals(\"layout-set-prototype\")) {\n\n\t\t\tLayoutSetPrototype layoutSetPrototype =\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototype(\n\t\t\t\t\tgroup.getClassPK());\n\n\t\t\tString importedLayoutSetPrototypeUuid = GetterUtil.getString(\n\t\t\t\t_headerElement.attributeValue(\"type-uuid\"));\n\n\t\t\tLayoutSetPrototype existingLayoutSetPrototype = null;\n\n\t\t\tif (Validator.isNotNull(importedLayoutSetPrototypeUuid)) {\n\t\t\t\ttry {\n\t\t\t\t\texistingLayoutSetPrototype =\n\t\t\t\t\t\tLayoutSetPrototypeLocalServiceUtil.\n\t\t\t\t\t\t\tgetLayoutSetPrototypeByUuidAndCompanyId(\n\t\t\t\t\t\t\t\timportedLayoutSetPrototypeUuid, companyId);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchLayoutSetPrototypeException nslspe) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (existingLayoutSetPrototype == null) {\n\t\t\t\tlayoutSetPrototype.setUuid(importedLayoutSetPrototypeUuid);\n\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.updateLayoutSetPrototype(\n\t\t\t\t\tlayoutSetPrototype);\n\t\t\t}\n\t\t}\n\t\telse if (larType.equals(\"layout-set-prototype\")) {\n\t\t\tlayoutSetPrototypeUuid = GetterUtil.getString(\n\t\t\t\t_headerElement.attributeValue(\"type-uuid\"));\n\t\t}\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (Validator.isNotNull(layoutSetPrototypeUuid)) {\n\t\t\tlayoutSet.setLayoutSetPrototypeUuid(layoutSetPrototypeUuid);\n\t\t\tlayoutSet.setLayoutSetPrototypeLinkEnabled(\n\t\t\t\tlayoutSetPrototypeLinkEnabled);\n\n\t\t\tLayoutSetLocalServiceUtil.updateLayoutSet(layoutSet);\n\t\t}\n\n\t\t// Look and feel\n\n\t\tif (importTheme) {\n\t\t\tthemeZip = portletDataContext.getZipEntryAsInputStream(\"theme.zip\");\n\t\t}\n\n\t\t// Look and feel\n\n\t\tString themeId = layoutSet.getThemeId();\n\t\tString colorSchemeId = layoutSet.getColorSchemeId();\n\n\t\tif (importThemeSettings) {\n\t\t\tAttribute themeIdAttribute = _headerElement.attribute(\"theme-id\");\n\n\t\t\tif (themeIdAttribute != null) {\n\t\t\t\tthemeId = themeIdAttribute.getValue();\n\t\t\t}\n\n\t\t\tAttribute colorSchemeIdAttribute = _headerElement.attribute(\n\t\t\t\t\"color-scheme-id\");\n\n\t\t\tif (colorSchemeIdAttribute != null) {\n\t\t\t\tcolorSchemeId = colorSchemeIdAttribute.getValue();\n\t\t\t}\n\t\t}\n\n\t\tif (importLogo) {\n\t\t\tString logoPath = _headerElement.attributeValue(\"logo-path\");\n\n\t\t\tbyte[] iconBytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\tlogoPath);\n\n\t\t\tif ((iconBytes != null) && (iconBytes.length > 0)) {\n\t\t\t\tFile logo = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tlogo = FileUtil.createTempFile(iconBytes);\n\n\t\t\t\t\tLayoutSetLocalServiceUtil.updateLogo(\n\t\t\t\t\t\tgroupId, privateLayout, true, logo);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tFileUtil.delete(logo);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLayoutSetLocalServiceUtil.updateLogo(\n\t\t\t\t\tgroupId, privateLayout, false, (File)null);\n\t\t\t}\n\t\t}\n\n\t\tif (importLayoutSetSettings) {\n\t\t\tString settings = GetterUtil.getString(\n\t\t\t\t_headerElement.elementText(\"settings\"));\n\n\t\t\tLayoutSetLocalServiceUtil.updateSettings(\n\t\t\t\tgroupId, privateLayout, settings);\n\t\t}\n\n\t\tString css = GetterUtil.getString(_headerElement.elementText(\"css\"));\n\n\t\tif (themeZip != null) {\n\t\t\tString importThemeId = importTheme(layoutSet, themeZip);\n\n\t\t\tif (importThemeId != null) {\n\t\t\t\tthemeId = importThemeId;\n\t\t\t\tcolorSchemeId =\n\t\t\t\t\tColorSchemeFactoryUtil.getDefaultRegularColorSchemeId();\n\t\t\t}\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Importing theme takes \" + stopWatch.getTime() + \" ms\");\n\t\t\t}\n\t\t}\n\n\t\tboolean wapTheme = false;\n\n\t\tLayoutSetLocalServiceUtil.updateLookAndFeel(\n\t\t\tgroupId, privateLayout, themeId, colorSchemeId, css, wapTheme);\n\n\t\t// Read asset categories, asset tags, comments, locks, permissions, and\n\t\t// ratings entries to make them available to the data handlers through\n\t\t// the context\n\n\t\tif (importPermissions) {\n\t\t\t_permissionImporter.readPortletDataPermissions(portletDataContext);\n\t\t}\n\n\t\t_portletImporter.readAssetCategories(portletDataContext);\n\t\t_portletImporter.readAssetTags(portletDataContext);\n\t\t_portletImporter.readComments(portletDataContext);\n\t\t_portletImporter.readExpandoTables(portletDataContext);\n\t\t_portletImporter.readLocks(portletDataContext);\n\t\t_portletImporter.readRatingsEntries(portletDataContext);\n\n\t\t// Layouts\n\n\t\tList<Layout> previousLayouts = LayoutUtil.findByG_P(\n\t\t\tgroupId, privateLayout);\n\n\t\t// Remove layouts that were deleted from the layout set prototype\n\n\t\tif (Validator.isNotNull(layoutSetPrototypeUuid) &&\n\t\t\tlayoutSetPrototypeLinkEnabled) {\n\n\t\t\tLayoutSetPrototype layoutSetPrototype =\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.\n\t\t\t\t\tgetLayoutSetPrototypeByUuidAndCompanyId(\n\t\t\t\t\t\tlayoutSetPrototypeUuid, companyId);\n\n\t\t\tfor (Layout layout : previousLayouts) {\n\t\t\t\tString sourcePrototypeLayoutUuid =\n\t\t\t\t\tlayout.getSourcePrototypeLayoutUuid();\n\n\t\t\t\tif (Validator.isNull(layout.getSourcePrototypeLayoutUuid())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tLayout sourcePrototypeLayout = LayoutUtil.fetchByUUID_G_P(\n\t\t\t\t\tsourcePrototypeLayoutUuid, layoutSetPrototype.getGroupId(),\n\t\t\t\t\ttrue);\n\n\t\t\t\tif (sourcePrototypeLayout == null) {\n\t\t\t\t\tLayoutLocalServiceUtil.deleteLayout(\n\t\t\t\t\t\tlayout, false, serviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<Layout> newLayouts = new ArrayList<Layout>();\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\tif (_layoutElements.size() > 0) {\n\t\t\t\t_log.debug(\"Importing layouts\");\n\t\t\t}\n\t\t}\n\n\t\tfor (Element layoutElement : _layoutElements) {\n\t\t\timportLayout(portletDataContext, newLayouts, layoutElement);\n\t\t}\n\n\t\tElement portletsElement = _rootElement.element(\"portlets\");\n\n\t\tList<Element> portletElements = portletsElement.elements(\"portlet\");\n\n\t\t// Delete portlet data\n\n\t\tMap<Long, Layout> newLayoutsMap =\n\t\t\t(Map<Long, Layout>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tLayout.class + \".layout\");\n\n\t\tif (deletePortletData) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\tif (portletElements.size() > 0) {\n\t\t\t\t\t_log.debug(\"Deleting portlet data\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (Element portletElement : portletElements) {\n\t\t\t\tString portletId = portletElement.attributeValue(\"portlet-id\");\n\t\t\t\tlong layoutId = GetterUtil.getLong(\n\t\t\t\t\tportletElement.attributeValue(\"layout-id\"));\n\n\t\t\t\tLayout layout = newLayoutsMap.get(layoutId);\n\n\t\t\t\tlong plid = layout.getPlid();\n\n\t\t\t\tportletDataContext.setPlid(plid);\n\n\t\t\t\t_portletImporter.deletePortletData(\n\t\t\t\t\tportletDataContext, portletId, plid);\n\t\t\t}\n\t\t}\n\n\t\t// Import portlets\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\tif (portletElements.size() > 0) {\n\t\t\t\t_log.debug(\"Importing portlets\");\n\t\t\t}\n\t\t}\n\n\t\tfor (Element portletElement : portletElements) {\n\t\t\tString portletPath = portletElement.attributeValue(\"path\");\n\t\t\tString portletId = portletElement.attributeValue(\"portlet-id\");\n\t\t\tlong layoutId = GetterUtil.getLong(\n\t\t\t\tportletElement.attributeValue(\"layout-id\"));\n\t\t\tlong oldPlid = GetterUtil.getLong(\n\t\t\t\tportletElement.attributeValue(\"old-plid\"));\n\n\t\t\tPortlet portlet = PortletLocalServiceUtil.getPortletById(\n\t\t\t\tportletDataContext.getCompanyId(), portletId);\n\n\t\t\tif (!portlet.isActive() || portlet.isUndeployedPortlet()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tLayout layout = newLayoutsMap.get(layoutId);\n\n\t\t\tlong plid = LayoutConstants.DEFAULT_PLID;\n\n\t\t\tif (layout != null) {\n\t\t\t\tplid = layout.getPlid();\n\t\t\t}\n\n\t\t\tlayout = LayoutUtil.fetchByPrimaryKey(plid);\n\n\t\t\tif ((layout == null) && !group.isCompany()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tportletDataContext.setPlid(plid);\n\t\t\tportletDataContext.setOldPlid(oldPlid);\n\n\t\t\tDocument portletDocument = SAXReaderUtil.read(\n\t\t\t\tportletDataContext.getZipEntryAsString(portletPath));\n\n\t\t\tportletElement = portletDocument.getRootElement();\n\n\t\t\t// The order of the import is important. You must always import the\n\t\t\t// portlet preferences first, then the portlet data, then the\n\t\t\t// portlet permissions. The import of the portlet data assumes that\n\t\t\t// portlet preferences already exist.\n\n\t\t\t_portletImporter.setPortletScope(\n\t\t\t\tportletDataContext, portletElement);\n\n\t\t\tlong portletPreferencesGroupId = groupId;\n\n\t\t\tElement portletDataElement = portletElement.element(\"portlet-data\");\n\n\t\t\tboolean[] importPortletControls = getImportPortletControls(\n\t\t\t\tcompanyId, portletId, parameterMap, portletDataElement);\n\n\t\t\ttry {\n\t\t\t\tif ((layout != null) && !group.isCompany()) {\n\t\t\t\t\tportletPreferencesGroupId = layout.getGroupId();\n\t\t\t\t}\n\n\t\t\t\t// Portlet preferences\n\n\t\t\t\t_portletImporter.importPortletPreferences(\n\t\t\t\t\tportletDataContext, layoutSet.getCompanyId(),\n\t\t\t\t\tportletPreferencesGroupId, layout, null, portletElement,\n\t\t\t\t\timportPortletControls[1], importPortletArchivedSetups,\n\t\t\t\t\timportPortletUserPreferences, false,\n\t\t\t\t\timportPortletControls[0]);\n\n\t\t\t\t// Portlet data\n\n\t\t\t\tif (importPortletControls[0]) {\n\t\t\t\t\t_portletImporter.importPortletData(\n\t\t\t\t\t\tportletDataContext, portletId, plid,\n\t\t\t\t\t\tportletDataElement);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\t_portletImporter.resetPortletScope(\n\t\t\t\t\tportletDataContext, portletPreferencesGroupId);\n\t\t\t}\n\n\t\t\t// Portlet permissions\n\n\t\t\tif (importPermissions) {\n\t\t\t\t_permissionImporter.importPortletPermissions(\n\t\t\t\t\tlayoutCache, companyId, groupId, userId, layout,\n\t\t\t\t\tportletElement, portletId);\n\t\t\t}\n\n\t\t\t// Archived setups\n\n\t\t\t_portletImporter.importPortletPreferences(\n\t\t\t\tportletDataContext, layoutSet.getCompanyId(), groupId, null,\n\t\t\t\tnull, portletElement, importPortletControls[1],\n\t\t\t\timportPortletArchivedSetups, importPortletUserPreferences,\n\t\t\t\tfalse, importPortletControls[0]);\n\t\t}\n\n\t\tif (importPermissions) {\n\t\t\tif (userId > 0) {\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tUser.class);\n\n\t\t\t\tindexer.reindex(userId);\n\t\t\t}\n\t\t}\n\n\t\t// Asset links\n\n\t\t_portletImporter.readAssetLinks(portletDataContext);\n\n\t\t// Delete missing layouts\n\n\t\tif (deleteMissingLayouts) {\n\t\t\tdeleteMissingLayouts(\n\t\t\t\tgroupId, privateLayout, newLayouts, previousLayouts,\n\t\t\t\tserviceContext);\n\t\t}\n\n\t\t// Page count\n\n\t\tlayoutSet = LayoutSetLocalServiceUtil.updatePageCount(\n\t\t\tgroupId, privateLayout);\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Importing layouts takes \" + stopWatch.getTime() + \" ms\");\n\t\t}\n\n\t\t// Site\n\n\t\tGroupLocalServiceUtil.updateSite(groupId, true);\n\n\t\t// Last merge time must be the same for merged layouts and the layout\n\t\t// set\n\n\t\tlong lastMergeTime = System.currentTimeMillis();\n\n\t\tfor (Layout layout : newLayouts) {\n\t\t\tboolean modifiedTypeSettingsProperties = false;\n\n\t\t\tUnicodeProperties typeSettingsProperties =\n\t\t\t\tlayout.getTypeSettingsProperties();\n\n\t\t\t// Journal article layout type\n\n\t\t\tString articleId = typeSettingsProperties.getProperty(\"article-id\");\n\n\t\t\tif (Validator.isNotNull(articleId)) {\n\t\t\t\tMap<String, String> articleIds =\n\t\t\t\t\t(Map<String, String>)portletDataContext.\n\t\t\t\t\t\tgetNewPrimaryKeysMap(\n\t\t\t\t\t\t\tJournalArticle.class + \".articleId\");\n\n\t\t\t\ttypeSettingsProperties.setProperty(\n\t\t\t\t\t\"article-id\",\n\t\t\t\t\tMapUtil.getString(articleIds, articleId, articleId));\n\n\t\t\t\tmodifiedTypeSettingsProperties = true;\n\t\t\t}\n\n\t\t\t// Last merge time for layout\n\n\t\t\tif (layoutsImportMode.equals(\n\t\t\t\t\tPortletDataHandlerKeys.\n\t\t\t\t\t\tLAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {\n\n\t\t\t\ttypeSettingsProperties.setProperty(\n\t\t\t\t\tSites.LAST_MERGE_TIME, String.valueOf(lastMergeTime));\n\n\t\t\t\tmodifiedTypeSettingsProperties = true;\n\t\t\t}\n\n\t\t\tif (modifiedTypeSettingsProperties) {\n\t\t\t\tLayoutUtil.update(layout);\n\t\t\t}\n\t\t}\n\n\t\t// Last merge time for layout set\n\n\t\tif (layoutsImportMode.equals(\n\t\t\t\tPortletDataHandlerKeys.\n\t\t\t\t\tLAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {\n\n\t\t\tUnicodeProperties settingsProperties =\n\t\t\t\tlayoutSet.getSettingsProperties();\n\n\t\t\tString mergeFailFriendlyURLLayouts =\n\t\t\t\tsettingsProperties.getProperty(\n\t\t\t\t\tSites.MERGE_FAIL_FRIENDLY_URL_LAYOUTS);\n\n\t\t\tif (Validator.isNull(mergeFailFriendlyURLLayouts)) {\n\t\t\t\tsettingsProperties.setProperty(\n\t\t\t\t\tSites.LAST_MERGE_TIME, String.valueOf(lastMergeTime));\n\n\t\t\t\tLayoutSetLocalServiceUtil.updateLayoutSet(layoutSet);\n\t\t\t}\n\t\t}\n\n\t\tzipReader.close();\n\t}","id":18790,"modified_method":"protected void doImportLayouts(\n\t\t\tlong userId, long groupId, boolean privateLayout,\n\t\t\tMap<String, String[]> parameterMap, File file)\n\t\tthrows Exception {\n\n\t\tboolean deleteMissingLayouts = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.DELETE_MISSING_LAYOUTS,\n\t\t\tBoolean.TRUE.booleanValue());\n\t\tboolean deletePortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.DELETE_PORTLET_DATA);\n\t\tboolean importCategories = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.CATEGORIES);\n\t\tboolean importPermissions = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PERMISSIONS);\n\t\tboolean importTheme = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.THEME);\n\t\tboolean importThemeSettings = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.THEME_REFERENCE);\n\t\tboolean importLogo = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.LOGO);\n\t\tboolean importLayoutSetSettings = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.LAYOUT_SET_SETTINGS);\n\n\t\tboolean layoutSetPrototypeLinkEnabled = MapUtil.getBoolean(\n\t\t\tparameterMap,\n\t\t\tPortletDataHandlerKeys.LAYOUT_SET_PROTOTYPE_LINK_ENABLED, true);\n\n\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\tif (group.isLayoutSetPrototype()) {\n\t\t\tlayoutSetPrototypeLinkEnabled = false;\n\t\t}\n\n\t\tString layoutsImportMode = MapUtil.getString(\n\t\t\tparameterMap, PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE,\n\t\t\tPortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_MERGE_BY_LAYOUT_UUID);\n\t\tString userIdStrategy = MapUtil.getString(\n\t\t\tparameterMap, PortletDataHandlerKeys.USER_ID_STRATEGY);\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Delete portlet data \" + deletePortletData);\n\t\t\t_log.debug(\"Import categories \" + importCategories);\n\t\t\t_log.debug(\"Import permissions \" + importPermissions);\n\t\t\t_log.debug(\"Import theme \" + importTheme);\n\t\t}\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\t\t}\n\n\t\tLayoutCache layoutCache = new LayoutCache();\n\n\t\tLayoutSet layoutSet = LayoutSetLocalServiceUtil.getLayoutSet(\n\t\t\tgroupId, privateLayout);\n\n\t\tlong companyId = layoutSet.getCompanyId();\n\n\t\tUser user = UserUtil.findByPrimaryKey(userId);\n\n\t\tUserIdStrategy strategy = _portletImporter.getUserIdStrategy(\n\t\t\tuser, userIdStrategy);\n\n\t\tZipReader zipReader = ZipReaderFactoryUtil.getZipReader(file);\n\n\t\tPortletDataContext portletDataContext =\n\t\t\tPortletDataContextFactoryUtil.createImportPortletDataContext(\n\t\t\t\tcompanyId, groupId, parameterMap, strategy, zipReader);\n\n\t\tportletDataContext.setPortetDataContextListener(\n\t\t\tnew PortletDataContextListenerImpl(portletDataContext));\n\n\t\tportletDataContext.setPrivateLayout(privateLayout);\n\n\t\t// Zip\n\n\t\tInputStream themeZip = null;\n\n\t\tvalidateFile(portletDataContext);\n\n\t\t// Company id\n\n\t\tlong sourceCompanyId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"company-id\"));\n\n\t\tportletDataContext.setSourceCompanyId(sourceCompanyId);\n\n\t\t// Company group id\n\n\t\tlong sourceCompanyGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"company-group-id\"));\n\n\t\tportletDataContext.setSourceCompanyGroupId(sourceCompanyGroupId);\n\n\t\t// Group id\n\n\t\tlong sourceGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"group-id\"));\n\n\t\tportletDataContext.setSourceGroupId(sourceGroupId);\n\n\t\t// User personal site group id\n\n\t\tlong sourceUserPersonalSiteGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"user-personal-site-group-id\"));\n\n\t\tportletDataContext.setSourceUserPersonalSiteGroupId(\n\t\t\tsourceUserPersonalSiteGroupId);\n\n\t\t// Layout and layout set prototype\n\n\t\tString layoutSetPrototypeUuid = _layoutsElement.attributeValue(\n\t\t\t\"layout-set-prototype-uuid\");\n\n\t\tString larType = _headerElement.attributeValue(\"type\");\n\n\t\tif (group.isLayoutPrototype() && larType.equals(\"layout-prototype\")) {\n\t\t\tdeleteMissingLayouts = false;\n\n\t\t\tLayoutPrototype layoutPrototype =\n\t\t\t\tLayoutPrototypeLocalServiceUtil.getLayoutPrototype(\n\t\t\t\t\tgroup.getClassPK());\n\n\t\t\tString layoutPrototypeUuid = GetterUtil.getString(\n\t\t\t\t_headerElement.attributeValue(\"type-uuid\"));\n\n\t\t\tLayoutPrototype existingLayoutPrototype = null;\n\n\t\t\tif (Validator.isNotNull(layoutPrototypeUuid)) {\n\t\t\t\ttry {\n\t\t\t\t\texistingLayoutPrototype =\n\t\t\t\t\t\tLayoutPrototypeLocalServiceUtil.\n\t\t\t\t\t\t\tgetLayoutPrototypeByUuidAndCompanyId(\n\t\t\t\t\t\t\t\tlayoutPrototypeUuid, companyId);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchLayoutPrototypeException nslpe) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (existingLayoutPrototype == null) {\n\t\t\t\tList<Layout> layouts =\n\t\t\t\t\tLayoutLocalServiceUtil.getLayoutsByLayoutPrototypeUuid(\n\t\t\t\t\t\tlayoutPrototype.getUuid());\n\n\t\t\t\tlayoutPrototype.setUuid(layoutPrototypeUuid);\n\n\t\t\t\tLayoutPrototypeLocalServiceUtil.updateLayoutPrototype(\n\t\t\t\t\tlayoutPrototype);\n\n\t\t\t\tfor (Layout layout : layouts) {\n\t\t\t\t\tlayout.setLayoutPrototypeUuid(layoutPrototypeUuid);\n\n\t\t\t\t\tLayoutLocalServiceUtil.updateLayout(layout);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (group.isLayoutSetPrototype() &&\n\t\t\t\t larType.equals(\"layout-set-prototype\")) {\n\n\t\t\tLayoutSetPrototype layoutSetPrototype =\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototype(\n\t\t\t\t\tgroup.getClassPK());\n\n\t\t\tString importedLayoutSetPrototypeUuid = GetterUtil.getString(\n\t\t\t\t_headerElement.attributeValue(\"type-uuid\"));\n\n\t\t\tLayoutSetPrototype existingLayoutSetPrototype = null;\n\n\t\t\tif (Validator.isNotNull(importedLayoutSetPrototypeUuid)) {\n\t\t\t\ttry {\n\t\t\t\t\texistingLayoutSetPrototype =\n\t\t\t\t\t\tLayoutSetPrototypeLocalServiceUtil.\n\t\t\t\t\t\t\tgetLayoutSetPrototypeByUuidAndCompanyId(\n\t\t\t\t\t\t\t\timportedLayoutSetPrototypeUuid, companyId);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchLayoutSetPrototypeException nslspe) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (existingLayoutSetPrototype == null) {\n\t\t\t\tlayoutSetPrototype.setUuid(importedLayoutSetPrototypeUuid);\n\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.updateLayoutSetPrototype(\n\t\t\t\t\tlayoutSetPrototype);\n\t\t\t}\n\t\t}\n\t\telse if (larType.equals(\"layout-set-prototype\")) {\n\t\t\tlayoutSetPrototypeUuid = GetterUtil.getString(\n\t\t\t\t_headerElement.attributeValue(\"type-uuid\"));\n\t\t}\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (Validator.isNotNull(layoutSetPrototypeUuid)) {\n\t\t\tlayoutSet.setLayoutSetPrototypeUuid(layoutSetPrototypeUuid);\n\t\t\tlayoutSet.setLayoutSetPrototypeLinkEnabled(\n\t\t\t\tlayoutSetPrototypeLinkEnabled);\n\n\t\t\tLayoutSetLocalServiceUtil.updateLayoutSet(layoutSet);\n\t\t}\n\n\t\t// Look and feel\n\n\t\tif (importTheme) {\n\t\t\tthemeZip = portletDataContext.getZipEntryAsInputStream(\"theme.zip\");\n\t\t}\n\n\t\t// Look and feel\n\n\t\tString themeId = layoutSet.getThemeId();\n\t\tString colorSchemeId = layoutSet.getColorSchemeId();\n\n\t\tif (importThemeSettings) {\n\t\t\tAttribute themeIdAttribute = _headerElement.attribute(\"theme-id\");\n\n\t\t\tif (themeIdAttribute != null) {\n\t\t\t\tthemeId = themeIdAttribute.getValue();\n\t\t\t}\n\n\t\t\tAttribute colorSchemeIdAttribute = _headerElement.attribute(\n\t\t\t\t\"color-scheme-id\");\n\n\t\t\tif (colorSchemeIdAttribute != null) {\n\t\t\t\tcolorSchemeId = colorSchemeIdAttribute.getValue();\n\t\t\t}\n\t\t}\n\n\t\tif (importLogo) {\n\t\t\tString logoPath = _headerElement.attributeValue(\"logo-path\");\n\n\t\t\tbyte[] iconBytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\tlogoPath);\n\n\t\t\tif ((iconBytes != null) && (iconBytes.length > 0)) {\n\t\t\t\tFile logo = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tlogo = FileUtil.createTempFile(iconBytes);\n\n\t\t\t\t\tLayoutSetLocalServiceUtil.updateLogo(\n\t\t\t\t\t\tgroupId, privateLayout, true, logo);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tFileUtil.delete(logo);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLayoutSetLocalServiceUtil.updateLogo(\n\t\t\t\t\tgroupId, privateLayout, false, (File)null);\n\t\t\t}\n\t\t}\n\n\t\tif (importLayoutSetSettings) {\n\t\t\tString settings = GetterUtil.getString(\n\t\t\t\t_headerElement.elementText(\"settings\"));\n\n\t\t\tLayoutSetLocalServiceUtil.updateSettings(\n\t\t\t\tgroupId, privateLayout, settings);\n\t\t}\n\n\t\tString css = GetterUtil.getString(_headerElement.elementText(\"css\"));\n\n\t\tif (themeZip != null) {\n\t\t\tString importThemeId = importTheme(layoutSet, themeZip);\n\n\t\t\tif (importThemeId != null) {\n\t\t\t\tthemeId = importThemeId;\n\t\t\t\tcolorSchemeId =\n\t\t\t\t\tColorSchemeFactoryUtil.getDefaultRegularColorSchemeId();\n\t\t\t}\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Importing theme takes \" + stopWatch.getTime() + \" ms\");\n\t\t\t}\n\t\t}\n\n\t\tboolean wapTheme = false;\n\n\t\tLayoutSetLocalServiceUtil.updateLookAndFeel(\n\t\t\tgroupId, privateLayout, themeId, colorSchemeId, css, wapTheme);\n\n\t\t// Read asset categories, asset tags, comments, locks, permissions, and\n\t\t// ratings entries to make them available to the data handlers through\n\t\t// the context\n\n\t\tif (importPermissions) {\n\t\t\t_permissionImporter.readPortletDataPermissions(portletDataContext);\n\t\t}\n\n\t\t_portletImporter.readAssetCategories(portletDataContext);\n\t\t_portletImporter.readAssetTags(portletDataContext);\n\t\t_portletImporter.readComments(portletDataContext);\n\t\t_portletImporter.readExpandoTables(portletDataContext);\n\t\t_portletImporter.readLocks(portletDataContext);\n\t\t_portletImporter.readRatingsEntries(portletDataContext);\n\n\t\t// Layouts\n\n\t\tList<Layout> previousLayouts = LayoutUtil.findByG_P(\n\t\t\tgroupId, privateLayout);\n\n\t\t// Remove layouts that were deleted from the layout set prototype\n\n\t\tif (Validator.isNotNull(layoutSetPrototypeUuid) &&\n\t\t\tlayoutSetPrototypeLinkEnabled) {\n\n\t\t\tLayoutSetPrototype layoutSetPrototype =\n\t\t\t\tLayoutSetPrototypeLocalServiceUtil.\n\t\t\t\t\tgetLayoutSetPrototypeByUuidAndCompanyId(\n\t\t\t\t\t\tlayoutSetPrototypeUuid, companyId);\n\n\t\t\tfor (Layout layout : previousLayouts) {\n\t\t\t\tString sourcePrototypeLayoutUuid =\n\t\t\t\t\tlayout.getSourcePrototypeLayoutUuid();\n\n\t\t\t\tif (Validator.isNull(layout.getSourcePrototypeLayoutUuid())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tLayout sourcePrototypeLayout = LayoutUtil.fetchByUUID_G_P(\n\t\t\t\t\tsourcePrototypeLayoutUuid, layoutSetPrototype.getGroupId(),\n\t\t\t\t\ttrue);\n\n\t\t\t\tif (sourcePrototypeLayout == null) {\n\t\t\t\t\tLayoutLocalServiceUtil.deleteLayout(\n\t\t\t\t\t\tlayout, false, serviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<Layout> newLayouts = new ArrayList<Layout>();\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\tif (_layoutElements.size() > 0) {\n\t\t\t\t_log.debug(\"Importing layouts\");\n\t\t\t}\n\t\t}\n\n\t\tfor (Element layoutElement : _layoutElements) {\n\t\t\timportLayout(portletDataContext, newLayouts, layoutElement);\n\t\t}\n\n\t\tElement portletsElement = _rootElement.element(\"portlets\");\n\n\t\tList<Element> portletElements = portletsElement.elements(\"portlet\");\n\n\t\t// Delete portlet data\n\n\t\tMap<Long, Layout> newLayoutsMap =\n\t\t\t(Map<Long, Layout>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tLayout.class + \".layout\");\n\n\t\tif (deletePortletData) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\tif (portletElements.size() > 0) {\n\t\t\t\t\t_log.debug(\"Deleting portlet data\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (Element portletElement : portletElements) {\n\t\t\t\tString portletId = portletElement.attributeValue(\"portlet-id\");\n\t\t\t\tlong layoutId = GetterUtil.getLong(\n\t\t\t\t\tportletElement.attributeValue(\"layout-id\"));\n\n\t\t\t\tLayout layout = newLayoutsMap.get(layoutId);\n\n\t\t\t\tlong plid = layout.getPlid();\n\n\t\t\t\tportletDataContext.setPlid(plid);\n\n\t\t\t\t_portletImporter.deletePortletData(\n\t\t\t\t\tportletDataContext, portletId, plid);\n\t\t\t}\n\t\t}\n\n\t\t// Import portlets\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\tif (portletElements.size() > 0) {\n\t\t\t\t_log.debug(\"Importing portlets\");\n\t\t\t}\n\t\t}\n\n\t\tfor (Element portletElement : portletElements) {\n\t\t\tString portletPath = portletElement.attributeValue(\"path\");\n\t\t\tString portletId = portletElement.attributeValue(\"portlet-id\");\n\t\t\tlong layoutId = GetterUtil.getLong(\n\t\t\t\tportletElement.attributeValue(\"layout-id\"));\n\t\t\tlong oldPlid = GetterUtil.getLong(\n\t\t\t\tportletElement.attributeValue(\"old-plid\"));\n\n\t\t\tPortlet portlet = PortletLocalServiceUtil.getPortletById(\n\t\t\t\tportletDataContext.getCompanyId(), portletId);\n\n\t\t\tif (!portlet.isActive() || portlet.isUndeployedPortlet()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tLayout layout = newLayoutsMap.get(layoutId);\n\n\t\t\tlong plid = LayoutConstants.DEFAULT_PLID;\n\n\t\t\tif (layout != null) {\n\t\t\t\tplid = layout.getPlid();\n\t\t\t}\n\n\t\t\tlayout = LayoutUtil.fetchByPrimaryKey(plid);\n\n\t\t\tif ((layout == null) && !group.isCompany()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tportletDataContext.setPlid(plid);\n\t\t\tportletDataContext.setOldPlid(oldPlid);\n\n\t\t\tDocument portletDocument = SAXReaderUtil.read(\n\t\t\t\tportletDataContext.getZipEntryAsString(portletPath));\n\n\t\t\tportletElement = portletDocument.getRootElement();\n\n\t\t\t// The order of the import is important. You must always import the\n\t\t\t// portlet preferences first, then the portlet data, then the\n\t\t\t// portlet permissions. The import of the portlet data assumes that\n\t\t\t// portlet preferences already exist.\n\n\t\t\t_portletImporter.setPortletScope(\n\t\t\t\tportletDataContext, portletElement);\n\n\t\t\tlong portletPreferencesGroupId = groupId;\n\n\t\t\tElement portletDataElement = portletElement.element(\"portlet-data\");\n\n\t\t\tboolean[] importPortletControls = getImportPortletControls(\n\t\t\t\tcompanyId, portletId, parameterMap, portletDataElement);\n\n\t\t\ttry {\n\t\t\t\tif ((layout != null) && !group.isCompany()) {\n\t\t\t\t\tportletPreferencesGroupId = layout.getGroupId();\n\t\t\t\t}\n\n\t\t\t\t// Portlet preferences\n\n\t\t\t\t_portletImporter.importPortletPreferences(\n\t\t\t\t\tportletDataContext, layoutSet.getCompanyId(),\n\t\t\t\t\tportletPreferencesGroupId, layout, null, portletElement,\n\t\t\t\t\timportPortletControls[2], importPortletControls[0],\n\t\t\t\t\timportPortletControls[3], false, importPortletControls[1]);\n\n\t\t\t\t// Portlet data\n\n\t\t\t\tif (importPortletControls[1]) {\n\t\t\t\t\t_portletImporter.importPortletData(\n\t\t\t\t\t\tportletDataContext, portletId, plid,\n\t\t\t\t\t\tportletDataElement);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\t_portletImporter.resetPortletScope(\n\t\t\t\t\tportletDataContext, portletPreferencesGroupId);\n\t\t\t}\n\n\t\t\t// Portlet permissions\n\n\t\t\tif (importPermissions) {\n\t\t\t\t_permissionImporter.importPortletPermissions(\n\t\t\t\t\tlayoutCache, companyId, groupId, userId, layout,\n\t\t\t\t\tportletElement, portletId);\n\t\t\t}\n\n\t\t\t// Archived setups\n\n\t\t\t_portletImporter.importPortletPreferences(\n\t\t\t\tportletDataContext, layoutSet.getCompanyId(), groupId, null,\n\t\t\t\tnull, portletElement, importPortletControls[2],\n\t\t\t\timportPortletControls[0], importPortletControls[3], false,\n\t\t\t\timportPortletControls[1]);\n\t\t}\n\n\t\tif (importPermissions) {\n\t\t\tif (userId > 0) {\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tUser.class);\n\n\t\t\t\tindexer.reindex(userId);\n\t\t\t}\n\t\t}\n\n\t\t// Asset links\n\n\t\t_portletImporter.readAssetLinks(portletDataContext);\n\n\t\t// Delete missing layouts\n\n\t\tif (deleteMissingLayouts) {\n\t\t\tdeleteMissingLayouts(\n\t\t\t\tgroupId, privateLayout, newLayouts, previousLayouts,\n\t\t\t\tserviceContext);\n\t\t}\n\n\t\t// Page count\n\n\t\tlayoutSet = LayoutSetLocalServiceUtil.updatePageCount(\n\t\t\tgroupId, privateLayout);\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Importing layouts takes \" + stopWatch.getTime() + \" ms\");\n\t\t}\n\n\t\t// Site\n\n\t\tGroupLocalServiceUtil.updateSite(groupId, true);\n\n\t\t// Last merge time must be the same for merged layouts and the layout\n\t\t// set\n\n\t\tlong lastMergeTime = System.currentTimeMillis();\n\n\t\tfor (Layout layout : newLayouts) {\n\t\t\tboolean modifiedTypeSettingsProperties = false;\n\n\t\t\tUnicodeProperties typeSettingsProperties =\n\t\t\t\tlayout.getTypeSettingsProperties();\n\n\t\t\t// Journal article layout type\n\n\t\t\tString articleId = typeSettingsProperties.getProperty(\"article-id\");\n\n\t\t\tif (Validator.isNotNull(articleId)) {\n\t\t\t\tMap<String, String> articleIds =\n\t\t\t\t\t(Map<String, String>)portletDataContext.\n\t\t\t\t\t\tgetNewPrimaryKeysMap(\n\t\t\t\t\t\t\tJournalArticle.class + \".articleId\");\n\n\t\t\t\ttypeSettingsProperties.setProperty(\n\t\t\t\t\t\"article-id\",\n\t\t\t\t\tMapUtil.getString(articleIds, articleId, articleId));\n\n\t\t\t\tmodifiedTypeSettingsProperties = true;\n\t\t\t}\n\n\t\t\t// Last merge time for layout\n\n\t\t\tif (layoutsImportMode.equals(\n\t\t\t\t\tPortletDataHandlerKeys.\n\t\t\t\t\t\tLAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {\n\n\t\t\t\ttypeSettingsProperties.setProperty(\n\t\t\t\t\tSites.LAST_MERGE_TIME, String.valueOf(lastMergeTime));\n\n\t\t\t\tmodifiedTypeSettingsProperties = true;\n\t\t\t}\n\n\t\t\tif (modifiedTypeSettingsProperties) {\n\t\t\t\tLayoutUtil.update(layout);\n\t\t\t}\n\t\t}\n\n\t\t// Last merge time for layout set\n\n\t\tif (layoutsImportMode.equals(\n\t\t\t\tPortletDataHandlerKeys.\n\t\t\t\t\tLAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {\n\n\t\t\tUnicodeProperties settingsProperties =\n\t\t\t\tlayoutSet.getSettingsProperties();\n\n\t\t\tString mergeFailFriendlyURLLayouts =\n\t\t\t\tsettingsProperties.getProperty(\n\t\t\t\t\tSites.MERGE_FAIL_FRIENDLY_URL_LAYOUTS);\n\n\t\t\tif (Validator.isNull(mergeFailFriendlyURLLayouts)) {\n\t\t\t\tsettingsProperties.setProperty(\n\t\t\t\t\tSites.LAST_MERGE_TIME, String.valueOf(lastMergeTime));\n\n\t\t\t\tLayoutSetLocalServiceUtil.updateLayoutSet(layoutSet);\n\t\t\t}\n\t\t}\n\n\t\tzipReader.close();\n\t}","commit_id":"32dad9c8b6c7030939b3e005afb1ff01a26aa8c3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected File doExportPortletInfoAsFile(\n\t\t\tlong plid, long groupId, String portletId,\n\t\t\tMap<String, String[]> parameterMap, Date startDate, Date endDate)\n\t\tthrows Exception {\n\n\t\tboolean exportPermissions = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PERMISSIONS);\n\t\tboolean exportPortletArchivedSetups = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);\n\t\tboolean exportPortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA);\n\t\tboolean exportPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\t\tboolean exportPortletSetup = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP);\n\t\tboolean exportPortletSetupAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP_ALL);\n\t\tboolean exportPortletUserPreferences = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);\n\n\t\tString rootPortletId = PortletConstants.getRootPortletId(portletId);\n\n\t\tif (exportPortletDataAll) {\n\t\t\texportPortletData = true;\n\t\t}\n\t\telse if (parameterMap.containsKey(\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA + \"_\" +\n\t\t\t\t\t\trootPortletId)) {\n\n\t\t\texportPortletData = MapUtil.getBoolean(\n\t\t\t\tparameterMap,\n\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA + \"_\" + rootPortletId);\n\t\t}\n\n\t\tif (exportPortletSetupAll) {\n\t\t\texportPortletSetup = true;\n\t\t}\n\t\telse if (parameterMap.containsKey(\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP + \"_\" +\n\t\t\t\t\t\trootPortletId)) {\n\n\t\t\texportPortletSetup = MapUtil.getBoolean(\n\t\t\t\tparameterMap,\n\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP + \"_\" + rootPortletId);\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Export permissions \" + exportPermissions);\n\t\t\t_log.debug(\n\t\t\t\t\"Export portlet archived setups \" +\n\t\t\t\t\texportPortletArchivedSetups);\n\t\t\t_log.debug(\"Export portlet data \" + exportPortletData);\n\t\t\t_log.debug(\"Export all portlet data \" + exportPortletDataAll);\n\t\t\t_log.debug(\"Export portlet setup \" + exportPortletSetup);\n\t\t\t_log.debug(\n\t\t\t\t\"Export portlet user preferences \" +\n\t\t\t\t\texportPortletUserPreferences);\n\t\t}\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\t\t}\n\n\t\tLayoutCache layoutCache = new LayoutCache();\n\n\t\tLayout layout = LayoutLocalServiceUtil.getLayout(plid);\n\n\t\tif (!layout.isTypeControlPanel() && !layout.isTypePanel() &&\n\t\t\t!layout.isTypePortlet()) {\n\n\t\t\tthrow new LayoutImportException(\n\t\t\t\t\"Layout type \" + layout.getType() + \" is not valid\");\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(\n\t\t\tlayout.getCompanyId());\n\n\t\tZipWriter zipWriter = ZipWriterFactoryUtil.getZipWriter();\n\n\t\tlong scopeGroupId = groupId;\n\n\t\tjavax.portlet.PortletPreferences jxPreferences =\n\t\t\tPortletPreferencesFactoryUtil.getLayoutPortletSetup(\n\t\t\t\tlayout, portletId);\n\n\t\tString scopeType = GetterUtil.getString(\n\t\t\tjxPreferences.getValue(\"lfrScopeType\", null));\n\t\tString scopeLayoutUuid = GetterUtil.getString(\n\t\t\tjxPreferences.getValue(\"lfrScopeLayoutUuid\", null));\n\n\t\tif (Validator.isNotNull(scopeType)) {\n\t\t\tGroup scopeGroup = null;\n\n\t\t\tif (scopeType.equals(\"company\")) {\n\t\t\t\tscopeGroup = GroupLocalServiceUtil.getCompanyGroup(\n\t\t\t\t\tlayout.getCompanyId());\n\t\t\t}\n\t\t\telse if (Validator.isNotNull(scopeLayoutUuid)) {\n\t\t\t\tscopeGroup = layout.getScopeGroup();\n\t\t\t}\n\n\t\t\tif (scopeGroup != null) {\n\t\t\t\tscopeGroupId = scopeGroup.getGroupId();\n\t\t\t}\n\t\t}\n\n\t\tPortletDataContext portletDataContext =\n\t\t\tPortletDataContextFactoryUtil.createExportPortletDataContext(\n\t\t\t\tlayout.getCompanyId(), scopeGroupId, parameterMap, startDate,\n\t\t\t\tendDate, zipWriter);\n\n\t\tportletDataContext.setPortetDataContextListener(\n\t\t\tnew PortletDataContextListenerImpl(portletDataContext));\n\n\t\tportletDataContext.setPlid(plid);\n\t\tportletDataContext.setOldPlid(plid);\n\t\tportletDataContext.setScopeType(scopeType);\n\t\tportletDataContext.setScopeLayoutUuid(scopeLayoutUuid);\n\n\t\tDocument document = SAXReaderUtil.createDocument();\n\n\t\tElement rootElement = document.addElement(\"root\");\n\n\t\tElement headerElement = rootElement.addElement(\"header\");\n\n\t\theaderElement.addAttribute(\n\t\t\t\"available-locales\",\n\t\t\tStringUtil.merge(LanguageUtil.getAvailableLocales()));\n\t\theaderElement.addAttribute(\n\t\t\t\"build-number\", String.valueOf(ReleaseInfo.getBuildNumber()));\n\t\theaderElement.addAttribute(\"export-date\", Time.getRFC822());\n\n\t\tif (portletDataContext.hasDateRange()) {\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"start-date\",\n\t\t\t\tString.valueOf(portletDataContext.getStartDate()));\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"end-date\", String.valueOf(portletDataContext.getEndDate()));\n\t\t}\n\n\t\theaderElement.addAttribute(\"type\", \"portlet\");\n\t\theaderElement.addAttribute(\n\t\t\t\"company-id\", String.valueOf(portletDataContext.getCompanyId()));\n\t\theaderElement.addAttribute(\n\t\t\t\"company-group-id\",\n\t\t\tString.valueOf(portletDataContext.getCompanyGroupId()));\n\t\theaderElement.addAttribute(\"group-id\", String.valueOf(scopeGroupId));\n\t\theaderElement.addAttribute(\n\t\t\t\"user-personal-site-group-id\",\n\t\t\tString.valueOf(portletDataContext.getUserPersonalSiteGroupId()));\n\t\theaderElement.addAttribute(\n\t\t\t\"private-layout\", String.valueOf(layout.isPrivateLayout()));\n\t\theaderElement.addAttribute(\n\t\t\t\"root-portlet-id\", PortletConstants.getRootPortletId(portletId));\n\n\t\tElement missingReferencesElement = rootElement.addElement(\n\t\t\t\"missing-references\");\n\n\t\tportletDataContext.setMissingReferencesElement(\n\t\t\tmissingReferencesElement);\n\n\t\texportPortlet(\n\t\t\tportletDataContext, layoutCache, portletId, layout, rootElement,\n\t\t\tdefaultUserId, exportPermissions, exportPortletArchivedSetups,\n\t\t\texportPortletData, exportPortletSetup,\n\t\t\texportPortletUserPreferences);\n\n\t\texportAssetCategories(portletDataContext);\n\t\texportAssetLinks(portletDataContext);\n\t\texportAssetTags(portletDataContext);\n\t\texportComments(portletDataContext);\n\t\texportExpandoTables(portletDataContext);\n\t\texportLocks(portletDataContext);\n\n\t\t_deletionSystemEventExporter.export(portletDataContext);\n\n\t\tif (exportPermissions) {\n\t\t\t_permissionExporter.exportPortletDataPermissions(\n\t\t\t\tportletDataContext);\n\t\t}\n\n\t\texportRatingsEntries(portletDataContext, rootElement);\n\n\t\tExportImportHelperUtil.writeManifestSummary(\n\t\t\tdocument, portletDataContext.getManifestSummary());\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Exporting portlet took \" + stopWatch.getTime() + \" ms\");\n\t\t}\n\n\t\tportletDataContext.clearScopedPrimaryKeys();\n\n\t\ttry {\n\t\t\tportletDataContext.addZipEntry(\n\t\t\t\t\"/manifest.xml\", document.formattedString());\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SystemException(ioe);\n\t\t}\n\n\t\treturn zipWriter.getFile();\n\t}","id":18791,"modified_method":"protected File doExportPortletInfoAsFile(\n\t\t\tlong plid, long groupId, String portletId,\n\t\t\tMap<String, String[]> parameterMap, Date startDate, Date endDate)\n\t\tthrows Exception {\n\n\t\tboolean exportPermissions = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PERMISSIONS);\n\t\tboolean exportPortletConfiguration = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_CONFIGURATION);\n\t\tboolean exportPortletConfigurationAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL);\n\t\tboolean exportPortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA);\n\t\tboolean exportPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\n\t\tString rootPortletId = PortletConstants.getRootPortletId(portletId);\n\n\t\tif (exportPortletDataAll) {\n\t\t\texportPortletData = true;\n\t\t}\n\t\telse if (parameterMap.containsKey(\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA + \"_\" +\n\t\t\t\t\t\trootPortletId)) {\n\n\t\t\texportPortletData = MapUtil.getBoolean(\n\t\t\t\tparameterMap,\n\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA + \"_\" + rootPortletId);\n\t\t}\n\n\t\tboolean exportPortletArchivedSetups = exportPortletConfiguration;\n\t\tboolean exportPortletSetup = exportPortletConfiguration;\n\t\tboolean exportPortletUserPreferences = exportPortletConfiguration;\n\n\t\tif (exportPortletConfigurationAll) {\n\t\t\texportPortletArchivedSetups =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS_ALL);\n\t\t\texportPortletSetup =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP_ALL);\n\t\t\texportPortletUserPreferences =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_USER_PREFERENCES_ALL);\n\t\t}\n\t\telse if (parameterMap.containsKey(\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_CONFIGURATION + \"_\" +\n\t\t\t\t\t\trootPortletId)) {\n\n\t\t\texportPortletConfiguration =\n\t\t\t\texportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_CONFIGURATION +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\texportPortletArchivedSetups =\n\t\t\t\texportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\texportPortletSetup =\n\t\t\t\texportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\texportPortletUserPreferences =\n\t\t\t\texportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_USER_PREFERENCES +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Export permissions \" + exportPermissions);\n\t\t\t_log.debug(\n\t\t\t\t\"Export portlet archived setups \" +\n\t\t\t\t\texportPortletArchivedSetups);\n\t\t\t_log.debug(\"Export portlet data \" + exportPortletData);\n\t\t\t_log.debug(\"Export all portlet data \" + exportPortletDataAll);\n\t\t\t_log.debug(\n\t\t\t\t\"Export portlet configuration \" + exportPortletConfiguration);\n\t\t\t_log.debug(\n\t\t\t\t\"Export portlet user preferences \" +\n\t\t\t\t\texportPortletUserPreferences);\n\t\t}\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\t\t}\n\n\t\tLayoutCache layoutCache = new LayoutCache();\n\n\t\tLayout layout = LayoutLocalServiceUtil.getLayout(plid);\n\n\t\tif (!layout.isTypeControlPanel() && !layout.isTypePanel() &&\n\t\t\t!layout.isTypePortlet()) {\n\n\t\t\tthrow new LayoutImportException(\n\t\t\t\t\"Layout type \" + layout.getType() + \" is not valid\");\n\t\t}\n\n\t\tlong defaultUserId = UserLocalServiceUtil.getDefaultUserId(\n\t\t\tlayout.getCompanyId());\n\n\t\tZipWriter zipWriter = ZipWriterFactoryUtil.getZipWriter();\n\n\t\tlong scopeGroupId = groupId;\n\n\t\tjavax.portlet.PortletPreferences jxPreferences =\n\t\t\tPortletPreferencesFactoryUtil.getLayoutPortletSetup(\n\t\t\t\tlayout, portletId);\n\n\t\tString scopeType = GetterUtil.getString(\n\t\t\tjxPreferences.getValue(\"lfrScopeType\", null));\n\t\tString scopeLayoutUuid = GetterUtil.getString(\n\t\t\tjxPreferences.getValue(\"lfrScopeLayoutUuid\", null));\n\n\t\tif (Validator.isNotNull(scopeType)) {\n\t\t\tGroup scopeGroup = null;\n\n\t\t\tif (scopeType.equals(\"company\")) {\n\t\t\t\tscopeGroup = GroupLocalServiceUtil.getCompanyGroup(\n\t\t\t\t\tlayout.getCompanyId());\n\t\t\t}\n\t\t\telse if (Validator.isNotNull(scopeLayoutUuid)) {\n\t\t\t\tscopeGroup = layout.getScopeGroup();\n\t\t\t}\n\n\t\t\tif (scopeGroup != null) {\n\t\t\t\tscopeGroupId = scopeGroup.getGroupId();\n\t\t\t}\n\t\t}\n\n\t\tPortletDataContext portletDataContext =\n\t\t\tPortletDataContextFactoryUtil.createExportPortletDataContext(\n\t\t\t\tlayout.getCompanyId(), scopeGroupId, parameterMap, startDate,\n\t\t\t\tendDate, zipWriter);\n\n\t\tportletDataContext.setPortetDataContextListener(\n\t\t\tnew PortletDataContextListenerImpl(portletDataContext));\n\n\t\tportletDataContext.setPlid(plid);\n\t\tportletDataContext.setOldPlid(plid);\n\t\tportletDataContext.setScopeType(scopeType);\n\t\tportletDataContext.setScopeLayoutUuid(scopeLayoutUuid);\n\n\t\tDocument document = SAXReaderUtil.createDocument();\n\n\t\tElement rootElement = document.addElement(\"root\");\n\n\t\tElement headerElement = rootElement.addElement(\"header\");\n\n\t\theaderElement.addAttribute(\n\t\t\t\"available-locales\",\n\t\t\tStringUtil.merge(LanguageUtil.getAvailableLocales()));\n\t\theaderElement.addAttribute(\n\t\t\t\"build-number\", String.valueOf(ReleaseInfo.getBuildNumber()));\n\t\theaderElement.addAttribute(\"export-date\", Time.getRFC822());\n\n\t\tif (portletDataContext.hasDateRange()) {\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"start-date\",\n\t\t\t\tString.valueOf(portletDataContext.getStartDate()));\n\t\t\theaderElement.addAttribute(\n\t\t\t\t\"end-date\", String.valueOf(portletDataContext.getEndDate()));\n\t\t}\n\n\t\theaderElement.addAttribute(\"type\", \"portlet\");\n\t\theaderElement.addAttribute(\n\t\t\t\"company-id\", String.valueOf(portletDataContext.getCompanyId()));\n\t\theaderElement.addAttribute(\n\t\t\t\"company-group-id\",\n\t\t\tString.valueOf(portletDataContext.getCompanyGroupId()));\n\t\theaderElement.addAttribute(\"group-id\", String.valueOf(scopeGroupId));\n\t\theaderElement.addAttribute(\n\t\t\t\"user-personal-site-group-id\",\n\t\t\tString.valueOf(portletDataContext.getUserPersonalSiteGroupId()));\n\t\theaderElement.addAttribute(\n\t\t\t\"private-layout\", String.valueOf(layout.isPrivateLayout()));\n\t\theaderElement.addAttribute(\n\t\t\t\"root-portlet-id\", PortletConstants.getRootPortletId(portletId));\n\n\t\tElement missingReferencesElement = rootElement.addElement(\n\t\t\t\"missing-references\");\n\n\t\tportletDataContext.setMissingReferencesElement(\n\t\t\tmissingReferencesElement);\n\n\t\texportPortlet(\n\t\t\tportletDataContext, layoutCache, portletId, layout, rootElement,\n\t\t\tdefaultUserId, exportPermissions, exportPortletArchivedSetups,\n\t\t\texportPortletData, exportPortletSetup,\n\t\t\texportPortletUserPreferences);\n\n\t\texportAssetCategories(portletDataContext);\n\t\texportAssetLinks(portletDataContext);\n\t\texportAssetTags(portletDataContext);\n\t\texportComments(portletDataContext);\n\t\texportExpandoTables(portletDataContext);\n\t\texportLocks(portletDataContext);\n\n\t\t_deletionSystemEventExporter.export(portletDataContext);\n\n\t\tif (exportPermissions) {\n\t\t\t_permissionExporter.exportPortletDataPermissions(\n\t\t\t\tportletDataContext);\n\t\t}\n\n\t\texportRatingsEntries(portletDataContext, rootElement);\n\n\t\tExportImportHelperUtil.writeManifestSummary(\n\t\t\tdocument, portletDataContext.getManifestSummary());\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Exporting portlet took \" + stopWatch.getTime() + \" ms\");\n\t\t}\n\n\t\tportletDataContext.clearScopedPrimaryKeys();\n\n\t\ttry {\n\t\t\tportletDataContext.addZipEntry(\n\t\t\t\t\"/manifest.xml\", document.formattedString());\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SystemException(ioe);\n\t\t}\n\n\t\treturn zipWriter.getFile();\n\t}","commit_id":"32dad9c8b6c7030939b3e005afb1ff01a26aa8c3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void doImportPortletInfo(\n\t\t\tlong userId, long plid, long groupId, String portletId,\n\t\t\tMap<String, String[]> parameterMap, File file)\n\t\tthrows Exception {\n\n\t\tboolean deletePortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.DELETE_PORTLET_DATA);\n\t\tboolean importPermissions = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PERMISSIONS);\n\t\tboolean importPortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA);\n\t\tboolean importPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\t\tboolean importPortletArchivedSetups = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);\n\t\tboolean importPortletSetup = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP);\n\t\tboolean importPortletSetupAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP_ALL);\n\t\tboolean importPortletUserPreferences = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);\n\t\tString userIdStrategyString = MapUtil.getString(\n\t\t\tparameterMap, PortletDataHandlerKeys.USER_ID_STRATEGY);\n\n\t\tString rootPortletId = PortletConstants.getRootPortletId(portletId);\n\n\t\tif (importPortletDataAll) {\n\t\t\timportPortletData = true;\n\t\t}\n\t\telse if (parameterMap.containsKey(\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA + \"_\" +\n\t\t\t\t\t\trootPortletId)) {\n\n\t\t\timportPortletData = MapUtil.getBoolean(\n\t\t\t\tparameterMap,\n\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA + \"_\" +\n\t\t\t\t\tPortletConstants.getRootPortletId(portletId));\n\t\t}\n\n\t\tif (importPortletSetupAll) {\n\t\t\timportPortletSetup = true;\n\t\t}\n\t\telse if (parameterMap.containsKey(\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP + \"_\" +\n\t\t\t\t\t\trootPortletId)) {\n\n\t\t\timportPortletSetup = MapUtil.getBoolean(\n\t\t\t\tparameterMap,\n\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP + \"_\" + rootPortletId);\n\t\t}\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\t\t}\n\n\t\tLayout layout = LayoutLocalServiceUtil.getLayout(plid);\n\n\t\tUser user = UserUtil.findByPrimaryKey(userId);\n\n\t\tUserIdStrategy userIdStrategy = getUserIdStrategy(\n\t\t\tuser, userIdStrategyString);\n\n\t\tZipReader zipReader = ZipReaderFactoryUtil.getZipReader(file);\n\n\t\tPortletDataContext portletDataContext =\n\t\t\tPortletDataContextFactoryUtil.createImportPortletDataContext(\n\t\t\t\tlayout.getCompanyId(), groupId, parameterMap, userIdStrategy,\n\t\t\t\tzipReader);\n\n\t\tportletDataContext.setPortetDataContextListener(\n\t\t\tnew PortletDataContextListenerImpl(portletDataContext));\n\n\t\tportletDataContext.setPlid(plid);\n\t\tportletDataContext.setPrivateLayout(layout.isPrivateLayout());\n\n\t\t// Manifest\n\n\t\tvalidateFile(portletDataContext, portletId);\n\n\t\t// Company id\n\n\t\tlong sourceCompanyId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"company-id\"));\n\n\t\tportletDataContext.setSourceCompanyId(sourceCompanyId);\n\n\t\t// Company group id\n\n\t\tlong sourceCompanyGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"company-group-id\"));\n\n\t\tportletDataContext.setSourceCompanyGroupId(sourceCompanyGroupId);\n\n\t\t// Group id\n\n\t\tlong sourceGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"group-id\"));\n\n\t\tportletDataContext.setSourceGroupId(sourceGroupId);\n\n\t\t// User personal site group id\n\n\t\tlong sourceUserPersonalSiteGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"user-personal-site-group-id\"));\n\n\t\tportletDataContext.setSourceUserPersonalSiteGroupId(\n\t\t\tsourceUserPersonalSiteGroupId);\n\n\t\t// Read asset categories, asset tags, comments, locks, and ratings\n\t\t// entries to make them available to the data handlers through the\n\t\t// context\n\n\t\tif (importPermissions) {\n\t\t\t_permissionImporter.readPortletDataPermissions(portletDataContext);\n\t\t}\n\n\t\treadAssetCategories(portletDataContext);\n\t\treadAssetTags(portletDataContext);\n\t\treadComments(portletDataContext);\n\t\treadExpandoTables(portletDataContext);\n\t\treadLocks(portletDataContext);\n\t\treadRatingsEntries(portletDataContext);\n\n\t\t// Delete portlet data\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Deleting portlet data\");\n\t\t}\n\n\t\tif (deletePortletData) {\n\t\t\tdeletePortletData(portletDataContext, portletId, plid);\n\t\t}\n\n\t\tElement portletElement = null;\n\n\t\ttry {\n\t\t\tportletElement = _rootElement.element(\"portlet\");\n\n\t\t\tDocument portletDocument = SAXReaderUtil.read(\n\t\t\t\tportletDataContext.getZipEntryAsString(\n\t\t\t\t\tportletElement.attributeValue(\"path\")));\n\n\t\t\tportletElement = portletDocument.getRootElement();\n\t\t}\n\t\tcatch (DocumentException de) {\n\t\t\tthrow new SystemException(de);\n\t\t}\n\n\t\tsetPortletScope(portletDataContext, portletElement);\n\n\t\tElement portletDataElement = portletElement.element(\"portlet-data\");\n\n\t\tboolean importData = importPortletData && (portletDataElement != null);\n\n\t\ttry {\n\n\t\t\t// Portlet preferences\n\n\t\t\timportPortletPreferences(\n\t\t\t\tportletDataContext, layout.getCompanyId(), groupId, layout,\n\t\t\t\tportletId, portletElement, importPortletSetup,\n\t\t\t\timportPortletArchivedSetups, importPortletUserPreferences, true,\n\t\t\t\timportData);\n\n\t\t\t// Portlet data\n\n\t\t\tif (importData) {\n\t\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t\t_log.debug(\"Importing portlet data\");\n\t\t\t\t}\n\n\t\t\t\timportPortletData(\n\t\t\t\t\tportletDataContext, portletId, plid, portletDataElement);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tresetPortletScope(portletDataContext, groupId);\n\t\t}\n\n\t\t// Portlet permissions\n\n\t\tif (importPermissions) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Importing portlet permissions\");\n\t\t\t}\n\n\t\t\tLayoutCache layoutCache = new LayoutCache();\n\n\t\t\t_permissionImporter.importPortletPermissions(\n\t\t\t\tlayoutCache, layout.getCompanyId(), groupId, userId, layout,\n\t\t\t\tportletElement, portletId);\n\n\t\t\tif (userId > 0) {\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tUser.class);\n\n\t\t\t\tindexer.reindex(userId);\n\t\t\t}\n\t\t}\n\n\t\t// Asset links\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Importing asset links\");\n\t\t}\n\n\t\treadAssetLinks(portletDataContext);\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Importing portlet takes \" + stopWatch.getTime() + \" ms\");\n\t\t}\n\n\t\tzipReader.close();\n\t}","id":18792,"modified_method":"protected void doImportPortletInfo(\n\t\t\tlong userId, long plid, long groupId, String portletId,\n\t\t\tMap<String, String[]> parameterMap, File file)\n\t\tthrows Exception {\n\n\t\tboolean deletePortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.DELETE_PORTLET_DATA);\n\t\tboolean importPermissions = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PERMISSIONS);\n\t\tboolean importPortletConfiguration = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_CONFIGURATION);\n\t\tboolean importPortletConfigurationAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL);\n\t\tboolean importPortletData = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA);\n\t\tboolean importPortletDataAll = MapUtil.getBoolean(\n\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_DATA_ALL);\n\t\tString userIdStrategyString = MapUtil.getString(\n\t\t\tparameterMap, PortletDataHandlerKeys.USER_ID_STRATEGY);\n\n\t\tString rootPortletId = PortletConstants.getRootPortletId(portletId);\n\n\t\tif (importPortletDataAll) {\n\t\t\timportPortletData = true;\n\t\t}\n\t\telse if (parameterMap.containsKey(\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA + \"_\" +\n\t\t\t\t\t\trootPortletId)) {\n\n\t\t\timportPortletData = MapUtil.getBoolean(\n\t\t\t\tparameterMap,\n\t\t\t\tPortletDataHandlerKeys.PORTLET_DATA + \"_\" + rootPortletId);\n\t\t}\n\n\t\tboolean importPortletArchivedSetups = importPortletConfiguration;\n\t\tboolean importPortletSetup = importPortletConfiguration;\n\t\tboolean importPortletUserPreferences = importPortletConfiguration;\n\n\t\tif (importPortletConfigurationAll) {\n\t\t\timportPortletArchivedSetups =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS_ALL);\n\t\t\timportPortletSetup =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap, PortletDataHandlerKeys.PORTLET_SETUP_ALL);\n\t\t\timportPortletUserPreferences =\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_USER_PREFERENCES_ALL);\n\t\t}\n\t\telse if (parameterMap.containsKey(\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_CONFIGURATION + \"_\" +\n\t\t\t\t\t\trootPortletId)) {\n\n\t\t\timportPortletConfiguration =\n\t\t\t\timportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_CONFIGURATION +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\timportPortletArchivedSetups =\n\t\t\t\timportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\timportPortletSetup =\n\t\t\t\timportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_SETUP +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t\timportPortletUserPreferences =\n\t\t\t\timportPortletConfiguration &&\n\t\t\t\tMapUtil.getBoolean(\n\t\t\t\t\tparameterMap,\n\t\t\t\t\tPortletDataHandlerKeys.PORTLET_USER_PREFERENCES +\n\t\t\t\t\t\tStringPool.UNDERLINE + rootPortletId);\n\t\t}\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\t\t}\n\n\t\tLayout layout = LayoutLocalServiceUtil.getLayout(plid);\n\n\t\tUser user = UserUtil.findByPrimaryKey(userId);\n\n\t\tUserIdStrategy userIdStrategy = getUserIdStrategy(\n\t\t\tuser, userIdStrategyString);\n\n\t\tZipReader zipReader = ZipReaderFactoryUtil.getZipReader(file);\n\n\t\tPortletDataContext portletDataContext =\n\t\t\tPortletDataContextFactoryUtil.createImportPortletDataContext(\n\t\t\t\tlayout.getCompanyId(), groupId, parameterMap, userIdStrategy,\n\t\t\t\tzipReader);\n\n\t\tportletDataContext.setPortetDataContextListener(\n\t\t\tnew PortletDataContextListenerImpl(portletDataContext));\n\n\t\tportletDataContext.setPlid(plid);\n\t\tportletDataContext.setPrivateLayout(layout.isPrivateLayout());\n\n\t\t// Manifest\n\n\t\tvalidateFile(portletDataContext, portletId);\n\n\t\t// Company id\n\n\t\tlong sourceCompanyId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"company-id\"));\n\n\t\tportletDataContext.setSourceCompanyId(sourceCompanyId);\n\n\t\t// Company group id\n\n\t\tlong sourceCompanyGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"company-group-id\"));\n\n\t\tportletDataContext.setSourceCompanyGroupId(sourceCompanyGroupId);\n\n\t\t// Group id\n\n\t\tlong sourceGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"group-id\"));\n\n\t\tportletDataContext.setSourceGroupId(sourceGroupId);\n\n\t\t// User personal site group id\n\n\t\tlong sourceUserPersonalSiteGroupId = GetterUtil.getLong(\n\t\t\t_headerElement.attributeValue(\"user-personal-site-group-id\"));\n\n\t\tportletDataContext.setSourceUserPersonalSiteGroupId(\n\t\t\tsourceUserPersonalSiteGroupId);\n\n\t\t// Read asset categories, asset tags, comments, locks, and ratings\n\t\t// entries to make them available to the data handlers through the\n\t\t// context\n\n\t\tif (importPermissions) {\n\t\t\t_permissionImporter.readPortletDataPermissions(portletDataContext);\n\t\t}\n\n\t\treadAssetCategories(portletDataContext);\n\t\treadAssetTags(portletDataContext);\n\t\treadComments(portletDataContext);\n\t\treadExpandoTables(portletDataContext);\n\t\treadLocks(portletDataContext);\n\t\treadRatingsEntries(portletDataContext);\n\n\t\t// Delete portlet data\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Deleting portlet data\");\n\t\t}\n\n\t\tif (deletePortletData) {\n\t\t\tdeletePortletData(portletDataContext, portletId, plid);\n\t\t}\n\n\t\tElement portletElement = null;\n\n\t\ttry {\n\t\t\tportletElement = _rootElement.element(\"portlet\");\n\n\t\t\tDocument portletDocument = SAXReaderUtil.read(\n\t\t\t\tportletDataContext.getZipEntryAsString(\n\t\t\t\t\tportletElement.attributeValue(\"path\")));\n\n\t\t\tportletElement = portletDocument.getRootElement();\n\t\t}\n\t\tcatch (DocumentException de) {\n\t\t\tthrow new SystemException(de);\n\t\t}\n\n\t\tsetPortletScope(portletDataContext, portletElement);\n\n\t\tElement portletDataElement = portletElement.element(\"portlet-data\");\n\n\t\tboolean importData = importPortletData && (portletDataElement != null);\n\n\t\ttry {\n\n\t\t\t// Portlet preferences\n\n\t\t\timportPortletPreferences(\n\t\t\t\tportletDataContext, layout.getCompanyId(), groupId, layout,\n\t\t\t\tportletId, portletElement, importPortletSetup,\n\t\t\t\timportPortletArchivedSetups, importPortletUserPreferences, true,\n\t\t\t\timportData);\n\n\t\t\t// Portlet data\n\n\t\t\tif (importData) {\n\t\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t\t_log.debug(\"Importing portlet data\");\n\t\t\t\t}\n\n\t\t\t\timportPortletData(\n\t\t\t\t\tportletDataContext, portletId, plid, portletDataElement);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tresetPortletScope(portletDataContext, groupId);\n\t\t}\n\n\t\t// Portlet permissions\n\n\t\tif (importPermissions) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Importing portlet permissions\");\n\t\t\t}\n\n\t\t\tLayoutCache layoutCache = new LayoutCache();\n\n\t\t\t_permissionImporter.importPortletPermissions(\n\t\t\t\tlayoutCache, layout.getCompanyId(), groupId, userId, layout,\n\t\t\t\tportletElement, portletId);\n\n\t\t\tif (userId > 0) {\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.nullSafeGetIndexer(\n\t\t\t\t\tUser.class);\n\n\t\t\t\tindexer.reindex(userId);\n\t\t\t}\n\t\t}\n\n\t\t// Asset links\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Importing asset links\");\n\t\t}\n\n\t\treadAssetLinks(portletDataContext);\n\n\t\tif (_log.isInfoEnabled()) {\n\t\t\t_log.info(\"Importing portlet takes \" + stopWatch.getTime() + \" ms\");\n\t\t}\n\n\t\tzipReader.close();\n\t}","commit_id":"32dad9c8b6c7030939b3e005afb1ff01a26aa8c3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DateHistogramResult(DateHistogramFacet result, String originalQuery, BytesReference builtQuery, Searches.DateHistogramInterval interval, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n\t\tthis.result = result;\n\t\tthis.interval = interval;\n\t}","id":18793,"modified_method":"public DateHistogramResult(DateHistogram result, String originalQuery, BytesReference builtQuery, Searches.DateHistogramInterval interval, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n        this.result = result;\n        this.interval = interval;\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n\tpublic Map<Long, Long> getResults() {\n\t\tMap<Long, Long> results = Maps.newTreeMap();\n\t\t\n\t\tfor (DateHistogramFacet.Entry e : result) {\n\t\t\tresults.put(e.getTime()/1000, e.getCount());\n\t\t}\n\t\t\n\t\treturn results;\n\t}","id":18794,"modified_method":"@Override\n    public Map<Long, Long> getResults() {\n        Map<Long, Long> results = Maps.newTreeMap();\n\n        for (DateHistogram.Bucket bucket : result.getBuckets()) {\n            results.put(bucket.getKeyAsDate().getMillis() / 1000L, bucket.getDocCount());\n        }\n\n        return results;\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public FieldHistogramResult(DateHistogramFacet result, String originalQuery, BytesReference builtQuery, Searches.DateHistogramInterval interval, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n        this.result = result;\n        this.interval = interval;\n    }","id":18795,"modified_method":"public FieldHistogramResult(DateHistogram result, String originalQuery, BytesReference builtQuery, Searches.DateHistogramInterval interval, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n        this.result = result;\n        this.interval = interval;\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public Map<Long, Map<String, Object>> getResults() {\n        Map<Long, Map<String, Object>> results = Maps.newTreeMap();\n        Long minTimestamp = Long.MAX_VALUE;\n        Long maxTimestamp = Long.MIN_VALUE;\n        for (DateHistogramFacet.Entry e : result) {\n            Map<String, Object> resultMap = Maps.newHashMap();\n\n            resultMap.put(\"count\", e.getCount());\n            resultMap.put(\"min\", e.getMin());\n            resultMap.put(\"max\", e.getMax());\n            resultMap.put(\"total\", e.getTotal());\n            resultMap.put(\"total_count\", e.getTotalCount());\n            resultMap.put(\"mean\", e.getMean());\n\n            final long timestamp = e.getTime() / 1000;\n            if (timestamp < minTimestamp) minTimestamp = timestamp;\n            if (timestamp > maxTimestamp) maxTimestamp = timestamp;\n\n            results.put(timestamp, resultMap);\n        }\n        long curTimestamp = minTimestamp;\n        while (curTimestamp < maxTimestamp) {\n            Map<String, Object> entry = results.get(curTimestamp);\n\n            // advance timestamp by the interval's seconds value\n            curTimestamp += interval.getPeriod().toStandardSeconds().getSeconds();\n\n            if (entry != null) {\n                continue;\n            }\n            // synthesize a 0 value for this timestamp\n            entry = Maps.newHashMap();\n            entry.put(\"count\", 0);\n            entry.put(\"min\", 0);\n            entry.put(\"max\", 0);\n            entry.put(\"total\", 0);\n            entry.put(\"total_count\", 0);\n            entry.put(\"mean\", 0);\n            results.put(curTimestamp, entry);\n        }\n        return results;\n    }","id":18796,"modified_method":"public Map<Long, Map<String, Number>> getResults() {\n        Map<Long, Map<String, Number>> results = Maps.newTreeMap();\n        long minTimestamp = Long.MAX_VALUE;\n        long maxTimestamp = Long.MIN_VALUE;\n\n        for (DateHistogram.Bucket b : result.getBuckets()) {\n            Map<String, Number> resultMap = Maps.newHashMap();\n\n            resultMap.put(\"total_count\", b.getDocCount());\n\n            Stats stats = b.getAggregations().get(Searches.AGG_STATS);\n            resultMap.put(\"count\", stats.getCount());\n            resultMap.put(\"min\", stats.getMin());\n            resultMap.put(\"max\", stats.getMax());\n            resultMap.put(\"total\", stats.getSum());\n            resultMap.put(\"mean\", stats.getAvg());\n\n            final long timestamp = b.getKeyAsDate().getMillis() / 1000L;\n            if (timestamp < minTimestamp) minTimestamp = timestamp;\n            if (timestamp > maxTimestamp) maxTimestamp = timestamp;\n\n            results.put(timestamp, resultMap);\n        }\n        long curTimestamp = minTimestamp;\n        while (curTimestamp < maxTimestamp) {\n            Map<String, Number> entry = results.get(curTimestamp);\n\n            // advance timestamp by the interval's seconds value\n            curTimestamp += interval.getPeriod().toStandardSeconds().getSeconds();\n\n            if (entry == null) {\n                // synthesize a 0 value for this timestamp\n                results.put(curTimestamp, EMPTY_RESULT);\n            }\n        }\n        return results;\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public FieldStatsResult(StatisticalFacet f, String originalQuery, BytesReference builtQuery, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n        this.count = f.getCount();\n        this.sum = f.getTotal();\n        this.sumOfSquares = f.getSumOfSquares();\n        this.mean = f.getMean();\n        this.min = f.getMin();\n        this.max = f.getMax();\n        this.variance = f.getVariance();\n        this.stdDeviation = f.getStdDeviation();\n    }","id":18797,"modified_method":"public FieldStatsResult(ExtendedStats f, String originalQuery, BytesReference builtQuery, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n        this.count = f.getCount();\n        this.sum = f.getSum();\n        this.sumOfSquares = f.getSumOfSquares();\n        this.mean = f.getAvg();\n        this.min = f.getMin();\n        this.max = f.getMax();\n        this.variance = f.getVariance();\n        this.stdDeviation = f.getStdDeviation();\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public FieldStatsResult(StatisticalFacet facet, SearchHits searchHits, String query, BytesReference source, TimeValue took) {\n        this(facet, query, source, took);\n        this.searchHits = buildResults(searchHits);\n    }","id":18798,"modified_method":"public FieldStatsResult(ExtendedStats facet, SearchHits searchHits, String query, BytesReference source, TimeValue took) {\n        this(facet, query, source, took);\n        this.searchHits = buildResults(searchHits);\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public FieldStatsResult fieldStats(String field, String query, String filter, TimeRange range) throws FieldTypeException {\n        SearchRequestBuilder srb;\n\n        if (filter == null) {\n            srb = standardSearchRequest(query, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        } else {\n            srb = filteredSearchRequest(query, filter, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        }\n\n        StatisticalFacetBuilder stats = new StatisticalFacetBuilder(STATS_FACET_NAME);\n        stats.global(false);\n\n        stats.facetFilter(standardFilters(range, filter));\n\n        stats.field(field);\n\n        srb.addFacet(stats);\n\n        SearchResponse r;\n        final SearchRequest request;\n        try {\n            request = srb.request();\n            r = c.search(request).actionGet();\n        } catch (org.elasticsearch.action.search.SearchPhaseExecutionException e) {\n            throw new FieldTypeException(e);\n        }\n\n        return new FieldStatsResult(\n                (StatisticalFacet) r.getFacets().facet(STATS_FACET_NAME),\n                r.getHits(),\n                query,\n                request.source(),\n                r.getTook()\n        );\n    }","id":18799,"modified_method":"public FieldStatsResult fieldStats(String field, String query, String filter, TimeRange range) throws FieldTypeException {\n        SearchRequestBuilder srb;\n\n        if (filter == null) {\n            srb = standardSearchRequest(query, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        } else {\n            srb = filteredSearchRequest(query, filter, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        }\n\n        FilterAggregationBuilder builder = AggregationBuilders.filter(AGG_FILTER)\n                .filter(standardFilters(range, filter))\n                .subAggregation(AggregationBuilders.extendedStats(AGG_EXTENDED_STATS).field(field));\n\n        srb.addAggregation(builder);\n\n        SearchResponse r;\n        final SearchRequest request;\n        try {\n            request = srb.request();\n            r = c.search(request).actionGet();\n        } catch (org.elasticsearch.action.search.SearchPhaseExecutionException e) {\n            throw new FieldTypeException(e);\n        }\n\n        final Filter f = r.getAggregations().get(AGG_FILTER);\n        return new FieldStatsResult(\n                (ExtendedStats) f.getAggregations().get(AGG_EXTENDED_STATS),\n                r.getHits(),\n                query,\n                request.source(),\n                r.getTook()\n        );\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public TermsResult terms(String field, int size, String query, String filter, TimeRange range) {\n        if (size == 0) {\n            size = 50;\n        }\n\n        SearchRequestBuilder srb;\n        if (filter == null) {\n            srb = standardSearchRequest(query, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        } else {\n            srb = filteredSearchRequest(query, filter, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        }\n\n        TermsFacetBuilder terms = new TermsFacetBuilder(TERMS_FACET_NAME);\n        terms.global(false);\n        terms.field(field);\n        terms.size(size);\n\n        terms.facetFilter(standardFilters(range, filter));\n\n        srb.addFacet(terms);\n\n        final SearchRequest request = srb.request();\n        SearchResponse r = c.search(request).actionGet();\n\n        return new TermsResult(\n                (TermsFacet) r.getFacets().facet(TERMS_FACET_NAME),\n                query,\n                request.source(),\n                r.getTook()\n        );\n    }","id":18800,"modified_method":"public TermsResult terms(String field, int size, String query, String filter, TimeRange range) {\n        if (size == 0) {\n            size = 50;\n        }\n\n        SearchRequestBuilder srb;\n        if (filter == null) {\n            srb = standardSearchRequest(query, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        } else {\n            srb = filteredSearchRequest(query, filter, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        }\n\n        FilterAggregationBuilder builder = AggregationBuilders.filter(AGG_FILTER)\n                .subAggregation(\n                        AggregationBuilders.terms(AGG_TERMS)\n                                .field(field)\n                                .size(size))\n                .subAggregation(\n                        AggregationBuilders.missing(\"missing\")\n                                .field(field))\n                .filter(standardFilters(range, filter));\n\n        srb.addAggregation(builder);\n\n        final SearchRequest request = srb.request();\n        SearchResponse r = c.search(request).actionGet();\n\n        final Filter f = r.getAggregations().get(AGG_FILTER);\n        return new TermsResult(\n                (Terms) f.getAggregations().get(AGG_TERMS),\n                (Missing) f.getAggregations().get(\"missing\"),\n                f.getDocCount(),\n                query,\n                request.source(),\n                r.getTook()\n        );\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public HistogramResult fieldHistogram(String query, String field, DateHistogramInterval interval, String filter, TimeRange range) throws FieldTypeException {\n        DateHistogramFacetBuilder fb = FacetBuilders.dateHistogramFacet(\"histogram\")\n                .keyField(\"timestamp\")\n                .valueField(field)\n                .interval(interval.toString().toLowerCase());\n\n        fb.facetFilter(standardFilters(range, filter));\n\n        QueryStringQueryBuilder qs = queryString(query);\n        qs.allowLeadingWildcard(configuration.isAllowLeadingWildcardSearches());\n\n        SearchRequestBuilder srb = c.prepareSearch();\n        final Set<String> affectedIndices = IndexHelper.determineAffectedIndices(indexRangeService, deflector, range);\n        srb.setIndices(affectedIndices.toArray(new String[affectedIndices.size()]));\n        srb.setQuery(qs);\n        srb.addFacet(fb);\n\n        SearchResponse r;\n        final SearchRequest request = srb.request();\n        try {\n            r = c.search(request).actionGet();\n        } catch (org.elasticsearch.action.search.SearchPhaseExecutionException e) {\n            throw new FieldTypeException(e);\n        }\n\n        return new FieldHistogramResult((DateHistogramFacet) r.getFacets().facet(\"histogram\"), query, request.source(),\n                interval, r.getTook());\n    }","id":18801,"modified_method":"public HistogramResult fieldHistogram(String query, String field, DateHistogramInterval interval, String filter, TimeRange range) throws FieldTypeException {\n        FilterAggregationBuilder builder = AggregationBuilders.filter(AGG_FILTER)\n                .subAggregation(\n                        AggregationBuilders.dateHistogram(AGG_HISTOGRAM)\n                                .field(\"timestamp\")\n                                .subAggregation(AggregationBuilders.stats(AGG_STATS).field(field))\n                                .interval(interval.getPeriod().toStandardDuration().getMillis())\n                )\n                .filter(standardFilters(range, filter));\n\n        QueryStringQueryBuilder qs = queryString(query);\n        qs.allowLeadingWildcard(configuration.isAllowLeadingWildcardSearches());\n\n        SearchRequestBuilder srb = c.prepareSearch();\n        final Set<String> affectedIndices = IndexHelper.determineAffectedIndices(indexRangeService, deflector, range);\n        srb.setIndices(affectedIndices.toArray(new String[affectedIndices.size()]));\n        srb.setQuery(qs);\n        srb.addAggregation(builder);\n\n        SearchResponse r;\n        final SearchRequest request = srb.request();\n        try {\n            r = c.search(request).actionGet();\n        } catch (org.elasticsearch.action.search.SearchPhaseExecutionException e) {\n            throw new FieldTypeException(e);\n        }\n\n        final Filter f = r.getAggregations().get(AGG_FILTER);\n        return new FieldHistogramResult(\n                (DateHistogram) f.getAggregations().get(AGG_HISTOGRAM),\n                query,\n                request.source(),\n                interval,\n                r.getTook());\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public HistogramResult histogram(String query, DateHistogramInterval interval, String filter, TimeRange range) {\n        DateHistogramFacetBuilder fb = FacetBuilders.dateHistogramFacet(\"histogram\")\n                .field(\"timestamp\")\n                .interval(interval.toString().toLowerCase());\n\n        fb.facetFilter(standardFilters(range, filter));\n\n        QueryStringQueryBuilder qs = queryString(query);\n        qs.allowLeadingWildcard(configuration.isAllowLeadingWildcardSearches());\n\n        SearchRequestBuilder srb = c.prepareSearch();\n        final Set<String> affectedIndices = IndexHelper.determineAffectedIndices(indexRangeService, deflector, range);\n        srb.setIndices(affectedIndices.toArray(new String[affectedIndices.size()]));\n        srb.setQuery(qs);\n        srb.addFacet(fb);\n\n        final SearchRequest request = srb.request();\n        SearchResponse r = c.search(request).actionGet();\n        return new DateHistogramResult((DateHistogramFacet) r.getFacets().facet(\"histogram\"), query,\n                request.source(),\n                interval, r.getTook());\n    }","id":18802,"modified_method":"public HistogramResult histogram(String query, DateHistogramInterval interval, String filter, TimeRange range) {\n        FilterAggregationBuilder builder = AggregationBuilders.filter(AGG_FILTER)\n                .subAggregation(\n                        AggregationBuilders.dateHistogram(AGG_HISTOGRAM)\n                                .field(\"timestamp\")\n                                .interval(interval.getPeriod().toStandardDuration().getMillis()))\n                .filter(standardFilters(range, filter));\n\n        QueryStringQueryBuilder qs = queryString(query);\n        qs.allowLeadingWildcard(configuration.isAllowLeadingWildcardSearches());\n\n        SearchRequestBuilder srb = c.prepareSearch();\n        final Set<String> affectedIndices = IndexHelper.determineAffectedIndices(indexRangeService, deflector, range);\n        srb.setIndices(affectedIndices.toArray(new String[affectedIndices.size()]));\n        srb.setQuery(qs);\n        srb.addAggregation(builder);\n\n        final SearchRequest request = srb.request();\n        SearchResponse r = c.search(request).actionGet();\n\n        final Filter f = r.getAggregations().get(AGG_FILTER);\n        return new DateHistogramResult(\n                (DateHistogram) f.getAggregations().get(AGG_HISTOGRAM),\n                query,\n                request.source(),\n                interval,\n                r.getTook());\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public TermsStatsResult termsStats(String keyField, String valueField, TermsStatsOrder order, int size, String query, String filter, TimeRange range) {\n        if (size == 0) {\n            size = 50;\n        }\n\n        SearchRequestBuilder srb;\n        if (filter == null) {\n            srb = standardSearchRequest(query, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        } else {\n            srb = filteredSearchRequest(query, filter, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        }\n\n        TermsStatsFacetBuilder stats = new TermsStatsFacetBuilder(TERMS_STATS_FACET_NAME);\n        stats.global(false);\n        stats.keyField(keyField);\n        stats.valueField(valueField);\n        stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));\n        stats.size(size);\n\n        stats.facetFilter(standardFilters(range, filter));\n\n        srb.addFacet(stats);\n\n        final SearchRequest request = srb.request();\n        SearchResponse r = c.search(request).actionGet();\n\n        return new TermsStatsResult(\n                (TermsStatsFacet) r.getFacets().facet(TERMS_STATS_FACET_NAME),\n                query,\n                request.source(),\n                r.getTook()\n        );\n    }","id":18803,"modified_method":"public TermsStatsResult termsStats(String keyField, String valueField, TermsStatsOrder order, int size, String query, String filter, TimeRange range) {\n        if (size == 0) {\n            size = 50;\n        }\n\n        SearchRequestBuilder srb;\n        if (filter == null) {\n            srb = standardSearchRequest(query, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        } else {\n            srb = filteredSearchRequest(query, filter, IndexHelper.determineAffectedIndices(indexRangeService, deflector, range));\n        }\n\n\n        Terms.Order termsOrder;\n        switch (order) {\n            case COUNT:\n                termsOrder = Terms.Order.count(true);\n                break;\n            case REVERSE_COUNT:\n                termsOrder = Terms.Order.count(false);\n                break;\n            case TERM:\n                termsOrder = Terms.Order.term(true);\n                break;\n            case REVERSE_TERM:\n                termsOrder = Terms.Order.term(false);\n                break;\n            case MIN:\n                termsOrder = Terms.Order.aggregation(AGG_STATS, \"min\", true);\n                break;\n            case REVERSE_MIN:\n                termsOrder = Terms.Order.aggregation(AGG_STATS, \"min\", false);\n                break;\n            case MAX:\n                termsOrder = Terms.Order.aggregation(AGG_STATS, \"max\", true);\n                break;\n            case REVERSE_MAX:\n                termsOrder = Terms.Order.aggregation(AGG_STATS, \"max\", false);\n                break;\n            case MEAN:\n                termsOrder = Terms.Order.aggregation(AGG_STATS, \"avg\", true);\n                break;\n            case REVERSE_MEAN:\n                termsOrder = Terms.Order.aggregation(AGG_STATS, \"avg\", false);\n                break;\n            case TOTAL:\n                termsOrder = Terms.Order.aggregation(AGG_STATS, \"sum\", true);\n                break;\n            case REVERSE_TOTAL:\n                termsOrder = Terms.Order.aggregation(AGG_STATS, \"sum\", false);\n                break;\n            default:\n                termsOrder = Terms.Order.count(true);\n        }\n\n        FilterAggregationBuilder builder = AggregationBuilders.filter(AGG_FILTER)\n                .subAggregation(\n                        AggregationBuilders.terms(AGG_TERMS_STATS)\n                                .field(keyField)\n                                .subAggregation(AggregationBuilders.stats(AGG_STATS).field(valueField))\n                                .order(termsOrder)\n                                .size(size))\n                .filter(standardFilters(range, filter));\n\n        srb.addAggregation(builder);\n\n        final SearchRequest request = srb.request();\n        SearchResponse r = c.search(request).actionGet();\n\n        final Filter f = r.getAggregations().get(AGG_FILTER);\n        return new TermsStatsResult(\n                (Terms) f.getAggregations().get(AGG_TERMS_STATS),\n                query,\n                request.source(),\n                r.getTook()\n        );\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static SourcesList create(int total, Map<String, Integer> sources, long tookMs, int range) {\n        return new AutoValue_SourcesList(total, sources, tookMs, range);\n    }","id":18804,"modified_method":"public static SourcesList create(int total, Map<String, Long> sources, long tookMs, int range) {\n        return new AutoValue_SourcesList(total, sources, tookMs, range);\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@JsonProperty\n    public abstract Map<String, Integer> sources();","id":18805,"modified_method":"@JsonProperty\n    public abstract Map<String, Long> sources();","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@JsonProperty\n    public abstract Map<String, Integer> terms();","id":18806,"modified_method":"@JsonProperty\n    public abstract Map<String, Long> terms();","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static TermsResult create(long time,\n                                     Map<String, Integer> terms,\n                                     long missing,\n                                     long other,\n                                     long total,\n                                     String builtQuery) {\n        return new AutoValue_TermsResult(time, terms, missing, other, total, builtQuery);\n    }","id":18807,"modified_method":"public static TermsResult create(long time,\n                                     Map<String, Long> terms,\n                                     long missing,\n                                     long other,\n                                     long total,\n                                     String builtQuery) {\n        return new AutoValue_TermsResult(time, terms, missing, other, total, builtQuery);\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public Map<String, Integer> getTerms() {\n        return terms;\n    }","id":18808,"modified_method":"public Map<String, Long> getTerms() {\n        return terms;\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public TermsResult(TermsFacet f, String originalQuery, BytesReference builtQuery, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n        this.total = f.getTotalCount();\n        this.missing = f.getMissingCount();\n        this.other = f.getOtherCount();\n\n        this.terms = buildTermsMap(f.getEntries());\n    }","id":18809,"modified_method":"public TermsResult(Terms f, Missing m, long totalCount, String originalQuery, BytesReference builtQuery, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n        this.total = totalCount;\n        this.missing = m.getDocCount();\n        this.other = f.getSumOfOtherDocCounts();\n        this.terms = buildTermsMap(f.getBuckets());\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public List<Map<String, Object>> getResults() {\n        List<Map<String, Object>> results = Lists.newArrayList();\n\n        for (TermsStatsFacet.Entry e : facet.getEntries()) {\n            Map<String, Object> resultMap = Maps.newHashMap();\n\n            resultMap.put(\"key_field\", e.getTerm().toString());\n\n            resultMap.put(\"count\", e.getCount());\n            resultMap.put(\"min\", e.getMin());\n            resultMap.put(\"max\", e.getMax());\n            resultMap.put(\"total\", e.getTotal());\n            resultMap.put(\"total_count\", e.getTotalCount());\n            resultMap.put(\"mean\", e.getMean());\n\n            results.add(resultMap);\n        }\n\n        // Sort results by descending mean value\n        Collections.sort(results, new Comparator<Map<String, Object>>() {\n            @Override\n            public int compare(Map<String, Object> o1, Map<String, Object> o2) {\n                double o1Mean = (double)o1.get(\"mean\");\n                double o2Mean = (double)o2.get(\"mean\");\n                if (o1Mean > o2Mean) {\n                    return -1;\n                } else if (o1Mean < o2Mean) {\n                    return 1;\n                }\n                return 0;\n            }\n        });\n\n        return results;\n    }","id":18810,"modified_method":"public List<Map<String, Object>> getResults() {\n        List<Map<String, Object>> results = Lists.newArrayList();\n\n        for (Terms.Bucket e : facet.getBuckets()) {\n            Map<String, Object> resultMap = Maps.newHashMap();\n\n            resultMap.put(\"key_field\", e.getKey());\n\n            resultMap.put(\"count\", e.getDocCount());\n\n            final Stats stats = e.getAggregations().get(Searches.AGG_STATS);\n            resultMap.put(\"min\", stats.getMin());\n            resultMap.put(\"max\", stats.getMax());\n            resultMap.put(\"total\", stats.getSum());\n            resultMap.put(\"total_count\", stats.getCount());\n            resultMap.put(\"mean\", stats.getAvg());\n\n            results.add(resultMap);\n        }\n\n        // Sort results by descending mean value\n        Collections.sort(results, COMPARATOR);\n\n        return results;\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public TermsStatsResult(TermsStatsFacet facet, String originalQuery, BytesReference builtQuery, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n        this.facet = facet;\n    }","id":18811,"modified_method":"public TermsStatsResult(Terms facet, String originalQuery, BytesReference builtQuery, TimeValue took) {\n        super(originalQuery, builtQuery, took);\n\n        this.facet = facet;\n    }","commit_id":"a58d06c3f413b136b6afcb02a70cc0242d3a7446","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"/**\n     * Remove a wrapper from an existing context.\n     *\n     * @param hostName Virtual host name this wrapper belongs to\n     * @param contextPath Context path this wrapper belongs to\n     * @param path Wrapper mapping\n     */\n    public void removeWrapper(String hostName, String contextPath,\n            String version, String path) {\n        MappedHost host = exactFind(hosts, hostName);\n        if (host == null) {\n            return;\n        }\n        MappedContext context = exactFind(host.contextList.contexts,\n                contextPath);\n        if (context == null) {\n            return;\n        }\n        ContextVersion contextVersion = exactFind(context.versions, version);\n        if (contextVersion == null) {\n            return;\n        }\n        removeWrapper(contextVersion, path);\n    }","id":18812,"modified_method":"/**\n     * Remove a wrapper from an existing context.\n     *\n     * @param hostName Virtual host name this wrapper belongs to\n     * @param contextPath Context path this wrapper belongs to\n     * @param path Wrapper mapping\n     */\n    public void removeWrapper(String hostName, String contextPath,\n            String version, String path) {\n        ContextVersion contextVersion = findContextVersion(hostName,\n                contextPath, version, true);\n        if (contextVersion == null) {\n            return;\n        }\n        removeWrapper(contextVersion, path);\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Add a welcome file to the given context.\n     *\n     * @param hostName\n     * @param contextPath\n     * @param welcomeFile\n     */\n    public void addWelcomeFile(String hostName, String contextPath,\n            String version, String welcomeFile) {\n        MappedHost host = exactFind(hosts, hostName);\n        if (host == null) {\n            return;\n        }\n        MappedContext context = exactFind(host.contextList.contexts,\n                contextPath);\n        if (context == null) {\n            log.error(\"No context found: \" + contextPath);\n            return;\n        }\n        ContextVersion contextVersion = exactFind(context.versions, version);\n        if (contextVersion == null) {\n            log.error(\"No context version found: \" + contextPath + \" \"\n                    + version);\n            return;\n        }\n        int len = contextVersion.welcomeResources.length + 1;\n        String[] newWelcomeResources = new String[len];\n        System.arraycopy(contextVersion.welcomeResources, 0,\n                newWelcomeResources, 0, len - 1);\n        newWelcomeResources[len - 1] = welcomeFile;\n        contextVersion.welcomeResources = newWelcomeResources;\n    }","id":18813,"modified_method":"/**\n     * Add a welcome file to the given context.\n     *\n     * @param hostName\n     * @param contextPath\n     * @param welcomeFile\n     */\n    public void addWelcomeFile(String hostName, String contextPath,\n            String version, String welcomeFile) {\n        ContextVersion contextVersion = findContextVersion(hostName,\n                contextPath, version, false);\n        if (contextVersion == null) {\n            return;\n        }\n        int len = contextVersion.welcomeResources.length + 1;\n        String[] newWelcomeResources = new String[len];\n        System.arraycopy(contextVersion.welcomeResources, 0,\n                newWelcomeResources, 0, len - 1);\n        newWelcomeResources[len - 1] = welcomeFile;\n        contextVersion.welcomeResources = newWelcomeResources;\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"public void addWrapper(String hostName, String contextPath, String version,\n                           String path, Wrapper wrapper, boolean jspWildCard,\n                           boolean resourceOnly) {\n        MappedHost host = exactFind(hosts, hostName);\n        if (host == null) {\n            return;\n        }\n        MappedContext context = exactFind(host.contextList.contexts,\n                contextPath);\n        if (context == null) {\n            log.error(\"No context found: \" + contextPath );\n            return;\n        }\n        ContextVersion contextVersion = exactFind(context.versions, version);\n        if (contextVersion == null) {\n            log.error(\"No context version found: \" + contextPath + \" \" +\n                    version);\n            return;\n        }\n        addWrapper(contextVersion, path, wrapper, jspWildCard, resourceOnly);\n    }","id":18814,"modified_method":"public void addWrapper(String hostName, String contextPath, String version,\n                           String path, Wrapper wrapper, boolean jspWildCard,\n                           boolean resourceOnly) {\n        ContextVersion contextVersion = findContextVersion(hostName,\n                contextPath, version, false);\n        if (contextVersion == null) {\n            return;\n        }\n        addWrapper(contextVersion, path, wrapper, jspWildCard, resourceOnly);\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Add a new Context to an existing Host.\n     *\n     * @param hostName Virtual host name this context belongs to\n     * @param host Host object\n     * @param path Context path\n     * @param version Context version\n     * @param context Context object\n     * @param welcomeResources Welcome files defined for this context\n     * @param resources Static resources of the context\n     */\n    public void addContextVersion(String hostName, Host host, String path,\n            String version, Context context, String[] welcomeResources,\n            WebResourceRoot resources) {\n\n        MappedHost mappedHost  = exactFind(hosts, hostName);\n        if (mappedHost == null) {\n            addHost(hostName, new String[0], host);\n            mappedHost = exactFind(hosts, hostName);\n            if (mappedHost == null) {\n                log.error(\"No host found: \" + hostName);\n                return;\n            }\n        }\n        if (mappedHost.isAlias()) {\n            log.error(\"No host found: \" + hostName);\n            return;\n        }\n        int slashCount = slashCount(path);\n        synchronized (mappedHost) {\n            ContextVersion newContextVersion = new ContextVersion(version,\n                    path, slashCount, context, resources, welcomeResources);\n\n            ContextList contextList = mappedHost.contextList;\n            MappedContext mappedContext = exactFind(contextList.contexts, path);\n            if (mappedContext == null) {\n                mappedContext = new MappedContext(path, newContextVersion);\n                ContextList newContextList = contextList.addContext(\n                        mappedContext, slashCount);\n                if (newContextList != null) {\n                    updateContextList(mappedHost, newContextList);\n                    contextObjectToContextVersionMap.put(context, newContextVersion);\n                }\n            } else {\n                ContextVersion[] contextVersions = mappedContext.versions;\n                ContextVersion[] newContextVersions = new ContextVersion[contextVersions.length + 1];\n                if (insertMap(contextVersions, newContextVersions,\n                        newContextVersion)) {\n                    mappedContext.versions = newContextVersions;\n                    contextObjectToContextVersionMap.put(context, newContextVersion);\n                }\n            }\n        }\n\n    }","id":18815,"modified_method":"/**\n     * Add a new Context to an existing Host.\n     *\n     * @param hostName Virtual host name this context belongs to\n     * @param host Host object\n     * @param path Context path\n     * @param version Context version\n     * @param context Context object\n     * @param welcomeResources Welcome files defined for this context\n     * @param resources Static resources of the context\n     * @deprecated Use {@link #addContextVersion(String, Host, String, String, Context, String[], WebResourceRoot, Collection)}\n     */\n    @Deprecated\n    public void addContextVersion(String hostName, Host host, String path,\n            String version, Context context, String[] welcomeResources,\n            WebResourceRoot resources) {\n        addContextVersion(hostName, host, path, version, context,\n                welcomeResources, resources, null);\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Remove a welcome file from the given context.\n     *\n     * @param hostName\n     * @param contextPath\n     * @param welcomeFile\n     */\n    public void removeWelcomeFile(String hostName, String contextPath,\n            String version, String welcomeFile) {\n        MappedHost host = exactFind(hosts, hostName);\n        if (host == null) {\n            return;\n        }\n        MappedContext context = exactFind(host.contextList.contexts,\n                contextPath);\n        if (context == null) {\n            log.error(\"No context found: \" + contextPath);\n            return;\n        }\n        ContextVersion contextVersion = exactFind(context.versions, version);\n        if (contextVersion == null) {\n            log.error(\"No context version found: \" + contextPath + \" \"\n                    + version);\n            return;\n        }\n        int match = -1;\n        for (int i = 0; i < contextVersion.welcomeResources.length; i++) {\n            if (welcomeFile.equals(contextVersion.welcomeResources[i])) {\n                match = i;\n                break;\n            }\n        }\n        if (match > -1) {\n            int len = contextVersion.welcomeResources.length - 1;\n            String[] newWelcomeResources = new String[len];\n            System.arraycopy(contextVersion.welcomeResources, 0,\n                    newWelcomeResources, 0, match);\n            if (match < len) {\n                System.arraycopy(contextVersion.welcomeResources, match + 1,\n                        newWelcomeResources, match, len - match);\n            }\n            contextVersion.welcomeResources = newWelcomeResources;\n        }\n    }","id":18816,"modified_method":"/**\n     * Remove a welcome file from the given context.\n     *\n     * @param hostName\n     * @param contextPath\n     * @param welcomeFile\n     */\n    public void removeWelcomeFile(String hostName, String contextPath,\n            String version, String welcomeFile) {\n        ContextVersion contextVersion = findContextVersion(hostName,\n                contextPath, version, false);\n        if (contextVersion == null) {\n            return;\n        }\n        int match = -1;\n        for (int i = 0; i < contextVersion.welcomeResources.length; i++) {\n            if (welcomeFile.equals(contextVersion.welcomeResources[i])) {\n                match = i;\n                break;\n            }\n        }\n        if (match > -1) {\n            int len = contextVersion.welcomeResources.length - 1;\n            String[] newWelcomeResources = new String[len];\n            System.arraycopy(contextVersion.welcomeResources, 0,\n                    newWelcomeResources, 0, match);\n            if (match < len) {\n                System.arraycopy(contextVersion.welcomeResources, match + 1,\n                        newWelcomeResources, match, len - match);\n            }\n            contextVersion.welcomeResources = newWelcomeResources;\n        }\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Clear the welcome files for the given context.\n     *\n     * @param hostName\n     * @param contextPath\n     */\n    public void clearWelcomeFiles(String hostName, String contextPath,\n            String version) {\n        MappedHost host = exactFind(hosts, hostName);\n        if (host == null) {\n            return;\n        }\n        MappedContext context = exactFind(host.contextList.contexts,\n                contextPath);\n        if (context == null) {\n            log.error(\"No context found: \" + contextPath);\n            return;\n        }\n        ContextVersion contextVersion = exactFind(context.versions, version);\n        if (contextVersion == null) {\n            log.error(\"No context version found: \" + contextPath + \" \"\n                    + version);\n            return;\n        }\n        contextVersion.welcomeResources = new String[0];\n    }","id":18817,"modified_method":"/**\n     * Clear the welcome files for the given context.\n     *\n     * @param hostName\n     * @param contextPath\n     */\n    public void clearWelcomeFiles(String hostName, String contextPath,\n            String version) {\n        ContextVersion contextVersion = findContextVersion(hostName,\n                contextPath, version, false);\n        if (contextVersion == null) {\n            return;\n        }\n        contextVersion.welcomeResources = new String[0];\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Register wrapper.\n     */\n    private void registerWrapper(Wrapper wrapper) {\n\n        String wrapperName = wrapper.getName();\n        Context context = (Context) wrapper.getParent();\n        String contextPath = context.getPath();\n        if (\"/\".equals(contextPath)) {\n            contextPath = \"\";\n        }\n        String version = context.getWebappVersion();\n        String hostName = context.getParent().getName();\n\n        String[] mappings = wrapper.findMappings();\n\n        for (String mapping : mappings) {\n            boolean jspWildCard = (wrapperName.equals(\"jsp\")\n                                   && mapping.endsWith(\"/*\"));\n            mapper.addWrapper(hostName, contextPath, version, mapping, wrapper,\n                              jspWildCard,\n                              context.isResourceOnlyServlet(wrapperName));\n        }\n\n        if(log.isDebugEnabled()) {\n            log.debug(sm.getString(\"mapperListener.registerWrapper\",\n                    wrapperName, contextPath, service));\n        }\n    }","id":18818,"modified_method":"/**\n     * Register wrapper.\n     */\n    private void registerWrapper(Wrapper wrapper) {\n\n        Context context = (Context) wrapper.getParent();\n        String contextPath = context.getPath();\n        if (\"/\".equals(contextPath)) {\n            contextPath = \"\";\n        }\n        String version = context.getWebappVersion();\n        String hostName = context.getParent().getName();\n\n        List<WrapperMappingInfo> wrappers = new ArrayList<>();\n        prepareWrapperMappingInfo(context, wrapper, wrappers);\n        mapper.addWrappers(hostName, contextPath, version, wrappers);\n\n        if(log.isDebugEnabled()) {\n            log.debug(sm.getString(\"mapperListener.registerWrapper\",\n                    wrapper.getName(), contextPath, service));\n        }\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Register context.\n     */\n    private void registerContext(Context context) {\n\n        String contextPath = context.getPath();\n        if (\"/\".equals(contextPath)) {\n            contextPath = \"\";\n        }\n        Host host = (Host)context.getParent();\n\n        WebResourceRoot resources = context.getResources();\n        String[] welcomeFiles = context.findWelcomeFiles();\n\n        mapper.addContextVersion(host.getName(), host, contextPath,\n                context.getWebappVersion(), context, welcomeFiles, resources);\n\n        for (Container container : context.findChildren()) {\n            registerWrapper((Wrapper) container);\n        }\n\n        if(log.isDebugEnabled()) {\n            log.debug(sm.getString(\"mapperListener.registerContext\",\n                    contextPath, service));\n        }\n    }","id":18819,"modified_method":"/**\n     * Register context.\n     */\n    private void registerContext(Context context) {\n\n        String contextPath = context.getPath();\n        if (\"/\".equals(contextPath)) {\n            contextPath = \"\";\n        }\n        Host host = (Host)context.getParent();\n\n        WebResourceRoot resources = context.getResources();\n        String[] welcomeFiles = context.findWelcomeFiles();\n        List<WrapperMappingInfo> wrappers = new ArrayList<>();\n\n        for (Container container : context.findChildren()) {\n            prepareWrapperMappingInfo(context, (Wrapper) container, wrappers);\n\n            if(log.isDebugEnabled()) {\n                log.debug(sm.getString(\"mapperListener.registerWrapper\",\n                        container.getName(), contextPath, service));\n            }\n        }\n\n        mapper.addContextVersion(host.getName(), host, contextPath,\n                context.getWebappVersion(), context, welcomeFiles, resources,\n                wrappers);\n\n        if(log.isDebugEnabled()) {\n            log.debug(sm.getString(\"mapperListener.registerContext\",\n                    contextPath, service));\n        }\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Unregister wrapper.\n     */\n    private void unregisterWrapper(Wrapper wrapper) {\n\n        String contextPath = ((Context) wrapper.getParent()).getPath();\n        String wrapperName = wrapper.getName();\n\n        if (\"/\".equals(contextPath)) {\n            contextPath = \"\";\n        }\n        String version = ((Context) wrapper.getParent()).getWebappVersion();\n        String hostName = wrapper.getParent().getParent().getName();\n\n        String[] mappings = wrapper.findMappings();\n\n        for (String mapping : mappings) {\n            mapper.removeWrapper(hostName, contextPath, version,  mapping);\n        }\n\n        if(log.isDebugEnabled()) {\n            log.debug(sm.getString(\"mapperListener.unregisterWrapper\",\n                    wrapperName, contextPath, service));\n        }\n    }","id":18820,"modified_method":"/**\n     * Unregister wrapper.\n     */\n    private void unregisterWrapper(Wrapper wrapper) {\n\n        Context context = ((Context) wrapper.getParent());\n        String contextPath = context.getPath();\n        String wrapperName = wrapper.getName();\n\n        if (\"/\".equals(contextPath)) {\n            contextPath = \"\";\n        }\n        String version = context.getWebappVersion();\n        String hostName = wrapper.getParent().getParent().getName();\n\n        String[] mappings = wrapper.findMappings();\n\n        for (String mapping : mappings) {\n            mapper.removeWrapper(hostName, contextPath, version,  mapping);\n        }\n\n        if(log.isDebugEnabled()) {\n            log.debug(sm.getString(\"mapperListener.unregisterWrapper\",\n                    wrapperName, contextPath, service));\n        }\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testContextListConcurrencyBug56653() throws Exception {\n        final Host host = createHost(\"localhost\");\n        final Context contextRoot = createContext(\"ROOT\");\n        final Context context1 = createContext(\"foo\");\n        final Context context2 = createContext(\"foo#bar\");\n        final Context context3 = createContext(\"foo#bar#bla\");\n        final Context context4 = createContext(\"foo#bar#bla#baz\");\n\n        mapper.addHost(\"localhost\", new String[] { \"alias\" }, host);\n        mapper.setDefaultHostName(\"localhost\");\n\n        mapper.addContextVersion(\"localhost\", host, \"\", \"0\", contextRoot,\n                new String[0], null);\n        mapper.addContextVersion(\"localhost\", host, \"/foo\", \"0\", context1,\n                new String[0], null);\n        mapper.addContextVersion(\"localhost\", host, \"/foo/bar\", \"0\", context2,\n                new String[0], null);\n        mapper.addContextVersion(\"localhost\", host, \"/foo/bar/bla\", \"0\",\n                context3, new String[0], null);\n        mapper.addContextVersion(\"localhost\", host, \"/foo/bar/bla/baz\", \"0\",\n                context4, new String[0], null);\n\n        final AtomicBoolean running = new AtomicBoolean(true);\n        Thread t = new Thread() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 100000; i++) {\n                    mapper.removeContextVersion(context4, \"localhost\",\n                            \"/foo/bar/bla/baz\", \"0\");\n                    mapper.addContextVersion(\"localhost\", host,\n                            \"/foo/bar/bla/baz\", \"0\", context4, new String[0],\n                            null);\n                }\n                running.set(false);\n            }\n        };\n\n        MappingData mappingData = new MappingData();\n        MessageBytes hostMB = MessageBytes.newInstance();\n        hostMB.setString(\"localhost\");\n        MessageBytes aliasMB = MessageBytes.newInstance();\n        aliasMB.setString(\"alias\");\n        MessageBytes uriMB = MessageBytes.newInstance();\n        char[] uri = \"/foo/bar/bla/bobou/foo\".toCharArray();\n        uriMB.setChars(uri, 0, uri.length);\n\n        mapper.map(hostMB, uriMB, null, mappingData);\n        assertEquals(\"/foo/bar/bla\", mappingData.contextPath.toString());\n\n        mappingData.recycle();\n        uriMB.setChars(uri, 0, uri.length);\n        mapper.map(aliasMB, uriMB, null, mappingData);\n        assertEquals(\"/foo/bar/bla\", mappingData.contextPath.toString());\n\n        t.start();\n        while (running.get()) {\n            mappingData.recycle();\n            uriMB.setChars(uri, 0, uri.length);\n            mapper.map(hostMB, uriMB, null, mappingData);\n            assertEquals(\"/foo/bar/bla\", mappingData.contextPath.toString());\n\n            mappingData.recycle();\n            uriMB.setChars(uri, 0, uri.length);\n            mapper.map(aliasMB, uriMB, null, mappingData);\n            assertEquals(\"/foo/bar/bla\", mappingData.contextPath.toString());\n        }\n    }","id":18821,"modified_method":"@Test\n    public void testContextListConcurrencyBug56653() throws Exception {\n        final Host host = createHost(\"localhost\");\n        final Context contextRoot = createContext(\"ROOT\");\n        final Context context1 = createContext(\"foo\");\n        final Context context2 = createContext(\"foo#bar\");\n        final Context context3 = createContext(\"foo#bar#bla\");\n        final Context context4 = createContext(\"foo#bar#bla#baz\");\n\n        mapper.addHost(\"localhost\", new String[] { \"alias\" }, host);\n        mapper.setDefaultHostName(\"localhost\");\n\n        mapper.addContextVersion(\"localhost\", host, \"\", \"0\", contextRoot,\n                new String[0], null, null);\n        mapper.addContextVersion(\"localhost\", host, \"/foo\", \"0\", context1,\n                new String[0], null, null);\n        mapper.addContextVersion(\"localhost\", host, \"/foo/bar\", \"0\", context2,\n                new String[0], null, null);\n        mapper.addContextVersion(\"localhost\", host, \"/foo/bar/bla\", \"0\",\n                context3, new String[0], null, null);\n        mapper.addContextVersion(\"localhost\", host, \"/foo/bar/bla/baz\", \"0\",\n                context4, new String[0], null, null);\n\n        final AtomicBoolean running = new AtomicBoolean(true);\n        Thread t = new Thread() {\n            @Override\n            public void run() {\n                for (int i = 0; i < 100000; i++) {\n                    mapper.removeContextVersion(context4, \"localhost\",\n                            \"/foo/bar/bla/baz\", \"0\");\n                    mapper.addContextVersion(\"localhost\", host,\n                            \"/foo/bar/bla/baz\", \"0\", context4, new String[0],\n                            null, null);\n                }\n                running.set(false);\n            }\n        };\n\n        MappingData mappingData = new MappingData();\n        MessageBytes hostMB = MessageBytes.newInstance();\n        hostMB.setString(\"localhost\");\n        MessageBytes aliasMB = MessageBytes.newInstance();\n        aliasMB.setString(\"alias\");\n        MessageBytes uriMB = MessageBytes.newInstance();\n        char[] uri = \"/foo/bar/bla/bobou/foo\".toCharArray();\n        uriMB.setChars(uri, 0, uri.length);\n\n        mapper.map(hostMB, uriMB, null, mappingData);\n        assertEquals(\"/foo/bar/bla\", mappingData.contextPath.toString());\n\n        mappingData.recycle();\n        uriMB.setChars(uri, 0, uri.length);\n        mapper.map(aliasMB, uriMB, null, mappingData);\n        assertEquals(\"/foo/bar/bla\", mappingData.contextPath.toString());\n\n        t.start();\n        while (running.get()) {\n            mappingData.recycle();\n            uriMB.setChars(uri, 0, uri.length);\n            mapper.map(hostMB, uriMB, null, mappingData);\n            assertEquals(\"/foo/bar/bla\", mappingData.contextPath.toString());\n\n            mappingData.recycle();\n            uriMB.setChars(uri, 0, uri.length);\n            mapper.map(aliasMB, uriMB, null, mappingData);\n            assertEquals(\"/foo/bar/bla\", mappingData.contextPath.toString());\n        }\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"@Before\n    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n        mapper = new Mapper();\n\n        mapper.addHost(\"sjbjdvwsbvhrb\", new String[0], createHost(\"blah1\"));\n        mapper.addHost(\"sjbjdvwsbvhr/\", new String[0], createHost(\"blah1\"));\n        mapper.addHost(\"wekhfewuifweuibf\", new String[0], createHost(\"blah2\"));\n        mapper.addHost(\"ylwrehirkuewh\", new String[0], createHost(\"blah3\"));\n        mapper.addHost(\"iohgeoihro\", new String[0], createHost(\"blah4\"));\n        mapper.addHost(\"fwehoihoihwfeo\", new String[0], createHost(\"blah5\"));\n        mapper.addHost(\"owefojiwefoi\", new String[0], createHost(\"blah6\"));\n        mapper.addHost(\"iowejoiejfoiew\", new String[0], createHost(\"blah7\"));\n        mapper.addHost(\"ohewoihfewoih\", new String[0], createHost(\"blah8\"));\n        mapper.addHost(\"fewohfoweoih\", new String[0], createHost(\"blah9\"));\n        mapper.addHost(\"ttthtiuhwoih\", new String[0], createHost(\"blah10\"));\n        mapper.addHost(\"lkwefjwojweffewoih\", new String[0], createHost(\"blah11\"));\n        mapper.addHost(\"zzzuyopjvewpovewjhfewoih\", new String[0], createHost(\"blah12\"));\n        mapper.addHost(\"xxxxgqwiwoih\", new String[0], createHost(\"blah13\"));\n        mapper.addHost(\"qwigqwiwoih\", new String[0], createHost(\"blah14\"));\n        mapper.addHostAlias(\"iowejoiejfoiew\", \"iowejoiejfoiew_alias\");\n\n        mapper.setDefaultHostName(\"ylwrehirkuewh\");\n\n        String[] welcomes = new String[2];\n        welcomes[0] = \"boo/baba\";\n        welcomes[1] = \"bobou\";\n\n        Host host = createHost(\"blah7\");\n        mapper.addContextVersion(\"iowejoiejfoiew\", host, \"\",\n                \"0\", createContext(\"context0\"), new String[0], null);\n        mapper.addContextVersion(\"iowejoiejfoiew\", host, \"/foo\",\n                \"0\", createContext(\"context1\"), new String[0], null);\n        mapper.addContextVersion(\"iowejoiejfoiew\", host, \"/foo/bar\",\n                \"0\", createContext(\"context2\"), welcomes, null);\n        mapper.addContextVersion(\"iowejoiejfoiew\", host, \"/foo/bar/bla\",\n                \"0\", createContext(\"context3\"), new String[0], null);\n\n        mapper.addWrapper(\"iowejoiejfoiew\", \"/foo/bar\", \"0\", \"/fo/*\",\n                createWrapper(\"wrapper0\"), false, false);\n        mapper.addWrapper(\"iowejoiejfoiew\", \"/foo/bar\", \"0\", \"/\",\n                createWrapper(\"wrapper1\"), false, false);\n        mapper.addWrapper(\"iowejoiejfoiew\", \"/foo/bar\", \"0\", \"/blh\",\n                createWrapper(\"wrapper2\"), false, false);\n        mapper.addWrapper(\"iowejoiejfoiew\", \"/foo/bar\", \"0\", \"*.jsp\",\n                createWrapper(\"wrapper3\"), false, false);\n        mapper.addWrapper(\"iowejoiejfoiew\", \"/foo/bar\", \"0\", \"/blah/bou/*\",\n                createWrapper(\"wrapper4\"), false, false);\n        mapper.addWrapper(\"iowejoiejfoiew\", \"/foo/bar\", \"0\", \"/blah/bobou/*\",\n                createWrapper(\"wrapper5\"), false, false);\n        mapper.addWrapper(\"iowejoiejfoiew\", \"/foo/bar\", \"0\", \"*.htm\",\n                createWrapper(\"wrapper6\"), false, false);\n        mapper.addWrapper(\"iowejoiejfoiew\", \"/foo/bar/bla\", \"0\", \"/bobou/*\",\n                createWrapper(\"wrapper7\"), false, false);\n    }","id":18822,"modified_method":"@Before\n    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n        mapper = new Mapper();\n\n        mapper.addHost(\"sjbjdvwsbvhrb\", new String[0], createHost(\"blah1\"));\n        mapper.addHost(\"sjbjdvwsbvhr/\", new String[0], createHost(\"blah1\"));\n        mapper.addHost(\"wekhfewuifweuibf\", new String[0], createHost(\"blah2\"));\n        mapper.addHost(\"ylwrehirkuewh\", new String[0], createHost(\"blah3\"));\n        mapper.addHost(\"iohgeoihro\", new String[0], createHost(\"blah4\"));\n        mapper.addHost(\"fwehoihoihwfeo\", new String[0], createHost(\"blah5\"));\n        mapper.addHost(\"owefojiwefoi\", new String[0], createHost(\"blah6\"));\n        mapper.addHost(\"iowejoiejfoiew\", new String[0], createHost(\"blah7\"));\n        mapper.addHost(\"ohewoihfewoih\", new String[0], createHost(\"blah8\"));\n        mapper.addHost(\"fewohfoweoih\", new String[0], createHost(\"blah9\"));\n        mapper.addHost(\"ttthtiuhwoih\", new String[0], createHost(\"blah10\"));\n        mapper.addHost(\"lkwefjwojweffewoih\", new String[0], createHost(\"blah11\"));\n        mapper.addHost(\"zzzuyopjvewpovewjhfewoih\", new String[0], createHost(\"blah12\"));\n        mapper.addHost(\"xxxxgqwiwoih\", new String[0], createHost(\"blah13\"));\n        mapper.addHost(\"qwigqwiwoih\", new String[0], createHost(\"blah14\"));\n        mapper.addHostAlias(\"iowejoiejfoiew\", \"iowejoiejfoiew_alias\");\n\n        mapper.setDefaultHostName(\"ylwrehirkuewh\");\n\n        String[] welcomes = new String[2];\n        welcomes[0] = \"boo/baba\";\n        welcomes[1] = \"bobou\";\n\n        Host host = createHost(\"blah7\");\n        mapper.addContextVersion(\"iowejoiejfoiew\", host, \"\",\n                \"0\", createContext(\"context0\"), new String[0], null, null);\n        mapper.addContextVersion(\"iowejoiejfoiew\", host, \"/foo\",\n                \"0\", createContext(\"context1\"), new String[0], null, null);\n        mapper.addContextVersion(\"iowejoiejfoiew\", host, \"/foo/bar\",\n                \"0\", createContext(\"context2\"), welcomes, null, null);\n\n        mapper.addWrappers(\"iowejoiejfoiew\", \"/foo/bar\", \"0\", Arrays\n                .asList(new WrapperMappingInfo[] {\n                        new WrapperMappingInfo(\"/fo/*\",\n                                createWrapper(\"wrapper0\"), false, false),\n                        new WrapperMappingInfo(\"/\", createWrapper(\"wrapper1\"),\n                                false, false),\n                        new WrapperMappingInfo(\"/blh\",\n                                createWrapper(\"wrapper2\"), false, false),\n                        new WrapperMappingInfo(\"*.jsp\",\n                                createWrapper(\"wrapper3\"), false, false),\n                        new WrapperMappingInfo(\"/blah/bou/*\",\n                                createWrapper(\"wrapper4\"), false, false),\n                        new WrapperMappingInfo(\"/blah/bobou/*\",\n                                createWrapper(\"wrapper5\"), false, false),\n                        new WrapperMappingInfo(\"*.htm\",\n                                createWrapper(\"wrapper6\"), false, false) }));\n\n        mapper.addContextVersion(\n                \"iowejoiejfoiew\",\n                host,\n                \"/foo/bar/bla\",\n                \"0\",\n                createContext(\"context3\"),\n                new String[0],\n                null,\n                Arrays.asList(new WrapperMappingInfo[] { new WrapperMappingInfo(\n                        \"/bobou/*\", createWrapper(\"wrapper7\"), false, false) }));\n    }","commit_id":"5a5433791122b88f03d1d37dcc534505ec265ea0","url":"https://github.com/apache/tomcat"},{"original_method":"private void createNetworkOfferingEvents(Connection conn) {\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"SELECT vm.account_id, vm.data_center_id, ni.instance_id, vm.name, nw.network_offering_id, nw.is_default FROM nics ni, \"\n                    + \"networks nw, vm_instance vm where vm.type = 'User' and ni.removed is null and ni.instance_id = vm.id and ni.network_id = nw.id;\");\n            s_logger.debug(\"Creating network offering usage events\");\n            ResultSet rs = pstmt.executeQuery();\n            Date now = new Date();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long vmId = rs.getLong(3);\n                String vmName = rs.getString(4);\n                long nw_offering_id = rs.getLong(5);\n                long isDefault = rs.getLong(6);\n                PreparedStatement pstmt1 = null;\n                pstmt1 =\n                    conn.prepareStatement(\"INSERT INTO usage_event (usage_event.type, usage_event.created, usage_event.account_id, usage_event.zone_id, usage_event.resource_id, usage_event.resource_name, \"\n                        + \"usage_event.offering_id, usage_event.size)\" + \" VALUES (?, ?, ?, ?, ?, ?, ?, ?)\");\n                pstmt1.setString(1, EventTypes.EVENT_NETWORK_OFFERING_ASSIGN);\n                pstmt1.setString(2, DateUtil.getDateDisplayString(TimeZone.getTimeZone(\"GMT\"), now));\n                pstmt1.setLong(3, accountId);\n                pstmt1.setLong(4, zoneId);\n                pstmt1.setLong(5, vmId);\n                pstmt1.setString(6, vmName);\n                pstmt1.setLong(7, nw_offering_id);\n                pstmt1.setLong(8, isDefault);\n\n                pstmt1.executeUpdate();\n                pstmt1.close();\n            }\n\n            rs.close();\n            pstmt.close();\n            s_logger.debug(\"Completed creating network offering usage events\");\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to add network offering usage events due to:\", e);\n        }\n    }","id":18823,"modified_method":"private void createNetworkOfferingEvents(Connection conn) {\n        s_logger.debug(\"Creating network offering usage events\");\n        try (\n                PreparedStatement pstmt =\n                    conn.prepareStatement(\"SELECT vm.account_id, vm.data_center_id, ni.instance_id, vm.name, nw.network_offering_id, nw.is_default FROM nics ni, \"\n                            + \"networks nw, vm_instance vm where vm.type = 'User' and ni.removed is null and ni.instance_id = vm.id and ni.network_id = nw.id;\");\n                ResultSet rs = pstmt.executeQuery();\n            ) {\n            Date now = new Date();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long vmId = rs.getLong(3);\n                String vmName = rs.getString(4);\n                long nw_offering_id = rs.getLong(5);\n                long isDefault = rs.getLong(6);\n                try (PreparedStatement pstmt1 =\n                    conn.prepareStatement(\"INSERT INTO usage_event (usage_event.type, usage_event.created, usage_event.account_id, usage_event.zone_id, usage_event.resource_id, usage_event.resource_name, \"\n                        + \"usage_event.offering_id, usage_event.size)\" + \" VALUES (?, ?, ?, ?, ?, ?, ?, ?)\"); ) {\n                    pstmt1.setString(1, EventTypes.EVENT_NETWORK_OFFERING_ASSIGN);\n                    pstmt1.setString(2, DateUtil.getDateDisplayString(TimeZone.getTimeZone(\"GMT\"), now));\n                    pstmt1.setLong(3, accountId);\n                    pstmt1.setLong(4, zoneId);\n                    pstmt1.setLong(5, vmId);\n                    pstmt1.setString(6, vmName);\n                    pstmt1.setLong(7, nw_offering_id);\n                    pstmt1.setLong(8, isDefault);\n                    pstmt1.executeUpdate();\n                }\n            }\n            s_logger.debug(\"Completed creating network offering usage events\");\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to add network offering usage events due to:\", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void cleanupVolumes(Connection conn) {\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT id, instance_id, account_id from volumes where destroyed=127\");\n            ResultSet rs = pstmt.executeQuery();\n\n            while (rs.next()) {\n                Long id = rs.getLong(1);\n                s_logger.debug(\"Volume id is \" + id);\n                Long instanceId = rs.getLong(2);\n                Long accountId = rs.getLong(3);\n\n                boolean removeVolume = false;\n\n                pstmt = conn.prepareStatement(\"SELECT * from account where id=? and removed is not null\");\n                pstmt.setLong(1, accountId);\n                ResultSet rs1 = pstmt.executeQuery();\n\n                if (rs1.next()) {\n                    removeVolume = true;\n                }\n\n                if (instanceId != null) {\n                    pstmt = conn.prepareStatement(\"SELECT * from vm_instance where id=? and removed is not null\");\n                    pstmt.setLong(1, instanceId);\n                    rs1 = pstmt.executeQuery();\n\n                    if (rs1.next()) {\n                        removeVolume = true;\n                    }\n                }\n\n                if (removeVolume) {\n                    pstmt = conn.prepareStatement(\"UPDATE volumes SET state='Destroy' WHERE id=?\");\n                    pstmt.setLong(1, id);\n                    pstmt.executeUpdate();\n                    s_logger.debug(\"Volume with id=\" + id + \" is marked with Destroy state as a part of volume cleanup (it's Destroyed had 127 value)\");\n                }\n            }\n            rs.close();\n            pstmt.close();\n\n            s_logger.debug(\"Finished cleaning up volumes with incorrect Destroyed field (127)\");\n        } catch (Exception e) {\n            s_logger.error(\"Failed to cleanup volumes with incorrect Destroyed field (127):\", e);\n            throw new CloudRuntimeException(\"Failed to cleanup volumes with incorrect Destroyed field (127):\", e);\n        }\n    }","id":18824,"modified_method":"private void cleanupVolumes(Connection conn) {\n        try (\n                PreparedStatement selectVolumes = conn.prepareStatement(\"SELECT id, instance_id, account_id from volumes where destroyed=127\");\n                ResultSet selectedVolumes = selectVolumes.executeQuery();\n            ){\n            while (selectedVolumes.next()) {\n                Long id = selectedVolumes.getLong(1);\n                s_logger.debug(\"Volume id is \" + id);\n                Long instanceId = selectedVolumes.getLong(2);\n                Long accountId = selectedVolumes.getLong(3);\n\n                boolean removeVolume = false;\n\n                try (PreparedStatement selectAccounts = conn.prepareStatement(\"SELECT * from account where id=? and removed is not null\");) {\n                    selectAccounts.setLong(1, accountId);\n                    try(ResultSet selectedAccounts = selectAccounts.executeQuery();) {\n\n                        if (selectedAccounts.next()) {\n                            removeVolume = true;\n                        }\n\n                        if (instanceId != null) {\n                            try(PreparedStatement selectInstances = conn.prepareStatement(\"SELECT * from vm_instance where id=? and removed is not null\");) {\n                                selectInstances.setLong(1, instanceId);\n                                try (ResultSet selectedInstances = selectInstances.executeQuery();) {\n\n                                    if (selectedInstances.next()) {\n                                        removeVolume = true;\n                                    }\n                                }\n                            }\n                        }\n\n                        if (removeVolume) {\n                            try(PreparedStatement pstmt = conn.prepareStatement(\"UPDATE volumes SET state='Destroy' WHERE id=?\");) {\n                                pstmt.setLong(1, id);\n                                pstmt.executeUpdate();\n                                s_logger.debug(\"Volume with id=\" + id + \" is marked with Destroy state as a part of volume cleanup (it's Destroyed had 127 value)\");\n                            }\n                        }\n                    }\n                }\n            }\n            s_logger.debug(\"Finished cleaning up volumes with incorrect Destroyed field (127)\");\n        } catch (Exception e) {\n            s_logger.error(\"Failed to cleanup volumes with incorrect Destroyed field (127):\", e);\n            throw new CloudRuntimeException(\"Failed to cleanup volumes with incorrect Destroyed field (127):\", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private Long getMostRecentEvent(Connection conn) {\n        PreparedStatement pstmt = null;\n        String sql = \"SELECT id FROM cloud_usage.event ORDER BY created DESC LIMIT 1\";\n        try {\n            pstmt = conn.prepareStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            if (rs.next()) {\n                return rs.getLong(1);\n            }\n        } catch (Exception ex) {\n            throw new CloudRuntimeException(\"error getting most recent event date: \" + ex.getMessage());\n        }\n        return null;\n    }","id":18825,"modified_method":"private Long getMostRecentEvent(Connection conn) {\n        try (\n                PreparedStatement pstmt = conn.prepareStatement(\"SELECT id FROM cloud_usage.event ORDER BY created DESC LIMIT 1\");\n                ResultSet rs = pstmt.executeQuery();\n            ) {\n            if (rs.next()) {\n                return rs.getLong(1);\n            }\n        } catch (Exception ex) {\n            throw new CloudRuntimeException(\"error getting most recent event date: \" + ex.getMessage());\n        }\n        return null;\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void cleanupLbVmMaps(Connection conn) {\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT DISTINCT load_balancer_id FROM load_balancer_vm_map\");\n            ResultSet rs = pstmt.executeQuery();\n\n            while (rs.next()) {\n                long lbId = rs.getLong(1);\n                PreparedStatement pstmt1 = conn.prepareStatement(\"SELECT * FROM load_balancer where id=?\");\n                pstmt1.setLong(1, lbId);\n                ResultSet rs1 = pstmt1.executeQuery();\n\n                PreparedStatement pstmt2 = conn.prepareStatement(\"SELECT * from event where type like '%lb.delete%' and parameters like '%id=\" + lbId + \"%'\");\n                ResultSet rs2 = pstmt2.executeQuery();\n\n                if (!rs1.next() && rs2.next()) {\n                    s_logger.debug(\"Removing load balancer vm mappings for lb id=\" + lbId + \" as a part of cleanup\");\n                    pstmt = conn.prepareStatement(\"DELETE FROM load_balancer_vm_map where load_balancer_id=?\");\n                    pstmt.setLong(1, lbId);\n                    pstmt.executeUpdate();\n                }\n                rs1.close();\n                rs2.close();\n                pstmt1.close();\n                pstmt2.close();\n            }\n\n            rs.close();\n            pstmt.close();\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to cleanup orpahned lb-vm mappings due to:\", e);\n        }\n    }","id":18826,"modified_method":"private void cleanupLbVmMaps(Connection conn) {\n        try (\n                PreparedStatement pstmt = conn.prepareStatement(\"SELECT DISTINCT load_balancer_id FROM load_balancer_vm_map\");\n                ResultSet rs = pstmt.executeQuery();\n            ){\n            while (rs.next()) {\n                long lbId = rs.getLong(1);\n                try (PreparedStatement pstmt1 = conn.prepareStatement(\"SELECT * FROM load_balancer where id=?\");) {\n                    pstmt1.setLong(1, lbId);\n                    try (ResultSet rs1 = pstmt1.executeQuery();) {\n\n                        try (\n                                PreparedStatement pstmt2 = conn.prepareStatement(\"SELECT * from event where type like '%lb.delete%' and parameters like '%id=\" + lbId + \"%'\");\n                                ResultSet rs2 = pstmt2.executeQuery();\n                            ) {\n                            if (!rs1.next() && rs2.next()) {\n                                s_logger.debug(\"Removing load balancer vm mappings for lb id=\" + lbId + \" as a part of cleanup\");\n                                try (PreparedStatement delete = conn.prepareStatement(\"DELETE FROM load_balancer_vm_map where load_balancer_id=?\");) {\n                                    delete.setLong(1, lbId);\n                                    delete.executeUpdate();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to cleanup orpahned lb-vm mappings due to:\", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private UsageEventVO convertVolumeEvent(EventVO event, Connection conn) throws IOException, SQLException {\n\n        Properties volEventParams = new Properties();\n        long volId = -1L;\n        Long doId = -1L;\n        long zoneId = -1L;\n        Long templateId = -1L;\n        long size = -1L;\n        UsageEventVO usageEvent = null;\n        volEventParams.load(new StringReader(event.getParameters()));\n        volId = Long.parseLong(volEventParams.getProperty(\"id\"));\n        if (EventTypes.EVENT_VOLUME_CREATE.equals(event.getType())) {\n            doId = Long.parseLong(volEventParams.getProperty(\"doId\"));\n            zoneId = Long.parseLong(volEventParams.getProperty(\"dcId\"));\n            templateId = Long.parseLong(volEventParams.getProperty(\"tId\"));\n            size = Long.parseLong(volEventParams.getProperty(\"size\"));\n            size = (size * 1048576);\n            if (doId == -1) {\n                doId = null;\n            }\n            if (templateId == -1) {\n                templateId = null;\n            }\n        }\n\n        // Get volume name information\n        String volumeName = \"\";\n        PreparedStatement pstmt = conn.prepareStatement(\"SELECT name, data_center_id from volumes where id=?\");\n        pstmt.setLong(1, volId);\n        ResultSet rs = pstmt.executeQuery();\n        if (rs.next()) {\n            volumeName = rs.getString(1);\n            zoneId = rs.getLong(2);\n        }\n        rs.close();\n        pstmt.close();\n\n        if (EventTypes.EVENT_VOLUME_CREATE.equals(event.getType())) {\n            usageEvent = new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE, event.getAccountId(), zoneId, volId, volumeName, doId, templateId, size);\n        } else if (EventTypes.EVENT_VOLUME_DELETE.equals(event.getType())) {\n            usageEvent = new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE, event.getAccountId(), zoneId, volId, volumeName);\n\n        }\n        return usageEvent;\n    }","id":18827,"modified_method":"private UsageEventVO convertVolumeEvent(EventVO event, Connection conn) throws IOException, SQLException {\n\n        Properties volEventParams = new Properties();\n        long volId = -1L;\n        Long doId = -1L;\n        long zoneId = -1L;\n        Long templateId = -1L;\n        long size = -1L;\n        UsageEventVO usageEvent = null;\n        volEventParams.load(new StringReader(event.getParameters()));\n        volId = Long.parseLong(volEventParams.getProperty(\"id\"));\n        if (EventTypes.EVENT_VOLUME_CREATE.equals(event.getType())) {\n            doId = Long.parseLong(volEventParams.getProperty(\"doId\"));\n            zoneId = Long.parseLong(volEventParams.getProperty(\"dcId\"));\n            templateId = Long.parseLong(volEventParams.getProperty(\"tId\"));\n            size = Long.parseLong(volEventParams.getProperty(\"size\"));\n            size = (size * 1048576);\n            if (doId == -1) {\n                doId = null;\n            }\n            if (templateId == -1) {\n                templateId = null;\n            }\n        }\n\n        // Get volume name information\n        String volumeName = \"\";\n        try(PreparedStatement pstmt = conn.prepareStatement(\"SELECT name, data_center_id from volumes where id=?\");) {\n            pstmt.setLong(1, volId);\n            try (ResultSet rs = pstmt.executeQuery();) {\n                if (rs.next()) {\n                    volumeName = rs.getString(1);\n                    zoneId = rs.getLong(2);\n                }\n                if (EventTypes.EVENT_VOLUME_CREATE.equals(event.getType())) {\n                    usageEvent = new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE, event.getAccountId(), zoneId, volId, volumeName, doId, templateId, size);\n                } else if (EventTypes.EVENT_VOLUME_DELETE.equals(event.getType())) {\n                    usageEvent = new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE, event.getAccountId(), zoneId, volId, volumeName);\n                }\n            }\n        }\n        return usageEvent;\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected long insertNetwork(Connection conn, String name, String displayText, String trafficType, String broadcastDomainType, String broadcastUri, String gateway,\n        String cidr, String mode, long networkOfferingId, long dataCenterId, String guruName, String state, long domainId, long accountId, String dns1, String dns2,\n        String guestType, boolean shared, String networkDomain, boolean isDefault, String reservationId) {\n        String getNextNetworkSequenceSql = \"SELECT value from sequence where name='networks_seq'\";\n        String advanceNetworkSequenceSql = \"UPDATE sequence set value=value+1 where name='networks_seq'\";\n        String insertNetworkSql =\n            \"INSERT INTO networks(id, name, display_text, traffic_type, broadcast_domain_type, gateway, cidr, mode, network_offering_id, data_center_id, guru_name, state, domain_id, account_id, dns1, dns2, guest_type, shared, is_default, created, network_domain, related, reservation_id, broadcast_uri) \"\n                + \"VALUES(?,  ?,    ?,            ?,            ?,                     ?,       ?,    ?,    ?,                   ?,              ?,         ?,     ?,         ?,          ?,    ?,    ?,          ?,      ?,          now(),   ?,              ?,       ?,              ?)\";\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(getNextNetworkSequenceSql);\n            ResultSet rs = pstmt.executeQuery();\n            rs.next();\n            long seq = rs.getLong(1);\n            rs.close();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(advanceNetworkSequenceSql);\n            pstmt.executeUpdate();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(insertNetworkSql);\n            int i = 1;\n            pstmt.setLong(i++, seq);\n            pstmt.setString(i++, name);\n            pstmt.setString(i++, displayText);\n            pstmt.setString(i++, trafficType);\n            pstmt.setString(i++, broadcastDomainType);\n            pstmt.setString(i++, gateway);\n            pstmt.setString(i++, cidr);\n            pstmt.setString(i++, mode);\n            pstmt.setLong(i++, networkOfferingId);\n            pstmt.setLong(i++, dataCenterId);\n            pstmt.setString(i++, guruName);\n            pstmt.setString(i++, state);\n            pstmt.setLong(i++, domainId);\n            pstmt.setLong(i++, accountId);\n            pstmt.setString(i++, dns1);\n            pstmt.setString(i++, dns2);\n            pstmt.setString(i++, guestType);\n            pstmt.setBoolean(i++, shared);\n            pstmt.setBoolean(i++, isDefault);\n            pstmt.setString(i++, networkDomain);\n            pstmt.setLong(i++, seq);\n            pstmt.setString(i++, reservationId);\n            pstmt.setString(i++, broadcastUri);\n            pstmt.executeUpdate();\n\n            pstmt = conn.prepareStatement(\"INSERT INTO op_networks(id, mac_address_seq, nics_count, gc, check_for_gc) VALUES(?, ?, ?, ?, ?)\");\n            pstmt.setLong(1, seq);\n            pstmt.setLong(2, 0);\n            pstmt.setLong(3, 0);\n            if (trafficType.equals(\"Guest\")) {\n                pstmt.setBoolean(4, true);\n            } else {\n                pstmt.setBoolean(4, false);\n            }\n            pstmt.setBoolean(5, false);\n            pstmt.executeUpdate();\n\n            pstmt = conn.prepareStatement(\"INSERT INTO account_network_ref (account_id, network_id, is_owner) VALUES (?,    ?,  1)\");\n            pstmt.setLong(1, accountId);\n            pstmt.setLong(2, seq);\n            pstmt.executeUpdate();\n\n            return seq;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to create network\", e);\n        }\n    }","id":18828,"modified_method":"protected long insertNetwork(Connection conn, String name, String displayText, String trafficType, String broadcastDomainType, String broadcastUri, String gateway,\n        String cidr, String mode, long networkOfferingId, long dataCenterId, String guruName, String state, long domainId, long accountId, String dns1, String dns2,\n        String guestType, boolean shared, String networkDomain, boolean isDefault, String reservationId) {\n        String getNextNetworkSequenceSql = \"SELECT value from sequence where name='networks_seq'\";\n        String advanceNetworkSequenceSql = \"UPDATE sequence set value=value+1 where name='networks_seq'\";\n        String insertNetworkSql =\n            \"INSERT INTO networks(id, name, display_text, traffic_type, broadcast_domain_type, gateway, cidr, mode, network_offering_id, data_center_id, guru_name, state, domain_id, account_id, dns1, dns2, guest_type, shared, is_default, created, network_domain, related, reservation_id, broadcast_uri) \"\n                + \"VALUES(?,  ?,    ?,            ?,            ?,                     ?,       ?,    ?,    ?,                   ?,              ?,         ?,     ?,         ?,          ?,    ?,    ?,          ?,      ?,          now(),   ?,              ?,       ?,              ?)\";\n        try (\n                PreparedStatement getNextNetworkSequence = conn.prepareStatement(getNextNetworkSequenceSql);\n                ResultSet rs = getNextNetworkSequence.executeQuery();\n            ) {\n            rs.next();\n            long seq = rs.getLong(1);\n            try (PreparedStatement insertNetworkSequence = conn.prepareStatement(advanceNetworkSequenceSql);) {\n                insertNetworkSequence.executeUpdate();\n            }\n            try (PreparedStatement insertNetwork = conn.prepareStatement(insertNetworkSql);) {\n                int i = 1;\n                insertNetwork.setLong(i++, seq);\n                insertNetwork.setString(i++, name);\n                insertNetwork.setString(i++, displayText);\n                insertNetwork.setString(i++, trafficType);\n                insertNetwork.setString(i++, broadcastDomainType);\n                insertNetwork.setString(i++, gateway);\n                insertNetwork.setString(i++, cidr);\n                insertNetwork.setString(i++, mode);\n                insertNetwork.setLong(i++, networkOfferingId);\n                insertNetwork.setLong(i++, dataCenterId);\n                insertNetwork.setString(i++, guruName);\n                insertNetwork.setString(i++, state);\n                insertNetwork.setLong(i++, domainId);\n                insertNetwork.setLong(i++, accountId);\n                insertNetwork.setString(i++, dns1);\n                insertNetwork.setString(i++, dns2);\n                insertNetwork.setString(i++, guestType);\n                insertNetwork.setBoolean(i++, shared);\n                insertNetwork.setBoolean(i++, isDefault);\n                insertNetwork.setString(i++, networkDomain);\n                insertNetwork.setLong(i++, seq);\n                insertNetwork.setString(i++, reservationId);\n                insertNetwork.setString(i++, broadcastUri);\n                insertNetwork.executeUpdate();\n            }\n            try (PreparedStatement insertNetworks = conn.prepareStatement(\"INSERT INTO op_networks(id, mac_address_seq, nics_count, gc, check_for_gc) VALUES(?, ?, ?, ?, ?)\");) {\n                insertNetworks.setLong(1, seq);\n                insertNetworks.setLong(2, 0);\n                insertNetworks.setLong(3, 0);\n                if (trafficType.equals(\"Guest\")) {\n                    insertNetworks.setBoolean(4, true);\n                } else {\n                    insertNetworks.setBoolean(4, false);\n                }\n                insertNetworks.setBoolean(5, false);\n                insertNetworks.executeUpdate();\n            }\n            try (PreparedStatement insertAccountNetworkRef = conn.prepareStatement(\"INSERT INTO account_network_ref (account_id, network_id, is_owner) VALUES (?,    ?,  1)\");) {\n                insertAccountNetworkRef.setLong(1, accountId);\n                insertAccountNetworkRef.setLong(2, seq);\n                insertAccountNetworkRef.executeUpdate();\n            }\n            return seq;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to create network\", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void modifyIndexes(Connection conn) {\n        try {\n\n            // removed indexes\n            PreparedStatement pstmt = conn.prepareStatement(\"SHOW INDEX FROM security_group WHERE KEY_NAME = 'fk_network_group__account_id'\");\n            ResultSet rs = pstmt.executeQuery();\n\n            if (rs.next()) {\n                pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` DROP INDEX `fk_network_group__account_id`\");\n                pstmt.executeUpdate();\n                s_logger.debug(\"Unique key 'fk_network_group__account_id' is removed successfully\");\n            }\n\n            rs.close();\n            pstmt.close();\n\n            pstmt = conn.prepareStatement(\"SHOW INDEX FROM security_group WHERE KEY_NAME = 'fk_network_group___account_id'\");\n            rs = pstmt.executeQuery();\n\n            if (rs.next()) {\n                pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` DROP INDEX `fk_network_group___account_id`\");\n                pstmt.executeUpdate();\n                s_logger.debug(\"Unique key 'fk_network_group___account_id' is removed successfully\");\n            }\n\n            rs.close();\n            pstmt.close();\n\n            // add indexes\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` ADD CONSTRAINT `fk_security_group___account_id` FOREIGN KEY `fk_security_group__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to drop indexes for 'security_group' table due to:\", e);\n        }\n    }","id":18829,"modified_method":"private void modifyIndexes(Connection conn) {\n        try (\n            // removed indexes\n                PreparedStatement show__Index = conn.prepareStatement(\"SHOW INDEX FROM security_group WHERE KEY_NAME = 'fk_network_group__account_id'\");\n                ResultSet result__index = show__Index.executeQuery();\n            ) {\n            if (result__index.next()) {\n                try (PreparedStatement alterTable = conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` DROP INDEX `fk_network_group__account_id`\");) {\n                    alterTable.executeUpdate();\n                    s_logger.debug(\"Unique key 'fk_network_group__account_id' is removed successfully\");\n                }\n            }\n\n            try (\n                    PreparedStatement show___Index = conn.prepareStatement(\"SHOW INDEX FROM security_group WHERE KEY_NAME = 'fk_network_group___account_id'\");\n                    ResultSet result___index = show___Index.executeQuery();\n                    ) {\n                if (result___index.next()) {\n                    try (PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` DROP INDEX `fk_network_group___account_id`\");) {\n                        pstmt.executeUpdate();\n                        s_logger.debug(\"Unique key 'fk_network_group___account_id' is removed successfully\");\n                    }\n                }\n            }\n            // add indexes\n            try (PreparedStatement add_index =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` ADD CONSTRAINT `fk_security_group___account_id` FOREIGN KEY `fk_security_group__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");) {\n                add_index.executeUpdate();\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to drop indexes for 'security_group' table due to:\", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void upgradeDomR(Connection conn, long dcId, long domrId, Long publicNetworkId, long guestNetworkId, long controlNetworkId, String zoneType, String vnet)\n        throws SQLException {\n        s_logger.debug(\"Upgrading domR\" + domrId);\n        PreparedStatement pstmt =\n            conn.prepareStatement(\"SELECT vm_instance.id, vm_instance.state, vm_instance.private_mac_address, vm_instance.private_ip_address, vm_instance.private_netmask, domain_router.public_mac_address, domain_router.public_ip_address, domain_router.public_netmask, domain_router.guest_mac_address, domain_router.guest_ip_address, domain_router.guest_netmask, domain_router.vnet, domain_router.gateway FROM vm_instance INNER JOIN domain_router ON vm_instance.id=domain_router.id WHERE vm_instance.removed is NULL AND vm_instance.id=?\");\n        pstmt.setLong(1, domrId);\n        ResultSet rs = pstmt.executeQuery();\n\n        if (!rs.next()) {\n            throw new CloudRuntimeException(\"Unable to find router \" + domrId);\n        }\n\n        // long id = rs.getLong(1);\n        String state = rs.getString(2);\n        boolean running = state.equals(\"Running\") | state.equals(\"Starting\") | state.equals(\"Stopping\");\n        String privateMac = rs.getString(3);\n        String privateIp = rs.getString(4);\n        String privateNetmask = rs.getString(5);\n        String publicMac = rs.getString(6);\n        String publicIp = rs.getString(7);\n        String publicNetmask = rs.getString(8);\n        String guestMac = rs.getString(9);\n        String guestIp = rs.getString(10);\n        String guestNetmask = rs.getString(11);\n        String gateway = rs.getString(13);\n        rs.close();\n        pstmt.close();\n\n        pstmt = conn.prepareStatement(\"SELECT v.vlan_id from vlan v, user_ip_address u where v.id=u.vlan_db_id and u.public_ip_address=?\");\n        pstmt.setString(1, publicIp);\n        rs = pstmt.executeQuery();\n\n        String publicVlan = null;\n        while (rs.next()) {\n            publicVlan = rs.getString(1);\n        }\n\n        // Control nic is the same for all types of networks\n        long controlNicId =\n            insertNic(conn, controlNetworkId, domrId, running, privateMac, privateIp, privateNetmask, \"Start\", \"169.254.0.1\", null, \"ControlNetworkGuru\", false, 1,\n                \"Static\", privateIp != null ? (domrId + privateIp) : null);\n        if (privateIp != null) {\n            pstmt = conn.prepareStatement(\"UPDATE op_dc_link_local_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");\n            pstmt.setLong(1, controlNicId);\n            pstmt.setString(2, privateIp);\n            pstmt.setLong(3, dcId);\n            pstmt.executeUpdate();\n            pstmt.close();\n        }\n\n        if (zoneType.equalsIgnoreCase(\"Basic\")) {\n            insertNic(conn, guestNetworkId, domrId, running, guestMac, guestIp, guestNetmask, \"Create\", gateway, vnet, \"DirectPodBasedNetworkGuru\", true, 0, \"Dhcp\", null);\n        } else if (publicIp != null) {\n            // update virtual domR\n            insertNic(conn, publicNetworkId, domrId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"PublicNetworkGuru\", true, 2, \"Static\",\n                null);\n            insertNic(conn, guestNetworkId, domrId, running, guestMac, guestIp, guestNetmask, \"Start\", null, vnet, \"ExternalGuestNetworkGuru\", false, 0, \"Dhcp\", null);\n        } else {\n            // update direct domR - dhcp case\n            insertNic(conn, guestNetworkId, domrId, running, guestMac, guestIp, guestNetmask, \"Create\", gateway, vnet, \"DirectNetworkGuru\", true, 0, \"Dhcp\", null);\n        }\n\n    }","id":18830,"modified_method":"protected void upgradeDomR(Connection conn, long dcId, long domrId, Long publicNetworkId, long guestNetworkId, long controlNetworkId, String zoneType, String vnet)\n        throws SQLException {\n        s_logger.debug(\"Upgrading domR\" + domrId);\n        try (\n                PreparedStatement pstmt =\n            conn.prepareStatement(\"SELECT vm_instance.id, vm_instance.state, vm_instance.private_mac_address, vm_instance.private_ip_address, vm_instance.private_netmask, domain_router.public_mac_address, domain_router.public_ip_address, domain_router.public_netmask, domain_router.guest_mac_address, domain_router.guest_ip_address, domain_router.guest_netmask, domain_router.vnet, domain_router.gateway FROM vm_instance INNER JOIN domain_router ON vm_instance.id=domain_router.id WHERE vm_instance.removed is NULL AND vm_instance.id=?\");\n            ) {\n            pstmt.setLong(1, domrId);\n            try (ResultSet rs = pstmt.executeQuery();) {\n\n                if (!rs.next()) {\n                    throw new CloudRuntimeException(\"Unable to find router \" + domrId);\n                }\n                // long id = rs.getLong(1);\n                String state = rs.getString(2);\n                boolean running = state.equals(\"Running\") | state.equals(\"Starting\") | state.equals(\"Stopping\");\n                String privateMac = rs.getString(3);\n                String privateIp = rs.getString(4);\n                String privateNetmask = rs.getString(5);\n                String publicMac = rs.getString(6);\n                String publicIp = rs.getString(7);\n                String publicNetmask = rs.getString(8);\n                String guestMac = rs.getString(9);\n                String guestIp = rs.getString(10);\n                String guestNetmask = rs.getString(11);\n                String gateway = rs.getString(13);\n                try (PreparedStatement vlanStatement = conn.prepareStatement(\"SELECT v.vlan_id from vlan v, user_ip_address u where v.id=u.vlan_db_id and u.public_ip_address=?\");) {\n                    vlanStatement.setString(1, publicIp);\n                    try (ResultSet vlanResult = vlanStatement.executeQuery();) {\n                        String publicVlan = null;\n                        while (vlanResult.next()) {\n                            publicVlan = vlanResult.getString(1);\n                        }\n                        // Control nic is the same for all types of networks\n                        long controlNicId =\n                            insertNic(conn, controlNetworkId, domrId, running, privateMac, privateIp, privateNetmask, \"Start\", \"169.254.0.1\", null, \"ControlNetworkGuru\", false, 1,\n                                \"Static\", privateIp != null ? (domrId + privateIp) : null);\n                        if (privateIp != null) {\n                            try (PreparedStatement updateStatement = conn.prepareStatement(\"UPDATE op_dc_link_local_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");) {\n                                updateStatement.setLong(1, controlNicId);\n                                updateStatement.setString(2, privateIp);\n                                updateStatement.setLong(3, dcId);\n                                updateStatement.executeUpdate();\n                            }\n                        }\n                        if (zoneType.equalsIgnoreCase(\"Basic\")) {\n                            insertNic(conn, guestNetworkId, domrId, running, guestMac, guestIp, guestNetmask, \"Create\", gateway, vnet, \"DirectPodBasedNetworkGuru\", true, 0, \"Dhcp\", null);\n                        } else if (publicIp != null) {\n                            // update virtual domR\n                            insertNic(conn, publicNetworkId, domrId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"PublicNetworkGuru\", true, 2, \"Static\",\n                                null);\n                            insertNic(conn, guestNetworkId, domrId, running, guestMac, guestIp, guestNetmask, \"Start\", null, vnet, \"ExternalGuestNetworkGuru\", false, 0, \"Dhcp\", null);\n                        } else {\n                            // update direct domR - dhcp case\n                            insertNic(conn, guestNetworkId, domrId, running, guestMac, guestIp, guestNetmask, \"Create\", gateway, vnet, \"DirectNetworkGuru\", true, 0, \"Dhcp\", null);\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void upgradeStoragePools(Connection conn) {\n        PreparedStatement pstmt;\n        try {\n            pstmt = conn.prepareStatement(\"UPDATE storage_pool SET status='Up'\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't upgrade storage pool \", e);\n        }\n    }","id":18831,"modified_method":"protected void upgradeStoragePools(Connection conn) {\n        try (PreparedStatement pstmt = conn.prepareStatement(\"UPDATE storage_pool SET status='Up'\");) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't upgrade storage pool \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void upgradeSsvm(Connection conn, long dataCenterId, long publicNetworkId, long managementNetworkId, long controlNetworkId, String zoneType)\n        throws SQLException {\n        s_logger.debug(\"Upgrading ssvm in \" + dataCenterId);\n        PreparedStatement pstmt =\n            conn.prepareStatement(\"SELECT vm_instance.id, vm_instance.state, vm_instance.private_mac_address, vm_instance.private_ip_address, vm_instance.private_netmask, secondary_storage_vm.public_mac_address, secondary_storage_vm.public_ip_address, secondary_storage_vm.public_netmask, secondary_storage_vm.guest_mac_address, secondary_storage_vm.guest_ip_address, secondary_storage_vm.guest_netmask, secondary_storage_vm.gateway, vm_instance.type FROM vm_instance INNER JOIN secondary_storage_vm ON vm_instance.id=secondary_storage_vm.id WHERE vm_instance.removed is NULL AND vm_instance.data_center_id=? AND vm_instance.type='SecondaryStorageVm'\");\n        pstmt.setLong(1, dataCenterId);\n        ResultSet rs = pstmt.executeQuery();\n\n        if (!rs.next()) {\n            s_logger.debug(\"Unable to find ssvm in data center \" + dataCenterId);\n            return;\n        }\n\n        long ssvmId = rs.getLong(1);\n        String state = rs.getString(2);\n        boolean running = state.equals(\"Running\") | state.equals(\"Starting\") | state.equals(\"Stopping\");\n        String privateMac = rs.getString(3);\n        String privateIp = rs.getString(4);\n        String privateNetmask = rs.getString(5);\n        String publicMac = rs.getString(6);\n        String publicIp = rs.getString(7);\n        String publicNetmask = rs.getString(8);\n        String guestMac = rs.getString(9);\n        String guestIp = rs.getString(10);\n        String guestNetmask = rs.getString(11);\n        String gateway = rs.getString(12);\n        String type = rs.getString(13);\n        rs.close();\n        pstmt.close();\n\n        pstmt =\n            conn.prepareStatement(\"SELECT host_pod_ref.gateway from host_pod_ref INNER JOIN vm_instance ON vm_instance.pod_id=host_pod_ref.id WHERE vm_instance.removed is NULL AND vm_instance.data_center_id=? AND vm_instance.type='SecondaryStorageVm'\");\n        pstmt.setLong(1, dataCenterId);\n        rs = pstmt.executeQuery();\n\n        if (!rs.next()) {\n            s_logger.debug(\"Unable to find ssvm in data center \" + dataCenterId);\n            return;\n        }\n\n        String podGateway = rs.getString(1);\n        rs.close();\n        pstmt.close();\n\n        pstmt = conn.prepareStatement(\"SELECT v.vlan_id from vlan v, user_ip_address u where v.id=u.vlan_db_id and u.public_ip_address=?\");\n        pstmt.setString(1, publicIp);\n        rs = pstmt.executeQuery();\n\n        String publicVlan = null;\n        while (rs.next()) {\n            publicVlan = rs.getString(1);\n        }\n\n        rs.close();\n        pstmt.close();\n\n        if (zoneType.equalsIgnoreCase(\"Basic\")) {\n            insertNic(conn, publicNetworkId, ssvmId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"DirectPodBasedNetworkGuru\", true, 2,\n                \"Dhcp\", null);\n\n        } else {\n            insertNic(conn, publicNetworkId, ssvmId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"PublicNetworkGuru\", true, 2, \"Static\",\n                null);\n        }\n\n        long controlNicId =\n            insertNic(conn, controlNetworkId, ssvmId, running, guestMac, guestIp, guestNetmask, \"Start\", \"169.254.0.1\", null, \"ControlNetworkGuru\", false, 0, \"Static\",\n                guestIp != null ? (ssvmId + guestIp) : null);\n        if (guestIp != null) {\n            pstmt = conn.prepareStatement(\"UPDATE op_dc_link_local_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");\n            pstmt.setLong(1, controlNicId);\n            pstmt.setString(2, guestIp);\n            pstmt.setLong(3, dataCenterId);\n            pstmt.executeUpdate();\n            pstmt.close();\n        }\n\n        long mgmtNicId =\n            insertNic(conn, managementNetworkId, ssvmId, running, privateMac, privateIp, privateNetmask, \"Start\", podGateway, null, \"PodBasedNetworkGuru\", false, 1,\n                \"Static\", null);\n        if (privateIp != null) {\n            pstmt = conn.prepareStatement(\"UPDATE op_dc_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");\n            pstmt.setLong(1, mgmtNicId);\n            pstmt.setString(2, privateIp);\n            pstmt.setLong(3, dataCenterId);\n            pstmt.executeUpdate();\n            pstmt.close();\n        }\n    }","id":18832,"modified_method":"protected void upgradeSsvm(Connection conn, long dataCenterId, long publicNetworkId, long managementNetworkId, long controlNetworkId, String zoneType)\n        throws SQLException {\n        s_logger.debug(\"Upgrading ssvm in \" + dataCenterId);\n        //select instance\n        try (\n                PreparedStatement selectInstance =\n            conn.prepareStatement(\"SELECT vm_instance.id, vm_instance.state, vm_instance.private_mac_address, vm_instance.private_ip_address, vm_instance.private_netmask, secondary_storage_vm.public_mac_address, secondary_storage_vm.public_ip_address, secondary_storage_vm.public_netmask, secondary_storage_vm.guest_mac_address, secondary_storage_vm.guest_ip_address, secondary_storage_vm.guest_netmask, secondary_storage_vm.gateway, vm_instance.type FROM vm_instance INNER JOIN secondary_storage_vm ON vm_instance.id=secondary_storage_vm.id WHERE vm_instance.removed is NULL AND vm_instance.data_center_id=? AND vm_instance.type='SecondaryStorageVm'\");\n            ) {\n            selectInstance.setLong(1, dataCenterId);\n            try (ResultSet instanceResult = selectInstance.executeQuery();) {\n\n                if (!instanceResult.next()) {\n                    s_logger.debug(\"Unable to find ssvm in data center \" + dataCenterId);\n                    return;\n                }\n\n                long ssvmId = instanceResult.getLong(1);\n                String state = instanceResult.getString(2);\n                boolean running = state.equals(\"Running\") | state.equals(\"Starting\") | state.equals(\"Stopping\");\n                String privateMac = instanceResult.getString(3);\n                String privateIp = instanceResult.getString(4);\n                String privateNetmask = instanceResult.getString(5);\n                String publicMac = instanceResult.getString(6);\n                String publicIp = instanceResult.getString(7);\n                String publicNetmask = instanceResult.getString(8);\n                String guestMac = instanceResult.getString(9);\n                String guestIp = instanceResult.getString(10);\n                String guestNetmask = instanceResult.getString(11);\n                String gateway = instanceResult.getString(12);\n//                String type = instanceResult.getString(13);\n                // select host\n                try (PreparedStatement selectHost =\n                    conn.prepareStatement(\"SELECT host_pod_ref.gateway from host_pod_ref INNER JOIN vm_instance ON vm_instance.pod_id=host_pod_ref.id WHERE vm_instance.removed is NULL AND vm_instance.data_center_id=? AND vm_instance.type='SecondaryStorageVm'\");) {\n                    selectHost.setLong(1, dataCenterId);\n                    try (ResultSet hostResult = selectHost.executeQuery();) {\n\n                        if (!hostResult.next()) {\n                            s_logger.debug(\"Unable to find ssvm in data center \" + dataCenterId);\n                            return;\n                        }\n\n                        String podGateway = hostResult.getString(1);\n                        // select vlan\n                        try (PreparedStatement selectVlan = conn.prepareStatement(\"SELECT v.vlan_id from vlan v, user_ip_address u where v.id=u.vlan_db_id and u.public_ip_address=?\");) {\n                            selectVlan.setString(1, publicIp);\n                            try (ResultSet vlanResult = selectVlan.executeQuery();) {\n                                String publicVlan = null;\n                                while (vlanResult.next()) {\n                                    publicVlan = vlanResult.getString(1);\n                                }\n                                if (zoneType.equalsIgnoreCase(\"Basic\")) {\n                                    insertNic(conn, publicNetworkId, ssvmId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"DirectPodBasedNetworkGuru\", true, 2,\n                                        \"Dhcp\", null);\n\n                                } else {\n                                    insertNic(conn, publicNetworkId, ssvmId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"PublicNetworkGuru\", true, 2, \"Static\",\n                                        null);\n                                }\n                            }\n                        }\n\n\n                        long controlNicId =\n                            insertNic(conn, controlNetworkId, ssvmId, running, guestMac, guestIp, guestNetmask, \"Start\", \"169.254.0.1\", null, \"ControlNetworkGuru\", false, 0, \"Static\",\n                                guestIp != null ? (ssvmId + guestIp) : null);\n                        if (guestIp != null) {\n                            try (PreparedStatement updateLinkLocal = conn.prepareStatement(\"UPDATE op_dc_link_local_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");) {\n                                updateLinkLocal.setLong(1, controlNicId);\n                                updateLinkLocal.setString(2, guestIp);\n                                updateLinkLocal.setLong(3, dataCenterId);\n                                updateLinkLocal.executeUpdate();\n                            }\n                        }\n\n                        long mgmtNicId =\n                            insertNic(conn, managementNetworkId, ssvmId, running, privateMac, privateIp, privateNetmask, \"Start\", podGateway, null, \"PodBasedNetworkGuru\", false, 1,\n                                \"Static\", null);\n                        if (privateIp != null) {\n                            try (PreparedStatement updateIp = conn.prepareStatement(\"UPDATE op_dc_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");) {\n                                updateIp.setLong(1, mgmtNicId);\n                                updateIp.setString(2, privateIp);\n                                updateIp.setLong(3, dataCenterId);\n                                updateIp.executeUpdate();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void createLoadBalancerEvents(Connection conn) {\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"SELECT fw.account_id, ip.data_center_id, fw.id FROM firewall_rules fw, user_ip_address ip where purpose = 'LoadBalancing' and \"\n                    + \"fw.state = 'Active' and ip.id = fw.ip_address_id\");\n            s_logger.debug(\"Creating load balancer usage events\");\n            ResultSet rs = pstmt.executeQuery();\n            Date now = new Date();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long ruleId = rs.getLong(3);\n                PreparedStatement pstmt1 = null;\n                pstmt1 =\n                    conn.prepareStatement(\"INSERT INTO usage_event (usage_event.type, usage_event.created, usage_event.account_id, usage_event.zone_id, usage_event.resource_id)\"\n                        + \" VALUES (?, ?, ?, ?, ?)\");\n                pstmt1.setString(1, EventTypes.EVENT_LOAD_BALANCER_CREATE);\n                pstmt1.setString(2, DateUtil.getDateDisplayString(TimeZone.getTimeZone(\"GMT\"), now));\n                pstmt1.setLong(3, accountId);\n                pstmt1.setLong(4, zoneId);\n                pstmt1.setLong(5, ruleId);\n\n                pstmt1.executeUpdate();\n                pstmt1.close();\n            }\n\n            rs.close();\n            pstmt.close();\n            s_logger.debug(\"Completed creating load balancer usage events\");\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to add Load Balancer usage events due to:\", e);\n        }\n    }","id":18833,"modified_method":"private void createLoadBalancerEvents(Connection conn) {\n        s_logger.debug(\"Creating load balancer usage events\");\n        try (\n                PreparedStatement pstmt =\n                    conn.prepareStatement(\"SELECT fw.account_id, ip.data_center_id, fw.id FROM firewall_rules fw, user_ip_address ip where purpose = 'LoadBalancing' and \"\n                            + \"fw.state = 'Active' and ip.id = fw.ip_address_id\");\n                ResultSet rs = pstmt.executeQuery();\n            ) {\n            Date now = new Date();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long ruleId = rs.getLong(3);\n                try (\n                        PreparedStatement pstmt1 =\n                        conn.prepareStatement(\"INSERT INTO usage_event (usage_event.type, usage_event.created, usage_event.account_id, usage_event.zone_id, usage_event.resource_id)\"\n                                + \" VALUES (?, ?, ?, ?, ?)\");\n                    ) {\n                    pstmt1.setString(1, EventTypes.EVENT_LOAD_BALANCER_CREATE);\n                    pstmt1.setString(2, DateUtil.getDateDisplayString(TimeZone.getTimeZone(\"GMT\"), now));\n                    pstmt1.setLong(3, accountId);\n                    pstmt1.setLong(4, zoneId);\n                    pstmt1.setLong(5, ruleId);\n                    pstmt1.executeUpdate();\n                }\n            }\n            s_logger.debug(\"Completed creating load balancer usage events\");\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to add Load Balancer usage events due to:\", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void convertEvent(EventVO event, Connection conn) throws IOException, SQLException {\n        // we only create usage for success cases as error cases mean\n        // the event didn't happen, so it couldn't result in usage\n        if (!EventVO.LEVEL_INFO.equals(event.getLevel())) {\n            return;\n        }\n        String eventType = event.getType();\n        UsageEventVO usageEvent = null;\n        if (isVMEvent(eventType)) {\n            usageEvent = convertVMEvent(event);\n        } else if (isIPEvent(eventType)) {\n            usageEvent = convertIPEvent(event, conn);\n        } else if (isVolumeEvent(eventType)) {\n            usageEvent = convertVolumeEvent(event, conn);\n        } else if (isTemplateEvent(eventType)) {\n            usageEvent = convertTemplateEvent(event);\n        } else if (isISOEvent(eventType)) {\n            usageEvent = convertISOEvent(event);\n        } else if (isSnapshotEvent(eventType)) {\n            usageEvent = convertSnapshotEvent(event, conn);\n        } /*\n           * else if (isSecurityGrpEvent(eventType)) { usageEvent = convertSecurityGrpEvent(event); } else if\n           * (isLoadBalancerEvent(eventType)) { usageEvent = convertLoadBalancerEvent(event); }\n           */\n        if (usageEvent != null) {\n            usageEvent.setCreatedDate(event.getCreateDate());\n            if (usageEvent.getZoneId() == -1) {\n                usageEvent.setZoneId(0);\n            }\n            // update firewall_rules table\n            PreparedStatement pstmt = null;\n            pstmt =\n                conn.prepareStatement(\"INSERT INTO usage_event (usage_event.type, usage_event.created, usage_event.account_id, usage_event.zone_id, usage_event.resource_id, usage_event.resource_name,\"\n                    + \" usage_event.offering_id, usage_event.template_id, usage_event.size) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\");\n            pstmt.setString(1, usageEvent.getType());\n            pstmt.setString(2, DateUtil.getDateDisplayString(TimeZone.getTimeZone(\"GMT\"), usageEvent.getCreateDate()));\n            pstmt.setLong(3, usageEvent.getAccountId());\n            pstmt.setLong(4, usageEvent.getZoneId());\n            pstmt.setLong(5, usageEvent.getResourceId());\n            pstmt.setString(6, usageEvent.getResourceName());\n            if (usageEvent.getOfferingId() != null) {\n                pstmt.setLong(7, usageEvent.getOfferingId());\n            } else {\n                pstmt.setNull(7, Types.BIGINT);\n            }\n            if (usageEvent.getTemplateId() != null) {\n                pstmt.setLong(8, usageEvent.getTemplateId());\n            } else {\n                pstmt.setNull(8, Types.BIGINT);\n            }\n            if (usageEvent.getSize() != null) {\n                pstmt.setLong(9, usageEvent.getSize());\n            } else {\n                pstmt.setNull(9, Types.BIGINT);\n            }\n            // pstmt.setString(10, usageEvent.getResourceType());\n            pstmt.executeUpdate();\n            pstmt.close();\n        }\n    }","id":18834,"modified_method":"private void convertEvent(EventVO event, Connection conn) throws IOException, SQLException {\n        // we only create usage for success cases as error cases mean\n        // the event didn't happen, so it couldn't result in usage\n        if (!EventVO.LEVEL_INFO.equals(event.getLevel())) {\n            return;\n        }\n        String eventType = event.getType();\n        UsageEventVO usageEvent = null;\n        if (isVMEvent(eventType)) {\n            usageEvent = convertVMEvent(event);\n        } else if (isIPEvent(eventType)) {\n            usageEvent = convertIPEvent(event, conn);\n        } else if (isVolumeEvent(eventType)) {\n            usageEvent = convertVolumeEvent(event, conn);\n        } else if (isTemplateEvent(eventType)) {\n            usageEvent = convertTemplateEvent(event);\n        } else if (isISOEvent(eventType)) {\n            usageEvent = convertISOEvent(event);\n        } else if (isSnapshotEvent(eventType)) {\n            usageEvent = convertSnapshotEvent(event, conn);\n        } /*\n           * else if (isSecurityGrpEvent(eventType)) { usageEvent = convertSecurityGrpEvent(event); } else if\n           * (isLoadBalancerEvent(eventType)) { usageEvent = convertLoadBalancerEvent(event); }\n           */\n        if (usageEvent != null) {\n            usageEvent.setCreatedDate(event.getCreateDate());\n            if (usageEvent.getZoneId() == -1) {\n                usageEvent.setZoneId(0);\n            }\n            // update firewall_rules table\n            try (\n                    PreparedStatement pstmt =\n                    conn.prepareStatement(\"INSERT INTO usage_event (usage_event.type, usage_event.created, usage_event.account_id, usage_event.zone_id, usage_event.resource_id, usage_event.resource_name,\"\n                            + \" usage_event.offering_id, usage_event.template_id, usage_event.size) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\");\n                ) {\n                pstmt.setString(1, usageEvent.getType());\n                pstmt.setString(2, DateUtil.getDateDisplayString(TimeZone.getTimeZone(\"GMT\"), usageEvent.getCreateDate()));\n                pstmt.setLong(3, usageEvent.getAccountId());\n                pstmt.setLong(4, usageEvent.getZoneId());\n                pstmt.setLong(5, usageEvent.getResourceId());\n                pstmt.setString(6, usageEvent.getResourceName());\n                if (usageEvent.getOfferingId() != null) {\n                    pstmt.setLong(7, usageEvent.getOfferingId());\n                } else {\n                    pstmt.setNull(7, Types.BIGINT);\n                }\n                if (usageEvent.getTemplateId() != null) {\n                    pstmt.setLong(8, usageEvent.getTemplateId());\n                } else {\n                    pstmt.setNull(8, Types.BIGINT);\n                }\n                if (usageEvent.getSize() != null) {\n                    pstmt.setLong(9, usageEvent.getSize());\n                } else {\n                    pstmt.setNull(9, Types.BIGINT);\n                }\n                // pstmt.setString(10, usageEvent.getResourceType());\n                pstmt.executeUpdate();\n            }\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void createInstanceGroupVmMaps(Connection conn, long groupId, long instanceId) throws SQLException {\n        PreparedStatement pstmt = conn.prepareStatement(\"INSERT INTO instance_group_vm_map (group_id, instance_id) values (?, ?) \");\n        pstmt.setLong(1, groupId);\n        pstmt.setLong(2, instanceId);\n        pstmt.executeUpdate();\n        pstmt.close();\n    }","id":18835,"modified_method":"protected void createInstanceGroupVmMaps(Connection conn, long groupId, long instanceId) throws SQLException {\n        try (PreparedStatement pstmt = conn.prepareStatement(\"INSERT INTO instance_group_vm_map (group_id, instance_id) values (?, ?) \");) {\n            pstmt.setLong(1, groupId);\n            pstmt.setLong(2, instanceId);\n            pstmt.executeUpdate();\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void createPortForwardingEvents(Connection conn) {\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"SELECT fw.account_id, ip.data_center_id, fw.id FROM firewall_rules fw, user_ip_address ip where purpose = 'PortForwarding' and \"\n                    + \"fw.state = 'Active' and ip.id = fw.ip_address_id\");\n            s_logger.debug(\"Creating Port Forwarding usage events\");\n            ResultSet rs = pstmt.executeQuery();\n            Date now = new Date();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long ruleId = rs.getLong(3);\n                PreparedStatement pstmt1 = null;\n                pstmt1 =\n                    conn.prepareStatement(\"INSERT INTO usage_event (usage_event.type, usage_event.created, usage_event.account_id, usage_event.zone_id, usage_event.resource_id)\"\n                        + \" VALUES (?, ?, ?, ?, ?)\");\n                pstmt1.setString(1, EventTypes.EVENT_NET_RULE_ADD);\n                pstmt1.setString(2, DateUtil.getDateDisplayString(TimeZone.getTimeZone(\"GMT\"), now));\n                pstmt1.setLong(3, accountId);\n                pstmt1.setLong(4, zoneId);\n                pstmt1.setLong(5, ruleId);\n\n                pstmt1.executeUpdate();\n                pstmt1.close();\n            }\n\n            rs.close();\n            pstmt.close();\n            s_logger.debug(\"Completed creating Port Forwarding usage events\");\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to add port forwarding usage events due to:\", e);\n        }\n    }","id":18836,"modified_method":"private void createPortForwardingEvents(Connection conn) {\n        s_logger.debug(\"Creating Port Forwarding usage events\");\n        try (\n                PreparedStatement pstmt =\n                conn.prepareStatement(\"SELECT fw.account_id, ip.data_center_id, fw.id FROM firewall_rules fw, user_ip_address ip where purpose = 'PortForwarding' and \"\n                        + \"fw.state = 'Active' and ip.id = fw.ip_address_id\");\n                ResultSet rs = pstmt.executeQuery();\n            ) {\n            Date now = new Date();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long ruleId = rs.getLong(3);\n                try (\n                        PreparedStatement pstmt1 =\n                        conn.prepareStatement(\"INSERT INTO usage_event (usage_event.type, usage_event.created, usage_event.account_id, usage_event.zone_id, usage_event.resource_id)\"\n                                + \" VALUES (?, ?, ?, ?, ?)\");\n                    ) {\n                    pstmt1.setString(1, EventTypes.EVENT_NET_RULE_ADD);\n                    pstmt1.setString(2, DateUtil.getDateDisplayString(TimeZone.getTimeZone(\"GMT\"), now));\n                    pstmt1.setLong(3, accountId);\n                    pstmt1.setLong(4, zoneId);\n                    pstmt1.setLong(5, ruleId);\n                    pstmt1.executeUpdate();\n                }\n            }\n            s_logger.debug(\"Completed creating Port Forwarding usage events\");\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to add port forwarding usage events due to:\", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void updateUserStats(Connection conn) {\n        try {\n\n            // update device_type information\n            PreparedStatement pstmt = conn.prepareStatement(\"UPDATE user_statistics SET device_type='DomainRouter'\");\n            pstmt.executeUpdate();\n            pstmt.close();\n            s_logger.debug(\"Upgraded userStatistcis with device_type=DomainRouter\");\n\n            // update device_id infrormation\n            pstmt = conn.prepareStatement(\"SELECT id, account_id, data_center_id FROM user_statistics\");\n            ResultSet rs = pstmt.executeQuery();\n\n            while (rs.next()) {\n                Long id = rs.getLong(1); // user stats id\n                Long accountId = rs.getLong(2); // account id\n                Long dataCenterId = rs.getLong(3); // zone id\n\n                pstmt = conn.prepareStatement(\"SELECT networktype from data_center where id=?\");\n                pstmt.setLong(1, dataCenterId);\n\n                ResultSet dcSet = pstmt.executeQuery();\n\n                if (!dcSet.next()) {\n                    s_logger.error(\"Unable to get data_center information as a part of user_statistics update\");\n                    throw new CloudRuntimeException(\"Unable to get data_center information as a part of user_statistics update\");\n                }\n\n                String dataCenterType = dcSet.getString(1);\n\n                if (dataCenterType.equalsIgnoreCase(\"basic\")) {\n                    accountId = 1L;\n                }\n\n                pstmt = conn.prepareStatement(\"SELECT id from vm_instance where account_id=? AND data_center_id=? AND type='DomainRouter'\");\n                pstmt.setLong(1, accountId);\n                pstmt.setLong(2, dataCenterId);\n                ResultSet rs1 = pstmt.executeQuery();\n\n                Long deviceId = 0L;\n                if (!rs1.next()) {\n                    // check if there are any non-removed user vms existing for this account\n                    // if all vms are expunged, and there is no domR, just skip this record\n                    pstmt = conn.prepareStatement(\"SELECT * from vm_instance where account_id=? AND data_center_id=? AND removed IS NULL\");\n                    pstmt.setLong(1, accountId);\n                    pstmt.setLong(2, dataCenterId);\n                    ResultSet nonRemovedVms = pstmt.executeQuery();\n\n                    if (nonRemovedVms.next()) {\n                        s_logger.warn(\"Failed to find domR for for account id=\" + accountId + \" in zone id=\" + dataCenterId +\n                            \"; will try to locate domR based on user_vm info\");\n                        //try to get domR information from the user_vm belonging to the account\n                        pstmt =\n                            conn.prepareStatement(\"SELECT u.domain_router_id from user_vm u, vm_instance v where u.account_id=? AND v.data_center_id=? AND v.removed IS NULL AND u.domain_router_id is NOT NULL\");\n                        pstmt.setLong(1, accountId);\n                        pstmt.setLong(2, dataCenterId);\n                        ResultSet userVmSet = pstmt.executeQuery();\n                        if (!userVmSet.next()) {\n                            s_logger.warn(\"Skipping user_statistics upgrade for account id=\" + accountId + \" in datacenter id=\" + dataCenterId);\n                            continue;\n                        }\n                        deviceId = userVmSet.getLong(1);\n                    } else {\n                        s_logger.debug(\"Account id=\" + accountId + \" doesn't own any user vms and domRs, so skipping user_statistics update\");\n                        continue;\n                    }\n                } else {\n                    deviceId = rs1.getLong(1);\n                }\n\n                pstmt = conn.prepareStatement(\"UPDATE user_statistics SET device_id=? where id=?\");\n                pstmt.setLong(1, deviceId);\n                pstmt.setLong(2, id);\n                pstmt.executeUpdate();\n\n                pstmt = conn.prepareStatement(\"\");\n\n            }\n            s_logger.debug(\"Upgraded userStatistcis with deviceId(s)\");\n\n        } catch (Exception e) {\n            throw new CloudRuntimeException(\"Failed to migrate usage events: \", e);\n        }\n    }","id":18837,"modified_method":"private void updateUserStats(Connection conn) {\n        try (\n            // update device_type information\n                PreparedStatement pstmt = conn.prepareStatement(\"UPDATE user_statistics SET device_type='DomainRouter'\");\n            ){\n            pstmt.executeUpdate();\n            s_logger.debug(\"Upgraded userStatistcis with device_type=DomainRouter\");\n\n            // update device_id infrormation\n            try (\n                    PreparedStatement selectUserStatistics = conn.prepareStatement(\"SELECT id, account_id, data_center_id FROM user_statistics\");\n                    ResultSet rs = selectUserStatistics.executeQuery();\n                ) {\n                while (rs.next()) {\n                    Long id = rs.getLong(1); // user stats id\n                    Long accountId = rs.getLong(2); // account id\n                    Long dataCenterId = rs.getLong(3); // zone id\n\n                    try (PreparedStatement selectNetworkType = conn.prepareStatement(\"SELECT networktype from data_center where id=?\");) {\n                        selectNetworkType.setLong(1, dataCenterId);\n                        try (ResultSet dcSet = selectNetworkType.executeQuery();) {\n                            if (!dcSet.next()) {\n                                s_logger.error(\"Unable to get data_center information as a part of user_statistics update\");\n                                throw new CloudRuntimeException(\"Unable to get data_center information as a part of user_statistics update\");\n                            }\n                            String dataCenterType = dcSet.getString(1);\n                            if (dataCenterType.equalsIgnoreCase(\"basic\")) {\n                                accountId = 1L;\n                            }\n                        }\n                    }\n                    try (PreparedStatement selectDomainRouterIds = conn.prepareStatement(\"SELECT id from vm_instance where account_id=? AND data_center_id=? AND type='DomainRouter'\");) {\n                        selectDomainRouterIds.setLong(1, accountId);\n                        selectDomainRouterIds.setLong(2, dataCenterId);\n                        try (ResultSet domainRouterIdResult = selectDomainRouterIds.executeQuery();) {\n                            Long deviceId = 0L;\n                            if (!domainRouterIdResult.next()) {\n                                // check if there are any non-removed user vms existing for this account\n                                // if all vms are expunged, and there is no domR, just skip this record\n                                try (PreparedStatement selectnonRemovedVms = conn.prepareStatement(\"SELECT * from vm_instance where account_id=? AND data_center_id=? AND removed IS NULL\");) {\n                                    selectnonRemovedVms.setLong(1, accountId);\n                                    selectnonRemovedVms.setLong(2, dataCenterId);\n                                    try (ResultSet nonRemovedVms = selectnonRemovedVms.executeQuery();) {\n                                        if (nonRemovedVms.next()) {\n                                            s_logger.warn(\"Failed to find domR for for account id=\" + accountId + \" in zone id=\" + dataCenterId +\n                                                    \"; will try to locate domR based on user_vm info\");\n                                            //try to get domR information from the user_vm belonging to the account\n                                            try (PreparedStatement selectNetworkType =\n                                                    conn.prepareStatement(\"SELECT u.domain_router_id from user_vm u, vm_instance v where u.account_id=? AND v.data_center_id=? AND v.removed IS NULL AND u.domain_router_id is NOT NULL\");) {\n                                                selectNetworkType.setLong(1, accountId);\n                                                selectNetworkType.setLong(2, dataCenterId);\n                                                try (ResultSet userVmSet = selectNetworkType.executeQuery();) {\n                                                    if (!userVmSet.next()) {\n                                                        s_logger.warn(\"Skipping user_statistics upgrade for account id=\" + accountId + \" in datacenter id=\" + dataCenterId);\n                                                        continue;\n                                                    }\n                                                    deviceId = userVmSet.getLong(1);\n                                                }\n                                            }\n                                        } else {\n                                            s_logger.debug(\"Account id=\" + accountId + \" doesn't own any user vms and domRs, so skipping user_statistics update\");\n                                            continue;\n                                        }\n                                    }\n                                }\n                            } else {\n                                deviceId = domainRouterIdResult.getLong(1);\n                            }\n                            try (PreparedStatement updateUserStatistics = conn.prepareStatement(\"UPDATE user_statistics SET device_id=? where id=?\");) {\n                                updateUserStatistics.setLong(1, deviceId);\n                                updateUserStatistics.setLong(2, id);\n                                updateUserStatistics.executeUpdate();\n                            }\n                        }\n                    }\n                }\n            }\n            s_logger.debug(\"Upgraded userStatistcis with deviceId(s)\");\n\n        } catch (Exception e) {\n            throw new CloudRuntimeException(\"Failed to migrate usage events: \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void upgradeInstanceGroups(Connection conn) {\n        try {\n\n            // Create instance groups - duplicated names are allowed across accounts\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT DISTINCT v.group, v.account_id from vm_instance v where v.group is not null\");\n            ResultSet rs = pstmt.executeQuery();\n            ArrayList<Object[]> groups = new ArrayList<Object[]>();\n            while (rs.next()) {\n                Object[] group = new Object[10];\n                group[0] = rs.getString(1); // group name\n                group[1] = rs.getLong(2); // accountId\n                groups.add(group);\n            }\n            rs.close();\n            pstmt.close();\n\n            for (Object[] group : groups) {\n                String groupName = (String)group[0];\n                Long accountId = (Long)group[1];\n                createInstanceGroups(conn, groupName, accountId);\n            }\n\n            // update instance_group_vm_map\n            pstmt =\n                conn.prepareStatement(\"SELECT g.id, v.id from vm_instance v, instance_group g where g.name=v.group and g.account_id=v.account_id and v.group is not null\");\n            rs = pstmt.executeQuery();\n            ArrayList<Object[]> groupVmMaps = new ArrayList<Object[]>();\n            while (rs.next()) {\n                Object[] groupMaps = new Object[10];\n                groupMaps[0] = rs.getLong(1); // vmId\n                groupMaps[1] = rs.getLong(2); // groupId\n                groupVmMaps.add(groupMaps);\n            }\n            rs.close();\n            pstmt.close();\n\n            for (Object[] groupMap : groupVmMaps) {\n                Long groupId = (Long)groupMap[0];\n                Long instanceId = (Long)groupMap[1];\n                createInstanceGroupVmMaps(conn, groupId, instanceId);\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't update instance groups \", e);\n        }\n\n    }","id":18838,"modified_method":"protected void upgradeInstanceGroups(Connection conn) {\n        try (\n                PreparedStatement globalSelect = conn.prepareStatement(\"SELECT DISTINCT v.group, v.account_id from vm_instance v where v.group is not null\");\n                ResultSet globalResult = globalSelect.executeQuery();\n            ) {\n\n            // Create instance groups - duplicated names are allowed across accounts\n            ArrayList<Object[]> groups = new ArrayList<Object[]>();\n            while (globalResult.next()) {\n                Object[] group = new Object[10];\n                group[0] = globalResult.getString(1); // group name\n                group[1] = globalResult.getLong(2); // accountId\n                groups.add(group);\n            }\n\n            for (Object[] group : groups) {\n                String groupName = (String)group[0];\n                Long accountId = (Long)group[1];\n                createInstanceGroups(conn, groupName, accountId);\n            }\n\n            // update instance_group_vm_map\n            try (\n                    PreparedStatement detailSelect =\n                conn.prepareStatement(\"SELECT g.id, v.id from vm_instance v, instance_group g where g.name=v.group and g.account_id=v.account_id and v.group is not null\");\n                    ResultSet detailResult = detailSelect.executeQuery();\n                ) {\n                ArrayList<Object[]> groupVmMaps = new ArrayList<Object[]>();\n                while (detailResult.next()) {\n                    Object[] groupMaps = new Object[10];\n                    groupMaps[0] = detailResult.getLong(1); // vmId\n                    groupMaps[1] = detailResult.getLong(2); // groupId\n                    groupVmMaps.add(groupMaps);\n                }\n                for (Object[] groupMap : groupVmMaps) {\n                    Long groupId = (Long)groupMap[0];\n                    Long instanceId = (Long)groupMap[1];\n                    createInstanceGroupVmMaps(conn, groupId, instanceId);\n                }\n            }\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't update instance groups \", e);\n        }\n\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected long insertNic(Connection conn, long networkId, long instanceId, boolean running, String macAddress, String ipAddress, String netmask, String strategy,\n        String gateway, String vnet, String guru, boolean defNic, int deviceId, String mode, String reservationId) throws SQLException {\n        PreparedStatement pstmt =\n            conn.prepareStatement(\n                \"INSERT INTO nics (instance_id, network_id, mac_address, ip4_address, netmask, strategy, ip_type, broadcast_uri, mode, reserver_name, reservation_id, device_id, update_time, isolation_uri, ip6_address, default_nic, created, removed, state, gateway) \"\n                    + \"VALUES (?,           ?,          ?,           ?,           ?,       ?,        'Ip4',   ?,             ?,    ?,             ?,              ?,         now(),       ?,          NULL,         ?,          now(),   NULL,    ?,     ?)\",\n                Statement.RETURN_GENERATED_KEYS);\n        int i = 1;\n        String isolationUri = null;\n\n        String broadcast = null;\n        if (vnet != null) {\n            broadcast = \"vlan://\" + vnet;\n            if (vnet.equalsIgnoreCase(\"untagged\")) {\n                isolationUri = \"ec2://\" + vnet;\n            } else {\n                isolationUri = broadcast;\n            }\n        }\n        pstmt.setLong(i++, instanceId);\n        pstmt.setLong(i++, networkId);\n        pstmt.setString(i++, macAddress);\n        pstmt.setString(i++, ipAddress);\n        pstmt.setString(i++, netmask);\n        pstmt.setString(i++, strategy);\n        pstmt.setString(i++, broadcast);\n        pstmt.setString(i++, mode);\n        pstmt.setString(i++, guru);\n        pstmt.setString(i++, reservationId);\n        pstmt.setInt(i++, deviceId);\n        pstmt.setString(i++, isolationUri);\n        pstmt.setBoolean(i++, defNic);\n        pstmt.setString(i++, running ? \"Reserved\" : \"Allocated\");\n        pstmt.setString(i++, gateway);\n        pstmt.executeUpdate();\n        ResultSet rs = pstmt.getGeneratedKeys();\n        long nicId = 0;\n        if (!rs.next()) {\n            throw new CloudRuntimeException(\"Unable to get id for nic\");\n        }\n        nicId = rs.getLong(1);\n        rs.close();\n        pstmt.close();\n        return nicId;\n    }","id":18839,"modified_method":"protected long insertNic(Connection conn, long networkId, long instanceId, boolean running, String macAddress, String ipAddress, String netmask, String strategy,\n        String gateway, String vnet, String guru, boolean defNic, int deviceId, String mode, String reservationId) throws SQLException {\n        try (\n                PreparedStatement pstmt = conn.prepareStatement(\n                \"INSERT INTO nics (instance_id, network_id, mac_address, ip4_address, netmask, strategy, ip_type, broadcast_uri, mode, reserver_name, reservation_id, device_id, update_time, isolation_uri, ip6_address, default_nic, created, removed, state, gateway) \"\n                    + \"VALUES (?,           ?,          ?,           ?,           ?,       ?,        'Ip4',   ?,             ?,    ?,             ?,              ?,         now(),       ?,          NULL,         ?,          now(),   NULL,    ?,     ?)\",\n                Statement.RETURN_GENERATED_KEYS);\n            ) {\n            int i = 1;\n            String isolationUri = null;\n\n            String broadcast = null;\n            if (vnet != null) {\n                broadcast = \"vlan://\" + vnet;\n                if (vnet.equalsIgnoreCase(\"untagged\")) {\n                    isolationUri = \"ec2://\" + vnet;\n                } else {\n                    isolationUri = broadcast;\n                }\n            }\n            pstmt.setLong(i++, instanceId);\n            pstmt.setLong(i++, networkId);\n            pstmt.setString(i++, macAddress);\n            pstmt.setString(i++, ipAddress);\n            pstmt.setString(i++, netmask);\n            pstmt.setString(i++, strategy);\n            pstmt.setString(i++, broadcast);\n            pstmt.setString(i++, mode);\n            pstmt.setString(i++, guru);\n            pstmt.setString(i++, reservationId);\n            pstmt.setInt(i++, deviceId);\n            pstmt.setString(i++, isolationUri);\n            pstmt.setBoolean(i++, defNic);\n            pstmt.setString(i++, running ? \"Reserved\" : \"Allocated\");\n            pstmt.setString(i++, gateway);\n            pstmt.executeUpdate();\n            try (ResultSet rs = pstmt.getGeneratedKeys();) {\n                long nicId = 0;\n                if (!rs.next()) {\n                    throw new CloudRuntimeException(\"Unable to get id for nic\");\n                }\n                nicId = rs.getLong(1);\n                return nicId;\n            }\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void upgradeUserVms(Connection conn, long domainRouterId, long networkId, String gateway, String vnet, String guruName, String strategy)\n        throws SQLException {\n        PreparedStatement pstmt =\n            conn.prepareStatement(\"SELECT vm_instance.id, vm_instance.private_mac_address, vm_instance.private_ip_address, vm_instance.private_netmask, vm_instance.state, vm_instance.type FROM vm_instance INNER JOIN user_vm ON vm_instance.id=user_vm.id WHERE user_vm.domain_router_id=? and vm_instance.removed IS NULL\");\n        pstmt.setLong(1, domainRouterId);\n        ResultSet rs = pstmt.executeQuery();\n        List<Object[]> vms = new ArrayList<Object[]>();\n        while (rs.next()) {\n            Object[] vm = new Object[10];\n            vm[0] = rs.getLong(1); // vm id\n            vm[1] = rs.getString(2); // mac address\n            vm[2] = rs.getString(3); // ip address\n            vm[3] = rs.getString(4); // netmask\n            vm[4] = rs.getString(5); // vm state\n            vms.add(vm);\n        }\n        rs.close();\n        pstmt.close();\n\n        s_logger.debug(\"Upgrading \" + vms.size() + \" vms for router \" + domainRouterId);\n\n        int count = 0;\n        for (Object[] vm : vms) {\n            String state = (String)vm[4];\n\n            boolean running = false;\n            if (state.equals(\"Running\") || state.equals(\"Starting\") || state.equals(\"Stopping\")) {\n                running = true;\n                count++;\n            }\n\n            insertNic(conn, networkId, (Long)vm[0], running, (String)vm[1], (String)vm[2], (String)vm[3], strategy, gateway, vnet, guruName, true, 0, \"Dhcp\", null);\n        }\n\n        pstmt = conn.prepareStatement(\"SELECT state FROM vm_instance WHERE id=?\");\n        pstmt.setLong(1, domainRouterId);\n        rs = pstmt.executeQuery();\n        rs.next();\n        String state = rs.getString(1);\n        if (state.equals(\"Running\") || state.equals(\"Starting\") || state.equals(\"Stopping\")) {\n            count++;\n        }\n        rs.close();\n        pstmt.close();\n\n        Long originalNicsCount = 0L;\n        pstmt = conn.prepareStatement(\"SELECT nics_count from op_networks where id=?\");\n        pstmt.setLong(1, networkId);\n        ResultSet originalCountRs = pstmt.executeQuery();\n\n        if (originalCountRs.next()) {\n            originalNicsCount = originalCountRs.getLong(1);\n        }\n\n        Long resultCount = originalNicsCount + count;\n        originalCountRs.close();\n        pstmt.close();\n\n        pstmt = conn.prepareStatement(\"UPDATE op_networks SET nics_count=?, check_for_gc=? WHERE id=?\");\n        pstmt.setLong(1, resultCount);\n        if (count == 0) {\n            pstmt.setBoolean(2, false);\n        } else {\n            pstmt.setBoolean(2, true);\n        }\n        pstmt.setLong(3, networkId);\n        pstmt.executeUpdate();\n        pstmt.close();\n    }","id":18840,"modified_method":"protected void upgradeUserVms(Connection conn, long domainRouterId, long networkId, String gateway, String vnet, String guruName, String strategy)\n        throws SQLException {\n        int count = 0;\n        try(\n                PreparedStatement pstmt =\n            conn.prepareStatement(\"SELECT vm_instance.id, vm_instance.private_mac_address, vm_instance.private_ip_address, vm_instance.private_netmask, vm_instance.state, vm_instance.type FROM vm_instance INNER JOIN user_vm ON vm_instance.id=user_vm.id WHERE user_vm.domain_router_id=? and vm_instance.removed IS NULL\");\n           ) {\n            pstmt.setLong(1, domainRouterId);\n            try (ResultSet rs = pstmt.executeQuery();) {\n                List<Object[]> vms = new ArrayList<Object[]>();\n                while (rs.next()) {\n                    Object[] vm = new Object[10];\n                    vm[0] = rs.getLong(1); // vm id\n                    vm[1] = rs.getString(2); // mac address\n                    vm[2] = rs.getString(3); // ip address\n                    vm[3] = rs.getString(4); // netmask\n                    vm[4] = rs.getString(5); // vm state\n                    vms.add(vm);\n                }\n                s_logger.debug(\"Upgrading \" + vms.size() + \" vms for router \" + domainRouterId);\n                for (Object[] vm : vms) {\n                    String state = (String)vm[4];\n\n                    boolean running = false;\n                    if (state.equals(\"Running\") || state.equals(\"Starting\") || state.equals(\"Stopping\")) {\n                        running = true;\n                        count++;\n                    }\n\n                    insertNic(conn, networkId, (Long)vm[0], running, (String)vm[1], (String)vm[2], (String)vm[3], strategy, gateway, vnet, guruName, true, 0, \"Dhcp\", null);\n                }\n            }\n        }\n        try (PreparedStatement pstmt = conn.prepareStatement(\"SELECT state FROM vm_instance WHERE id=?\");) {\n            pstmt.setLong(1, domainRouterId);\n            try (ResultSet rs = pstmt.executeQuery();) {\n                rs.next();\n                String state = rs.getString(1);\n                if (state.equals(\"Running\") || state.equals(\"Starting\") || state.equals(\"Stopping\")) {\n                    count++;\n                }\n            }\n        }\n\n        Long originalNicsCount = 0L;\n        try (PreparedStatement selectNicsCount = conn.prepareStatement(\"SELECT nics_count from op_networks where id=?\");) {\n            selectNicsCount.setLong(1, networkId);\n            try (ResultSet originalCountRs = selectNicsCount.executeQuery();) {\n\n                if (originalCountRs.next()) {\n                    originalNicsCount = originalCountRs.getLong(1);\n                }\n\n                Long resultCount = originalNicsCount + count;\n                try (PreparedStatement updateNetworks = conn.prepareStatement(\"UPDATE op_networks SET nics_count=?, check_for_gc=? WHERE id=?\");) {\n                    updateNetworks.setLong(1, resultCount);\n                    if (count == 0) {\n                        updateNetworks.setBoolean(2, false);\n                    } else {\n                        updateNetworks.setBoolean(2, true);\n                    }\n                    updateNetworks.setLong(3, networkId);\n                    updateNetworks.executeUpdate();\n                }\n            }\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void upgradeHostCpuCapacityInfo(Connection conn) {\n        try {\n            // count user_vm memory info (M Bytes)\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"select h.id, sum(s.speed*s.cpu) from host h, vm_instance v, service_offering s where h.type='Routing' and v.state='Running' and v.`type`='User' and v.host_id=h.id  and v.service_offering_id = s.id group by h.id\");\n\n            ResultSet rs = pstmt.executeQuery();\n            Map<Long, Long> hostUsedCpuInfo = new HashMap<Long, Long>();\n            while (rs.next()) {\n                hostUsedCpuInfo.put(rs.getLong(1), rs.getLong(2));\n            }\n            rs.close();\n            pstmt.close();\n\n            int proxyCpuMhz = NumbersUtil.parseInt(getConfigValue(conn, \"consoleproxy.cpu.mhz\"), 500); // ConsoleProxyManager.DEFAULT_PROXY_VM_CPUMHZ);\n            int domrCpuMhz = NumbersUtil.parseInt(getConfigValue(conn, \"router.cpu.mhz\"), 500); // VpcVirtualNetworkApplianceManager.DEFAULT_ROUTER_CPU_MHZ);\n            int ssvmCpuMhz = NumbersUtil.parseInt(getConfigValue(conn, \"secstorage.vm.cpu.mhz\"), 500); // SecondaryStorageVmManager.DEFAULT_SS_VM_CPUMHZ);\n\n            pstmt =\n                conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='ConsoleProxy' and v.host_id=h.id group by h.id\");\n\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                if (hostUsedCpuInfo.get(rs.getLong(1)) != null) {\n                    Long usedCpuMhz = hostUsedCpuInfo.get(rs.getLong(1));\n                    hostUsedCpuInfo.put(rs.getLong(1), rs.getLong(2) * proxyCpuMhz + usedCpuMhz);\n                } else {\n                    hostUsedCpuInfo.put(rs.getLong(1), rs.getLong(2) * proxyCpuMhz);\n                }\n            }\n            rs.close();\n            pstmt.close();\n\n            pstmt =\n                conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='DomainRouter' and v.host_id=h.id group by h.id\");\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                if (hostUsedCpuInfo.get(rs.getLong(1)) != null) {\n                    Long usedCpuMhz = hostUsedCpuInfo.get(rs.getLong(1));\n                    hostUsedCpuInfo.put(rs.getLong(1), rs.getLong(2) * domrCpuMhz + usedCpuMhz);\n                } else {\n                    hostUsedCpuInfo.put(rs.getLong(1), rs.getLong(2) * domrCpuMhz);\n                }\n            }\n            rs.close();\n            pstmt.close();\n\n            pstmt =\n                conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='SecondaryStorageVm' and v.host_id=h.id group by h.id\");\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                if (hostUsedCpuInfo.get(rs.getLong(1)) != null) {\n                    Long usedCpuMhz = hostUsedCpuInfo.get(rs.getLong(1));\n                    hostUsedCpuInfo.put(rs.getLong(1), rs.getLong(2) * ssvmCpuMhz + usedCpuMhz);\n                } else {\n                    hostUsedCpuInfo.put(rs.getLong(1), rs.getLong(2) * ssvmCpuMhz);\n                }\n            }\n            rs.close();\n            pstmt.close();\n\n            for (Map.Entry<Long, Long> entry : hostUsedCpuInfo.entrySet()) {\n                pstmt = conn.prepareStatement(\"update op_host_capacity set used_capacity=? where host_id=? and capacity_type=1\");\n                pstmt.setLong(1, entry.getValue());\n                pstmt.setLong(2, entry.getKey());\n\n                pstmt.executeUpdate();\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't upgrade host capacity info \", e);\n        }\n    }","id":18841,"modified_method":"private void upgradeHostCpuCapacityInfo(Connection conn) {\n        // count user_vm memory info (M Bytes)\n        try (\n                PreparedStatement pstmt =\n                    conn.prepareStatement(\"select h.id, sum(s.speed*s.cpu) from host h, vm_instance v, service_offering s where h.type='Routing' and v.state='Running' and v.`type`='User' and v.host_id=h.id  and v.service_offering_id = s.id group by h.id\");\n\n                ResultSet rs = pstmt.executeQuery();\n            ) {\n            Map<Long, Long> hostUsedCpuInfo = new HashMap<Long, Long>();\n            while (rs.next()) {\n                hostUsedCpuInfo.put(rs.getLong(1), rs.getLong(2));\n            }\n            rs.close();\n            pstmt.close();\n\n            int proxyCpuMhz = NumbersUtil.parseInt(getConfigValue(conn, \"consoleproxy.cpu.mhz\"), 500); // ConsoleProxyManager.DEFAULT_PROXY_VM_CPUMHZ);\n            int domrCpuMhz = NumbersUtil.parseInt(getConfigValue(conn, \"router.cpu.mhz\"), 500); // VpcVirtualNetworkApplianceManager.DEFAULT_ROUTER_CPU_MHZ);\n            int ssvmCpuMhz = NumbersUtil.parseInt(getConfigValue(conn, \"secstorage.vm.cpu.mhz\"), 500); // SecondaryStorageVmManager.DEFAULT_SS_VM_CPUMHZ);\n\n            try (\n                    PreparedStatement getHostCpuInfo =\n                    conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='ConsoleProxy' and v.host_id=h.id group by h.id\");\n                    ResultSet hostCpuInfoData = getHostCpuInfo.executeQuery();\n                ) {\n                while (hostCpuInfoData.next()) {\n                    if (hostUsedCpuInfo.get(hostCpuInfoData.getLong(1)) != null) {\n                        Long usedCpuMhz = hostUsedCpuInfo.get(hostCpuInfoData.getLong(1));\n                        hostUsedCpuInfo.put(hostCpuInfoData.getLong(1), hostCpuInfoData.getLong(2) * proxyCpuMhz + usedCpuMhz);\n                    } else {\n                        hostUsedCpuInfo.put(hostCpuInfoData.getLong(1), hostCpuInfoData.getLong(2) * proxyCpuMhz);\n                    }\n                }\n            }\n\n            try (\n                    PreparedStatement getHostCpuInfo =\n                    conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='DomainRouter' and v.host_id=h.id group by h.id\");\n                    ResultSet hostCpuInfoData = getHostCpuInfo.executeQuery();\n                ) {\n                while (hostCpuInfoData.next()) {\n                    if (hostUsedCpuInfo.get(hostCpuInfoData.getLong(1)) != null) {\n                        Long usedCpuMhz = hostUsedCpuInfo.get(hostCpuInfoData.getLong(1));\n                        hostUsedCpuInfo.put(hostCpuInfoData.getLong(1), hostCpuInfoData.getLong(2) * domrCpuMhz + usedCpuMhz);\n                    } else {\n                        hostUsedCpuInfo.put(hostCpuInfoData.getLong(1), hostCpuInfoData.getLong(2) * domrCpuMhz);\n                    }\n                }\n            }\n\n            try (\n                    PreparedStatement getHostCpuInfo =\n                    conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='SecondaryStorageVm' and v.host_id=h.id group by h.id\");\n                    ResultSet hostCpuInfoData = getHostCpuInfo.executeQuery();\n                ) {\n                while (hostCpuInfoData.next()) {\n                    if (hostUsedCpuInfo.get(hostCpuInfoData.getLong(1)) != null) {\n                        Long usedCpuMhz = hostUsedCpuInfo.get(hostCpuInfoData.getLong(1));\n                        hostUsedCpuInfo.put(hostCpuInfoData.getLong(1), hostCpuInfoData.getLong(2) * ssvmCpuMhz + usedCpuMhz);\n                    } else {\n                        hostUsedCpuInfo.put(hostCpuInfoData.getLong(1), hostCpuInfoData.getLong(2) * ssvmCpuMhz);\n                    }\n                }\n            }\n\n            for (Map.Entry<Long, Long> entry : hostUsedCpuInfo.entrySet()) {\n                try (PreparedStatement updateHostCapacity = conn.prepareStatement(\"update op_host_capacity set used_capacity=? where host_id=? and capacity_type=1\");) {\n                    updateHostCapacity.setLong(1, entry.getValue());\n                    updateHostCapacity.setLong(2, entry.getKey());\n\n                    updateHostCapacity.executeUpdate();\n                }\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't upgrade host capacity info \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void upgradeConsoleProxy(Connection conn, long dcId, long cpId, long publicNetworkId, long managementNetworkId, long controlNetworkId, String zoneType)\n        throws SQLException {\n        s_logger.debug(\"Upgrading cp\" + cpId);\n        PreparedStatement pstmt =\n            conn.prepareStatement(\"SELECT vm_instance.id, vm_instance.state, vm_instance.private_mac_address, vm_instance.private_ip_address, vm_instance.private_netmask, console_proxy.public_mac_address, console_proxy.public_ip_address, console_proxy.public_netmask, console_proxy.guest_mac_address, console_proxy.guest_ip_address, console_proxy.guest_netmask, console_proxy.gateway, vm_instance.type FROM vm_instance INNER JOIN console_proxy ON vm_instance.id=console_proxy.id WHERE vm_instance.removed is NULL AND vm_instance.id=?\");\n        pstmt.setLong(1, cpId);\n        ResultSet rs = pstmt.executeQuery();\n\n        if (!rs.next()) {\n            throw new CloudRuntimeException(\"Unable to find cp \" + cpId);\n        }\n\n        long id = rs.getLong(1);\n        String state = rs.getString(2);\n        boolean running = state.equals(\"Running\") | state.equals(\"Starting\") | state.equals(\"Stopping\");\n        String privateMac = rs.getString(3);\n        String privateIp = rs.getString(4);\n        String privateNetmask = rs.getString(5);\n        String publicMac = rs.getString(6);\n        String publicIp = rs.getString(7);\n        String publicNetmask = rs.getString(8);\n        String guestMac = rs.getString(9);\n        String guestIp = rs.getString(10);\n        String guestNetmask = rs.getString(11);\n        String gateway = rs.getString(12);\n        String type = rs.getString(13);\n        rs.close();\n        pstmt.close();\n\n        pstmt =\n            conn.prepareStatement(\"SELECT host_pod_ref.gateway from host_pod_ref INNER JOIN vm_instance ON vm_instance.pod_id=host_pod_ref.id WHERE vm_instance.id=?\");\n        pstmt.setLong(1, cpId);\n        rs = pstmt.executeQuery();\n\n        if (!rs.next()) {\n            throw new CloudRuntimeException(\"Unable to find cp \" + cpId);\n        }\n\n        String podGateway = rs.getString(1);\n        rs.close();\n        pstmt.close();\n\n        pstmt = conn.prepareStatement(\"SELECT v.vlan_id from vlan v, user_ip_address u where v.id=u.vlan_db_id and u.public_ip_address=?\");\n        pstmt.setString(1, publicIp);\n        rs = pstmt.executeQuery();\n\n        String publicVlan = null;\n        while (rs.next()) {\n            publicVlan = rs.getString(1);\n        }\n\n        rs.close();\n        pstmt.close();\n\n        if (zoneType.equalsIgnoreCase(\"Basic\")) {\n            insertNic(conn, publicNetworkId, cpId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"DirectPodBasedNetworkGuru\", true, 2,\n                \"Dhcp\", null);\n        } else {\n            insertNic(conn, publicNetworkId, cpId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"PublicNetworkGuru\", true, 2, \"Static\",\n                null);\n        }\n\n        long controlNicId =\n            insertNic(conn, controlNetworkId, cpId, running, guestMac, guestIp, guestNetmask, \"Start\", \"169.254.0.1\", null, \"ControlNetworkGuru\", false, 0, \"Static\",\n                guestIp != null ? (cpId + guestIp) : null);\n        if (guestIp != null) {\n            pstmt = conn.prepareStatement(\"UPDATE op_dc_link_local_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");\n            pstmt.setLong(1, controlNicId);\n            pstmt.setString(2, guestIp);\n            pstmt.setLong(3, dcId);\n            pstmt.executeUpdate();\n            pstmt.close();\n        }\n        long mgmtNicId =\n            insertNic(conn, managementNetworkId, cpId, running, privateMac, privateIp, privateNetmask, \"Start\", podGateway, null, \"PodBasedNetworkGuru\", false, 1,\n                \"Static\", privateIp != null ? (cpId + privateIp) : null);\n        if (privateIp != null) {\n            pstmt = conn.prepareStatement(\"UPDATE op_dc_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");\n            pstmt.setLong(1, mgmtNicId);\n            pstmt.setString(2, privateIp);\n            pstmt.setLong(3, dcId);\n            pstmt.executeUpdate();\n            pstmt.close();\n        }\n    }","id":18842,"modified_method":"protected void upgradeConsoleProxy(Connection conn, long dcId, long cpId, long publicNetworkId, long managementNetworkId, long controlNetworkId, String zoneType)\n        throws SQLException {\n        s_logger.debug(\"Upgrading cp\" + cpId);\n        try (PreparedStatement pstmt =\n            conn.prepareStatement(\"SELECT vm_instance.id, vm_instance.state, vm_instance.private_mac_address, vm_instance.private_ip_address, vm_instance.private_netmask, console_proxy.public_mac_address, console_proxy.public_ip_address, console_proxy.public_netmask, console_proxy.guest_mac_address, console_proxy.guest_ip_address, console_proxy.guest_netmask, console_proxy.gateway, vm_instance.type FROM vm_instance INNER JOIN console_proxy ON vm_instance.id=console_proxy.id WHERE vm_instance.removed is NULL AND vm_instance.id=?\");) {\n            pstmt.setLong(1, cpId);\n            try (ResultSet rs = pstmt.executeQuery();) {\n\n                if (!rs.next()) {\n                    throw new CloudRuntimeException(\"Unable to find cp \" + cpId);\n                }\n\n                long id = rs.getLong(1);\n                String state = rs.getString(2);\n                boolean running = state.equals(\"Running\") | state.equals(\"Starting\") | state.equals(\"Stopping\");\n                String privateMac = rs.getString(3);\n                String privateIp = rs.getString(4);\n                String privateNetmask = rs.getString(5);\n                String publicMac = rs.getString(6);\n                String publicIp = rs.getString(7);\n                String publicNetmask = rs.getString(8);\n                String guestMac = rs.getString(9);\n                String guestIp = rs.getString(10);\n                String guestNetmask = rs.getString(11);\n                String gateway = rs.getString(12);\n                String type = rs.getString(13);\n                try (\n                        PreparedStatement selectHost =\n                        conn.prepareStatement(\"SELECT host_pod_ref.gateway from host_pod_ref INNER JOIN vm_instance ON vm_instance.pod_id=host_pod_ref.id WHERE vm_instance.id=?\");\n                    ) {\n                    selectHost.setLong(1, cpId);\n                    try (ResultSet hostResult = selectHost.executeQuery();) {\n\n                        if (!hostResult.next()) {\n                            throw new CloudRuntimeException(\"Unable to find cp \" + cpId);\n                        }\n\n                        String podGateway = hostResult.getString(1);\n                        try (PreparedStatement selectVlan = conn.prepareStatement(\"SELECT v.vlan_id from vlan v, user_ip_address u where v.id=u.vlan_db_id and u.public_ip_address=?\");) {\n                            selectVlan.setString(1, publicIp);\n                            try (ResultSet vlanResult = selectVlan.executeQuery();) {\n\n                                String publicVlan = null;\n                                while (vlanResult.next()) {\n                                    publicVlan = vlanResult.getString(1);\n                                }\n                                if (zoneType.equalsIgnoreCase(\"Basic\")) {\n                                    insertNic(conn, publicNetworkId, cpId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"DirectPodBasedNetworkGuru\", true, 2,\n                                        \"Dhcp\", null);\n                                } else {\n                                    insertNic(conn, publicNetworkId, cpId, running, publicMac, publicIp, publicNetmask, \"Create\", gateway, publicVlan, \"PublicNetworkGuru\", true, 2, \"Static\",\n                                        null);\n                                }\n\n                                long controlNicId =\n                                    insertNic(conn, controlNetworkId, cpId, running, guestMac, guestIp, guestNetmask, \"Start\", \"169.254.0.1\", null, \"ControlNetworkGuru\", false, 0, \"Static\",\n                                        guestIp != null ? (cpId + guestIp) : null);\n                                if (guestIp != null) {\n                                    try (PreparedStatement update = conn.prepareStatement(\"UPDATE op_dc_link_local_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");) {\n                                        update.setLong(1, controlNicId);\n                                        update.setString(2, guestIp);\n                                        update.setLong(3, dcId);\n                                        update.executeUpdate();\n                                    }\n                                }\n                                long mgmtNicId =\n                                    insertNic(conn, managementNetworkId, cpId, running, privateMac, privateIp, privateNetmask, \"Start\", podGateway, null, \"PodBasedNetworkGuru\", false, 1,\n                                        \"Static\", privateIp != null ? (cpId + privateIp) : null);\n                                if (privateIp != null) {\n                                    try (PreparedStatement update = conn.prepareStatement(\"UPDATE op_dc_ip_address_alloc SET instance_id=? WHERE ip_address=? AND data_center_id=?\");) {\n                                        update.setLong(1, mgmtNicId);\n                                        update.setString(2, privateIp);\n                                        update.setLong(3, dcId);\n                                        update.executeUpdate();\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public void performDataMigration(Connection conn) {\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"USE cloud\");\n            pstmt.executeQuery();\n            upgradeDataCenter(conn);\n            upgradeStoragePools(conn);\n            upgradeInstanceGroups(conn);\n            upgradePortForwardingRules(conn);\n            upgradeLoadBalancingRules(conn);\n            upgradeHostMemoryCapacityInfo(conn);\n            upgradeHostCpuCapacityInfo(conn);\n            upgradeDomainResourceCounts(conn);\n\n            migrateEvents(conn);\n            createPortForwardingEvents(conn);\n            createLoadBalancerEvents(conn);\n            createNetworkOfferingEvents(conn);\n\n            // Update hypervisor type for user vm to be consistent with original 2.2.4\n            pstmt = conn.prepareStatement(\"UPDATE vm_instance SET hypervisor_type='XenServer' WHERE hypervisor_type='xenserver'\");\n            pstmt.executeUpdate();\n            pstmt.close();\n\n            // Set account=systemAccount and domain=ROOT for CPVM/SSVM\n            pstmt = conn.prepareStatement(\"UPDATE vm_instance SET account_id=1, domain_id=1 WHERE type='ConsoleProxy' or type='SecondaryStorageVm'\");\n            pstmt.executeUpdate();\n            pstmt.close();\n\n            // Update user statistics\n            updateUserStats(conn);\n\n            // delete orphaned (storage pool no longer exists) template_spool_ref(s)\n            deleteOrphanedTemplateRef(conn);\n\n            // Upgrade volumes with incorrect Destroyed field\n            cleanupVolumes(conn);\n\n            // modify network_group indexes\n            modifyIndexes(conn);\n\n            // cleanup lb - vm maps for load balancers that are already removed (there was a bug in 2.1.x when the mappings were\n            // left around)\n            cleanupLbVmMaps(conn);\n\n        } catch (SQLException e) {\n            s_logger.error(\"Can't perform data migration \", e);\n            throw new CloudRuntimeException(\"Can't perform data migration \", e);\n        }\n\n    }","id":18843,"modified_method":"@Override\n    public void performDataMigration(Connection conn) {\n        try (\n                PreparedStatement useCloud = conn.prepareStatement(\"USE cloud\");\n                PreparedStatement hypervisorTypeUpdate = conn.prepareStatement(\"UPDATE vm_instance SET hypervisor_type='XenServer' WHERE hypervisor_type='xenserver'\");\n                PreparedStatement instanceUpdate = conn.prepareStatement(\"UPDATE vm_instance SET account_id=1, domain_id=1 WHERE type='ConsoleProxy' or type='SecondaryStorageVm'\");\n            ) {\n            useCloud.executeQuery();\n            upgradeDataCenter(conn);\n            upgradeStoragePools(conn);\n            upgradeInstanceGroups(conn);\n            upgradePortForwardingRules(conn);\n            upgradeLoadBalancingRules(conn);\n            upgradeHostMemoryCapacityInfo(conn);\n            upgradeHostCpuCapacityInfo(conn);\n            upgradeDomainResourceCounts(conn);\n\n            migrateEvents(conn);\n            createPortForwardingEvents(conn);\n            createLoadBalancerEvents(conn);\n            createNetworkOfferingEvents(conn);\n\n            // Update hypervisor type for user vm to be consistent with original 2.2.4\n            hypervisorTypeUpdate.executeUpdate();\n\n            // Set account=systemAccount and domain=ROOT for CPVM/SSVM\n            instanceUpdate.executeUpdate();\n\n            // Update user statistics\n            updateUserStats(conn);\n\n            // delete orphaned (storage pool no longer exists) template_spool_ref(s)\n            deleteOrphanedTemplateRef(conn);\n\n            // Upgrade volumes with incorrect Destroyed field\n            cleanupVolumes(conn);\n\n            // modify network_group indexes\n            modifyIndexes(conn);\n\n            // cleanup lb - vm maps for load balancers that are already removed (there was a bug in 2.1.x when the mappings were\n            // left around)\n            cleanupLbVmMaps(conn);\n\n        } catch (SQLException e) {\n            s_logger.error(\"Can't perform data migration \", e);\n            throw new CloudRuntimeException(\"Can't perform data migration \", e);\n        }\n\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"public void upgradeLoadBalancingRules(Connection conn) {\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT name, ip_address, public_port, private_port, algorithm, id FROM load_balancer\");\n            ResultSet rs = pstmt.executeQuery();\n            ArrayList<Object[]> lbs = new ArrayList<Object[]>();\n            while (rs.next()) {\n                Object[] lb = new Object[10];\n                lb[0] = rs.getString(1); // lb name\n                lb[1] = rs.getString(2); // lb public IP\n                lb[2] = rs.getString(3); // lb public port\n                lb[3] = rs.getString(4); // lb private port\n                lb[4] = rs.getString(5); // lb algorithm\n                lb[5] = rs.getLong(6); // lb Id\n                lbs.add(lb);\n            }\n            rs.close();\n            pstmt.close();\n\n            if (!lbs.isEmpty()) {\n                s_logger.debug(\"Found \" + lbs.size() + \" lb rules to upgrade\");\n                pstmt = conn.prepareStatement(\"SELECT id FROM firewall_rules order by id\");\n                rs = pstmt.executeQuery();\n                long newLbId = 0;\n                while (rs.next()) {\n                    newLbId = rs.getLong(1);\n                }\n                rs.close();\n                pstmt.close();\n\n                for (Object[] lb : lbs) {\n                    String name = (String)lb[0];\n                    String publicIp = (String)lb[1];\n                    String sourcePort = (String)lb[2];\n                    String destPort = (String)lb[3];\n                    String algorithm = (String)lb[4];\n                    Long originalLbId = (Long)lb[5];\n                    newLbId = newLbId + 1;\n\n                    pstmt = conn.prepareStatement(\"SELECT id, account_id, domain_id, network_id FROM user_ip_address WHERE public_ip_address=?\");\n                    pstmt.setString(1, publicIp);\n                    rs = pstmt.executeQuery();\n\n                    if (!rs.next()) {\n                        s_logger.warn(\"Unable to find public IP address \" + publicIp + \"; skipping lb rule id=\" + originalLbId +\n                            \" from update. Cleaning it up from load_balancer_vm_map and load_balancer table\");\n                        pstmt = conn.prepareStatement(\"DELETE from load_balancer_vm_map where load_balancer_id=?\");\n                        pstmt.setLong(1, originalLbId);\n                        pstmt.executeUpdate();\n\n                        pstmt = conn.prepareStatement(\"DELETE from load_balancer where id=?\");\n                        pstmt.setLong(1, originalLbId);\n                        pstmt.executeUpdate();\n\n                        continue;\n                    }\n\n                    int ipAddressId = rs.getInt(1);\n                    long accountId = rs.getLong(2);\n                    long domainId = rs.getLong(3);\n                    long networkId = rs.getLong(4);\n\n                    rs.close();\n                    pstmt.close();\n\n                    // update firewall_rules table\n                    s_logger.trace(\"Updating firewall_rules table as a part of LB rules upgrade...\");\n                    pstmt =\n                        conn.prepareStatement(\"INSERT INTO firewall_rules (id, ip_address_id, start_port, end_port, state, protocol, purpose, account_id, domain_id, network_id, xid, is_static_nat, created) VALUES (?,    ?,      ?,      ?,      'Active',        ?,     'LoadBalancing',       ?,      ?,      ?,      ?,       0,       now())\");\n                    pstmt.setLong(1, newLbId);\n                    pstmt.setInt(2, ipAddressId);\n                    pstmt.setInt(3, Integer.parseInt(sourcePort));\n                    pstmt.setInt(4, Integer.parseInt(sourcePort));\n                    pstmt.setString(5, \"tcp\");\n                    pstmt.setLong(6, accountId);\n                    pstmt.setLong(7, domainId);\n                    pstmt.setLong(8, networkId);\n                    pstmt.setString(9, UUID.randomUUID().toString());\n                    pstmt.executeUpdate();\n                    pstmt.close();\n                    s_logger.trace(\"firewall_rules table is updated as a part of LB rules upgrade\");\n\n                    // update load_balancing_rules\n                    s_logger.trace(\"Updating load_balancing_rules table as a part of LB rules upgrade...\");\n                    pstmt = conn.prepareStatement(\"INSERT INTO load_balancing_rules VALUES (?,      ?,      NULL,      ?,       ?,      ?)\");\n                    pstmt.setLong(1, newLbId);\n                    pstmt.setString(2, name);\n                    pstmt.setInt(3, Integer.parseInt(destPort));\n                    pstmt.setInt(4, Integer.parseInt(destPort));\n                    pstmt.setString(5, algorithm);\n                    pstmt.executeUpdate();\n                    pstmt.close();\n                    s_logger.trace(\"load_balancing_rules table is updated as a part of LB rules upgrade\");\n\n                    // update load_balancer_vm_map table\n                    s_logger.trace(\"Updating load_balancer_vm_map table as a part of LB rules upgrade...\");\n                    pstmt = conn.prepareStatement(\"SELECT instance_id FROM load_balancer_vm_map WHERE load_balancer_id=?\");\n                    pstmt.setLong(1, originalLbId);\n                    rs = pstmt.executeQuery();\n                    ArrayList<Object[]> lbMaps = new ArrayList<Object[]>();\n                    while (rs.next()) {\n                        Object[] lbMap = new Object[10];\n                        lbMap[0] = rs.getLong(1); // instanceId\n                        lbMaps.add(lbMap);\n                    }\n                    rs.close();\n                    pstmt.close();\n\n                    pstmt = conn.prepareStatement(\"UPDATE load_balancer_vm_map SET load_balancer_id=? WHERE load_balancer_id=?\");\n                    pstmt.setLong(1, newLbId);\n                    pstmt.setLong(2, originalLbId);\n                    pstmt.executeUpdate();\n                    pstmt.close();\n\n                    s_logger.trace(\"load_balancer_vm_map table is updated as a part of LB rules upgrade\");\n                }\n            }\n            s_logger.debug(\"LB rules are upgraded\");\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't update LB rules \", e);\n        }\n    }","id":18844,"modified_method":"public void upgradeLoadBalancingRules(Connection conn) {\n        try (\n                PreparedStatement pstmt = conn.prepareStatement(\"SELECT name, ip_address, public_port, private_port, algorithm, id FROM load_balancer\");\n                ResultSet rs = pstmt.executeQuery();\n            ) {\n            ArrayList<Object[]> lbs = new ArrayList<Object[]>();\n            while (rs.next()) {\n                Object[] lb = new Object[10];\n                lb[0] = rs.getString(1); // lb name\n                lb[1] = rs.getString(2); // lb public IP\n                lb[2] = rs.getString(3); // lb public port\n                lb[3] = rs.getString(4); // lb private port\n                lb[4] = rs.getString(5); // lb algorithm\n                lb[5] = rs.getLong(6); // lb Id\n                lbs.add(lb);\n            }\n\n            if (!lbs.isEmpty()) {\n                s_logger.debug(\"Found \" + lbs.size() + \" lb rules to upgrade\");\n                long newLbId = 0;\n                try (\n                        PreparedStatement selectFWRules = conn.prepareStatement(\"SELECT max(id) FROM firewall_rules order by id\");\n                        ResultSet fwRules = selectFWRules.executeQuery();\n                    ) {\n                    if (rs.next()) {\n                        newLbId = rs.getLong(1);\n                    }\n                }\n                for (Object[] lb : lbs) {\n                    String name = (String)lb[0];\n                    String publicIp = (String)lb[1];\n                    String sourcePort = (String)lb[2];\n                    String destPort = (String)lb[3];\n                    String algorithm = (String)lb[4];\n                    Long originalLbId = (Long)lb[5];\n                    newLbId = newLbId + 1;\n\n                    try (PreparedStatement selectIpData = conn.prepareStatement(\"SELECT id, account_id, domain_id, network_id FROM user_ip_address WHERE public_ip_address=?\");) {\n                        selectIpData.setString(1, publicIp);\n                        try (ResultSet ipData = selectIpData.executeQuery();) {\n\n                            if (!ipData.next()) {\n                                s_logger.warn(\"Unable to find public IP address \" + publicIp + \"; skipping lb rule id=\" + originalLbId +\n                                        \" from update. Cleaning it up from load_balancer_vm_map and load_balancer table\");\n                                try (PreparedStatement deleteLbVmMap = conn.prepareStatement(\"DELETE from load_balancer_vm_map where load_balancer_id=?\");) {\n                                    deleteLbVmMap.setLong(1, originalLbId);\n                                    deleteLbVmMap.executeUpdate();\n                                }\n                                try (PreparedStatement deleteLoadBalancer = conn.prepareStatement(\"DELETE from load_balancer where id=?\");) {\n                                    deleteLoadBalancer.setLong(1, originalLbId);\n                                    deleteLoadBalancer.executeUpdate();\n                                }\n                                continue;\n                            }\n                            int ipAddressId = ipData.getInt(1);\n                            long accountId = ipData.getLong(2);\n                            long domainId = ipData.getLong(3);\n                            long networkId = ipData.getLong(4);\n                            // update firewall_rules table\n                            s_logger.trace(\"Updating firewall_rules table as a part of LB rules upgrade...\");\n                            try (PreparedStatement insertFirewallRules =\n                                conn.prepareStatement(\"INSERT INTO firewall_rules (id, ip_address_id, start_port, end_port, state, protocol, purpose, account_id, domain_id, network_id, xid, is_static_nat, created) VALUES (?,    ?,      ?,      ?,      'Active',        ?,     'LoadBalancing',       ?,      ?,      ?,      ?,       0,       now())\");) {\n                                insertFirewallRules.setLong(1, newLbId);\n                                insertFirewallRules.setInt(2, ipAddressId);\n                                insertFirewallRules.setInt(3, Integer.parseInt(sourcePort));\n                                insertFirewallRules.setInt(4, Integer.parseInt(sourcePort));\n                                insertFirewallRules.setString(5, \"tcp\");\n                                insertFirewallRules.setLong(6, accountId);\n                                insertFirewallRules.setLong(7, domainId);\n                                insertFirewallRules.setLong(8, networkId);\n                                insertFirewallRules.setString(9, UUID.randomUUID().toString());\n                                insertFirewallRules.executeUpdate();\n                            }\n                            s_logger.trace(\"firewall_rules table is updated as a part of LB rules upgrade\");\n                        }\n                    }\n\n\n                    // update load_balancing_rules\n                    s_logger.trace(\"Updating load_balancing_rules table as a part of LB rules upgrade...\");\n                    try (PreparedStatement insertLoadBalancer = conn.prepareStatement(\"INSERT INTO load_balancing_rules VALUES (?,      ?,      NULL,      ?,       ?,      ?)\");) {\n                        insertLoadBalancer.setLong(1, newLbId);\n                        insertLoadBalancer.setString(2, name);\n                        insertLoadBalancer.setInt(3, Integer.parseInt(destPort));\n                        insertLoadBalancer.setInt(4, Integer.parseInt(destPort));\n                        insertLoadBalancer.setString(5, algorithm);\n                        insertLoadBalancer.executeUpdate();\n                    }\n                    s_logger.trace(\"load_balancing_rules table is updated as a part of LB rules upgrade\");\n\n                    // update load_balancer_vm_map table\n                    s_logger.trace(\"Updating load_balancer_vm_map table as a part of LB rules upgrade...\");\n                    try (\n                            PreparedStatement selectInstance = conn.prepareStatement(\"SELECT instance_id FROM load_balancer_vm_map WHERE load_balancer_id=?\");\n                        ) {\n                        selectInstance.setLong(1, originalLbId);\n                        try (ResultSet selectedInstance = selectInstance.executeQuery();) {\n                            ArrayList<Object[]> lbMaps = new ArrayList<Object[]>();\n                            while (selectedInstance.next()) {\n                                Object[] lbMap = new Object[10];\n                                lbMap[0] = selectedInstance.getLong(1); // instanceId\n                                lbMaps.add(lbMap);\n                            }\n                        }\n                    }\n\n                    try (PreparedStatement updateLoadBalancer = conn.prepareStatement(\"UPDATE load_balancer_vm_map SET load_balancer_id=? WHERE load_balancer_id=?\");) {\n                        updateLoadBalancer.setLong(1, newLbId);\n                        updateLoadBalancer.setLong(2, originalLbId);\n                        updateLoadBalancer.executeUpdate();\n                    }\n                    s_logger.trace(\"load_balancer_vm_map table is updated as a part of LB rules upgrade\");\n                }\n            }\n            s_logger.debug(\"LB rules are upgraded\");\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't update LB rules \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"public void upgradePortForwardingRules(Connection conn) {\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"SELECT id, public_ip_address, public_port, private_ip_address, private_port, protocol FROM ip_forwarding WHERE forwarding=1\");\n            ResultSet rs = pstmt.executeQuery();\n            ArrayList<Object[]> rules = new ArrayList<Object[]>();\n            while (rs.next()) {\n                Object[] rule = new Object[10];\n                rule[0] = rs.getLong(1); // rule id\n                rule[1] = rs.getString(2); // rule public IP\n                rule[2] = rs.getString(3); // rule public port\n                rule[3] = rs.getString(4); // rule private Ip\n                rule[4] = rs.getString(5); // rule private port\n                rule[5] = rs.getString(6); // rule protocol\n                rules.add(rule);\n            }\n            rs.close();\n            pstmt.close();\n\n            if (!rules.isEmpty()) {\n                s_logger.debug(\"Found \" + rules.size() + \" port forwarding rules to upgrade\");\n                for (Object[] rule : rules) {\n                    long id = (Long)rule[0];\n                    String sourcePort = (String)rule[2];\n                    String protocol = (String)rule[5];\n                    String publicIp = (String)rule[1];\n\n                    pstmt = conn.prepareStatement(\"SELECT id, account_id, domain_id, network_id FROM user_ip_address WHERE public_ip_address=?\");\n                    pstmt.setString(1, publicIp);\n                    rs = pstmt.executeQuery();\n\n                    if (!rs.next()) {\n                        s_logger.error(\"Unable to find public IP address \" + publicIp);\n                        throw new CloudRuntimeException(\"Unable to find public IP address \" + publicIp);\n                    }\n\n                    int ipAddressId = rs.getInt(1);\n                    long accountId = rs.getLong(2);\n                    long domainId = rs.getLong(3);\n                    long networkId = rs.getLong(4);\n                    String privateIp = (String)rule[3];\n\n                    rs.close();\n                    pstmt.close();\n\n                    // update port_forwarding_rules table\n                    s_logger.trace(\"Updating port_forwarding_rules table...\");\n                    pstmt = conn.prepareStatement(\"SELECT instance_id FROM nics where network_id=? AND ip4_address=?\");\n                    pstmt.setLong(1, networkId);\n                    pstmt.setString(2, privateIp);\n                    rs = pstmt.executeQuery();\n\n                    if (!rs.next()) {\n                        // the vm might be expunged already...so just give the warning\n                        s_logger.warn(\"Unable to find vmId for private ip address \" + privateIp + \" for account id=\" + accountId + \"; assume that the vm is expunged\");\n                        // throw new CloudRuntimeException(\"Unable to find vmId for private ip address \" + privateIp +\n                        // \" for account id=\" + accountId);\n                    } else {\n                        long instanceId = rs.getLong(1);\n                        s_logger.debug(\"Instance id is \" + instanceId);\n                        // update firewall_rules table\n                        s_logger.trace(\"Updating firewall_rules table as a part of PF rules upgrade...\");\n                        pstmt =\n                            conn.prepareStatement(\"INSERT INTO firewall_rules (id, ip_address_id, start_port, end_port, state, protocol, purpose, account_id, domain_id, network_id, xid, is_static_nat, created) VALUES (?,    ?,      ?,      ?,      'Active',        ?,     'PortForwarding',       ?,      ?,      ?,      ?,       0,     now())\");\n                        pstmt.setLong(1, id);\n                        pstmt.setInt(2, ipAddressId);\n                        pstmt.setInt(3, Integer.parseInt(sourcePort.trim()));\n                        pstmt.setInt(4, Integer.parseInt(sourcePort.trim()));\n                        pstmt.setString(5, protocol);\n                        pstmt.setLong(6, accountId);\n                        pstmt.setLong(7, domainId);\n                        pstmt.setLong(8, networkId);\n                        pstmt.setString(9, UUID.randomUUID().toString());\n                        pstmt.executeUpdate();\n                        pstmt.close();\n                        s_logger.trace(\"firewall_rules table is updated as a part of PF rules upgrade\");\n\n                        rs.close();\n                        pstmt.close();\n\n                        String privatePort = (String)rule[4];\n                        pstmt = conn.prepareStatement(\"INSERT INTO port_forwarding_rules VALUES (?,    ?,      ?,      ?,       ?)\");\n                        pstmt.setLong(1, id);\n                        pstmt.setLong(2, instanceId);\n                        pstmt.setString(3, privateIp);\n                        pstmt.setInt(4, Integer.parseInt(privatePort.trim()));\n                        pstmt.setInt(5, Integer.parseInt(privatePort.trim()));\n                        pstmt.executeUpdate();\n                        pstmt.close();\n                        s_logger.trace(\"port_forwarding_rules table is updated\");\n\n                    }\n\n                }\n            }\n            s_logger.debug(\"Port forwarding rules are updated\");\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't update port forwarding rules \", e);\n        }\n    }","id":18845,"modified_method":"public void upgradePortForwardingRules(Connection conn) {\n        try (\n                PreparedStatement pstmt =\n                    conn.prepareStatement(\"SELECT id, public_ip_address, public_port, private_ip_address, private_port, protocol FROM ip_forwarding WHERE forwarding=1\");\n                ResultSet rs = pstmt.executeQuery();\n            ) {\n            ArrayList<Object[]> rules = new ArrayList<Object[]>();\n            while (rs.next()) {\n                Object[] rule = new Object[10];\n                rule[0] = rs.getLong(1); // rule id\n                rule[1] = rs.getString(2); // rule public IP\n                rule[2] = rs.getString(3); // rule public port\n                rule[3] = rs.getString(4); // rule private Ip\n                rule[4] = rs.getString(5); // rule private port\n                rule[5] = rs.getString(6); // rule protocol\n                rules.add(rule);\n            }\n\n            if (!rules.isEmpty()) {\n                s_logger.debug(\"Found \" + rules.size() + \" port forwarding rules to upgrade\");\n                for (Object[] rule : rules) {\n                    long id = (Long)rule[0];\n                    String sourcePort = (String)rule[2];\n                    String protocol = (String)rule[5];\n                    String publicIp = (String)rule[1];\n\n                    try (PreparedStatement selectUserIpAddressData = conn.prepareStatement(\"SELECT id, account_id, domain_id, network_id FROM user_ip_address WHERE public_ip_address=?\");) {\n                        selectUserIpAddressData.setString(1, publicIp);\n                        try (ResultSet userIpAddressData = selectUserIpAddressData.executeQuery();) {\n\n                            if (!userIpAddressData.next()) {\n                                s_logger.error(\"Unable to find public IP address \" + publicIp);\n                                throw new CloudRuntimeException(\"Unable to find public IP address \" + publicIp);\n                            }\n                            int ipAddressId = userIpAddressData.getInt(1);\n                            long accountId = userIpAddressData.getLong(2);\n                            long domainId = userIpAddressData.getLong(3);\n                            long networkId = userIpAddressData.getLong(4);\n                            String privateIp = (String)rule[3];\n\n                            // update port_forwarding_rules table\n                            s_logger.trace(\"Updating port_forwarding_rules table...\");\n                            try (PreparedStatement selectInstanceId = conn.prepareStatement(\"SELECT instance_id FROM nics where network_id=? AND ip4_address=?\");) {\n                                selectInstanceId.setLong(1, networkId);\n                                selectInstanceId.setString(2, privateIp);\n                                try (ResultSet selectedInstanceId = selectInstanceId.executeQuery();) {\n\n                                    if (!selectedInstanceId.next()) {\n                                        // the vm might be expunged already...so just give the warning\n                                        s_logger.warn(\"Unable to find vmId for private ip address \" + privateIp + \" for account id=\" + accountId + \"; assume that the vm is expunged\");\n                                        // throw new CloudRuntimeException(\"Unable to find vmId for private ip address \" + privateIp +\n                                        // \" for account id=\" + accountId);\n                                    } else {\n                                        long instanceId = selectedInstanceId.getLong(1);\n                                        s_logger.debug(\"Instance id is \" + instanceId);\n                                        // update firewall_rules table\n                                        s_logger.trace(\"Updating firewall_rules table as a part of PF rules upgrade...\");\n                                        try (\n                                                PreparedStatement insertFirewallRules =\n                                                conn.prepareStatement(\"INSERT INTO firewall_rules (id, ip_address_id, start_port, end_port, state, protocol, purpose, account_id, domain_id, network_id, xid, is_static_nat, created) VALUES (?,    ?,      ?,      ?,      'Active',        ?,     'PortForwarding',       ?,      ?,      ?,      ?,       0,     now())\");\n                                            ) {\n                                            insertFirewallRules.setLong(1, id);\n                                            insertFirewallRules.setInt(2, ipAddressId);\n                                            insertFirewallRules.setInt(3, Integer.parseInt(sourcePort.trim()));\n                                            insertFirewallRules.setInt(4, Integer.parseInt(sourcePort.trim()));\n                                            insertFirewallRules.setString(5, protocol);\n                                            insertFirewallRules.setLong(6, accountId);\n                                            insertFirewallRules.setLong(7, domainId);\n                                            insertFirewallRules.setLong(8, networkId);\n                                            insertFirewallRules.setString(9, UUID.randomUUID().toString());\n                                            insertFirewallRules.executeUpdate();\n                                            s_logger.trace(\"firewall_rules table is updated as a part of PF rules upgrade\");\n                                        }\n                                        String privatePort = (String)rule[4];\n                                        try (PreparedStatement insertPortForwardingRules = conn.prepareStatement(\"INSERT INTO port_forwarding_rules VALUES (?,    ?,      ?,      ?,       ?)\");) {\n                                            insertPortForwardingRules.setLong(1, id);\n                                            insertPortForwardingRules.setLong(2, instanceId);\n                                            insertPortForwardingRules.setString(3, privateIp);\n                                            insertPortForwardingRules.setInt(4, Integer.parseInt(privatePort.trim()));\n                                            insertPortForwardingRules.setInt(5, Integer.parseInt(privatePort.trim()));\n                                            insertPortForwardingRules.executeUpdate();\n                                        }\n                                        s_logger.trace(\"port_forwarding_rules table is updated\");\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            s_logger.debug(\"Port forwarding rules are updated\");\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't update port forwarding rules \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private String getConfigValue(Connection conn, String name) {\n        try {\n            // count user_vm memory info (M Bytes)\n            PreparedStatement pstmt = conn.prepareStatement(\"select value from configuration where name=?\");\n            pstmt.setString(1, name);\n            ResultSet rs = pstmt.executeQuery();\n\n            String val = null;\n            if (rs.next()) {\n                val = rs.getString(1);\n            }\n            rs.close();\n            pstmt.close();\n\n            return val;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't upgrade host capacity info \", e);\n        }\n    }","id":18846,"modified_method":"private String getConfigValue(Connection conn, String name) {\n        try (\n                PreparedStatement pstmt = conn.prepareStatement(\"select value from configuration where name=?\");\n            ) {\n            // count user_vm memory info (M Bytes)\n            pstmt.setString(1, name);\n            try (ResultSet rs = pstmt.executeQuery();) {\n\n                String val = null;\n                if (rs.next()) {\n                    val = rs.getString(1);\n                }\n                return val;\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't upgrade host capacity info \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private UsageEventVO convertIPEvent(EventVO event, Connection conn) throws IOException, SQLException {\n\n        Properties ipEventParams = new Properties();\n        UsageEventVO usageEvent = null;\n        ipEventParams.load(new StringReader(event.getParameters()));\n        String ipAddress = ipEventParams.getProperty(\"address\");\n        if (ipAddress == null) {\n            ipAddress = ipEventParams.getProperty(\"guestIPaddress\");\n            if (ipAddress == null) {\n                // can not find IP address, bail for this event\n                return null;\n            }\n        }\n\n        // Get ip address information\n        Long ipId = 0L;\n        Long zoneId = 0L;\n        PreparedStatement pstmt = conn.prepareStatement(\"SELECT id, data_center_id from user_ip_address where public_ip_address=?\");\n        pstmt.setString(1, ipAddress);\n        ResultSet rs = pstmt.executeQuery();\n        if (rs.next()) {\n            ipId = rs.getLong(1);\n            zoneId = rs.getLong(2);\n        }\n        rs.close();\n        pstmt.close();\n\n        boolean isSourceNat = Boolean.parseBoolean(ipEventParams.getProperty(\"sourceNat\"));\n\n        if (EventTypes.EVENT_NET_IP_ASSIGN.equals(event.getType())) {\n            zoneId = Long.parseLong(ipEventParams.getProperty(\"dcId\"));\n            usageEvent = new UsageEventVO(EventTypes.EVENT_NET_IP_ASSIGN, event.getAccountId(), zoneId, ipId, ipAddress, isSourceNat, \"\", false);\n        } else if (EventTypes.EVENT_NET_IP_RELEASE.equals(event.getType())) {\n            usageEvent = new UsageEventVO(EventTypes.EVENT_NET_IP_RELEASE, event.getAccountId(), zoneId, ipId, ipAddress, isSourceNat, \"\", false);\n        }\n        return usageEvent;\n    }","id":18847,"modified_method":"private UsageEventVO convertIPEvent(EventVO event, Connection conn) throws IOException, SQLException {\n\n        Properties ipEventParams = new Properties();\n        UsageEventVO usageEvent = null;\n        ipEventParams.load(new StringReader(event.getParameters()));\n        String ipAddress = ipEventParams.getProperty(\"address\");\n        if (ipAddress == null) {\n            ipAddress = ipEventParams.getProperty(\"guestIPaddress\");\n            if (ipAddress == null) {\n                // can not find IP address, bail for this event\n                return null;\n            }\n        }\n\n        // Get ip address information\n        Long ipId = 0L;\n        Long zoneId = 0L;\n        try (PreparedStatement pstmt = conn.prepareStatement(\"SELECT id, data_center_id from user_ip_address where public_ip_address=?\");) {\n            pstmt.setString(1, ipAddress);\n            try (ResultSet rs = pstmt.executeQuery();) {\n                if (rs.next()) {\n                    ipId = rs.getLong(1);\n                    zoneId = rs.getLong(2);\n                }\n\n                boolean isSourceNat = Boolean.parseBoolean(ipEventParams.getProperty(\"sourceNat\"));\n\n                if (EventTypes.EVENT_NET_IP_ASSIGN.equals(event.getType())) {\n                    zoneId = Long.parseLong(ipEventParams.getProperty(\"dcId\"));\n                    usageEvent = new UsageEventVO(EventTypes.EVENT_NET_IP_ASSIGN, event.getAccountId(), zoneId, ipId, ipAddress, isSourceNat, \"\", false);\n                } else if (EventTypes.EVENT_NET_IP_RELEASE.equals(event.getType())) {\n                    usageEvent = new UsageEventVO(EventTypes.EVENT_NET_IP_RELEASE, event.getAccountId(), zoneId, ipId, ipAddress, isSourceNat, \"\", false);\n                }\n            }\n        }\n        return usageEvent;\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void deleteOrphanedTemplateRef(Connection conn) {\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT id, pool_id from template_spool_ref\");\n            ResultSet rs = pstmt.executeQuery();\n            if (!rs.next()) {\n                s_logger.debug(\"No records in template_spool_ref, skipping this upgrade part\");\n                return;\n            }\n\n            while (rs.next()) {\n                Long id = rs.getLong(1);\n                Long poolId = rs.getLong(2);\n\n                pstmt = conn.prepareStatement(\"SELECT * from storage_pool where id=?\");\n                pstmt.setLong(1, poolId);\n                ResultSet rs1 = pstmt.executeQuery();\n\n                if (!rs1.next()) {\n                    s_logger.debug(\"Orphaned template_spool_ref record is found (storage pool doesn't exist any more0) id=\" + id + \"; so removing the record\");\n                    pstmt = conn.prepareStatement(\"DELETE FROM template_spool_ref where id=?\");\n                    pstmt.setLong(1, id);\n                    pstmt.executeUpdate();\n                }\n\n            }\n            rs.close();\n            pstmt.close();\n\n            s_logger.debug(\"Finished deleting orphaned template_spool_ref(s)\");\n        } catch (Exception e) {\n            s_logger.error(\"Failed to delete orphaned template_spool_ref(s): \", e);\n            throw new CloudRuntimeException(\"Failed to delete orphaned template_spool_ref(s): \", e);\n        }\n    }","id":18848,"modified_method":"private void deleteOrphanedTemplateRef(Connection conn) {\n        try (\n                PreparedStatement selectStoragePoolRef = conn.prepareStatement(\"SELECT id, pool_id from template_spool_ref\");\n                ResultSet rs = selectStoragePoolRef.executeQuery();\n            ) {\n            if (!rs.next()) {\n                s_logger.debug(\"No records in template_spool_ref, skipping this upgrade part\");\n                return;\n            }\n            while (rs.next()) {\n                Long id = rs.getLong(1);\n                Long poolId = rs.getLong(2);\n\n                try (PreparedStatement selectStoragePool = conn.prepareStatement(\"SELECT * from storage_pool where id=?\");) {\n                    selectStoragePool.setLong(1, poolId);\n                    try (ResultSet selectedStoragePool = selectStoragePool.executeQuery();) {\n\n                        if (!selectedStoragePool.next()) {\n                            s_logger.debug(\"Orphaned template_spool_ref record is found (storage pool doesn't exist any more0) id=\" + id + \"; so removing the record\");\n                            try (PreparedStatement delete = conn.prepareStatement(\"DELETE FROM template_spool_ref where id=?\");) {\n                                delete.setLong(1, id);\n                                delete.executeUpdate();\n                            }\n                        }\n                    }\n                }\n            }\n            s_logger.debug(\"Finished deleting orphaned template_spool_ref(s)\");\n        } catch (Exception e) {\n            s_logger.error(\"Failed to delete orphaned template_spool_ref(s): \", e);\n            throw new CloudRuntimeException(\"Failed to delete orphaned template_spool_ref(s): \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected void createInstanceGroups(Connection conn, String groupName, long accountId) throws SQLException {\n        PreparedStatement pstmt = conn.prepareStatement(\"INSERT INTO instance_group (account_id, name, created) values (?, ?, now()) \");\n        pstmt.setLong(1, accountId);\n        pstmt.setString(2, groupName);\n        pstmt.executeUpdate();\n        pstmt.close();\n    }","id":18849,"modified_method":"protected void createInstanceGroups(Connection conn, String groupName, long accountId) throws SQLException {\n        try (PreparedStatement pstmt = conn.prepareStatement(\"INSERT INTO instance_group (account_id, name, created) values (?, ?, now()) \");) {\n            pstmt.setLong(1, accountId);\n            pstmt.setString(2, groupName);\n            pstmt.executeUpdate();\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private UsageEventVO convertSnapshotEvent(EventVO event, Connection conn) throws IOException, SQLException {\n        Properties snapEventParams = new Properties();\n        long snapId = -1L;\n        long snapSize = -1L;\n        Long zoneId = 0L;\n        UsageEventVO usageEvent = null;\n\n        snapEventParams.load(new StringReader(event.getParameters()));\n        snapId = Long.parseLong(snapEventParams.getProperty(\"id\"));\n        String snapshotName = snapEventParams.getProperty(\"ssName\");\n\n        String size = snapEventParams.getProperty(\"size\");\n        if (size != null) {\n            snapSize = Long.parseLong(size);\n        }\n\n        String zoneString = snapEventParams.getProperty(\"dcId\");\n        if (zoneString != null) {\n            zoneId = Long.parseLong(zoneString);\n        }\n\n        Long accountId = event.getAccountId();\n\n        // Get snapshot info (there was a bug in 2.1.x - accountId is 0, and data_center info is not present in events table\n        if (accountId.longValue() == 0L || zoneId.longValue() == 0L) {\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT zone_id, account_id from usage_event where resource_id=? and type like '%SNAPSHOT%'\");\n            pstmt.setLong(1, snapId);\n            ResultSet rs = pstmt.executeQuery();\n            if (rs.next()) {\n                zoneId = rs.getLong(1);\n                accountId = rs.getLong(2);\n            }\n\n            rs.close();\n            pstmt.close();\n        }\n\n        if (EventTypes.EVENT_SNAPSHOT_CREATE.equals(event.getType())) {\n            usageEvent = new UsageEventVO(EventTypes.EVENT_SNAPSHOT_CREATE, accountId, zoneId, snapId, snapshotName, null, null, snapSize);\n        } else if (EventTypes.EVENT_SNAPSHOT_DELETE.equals(event.getType())) {\n            usageEvent = new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE, accountId, zoneId, snapId, snapshotName, null, null, 0L);\n        }\n        return usageEvent;\n    }","id":18850,"modified_method":"private UsageEventVO convertSnapshotEvent(EventVO event, Connection conn) throws IOException, SQLException {\n        Properties snapEventParams = new Properties();\n        long snapId = -1L;\n        long snapSize = -1L;\n        Long zoneId = 0L;\n        UsageEventVO usageEvent = null;\n\n        snapEventParams.load(new StringReader(event.getParameters()));\n        snapId = Long.parseLong(snapEventParams.getProperty(\"id\"));\n        String snapshotName = snapEventParams.getProperty(\"ssName\");\n\n        String size = snapEventParams.getProperty(\"size\");\n        if (size != null) {\n            snapSize = Long.parseLong(size);\n        }\n\n        String zoneString = snapEventParams.getProperty(\"dcId\");\n        if (zoneString != null) {\n            zoneId = Long.parseLong(zoneString);\n        }\n\n        Long accountId = event.getAccountId();\n\n        // Get snapshot info (there was a bug in 2.1.x - accountId is 0, and data_center info is not present in events table\n        if (accountId.longValue() == 0L || zoneId.longValue() == 0L) {\n            try (PreparedStatement pstmt = conn.prepareStatement(\"SELECT zone_id, account_id from usage_event where resource_id=? and type like '%SNAPSHOT%'\");) {\n                pstmt.setLong(1, snapId);\n                try (ResultSet rs = pstmt.executeQuery();) {\n                    if (rs.next()) {\n                        zoneId = rs.getLong(1);\n                        accountId = rs.getLong(2);\n                    }\n                }\n\n                if (EventTypes.EVENT_SNAPSHOT_CREATE.equals(event.getType())) {\n                    usageEvent = new UsageEventVO(EventTypes.EVENT_SNAPSHOT_CREATE, accountId, zoneId, snapId, snapshotName, null, null, snapSize);\n                } else if (EventTypes.EVENT_SNAPSHOT_DELETE.equals(event.getType())) {\n                    usageEvent = new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE, accountId, zoneId, snapId, snapshotName, null, null, 0L);\n                }\n            }\n        }\n        return usageEvent;\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"protected long insertNetworkOffering(Connection conn, String name, String displayText, String trafficType, boolean systemOnly, boolean defaultNetworkOffering,\n        String availability, boolean dnsService, boolean gatewayService, boolean firewallService, boolean lbService, boolean userdataService, boolean vpnService,\n        boolean dhcpService) {\n        String insertSql =\n            \"INSERT INTO network_offerings (name, display_text, nw_rate, mc_rate, concurrent_connections, traffic_type, tags, system_only, specify_vlan, service_offering_id, created, removed, `default`, availability, dnsService, gatewayService, firewallService, lbService, userdataService, vpnService, dhcpService) \"\n                + \"VALUES (?,    ?,            NULL,    NULL,    NULL,                   ?,            NULL, ?,           0,            NULL,                now(),   NULL,    ?,       ?,            ?,           ?,               ?,                ?,          ?,                ?,           ?)\";\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(insertSql, Statement.RETURN_GENERATED_KEYS);\n            int i = 1;\n            pstmt.setString(i++, name);\n            pstmt.setString(i++, displayText);\n            pstmt.setString(i++, trafficType);\n            pstmt.setBoolean(i++, systemOnly);\n            pstmt.setBoolean(i++, defaultNetworkOffering);\n            pstmt.setString(i++, availability);\n            pstmt.setBoolean(i++, dnsService);\n            pstmt.setBoolean(i++, gatewayService);\n            pstmt.setBoolean(i++, firewallService);\n            pstmt.setBoolean(i++, lbService);\n            pstmt.setBoolean(i++, userdataService);\n            pstmt.setBoolean(i++, vpnService);\n            pstmt.setBoolean(i++, dhcpService);\n            pstmt.executeUpdate();\n            ResultSet rs = pstmt.getGeneratedKeys();\n            rs.next();\n            long id = rs.getLong(1);\n            rs.close();\n            pstmt.close();\n            return id;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert network offering \", e);\n        }\n    }","id":18851,"modified_method":"protected long insertNetworkOffering(Connection conn, String name, String displayText, String trafficType, boolean systemOnly, boolean defaultNetworkOffering,\n        String availability, boolean dnsService, boolean gatewayService, boolean firewallService, boolean lbService, boolean userdataService, boolean vpnService,\n        boolean dhcpService) {\n        String insertSql =\n            \"INSERT INTO network_offerings (name, display_text, nw_rate, mc_rate, concurrent_connections, traffic_type, tags, system_only, specify_vlan, service_offering_id, created, removed, `default`, availability, dnsService, gatewayService, firewallService, lbService, userdataService, vpnService, dhcpService) \"\n                + \"VALUES (?,    ?,            NULL,    NULL,    NULL,                   ?,            NULL, ?,           0,            NULL,                now(),   NULL,    ?,       ?,            ?,           ?,               ?,                ?,          ?,                ?,           ?)\";\n        try (PreparedStatement pstmt = conn.prepareStatement(insertSql, Statement.RETURN_GENERATED_KEYS);) {\n            int i = 1;\n            pstmt.setString(i++, name);\n            pstmt.setString(i++, displayText);\n            pstmt.setString(i++, trafficType);\n            pstmt.setBoolean(i++, systemOnly);\n            pstmt.setBoolean(i++, defaultNetworkOffering);\n            pstmt.setString(i++, availability);\n            pstmt.setBoolean(i++, dnsService);\n            pstmt.setBoolean(i++, gatewayService);\n            pstmt.setBoolean(i++, firewallService);\n            pstmt.setBoolean(i++, lbService);\n            pstmt.setBoolean(i++, userdataService);\n            pstmt.setBoolean(i++, vpnService);\n            pstmt.setBoolean(i++, dhcpService);\n            pstmt.executeUpdate();\n            try (ResultSet rs = pstmt.getGeneratedKeys();) {\n                rs.next();\n                long id = rs.getLong(1);\n                return id;\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert network offering \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void migrateEvents(Connection conn) {\n        try {\n            PreparedStatement pstmt1 = conn.prepareStatement(\"SHOW DATABASES LIKE 'cloud_usage'\");\n            ResultSet rs1 = pstmt1.executeQuery();\n            if (!rs1.next()) {\n                s_logger.debug(\"cloud_usage db doesn't exist. Skipping events migration\");\n                return;\n            }\n\n            // get last processed event Id\n            Long lastProcessedEvent = getMostRecentEvent(conn);\n            // Events not yet processed\n            String sql =\n                \"SELECT type, description, user_id, account_id, created, level, parameters FROM cloud.event vmevt WHERE vmevt.id > ? and vmevt.state = 'Completed' \";\n            if (lastProcessedEvent == null) {\n                s_logger.trace(\"no events are processed earlier, copying all events\");\n                sql = \"SELECT type, description, user_id, account_id, created, level, parameters FROM cloud.event vmevt WHERE vmevt.state = 'Completed' \";\n            }\n\n            PreparedStatement pstmt = null;\n\n            pstmt = conn.prepareStatement(sql);\n            int i = 1;\n            if (lastProcessedEvent != null) {\n                pstmt.setLong(i++, lastProcessedEvent);\n            }\n            ResultSet rs = pstmt.executeQuery();\n            s_logger.debug(\"Begin Migrating events\");\n            while (rs.next()) {\n                EventVO event = new EventVO();\n                event.setType(rs.getString(1));\n                event.setDescription(rs.getString(2));\n                event.setUserId(rs.getLong(3));\n                event.setAccountId(rs.getLong(4));\n                event.setCreatedDate(DateUtil.parseDateString(TimeZone.getTimeZone(\"GMT\"), rs.getString(5)));\n                event.setLevel(rs.getString(6));\n                event.setParameters(rs.getString(7));\n                convertEvent(event, conn);\n            }\n            s_logger.debug(\"Migrating events completed\");\n        } catch (Exception e) {\n            throw new CloudRuntimeException(\"Failed to migrate usage events: \", e);\n        }\n    }","id":18852,"modified_method":"private void migrateEvents(Connection conn) {\n        try (\n                PreparedStatement pstmt1 = conn.prepareStatement(\"SHOW DATABASES LIKE 'cloud_usage'\");\n                ResultSet rs1 = pstmt1.executeQuery();\n            ) {\n            if (!rs1.next()) {\n                s_logger.debug(\"cloud_usage db doesn't exist. Skipping events migration\");\n                return;\n            }\n\n            // get last processed event Id\n            Long lastProcessedEvent = getMostRecentEvent(conn);\n            // Events not yet processed\n            String sql =\n                \"SELECT type, description, user_id, account_id, created, level, parameters FROM cloud.event vmevt WHERE vmevt.id > ? and vmevt.state = 'Completed' \";\n            if (lastProcessedEvent == null) {\n                s_logger.trace(\"no events are processed earlier, copying all events\");\n                sql = \"SELECT type, description, user_id, account_id, created, level, parameters FROM cloud.event vmevt WHERE vmevt.state = 'Completed' \";\n            }\n\n            try (PreparedStatement pstmt = conn.prepareStatement(sql);) {\n                int i = 1;\n                if (lastProcessedEvent != null) {\n                    pstmt.setLong(i++, lastProcessedEvent);\n                }\n                try (ResultSet rs = pstmt.executeQuery();) {\n                    s_logger.debug(\"Begin Migrating events\");\n                    while (rs.next()) {\n                        EventVO event = new EventVO();\n                        event.setType(rs.getString(1));\n                        event.setDescription(rs.getString(2));\n                        event.setUserId(rs.getLong(3));\n                        event.setAccountId(rs.getLong(4));\n                        event.setCreatedDate(DateUtil.parseDateString(TimeZone.getTimeZone(\"GMT\"), rs.getString(5)));\n                        event.setLevel(rs.getString(6));\n                        event.setParameters(rs.getString(7));\n                        convertEvent(event, conn);\n                    }\n                }\n            }\n            s_logger.debug(\"Migrating events completed\");\n        } catch (Exception e) {\n            throw new CloudRuntimeException(\"Failed to migrate usage events: \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"private void upgradeHostMemoryCapacityInfo(Connection conn) {\n        try {\n            // count user_vm memory info (M Bytes)\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"select h.id, sum(s.ram_size) from host h, vm_instance v, service_offering s where h.type='Routing' and v.state='Running' and v.`type`='User' and v.host_id=h.id  and v.service_offering_id = s.id group by h.id\");\n\n            ResultSet rs = pstmt.executeQuery();\n            Map<Long, Long> hostUsedMemoryInfo = new HashMap<Long, Long>();\n            while (rs.next()) {\n                hostUsedMemoryInfo.put(rs.getLong(1), rs.getLong(2));\n            }\n            rs.close();\n            pstmt.close();\n\n            int proxyRamSize = NumbersUtil.parseInt(getConfigValue(conn, \"consoleproxy.ram.size\"), 1024); // ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);\n            int domrRamSize = NumbersUtil.parseInt(getConfigValue(conn, \"router.ram.size\"), 128); // VpcVirtualNetworkApplianceManager.DEFAULT_ROUTER_VM_RAMSIZE);\n            int ssvmRamSize = NumbersUtil.parseInt(getConfigValue(conn, \"secstorage.vm.ram.size\"), 256); // SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);\n\n            pstmt =\n                conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='ConsoleProxy' and v.host_id=h.id group by h.id\");\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                if (hostUsedMemoryInfo.get(rs.getLong(1)) != null) {\n                    Long usedMem = hostUsedMemoryInfo.get(rs.getLong(1));\n                    hostUsedMemoryInfo.put(rs.getLong(1), rs.getLong(2) * proxyRamSize + usedMem);\n                } else {\n                    hostUsedMemoryInfo.put(rs.getLong(1), rs.getLong(2) * proxyRamSize);\n                }\n            }\n            rs.close();\n            pstmt.close();\n\n            pstmt =\n                conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='DomainRouter' and v.host_id=h.id group by h.id\");\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                if (hostUsedMemoryInfo.get(rs.getLong(1)) != null) {\n                    Long usedMem = hostUsedMemoryInfo.get(rs.getLong(1));\n                    hostUsedMemoryInfo.put(rs.getLong(1), rs.getLong(2) * domrRamSize + usedMem);\n                } else {\n                    hostUsedMemoryInfo.put(rs.getLong(1), rs.getLong(2) * domrRamSize);\n                }\n            }\n            rs.close();\n            pstmt.close();\n\n            pstmt =\n                conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='SecondaryStorageVm' and v.host_id=h.id group by h.id\");\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                if (hostUsedMemoryInfo.get(rs.getLong(1)) != null) {\n                    Long usedMem = hostUsedMemoryInfo.get(rs.getLong(1));\n                    hostUsedMemoryInfo.put(rs.getLong(1), rs.getLong(2) * ssvmRamSize + usedMem);\n                } else {\n                    hostUsedMemoryInfo.put(rs.getLong(1), rs.getLong(2) * ssvmRamSize);\n                }\n            }\n            rs.close();\n            pstmt.close();\n\n            for (Map.Entry<Long, Long> entry : hostUsedMemoryInfo.entrySet()) {\n                pstmt = conn.prepareStatement(\"update op_host_capacity set used_capacity=? where host_id=? and capacity_type=0\");\n                pstmt.setLong(1, entry.getValue() * 1024 * 1024);\n                pstmt.setLong(2, entry.getKey());\n\n                pstmt.executeUpdate();\n            }\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't upgrade host capacity info \", e);\n        }\n    }","id":18853,"modified_method":"private void upgradeHostMemoryCapacityInfo(Connection conn) {\n        Map<Long, Long> hostUsedMemoryInfo = new HashMap<Long, Long>();\n        // count user_vm memory info (M Bytes)\n        try (\n                PreparedStatement pstmt =\n                    conn.prepareStatement(\"select h.id, sum(s.ram_size) from host h, vm_instance v, service_offering s where h.type='Routing' and v.state='Running' and v.`type`='User' and v.host_id=h.id  and v.service_offering_id = s.id group by h.id\");\n\n                ResultSet rs = pstmt.executeQuery();\n            ) {\n            while (rs.next()) {\n                hostUsedMemoryInfo.put(rs.getLong(1), rs.getLong(2));\n            }\n            int proxyRamSize = NumbersUtil.parseInt(getConfigValue(conn, \"consoleproxy.ram.size\"), 1024); // ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);\n            int domrRamSize = NumbersUtil.parseInt(getConfigValue(conn, \"router.ram.size\"), 128); // VpcVirtualNetworkApplianceManager.DEFAULT_ROUTER_VM_RAMSIZE);\n            int ssvmRamSize = NumbersUtil.parseInt(getConfigValue(conn, \"secstorage.vm.ram.size\"), 256); // SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);\n\n            try(\n                PreparedStatement selectConsoleProxyHostInfo =\n                conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='ConsoleProxy' and v.host_id=h.id group by h.id\");\n                ResultSet consoleProxyHostInfo = selectConsoleProxyHostInfo.executeQuery();\n               ) {\n                while (consoleProxyHostInfo.next()) {\n                    if (hostUsedMemoryInfo.get(consoleProxyHostInfo.getLong(1)) != null) {\n                        Long usedMem = hostUsedMemoryInfo.get(consoleProxyHostInfo.getLong(1));\n                        hostUsedMemoryInfo.put(consoleProxyHostInfo.getLong(1), consoleProxyHostInfo.getLong(2) * proxyRamSize + usedMem);\n                    } else {\n                        hostUsedMemoryInfo.put(consoleProxyHostInfo.getLong(1), consoleProxyHostInfo.getLong(2) * proxyRamSize);\n                    }\n                }\n            }\n\n            try (\n                PreparedStatement selectDomainRouterHostInfo =\n                conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='DomainRouter' and v.host_id=h.id group by h.id\");\n                ResultSet domainrouterHostInfo = selectDomainRouterHostInfo.executeQuery();\n                ) {\n                while (domainrouterHostInfo.next()) {\n                    if (hostUsedMemoryInfo.get(domainrouterHostInfo.getLong(1)) != null) {\n                        Long usedMem = hostUsedMemoryInfo.get(domainrouterHostInfo.getLong(1));\n                        hostUsedMemoryInfo.put(domainrouterHostInfo.getLong(1), domainrouterHostInfo.getLong(2) * domrRamSize + usedMem);\n                    } else {\n                        hostUsedMemoryInfo.put(domainrouterHostInfo.getLong(1), domainrouterHostInfo.getLong(2) * domrRamSize);\n                    }\n                }\n            }\n\n            try (\n                PreparedStatement selectSsvmHostInfo =\n                conn.prepareStatement(\"select h.id, count(v.id) from host h, vm_instance v where h.type='Routing' and v.state='Running' and v.`type`='SecondaryStorageVm' and v.host_id=h.id group by h.id\");\n                ResultSet ssvmHostInfo = selectSsvmHostInfo.executeQuery();\n                ) {\n                while (ssvmHostInfo.next()) {\n                    if (hostUsedMemoryInfo.get(ssvmHostInfo.getLong(1)) != null) {\n                        Long usedMem = hostUsedMemoryInfo.get(ssvmHostInfo.getLong(1));\n                        hostUsedMemoryInfo.put(ssvmHostInfo.getLong(1), ssvmHostInfo.getLong(2) * ssvmRamSize + usedMem);\n                    } else {\n                        hostUsedMemoryInfo.put(ssvmHostInfo.getLong(1), ssvmHostInfo.getLong(2) * ssvmRamSize);\n                    }\n                }\n            }\n\n            for (Map.Entry<Long, Long> entry : hostUsedMemoryInfo.entrySet()) {\n                try (PreparedStatement updateHostCapacity = conn.prepareStatement(\"update op_host_capacity set used_capacity=? where host_id=? and capacity_type=0\");) {\n                    updateHostCapacity.setLong(1, entry.getValue() * 1024 * 1024);\n                    updateHostCapacity.setLong(2, entry.getKey());\n\n                    updateHostCapacity.executeUpdate();\n                }\n            }\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Can't upgrade host capacity info \", e);\n        }\n    }","commit_id":"119f6b0bd8b27f55670e8d31f84f908c7d78895b","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n   * Creates an application if not exists.\n   *\n   * @param account\n   * @param application\n   * @return true if created successfully or already exists, false otherwise.\n   * @throws com.continuuity.metadata.stubs.MetadataServiceException\n   *          thrown when there is issue with creating\n   *          metadata store entry for the application.\n   */\n  @Override\n  public boolean createApplication(Account account, Application application)\n    throws MetadataServiceException, TException {\n\n    // Validate all account.\n    validateAccount(account);\n    String accountId = account.getId();\n\n    // When creating a stream, you need to have id, name and description\n    String id = application.getId();\n    if(id == null || (id != null && id.isEmpty())) {\n      throw new MetadataServiceException(\"Application id is empty or null.\");\n    }\n\n    if(! application.isSetName()) {\n      throw new MetadataServiceException(\"Application name should be set for create\");\n    }\n    String name = application.getName();\n    if(name == null || (name != null && name.isEmpty())) {\n      throw new MetadataServiceException(\"Application name cannot be null or empty\");\n    }\n\n    if(! application.isSetDescription()) {\n      throw new MetadataServiceException(\"Application description should be set \" +\n                                           \"for create\");\n    }\n    String description = application.getDescription();\n    if(description == null || (description != null && description.isEmpty())) {\n      throw new MetadataServiceException(\"Application description is empty or null\");\n    }\n\n    try {\n      // Create a context.\n      OperationContext context = new OperationContext(accountId);\n\n      // Read the meta data entry to see if it's already present.\n      // If already present, return without applying the new changes.\n      MetaDataEntry readEntry =\n        mds.get(context, accountId, null,\n                FieldTypes.Application.ID, id);\n      if(readEntry != null) {\n        return true;\n      }\n\n      // Create a new metadata entry.\n      MetaDataEntry entry = new MetaDataEntry(\n        accountId, null, FieldTypes.Application.ID, id\n      );\n\n      // Adding other fields.\n      entry.addField(FieldTypes.Application.NAME, name);\n      entry.addField(FieldTypes.Application.DESCRIPTION, description);\n      entry.addField(FieldTypes.Application.CREATE_DATE,\n                     String.format(\"%d\", System.currentTimeMillis()));\n      // Invoke MDS to add entry.\n      mds.add(context, entry);\n    } catch (OperationException e) {\n      Log.warn(\"Failed creating application {}. Reason : {}\",\n               application, e.getMessage());\n      throw new MetadataServiceException(e.getMessage());\n    }\n    return true;\n  }","id":18854,"modified_method":"/**\n   * Creates an application if not exists.\n   *\n   * @param account under which the application is created.\n   * @param application to be created.\n   * @return true if created successfully or already exists, false otherwise.\n   * @throws com.continuuity.metadata.stubs.MetadataServiceException\n   *          thrown when there is issue with creating\n   *          metadata store entry for the application.\n   */\n  @Override\n  public boolean createApplication(Account account, Application application)\n    throws MetadataServiceException, TException {\n\n    // Validate all account.\n    validateAccount(account);\n    String accountId = account.getId();\n\n    // When creating a stream, you need to have id, name and description\n    String id = application.getId();\n    if(id == null || (id != null && id.isEmpty())) {\n      throw new MetadataServiceException(\"Application id is empty or null.\");\n    }\n\n    String description = \"\";\n    if(application.isSetDescription()) {\n      description = application.getDescription();\n    }\n\n    if(! application.isSetName()) {\n      throw new MetadataServiceException(\"Application name should be set for create\");\n    }\n    String name = application.getName();\n    if(name == null || (name != null && name.isEmpty())) {\n      throw new MetadataServiceException(\"Application name cannot be null or empty\");\n    }\n\n    try {\n      // Create a context.\n      OperationContext context = new OperationContext(accountId);\n\n      // Read the meta data entry to see if it's already present.\n      // If already present, return without applying the new changes.\n      MetaDataEntry readEntry =\n        mds.get(context, accountId, null,\n                FieldTypes.Application.ID, id);\n      if(readEntry != null) {\n        return true;\n      }\n\n      // Create a new metadata entry.\n      MetaDataEntry entry = new MetaDataEntry(\n        accountId, null, FieldTypes.Application.ID, id\n      );\n\n      // Adding other fields.\n      entry.addField(FieldTypes.Application.NAME, name);\n      entry.addField(FieldTypes.Application.DESCRIPTION, description);\n      entry.addField(FieldTypes.Application.CREATE_DATE,\n                     String.format(\"%d\", System.currentTimeMillis()));\n      // Invoke MDS to add entry.\n      mds.add(context, entry);\n    } catch (OperationException e) {\n      Log.warn(\"Failed creating application {}. Reason : {}\",\n               application, e.getMessage());\n      throw new MetadataServiceException(e.getMessage());\n    }\n    return true;\n  }","commit_id":"bcaa712f6c3257273b4e8a5e774c9a4beb4c457f","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Creates a dataset if not exist.\n   *\n   * @param dataset\n   * @return true if successfull; false otherwise\n   * @throws com.continuuity.metadata.stubs.MetadataServiceException\n   *          throw when there is issue with creating\n   *          a data set.\n   */\n  @Override\n  public boolean createDataset(Account account, Dataset dataset) throws\n    MetadataServiceException, TException {\n\n    // Validate account.\n    validateAccount(account);\n    String accountId = account.getId();\n\n    // When creating a stream, you need to have id, name and description\n    String id = dataset.getId();\n    if(id == null || (id != null && id.isEmpty())) {\n      throw new MetadataServiceException(\"Dataset id is empty or null.\");\n    }\n\n    if(! dataset.isSetName()) {\n      throw new MetadataServiceException(\"Dataset name should be set for create\");\n    }\n\n    String name = dataset.getName();\n    if(name == null || (name != null && name.isEmpty())) {\n      throw new MetadataServiceException(\"Dataset name cannot be null or empty\");\n    }\n\n    if(! dataset.isSetDescription()) {\n      throw new MetadataServiceException(\"Dataset description should be set \" +\n                                           \"for create\");\n    }\n\n    String description = dataset.getDescription();\n    if(description == null || (description != null && description.isEmpty())) {\n      throw new MetadataServiceException(\"Stream description is empty or null\");\n    }\n\n    if(! dataset.isSetType()) {\n      throw new MetadataServiceException(\"Dataset type should be set for create\");\n    }\n    DatasetType type = dataset.getType();\n\n    if(type == null) {\n      throw new MetadataServiceException(\"Dataset type cannot be null\");\n    }\n\n    try {\n      // Create a context.\n      OperationContext context = new OperationContext(accountId);\n\n      // Read the meta data entry to see if it's already present.\n      // If already present, return without applying the new changes.\n      MetaDataEntry readEntry =\n        mds.get(context, accountId, null,\n                FieldTypes.Dataset.ID, id);\n      if(readEntry != null) {\n        return true;\n      }\n\n      // Create a new metadata entry.\n      MetaDataEntry entry = new MetaDataEntry(\n        accountId, null, FieldTypes.Dataset.ID, id\n      );\n\n      // Adding other fields.\n      entry.addField(FieldTypes.Dataset.NAME, name);\n      entry.addField(FieldTypes.Dataset.DESCRIPTION, description);\n      entry.addField(FieldTypes.Dataset.CREATE_DATE,\n                     String.format(\"%d\", System.currentTimeMillis()));\n      entry.addField(FieldTypes.Dataset.TYPE, type.name());\n      // Invoke MDS to add entry.\n      mds.add(context, entry);\n    } catch (OperationException e) {\n      Log.warn(\"Failed creating dataset {}. Reason : {}\", dataset,\n               e.getMessage());\n      throw new MetadataServiceException(e.getMessage());\n    }\n    return true;\n  }","id":18855,"modified_method":"/**\n   * Creates a dataset if not exist.\n   *\n   * @param dataset to be created.\n   * @return true if successfull; false otherwise\n   * @throws com.continuuity.metadata.stubs.MetadataServiceException\n   *          throw when there is issue with creating\n   *          a data set.\n   */\n  @Override\n  public boolean createDataset(Account account, Dataset dataset) throws\n    MetadataServiceException, TException {\n\n    // Validate account.\n    validateAccount(account);\n    String accountId = account.getId();\n\n    // When creating a stream, you need to have id, name and description\n    String id = dataset.getId();\n    if(id == null || (id != null && id.isEmpty())) {\n      throw new MetadataServiceException(\"Dataset id is empty or null.\");\n    }\n\n    if(! dataset.isSetName()) {\n      throw new MetadataServiceException(\"Dataset name should be set for create\");\n    }\n\n    String name = dataset.getName();\n    if(name == null || (name != null && name.isEmpty())) {\n      throw new MetadataServiceException(\"Dataset name cannot be null or empty\");\n    }\n\n    String description = \"\";\n    if(dataset.isSetDescription()) {\n      description = dataset.getDescription();\n    }\n\n    if(! dataset.isSetType()) {\n      throw new MetadataServiceException(\"Dataset type should be set for create\");\n    }\n    DatasetType type = dataset.getType();\n\n    if(type == null) {\n      throw new MetadataServiceException(\"Dataset type cannot be null\");\n    }\n\n    try {\n      // Create a context.\n      OperationContext context = new OperationContext(accountId);\n\n      // Read the meta data entry to see if it's already present.\n      // If already present, return without applying the new changes.\n      MetaDataEntry readEntry =\n        mds.get(context, accountId, null,\n                FieldTypes.Dataset.ID, id);\n      if(readEntry != null) {\n        return true;\n      }\n\n      // Create a new metadata entry.\n      MetaDataEntry entry = new MetaDataEntry(\n        accountId, null, FieldTypes.Dataset.ID, id\n      );\n\n      // Adding other fields.\n      entry.addField(FieldTypes.Dataset.NAME, name);\n      entry.addField(FieldTypes.Dataset.DESCRIPTION, description);\n      entry.addField(FieldTypes.Dataset.CREATE_DATE,\n                     String.format(\"%d\", System.currentTimeMillis()));\n      entry.addField(FieldTypes.Dataset.TYPE, type.name());\n      // Invoke MDS to add entry.\n      mds.add(context, entry);\n    } catch (OperationException e) {\n      Log.warn(\"Failed creating dataset {}. Reason : {}\", dataset,\n               e.getMessage());\n      throw new MetadataServiceException(e.getMessage());\n    }\n    return true;\n  }","commit_id":"bcaa712f6c3257273b4e8a5e774c9a4beb4c457f","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Deletes a dataset.\n   *\n   * @param dataset\n   * @return true if successfull; false otherwise.\n   * @throws com.continuuity.metadata.stubs.MetadataServiceException\n   *          throw when there is issue with creating\n   *          a data set.\n   */\n  @Override\n  public boolean deleteDataset(Account account, Dataset dataset) throws\n    MetadataServiceException, TException {\n    // Validate all account.\n    validateAccount(account);\n    String accountId = account.getId();\n\n    // When creating a stream, you need to have id, name and description\n    String id = dataset.getId();\n    if(id == null || (id != null && id.isEmpty())) {\n      throw new MetadataServiceException(\"Dataset id is empty or null.\");\n    }\n\n    try {\n      // Create a context.\n      OperationContext context = new OperationContext(accountId);\n\n      // Read the meta data entry to see if it's already present.\n      // If already present, return without applying the new changes.\n      MetaDataEntry readEntry =\n        mds.get(context, accountId, null,\n                FieldTypes.Dataset.ID, id);\n\n      // If stream does not exist, then no point in deleting it.\n      if(readEntry == null) {\n        return true;\n      }\n\n      // Invoke MDS to delete entry.\n      mds.delete(context, accountId, null, FieldTypes.Stream.ID, id);\n    } catch (OperationException e) {\n      Log.warn(\"Failed deleting dataset {}. Reason : {}\", dataset, e.getMessage());\n      throw new MetadataServiceException(e.getMessage());\n    }\n    return true;\n  }","id":18856,"modified_method":"/**\n   * Deletes a dataset.\n   *\n   * @param dataset to be deleted.\n   * @return true if successfull; false otherwise.\n   * @throws com.continuuity.metadata.stubs.MetadataServiceException\n   *          throw when there is issue with creating\n   *          a data set.\n   */\n  @Override\n  public boolean deleteDataset(Account account, Dataset dataset) throws\n    MetadataServiceException, TException {\n    // Validate all account.\n    validateAccount(account);\n    String accountId = account.getId();\n\n    // When creating a stream, you need to have id, name and description\n    String id = dataset.getId();\n    if(id == null || (id != null && id.isEmpty())) {\n      throw new MetadataServiceException(\"Dataset id is empty or null.\");\n    }\n\n    try {\n      // Create a context.\n      OperationContext context = new OperationContext(accountId);\n\n      // Read the meta data entry to see if it's already present.\n      // If already present, return without applying the new changes.\n      MetaDataEntry readEntry =\n        mds.get(context, accountId, null,\n                FieldTypes.Dataset.ID, id);\n\n      // If stream does not exist, then no point in deleting it.\n      if(readEntry == null) {\n        return true;\n      }\n      // Invoke MDS to delete entry.\n      mds.delete(context, accountId, null, FieldTypes.Dataset.ID, id);\n    } catch (OperationException e) {\n      Log.warn(\"Failed deleting dataset {}. Reason : {}\", dataset, e.getMessage());\n      throw new MetadataServiceException(e.getMessage());\n    }\n    return true;\n  }","commit_id":"bcaa712f6c3257273b4e8a5e774c9a4beb4c457f","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Creates a stream if not exist.\n   * <p>\n   *   Stream creation requires id, name and description to be present.\n   *   Without these fields a stream creation would fail. If a stream\n   *   already exists, then it will be untouched.\n   * <\/p>\n   *\n   * @param stream information about stream.\n   * @return true if successful; false otherwise\n   * @throws com.continuuity.metadata.stubs.MetadataServiceException\n   *          thrown when there is issue with creating\n   *          stream.\n   */\n  @Override\n  public boolean createStream(Account account, Stream stream)\n    throws MetadataServiceException, TException {\n\n    // Validate all account.\n    validateAccount(account);\n    String accountId = account.getId();\n\n    // When creating a stream, you need to have id, name and description\n    String id = stream.getId();\n    if(id == null || (id != null && id.isEmpty())) {\n      throw new MetadataServiceException(\"Stream id is empty or null.\");\n    }\n\n    if(! stream.isSetName()) {\n      throw new MetadataServiceException(\"Stream name should be set for create\");\n    }\n    String name = stream.getName();\n    if(name == null || (name != null && name.isEmpty())) {\n      throw new MetadataServiceException(\"Stream name cannot be null or empty\");\n    }\n\n    if(! stream.isSetDescription()) {\n      throw new MetadataServiceException(\"Stream description should be set \" +\n                                           \"for create\");\n    }\n    String description = stream.getDescription();\n    if(description == null || (description != null && description.isEmpty())) {\n      throw new MetadataServiceException(\"Stream description is empty or null\");\n    }\n\n    try {\n      // Create a context.\n      OperationContext context = new OperationContext(accountId);\n\n      // Read the meta data entry to see if it's already present.\n      // If already present, return without applying the new changes.\n      MetaDataEntry readEntry =\n        mds.get(context, accountId, null,\n                FieldTypes.Stream.ID, id);\n      if(readEntry != null) {\n        return true;\n      }\n\n      // Create a new metadata entry.\n      MetaDataEntry entry = new MetaDataEntry(\n        accountId, null, FieldTypes.Stream.ID, id\n      );\n\n      // Adding other fields.\n      entry.addField(FieldTypes.Stream.NAME, name);\n      entry.addField(FieldTypes.Stream.DESCRIPTION, description);\n      entry.addField(FieldTypes.Stream.CREATE_DATE,\n                     String.format(\"%d\", System.currentTimeMillis()));\n      if(stream.isSetCapacityInBytes()) {\n        entry.addField(FieldTypes.Stream.CAPACITY_IN_BYTES,\n                       String.format(\"%d\", stream.getCapacityInBytes()));\n      }\n      if(stream.isSetExpiryInSeconds()) {\n        entry.addField(FieldTypes.Stream.EXPIRY_IN_SECONDS,\n                       String.format(\"%d\", stream.getExpiryInSeconds()));\n      }\n\n      // Invoke MDS to add entry.\n      mds.add(context, entry);\n    } catch (OperationException e) {\n      Log.warn(\"Failed creating stream {}. Reason : {}\", stream, e.getMessage());\n      throw new MetadataServiceException(e.getMessage());\n    }\n    return true;\n  }","id":18857,"modified_method":"/**\n   * Creates a stream if not exist.\n   * <p>\n   *   Stream creation requires id, name and description to be present.\n   *   Without these fields a stream creation would fail. If a stream\n   *   already exists, then it will be untouched.\n   * <\/p>\n   *\n   * @param stream information about stream.\n   * @return true if successful; false otherwise\n   * @throws com.continuuity.metadata.stubs.MetadataServiceException\n   *          thrown when there is issue with creating\n   *          stream.\n   */\n  @Override\n  public boolean createStream(Account account, Stream stream)\n    throws MetadataServiceException, TException {\n\n    // Validate all account.\n    validateAccount(account);\n    String accountId = account.getId();\n\n    // When creating a stream, you need to have id, name and description\n    String id = stream.getId();\n    if(id == null || (id != null && id.isEmpty())) {\n      throw new MetadataServiceException(\"Stream id is empty or null.\");\n    }\n\n    if(! stream.isSetName()) {\n      throw new MetadataServiceException(\"Stream name should be set for create\");\n    }\n    String name = stream.getName();\n    if(name == null || (name != null && name.isEmpty())) {\n      throw new MetadataServiceException(\"Stream name cannot be null or empty\");\n    }\n\n    String description = \"\";\n    if(stream.isSetDescription()) {\n      description = stream.getDescription();\n    }\n\n    try {\n      // Create a context.\n      OperationContext context = new OperationContext(accountId);\n\n      // Read the meta data entry to see if it's already present.\n      // If already present, return without applying the new changes.\n      MetaDataEntry readEntry =\n        mds.get(context, accountId, null,\n                FieldTypes.Stream.ID, id);\n      if(readEntry != null) {\n        return true;\n      }\n\n      // Create a new metadata entry.\n      MetaDataEntry entry = new MetaDataEntry(\n        accountId, null, FieldTypes.Stream.ID, id\n      );\n\n      // Adding other fields.\n      entry.addField(FieldTypes.Stream.NAME, name);\n      entry.addField(FieldTypes.Stream.DESCRIPTION, description);\n      entry.addField(FieldTypes.Stream.CREATE_DATE,\n                     String.format(\"%d\", System.currentTimeMillis()));\n      if(stream.isSetCapacityInBytes()) {\n        entry.addField(FieldTypes.Stream.CAPACITY_IN_BYTES,\n                       String.format(\"%d\", stream.getCapacityInBytes()));\n      }\n      if(stream.isSetExpiryInSeconds()) {\n        entry.addField(FieldTypes.Stream.EXPIRY_IN_SECONDS,\n                       String.format(\"%d\", stream.getExpiryInSeconds()));\n      }\n\n      // Invoke MDS to add entry.\n      mds.add(context, entry);\n    } catch (OperationException e) {\n      Log.warn(\"Failed creating stream {}. Reason : {}\", stream, e.getMessage());\n      throw new MetadataServiceException(e.getMessage());\n    }\n    return true;\n  }","commit_id":"bcaa712f6c3257273b4e8a5e774c9a4beb4c457f","url":"https://github.com/caskdata/cdap"},{"original_method":"private Iterator<Path> paths( final Node start, final Node end )\n    {\n        TraversalDescription base = TraversalFactory.createTraversalDescription()\n                .uniqueness( Uniqueness.RELATIONSHIP_GLOBAL ).sourceSelector(\n                        new SourceSelectorFactory()\n                        {\n                            public SourceSelector create( ExpansionSource startSource )\n                            {\n                                return new LiteDepthFirstSelector( startSource, startThreshold );\n                            }\n                        } );\n        int firstHalf = onDepth / 2;\n        Traverser startTraverser = base.prune( TraversalFactory.pruneAfterDepth( firstHalf ) )\n                .expand( expander ).traverse( start );\n        Traverser endTraverser = base.prune( TraversalFactory.pruneAfterDepth( onDepth-firstHalf ) )\n                .expand( expander.reversed() ).traverse( end );\n        final Iterator<Position> startIterator = startTraverser.iterator();\n        final Iterator<Position> endIterator = endTraverser.iterator();\n        final Map<Node, Map<Integer, Visit>> visits = new HashMap<Node, Map<Integer,Visit>>();\n        visits.put( start, MapUtil.<Integer, Visit>genericMap( 0,\n                new Visit( startIterator.next(), startIterator) ) );\n        visits.put( end, MapUtil.<Integer, Visit>genericMap( 0,\n                new Visit( endIterator.next(), endIterator) ) );\n        return new PrefetchingIterator<Path>()\n        {\n            @Override\n            protected Path fetchNextOrNull()\n            {\n                Position[] found = null;\n                while ( found == null && (startIterator.hasNext() || endIterator.hasNext()) )\n                {\n                    found = goOneStep( start, startIterator, visits );\n                    if ( found == null )\n                    {\n                        found = goOneStep( end, endIterator, visits );\n                    }\n                }\n                return found != null ? toPath( found, start ) : null;\n            }\n        };\n    }","id":18858,"modified_method":"private Iterator<Path> paths( final Node start, final Node end )\n    {\n        TraversalDescription base = TraversalFactory.createTraversalDescription().uniqueness(\n                Uniqueness.RELATIONSHIP_PATH ).sourceSelector(\n                new SourceSelectorFactory()\n                {\n                    public SourceSelector create( ExpansionSource startSource )\n                    {\n                        return new LiteDepthFirstSelector( startSource,\n                                startThreshold );\n                    }\n                } );\n        final int firstHalf = onDepth / 2;\n        Traverser startTraverser = base.prune(\n                TraversalFactory.pruneAfterDepth( firstHalf ) ).expand(\n                expander ).filter( new Predicate<Position>()\n        {\n            public boolean accept( Position item )\n            {\n                return item.depth() == firstHalf;\n            }\n        } ).traverse( start );\n        final int secondHalf = onDepth - firstHalf;\n        Traverser endTraverser = base.prune(\n                TraversalFactory.pruneAfterDepth( secondHalf ) ).expand(\n                expander.reversed() ).filter( new Predicate<Position>()\n        {\n            public boolean accept( Position item )\n            {\n                return item.depth() == secondHalf;\n            }\n        } ).traverse( end );\n\n        final Iterator<Position> startIterator = startTraverser.iterator();\n        final Iterator<Position> endIterator = endTraverser.iterator();\n\n        final Map<Node, Visit> visits = new HashMap<Node, Visit>();\n        return new PrefetchingIterator<Path>()\n        {\n            @Override\n            protected Path fetchNextOrNull()\n            {\n                Position[] found = null;\n                while ( found == null\n                        && ( startIterator.hasNext() || endIterator.hasNext() ) )\n                {\n                    found = goOneStep( start, startIterator, visits );\n                    if ( found == null )\n                    {\n                        found = goOneStep( end, endIterator, visits );\n                    }\n                }\n                return found != null ? toPath( found, start ) : null;\n            }\n        };\n    }","commit_id":"b8afad5f90e9789c3c64668e47fb0c65affd6029","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Position[] goOneStep( Node node, Iterator<Position> visitor,\n            Map<Node, Map<Integer, Visit>> visits )\n    {\n        if ( !visitor.hasNext() )\n        {\n            return null;\n        }\n        Position position = visitor.next();\n        Map<Integer, Visit> depthMap = visits.get( position.node() );\n        if ( depthMap == null )\n        {\n            depthMap = new HashMap<Integer, Visit>();\n            visits.put( position.node(), depthMap );\n        }\n        Visit visit = depthMap.get( onDepth - position.depth() );\n        if ( visit != null )\n        {\n            if ( visitor != visit.visitor )\n            {\n                return new Position[] { visit.position, position };\n            }\n        }\n        else\n        {\n            depthMap.put( position.depth(), new Visit( position, visitor ) );\n        }\n        return null;\n    }","id":18859,"modified_method":"private Position[] goOneStep( Node node, Iterator<Position> visitor,\n            Map<Node, Visit> visits )\n    {\n        if ( !visitor.hasNext() )\n        {\n            return null;\n        }\n        Position position = visitor.next();\n        Visit visit = visits.get( position.node() );\n        if ( visit != null )\n        {\n            if ( visitor != visit.visitor )\n            {\n                return new Position[] { visit.position, position };\n            }\n        }\n        else\n        {\n            visits.put( position.node(), new Visit( position, visitor ) );\n        }\n        return null;\n    }","commit_id":"b8afad5f90e9789c3c64668e47fb0c65affd6029","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Iterator<Path> paths( final Node start, final Node end )\n    {\n        TraversalDescription base = TraversalFactory.createTraversalDescription()\n                .uniqueness( Uniqueness.RELATIONSHIP_GLOBAL ).sourceSelector(\n                        new SourceSelectorFactory()\n                        {\n                            public SourceSelector create( ExpansionSource startSource )\n                            {\n                                return new LiteDepthFirstSelector( startSource, startThreshold );\n                            }\n                        } );\n        int firstHalf = onDepth / 2;\n        Traverser startTraverser = base.prune( TraversalFactory.pruneAfterDepth( firstHalf ) )\n                .expand( expander ).traverse( start );\n        Traverser endTraverser = base.prune( TraversalFactory.pruneAfterDepth( onDepth-firstHalf ) )\n                .expand( expander.reversed() ).traverse( end );\n        final Iterator<Position> startIterator = startTraverser.iterator();\n        final Iterator<Position> endIterator = endTraverser.iterator();\n        final Map<Node, Map<Integer, Visit>> visits = new HashMap<Node, Map<Integer,Visit>>();\n        visits.put( start, MapUtil.<Integer, Visit>genericMap( 0,\n                new Visit( startIterator.next(), startIterator) ) );\n        visits.put( end, MapUtil.<Integer, Visit>genericMap( 0,\n                new Visit( endIterator.next(), endIterator) ) );\n        return new PrefetchingIterator<Path>()\n        {\n            @Override\n            protected Path fetchNextOrNull()\n            {\n                Position[] found = null;\n                while ( found == null && (startIterator.hasNext() || endIterator.hasNext()) )\n                {\n                    found = goOneStep( start, startIterator, visits );\n                    if ( found == null )\n                    {\n                        found = goOneStep( end, endIterator, visits );\n                    }\n                }\n                return found != null ? toPath( found, start ) : null;\n            }\n        };\n    }","id":18860,"modified_method":"private Iterator<Path> paths( final Node start, final Node end )\n    {\n        TraversalDescription base = TraversalFactory.createTraversalDescription().uniqueness(\n                Uniqueness.RELATIONSHIP_PATH ).sourceSelector(\n                new SourceSelectorFactory()\n                {\n                    public SourceSelector create( ExpansionSource startSource )\n                    {\n                        return new LiteDepthFirstSelector( startSource,\n                                startThreshold );\n                    }\n                } );\n        final int firstHalf = onDepth / 2;\n        Traverser startTraverser = base.prune(\n                TraversalFactory.pruneAfterDepth( firstHalf ) ).expand(\n                expander ).filter( new Predicate<Position>()\n        {\n            public boolean accept( Position item )\n            {\n                return item.depth() == firstHalf;\n            }\n        } ).traverse( start );\n        final int secondHalf = onDepth - firstHalf;\n        Traverser endTraverser = base.prune(\n                TraversalFactory.pruneAfterDepth( secondHalf ) ).expand(\n                expander.reversed() ).filter( new Predicate<Position>()\n        {\n            public boolean accept( Position item )\n            {\n                return item.depth() == secondHalf;\n            }\n        } ).traverse( end );\n\n        final Iterator<Position> startIterator = startTraverser.iterator();\n        final Iterator<Position> endIterator = endTraverser.iterator();\n\n        final Map<Node, Visit> visits = new HashMap<Node, Visit>();\n        return new PrefetchingIterator<Path>()\n        {\n            @Override\n            protected Path fetchNextOrNull()\n            {\n                Position[] found = null;\n                while ( found == null\n                        && ( startIterator.hasNext() || endIterator.hasNext() ) )\n                {\n                    found = goOneStep( start, startIterator, visits );\n                    if ( found == null )\n                    {\n                        found = goOneStep( end, endIterator, visits );\n                    }\n                }\n                return found != null ? toPath( found, start ) : null;\n            }\n        };\n    }","commit_id":"0c58c8846e243844c9c793cd04da32623870a8cc","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Position[] goOneStep( Node node, Iterator<Position> visitor,\n            Map<Node, Map<Integer, Visit>> visits )\n    {\n        if ( !visitor.hasNext() )\n        {\n            return null;\n        }\n        Position position = visitor.next();\n        Map<Integer, Visit> depthMap = visits.get( position.node() );\n        if ( depthMap == null )\n        {\n            depthMap = new HashMap<Integer, Visit>();\n            visits.put( position.node(), depthMap );\n        }\n        Visit visit = depthMap.get( onDepth - position.depth() );\n        if ( visit != null )\n        {\n            if ( visitor != visit.visitor )\n            {\n                return new Position[] { visit.position, position };\n            }\n        }\n        else\n        {\n            depthMap.put( position.depth(), new Visit( position, visitor ) );\n        }\n        return null;\n    }","id":18861,"modified_method":"private Position[] goOneStep( Node node, Iterator<Position> visitor,\n            Map<Node, Visit> visits )\n    {\n        if ( !visitor.hasNext() )\n        {\n            return null;\n        }\n        Position position = visitor.next();\n        Visit visit = visits.get( position.node() );\n        if ( visit != null )\n        {\n            if ( visitor != visit.visitor )\n            {\n                return new Position[] { visit.position, position };\n            }\n        }\n        else\n        {\n            visits.put( position.node(), new Visit( position, visitor ) );\n        }\n        return null;\n    }","commit_id":"0c58c8846e243844c9c793cd04da32623870a8cc","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Position[] goOneStep( Node node, Iterator<Position> visitor,\n            Map<Node, Map<Integer, Visit>> visits )\n    {\n        if ( !visitor.hasNext() )\n        {\n            return null;\n        }\n        Position position = visitor.next();\n        Map<Integer, Visit> depthMap = visits.get( position.node() );\n        if ( depthMap == null )\n        {\n            depthMap = new HashMap<Integer, Visit>();\n            visits.put( position.node(), depthMap );\n        }\n        Visit visit = depthMap.get( onDepth - position.depth() );\n        if ( visit != null )\n        {\n            if ( visitor != visit.visitor )\n            {\n                return new Position[] { visit.position, position };\n            }\n        }\n        else\n        {\n            depthMap.put( position.depth(), new Visit( position, visitor ) );\n        }\n        return null;\n    }","id":18862,"modified_method":"private Position[] goOneStep( Node node, Iterator<Position> visitor,\n            Map<Node, Visit> visits )\n    {\n        if ( !visitor.hasNext() )\n        {\n            return null;\n        }\n        Position position = visitor.next();\n        Visit visit = visits.get( position.node() );\n        if ( visit != null )\n        {\n            if ( visitor != visit.visitor )\n            {\n                return new Position[] { visit.position, position };\n            }\n        }\n        else\n        {\n            visits.put( position.node(), new Visit( position, visitor ) );\n        }\n        return null;\n    }","commit_id":"df500884b2cdc294c83727b6e5979855cfe5399f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Iterator<Path> paths( final Node start, final Node end )\n    {\n        TraversalDescription base = TraversalFactory.createTraversalDescription()\n                .uniqueness( Uniqueness.RELATIONSHIP_GLOBAL ).sourceSelector(\n                        new SourceSelectorFactory()\n                        {\n                            public SourceSelector create( ExpansionSource startSource )\n                            {\n                                return new LiteDepthFirstSelector( startSource, startThreshold );\n                            }\n                        } );\n        int firstHalf = onDepth / 2;\n        Traverser startTraverser = base.prune( TraversalFactory.pruneAfterDepth( firstHalf ) )\n                .expand( expander ).traverse( start );\n        Traverser endTraverser = base.prune( TraversalFactory.pruneAfterDepth( onDepth-firstHalf ) )\n                .expand( expander.reversed() ).traverse( end );\n        final Iterator<Position> startIterator = startTraverser.iterator();\n        final Iterator<Position> endIterator = endTraverser.iterator();\n        final Map<Node, Map<Integer, Visit>> visits = new HashMap<Node, Map<Integer,Visit>>();\n        visits.put( start, MapUtil.<Integer, Visit>genericMap( 0,\n                new Visit( startIterator.next(), startIterator) ) );\n        visits.put( end, MapUtil.<Integer, Visit>genericMap( 0,\n                new Visit( endIterator.next(), endIterator) ) );\n        return new PrefetchingIterator<Path>()\n        {\n            @Override\n            protected Path fetchNextOrNull()\n            {\n                Position[] found = null;\n                while ( found == null && (startIterator.hasNext() || endIterator.hasNext()) )\n                {\n                    found = goOneStep( start, startIterator, visits );\n                    if ( found == null )\n                    {\n                        found = goOneStep( end, endIterator, visits );\n                    }\n                }\n                return found != null ? toPath( found, start ) : null;\n            }\n        };\n    }","id":18863,"modified_method":"private Iterator<Path> paths( final Node start, final Node end )\n    {\n        TraversalDescription base = TraversalFactory.createTraversalDescription().uniqueness(\n                Uniqueness.RELATIONSHIP_PATH ).sourceSelector(\n                new SourceSelectorFactory()\n                {\n                    public SourceSelector create( ExpansionSource startSource )\n                    {\n                        return new LiteDepthFirstSelector( startSource,\n                                startThreshold );\n                    }\n                } );\n        final int firstHalf = onDepth / 2;\n        Traverser startTraverser = base.prune(\n                TraversalFactory.pruneAfterDepth( firstHalf ) ).expand(\n                expander ).filter( new Predicate<Position>()\n        {\n            public boolean accept( Position item )\n            {\n                return item.depth() == firstHalf;\n            }\n        } ).traverse( start );\n        final int secondHalf = onDepth - firstHalf;\n        Traverser endTraverser = base.prune(\n                TraversalFactory.pruneAfterDepth( secondHalf ) ).expand(\n                expander.reversed() ).filter( new Predicate<Position>()\n        {\n            public boolean accept( Position item )\n            {\n                return item.depth() == secondHalf;\n            }\n        } ).traverse( end );\n\n        final Iterator<Position> startIterator = startTraverser.iterator();\n        final Iterator<Position> endIterator = endTraverser.iterator();\n\n        final Map<Node, Visit> visits = new HashMap<Node, Visit>();\n        return new PrefetchingIterator<Path>()\n        {\n            @Override\n            protected Path fetchNextOrNull()\n            {\n                Position[] found = null;\n                while ( found == null\n                        && ( startIterator.hasNext() || endIterator.hasNext() ) )\n                {\n                    found = goOneStep( start, startIterator, visits );\n                    if ( found == null )\n                    {\n                        found = goOneStep( end, endIterator, visits );\n                    }\n                }\n                return found != null ? toPath( found, start ) : null;\n            }\n        };\n    }","commit_id":"df500884b2cdc294c83727b6e5979855cfe5399f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long numericChunkRollup(C1Chunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n    boolean isInt = _rs._isInt;\n    boolean hasNA = c.hasNA();\n    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        double x = c.atd(i);\n        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n        if (x == Double.POSITIVE_INFINITY) pinfs++;\n        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n        else {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","id":18864,"modified_method":"public long numericChunkRollup(C1Chunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n//    boolean isInt = _rs._isInt;\n    boolean isInt = true;\n    //boolean hasNA = c.hasNA();\n    boolean hasNA = true;\n//    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n//        double x = c.atd(i);\n        long l = c.at8(i);\n        double x = (double)l;\n//        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n//        if (x == Double.POSITIVE_INFINITY) pinfs++;\n//        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n//        else\n        {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n//          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","commit_id":"4885b259b80e2001104de670c7fce1bcee149a17","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public long numericChunkRollup(C8Chunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n    boolean isInt = _rs._isInt;\n    boolean hasNA = c.hasNA();\n    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        double x = c.atd(i);\n        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n        if (x == Double.POSITIVE_INFINITY) pinfs++;\n        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n        else {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","id":18865,"modified_method":"public long numericChunkRollup(C8Chunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n//    boolean isInt = _rs._isInt;\n    boolean isInt = true;\n    boolean hasNA = c.hasNA();\n    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        long l = c.at8(i);\n        double x = (double)l;\n//        double x = c.atd(i);\n//        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n//        if (x == Double.POSITIVE_INFINITY) pinfs++;\n//        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n//        else\n        {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n//          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","commit_id":"4885b259b80e2001104de670c7fce1bcee149a17","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public long numericChunkRollup(C1NChunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n    boolean isInt = _rs._isInt;\n    boolean hasNA = c.hasNA();\n    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        double x = c.atd(i);\n        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n        if (x == Double.POSITIVE_INFINITY) pinfs++;\n        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n        else {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","id":18866,"modified_method":"public long numericChunkRollup(C1NChunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n//    boolean isInt = _rs._isInt;\n    boolean isInt = true;\n//    boolean hasNA = c.hasNA();\n    boolean hasNA = false;\n//    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        long l = c.at8(i);\n        double x = (double)l;\n//        double x = c.atd(i);\n//        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n//        if (x == Double.POSITIVE_INFINITY) pinfs++;\n//        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n//        else\n        {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n//          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","commit_id":"4885b259b80e2001104de670c7fce1bcee149a17","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public long numericChunkRollup(C8DChunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n    boolean isInt = _rs._isInt;\n    boolean hasNA = c.hasNA();\n    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        double x = c.atd(i);\n        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n        if (x == Double.POSITIVE_INFINITY) pinfs++;\n        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n        else {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","id":18867,"modified_method":"public long numericChunkRollup(C8DChunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n    boolean isInt = _rs._isInt;\n    boolean hasNA = c.hasNA();\n//    boolean hasFloat = c.hasFloat();\n    boolean hasFloat = true;\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        double x = c.atd(i);\n        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n        if (x == Double.POSITIVE_INFINITY) pinfs++;\n        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n        else {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","commit_id":"4885b259b80e2001104de670c7fce1bcee149a17","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public long numericChunkRollup(C4Chunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n    boolean isInt = _rs._isInt;\n    boolean hasNA = c.hasNA();\n    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        double x = c.atd(i);\n        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n        if (x == Double.POSITIVE_INFINITY) pinfs++;\n        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n        else {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","id":18868,"modified_method":"public long numericChunkRollup(C4Chunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n//    boolean isInt = _rs._isInt;\n//    boolean hasNA = c.hasNA();\n    boolean isInt = true;\n    boolean hasNA = true;\n//    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        long l = c.at8(i);\n        double x = (double)l;\n//        double x = c.atd(i);\n//        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n//        if (x == Double.POSITIVE_INFINITY) pinfs++;\n//        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n//        else\n        {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n//          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","commit_id":"4885b259b80e2001104de670c7fce1bcee149a17","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public long numericChunkRollup(C2Chunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n    boolean isInt = _rs._isInt;\n    boolean hasNA = c.hasNA();\n    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        double x = c.atd(i);\n        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n        if (x == Double.POSITIVE_INFINITY) pinfs++;\n        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n        else {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","id":18869,"modified_method":"public long numericChunkRollup(C2Chunk c, long start, long checksum) {\n    long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;\n    // pull (some) members into local variables for speed\n//    boolean isInt = _rs._isInt;\n    boolean isInt = true;\n//    boolean hasNA = c.hasNA();\n    boolean hasNA = true;\n//    boolean hasFloat = c.hasFloat();\n    double dmin = _rs._mins[_rs._mins.length-1];\n    double dmax = _rs._maxs[_rs._maxs.length-1];\n\n    assert(_rs._pinfs == 0); assert(_rs._ninfs == 0); assert(_rs._naCnt == 0); assert(_rs._nzCnt == 0);\n    assert(dmin == Double.MAX_VALUE); assert(dmax == -Double.MAX_VALUE);\n\n    long rows = 0; //count of non-NA rows, might be >0 for sparse chunks (all 0s are already processed outside)\n    double mean = 0; //mean of non-NA rows, will be 0 for all 0s of sparse chunks\n    double M2 = 0; //variance of non-NA rows, will be 0 for all 0s of sparse chunks\n\n    // loop over all values for dense chunks, but only the non-zeros for sparse chunks\n    int len = c._len;\n    for (int i=0; i < len; ++i){\n      if (hasNA && c.isNA(i)) naCnt++;\n      else {\n        long l = c.at8(i);\n        double x = (double)l;\n//        double x = c.atd(i);\n//        long l = hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);\n        if (l != 0) // ignore 0s in checksum to be consistent with sparse chunks\n          checksum ^= (17 * (start + i)) ^ 23 * l;\n//        if (x == Double.POSITIVE_INFINITY) pinfs++;\n//        else if (x == Double.NEGATIVE_INFINITY) ninfs++;\n//        else\n        {\n          if (x != 0) nzCnt++;\n          if (x < dmin) dmin = _rs.min(x);\n          if (x > dmax) dmax = _rs.max(x);\n//          if (isInt) isInt = (long)x == x;\n          rows++;\n          double delta = x - mean;\n          mean += delta / rows;\n          M2 += delta * (x - mean);\n        }\n      }\n    }\n\n    // write back local variables into members\n    _rs._pinfs = pinfs;\n    _rs._ninfs = ninfs;\n    _rs._naCnt = naCnt;\n    _rs._nzCnt = nzCnt;\n    _rs._rows += rows; // add to pre-filled value for sparse chunks\n    _rs._isInt = isInt;\n    _rs._mean = mean;\n    _rs._sigma = M2;\n    return checksum;\n  }","commit_id":"4885b259b80e2001104de670c7fce1bcee149a17","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public void disconnect(MuxChannel ch) {\n        Entry entry;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(ch.getStackName());\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                Multiplexer mux=entry.multiplexer;\n                if(mux != null) {\n                    Address addr=entry.channel.getLocalAddress();\n                    try {\n                        mux.sendServiceDownMessage(ch.getId(), addr);\n                    }\n                    catch(Exception e) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed sending SERVICE_DOWN message\", e);\n                    }\n                    mux.disconnect(); // disconnects JChannel if all MuxChannels are in disconnected state\n                }\n            }\n        }\n    }","id":18870,"modified_method":"public void disconnect(MuxChannel ch) {\n        Entry entry;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(ch.getStackName());\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                Multiplexer mux=entry.multiplexer;\n                if(mux != null) {\n                    Address addr=entry.channel.getLocalAddress();\n                    try {                              \n                        boolean successfulFlush = entry.channel.startFlush(3000,false);\n                        if(!successfulFlush && log.isWarnEnabled()){\n                           log.warn(\"Flush failed at \" + ch.getLocalAddress() + ch.getId());\n                        }\n                        mux.sendServiceDownMessage(ch.getId(), addr,true);\n                    }\n                    catch(Exception e) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed sending SERVICE_DOWN message\", e);\n                    }\n                    finally{                      \n                       entry.channel.stopFlush();                                    \n                    }                  \n                    mux.disconnect(); // disconnects JChannel if all MuxChannels are in disconnected state\n                }\n            }\n        }\n    }","commit_id":"f54985c2c72f7333b7bb130d8a88089487f8a07c","url":"https://github.com/belaban/JGroups"},{"original_method":"public void close(MuxChannel ch) {\n        Entry entry;\n        String stack_name=ch.getStackName();\n        boolean all_closed=false;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(stack_name);\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                Multiplexer mux=entry.multiplexer;\n                if(mux != null) {\n                    Address addr=entry.channel.getLocalAddress();\n                    if(addr != null) {\n                        try {\n                            mux.sendServiceDownMessage(ch.getId(), addr);\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed sending SERVICE_DOWN message\", e);\n                        }\n                    }\n                    all_closed=mux.close(); // closes JChannel if all MuxChannels are in closed state\n                }\n            }\n            if(all_closed) {\n                channels.remove(stack_name);\n            }\n            if(expose_channels && server != null) {\n                try {\n                    unregister(domain + \":*,cluster=\" + stack_name);\n                }\n                catch(Exception e) {\n                    log.error(\"failed unregistering channel \" + stack_name, e);\n                }\n            }\n        }\n    }","id":18871,"modified_method":"public void close(MuxChannel ch) {\n        Entry entry;\n        String stack_name=ch.getStackName();\n        boolean all_closed=false;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(stack_name);\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                Multiplexer mux=entry.multiplexer;\n                if(mux != null) {\n                    Address addr=entry.channel.getLocalAddress();\n                    if(addr != null) {\n                        try { \n                            boolean successfulFlush = entry.channel.startFlush(3000,false);\n                            if(!successfulFlush && log.isWarnEnabled()){\n                               log.warn(\"Flush failed at \" + ch.getLocalAddress() + ch.getId());\n                            }                            \n                            mux.sendServiceDownMessage(ch.getId(), addr,true);\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed sending SERVICE_DOWN message\", e);\n                        }\n                        finally{                           \n                           entry.channel.stopFlush();                           \n                        }\n                    }\n                    all_closed=mux.close(); // closes JChannel if all MuxChannels are in closed state\n                }\n            }\n            if(all_closed) {\n                channels.remove(stack_name);\n            }\n            if(expose_channels && server != null) {\n                try {\n                    unregister(domain + \":*,cluster=\" + stack_name);\n                }\n                catch(Exception e) {\n                    log.error(\"failed unregistering channel \" + stack_name, e);\n                }\n            }\n        }\n    }","commit_id":"f54985c2c72f7333b7bb130d8a88089487f8a07c","url":"https://github.com/belaban/JGroups"},{"original_method":"public void shutdown(MuxChannel ch) {\n        Entry entry;\n        String stack_name=ch.getStackName();\n        boolean all_closed=false;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(stack_name);\n            if(entry != null) {\n                synchronized(entry) {\n                    Multiplexer mux=entry.multiplexer;\n                    if(mux != null) {\n                        Address addr=entry.channel.getLocalAddress();\n                        try {\n                            mux.sendServiceDownMessage(ch.getId(), addr);\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed sending SERVICE_DOWN message\", e);\n                        }\n                        all_closed=mux.shutdown(); // closes JChannel if all MuxChannels are in closed state\n\n                        //mux.unregister(ch.getId());\n                    }\n                }\n                if(all_closed) {\n                    channels.remove(stack_name);\n                }\n                if(expose_channels && server != null) {\n                    try {\n                        unregister(domain + \":*,cluster=\" + stack_name);\n                    }\n                    catch(Exception e) {\n                        log.error(\"failed unregistering channel \" + stack_name, e);\n                    }\n                }\n            }\n        }\n    }","id":18872,"modified_method":"public void shutdown(MuxChannel ch) {\n        Entry entry;\n        String stack_name=ch.getStackName();\n        boolean all_closed=false;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(stack_name);\n            if(entry != null) {\n                synchronized(entry) {\n                    Multiplexer mux=entry.multiplexer;\n                    if(mux != null) {\n                        Address addr=entry.channel.getLocalAddress();\n                        try {\n                            boolean successfulFlush = entry.channel.startFlush(3000,false);\n                            if(!successfulFlush && log.isWarnEnabled()){\n                              log.warn(\"Flush failed at \" + ch.getLocalAddress() + ch.getId());\n                            }\n                            mux.sendServiceDownMessage(ch.getId(), addr,true);\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed sending SERVICE_DOWN message\", e);\n                        }\n                        finally{\n                           entry.channel.stopFlush();\n                        }\n                        all_closed=mux.shutdown(); // closes JChannel if all MuxChannels are in closed state\n\n                        //mux.unregister(ch.getId());\n                    }\n                }\n                if(all_closed) {\n                    channels.remove(stack_name);\n                }\n                if(expose_channels && server != null) {\n                    try {\n                        unregister(domain + \":*,cluster=\" + stack_name);\n                    }\n                    catch(Exception e) {\n                        log.error(\"failed unregistering channel \" + stack_name, e);\n                    }\n                }\n            }\n        }\n    }","commit_id":"f54985c2c72f7333b7bb130d8a88089487f8a07c","url":"https://github.com/belaban/JGroups"},{"original_method":"public void connect(MuxChannel ch) throws ChannelException {\n        Entry entry;\n        synchronized(channels) {\n            entry=(Entry)channels.get(ch.getStackName());\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                if(entry.channel == null)\n                    throw new ChannelException(\"channel has to be created before it can be connected\");\n\n                if(entry.multiplexer != null)\n                    entry.multiplexer.addServiceIfNotPresent(ch.getId(), ch);\n                \n                if(!entry.channel.isConnected()) {\n                    entry.channel.connect(ch.getStackName());\n                    if(entry.multiplexer != null) {\n                        try {\n                            entry.multiplexer.fetchServiceInformation();\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed fetching service state\", e);\n                        }\n                    }\n                }\n                if(entry.multiplexer != null) {\n                    try {\n                        Address addr=entry.channel.getLocalAddress();\n                        entry.multiplexer.sendServiceUpMessage(ch.getId(), addr);\n                    }\n                    catch(Exception e) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed sending SERVICE_UP message\", e);\n                    }\n                }\n            }\n        }\n        ch.setClosed(false);\n        ch.setConnected(true);\n    }","id":18873,"modified_method":"public void connect(MuxChannel ch) throws ChannelException {\n        Entry entry;\n        synchronized(channels) {\n            entry=(Entry)channels.get(ch.getStackName());\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                if(entry.channel == null)\n                    throw new ChannelException(\"channel has to be created before it can be connected\");\n\n                if(entry.multiplexer != null)\n                    entry.multiplexer.addServiceIfNotPresent(ch.getId(), ch);\n                \n                if(!entry.channel.isConnected()) {\n                    entry.channel.connect(ch.getStackName());\n                    if(entry.multiplexer != null) {\n                        try {\n                            entry.multiplexer.fetchServiceInformation();\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed fetching service state\", e);\n                        }\n                    }\n                }\n                if(entry.multiplexer != null) {\n                    try {\n                        Address addr=entry.channel.getLocalAddress();                        \n                        boolean successfulFlush = entry.channel.startFlush(3000, false);\n                        if(!successfulFlush && log.isWarnEnabled()){\n                           log.warn(\"Flush failed at \" + ch.getLocalAddress() + ch.getId());\n                        }\n                        entry.multiplexer.sendServiceUpMessage(ch.getId(), addr,true);\n                    }\n                    catch(Exception e) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed sending SERVICE_UP message\", e);\n                    }\n                    finally{                     \n                       entry.channel.stopFlush();\n                    }\n                }                \n            }           \n        }\n        ch.setClosed(false);\n        ch.setConnected(true);\n    }","commit_id":"f54985c2c72f7333b7bb130d8a88089487f8a07c","url":"https://github.com/belaban/JGroups"},{"original_method":"public void sendServiceUpMessage(String service, Address host) throws Exception {\n        sendServiceMessage(ServiceInfo.SERVICE_UP, service, host);\n        if(local_addr != null && host != null && local_addr.equals(host))\n            handleServiceUp(service, host, false);\n    }","id":18874,"modified_method":"public void sendServiceUpMessage(String service, Address host,boolean bypassFlush) throws Exception {\n        sendServiceMessage(ServiceInfo.SERVICE_UP, service, host,bypassFlush);\n        if(local_addr != null && host != null && local_addr.equals(host))\n            handleServiceUp(service, host, false);\n    }","commit_id":"f54985c2c72f7333b7bb130d8a88089487f8a07c","url":"https://github.com/belaban/JGroups"},{"original_method":"private void sendServiceMessage(byte type, String service, Address host) throws Exception {\n        if(host == null)\n            host=getLocalAddress();\n        if(host == null) {\n            if(log.isWarnEnabled()) {\n                log.warn(\"local_addr is null, cannot send ServiceInfo.\" + ServiceInfo.typeToString(type) + \" message\");\n            }\n            return;\n        }\n\n        ServiceInfo si=new ServiceInfo(type, service, host, null);\n        MuxHeader hdr=new MuxHeader(si);\n        Message service_msg=new Message();\n        service_msg.putHeader(NAME, hdr);\n        channel.send(service_msg);\n    }","id":18875,"modified_method":"private void sendServiceMessage(byte type, String service, Address host,boolean bypassFlush) throws Exception {\n        if(host == null)\n            host=getLocalAddress();\n        if(host == null) {\n            if(log.isWarnEnabled()) {\n                log.warn(\"local_addr is null, cannot send ServiceInfo.\" + ServiceInfo.typeToString(type) + \" message\");\n            }\n            return;\n        }\n\n        ServiceInfo si=new ServiceInfo(type, service, host, null);\n        MuxHeader hdr=new MuxHeader(si);\n        Message service_msg=new Message();\n        service_msg.putHeader(NAME, hdr);\n        if(bypassFlush)\n           service_msg.putHeader(FLUSH.NAME, new FLUSH.FlushHeader(FLUSH.FlushHeader.FLUSH_BYPASS));\n        \n        channel.send(service_msg);\n    }","commit_id":"f54985c2c72f7333b7bb130d8a88089487f8a07c","url":"https://github.com/belaban/JGroups"},{"original_method":"public void sendServiceDownMessage(String service, Address host) throws Exception {\n        sendServiceMessage(ServiceInfo.SERVICE_DOWN, service, host);\n        if(local_addr != null && host != null && local_addr.equals(host))\n            handleServiceDown(service, host, false);\n    }","id":18876,"modified_method":"public void sendServiceDownMessage(String service, Address host,boolean bypassFlush) throws Exception {\n        sendServiceMessage(ServiceInfo.SERVICE_DOWN, service, host,bypassFlush);\n        if(local_addr != null && host != null && local_addr.equals(host))\n            handleServiceDown(service, host, false);\n    }","commit_id":"f54985c2c72f7333b7bb130d8a88089487f8a07c","url":"https://github.com/belaban/JGroups"},{"original_method":"public void close(MuxChannel ch) {\n        Entry entry;\n        String stack_name=ch.getStackName();\n        boolean all_closed=false;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(stack_name);\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                Multiplexer mux=entry.multiplexer;\n                if(mux != null) {\n                    Address addr=entry.channel.getLocalAddress();\n                    if(addr != null) {\n                        try {\n                            mux.sendServiceDownMessage(ch.getId(), addr);\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed sending SERVICE_DOWN message\", e);\n                        }\n                    }\n                    all_closed=mux.close(); // closes JChannel if all MuxChannels are in closed state\n                }\n            }\n            if(all_closed) {\n                channels.remove(stack_name);\n            }\n            if(expose_channels && server != null) {\n                try {\n                    unregister(domain + \":*,cluster=\" + stack_name);\n                }\n                catch(Exception e) {\n                    log.error(\"failed unregistering channel \" + stack_name, e);\n                }\n            }\n        }\n    }","id":18877,"modified_method":"public void close(MuxChannel ch) {\n        Entry entry;\n        String stack_name=ch.getStackName();\n        boolean all_closed=false;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(stack_name);\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                Multiplexer mux=entry.multiplexer;\n                if(mux != null) {\n                    Address addr=entry.channel.getLocalAddress();\n                    if(addr != null) {\n                        try { \n                            boolean successfulFlush = entry.channel.startFlush(3000,false);\n                            if(!successfulFlush && log.isWarnEnabled()){\n                               log.warn(\"Flush failed at \" + ch.getLocalAddress() + ch.getId());\n                            }                            \n                            mux.sendServiceDownMessage(ch.getId(), addr,true);\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed sending SERVICE_DOWN message\", e);\n                        }\n                        finally{                           \n                           entry.channel.stopFlush();                           \n                        }\n                    }\n                    all_closed=mux.close(); // closes JChannel if all MuxChannels are in closed state\n                }\n            }\n            if(all_closed) {\n                channels.remove(stack_name);\n            }\n            if(expose_channels && server != null) {\n                try {\n                    unregister(domain + \":*,cluster=\" + stack_name);\n                }\n                catch(Exception e) {\n                    log.error(\"failed unregistering channel \" + stack_name, e);\n                }\n            }\n        }\n    }","commit_id":"a5f160f4e3587e7fa396a50b8e247e9f50384dd6","url":"https://github.com/belaban/JGroups"},{"original_method":"public void disconnect(MuxChannel ch) {\n        Entry entry;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(ch.getStackName());\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                Multiplexer mux=entry.multiplexer;\n                if(mux != null) {\n                    Address addr=entry.channel.getLocalAddress();\n                    try {\n                        mux.sendServiceDownMessage(ch.getId(), addr);\n                    }\n                    catch(Exception e) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed sending SERVICE_DOWN message\", e);\n                    }\n                    mux.disconnect(); // disconnects JChannel if all MuxChannels are in disconnected state\n                }\n            }\n        }\n    }","id":18878,"modified_method":"public void disconnect(MuxChannel ch) {\n        Entry entry;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(ch.getStackName());\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                Multiplexer mux=entry.multiplexer;\n                if(mux != null) {\n                    Address addr=entry.channel.getLocalAddress();\n                    try {                              \n                        boolean successfulFlush = entry.channel.startFlush(3000,false);\n                        if(!successfulFlush && log.isWarnEnabled()){\n                           log.warn(\"Flush failed at \" + ch.getLocalAddress() + ch.getId());\n                        }\n                        mux.sendServiceDownMessage(ch.getId(), addr,true);\n                    }\n                    catch(Exception e) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed sending SERVICE_DOWN message\", e);\n                    }\n                    finally{                      \n                       entry.channel.stopFlush();                                    \n                    }                  \n                    mux.disconnect(); // disconnects JChannel if all MuxChannels are in disconnected state\n                }\n            }\n        }\n    }","commit_id":"a5f160f4e3587e7fa396a50b8e247e9f50384dd6","url":"https://github.com/belaban/JGroups"},{"original_method":"public void connect(MuxChannel ch) throws ChannelException {\n        Entry entry;\n        synchronized(channels) {\n            entry=(Entry)channels.get(ch.getStackName());\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                if(entry.channel == null)\n                    throw new ChannelException(\"channel has to be created before it can be connected\");\n\n                if(entry.multiplexer != null)\n                    entry.multiplexer.addServiceIfNotPresent(ch.getId(), ch);\n                \n                if(!entry.channel.isConnected()) {\n                    entry.channel.connect(ch.getStackName());\n                    if(entry.multiplexer != null) {\n                        try {\n                            entry.multiplexer.fetchServiceInformation();\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed fetching service state\", e);\n                        }\n                    }\n                }\n                if(entry.multiplexer != null) {\n                    try {\n                        Address addr=entry.channel.getLocalAddress();\n                        entry.multiplexer.sendServiceUpMessage(ch.getId(), addr);\n                    }\n                    catch(Exception e) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed sending SERVICE_UP message\", e);\n                    }\n                }\n            }\n        }\n        ch.setClosed(false);\n        ch.setConnected(true);\n    }","id":18879,"modified_method":"public void connect(MuxChannel ch) throws ChannelException {\n        Entry entry;\n        synchronized(channels) {\n            entry=(Entry)channels.get(ch.getStackName());\n        }\n        if(entry != null) {\n            synchronized(entry) {\n                if(entry.channel == null)\n                    throw new ChannelException(\"channel has to be created before it can be connected\");\n\n                if(entry.multiplexer != null)\n                    entry.multiplexer.addServiceIfNotPresent(ch.getId(), ch);\n                \n                if(!entry.channel.isConnected()) {\n                    entry.channel.connect(ch.getStackName());\n                    if(entry.multiplexer != null) {\n                        try {\n                            entry.multiplexer.fetchServiceInformation();\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed fetching service state\", e);\n                        }\n                    }\n                }\n                if(entry.multiplexer != null) {\n                    try {\n                        Address addr=entry.channel.getLocalAddress();                        \n                        boolean successfulFlush = entry.channel.startFlush(3000, false);\n                        if(!successfulFlush && log.isWarnEnabled()){\n                           log.warn(\"Flush failed at \" + ch.getLocalAddress() + ch.getId());\n                        }\n                        entry.multiplexer.sendServiceUpMessage(ch.getId(), addr,true);\n                    }\n                    catch(Exception e) {\n                        if(log.isErrorEnabled())\n                            log.error(\"failed sending SERVICE_UP message\", e);\n                    }\n                    finally{                     \n                       entry.channel.stopFlush();\n                    }\n                }                \n            }           \n        }\n        ch.setClosed(false);\n        ch.setConnected(true);\n    }","commit_id":"a5f160f4e3587e7fa396a50b8e247e9f50384dd6","url":"https://github.com/belaban/JGroups"},{"original_method":"public void shutdown(MuxChannel ch) {\n        Entry entry;\n        String stack_name=ch.getStackName();\n        boolean all_closed=false;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(stack_name);\n            if(entry != null) {\n                synchronized(entry) {\n                    Multiplexer mux=entry.multiplexer;\n                    if(mux != null) {\n                        Address addr=entry.channel.getLocalAddress();\n                        try {\n                            mux.sendServiceDownMessage(ch.getId(), addr);\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed sending SERVICE_DOWN message\", e);\n                        }\n                        all_closed=mux.shutdown(); // closes JChannel if all MuxChannels are in closed state\n\n                        //mux.unregister(ch.getId());\n                    }\n                }\n                if(all_closed) {\n                    channels.remove(stack_name);\n                }\n                if(expose_channels && server != null) {\n                    try {\n                        unregister(domain + \":*,cluster=\" + stack_name);\n                    }\n                    catch(Exception e) {\n                        log.error(\"failed unregistering channel \" + stack_name, e);\n                    }\n                }\n            }\n        }\n    }","id":18880,"modified_method":"public void shutdown(MuxChannel ch) {\n        Entry entry;\n        String stack_name=ch.getStackName();\n        boolean all_closed=false;\n\n        synchronized(channels) {\n            entry=(Entry)channels.get(stack_name);\n            if(entry != null) {\n                synchronized(entry) {\n                    Multiplexer mux=entry.multiplexer;\n                    if(mux != null) {\n                        Address addr=entry.channel.getLocalAddress();\n                        try {\n                            boolean successfulFlush = entry.channel.startFlush(3000,false);\n                            if(!successfulFlush && log.isWarnEnabled()){\n                              log.warn(\"Flush failed at \" + ch.getLocalAddress() + ch.getId());\n                            }\n                            mux.sendServiceDownMessage(ch.getId(), addr,true);\n                        }\n                        catch(Exception e) {\n                            if(log.isErrorEnabled())\n                                log.error(\"failed sending SERVICE_DOWN message\", e);\n                        }\n                        finally{\n                           entry.channel.stopFlush();\n                        }\n                        all_closed=mux.shutdown(); // closes JChannel if all MuxChannels are in closed state\n\n                        //mux.unregister(ch.getId());\n                    }\n                }\n                if(all_closed) {\n                    channels.remove(stack_name);\n                }\n                if(expose_channels && server != null) {\n                    try {\n                        unregister(domain + \":*,cluster=\" + stack_name);\n                    }\n                    catch(Exception e) {\n                        log.error(\"failed unregistering channel \" + stack_name, e);\n                    }\n                }\n            }\n        }\n    }","commit_id":"a5f160f4e3587e7fa396a50b8e247e9f50384dd6","url":"https://github.com/belaban/JGroups"},{"original_method":"public void sendServiceUpMessage(String service, Address host) throws Exception {\n        sendServiceMessage(ServiceInfo.SERVICE_UP, service, host);\n        if(local_addr != null && host != null && local_addr.equals(host))\n            handleServiceUp(service, host, false);\n    }","id":18881,"modified_method":"public void sendServiceUpMessage(String service, Address host,boolean bypassFlush) throws Exception {\n        sendServiceMessage(ServiceInfo.SERVICE_UP, service, host,bypassFlush);\n        if(local_addr != null && host != null && local_addr.equals(host))\n            handleServiceUp(service, host, false);\n    }","commit_id":"a5f160f4e3587e7fa396a50b8e247e9f50384dd6","url":"https://github.com/belaban/JGroups"},{"original_method":"public void sendServiceDownMessage(String service, Address host) throws Exception {\n        sendServiceMessage(ServiceInfo.SERVICE_DOWN, service, host);\n        if(local_addr != null && host != null && local_addr.equals(host))\n            handleServiceDown(service, host, false);\n    }","id":18882,"modified_method":"public void sendServiceDownMessage(String service, Address host,boolean bypassFlush) throws Exception {\n        sendServiceMessage(ServiceInfo.SERVICE_DOWN, service, host,bypassFlush);\n        if(local_addr != null && host != null && local_addr.equals(host))\n            handleServiceDown(service, host, false);\n    }","commit_id":"a5f160f4e3587e7fa396a50b8e247e9f50384dd6","url":"https://github.com/belaban/JGroups"},{"original_method":"private void sendServiceMessage(byte type, String service, Address host) throws Exception {\n        if(host == null)\n            host=getLocalAddress();\n        if(host == null) {\n            if(log.isWarnEnabled()) {\n                log.warn(\"local_addr is null, cannot send ServiceInfo.\" + ServiceInfo.typeToString(type) + \" message\");\n            }\n            return;\n        }\n\n        ServiceInfo si=new ServiceInfo(type, service, host, null);\n        MuxHeader hdr=new MuxHeader(si);\n        Message service_msg=new Message();\n        service_msg.putHeader(NAME, hdr);\n        channel.send(service_msg);\n    }","id":18883,"modified_method":"private void sendServiceMessage(byte type, String service, Address host,boolean bypassFlush) throws Exception {\n        if(host == null)\n            host=getLocalAddress();\n        if(host == null) {\n            if(log.isWarnEnabled()) {\n                log.warn(\"local_addr is null, cannot send ServiceInfo.\" + ServiceInfo.typeToString(type) + \" message\");\n            }\n            return;\n        }\n\n        ServiceInfo si=new ServiceInfo(type, service, host, null);\n        MuxHeader hdr=new MuxHeader(si);\n        Message service_msg=new Message();\n        service_msg.putHeader(NAME, hdr);\n        if(bypassFlush)\n           service_msg.putHeader(FLUSH.NAME, new FLUSH.FlushHeader(FLUSH.FlushHeader.FLUSH_BYPASS));\n        \n        channel.send(service_msg);\n    }","commit_id":"a5f160f4e3587e7fa396a50b8e247e9f50384dd6","url":"https://github.com/belaban/JGroups"},{"original_method":"@Nullable\n  public IValueProxy evaluate() throws BaseEvaluationException {\n    try {\n      final Set<IClassPathItem> classpaths = new HashSet<IClassPathItem>();\n      for (Language language : this.myLanguages) {\n        IClassPathItem item = language.getClassPathItem();\n        classpaths.add(item);\n      }\n      String path = PathManager.getHomePath() + NameUtil.pathFromNamespace(\".lib.tools.\") + \"tools.jar\";\n      classpaths.add(ClassPathFactory.getInstance().createFromPath(path));\n\n      GeneratorManager manager = new GeneratorManager(myContext.getProject(), new GenerationSettings()) {\n        protected boolean generateRequirements() {\n          return false;\n        }\n      };\n\n      InMemoryJavaGenerationHandler handler = new AbstractEvaluationLogic.MyInMemoryJavaGenerationHandler(false, true, classpaths);\n      Project ideaProject = this.myAuxModule.getMPSProject().getProject();\n      DefaultMessageHandler messageHandler = new DefaultMessageHandler(ideaProject);\n      ProgressWindow progressWindow = new ProgressWindow(false, ideaProject);\n      boolean successful = manager.generateModels(ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(), this.myAuxModel), myContext, handler, progressWindow, messageHandler, true);\n\n      Disposer.dispose(progressWindow);\n\n      String fullClassName = this.myAuxModel.getLongName() + \".\" + EVALUATOR_NAME;\n      String source = handler.getSources().get(fullClassName);\n\n      if (successful || StringUtils.isNotEmpty(source)) {\n        if (isDeveloperMode()) {\n          System.err.println(source);\n        }\n        try {\n          ClassLoader loader = handler.getCompiler().getClassLoader(this.myUiState.getClass().getClassLoader());\n          Class clazz = Class.forName(fullClassName, true, loader);\n          Evaluator evaluator = (Evaluator) clazz.getConstructor(JavaUiState.class).newInstance(this.myUiState);\n          IValueProxy value = evaluator.evaluate();\n          this.myUiState = this.myDebugSession.refresh();\n          return value;\n        } catch (Throwable t) {\n          throw new BaseEvaluationException(t);\n        }\n      } else {\n        throw new BaseEvaluationException(\"Errors during generation.\");\n      }\n    } catch (Throwable t) {\n      throw new BaseEvaluationException(t);\n    }\n  }","id":18884,"modified_method":"@Nullable\n  public IValueProxy evaluate() throws EvaluationException {\n    try {\n      final Set<IClassPathItem> classpaths = new HashSet<IClassPathItem>();\n      for (Language language : this.myLanguages) {\n        IClassPathItem item = language.getClassPathItem();\n        classpaths.add(item);\n      }\n      String path = PathManager.getHomePath() + NameUtil.pathFromNamespace(\".lib.tools.\") + \"tools.jar\";\n      classpaths.add(ClassPathFactory.getInstance().createFromPath(path));\n\n      GeneratorManager manager = new GeneratorManager(myContext.getProject(), new GenerationSettings()) {\n        protected boolean generateRequirements() {\n          return false;\n        }\n      };\n\n      InMemoryJavaGenerationHandler handler = new AbstractEvaluationLogic.MyInMemoryJavaGenerationHandler(false, true, classpaths);\n      Project ideaProject = this.myAuxModule.getMPSProject().getProject();\n      DefaultMessageHandler messageHandler = new DefaultMessageHandler(ideaProject);\n      ProgressWindow progressWindow = new ProgressWindow(false, ideaProject);\n      boolean successful = manager.generateModels(ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(), this.myAuxModel), myContext, handler, progressWindow, messageHandler, true);\n\n      Disposer.dispose(progressWindow);\n\n      String fullClassName = this.myAuxModel.getLongName() + \".\" + EVALUATOR_NAME;\n      String source = handler.getSources().get(fullClassName);\n\n      if (successful || StringUtils.isNotEmpty(source)) {\n        if (isDeveloperMode()) {\n          System.err.println(source);\n        }\n        ClassLoader loader = handler.getCompiler().getClassLoader(this.myUiState.getClass().getClassLoader());\n        Class clazz = Class.forName(fullClassName, true, loader);\n        Evaluator evaluator = (Evaluator) clazz.getConstructor(JavaUiState.class).newInstance(this.myUiState);\n        IValueProxy value = evaluator.evaluate();\n        this.myUiState = this.myDebugSession.refresh();\n        return value;\n      } else {\n        throw new EvaluationException(\"Errors during generation.\");\n      }\n    } catch (EvaluationException e) {\n      throw e;\n    } catch (Throwable t) {\n      throw new EvaluationException(t);\n    }\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public IValueProxy invokeMethod(String name, String jniSignature, Object... args) {\n    //todo Duplication between this class and ObjectValueProxy\n    // to bad this class can not extends ObjectValueProxy\n    ReferenceType objectType = myThreadReference.virtualMachine().classesByName(\"java.lang.Object\").get(0);\n    List<Method> methods = objectType.methodsByName(name, jniSignature);\n    if (methods.size() == 0) {\n      // TODO seriously, exception\n      LOG.error(\"method with \" + name + \" signature \" + jniSignature + \" not found in class \" + objectType);\n      return null;\n    }\n    Method method = methods.get(0);\n\n    List<Value> argValues = MirrorUtil.getValues(myThreadReference, args);\n\n    Value result;\n    try {\n      result = getArrayValue().invokeMethod(myThreadReference, method, argValues, 0);\n    } catch (Throwable t) {\n      LOG.error(\"method invocation failed\", t);\n      return null;\n    }\n    return MirrorUtil.getValueProxy(result, myThreadReference);\n  }","id":18885,"modified_method":"@Override\n  public IValueProxy invokeMethod(String name, String jniSignature, Object... args) throws EvaluationException {\n    // we can't use Evaluators similar method cause we find methods in Object, but invoke them for Array\n    ClassType objectType = Evaluator.findClassType(\"java.lang.Object\", myThreadReference.virtualMachine());\n    final Method method = Evaluator.findMethod(objectType, name, jniSignature);\n\n    final List<Value> argValues = MirrorUtil.getValues(myThreadReference, args);\n\n    return handleInvocationExceptions(new Invocatable<IValueProxy>() {\n      @Override\n      public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = getArrayValue().invokeMethod(myThreadReference, method, argValues, 0);\n        return MirrorUtil.getValueProxy(result, myThreadReference);\n      }\n    });\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"@BaseDialog.Button(position = 0, name = \"Evaluate\", mnemonic = 'E', defaultButton = true)\n  public void buttonEvaluate() {\n    try {\n      IValueProxy evaluatedValue = myEvaluationData.evaluate();\n      if (evaluatedValue != null) {\n        setSuccess(evaluatedValue);\n      } else {\n        setFailure(null, \"Evaluation returned null.\");\n      }\n    } catch (BaseEvaluationException e) {\n      setFailure(e, null);\n      LOG.error(e);\n    }\n  }","id":18886,"modified_method":"@BaseDialog.Button(position = 0, name = \"Evaluate\", mnemonic = 'E', defaultButton = true)\n  public void buttonEvaluate() {\n    try {\n      IValueProxy evaluatedValue = myEvaluationData.evaluate();\n      if (evaluatedValue != null) {\n        setSuccess(evaluatedValue);\n      } else {\n        setFailure(null, \"Evaluation returned null.\");\n      }\n    } catch (InvalidEvaluatedExpressionException e) {\n      setFailure(e.getCause(), null);\n    } catch (EvaluationException e) {\n      setFailure(e, null);\n      LOG.error(e);\n    }\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected ObjectValueProxy getThisObject() {\n    return myThisObject;\n  }","id":18887,"modified_method":"protected IObjectValueProxy getThisObject() {\n    return myThisObject;\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Nullable\n  public IValueProxy invokeStatic(String className, String name, String jniSignature, Object... args) {\n    List<ReferenceType> classes = getVM().classesByName(className);\n    if (classes.size() == 0) {\n      LOG.error(\"could not find class \" + className);\n      return null;\n    }\n    ClassType referenceType = (ClassType) classes.get(0);\n    List<Method> methods = referenceType.methodsByName(name, jniSignature);\n    if (methods.size() == 0) {\n      LOG.error(\"could not find method \" + name + \" with signature \" + jniSignature + \" in \" + className);\n      return null;\n    }\n    Method method = methods.get(0);\n\n    List<Value> argValues = MirrorUtil.getValues(getThreadReference(), args);\n    Value result;\n    try {\n      result = referenceType.invokeMethod(getThreadReference(), method, argValues, 0);\n    } catch (Throwable t) {\n      LOG.error(\"method invocation failed\", t);\n      return null;\n    }\n    return MirrorUtil.getValueProxy(result, getThreadReference());\n  }","id":18888,"modified_method":"@NotNull\n  protected IValueProxy invokeStatic(String className, String name, String jniSignature, Object... args) throws EvaluationException {\n    final ClassType referenceType = findClassType(className, getVM());\n    final Method method = findMethod(referenceType, name, jniSignature);\n\n    final List<Value> argValues = MirrorUtil.getValues(getThreadReference(), args);\n\n    return handleInvocationExceptions(new Invocatable<IValueProxy>() {\n      @Override\n      public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = referenceType.invokeMethod(getThreadReference(), method, argValues, 0);\n        return MirrorUtil.getValueProxy(result, getThreadReference());\n      }\n    });\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected IValueProxy invokeConstructor(String className, String jniSignature, Object... args) {\n    // TODO duplication in code\n    List<ReferenceType> classes = getVM().classesByName(className);\n    if (classes.size() == 0) {\n      LOG.error(\"could not find class \" + className);\n      return null;\n    }\n    ClassType referenceType = (ClassType) classes.get(0);\n    List<Method> methods = referenceType.methodsByName(\"<init>\", jniSignature);\n    if (methods.size() == 0) {\n      LOG.error(\"could not find constructor \" + \" with signature \" + jniSignature + \" in \" + className);\n      return null;\n    }\n    Method constructor = null;\n    for (Method m : methods) {\n      if (m.isConstructor()) {\n        constructor = m;\n        break;\n      }\n    }\n    if (constructor == null) {\n      // TODO throw exception\n      LOG.error(\"could not find constructor \" + \" with signature \" + jniSignature + \" in \" + className);\n      return null;\n    }\n\n    List<Value> argValues = MirrorUtil.getValues(getThreadReference(), args);\n    Value result;\n    try {\n      result = referenceType.newInstance(getThreadReference(), constructor, argValues, 0);\n    } catch (Throwable t) {\n      LOG.error(\"method invocation failed\", t);\n      return null;\n    }\n    return MirrorUtil.getValueProxy(result, getThreadReference());\n  }","id":18889,"modified_method":"@NotNull\n  protected IValueProxy invokeConstructor(String className, String jniSignature, Object... args) throws EvaluationException {\n    // TODO duplication in code\n    final ClassType referenceType = findClassType(className, getVM());\n    final Method constructor = findConstructor(referenceType, jniSignature);\n\n    final List<Value> argValues = MirrorUtil.getValues(getThreadReference(), args);\n\n    return handleInvocationExceptions(new Invocatable<IValueProxy>() {\n      @Override\n      public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = referenceType.newInstance(getThreadReference(), constructor, argValues, 0);\n        return MirrorUtil.getValueProxy(result, getThreadReference());\n      }\n    });\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Evaluator(JavaUiState uiState) {\n    myUiState = uiState;\n    ObjectReference objectReference = uiState.getThisObject();\n    if (objectReference != null) {\n      myThisObject = new ObjectValueProxy(objectReference, uiState.getThread().getThread());\n    }\n  }","id":18890,"modified_method":"public Evaluator(JavaUiState uiState) {\n    myUiState = uiState;\n    ObjectReference objectReference = uiState.getThisObject();\n    if (objectReference != null) {\n      myThisObject = (IObjectValueProxy) MirrorUtil.getValueProxy(objectReference, uiState.getThread().getThread());\n    }\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Nullable\n  public IValueProxy getStaticFieldValue(String className, String fieldName) {\n    List<ReferenceType> classes = getVM().classesByName(className);\n    if (classes.size() == 0) {\n      LOG.error(\"Could not find class \" + className);\n      return null;\n    }\n    ClassType referenceType = (ClassType) classes.get(0);\n    Field field = referenceType.fieldByName(fieldName);\n    if (field == null) {\n      LOG.error(\"Could not find field \" + fieldName + \" in \" + className);\n      return null;\n    }\n    Value result = referenceType.getValue(field);\n    return MirrorUtil.getValueProxy(result, getThreadReference());\n  }","id":18891,"modified_method":"@NotNull\n  protected IValueProxy getStaticFieldValue(String className, String fieldName) throws InvalidEvaluatedExpressionException {\n    ClassType referenceType = findClassType(className, getVM());\n    Field field = findField(referenceType, fieldName);\n    assert field.isStatic();\n    Value result = referenceType.getValue(field);\n    return MirrorUtil.getValueProxy(result, getThreadReference());\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public IValueProxy invokeSuperMethod(String name, String jniSignature, Object... args) {\n    ClassType classType = myReferenceType;\n    ClassType superclass = classType.superclass();\n    if (superclass == null) {\n      LOG.error(\"Can't invoke super method: class has no superclasses.\");\n    }\n    int options = ObjectReference.INVOKE_NONVIRTUAL;\n    return invoke(name, jniSignature, superclass, options, args);\n  }","id":18892,"modified_method":"@Override\n  public IValueProxy invokeSuperMethod(String name, String jniSignature, Object... args) throws EvaluationException {\n    ClassType classType = myReferenceType;\n    ClassType superclass = classType.superclass();\n    if (superclass == null) {\n      throw new InvalidEvaluatedExpressionException(\"Can't invoke super method: class \" + classType.name() + \" has no superclasses.\");\n    }\n    int options = ObjectReference.INVOKE_NONVIRTUAL;\n    return invoke(name, jniSignature, superclass, options, args);\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected IValueProxy invoke(String name, String jniSignature, ClassType classType, int options, Object[] args) {\n    Method method = classType.concreteMethodByName(name, jniSignature);\n    if (method == null) {\n      LOG.error(\"Concrete method \" + name + \" with signature \" + jniSignature +  \" not found in \" + classType + \".\");\n      return null; // TODO throw exception, please\n    }\n    List<Value> argValues = MirrorUtil.getValues(myThreadReference, args);\n    Value result;\n    try {\n      result = getObjectValue().invokeMethod(myThreadReference, method, argValues, options);\n    } catch (Throwable t) {\n      LOG.error(\"Method invocation failed.\", t);\n      return null;\n    }\n    return MirrorUtil.getValueProxy(result, myThreadReference);\n  }","id":18893,"modified_method":"protected IValueProxy invoke(String name, String jniSignature, ClassType classType, final int options, Object[] args) throws EvaluationException {\n    // TODO merge with Evaluator methods invocation\n    final Method method = classType.concreteMethodByName(name, jniSignature);\n    if (method == null) {\n      throw new InvalidEvaluatedExpressionException(\"Concrete method \" + name + \" with signature \" + jniSignature +  \" not found in \" + classType + \".\");\n    }\n    final List<Value> argValues = MirrorUtil.getValues(myThreadReference, args);\n\n    return handleInvocationExceptions(new Invocatable<IValueProxy>() {\n      @Override\n      public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = getObjectValue().invokeMethod(myThreadReference, method, argValues, options);\n        return MirrorUtil.getValueProxy(result, myThreadReference);\n      }\n    });\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Nullable\n  public IValueProxy getFieldValue(String fieldName) {\n    ObjectReference value = getObjectValue();\n    Field f = myReferenceType.fieldByName(fieldName);\n    if (f == null) {\n      // TODO we should really throw an exception\n      LOG.error(\"Could not find field \" + fieldName + \" in \" + myReferenceType);\n      return null;\n    }\n    Value result = value.getValue(f);\n    return MirrorUtil.getValueProxy(result, myThreadReference);\n  }","id":18894,"modified_method":"@Nullable\n  public IValueProxy getFieldValue(String fieldName) throws InvalidEvaluatedExpressionException {\n    ObjectReference value = getObjectValue();\n    Field f = Evaluator.findField(myReferenceType, fieldName);\n    Value result = value.getValue(f);\n    return MirrorUtil.getValueProxy(result, myThreadReference);\n  }","commit_id":"4cdede75967d6c7384622b28b9f3c999dc5f9c70","url":"https://github.com/JetBrains/MPS"},{"original_method":"/** Used to test ENG-6620, part 3 (dotted path and array index notation, combined). */\n    public void testFIELDFunctionWithDotAndIndexNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[1]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].veggies\", \"good for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].dairy\", \"3\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n    }","id":18895,"modified_method":"/** Used to test ENG-6620, part 3 (dotted path and array index notation, combined). */\n    public void testFIELDFunctionWithDotAndIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"inner.arr[0]\", 0);\n        testProcWithValidJSON(TABLE_ROW2,    client, \"IdFieldProc\", \"inner.arr[1]\", 2);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[2].veggies\", \"good for you\");\n        testProcWithValidJSON(TABLE_ROW3,    client, \"IdFieldProc\", \"arr3d[2].dairy\", \"3\");\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6832 (invalid array index notation, for SET_FIELD). */\n    // TODO: remove all \"no_\" prefixes, once SET_FIELD function is re-enabled\n    public void no_testSET_FIELDFunctionWithInvalidIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index [position 6]\",\n                                client, \"UpdateSetFieldProc\", \"arr[-2]\",  \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"UpdateSetFieldProc\", \"arr[]\",    \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"UpdateSetFieldProc\", \"arr[abc]\", \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected termination (unterminated array access) [position 3]\",\n                                client, \"UpdateSetFieldProc\", \"arr[\",     \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Missing ']' after array index [position 6]'\",\n                                client, \"UpdateSetFieldProc\", \"arr[123\",  \"-1\", 1);\n    }","id":18896,"modified_method":"/** Used to test ENG-6832 (invalid array index notation, for SET_FIELD). */\n    public void testSET_FIELDFunctionWithInvalidIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n        testProcWithInvalidJSON(\"Invalid JSON path: Invalid array index less than -1 [position 6]\",\n                                client, \"UpdateSetFieldProc\", \"arr[-2]\",  \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"UpdateSetFieldProc\", \"arr[]\",    \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected character in array index [position 4]\",\n                                client, \"UpdateSetFieldProc\", \"arr[abc]\", \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Unexpected termination (unterminated array access) [position 3]\",\n                                client, \"UpdateSetFieldProc\", \"arr[\",     \"-1\", 1);\n        testProcWithInvalidJSON(\"Invalid JSON path: Missing ']' after array index [position 6]\",\n                                client, \"UpdateSetFieldProc\", \"arr[123\",  \"-1\", 1);\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testFIELDFunctionWithNumericData() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"NumericFieldProc\", \"numeric\", \"1.2\", \"1.20\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.second.third.numeric\", \"2.3\", \"2.30\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[1][1][2]\", \"4.5\", \"4.50\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.arr[2]\", \"3.4\", \"3.40\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[2].numeric\", \"5.6\", \"5.60\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n    }","id":18897,"modified_method":"public void testFIELDFunctionWithNumericData() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"numeric\", \"1.2\", \"1.20\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"inner.second.third.numeric\", \"2.3\", \"2.30\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"arr3d[1][1][2]\", \"4.5\", \"4.50\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"inner.arr[2]\", \"3.4\", \"3.40\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"arr3d[2].numeric\", \"5.6\", \"5.60\");\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6621, part 1 (without dotted path or array index notation). */\n    public void no_testSET_FIELDFunction() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"tag\", \"three\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"tag\", \"four\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc, which uses the SET_FIELD function\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"tag\", \"\\\"four\\\"\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"tag\", \"three\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"tag\", \"four\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n    }","id":18898,"modified_method":"/** Used to test ENG-6621, part 1 (without dotted path or array index notation). */\n    public void testSET_FIELDFunction() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(TABLE_ROW3,  client, \"IdFieldProc\", \"tag\", \"three\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"tag\", \"four\");\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc, which uses the SET_FIELD function\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"tag\", \"\\\"four\\\"\", 3);\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"tag\", \"three\");\n        testProcWithValidJSON(TABLE_ROW3,  client, \"IdFieldProc\", \"tag\", \"four\");\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6620, part 4 (dotted path and array index notation, combined). */\n    public void no_testSET_FIELDFunctionWithDotAndIndexNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[0]\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[1]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[1]\", -2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].veggies\", \"good for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].veggies\", \"bad for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].dairy\", \"3\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].dairy\", \"-3\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"inner.arr[0]\", \"-1\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"inner.arr[1]\", \"-2\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[2].veggies\", \"\\\"bad for you\\\"\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[2].dairy\", \"-3\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[0]\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[1]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.arr[1]\", -2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].veggies\", \"good for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].veggies\", \"bad for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].dairy\", \"3\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[2].dairy\", \"-3\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n    }","id":18899,"modified_method":"/** Used to test ENG-6620, part 4 (dotted path and array index notation, combined). */\n    public void testSET_FIELDFunctionWithDotAndIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"inner.arr[0]\", 0);\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"inner.arr[0]\", -1);\n        testProcWithValidJSON(TABLE_ROW2,    client, \"IdFieldProc\", \"inner.arr[1]\", 2);\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"inner.arr[1]\", -2);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[2].veggies\", \"good for you\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"arr3d[2].veggies\", \"bad for you\");\n        testProcWithValidJSON(TABLE_ROW3,    client, \"IdFieldProc\", \"arr3d[2].dairy\", \"3\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"arr3d[2].dairy\", \"-3\");\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"inner.arr[0]\", \"-1\", 1);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"inner.arr[1]\", \"-2\", 2);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr3d[2].veggies\", \"\\\"bad for you\\\"\", 2);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr3d[2].dairy\", \"-3\", 3);\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(TABLE_ROWS23, client, \"IdFieldProc\", \"inner.arr[0]\", 0);\n        testProcWithValidJSON(TABLE_ROW1,   client, \"IdFieldProc\", \"inner.arr[0]\", -1);\n        testProcWithValidJSON(EMPTY_TABLE,  client, \"IdFieldProc\", \"inner.arr[1]\", 2);\n        testProcWithValidJSON(TABLE_ROW2,   client, \"IdFieldProc\", \"inner.arr[1]\", -2);\n        testProcWithValidJSON(TABLE_ROWS13, client, \"IdFieldProc\", \"arr3d[2].veggies\", \"good for you\");\n        testProcWithValidJSON(TABLE_ROW2,   client, \"IdFieldProc\", \"arr3d[2].veggies\", \"bad for you\");\n        testProcWithValidJSON(EMPTY_TABLE,  client, \"IdFieldProc\", \"arr3d[2].dairy\", \"3\");\n        testProcWithValidJSON(TABLE_ROW3,   client, \"IdFieldProc\", \"arr3d[2].dairy\", \"-3\");\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6620, part 2 (array index notation). */\n    public void testFIELDFunctionWithIndexNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr[1]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr[2]\", 100);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n\n        // Test \\ escape for brackets in element name, not used for array index\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]]  ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Verify that index notation returns nothing when used on a primitive\n        // (integer, float, boolean, string), or an object\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"id[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"numeric[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"bool[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"tag[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"last[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"inner[0]\");\n\n        // Compare with similar behavior when FIELD is called with ARRAY_ELEMENT\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"id\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"numeric\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"bool\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"last\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"inner\", 0);\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"NullArrayProc\", \"tag\", 0);\n\n        // Test index notation with no name specified (a weird case!)\n        testProcWithValidJSON(new long[][]{{10}}, client, \"NotNullFieldProc\", \"[0]\");\n        testProcWithValidJSON(new long[][]{{10}}, client, \"IdFieldProc\", \"[0]\", 1);\n        testProcWithValidJSON(new long[][]{{10}}, client, \"IdFieldProc\", \"[1]\", 2);\n        testProcWithValidJSON(new long[][]{{10}}, client, \"IdFieldProc\", \"[2]\", 3);\n    }","id":18900,"modified_method":"/** Used to test ENG-6620, part 2 (array index notation). */\n    public void testFIELDFunctionWithIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr[0]\", 0);\n        testProcWithValidJSON(TABLE_ROW2,    client, \"IdFieldProc\", \"arr[1]\", 2);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr[2]\", 100);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        testProcWithValidJSON(TABLE_ROW3,    client, \"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n\n        // Test \\ escape for brackets in element name, not used for array index\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"bracket]]  ] chars\", \"[foo]\");\n\n        // Verify that index notation returns nothing when used on a primitive\n        // (integer, float, boolean, string), or an object\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"id[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"numeric[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"bool[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"tag[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"last[0]\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"inner[0]\");\n\n        // Compare with similar behavior when FIELD is called with ARRAY_ELEMENT\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"id\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"numeric\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"bool\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"last\", 0);\n        testProcWithValidJSON(FULL_TABLE, client, \"NullArrayProc\", \"inner\", 0);\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"NullArrayProc\", \"tag\", 0);\n\n        // Test index notation with no name specified (a weird case!)\n        testProcWithValidJSON(new long[][]{{10}}, client, \"NotNullFieldProc\", \"[0]\");\n        testProcWithValidJSON(new long[][]{{10}}, client, \"IdFieldProc\", \"[0]\", 1);\n        testProcWithValidJSON(new long[][]{{10}}, client, \"IdFieldProc\", \"[1]\", 2);\n        testProcWithValidJSON(new long[][]{{10}}, client, \"IdFieldProc\", \"[2]\", 3);\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6620, part 1 (dotted path notation). */\n    public void testFIELDFunctionWithDotNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.veggies\", \"good for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.fruits\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.meats\", \"yum\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.dairy\", \"1\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n\n        // Test \\ escape for dot in element name, not used for sub-path\n        cr = client.callProcedure(\"IdFieldProc\", \"dot\\\\.char\", \"foo.bar\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n\n        cr = client.callProcedure(\"IdFieldProc\", \"dot.char\", \"foo.bar\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Verify that dot notation returns nothing when used on a primitive\n        // (integer, float, boolean, string), or an array\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"id.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"numeric.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"bool.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"tag.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"last.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"arr.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"arr.0\");\n\n        // Compare with similar behavior when FIELD is called twice\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"id\",   \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"numeric\", \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"bool\", \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"last\", \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"arr\",  \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"arr\",  \"0\");\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"NotNullField2Proc\", \"tag\", \"veggies\");\n    }","id":18901,"modified_method":"/** Used to test ENG-6620, part 1 (dotted path notation). */\n    public void testFIELDFunctionWithDotNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"inner.veggies\", \"good for you\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"inner.second.fruits\", 1);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"inner.second.third.meats\", \"yum\");\n        testProcWithValidJSON(TABLE_ROW1,    client, \"IdFieldProc\", \"inner.second.third.dairy\", \"1\");\n\n        // Test \\ escape for dot in element name, not used for sub-path\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"dot\\\\.char\", \"foo.bar\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"dot.char\", \"foo.bar\");\n\n        // Verify that dot notation returns nothing when used on a primitive\n        // (integer, float, boolean, string), or an array\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"id.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"numeric.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"bool.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"tag.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"last.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"arr.veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullFieldProc\", \"arr.0\");\n\n        // Compare with similar behavior when FIELD is called twice\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"id\",   \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"numeric\", \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"bool\", \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"last\", \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"arr\",  \"veggies\");\n        testProcWithValidJSON(EMPTY_TABLE, client, \"NotNullField2Proc\", \"arr\",  \"0\");\n        testProcWithInvalidJSON(\"Syntax error: value, object or array expected\", client, \"NotNullField2Proc\", \"tag\", \"veggies\");\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void no_testSET_FIELDFunctionWithNumericData() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"NumericFieldProc\", \"numeric\", \"1.2\", \"1.20\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"numeric\", \"-1.2\", \"-1.20\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.second.third.numeric\", \"2.3\", \"2.30\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.second.third.numeric\", \"-2.3\", \"-2.30\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[1][1][2]\", \"4.5\", \"4.50\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[1][1][2]\", \"-4.5\", \"-4.50\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.arr[2]\", \"3.4\", \"3.40\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.arr[2]\", \"-3.4\", \"-3.40\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[2].numeric\", \"5.6\", \"5.60\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[2].numeric\", \"-5.6\", \"-5.60\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"numeric\", \"-1.2\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"inner.second.third.numeric\", \"-2.3\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][1][2]\", \"-4.5\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"inner.arr[2]\", \"-3.4\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[2].numeric\", \"-5.6\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"NumericFieldProc\", \"numeric\", \"1.2\", \"1.20\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"numeric\", \"-1.2\", \"-1.20\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.second.third.numeric\", \"2.3\", \"2.30\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.second.third.numeric\", \"-2.3\", \"-2.30\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[1][1][2]\", \"4.5\", \"4.50\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[1][1][2]\", \"-4.5\", \"-4.50\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.arr[2]\", \"3.4\", \"3.40\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"inner.arr[2]\", \"-3.4\", \"-3.40\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[2].numeric\", \"5.6\", \"5.60\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2}});\n        cr = client.callProcedure(\"NumericFieldProc\", \"arr3d[2].numeric\", \"-5.6\", \"-5.60\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n    }","id":18902,"modified_method":"public void testSET_FIELDFunctionWithNumericData() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"numeric\", \"1.2\", \"1.20\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NumericFieldProc\", \"numeric\", \"-1.2\", \"-1.20\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"inner.second.third.numeric\", \"2.3\", \"2.30\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NumericFieldProc\", \"inner.second.third.numeric\", \"-2.3\", \"-2.30\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"arr3d[1][1][2]\", \"4.5\", \"4.50\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NumericFieldProc\", \"arr3d[1][1][2]\", \"-4.5\", \"-4.50\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"inner.arr[2]\", \"3.4\", \"3.40\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NumericFieldProc\", \"inner.arr[2]\", \"-3.4\", \"-3.40\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"NumericFieldProc\", \"arr3d[2].numeric\", \"5.6\", \"5.60\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"NumericFieldProc\", \"arr3d[2].numeric\", \"-5.6\", \"-5.60\");\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"numeric\", \"-1.2\", 1);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"inner.second.third.numeric\", \"-2.3\", 2);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr3d[1][1][2]\", \"-4.5\", 3);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"inner.arr[2]\", \"-3.4\", 2);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr3d[2].numeric\", \"-5.6\", 3);\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(TABLE_ROWS23, client, \"NumericFieldProc\", \"numeric\", \"1.2\", \"1.20\");\n        testProcWithValidJSON(TABLE_ROW1,   client, \"NumericFieldProc\", \"numeric\", \"-1.2\", \"-1.20\");\n        testProcWithValidJSON(TABLE_ROWS13, client, \"NumericFieldProc\", \"inner.second.third.numeric\", \"2.3\", \"2.30\");\n        testProcWithValidJSON(TABLE_ROW2,   client, \"NumericFieldProc\", \"inner.second.third.numeric\", \"-2.3\", \"-2.30\");\n        testProcWithValidJSON(TABLE_ROWS12, client, \"NumericFieldProc\", \"arr3d[1][1][2]\", \"4.5\", \"4.50\");\n        testProcWithValidJSON(TABLE_ROW3,   client, \"NumericFieldProc\", \"arr3d[1][1][2]\", \"-4.5\", \"-4.50\");\n        testProcWithValidJSON(TABLE_ROWS13, client, \"NumericFieldProc\", \"inner.arr[2]\", \"3.4\", \"3.40\");\n        testProcWithValidJSON(TABLE_ROW2,   client, \"NumericFieldProc\", \"inner.arr[2]\", \"-3.4\", \"-3.40\");\n        testProcWithValidJSON(TABLE_ROWS12, client, \"NumericFieldProc\", \"arr3d[2].numeric\", \"5.6\", \"5.60\");\n        testProcWithValidJSON(TABLE_ROW3,   client, \"NumericFieldProc\", \"arr3d[2].numeric\", \"-5.6\", \"-5.60\");\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6620, part 3 (array index notation). */\n    public void no_testSET_FIELDFunctionWithIndexNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"two\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", -2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", -3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[bar]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"arr[3]\", -4);\n        testProcWithValidJSON(EMPTY_TABLE, client, \"IdFieldProc\", \"arr3d[3]\", -4);\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[0]\", \"-1\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][0]\", \"\\\"two\\\"\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][1][0]\", -2, 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"arr3d[1][1][1]\", -3, 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        testProcWithValidJSON(ONE_ROW_UPDATED, client, \"UpdateSetFieldProc\", \"arr[-1]\", \"-4\", 1);\n        testProcWithValidJSON(ONE_ROW_UPDATED, client, \"UpdateSetFieldProc\", \"arr3d[-1]\", \"-4\", 3);\n\n        // Test \\ escape for brackets in element name, not used for array index\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"\\\"[bar]\\\"\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", 0);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[0]\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][0]\", \"two\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][0]\", -2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"arr3d[1][1][1]\", -3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[bar]\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n        testProcWithValidJSON(new long[][]{{1}}, client, \"IdFieldProc\", \"arr[3]\", -4);\n        testProcWithValidJSON(new long[][]{{3}}, client, \"IdFieldProc\", \"arr3d[3]\", -4);\n    }","id":18903,"modified_method":"/** Used to test ENG-6620, part 3 (array index notation). */\n    public void testSET_FIELDFunctionWithIndexNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[0]\", 0);\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"arr3d[0]\", -1);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"arr3d[1][0]\", \"two\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"arr3d[1][1][0]\", -2);\n        testProcWithValidJSON(TABLE_ROW3,    client, \"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"arr3d[1][1][1]\", -3);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[bar]\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"arr[3]\", -4);\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"arr3d[3]\", -4);\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr3d[0]\", \"-1\", 1);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr3d[1][0]\", \"\\\"two\\\"\", 2);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr3d[1][1][0]\", -2, 2);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr3d[1][1][1]\", -3, 3);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr[-1]\", \"-4\", 1);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"arr3d[-1]\", \"-4\", 3);\n\n        // Test \\ escape for brackets in element name, not used for array index\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"\\\"[bar]\\\"\", 1);\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(TABLE_ROWS23, client, \"IdFieldProc\", \"arr3d[0]\", 0);\n        testProcWithValidJSON(TABLE_ROW1,   client, \"IdFieldProc\", \"arr3d[0]\", -1);\n        testProcWithValidJSON(TABLE_ROWS13, client, \"IdFieldProc\", \"arr3d[1][0]\", \"one\");\n        testProcWithValidJSON(TABLE_ROW2,   client, \"IdFieldProc\", \"arr3d[1][0]\", \"two\");\n        testProcWithValidJSON(TABLE_ROWS13, client, \"IdFieldProc\", \"arr3d[1][1][0]\", 2);\n        testProcWithValidJSON(TABLE_ROW2,   client, \"IdFieldProc\", \"arr3d[1][1][0]\", -2);\n        testProcWithValidJSON(EMPTY_TABLE,  client, \"IdFieldProc\", \"arr3d[1][1][1]\", 3);\n        testProcWithValidJSON(TABLE_ROW3,   client, \"IdFieldProc\", \"arr3d[1][1][1]\", -3);\n        testProcWithValidJSON(TABLE_ROWS23, client, \"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[foo]\");\n        testProcWithValidJSON(TABLE_ROW1,   client, \"IdFieldProc\", \"bracket]\\\\[\\\\[] \\\\[ ] chars\", \"[bar]\");\n        testProcWithValidJSON(TABLE_ROW1,   client, \"IdFieldProc\", \"arr[3]\", -4);\n        testProcWithValidJSON(TABLE_ROW3,   client, \"IdFieldProc\", \"arr3d[3]\", -4);\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"static public junit.framework.Test suite() {\n\n        VoltServerConfig config = null;\n        MultiConfigSuiteBuilder builder =\n            new MultiConfigSuiteBuilder(TestFunctionsForJSON.class);\n        boolean success;\n\n        VoltProjectBuilder project = new VoltProjectBuilder();\n        final String literalSchema =\n                \"CREATE TABLE JS1 (\\n\" +\n                \"  ID INTEGER NOT NULL, \\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n\n                \"CREATE PROCEDURE DocEqualsProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE DOC = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE ArrayLengthDocProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(DOC) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NumericFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IN (?, ?) ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE InnerFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, 'inner'), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullFieldDocProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(?, ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NotNullFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NOT NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NotNullField2Proc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, ?), ?) IS NOT NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE SmallArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) BETWEEN 0 AND ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE LargeArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) > ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                // TODO: uncomment this, once the SET_FIELD function is re-enabled\n/*\n                \"CREATE PROCEDURE UpdateSetFieldProc AS\\n\" +\n                \"   UPDATE JS1 SET DOC = SET_FIELD(DOC, ?, ?) WHERE ID = ?\\n\" +\n                \";\\n\" +\n*/\n                // Useful for debugging:\n                \"CREATE PROCEDURE GetDocFromId AS\\n\" +\n                \"   SELECT DOC FROM JS1 WHERE ID = ?\\n\" +\n                \";\\n\" +\n\n                \"CREATE TABLE JSBAD (\\n\" +\n                \"  ID INTEGER NOT NULL,\\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdFieldProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND FIELD(DOC, ?) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_ELEMENT(FIELD(DOC, ?), 1) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayLengthProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_LENGTH(FIELD(DOC, ?)) = ?\\n\" +\n                \";\\n\" +\n                \"\";\n        try {\n            project.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        // CONFIG #1: Local Site/Partition running on JNI backend\n        config = new LocalCluster(\"fixedsql-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        // CONFIG #2: Local Site/Partitions running on JNI backend\n        config = new LocalCluster(\"fixedsql-threesite.jar\", 3, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n/*\n\n        // CONFIG #2: HSQL -- disabled, the functions being tested are not HSQL compatible\n        config = new LocalCluster(\"fixedsql-hsql.jar\", 1, 1, 0, BackendTarget.HSQLDB_BACKEND);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n*/\n        // no clustering tests for functions\n\n        return builder;\n    }","id":18904,"modified_method":"static public junit.framework.Test suite() {\n\n        VoltServerConfig config = null;\n        MultiConfigSuiteBuilder builder =\n            new MultiConfigSuiteBuilder(TestFunctionsForJSON.class);\n        boolean success;\n\n        VoltProjectBuilder project = new VoltProjectBuilder();\n        final String literalSchema =\n                \"CREATE TABLE JS1 (\\n\" +\n                \"  ID INTEGER NOT NULL, \\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n\n                \"CREATE PROCEDURE DocEqualsProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE DOC = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE ArrayLengthDocProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(DOC) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NumericFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IN (?, ?) ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE InnerFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, 'inner'), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullFieldDocProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(?, ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NotNullFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NOT NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NotNullField2Proc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, ?), ?) IS NOT NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE SmallArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) BETWEEN 0 AND ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE LargeArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) > ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE UpdateSetFieldProc AS\\n\" +\n                \"   UPDATE JS1 SET DOC = SET_FIELD(DOC, ?, ?) WHERE ID = ?\\n\" +\n                \";\\n\" +\n\n                // Useful for debugging:\n                \"CREATE PROCEDURE GetDocFromId AS\\n\" +\n                \"   SELECT DOC FROM JS1 WHERE ID = ?\\n\" +\n                \";\\n\" +\n\n                \"CREATE TABLE JSBAD (\\n\" +\n                \"  ID INTEGER NOT NULL,\\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdFieldProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND FIELD(DOC, ?) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_ELEMENT(FIELD(DOC, ?), 1) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayLengthProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_LENGTH(FIELD(DOC, ?)) = ?\\n\" +\n                \";\\n\" +\n                \"\";\n        try {\n            project.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        // CONFIG #1: Local Site/Partition running on JNI backend\n        config = new LocalCluster(\"fixedsql-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        // CONFIG #2: Local Site/Partitions running on JNI backend\n        config = new LocalCluster(\"fixedsql-threesite.jar\", 3, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n/*\n\n        // CONFIG #2: HSQL -- disabled, the functions being tested are not HSQL compatible\n        config = new LocalCluster(\"fixedsql-hsql.jar\", 1, 1, 0, BackendTarget.HSQLDB_BACKEND);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n*/\n        // no clustering tests for functions\n\n        return builder;\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Used to test ENG-6621, part 2 (dotted path notation). */\n    public void no_testSET_FIELDFunctionWithDotNotation() throws Exception {\n        ClientResponse cr;\n        VoltTable result;\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.veggies\", \"good for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.veggies\", \"bad for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.fruits\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.fruits\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.meats\", \"yum\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.meats\", \"yuck\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n        cr = client.callProcedure(\"IdFieldProc\", \"dot\\\\.char\", \"foo.bar\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"dot\\\\.char\", \"bar.foo\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{});\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"inner.veggies\", \"\\\"bad for you\\\"\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"inner.second.fruits\", -1, 2);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"inner.second.third.meats\", \"\\\"yuck\\\"\", 3);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        // Test \\ escape for dot in element name, not used for sub-path\n        cr = client.callProcedure(\"UpdateSetFieldProc\", \"dot\\\\.char\", \"\\\"bar.foo\\\"\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateRowOfLongs(result, new long[]{1});\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.veggies\", \"good for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.veggies\", \"bad for you\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.fruits\", 1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.fruits\", -1);\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.meats\", \"yum\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1},{2}});\n        cr = client.callProcedure(\"IdFieldProc\", \"inner.second.third.meats\", \"yuck\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"dot\\\\.char\", \"foo.bar\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{2},{3}});\n        cr = client.callProcedure(\"IdFieldProc\", \"dot\\\\.char\", \"bar.foo\");\n        assertEquals(ClientResponse.SUCCESS, cr.getStatus());\n        result = cr.getResults()[0];\n        validateTableOfLongs(result, new long[][]{{1}});\n    }","id":18905,"modified_method":"/** Used to test ENG-6621, part 2 (dotted path notation). */\n    public void testSET_FIELDFunctionWithDotNotation() throws Exception {\n        Client client = getClient();\n        loadJS1(client);\n\n        // Confirm expected results before calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"inner.veggies\", \"good for you\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"inner.veggies\", \"bad for you\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"inner.second.fruits\", 1);\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"inner.second.fruits\", -1);\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"inner.second.third.meats\", \"yum\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"inner.second.third.meats\", \"yuck\");\n        testProcWithValidJSON(TABLE_ROWS123, client, \"IdFieldProc\", \"dot\\\\.char\", \"foo.bar\");\n        testProcWithValidJSON(EMPTY_TABLE,   client, \"IdFieldProc\", \"dot\\\\.char\", \"bar.foo\");\n\n        // Call the \"UpdateSetFieldProc\" Stored Proc (several times), to test the SET_FIELD function\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"inner.veggies\", \"\\\"bad for you\\\"\", 1);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"inner.second.fruits\", -1, 2);\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"inner.second.third.meats\", \"\\\"yuck\\\"\", 3);\n\n        // Test \\ escape for dot in element name, not used for sub-path\n        testProcWithValidJSON(UPDATED_1ROW, client, \"UpdateSetFieldProc\", \"dot\\\\.char\", \"\\\"bar.foo\\\"\", 1);\n\n        // Confirm modified results after calling the \"UpdateSetFieldProc\" Stored Proc\n        testProcWithValidJSON(TABLE_ROWS23, client, \"IdFieldProc\", \"inner.veggies\", \"good for you\");\n        testProcWithValidJSON(TABLE_ROW1,   client, \"IdFieldProc\", \"inner.veggies\", \"bad for you\");\n        testProcWithValidJSON(TABLE_ROWS13, client, \"IdFieldProc\", \"inner.second.fruits\", 1);\n        testProcWithValidJSON(TABLE_ROW2,   client, \"IdFieldProc\", \"inner.second.fruits\", -1);\n        testProcWithValidJSON(TABLE_ROWS12, client, \"IdFieldProc\", \"inner.second.third.meats\", \"yum\");\n        testProcWithValidJSON(TABLE_ROW3,   client, \"IdFieldProc\", \"inner.second.third.meats\", \"yuck\");\n        testProcWithValidJSON(TABLE_ROWS23, client, \"IdFieldProc\", \"dot\\\\.char\", \"foo.bar\");\n        testProcWithValidJSON(TABLE_ROW1,   client, \"IdFieldProc\", \"dot\\\\.char\", \"bar.foo\");\n    }","commit_id":"ee749d7e4e60f2a10c7d0600473dd09e9b7ac13f","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public ChooseByNameModel createChooserModel(final IChooserSettings<IModule> settings, final RefactoringContext context, final String paramName) {\n      DataContext dataContext = DataManager.getInstance().getDataContext();\n      final Project project = MPSDataKeys.PROJECT.getData(dataContext);\n\n      return new BaseModuleModel(project, \"module\") {\n        public NavigationItem doGetNavigationItem(final IModule module) {\n          return new BaseModuleItem(module) {\n            public void navigate(boolean requestFocus) {\n              context.setParameter(paramName, module);\n            }\n          };\n        }\n\n        public IModule[] find(boolean checkboxState) {\n          List<IModule> modules = MPSModuleRepository.getInstance().getAllModules();\n          List<IModule> filteredModules = filter(settings, modules);\n          return filteredModules.toArray(new IModule[filteredModules.size()]);\n        }\n\n        public IModule[] find(IScope scope) {\n          throw new UnsupportedOperationException(\"must not be used\");\n        }\n\n        public boolean loadInitialCheckBoxState() {\n          return false;\n        }\n\n        public String getPromptText() {\n          return settings.getTitle();\n        }\n      };\n    }","id":18906,"modified_method":"public ChooseByNameModel createChooserModel(final IChooserSettings<IModule> settings, final RefactoringContext context, final String paramName) {\n      DataContext dataContext = DataManager.getInstance().getDataContext();\n      final Project project = MPSDataKeys.PROJECT.getData(dataContext);\n\n      return new BaseModuleModel(project, \"module\") {\n        public NavigationItem doGetNavigationItem(final ModuleReference module) {\n          return new BaseModuleItem(module) {\n            public void navigate(boolean requestFocus) {\n              context.setParameter(paramName, MPSModuleRepository.getInstance().getModule(module));\n            }\n          };\n        }\n\n        public ModuleReference[] find(boolean checkboxState) {\n          List<IModule> modules = MPSModuleRepository.getInstance().getAllModules();\n          List<ModuleReference> filteredModules = new ArrayList<ModuleReference>();\n          for (IModule module : filter(settings, modules)){\n            filteredModules.add(module.getModuleReference());\n          }\n          return filteredModules.toArray(new ModuleReference[filteredModules.size()]);\n        }\n\n        public ModuleReference[] find(IScope scope) {\n          throw new UnsupportedOperationException(\"must not be used\");\n        }\n\n        public boolean loadInitialCheckBoxState() {\n          return false;\n        }\n\n        public String getPromptText() {\n          return settings.getTitle();\n        }\n      };\n    }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<ModuleReference> compute() {\n    List<DevKit> devkits = ModelAccess.instance().runReadAction(new Computable<List<DevKit>>() {\n      public List<DevKit> compute() {\n        return GlobalScope.getInstance().getVisibleDevkits();\n      }\n    });\n    List<DevKit> devKit = CommonChoosers.showDialogModuleCollectionChooser(myOwner.getMainComponent(), \"devkit\", devkits, null);\n    if (devKit == null) {\n      return null;\n    }\n    List<ModuleReference> references = new ArrayList<ModuleReference>();\n    for (DevKit dk : devKit) {\n      references.add(dk.getModuleReference());\n    }\n    return references;\n  }","id":18907,"modified_method":"public List<ModuleReference> compute() {\n    final Wrappers._T<List<ModuleReference>> dkRefs = new Wrappers._T<List<ModuleReference>>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        List<DevKit> devkits = GlobalScope.getInstance().getVisibleDevkits();\n        dkRefs.value = ListSequence.fromList(devkits).select(new ISelector<DevKit, ModuleReference>() {\n          public ModuleReference select(DevKit it) {\n            return it.getModuleReference();\n          }\n        }).toListSequence();\n      }\n    });\n    return CommonChoosers.showDialogModuleCollectionChooser(myOwner.getMainComponent(), \"devkit\", dkRefs.value, null);\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<ModuleReference> compute() {\n    List<Generator> generators = ModelAccess.instance().runReadAction(new Computable<List<Generator>>() {\n      public List<Generator> compute() {\n        return MPSModuleRepository.getInstance().getAllGenerators();\n      }\n    });\n    List<Generator> generator = CommonChoosers.showDialogModuleCollectionChooser(myOwner.getMainComponent(), \"generator\", generators, null);\n    if (generator == null) {\n      return null;\n    }\n    List<ModuleReference> references = new ArrayList<ModuleReference>();\n    for (Generator g : generator) {\n      references.add(g.getModuleReference());\n    }\n    return references;\n  }","id":18908,"modified_method":"public List<ModuleReference> compute() {\n    final Wrappers._T<List<ModuleReference>> genRefs = new Wrappers._T<List<ModuleReference>>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        List<Generator> generators = MPSModuleRepository.getInstance().getAllGenerators();\n        genRefs.value = ListSequence.fromList(generators).select(new ISelector<Generator, ModuleReference>() {\n          public ModuleReference select(Generator it) {\n            return it.getModuleReference();\n          }\n        }).toListSequence();\n      }\n    });\n    return CommonChoosers.showDialogModuleCollectionChooser(myOwner.getMainComponent(), \"generator\", genRefs.value, null);\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doExecute(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    assert project != null;\n\n    //FeatureUsageTracker.getInstance().triggerFeatureUsed(\"navigation.popup.class\");\n    //PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    BaseDevkitModel goToDevkitModel = new BaseDevkitModel(project) {\n      public NavigationItem doGetNavigationItem(final IModule module) {\n        return new BaseModuleItem(module) {\n          public void navigate(boolean requestFocus) {\n            ProjectPane projectPane = ProjectPane.getInstance(project);\n            projectPane.selectModule(module, true);\n          }\n        };\n      }\n\n      public DevKit[] find(IScope scope) {\n        Collection<DevKit> res = IterableUtil.asCollection(scope.getVisibleDevkits());\n        return res.toArray(new DevKit[res.size()]);\n      }\n    };\n    ChooseByNamePopup popup = ChooseByNamePopup.createPopup(project, goToDevkitModel, DefaultMatcherFactory.createAllMatcher(goToDevkitModel));\n\n    popup.invoke(new ChooseByNamePopupComponent.Callback() {\n      public void onClose() {\n        //if (GoToRootNodeAction.class.equals(myInAction)) myInAction = null;\n      }\n\n      public void elementChosen(Object element) {\n        ((NavigationItem) element).navigate(true);\n      }\n    }, ModalityState.current(), true);\n  }","id":18909,"modified_method":"public void doExecute(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    assert project != null;\n\n    //FeatureUsageTracker.getInstance().triggerFeatureUsed(\"navigation.popup.class\");\n    //PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    BaseDevkitModel goToDevkitModel = new BaseDevkitModel(project) {\n      public NavigationItem doGetNavigationItem(final ModuleReference ref) {\n        return new BaseModuleItem(ref) {\n          public void navigate(boolean requestFocus) {\n            ProjectPane projectPane = ProjectPane.getInstance(project);\n            IModule module = MPSModuleRepository.getInstance().getModule(ref);\n            if (module == null) return;\n            projectPane.selectModule(module, true);\n          }\n        };\n      }\n\n      public ModuleReference[] find(IScope scope) {\n        List<ModuleReference> result = new ArrayList<ModuleReference>();\n        for (DevKit dk : scope.getVisibleDevkits()) {\n          result.add(dk.getModuleReference());\n        }\n        return result.toArray(new ModuleReference[result.size()]);\n      }\n    };\n    ChooseByNamePopup popup = ChooseByNamePopup.createPopup(project, goToDevkitModel, DefaultMatcherFactory.createAllMatcher(goToDevkitModel));\n\n    popup.invoke(new ChooseByNamePopupComponent.Callback() {\n      public void onClose() {\n        //if (GoToRootNodeAction.class.equals(myInAction)) myInAction = null;\n      }\n\n      public void elementChosen(Object element) {\n        ((NavigationItem) element).navigate(true);\n      }\n    }, ModalityState.current(), true);\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doExecute(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    assert project != null;\n\n    //FeatureUsageTracker.getInstance().triggerFeatureUsed(\"navigation.popup.class\");\n    //PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    BaseLanguageModel goToLanguageModel = new BaseLanguageModel(project) {\n      public NavigationItem doGetNavigationItem(final IModule module) {\n        return new BaseModuleItem(module) {\n          public void navigate(boolean requestFocus) {\n            ProjectPane projectPane = ProjectPane.getInstance(project);\n            projectPane.selectModule(module, true);\n          }\n        };\n      }\n\n      public Language[] find(IScope scope) {\n        Collection<Language> res = IterableUtil.asCollection(scope.getVisibleLanguages());\n        return res.toArray(new Language[res.size()]);\n      }\n\n      public String getPromptText() {\n        return \"Go to language:\";\n      }\n    };\n    ChooseByNamePopup popup = ChooseByNamePopup.createPopup(project, goToLanguageModel, DefaultMatcherFactory.createAllMatcher(goToLanguageModel));\n\n    popup.invoke(new ChooseByNamePopupComponent.Callback() {\n      public void onClose() {\n        //if (GoToRootNodeAction.class.equals(myInAction)) myInAction = null;\n      }\n\n      public void elementChosen(Object element) {\n        ((NavigationItem) element).navigate(true);\n      }\n    }, ModalityState.current(), true);\n  }","id":18910,"modified_method":"public void doExecute(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    assert project != null;\n\n    //FeatureUsageTracker.getInstance().triggerFeatureUsed(\"navigation.popup.class\");\n    //PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    BaseLanguageModel goToLanguageModel = new BaseLanguageModel(project) {\n      public NavigationItem doGetNavigationItem(final ModuleReference ref) {\n        return new BaseModuleItem(ref) {\n          public void navigate(boolean requestFocus) {\n            ProjectPane projectPane = ProjectPane.getInstance(project);\n            IModule module = MPSModuleRepository.getInstance().getModule(ref);\n            projectPane.selectModule(module, true);\n          }\n        };\n      }\n\n      public ModuleReference[] find(IScope scope) {\n        List<ModuleReference> result = new ArrayList<ModuleReference>();\n        for (Language l : scope.getVisibleLanguages()) {\n          result.add(l.getModuleReference());\n        }\n        return result.toArray(new ModuleReference[result.size()]);\n      }\n\n      public String getPromptText() {\n        return \"Go to language:\";\n      }\n    };\n    ChooseByNamePopup popup = ChooseByNamePopup.createPopup(project, goToLanguageModel, DefaultMatcherFactory.createAllMatcher(goToLanguageModel));\n\n    popup.invoke(new ChooseByNamePopupComponent.Callback() {\n      public void onClose() {\n        //if (GoToRootNodeAction.class.equals(myInAction)) myInAction = null;\n      }\n\n      public void elementChosen(Object element) {\n        ((NavigationItem) element).navigate(true);\n      }\n    }, ModalityState.current(), true);\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doExecute(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    assert project != null;\n\n    //FeatureUsageTracker.getInstance().triggerFeatureUsed(\"navigation.popup.class\");\n    //PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    BaseSolutionModel goToSolutionModel = new BaseSolutionModel(project) {\n      public NavigationItem doGetNavigationItem(final IModule module) {\n        return new BaseModuleItem(module) {\n          public void navigate(boolean requestFocus) {\n            ProjectPane projectPane = ProjectPane.getInstance(project);\n            projectPane.selectModule(module, true);\n          }\n        };\n      }\n\n      public Solution[] find(IScope scope) {\n        List<Solution> solutions = new ArrayList<Solution>();\n        for (IModule module : scope.getVisibleModules()) {\n          if (module instanceof Solution) {\n            solutions.add((Solution) module);\n          }\n        }\n        return solutions.toArray(new Solution[0]);\n      }\n    };\n    ChooseByNamePopup popup = ChooseByNamePopup.createPopup(project, goToSolutionModel, DefaultMatcherFactory.createAllMatcher(goToSolutionModel));\n\n    popup.invoke(new ChooseByNamePopupComponent.Callback() {\n      public void onClose() {\n        //if (GoToRootNodeAction.class.equals(myInAction)) myInAction = null;\n      }\n\n      public void elementChosen(Object element) {\n        ((NavigationItem) element).navigate(true);\n      }\n    }, ModalityState.current(), true);\n  }","id":18911,"modified_method":"public void doExecute(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    assert project != null;\n\n    //FeatureUsageTracker.getInstance().triggerFeatureUsed(\"navigation.popup.class\");\n    //PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    BaseSolutionModel goToSolutionModel = new BaseSolutionModel(project) {\n      public NavigationItem doGetNavigationItem(final ModuleReference ref) {\n        return new BaseModuleItem(ref) {\n          public void navigate(boolean requestFocus) {\n            ProjectPane projectPane = ProjectPane.getInstance(project);\n            IModule module = MPSModuleRepository.getInstance().getModule(ref);\n            projectPane.selectModule(module, true);\n          }\n        };\n      }\n\n      public ModuleReference[] find(IScope scope) {\n        List<ModuleReference> solutions = new ArrayList<ModuleReference>();\n        for (IModule module : scope.getVisibleModules()) {\n          if (!(module instanceof Solution)) continue;\n          solutions.add(module.getModuleReference());\n        }\n        return solutions.toArray(new ModuleReference[solutions.size()]);\n      }\n    };\n    ChooseByNamePopup popup = ChooseByNamePopup.createPopup(project, goToSolutionModel, DefaultMatcherFactory.createAllMatcher(goToSolutionModel));\n\n    popup.invoke(new ChooseByNamePopupComponent.Callback() {\n      public void onClose() {\n        //if (GoToRootNodeAction.class.equals(myInAction)) myInAction = null;\n      }\n\n      public void elementChosen(Object element) {\n        ((NavigationItem) element).navigate(true);\n      }\n    }, ModalityState.current(), true);\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<ModuleReference> compute() {\n    List<Language> languages = ModelAccess.instance().runReadAction(new Computable<List<Language>>() {\n      public List<Language> compute() {\n        return GlobalScope.getInstance().getVisibleLanguages();\n      }\n    });\n    List<Language> language = CommonChoosers.showDialogModuleCollectionChooser(myOwner.getMainComponent(), \"language\", languages, null);\n    if (language == null) {\n      return null;\n    }\n    List<ModuleReference> references = new ArrayList<ModuleReference>();\n    for (Language l : language) {\n      references.add(l.getModuleReference());\n    }\n    return references;\n  }","id":18912,"modified_method":"public List<ModuleReference> compute() {\n    final Wrappers._T<List<ModuleReference>> langRefs = new Wrappers._T<List<ModuleReference>>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        List<Language> langs = GlobalScope.getInstance().getVisibleLanguages();\n        langRefs.value = ListSequence.fromList(langs).select(new ISelector<Language, ModuleReference>() {\n          public ModuleReference select(Language it) {\n            return it.getModuleReference();\n          }\n        }).toListSequence();\n      }\n    });\n    return CommonChoosers.showDialogModuleCollectionChooser(myOwner.getMainComponent(), \"language\", langRefs.value, null);\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void collectModules() {\n    ListSequence.fromList(this.myCheckedModules).clear();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        List<SNode> nodes = ListSequence.fromListWithValues(new ArrayList<SNode>(), FindUsagesManager.getInstance().findInstances(((AbstractConceptDeclaration) SNodeOperations.getAdapter(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\"))), GlobalScope.getInstance(), new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator()), false));\n        for (SNode node : nodes) {\n          SModel model = SNodeOperations.getModel(node);\n          SModelDescriptor md = model.getModelDescriptor();\n          IModule module = md.getModule();\n          if (ListSequence.fromList(ModuleChooserComponent.this.myCheckedModules).contains(module)) {\n            continue;\n          }\n          ListSequence.fromList(ModuleChooserComponent.this.myCheckedModules).addElement(module);\n        }\n      }\n    });\n  }","id":18913,"modified_method":"private void collectModules() {\n    ListSequence.fromList(this.myCheckedModules).clear();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        List<SNode> nodes = ListSequence.fromListWithValues(new ArrayList<SNode>(), FindUsagesManager.getInstance().findInstances(((AbstractConceptDeclaration) SNodeOperations.getAdapter(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase\"))), GlobalScope.getInstance(), new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator()), false));\n        for (SNode node : nodes) {\n          SModel model = SNodeOperations.getModel(node);\n          SModelDescriptor md = model.getModelDescriptor();\n          ModuleReference module = md.getModule().getModuleReference();\n          if (ListSequence.fromList(ModuleChooserComponent.this.myCheckedModules).contains(module)) {\n            continue;\n          }\n          ListSequence.fromList(ModuleChooserComponent.this.myCheckedModules).addElement(module);\n        }\n      }\n    });\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ModuleChooserComponent() {\n    super();\n    this.init(new ActionListener() {\n      public void actionPerformed(ActionEvent p0) {\n        ModuleChooserComponent.this.collectModules();\n        StringBuilder result = new StringBuilder();\n        IModule module = CommonChoosers.showDialogModuleChooser(ModuleChooserComponent.this, \"\", ModuleChooserComponent.this.myCheckedModules, Collections.EMPTY_LIST);\n        if (module != null) {\n          result.append(module.getModuleFqName());\n          ModuleChooserComponent.this.setText(result.toString());\n        }\n      }\n    });\n  }","id":18914,"modified_method":"public ModuleChooserComponent() {\n    super();\n    this.init(new ActionListener() {\n      public void actionPerformed(ActionEvent p0) {\n        ModuleChooserComponent.this.collectModules();\n        StringBuilder result = new StringBuilder();\n        ModuleReference ref = CommonChoosers.showDialogModuleChooser(ModuleChooserComponent.this, \"\", ModuleChooserComponent.this.myCheckedModules, Collections.EMPTY_LIST);\n        if (ref != null) {\n          result.append(ref.getModuleFqName());\n          ModuleChooserComponent.this.setText(result.toString());\n        }\n      }\n    });\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      final List<IModule> modules = ListSequence.fromList(new ArrayList<IModule>());\n      ModelAccess.instance().runReadAction(new Runnable() {\n        public void run() {\n          ListSequence.fromList(modules).addSequence(ListSequence.fromList(MPSModuleRepository.getInstance().getAllModules()));\n        }\n      });\n      BaseModuleModel baseSolutionModel = new BaseModuleModel(NewRuntimeModule_Action.this.project, \"runtime module\") {\n        public IModule[] find(IScope p0) {\n          return ListSequence.fromList(modules).toGenericArray(IModule.class);\n        }\n\n        public NavigationItem doGetNavigationItem(final IModule module) {\n          return new BaseModuleItem(module) {\n            public void navigate(boolean p0) {\n              if (module == null) {\n                return;\n              }\n              Language language = (Language) NewRuntimeModule_Action.this.contextModule;\n              Dependency dependency = new Dependency();\n              dependency.setModuleRef(module.getModuleReference());\n              language.getModuleDescriptor().getRuntimeModules().add(dependency);\n              language.save();\n              ((MPSTreeNode) NewRuntimeModule_Action.this.treeNode).getTree().rebuildLater();\n            }\n          };\n        }\n      };\n      ChooseByNamePopup popup = ChooseByNamePopup.createPopup(NewRuntimeModule_Action.this.project, baseSolutionModel, new FakePsiContext());\n      popup.invoke(new ChooseByNamePopupComponent.Callback() {\n        public void elementChosen(Object p0) {\n          ((NavigationItem) p0).navigate(true);\n        }\n      }, ModalityState.current(), true);\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"NewRuntimeModule\", t);\n      }\n    }\n  }","id":18915,"modified_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      final List<IModule> modules = ListSequence.fromList(new ArrayList<IModule>());\n      ModelAccess.instance().runReadAction(new Runnable() {\n        public void run() {\n          ListSequence.fromList(modules).addSequence(ListSequence.fromList(MPSModuleRepository.getInstance().getAllModules()));\n        }\n      });\n      BaseModuleModel baseSolutionModel = new BaseModuleModel(NewRuntimeModule_Action.this.project, \"runtime module\") {\n        public ModuleReference[] find(IScope p0) {\n          return ListSequence.fromList(modules).select(new ISelector<IModule, ModuleReference>() {\n            public ModuleReference select(IModule it) {\n              return it.getModuleReference();\n            }\n          }).toGenericArray(ModuleReference.class);\n        }\n\n        public NavigationItem doGetNavigationItem(final ModuleReference module) {\n          return new BaseModuleItem(module) {\n            public void navigate(boolean p0) {\n              if (module == null) {\n                return;\n              }\n              Language language = (Language) NewRuntimeModule_Action.this.contextModule;\n              Dependency dependency = new Dependency();\n              dependency.setModuleRef(module);\n              language.getModuleDescriptor().getRuntimeModules().add(dependency);\n              language.save();\n              ((MPSTreeNode) NewRuntimeModule_Action.this.treeNode).getTree().rebuildLater();\n            }\n          };\n        }\n      };\n      ChooseByNamePopup popup = ChooseByNamePopup.createPopup(NewRuntimeModule_Action.this.project, baseSolutionModel, new FakePsiContext());\n      popup.invoke(new ChooseByNamePopupComponent.Callback() {\n        public void elementChosen(Object p0) {\n          ((NavigationItem) p0).navigate(true);\n        }\n      }, ModalityState.current(), true);\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"NewRuntimeModule\", t);\n      }\n    }\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<ModuleReference> compute() {\n    List<Solution> solutions = ModelAccess.instance().runReadAction(new Computable<List<Solution>>() {\n      public List<Solution> compute() {\n        return MPSModuleRepository.getInstance().getAllSolutions();\n      }\n    });\n    List<Solution> solution = CommonChoosers.showDialogModuleCollectionChooser(myOwner.getMainComponent(), \"solution\", solutions, null);\n    if (solution == null) {\n      return null;\n    }\n    List<ModuleReference> references = new ArrayList<ModuleReference>();\n    for (Solution s : solution) {\n      references.add(s.getModuleReference());\n    }\n    return references;\n  }","id":18916,"modified_method":"public List<ModuleReference> compute() {\n    final Wrappers._T<List<ModuleReference>> solRefs = new Wrappers._T<List<ModuleReference>>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        List<Solution> solutions = MPSModuleRepository.getInstance().getAllSolutions();\n        solRefs.value = ListSequence.fromList(solutions).select(new ISelector<Solution, ModuleReference>() {\n          public ModuleReference select(Solution it) {\n            return it.getModuleReference();\n          }\n        }).toListSequence();\n      }\n    });\n    return CommonChoosers.showDialogModuleCollectionChooser(myOwner.getMainComponent(), \"solution\", solRefs.value, null);\n  }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ModulePanel(Project project) {\n      myProject = project;\n      setLayout(new BorderLayout());\n      myModuleUID = new JTextField();\n      JButton button = new JButton(new AbstractAction(\"Select\") {\n        public void actionPerformed(ActionEvent e) {\n          List<IModule> modules = ModelAccess.instance().runReadAction(new Computable<List<IModule>>() {\n            public List<IModule> compute() {\n              return MPSModuleRepository.getInstance().getAllModules();\n            }\n          });\n          IModule module = CommonChoosers.showDialogModuleChooser(ModulePanel.this, TestConfigurationDialog.MODULE, myProject.getComponent(MPSProject.class).getModules(), modules);\n          if (module == null) {\n            return;\n          }\n          String moduleName = module.getModuleFqName();\n          myModuleUID.setText(moduleName);\n          if (!(myNamePanel.isConfigNameSet())) {\n            myNamePanel.setConfigName(NameUtil.shortNameFromLongName(moduleName));\n          }\n        }\n      });\n      JPanel panel = new JPanel(new BorderLayout());\n      panel.add(myModuleUID, BorderLayout.CENTER);\n      panel.add(button, BorderLayout.EAST);\n      add(panel, BorderLayout.NORTH);\n    }","id":18917,"modified_method":"public ModulePanel(Project project) {\n      myProject = project;\n      setLayout(new BorderLayout());\n      myModuleUID = new JTextField();\n      JButton button = new JButton(new AbstractAction(\"Select\") {\n        public void actionPerformed(ActionEvent e) {\n          final Wrappers._T<List<IModule>> modules = new Wrappers._T<List<IModule>>();\n          final Wrappers._T<List<IModule>> projectModules = new Wrappers._T<List<IModule>>();\n          ModelAccess.instance().runReadAction(new Runnable() {\n            public void run() {\n              modules.value = MPSModuleRepository.getInstance().getAllModules();\n              projectModules.value = myProject.getComponent(MPSProject.class).getModules();\n            }\n          });\n          List<ModuleReference> projectModuleRefs = ListSequence.fromList(projectModules.value).select(new ISelector<IModule, ModuleReference>() {\n            public ModuleReference select(IModule it) {\n              return it.getModuleReference();\n            }\n          }).toListSequence();\n          List<ModuleReference> moduleRefs = ListSequence.fromList(modules.value).select(new ISelector<IModule, ModuleReference>() {\n            public ModuleReference select(IModule it) {\n              return it.getModuleReference();\n            }\n          }).toListSequence();\n\n          ModuleReference module = CommonChoosers.showDialogModuleChooser(ModulePanel.this, TestConfigurationDialog.MODULE, projectModuleRefs, moduleRefs);\n          if (module == null) {\n            return;\n          }\n          String moduleName = module.getModuleFqName();\n          myModuleUID.setText(moduleName);\n          if (!(myNamePanel.isConfigNameSet())) {\n            myNamePanel.setConfigName(NameUtil.shortNameFromLongName(moduleName));\n          }\n        }\n      });\n      JPanel panel = new JPanel(new BorderLayout());\n      panel.add(myModuleUID, BorderLayout.CENTER);\n      panel.add(button, BorderLayout.EAST);\n      add(panel, BorderLayout.NORTH);\n    }","commit_id":"2a816ef5a81e7830fec8b8f20e710ecca5d4d2b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SchedulerImpl getScheduler() {\n            return m_scheduler;\n        }","id":18918,"modified_method":"public Scheduler getScheduler() {\n            return m_scheduler;\n        }","commit_id":"9df573011408bd37da428be882e45bd4d17eb007","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setScheduler(SchedulerImpl scheduler) {\n            m_scheduler = scheduler;\n        }","id":18919,"modified_method":"public void setScheduler(Scheduler scheduler) {\n            m_scheduler = scheduler;\n        }","commit_id":"9df573011408bd37da428be882e45bd4d17eb007","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setImportSchedule(String cronExpression) {\n        // TODO Auto-generated method stub\n        \n    }","id":18920,"modified_method":"public void setImportSchedule(String schedule) {\n        // TODO Auto-generated method stub\n        \n    }","commit_id":"9df573011408bd37da428be882e45bd4d17eb007","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Long getNextScheduledInterval() {\n            return m_scheduler.getSchedule();\n        }","id":18921,"modified_method":"public Long getNextScheduledInterval() {\n            return m_scheduler.getScheduleInterval();\n        }","commit_id":"9df573011408bd37da428be882e45bd4d17eb007","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testSchedulerOutput() {\n       SchedulerImpl schedule = new SchedulerImpl(\"1s\");\n       \n       Long interval = schedule.getSchedule();\n       assertNotNull(interval);\n    }","id":18922,"modified_method":"@Test\n    public void testSchedulerOutput() {\n       SchedulerImpl schedule = new SchedulerImpl(\"1d\");\n       \n       Long interval = schedule.getScheduleInterval();\n       System.out.println(\"interval: \" + interval);\n       assertNotNull(interval);\n    }","commit_id":"9df573011408bd37da428be882e45bd4d17eb007","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Long getSchedule() {\n        return m_fmt.parsePeriod(m_schedule).normalizedStandard().toStandardDuration().getMillis();\n    }","id":18923,"modified_method":"public Long getScheduleInterval() {\n        return m_fmt.parsePeriod(m_schedule).normalizedStandard().toStandardDuration().getMillis();\n    }","commit_id":"9df573011408bd37da428be882e45bd4d17eb007","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SchedulerImpl(String schedule) {\n        m_schedule = schedule;\n        \n        m_fmt = new PeriodFormatterBuilder()\n        .appendYears().appendSuffix(\"y\").appendSeparator(\" \")\n        .appendMonths().appendSuffix(\"M\").appendSeparator(\" \")\n        .appendDays().appendSuffix(\"d\").appendSeparator(\" \")\n        .appendHours().appendSuffix(\"h\").appendSeparator(\" \")\n        .appendMinutes().appendSuffix(\"m\").appendSeparator(\" \")\n        .appendSeconds().appendSuffix(\"s\").appendSeparator(\" \")\n        .appendMillis().appendSuffix(\"ms\")\n        .toFormatter();\n    }","id":18924,"modified_method":"public SchedulerImpl(String schedule) {\n        m_schedule = schedule;\n        \n        m_fmt = new PeriodFormatterBuilder()\n        .appendDays().appendSuffix(\"d\").appendSeparator(\" \")\n        .appendHours().appendSuffix(\"h\").appendSeparator(\" \")\n        .appendMinutes().appendSuffix(\"m\").appendSeparator(\" \")\n        .appendSeconds().appendSuffix(\"s\").appendSeparator(\" \")\n        .appendMillis().appendSuffix(\"ms\")\n        .toFormatter();\n    }","commit_id":"9df573011408bd37da428be882e45bd4d17eb007","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setImportSchedule(String cronExpression) {\n        // TODO Auto-generated method stub\n        \n    }","id":18925,"modified_method":"public void setImportSchedule(String schedule) {\n        // TODO Auto-generated method stub\n        \n    }","commit_id":"6e5a464fc4461088560cf41edd708c724b8591c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Long getNextScheduledInterval() {\n            return m_scheduler.getSchedule();\n        }","id":18926,"modified_method":"public Long getNextScheduledInterval() {\n            return m_scheduler.getScheduleInterval();\n        }","commit_id":"6e5a464fc4461088560cf41edd708c724b8591c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setScheduler(SchedulerImpl scheduler) {\n            m_scheduler = scheduler;\n        }","id":18927,"modified_method":"public void setScheduler(Scheduler scheduler) {\n            m_scheduler = scheduler;\n        }","commit_id":"6e5a464fc4461088560cf41edd708c724b8591c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SchedulerImpl getScheduler() {\n            return m_scheduler;\n        }","id":18928,"modified_method":"public Scheduler getScheduler() {\n            return m_scheduler;\n        }","commit_id":"6e5a464fc4461088560cf41edd708c724b8591c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testSchedulerOutput() {\n       SchedulerImpl schedule = new SchedulerImpl(\"1s\");\n       \n       Long interval = schedule.getSchedule();\n       assertNotNull(interval);\n    }","id":18929,"modified_method":"@Test\n    public void testSchedulerOutput() {\n       SchedulerImpl schedule = new SchedulerImpl(\"1d\");\n       \n       Long interval = schedule.getScheduleInterval();\n       System.out.println(\"interval: \" + interval);\n       assertNotNull(interval);\n    }","commit_id":"6e5a464fc4461088560cf41edd708c724b8591c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SchedulerImpl(String schedule) {\n        m_schedule = schedule;\n        \n        m_fmt = new PeriodFormatterBuilder()\n        .appendYears().appendSuffix(\"y\").appendSeparator(\" \")\n        .appendMonths().appendSuffix(\"M\").appendSeparator(\" \")\n        .appendDays().appendSuffix(\"d\").appendSeparator(\" \")\n        .appendHours().appendSuffix(\"h\").appendSeparator(\" \")\n        .appendMinutes().appendSuffix(\"m\").appendSeparator(\" \")\n        .appendSeconds().appendSuffix(\"s\").appendSeparator(\" \")\n        .appendMillis().appendSuffix(\"ms\")\n        .toFormatter();\n    }","id":18930,"modified_method":"public SchedulerImpl(String schedule) {\n        m_schedule = schedule;\n        \n        m_fmt = new PeriodFormatterBuilder()\n        .appendDays().appendSuffix(\"d\").appendSeparator(\" \")\n        .appendHours().appendSuffix(\"h\").appendSeparator(\" \")\n        .appendMinutes().appendSuffix(\"m\").appendSeparator(\" \")\n        .appendSeconds().appendSuffix(\"s\").appendSeparator(\" \")\n        .appendMillis().appendSuffix(\"ms\")\n        .toFormatter();\n    }","commit_id":"6e5a464fc4461088560cf41edd708c724b8591c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Long getSchedule() {\n        return m_fmt.parsePeriod(m_schedule).normalizedStandard().toStandardDuration().getMillis();\n    }","id":18931,"modified_method":"public Long getScheduleInterval() {\n        return m_fmt.parsePeriod(m_schedule).normalizedStandard().toStandardDuration().getMillis();\n    }","commit_id":"6e5a464fc4461088560cf41edd708c724b8591c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setImportSchedule(String cronExpression) {\n        // TODO Auto-generated method stub\n        \n    }","id":18932,"modified_method":"public void setImportSchedule(String schedule) {\n        // TODO Auto-generated method stub\n        \n    }","commit_id":"7547f631328aba2e017df9c4caa01798c59be2a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Long getNextScheduledInterval() {\n            return m_scheduler.getSchedule();\n        }","id":18933,"modified_method":"public Long getNextScheduledInterval() {\n            return m_scheduler.getScheduleInterval();\n        }","commit_id":"7547f631328aba2e017df9c4caa01798c59be2a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setScheduler(SchedulerImpl scheduler) {\n            m_scheduler = scheduler;\n        }","id":18934,"modified_method":"public void setScheduler(Scheduler scheduler) {\n            m_scheduler = scheduler;\n        }","commit_id":"7547f631328aba2e017df9c4caa01798c59be2a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SchedulerImpl getScheduler() {\n            return m_scheduler;\n        }","id":18935,"modified_method":"public Scheduler getScheduler() {\n            return m_scheduler;\n        }","commit_id":"7547f631328aba2e017df9c4caa01798c59be2a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testSchedulerOutput() {\n       SchedulerImpl schedule = new SchedulerImpl(\"1s\");\n       \n       Long interval = schedule.getSchedule();\n       assertNotNull(interval);\n    }","id":18936,"modified_method":"@Test\n    public void testSchedulerOutput() {\n       SchedulerImpl schedule = new SchedulerImpl(\"1d\");\n       \n       Long interval = schedule.getScheduleInterval();\n       System.out.println(\"interval: \" + interval);\n       assertNotNull(interval);\n    }","commit_id":"7547f631328aba2e017df9c4caa01798c59be2a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SchedulerImpl(String schedule) {\n        m_schedule = schedule;\n        \n        m_fmt = new PeriodFormatterBuilder()\n        .appendYears().appendSuffix(\"y\").appendSeparator(\" \")\n        .appendMonths().appendSuffix(\"M\").appendSeparator(\" \")\n        .appendDays().appendSuffix(\"d\").appendSeparator(\" \")\n        .appendHours().appendSuffix(\"h\").appendSeparator(\" \")\n        .appendMinutes().appendSuffix(\"m\").appendSeparator(\" \")\n        .appendSeconds().appendSuffix(\"s\").appendSeparator(\" \")\n        .appendMillis().appendSuffix(\"ms\")\n        .toFormatter();\n    }","id":18937,"modified_method":"public SchedulerImpl(String schedule) {\n        m_schedule = schedule;\n        \n        m_fmt = new PeriodFormatterBuilder()\n        .appendDays().appendSuffix(\"d\").appendSeparator(\" \")\n        .appendHours().appendSuffix(\"h\").appendSeparator(\" \")\n        .appendMinutes().appendSuffix(\"m\").appendSeparator(\" \")\n        .appendSeconds().appendSuffix(\"s\").appendSeparator(\" \")\n        .appendMillis().appendSuffix(\"ms\")\n        .toFormatter();\n    }","commit_id":"7547f631328aba2e017df9c4caa01798c59be2a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Long getSchedule() {\n        return m_fmt.parsePeriod(m_schedule).normalizedStandard().toStandardDuration().getMillis();\n    }","id":18938,"modified_method":"public Long getScheduleInterval() {\n        return m_fmt.parsePeriod(m_schedule).normalizedStandard().toStandardDuration().getMillis();\n    }","commit_id":"7547f631328aba2e017df9c4caa01798c59be2a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Map<String, String> getPolicyTypes() {\n        Map<String,String> policies = new TreeMap<String,String>();\n        for (Policy d : m_extensionManager.findExtensions(Policy.class)) {\n            policies.put(d.getClass().getName(), d.getClass().getSimpleName());\n        }\n        return policies;\n    }","id":18939,"modified_method":"public Map<String, String> getPolicyTypes() {\n        if (m_policies == null) {\n            Map<String,String> policies = new TreeMap<String,String>();\n            for (Policy p : m_extensionManager.findExtensions(Policy.class)) {\n                policies.put(p.getClass().getSimpleName(), p.getClass().getName());\n            }\n\n            m_policies = new LinkedHashMap<String,String>();\n            for (Entry<String,String> e : policies.entrySet()) {\n                m_policies.put(e.getValue(), e.getKey());\n            }\n        }\n\n        return m_policies;\n    }","commit_id":"00d750bd5b77572341456cd08d91675c6fb34d97","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Map<String, String> getDetectorTypes() {\n        Map<String,String> detectors = new TreeMap<String,String>();\n\n        for (ServiceDetector d : m_extensionManager.findExtensions(ServiceDetector.class)) {\n            String serviceName = d.getServiceName();\n            if (serviceName == null) {\n                serviceName = d.getClass().getSimpleName();\n            }\n            detectors.put(d.getClass().getName(), serviceName);\n        }\n        \n        return detectors;\n    }","id":18940,"modified_method":"public Map<String, String> getDetectorTypes() {\n        if (m_detectors == null) {\n            Map<String,String> detectors = new TreeMap<String,String>();\n            for (ServiceDetector d : m_extensionManager.findExtensions(ServiceDetector.class)) {\n                String serviceName = d.getServiceName();\n                if (serviceName == null) {\n                    serviceName = d.getClass().getSimpleName();\n                }\n                detectors.put(serviceName, d.getClass().getName());\n            }\n\n            m_detectors = new LinkedHashMap<String,String>();\n            for (Entry<String,String> e : detectors.entrySet()) {\n                m_detectors.put(e.getValue(), e.getKey());\n            }\n        }\n\n        return m_detectors;\n    }","commit_id":"00d750bd5b77572341456cd08d91675c6fb34d97","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private ModelAndView doDelete(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        \n        ForeignSource fs = m_foreignSourceService.deletePath(treeCmd.getForeignSourceName(), treeCmd.getDataPath());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(treeCmd.getDefaultFormPath());\n        return showForm(request, response, errors);\n    }","id":18941,"modified_method":"private ModelAndView doDelete(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        \n        ForeignSource fs = m_foreignSourceService.deletePath(treeCmd.getForeignSourceName(), treeCmd.getDataPath());\n        treeCmd.setFormData(fs);\n        return showForm(request, response, errors);\n    }","commit_id":"00d750bd5b77572341456cd08d91675c6fb34d97","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected Object formBackingObject(HttpServletRequest request) throws Exception {\n        System.err.println(\"creating new form backing object\");\n        TreeCommand formCommand = new TreeCommand();\n        String foreignSourceName = request.getParameter(\"foreignSourceName\");\n        if (foreignSourceName == null) {\n            throw new IllegalArgumentException(\"foreignSourceName required\");\n        }\n        ForeignSource fs = m_foreignSourceService.getForeignSource(foreignSourceName);\n        formCommand.setFormData(fs);\n        formCommand.setCurrentNode(formCommand.getDefaultFormPath());\n        return formCommand;\n    }","id":18942,"modified_method":"@Override\n    protected Object formBackingObject(HttpServletRequest request) throws Exception {\n        TreeCommand formCommand = new TreeCommand();\n        String foreignSourceName = request.getParameter(\"foreignSourceName\");\n        if (foreignSourceName == null) {\n            throw new IllegalArgumentException(\"foreignSourceName required\");\n        }\n        ForeignSource fs = m_foreignSourceService.getForeignSource(foreignSourceName);\n        formCommand.setFormData(fs);\n        return formCommand;\n    }","commit_id":"00d750bd5b77572341456cd08d91675c6fb34d97","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    protected Map referenceData(HttpServletRequest request) throws Exception {\n        Map<String, Object> map = new HashMap<String, Object>();\n\n        map.put(\"detectorTypes\", m_foreignSourceService.getDetectorTypes());\n        map.put(\"policyTypes\", m_foreignSourceService.getPolicyTypes());\n        \n        return map;\n    }","id":18943,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    protected Map referenceData(HttpServletRequest request) throws Exception {\n        final Map<String, Object> map = new HashMap<String, Object>();\n        int width = 20;\n\n        final Map<String,String> detectorTypes = m_foreignSourceService.getDetectorTypes();\n        map.put(\"detectorTypes\", detectorTypes);\n        for (String key : detectorTypes.keySet()) {\n            width = Math.max(width, key.length());\n        }\n\n        final Map<String, String> policyTypes = m_foreignSourceService.getPolicyTypes();\n        map.put(\"policyTypes\", policyTypes);\n        for (String key : policyTypes.keySet()) {\n            width = Math.max(width, key.length());\n        }\n\n        map.put(\"fieldWidth\", width);\n        \n        return map;\n    }","commit_id":"00d750bd5b77572341456cd08d91675c6fb34d97","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {\n        TreeCommand treeCmd = (TreeCommand)command;\n        System.err.println(\"tree command = \" + treeCmd);\n        String action = treeCmd.getAction();\n        if (action == null) {\n            return doShow(request, response, treeCmd, errors);\n        } else if (\"addDetector\".equalsIgnoreCase(action)) {\n            return doAddDetector(request, response, treeCmd, errors);\n        } else if (\"addPolicy\".equalsIgnoreCase(action)) {\n            return doAddPolicy(request, response, treeCmd, errors);\n        } else if (\"save\".equalsIgnoreCase(action)) {\n            return doSave(request, response, treeCmd, errors);\n        } else if (\"edit\".equalsIgnoreCase(action)) {\n            return doEdit(request, response, treeCmd, errors);\n        } else if (\"cancel\".equalsIgnoreCase(action)) {\n            return doCancel(request, response, treeCmd, errors);\n        } else if (\"delete\".equalsIgnoreCase(action)) {\n            return doDelete(request, response, treeCmd, errors);\n            /*\n        } else if (\"addNode\".equalsIgnoreCase(action)) {\n            return doAddNode(request, response, treeCmd, errors);\n        } else if (\"addInterface\".equalsIgnoreCase(action)) {\n            return doAddInterface(request, response, treeCmd, errors);\n        } else if (\"addService\".equalsIgnoreCase(action)) {\n            return doAddService(request, response, treeCmd, errors);\n        } else if (\"addCategory\".equalsIgnoreCase(action)) {\n            return doAddCategory(request, response, treeCmd, errors);\n        } else if (\"addAssetField\".equalsIgnoreCase(action)) {\n            return doAddAssetField(request, response, treeCmd, errors);\n        } else if (\"import\".equalsIgnoreCase(action)) {\n            return doImport(request, response, treeCmd, errors);\n            */\n        } else if (\"done\".equalsIgnoreCase(action)) {\n            return done(request, response, treeCmd, errors);\n        } else {\n            errors.reject(\"Unrecognized action: \"+action);\n            return showForm(request, response, errors);\n        }\n        \n    }","id":18944,"modified_method":"@Override\n    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {\n        TreeCommand treeCmd = (TreeCommand)command;\n        String action = treeCmd.getAction();\n        if (action == null) {\n            return doShow(request, response, treeCmd, errors);\n        } else if (\"addDetector\".equalsIgnoreCase(action)) {\n            return doAddDetector(request, response, treeCmd, errors);\n        } else if (\"addPolicy\".equalsIgnoreCase(action)) {\n            return doAddPolicy(request, response, treeCmd, errors);\n        } else if (\"save\".equalsIgnoreCase(action)) {\n            return doSave(request, response, treeCmd, errors);\n        } else if (\"edit\".equalsIgnoreCase(action)) {\n            return doEdit(request, response, treeCmd, errors);\n        } else if (\"cancel\".equalsIgnoreCase(action)) {\n            return doCancel(request, response, treeCmd, errors);\n        } else if (\"delete\".equalsIgnoreCase(action)) {\n            return doDelete(request, response, treeCmd, errors);\n        } else if (\"done\".equalsIgnoreCase(action)) {\n            return done(request, response, treeCmd, errors);\n        } else {\n            errors.reject(\"Unrecognized action: \"+action);\n            return showForm(request, response, errors);\n        }\n        \n    }","commit_id":"00d750bd5b77572341456cd08d91675c6fb34d97","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private ModelAndView doSave(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.saveForeignSource(treeCmd.getForeignSourceName(), treeCmd.getFormData());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(treeCmd.getDefaultFormPath());\n        return showForm(request, response, errors);\n    }","id":18945,"modified_method":"private ModelAndView doSave(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.saveForeignSource(treeCmd.getForeignSourceName(), treeCmd.getFormData());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(\"\");\n        return showForm(request, response, errors);\n    }","commit_id":"00d750bd5b77572341456cd08d91675c6fb34d97","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private ModelAndView doCancel(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.getForeignSource(treeCmd.getForeignSourceName());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(treeCmd.getDefaultFormPath());\n        return showForm(request, response, errors);\n    }","id":18946,"modified_method":"private ModelAndView doCancel(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.getForeignSource(treeCmd.getForeignSourceName());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(\"\");\n        return showForm(request, response, errors);\n    }","commit_id":"00d750bd5b77572341456cd08d91675c6fb34d97","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Map<String, String> getDetectorTypes() {\n        Map<String,String> detectors = new TreeMap<String,String>();\n\n        for (ServiceDetector d : m_extensionManager.findExtensions(ServiceDetector.class)) {\n            String serviceName = d.getServiceName();\n            if (serviceName == null) {\n                serviceName = d.getClass().getSimpleName();\n            }\n            detectors.put(d.getClass().getName(), serviceName);\n        }\n        \n        return detectors;\n    }","id":18947,"modified_method":"public Map<String, String> getDetectorTypes() {\n        if (m_detectors == null) {\n            Map<String,String> detectors = new TreeMap<String,String>();\n            for (ServiceDetector d : m_extensionManager.findExtensions(ServiceDetector.class)) {\n                String serviceName = d.getServiceName();\n                if (serviceName == null) {\n                    serviceName = d.getClass().getSimpleName();\n                }\n                detectors.put(serviceName, d.getClass().getName());\n            }\n\n            m_detectors = new LinkedHashMap<String,String>();\n            for (Entry<String,String> e : detectors.entrySet()) {\n                m_detectors.put(e.getValue(), e.getKey());\n            }\n        }\n\n        return m_detectors;\n    }","commit_id":"f14c111b6e2455c689ebaf2fc2e9eb2aeefa18a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Map<String, String> getPolicyTypes() {\n        Map<String,String> policies = new TreeMap<String,String>();\n        for (Policy d : m_extensionManager.findExtensions(Policy.class)) {\n            policies.put(d.getClass().getName(), d.getClass().getSimpleName());\n        }\n        return policies;\n    }","id":18948,"modified_method":"public Map<String, String> getPolicyTypes() {\n        if (m_policies == null) {\n            Map<String,String> policies = new TreeMap<String,String>();\n            for (Policy p : m_extensionManager.findExtensions(Policy.class)) {\n                policies.put(p.getClass().getSimpleName(), p.getClass().getName());\n            }\n\n            m_policies = new LinkedHashMap<String,String>();\n            for (Entry<String,String> e : policies.entrySet()) {\n                m_policies.put(e.getValue(), e.getKey());\n            }\n        }\n\n        return m_policies;\n    }","commit_id":"f14c111b6e2455c689ebaf2fc2e9eb2aeefa18a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected Object formBackingObject(HttpServletRequest request) throws Exception {\n        System.err.println(\"creating new form backing object\");\n        TreeCommand formCommand = new TreeCommand();\n        String foreignSourceName = request.getParameter(\"foreignSourceName\");\n        if (foreignSourceName == null) {\n            throw new IllegalArgumentException(\"foreignSourceName required\");\n        }\n        ForeignSource fs = m_foreignSourceService.getForeignSource(foreignSourceName);\n        formCommand.setFormData(fs);\n        formCommand.setCurrentNode(formCommand.getDefaultFormPath());\n        return formCommand;\n    }","id":18949,"modified_method":"@Override\n    protected Object formBackingObject(HttpServletRequest request) throws Exception {\n        TreeCommand formCommand = new TreeCommand();\n        String foreignSourceName = request.getParameter(\"foreignSourceName\");\n        if (foreignSourceName == null) {\n            throw new IllegalArgumentException(\"foreignSourceName required\");\n        }\n        ForeignSource fs = m_foreignSourceService.getForeignSource(foreignSourceName);\n        formCommand.setFormData(fs);\n        return formCommand;\n    }","commit_id":"f14c111b6e2455c689ebaf2fc2e9eb2aeefa18a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private ModelAndView doDelete(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        \n        ForeignSource fs = m_foreignSourceService.deletePath(treeCmd.getForeignSourceName(), treeCmd.getDataPath());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(treeCmd.getDefaultFormPath());\n        return showForm(request, response, errors);\n    }","id":18950,"modified_method":"private ModelAndView doDelete(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        \n        ForeignSource fs = m_foreignSourceService.deletePath(treeCmd.getForeignSourceName(), treeCmd.getDataPath());\n        treeCmd.setFormData(fs);\n        return showForm(request, response, errors);\n    }","commit_id":"f14c111b6e2455c689ebaf2fc2e9eb2aeefa18a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    protected Map referenceData(HttpServletRequest request) throws Exception {\n        Map<String, Object> map = new HashMap<String, Object>();\n\n        map.put(\"detectorTypes\", m_foreignSourceService.getDetectorTypes());\n        map.put(\"policyTypes\", m_foreignSourceService.getPolicyTypes());\n        \n        return map;\n    }","id":18951,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    protected Map referenceData(HttpServletRequest request) throws Exception {\n        final Map<String, Object> map = new HashMap<String, Object>();\n        int width = 20;\n\n        final Map<String,String> detectorTypes = m_foreignSourceService.getDetectorTypes();\n        map.put(\"detectorTypes\", detectorTypes);\n        for (String key : detectorTypes.keySet()) {\n            width = Math.max(width, key.length());\n        }\n\n        final Map<String, String> policyTypes = m_foreignSourceService.getPolicyTypes();\n        map.put(\"policyTypes\", policyTypes);\n        for (String key : policyTypes.keySet()) {\n            width = Math.max(width, key.length());\n        }\n\n        map.put(\"fieldWidth\", width);\n        \n        return map;\n    }","commit_id":"f14c111b6e2455c689ebaf2fc2e9eb2aeefa18a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private ModelAndView doCancel(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.getForeignSource(treeCmd.getForeignSourceName());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(treeCmd.getDefaultFormPath());\n        return showForm(request, response, errors);\n    }","id":18952,"modified_method":"private ModelAndView doCancel(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.getForeignSource(treeCmd.getForeignSourceName());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(\"\");\n        return showForm(request, response, errors);\n    }","commit_id":"f14c111b6e2455c689ebaf2fc2e9eb2aeefa18a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {\n        TreeCommand treeCmd = (TreeCommand)command;\n        System.err.println(\"tree command = \" + treeCmd);\n        String action = treeCmd.getAction();\n        if (action == null) {\n            return doShow(request, response, treeCmd, errors);\n        } else if (\"addDetector\".equalsIgnoreCase(action)) {\n            return doAddDetector(request, response, treeCmd, errors);\n        } else if (\"addPolicy\".equalsIgnoreCase(action)) {\n            return doAddPolicy(request, response, treeCmd, errors);\n        } else if (\"save\".equalsIgnoreCase(action)) {\n            return doSave(request, response, treeCmd, errors);\n        } else if (\"edit\".equalsIgnoreCase(action)) {\n            return doEdit(request, response, treeCmd, errors);\n        } else if (\"cancel\".equalsIgnoreCase(action)) {\n            return doCancel(request, response, treeCmd, errors);\n        } else if (\"delete\".equalsIgnoreCase(action)) {\n            return doDelete(request, response, treeCmd, errors);\n            /*\n        } else if (\"addNode\".equalsIgnoreCase(action)) {\n            return doAddNode(request, response, treeCmd, errors);\n        } else if (\"addInterface\".equalsIgnoreCase(action)) {\n            return doAddInterface(request, response, treeCmd, errors);\n        } else if (\"addService\".equalsIgnoreCase(action)) {\n            return doAddService(request, response, treeCmd, errors);\n        } else if (\"addCategory\".equalsIgnoreCase(action)) {\n            return doAddCategory(request, response, treeCmd, errors);\n        } else if (\"addAssetField\".equalsIgnoreCase(action)) {\n            return doAddAssetField(request, response, treeCmd, errors);\n        } else if (\"import\".equalsIgnoreCase(action)) {\n            return doImport(request, response, treeCmd, errors);\n            */\n        } else if (\"done\".equalsIgnoreCase(action)) {\n            return done(request, response, treeCmd, errors);\n        } else {\n            errors.reject(\"Unrecognized action: \"+action);\n            return showForm(request, response, errors);\n        }\n        \n    }","id":18953,"modified_method":"@Override\n    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {\n        TreeCommand treeCmd = (TreeCommand)command;\n        String action = treeCmd.getAction();\n        if (action == null) {\n            return doShow(request, response, treeCmd, errors);\n        } else if (\"addDetector\".equalsIgnoreCase(action)) {\n            return doAddDetector(request, response, treeCmd, errors);\n        } else if (\"addPolicy\".equalsIgnoreCase(action)) {\n            return doAddPolicy(request, response, treeCmd, errors);\n        } else if (\"save\".equalsIgnoreCase(action)) {\n            return doSave(request, response, treeCmd, errors);\n        } else if (\"edit\".equalsIgnoreCase(action)) {\n            return doEdit(request, response, treeCmd, errors);\n        } else if (\"cancel\".equalsIgnoreCase(action)) {\n            return doCancel(request, response, treeCmd, errors);\n        } else if (\"delete\".equalsIgnoreCase(action)) {\n            return doDelete(request, response, treeCmd, errors);\n        } else if (\"done\".equalsIgnoreCase(action)) {\n            return done(request, response, treeCmd, errors);\n        } else {\n            errors.reject(\"Unrecognized action: \"+action);\n            return showForm(request, response, errors);\n        }\n        \n    }","commit_id":"f14c111b6e2455c689ebaf2fc2e9eb2aeefa18a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private ModelAndView doSave(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.saveForeignSource(treeCmd.getForeignSourceName(), treeCmd.getFormData());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(treeCmd.getDefaultFormPath());\n        return showForm(request, response, errors);\n    }","id":18954,"modified_method":"private ModelAndView doSave(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.saveForeignSource(treeCmd.getForeignSourceName(), treeCmd.getFormData());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(\"\");\n        return showForm(request, response, errors);\n    }","commit_id":"f14c111b6e2455c689ebaf2fc2e9eb2aeefa18a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Map<String, String> getPolicyTypes() {\n        Map<String,String> policies = new TreeMap<String,String>();\n        for (Policy d : m_extensionManager.findExtensions(Policy.class)) {\n            policies.put(d.getClass().getName(), d.getClass().getSimpleName());\n        }\n        return policies;\n    }","id":18955,"modified_method":"public Map<String, String> getPolicyTypes() {\n        if (m_policies == null) {\n            Map<String,String> policies = new TreeMap<String,String>();\n            for (Policy p : m_extensionManager.findExtensions(Policy.class)) {\n                policies.put(p.getClass().getSimpleName(), p.getClass().getName());\n            }\n\n            m_policies = new LinkedHashMap<String,String>();\n            for (Entry<String,String> e : policies.entrySet()) {\n                m_policies.put(e.getValue(), e.getKey());\n            }\n        }\n\n        return m_policies;\n    }","commit_id":"dfc1e21779aaae6fce3b0921c067dd4db4eea8ef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Map<String, String> getDetectorTypes() {\n        Map<String,String> detectors = new TreeMap<String,String>();\n\n        for (ServiceDetector d : m_extensionManager.findExtensions(ServiceDetector.class)) {\n            String serviceName = d.getServiceName();\n            if (serviceName == null) {\n                serviceName = d.getClass().getSimpleName();\n            }\n            detectors.put(d.getClass().getName(), serviceName);\n        }\n        \n        return detectors;\n    }","id":18956,"modified_method":"public Map<String, String> getDetectorTypes() {\n        if (m_detectors == null) {\n            Map<String,String> detectors = new TreeMap<String,String>();\n            for (ServiceDetector d : m_extensionManager.findExtensions(ServiceDetector.class)) {\n                String serviceName = d.getServiceName();\n                if (serviceName == null) {\n                    serviceName = d.getClass().getSimpleName();\n                }\n                detectors.put(serviceName, d.getClass().getName());\n            }\n\n            m_detectors = new LinkedHashMap<String,String>();\n            for (Entry<String,String> e : detectors.entrySet()) {\n                m_detectors.put(e.getValue(), e.getKey());\n            }\n        }\n\n        return m_detectors;\n    }","commit_id":"dfc1e21779aaae6fce3b0921c067dd4db4eea8ef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private ModelAndView doCancel(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.getForeignSource(treeCmd.getForeignSourceName());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(treeCmd.getDefaultFormPath());\n        return showForm(request, response, errors);\n    }","id":18957,"modified_method":"private ModelAndView doCancel(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.getForeignSource(treeCmd.getForeignSourceName());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(\"\");\n        return showForm(request, response, errors);\n    }","commit_id":"dfc1e21779aaae6fce3b0921c067dd4db4eea8ef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private ModelAndView doDelete(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        \n        ForeignSource fs = m_foreignSourceService.deletePath(treeCmd.getForeignSourceName(), treeCmd.getDataPath());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(treeCmd.getDefaultFormPath());\n        return showForm(request, response, errors);\n    }","id":18958,"modified_method":"private ModelAndView doDelete(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        \n        ForeignSource fs = m_foreignSourceService.deletePath(treeCmd.getForeignSourceName(), treeCmd.getDataPath());\n        treeCmd.setFormData(fs);\n        return showForm(request, response, errors);\n    }","commit_id":"dfc1e21779aaae6fce3b0921c067dd4db4eea8ef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected Object formBackingObject(HttpServletRequest request) throws Exception {\n        System.err.println(\"creating new form backing object\");\n        TreeCommand formCommand = new TreeCommand();\n        String foreignSourceName = request.getParameter(\"foreignSourceName\");\n        if (foreignSourceName == null) {\n            throw new IllegalArgumentException(\"foreignSourceName required\");\n        }\n        ForeignSource fs = m_foreignSourceService.getForeignSource(foreignSourceName);\n        formCommand.setFormData(fs);\n        formCommand.setCurrentNode(formCommand.getDefaultFormPath());\n        return formCommand;\n    }","id":18959,"modified_method":"@Override\n    protected Object formBackingObject(HttpServletRequest request) throws Exception {\n        TreeCommand formCommand = new TreeCommand();\n        String foreignSourceName = request.getParameter(\"foreignSourceName\");\n        if (foreignSourceName == null) {\n            throw new IllegalArgumentException(\"foreignSourceName required\");\n        }\n        ForeignSource fs = m_foreignSourceService.getForeignSource(foreignSourceName);\n        formCommand.setFormData(fs);\n        return formCommand;\n    }","commit_id":"dfc1e21779aaae6fce3b0921c067dd4db4eea8ef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {\n        TreeCommand treeCmd = (TreeCommand)command;\n        System.err.println(\"tree command = \" + treeCmd);\n        String action = treeCmd.getAction();\n        if (action == null) {\n            return doShow(request, response, treeCmd, errors);\n        } else if (\"addDetector\".equalsIgnoreCase(action)) {\n            return doAddDetector(request, response, treeCmd, errors);\n        } else if (\"addPolicy\".equalsIgnoreCase(action)) {\n            return doAddPolicy(request, response, treeCmd, errors);\n        } else if (\"save\".equalsIgnoreCase(action)) {\n            return doSave(request, response, treeCmd, errors);\n        } else if (\"edit\".equalsIgnoreCase(action)) {\n            return doEdit(request, response, treeCmd, errors);\n        } else if (\"cancel\".equalsIgnoreCase(action)) {\n            return doCancel(request, response, treeCmd, errors);\n        } else if (\"delete\".equalsIgnoreCase(action)) {\n            return doDelete(request, response, treeCmd, errors);\n            /*\n        } else if (\"addNode\".equalsIgnoreCase(action)) {\n            return doAddNode(request, response, treeCmd, errors);\n        } else if (\"addInterface\".equalsIgnoreCase(action)) {\n            return doAddInterface(request, response, treeCmd, errors);\n        } else if (\"addService\".equalsIgnoreCase(action)) {\n            return doAddService(request, response, treeCmd, errors);\n        } else if (\"addCategory\".equalsIgnoreCase(action)) {\n            return doAddCategory(request, response, treeCmd, errors);\n        } else if (\"addAssetField\".equalsIgnoreCase(action)) {\n            return doAddAssetField(request, response, treeCmd, errors);\n        } else if (\"import\".equalsIgnoreCase(action)) {\n            return doImport(request, response, treeCmd, errors);\n            */\n        } else if (\"done\".equalsIgnoreCase(action)) {\n            return done(request, response, treeCmd, errors);\n        } else {\n            errors.reject(\"Unrecognized action: \"+action);\n            return showForm(request, response, errors);\n        }\n        \n    }","id":18960,"modified_method":"@Override\n    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {\n        TreeCommand treeCmd = (TreeCommand)command;\n        String action = treeCmd.getAction();\n        if (action == null) {\n            return doShow(request, response, treeCmd, errors);\n        } else if (\"addDetector\".equalsIgnoreCase(action)) {\n            return doAddDetector(request, response, treeCmd, errors);\n        } else if (\"addPolicy\".equalsIgnoreCase(action)) {\n            return doAddPolicy(request, response, treeCmd, errors);\n        } else if (\"save\".equalsIgnoreCase(action)) {\n            return doSave(request, response, treeCmd, errors);\n        } else if (\"edit\".equalsIgnoreCase(action)) {\n            return doEdit(request, response, treeCmd, errors);\n        } else if (\"cancel\".equalsIgnoreCase(action)) {\n            return doCancel(request, response, treeCmd, errors);\n        } else if (\"delete\".equalsIgnoreCase(action)) {\n            return doDelete(request, response, treeCmd, errors);\n        } else if (\"done\".equalsIgnoreCase(action)) {\n            return done(request, response, treeCmd, errors);\n        } else {\n            errors.reject(\"Unrecognized action: \"+action);\n            return showForm(request, response, errors);\n        }\n        \n    }","commit_id":"dfc1e21779aaae6fce3b0921c067dd4db4eea8ef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    protected Map referenceData(HttpServletRequest request) throws Exception {\n        Map<String, Object> map = new HashMap<String, Object>();\n\n        map.put(\"detectorTypes\", m_foreignSourceService.getDetectorTypes());\n        map.put(\"policyTypes\", m_foreignSourceService.getPolicyTypes());\n        \n        return map;\n    }","id":18961,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    protected Map referenceData(HttpServletRequest request) throws Exception {\n        final Map<String, Object> map = new HashMap<String, Object>();\n        int width = 20;\n\n        final Map<String,String> detectorTypes = m_foreignSourceService.getDetectorTypes();\n        map.put(\"detectorTypes\", detectorTypes);\n        for (String key : detectorTypes.keySet()) {\n            width = Math.max(width, key.length());\n        }\n\n        final Map<String, String> policyTypes = m_foreignSourceService.getPolicyTypes();\n        map.put(\"policyTypes\", policyTypes);\n        for (String key : policyTypes.keySet()) {\n            width = Math.max(width, key.length());\n        }\n\n        map.put(\"fieldWidth\", width);\n        \n        return map;\n    }","commit_id":"dfc1e21779aaae6fce3b0921c067dd4db4eea8ef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private ModelAndView doSave(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.saveForeignSource(treeCmd.getForeignSourceName(), treeCmd.getFormData());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(treeCmd.getDefaultFormPath());\n        return showForm(request, response, errors);\n    }","id":18962,"modified_method":"private ModelAndView doSave(HttpServletRequest request, HttpServletResponse response, TreeCommand treeCmd, BindException errors) throws Exception {\n        ForeignSource fs = m_foreignSourceService.saveForeignSource(treeCmd.getForeignSourceName(), treeCmd.getFormData());\n        treeCmd.setFormData(fs);\n        treeCmd.setCurrentNode(\"\");\n        return showForm(request, response, errors);\n    }","commit_id":"dfc1e21779aaae6fce3b0921c067dd4db4eea8ef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * @inheritDoc\n     */\n    public Evaluator getEvaluator(final ValueType type,\n                                  final String operatorId,\n                                  final boolean isNegated,\n                                  final String parameterText,\n                                  final Target left,\n                                  final Target right) {\n        if ( this.cache == Collections.EMPTY_MAP ) {\n            this.cache = new HashMap<String, BeforeEvaluator>();\n        }\n        String key = isNegated + \":\" + parameterText;\n        BeforeEvaluator eval = this.cache.get( key );\n        if ( eval == null ) {\n            Long[] params = parser.parse( parameterText );\n            eval = new BeforeEvaluator( type,\n                                        isNegated,\n                                        params,\n                                        parameterText,\n                                        left == Target.FACT,\n                                        right == Target.FACT );\n            this.cache.put( key,\n                            eval );\n        }\n        return eval;\n    }","id":18963,"modified_method":"/**\n     * @inheritDoc\n     */\n    public Evaluator getEvaluator(final ValueType type,\n                                  final String operatorId,\n                                  final boolean isNegated,\n                                  final String parameterText,\n                                  final Target left,\n                                  final Target right) {\n        if ( this.cache == Collections.EMPTY_MAP ) {\n            this.cache = new HashMap<String, BeforeEvaluator>();\n        }\n        String key = left+\":\"+right+\":\"+isNegated + \":\" + parameterText;\n        BeforeEvaluator eval = this.cache.get( key );\n        if ( eval == null ) {\n            Long[] params = parser.parse( parameterText );\n            eval = new BeforeEvaluator( type,\n                                        isNegated,\n                                        params,\n                                        parameterText,\n                                        left == Target.FACT,\n                                        right == Target.FACT );\n            this.cache.put( key,\n                            eval );\n        }\n        return eval;\n    }","commit_id":"933e5e4e6cdb854202035138b72fca83d85471f2","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public boolean evaluateCachedLeft(InternalWorkingMemory workingMemory,\n                                          final VariableContextEntry context,\n                                          final Object right) {\n            if ( context.extractor.isNullValue( workingMemory,\n                                                right ) ) {\n                return false;\n            }\n            long distStart = Math.abs( ((EventFactHandle) right).getStartTimestamp() - ((EventFactHandle) ((ObjectVariableContextEntry) context).left).getStartTimestamp() );\n            long distEnd = Math.abs( ((EventFactHandle) right).getEndTimestamp() - ((EventFactHandle) ((ObjectVariableContextEntry) context).left).getEndTimestamp() );\n            return this.getOperator().isNegated() ^ (distStart <= this.startDev && distEnd <= this.endDev);\n        }","id":18964,"modified_method":"public boolean evaluateCachedLeft(InternalWorkingMemory workingMemory,\n                                          final VariableContextEntry context,\n                                          final Object right) {\n            if ( context.extractor.isNullValue( workingMemory,\n                                                right ) ) {\n                return false;\n            }\n\n            long rightStartTS, rightEndTS;\n            long leftStartTS, leftEndTS;\n\n            rightStartTS = this.unwrapRight ? context.extractor.getLongValue( workingMemory,\n                                                                              right ) : ((EventFactHandle) right).getStartTimestamp();\n            rightEndTS = this.unwrapRight ? rightStartTS : ((EventFactHandle) right).getEndTimestamp();\n\n            if ( this.unwrapLeft ) {\n                if ( context instanceof ObjectVariableContextEntry ) {\n                    if ( ((ObjectVariableContextEntry) context).left instanceof Date ) {\n                        leftStartTS = ((Date) ((ObjectVariableContextEntry) context).left).getTime();\n                    } else {\n                        leftStartTS = ((Number) ((ObjectVariableContextEntry) context).left).longValue();\n                    }\n                } else {\n                    leftStartTS = ((LongVariableContextEntry) context).left;\n                }\n                leftEndTS = leftStartTS;\n            } else {\n                leftStartTS = ((EventFactHandle) ((ObjectVariableContextEntry) context).left).getStartTimestamp();\n                leftEndTS = ((EventFactHandle) ((ObjectVariableContextEntry) context).left).getEndTimestamp();\n            }\n\n            long distStart = Math.abs( rightStartTS - leftStartTS );\n            long distEnd = Math.abs( rightEndTS - leftEndTS );\n            return this.getOperator().isNegated() ^ (distStart <= this.startDev && distEnd <= this.endDev);\n        }","commit_id":"933e5e4e6cdb854202035138b72fca83d85471f2","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public CoincidesEvaluator(final ValueType type,\n                                  final boolean isNegated,\n                                  final Long[] parameters,\n                                  final String paramText) {\n            super( type,\n                   isNegated ? COINCIDES_NOT : COINCIDES );\n            this.paramText = paramText;\n            this.setParameters( parameters );\n        }","id":18965,"modified_method":"public CoincidesEvaluator(final ValueType type,\n                                  final boolean isNegated,\n                                  final Long[] parameters,\n                                  final String paramText,\n                                  final boolean unwrapLeft,\n                                  final boolean unwrapRight) {\n            super( type,\n                   isNegated ? COINCIDES_NOT : COINCIDES );\n            this.paramText = paramText;\n            this.unwrapLeft = unwrapLeft;\n            this.unwrapRight = unwrapRight;\n            this.setParameters( parameters );\n        }","commit_id":"933e5e4e6cdb854202035138b72fca83d85471f2","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public boolean evaluateCachedRight(InternalWorkingMemory workingMemory,\n                                           final VariableContextEntry context,\n                                           final Object left) {\n            if ( context.rightNull ) {\n                return false;\n            }\n            long distStart = Math.abs( ((EventFactHandle) ((ObjectVariableContextEntry) context).right).getStartTimestamp() - ((EventFactHandle) left).getStartTimestamp() );\n            long distEnd = Math.abs( ((EventFactHandle) ((ObjectVariableContextEntry) context).right).getEndTimestamp() - ((EventFactHandle) left).getEndTimestamp() );\n            return this.getOperator().isNegated() ^ (distStart <= this.startDev && distEnd <= this.endDev);\n        }","id":18966,"modified_method":"public boolean evaluateCachedRight(InternalWorkingMemory workingMemory,\n                                           final VariableContextEntry context,\n                                           final Object left) {\n            if ( context.rightNull ) {\n                return false;\n            }\n            long rightStartTS, rightEndTS;\n            long leftStartTS, leftEndTS;\n            if ( this.unwrapRight ) {\n                if ( context instanceof ObjectVariableContextEntry ) {\n                    if ( ((ObjectVariableContextEntry) context).right instanceof Date ) {\n                        rightStartTS = ((Date) ((ObjectVariableContextEntry) context).right).getTime();\n                    } else {\n                        rightStartTS = ((Number) ((ObjectVariableContextEntry) context).right).longValue();\n                    }\n                } else {\n                    rightStartTS = ((LongVariableContextEntry) context).right;\n                }\n                rightEndTS = rightStartTS;\n            } else {\n                rightStartTS = ((EventFactHandle) ((ObjectVariableContextEntry) context).right).getStartTimestamp();\n                rightEndTS = ((EventFactHandle) ((ObjectVariableContextEntry) context).right).getEndTimestamp();\n            }\n            leftStartTS = this.unwrapLeft ? context.declaration.getExtractor().getLongValue( workingMemory,\n                                                                                             left ) : ((EventFactHandle) left).getStartTimestamp();\n            leftEndTS = this.unwrapLeft ? rightStartTS : ((EventFactHandle) left).getEndTimestamp();\n\n            long distStart = Math.abs( rightStartTS - leftStartTS );\n            long distEnd = Math.abs( rightEndTS - leftEndTS );\n            return this.getOperator().isNegated() ^ (distStart <= this.startDev && distEnd <= this.endDev);\n        }","commit_id":"933e5e4e6cdb854202035138b72fca83d85471f2","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public boolean evaluate(InternalWorkingMemory workingMemory,\n                                final InternalReadAccessor extractor1,\n                                final Object object1,\n                                final InternalReadAccessor extractor2,\n                                final Object object2) {\n            if ( extractor1.isNullValue( workingMemory,\n                                         object1 ) ) {\n                return false;\n            }\n            long distStart = Math.abs( ((EventFactHandle) object1).getStartTimestamp() - ((EventFactHandle) object2).getStartTimestamp() );\n            long distEnd = Math.abs( ((EventFactHandle) object1).getEndTimestamp() - ((EventFactHandle) object2).getEndTimestamp() );\n            return this.getOperator().isNegated() ^ (distStart <= this.startDev && distEnd <= this.endDev);\n        }","id":18967,"modified_method":"public boolean evaluate(InternalWorkingMemory workingMemory,\n                                final InternalReadAccessor extractor1,\n                                final Object object1,\n                                final InternalReadAccessor extractor2,\n                                final Object object2) {\n            if ( extractor1.isNullValue( workingMemory,\n                                         object1 ) ) {\n                return false;\n            }\n            long rightStartTS, rightEndTS;\n            long leftStartTS, leftEndTS;\n\n            rightStartTS = this.unwrapRight ? extractor1.getLongValue( workingMemory,\n                                                                       object1 ) : ((EventFactHandle) object1).getStartTimestamp();\n            rightEndTS = this.unwrapRight ? rightStartTS : ((EventFactHandle) object1).getEndTimestamp();\n\n            leftStartTS = this.unwrapLeft ? extractor2.getLongValue( workingMemory,\n                                                                     object2 ) : ((EventFactHandle) object2).getStartTimestamp();\n            leftEndTS = this.unwrapLeft ? leftStartTS : ((EventFactHandle) object2).getEndTimestamp();\n\n            long distStart = Math.abs( rightStartTS - leftStartTS );\n            long distEnd = Math.abs( rightEndTS - leftEndTS );\n            return this.getOperator().isNegated() ^ (distStart <= this.startDev && distEnd <= this.endDev);\n        }","commit_id":"933e5e4e6cdb854202035138b72fca83d85471f2","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void readExternal(ObjectInput in) throws IOException,\n                                                ClassNotFoundException {\n            super.readExternal( in );\n            startDev = in.readLong();\n            endDev = in.readLong();\n            paramText = (String) in.readObject();\n        }","id":18968,"modified_method":"public void readExternal(ObjectInput in) throws IOException,\n                                                ClassNotFoundException {\n            super.readExternal( in );\n            startDev = in.readLong();\n            endDev = in.readLong();\n            unwrapLeft = in.readBoolean();\n            unwrapRight = in.readBoolean();\n            paramText = (String) in.readObject();\n        }","commit_id":"933e5e4e6cdb854202035138b72fca83d85471f2","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void writeExternal(ObjectOutput out) throws IOException {\n            super.writeExternal( out );\n            out.writeLong( startDev );\n            out.writeLong( endDev );\n            out.writeObject( paramText );\n        }","id":18969,"modified_method":"public void writeExternal(ObjectOutput out) throws IOException {\n            super.writeExternal( out );\n            out.writeLong( startDev );\n            out.writeLong( endDev );\n            out.writeBoolean( unwrapLeft );\n            out.writeBoolean( unwrapRight );\n            out.writeObject( paramText );\n        }","commit_id":"933e5e4e6cdb854202035138b72fca83d85471f2","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * @inheritDoc\n     */\n    public Evaluator getEvaluator(final ValueType type,\n                                  final String operatorId,\n                                  final boolean isNegated,\n                                  final String parameterText,\n                                  final Target left,\n                                  final Target right ) {\n        if ( this.cache == Collections.EMPTY_MAP ) {\n            this.cache = new HashMap<String, CoincidesEvaluator>();\n        }\n        String key = isNegated + \":\" + parameterText;\n        CoincidesEvaluator eval = this.cache.get( key );\n        if ( eval == null ) {\n            Long[] params = parser.parse( parameterText );\n            eval = new CoincidesEvaluator( type,\n                                           isNegated,\n                                           params,\n                                           parameterText );\n            this.cache.put( key,\n                            eval );\n        }\n        return eval;\n    }","id":18970,"modified_method":"/**\n     * @inheritDoc\n     */\n    public Evaluator getEvaluator(final ValueType type,\n                                  final String operatorId,\n                                  final boolean isNegated,\n                                  final String parameterText,\n                                  final Target left,\n                                  final Target right) {\n        if ( this.cache == Collections.EMPTY_MAP ) {\n            this.cache = new HashMap<String, CoincidesEvaluator>();\n        }\n        String key = left + \":\" + right + \":\" + isNegated + \":\" + parameterText;\n        CoincidesEvaluator eval = this.cache.get( key );\n        if ( eval == null ) {\n            Long[] params = parser.parse( parameterText );\n            eval = new CoincidesEvaluator( type,\n                                           isNegated,\n                                           params,\n                                           parameterText,\n                                           left == Target.FACT,\n                                           right == Target.FACT );\n            this.cache.put( key,\n                            eval );\n        }\n        return eval;\n    }","commit_id":"933e5e4e6cdb854202035138b72fca83d85471f2","url":"https://github.com/droolsjbpm/drools"},{"original_method":"@Override\n        public Object prepareLeftObject(InternalFactHandle handle) {\n            return handle;\n        }","id":18971,"modified_method":"@Override\n        public Object prepareLeftObject(InternalFactHandle handle) {\n            return unwrapLeft ? handle.getObject() : handle;\n        }","commit_id":"933e5e4e6cdb854202035138b72fca83d85471f2","url":"https://github.com/droolsjbpm/drools"},{"original_method":"@Override\n    public Response<LockResult> acquireExclusiveLock( RequestContext context, Locks.ResourceType type, long...\n            resourceIds )\n    {\n        return sendRequest( HaRequestType210.ACQUIRE_EXCLUSIVE_LOCK, context,\n                new AcquireLockSerializer( type, resourceIds ), LOCK_RESULT_DESERIALIZER );\n    }","id":18972,"modified_method":"@Override\n    public Response<LockResult> acquireExclusiveLock( RequestContext context, Locks.ResourceType type, long...\n            resourceIds )\n    {\n        msgLog.info( \"@@@ acquireExclusiveLock: type: \" + type + \" resources: \" + Arrays.toString( resourceIds ) );\n\n        return sendRequest( HaRequestType210.ACQUIRE_EXCLUSIVE_LOCK, context,\n                new AcquireLockSerializer( type, resourceIds ), LOCK_RESULT_DESERIALIZER );\n    }","commit_id":"8ff7e9ab57ce6dde37562661b83005145713b723","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public Response<LockResult> acquireSharedLock( RequestContext context, Locks.ResourceType type, long...\n            resourceIds )\n    {\n        return sendRequest( HaRequestType210.ACQUIRE_SHARED_LOCK, context,\n                new AcquireLockSerializer( type, resourceIds ), LOCK_RESULT_DESERIALIZER );\n    }","id":18973,"modified_method":"@Override\n    public Response<LockResult> acquireSharedLock( RequestContext context, Locks.ResourceType type, long...\n            resourceIds )\n    {\n        msgLog.info( \"@@@ acquireSharedLock: type: \" + type + \" resources: \" + Arrays.toString( resourceIds ) );\n        return sendRequest( HaRequestType210.ACQUIRE_SHARED_LOCK, context,\n                new AcquireLockSerializer( type, resourceIds ), LOCK_RESULT_DESERIALIZER );\n    }","commit_id":"8ff7e9ab57ce6dde37562661b83005145713b723","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public Response<LockResult> acquireSharedLock( RequestContext context, Locks.ResourceType type,\n            long... resourceIds )\n    {\n        assertCorrectEpoch( context );\n        LockSession session = resume( context );\n        try\n        {\n            session.client().acquireShared( type, resourceIds );\n            return packResponse( context, new LockResult( LockStatus.OK_LOCKED ) );\n        }\n        catch ( DeadlockDetectedException e )\n        {\n            return packResponse( context, new LockResult( e.getMessage() ) );\n        }\n        catch ( IllegalResourceException e )\n        {\n            return packResponse( context, new LockResult( LockStatus.NOT_LOCKED ) );\n        }\n        finally\n        {\n            suspend( context, session );\n        }\n    }","id":18974,"modified_method":"@Override\n    public Response<LockResult> acquireSharedLock( RequestContext context, Locks.ResourceType type,\n                                                   long... resourceIds )\n    {\n        msgLog.info( \"@@@ acquireSharedLock: IN: from: \" + context.machineId() + \" type: \" + type + \" resources: \" +\n                Arrays.toString( resourceIds ) );\n\n        assertCorrectEpoch( context );\n        LockSession session = resume( context );\n        try\n        {\n            session.client().acquireShared( type, resourceIds );\n            Response<LockResult> lockResultResponse = packResponse( context, new LockResult( LockStatus.OK_LOCKED ) );\n\n            msgLog.info( \"@@@ acquireSharedLock: OK: from: \" + context.machineId() + \" type: \" + type + \" resources: \" +\n                    Arrays.toString( resourceIds ) );\n\n            return lockResultResponse;\n        }\n        catch ( DeadlockDetectedException e )\n        {\n            Response<LockResult> lockResultResponse = packResponse( context, new LockResult( e.getMessage() ) );\n\n            msgLog.info( \"@@@ acquireSharedLock: NOK:deadlock from: \" + context.machineId() + \" type: \" + type +\n                    \" resources: \" + Arrays.toString( resourceIds ) );\n\n            return lockResultResponse;\n        }\n        catch ( IllegalResourceException e )\n        {\n            Response<LockResult> lockResultResponse = packResponse( context, new LockResult( LockStatus.NOT_LOCKED ) );\n\n            msgLog.info( \"@@@ acquireSharedLock: NOK:error from: \" + context.machineId() + \" type: \" + type + \" \" +\n                    \"resources: \" + Arrays.toString( resourceIds ) );\n\n            return lockResultResponse;\n        }\n        finally\n        {\n            suspend( context, session );\n        }\n    }","commit_id":"8ff7e9ab57ce6dde37562661b83005145713b723","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public Response<LockResult> acquireExclusiveLock( RequestContext context, Locks.ResourceType type, long...\n            resourceIds )\n    {\n        assertCorrectEpoch( context );\n        LockSession session = resume( context );\n        try\n        {\n            session.client().acquireExclusive( type, resourceIds );\n            return packResponse( context, new LockResult( LockStatus.OK_LOCKED ) );\n        }\n        catch ( DeadlockDetectedException e )\n        {\n            return packResponse( context, new LockResult( e.getMessage() ) );\n        }\n        catch ( IllegalResourceException e )\n        {\n            return packResponse( context, new LockResult( LockStatus.NOT_LOCKED ) );\n        }\n        finally\n        {\n            suspend( context, session );\n        }\n    }","id":18975,"modified_method":"@Override\n    public Response<LockResult> acquireExclusiveLock( RequestContext context, Locks.ResourceType type,\n                                                      long... resourceIds )\n    {\n        msgLog.info( \"@@@ acquireExclusiveLock: IN: from: \" + context.machineId() + \" type: \" + type + \" resources: \" +\n                Arrays.toString( resourceIds ) );\n\n        assertCorrectEpoch( context );\n        LockSession session = resume( context );\n        try\n        {\n            session.client().acquireExclusive( type, resourceIds );\n            Response<LockResult> lockResultResponse = packResponse( context, new LockResult( LockStatus.OK_LOCKED ) );\n\n            msgLog.info( \"@@@ acquireExclusiveLock: OK: from: \" + context.machineId() + \" type: \" + type + \" \" +\n                    \"resources: \" + Arrays.toString( resourceIds ) );\n\n            return lockResultResponse;\n        }\n        catch ( DeadlockDetectedException e )\n        {\n            Response<LockResult> lockResultResponse = packResponse( context, new LockResult( e.getMessage() ) );\n\n            msgLog.info( \"@@@ acquireExclusiveLock: NOK: from: \" + context.machineId() + \" type: \" + type + \" \" +\n                    \"resources: \" + Arrays.toString( resourceIds ) );\n\n            return lockResultResponse;\n        }\n        catch ( IllegalResourceException e )\n        {\n            Response<LockResult> lockResultResponse = packResponse( context, new LockResult( LockStatus.NOT_LOCKED ) );\n\n            msgLog.info( \"@@@ acquireExclusiveLock: NOK: from: \" + context.machineId() + \" type: \" + type + \" \" +\n                    \"resources: \" + Arrays.toString( resourceIds ) );\n\n            return lockResultResponse;\n        }\n        finally\n        {\n            suspend( context, session );\n        }\n    }","commit_id":"8ff7e9ab57ce6dde37562661b83005145713b723","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void stop(Container container) {\n        CreateContainerMetadata metadata = container.getMetadata();\n        if (!(metadata instanceof CreateJCloudsContainerMetadata)) {\n            throw new IllegalStateException(\"Container doesn't have valid create container metadata type\");\n        } else {\n            CreateJCloudsContainerMetadata jCloudsContainerMetadata = (CreateJCloudsContainerMetadata) metadata;\n            CreateJCloudsContainerOptions options =  jCloudsContainerMetadata.getCreateOptions();\n            try {\n                Credentials credentials = new Credentials(jCloudsContainerMetadata.getIdentity(),jCloudsContainerMetadata.getCredential());\n                String nodeId = jCloudsContainerMetadata.getNodeId();\n                ComputeService computeService = getOrCreateComputeService(options);\n                String script = buildStopScript(options.name(container.getId()));\n                if (credentials != null) {\n                    computeService.runScriptOnNode(nodeId, script, RunScriptOptions.Builder.overrideCredentialsWith(credentials).runAsRoot(false));\n                } else {\n                    computeService.runScriptOnNode(nodeId, script);\n                }\n            } catch (Throwable t) {\n                jCloudsContainerMetadata.setFailure(t);\n            }\n        }\n    }","id":18976,"modified_method":"@Override\n    public void stop(Container container) {\n        CreateContainerMetadata metadata = container.getMetadata();\n        if (!(metadata instanceof CreateJCloudsContainerMetadata)) {\n            throw new IllegalStateException(\"Container doesn't have valid create container metadata type\");\n        } else {\n            CreateJCloudsContainerMetadata jCloudsContainerMetadata = (CreateJCloudsContainerMetadata) metadata;\n            CreateJCloudsContainerOptions options =  jCloudsContainerMetadata.getCreateOptions();\n            try {\n                Credentials credentials = new Credentials(jCloudsContainerMetadata.getIdentity(),jCloudsContainerMetadata.getCredential());\n                String nodeId = jCloudsContainerMetadata.getNodeId();\n                ComputeService computeService = getOrCreateComputeService(options);\n                String script = buildStopScript(options.name(container.getId()));\n                ExecResponse response = null;\n                if (credentials != null) {\n                    response = computeService.runScriptOnNode(nodeId, script, RunScriptOptions.Builder.overrideCredentialsWith(credentials).runAsRoot(false));\n                } else {\n                    response = computeService.runScriptOnNode(nodeId, script);\n                }\n\n                if (response == null) {\n                    jCloudsContainerMetadata.setFailure(new Exception(\"No response received for fabric install script.\"));\n                } else if (response.getOutput() != null && response.getOutput().contains(\"Command failed\")) {\n                    jCloudsContainerMetadata.setFailure(new Exception(response.getError()));\n                }\n            } catch (Throwable t) {\n                jCloudsContainerMetadata.setFailure(t);\n            }\n        }\n    }","commit_id":"5f52b8dc6b496ef3f96351a7ea7da7edf88521e8","url":"https://github.com/fabric8io/fabric8"},{"original_method":"public Set<CreateJCloudsContainerMetadata> create(CreateJCloudsContainerOptions options) throws MalformedURLException, RunNodesException, URISyntaxException, InterruptedException {\n       final Set<CreateJCloudsContainerMetadata> result = new LinkedHashSet<CreateJCloudsContainerMetadata>();\n\n        ComputeService computeService = getOrCreateComputeService(options);\n\n        TemplateBuilder builder = computeService.templateBuilder();\n        builder.any();\n        switch (options.getInstanceType()) {\n            case Smallest:\n                builder.smallest();\n                break;\n            case Biggest:\n                builder.biggest();\n                break;\n            case Fastest:\n                builder.fastest();\n        }\n\n        if (options.getLocationId() != null) {\n            builder.locationId(options.getLocationId());\n        }\n        if (options.getImageId() != null) {\n            builder.imageId(options.getImageId());\n        }\n        if (options.getHardwareId() != null) {\n            builder.hardwareId(options.getHardwareId());\n        }\n\n        Set<? extends NodeMetadata> metadatas = null;\n\n        metadatas = computeService.createNodesInGroup(options.getGroup(), options.getNumber(), builder.build());\n\n        Thread.sleep(5000);\n\n        int suffix = 1;\n        StringBuilder buffer = new StringBuilder();\n        boolean first = true;\n        if (metadatas != null) {\n            String originalName = new String(options.getName());\n            for (NodeMetadata nodeMetadata : metadatas) {\n                Credentials credentials = null;\n                //For some cloud providers return do not allow shell access to root, so the user needs to be overrided.\n                if (options.getUser() != null) {\n                    credentials = new Credentials(options.getUser(), nodeMetadata.getCredentials().credential);\n                } else {\n                    credentials = nodeMetadata.getCredentials();\n                }\n                String id = nodeMetadata.getId();\n                Set<String> publicAddresses = nodeMetadata.getPublicAddresses();\n\n                String containerName;\n                if (options.getNumber() > 1) {\n                    containerName = originalName + (suffix++);\n                } else {\n                    containerName = originalName;\n                }\n\n                CreateJCloudsContainerMetadata jCloudsContainerMetadata = new CreateJCloudsContainerMetadata();\n                jCloudsContainerMetadata.setCreateOptions(options);\n                jCloudsContainerMetadata.setNodeId(nodeMetadata.getId());\n                jCloudsContainerMetadata.setContainerName(containerName);\n                jCloudsContainerMetadata.setPublicAddresses(nodeMetadata.getPublicAddresses());\n                jCloudsContainerMetadata.setHostname(nodeMetadata.getHostname());\n                jCloudsContainerMetadata.setIdentity(credentials.identity);\n                jCloudsContainerMetadata.setCredential(credentials.credential);\n\n                try {\n                    String script = buildInstallAndStartScript(options.name(containerName));\n                    if (credentials != null) {\n                        computeService.runScriptOnNode(id, script, RunScriptOptions.Builder.overrideCredentialsWith(credentials).runAsRoot(false));\n                    } else {\n                        computeService.runScriptOnNode(id, script);\n                    }\n                } catch (Throwable t) {\n                    jCloudsContainerMetadata.setFailure(t);\n                }\n\n                result.add(jCloudsContainerMetadata);\n            }\n        }\n        return result;\n    }","id":18977,"modified_method":"public Set<CreateJCloudsContainerMetadata> create(CreateJCloudsContainerOptions options) throws MalformedURLException, RunNodesException, URISyntaxException, InterruptedException {\n       final Set<CreateJCloudsContainerMetadata> result = new LinkedHashSet<CreateJCloudsContainerMetadata>();\n\n        ComputeService computeService = getOrCreateComputeService(options);\n\n        TemplateBuilder builder = computeService.templateBuilder();\n        builder.any();\n        switch (options.getInstanceType()) {\n            case Smallest:\n                builder.smallest();\n                break;\n            case Biggest:\n                builder.biggest();\n                break;\n            case Fastest:\n                builder.fastest();\n        }\n\n        if (options.getLocationId() != null) {\n            builder.locationId(options.getLocationId());\n        }\n        if (options.getImageId() != null) {\n            builder.imageId(options.getImageId());\n        }\n        if (options.getHardwareId() != null) {\n            builder.hardwareId(options.getHardwareId());\n        }\n\n        Set<? extends NodeMetadata> metadatas = null;\n\n        metadatas = computeService.createNodesInGroup(options.getGroup(), options.getNumber(), builder.build());\n\n        Thread.sleep(5000);\n\n        int suffix = 1;\n        StringBuilder buffer = new StringBuilder();\n        boolean first = true;\n        if (metadatas != null) {\n            String originalName = new String(options.getName());\n            for (NodeMetadata nodeMetadata : metadatas) {\n                Credentials credentials = null;\n                //For some cloud providers return do not allow shell access to root, so the user needs to be overrided.\n                if (options.getUser() != null) {\n                    credentials = new Credentials(options.getUser(), nodeMetadata.getCredentials().credential);\n                } else {\n                    credentials = nodeMetadata.getCredentials();\n                }\n                String id = nodeMetadata.getId();\n                Set<String> publicAddresses = nodeMetadata.getPublicAddresses();\n\n                String containerName;\n                if (options.getNumber() > 1) {\n                    containerName = originalName + (suffix++);\n                } else {\n                    containerName = originalName;\n                }\n\n                CreateJCloudsContainerMetadata jCloudsContainerMetadata = new CreateJCloudsContainerMetadata();\n                jCloudsContainerMetadata.setCreateOptions(options);\n                jCloudsContainerMetadata.setNodeId(nodeMetadata.getId());\n                jCloudsContainerMetadata.setContainerName(containerName);\n                jCloudsContainerMetadata.setPublicAddresses(publicAddresses);\n                jCloudsContainerMetadata.setHostname(nodeMetadata.getHostname());\n                jCloudsContainerMetadata.setIdentity(credentials.identity);\n                jCloudsContainerMetadata.setCredential(credentials.credential);\n\n                Properties addresses = new Properties();\n                if (publicAddresses != null && !publicAddresses.isEmpty()) {\n                    String publicAddress = publicAddresses.toArray(new String[publicAddresses.size()])[0];\n                    addresses.put(\"publicip\", publicAddress);\n                }\n\n                options.getSystemProperties().put(ContainerProviderUtils.ADDRESSES_PROPERTY_KEY,addresses);\n\n                try {\n                    String script = buildInstallAndStartScript(options.name(containerName));\n                    ExecResponse response = null;\n                    if (credentials != null) {\n                       response =  computeService.runScriptOnNode(id, script, RunScriptOptions.Builder.overrideCredentialsWith(credentials).runAsRoot(false));\n                    } else {\n                        response = computeService.runScriptOnNode(id, script);\n                    }\n                    if (response == null) {\n                        jCloudsContainerMetadata.setFailure(new Exception(\"No response received for fabric install script.\"));\n                    } else if (response.getOutput() != null && response.getOutput().contains(\"Command failed\")) {\n                        jCloudsContainerMetadata.setFailure(new Exception(response.getError()));\n                    }\n                } catch (Throwable t) {\n                    jCloudsContainerMetadata.setFailure(t);\n                }\n                //Cleanup addresses.\n                options.getSystemProperties().clear();\n                result.add(jCloudsContainerMetadata);\n            }\n        }\n        return result;\n    }","commit_id":"5f52b8dc6b496ef3f96351a7ea7da7edf88521e8","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Override\n    public void start(Container container) {\n        CreateContainerMetadata metadata = container.getMetadata();\n        if (!(metadata instanceof CreateJCloudsContainerMetadata)) {\n            throw new IllegalStateException(\"Container doesn't have valid create container metadata type\");\n        } else {\n            CreateJCloudsContainerMetadata jCloudsContainerMetadata = (CreateJCloudsContainerMetadata) metadata;\n            CreateJCloudsContainerOptions options = jCloudsContainerMetadata.getCreateOptions();\n            try {\n                Credentials credentials = new Credentials(jCloudsContainerMetadata.getIdentity(), jCloudsContainerMetadata.getCredential());\n                String nodeId = jCloudsContainerMetadata.getNodeId();\n                ComputeService computeService = getOrCreateComputeService(options);\n                String script = buildStartScript(options.name(container.getId()));\n                if (credentials != null) {\n                    computeService.runScriptOnNode(nodeId, script, RunScriptOptions.Builder.overrideCredentialsWith(credentials).runAsRoot(false));\n                } else {\n                    computeService.runScriptOnNode(nodeId, script);\n                }\n            } catch (Throwable t) {\n                jCloudsContainerMetadata.setFailure(t);\n            }\n        }\n    }","id":18978,"modified_method":"@Override\n    public void start(Container container) {\n        CreateContainerMetadata metadata = container.getMetadata();\n        if (!(metadata instanceof CreateJCloudsContainerMetadata)) {\n            throw new IllegalStateException(\"Container doesn't have valid create container metadata type\");\n        } else {\n            CreateJCloudsContainerMetadata jCloudsContainerMetadata = (CreateJCloudsContainerMetadata) metadata;\n            CreateJCloudsContainerOptions options = jCloudsContainerMetadata.getCreateOptions();\n            try {\n                Credentials credentials = new Credentials(jCloudsContainerMetadata.getIdentity(), jCloudsContainerMetadata.getCredential());\n                String nodeId = jCloudsContainerMetadata.getNodeId();\n                ComputeService computeService = getOrCreateComputeService(options);\n                String script = buildStartScript(options.name(container.getId()));\n                ExecResponse response = null;\n                if (credentials != null) {\n                    response = computeService.runScriptOnNode(nodeId, script, RunScriptOptions.Builder.overrideCredentialsWith(credentials).runAsRoot(false));\n                } else {\n                    response = computeService.runScriptOnNode(nodeId, script);\n                }\n                if (response == null) {\n                    jCloudsContainerMetadata.setFailure(new Exception(\"No response received for fabric install script.\"));\n                } else if (response.getOutput() != null && response.getOutput().contains(\"Command failed\")) {\n                    jCloudsContainerMetadata.setFailure(new Exception(response.getError()));\n                }\n            } catch (Throwable t) {\n                jCloudsContainerMetadata.setFailure(t);\n            }\n        }\n    }","commit_id":"5f52b8dc6b496ef3f96351a7ea7da7edf88521e8","url":"https://github.com/fabric8io/fabric8"},{"original_method":"/**\n     * Gets an existing {@link ComputeService} that matches configuration or creates a new one.\n     * @param options\n     * @return\n     */\n    private ComputeService getOrCreateComputeService(CreateJCloudsContainerOptions options) {\n        ComputeService computeService = null;\n        if (options != null) {\n            computeService = computeServiceMap.get(options.getProviderName());\n            if (computeService == null) {\n\n                Iterable<? extends Module> modules = ImmutableSet.of();\n\n                Properties props = new Properties();\n                props.put(\"provider\", options.getProviderName());\n                props.put(\"identity\", options.getIdentity());\n                props.put(\"credential\", options.getCredential());\n                if (!Strings.isNullOrEmpty(options.getOwner()) && options.getProviderName().equals(\"aws-ec2\")) {\n                    props.put(\"jclouds.ec2.ami-owners\", options.getOwner());\n                }\n\n                RestContextFactory restFactory = new RestContextFactory();\n                ComputeServiceContext context = new ComputeServiceContextFactory(restFactory).createContext(options.getProviderName(), options.getIdentity(), options.getCredential(), modules, props);\n                computeService = context.getComputeService();\n                computeServiceMap.put(options.getProviderName(),computeService);\n            }\n\n        }\n        return computeService;\n    }","id":18979,"modified_method":"/**\n     * Gets an existing {@link ComputeService} that matches configuration or creates a new one.\n     * @param options\n     * @return\n     */\n    private ComputeService getOrCreateComputeService(CreateJCloudsContainerOptions options) {\n        ComputeService computeService = null;\n        if (options != null) {\n            computeService = computeServiceMap.get(options.getProviderName());\n            if (computeService == null) {\n\n                if (options.getIdentity() == null || options.getCredential() == null) {\n                    throw new RuntimeException(\"Compute service not found, please specify provider, identity & credential in order to create one\");\n                }\n                Iterable<? extends Module> modules = ImmutableSet.of();\n\n                Properties props = new Properties();\n                props.put(\"provider\", options.getProviderName());\n                props.put(\"identity\", options.getIdentity());\n                props.put(\"credential\", options.getCredential());\n                if (!Strings.isNullOrEmpty(options.getOwner()) && options.getProviderName().equals(\"aws-ec2\")) {\n                    props.put(\"jclouds.ec2.ami-owners\", options.getOwner());\n                }\n\n                RestContextFactory restFactory = new RestContextFactory();\n                ComputeServiceContext context = new ComputeServiceContextFactory(restFactory).createContext(options.getProviderName(), options.getIdentity(), options.getCredential(), modules, props);\n                computeService = context.getComputeService();\n                computeServiceMap.put(options.getProviderName(),computeService);\n            }\n\n        }\n        return computeService;\n    }","commit_id":"5f52b8dc6b496ef3f96351a7ea7da7edf88521e8","url":"https://github.com/fabric8io/fabric8"},{"original_method":"/**\n     * @inheritDoc\n     * \n     *  When a new tuple is asserted into an AccumulateNode, do this:\n     *  \n     *  1. Select all matching objects from right memory\n     *  2. Execute the initialization code using the tuple + matching objects\n     *  3. Execute the accumulation code for each combination of tuple+object\n     *  4. Execute the return code\n     *  5. Create a new CalculatedObjectHandle for the resulting object and add it to the tuple\n     *  6. Propagate the tuple\n     *  \n     *  The initialization, accumulation and return codes, in JBRules, are assembled\n     *  into a generated method code and called once for the whole match, as you can see\n     *  bellow:\n     *  \n     *   Object result = this.accumulator.accumulate( ... );\n     *  \n     */\n    public void assertTuple(final ReteTuple leftTuple,\n                            final PropagationContext context,\n                            final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        memory.add( workingMemory,\n                    leftTuple );\n\n        //final BetaNodeBinder binder = getJoinNodeBinder();\n\n        final List matchingObjects = new ArrayList();\n        for ( final Iterator it = memory.rightObjectIterator( workingMemory,\n                                                              leftTuple ); it.hasNext(); ) {\n            final ObjectMatches objectMatches = (ObjectMatches) it.next();\n            final InternalFactHandle handle = objectMatches.getFactHandle();\n\n            if ( attemptJoin( leftTuple,\n                              handle,\n                              objectMatches,\n                              this.resultsBinder,\n                              workingMemory ) != null ) {\n                matchingObjects.add( handle.getObject() );\n            }\n        }\n\n        final Object result = this.accumulate.accumulate( leftTuple,\n                                                    matchingObjects,\n                                                    workingMemory );\n\n        // First alpha node filters\n        boolean isAllowed = true;\n        for ( int i = 0, length = this.constraints.length; i < length; i++ ) {\n            if ( !this.constraints[i].isAllowed( result,\n                                                 leftTuple,\n                                                 workingMemory ) ) {\n                isAllowed = false;\n                break;\n            }\n        }\n        if ( isAllowed ) {\n            final InternalFactHandle handle = workingMemory.getFactHandleFactory().newFactHandle( result );\n\n            if ( this.resultsBinder.isAllowed( handle,\n                                               leftTuple,\n                                               workingMemory ) ) {\n                this.sink.propagateAssertTuple( leftTuple,\n                                                handle,\n                                                context,\n                                                workingMemory );\n            }\n        }\n    }","id":18980,"modified_method":"/**\n     * @inheritDoc\n     * \n     *  When a new tuple is asserted into an AccumulateNode, do this:\n     *  \n     *  1. Select all matching objects from right memory\n     *  2. Execute the initialization code using the tuple + matching objects\n     *  3. Execute the accumulation code for each combination of tuple+object\n     *  4. Execute the return code\n     *  5. Create a new CalculatedObjectHandle for the resulting object and add it to the tuple\n     *  6. Propagate the tuple\n     *  \n     *  The initialization, accumulation and return codes, in JBRules, are assembled\n     *  into a generated method code and called once for the whole match, as you can see\n     *  bellow:\n     *  \n     *   Object result = this.accumulator.accumulate( ... );\n     *  \n     */\n    public void assertTuple(final ReteTuple leftTuple,\n                            final PropagationContext context,\n                            final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        memory.getTupleMemory().add( leftTuple );\n\n        final List matchingObjects = new ArrayList();\n        \n        final Iterator it = memory.getObjectMemory().iterator( leftTuple );\n        this.constraints.updateFromTuple( workingMemory,\n                                          leftTuple );\n\n        for ( FactEntry entry = (FactEntry) it.next(); entry != null; entry = (FactEntry) it.next() ) {\n            final InternalFactHandle handle = entry.getFactHandle();\n            if ( this.constraints.isAllowedCachedLeft( handle.getObject() ) ) {\n                matchingObjects.add( handle.getObject() );\n            }\n        }\n\n        final Object result = this.accumulate.accumulate( leftTuple,\n                                                          matchingObjects,\n                                                          workingMemory );\n        // First alpha node filters\n        boolean isAllowed = true;\n        for ( int i = 0, length = this.resultConstraints.length; i < length; i++ ) {\n            if ( !this.resultConstraints[i].isAllowed( result,\n                                                       workingMemory ) ) {\n                isAllowed = false;\n                break;\n            }\n        }\n        if ( isAllowed ) {\n            this.resultBinder.updateFromTuple( workingMemory, leftTuple );\n            if ( this.resultBinder.isAllowedCachedLeft( result ) ) {\n                final InternalFactHandle handle = workingMemory.getFactHandleFactory().newFactHandle( result );\n                memory.getCreatedHandles().put( leftTuple,\n                                                handle,\n                                                false );\n\n                sink.propagateAssertTuple( leftTuple,\n                                           handle,\n                                           context,\n                                           workingMemory );\n            }\n        }\n        \n    }","commit_id":"fb66ffeb0932b1181781b66560ff59be463c9335","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * @inheritDoc\n     * \n     * As the accumulate node will always propagate the tuple,\n     * it must always also retreat it.\n     * \n     */\n    public void retractTuple(final ReteTuple leftTuple,\n                             final PropagationContext context,\n                             final InternalWorkingMemory workingMemory) {\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n        memory.remove( workingMemory,\n                       leftTuple );\n\n        final Map matches = leftTuple.getTupleMatches();\n\n        if ( !matches.isEmpty() ) {\n            for ( final Iterator it = matches.values().iterator(); it.hasNext(); ) {\n                final CompositeTupleMatch compositeTupleMatch = (CompositeTupleMatch) it.next();\n                compositeTupleMatch.getObjectMatches().remove( compositeTupleMatch );\n                it.remove();\n            }\n        }\n\n        // if tuple was propagated\n        if ( (leftTuple.getChildEntries() != null) && (leftTuple.getChildEntries().size() > 0) ) {\n            // Need to store the accumulate result object for later disposal\n            final InternalFactHandle lastHandle = ((ReteTuple) ((LinkedListEntry) leftTuple.getChildEntries().getFirst()).getObject()).getLastHandle();\n\n            leftTuple.retractChildEntries( context,\n                                           workingMemory );\n\n            // Destroying the acumulate result object \n            workingMemory.getFactHandleFactory().destroyFactHandle( lastHandle );\n        }\n    }","id":18981,"modified_method":"/**\n     * @inheritDoc\n     * \n     * As the accumulate node will always propagate the tuple,\n     * it must always also retreat it.\n     * \n     */\n    public void retractTuple(final ReteTuple leftTuple,\n                             final PropagationContext context,\n                             final InternalWorkingMemory workingMemory) {\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n        memory.getTupleMemory().remove( leftTuple );\n        final InternalFactHandle handle = (InternalFactHandle) memory.getCreatedHandles().remove( leftTuple );\n\n        // if tuple was propagated\n        if ( handle != null ) {\n\n            this.sink.propagateRetractTuple( leftTuple,\n                                             handle,\n                                             context,\n                                             workingMemory );\n\n            // Destroying the acumulate result object \n            workingMemory.getFactHandleFactory().destroyFactHandle( handle );\n        }\n    }","commit_id":"fb66ffeb0932b1181781b66560ff59be463c9335","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * @inheritDoc\n     * \n     * As the accumulate node will propagate the tuple,\n     * but will recalculate the accumulated result object every time,\n     * a modify is really a retract + assert. \n     * \n     */\n    public void modifyTuple(final ReteTuple leftTuple,\n                            final PropagationContext context,\n                            final InternalWorkingMemory workingMemory) {\n\n        this.retractTuple( leftTuple,\n                           context,\n                           workingMemory );\n        this.assertTuple( leftTuple,\n                          context,\n                          workingMemory );\n\n    }","id":18982,"modified_method":"public void updateSink(TupleSink sink,\n                           PropagationContext context,\n                           InternalWorkingMemory workingMemory) {\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n        \n        final Iterator it = memory.getCreatedHandles().iterator();\n\n        for ( ObjectEntry entry = (ObjectEntry) it.next(); entry != null; entry = (ObjectEntry) it.next()) {\n            sink.assertTuple( new ReteTuple( (ReteTuple)entry.getKey(),\n                                             (InternalFactHandle) entry.getValue()),\n                              context,\n                              workingMemory );\n        }\n    }","commit_id":"fb66ffeb0932b1181781b66560ff59be463c9335","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * @inheritDoc\n     * \n     *  When a new object is asserted into an AccumulateNode, do this:\n     *  \n     *  1. Select all matching tuples from left memory\n     *  2. For each matching tuple, call a modify tuple\n     *  \n     */\n    public void assertObject(final InternalFactHandle handle,\n                             final PropagationContext context,\n                             final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n        memory.add( workingMemory,\n                    handle );\n\n        final BetaConstraints binder = constraints();\n        for ( final Iterator it = memory.leftTupleIterator( workingMemory,\n                                                            handle ); it.hasNext(); ) {\n            final ReteTuple leftTuple = (ReteTuple) it.next();\n\n            if ( binder.isAllowed( handle,\n                                   leftTuple,\n                                   workingMemory ) ) {\n                this.modifyTuple( leftTuple,\n                                  context,\n                                  workingMemory );\n            }\n        }\n\n    }","id":18983,"modified_method":"/**\n     * @inheritDoc\n     * \n     *  When a new object is asserted into an AccumulateNode, do this:\n     *  \n     *  1. Select all matching tuples from left memory\n     *  2. For each matching tuple, call a modify tuple\n     *  \n     */\n    public void assertObject(final InternalFactHandle handle,\n                             final PropagationContext context,\n                             final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n        memory.getObjectMemory().add( handle );\n\n        final Iterator it = memory.getTupleMemory().iterator();\n        this.constraints.updateFromFactHandle( workingMemory,\n                                               handle );\n        for ( ReteTuple tuple = (ReteTuple) it.next(); tuple != null; tuple = (ReteTuple) it.next() ) {\n            if ( this.constraints.isAllowedCachedRight( tuple ) ) {\n                this.retractTuple( tuple,\n                                   context,\n                                   workingMemory );\n                this.assertTuple( tuple,\n                                  context,\n                                  workingMemory );\n            }\n        }\n    }","commit_id":"fb66ffeb0932b1181781b66560ff59be463c9335","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public AccumulateNode(final int id,\n                          final TupleSource leftInput,\n                          final ObjectSource rightInput,\n                          final AlphaNodeFieldConstraint[] constraints,\n                          final BetaConstraints sourceBinder,\n                          final BetaConstraints resultsBinder,\n                          final Accumulate accumulate) {\n        super( id,\n               leftInput,\n               rightInput,\n               sourceBinder );\n        this.resultsBinder = resultsBinder;\n        this.constraints = constraints;\n        this.accumulate = accumulate;\n    }","id":18984,"modified_method":"public AccumulateNode(final int id,\n                          final TupleSource leftInput,\n                          final ObjectSource rightInput,\n                          final AlphaNodeFieldConstraint[] resultConstraints,\n                          final BetaConstraints sourceBinder,\n                          final BetaConstraints resultBinder,\n                          final Accumulate accumulate) {\n        super( id,\n               leftInput,\n               rightInput,\n               sourceBinder );\n        this.resultBinder = resultBinder;\n        this.resultConstraints = resultConstraints;\n        this.accumulate = accumulate;\n    }","commit_id":"fb66ffeb0932b1181781b66560ff59be463c9335","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * Construct.\n     * \n     * @param id\n     *            The id for the node\n     * @param leftInput\n     *            The left input <code>TupleSource<\/code>.\n     * @param rightInput\n     *            The right input <code>ObjectSource<\/code>.\n     * @param accumulate\n     *            The accumulate conditional element\n     */\n    AccumulateNode(final int id,\n                   final TupleSource leftInput,\n                   final ObjectSource rightInput,\n                   final Accumulate accumulate) {\n        this( id,\n              leftInput,\n              rightInput,\n              new AlphaNodeFieldConstraint[0],\n              new DefaultBetaConstraints(),\n              new DefaultBetaConstraints(),\n              accumulate );\n    }","id":18985,"modified_method":"/**\n     * Construct.\n     * \n     * @param id\n     *            The id for the node\n     * @param leftInput\n     *            The left input <code>TupleSource<\/code>.\n     * @param rightInput\n     *            The right input <code>ObjectSource<\/code>.\n     * @param accumulate\n     *            The accumulate conditional element\n     */\n    AccumulateNode(final int id,\n                   final TupleSource leftInput,\n                   final ObjectSource rightInput,\n                   final Accumulate accumulate) {\n        this( id,\n              leftInput,\n              rightInput,\n              new AlphaNodeFieldConstraint[0],\n              EmptyBetaConstraints.getInstance(),\n              EmptyBetaConstraints.getInstance(),\n              accumulate );\n    }","commit_id":"fb66ffeb0932b1181781b66560ff59be463c9335","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     *  @inheritDoc\n     *  \n     *  If an object is retract, call modify tuple for each\n     *  tuple match.\n     */\n    public void retractObject(final InternalFactHandle handle,\n                              final PropagationContext context,\n                              final InternalWorkingMemory workingMemory) {\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        // Remove the FactHandle from memory\n        final ObjectMatches objectMatches = memory.remove( workingMemory,\n                                                           handle );\n\n        for ( CompositeTupleMatch compositeTupleMatch = objectMatches.getFirstTupleMatch(); compositeTupleMatch != null; compositeTupleMatch = (CompositeTupleMatch) compositeTupleMatch.getNext() ) {\n            final ReteTuple leftTuple = compositeTupleMatch.getTuple();\n            leftTuple.removeMatch( handle );\n\n            this.modifyTuple( leftTuple,\n                              context,\n                              workingMemory );\n        }\n    }","id":18986,"modified_method":"/**\n     *  @inheritDoc\n     *  \n     *  If an object is retract, call modify tuple for each\n     *  tuple match.\n     */\n    public void retractObject(final InternalFactHandle handle,\n                              final PropagationContext context,\n                              final InternalWorkingMemory workingMemory) {\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n        if ( !memory.getObjectMemory().remove( handle ) ) {\n            return;\n        }\n\n        final Iterator it = memory.getTupleMemory().iterator();\n        this.constraints.updateFromFactHandle( workingMemory,\n                                               handle );\n        for ( ReteTuple tuple = (ReteTuple) it.next(); tuple != null; tuple = (ReteTuple) it.next() ) {\n            if ( this.constraints.isAllowedCachedRight( tuple ) ) {\n                this.retractTuple( tuple,\n                                   context,\n                                   workingMemory );\n                this.assertTuple( tuple,\n                                  context,\n                                  workingMemory );\n            }\n        }\n    }","commit_id":"fb66ffeb0932b1181781b66560ff59be463c9335","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * @inheritDoc\n     * \n     *  When a new tuple is asserted into a CollectNode, do this:\n     *  \n     *  1. Select all matching objects from right memory\n     *  2. Add them to the resulting collection object\n     *  3. Apply resultConstraints and resultsBinder to the resulting collection\n     *  4. In case all of them evaluates to true do the following:\n     *  4.1. Create a new InternalFactHandle for the resulting collection and add it to the tuple\n     *  4.2. Propagate the tuple\n     *  \n     */\n    public void assertTuple(final ReteTuple leftTuple,\n                            final PropagationContext context,\n                            final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        memory.getTupleMemory().add( leftTuple );\n\n        final Collection result = this.collect.instantiateResultObject();\n        final Iterator it = memory.getObjectMemory().iterator( leftTuple );\n        this.constraints.updateFromTuple( workingMemory,\n                                          leftTuple );\n\n        for ( FactEntry entry = (FactEntry) it.next(); entry != null; entry = (FactEntry) it.next() ) {\n            final InternalFactHandle handle = entry.getFactHandle();\n            if ( this.constraints.isAllowedCachedLeft( handle.getObject() ) ) {\n                result.add( handle.getObject() );\n            }\n        }\n\n        // First alpha node filters\n        boolean isAllowed = true;\n        for ( int i = 0, length = this.resultConstraints.length; i < length; i++ ) {\n            if ( !this.resultConstraints[i].isAllowed( result,\n                                                       workingMemory ) ) {\n                isAllowed = false;\n                break;\n            }\n        }\n        if ( isAllowed ) {\n            if ( this.resultsBinder.isAllowedCachedLeft( result ) ) {\n                final InternalFactHandle handle = workingMemory.getFactHandleFactory().newFactHandle( result );\n                memory.getCreatedHandles().put( leftTuple,\n                                                handle,\n                                                false );\n\n                sink.propagateAssertTuple( leftTuple,\n                                           handle,\n                                           context,\n                                           workingMemory );\n            }\n        }\n    }","id":18987,"modified_method":"/**\n     * @inheritDoc\n     * \n     *  When a new tuple is asserted into a CollectNode, do this:\n     *  \n     *  1. Select all matching objects from right memory\n     *  2. Add them to the resulting collection object\n     *  3. Apply resultConstraints and resultsBinder to the resulting collection\n     *  4. In case all of them evaluates to true do the following:\n     *  4.1. Create a new InternalFactHandle for the resulting collection and add it to the tuple\n     *  4.2. Propagate the tuple\n     *  \n     */\n    public void assertTuple(final ReteTuple leftTuple,\n                            final PropagationContext context,\n                            final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        memory.getTupleMemory().add( leftTuple );\n\n        final Collection result = this.collect.instantiateResultObject();\n        final Iterator it = memory.getObjectMemory().iterator( leftTuple );\n        this.constraints.updateFromTuple( workingMemory,\n                                          leftTuple );\n\n        for ( FactEntry entry = (FactEntry) it.next(); entry != null; entry = (FactEntry) it.next() ) {\n            final InternalFactHandle handle = entry.getFactHandle();\n            if ( this.constraints.isAllowedCachedLeft( handle.getObject() ) ) {\n                result.add( handle.getObject() );\n            }\n        }\n\n        // First alpha node filters\n        boolean isAllowed = true;\n        for ( int i = 0, length = this.resultConstraints.length; i < length; i++ ) {\n            if ( !this.resultConstraints[i].isAllowed( result,\n                                                       workingMemory ) ) {\n                isAllowed = false;\n                break;\n            }\n        }\n        if ( isAllowed ) {\n            this.resultsBinder.updateFromTuple( workingMemory, leftTuple );\n            if ( this.resultsBinder.isAllowedCachedLeft( result ) ) {\n                final InternalFactHandle handle = workingMemory.getFactHandleFactory().newFactHandle( result );\n                memory.getCreatedHandles().put( leftTuple,\n                                                handle,\n                                                false );\n\n                sink.propagateAssertTuple( leftTuple,\n                                           handle,\n                                           context,\n                                           workingMemory );\n            }\n        }\n    }","commit_id":"fb66ffeb0932b1181781b66560ff59be463c9335","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * @inheritDoc\n     */\n    public void retractTuple(final ReteTuple leftTuple,\n                             final PropagationContext context,\n                             final InternalWorkingMemory workingMemory) {\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n        memory.getTupleMemory().remove( leftTuple );\n        \n        \n        \n\n        final Map matches = leftTuple.getTupleMatches();\n\n        if ( !matches.isEmpty() ) {\n            for ( final Iterator it = matches.values().iterator(); it.hasNext(); ) {\n                final CompositeTupleMatch compositeTupleMatch = (CompositeTupleMatch) it.next();\n                compositeTupleMatch.getObjectMatches().remove( compositeTupleMatch );\n                it.remove();\n            }\n        }\n\n        // if tuple was propagated\n        if ( (leftTuple.getChildEntries() != null) && (leftTuple.getChildEntries().size() > 0) ) {\n            // Need to store the collection result object for later disposal\n            final InternalFactHandle lastHandle = ((ReteTuple) ((LinkedListEntry) leftTuple.getChildEntries().getFirst()).getObject()).getLastHandle();\n\n            leftTuple.retractChildEntries( context,\n                                           workingMemory );\n\n            // Destroying the acumulate result object \n            workingMemory.getFactHandleFactory().destroyFactHandle( lastHandle );\n        }\n    }","id":18988,"modified_method":"/**\n     * @inheritDoc\n     */\n    public void retractTuple(final ReteTuple leftTuple,\n                             final PropagationContext context,\n                             final InternalWorkingMemory workingMemory) {\n        // FIXME\n//        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n//        memory.getTupleMemory().remove( leftTuple );\n//        \n//        final Map matches = leftTuple.getTupleMatches();\n//\n//        if ( !matches.isEmpty() ) {\n//            for ( final Iterator it = matches.values().iterator(); it.hasNext(); ) {\n//                final CompositeTupleMatch compositeTupleMatch = (CompositeTupleMatch) it.next();\n//                compositeTupleMatch.getObjectMatches().remove( compositeTupleMatch );\n//                it.remove();\n//            }\n//        }\n//\n//        // if tuple was propagated\n//        if ( (leftTuple.getChildEntries() != null) && (leftTuple.getChildEntries().size() > 0) ) {\n//            // Need to store the collection result object for later disposal\n//            final InternalFactHandle lastHandle = ((ReteTuple) ((LinkedListEntry) leftTuple.getChildEntries().getFirst()).getObject()).getLastHandle();\n//\n//            leftTuple.retractChildEntries( context,\n//                                           workingMemory );\n//\n//            // Destroying the acumulate result object \n//            workingMemory.getFactHandleFactory().destroyFactHandle( lastHandle );\n//        }\n    }","commit_id":"f426078952a4cf8c378efc34a4ff78ae54f0d993","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     *  @inheritDoc\n     *  \n     *  If an object is retract, call modify tuple for each\n     *  tuple match.\n     */\n    public void retractObject(final InternalFactHandle handle,\n                              final PropagationContext context,\n                              final InternalWorkingMemory workingMemory) {\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        // Remove the FactHandle from memory\n        final ObjectMatches objectMatches = memory.remove( workingMemory,\n                                                           handle );\n\n        for ( CompositeTupleMatch compositeTupleMatch = objectMatches.getFirstTupleMatch(); compositeTupleMatch != null; compositeTupleMatch = (CompositeTupleMatch) compositeTupleMatch.getNext() ) {\n            final ReteTuple leftTuple = compositeTupleMatch.getTuple();\n            leftTuple.removeMatch( handle );\n\n            this.modifyTuple( leftTuple,\n                              context,\n                              workingMemory );\n        }\n    }","id":18989,"modified_method":"/**\n     *  @inheritDoc\n     *  \n     *  If an object is retract, call modify tuple for each\n     *  tuple match.\n     */\n    public void retractObject(final InternalFactHandle handle,\n                              final PropagationContext context,\n                              final InternalWorkingMemory workingMemory) {\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        // FIXME\n    }","commit_id":"f426078952a4cf8c378efc34a4ff78ae54f0d993","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * @inheritDoc\n     * \n     *  When a new tuple is asserted into a CollectNode, do this:\n     *  \n     *  1. Select all matching objects from right memory\n     *  2. Add them to the resulting collection object\n     *  3. Apply resultConstraints and resultsBinder to the resulting collection\n     *  4. In case all of them evaluates to true do the following:\n     *  4.1. Create a new InternalFactHandle for the resulting collection and add it to the tuple\n     *  4.2. Propagate the tuple\n     *  \n     */\n    public void assertTuple(final ReteTuple leftTuple,\n                            final PropagationContext context,\n                            final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        memory.getTupleMemory().add( leftTuple );\n\n        final Collection result = this.collect.instantiateResultObject();\n        final org.drools.util.Iterator it = memory.getObjectMemory().iterator( leftTuple );\n        this.constraints.updateFromTuple( workingMemory, leftTuple );\n        \n        for ( FactEntry entry = (FactEntry) it.next(); entry != null; entry = (FactEntry) it.next() ) {\n            final InternalFactHandle handle = entry.getFactHandle();\n            if ( this.constraints.isAllowedCachedLeft( handle.getObject() ) ) {\n                result.add( handle.getObject() );\n            }\n        }\n\n        // First alpha node filters\n        boolean isAllowed = true;\n        for ( int i = 0, length = this.resultConstraints.length; i < length; i++ ) {\n            if ( !this.resultConstraints[i].isAllowed( result,\n                                                       workingMemory ) ) {\n                isAllowed = false;\n                break;\n            }\n        }\n        if ( isAllowed ) {\n            final InternalFactHandle handle = workingMemory.getFactHandleFactory().newFactHandle( result );\n\n            if ( this.resultsBinder.isAllowedCachedLeft( result ) ) {\n                this.sink.propagateAssertTuple( leftTuple,\n                                                handle,\n                                                context,\n                                                workingMemory );\n            }\n        }\n    }","id":18990,"modified_method":"/**\n     * @inheritDoc\n     * \n     *  When a new tuple is asserted into a CollectNode, do this:\n     *  \n     *  1. Select all matching objects from right memory\n     *  2. Add them to the resulting collection object\n     *  3. Apply resultConstraints and resultsBinder to the resulting collection\n     *  4. In case all of them evaluates to true do the following:\n     *  4.1. Create a new InternalFactHandle for the resulting collection and add it to the tuple\n     *  4.2. Propagate the tuple\n     *  \n     */\n    public void assertTuple(final ReteTuple leftTuple,\n                            final PropagationContext context,\n                            final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        memory.getTupleMemory().add( leftTuple );\n\n        final Collection result = this.collect.instantiateResultObject();\n        final Iterator it = memory.getObjectMemory().iterator( leftTuple );\n        this.constraints.updateFromTuple( workingMemory, leftTuple );\n        \n        for ( FactEntry entry = (FactEntry) it.next(); entry != null; entry = (FactEntry) it.next() ) {\n            final InternalFactHandle handle = entry.getFactHandle();\n            if ( this.constraints.isAllowedCachedLeft( handle.getObject() ) ) {\n                result.add( handle.getObject() );\n            }\n        }\n\n        // First alpha node filters\n        boolean isAllowed = true;\n        for ( int i = 0, length = this.resultConstraints.length; i < length; i++ ) {\n            if ( !this.resultConstraints[i].isAllowed( result,\n                                                       workingMemory ) ) {\n                isAllowed = false;\n                break;\n            }\n        }\n        if ( isAllowed ) {\n            final InternalFactHandle handle = workingMemory.getFactHandleFactory().newFactHandle( result );\n\n            if ( this.resultsBinder.isAllowedCachedLeft( result ) ) {\n                this.sink.propagateAssertTuple( leftTuple,\n                                                handle,\n                                                context,\n                                                workingMemory );\n            }\n        }\n    }","commit_id":"f426078952a4cf8c378efc34a4ff78ae54f0d993","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void updateSink(TupleSink sink,\n                           PropagationContext context,\n                           InternalWorkingMemory workingMemory) {\n        // TODO Auto-generated method stub\n        \n    }","id":18991,"modified_method":"public void updateSink(TupleSink sink,\n                           PropagationContext context,\n                           InternalWorkingMemory workingMemory) {\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n\n        final Iterator tupleIter = memory.getTupleMemory().iterator();\n        for ( ReteTuple tuple = (ReteTuple) tupleIter.next(); tuple != null; tuple = (ReteTuple) tupleIter.next() ) {\n            final Iterator objectIter = memory.getObjectMemory().iterator( tuple );\n            this.constraints.updateFromTuple( workingMemory, tuple );\n            for ( FactEntry entry = (FactEntry) objectIter.next(); entry != null; entry = (FactEntry) objectIter.next() ) {\n                final InternalFactHandle handle = entry.getFactHandle();\n                if ( this.constraints.isAllowedCachedLeft( handle.getObject() ) ) {\n                    sink.assertTuple( new ReteTuple( tuple,\n                                                     handle ),\n                                      context,\n                                      workingMemory );\n                }\n            }\n        }\n    }","commit_id":"f426078952a4cf8c378efc34a4ff78ae54f0d993","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * @inheritDoc\n     * \n     *  When a new object is asserted into a CollectNode, do this:\n     *  \n     *  1. Select all matching tuples from left memory\n     *  2. For each matching tuple, call a modify tuple\n     *  \n     */\n    public void assertObject(final InternalFactHandle handle,\n                             final PropagationContext context,\n                             final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n        memory.add( workingMemory,\n                    handle );\n\n        final BetaConstraints binder = constraints();\n        for ( final Iterator it = memory.leftTupleIterator( workingMemory,\n                                                            handle ); it.hasNext(); ) {\n            final ReteTuple leftTuple = (ReteTuple) it.next();\n\n            if ( binder.isAllowed( handle,\n                                   leftTuple,\n                                   workingMemory ) ) {\n                this.modifyTuple( leftTuple,\n                                  context,\n                                  workingMemory );\n            }\n        }\n\n    }","id":18992,"modified_method":"/**\n     * @inheritDoc\n     * \n     *  When a new object is asserted into a CollectNode, do this:\n     *  \n     *  1. Select all matching tuples from left memory\n     *  2. For each matching tuple, call a modify tuple\n     *  \n     */\n    public void assertObject(final InternalFactHandle handle,\n                             final PropagationContext context,\n                             final InternalWorkingMemory workingMemory) {\n\n        final BetaMemory memory = (BetaMemory) workingMemory.getNodeMemory( this );\n        memory.getObjectMemory().add( handle );\n\n        final Iterator it = memory.getTupleMemory().iterator();\n        this.constraints.updateFromFactHandle( workingMemory, handle );\n        for ( ReteTuple tuple = (ReteTuple) it.next(); tuple != null; tuple = (ReteTuple) it.next() ) {\n            if ( this.constraints.isAllowedCachedRight( tuple ) ) {\n                this.retractTuple( tuple, context, workingMemory );\n                this.assertTuple( tuple, context, workingMemory );\n            }\n        }\n    }","commit_id":"f426078952a4cf8c378efc34a4ff78ae54f0d993","url":"https://github.com/droolsjbpm/drools"},{"original_method":"@Test(expected = ForbiddenException.class)\n  public void fail_when_no_sufficent_privilege_on_file_uuid() throws Exception {\n    userSessionRule.addProjectUuidPermissions(UserRole.USER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(), TestFile1.newDto());\n    db.getSession().commit();\n    ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_FILE_ID, TestFile1.FILE_UUID).execute();\n  }","id":18993,"modified_method":"@Test(expected = ForbiddenException.class)\n  public void fail_when_no_sufficent_privilege_on_file_uuid() throws Exception {\n    userSessionRule.addProjectUuidPermissions(UserRole.USER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(), TestFile1.dto());\n    db.getSession().commit();\n    ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_FILE_ID, TestFile1.FILE_UUID).execute();\n  }","commit_id":"4942f2824202671ab5ef9a9895e48c35b018b62f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void list_based_on_test_file_key() throws Exception {\n    userSessionRule.addComponentPermission(UserRole.CODEVIEWER, TestFile1.PROJECT_UUID, TestFile1.KEY);\n    dbClient.componentDao().insert(db.getSession(), TestFile1.newDto());\n    db.getSession().commit();\n\n    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE,\n      new TestDoc()\n        .setUuid(TestFile1.UUID)\n        .setProjectUuid(TestFile1.PROJECT_UUID)\n        .setName(TestFile1.NAME)\n        .setFileUuid(TestFile1.FILE_UUID)\n        .setDurationInMs(TestFile1.DURATION_IN_MS)\n        .setCoveredFiles(TestFile1.COVERED_FILES)\n        .setStatus(TestFile1.STATUS)\n        .setMessage(TestFile1.MESSAGE)\n        .setStackTrace(TestFile1.STACKTRACE)\n    );\n\n    WsTester.TestRequest request = ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_FILE_KEY, TestFile1.KEY);\n\n    request.execute().assertJson(getClass(), \"list-test-uuid.json\");\n  }","id":18994,"modified_method":"@Test\n  public void list_based_on_test_file_key() throws Exception {\n    userSessionRule.addComponentPermission(UserRole.CODEVIEWER, TestFile1.PROJECT_UUID, TestFile1.KEY);\n    dbClient.componentDao().insert(db.getSession(), TestFile1.dto());\n    db.getSession().commit();\n\n    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE, TestFile1.doc());\n\n    WsTester.TestRequest request = ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_FILE_KEY, TestFile1.KEY);\n\n    request.execute().assertJson(getClass(), \"list-test-uuid.json\");\n  }","commit_id":"4942f2824202671ab5ef9a9895e48c35b018b62f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void list_based_on_source_file_key_and_line_number() throws Exception {\n    String sourceFileUuid = \"MAIN-FILE-UUID\";\n    String sourceFileKey = \"MAIN-FILE-KEY\";\n    userSessionRule.addProjectUuidPermissions(UserRole.CODEVIEWER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(),\n      new ComponentDto()\n        .setUuid(TestFile1.FILE_UUID)\n        .setLongName(TestFile1.LONG_NAME)\n        .setKey(TestFile1.KEY)\n        .setProjectUuid(TestFile1.PROJECT_UUID),\n      new ComponentDto()\n        .setUuid(TestFile2.FILE_UUID)\n        .setLongName(TestFile2.LONG_NAME)\n        .setProjectUuid(TestFile2.PROJECT_UUID)\n        .setKey(TestFile2.KEY),\n      new ComponentDto()\n        .setUuid(sourceFileUuid)\n        .setKey(sourceFileKey)\n        .setProjectUuid(TestFile1.PROJECT_UUID)\n    );\n    db.getSession().commit();\n\n    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE,\n      new TestDoc()\n        .setUuid(TestFile1.UUID)\n        .setProjectUuid(TestFile1.PROJECT_UUID)\n        .setName(TestFile1.NAME)\n        .setFileUuid(TestFile1.FILE_UUID)\n        .setDurationInMs(TestFile1.DURATION_IN_MS)\n        .setStatus(TestFile1.STATUS)\n        .setMessage(TestFile1.MESSAGE)\n        .setCoveredFiles(TestFile1.COVERED_FILES)\n        .setStackTrace(TestFile1.STACKTRACE),\n      new TestDoc()\n        .setUuid(TestFile2.UUID)\n        .setProjectUuid(TestFile2.PROJECT_UUID)\n        .setName(TestFile2.NAME)\n        .setFileUuid(TestFile2.FILE_UUID)\n        .setDurationInMs(TestFile2.DURATION_IN_MS)\n        .setStatus(TestFile2.STATUS)\n        .setStackTrace(TestFile2.STATUS)\n        .setMessage(TestFile2.MESSAGE)\n        .setCoveredFiles(TestFile2.COVERED_FILES)\n        .setStackTrace(TestFile2.STACKTRACE));\n\n    WsTester.TestRequest request = ws.newGetRequest(\"api/tests\", \"list\")\n      .setParam(ListAction.SOURCE_FILE_KEY, sourceFileKey)\n      .setParam(ListAction.SOURCE_FILE_LINE_NUMBER, \"10\");\n\n    request.execute().assertJson(getClass(), \"list-main-file.json\");\n  }","id":18995,"modified_method":"@Test\n  public void list_based_on_source_file_key_and_line_number() throws Exception {\n    String sourceFileUuid = \"MAIN-FILE-UUID\";\n    String sourceFileKey = \"MAIN-FILE-KEY\";\n    userSessionRule.addProjectUuidPermissions(UserRole.CODEVIEWER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(),\n      TestFile1.dto(),\n      TestFile2.dto(),\n      new ComponentDto()\n        .setUuid(sourceFileUuid)\n        .setKey(sourceFileKey)\n        .setProjectUuid(TestFile1.PROJECT_UUID));\n    db.getSession().commit();\n\n    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE,\n      TestFile1.doc(), TestFile2.doc());\n\n    WsTester.TestRequest request = ws.newGetRequest(\"api/tests\", \"list\")\n      .setParam(ListAction.SOURCE_FILE_KEY, sourceFileKey)\n      .setParam(ListAction.SOURCE_FILE_LINE_NUMBER, \"10\");\n\n    request.execute().assertJson(getClass(), \"list-main-file.json\");\n  }","commit_id":"4942f2824202671ab5ef9a9895e48c35b018b62f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test(expected = ForbiddenException.class)\n  public void fail_when_no_sufficent_privilege_on_test_uuid() throws Exception {\n    userSessionRule.addProjectUuidPermissions(UserRole.USER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(), TestFile1.newDto());\n    db.getSession().commit();\n    ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_FILE_ID, TestFile1.FILE_UUID).execute();\n  }","id":18996,"modified_method":"@Test(expected = ForbiddenException.class)\n  public void fail_when_no_sufficent_privilege_on_test_uuid() throws Exception {\n    userSessionRule.addProjectUuidPermissions(UserRole.USER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(), TestFile1.dto());\n    db.getSession().commit();\n    ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_FILE_ID, TestFile1.FILE_UUID).execute();\n  }","commit_id":"4942f2824202671ab5ef9a9895e48c35b018b62f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test(expected = ForbiddenException.class)\n  public void fail_when_no_sufficent_privilege_on_file_key() throws Exception {\n    userSessionRule.addProjectUuidPermissions(UserRole.USER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(), TestFile1.newDto());\n    db.getSession().commit();\n    ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_FILE_KEY, TestFile1.KEY).execute();\n  }","id":18997,"modified_method":"@Test(expected = ForbiddenException.class)\n  public void fail_when_no_sufficent_privilege_on_file_key() throws Exception {\n    userSessionRule.addProjectUuidPermissions(UserRole.USER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(), TestFile1.dto());\n    db.getSession().commit();\n    ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_FILE_KEY, TestFile1.KEY).execute();\n  }","commit_id":"4942f2824202671ab5ef9a9895e48c35b018b62f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void list_based_on_test_uuid() throws Exception {\n    userSessionRule.addProjectUuidPermissions(UserRole.CODEVIEWER, TestFile1.PROJECT_UUID);\n\n    dbClient.componentDao().insert(db.getSession(), TestFile1.newDto());\n    db.getSession().commit();\n\n    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE,\n      new TestDoc()\n        .setUuid(TestFile1.UUID)\n        .setProjectUuid(TestFile1.PROJECT_UUID)\n        .setName(TestFile1.NAME)\n        .setFileUuid(TestFile1.FILE_UUID)\n        .setDurationInMs(TestFile1.DURATION_IN_MS)\n        .setStatus(TestFile1.STATUS)\n        .setMessage(TestFile1.MESSAGE)\n        .setCoveredFiles(TestFile1.COVERED_FILES)\n        .setStackTrace(TestFile1.STACKTRACE)\n    );\n\n    WsTester.TestRequest request = ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_ID, TestFile1.UUID);\n\n    request.execute().assertJson(getClass(), \"list-test-uuid.json\");\n  }","id":18998,"modified_method":"@Test\n  public void list_based_on_test_uuid() throws Exception {\n    userSessionRule.addProjectUuidPermissions(UserRole.CODEVIEWER, TestFile1.PROJECT_UUID);\n\n    dbClient.componentDao().insert(db.getSession(), TestFile1.dto());\n    db.getSession().commit();\n\n    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE, TestFile1.doc());\n\n    WsTester.TestRequest request = ws.newGetRequest(\"api/tests\", \"list\").setParam(ListAction.TEST_ID, TestFile1.UUID);\n\n    request.execute().assertJson(getClass(), \"list-test-uuid.json\");\n  }","commit_id":"4942f2824202671ab5ef9a9895e48c35b018b62f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void list_based_on_source_file_uuid_and_line_number() throws Exception {\n    String mainFileUuid = \"MAIN-FILE-UUID\";\n    userSessionRule.addProjectUuidPermissions(UserRole.CODEVIEWER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(),\n      new ComponentDto()\n        .setUuid(TestFile1.FILE_UUID)\n        .setLongName(TestFile1.LONG_NAME)\n        .setKey(TestFile1.KEY)\n        .setProjectUuid(TestFile1.PROJECT_UUID),\n      new ComponentDto()\n        .setUuid(TestFile2.FILE_UUID)\n        .setLongName(TestFile2.LONG_NAME)\n        .setProjectUuid(TestFile2.PROJECT_UUID)\n        .setKey(TestFile2.KEY),\n      new ComponentDto()\n        .setUuid(mainFileUuid)\n        .setProjectUuid(TestFile1.PROJECT_UUID)\n    );\n    db.getSession().commit();\n\n    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE,\n      new TestDoc()\n        .setUuid(TestFile1.UUID)\n        .setProjectUuid(TestFile1.PROJECT_UUID)\n        .setName(TestFile1.NAME)\n        .setFileUuid(TestFile1.FILE_UUID)\n        .setDurationInMs(TestFile1.DURATION_IN_MS)\n        .setStatus(TestFile1.STATUS)\n        .setMessage(TestFile1.MESSAGE)\n        .setCoveredFiles(TestFile1.COVERED_FILES)\n        .setStackTrace(TestFile1.STACKTRACE),\n      new TestDoc()\n        .setUuid(TestFile2.UUID)\n        .setProjectUuid(TestFile2.PROJECT_UUID)\n        .setName(TestFile2.NAME)\n        .setFileUuid(TestFile2.FILE_UUID)\n        .setDurationInMs(TestFile2.DURATION_IN_MS)\n        .setStatus(TestFile2.STATUS)\n        .setStackTrace(TestFile2.STATUS)\n        .setMessage(TestFile2.MESSAGE)\n        .setCoveredFiles(TestFile2.COVERED_FILES)\n        .setStackTrace(TestFile2.STACKTRACE));\n\n    WsTester.TestRequest request = ws.newGetRequest(\"api/tests\", \"list\")\n      .setParam(ListAction.SOURCE_FILE_ID, mainFileUuid)\n      .setParam(ListAction.SOURCE_FILE_LINE_NUMBER, \"10\");\n\n    request.execute().assertJson(getClass(), \"list-main-file.json\");\n  }","id":18999,"modified_method":"@Test\n  public void list_based_on_source_file_uuid_and_line_number() throws Exception {\n    String mainFileUuid = \"MAIN-FILE-UUID\";\n    userSessionRule.addProjectUuidPermissions(UserRole.CODEVIEWER, TestFile1.PROJECT_UUID);\n    dbClient.componentDao().insert(db.getSession(),\n      TestFile1.dto(),\n      TestFile2.dto(),\n      new ComponentDto()\n        .setUuid(mainFileUuid)\n        .setProjectUuid(TestFile1.PROJECT_UUID));\n    db.getSession().commit();\n\n    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE,\n      TestFile1.doc(),\n      TestFile2.doc());\n\n    WsTester.TestRequest request = ws.newGetRequest(\"api/tests\", \"list\")\n      .setParam(ListAction.SOURCE_FILE_ID, mainFileUuid)\n      .setParam(ListAction.SOURCE_FILE_LINE_NUMBER, \"10\");\n\n    request.execute().assertJson(getClass(), \"list-main-file.json\");\n  }","commit_id":"4942f2824202671ab5ef9a9895e48c35b018b62f","url":"https://github.com/SonarSource/sonarqube"}]